; ModuleID = 'dbxout.c'
source_filename = "dbxout.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void ()*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i8 (%union.tree_node*)*, void (i32, i8*, i32, i8)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)*, void (i32)*, void (%struct.rtx_def*)*, void ()*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void (i32)*, void (%union.tree_node*, %union.tree_node*)*, i32 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.typeinfo = type { i32, i32, i32 }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct.diagnostic_info = type opaque
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.dbx_file = type { %struct.dbx_file*, i32, i32, i32, i8*, %struct.dbx_file* }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.tree_binfo = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_none }
%struct.VEC_tree_none = type { %struct.VEC_tree_base }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.var_ann_d = type opaque
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }

@dbx_debug_hooks = dso_local constant %struct.gcc_debug_hooks { void (i8*)* @dbxout_init, void (i8*)* @dbxout_finish, void ()* @debug_nothing_void, void (i32, i8*)* @debug_nothing_int_charstar, void (i32, i8*)* @debug_nothing_int_charstar, void (i32, i8*)* @dbxout_start_source_file, void (i32)* @dbxout_end_source_file, void (i32, i32)* @dbxout_begin_block, void (i32, i32)* @dbxout_end_block, i8 (%union.tree_node*)* @debug_true_const_tree, void (i32, i8*, i32, i8)* @dbxout_source_line, void (i32, i8*)* @dbxout_begin_prologue, void (i32, i8*)* @debug_nothing_int_charstar, void (i32, i8*)* @debug_nothing_int_charstar, void (%union.tree_node*)* @dbxout_begin_function, void (i32)* @debug_nothing_int, void (%union.tree_node*)* @dbxout_function_decl, void (%union.tree_node*)* @dbxout_global_decl, void (%union.tree_node*, i32)* @dbxout_type_decl, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)* @debug_nothing_tree_tree_tree_bool, void (%union.tree_node*)* @debug_nothing_tree, void (%union.tree_node*)* @debug_nothing_tree, void (%struct.rtx_def*)* @debug_nothing_rtx, void (i32)* @dbxout_handle_pch, void (%struct.rtx_def*)* @debug_nothing_rtx, void ()* @debug_nothing_void, void (%union.tree_node*)* @debug_nothing_tree, void (%union.tree_node*, i32)* @debug_nothing_tree_int, void (%struct.rtx_def*, %struct.rtx_def*)* @debug_nothing_rtx_rtx, void (i32)* @debug_nothing_uid, void (%union.tree_node*, %union.tree_node*)* @debug_nothing_tree_tree, i32 0 }, align 8, !dbg !0
@asm_out_file = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [3 x i8] c"0\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.2 = private unnamed_addr constant [9 x i8] c"\09.stabd\09\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c",0,\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"\09.stabn\09\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c",0,0,\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"\09.stabs\09\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"\22\22,\00", align 1
@debug_nesting = external dso_local global i32, align 4
@flag_debug_only_used_symbols = external dso_local global i32, align 4
@typevec = internal global %struct.typeinfo* null, align 8, !dbg !2163
@preinit_symbols = internal global %union.tree_node* null, align 8, !dbg !2169
@tree_code_type = external dso_local constant [0 x i32], align 4
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@current_function_decl = external dso_local global %union.tree_node*, align 8
@stabstr_ob = internal global %struct.obstack zeroinitializer, align 8, !dbg !2181
@.str.8 = private unnamed_addr constant [3 x i8] c":F\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c":f\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@use_gnu_debug_info_extensions = external dso_local global i8, align 1
@.str.10 = private unnamed_addr constant [3 x i8] c":T\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c" :T\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"dbxout.c\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"=i\00", align 1
@symbol_queue_index = external dso_local global i32, align 4
@svr4_dbx_register_map = external dso_local constant [53 x i32], align 16
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@rtx_class = external dso_local constant [139 x i32], align 16
@.str.15 = private unnamed_addr constant [8 x i8] c"(anon):\00", align 1
@lastfile = internal global i8* null, align 8, !dbg !2177
@gt_ggc_r_gt_dbxout_h = dso_local constant [4 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i8** @lastfile to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_S, void (i8*)* @gt_pch_n_S }, %struct.ggc_root_tab { i8* bitcast (%union.tree_node** @preinit_symbols to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { i8* bitcast (%struct.typeinfo** @typevec to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_ma_typevec, void (i8*)* @gt_pch_na_typevec }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2144
@lastfile_is_base = internal global i32 0, align 4, !dbg !2179
@source_label_number = internal global i32 1, align 4, !dbg !2202
@dbxout_source_line_counter = internal global i32 0, align 4, !dbg !2175
@scope_labelno = internal global i32 0, align 4, !dbg !2173
@next_file_number = internal global i32 0, align 4, !dbg !2171
@next_type_number = internal global i32 0, align 4, !dbg !2167
@typevec_len = internal global i32 0, align 4, !dbg !2165
@gt_pch_rs_gt_dbxout_h = dso_local constant [8 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i32* @lastfile_is_base to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @source_label_number to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @dbxout_source_line_counter to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @scope_labelno to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @next_file_number to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @next_type_number to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @typevec_len to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2158
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.16 = private unnamed_addr constant [6 x i8] c"Ltext\00", align 1
@dbxout_init.cwd = internal global i8* null, align 8, !dbg !2183
@.str.17 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@text_section = external dso_local global %union.section*, align 8
@.str.18 = private unnamed_addr constant [15 x i8] c"gcc2_compiled.\00", align 1
@base_input_file = internal global i8* null, align 8, !dbg !2189
@current_file = internal global %struct.dbx_file* null, align 8, !dbg !2191
@.str.19 = private unnamed_addr constant [6 x i8] c"GNU C\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"GNU C++\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"GNU F77\00", align 1
@.str.22 = private unnamed_addr constant [12 x i8] c"GNU Fortran\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"GNU Pascal\00", align 1
@.str.24 = private unnamed_addr constant [16 x i8] c"GNU Objective-C\00", align 1
@.str.25 = private unnamed_addr constant [18 x i8] c"GNU Objective-C++\00", align 1
@pending_bincls = internal global i32 0, align 4, !dbg !2193
@.str.26 = private unnamed_addr constant [5 x i8] c"LFBB\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"LM\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"LBB\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"LBE\00", align 1
@debug_info_level = external dso_local global i32, align 4
@.str.30 = private unnamed_addr constant [7 x i8] c"Lscope\00", align 1
@flag_reorder_blocks_and_partition = external dso_local global i32, align 4
@x_rtl = external dso_local global %struct.rtl_data, align 8
@.str.31 = private unnamed_addr constant [7 x i8] c"Letext\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@stabstr_last_contin_point = internal global i64 0, align 8, !dbg !2195
@dbxout_type.anonymous_type_number = internal global i32 0, align 4, !dbg !2197
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@.str.32 = private unnamed_addr constant [8 x i8] c";0;127;\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"@s\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c";0;\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c";-16;\00", align 1
@.str.36 = private unnamed_addr constant [18 x i8] c"eFalse:0,True:1,;\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"R3;\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"real:\00", align 1
@.str.39 = private unnamed_addr constant [7 x i8] c";imag:\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c";;\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c";@S;S\00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c"@V;\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"@S;\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"ar\00", align 1
@.str.45 = private unnamed_addr constant [7 x i8] c";0;-1;\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"xs\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"xu\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"$$\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"~%\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"xe\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"-1;\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c",0,0;\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"\22,\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"$real\00", align 1
@.str.56 = private unnamed_addr constant [6 x i8] c"$imag\00", align 1
@.str.57 = private unnamed_addr constant [7 x i8] c"(anon)\00", align 1
@.str.58 = private unnamed_addr constant [60 x i8] c"common symbol debug info is not structured as symbol+offset\00", align 1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_init(i8* %input_file_name) #0 !dbg !2185 {
entry:
  %input_file_name.addr = alloca i8*, align 8
  %ltext_label_name = alloca [100 x i8], align 16
  %used_ltext_label_name = alloca i8, align 1
  %syms = alloca %union.tree_node*, align 8
  %mapped_name = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  store i8* %input_file_name, i8** %input_file_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input_file_name.addr, metadata !2285, metadata !DIExpression()), !dbg !2286
  call void @llvm.dbg.declare(metadata [100 x i8]* %ltext_label_name, metadata !2287, metadata !DIExpression()), !dbg !2291
  call void @llvm.dbg.declare(metadata i8* %used_ltext_label_name, metadata !2292, metadata !DIExpression()), !dbg !2293
  store i8 0, i8* %used_ltext_label_name, align 1, !dbg !2293
  call void @llvm.dbg.declare(metadata %union.tree_node** %syms, metadata !2294, metadata !DIExpression()), !dbg !2295
  %0 = load %union.tree_node* ()*, %union.tree_node* ()** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 2), align 8, !dbg !2296
  %call = call %union.tree_node* %0(), !dbg !2297
  store %union.tree_node* %call, %union.tree_node** %syms, align 8, !dbg !2295
  call void @llvm.dbg.declare(metadata i8** %mapped_name, metadata !2298, metadata !DIExpression()), !dbg !2299
  store i32 100, i32* @typevec_len, align 4, !dbg !2300
  %1 = load i32, i32* @typevec_len, align 4, !dbg !2301
  %conv = sext i32 %1 to i64, !dbg !2301
  %mul = mul i64 %conv, 12, !dbg !2301
  %call1 = call i8* @ggc_alloc_cleared_stat(i64 %mul), !dbg !2301
  %2 = bitcast i8* %call1 to %struct.typeinfo*, !dbg !2301
  store %struct.typeinfo* %2, %struct.typeinfo** @typevec, align 8, !dbg !2302
  %call2 = call i32 @_obstack_begin(%struct.obstack* @stabstr_ob, i32 0, i32 1, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !2303
  br label %do.body, !dbg !2304

do.body:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %ltext_label_name, i64 0, i64 0, !dbg !2305
  %call3 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0), i32 0), !dbg !2305
  br label %do.end, !dbg !2305

do.end:                                           ; preds = %do.body
  %3 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !2307
  %conv4 = zext i8 %3 to i32, !dbg !2307
  %tobool = icmp ne i32 %conv4, 0, !dbg !2307
  br i1 %tobool, label %if.then, label %if.end23, !dbg !2309

if.then:                                          ; preds = %do.end
  %4 = load i8*, i8** @dbxout_init.cwd, align 8, !dbg !2310
  %tobool5 = icmp ne i8* %4, null, !dbg !2310
  br i1 %tobool5, label %if.end20, label %if.then6, !dbg !2313

if.then6:                                         ; preds = %if.then
  %call7 = call i8* @get_src_pwd(), !dbg !2314
  store i8* %call7, i8** @dbxout_init.cwd, align 8, !dbg !2316
  %5 = load i8*, i8** @dbxout_init.cwd, align 8, !dbg !2317
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0, !dbg !2317
  %6 = load i8, i8* %arrayidx, align 1, !dbg !2317
  %conv8 = sext i8 %6 to i32, !dbg !2317
  %cmp = icmp eq i32 %conv8, 0, !dbg !2319
  br i1 %cmp, label %if.then10, label %if.else, !dbg !2320

if.then10:                                        ; preds = %if.then6
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i8** @dbxout_init.cwd, align 8, !dbg !2321
  br label %if.end18, !dbg !2322

if.else:                                          ; preds = %if.then6
  %7 = load i8*, i8** @dbxout_init.cwd, align 8, !dbg !2323
  %8 = load i8*, i8** @dbxout_init.cwd, align 8, !dbg !2323
  %call11 = call i64 @strlen(i8* %8), !dbg !2323
  %sub = sub i64 %call11, 1, !dbg !2323
  %arrayidx12 = getelementptr inbounds i8, i8* %7, i64 %sub, !dbg !2323
  %9 = load i8, i8* %arrayidx12, align 1, !dbg !2323
  %conv13 = sext i8 %9 to i32, !dbg !2323
  %cmp14 = icmp eq i32 %conv13, 47, !dbg !2323
  br i1 %cmp14, label %if.end, label %if.then16, !dbg !2325

if.then16:                                        ; preds = %if.else
  %10 = load i8*, i8** @dbxout_init.cwd, align 8, !dbg !2326
  %call17 = call i8* (i8*, ...) @concat(i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i8* null), !dbg !2327
  store i8* %call17, i8** @dbxout_init.cwd, align 8, !dbg !2328
  br label %if.end, !dbg !2329

if.end:                                           ; preds = %if.then16, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then10
  %11 = load i8*, i8** @dbxout_init.cwd, align 8, !dbg !2330
  %call19 = call i8* @remap_debug_filename(i8* %11), !dbg !2331
  store i8* %call19, i8** @dbxout_init.cwd, align 8, !dbg !2332
  br label %if.end20, !dbg !2333

if.end20:                                         ; preds = %if.end18, %if.then
  %12 = load i8*, i8** @dbxout_init.cwd, align 8, !dbg !2334
  %call21 = call i32 @get_lang_number(), !dbg !2335
  call void @dbxout_begin_simple_stabs_desc(i8* %12, i32 100, i32 %call21), !dbg !2336
  %arraydecay22 = getelementptr inbounds [100 x i8], [100 x i8]* %ltext_label_name, i64 0, i64 0, !dbg !2337
  call void @dbxout_stab_value_label(i8* %arraydecay22), !dbg !2338
  store i8 1, i8* %used_ltext_label_name, align 1, !dbg !2339
  br label %if.end23, !dbg !2340

if.end23:                                         ; preds = %if.end20, %do.end
  %13 = load i8*, i8** %input_file_name.addr, align 8, !dbg !2341
  %call24 = call i8* @remap_debug_filename(i8* %13), !dbg !2342
  store i8* %call24, i8** %mapped_name, align 8, !dbg !2343
  %14 = load i8*, i8** %mapped_name, align 8, !dbg !2344
  %call25 = call i32 @get_lang_number(), !dbg !2345
  call void @dbxout_begin_simple_stabs_desc(i8* %14, i32 100, i32 %call25), !dbg !2346
  %arraydecay26 = getelementptr inbounds [100 x i8], [100 x i8]* %ltext_label_name, i64 0, i64 0, !dbg !2347
  call void @dbxout_stab_value_label(i8* %arraydecay26), !dbg !2348
  store i8 1, i8* %used_ltext_label_name, align 1, !dbg !2349
  %15 = load i8, i8* %used_ltext_label_name, align 1, !dbg !2350
  %tobool27 = icmp ne i8 %15, 0, !dbg !2350
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !2352

if.then28:                                        ; preds = %if.end23
  %16 = load %union.section*, %union.section** @text_section, align 8, !dbg !2353
  call void @switch_to_section(%union.section* %16), !dbg !2355
  %17 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !2356
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2357
  call void %17(%struct._IO_FILE* %18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0), i64 0), !dbg !2358
  br label %if.end29, !dbg !2359

if.end29:                                         ; preds = %if.then28, %if.end23
  call void @dbxout_begin_simple_stabs(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i64 0, i64 0), i32 60), !dbg !2360
  call void @dbxout_stab_value_zero(), !dbg !2361
  %19 = load i8*, i8** %input_file_name.addr, align 8, !dbg !2362
  store i8* %19, i8** @lastfile, align 8, !dbg !2363
  store i8* %19, i8** @base_input_file, align 8, !dbg !2364
  store i32 1, i32* @next_type_number, align 4, !dbg !2365
  %call30 = call i8* @xmalloc(i64 40), !dbg !2366
  %20 = bitcast i8* %call30 to %struct.dbx_file*, !dbg !2366
  store %struct.dbx_file* %20, %struct.dbx_file** @current_file, align 8, !dbg !2367
  %21 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2368
  %next = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %21, i32 0, i32 0, !dbg !2369
  store %struct.dbx_file* null, %struct.dbx_file** %next, align 8, !dbg !2370
  %22 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2371
  %file_number = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %22, i32 0, i32 1, !dbg !2372
  store i32 0, i32* %file_number, align 8, !dbg !2373
  %23 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2374
  %next_type_number = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %23, i32 0, i32 2, !dbg !2375
  store i32 1, i32* %next_type_number, align 4, !dbg !2376
  store i32 1, i32* @next_file_number, align 4, !dbg !2377
  %24 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2378
  %prev = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %24, i32 0, i32 5, !dbg !2379
  store %struct.dbx_file* null, %struct.dbx_file** %prev, align 8, !dbg !2380
  %25 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2381
  %bincl_status = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %25, i32 0, i32 3, !dbg !2382
  store i32 0, i32* %bincl_status, align 8, !dbg !2383
  %26 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2384
  %pending_bincl_name = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %26, i32 0, i32 4, !dbg !2385
  store i8* null, i8** %pending_bincl_name, align 8, !dbg !2386
  %27 = load %union.tree_node*, %union.tree_node** %syms, align 8, !dbg !2387
  call void @dbxout_typedefs(%union.tree_node* %27), !dbg !2388
  %28 = load %union.tree_node*, %union.tree_node** @preinit_symbols, align 8, !dbg !2389
  %tobool31 = icmp ne %union.tree_node* %28, null, !dbg !2389
  br i1 %tobool31, label %if.then32, label %if.end36, !dbg !2391

if.then32:                                        ; preds = %if.end29
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !2392, metadata !DIExpression()), !dbg !2394
  %29 = load %union.tree_node*, %union.tree_node** @preinit_symbols, align 8, !dbg !2395
  %call33 = call %union.tree_node* @nreverse(%union.tree_node* %29), !dbg !2397
  store %union.tree_node* %call33, %union.tree_node** %t, align 8, !dbg !2398
  br label %for.cond, !dbg !2399

for.cond:                                         ; preds = %for.inc, %if.then32
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2400
  %tobool34 = icmp ne %union.tree_node* %30, null, !dbg !2402
  br i1 %tobool34, label %for.body, label %for.end, !dbg !2402

for.body:                                         ; preds = %for.cond
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2403
  %list = bitcast %union.tree_node* %31 to %struct.tree_list*, !dbg !2403
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !2403
  %32 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !2403
  %call35 = call i32 @dbxout_symbol(%union.tree_node* %32, i32 0), !dbg !2404
  br label %for.inc, !dbg !2404

for.inc:                                          ; preds = %for.body
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2405
  %common = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !2405
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !2405
  %34 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2405
  store %union.tree_node* %34, %union.tree_node** %t, align 8, !dbg !2406
  br label %for.cond, !dbg !2407, !llvm.loop !2408

for.end:                                          ; preds = %for.cond
  store %union.tree_node* null, %union.tree_node** @preinit_symbols, align 8, !dbg !2410
  br label %if.end36, !dbg !2411

if.end36:                                         ; preds = %for.end, %if.end29
  ret void, !dbg !2412
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_finish(i8* %filename) #0 !dbg !2413 {
entry:
  %filename.addr = alloca i8*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !2414, metadata !DIExpression()), !dbg !2415
  %0 = load %union.section*, %union.section** @text_section, align 8, !dbg !2416
  call void @switch_to_section(%union.section* %0), !dbg !2418
  call void @dbxout_begin_empty_stabs(i32 100), !dbg !2419
  call void @dbxout_stab_value_internal_label(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i64 0, i64 0), i32* null), !dbg !2420
  call void @debug_free_queue(), !dbg !2421
  ret void, !dbg !2422
}

declare dso_local void @debug_nothing_void() #1

declare dso_local void @debug_nothing_int_charstar(i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_start_source_file(i32 %line, i8* %filename) #0 !dbg !2423 {
entry:
  %line.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %n = alloca %struct.dbx_file*, align 8
  store i32 %line, i32* %line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %line.addr, metadata !2424, metadata !DIExpression()), !dbg !2425
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !2426, metadata !DIExpression()), !dbg !2427
  call void @llvm.dbg.declare(metadata %struct.dbx_file** %n, metadata !2428, metadata !DIExpression()), !dbg !2429
  %call = call i8* @xmalloc(i64 40), !dbg !2430
  %0 = bitcast i8* %call to %struct.dbx_file*, !dbg !2430
  store %struct.dbx_file* %0, %struct.dbx_file** %n, align 8, !dbg !2429
  %1 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2431
  %2 = load %struct.dbx_file*, %struct.dbx_file** %n, align 8, !dbg !2432
  %next = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %2, i32 0, i32 0, !dbg !2433
  store %struct.dbx_file* %1, %struct.dbx_file** %next, align 8, !dbg !2434
  %3 = load %struct.dbx_file*, %struct.dbx_file** %n, align 8, !dbg !2435
  %next_type_number = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %3, i32 0, i32 2, !dbg !2436
  store i32 1, i32* %next_type_number, align 4, !dbg !2437
  %4 = load %struct.dbx_file*, %struct.dbx_file** %n, align 8, !dbg !2438
  %file_number = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %4, i32 0, i32 1, !dbg !2439
  store i32 0, i32* %file_number, align 8, !dbg !2440
  %5 = load %struct.dbx_file*, %struct.dbx_file** %n, align 8, !dbg !2441
  %prev = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %5, i32 0, i32 5, !dbg !2442
  store %struct.dbx_file* null, %struct.dbx_file** %prev, align 8, !dbg !2443
  %6 = load %struct.dbx_file*, %struct.dbx_file** %n, align 8, !dbg !2444
  %7 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2445
  %prev1 = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %7, i32 0, i32 5, !dbg !2446
  store %struct.dbx_file* %6, %struct.dbx_file** %prev1, align 8, !dbg !2447
  %8 = load %struct.dbx_file*, %struct.dbx_file** %n, align 8, !dbg !2448
  %bincl_status = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %8, i32 0, i32 3, !dbg !2449
  store i32 1, i32* %bincl_status, align 8, !dbg !2450
  %9 = load i8*, i8** %filename.addr, align 8, !dbg !2451
  %call2 = call i8* @remap_debug_filename(i8* %9), !dbg !2452
  %10 = load %struct.dbx_file*, %struct.dbx_file** %n, align 8, !dbg !2453
  %pending_bincl_name = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %10, i32 0, i32 4, !dbg !2454
  store i8* %call2, i8** %pending_bincl_name, align 8, !dbg !2455
  store i32 1, i32* @pending_bincls, align 4, !dbg !2456
  %11 = load %struct.dbx_file*, %struct.dbx_file** %n, align 8, !dbg !2457
  store %struct.dbx_file* %11, %struct.dbx_file** @current_file, align 8, !dbg !2458
  ret void, !dbg !2459
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_end_source_file(i32 %line) #0 !dbg !2460 {
entry:
  %line.addr = alloca i32, align 4
  store i32 %line, i32* %line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %line.addr, metadata !2461, metadata !DIExpression()), !dbg !2462
  %0 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2463
  %bincl_status = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %0, i32 0, i32 3, !dbg !2465
  %1 = load i32, i32* %bincl_status, align 8, !dbg !2465
  %cmp = icmp eq i32 %1, 2, !dbg !2466
  br i1 %cmp, label %if.then, label %if.end, !dbg !2467

if.then:                                          ; preds = %entry
  call void @dbxout_begin_stabn(i32 162), !dbg !2468
  call void @dbxout_stab_value_zero(), !dbg !2470
  br label %if.end, !dbg !2471

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2472
  %bincl_status1 = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %2, i32 0, i32 3, !dbg !2473
  store i32 0, i32* %bincl_status1, align 8, !dbg !2474
  %3 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !2475
  %next = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %3, i32 0, i32 0, !dbg !2476
  %4 = load %struct.dbx_file*, %struct.dbx_file** %next, align 8, !dbg !2476
  store %struct.dbx_file* %4, %struct.dbx_file** @current_file, align 8, !dbg !2477
  ret void, !dbg !2478
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_begin_block(i32 %line, i32 %n) #0 !dbg !2479 {
entry:
  %line.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %line, i32* %line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %line.addr, metadata !2480, metadata !DIExpression()), !dbg !2481
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2482, metadata !DIExpression()), !dbg !2483
  call void @emit_pending_bincls_if_required(), !dbg !2484
  %0 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !2485
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2486
  %2 = load i32, i32* %n.addr, align 4, !dbg !2487
  %conv = zext i32 %2 to i64, !dbg !2487
  call void %0(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i64 0, i64 0), i64 %conv), !dbg !2488
  ret void, !dbg !2489
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_end_block(i32 %line, i32 %n) #0 !dbg !2490 {
entry:
  %line.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %line, i32* %line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %line.addr, metadata !2491, metadata !DIExpression()), !dbg !2492
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2493, metadata !DIExpression()), !dbg !2494
  call void @emit_pending_bincls_if_required(), !dbg !2495
  %0 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !2496
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2497
  %2 = load i32, i32* %n.addr, align 4, !dbg !2498
  %conv = zext i32 %2 to i64, !dbg !2498
  call void %0(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0), i64 %conv), !dbg !2499
  ret void, !dbg !2500
}

declare dso_local zeroext i8 @debug_true_const_tree(%union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_source_line(i32 %lineno, i8* %filename, i32 %discriminator, i8 zeroext %is_stmt) #0 !dbg !2501 {
entry:
  %lineno.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %discriminator.addr = alloca i32, align 4
  %is_stmt.addr = alloca i8, align 1
  %begin_label = alloca [20 x i8], align 16
  store i32 %lineno, i32* %lineno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lineno.addr, metadata !2502, metadata !DIExpression()), !dbg !2503
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !2504, metadata !DIExpression()), !dbg !2505
  store i32 %discriminator, i32* %discriminator.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %discriminator.addr, metadata !2506, metadata !DIExpression()), !dbg !2507
  store i8 %is_stmt, i8* %is_stmt.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_stmt.addr, metadata !2508, metadata !DIExpression()), !dbg !2509
  %0 = load i8*, i8** %filename.addr, align 8, !dbg !2510
  call void @dbxout_source_file(i8* %0), !dbg !2511
  call void @llvm.dbg.declare(metadata [20 x i8]* %begin_label, metadata !2512, metadata !DIExpression()), !dbg !2518
  %1 = load i32, i32* %lineno.addr, align 4, !dbg !2519
  call void @dbxout_begin_stabn_sline(i32 %1), !dbg !2520
  br label %do.body, !dbg !2521

do.body:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %begin_label, i64 0, i64 0, !dbg !2522
  %2 = load i32, i32* @scope_labelno, align 4, !dbg !2522
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i64 0, i64 0), i32 %2), !dbg !2522
  br label %do.end, !dbg !2522

do.end:                                           ; preds = %do.body
  %arraydecay1 = getelementptr inbounds [20 x i8], [20 x i8]* %begin_label, i64 0, i64 0, !dbg !2524
  call void @dbxout_stab_value_internal_label_diff(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0), i32* @dbxout_source_line_counter, i8* %arraydecay1), !dbg !2525
  ret void, !dbg !2526
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_begin_prologue(i32 %lineno, i8* %filename) #0 !dbg !2527 {
entry:
  %lineno.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  store i32 %lineno, i32* %lineno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lineno.addr, metadata !2528, metadata !DIExpression()), !dbg !2529
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !2530, metadata !DIExpression()), !dbg !2531
  %0 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !2532
  %conv = zext i8 %0 to i32, !dbg !2532
  %tobool = icmp ne i32 %conv, 0, !dbg !2532
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2534

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_debug_only_used_symbols, align 4, !dbg !2535
  %tobool1 = icmp ne i32 %1, 0, !dbg !2535
  br i1 %tobool1, label %if.end, label %if.then, !dbg !2536

if.then:                                          ; preds = %land.lhs.true
  call void @dbxout_stabd(i32 46, i32 0), !dbg !2537
  br label %if.end, !dbg !2537

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %2 = load i32, i32* @scope_labelno, align 4, !dbg !2538
  %inc = add nsw i32 %2, 1, !dbg !2538
  store i32 %inc, i32* @scope_labelno, align 4, !dbg !2538
  %3 = load i32, i32* %lineno.addr, align 4, !dbg !2539
  %4 = load i8*, i8** %filename.addr, align 8, !dbg !2540
  call void @dbxout_source_line(i32 %3, i8* %4, i32 0, i8 zeroext 1), !dbg !2541
  call void @emit_pending_bincls_if_required(), !dbg !2542
  %5 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !2543
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2544
  %7 = load i32, i32* @scope_labelno, align 4, !dbg !2545
  %conv2 = sext i32 %7 to i64, !dbg !2545
  call void %5(%struct._IO_FILE* %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i64 0, i64 0), i64 %conv2), !dbg !2546
  ret void, !dbg !2547
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_begin_function(%union.tree_node* %decl) #0 !dbg !2548 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %saved_tree_used1 = alloca i32, align 4
  %saved_tree_used2 = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !2549, metadata !DIExpression()), !dbg !2550
  call void @llvm.dbg.declare(metadata i32* %saved_tree_used1, metadata !2551, metadata !DIExpression()), !dbg !2552
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2553
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2553
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2553
  %bf.load = load i64, i64* %1, align 8, !dbg !2553
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !2553
  %bf.clear = and i64 %bf.lshr, 1, !dbg !2553
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2553
  store i32 %bf.cast, i32* %saved_tree_used1, align 4, !dbg !2554
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2555
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !2555
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !2555
  %bf.load2 = load i64, i64* %3, align 8, !dbg !2556
  %bf.clear3 = and i64 %bf.load2, -16777217, !dbg !2556
  %bf.set = or i64 %bf.clear3, 16777216, !dbg !2556
  store i64 %bf.set, i64* %3, align 8, !dbg !2556
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2557
  %decl_non_common = bitcast %union.tree_node* %4 to %struct.tree_decl_non_common*, !dbg !2557
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !2557
  %5 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !2557
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !2557
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !2557
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !2557
  %cmp = icmp ne %union.tree_node* %6, null, !dbg !2559
  br i1 %cmp, label %if.then, label %if.else, !dbg !2560

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %saved_tree_used2, metadata !2561, metadata !DIExpression()), !dbg !2563
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2564
  %decl_non_common4 = bitcast %union.tree_node* %7 to %struct.tree_decl_non_common*, !dbg !2564
  %result5 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common4, i32 0, i32 3, !dbg !2564
  %8 = load %union.tree_node*, %union.tree_node** %result5, align 8, !dbg !2564
  %base6 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !2564
  %9 = bitcast %struct.tree_base* %base6 to i64*, !dbg !2564
  %bf.load7 = load i64, i64* %9, align 8, !dbg !2564
  %bf.lshr8 = lshr i64 %bf.load7, 24, !dbg !2564
  %bf.clear9 = and i64 %bf.lshr8, 1, !dbg !2564
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !2564
  store i32 %bf.cast10, i32* %saved_tree_used2, align 4, !dbg !2563
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2565
  %decl_non_common11 = bitcast %union.tree_node* %10 to %struct.tree_decl_non_common*, !dbg !2565
  %result12 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common11, i32 0, i32 3, !dbg !2565
  %11 = load %union.tree_node*, %union.tree_node** %result12, align 8, !dbg !2565
  %base13 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !2565
  %12 = bitcast %struct.tree_base* %base13 to i64*, !dbg !2565
  %bf.load14 = load i64, i64* %12, align 8, !dbg !2566
  %bf.clear15 = and i64 %bf.load14, -16777217, !dbg !2566
  %bf.set16 = or i64 %bf.clear15, 16777216, !dbg !2566
  store i64 %bf.set16, i64* %12, align 8, !dbg !2566
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2567
  %call = call i32 @dbxout_symbol(%union.tree_node* %13, i32 0), !dbg !2568
  %14 = load i32, i32* %saved_tree_used2, align 4, !dbg !2569
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2570
  %decl_non_common17 = bitcast %union.tree_node* %15 to %struct.tree_decl_non_common*, !dbg !2570
  %result18 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common17, i32 0, i32 3, !dbg !2570
  %16 = load %union.tree_node*, %union.tree_node** %result18, align 8, !dbg !2570
  %base19 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2570
  %17 = bitcast %struct.tree_base* %base19 to i64*, !dbg !2570
  %18 = zext i32 %14 to i64, !dbg !2571
  %bf.load20 = load i64, i64* %17, align 8, !dbg !2571
  %bf.value = and i64 %18, 1, !dbg !2571
  %bf.shl = shl i64 %bf.value, 24, !dbg !2571
  %bf.clear21 = and i64 %bf.load20, -16777217, !dbg !2571
  %bf.set22 = or i64 %bf.clear21, %bf.shl, !dbg !2571
  store i64 %bf.set22, i64* %17, align 8, !dbg !2571
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !2571
  br label %if.end, !dbg !2572

if.else:                                          ; preds = %entry
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2573
  %call23 = call i32 @dbxout_symbol(%union.tree_node* %19, i32 0), !dbg !2574
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i32, i32* %saved_tree_used1, align 4, !dbg !2575
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2576
  %base24 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !2576
  %22 = bitcast %struct.tree_base* %base24 to i64*, !dbg !2576
  %23 = zext i32 %20 to i64, !dbg !2577
  %bf.load25 = load i64, i64* %22, align 8, !dbg !2577
  %bf.value26 = and i64 %23, 1, !dbg !2577
  %bf.shl27 = shl i64 %bf.value26, 24, !dbg !2577
  %bf.clear28 = and i64 %bf.load25, -16777217, !dbg !2577
  %bf.set29 = or i64 %bf.clear28, %bf.shl27, !dbg !2577
  store i64 %bf.set29, i64* %22, align 8, !dbg !2577
  %bf.result.cast30 = trunc i64 %bf.value26 to i32, !dbg !2577
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2578
  %decl_non_common31 = bitcast %union.tree_node* %24 to %struct.tree_decl_non_common*, !dbg !2578
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common31, i32 0, i32 2, !dbg !2578
  %25 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !2578
  call void @dbxout_parms(%union.tree_node* %25), !dbg !2579
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2580
  %decl_non_common32 = bitcast %union.tree_node* %26 to %struct.tree_decl_non_common*, !dbg !2580
  %result33 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common32, i32 0, i32 3, !dbg !2580
  %27 = load %union.tree_node*, %union.tree_node** %result33, align 8, !dbg !2580
  %decl_minimal34 = bitcast %union.tree_node* %27 to %struct.tree_decl_minimal*, !dbg !2580
  %name35 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal34, i32 0, i32 3, !dbg !2580
  %28 = load %union.tree_node*, %union.tree_node** %name35, align 8, !dbg !2580
  %cmp36 = icmp ne %union.tree_node* %28, null, !dbg !2582
  br i1 %cmp36, label %if.then37, label %if.end41, !dbg !2583

if.then37:                                        ; preds = %if.end
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2584
  %decl_non_common38 = bitcast %union.tree_node* %29 to %struct.tree_decl_non_common*, !dbg !2584
  %result39 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common38, i32 0, i32 3, !dbg !2584
  %30 = load %union.tree_node*, %union.tree_node** %result39, align 8, !dbg !2584
  %call40 = call i32 @dbxout_symbol(%union.tree_node* %30, i32 1), !dbg !2585
  br label %if.end41, !dbg !2585

if.end41:                                         ; preds = %if.then37, %if.end
  ret void, !dbg !2586
}

declare dso_local void @debug_nothing_int(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_function_decl(%union.tree_node* %decl) #0 !dbg !2587 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !2588, metadata !DIExpression()), !dbg !2589
  call void @emit_pending_bincls_if_required(), !dbg !2590
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2591
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !2591
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !2591
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !2591
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2592
  %decl_non_common = bitcast %union.tree_node* %2 to %struct.tree_decl_non_common*, !dbg !2592
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !2592
  %3 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !2592
  call void @dbxout_block(%union.tree_node* %1, i32 0, %union.tree_node* %3), !dbg !2593
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2594
  call void @dbxout_function_end(%union.tree_node* %4), !dbg !2595
  ret void, !dbg !2596
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_global_decl(%union.tree_node* %decl) #0 !dbg !2597 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %saved_tree_used = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !2598, metadata !DIExpression()), !dbg !2599
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2600
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2600
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2600
  %bf.load = load i64, i64* %1, align 8, !dbg !2600
  %bf.clear = and i64 %bf.load, 65535, !dbg !2600
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2600
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !2602
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2603

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2604
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !2604
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !2604
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !2604
  %bf.load1 = load i64, i64* %3, align 8, !dbg !2604
  %bf.lshr = lshr i64 %bf.load1, 25, !dbg !2604
  %bf.clear2 = and i64 %bf.lshr, 1, !dbg !2604
  %bf.cast3 = trunc i64 %bf.clear2 to i32, !dbg !2604
  %tobool = icmp ne i32 %bf.cast3, 0, !dbg !2604
  br i1 %tobool, label %if.end, label %if.then, !dbg !2605

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %saved_tree_used, metadata !2606, metadata !DIExpression()), !dbg !2608
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2609
  %base4 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !2609
  %5 = bitcast %struct.tree_base* %base4 to i64*, !dbg !2609
  %bf.load5 = load i64, i64* %5, align 8, !dbg !2609
  %bf.lshr6 = lshr i64 %bf.load5, 24, !dbg !2609
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !2609
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !2609
  store i32 %bf.cast8, i32* %saved_tree_used, align 4, !dbg !2608
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2610
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !2610
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !2610
  %bf.load10 = load i64, i64* %7, align 8, !dbg !2611
  %bf.clear11 = and i64 %bf.load10, -16777217, !dbg !2611
  %bf.set = or i64 %bf.clear11, 16777216, !dbg !2611
  store i64 %bf.set, i64* %7, align 8, !dbg !2611
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2612
  %call = call i32 @dbxout_symbol(%union.tree_node* %8, i32 0), !dbg !2613
  %9 = load i32, i32* %saved_tree_used, align 4, !dbg !2614
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2615
  %base12 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !2615
  %11 = bitcast %struct.tree_base* %base12 to i64*, !dbg !2615
  %12 = zext i32 %9 to i64, !dbg !2616
  %bf.load13 = load i64, i64* %11, align 8, !dbg !2616
  %bf.value = and i64 %12, 1, !dbg !2616
  %bf.shl = shl i64 %bf.value, 24, !dbg !2616
  %bf.clear14 = and i64 %bf.load13, -16777217, !dbg !2616
  %bf.set15 = or i64 %bf.clear14, %bf.shl, !dbg !2616
  store i64 %bf.set15, i64* %11, align 8, !dbg !2616
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !2616
  br label %if.end, !dbg !2617

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !2618
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_type_decl(%union.tree_node* %decl, i32 %local) #0 !dbg !2619 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %local.addr = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !2620, metadata !DIExpression()), !dbg !2621
  store i32 %local, i32* %local.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %local.addr, metadata !2622, metadata !DIExpression()), !dbg !2623
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2624
  %1 = load i32, i32* %local.addr, align 4, !dbg !2625
  %call = call i32 @dbxout_symbol(%union.tree_node* %0, i32 %1), !dbg !2626
  ret void, !dbg !2627
}

declare dso_local void @debug_nothing_tree_tree_tree_bool(%union.tree_node*, %union.tree_node*, %union.tree_node*, i8 zeroext) #1

declare dso_local void @debug_nothing_tree(%union.tree_node*) #1

declare dso_local void @debug_nothing_rtx(%struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_handle_pch(i32 %at_end) #0 !dbg !2628 {
entry:
  %at_end.addr = alloca i32, align 4
  store i32 %at_end, i32* %at_end.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %at_end.addr, metadata !2629, metadata !DIExpression()), !dbg !2630
  %0 = load i32, i32* %at_end.addr, align 4, !dbg !2631
  %tobool = icmp ne i32 %0, 0, !dbg !2631
  br i1 %tobool, label %if.else, label %if.then, !dbg !2633

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** @lastfile, align 8, !dbg !2634
  call void @dbxout_start_source_file(i32 0, i8* %1), !dbg !2636
  store i8* null, i8** @lastfile, align 8, !dbg !2637
  br label %if.end, !dbg !2638

if.else:                                          ; preds = %entry
  call void @dbxout_end_source_file(i32 0), !dbg !2639
  %2 = load i8*, i8** @lastfile, align 8, !dbg !2641
  %cmp = icmp eq i8* %2, null, !dbg !2642
  %conv = zext i1 %cmp to i32, !dbg !2642
  store i32 %conv, i32* @lastfile_is_base, align 4, !dbg !2643
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2644
}

declare dso_local void @debug_nothing_tree_int(%union.tree_node*, i32) #1

declare dso_local void @debug_nothing_rtx_rtx(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local void @debug_nothing_uid(i32) #1

declare dso_local void @debug_nothing_tree_tree(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_int(i32 %num) #0 !dbg !2645 {
entry:
  %num.addr = alloca i32, align 4
  %buf = alloca [64 x i8], align 16
  %p = alloca i8*, align 8
  %unum = alloca i32, align 4
  %digit = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !2646, metadata !DIExpression()), !dbg !2647
  call void @llvm.dbg.declare(metadata [64 x i8]* %buf, metadata !2648, metadata !DIExpression()), !dbg !2652
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2653, metadata !DIExpression()), !dbg !2654
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !2655
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 64, !dbg !2656
  store i8* %add.ptr, i8** %p, align 8, !dbg !2654
  call void @llvm.dbg.declare(metadata i32* %unum, metadata !2657, metadata !DIExpression()), !dbg !2658
  %0 = load i32, i32* %num.addr, align 4, !dbg !2659
  %cmp = icmp eq i32 %0, 0, !dbg !2661
  br i1 %cmp, label %if.then, label %if.end, !dbg !2662

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2663
  %call = call i32 @putc(i32 48, %struct._IO_FILE* %1), !dbg !2665
  br label %while.end, !dbg !2666

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %num.addr, align 4, !dbg !2667
  %cmp1 = icmp slt i32 %2, 0, !dbg !2669
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !2670

if.then2:                                         ; preds = %if.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2671
  %call3 = call i32 @putc(i32 45, %struct._IO_FILE* %3), !dbg !2673
  %4 = load i32, i32* %num.addr, align 4, !dbg !2674
  %sub = sub nsw i32 0, %4, !dbg !2675
  store i32 %sub, i32* %unum, align 4, !dbg !2676
  br label %if.end4, !dbg !2677

if.else:                                          ; preds = %if.end
  %5 = load i32, i32* %num.addr, align 4, !dbg !2678
  store i32 %5, i32* %unum, align 4, !dbg !2679
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.then2
  br label %do.body, !dbg !2680

do.body:                                          ; preds = %do.cond, %if.end4
  call void @llvm.dbg.declare(metadata i32* %digit, metadata !2681, metadata !DIExpression()), !dbg !2683
  %6 = load i32, i32* %unum, align 4, !dbg !2683
  %rem = urem i32 %6, 10, !dbg !2683
  store i32 %rem, i32* %digit, align 4, !dbg !2683
  %7 = load i32, i32* %unum, align 4, !dbg !2683
  %div = udiv i32 %7, 10, !dbg !2683
  store i32 %div, i32* %unum, align 4, !dbg !2683
  %8 = load i32, i32* %digit, align 4, !dbg !2683
  %add = add nsw i32 %8, 48, !dbg !2683
  %conv = trunc i32 %add to i8, !dbg !2683
  %9 = load i8*, i8** %p, align 8, !dbg !2683
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 -1, !dbg !2683
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !2683
  store i8 %conv, i8* %incdec.ptr, align 1, !dbg !2683
  br label %do.cond, !dbg !2683

do.cond:                                          ; preds = %do.body
  %10 = load i32, i32* %unum, align 4, !dbg !2680
  %cmp5 = icmp ugt i32 %10, 0, !dbg !2680
  br i1 %cmp5, label %do.body, label %do.end, !dbg !2683, !llvm.loop !2684

do.end:                                           ; preds = %do.cond
  br label %while.cond, !dbg !2685

while.cond:                                       ; preds = %while.body, %do.end
  %11 = load i8*, i8** %p, align 8, !dbg !2686
  %arraydecay7 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !2687
  %add.ptr8 = getelementptr inbounds i8, i8* %arraydecay7, i64 64, !dbg !2688
  %cmp9 = icmp ult i8* %11, %add.ptr8, !dbg !2689
  br i1 %cmp9, label %while.body, label %while.end, !dbg !2685

while.body:                                       ; preds = %while.cond
  %12 = load i8*, i8** %p, align 8, !dbg !2690
  %13 = load i8, i8* %12, align 1, !dbg !2692
  %conv11 = sext i8 %13 to i32, !dbg !2692
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2693
  %call12 = call i32 @putc(i32 %conv11, %struct._IO_FILE* %14), !dbg !2694
  %15 = load i8*, i8** %p, align 8, !dbg !2695
  %incdec.ptr13 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !2695
  store i8* %incdec.ptr13, i8** %p, align 8, !dbg !2695
  br label %while.cond, !dbg !2685, !llvm.loop !2696

while.end:                                        ; preds = %if.then, %while.cond
  ret void, !dbg !2698
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare dso_local i32 @putc(i32, %struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_stab_value_zero() #0 !dbg !2699 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2700
  %call = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !2701
  ret void, !dbg !2702
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_stab_value_label(i8* %label) #0 !dbg !2703 {
entry:
  %label.addr = alloca i8*, align 8
  store i8* %label, i8** %label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %label.addr, metadata !2704, metadata !DIExpression()), !dbg !2705
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2706
  %1 = load i8*, i8** %label.addr, align 8, !dbg !2707
  call void @assemble_name(%struct._IO_FILE* %0, i8* %1), !dbg !2708
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2709
  %call = call i32 @putc(i32 10, %struct._IO_FILE* %2), !dbg !2710
  ret void, !dbg !2711
}

declare dso_local void @assemble_name(%struct._IO_FILE*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_stab_value_label_diff(i8* %label, i8* %base) #0 !dbg !2712 {
entry:
  %label.addr = alloca i8*, align 8
  %base.addr = alloca i8*, align 8
  store i8* %label, i8** %label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %label.addr, metadata !2715, metadata !DIExpression()), !dbg !2716
  store i8* %base, i8** %base.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %base.addr, metadata !2717, metadata !DIExpression()), !dbg !2718
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2719
  %1 = load i8*, i8** %label.addr, align 8, !dbg !2720
  call void @assemble_name(%struct._IO_FILE* %0, i8* %1), !dbg !2721
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2722
  %call = call i32 @putc(i32 45, %struct._IO_FILE* %2), !dbg !2723
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2724
  %4 = load i8*, i8** %base.addr, align 8, !dbg !2725
  call void @assemble_name(%struct._IO_FILE* %3, i8* %4), !dbg !2726
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2727
  %call1 = call i32 @putc(i32 10, %struct._IO_FILE* %5), !dbg !2728
  ret void, !dbg !2729
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_stab_value_internal_label(i8* %stem, i32* %counterp) #0 !dbg !2730 {
entry:
  %stem.addr = alloca i8*, align 8
  %counterp.addr = alloca i32*, align 8
  %label = alloca [100 x i8], align 16
  %counter = alloca i32, align 4
  store i8* %stem, i8** %stem.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %stem.addr, metadata !2734, metadata !DIExpression()), !dbg !2735
  store i32* %counterp, i32** %counterp.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %counterp.addr, metadata !2736, metadata !DIExpression()), !dbg !2737
  call void @llvm.dbg.declare(metadata [100 x i8]* %label, metadata !2738, metadata !DIExpression()), !dbg !2739
  call void @llvm.dbg.declare(metadata i32* %counter, metadata !2740, metadata !DIExpression()), !dbg !2741
  %0 = load i32*, i32** %counterp.addr, align 8, !dbg !2742
  %tobool = icmp ne i32* %0, null, !dbg !2742
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2742

cond.true:                                        ; preds = %entry
  %1 = load i32*, i32** %counterp.addr, align 8, !dbg !2743
  %2 = load i32, i32* %1, align 4, !dbg !2744
  %inc = add nsw i32 %2, 1, !dbg !2744
  store i32 %inc, i32* %1, align 4, !dbg !2744
  br label %cond.end, !dbg !2742

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2742

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2742
  store i32 %cond, i32* %counter, align 4, !dbg !2741
  br label %do.body, !dbg !2745

do.body:                                          ; preds = %cond.end
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %label, i64 0, i64 0, !dbg !2746
  %3 = load i8*, i8** %stem.addr, align 8, !dbg !2746
  %4 = load i32, i32* %counter, align 4, !dbg !2746
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* %3, i32 %4), !dbg !2746
  br label %do.end, !dbg !2746

do.end:                                           ; preds = %do.body
  %arraydecay1 = getelementptr inbounds [100 x i8], [100 x i8]* %label, i64 0, i64 0, !dbg !2748
  call void @dbxout_stab_value_label(i8* %arraydecay1), !dbg !2749
  %5 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !2750
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2751
  %7 = load i8*, i8** %stem.addr, align 8, !dbg !2752
  %8 = load i32, i32* %counter, align 4, !dbg !2753
  %conv = sext i32 %8 to i64, !dbg !2753
  call void %5(%struct._IO_FILE* %6, i8* %7, i64 %conv), !dbg !2754
  ret void, !dbg !2755
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_stab_value_internal_label_diff(i8* %stem, i32* %counterp, i8* %base) #0 !dbg !2756 {
entry:
  %stem.addr = alloca i8*, align 8
  %counterp.addr = alloca i32*, align 8
  %base.addr = alloca i8*, align 8
  %label = alloca [100 x i8], align 16
  %counter = alloca i32, align 4
  store i8* %stem, i8** %stem.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %stem.addr, metadata !2759, metadata !DIExpression()), !dbg !2760
  store i32* %counterp, i32** %counterp.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %counterp.addr, metadata !2761, metadata !DIExpression()), !dbg !2762
  store i8* %base, i8** %base.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %base.addr, metadata !2763, metadata !DIExpression()), !dbg !2764
  call void @llvm.dbg.declare(metadata [100 x i8]* %label, metadata !2765, metadata !DIExpression()), !dbg !2766
  call void @llvm.dbg.declare(metadata i32* %counter, metadata !2767, metadata !DIExpression()), !dbg !2768
  %0 = load i32*, i32** %counterp.addr, align 8, !dbg !2769
  %tobool = icmp ne i32* %0, null, !dbg !2769
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2769

cond.true:                                        ; preds = %entry
  %1 = load i32*, i32** %counterp.addr, align 8, !dbg !2770
  %2 = load i32, i32* %1, align 4, !dbg !2771
  %inc = add nsw i32 %2, 1, !dbg !2771
  store i32 %inc, i32* %1, align 4, !dbg !2771
  br label %cond.end, !dbg !2769

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2769

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2769
  store i32 %cond, i32* %counter, align 4, !dbg !2768
  br label %do.body, !dbg !2772

do.body:                                          ; preds = %cond.end
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %label, i64 0, i64 0, !dbg !2773
  %3 = load i8*, i8** %stem.addr, align 8, !dbg !2773
  %4 = load i32, i32* %counter, align 4, !dbg !2773
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* %3, i32 %4), !dbg !2773
  br label %do.end, !dbg !2773

do.end:                                           ; preds = %do.body
  %arraydecay1 = getelementptr inbounds [100 x i8], [100 x i8]* %label, i64 0, i64 0, !dbg !2775
  %5 = load i8*, i8** %base.addr, align 8, !dbg !2776
  call void @dbxout_stab_value_label_diff(i8* %arraydecay1, i8* %5), !dbg !2777
  %6 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !2778
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2779
  %8 = load i8*, i8** %stem.addr, align 8, !dbg !2780
  %9 = load i32, i32* %counter, align 4, !dbg !2781
  %conv = sext i32 %9 to i64, !dbg !2781
  call void %6(%struct._IO_FILE* %7, i8* %8, i64 %conv), !dbg !2782
  ret void, !dbg !2783
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_stabd(i32 %stype, i32 %sdesc) #0 !dbg !2784 {
entry:
  %stype.addr = alloca i32, align 4
  %sdesc.addr = alloca i32, align 4
  store i32 %stype, i32* %stype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stype.addr, metadata !2787, metadata !DIExpression()), !dbg !2788
  store i32 %sdesc, i32* %sdesc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sdesc.addr, metadata !2789, metadata !DIExpression()), !dbg !2790
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2791
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !2792
  %1 = load i32, i32* %stype.addr, align 4, !dbg !2793
  call void @dbxout_int(i32 %1), !dbg !2794
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2795
  %call1 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), %struct._IO_FILE* %2), !dbg !2796
  %3 = load i32, i32* %sdesc.addr, align 4, !dbg !2797
  call void @dbxout_int(i32 %3), !dbg !2798
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2799
  %call2 = call i32 @putc(i32 10, %struct._IO_FILE* %4), !dbg !2800
  ret void, !dbg !2801
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_begin_stabn(i32 %stype) #0 !dbg !2802 {
entry:
  %stype.addr = alloca i32, align 4
  store i32 %stype, i32* %stype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stype.addr, metadata !2803, metadata !DIExpression()), !dbg !2804
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2805
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !2806
  %1 = load i32, i32* %stype.addr, align 4, !dbg !2807
  call void @dbxout_int(i32 %1), !dbg !2808
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2809
  %call1 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), %struct._IO_FILE* %2), !dbg !2810
  ret void, !dbg !2811
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_begin_stabn_sline(i32 %lineno) #0 !dbg !2812 {
entry:
  %lineno.addr = alloca i32, align 4
  store i32 %lineno, i32* %lineno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lineno.addr, metadata !2813, metadata !DIExpression()), !dbg !2814
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2815
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !2816
  call void @dbxout_int(i32 68), !dbg !2817
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2818
  %call1 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), %struct._IO_FILE* %1), !dbg !2819
  %2 = load i32, i32* %lineno.addr, align 4, !dbg !2820
  call void @dbxout_int(i32 %2), !dbg !2821
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2822
  %call2 = call i32 @putc(i32 44, %struct._IO_FILE* %3), !dbg !2823
  ret void, !dbg !2824
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_begin_empty_stabs(i32 %stype) #0 !dbg !2825 {
entry:
  %stype.addr = alloca i32, align 4
  store i32 %stype, i32* %stype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stype.addr, metadata !2826, metadata !DIExpression()), !dbg !2827
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2828
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !2829
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2830
  %call1 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), %struct._IO_FILE* %1), !dbg !2831
  %2 = load i32, i32* %stype.addr, align 4, !dbg !2832
  call void @dbxout_int(i32 %2), !dbg !2833
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2834
  %call2 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), %struct._IO_FILE* %3), !dbg !2835
  ret void, !dbg !2836
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_begin_simple_stabs(i8* %str, i32 %stype) #0 !dbg !2837 {
entry:
  %str.addr = alloca i8*, align 8
  %stype.addr = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !2840, metadata !DIExpression()), !dbg !2841
  store i32 %stype, i32* %stype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stype.addr, metadata !2842, metadata !DIExpression()), !dbg !2843
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2844
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !2845
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2846
  %2 = load i8*, i8** %str.addr, align 8, !dbg !2847
  call void @output_quoted_string(%struct._IO_FILE* %1, i8* %2), !dbg !2848
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2849
  %call1 = call i32 @putc(i32 44, %struct._IO_FILE* %3), !dbg !2850
  %4 = load i32, i32* %stype.addr, align 4, !dbg !2851
  call void @dbxout_int(i32 %4), !dbg !2852
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2853
  %call2 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), %struct._IO_FILE* %5), !dbg !2854
  ret void, !dbg !2855
}

declare dso_local void @output_quoted_string(%struct._IO_FILE*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_begin_simple_stabs_desc(i8* %str, i32 %stype, i32 %sdesc) #0 !dbg !2856 {
entry:
  %str.addr = alloca i8*, align 8
  %stype.addr = alloca i32, align 4
  %sdesc.addr = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !2859, metadata !DIExpression()), !dbg !2860
  store i32 %stype, i32* %stype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stype.addr, metadata !2861, metadata !DIExpression()), !dbg !2862
  store i32 %sdesc, i32* %sdesc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sdesc.addr, metadata !2863, metadata !DIExpression()), !dbg !2864
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2865
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !2866
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2867
  %2 = load i8*, i8** %str.addr, align 8, !dbg !2868
  call void @output_quoted_string(%struct._IO_FILE* %1, i8* %2), !dbg !2869
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2870
  %call1 = call i32 @putc(i32 44, %struct._IO_FILE* %3), !dbg !2871
  %4 = load i32, i32* %stype.addr, align 4, !dbg !2872
  call void @dbxout_int(i32 %4), !dbg !2873
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2874
  %call2 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), %struct._IO_FILE* %5), !dbg !2875
  %6 = load i32, i32* %sdesc.addr, align 4, !dbg !2876
  call void @dbxout_int(i32 %6), !dbg !2877
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !2878
  %call3 = call i32 @putc(i32 44, %struct._IO_FILE* %7), !dbg !2879
  ret void, !dbg !2880
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dbxout_symbol(%union.tree_node* %decl, i32 %local) #0 !dbg !2881 {
entry:
  %retval = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %local.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %context = alloca %union.tree_node*, align 8
  %result = alloca i32, align 4
  %decl_rtl = alloca %struct.rtx_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %tag_needed = alloca i32, align 4
  %did_output = alloca i32, align 4
  %name406 = alloca %union.tree_node*, align 8
  %name573 = alloca %union.tree_node*, align 8
  %ival = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !2884, metadata !DIExpression()), !dbg !2885
  store i32 %local, i32* %local.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %local.addr, metadata !2886, metadata !DIExpression()), !dbg !2887
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !2888, metadata !DIExpression()), !dbg !2889
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2890
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !2890
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2890
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !2890
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !2889
  call void @llvm.dbg.declare(metadata %union.tree_node** %context, metadata !2891, metadata !DIExpression()), !dbg !2892
  store %union.tree_node* null, %union.tree_node** %context, align 8, !dbg !2892
  call void @llvm.dbg.declare(metadata i32* %result, metadata !2893, metadata !DIExpression()), !dbg !2894
  store i32 0, i32* %result, align 4, !dbg !2894
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %decl_rtl, metadata !2895, metadata !DIExpression()), !dbg !2896
  %2 = load i32, i32* @debug_nesting, align 4, !dbg !2897
  %inc = add nsw i32 %2, 1, !dbg !2897
  store i32 %inc, i32* @debug_nesting, align 4, !dbg !2897
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2898
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !2898
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !2898
  %4 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !2898
  %cmp = icmp eq %union.tree_node* %4, null, !dbg !2900
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !2901

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2902
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !2902
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !2902
  %bf.load = load i64, i64* %6, align 8, !dbg !2902
  %bf.clear = and i64 %bf.load, 65535, !dbg !2902
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2902
  %cmp2 = icmp ne i32 %bf.cast, 35, !dbg !2903
  br i1 %cmp2, label %if.then, label %lor.lhs.false, !dbg !2904

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2905
  %decl_common = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !2905
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !2905
  %8 = bitcast i40* %ignored_flag to i64*, !dbg !2905
  %bf.load3 = load i64, i64* %8, align 8, !dbg !2905
  %bf.lshr = lshr i64 %bf.load3, 10, !dbg !2905
  %bf.clear4 = and i64 %bf.lshr, 1, !dbg !2905
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !2905
  %tobool = icmp ne i32 %bf.cast5, 0, !dbg !2905
  br i1 %tobool, label %if.then, label %if.end, !dbg !2906

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  br label %do.body, !dbg !2907

do.body:                                          ; preds = %if.then
  %9 = load i32, i32* @debug_nesting, align 4, !dbg !2908
  %dec = add nsw i32 %9, -1, !dbg !2908
  store i32 %dec, i32* @debug_nesting, align 4, !dbg !2908
  store i32 0, i32* %retval, align 4, !dbg !2908
  br label %return, !dbg !2908

do.end:                                           ; No predecessors!
  br label %if.end, !dbg !2908

if.end:                                           ; preds = %do.end, %lor.lhs.false
  %10 = load i32, i32* @flag_debug_only_used_symbols, align 4, !dbg !2910
  %tobool6 = icmp ne i32 %10, 0, !dbg !2910
  br i1 %tobool6, label %land.lhs.true7, label %if.end27, !dbg !2912

land.lhs.true7:                                   ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2913
  %base8 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !2913
  %12 = bitcast %struct.tree_base* %base8 to i64*, !dbg !2913
  %bf.load9 = load i64, i64* %12, align 8, !dbg !2913
  %bf.lshr10 = lshr i64 %bf.load9, 24, !dbg !2913
  %bf.clear11 = and i64 %bf.lshr10, 1, !dbg !2913
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !2913
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !2913
  br i1 %tobool13, label %if.end27, label %land.lhs.true14, !dbg !2914

land.lhs.true14:                                  ; preds = %land.lhs.true7
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2915
  %base15 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !2915
  %14 = bitcast %struct.tree_base* %base15 to i64*, !dbg !2915
  %bf.load16 = load i64, i64* %14, align 8, !dbg !2915
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !2915
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !2915
  %cmp19 = icmp ne i32 %bf.cast18, 32, !dbg !2916
  br i1 %cmp19, label %if.then23, label %lor.lhs.false20, !dbg !2917

lor.lhs.false20:                                  ; preds = %land.lhs.true14
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2918
  %decl_common21 = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !2918
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common21, i32 0, i32 5, !dbg !2918
  %16 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !2918
  %tobool22 = icmp ne %union.tree_node* %16, null, !dbg !2918
  br i1 %tobool22, label %if.end27, label %if.then23, !dbg !2919

if.then23:                                        ; preds = %lor.lhs.false20, %land.lhs.true14
  br label %do.body24, !dbg !2920

do.body24:                                        ; preds = %if.then23
  %17 = load i32, i32* @debug_nesting, align 4, !dbg !2921
  %dec25 = add nsw i32 %17, -1, !dbg !2921
  store i32 %dec25, i32* @debug_nesting, align 4, !dbg !2921
  store i32 0, i32* %retval, align 4, !dbg !2921
  br label %return, !dbg !2921

do.end26:                                         ; No predecessors!
  br label %if.end27, !dbg !2921

if.end27:                                         ; preds = %do.end26, %lor.lhs.false20, %land.lhs.true7, %if.end
  %18 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !2923
  %tobool28 = icmp ne %struct.typeinfo* %18, null, !dbg !2923
  br i1 %tobool28, label %if.end33, label %if.then29, !dbg !2925

if.then29:                                        ; preds = %if.end27
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2926
  %20 = load %union.tree_node*, %union.tree_node** @preinit_symbols, align 8, !dbg !2926
  %call = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %19, %union.tree_node* %20), !dbg !2926
  store %union.tree_node* %call, %union.tree_node** @preinit_symbols, align 8, !dbg !2928
  br label %do.body30, !dbg !2929

do.body30:                                        ; preds = %if.then29
  %21 = load i32, i32* @debug_nesting, align 4, !dbg !2930
  %dec31 = add nsw i32 %21, -1, !dbg !2930
  store i32 %dec31, i32* @debug_nesting, align 4, !dbg !2930
  store i32 0, i32* %retval, align 4, !dbg !2930
  br label %return, !dbg !2930

do.end32:                                         ; No predecessors!
  br label %if.end33, !dbg !2932

if.end33:                                         ; preds = %do.end32, %if.end27
  %22 = load i32, i32* @flag_debug_only_used_symbols, align 4, !dbg !2933
  %tobool34 = icmp ne i32 %22, 0, !dbg !2933
  br i1 %tobool34, label %if.then35, label %if.end149, !dbg !2935

if.then35:                                        ; preds = %if.end33
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !2936, metadata !DIExpression()), !dbg !2938
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2939
  store %union.tree_node* %23, %union.tree_node** %t, align 8, !dbg !2940
  br label %while.cond, !dbg !2941

while.cond:                                       ; preds = %while.body, %if.then35
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2942
  %base36 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !2942
  %25 = bitcast %struct.tree_base* %base36 to i64*, !dbg !2942
  %bf.load37 = load i64, i64* %25, align 8, !dbg !2942
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !2942
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !2942
  %cmp40 = icmp eq i32 %bf.cast39, 10, !dbg !2942
  br i1 %cmp40, label %lor.end, label %lor.rhs, !dbg !2942

lor.rhs:                                          ; preds = %while.cond
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2942
  %base41 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !2942
  %27 = bitcast %struct.tree_base* %base41 to i64*, !dbg !2942
  %bf.load42 = load i64, i64* %27, align 8, !dbg !2942
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !2942
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !2942
  %cmp45 = icmp eq i32 %bf.cast44, 12, !dbg !2942
  br label %lor.end, !dbg !2942

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %28 = phi i1 [ true, %while.cond ], [ %cmp45, %lor.rhs ]
  br i1 %28, label %while.body, label %while.end, !dbg !2941

while.body:                                       ; preds = %lor.end
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2943
  %common46 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !2943
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !2943
  %30 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !2943
  store %union.tree_node* %30, %union.tree_node** %t, align 8, !dbg !2944
  br label %while.cond, !dbg !2941, !llvm.loop !2945

while.end:                                        ; preds = %lor.end
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2946
  %base48 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !2946
  %32 = bitcast %struct.tree_base* %base48 to i64*, !dbg !2946
  %bf.load49 = load i64, i64* %32, align 8, !dbg !2946
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !2946
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !2946
  %cmp52 = icmp eq i32 %bf.cast51, 16, !dbg !2948
  br i1 %cmp52, label %if.then71, label %lor.lhs.false53, !dbg !2949

lor.lhs.false53:                                  ; preds = %while.end
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2950
  %base54 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !2950
  %34 = bitcast %struct.tree_base* %base54 to i64*, !dbg !2950
  %bf.load55 = load i64, i64* %34, align 8, !dbg !2950
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !2950
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !2950
  %cmp58 = icmp eq i32 %bf.cast57, 17, !dbg !2951
  br i1 %cmp58, label %if.then71, label %lor.lhs.false59, !dbg !2952

lor.lhs.false59:                                  ; preds = %lor.lhs.false53
  %35 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2953
  %base60 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !2953
  %36 = bitcast %struct.tree_base* %base60 to i64*, !dbg !2953
  %bf.load61 = load i64, i64* %36, align 8, !dbg !2953
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !2953
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !2953
  %cmp64 = icmp eq i32 %bf.cast63, 18, !dbg !2954
  br i1 %cmp64, label %if.then71, label %lor.lhs.false65, !dbg !2955

lor.lhs.false65:                                  ; preds = %lor.lhs.false59
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2956
  %base66 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !2956
  %38 = bitcast %struct.tree_base* %base66 to i64*, !dbg !2956
  %bf.load67 = load i64, i64* %38, align 8, !dbg !2956
  %bf.clear68 = and i64 %bf.load67, 65535, !dbg !2956
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !2956
  %cmp70 = icmp eq i32 %bf.cast69, 6, !dbg !2957
  br i1 %cmp70, label %if.then71, label %if.else, !dbg !2958

if.then71:                                        ; preds = %lor.lhs.false65, %lor.lhs.false59, %lor.lhs.false53, %while.end
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2959
  %common72 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !2959
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 1, !dbg !2959
  %40 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2959
  %tobool73 = icmp ne %union.tree_node* %40, null, !dbg !2959
  br i1 %tobool73, label %land.lhs.true74, label %if.end126, !dbg !2962

land.lhs.true74:                                  ; preds = %if.then71
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2963
  %common75 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !2963
  %chain76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 1, !dbg !2963
  %42 = load %union.tree_node*, %union.tree_node** %chain76, align 8, !dbg !2963
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2964
  %cmp77 = icmp ne %union.tree_node* %42, %43, !dbg !2965
  br i1 %cmp77, label %land.lhs.true78, label %if.end126, !dbg !2966

land.lhs.true78:                                  ; preds = %land.lhs.true74
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2967
  %common79 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !2967
  %chain80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 1, !dbg !2967
  %45 = load %union.tree_node*, %union.tree_node** %chain80, align 8, !dbg !2967
  %base81 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !2967
  %46 = bitcast %struct.tree_base* %base81 to i64*, !dbg !2967
  %bf.load82 = load i64, i64* %46, align 8, !dbg !2967
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !2967
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !2967
  %idxprom = sext i32 %bf.cast84 to i64, !dbg !2967
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !2967
  %47 = load i32, i32* %arrayidx, align 4, !dbg !2967
  %cmp85 = icmp eq i32 %47, 3, !dbg !2967
  br i1 %cmp85, label %land.lhs.true86, label %if.end126, !dbg !2968

land.lhs.true86:                                  ; preds = %land.lhs.true78
  %48 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2969
  %common87 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !2969
  %chain88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 1, !dbg !2969
  %49 = load %union.tree_node*, %union.tree_node** %chain88, align 8, !dbg !2969
  %decl_common89 = bitcast %union.tree_node* %49 to %struct.tree_decl_common*, !dbg !2969
  %ignored_flag90 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common89, i32 0, i32 2, !dbg !2969
  %50 = bitcast i40* %ignored_flag90 to i64*, !dbg !2969
  %bf.load91 = load i64, i64* %50, align 8, !dbg !2969
  %bf.lshr92 = lshr i64 %bf.load91, 10, !dbg !2969
  %bf.clear93 = and i64 %bf.lshr92, 1, !dbg !2969
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !2969
  %tobool95 = icmp ne i32 %bf.cast94, 0, !dbg !2969
  br i1 %tobool95, label %if.end126, label %if.then96, !dbg !2970

if.then96:                                        ; preds = %land.lhs.true86
  %51 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2971
  %common97 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !2971
  %chain98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 1, !dbg !2971
  %52 = load %union.tree_node*, %union.tree_node** %chain98, align 8, !dbg !2971
  call void @debug_queue_symbol(%union.tree_node* %52), !dbg !2973
  %53 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2974
  %type99 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !2974
  %name100 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type99, i32 0, i32 12, !dbg !2974
  %54 = load %union.tree_node*, %union.tree_node** %name100, align 8, !dbg !2974
  %tobool101 = icmp ne %union.tree_node* %54, null, !dbg !2974
  br i1 %tobool101, label %land.lhs.true102, label %if.end125, !dbg !2976

land.lhs.true102:                                 ; preds = %if.then96
  %55 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2977
  %type103 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !2977
  %name104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type103, i32 0, i32 12, !dbg !2977
  %56 = load %union.tree_node*, %union.tree_node** %name104, align 8, !dbg !2977
  %57 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2978
  %common105 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !2978
  %chain106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 1, !dbg !2978
  %58 = load %union.tree_node*, %union.tree_node** %chain106, align 8, !dbg !2978
  %cmp107 = icmp ne %union.tree_node* %56, %58, !dbg !2979
  br i1 %cmp107, label %land.lhs.true108, label %if.end125, !dbg !2980

land.lhs.true108:                                 ; preds = %land.lhs.true102
  %59 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2981
  %type109 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !2981
  %name110 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type109, i32 0, i32 12, !dbg !2981
  %60 = load %union.tree_node*, %union.tree_node** %name110, align 8, !dbg !2981
  %61 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2982
  %cmp111 = icmp ne %union.tree_node* %60, %61, !dbg !2983
  br i1 %cmp111, label %land.lhs.true112, label %if.end125, !dbg !2984

land.lhs.true112:                                 ; preds = %land.lhs.true108
  %62 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2985
  %type113 = bitcast %union.tree_node* %62 to %struct.tree_type*, !dbg !2985
  %name114 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type113, i32 0, i32 12, !dbg !2985
  %63 = load %union.tree_node*, %union.tree_node** %name114, align 8, !dbg !2985
  %base115 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !2985
  %64 = bitcast %struct.tree_base* %base115 to i64*, !dbg !2985
  %bf.load116 = load i64, i64* %64, align 8, !dbg !2985
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !2985
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !2985
  %idxprom119 = sext i32 %bf.cast118 to i64, !dbg !2985
  %arrayidx120 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom119, !dbg !2985
  %65 = load i32, i32* %arrayidx120, align 4, !dbg !2985
  %cmp121 = icmp eq i32 %65, 3, !dbg !2985
  br i1 %cmp121, label %if.then122, label %if.end125, !dbg !2986

if.then122:                                       ; preds = %land.lhs.true112
  %66 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2987
  %type123 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !2987
  %name124 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type123, i32 0, i32 12, !dbg !2987
  %67 = load %union.tree_node*, %union.tree_node** %name124, align 8, !dbg !2987
  call void @debug_queue_symbol(%union.tree_node* %67), !dbg !2988
  br label %if.end125, !dbg !2988

if.end125:                                        ; preds = %if.then122, %land.lhs.true112, %land.lhs.true108, %land.lhs.true102, %if.then96
  br label %if.end126, !dbg !2989

if.end126:                                        ; preds = %if.end125, %land.lhs.true86, %land.lhs.true78, %land.lhs.true74, %if.then71
  br label %if.end148, !dbg !2990

if.else:                                          ; preds = %lor.lhs.false65
  %68 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2991
  %type127 = bitcast %union.tree_node* %68 to %struct.tree_type*, !dbg !2991
  %name128 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type127, i32 0, i32 12, !dbg !2991
  %69 = load %union.tree_node*, %union.tree_node** %name128, align 8, !dbg !2991
  %tobool129 = icmp ne %union.tree_node* %69, null, !dbg !2991
  br i1 %tobool129, label %land.lhs.true130, label %if.end147, !dbg !2993

land.lhs.true130:                                 ; preds = %if.else
  %70 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2994
  %type131 = bitcast %union.tree_node* %70 to %struct.tree_type*, !dbg !2994
  %name132 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type131, i32 0, i32 12, !dbg !2994
  %71 = load %union.tree_node*, %union.tree_node** %name132, align 8, !dbg !2994
  %72 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2995
  %cmp133 = icmp ne %union.tree_node* %71, %72, !dbg !2996
  br i1 %cmp133, label %land.lhs.true134, label %if.end147, !dbg !2997

land.lhs.true134:                                 ; preds = %land.lhs.true130
  %73 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2998
  %type135 = bitcast %union.tree_node* %73 to %struct.tree_type*, !dbg !2998
  %name136 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type135, i32 0, i32 12, !dbg !2998
  %74 = load %union.tree_node*, %union.tree_node** %name136, align 8, !dbg !2998
  %base137 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !2998
  %75 = bitcast %struct.tree_base* %base137 to i64*, !dbg !2998
  %bf.load138 = load i64, i64* %75, align 8, !dbg !2998
  %bf.clear139 = and i64 %bf.load138, 65535, !dbg !2998
  %bf.cast140 = trunc i64 %bf.clear139 to i32, !dbg !2998
  %idxprom141 = sext i32 %bf.cast140 to i64, !dbg !2998
  %arrayidx142 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom141, !dbg !2998
  %76 = load i32, i32* %arrayidx142, align 4, !dbg !2998
  %cmp143 = icmp eq i32 %76, 3, !dbg !2998
  br i1 %cmp143, label %if.then144, label %if.end147, !dbg !2999

if.then144:                                       ; preds = %land.lhs.true134
  %77 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3000
  %type145 = bitcast %union.tree_node* %77 to %struct.tree_type*, !dbg !3000
  %name146 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type145, i32 0, i32 12, !dbg !3000
  %78 = load %union.tree_node*, %union.tree_node** %name146, align 8, !dbg !3000
  call void @debug_queue_symbol(%union.tree_node* %78), !dbg !3001
  br label %if.end147, !dbg !3001

if.end147:                                        ; preds = %if.then144, %land.lhs.true134, %land.lhs.true130, %if.else
  br label %if.end148

if.end148:                                        ; preds = %if.end147, %if.end126
  br label %if.end149, !dbg !3002

if.end149:                                        ; preds = %if.end148, %if.end33
  call void @emit_pending_bincls_if_required(), !dbg !3003
  %79 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3004
  %base150 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !3004
  %80 = bitcast %struct.tree_base* %base150 to i64*, !dbg !3004
  %bf.load151 = load i64, i64* %80, align 8, !dbg !3004
  %bf.clear152 = and i64 %bf.load151, 65535, !dbg !3004
  %bf.cast153 = trunc i64 %bf.clear152 to i32, !dbg !3004
  switch i32 %bf.cast153, label %sw.default [
    i32 33, label %sw.bb
    i32 29, label %sw.bb154
    i32 35, label %sw.bb329
    i32 34, label %sw.bb635
    i32 36, label %sw.bb655
    i32 32, label %sw.bb655
  ], !dbg !3005

sw.bb:                                            ; preds = %if.end149
  br label %sw.epilog, !dbg !3006

sw.bb154:                                         ; preds = %if.end149
  %81 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3008
  %base155 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !3008
  %82 = bitcast %struct.tree_base* %base155 to i64*, !dbg !3008
  %bf.load156 = load i64, i64* %82, align 8, !dbg !3008
  %bf.clear157 = and i64 %bf.load156, 65535, !dbg !3008
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !3008
  %idxprom159 = zext i32 %bf.cast158 to i64, !dbg !3008
  %arrayidx160 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom159, !dbg !3008
  %arrayidx161 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx160, i64 0, i64 11, !dbg !3008
  %83 = load i8, i8* %arrayidx161, align 1, !dbg !3008
  %conv = zext i8 %83 to i32, !dbg !3008
  %tobool162 = icmp ne i32 %conv, 0, !dbg !3008
  br i1 %tobool162, label %land.lhs.true163, label %cond.false174, !dbg !3008

land.lhs.true163:                                 ; preds = %sw.bb154
  %84 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3008
  %decl_with_rtl = bitcast %union.tree_node* %84 to %struct.tree_decl_with_rtl*, !dbg !3008
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !3008
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !3008
  %cmp164 = icmp ne %struct.rtx_def* %85, null, !dbg !3008
  br i1 %cmp164, label %cond.true, label %cond.false174, !dbg !3008

cond.true:                                        ; preds = %land.lhs.true163
  %86 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3008
  %decl_with_rtl166 = bitcast %union.tree_node* %86 to %struct.tree_decl_with_rtl*, !dbg !3008
  %rtl167 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl166, i32 0, i32 1, !dbg !3008
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtl167, align 8, !dbg !3008
  %tobool168 = icmp ne %struct.rtx_def* %87, null, !dbg !3008
  br i1 %tobool168, label %cond.true169, label %cond.false, !dbg !3008

cond.true169:                                     ; preds = %cond.true
  %88 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3008
  %decl_with_rtl170 = bitcast %union.tree_node* %88 to %struct.tree_decl_with_rtl*, !dbg !3008
  %rtl171 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl170, i32 0, i32 1, !dbg !3008
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rtl171, align 8, !dbg !3008
  br label %cond.end, !dbg !3008

cond.false:                                       ; preds = %cond.true
  %90 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3008
  call void @make_decl_rtl(%union.tree_node* %90), !dbg !3008
  %91 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3008
  %decl_with_rtl172 = bitcast %union.tree_node* %91 to %struct.tree_decl_with_rtl*, !dbg !3008
  %rtl173 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl172, i32 0, i32 1, !dbg !3008
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rtl173, align 8, !dbg !3008
  br label %cond.end, !dbg !3008

cond.end:                                         ; preds = %cond.false, %cond.true169
  %cond = phi %struct.rtx_def* [ %89, %cond.true169 ], [ %92, %cond.false ], !dbg !3008
  br label %cond.end175, !dbg !3008

cond.false174:                                    ; preds = %land.lhs.true163, %sw.bb154
  br label %cond.end175, !dbg !3008

cond.end175:                                      ; preds = %cond.false174, %cond.end
  %cond176 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false174 ], !dbg !3008
  store %struct.rtx_def* %cond176, %struct.rtx_def** %decl_rtl, align 8, !dbg !3009
  %93 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !3010
  %tobool177 = icmp ne %struct.rtx_def* %93, null, !dbg !3010
  br i1 %tobool177, label %if.end182, label %if.then178, !dbg !3012

if.then178:                                       ; preds = %cond.end175
  br label %do.body179, !dbg !3013

do.body179:                                       ; preds = %if.then178
  %94 = load i32, i32* @debug_nesting, align 4, !dbg !3014
  %dec180 = add nsw i32 %94, -1, !dbg !3014
  store i32 %dec180, i32* @debug_nesting, align 4, !dbg !3014
  store i32 0, i32* %retval, align 4, !dbg !3014
  br label %return, !dbg !3014

do.end181:                                        ; No predecessors!
  br label %if.end182, !dbg !3014

if.end182:                                        ; preds = %do.end181, %cond.end175
  %95 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3016
  %decl_common183 = bitcast %union.tree_node* %95 to %struct.tree_decl_common*, !dbg !3016
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common183, i32 0, i32 2, !dbg !3016
  %96 = bitcast i40* %decl_flag_1 to i64*, !dbg !3016
  %bf.load184 = load i64, i64* %96, align 8, !dbg !3016
  %bf.lshr185 = lshr i64 %bf.load184, 25, !dbg !3016
  %bf.clear186 = and i64 %bf.lshr185, 1, !dbg !3016
  %bf.cast187 = trunc i64 %bf.clear186 to i32, !dbg !3016
  %tobool188 = icmp ne i32 %bf.cast187, 0, !dbg !3016
  br i1 %tobool188, label %if.then189, label %if.end190, !dbg !3018

if.then189:                                       ; preds = %if.end182
  br label %sw.epilog, !dbg !3019

if.end190:                                        ; preds = %if.end182
  %97 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3020
  %call191 = call %union.tree_node* @decl_function_context(%union.tree_node* %97), !dbg !3021
  store %union.tree_node* %call191, %union.tree_node** %context, align 8, !dbg !3022
  %98 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3023
  %99 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3025
  %cmp192 = icmp eq %union.tree_node* %98, %99, !dbg !3026
  br i1 %cmp192, label %if.then194, label %if.end195, !dbg !3027

if.then194:                                       ; preds = %if.end190
  br label %sw.epilog, !dbg !3028

if.end195:                                        ; preds = %if.end190
  %100 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3029
  %tobool196 = icmp ne %union.tree_node* %100, null, !dbg !3029
  br i1 %tobool196, label %land.lhs.true197, label %if.end207, !dbg !3031

land.lhs.true197:                                 ; preds = %if.end195
  %101 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3032
  %decl_common198 = bitcast %union.tree_node* %101 to %struct.tree_decl_common*, !dbg !3032
  %abstract_origin = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common198, i32 0, i32 7, !dbg !3032
  %102 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !3032
  %cmp199 = icmp ne %union.tree_node* %102, null, !dbg !3032
  br i1 %cmp199, label %land.lhs.true201, label %if.end207, !dbg !3032

land.lhs.true201:                                 ; preds = %land.lhs.true197
  %103 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3032
  %decl_common202 = bitcast %union.tree_node* %103 to %struct.tree_decl_common*, !dbg !3032
  %abstract_origin203 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common202, i32 0, i32 7, !dbg !3032
  %104 = load %union.tree_node*, %union.tree_node** %abstract_origin203, align 8, !dbg !3032
  %105 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3032
  %cmp204 = icmp ne %union.tree_node* %104, %105, !dbg !3032
  br i1 %cmp204, label %if.then206, label %if.end207, !dbg !3033

if.then206:                                       ; preds = %land.lhs.true201
  br label %sw.epilog, !dbg !3034

if.end207:                                        ; preds = %land.lhs.true201, %land.lhs.true197, %if.end195
  %106 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !3035
  %107 = bitcast %struct.rtx_def* %106 to i32*, !dbg !3035
  %bf.load208 = load i32, i32* %107, align 8, !dbg !3035
  %bf.clear209 = and i32 %bf.load208, 65535, !dbg !3035
  %cmp210 = icmp eq i32 %bf.clear209, 43, !dbg !3035
  br i1 %cmp210, label %lor.lhs.false212, label %if.then218, !dbg !3037

lor.lhs.false212:                                 ; preds = %if.end207
  %108 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !3038
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1, !dbg !3038
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3038
  %arrayidx213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3038
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx213 to %struct.rtx_def**, !dbg !3038
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3038
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !3038
  %bf.load214 = load i32, i32* %110, align 8, !dbg !3038
  %bf.clear215 = and i32 %bf.load214, 65535, !dbg !3038
  %cmp216 = icmp ne i32 %bf.clear215, 45, !dbg !3039
  br i1 %cmp216, label %if.then218, label %if.end219, !dbg !3040

if.then218:                                       ; preds = %lor.lhs.false212, %if.end207
  br label %sw.epilog, !dbg !3041

if.end219:                                        ; preds = %lor.lhs.false212
  %111 = load i32, i32* @flag_debug_only_used_symbols, align 4, !dbg !3042
  %tobool220 = icmp ne i32 %111, 0, !dbg !3042
  br i1 %tobool220, label %if.then221, label %if.end222, !dbg !3044

if.then221:                                       ; preds = %if.end219
  call void @output_used_types(), !dbg !3045
  br label %if.end222, !dbg !3045

if.end222:                                        ; preds = %if.then221, %if.end219
  call void @dbxout_begin_complex_stabs(), !dbg !3046
  %112 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3047
  %call223 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %112), !dbg !3047
  %identifier = bitcast %union.tree_node* %call223 to %struct.tree_identifier*, !dbg !3047
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !3047
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !3047
  %113 = load i32, i32* %len, align 8, !dbg !3047
  %conv224 = zext i32 %113 to i64, !dbg !3047
  store i64 %conv224, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3047
  %114 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3047
  %115 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3047
  %add.ptr = getelementptr inbounds i8, i8* %114, i64 %115, !dbg !3047
  %116 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3047
  %cmp225 = icmp ugt i8* %add.ptr, %116, !dbg !3047
  br i1 %cmp225, label %cond.true227, label %cond.false229, !dbg !3047

cond.true227:                                     ; preds = %if.end222
  %117 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3047
  %conv228 = trunc i64 %117 to i32, !dbg !3047
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv228), !dbg !3047
  br label %cond.end230, !dbg !3047

cond.false229:                                    ; preds = %if.end222
  br label %cond.end230, !dbg !3047

cond.end230:                                      ; preds = %cond.false229, %cond.true227
  %cond231 = phi i32 [ 0, %cond.true227 ], [ 0, %cond.false229 ], !dbg !3047
  %118 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3047
  %119 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3047
  %call232 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %119), !dbg !3047
  %identifier233 = bitcast %union.tree_node* %call232 to %struct.tree_identifier*, !dbg !3047
  %id234 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier233, i32 0, i32 1, !dbg !3047
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id234, i32 0, i32 0, !dbg !3047
  %120 = load i8*, i8** %str, align 8, !dbg !3047
  %121 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3047
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %118, i8* align 1 %120, i64 %121, i1 false), !dbg !3047
  %122 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3047
  %123 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3047
  %add.ptr235 = getelementptr inbounds i8, i8* %123, i64 %122, !dbg !3047
  store i8* %add.ptr235, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3047
  %124 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3048
  %base236 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !3048
  %125 = bitcast %struct.tree_base* %base236 to i64*, !dbg !3048
  %bf.load237 = load i64, i64* %125, align 8, !dbg !3048
  %bf.lshr238 = lshr i64 %bf.load237, 27, !dbg !3048
  %bf.clear239 = and i64 %bf.lshr238, 1, !dbg !3048
  %bf.cast240 = trunc i64 %bf.clear239 to i32, !dbg !3048
  %tobool241 = icmp ne i32 %bf.cast240, 0, !dbg !3048
  %126 = zext i1 %tobool241 to i64, !dbg !3048
  %cond242 = select i1 %tobool241, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), !dbg !3048
  %call243 = call i64 @strlen(i8* %cond242), !dbg !3048
  store i64 %call243, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3048
  %127 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3048
  %128 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3048
  %add.ptr244 = getelementptr inbounds i8, i8* %127, i64 %128, !dbg !3048
  %129 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3048
  %cmp245 = icmp ugt i8* %add.ptr244, %129, !dbg !3048
  br i1 %cmp245, label %cond.true247, label %cond.false249, !dbg !3048

cond.true247:                                     ; preds = %cond.end230
  %130 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3048
  %conv248 = trunc i64 %130 to i32, !dbg !3048
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv248), !dbg !3048
  br label %cond.end250, !dbg !3048

cond.false249:                                    ; preds = %cond.end230
  br label %cond.end250, !dbg !3048

cond.end250:                                      ; preds = %cond.false249, %cond.true247
  %cond251 = phi i32 [ 0, %cond.true247 ], [ 0, %cond.false249 ], !dbg !3048
  %131 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3048
  %132 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3048
  %base252 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !3048
  %133 = bitcast %struct.tree_base* %base252 to i64*, !dbg !3048
  %bf.load253 = load i64, i64* %133, align 8, !dbg !3048
  %bf.lshr254 = lshr i64 %bf.load253, 27, !dbg !3048
  %bf.clear255 = and i64 %bf.lshr254, 1, !dbg !3048
  %bf.cast256 = trunc i64 %bf.clear255 to i32, !dbg !3048
  %tobool257 = icmp ne i32 %bf.cast256, 0, !dbg !3048
  %134 = zext i1 %tobool257 to i64, !dbg !3048
  %cond258 = select i1 %tobool257, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), !dbg !3048
  %135 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3048
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* align 1 %cond258, i64 %135, i1 false), !dbg !3048
  %136 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3048
  %137 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3048
  %add.ptr259 = getelementptr inbounds i8, i8* %137, i64 %136, !dbg !3048
  store i8* %add.ptr259, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3048
  store i32 1, i32* %result, align 4, !dbg !3049
  %138 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3050
  %common260 = bitcast %union.tree_node* %138 to %struct.tree_common*, !dbg !3050
  %type261 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common260, i32 0, i32 2, !dbg !3050
  %139 = load %union.tree_node*, %union.tree_node** %type261, align 8, !dbg !3050
  %tobool262 = icmp ne %union.tree_node* %139, null, !dbg !3050
  br i1 %tobool262, label %if.then263, label %if.else266, !dbg !3052

if.then263:                                       ; preds = %cond.end250
  %140 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3053
  %common264 = bitcast %union.tree_node* %140 to %struct.tree_common*, !dbg !3053
  %type265 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common264, i32 0, i32 2, !dbg !3053
  %141 = load %union.tree_node*, %union.tree_node** %type265, align 8, !dbg !3053
  call void @dbxout_type(%union.tree_node* %141, i32 0), !dbg !3054
  br label %if.end267, !dbg !3054

if.else266:                                       ; preds = %cond.end250
  %142 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !3055
  call void @dbxout_type(%union.tree_node* %142, i32 0), !dbg !3056
  br label %if.end267

if.end267:                                        ; preds = %if.else266, %if.then263
  %143 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3057
  %cmp268 = icmp ne %union.tree_node* %143, null, !dbg !3059
  br i1 %cmp268, label %if.then270, label %if.end324, !dbg !3060

if.then270:                                       ; preds = %if.end267
  %144 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3061
  %add.ptr271 = getelementptr inbounds i8, i8* %144, i64 1, !dbg !3061
  %145 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3061
  %cmp272 = icmp ugt i8* %add.ptr271, %145, !dbg !3061
  br i1 %cmp272, label %cond.true274, label %cond.false275, !dbg !3061

cond.true274:                                     ; preds = %if.then270
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3061
  br label %cond.end276, !dbg !3061

cond.false275:                                    ; preds = %if.then270
  br label %cond.end276, !dbg !3061

cond.end276:                                      ; preds = %cond.false275, %cond.true274
  %cond277 = phi i32 [ 0, %cond.true274 ], [ 0, %cond.false275 ], !dbg !3061
  %146 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3061
  %incdec.ptr = getelementptr inbounds i8, i8* %146, i32 1, !dbg !3061
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3061
  store i8 44, i8* %146, align 1, !dbg !3061
  %147 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3063
  %call278 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %147), !dbg !3063
  %identifier279 = bitcast %union.tree_node* %call278 to %struct.tree_identifier*, !dbg !3063
  %id280 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier279, i32 0, i32 1, !dbg !3063
  %len281 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id280, i32 0, i32 1, !dbg !3063
  %148 = load i32, i32* %len281, align 8, !dbg !3063
  %conv282 = zext i32 %148 to i64, !dbg !3063
  store i64 %conv282, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3063
  %149 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3063
  %150 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3063
  %add.ptr283 = getelementptr inbounds i8, i8* %149, i64 %150, !dbg !3063
  %151 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3063
  %cmp284 = icmp ugt i8* %add.ptr283, %151, !dbg !3063
  br i1 %cmp284, label %cond.true286, label %cond.false288, !dbg !3063

cond.true286:                                     ; preds = %cond.end276
  %152 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3063
  %conv287 = trunc i64 %152 to i32, !dbg !3063
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv287), !dbg !3063
  br label %cond.end289, !dbg !3063

cond.false288:                                    ; preds = %cond.end276
  br label %cond.end289, !dbg !3063

cond.end289:                                      ; preds = %cond.false288, %cond.true286
  %cond290 = phi i32 [ 0, %cond.true286 ], [ 0, %cond.false288 ], !dbg !3063
  %153 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3063
  %154 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3063
  %call291 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %154), !dbg !3063
  %identifier292 = bitcast %union.tree_node* %call291 to %struct.tree_identifier*, !dbg !3063
  %id293 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier292, i32 0, i32 1, !dbg !3063
  %str294 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id293, i32 0, i32 0, !dbg !3063
  %155 = load i8*, i8** %str294, align 8, !dbg !3063
  %156 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3063
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %153, i8* align 1 %155, i64 %156, i1 false), !dbg !3063
  %157 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3063
  %158 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3063
  %add.ptr295 = getelementptr inbounds i8, i8* %158, i64 %157, !dbg !3063
  store i8* %add.ptr295, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3063
  %159 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3064
  %add.ptr296 = getelementptr inbounds i8, i8* %159, i64 1, !dbg !3064
  %160 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3064
  %cmp297 = icmp ugt i8* %add.ptr296, %160, !dbg !3064
  br i1 %cmp297, label %cond.true299, label %cond.false300, !dbg !3064

cond.true299:                                     ; preds = %cond.end289
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3064
  br label %cond.end301, !dbg !3064

cond.false300:                                    ; preds = %cond.end289
  br label %cond.end301, !dbg !3064

cond.end301:                                      ; preds = %cond.false300, %cond.true299
  %cond302 = phi i32 [ 0, %cond.true299 ], [ 0, %cond.false300 ], !dbg !3064
  %161 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3064
  %incdec.ptr303 = getelementptr inbounds i8, i8* %161, i32 1, !dbg !3064
  store i8* %incdec.ptr303, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3064
  store i8 44, i8* %161, align 1, !dbg !3064
  %162 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3065
  %decl_minimal304 = bitcast %union.tree_node* %162 to %struct.tree_decl_minimal*, !dbg !3065
  %name305 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal304, i32 0, i32 3, !dbg !3065
  %163 = load %union.tree_node*, %union.tree_node** %name305, align 8, !dbg !3065
  %identifier306 = bitcast %union.tree_node* %163 to %struct.tree_identifier*, !dbg !3065
  %id307 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier306, i32 0, i32 1, !dbg !3065
  %len308 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id307, i32 0, i32 1, !dbg !3065
  %164 = load i32, i32* %len308, align 8, !dbg !3065
  %conv309 = zext i32 %164 to i64, !dbg !3065
  store i64 %conv309, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3065
  %165 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3065
  %166 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3065
  %add.ptr310 = getelementptr inbounds i8, i8* %165, i64 %166, !dbg !3065
  %167 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3065
  %cmp311 = icmp ugt i8* %add.ptr310, %167, !dbg !3065
  br i1 %cmp311, label %cond.true313, label %cond.false315, !dbg !3065

cond.true313:                                     ; preds = %cond.end301
  %168 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3065
  %conv314 = trunc i64 %168 to i32, !dbg !3065
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv314), !dbg !3065
  br label %cond.end316, !dbg !3065

cond.false315:                                    ; preds = %cond.end301
  br label %cond.end316, !dbg !3065

cond.end316:                                      ; preds = %cond.false315, %cond.true313
  %cond317 = phi i32 [ 0, %cond.true313 ], [ 0, %cond.false315 ], !dbg !3065
  %169 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3065
  %170 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3065
  %decl_minimal318 = bitcast %union.tree_node* %170 to %struct.tree_decl_minimal*, !dbg !3065
  %name319 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal318, i32 0, i32 3, !dbg !3065
  %171 = load %union.tree_node*, %union.tree_node** %name319, align 8, !dbg !3065
  %identifier320 = bitcast %union.tree_node* %171 to %struct.tree_identifier*, !dbg !3065
  %id321 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier320, i32 0, i32 1, !dbg !3065
  %str322 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id321, i32 0, i32 0, !dbg !3065
  %172 = load i8*, i8** %str322, align 8, !dbg !3065
  %173 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3065
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %169, i8* align 1 %172, i64 %173, i1 false), !dbg !3065
  %174 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3065
  %175 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3065
  %add.ptr323 = getelementptr inbounds i8, i8* %175, i64 %174, !dbg !3065
  store i8* %add.ptr323, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3065
  br label %if.end324, !dbg !3066

if.end324:                                        ; preds = %cond.end316, %if.end267
  %176 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3067
  %177 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !3068
  %u325 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1, !dbg !3068
  %fld326 = bitcast %union.u* %u325 to [1 x %union.rtunion_def]*, !dbg !3068
  %arrayidx327 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld326, i64 0, i64 0, !dbg !3068
  %rt_rtx328 = bitcast %union.rtunion_def* %arrayidx327 to %struct.rtx_def**, !dbg !3068
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx328, align 8, !dbg !3068
  call void @dbxout_finish_complex_stabs(%union.tree_node* %176, i32 36, %struct.rtx_def* %178, i8* null, i32 0), !dbg !3069
  br label %sw.epilog, !dbg !3070

sw.bb329:                                         ; preds = %if.end149
  %179 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3071
  %base330 = bitcast %union.tree_node* %179 to %struct.tree_base*, !dbg !3071
  %180 = bitcast %struct.tree_base* %base330 to i64*, !dbg !3071
  %bf.load331 = load i64, i64* %180, align 8, !dbg !3071
  %bf.lshr332 = lshr i64 %bf.load331, 22, !dbg !3071
  %bf.clear333 = and i64 %bf.lshr332, 1, !dbg !3071
  %bf.cast334 = trunc i64 %bf.clear333 to i32, !dbg !3071
  %tobool335 = icmp ne i32 %bf.cast334, 0, !dbg !3071
  br i1 %tobool335, label %if.then344, label %lor.lhs.false336, !dbg !3073

lor.lhs.false336:                                 ; preds = %sw.bb329
  %181 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3074
  %decl_common337 = bitcast %union.tree_node* %181 to %struct.tree_decl_common*, !dbg !3074
  %decl_flag_1338 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common337, i32 0, i32 2, !dbg !3074
  %182 = bitcast i40* %decl_flag_1338 to i64*, !dbg !3074
  %bf.load339 = load i64, i64* %182, align 8, !dbg !3074
  %bf.lshr340 = lshr i64 %bf.load339, 25, !dbg !3074
  %bf.clear341 = and i64 %bf.lshr340, 1, !dbg !3074
  %bf.cast342 = trunc i64 %bf.clear341 to i32, !dbg !3074
  %tobool343 = icmp ne i32 %bf.cast342, 0, !dbg !3074
  br i1 %tobool343, label %if.then344, label %if.end348, !dbg !3075

if.then344:                                       ; preds = %lor.lhs.false336, %sw.bb329
  br label %do.body345, !dbg !3076

do.body345:                                       ; preds = %if.then344
  %183 = load i32, i32* @debug_nesting, align 4, !dbg !3077
  %dec346 = add nsw i32 %183, -1, !dbg !3077
  store i32 %dec346, i32* @debug_nesting, align 4, !dbg !3077
  store i32 0, i32* %retval, align 4, !dbg !3077
  br label %return, !dbg !3077

do.end347:                                        ; No predecessors!
  br label %if.end348, !dbg !3077

if.end348:                                        ; preds = %do.end347, %lor.lhs.false336
  store i32 1, i32* %result, align 4, !dbg !3079
  call void @llvm.dbg.declare(metadata i32* %tag_needed, metadata !3080, metadata !DIExpression()), !dbg !3082
  store i32 1, i32* %tag_needed, align 4, !dbg !3082
  call void @llvm.dbg.declare(metadata i32* %did_output, metadata !3083, metadata !DIExpression()), !dbg !3084
  store i32 0, i32* %did_output, align 4, !dbg !3084
  %184 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3085
  %decl_minimal349 = bitcast %union.tree_node* %184 to %struct.tree_decl_minimal*, !dbg !3085
  %name350 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal349, i32 0, i32 3, !dbg !3085
  %185 = load %union.tree_node*, %union.tree_node** %name350, align 8, !dbg !3085
  %tobool351 = icmp ne %union.tree_node* %185, null, !dbg !3085
  br i1 %tobool351, label %if.then352, label %if.end535, !dbg !3087

if.then352:                                       ; preds = %if.end348
  store i32 0, i32* %tag_needed, align 4, !dbg !3088
  %186 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3090
  %base353 = bitcast %union.tree_node* %186 to %struct.tree_base*, !dbg !3090
  %187 = bitcast %struct.tree_base* %base353 to i64*, !dbg !3090
  %bf.load354 = load i64, i64* %187, align 8, !dbg !3090
  %bf.clear355 = and i64 %bf.load354, 65535, !dbg !3090
  %bf.cast356 = trunc i64 %bf.clear355 to i32, !dbg !3090
  %cmp357 = icmp eq i32 %bf.cast356, 16, !dbg !3092
  br i1 %cmp357, label %land.lhs.true373, label %lor.lhs.false359, !dbg !3093

lor.lhs.false359:                                 ; preds = %if.then352
  %188 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3094
  %base360 = bitcast %union.tree_node* %188 to %struct.tree_base*, !dbg !3094
  %189 = bitcast %struct.tree_base* %base360 to i64*, !dbg !3094
  %bf.load361 = load i64, i64* %189, align 8, !dbg !3094
  %bf.clear362 = and i64 %bf.load361, 65535, !dbg !3094
  %bf.cast363 = trunc i64 %bf.clear362 to i32, !dbg !3094
  %cmp364 = icmp eq i32 %bf.cast363, 17, !dbg !3095
  br i1 %cmp364, label %land.lhs.true373, label %lor.lhs.false366, !dbg !3096

lor.lhs.false366:                                 ; preds = %lor.lhs.false359
  %190 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3097
  %base367 = bitcast %union.tree_node* %190 to %struct.tree_base*, !dbg !3097
  %191 = bitcast %struct.tree_base* %base367 to i64*, !dbg !3097
  %bf.load368 = load i64, i64* %191, align 8, !dbg !3097
  %bf.clear369 = and i64 %bf.load368, 65535, !dbg !3097
  %bf.cast370 = trunc i64 %bf.clear369 to i32, !dbg !3097
  %cmp371 = icmp eq i32 %bf.cast370, 18, !dbg !3098
  br i1 %cmp371, label %land.lhs.true373, label %if.end444, !dbg !3099

land.lhs.true373:                                 ; preds = %lor.lhs.false366, %lor.lhs.false359, %if.then352
  %192 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3100
  %type374 = bitcast %union.tree_node* %192 to %struct.tree_type*, !dbg !3100
  %name375 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type374, i32 0, i32 12, !dbg !3100
  %193 = load %union.tree_node*, %union.tree_node** %name375, align 8, !dbg !3100
  %194 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3101
  %cmp376 = icmp eq %union.tree_node* %193, %194, !dbg !3102
  br i1 %cmp376, label %land.lhs.true378, label %if.end444, !dbg !3103

land.lhs.true378:                                 ; preds = %land.lhs.true373
  %195 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3104
  %tobool379 = icmp ne i8 %195, 0, !dbg !3104
  br i1 %tobool379, label %if.end444, label %land.lhs.true380, !dbg !3105

land.lhs.true380:                                 ; preds = %land.lhs.true378
  %196 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3106
  %type381 = bitcast %union.tree_node* %196 to %struct.tree_type*, !dbg !3106
  %name382 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type381, i32 0, i32 12, !dbg !3106
  %197 = load %union.tree_node*, %union.tree_node** %name382, align 8, !dbg !3106
  %base383 = bitcast %union.tree_node* %197 to %struct.tree_base*, !dbg !3106
  %198 = bitcast %struct.tree_base* %base383 to i64*, !dbg !3106
  %bf.load384 = load i64, i64* %198, align 8, !dbg !3106
  %bf.lshr385 = lshr i64 %bf.load384, 22, !dbg !3106
  %bf.clear386 = and i64 %bf.lshr385, 1, !dbg !3106
  %bf.cast387 = trunc i64 %bf.clear386 to i32, !dbg !3106
  %tobool388 = icmp ne i32 %bf.cast387, 0, !dbg !3106
  br i1 %tobool388, label %if.end444, label %land.lhs.true389, !dbg !3107

land.lhs.true389:                                 ; preds = %land.lhs.true380
  %199 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3108
  %decl_common390 = bitcast %union.tree_node* %199 to %struct.tree_decl_common*, !dbg !3108
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common390, i32 0, i32 2, !dbg !3108
  %200 = bitcast i40* %artificial_flag to i64*, !dbg !3108
  %bf.load391 = load i64, i64* %200, align 8, !dbg !3108
  %bf.lshr392 = lshr i64 %bf.load391, 12, !dbg !3108
  %bf.clear393 = and i64 %bf.lshr392, 1, !dbg !3108
  %bf.cast394 = trunc i64 %bf.clear393 to i32, !dbg !3108
  %tobool395 = icmp ne i32 %bf.cast394, 0, !dbg !3108
  br i1 %tobool395, label %land.lhs.true396, label %if.end444, !dbg !3109

land.lhs.true396:                                 ; preds = %land.lhs.true389
  %201 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3110
  %type397 = bitcast %union.tree_node* %201 to %struct.tree_type*, !dbg !3110
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type397, i32 0, i32 2, !dbg !3110
  %202 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3110
  %cmp398 = icmp ne %union.tree_node* %202, null, !dbg !3110
  br i1 %cmp398, label %land.lhs.true400, label %if.end444, !dbg !3111

land.lhs.true400:                                 ; preds = %land.lhs.true396
  %203 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3112
  %type401 = bitcast %union.tree_node* %203 to %struct.tree_type*, !dbg !3112
  %size402 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type401, i32 0, i32 2, !dbg !3112
  %204 = load %union.tree_node*, %union.tree_node** %size402, align 8, !dbg !3112
  %call403 = call i32 @host_integerp(%union.tree_node* %204, i32 1), !dbg !3113
  %tobool404 = icmp ne i32 %call403, 0, !dbg !3113
  br i1 %tobool404, label %if.then405, label %if.end444, !dbg !3114

if.then405:                                       ; preds = %land.lhs.true400
  call void @llvm.dbg.declare(metadata %union.tree_node** %name406, metadata !3115, metadata !DIExpression()), !dbg !3117
  %205 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3118
  %type407 = bitcast %union.tree_node* %205 to %struct.tree_type*, !dbg !3118
  %name408 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type407, i32 0, i32 12, !dbg !3118
  %206 = load %union.tree_node*, %union.tree_node** %name408, align 8, !dbg !3118
  store %union.tree_node* %206, %union.tree_node** %name406, align 8, !dbg !3117
  %207 = load %union.tree_node*, %union.tree_node** %name406, align 8, !dbg !3119
  %base409 = bitcast %union.tree_node* %207 to %struct.tree_base*, !dbg !3119
  %208 = bitcast %struct.tree_base* %base409 to i64*, !dbg !3119
  %bf.load410 = load i64, i64* %208, align 8, !dbg !3119
  %bf.clear411 = and i64 %bf.load410, 65535, !dbg !3119
  %bf.cast412 = trunc i64 %bf.clear411 to i32, !dbg !3119
  %cmp413 = icmp eq i32 %bf.cast412, 35, !dbg !3121
  br i1 %cmp413, label %if.then415, label %if.end418, !dbg !3122

if.then415:                                       ; preds = %if.then405
  %209 = load %union.tree_node*, %union.tree_node** %name406, align 8, !dbg !3123
  %decl_minimal416 = bitcast %union.tree_node* %209 to %struct.tree_decl_minimal*, !dbg !3123
  %name417 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal416, i32 0, i32 3, !dbg !3123
  %210 = load %union.tree_node*, %union.tree_node** %name417, align 8, !dbg !3123
  store %union.tree_node* %210, %union.tree_node** %name406, align 8, !dbg !3124
  br label %if.end418, !dbg !3125

if.end418:                                        ; preds = %if.then415, %if.then405
  call void @dbxout_begin_complex_stabs(), !dbg !3126
  %211 = load %union.tree_node*, %union.tree_node** %name406, align 8, !dbg !3127
  %identifier419 = bitcast %union.tree_node* %211 to %struct.tree_identifier*, !dbg !3127
  %id420 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier419, i32 0, i32 1, !dbg !3127
  %len421 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id420, i32 0, i32 1, !dbg !3127
  %212 = load i32, i32* %len421, align 8, !dbg !3127
  %conv422 = zext i32 %212 to i64, !dbg !3127
  store i64 %conv422, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3127
  %213 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3127
  %214 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3127
  %add.ptr423 = getelementptr inbounds i8, i8* %213, i64 %214, !dbg !3127
  %215 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3127
  %cmp424 = icmp ugt i8* %add.ptr423, %215, !dbg !3127
  br i1 %cmp424, label %cond.true426, label %cond.false428, !dbg !3127

cond.true426:                                     ; preds = %if.end418
  %216 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3127
  %conv427 = trunc i64 %216 to i32, !dbg !3127
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv427), !dbg !3127
  br label %cond.end429, !dbg !3127

cond.false428:                                    ; preds = %if.end418
  br label %cond.end429, !dbg !3127

cond.end429:                                      ; preds = %cond.false428, %cond.true426
  %cond430 = phi i32 [ 0, %cond.true426 ], [ 0, %cond.false428 ], !dbg !3127
  %217 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3127
  %218 = load %union.tree_node*, %union.tree_node** %name406, align 8, !dbg !3127
  %identifier431 = bitcast %union.tree_node* %218 to %struct.tree_identifier*, !dbg !3127
  %id432 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier431, i32 0, i32 1, !dbg !3127
  %str433 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id432, i32 0, i32 0, !dbg !3127
  %219 = load i8*, i8** %str433, align 8, !dbg !3127
  %220 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %217, i8* align 1 %219, i64 %220, i1 false), !dbg !3127
  %221 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3127
  %222 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3127
  %add.ptr434 = getelementptr inbounds i8, i8* %222, i64 %221, !dbg !3127
  store i8* %add.ptr434, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3127
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3128
  %223 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3128
  %224 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3128
  %add.ptr435 = getelementptr inbounds i8, i8* %223, i64 %224, !dbg !3128
  %225 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3128
  %cmp436 = icmp ugt i8* %add.ptr435, %225, !dbg !3128
  br i1 %cmp436, label %cond.true438, label %cond.false440, !dbg !3128

cond.true438:                                     ; preds = %cond.end429
  %226 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3128
  %conv439 = trunc i64 %226 to i32, !dbg !3128
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv439), !dbg !3128
  br label %cond.end441, !dbg !3128

cond.false440:                                    ; preds = %cond.end429
  br label %cond.end441, !dbg !3128

cond.end441:                                      ; preds = %cond.false440, %cond.true438
  %cond442 = phi i32 [ 0, %cond.true438 ], [ 0, %cond.false440 ], !dbg !3128
  %227 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3128
  %228 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3128
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %227, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i64 %228, i1 false), !dbg !3128
  %229 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3128
  %230 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3128
  %add.ptr443 = getelementptr inbounds i8, i8* %230, i64 %229, !dbg !3128
  store i8* %add.ptr443, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3128
  %231 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3129
  call void @dbxout_type(%union.tree_node* %231, i32 1), !dbg !3130
  call void @dbxout_finish_complex_stabs(%union.tree_node* null, i32 128, %struct.rtx_def* null, i8* null, i32 0), !dbg !3131
  br label %if.end444, !dbg !3132

if.end444:                                        ; preds = %cond.end441, %land.lhs.true400, %land.lhs.true396, %land.lhs.true389, %land.lhs.true380, %land.lhs.true378, %land.lhs.true373, %lor.lhs.false366
  call void @dbxout_begin_complex_stabs(), !dbg !3133
  %232 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3134
  %tobool445 = icmp ne i8 %232, 0, !dbg !3134
  br i1 %tobool445, label %if.then446, label %if.end447, !dbg !3136

if.then446:                                       ; preds = %if.end444
  %233 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3137
  call void @dbxout_class_name_qualifiers(%union.tree_node* %233), !dbg !3138
  br label %if.end447, !dbg !3138

if.end447:                                        ; preds = %if.then446, %if.end444
  %234 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3139
  %decl_minimal448 = bitcast %union.tree_node* %234 to %struct.tree_decl_minimal*, !dbg !3139
  %name449 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal448, i32 0, i32 3, !dbg !3139
  %235 = load %union.tree_node*, %union.tree_node** %name449, align 8, !dbg !3139
  %identifier450 = bitcast %union.tree_node* %235 to %struct.tree_identifier*, !dbg !3139
  %id451 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier450, i32 0, i32 1, !dbg !3139
  %len452 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id451, i32 0, i32 1, !dbg !3139
  %236 = load i32, i32* %len452, align 8, !dbg !3139
  %conv453 = zext i32 %236 to i64, !dbg !3139
  store i64 %conv453, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3139
  %237 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3139
  %238 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3139
  %add.ptr454 = getelementptr inbounds i8, i8* %237, i64 %238, !dbg !3139
  %239 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3139
  %cmp455 = icmp ugt i8* %add.ptr454, %239, !dbg !3139
  br i1 %cmp455, label %cond.true457, label %cond.false459, !dbg !3139

cond.true457:                                     ; preds = %if.end447
  %240 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3139
  %conv458 = trunc i64 %240 to i32, !dbg !3139
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv458), !dbg !3139
  br label %cond.end460, !dbg !3139

cond.false459:                                    ; preds = %if.end447
  br label %cond.end460, !dbg !3139

cond.end460:                                      ; preds = %cond.false459, %cond.true457
  %cond461 = phi i32 [ 0, %cond.true457 ], [ 0, %cond.false459 ], !dbg !3139
  %241 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3139
  %242 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3139
  %decl_minimal462 = bitcast %union.tree_node* %242 to %struct.tree_decl_minimal*, !dbg !3139
  %name463 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal462, i32 0, i32 3, !dbg !3139
  %243 = load %union.tree_node*, %union.tree_node** %name463, align 8, !dbg !3139
  %identifier464 = bitcast %union.tree_node* %243 to %struct.tree_identifier*, !dbg !3139
  %id465 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier464, i32 0, i32 1, !dbg !3139
  %str466 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id465, i32 0, i32 0, !dbg !3139
  %244 = load i8*, i8** %str466, align 8, !dbg !3139
  %245 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3139
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %241, i8* align 1 %244, i64 %245, i1 false), !dbg !3139
  %246 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3139
  %247 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3139
  %add.ptr467 = getelementptr inbounds i8, i8* %247, i64 %246, !dbg !3139
  store i8* %add.ptr467, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3139
  %248 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3140
  %add.ptr468 = getelementptr inbounds i8, i8* %248, i64 1, !dbg !3140
  %249 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3140
  %cmp469 = icmp ugt i8* %add.ptr468, %249, !dbg !3140
  br i1 %cmp469, label %cond.true471, label %cond.false472, !dbg !3140

cond.true471:                                     ; preds = %cond.end460
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3140
  br label %cond.end473, !dbg !3140

cond.false472:                                    ; preds = %cond.end460
  br label %cond.end473, !dbg !3140

cond.end473:                                      ; preds = %cond.false472, %cond.true471
  %cond474 = phi i32 [ 0, %cond.true471 ], [ 0, %cond.false472 ], !dbg !3140
  %250 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3140
  %incdec.ptr475 = getelementptr inbounds i8, i8* %250, i32 1, !dbg !3140
  store i8* %incdec.ptr475, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3140
  store i8 58, i8* %250, align 1, !dbg !3140
  %251 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3141
  %base476 = bitcast %union.tree_node* %251 to %struct.tree_base*, !dbg !3141
  %252 = bitcast %struct.tree_base* %base476 to i64*, !dbg !3141
  %bf.load477 = load i64, i64* %252, align 8, !dbg !3141
  %bf.clear478 = and i64 %bf.load477, 65535, !dbg !3141
  %bf.cast479 = trunc i64 %bf.clear478 to i32, !dbg !3141
  %cmp480 = icmp eq i32 %bf.cast479, 16, !dbg !3143
  br i1 %cmp480, label %land.lhs.true496, label %lor.lhs.false482, !dbg !3144

lor.lhs.false482:                                 ; preds = %cond.end473
  %253 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3145
  %base483 = bitcast %union.tree_node* %253 to %struct.tree_base*, !dbg !3145
  %254 = bitcast %struct.tree_base* %base483 to i64*, !dbg !3145
  %bf.load484 = load i64, i64* %254, align 8, !dbg !3145
  %bf.clear485 = and i64 %bf.load484, 65535, !dbg !3145
  %bf.cast486 = trunc i64 %bf.clear485 to i32, !dbg !3145
  %cmp487 = icmp eq i32 %bf.cast486, 17, !dbg !3146
  br i1 %cmp487, label %land.lhs.true496, label %lor.lhs.false489, !dbg !3147

lor.lhs.false489:                                 ; preds = %lor.lhs.false482
  %255 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3148
  %base490 = bitcast %union.tree_node* %255 to %struct.tree_base*, !dbg !3148
  %256 = bitcast %struct.tree_base* %base490 to i64*, !dbg !3148
  %bf.load491 = load i64, i64* %256, align 8, !dbg !3148
  %bf.clear492 = and i64 %bf.load491, 65535, !dbg !3148
  %bf.cast493 = trunc i64 %bf.clear492 to i32, !dbg !3148
  %cmp494 = icmp eq i32 %bf.cast493, 18, !dbg !3149
  br i1 %cmp494, label %land.lhs.true496, label %if.end526, !dbg !3150

land.lhs.true496:                                 ; preds = %lor.lhs.false489, %lor.lhs.false482, %cond.end473
  %257 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3151
  %type497 = bitcast %union.tree_node* %257 to %struct.tree_type*, !dbg !3151
  %name498 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type497, i32 0, i32 12, !dbg !3151
  %258 = load %union.tree_node*, %union.tree_node** %name498, align 8, !dbg !3151
  %259 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3152
  %cmp499 = icmp eq %union.tree_node* %258, %259, !dbg !3153
  br i1 %cmp499, label %land.lhs.true501, label %if.end526, !dbg !3154

land.lhs.true501:                                 ; preds = %land.lhs.true496
  %260 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3155
  %decl_common502 = bitcast %union.tree_node* %260 to %struct.tree_decl_common*, !dbg !3155
  %artificial_flag503 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common502, i32 0, i32 2, !dbg !3155
  %261 = bitcast i40* %artificial_flag503 to i64*, !dbg !3155
  %bf.load504 = load i64, i64* %261, align 8, !dbg !3155
  %bf.lshr505 = lshr i64 %bf.load504, 12, !dbg !3155
  %bf.clear506 = and i64 %bf.lshr505, 1, !dbg !3155
  %bf.cast507 = trunc i64 %bf.clear506 to i32, !dbg !3155
  %tobool508 = icmp ne i32 %bf.cast507, 0, !dbg !3155
  br i1 %tobool508, label %if.then509, label %if.end526, !dbg !3156

if.then509:                                       ; preds = %land.lhs.true501
  %262 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3157
  %tobool510 = icmp ne i8 %262, 0, !dbg !3157
  br i1 %tobool510, label %if.then511, label %if.end525, !dbg !3160

if.then511:                                       ; preds = %if.then509
  %263 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3161
  %add.ptr512 = getelementptr inbounds i8, i8* %263, i64 1, !dbg !3161
  %264 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3161
  %cmp513 = icmp ugt i8* %add.ptr512, %264, !dbg !3161
  br i1 %cmp513, label %cond.true515, label %cond.false516, !dbg !3161

cond.true515:                                     ; preds = %if.then511
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3161
  br label %cond.end517, !dbg !3161

cond.false516:                                    ; preds = %if.then511
  br label %cond.end517, !dbg !3161

cond.end517:                                      ; preds = %cond.false516, %cond.true515
  %cond518 = phi i32 [ 0, %cond.true515 ], [ 0, %cond.false516 ], !dbg !3161
  %265 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3161
  %incdec.ptr519 = getelementptr inbounds i8, i8* %265, i32 1, !dbg !3161
  store i8* %incdec.ptr519, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3161
  store i8 84, i8* %265, align 1, !dbg !3161
  %266 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3163
  %type520 = bitcast %union.tree_node* %266 to %struct.tree_type*, !dbg !3163
  %name521 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type520, i32 0, i32 12, !dbg !3163
  %267 = load %union.tree_node*, %union.tree_node** %name521, align 8, !dbg !3163
  %base522 = bitcast %union.tree_node* %267 to %struct.tree_base*, !dbg !3163
  %268 = bitcast %struct.tree_base* %base522 to i64*, !dbg !3163
  %bf.load523 = load i64, i64* %268, align 8, !dbg !3164
  %bf.clear524 = and i64 %bf.load523, -4194305, !dbg !3164
  %bf.set = or i64 %bf.clear524, 4194304, !dbg !3164
  store i64 %bf.set, i64* %268, align 8, !dbg !3164
  br label %if.end525, !dbg !3165

if.end525:                                        ; preds = %cond.end517, %if.then509
  br label %if.end526, !dbg !3166

if.end526:                                        ; preds = %if.end525, %land.lhs.true501, %land.lhs.true496, %lor.lhs.false489
  %269 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3167
  %add.ptr527 = getelementptr inbounds i8, i8* %269, i64 1, !dbg !3167
  %270 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3167
  %cmp528 = icmp ugt i8* %add.ptr527, %270, !dbg !3167
  br i1 %cmp528, label %cond.true530, label %cond.false531, !dbg !3167

cond.true530:                                     ; preds = %if.end526
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3167
  br label %cond.end532, !dbg !3167

cond.false531:                                    ; preds = %if.end526
  br label %cond.end532, !dbg !3167

cond.end532:                                      ; preds = %cond.false531, %cond.true530
  %cond533 = phi i32 [ 0, %cond.true530 ], [ 0, %cond.false531 ], !dbg !3167
  %271 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3167
  %incdec.ptr534 = getelementptr inbounds i8, i8* %271, i32 1, !dbg !3167
  store i8* %incdec.ptr534, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3167
  store i8 116, i8* %271, align 1, !dbg !3167
  %272 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3168
  call void @dbxout_type(%union.tree_node* %272, i32 1), !dbg !3169
  %273 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3170
  call void @dbxout_finish_complex_stabs(%union.tree_node* %273, i32 128, %struct.rtx_def* null, i8* null, i32 0), !dbg !3171
  store i32 1, i32* %did_output, align 4, !dbg !3172
  br label %if.end535, !dbg !3173

if.end535:                                        ; preds = %cond.end532, %if.end348
  %274 = load i32, i32* %tag_needed, align 4, !dbg !3174
  %tobool536 = icmp ne i32 %274, 0, !dbg !3174
  br i1 %tobool536, label %land.lhs.true537, label %if.end611, !dbg !3176

land.lhs.true537:                                 ; preds = %if.end535
  %275 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3177
  %type538 = bitcast %union.tree_node* %275 to %struct.tree_type*, !dbg !3177
  %name539 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type538, i32 0, i32 12, !dbg !3177
  %276 = load %union.tree_node*, %union.tree_node** %name539, align 8, !dbg !3177
  %cmp540 = icmp ne %union.tree_node* %276, null, !dbg !3178
  br i1 %cmp540, label %land.lhs.true542, label %if.end611, !dbg !3179

land.lhs.true542:                                 ; preds = %land.lhs.true537
  %277 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3180
  %type543 = bitcast %union.tree_node* %277 to %struct.tree_type*, !dbg !3180
  %name544 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type543, i32 0, i32 12, !dbg !3180
  %278 = load %union.tree_node*, %union.tree_node** %name544, align 8, !dbg !3180
  %base545 = bitcast %union.tree_node* %278 to %struct.tree_base*, !dbg !3180
  %279 = bitcast %struct.tree_base* %base545 to i64*, !dbg !3180
  %bf.load546 = load i64, i64* %279, align 8, !dbg !3180
  %bf.clear547 = and i64 %bf.load546, 65535, !dbg !3180
  %bf.cast548 = trunc i64 %bf.clear547 to i32, !dbg !3180
  %cmp549 = icmp eq i32 %bf.cast548, 1, !dbg !3181
  br i1 %cmp549, label %land.lhs.true558, label %lor.lhs.false551, !dbg !3182

lor.lhs.false551:                                 ; preds = %land.lhs.true542
  %280 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3183
  %type552 = bitcast %union.tree_node* %280 to %struct.tree_type*, !dbg !3183
  %name553 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type552, i32 0, i32 12, !dbg !3183
  %281 = load %union.tree_node*, %union.tree_node** %name553, align 8, !dbg !3183
  %decl_minimal554 = bitcast %union.tree_node* %281 to %struct.tree_decl_minimal*, !dbg !3183
  %name555 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal554, i32 0, i32 3, !dbg !3183
  %282 = load %union.tree_node*, %union.tree_node** %name555, align 8, !dbg !3183
  %cmp556 = icmp ne %union.tree_node* %282, null, !dbg !3184
  br i1 %cmp556, label %land.lhs.true558, label %if.end611, !dbg !3185

land.lhs.true558:                                 ; preds = %lor.lhs.false551, %land.lhs.true542
  %283 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3186
  %type559 = bitcast %union.tree_node* %283 to %struct.tree_type*, !dbg !3186
  %size560 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type559, i32 0, i32 2, !dbg !3186
  %284 = load %union.tree_node*, %union.tree_node** %size560, align 8, !dbg !3186
  %cmp561 = icmp ne %union.tree_node* %284, null, !dbg !3186
  br i1 %cmp561, label %land.lhs.true563, label %if.end611, !dbg !3187

land.lhs.true563:                                 ; preds = %land.lhs.true558
  %285 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3188
  %type564 = bitcast %union.tree_node* %285 to %struct.tree_type*, !dbg !3188
  %name565 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type564, i32 0, i32 12, !dbg !3188
  %286 = load %union.tree_node*, %union.tree_node** %name565, align 8, !dbg !3188
  %base566 = bitcast %union.tree_node* %286 to %struct.tree_base*, !dbg !3188
  %287 = bitcast %struct.tree_base* %base566 to i64*, !dbg !3188
  %bf.load567 = load i64, i64* %287, align 8, !dbg !3188
  %bf.lshr568 = lshr i64 %bf.load567, 22, !dbg !3188
  %bf.clear569 = and i64 %bf.lshr568, 1, !dbg !3188
  %bf.cast570 = trunc i64 %bf.clear569 to i32, !dbg !3188
  %tobool571 = icmp ne i32 %bf.cast570, 0, !dbg !3188
  br i1 %tobool571, label %if.end611, label %if.then572, !dbg !3189

if.then572:                                       ; preds = %land.lhs.true563
  call void @llvm.dbg.declare(metadata %union.tree_node** %name573, metadata !3190, metadata !DIExpression()), !dbg !3192
  %288 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3193
  %type574 = bitcast %union.tree_node* %288 to %struct.tree_type*, !dbg !3193
  %name575 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type574, i32 0, i32 12, !dbg !3193
  %289 = load %union.tree_node*, %union.tree_node** %name575, align 8, !dbg !3193
  store %union.tree_node* %289, %union.tree_node** %name573, align 8, !dbg !3192
  %290 = load %union.tree_node*, %union.tree_node** %name573, align 8, !dbg !3194
  %base576 = bitcast %union.tree_node* %290 to %struct.tree_base*, !dbg !3194
  %291 = bitcast %struct.tree_base* %base576 to i64*, !dbg !3194
  %bf.load577 = load i64, i64* %291, align 8, !dbg !3194
  %bf.clear578 = and i64 %bf.load577, 65535, !dbg !3194
  %bf.cast579 = trunc i64 %bf.clear578 to i32, !dbg !3194
  %cmp580 = icmp eq i32 %bf.cast579, 35, !dbg !3196
  br i1 %cmp580, label %if.then582, label %if.end585, !dbg !3197

if.then582:                                       ; preds = %if.then572
  %292 = load %union.tree_node*, %union.tree_node** %name573, align 8, !dbg !3198
  %decl_minimal583 = bitcast %union.tree_node* %292 to %struct.tree_decl_minimal*, !dbg !3198
  %name584 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal583, i32 0, i32 3, !dbg !3198
  %293 = load %union.tree_node*, %union.tree_node** %name584, align 8, !dbg !3198
  store %union.tree_node* %293, %union.tree_node** %name573, align 8, !dbg !3199
  br label %if.end585, !dbg !3200

if.end585:                                        ; preds = %if.then582, %if.then572
  call void @dbxout_begin_complex_stabs(), !dbg !3201
  %294 = load %union.tree_node*, %union.tree_node** %name573, align 8, !dbg !3202
  %identifier586 = bitcast %union.tree_node* %294 to %struct.tree_identifier*, !dbg !3202
  %id587 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier586, i32 0, i32 1, !dbg !3202
  %len588 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id587, i32 0, i32 1, !dbg !3202
  %295 = load i32, i32* %len588, align 8, !dbg !3202
  %conv589 = zext i32 %295 to i64, !dbg !3202
  store i64 %conv589, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3202
  %296 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3202
  %297 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3202
  %add.ptr590 = getelementptr inbounds i8, i8* %296, i64 %297, !dbg !3202
  %298 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3202
  %cmp591 = icmp ugt i8* %add.ptr590, %298, !dbg !3202
  br i1 %cmp591, label %cond.true593, label %cond.false595, !dbg !3202

cond.true593:                                     ; preds = %if.end585
  %299 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3202
  %conv594 = trunc i64 %299 to i32, !dbg !3202
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv594), !dbg !3202
  br label %cond.end596, !dbg !3202

cond.false595:                                    ; preds = %if.end585
  br label %cond.end596, !dbg !3202

cond.end596:                                      ; preds = %cond.false595, %cond.true593
  %cond597 = phi i32 [ 0, %cond.true593 ], [ 0, %cond.false595 ], !dbg !3202
  %300 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3202
  %301 = load %union.tree_node*, %union.tree_node** %name573, align 8, !dbg !3202
  %identifier598 = bitcast %union.tree_node* %301 to %struct.tree_identifier*, !dbg !3202
  %id599 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier598, i32 0, i32 1, !dbg !3202
  %str600 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id599, i32 0, i32 0, !dbg !3202
  %302 = load i8*, i8** %str600, align 8, !dbg !3202
  %303 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3202
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %300, i8* align 1 %302, i64 %303, i1 false), !dbg !3202
  %304 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3202
  %305 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3202
  %add.ptr601 = getelementptr inbounds i8, i8* %305, i64 %304, !dbg !3202
  store i8* %add.ptr601, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3202
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3203
  %306 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3203
  %307 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3203
  %add.ptr602 = getelementptr inbounds i8, i8* %306, i64 %307, !dbg !3203
  %308 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3203
  %cmp603 = icmp ugt i8* %add.ptr602, %308, !dbg !3203
  br i1 %cmp603, label %cond.true605, label %cond.false607, !dbg !3203

cond.true605:                                     ; preds = %cond.end596
  %309 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3203
  %conv606 = trunc i64 %309 to i32, !dbg !3203
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv606), !dbg !3203
  br label %cond.end608, !dbg !3203

cond.false607:                                    ; preds = %cond.end596
  br label %cond.end608, !dbg !3203

cond.end608:                                      ; preds = %cond.false607, %cond.true605
  %cond609 = phi i32 [ 0, %cond.true605 ], [ 0, %cond.false607 ], !dbg !3203
  %310 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3203
  %311 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3203
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %310, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i64 %311, i1 false), !dbg !3203
  %312 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3203
  %313 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3203
  %add.ptr610 = getelementptr inbounds i8, i8* %313, i64 %312, !dbg !3203
  store i8* %add.ptr610, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3203
  %314 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3204
  call void @dbxout_type(%union.tree_node* %314, i32 1), !dbg !3205
  call void @dbxout_finish_complex_stabs(%union.tree_node* null, i32 128, %struct.rtx_def* null, i8* null, i32 0), !dbg !3206
  store i32 1, i32* %did_output, align 4, !dbg !3207
  br label %if.end611, !dbg !3208

if.end611:                                        ; preds = %cond.end608, %land.lhs.true563, %land.lhs.true558, %lor.lhs.false551, %land.lhs.true537, %if.end535
  %315 = load i32, i32* %did_output, align 4, !dbg !3209
  %tobool612 = icmp ne i32 %315, 0, !dbg !3209
  br i1 %tobool612, label %if.end630, label %land.lhs.true613, !dbg !3211

land.lhs.true613:                                 ; preds = %if.end611
  %316 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3212
  %base614 = bitcast %union.tree_node* %316 to %struct.tree_base*, !dbg !3212
  %317 = bitcast %struct.tree_base* %base614 to i64*, !dbg !3212
  %bf.load615 = load i64, i64* %317, align 8, !dbg !3212
  %bf.clear616 = and i64 %bf.load615, 65535, !dbg !3212
  %bf.cast617 = trunc i64 %bf.clear616 to i32, !dbg !3212
  %cmp618 = icmp eq i32 %bf.cast617, 6, !dbg !3213
  br i1 %cmp618, label %if.then620, label %if.end630, !dbg !3214

if.then620:                                       ; preds = %land.lhs.true613
  call void @dbxout_begin_complex_stabs(), !dbg !3215
  store i64 3, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3217
  %318 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3217
  %319 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3217
  %add.ptr621 = getelementptr inbounds i8, i8* %318, i64 %319, !dbg !3217
  %320 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3217
  %cmp622 = icmp ugt i8* %add.ptr621, %320, !dbg !3217
  br i1 %cmp622, label %cond.true624, label %cond.false626, !dbg !3217

cond.true624:                                     ; preds = %if.then620
  %321 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3217
  %conv625 = trunc i64 %321 to i32, !dbg !3217
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv625), !dbg !3217
  br label %cond.end627, !dbg !3217

cond.false626:                                    ; preds = %if.then620
  br label %cond.end627, !dbg !3217

cond.end627:                                      ; preds = %cond.false626, %cond.true624
  %cond628 = phi i32 [ 0, %cond.true624 ], [ 0, %cond.false626 ], !dbg !3217
  %322 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3217
  %323 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3217
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %322, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i64 %323, i1 false), !dbg !3217
  %324 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3217
  %325 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3217
  %add.ptr629 = getelementptr inbounds i8, i8* %325, i64 %324, !dbg !3217
  store i8* %add.ptr629, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3217
  %326 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3218
  call void @dbxout_type(%union.tree_node* %326, i32 1), !dbg !3219
  call void @dbxout_finish_complex_stabs(%union.tree_node* null, i32 128, %struct.rtx_def* null, i8* null, i32 0), !dbg !3220
  br label %if.end630, !dbg !3221

if.end630:                                        ; preds = %cond.end627, %land.lhs.true613, %if.end611
  %327 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3222
  %base631 = bitcast %union.tree_node* %327 to %struct.tree_base*, !dbg !3222
  %328 = bitcast %struct.tree_base* %base631 to i64*, !dbg !3222
  %bf.load632 = load i64, i64* %328, align 8, !dbg !3223
  %bf.clear633 = and i64 %bf.load632, -4194305, !dbg !3223
  %bf.set634 = or i64 %bf.clear633, 4194304, !dbg !3223
  store i64 %bf.set634, i64* %328, align 8, !dbg !3223
  br label %sw.epilog, !dbg !3224

sw.bb635:                                         ; preds = %if.end149
  %329 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3225
  %decl_common636 = bitcast %union.tree_node* %329 to %struct.tree_decl_common*, !dbg !3225
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common636, i32 0, i32 2, !dbg !3225
  %330 = bitcast i40* %decl_flag_2 to i64*, !dbg !3225
  %bf.load637 = load i64, i64* %330, align 8, !dbg !3225
  %bf.lshr638 = lshr i64 %bf.load637, 26, !dbg !3225
  %bf.clear639 = and i64 %bf.lshr638, 1, !dbg !3225
  %bf.cast640 = trunc i64 %bf.clear639 to i32, !dbg !3225
  %tobool641 = icmp ne i32 %bf.cast640, 0, !dbg !3225
  br i1 %tobool641, label %if.then642, label %if.end644, !dbg !3227

if.then642:                                       ; preds = %sw.bb635
  %331 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3228
  %call643 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %331), !dbg !3228
  store %union.tree_node* %call643, %union.tree_node** %decl.addr, align 8, !dbg !3229
  br label %if.end644, !dbg !3230

if.end644:                                        ; preds = %if.then642, %sw.bb635
  %332 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3231
  %base645 = bitcast %union.tree_node* %332 to %struct.tree_base*, !dbg !3231
  %333 = bitcast %struct.tree_base* %base645 to i64*, !dbg !3231
  %bf.load646 = load i64, i64* %333, align 8, !dbg !3231
  %bf.clear647 = and i64 %bf.load646, 65535, !dbg !3231
  %bf.cast648 = trunc i64 %bf.clear647 to i32, !dbg !3231
  %cmp649 = icmp eq i32 %bf.cast648, 32, !dbg !3231
  br i1 %cmp649, label %cond.false652, label %cond.true651, !dbg !3231

cond.true651:                                     ; preds = %if.end644
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 2801, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !3231
  br label %cond.end653, !dbg !3231

cond.false652:                                    ; preds = %if.end644
  br label %cond.end653, !dbg !3231

cond.end653:                                      ; preds = %cond.false652, %cond.true651
  %cond654 = phi i32 [ 0, %cond.true651 ], [ 0, %cond.false652 ], !dbg !3231
  br label %sw.bb655, !dbg !3231

sw.bb655:                                         ; preds = %if.end149, %if.end149, %cond.end653
  %334 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3232
  %decl_common656 = bitcast %union.tree_node* %334 to %struct.tree_decl_common*, !dbg !3232
  %decl_flag_1657 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common656, i32 0, i32 2, !dbg !3232
  %335 = bitcast i40* %decl_flag_1657 to i64*, !dbg !3232
  %bf.load658 = load i64, i64* %335, align 8, !dbg !3232
  %bf.lshr659 = lshr i64 %bf.load658, 25, !dbg !3232
  %bf.clear660 = and i64 %bf.lshr659, 1, !dbg !3232
  %bf.cast661 = trunc i64 %bf.clear660 to i32, !dbg !3232
  %tobool662 = icmp ne i32 %bf.cast661, 0, !dbg !3232
  br i1 %tobool662, label %if.then663, label %if.end664, !dbg !3234

if.then663:                                       ; preds = %sw.bb655
  br label %sw.epilog, !dbg !3235

if.end664:                                        ; preds = %sw.bb655
  %336 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3236
  %base665 = bitcast %union.tree_node* %336 to %struct.tree_base*, !dbg !3236
  %337 = bitcast %struct.tree_base* %base665 to i64*, !dbg !3236
  %bf.load666 = load i64, i64* %337, align 8, !dbg !3236
  %bf.lshr667 = lshr i64 %bf.load666, 26, !dbg !3236
  %bf.clear668 = and i64 %bf.lshr667, 1, !dbg !3236
  %bf.cast669 = trunc i64 %bf.clear668 to i32, !dbg !3236
  %tobool670 = icmp ne i32 %bf.cast669, 0, !dbg !3236
  br i1 %tobool670, label %land.lhs.true671, label %if.end766, !dbg !3238

land.lhs.true671:                                 ; preds = %if.end664
  %338 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3239
  %base672 = bitcast %union.tree_node* %338 to %struct.tree_base*, !dbg !3239
  %339 = bitcast %struct.tree_base* %base672 to i64*, !dbg !3239
  %bf.load673 = load i64, i64* %339, align 8, !dbg !3239
  %bf.lshr674 = lshr i64 %bf.load673, 20, !dbg !3239
  %bf.clear675 = and i64 %bf.lshr674, 1, !dbg !3239
  %bf.cast676 = trunc i64 %bf.clear675 to i32, !dbg !3239
  %tobool677 = icmp ne i32 %bf.cast676, 0, !dbg !3239
  br i1 %tobool677, label %land.lhs.true678, label %if.end766, !dbg !3240

land.lhs.true678:                                 ; preds = %land.lhs.true671
  %340 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3241
  %decl_common679 = bitcast %union.tree_node* %340 to %struct.tree_decl_common*, !dbg !3241
  %initial680 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common679, i32 0, i32 5, !dbg !3241
  %341 = load %union.tree_node*, %union.tree_node** %initial680, align 8, !dbg !3241
  %cmp681 = icmp ne %union.tree_node* %341, null, !dbg !3242
  br i1 %cmp681, label %land.lhs.true683, label %if.end766, !dbg !3243

land.lhs.true683:                                 ; preds = %land.lhs.true678
  %342 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3244
  %decl_common684 = bitcast %union.tree_node* %342 to %struct.tree_decl_common*, !dbg !3244
  %initial685 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common684, i32 0, i32 5, !dbg !3244
  %343 = load %union.tree_node*, %union.tree_node** %initial685, align 8, !dbg !3244
  %call686 = call i32 @host_integerp(%union.tree_node* %343, i32 0), !dbg !3245
  %tobool687 = icmp ne i32 %call686, 0, !dbg !3245
  br i1 %tobool687, label %land.lhs.true688, label %if.end766, !dbg !3246

land.lhs.true688:                                 ; preds = %land.lhs.true683
  %344 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3247
  %base689 = bitcast %union.tree_node* %344 to %struct.tree_base*, !dbg !3247
  %345 = bitcast %struct.tree_base* %base689 to i64*, !dbg !3247
  %bf.load690 = load i64, i64* %345, align 8, !dbg !3247
  %bf.lshr691 = lshr i64 %bf.load690, 22, !dbg !3247
  %bf.clear692 = and i64 %bf.lshr691, 1, !dbg !3247
  %bf.cast693 = trunc i64 %bf.clear692 to i32, !dbg !3247
  %tobool694 = icmp ne i32 %bf.cast693, 0, !dbg !3247
  br i1 %tobool694, label %if.end766, label %land.lhs.true695, !dbg !3248

land.lhs.true695:                                 ; preds = %land.lhs.true688
  %346 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3249
  %decl_minimal696 = bitcast %union.tree_node* %346 to %struct.tree_decl_minimal*, !dbg !3249
  %context697 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal696, i32 0, i32 4, !dbg !3249
  %347 = load %union.tree_node*, %union.tree_node** %context697, align 8, !dbg !3249
  %cmp698 = icmp eq %union.tree_node* %347, null, !dbg !3250
  br i1 %cmp698, label %land.lhs.true718, label %lor.lhs.false700, !dbg !3251

lor.lhs.false700:                                 ; preds = %land.lhs.true695
  %348 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3252
  %decl_minimal701 = bitcast %union.tree_node* %348 to %struct.tree_decl_minimal*, !dbg !3252
  %context702 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal701, i32 0, i32 4, !dbg !3252
  %349 = load %union.tree_node*, %union.tree_node** %context702, align 8, !dbg !3252
  %base703 = bitcast %union.tree_node* %349 to %struct.tree_base*, !dbg !3252
  %350 = bitcast %struct.tree_base* %base703 to i64*, !dbg !3252
  %bf.load704 = load i64, i64* %350, align 8, !dbg !3252
  %bf.clear705 = and i64 %bf.load704, 65535, !dbg !3252
  %bf.cast706 = trunc i64 %bf.clear705 to i32, !dbg !3252
  %cmp707 = icmp eq i32 %bf.cast706, 4, !dbg !3253
  br i1 %cmp707, label %land.lhs.true718, label %lor.lhs.false709, !dbg !3254

lor.lhs.false709:                                 ; preds = %lor.lhs.false700
  %351 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3255
  %decl_minimal710 = bitcast %union.tree_node* %351 to %struct.tree_decl_minimal*, !dbg !3255
  %context711 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal710, i32 0, i32 4, !dbg !3255
  %352 = load %union.tree_node*, %union.tree_node** %context711, align 8, !dbg !3255
  %base712 = bitcast %union.tree_node* %352 to %struct.tree_base*, !dbg !3255
  %353 = bitcast %struct.tree_base* %base712 to i64*, !dbg !3255
  %bf.load713 = load i64, i64* %353, align 8, !dbg !3255
  %bf.clear714 = and i64 %bf.load713, 65535, !dbg !3255
  %bf.cast715 = trunc i64 %bf.clear714 to i32, !dbg !3255
  %cmp716 = icmp eq i32 %bf.cast715, 38, !dbg !3256
  br i1 %cmp716, label %land.lhs.true718, label %if.end766, !dbg !3257

land.lhs.true718:                                 ; preds = %lor.lhs.false709, %lor.lhs.false700, %land.lhs.true695
  %354 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3258
  %base719 = bitcast %union.tree_node* %354 to %struct.tree_base*, !dbg !3258
  %355 = bitcast %struct.tree_base* %base719 to i64*, !dbg !3258
  %bf.load720 = load i64, i64* %355, align 8, !dbg !3258
  %bf.lshr721 = lshr i64 %bf.load720, 27, !dbg !3258
  %bf.clear722 = and i64 %bf.lshr721, 1, !dbg !3258
  %bf.cast723 = trunc i64 %bf.clear722 to i32, !dbg !3258
  %cmp724 = icmp eq i32 %bf.cast723, 0, !dbg !3259
  br i1 %cmp724, label %if.then726, label %if.end766, !dbg !3260

if.then726:                                       ; preds = %land.lhs.true718
  %356 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3261
  %common727 = bitcast %union.tree_node* %356 to %struct.tree_common*, !dbg !3261
  %type728 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common727, i32 0, i32 2, !dbg !3261
  %357 = load %union.tree_node*, %union.tree_node** %type728, align 8, !dbg !3261
  %base729 = bitcast %union.tree_node* %357 to %struct.tree_base*, !dbg !3261
  %358 = bitcast %struct.tree_base* %base729 to i64*, !dbg !3261
  %bf.load730 = load i64, i64* %358, align 8, !dbg !3261
  %bf.clear731 = and i64 %bf.load730, 65535, !dbg !3261
  %bf.cast732 = trunc i64 %bf.clear731 to i32, !dbg !3261
  %cmp733 = icmp eq i32 %bf.cast732, 8, !dbg !3264
  br i1 %cmp733, label %if.then744, label %lor.lhs.false735, !dbg !3265

lor.lhs.false735:                                 ; preds = %if.then726
  %359 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3266
  %common736 = bitcast %union.tree_node* %359 to %struct.tree_common*, !dbg !3266
  %type737 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common736, i32 0, i32 2, !dbg !3266
  %360 = load %union.tree_node*, %union.tree_node** %type737, align 8, !dbg !3266
  %base738 = bitcast %union.tree_node* %360 to %struct.tree_base*, !dbg !3266
  %361 = bitcast %struct.tree_base* %base738 to i64*, !dbg !3266
  %bf.load739 = load i64, i64* %361, align 8, !dbg !3266
  %bf.clear740 = and i64 %bf.load739, 65535, !dbg !3266
  %bf.cast741 = trunc i64 %bf.clear740 to i32, !dbg !3266
  %cmp742 = icmp eq i32 %bf.cast741, 6, !dbg !3267
  br i1 %cmp742, label %if.then744, label %if.else765, !dbg !3268

if.then744:                                       ; preds = %lor.lhs.false735, %if.then726
  call void @llvm.dbg.declare(metadata i64* %ival, metadata !3269, metadata !DIExpression()), !dbg !3271
  %362 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3272
  %decl_common745 = bitcast %union.tree_node* %362 to %struct.tree_decl_common*, !dbg !3272
  %initial746 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common745, i32 0, i32 5, !dbg !3272
  %363 = load %union.tree_node*, %union.tree_node** %initial746, align 8, !dbg !3272
  %int_cst = bitcast %union.tree_node* %363 to %struct.tree_int_cst*, !dbg !3272
  %int_cst747 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3272
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst747, i32 0, i32 0, !dbg !3272
  %364 = load i64, i64* %low, align 8, !dbg !3272
  store i64 %364, i64* %ival, align 8, !dbg !3271
  call void @dbxout_begin_complex_stabs(), !dbg !3273
  %365 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3274
  call void @dbxout_symbol_name(%union.tree_node* %365, i8* null, i32 99), !dbg !3275
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3276
  %366 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3276
  %367 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3276
  %add.ptr748 = getelementptr inbounds i8, i8* %366, i64 %367, !dbg !3276
  %368 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3276
  %cmp749 = icmp ugt i8* %add.ptr748, %368, !dbg !3276
  br i1 %cmp749, label %cond.true751, label %cond.false753, !dbg !3276

cond.true751:                                     ; preds = %if.then744
  %369 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3276
  %conv752 = trunc i64 %369 to i32, !dbg !3276
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv752), !dbg !3276
  br label %cond.end754, !dbg !3276

cond.false753:                                    ; preds = %if.then744
  br label %cond.end754, !dbg !3276

cond.end754:                                      ; preds = %cond.false753, %cond.true751
  %cond755 = phi i32 [ 0, %cond.true751 ], [ 0, %cond.false753 ], !dbg !3276
  %370 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3276
  %371 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3276
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %370, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), i64 %371, i1 false), !dbg !3276
  %372 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3276
  %373 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3276
  %add.ptr756 = getelementptr inbounds i8, i8* %373, i64 %372, !dbg !3276
  store i8* %add.ptr756, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3276
  %374 = load i64, i64* %ival, align 8, !dbg !3277
  call void @stabstr_D(i64 %374), !dbg !3278
  call void @dbxout_finish_complex_stabs(%union.tree_node* null, i32 128, %struct.rtx_def* null, i8* null, i32 0), !dbg !3279
  %375 = load i32, i32* @debug_nesting, align 4, !dbg !3280
  %dec757 = add nsw i32 %375, -1, !dbg !3280
  store i32 %dec757, i32* @debug_nesting, align 4, !dbg !3280
  %cmp758 = icmp eq i32 %dec757, 0, !dbg !3280
  br i1 %cmp758, label %land.lhs.true760, label %if.end764, !dbg !3280

land.lhs.true760:                                 ; preds = %cond.end754
  %376 = load i32, i32* @symbol_queue_index, align 4, !dbg !3280
  %cmp761 = icmp sgt i32 %376, 0, !dbg !3280
  br i1 %cmp761, label %if.then763, label %if.end764, !dbg !3282

if.then763:                                       ; preds = %land.lhs.true760
  call void @emit_pending_bincls_if_required(), !dbg !3283
  call void @debug_flush_symbol_queue(), !dbg !3283
  br label %if.end764, !dbg !3283

if.end764:                                        ; preds = %if.then763, %land.lhs.true760, %cond.end754
  store i32 1, i32* %retval, align 4, !dbg !3285
  br label %return, !dbg !3285

if.else765:                                       ; preds = %lor.lhs.false735
  br label %sw.epilog, !dbg !3286

if.end766:                                        ; preds = %land.lhs.true718, %lor.lhs.false709, %land.lhs.true688, %land.lhs.true683, %land.lhs.true678, %land.lhs.true671, %if.end664
  %377 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3287
  %call767 = call %struct.rtx_def* @dbxout_expand_expr(%union.tree_node* %377), !dbg !3288
  store %struct.rtx_def* %call767, %struct.rtx_def** %decl_rtl, align 8, !dbg !3289
  %378 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !3290
  %tobool768 = icmp ne %struct.rtx_def* %378, null, !dbg !3290
  br i1 %tobool768, label %if.end773, label %if.then769, !dbg !3292

if.then769:                                       ; preds = %if.end766
  br label %do.body770, !dbg !3293

do.body770:                                       ; preds = %if.then769
  %379 = load i32, i32* @debug_nesting, align 4, !dbg !3294
  %dec771 = add nsw i32 %379, -1, !dbg !3294
  store i32 %dec771, i32* @debug_nesting, align 4, !dbg !3294
  store i32 0, i32* %retval, align 4, !dbg !3294
  br label %return, !dbg !3294

do.end772:                                        ; No predecessors!
  br label %if.end773, !dbg !3294

if.end773:                                        ; preds = %do.end772, %if.end766
  %380 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !3296
  %call774 = call %struct.rtx_def* @eliminate_regs(%struct.rtx_def* %380, i32 0, %struct.rtx_def* null), !dbg !3297
  store %struct.rtx_def* %call774, %struct.rtx_def** %decl_rtl, align 8, !dbg !3298
  %381 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3299
  %382 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3300
  %383 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !3301
  %call775 = call i32 @dbxout_symbol_location(%union.tree_node* %381, %union.tree_node* %382, i8* null, %struct.rtx_def* %383), !dbg !3302
  store i32 %call775, i32* %result, align 4, !dbg !3303
  br label %sw.epilog, !dbg !3304

sw.default:                                       ; preds = %if.end149
  br label %sw.epilog, !dbg !3305

sw.epilog:                                        ; preds = %sw.default, %if.end773, %if.else765, %if.then663, %if.end630, %if.end324, %if.then218, %if.then206, %if.then194, %if.then189, %sw.bb
  %384 = load i32, i32* @debug_nesting, align 4, !dbg !3306
  %dec776 = add nsw i32 %384, -1, !dbg !3306
  store i32 %dec776, i32* @debug_nesting, align 4, !dbg !3306
  %cmp777 = icmp eq i32 %dec776, 0, !dbg !3306
  br i1 %cmp777, label %land.lhs.true779, label %if.end783, !dbg !3306

land.lhs.true779:                                 ; preds = %sw.epilog
  %385 = load i32, i32* @symbol_queue_index, align 4, !dbg !3306
  %cmp780 = icmp sgt i32 %385, 0, !dbg !3306
  br i1 %cmp780, label %if.then782, label %if.end783, !dbg !3308

if.then782:                                       ; preds = %land.lhs.true779
  call void @emit_pending_bincls_if_required(), !dbg !3309
  call void @debug_flush_symbol_queue(), !dbg !3309
  br label %if.end783, !dbg !3309

if.end783:                                        ; preds = %if.then782, %land.lhs.true779, %sw.epilog
  %386 = load i32, i32* %result, align 4, !dbg !3311
  store i32 %386, i32* %retval, align 4, !dbg !3312
  br label %return, !dbg !3312

return:                                           ; preds = %if.end783, %do.body770, %if.end764, %do.body345, %do.body179, %do.body30, %do.body24, %do.body
  %387 = load i32, i32* %retval, align 4, !dbg !3313
  ret i32 %387, !dbg !3313
}

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #1

declare dso_local void @debug_queue_symbol(%union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @emit_pending_bincls_if_required() #0 !dbg !3314 {
entry:
  %0 = load i32, i32* @pending_bincls, align 4, !dbg !3315
  %tobool = icmp ne i32 %0, 0, !dbg !3315
  br i1 %tobool, label %if.then, label %if.end, !dbg !3317

if.then:                                          ; preds = %entry
  call void @emit_pending_bincls(), !dbg !3318
  br label %if.end, !dbg !3318

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3319
}

declare dso_local void @make_decl_rtl(%union.tree_node*) #1

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @output_used_types() #0 !dbg !3320 {
entry:
  %types = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3321
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3321
  %tobool = icmp ne %struct.function* %add.ptr, null, !dbg !3321
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3323

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3324
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3324
  %used_types_hash = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 12, !dbg !3325
  %2 = load %struct.htab*, %struct.htab** %used_types_hash, align 8, !dbg !3325
  %tobool2 = icmp ne %struct.htab* %2, null, !dbg !3324
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3326

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %types, metadata !3327, metadata !DIExpression()), !dbg !3329
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3330, metadata !DIExpression()), !dbg !3331
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3332, metadata !DIExpression()), !dbg !3333
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3334
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3334
  %used_types_hash4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 12, !dbg !3334
  %4 = load %struct.htab*, %struct.htab** %used_types_hash4, align 8, !dbg !3334
  %call = call i64 @htab_elements(%struct.htab* %4), !dbg !3334
  %conv = trunc i64 %call to i32, !dbg !3334
  %call5 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %conv), !dbg !3334
  store %struct.VEC_tree_heap* %call5, %struct.VEC_tree_heap** %types, align 8, !dbg !3335
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3336
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3336
  %used_types_hash7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 12, !dbg !3337
  %6 = load %struct.htab*, %struct.htab** %used_types_hash7, align 8, !dbg !3337
  %7 = bitcast %struct.VEC_tree_heap** %types to i8*, !dbg !3338
  call void @htab_traverse(%struct.htab* %6, i32 (i8**, i8*)* @output_used_types_helper, i8* %7), !dbg !3339
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !3340
  %tobool8 = icmp ne %struct.VEC_tree_heap* %8, null, !dbg !3340
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !3340

cond.true:                                        ; preds = %if.then
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !3340
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %9, i32 0, i32 0, !dbg !3340
  br label %cond.end, !dbg !3340

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3340

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3340
  %call9 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond), !dbg !3340
  %10 = bitcast %union.tree_node** %call9 to i8*, !dbg !3340
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !3341
  %tobool10 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !3341
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !3341

cond.true11:                                      ; preds = %cond.end
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !3341
  %base12 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %12, i32 0, i32 0, !dbg !3341
  br label %cond.end14, !dbg !3341

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !3341

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_tree_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !3341
  %call16 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond15), !dbg !3341
  %conv17 = zext i32 %call16 to i64, !dbg !3341
  call void @spec_qsort(i8* %10, i64 %conv17, i64 8, i32 (i8*, i8*)* @output_types_sort), !dbg !3342
  store i32 0, i32* %i, align 4, !dbg !3343
  br label %for.cond, !dbg !3345

for.cond:                                         ; preds = %for.inc, %cond.end14
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !3346
  %tobool18 = icmp ne %struct.VEC_tree_heap* %13, null, !dbg !3346
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !3346

cond.true19:                                      ; preds = %for.cond
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !3346
  %base20 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !3346
  br label %cond.end22, !dbg !3346

cond.false21:                                     ; preds = %for.cond
  br label %cond.end22, !dbg !3346

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_tree_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !3346
  %15 = load i32, i32* %i, align 4, !dbg !3346
  %call24 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond23, i32 %15, %union.tree_node** %type), !dbg !3346
  %tobool25 = icmp ne i32 %call24, 0, !dbg !3348
  br i1 %tobool25, label %for.body, label %for.end, !dbg !3348

for.body:                                         ; preds = %cond.end22
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3349
  call void @debug_queue_symbol(%union.tree_node* %16), !dbg !3350
  br label %for.inc, !dbg !3350

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !3351
  %inc = add nsw i32 %17, 1, !dbg !3351
  store i32 %inc, i32* %i, align 4, !dbg !3351
  br label %for.cond, !dbg !3352, !llvm.loop !3353

for.end:                                          ; preds = %cond.end22
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %types), !dbg !3355
  br label %if.end, !dbg !3356

if.end:                                           ; preds = %for.end, %land.lhs.true, %entry
  ret void, !dbg !3357
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_begin_complex_stabs() #0 !dbg !3358 {
entry:
  call void @emit_pending_bincls_if_required(), !dbg !3359
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !3360
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !3361
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !3362
  %call1 = call i32 @putc(i32 34, %struct._IO_FILE* %1), !dbg !3363
  %2 = load i64, i64* @stabstr_last_contin_point, align 8, !dbg !3364
  %cmp = icmp eq i64 %2, 0, !dbg !3364
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3364

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 628, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !3364
  br label %cond.end, !dbg !3364

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3364
  ret void, !dbg !3365
}

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #1

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i64 @strlen(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_type(%union.tree_node* %type, i32 %full) #0 !dbg !2199 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %full.addr = alloca i32, align 4
  %vector_type = alloca i8, align 1
  %tem = alloca %union.tree_node*, align 8
  %main_variant = alloca %union.tree_node*, align 8
  %low = alloca %union.tree_node*, align 8
  %high = alloca %union.tree_node*, align 8
  %orig_type = alloca %union.tree_node*, align 8
  %binfo = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %child = alloca %union.tree_node*, align 8
  %accesses = alloca %struct.VEC_tree_gc*, align 8
  %access = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3366, metadata !DIExpression()), !dbg !3367
  store i32 %full, i32* %full.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %full.addr, metadata !3368, metadata !DIExpression()), !dbg !3369
  call void @llvm.dbg.declare(metadata i8* %vector_type, metadata !3370, metadata !DIExpression()), !dbg !3371
  store i8 0, i8* %vector_type, align 1, !dbg !3371
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !3372, metadata !DIExpression()), !dbg !3373
  call void @llvm.dbg.declare(metadata %union.tree_node** %main_variant, metadata !3374, metadata !DIExpression()), !dbg !3375
  call void @llvm.dbg.declare(metadata %union.tree_node** %low, metadata !3376, metadata !DIExpression()), !dbg !3377
  call void @llvm.dbg.declare(metadata %union.tree_node** %high, metadata !3378, metadata !DIExpression()), !dbg !3379
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3380
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3380
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3380
  %bf.load = load i64, i64* %1, align 8, !dbg !3380
  %bf.clear = and i64 %bf.load, 65535, !dbg !3380
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3380
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !3382
  br i1 %cmp, label %if.then, label %if.end, !dbg !3383

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3384
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !3384
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !3384
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !3384
  %type2 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !3384
  %values3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 1, !dbg !3384
  %4 = load %union.tree_node*, %union.tree_node** %values3, align 8, !dbg !3384
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3384
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3384
  %5 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !3384
  store %union.tree_node* %5, %union.tree_node** %type.addr, align 8, !dbg !3386
  store i8 1, i8* %vector_type, align 1, !dbg !3387
  br label %if.end, !dbg !3388

if.end:                                           ; preds = %if.then, %entry
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3389
  %base5 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3389
  %7 = bitcast %struct.tree_base* %base5 to i64*, !dbg !3389
  %bf.load6 = load i64, i64* %7, align 8, !dbg !3389
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !3389
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !3389
  %cmp9 = icmp eq i32 %bf.cast8, 8, !dbg !3391
  br i1 %cmp9, label %if.then10, label %if.end27, !dbg !3392

if.then10:                                        ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3393
  %common11 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !3393
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !3393
  %9 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !3393
  %cmp13 = icmp eq %union.tree_node* %9, null, !dbg !3396
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !3397

if.then14:                                        ; preds = %if.then10
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3398
  %type15 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !3398
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 13, !dbg !3398
  %11 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !3398
  store %union.tree_node* %11, %union.tree_node** %low, align 8, !dbg !3400
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3401
  %type16 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !3401
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 14, !dbg !3401
  %13 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !3401
  store %union.tree_node* %13, %union.tree_node** %high, align 8, !dbg !3402
  br label %if.end26, !dbg !3403

if.else:                                          ; preds = %if.then10
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3404
  %call = call zeroext i8 @subrange_type_for_debug_p(%union.tree_node* %14, %union.tree_node** %low, %union.tree_node** %high), !dbg !3406
  %tobool = icmp ne i8 %call, 0, !dbg !3406
  br i1 %tobool, label %if.then17, label %if.else18, !dbg !3407

if.then17:                                        ; preds = %if.else
  br label %if.end25, !dbg !3407

if.else18:                                        ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3408
  %common19 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !3408
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !3408
  %16 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !3408
  store %union.tree_node* %16, %union.tree_node** %type.addr, align 8, !dbg !3410
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3411
  %type21 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !3411
  %minval22 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 13, !dbg !3411
  %18 = load %union.tree_node*, %union.tree_node** %minval22, align 8, !dbg !3411
  store %union.tree_node* %18, %union.tree_node** %low, align 8, !dbg !3412
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3413
  %type23 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !3413
  %maxval24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 14, !dbg !3413
  %20 = load %union.tree_node*, %union.tree_node** %maxval24, align 8, !dbg !3413
  store %union.tree_node* %20, %union.tree_node** %high, align 8, !dbg !3414
  br label %if.end25

if.end25:                                         ; preds = %if.else18, %if.then17
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then14
  br label %if.end27, !dbg !3415

if.end27:                                         ; preds = %if.end26, %if.end
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3416
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3418
  %cmp28 = icmp eq %union.tree_node* %21, %22, !dbg !3419
  br i1 %cmp28, label %if.then29, label %if.else30, !dbg !3420

if.then29:                                        ; preds = %if.end27
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !3421
  store %union.tree_node* %23, %union.tree_node** %type.addr, align 8, !dbg !3422
  br label %if.end49, !dbg !3423

if.else30:                                        ; preds = %if.end27
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3424
  %type31 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !3424
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 12, !dbg !3424
  %25 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3424
  %tobool32 = icmp ne %union.tree_node* %25, null, !dbg !3424
  br i1 %tobool32, label %land.lhs.true, label %if.end48, !dbg !3427

land.lhs.true:                                    ; preds = %if.else30
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3428
  %type33 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !3428
  %name34 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type33, i32 0, i32 12, !dbg !3428
  %27 = load %union.tree_node*, %union.tree_node** %name34, align 8, !dbg !3428
  %base35 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !3428
  %28 = bitcast %struct.tree_base* %base35 to i64*, !dbg !3428
  %bf.load36 = load i64, i64* %28, align 8, !dbg !3428
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !3428
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !3428
  %cmp39 = icmp eq i32 %bf.cast38, 35, !dbg !3429
  br i1 %cmp39, label %land.lhs.true40, label %if.end48, !dbg !3430

land.lhs.true40:                                  ; preds = %land.lhs.true
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3431
  %type41 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !3431
  %name42 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 12, !dbg !3431
  %30 = load %union.tree_node*, %union.tree_node** %name42, align 8, !dbg !3431
  %decl_common = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !3431
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3431
  %31 = bitcast i40* %decl_flag_1 to i64*, !dbg !3431
  %bf.load43 = load i64, i64* %31, align 8, !dbg !3431
  %bf.lshr = lshr i64 %bf.load43, 25, !dbg !3431
  %bf.clear44 = and i64 %bf.lshr, 1, !dbg !3431
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !3431
  %tobool46 = icmp ne i32 %bf.cast45, 0, !dbg !3431
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !3432

if.then47:                                        ; preds = %land.lhs.true40
  store i32 0, i32* %full.addr, align 4, !dbg !3433
  br label %if.end48, !dbg !3434

if.end48:                                         ; preds = %if.then47, %land.lhs.true40, %land.lhs.true, %if.else30
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then29
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3435
  %type50 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !3435
  %name51 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type50, i32 0, i32 12, !dbg !3435
  %33 = load %union.tree_node*, %union.tree_node** %name51, align 8, !dbg !3435
  %tobool52 = icmp ne %union.tree_node* %33, null, !dbg !3435
  br i1 %tobool52, label %land.lhs.true53, label %if.else70, !dbg !3437

land.lhs.true53:                                  ; preds = %if.end49
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3438
  %type54 = bitcast %union.tree_node* %34 to %struct.tree_type*, !dbg !3438
  %name55 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 12, !dbg !3438
  %35 = load %union.tree_node*, %union.tree_node** %name55, align 8, !dbg !3438
  %base56 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !3438
  %36 = bitcast %struct.tree_base* %base56 to i64*, !dbg !3438
  %bf.load57 = load i64, i64* %36, align 8, !dbg !3438
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !3438
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !3438
  %cmp60 = icmp eq i32 %bf.cast59, 35, !dbg !3439
  br i1 %cmp60, label %land.lhs.true61, label %if.else70, !dbg !3440

land.lhs.true61:                                  ; preds = %land.lhs.true53
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3441
  %type62 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !3441
  %name63 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type62, i32 0, i32 12, !dbg !3441
  %38 = load %union.tree_node*, %union.tree_node** %name63, align 8, !dbg !3441
  %decl_non_common = bitcast %union.tree_node* %38 to %struct.tree_decl_non_common*, !dbg !3441
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !3441
  %39 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3441
  %tobool64 = icmp ne %union.tree_node* %39, null, !dbg !3441
  br i1 %tobool64, label %if.then65, label %if.else70, !dbg !3442

if.then65:                                        ; preds = %land.lhs.true61
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3443
  %type66 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !3443
  %name67 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type66, i32 0, i32 12, !dbg !3443
  %41 = load %union.tree_node*, %union.tree_node** %name67, align 8, !dbg !3443
  %common68 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !3443
  %type69 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 2, !dbg !3443
  %42 = load %union.tree_node*, %union.tree_node** %type69, align 8, !dbg !3443
  store %union.tree_node* %42, %union.tree_node** %main_variant, align 8, !dbg !3444
  br label %if.end73, !dbg !3445

if.else70:                                        ; preds = %land.lhs.true61, %land.lhs.true53, %if.end49
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3446
  %type71 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !3446
  %main_variant72 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type71, i32 0, i32 16, !dbg !3446
  %44 = load %union.tree_node*, %union.tree_node** %main_variant72, align 8, !dbg !3446
  store %union.tree_node* %44, %union.tree_node** %main_variant, align 8, !dbg !3447
  br label %if.end73

if.end73:                                         ; preds = %if.else70, %if.then65
  %45 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3448
  %tobool74 = icmp ne i8 %45, 0, !dbg !3448
  br i1 %tobool74, label %if.end76, label %if.then75, !dbg !3450

if.then75:                                        ; preds = %if.end73
  %46 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3451
  store %union.tree_node* %46, %union.tree_node** %type.addr, align 8, !dbg !3452
  br label %if.end76, !dbg !3453

if.end76:                                         ; preds = %if.then75, %if.end73
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3454
  %type77 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !3454
  %symtab = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type77, i32 0, i32 11, !dbg !3454
  %address = bitcast %union.tree_type_symtab* %symtab to i32*, !dbg !3454
  %48 = load i32, i32* %address, align 8, !dbg !3454
  %cmp78 = icmp eq i32 %48, 0, !dbg !3456
  br i1 %cmp78, label %if.then79, label %if.end101, !dbg !3457

if.then79:                                        ; preds = %if.end76
  %49 = load i32, i32* @next_type_number, align 4, !dbg !3458
  %inc = add nsw i32 %49, 1, !dbg !3458
  store i32 %inc, i32* @next_type_number, align 4, !dbg !3458
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3460
  %type80 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !3460
  %symtab81 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type80, i32 0, i32 11, !dbg !3460
  %address82 = bitcast %union.tree_type_symtab* %symtab81 to i32*, !dbg !3460
  store i32 %49, i32* %address82, align 8, !dbg !3461
  %51 = load i32, i32* @next_type_number, align 4, !dbg !3462
  %52 = load i32, i32* @typevec_len, align 4, !dbg !3464
  %cmp83 = icmp eq i32 %51, %52, !dbg !3465
  br i1 %cmp83, label %if.then84, label %if.end90, !dbg !3466

if.then84:                                        ; preds = %if.then79
  %53 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !3467
  %54 = bitcast %struct.typeinfo* %53 to i8*, !dbg !3467
  %55 = load i32, i32* @typevec_len, align 4, !dbg !3467
  %mul = mul nsw i32 %55, 2, !dbg !3467
  %conv = sext i32 %mul to i64, !dbg !3467
  %mul85 = mul i64 %conv, 12, !dbg !3467
  %call86 = call i8* @ggc_realloc_stat(i8* %54, i64 %mul85), !dbg !3467
  %56 = bitcast i8* %call86 to %struct.typeinfo*, !dbg !3467
  store %struct.typeinfo* %56, %struct.typeinfo** @typevec, align 8, !dbg !3469
  %57 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !3470
  %58 = load i32, i32* @typevec_len, align 4, !dbg !3471
  %idx.ext = sext i32 %58 to i64, !dbg !3472
  %add.ptr = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %57, i64 %idx.ext, !dbg !3472
  %59 = bitcast %struct.typeinfo* %add.ptr to i8*, !dbg !3473
  %60 = load i32, i32* @typevec_len, align 4, !dbg !3474
  %conv87 = sext i32 %60 to i64, !dbg !3474
  %mul88 = mul i64 %conv87, 12, !dbg !3475
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %mul88, i1 false), !dbg !3473
  %61 = load i32, i32* @typevec_len, align 4, !dbg !3476
  %mul89 = mul nsw i32 %61, 2, !dbg !3476
  store i32 %mul89, i32* @typevec_len, align 4, !dbg !3476
  br label %if.end90, !dbg !3477

if.end90:                                         ; preds = %if.then84, %if.then79
  call void @emit_pending_bincls_if_required(), !dbg !3478
  %62 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !3479
  %file_number = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %62, i32 0, i32 1, !dbg !3480
  %63 = load i32, i32* %file_number, align 8, !dbg !3480
  %64 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !3481
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3482
  %type91 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !3482
  %symtab92 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 11, !dbg !3482
  %address93 = bitcast %union.tree_type_symtab* %symtab92 to i32*, !dbg !3482
  %66 = load i32, i32* %address93, align 8, !dbg !3482
  %idxprom = sext i32 %66 to i64, !dbg !3481
  %arrayidx = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %64, i64 %idxprom, !dbg !3481
  %file_number94 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %arrayidx, i32 0, i32 1, !dbg !3483
  store i32 %63, i32* %file_number94, align 4, !dbg !3484
  %67 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !3485
  %next_type_number = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %67, i32 0, i32 2, !dbg !3486
  %68 = load i32, i32* %next_type_number, align 4, !dbg !3487
  %inc95 = add nsw i32 %68, 1, !dbg !3487
  store i32 %inc95, i32* %next_type_number, align 4, !dbg !3487
  %69 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !3488
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3489
  %type96 = bitcast %union.tree_node* %70 to %struct.tree_type*, !dbg !3489
  %symtab97 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type96, i32 0, i32 11, !dbg !3489
  %address98 = bitcast %union.tree_type_symtab* %symtab97 to i32*, !dbg !3489
  %71 = load i32, i32* %address98, align 8, !dbg !3489
  %idxprom99 = sext i32 %71 to i64, !dbg !3488
  %arrayidx100 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %69, i64 %idxprom99, !dbg !3488
  %type_number = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %arrayidx100, i32 0, i32 2, !dbg !3490
  store i32 %68, i32* %type_number, align 4, !dbg !3491
  br label %if.end101, !dbg !3492

if.end101:                                        ; preds = %if.end90, %if.end76
  %72 = load i32, i32* @flag_debug_only_used_symbols, align 4, !dbg !3493
  %tobool102 = icmp ne i32 %72, 0, !dbg !3493
  br i1 %tobool102, label %if.then103, label %if.end174, !dbg !3495

if.then103:                                       ; preds = %if.end101
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3496
  %base104 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !3496
  %74 = bitcast %struct.tree_base* %base104 to i64*, !dbg !3496
  %bf.load105 = load i64, i64* %74, align 8, !dbg !3496
  %bf.clear106 = and i64 %bf.load105, 65535, !dbg !3496
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !3496
  %cmp108 = icmp eq i32 %bf.cast107, 16, !dbg !3499
  br i1 %cmp108, label %land.lhs.true130, label %lor.lhs.false, !dbg !3500

lor.lhs.false:                                    ; preds = %if.then103
  %75 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3501
  %base110 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !3501
  %76 = bitcast %struct.tree_base* %base110 to i64*, !dbg !3501
  %bf.load111 = load i64, i64* %76, align 8, !dbg !3501
  %bf.clear112 = and i64 %bf.load111, 65535, !dbg !3501
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !3501
  %cmp114 = icmp eq i32 %bf.cast113, 17, !dbg !3502
  br i1 %cmp114, label %land.lhs.true130, label %lor.lhs.false116, !dbg !3503

lor.lhs.false116:                                 ; preds = %lor.lhs.false
  %77 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3504
  %base117 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !3504
  %78 = bitcast %struct.tree_base* %base117 to i64*, !dbg !3504
  %bf.load118 = load i64, i64* %78, align 8, !dbg !3504
  %bf.clear119 = and i64 %bf.load118, 65535, !dbg !3504
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !3504
  %cmp121 = icmp eq i32 %bf.cast120, 18, !dbg !3505
  br i1 %cmp121, label %land.lhs.true130, label %lor.lhs.false123, !dbg !3506

lor.lhs.false123:                                 ; preds = %lor.lhs.false116
  %79 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3507
  %base124 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !3507
  %80 = bitcast %struct.tree_base* %base124 to i64*, !dbg !3507
  %bf.load125 = load i64, i64* %80, align 8, !dbg !3507
  %bf.clear126 = and i64 %bf.load125, 65535, !dbg !3507
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !3507
  %cmp128 = icmp eq i32 %bf.cast127, 6, !dbg !3508
  br i1 %cmp128, label %land.lhs.true130, label %if.else156, !dbg !3509

land.lhs.true130:                                 ; preds = %lor.lhs.false123, %lor.lhs.false116, %lor.lhs.false, %if.then103
  %81 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3510
  %common131 = bitcast %union.tree_node* %81 to %struct.tree_common*, !dbg !3510
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 1, !dbg !3510
  %82 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3510
  %tobool132 = icmp ne %union.tree_node* %82, null, !dbg !3510
  br i1 %tobool132, label %land.lhs.true133, label %if.else156, !dbg !3511

land.lhs.true133:                                 ; preds = %land.lhs.true130
  %83 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3512
  %common134 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !3512
  %chain135 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 1, !dbg !3512
  %84 = load %union.tree_node*, %union.tree_node** %chain135, align 8, !dbg !3512
  %base136 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !3512
  %85 = bitcast %struct.tree_base* %base136 to i64*, !dbg !3512
  %bf.load137 = load i64, i64* %85, align 8, !dbg !3512
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !3512
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !3512
  %idxprom140 = sext i32 %bf.cast139 to i64, !dbg !3512
  %arrayidx141 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom140, !dbg !3512
  %86 = load i32, i32* %arrayidx141, align 4, !dbg !3512
  %cmp142 = icmp eq i32 %86, 3, !dbg !3512
  br i1 %cmp142, label %land.lhs.true144, label %if.else156, !dbg !3513

land.lhs.true144:                                 ; preds = %land.lhs.true133
  %87 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3514
  %common145 = bitcast %union.tree_node* %87 to %struct.tree_common*, !dbg !3514
  %chain146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common145, i32 0, i32 1, !dbg !3514
  %88 = load %union.tree_node*, %union.tree_node** %chain146, align 8, !dbg !3514
  %decl_common147 = bitcast %union.tree_node* %88 to %struct.tree_decl_common*, !dbg !3514
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common147, i32 0, i32 2, !dbg !3514
  %89 = bitcast i40* %ignored_flag to i64*, !dbg !3514
  %bf.load148 = load i64, i64* %89, align 8, !dbg !3514
  %bf.lshr149 = lshr i64 %bf.load148, 10, !dbg !3514
  %bf.clear150 = and i64 %bf.lshr149, 1, !dbg !3514
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !3514
  %tobool152 = icmp ne i32 %bf.cast151, 0, !dbg !3514
  br i1 %tobool152, label %if.else156, label %if.then153, !dbg !3515

if.then153:                                       ; preds = %land.lhs.true144
  %90 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3516
  %common154 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !3516
  %chain155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 1, !dbg !3516
  %91 = load %union.tree_node*, %union.tree_node** %chain155, align 8, !dbg !3516
  call void @debug_queue_symbol(%union.tree_node* %91), !dbg !3517
  br label %if.end173, !dbg !3517

if.else156:                                       ; preds = %land.lhs.true144, %land.lhs.true133, %land.lhs.true130, %lor.lhs.false123
  %92 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3518
  %type157 = bitcast %union.tree_node* %92 to %struct.tree_type*, !dbg !3518
  %name158 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type157, i32 0, i32 12, !dbg !3518
  %93 = load %union.tree_node*, %union.tree_node** %name158, align 8, !dbg !3518
  %tobool159 = icmp ne %union.tree_node* %93, null, !dbg !3518
  br i1 %tobool159, label %land.lhs.true160, label %if.end172, !dbg !3520

land.lhs.true160:                                 ; preds = %if.else156
  %94 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3521
  %type161 = bitcast %union.tree_node* %94 to %struct.tree_type*, !dbg !3521
  %name162 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type161, i32 0, i32 12, !dbg !3521
  %95 = load %union.tree_node*, %union.tree_node** %name162, align 8, !dbg !3521
  %base163 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !3521
  %96 = bitcast %struct.tree_base* %base163 to i64*, !dbg !3521
  %bf.load164 = load i64, i64* %96, align 8, !dbg !3521
  %bf.clear165 = and i64 %bf.load164, 65535, !dbg !3521
  %bf.cast166 = trunc i64 %bf.clear165 to i32, !dbg !3521
  %cmp167 = icmp eq i32 %bf.cast166, 35, !dbg !3522
  br i1 %cmp167, label %if.then169, label %if.end172, !dbg !3523

if.then169:                                       ; preds = %land.lhs.true160
  %97 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3524
  %type170 = bitcast %union.tree_node* %97 to %struct.tree_type*, !dbg !3524
  %name171 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type170, i32 0, i32 12, !dbg !3524
  %98 = load %union.tree_node*, %union.tree_node** %name171, align 8, !dbg !3524
  call void @debug_queue_symbol(%union.tree_node* %98), !dbg !3525
  br label %if.end172, !dbg !3525

if.end172:                                        ; preds = %if.then169, %land.lhs.true160, %if.else156
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %if.then153
  br label %if.end174, !dbg !3526

if.end174:                                        ; preds = %if.end173, %if.end101
  %99 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3527
  call void @dbxout_type_index(%union.tree_node* %99), !dbg !3528
  %100 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !3529
  %101 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3530
  %type175 = bitcast %union.tree_node* %101 to %struct.tree_type*, !dbg !3530
  %symtab176 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type175, i32 0, i32 11, !dbg !3530
  %address177 = bitcast %union.tree_type_symtab* %symtab176 to i32*, !dbg !3530
  %102 = load i32, i32* %address177, align 8, !dbg !3530
  %idxprom178 = sext i32 %102 to i64, !dbg !3529
  %arrayidx179 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %100, i64 %idxprom178, !dbg !3529
  %status = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %arrayidx179, i32 0, i32 0, !dbg !3531
  %103 = load i32, i32* %status, align 4, !dbg !3531
  switch i32 %103, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb180
    i32 2, label %sw.bb193
  ], !dbg !3532

sw.bb:                                            ; preds = %if.end174
  br label %sw.epilog, !dbg !3533

sw.bb180:                                         ; preds = %if.end174
  %104 = load i32, i32* %full.addr, align 4, !dbg !3535
  %tobool181 = icmp ne i32 %104, 0, !dbg !3535
  br i1 %tobool181, label %lor.lhs.false182, label %if.then191, !dbg !3537

lor.lhs.false182:                                 ; preds = %sw.bb180
  %105 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3538
  %type183 = bitcast %union.tree_node* %105 to %struct.tree_type*, !dbg !3538
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type183, i32 0, i32 2, !dbg !3538
  %106 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3538
  %cmp184 = icmp ne %union.tree_node* %106, null, !dbg !3538
  br i1 %cmp184, label %lor.lhs.false186, label %if.then191, !dbg !3539

lor.lhs.false186:                                 ; preds = %lor.lhs.false182
  %107 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3540
  %type187 = bitcast %union.tree_node* %107 to %struct.tree_type*, !dbg !3540
  %size188 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type187, i32 0, i32 2, !dbg !3540
  %108 = load %union.tree_node*, %union.tree_node** %size188, align 8, !dbg !3540
  %call189 = call i32 @host_integerp(%union.tree_node* %108, i32 1), !dbg !3541
  %tobool190 = icmp ne i32 %call189, 0, !dbg !3541
  br i1 %tobool190, label %if.end192, label %if.then191, !dbg !3542

if.then191:                                       ; preds = %lor.lhs.false186, %lor.lhs.false182, %sw.bb180
  br label %sw.epilog1462, !dbg !3543

if.end192:                                        ; preds = %lor.lhs.false186
  br label %sw.epilog, !dbg !3544

sw.bb193:                                         ; preds = %if.end174
  br label %sw.epilog1462, !dbg !3545

sw.epilog:                                        ; preds = %if.end174, %if.end192, %sw.bb
  %109 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3546
  %add.ptr194 = getelementptr inbounds i8, i8* %109, i64 1, !dbg !3546
  %110 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3546
  %cmp195 = icmp ugt i8* %add.ptr194, %110, !dbg !3546
  br i1 %cmp195, label %cond.true, label %cond.false, !dbg !3546

cond.true:                                        ; preds = %sw.epilog
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3546
  br label %cond.end, !dbg !3546

cond.false:                                       ; preds = %sw.epilog
  br label %cond.end, !dbg !3546

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3546
  %111 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3546
  %incdec.ptr = getelementptr inbounds i8, i8* %111, i32 1, !dbg !3546
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3546
  store i8 61, i8* %111, align 1, !dbg !3546
  %112 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !3547
  %113 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3548
  %type197 = bitcast %union.tree_node* %113 to %struct.tree_type*, !dbg !3548
  %symtab198 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type197, i32 0, i32 11, !dbg !3548
  %address199 = bitcast %union.tree_type_symtab* %symtab198 to i32*, !dbg !3548
  %114 = load i32, i32* %address199, align 8, !dbg !3548
  %idxprom200 = sext i32 %114 to i64, !dbg !3547
  %arrayidx201 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %112, i64 %idxprom200, !dbg !3547
  %status202 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %arrayidx201, i32 0, i32 0, !dbg !3549
  store i32 2, i32* %status202, align 4, !dbg !3550
  %115 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3551
  %base203 = bitcast %union.tree_node* %115 to %struct.tree_base*, !dbg !3551
  %116 = bitcast %struct.tree_base* %base203 to i64*, !dbg !3551
  %bf.load204 = load i64, i64* %116, align 8, !dbg !3551
  %bf.lshr205 = lshr i64 %bf.load204, 20, !dbg !3551
  %bf.clear206 = and i64 %bf.lshr205, 1, !dbg !3551
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !3551
  %117 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3553
  %base208 = bitcast %union.tree_node* %117 to %struct.tree_base*, !dbg !3553
  %118 = bitcast %struct.tree_base* %base208 to i64*, !dbg !3553
  %bf.load209 = load i64, i64* %118, align 8, !dbg !3553
  %bf.lshr210 = lshr i64 %bf.load209, 20, !dbg !3553
  %bf.clear211 = and i64 %bf.lshr210, 1, !dbg !3553
  %bf.cast212 = trunc i64 %bf.clear211 to i32, !dbg !3553
  %cmp213 = icmp sgt i32 %bf.cast207, %bf.cast212, !dbg !3554
  br i1 %cmp213, label %if.then215, label %if.else232, !dbg !3555

if.then215:                                       ; preds = %cond.end
  %119 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3556
  %add.ptr216 = getelementptr inbounds i8, i8* %119, i64 1, !dbg !3556
  %120 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3556
  %cmp217 = icmp ugt i8* %add.ptr216, %120, !dbg !3556
  br i1 %cmp217, label %cond.true219, label %cond.false220, !dbg !3556

cond.true219:                                     ; preds = %if.then215
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3556
  br label %cond.end221, !dbg !3556

cond.false220:                                    ; preds = %if.then215
  br label %cond.end221, !dbg !3556

cond.end221:                                      ; preds = %cond.false220, %cond.true219
  %cond222 = phi i32 [ 0, %cond.true219 ], [ 0, %cond.false220 ], !dbg !3556
  %121 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3556
  %incdec.ptr223 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !3556
  store i8* %incdec.ptr223, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3556
  store i8 107, i8* %121, align 1, !dbg !3556
  %122 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3558
  %123 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3558
  %base224 = bitcast %union.tree_node* %123 to %struct.tree_base*, !dbg !3558
  %124 = bitcast %struct.tree_base* %base224 to i64*, !dbg !3558
  %bf.load225 = load i64, i64* %124, align 8, !dbg !3558
  %bf.lshr226 = lshr i64 %bf.load225, 19, !dbg !3558
  %bf.clear227 = and i64 %bf.lshr226, 1, !dbg !3558
  %bf.cast228 = trunc i64 %bf.clear227 to i32, !dbg !3558
  %tobool229 = icmp ne i32 %bf.cast228, 0, !dbg !3558
  %125 = zext i1 %tobool229 to i64, !dbg !3558
  %cond230 = select i1 %tobool229, i32 2, i32 0, !dbg !3558
  %or = or i32 0, %cond230, !dbg !3558
  %call231 = call %union.tree_node* @build_qualified_type(%union.tree_node* %122, i32 %or), !dbg !3558
  call void @dbxout_type(%union.tree_node* %call231, i32 0), !dbg !3559
  br label %sw.epilog1462, !dbg !3560

if.else232:                                       ; preds = %cond.end
  %126 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3561
  %base233 = bitcast %union.tree_node* %126 to %struct.tree_base*, !dbg !3561
  %127 = bitcast %struct.tree_base* %base233 to i64*, !dbg !3561
  %bf.load234 = load i64, i64* %127, align 8, !dbg !3561
  %bf.lshr235 = lshr i64 %bf.load234, 19, !dbg !3561
  %bf.clear236 = and i64 %bf.lshr235, 1, !dbg !3561
  %bf.cast237 = trunc i64 %bf.clear236 to i32, !dbg !3561
  %128 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3563
  %base238 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !3563
  %129 = bitcast %struct.tree_base* %base238 to i64*, !dbg !3563
  %bf.load239 = load i64, i64* %129, align 8, !dbg !3563
  %bf.lshr240 = lshr i64 %bf.load239, 19, !dbg !3563
  %bf.clear241 = and i64 %bf.lshr240, 1, !dbg !3563
  %bf.cast242 = trunc i64 %bf.clear241 to i32, !dbg !3563
  %cmp243 = icmp sgt i32 %bf.cast237, %bf.cast242, !dbg !3564
  br i1 %cmp243, label %if.then245, label %if.else262, !dbg !3565

if.then245:                                       ; preds = %if.else232
  %130 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3566
  %add.ptr246 = getelementptr inbounds i8, i8* %130, i64 1, !dbg !3566
  %131 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3566
  %cmp247 = icmp ugt i8* %add.ptr246, %131, !dbg !3566
  br i1 %cmp247, label %cond.true249, label %cond.false250, !dbg !3566

cond.true249:                                     ; preds = %if.then245
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3566
  br label %cond.end251, !dbg !3566

cond.false250:                                    ; preds = %if.then245
  br label %cond.end251, !dbg !3566

cond.end251:                                      ; preds = %cond.false250, %cond.true249
  %cond252 = phi i32 [ 0, %cond.true249 ], [ 0, %cond.false250 ], !dbg !3566
  %132 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3566
  %incdec.ptr253 = getelementptr inbounds i8, i8* %132, i32 1, !dbg !3566
  store i8* %incdec.ptr253, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3566
  store i8 66, i8* %132, align 1, !dbg !3566
  %133 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3568
  %134 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3568
  %base254 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !3568
  %135 = bitcast %struct.tree_base* %base254 to i64*, !dbg !3568
  %bf.load255 = load i64, i64* %135, align 8, !dbg !3568
  %bf.lshr256 = lshr i64 %bf.load255, 20, !dbg !3568
  %bf.clear257 = and i64 %bf.lshr256, 1, !dbg !3568
  %bf.cast258 = trunc i64 %bf.clear257 to i32, !dbg !3568
  %tobool259 = icmp ne i32 %bf.cast258, 0, !dbg !3568
  %136 = zext i1 %tobool259 to i64, !dbg !3568
  %cond260 = select i1 %tobool259, i32 1, i32 0, !dbg !3568
  %call261 = call %union.tree_node* @build_qualified_type(%union.tree_node* %133, i32 %cond260), !dbg !3568
  call void @dbxout_type(%union.tree_node* %call261, i32 0), !dbg !3569
  br label %sw.epilog1462, !dbg !3570

if.else262:                                       ; preds = %if.else232
  %137 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3571
  %138 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3573
  %type263 = bitcast %union.tree_node* %138 to %struct.tree_type*, !dbg !3573
  %main_variant264 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type263, i32 0, i32 16, !dbg !3573
  %139 = load %union.tree_node*, %union.tree_node** %main_variant264, align 8, !dbg !3573
  %cmp265 = icmp ne %union.tree_node* %137, %139, !dbg !3574
  br i1 %cmp265, label %if.then267, label %if.end324, !dbg !3575

if.then267:                                       ; preds = %if.else262
  %140 = load i32, i32* @flag_debug_only_used_symbols, align 4, !dbg !3576
  %tobool268 = icmp ne i32 %140, 0, !dbg !3576
  br i1 %tobool268, label %if.then269, label %if.end319, !dbg !3579

if.then269:                                       ; preds = %if.then267
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_type, metadata !3580, metadata !DIExpression()), !dbg !3582
  %141 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3583
  %type270 = bitcast %union.tree_node* %141 to %struct.tree_type*, !dbg !3583
  %name271 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type270, i32 0, i32 12, !dbg !3583
  %142 = load %union.tree_node*, %union.tree_node** %name271, align 8, !dbg !3583
  %decl_non_common272 = bitcast %union.tree_node* %142 to %struct.tree_decl_non_common*, !dbg !3583
  %result273 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common272, i32 0, i32 3, !dbg !3583
  %143 = load %union.tree_node*, %union.tree_node** %result273, align 8, !dbg !3583
  store %union.tree_node* %143, %union.tree_node** %orig_type, align 8, !dbg !3582
  %144 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !3584
  %base274 = bitcast %union.tree_node* %144 to %struct.tree_base*, !dbg !3584
  %145 = bitcast %struct.tree_base* %base274 to i64*, !dbg !3584
  %bf.load275 = load i64, i64* %145, align 8, !dbg !3584
  %bf.clear276 = and i64 %bf.load275, 65535, !dbg !3584
  %bf.cast277 = trunc i64 %bf.clear276 to i32, !dbg !3584
  %cmp278 = icmp eq i32 %bf.cast277, 16, !dbg !3586
  br i1 %cmp278, label %land.lhs.true301, label %lor.lhs.false280, !dbg !3587

lor.lhs.false280:                                 ; preds = %if.then269
  %146 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !3588
  %base281 = bitcast %union.tree_node* %146 to %struct.tree_base*, !dbg !3588
  %147 = bitcast %struct.tree_base* %base281 to i64*, !dbg !3588
  %bf.load282 = load i64, i64* %147, align 8, !dbg !3588
  %bf.clear283 = and i64 %bf.load282, 65535, !dbg !3588
  %bf.cast284 = trunc i64 %bf.clear283 to i32, !dbg !3588
  %cmp285 = icmp eq i32 %bf.cast284, 17, !dbg !3589
  br i1 %cmp285, label %land.lhs.true301, label %lor.lhs.false287, !dbg !3590

lor.lhs.false287:                                 ; preds = %lor.lhs.false280
  %148 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !3591
  %base288 = bitcast %union.tree_node* %148 to %struct.tree_base*, !dbg !3591
  %149 = bitcast %struct.tree_base* %base288 to i64*, !dbg !3591
  %bf.load289 = load i64, i64* %149, align 8, !dbg !3591
  %bf.clear290 = and i64 %bf.load289, 65535, !dbg !3591
  %bf.cast291 = trunc i64 %bf.clear290 to i32, !dbg !3591
  %cmp292 = icmp eq i32 %bf.cast291, 18, !dbg !3592
  br i1 %cmp292, label %land.lhs.true301, label %lor.lhs.false294, !dbg !3593

lor.lhs.false294:                                 ; preds = %lor.lhs.false287
  %150 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !3594
  %base295 = bitcast %union.tree_node* %150 to %struct.tree_base*, !dbg !3594
  %151 = bitcast %struct.tree_base* %base295 to i64*, !dbg !3594
  %bf.load296 = load i64, i64* %151, align 8, !dbg !3594
  %bf.clear297 = and i64 %bf.load296, 65535, !dbg !3594
  %bf.cast298 = trunc i64 %bf.clear297 to i32, !dbg !3594
  %cmp299 = icmp eq i32 %bf.cast298, 6, !dbg !3595
  br i1 %cmp299, label %land.lhs.true301, label %if.end318, !dbg !3596

land.lhs.true301:                                 ; preds = %lor.lhs.false294, %lor.lhs.false287, %lor.lhs.false280, %if.then269
  %152 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !3597
  %common302 = bitcast %union.tree_node* %152 to %struct.tree_common*, !dbg !3597
  %chain303 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common302, i32 0, i32 1, !dbg !3597
  %153 = load %union.tree_node*, %union.tree_node** %chain303, align 8, !dbg !3597
  %tobool304 = icmp ne %union.tree_node* %153, null, !dbg !3597
  br i1 %tobool304, label %land.lhs.true305, label %if.end318, !dbg !3598

land.lhs.true305:                                 ; preds = %land.lhs.true301
  %154 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !3599
  %common306 = bitcast %union.tree_node* %154 to %struct.tree_common*, !dbg !3599
  %chain307 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common306, i32 0, i32 1, !dbg !3599
  %155 = load %union.tree_node*, %union.tree_node** %chain307, align 8, !dbg !3599
  %decl_common308 = bitcast %union.tree_node* %155 to %struct.tree_decl_common*, !dbg !3599
  %ignored_flag309 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common308, i32 0, i32 2, !dbg !3599
  %156 = bitcast i40* %ignored_flag309 to i64*, !dbg !3599
  %bf.load310 = load i64, i64* %156, align 8, !dbg !3599
  %bf.lshr311 = lshr i64 %bf.load310, 10, !dbg !3599
  %bf.clear312 = and i64 %bf.lshr311, 1, !dbg !3599
  %bf.cast313 = trunc i64 %bf.clear312 to i32, !dbg !3599
  %tobool314 = icmp ne i32 %bf.cast313, 0, !dbg !3599
  br i1 %tobool314, label %if.end318, label %if.then315, !dbg !3600

if.then315:                                       ; preds = %land.lhs.true305
  %157 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !3601
  %common316 = bitcast %union.tree_node* %157 to %struct.tree_common*, !dbg !3601
  %chain317 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common316, i32 0, i32 1, !dbg !3601
  %158 = load %union.tree_node*, %union.tree_node** %chain317, align 8, !dbg !3601
  call void @debug_queue_symbol(%union.tree_node* %158), !dbg !3602
  br label %if.end318, !dbg !3602

if.end318:                                        ; preds = %if.then315, %land.lhs.true305, %land.lhs.true301, %lor.lhs.false294
  br label %if.end319, !dbg !3603

if.end319:                                        ; preds = %if.end318, %if.then267
  %159 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3604
  %type320 = bitcast %union.tree_node* %159 to %struct.tree_type*, !dbg !3604
  %name321 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type320, i32 0, i32 12, !dbg !3604
  %160 = load %union.tree_node*, %union.tree_node** %name321, align 8, !dbg !3604
  %decl_non_common322 = bitcast %union.tree_node* %160 to %struct.tree_decl_non_common*, !dbg !3604
  %result323 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common322, i32 0, i32 3, !dbg !3604
  %161 = load %union.tree_node*, %union.tree_node** %result323, align 8, !dbg !3604
  call void @dbxout_type(%union.tree_node* %161, i32 0), !dbg !3605
  br label %sw.epilog1462, !dbg !3606

if.end324:                                        ; preds = %if.else262
  br label %if.end325

if.end325:                                        ; preds = %if.end324
  br label %if.end326

if.end326:                                        ; preds = %if.end325
  %162 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3607
  %base327 = bitcast %union.tree_node* %162 to %struct.tree_base*, !dbg !3607
  %163 = bitcast %struct.tree_base* %base327 to i64*, !dbg !3607
  %bf.load328 = load i64, i64* %163, align 8, !dbg !3607
  %bf.clear329 = and i64 %bf.load328, 65535, !dbg !3607
  %bf.cast330 = trunc i64 %bf.clear329 to i32, !dbg !3607
  switch i32 %bf.cast330, label %sw.default [
    i32 19, label %sw.bb331
    i32 22, label %sw.bb331
    i32 8, label %sw.bb332
    i32 9, label %sw.bb497
    i32 11, label %sw.bb497
    i32 7, label %sw.bb524
    i32 13, label %sw.bb558
    i32 15, label %sw.bb678
    i32 16, label %sw.bb787
    i32 17, label %sw.bb787
    i32 18, label %sw.bb787
    i32 6, label %sw.bb1163
    i32 10, label %sw.bb1355
    i32 21, label %sw.bb1366
    i32 5, label %sw.bb1403
    i32 12, label %sw.bb1428
    i32 20, label %sw.bb1451
  ], !dbg !3608

sw.bb331:                                         ; preds = %if.end326, %if.end326
  %164 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3609
  call void @dbxout_type_index(%union.tree_node* %164), !dbg !3611
  br label %sw.epilog1462, !dbg !3612

sw.bb332:                                         ; preds = %if.end326
  %165 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3613
  %166 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !3615
  %cmp333 = icmp eq %union.tree_node* %165, %166, !dbg !3616
  br i1 %cmp333, label %land.lhs.true335, label %if.else360, !dbg !3617

land.lhs.true335:                                 ; preds = %sw.bb332
  %167 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3618
  %base336 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !3618
  %168 = bitcast %struct.tree_base* %base336 to i64*, !dbg !3618
  %bf.load337 = load i64, i64* %168, align 8, !dbg !3618
  %bf.lshr338 = lshr i64 %bf.load337, 21, !dbg !3618
  %bf.clear339 = and i64 %bf.lshr338, 1, !dbg !3618
  %bf.cast340 = trunc i64 %bf.clear339 to i32, !dbg !3618
  %tobool341 = icmp ne i32 %bf.cast340, 0, !dbg !3618
  br i1 %tobool341, label %if.else360, label %if.then342, !dbg !3619

if.then342:                                       ; preds = %land.lhs.true335
  %169 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3620
  %add.ptr343 = getelementptr inbounds i8, i8* %169, i64 1, !dbg !3620
  %170 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3620
  %cmp344 = icmp ugt i8* %add.ptr343, %170, !dbg !3620
  br i1 %cmp344, label %cond.true346, label %cond.false347, !dbg !3620

cond.true346:                                     ; preds = %if.then342
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3620
  br label %cond.end348, !dbg !3620

cond.false347:                                    ; preds = %if.then342
  br label %cond.end348, !dbg !3620

cond.end348:                                      ; preds = %cond.false347, %cond.true346
  %cond349 = phi i32 [ 0, %cond.true346 ], [ 0, %cond.false347 ], !dbg !3620
  %171 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3620
  %incdec.ptr350 = getelementptr inbounds i8, i8* %171, i32 1, !dbg !3620
  store i8* %incdec.ptr350, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3620
  store i8 114, i8* %171, align 1, !dbg !3620
  %172 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3622
  call void @dbxout_type_index(%union.tree_node* %172), !dbg !3623
  store i64 7, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3624
  %173 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3624
  %174 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3624
  %add.ptr351 = getelementptr inbounds i8, i8* %173, i64 %174, !dbg !3624
  %175 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3624
  %cmp352 = icmp ugt i8* %add.ptr351, %175, !dbg !3624
  br i1 %cmp352, label %cond.true354, label %cond.false356, !dbg !3624

cond.true354:                                     ; preds = %cond.end348
  %176 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3624
  %conv355 = trunc i64 %176 to i32, !dbg !3624
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv355), !dbg !3624
  br label %cond.end357, !dbg !3624

cond.false356:                                    ; preds = %cond.end348
  br label %cond.end357, !dbg !3624

cond.end357:                                      ; preds = %cond.false356, %cond.true354
  %cond358 = phi i32 [ 0, %cond.true354 ], [ 0, %cond.false356 ], !dbg !3624
  %177 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3624
  %178 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3624
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i64 0, i64 0), i64 %178, i1 false), !dbg !3624
  %179 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3624
  %180 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3624
  %add.ptr359 = getelementptr inbounds i8, i8* %180, i64 %179, !dbg !3624
  store i8* %add.ptr359, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3624
  br label %if.end496, !dbg !3625

if.else360:                                       ; preds = %land.lhs.true335, %sw.bb332
  %181 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3626
  %common361 = bitcast %union.tree_node* %181 to %struct.tree_common*, !dbg !3626
  %type362 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common361, i32 0, i32 2, !dbg !3626
  %182 = load %union.tree_node*, %union.tree_node** %type362, align 8, !dbg !3626
  %cmp363 = icmp ne %union.tree_node* %182, null, !dbg !3628
  br i1 %cmp363, label %land.lhs.true365, label %if.else411, !dbg !3629

land.lhs.true365:                                 ; preds = %if.else360
  %183 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3630
  %common366 = bitcast %union.tree_node* %183 to %struct.tree_common*, !dbg !3630
  %type367 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common366, i32 0, i32 2, !dbg !3630
  %184 = load %union.tree_node*, %union.tree_node** %type367, align 8, !dbg !3630
  %base368 = bitcast %union.tree_node* %184 to %struct.tree_base*, !dbg !3630
  %185 = bitcast %struct.tree_base* %base368 to i64*, !dbg !3630
  %bf.load369 = load i64, i64* %185, align 8, !dbg !3630
  %bf.clear370 = and i64 %bf.load369, 65535, !dbg !3630
  %bf.cast371 = trunc i64 %bf.clear370 to i32, !dbg !3630
  %cmp372 = icmp eq i32 %bf.cast371, 8, !dbg !3631
  br i1 %cmp372, label %if.then374, label %if.else411, !dbg !3632

if.then374:                                       ; preds = %land.lhs.true365
  %186 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3633
  %conv375 = zext i8 %186 to i32, !dbg !3633
  %tobool376 = icmp ne i32 %conv375, 0, !dbg !3633
  br i1 %tobool376, label %land.lhs.true377, label %if.end410, !dbg !3636

land.lhs.true377:                                 ; preds = %if.then374
  %187 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3637
  %type378 = bitcast %union.tree_node* %187 to %struct.tree_type*, !dbg !3637
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type378, i32 0, i32 6, !dbg !3637
  %bf.load379 = load i32, i32* %precision, align 4, !dbg !3637
  %bf.clear380 = and i32 %bf.load379, 1023, !dbg !3637
  %188 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !3638
  %type381 = bitcast %union.tree_node* %188 to %struct.tree_type*, !dbg !3638
  %precision382 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type381, i32 0, i32 6, !dbg !3638
  %bf.load383 = load i32, i32* %precision382, align 4, !dbg !3638
  %bf.clear384 = and i32 %bf.load383, 1023, !dbg !3638
  %cmp385 = icmp ne i32 %bf.clear380, %bf.clear384, !dbg !3639
  br i1 %cmp385, label %if.then387, label %if.end410, !dbg !3640

if.then387:                                       ; preds = %land.lhs.true377
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3641
  %189 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3641
  %190 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3641
  %add.ptr388 = getelementptr inbounds i8, i8* %189, i64 %190, !dbg !3641
  %191 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3641
  %cmp389 = icmp ugt i8* %add.ptr388, %191, !dbg !3641
  br i1 %cmp389, label %cond.true391, label %cond.false393, !dbg !3641

cond.true391:                                     ; preds = %if.then387
  %192 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3641
  %conv392 = trunc i64 %192 to i32, !dbg !3641
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv392), !dbg !3641
  br label %cond.end394, !dbg !3641

cond.false393:                                    ; preds = %if.then387
  br label %cond.end394, !dbg !3641

cond.end394:                                      ; preds = %cond.false393, %cond.true391
  %cond395 = phi i32 [ 0, %cond.true391 ], [ 0, %cond.false393 ], !dbg !3641
  %193 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3641
  %194 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3641
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %193, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i64 %194, i1 false), !dbg !3641
  %195 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3641
  %196 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3641
  %add.ptr396 = getelementptr inbounds i8, i8* %196, i64 %195, !dbg !3641
  store i8* %add.ptr396, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3641
  %197 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3643
  %type397 = bitcast %union.tree_node* %197 to %struct.tree_type*, !dbg !3643
  %precision398 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type397, i32 0, i32 6, !dbg !3643
  %bf.load399 = load i32, i32* %precision398, align 4, !dbg !3643
  %bf.clear400 = and i32 %bf.load399, 1023, !dbg !3643
  %conv401 = zext i32 %bf.clear400 to i64, !dbg !3643
  call void @stabstr_D(i64 %conv401), !dbg !3644
  %198 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3645
  %add.ptr402 = getelementptr inbounds i8, i8* %198, i64 1, !dbg !3645
  %199 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3645
  %cmp403 = icmp ugt i8* %add.ptr402, %199, !dbg !3645
  br i1 %cmp403, label %cond.true405, label %cond.false406, !dbg !3645

cond.true405:                                     ; preds = %cond.end394
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3645
  br label %cond.end407, !dbg !3645

cond.false406:                                    ; preds = %cond.end394
  br label %cond.end407, !dbg !3645

cond.end407:                                      ; preds = %cond.false406, %cond.true405
  %cond408 = phi i32 [ 0, %cond.true405 ], [ 0, %cond.false406 ], !dbg !3645
  %200 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3645
  %incdec.ptr409 = getelementptr inbounds i8, i8* %200, i32 1, !dbg !3645
  store i8* %incdec.ptr409, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3645
  store i8 59, i8* %200, align 1, !dbg !3645
  br label %if.end410, !dbg !3646

if.end410:                                        ; preds = %cond.end407, %land.lhs.true377, %if.then374
  %201 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3647
  %202 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !3648
  %203 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !3649
  call void @dbxout_range_type(%union.tree_node* %201, %union.tree_node* %202, %union.tree_node* %203), !dbg !3650
  br label %if.end495, !dbg !3651

if.else411:                                       ; preds = %land.lhs.true365, %if.else360
  %204 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3652
  %conv412 = zext i8 %204 to i32, !dbg !3652
  %tobool413 = icmp ne i32 %conv412, 0, !dbg !3652
  br i1 %tobool413, label %land.lhs.true414, label %if.end448, !dbg !3655

land.lhs.true414:                                 ; preds = %if.else411
  %205 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3656
  %type415 = bitcast %union.tree_node* %205 to %struct.tree_type*, !dbg !3656
  %precision416 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type415, i32 0, i32 6, !dbg !3656
  %bf.load417 = load i32, i32* %precision416, align 4, !dbg !3656
  %bf.clear418 = and i32 %bf.load417, 1023, !dbg !3656
  %206 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !3657
  %type419 = bitcast %union.tree_node* %206 to %struct.tree_type*, !dbg !3657
  %precision420 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type419, i32 0, i32 6, !dbg !3657
  %bf.load421 = load i32, i32* %precision420, align 4, !dbg !3657
  %bf.clear422 = and i32 %bf.load421, 1023, !dbg !3657
  %cmp423 = icmp ne i32 %bf.clear418, %bf.clear422, !dbg !3658
  br i1 %cmp423, label %if.then425, label %if.end448, !dbg !3659

if.then425:                                       ; preds = %land.lhs.true414
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3660
  %207 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3660
  %208 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3660
  %add.ptr426 = getelementptr inbounds i8, i8* %207, i64 %208, !dbg !3660
  %209 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3660
  %cmp427 = icmp ugt i8* %add.ptr426, %209, !dbg !3660
  br i1 %cmp427, label %cond.true429, label %cond.false431, !dbg !3660

cond.true429:                                     ; preds = %if.then425
  %210 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3660
  %conv430 = trunc i64 %210 to i32, !dbg !3660
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv430), !dbg !3660
  br label %cond.end432, !dbg !3660

cond.false431:                                    ; preds = %if.then425
  br label %cond.end432, !dbg !3660

cond.end432:                                      ; preds = %cond.false431, %cond.true429
  %cond433 = phi i32 [ 0, %cond.true429 ], [ 0, %cond.false431 ], !dbg !3660
  %211 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3660
  %212 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3660
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %211, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i64 %212, i1 false), !dbg !3660
  %213 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3660
  %214 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3660
  %add.ptr434 = getelementptr inbounds i8, i8* %214, i64 %213, !dbg !3660
  store i8* %add.ptr434, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3660
  %215 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3662
  %type435 = bitcast %union.tree_node* %215 to %struct.tree_type*, !dbg !3662
  %precision436 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type435, i32 0, i32 6, !dbg !3662
  %bf.load437 = load i32, i32* %precision436, align 4, !dbg !3662
  %bf.clear438 = and i32 %bf.load437, 1023, !dbg !3662
  %conv439 = zext i32 %bf.clear438 to i64, !dbg !3662
  call void @stabstr_D(i64 %conv439), !dbg !3663
  %216 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3664
  %add.ptr440 = getelementptr inbounds i8, i8* %216, i64 1, !dbg !3664
  %217 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3664
  %cmp441 = icmp ugt i8* %add.ptr440, %217, !dbg !3664
  br i1 %cmp441, label %cond.true443, label %cond.false444, !dbg !3664

cond.true443:                                     ; preds = %cond.end432
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3664
  br label %cond.end445, !dbg !3664

cond.false444:                                    ; preds = %cond.end432
  br label %cond.end445, !dbg !3664

cond.end445:                                      ; preds = %cond.false444, %cond.true443
  %cond446 = phi i32 [ 0, %cond.true443 ], [ 0, %cond.false444 ], !dbg !3664
  %218 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3664
  %incdec.ptr447 = getelementptr inbounds i8, i8* %218, i32 1, !dbg !3664
  store i8* %incdec.ptr447, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3664
  store i8 59, i8* %218, align 1, !dbg !3664
  br label %if.end448, !dbg !3665

if.end448:                                        ; preds = %cond.end445, %land.lhs.true414, %if.else411
  %219 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3666
  %220 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !3668
  %221 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !3669
  %call449 = call zeroext i8 @print_int_cst_bounds_in_octal_p(%union.tree_node* %219, %union.tree_node* %220, %union.tree_node* %221), !dbg !3670
  %tobool450 = icmp ne i8 %call449, 0, !dbg !3670
  br i1 %tobool450, label %if.then451, label %if.else493, !dbg !3671

if.then451:                                       ; preds = %if.end448
  %222 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3672
  %add.ptr452 = getelementptr inbounds i8, i8* %222, i64 1, !dbg !3672
  %223 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3672
  %cmp453 = icmp ugt i8* %add.ptr452, %223, !dbg !3672
  br i1 %cmp453, label %cond.true455, label %cond.false456, !dbg !3672

cond.true455:                                     ; preds = %if.then451
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3672
  br label %cond.end457, !dbg !3672

cond.false456:                                    ; preds = %if.then451
  br label %cond.end457, !dbg !3672

cond.end457:                                      ; preds = %cond.false456, %cond.true455
  %cond458 = phi i32 [ 0, %cond.true455 ], [ 0, %cond.false456 ], !dbg !3672
  %224 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3672
  %incdec.ptr459 = getelementptr inbounds i8, i8* %224, i32 1, !dbg !3672
  store i8* %incdec.ptr459, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3672
  store i8 114, i8* %224, align 1, !dbg !3672
  %225 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3674
  %common460 = bitcast %union.tree_node* %225 to %struct.tree_common*, !dbg !3674
  %type461 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common460, i32 0, i32 2, !dbg !3674
  %226 = load %union.tree_node*, %union.tree_node** %type461, align 8, !dbg !3674
  %cmp462 = icmp ne %union.tree_node* %226, null, !dbg !3676
  br i1 %cmp462, label %if.then464, label %if.else467, !dbg !3677

if.then464:                                       ; preds = %cond.end457
  %227 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3678
  %common465 = bitcast %union.tree_node* %227 to %struct.tree_common*, !dbg !3678
  %type466 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common465, i32 0, i32 2, !dbg !3678
  %228 = load %union.tree_node*, %union.tree_node** %type466, align 8, !dbg !3678
  call void @dbxout_type_index(%union.tree_node* %228), !dbg !3679
  br label %if.end468, !dbg !3679

if.else467:                                       ; preds = %cond.end457
  %229 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3680
  call void @dbxout_type_index(%union.tree_node* %229), !dbg !3681
  br label %if.end468

if.end468:                                        ; preds = %if.else467, %if.then464
  %230 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3682
  %add.ptr469 = getelementptr inbounds i8, i8* %230, i64 1, !dbg !3682
  %231 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3682
  %cmp470 = icmp ugt i8* %add.ptr469, %231, !dbg !3682
  br i1 %cmp470, label %cond.true472, label %cond.false473, !dbg !3682

cond.true472:                                     ; preds = %if.end468
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3682
  br label %cond.end474, !dbg !3682

cond.false473:                                    ; preds = %if.end468
  br label %cond.end474, !dbg !3682

cond.end474:                                      ; preds = %cond.false473, %cond.true472
  %cond475 = phi i32 [ 0, %cond.true472 ], [ 0, %cond.false473 ], !dbg !3682
  %232 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3682
  %incdec.ptr476 = getelementptr inbounds i8, i8* %232, i32 1, !dbg !3682
  store i8* %incdec.ptr476, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3682
  store i8 59, i8* %232, align 1, !dbg !3682
  %233 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !3683
  call void @stabstr_O(%union.tree_node* %233), !dbg !3684
  %234 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3685
  %add.ptr477 = getelementptr inbounds i8, i8* %234, i64 1, !dbg !3685
  %235 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3685
  %cmp478 = icmp ugt i8* %add.ptr477, %235, !dbg !3685
  br i1 %cmp478, label %cond.true480, label %cond.false481, !dbg !3685

cond.true480:                                     ; preds = %cond.end474
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3685
  br label %cond.end482, !dbg !3685

cond.false481:                                    ; preds = %cond.end474
  br label %cond.end482, !dbg !3685

cond.end482:                                      ; preds = %cond.false481, %cond.true480
  %cond483 = phi i32 [ 0, %cond.true480 ], [ 0, %cond.false481 ], !dbg !3685
  %236 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3685
  %incdec.ptr484 = getelementptr inbounds i8, i8* %236, i32 1, !dbg !3685
  store i8* %incdec.ptr484, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3685
  store i8 59, i8* %236, align 1, !dbg !3685
  %237 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !3686
  call void @stabstr_O(%union.tree_node* %237), !dbg !3687
  %238 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3688
  %add.ptr485 = getelementptr inbounds i8, i8* %238, i64 1, !dbg !3688
  %239 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3688
  %cmp486 = icmp ugt i8* %add.ptr485, %239, !dbg !3688
  br i1 %cmp486, label %cond.true488, label %cond.false489, !dbg !3688

cond.true488:                                     ; preds = %cond.end482
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3688
  br label %cond.end490, !dbg !3688

cond.false489:                                    ; preds = %cond.end482
  br label %cond.end490, !dbg !3688

cond.end490:                                      ; preds = %cond.false489, %cond.true488
  %cond491 = phi i32 [ 0, %cond.true488 ], [ 0, %cond.false489 ], !dbg !3688
  %240 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3688
  %incdec.ptr492 = getelementptr inbounds i8, i8* %240, i32 1, !dbg !3688
  store i8* %incdec.ptr492, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3688
  store i8 59, i8* %240, align 1, !dbg !3688
  br label %if.end494, !dbg !3689

if.else493:                                       ; preds = %if.end448
  %241 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3690
  %242 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !3691
  %243 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !3692
  call void @dbxout_range_type(%union.tree_node* %241, %union.tree_node* %242, %union.tree_node* %243), !dbg !3693
  br label %if.end494

if.end494:                                        ; preds = %if.else493, %cond.end490
  br label %if.end495

if.end495:                                        ; preds = %if.end494, %if.end410
  br label %if.end496

if.end496:                                        ; preds = %if.end495, %cond.end357
  br label %sw.epilog1462, !dbg !3694

sw.bb497:                                         ; preds = %if.end326, %if.end326
  %244 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3695
  %add.ptr498 = getelementptr inbounds i8, i8* %244, i64 1, !dbg !3695
  %245 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3695
  %cmp499 = icmp ugt i8* %add.ptr498, %245, !dbg !3695
  br i1 %cmp499, label %cond.true501, label %cond.false502, !dbg !3695

cond.true501:                                     ; preds = %sw.bb497
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3695
  br label %cond.end503, !dbg !3695

cond.false502:                                    ; preds = %sw.bb497
  br label %cond.end503, !dbg !3695

cond.end503:                                      ; preds = %cond.false502, %cond.true501
  %cond504 = phi i32 [ 0, %cond.true501 ], [ 0, %cond.false502 ], !dbg !3695
  %246 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3695
  %incdec.ptr505 = getelementptr inbounds i8, i8* %246, i32 1, !dbg !3695
  store i8* %incdec.ptr505, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3695
  store i8 114, i8* %246, align 1, !dbg !3695
  %247 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !3696
  call void @dbxout_type_index(%union.tree_node* %247), !dbg !3697
  %248 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3698
  %add.ptr506 = getelementptr inbounds i8, i8* %248, i64 1, !dbg !3698
  %249 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3698
  %cmp507 = icmp ugt i8* %add.ptr506, %249, !dbg !3698
  br i1 %cmp507, label %cond.true509, label %cond.false510, !dbg !3698

cond.true509:                                     ; preds = %cond.end503
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3698
  br label %cond.end511, !dbg !3698

cond.false510:                                    ; preds = %cond.end503
  br label %cond.end511, !dbg !3698

cond.end511:                                      ; preds = %cond.false510, %cond.true509
  %cond512 = phi i32 [ 0, %cond.true509 ], [ 0, %cond.false510 ], !dbg !3698
  %250 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3698
  %incdec.ptr513 = getelementptr inbounds i8, i8* %250, i32 1, !dbg !3698
  store i8* %incdec.ptr513, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3698
  store i8 59, i8* %250, align 1, !dbg !3698
  %251 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3699
  %call514 = call i64 @int_size_in_bytes(%union.tree_node* %251), !dbg !3700
  call void @stabstr_D(i64 %call514), !dbg !3701
  store i64 3, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3702
  %252 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3702
  %253 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3702
  %add.ptr515 = getelementptr inbounds i8, i8* %252, i64 %253, !dbg !3702
  %254 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3702
  %cmp516 = icmp ugt i8* %add.ptr515, %254, !dbg !3702
  br i1 %cmp516, label %cond.true518, label %cond.false520, !dbg !3702

cond.true518:                                     ; preds = %cond.end511
  %255 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3702
  %conv519 = trunc i64 %255 to i32, !dbg !3702
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv519), !dbg !3702
  br label %cond.end521, !dbg !3702

cond.false520:                                    ; preds = %cond.end511
  br label %cond.end521, !dbg !3702

cond.end521:                                      ; preds = %cond.false520, %cond.true518
  %cond522 = phi i32 [ 0, %cond.true518 ], [ 0, %cond.false520 ], !dbg !3702
  %256 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3702
  %257 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3702
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %256, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i64 0, i64 0), i64 %257, i1 false), !dbg !3702
  %258 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3702
  %259 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3702
  %add.ptr523 = getelementptr inbounds i8, i8* %259, i64 %258, !dbg !3702
  store i8* %add.ptr523, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3702
  br label %sw.epilog1462, !dbg !3703

sw.bb524:                                         ; preds = %if.end326
  %260 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3704
  %tobool525 = icmp ne i8 %260, 0, !dbg !3704
  br i1 %tobool525, label %if.then526, label %if.else547, !dbg !3706

if.then526:                                       ; preds = %sw.bb524
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3707
  %261 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3707
  %262 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3707
  %add.ptr527 = getelementptr inbounds i8, i8* %261, i64 %262, !dbg !3707
  %263 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3707
  %cmp528 = icmp ugt i8* %add.ptr527, %263, !dbg !3707
  br i1 %cmp528, label %cond.true530, label %cond.false532, !dbg !3707

cond.true530:                                     ; preds = %if.then526
  %264 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3707
  %conv531 = trunc i64 %264 to i32, !dbg !3707
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv531), !dbg !3707
  br label %cond.end533, !dbg !3707

cond.false532:                                    ; preds = %if.then526
  br label %cond.end533, !dbg !3707

cond.end533:                                      ; preds = %cond.false532, %cond.true530
  %cond534 = phi i32 [ 0, %cond.true530 ], [ 0, %cond.false532 ], !dbg !3707
  %265 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3707
  %266 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3707
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %265, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i64 %266, i1 false), !dbg !3707
  %267 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3707
  %268 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3707
  %add.ptr535 = getelementptr inbounds i8, i8* %268, i64 %267, !dbg !3707
  store i8* %add.ptr535, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3707
  %269 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3709
  %call536 = call i64 @int_size_in_bytes(%union.tree_node* %269), !dbg !3710
  %mul537 = mul nsw i64 8, %call536, !dbg !3711
  call void @stabstr_D(i64 %mul537), !dbg !3712
  store i64 5, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3713
  %270 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3713
  %271 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3713
  %add.ptr538 = getelementptr inbounds i8, i8* %270, i64 %271, !dbg !3713
  %272 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3713
  %cmp539 = icmp ugt i8* %add.ptr538, %272, !dbg !3713
  br i1 %cmp539, label %cond.true541, label %cond.false543, !dbg !3713

cond.true541:                                     ; preds = %cond.end533
  %273 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3713
  %conv542 = trunc i64 %273 to i32, !dbg !3713
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv542), !dbg !3713
  br label %cond.end544, !dbg !3713

cond.false543:                                    ; preds = %cond.end533
  br label %cond.end544, !dbg !3713

cond.end544:                                      ; preds = %cond.false543, %cond.true541
  %cond545 = phi i32 [ 0, %cond.true541 ], [ 0, %cond.false543 ], !dbg !3713
  %274 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3713
  %275 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3713
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %274, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0), i64 %275, i1 false), !dbg !3713
  %276 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3713
  %277 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3713
  %add.ptr546 = getelementptr inbounds i8, i8* %277, i64 %276, !dbg !3713
  store i8* %add.ptr546, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3713
  br label %if.end557, !dbg !3714

if.else547:                                       ; preds = %sw.bb524
  store i64 17, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3715
  %278 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3715
  %279 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3715
  %add.ptr548 = getelementptr inbounds i8, i8* %278, i64 %279, !dbg !3715
  %280 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3715
  %cmp549 = icmp ugt i8* %add.ptr548, %280, !dbg !3715
  br i1 %cmp549, label %cond.true551, label %cond.false553, !dbg !3715

cond.true551:                                     ; preds = %if.else547
  %281 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3715
  %conv552 = trunc i64 %281 to i32, !dbg !3715
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv552), !dbg !3715
  br label %cond.end554, !dbg !3715

cond.false553:                                    ; preds = %if.else547
  br label %cond.end554, !dbg !3715

cond.end554:                                      ; preds = %cond.false553, %cond.true551
  %cond555 = phi i32 [ 0, %cond.true551 ], [ 0, %cond.false553 ], !dbg !3715
  %282 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3715
  %283 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3715
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %282, i8* align 1 getelementptr inbounds ([18 x i8], [18 x i8]* @.str.36, i64 0, i64 0), i64 %283, i1 false), !dbg !3715
  %284 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3715
  %285 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3715
  %add.ptr556 = getelementptr inbounds i8, i8* %285, i64 %284, !dbg !3715
  store i8* %add.ptr556, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3715
  br label %if.end557

if.end557:                                        ; preds = %cond.end554, %cond.end544
  br label %sw.epilog1462, !dbg !3716

sw.bb558:                                         ; preds = %if.end326
  %286 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3717
  %common559 = bitcast %union.tree_node* %286 to %struct.tree_common*, !dbg !3717
  %type560 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common559, i32 0, i32 2, !dbg !3717
  %287 = load %union.tree_node*, %union.tree_node** %type560, align 8, !dbg !3717
  %base561 = bitcast %union.tree_node* %287 to %struct.tree_base*, !dbg !3717
  %288 = bitcast %struct.tree_base* %base561 to i64*, !dbg !3717
  %bf.load562 = load i64, i64* %288, align 8, !dbg !3717
  %bf.clear563 = and i64 %bf.load562, 65535, !dbg !3717
  %bf.cast564 = trunc i64 %bf.clear563 to i32, !dbg !3717
  %cmp565 = icmp eq i32 %bf.cast564, 9, !dbg !3719
  br i1 %cmp565, label %if.then567, label %if.else590, !dbg !3720

if.then567:                                       ; preds = %sw.bb558
  store i64 3, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3721
  %289 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3721
  %290 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3721
  %add.ptr568 = getelementptr inbounds i8, i8* %289, i64 %290, !dbg !3721
  %291 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3721
  %cmp569 = icmp ugt i8* %add.ptr568, %291, !dbg !3721
  br i1 %cmp569, label %cond.true571, label %cond.false573, !dbg !3721

cond.true571:                                     ; preds = %if.then567
  %292 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3721
  %conv572 = trunc i64 %292 to i32, !dbg !3721
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv572), !dbg !3721
  br label %cond.end574, !dbg !3721

cond.false573:                                    ; preds = %if.then567
  br label %cond.end574, !dbg !3721

cond.end574:                                      ; preds = %cond.false573, %cond.true571
  %cond575 = phi i32 [ 0, %cond.true571 ], [ 0, %cond.false573 ], !dbg !3721
  %293 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3721
  %294 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3721
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %293, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i64 %294, i1 false), !dbg !3721
  %295 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3721
  %296 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3721
  %add.ptr576 = getelementptr inbounds i8, i8* %296, i64 %295, !dbg !3721
  store i8* %add.ptr576, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3721
  %297 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3723
  %common577 = bitcast %union.tree_node* %297 to %struct.tree_common*, !dbg !3723
  %type578 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common577, i32 0, i32 2, !dbg !3723
  %298 = load %union.tree_node*, %union.tree_node** %type578, align 8, !dbg !3723
  %call579 = call i64 @int_size_in_bytes(%union.tree_node* %298), !dbg !3724
  %mul580 = mul nsw i64 2, %call579, !dbg !3725
  call void @stabstr_D(i64 %mul580), !dbg !3726
  store i64 3, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3727
  %299 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3727
  %300 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3727
  %add.ptr581 = getelementptr inbounds i8, i8* %299, i64 %300, !dbg !3727
  %301 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3727
  %cmp582 = icmp ugt i8* %add.ptr581, %301, !dbg !3727
  br i1 %cmp582, label %cond.true584, label %cond.false586, !dbg !3727

cond.true584:                                     ; preds = %cond.end574
  %302 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3727
  %conv585 = trunc i64 %302 to i32, !dbg !3727
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv585), !dbg !3727
  br label %cond.end587, !dbg !3727

cond.false586:                                    ; preds = %cond.end574
  br label %cond.end587, !dbg !3727

cond.end587:                                      ; preds = %cond.false586, %cond.true584
  %cond588 = phi i32 [ 0, %cond.true584 ], [ 0, %cond.false586 ], !dbg !3727
  %303 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3727
  %304 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3727
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %303, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i64 0, i64 0), i64 %304, i1 false), !dbg !3727
  %305 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3727
  %306 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3727
  %add.ptr589 = getelementptr inbounds i8, i8* %306, i64 %305, !dbg !3727
  store i8* %add.ptr589, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3727
  br label %if.end677, !dbg !3728

if.else590:                                       ; preds = %sw.bb558
  %307 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3729
  %add.ptr591 = getelementptr inbounds i8, i8* %307, i64 1, !dbg !3729
  %308 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3729
  %cmp592 = icmp ugt i8* %add.ptr591, %308, !dbg !3729
  br i1 %cmp592, label %cond.true594, label %cond.false595, !dbg !3729

cond.true594:                                     ; preds = %if.else590
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3729
  br label %cond.end596, !dbg !3729

cond.false595:                                    ; preds = %if.else590
  br label %cond.end596, !dbg !3729

cond.end596:                                      ; preds = %cond.false595, %cond.true594
  %cond597 = phi i32 [ 0, %cond.true594 ], [ 0, %cond.false595 ], !dbg !3729
  %309 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3729
  %incdec.ptr598 = getelementptr inbounds i8, i8* %309, i32 1, !dbg !3729
  store i8* %incdec.ptr598, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3729
  store i8 115, i8* %309, align 1, !dbg !3729
  %310 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3731
  %call599 = call i64 @int_size_in_bytes(%union.tree_node* %310), !dbg !3732
  call void @stabstr_D(i64 %call599), !dbg !3733
  store i64 5, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3734
  %311 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3734
  %312 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3734
  %add.ptr600 = getelementptr inbounds i8, i8* %311, i64 %312, !dbg !3734
  %313 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3734
  %cmp601 = icmp ugt i8* %add.ptr600, %313, !dbg !3734
  br i1 %cmp601, label %cond.true603, label %cond.false605, !dbg !3734

cond.true603:                                     ; preds = %cond.end596
  %314 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3734
  %conv604 = trunc i64 %314 to i32, !dbg !3734
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv604), !dbg !3734
  br label %cond.end606, !dbg !3734

cond.false605:                                    ; preds = %cond.end596
  br label %cond.end606, !dbg !3734

cond.end606:                                      ; preds = %cond.false605, %cond.true603
  %cond607 = phi i32 [ 0, %cond.true603 ], [ 0, %cond.false605 ], !dbg !3734
  %315 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3734
  %316 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3734
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %315, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i64 0, i64 0), i64 %316, i1 false), !dbg !3734
  %317 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3734
  %318 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3734
  %add.ptr608 = getelementptr inbounds i8, i8* %318, i64 %317, !dbg !3734
  store i8* %add.ptr608, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3734
  %319 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3735
  %common609 = bitcast %union.tree_node* %319 to %struct.tree_common*, !dbg !3735
  %type610 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common609, i32 0, i32 2, !dbg !3735
  %320 = load %union.tree_node*, %union.tree_node** %type610, align 8, !dbg !3735
  call void @dbxout_type(%union.tree_node* %320, i32 0), !dbg !3736
  store i64 3, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3737
  %321 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3737
  %322 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3737
  %add.ptr611 = getelementptr inbounds i8, i8* %321, i64 %322, !dbg !3737
  %323 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3737
  %cmp612 = icmp ugt i8* %add.ptr611, %323, !dbg !3737
  br i1 %cmp612, label %cond.true614, label %cond.false616, !dbg !3737

cond.true614:                                     ; preds = %cond.end606
  %324 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3737
  %conv615 = trunc i64 %324 to i32, !dbg !3737
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv615), !dbg !3737
  br label %cond.end617, !dbg !3737

cond.false616:                                    ; preds = %cond.end606
  br label %cond.end617, !dbg !3737

cond.end617:                                      ; preds = %cond.false616, %cond.true614
  %cond618 = phi i32 [ 0, %cond.true614 ], [ 0, %cond.false616 ], !dbg !3737
  %325 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3737
  %326 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3737
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %325, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i64 %326, i1 false), !dbg !3737
  %327 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3737
  %328 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3737
  %add.ptr619 = getelementptr inbounds i8, i8* %328, i64 %327, !dbg !3737
  store i8* %add.ptr619, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3737
  %329 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3738
  %common620 = bitcast %union.tree_node* %329 to %struct.tree_common*, !dbg !3738
  %type621 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common620, i32 0, i32 2, !dbg !3738
  %330 = load %union.tree_node*, %union.tree_node** %type621, align 8, !dbg !3738
  %type622 = bitcast %union.tree_node* %330 to %struct.tree_type*, !dbg !3738
  %precision623 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type622, i32 0, i32 6, !dbg !3738
  %bf.load624 = load i32, i32* %precision623, align 4, !dbg !3738
  %bf.clear625 = and i32 %bf.load624, 1023, !dbg !3738
  %conv626 = zext i32 %bf.clear625 to i64, !dbg !3738
  call void @stabstr_D(i64 %conv626), !dbg !3739
  store i64 6, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3740
  %331 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3740
  %332 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3740
  %add.ptr627 = getelementptr inbounds i8, i8* %331, i64 %332, !dbg !3740
  %333 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3740
  %cmp628 = icmp ugt i8* %add.ptr627, %333, !dbg !3740
  br i1 %cmp628, label %cond.true630, label %cond.false632, !dbg !3740

cond.true630:                                     ; preds = %cond.end617
  %334 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3740
  %conv631 = trunc i64 %334 to i32, !dbg !3740
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv631), !dbg !3740
  br label %cond.end633, !dbg !3740

cond.false632:                                    ; preds = %cond.end617
  br label %cond.end633, !dbg !3740

cond.end633:                                      ; preds = %cond.false632, %cond.true630
  %cond634 = phi i32 [ 0, %cond.true630 ], [ 0, %cond.false632 ], !dbg !3740
  %335 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3740
  %336 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3740
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %335, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.39, i64 0, i64 0), i64 %336, i1 false), !dbg !3740
  %337 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3740
  %338 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3740
  %add.ptr635 = getelementptr inbounds i8, i8* %338, i64 %337, !dbg !3740
  store i8* %add.ptr635, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3740
  %339 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3741
  %common636 = bitcast %union.tree_node* %339 to %struct.tree_common*, !dbg !3741
  %type637 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common636, i32 0, i32 2, !dbg !3741
  %340 = load %union.tree_node*, %union.tree_node** %type637, align 8, !dbg !3741
  call void @dbxout_type(%union.tree_node* %340, i32 0), !dbg !3742
  %341 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3743
  %add.ptr638 = getelementptr inbounds i8, i8* %341, i64 1, !dbg !3743
  %342 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3743
  %cmp639 = icmp ugt i8* %add.ptr638, %342, !dbg !3743
  br i1 %cmp639, label %cond.true641, label %cond.false642, !dbg !3743

cond.true641:                                     ; preds = %cond.end633
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3743
  br label %cond.end643, !dbg !3743

cond.false642:                                    ; preds = %cond.end633
  br label %cond.end643, !dbg !3743

cond.end643:                                      ; preds = %cond.false642, %cond.true641
  %cond644 = phi i32 [ 0, %cond.true641 ], [ 0, %cond.false642 ], !dbg !3743
  %343 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3743
  %incdec.ptr645 = getelementptr inbounds i8, i8* %343, i32 1, !dbg !3743
  store i8* %incdec.ptr645, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3743
  store i8 44, i8* %343, align 1, !dbg !3743
  %344 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3744
  %common646 = bitcast %union.tree_node* %344 to %struct.tree_common*, !dbg !3744
  %type647 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common646, i32 0, i32 2, !dbg !3744
  %345 = load %union.tree_node*, %union.tree_node** %type647, align 8, !dbg !3744
  %type648 = bitcast %union.tree_node* %345 to %struct.tree_type*, !dbg !3744
  %precision649 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type648, i32 0, i32 6, !dbg !3744
  %bf.load650 = load i32, i32* %precision649, align 4, !dbg !3744
  %bf.clear651 = and i32 %bf.load650, 1023, !dbg !3744
  %conv652 = zext i32 %bf.clear651 to i64, !dbg !3744
  call void @stabstr_D(i64 %conv652), !dbg !3745
  %346 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3746
  %add.ptr653 = getelementptr inbounds i8, i8* %346, i64 1, !dbg !3746
  %347 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3746
  %cmp654 = icmp ugt i8* %add.ptr653, %347, !dbg !3746
  br i1 %cmp654, label %cond.true656, label %cond.false657, !dbg !3746

cond.true656:                                     ; preds = %cond.end643
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3746
  br label %cond.end658, !dbg !3746

cond.false657:                                    ; preds = %cond.end643
  br label %cond.end658, !dbg !3746

cond.end658:                                      ; preds = %cond.false657, %cond.true656
  %cond659 = phi i32 [ 0, %cond.true656 ], [ 0, %cond.false657 ], !dbg !3746
  %348 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3746
  %incdec.ptr660 = getelementptr inbounds i8, i8* %348, i32 1, !dbg !3746
  store i8* %incdec.ptr660, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3746
  store i8 44, i8* %348, align 1, !dbg !3746
  %349 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3747
  %common661 = bitcast %union.tree_node* %349 to %struct.tree_common*, !dbg !3747
  %type662 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common661, i32 0, i32 2, !dbg !3747
  %350 = load %union.tree_node*, %union.tree_node** %type662, align 8, !dbg !3747
  %type663 = bitcast %union.tree_node* %350 to %struct.tree_type*, !dbg !3747
  %precision664 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type663, i32 0, i32 6, !dbg !3747
  %bf.load665 = load i32, i32* %precision664, align 4, !dbg !3747
  %bf.clear666 = and i32 %bf.load665, 1023, !dbg !3747
  %conv667 = zext i32 %bf.clear666 to i64, !dbg !3747
  call void @stabstr_D(i64 %conv667), !dbg !3748
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3749
  %351 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3749
  %352 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3749
  %add.ptr668 = getelementptr inbounds i8, i8* %351, i64 %352, !dbg !3749
  %353 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3749
  %cmp669 = icmp ugt i8* %add.ptr668, %353, !dbg !3749
  br i1 %cmp669, label %cond.true671, label %cond.false673, !dbg !3749

cond.true671:                                     ; preds = %cond.end658
  %354 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3749
  %conv672 = trunc i64 %354 to i32, !dbg !3749
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv672), !dbg !3749
  br label %cond.end674, !dbg !3749

cond.false673:                                    ; preds = %cond.end658
  br label %cond.end674, !dbg !3749

cond.end674:                                      ; preds = %cond.false673, %cond.true671
  %cond675 = phi i32 [ 0, %cond.true671 ], [ 0, %cond.false673 ], !dbg !3749
  %355 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3749
  %356 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3749
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %355, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0), i64 %356, i1 false), !dbg !3749
  %357 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3749
  %358 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3749
  %add.ptr676 = getelementptr inbounds i8, i8* %358, i64 %357, !dbg !3749
  store i8* %add.ptr676, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3749
  br label %if.end677

if.end677:                                        ; preds = %cond.end674, %cond.end587
  br label %sw.epilog1462, !dbg !3750

sw.bb678:                                         ; preds = %if.end326
  %359 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3751
  %common679 = bitcast %union.tree_node* %359 to %struct.tree_common*, !dbg !3751
  %base680 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common679, i32 0, i32 0, !dbg !3751
  %360 = bitcast %struct.tree_base* %base680 to i64*, !dbg !3751
  %bf.load681 = load i64, i64* %360, align 8, !dbg !3751
  %bf.lshr682 = lshr i64 %bf.load681, 41, !dbg !3751
  %bf.clear683 = and i64 %bf.lshr682, 1, !dbg !3751
  %bf.cast684 = trunc i64 %bf.clear683 to i32, !dbg !3751
  %tobool685 = icmp ne i32 %bf.cast684, 0, !dbg !3751
  br i1 %tobool685, label %land.lhs.true686, label %if.end712, !dbg !3753

land.lhs.true686:                                 ; preds = %sw.bb678
  %361 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3754
  %conv687 = zext i8 %361 to i32, !dbg !3754
  %tobool688 = icmp ne i32 %conv687, 0, !dbg !3754
  br i1 %tobool688, label %if.then689, label %if.end712, !dbg !3755

if.then689:                                       ; preds = %land.lhs.true686
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3756
  %362 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3756
  %363 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3756
  %add.ptr690 = getelementptr inbounds i8, i8* %362, i64 %363, !dbg !3756
  %364 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3756
  %cmp691 = icmp ugt i8* %add.ptr690, %364, !dbg !3756
  br i1 %cmp691, label %cond.true693, label %cond.false695, !dbg !3756

cond.true693:                                     ; preds = %if.then689
  %365 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3756
  %conv694 = trunc i64 %365 to i32, !dbg !3756
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv694), !dbg !3756
  br label %cond.end696, !dbg !3756

cond.false695:                                    ; preds = %if.then689
  br label %cond.end696, !dbg !3756

cond.end696:                                      ; preds = %cond.false695, %cond.true693
  %cond697 = phi i32 [ 0, %cond.true693 ], [ 0, %cond.false695 ], !dbg !3756
  %366 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3756
  %367 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3756
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %366, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i64 %367, i1 false), !dbg !3756
  %368 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3756
  %369 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3756
  %add.ptr698 = getelementptr inbounds i8, i8* %369, i64 %368, !dbg !3756
  store i8* %add.ptr698, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3756
  %370 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3758
  %call699 = call i64 @int_size_in_bytes(%union.tree_node* %370), !dbg !3759
  %mul700 = mul nsw i64 8, %call699, !dbg !3760
  call void @stabstr_D(i64 %mul700), !dbg !3761
  store i64 5, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3762
  %371 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3762
  %372 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3762
  %add.ptr701 = getelementptr inbounds i8, i8* %371, i64 %372, !dbg !3762
  %373 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3762
  %cmp702 = icmp ugt i8* %add.ptr701, %373, !dbg !3762
  br i1 %cmp702, label %cond.true704, label %cond.false706, !dbg !3762

cond.true704:                                     ; preds = %cond.end696
  %374 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3762
  %conv705 = trunc i64 %374 to i32, !dbg !3762
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv705), !dbg !3762
  br label %cond.end707, !dbg !3762

cond.false706:                                    ; preds = %cond.end696
  br label %cond.end707, !dbg !3762

cond.end707:                                      ; preds = %cond.false706, %cond.true704
  %cond708 = phi i32 [ 0, %cond.true704 ], [ 0, %cond.false706 ], !dbg !3762
  %375 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3762
  %376 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3762
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %375, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0), i64 %376, i1 false), !dbg !3762
  %377 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3762
  %378 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3762
  %add.ptr709 = getelementptr inbounds i8, i8* %378, i64 %377, !dbg !3762
  store i8* %add.ptr709, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3762
  %379 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3763
  %type710 = bitcast %union.tree_node* %379 to %struct.tree_type*, !dbg !3763
  %values711 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type710, i32 0, i32 1, !dbg !3763
  %380 = load %union.tree_node*, %union.tree_node** %values711, align 8, !dbg !3763
  call void @dbxout_type(%union.tree_node* %380, i32 0), !dbg !3764
  br label %sw.epilog1462, !dbg !3765

if.end712:                                        ; preds = %land.lhs.true686, %sw.bb678
  %381 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3766
  %conv713 = zext i8 %381 to i32, !dbg !3766
  %tobool714 = icmp ne i32 %conv713, 0, !dbg !3766
  br i1 %tobool714, label %land.lhs.true715, label %if.end728, !dbg !3768

land.lhs.true715:                                 ; preds = %if.end712
  %382 = load i8, i8* %vector_type, align 1, !dbg !3769
  %conv716 = zext i8 %382 to i32, !dbg !3769
  %tobool717 = icmp ne i32 %conv716, 0, !dbg !3769
  br i1 %tobool717, label %if.then718, label %if.end728, !dbg !3770

if.then718:                                       ; preds = %land.lhs.true715
  store i64 3, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3771
  %383 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3771
  %384 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3771
  %add.ptr719 = getelementptr inbounds i8, i8* %383, i64 %384, !dbg !3771
  %385 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3771
  %cmp720 = icmp ugt i8* %add.ptr719, %385, !dbg !3771
  br i1 %cmp720, label %cond.true722, label %cond.false724, !dbg !3771

cond.true722:                                     ; preds = %if.then718
  %386 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3771
  %conv723 = trunc i64 %386 to i32, !dbg !3771
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv723), !dbg !3771
  br label %cond.end725, !dbg !3771

cond.false724:                                    ; preds = %if.then718
  br label %cond.end725, !dbg !3771

cond.end725:                                      ; preds = %cond.false724, %cond.true722
  %cond726 = phi i32 [ 0, %cond.true722 ], [ 0, %cond.false724 ], !dbg !3771
  %387 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3771
  %388 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3771
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %387, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i64 0, i64 0), i64 %388, i1 false), !dbg !3771
  %389 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3771
  %390 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3771
  %add.ptr727 = getelementptr inbounds i8, i8* %390, i64 %389, !dbg !3771
  store i8* %add.ptr727, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3771
  br label %if.end728, !dbg !3771

if.end728:                                        ; preds = %cond.end725, %land.lhs.true715, %if.end712
  %391 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3772
  %type729 = bitcast %union.tree_node* %391 to %struct.tree_type*, !dbg !3772
  %string_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type729, i32 0, i32 6, !dbg !3772
  %bf.load730 = load i32, i32* %string_flag, align 4, !dbg !3772
  %bf.lshr731 = lshr i32 %bf.load730, 24, !dbg !3772
  %bf.clear732 = and i32 %bf.lshr731, 1, !dbg !3772
  %tobool733 = icmp ne i32 %bf.clear732, 0, !dbg !3772
  br i1 %tobool733, label %land.lhs.true734, label %if.end747, !dbg !3774

land.lhs.true734:                                 ; preds = %if.end728
  %392 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3775
  %conv735 = zext i8 %392 to i32, !dbg !3775
  %tobool736 = icmp ne i32 %conv735, 0, !dbg !3775
  br i1 %tobool736, label %if.then737, label %if.end747, !dbg !3776

if.then737:                                       ; preds = %land.lhs.true734
  store i64 3, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3777
  %393 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3777
  %394 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3777
  %add.ptr738 = getelementptr inbounds i8, i8* %393, i64 %394, !dbg !3777
  %395 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3777
  %cmp739 = icmp ugt i8* %add.ptr738, %395, !dbg !3777
  br i1 %cmp739, label %cond.true741, label %cond.false743, !dbg !3777

cond.true741:                                     ; preds = %if.then737
  %396 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3777
  %conv742 = trunc i64 %396 to i32, !dbg !3777
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv742), !dbg !3777
  br label %cond.end744, !dbg !3777

cond.false743:                                    ; preds = %if.then737
  br label %cond.end744, !dbg !3777

cond.end744:                                      ; preds = %cond.false743, %cond.true741
  %cond745 = phi i32 [ 0, %cond.true741 ], [ 0, %cond.false743 ], !dbg !3777
  %397 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3777
  %398 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3777
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %397, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i64 0, i64 0), i64 %398, i1 false), !dbg !3777
  %399 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3777
  %400 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3777
  %add.ptr746 = getelementptr inbounds i8, i8* %400, i64 %399, !dbg !3777
  store i8* %add.ptr746, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3777
  br label %if.end747, !dbg !3779

if.end747:                                        ; preds = %cond.end744, %land.lhs.true734, %if.end728
  %401 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3780
  %type748 = bitcast %union.tree_node* %401 to %struct.tree_type*, !dbg !3780
  %values749 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type748, i32 0, i32 1, !dbg !3780
  %402 = load %union.tree_node*, %union.tree_node** %values749, align 8, !dbg !3780
  store %union.tree_node* %402, %union.tree_node** %tem, align 8, !dbg !3781
  %403 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !3782
  %cmp750 = icmp eq %union.tree_node* %403, null, !dbg !3784
  br i1 %cmp750, label %if.then752, label %if.else771, !dbg !3785

if.then752:                                       ; preds = %if.end747
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3786
  %404 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3786
  %405 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3786
  %add.ptr753 = getelementptr inbounds i8, i8* %404, i64 %405, !dbg !3786
  %406 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3786
  %cmp754 = icmp ugt i8* %add.ptr753, %406, !dbg !3786
  br i1 %cmp754, label %cond.true756, label %cond.false758, !dbg !3786

cond.true756:                                     ; preds = %if.then752
  %407 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3786
  %conv757 = trunc i64 %407 to i32, !dbg !3786
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv757), !dbg !3786
  br label %cond.end759, !dbg !3786

cond.false758:                                    ; preds = %if.then752
  br label %cond.end759, !dbg !3786

cond.end759:                                      ; preds = %cond.false758, %cond.true756
  %cond760 = phi i32 [ 0, %cond.true756 ], [ 0, %cond.false758 ], !dbg !3786
  %408 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3786
  %409 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3786
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %408, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i64 0, i64 0), i64 %409, i1 false), !dbg !3786
  %410 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3786
  %411 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3786
  %add.ptr761 = getelementptr inbounds i8, i8* %411, i64 %410, !dbg !3786
  store i8* %add.ptr761, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3786
  %412 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !3788
  call void @dbxout_type_index(%union.tree_node* %412), !dbg !3789
  store i64 6, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3790
  %413 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3790
  %414 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3790
  %add.ptr762 = getelementptr inbounds i8, i8* %413, i64 %414, !dbg !3790
  %415 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3790
  %cmp763 = icmp ugt i8* %add.ptr762, %415, !dbg !3790
  br i1 %cmp763, label %cond.true765, label %cond.false767, !dbg !3790

cond.true765:                                     ; preds = %cond.end759
  %416 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3790
  %conv766 = trunc i64 %416 to i32, !dbg !3790
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv766), !dbg !3790
  br label %cond.end768, !dbg !3790

cond.false767:                                    ; preds = %cond.end759
  br label %cond.end768, !dbg !3790

cond.end768:                                      ; preds = %cond.false767, %cond.true765
  %cond769 = phi i32 [ 0, %cond.true765 ], [ 0, %cond.false767 ], !dbg !3790
  %417 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3790
  %418 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3790
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %417, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i64 %418, i1 false), !dbg !3790
  %419 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3790
  %420 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3790
  %add.ptr770 = getelementptr inbounds i8, i8* %420, i64 %419, !dbg !3790
  store i8* %add.ptr770, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3790
  br label %if.end784, !dbg !3791

if.else771:                                       ; preds = %if.end747
  %421 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3792
  %add.ptr772 = getelementptr inbounds i8, i8* %421, i64 1, !dbg !3792
  %422 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3792
  %cmp773 = icmp ugt i8* %add.ptr772, %422, !dbg !3792
  br i1 %cmp773, label %cond.true775, label %cond.false776, !dbg !3792

cond.true775:                                     ; preds = %if.else771
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3792
  br label %cond.end777, !dbg !3792

cond.false776:                                    ; preds = %if.else771
  br label %cond.end777, !dbg !3792

cond.end777:                                      ; preds = %cond.false776, %cond.true775
  %cond778 = phi i32 [ 0, %cond.true775 ], [ 0, %cond.false776 ], !dbg !3792
  %423 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3792
  %incdec.ptr779 = getelementptr inbounds i8, i8* %423, i32 1, !dbg !3792
  store i8* %incdec.ptr779, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3792
  store i8 97, i8* %423, align 1, !dbg !3792
  %424 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !3794
  %425 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !3795
  %type780 = bitcast %union.tree_node* %425 to %struct.tree_type*, !dbg !3795
  %minval781 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type780, i32 0, i32 13, !dbg !3795
  %426 = load %union.tree_node*, %union.tree_node** %minval781, align 8, !dbg !3795
  %427 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !3796
  %type782 = bitcast %union.tree_node* %427 to %struct.tree_type*, !dbg !3796
  %maxval783 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type782, i32 0, i32 14, !dbg !3796
  %428 = load %union.tree_node*, %union.tree_node** %maxval783, align 8, !dbg !3796
  call void @dbxout_range_type(%union.tree_node* %424, %union.tree_node* %426, %union.tree_node* %428), !dbg !3797
  br label %if.end784

if.end784:                                        ; preds = %cond.end777, %cond.end768
  %429 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3798
  %common785 = bitcast %union.tree_node* %429 to %struct.tree_common*, !dbg !3798
  %type786 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common785, i32 0, i32 2, !dbg !3798
  %430 = load %union.tree_node*, %union.tree_node** %type786, align 8, !dbg !3798
  call void @dbxout_type(%union.tree_node* %430, i32 0), !dbg !3799
  br label %sw.epilog1462, !dbg !3800

sw.bb787:                                         ; preds = %if.end326, %if.end326, %if.end326
  call void @llvm.dbg.declare(metadata %union.tree_node** %binfo, metadata !3801, metadata !DIExpression()), !dbg !3803
  %431 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3804
  %type788 = bitcast %union.tree_node* %431 to %struct.tree_type*, !dbg !3804
  %binfo789 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type788, i32 0, i32 17, !dbg !3804
  %432 = load %union.tree_node*, %union.tree_node** %binfo789, align 8, !dbg !3804
  store %union.tree_node* %432, %union.tree_node** %binfo, align 8, !dbg !3803
  %433 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3805
  %type790 = bitcast %union.tree_node* %433 to %struct.tree_type*, !dbg !3805
  %name791 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type790, i32 0, i32 12, !dbg !3805
  %434 = load %union.tree_node*, %union.tree_node** %name791, align 8, !dbg !3805
  %cmp792 = icmp ne %union.tree_node* %434, null, !dbg !3807
  br i1 %cmp792, label %land.lhs.true794, label %lor.lhs.false815, !dbg !3808

land.lhs.true794:                                 ; preds = %sw.bb787
  %435 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3809
  %type795 = bitcast %union.tree_node* %435 to %struct.tree_type*, !dbg !3809
  %name796 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type795, i32 0, i32 12, !dbg !3809
  %436 = load %union.tree_node*, %union.tree_node** %name796, align 8, !dbg !3809
  %base797 = bitcast %union.tree_node* %436 to %struct.tree_base*, !dbg !3809
  %437 = bitcast %struct.tree_base* %base797 to i64*, !dbg !3809
  %bf.load798 = load i64, i64* %437, align 8, !dbg !3809
  %bf.clear799 = and i64 %bf.load798, 65535, !dbg !3809
  %bf.cast800 = trunc i64 %bf.clear799 to i32, !dbg !3809
  %cmp801 = icmp eq i32 %bf.cast800, 35, !dbg !3810
  br i1 %cmp801, label %land.lhs.true803, label %land.lhs.true813, !dbg !3811

land.lhs.true803:                                 ; preds = %land.lhs.true794
  %438 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3812
  %type804 = bitcast %union.tree_node* %438 to %struct.tree_type*, !dbg !3812
  %name805 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type804, i32 0, i32 12, !dbg !3812
  %439 = load %union.tree_node*, %union.tree_node** %name805, align 8, !dbg !3812
  %decl_common806 = bitcast %union.tree_node* %439 to %struct.tree_decl_common*, !dbg !3812
  %ignored_flag807 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common806, i32 0, i32 2, !dbg !3812
  %440 = bitcast i40* %ignored_flag807 to i64*, !dbg !3812
  %bf.load808 = load i64, i64* %440, align 8, !dbg !3812
  %bf.lshr809 = lshr i64 %bf.load808, 10, !dbg !3812
  %bf.clear810 = and i64 %bf.lshr809, 1, !dbg !3812
  %bf.cast811 = trunc i64 %bf.clear810 to i32, !dbg !3812
  %tobool812 = icmp ne i32 %bf.cast811, 0, !dbg !3812
  br i1 %tobool812, label %lor.lhs.false815, label %land.lhs.true813, !dbg !3813

land.lhs.true813:                                 ; preds = %land.lhs.true803, %land.lhs.true794
  %441 = load i32, i32* %full.addr, align 4, !dbg !3814
  %tobool814 = icmp ne i32 %441, 0, !dbg !3814
  br i1 %tobool814, label %lor.lhs.false815, label %if.then825, !dbg !3815

lor.lhs.false815:                                 ; preds = %land.lhs.true813, %land.lhs.true803, %sw.bb787
  %442 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3816
  %type816 = bitcast %union.tree_node* %442 to %struct.tree_type*, !dbg !3816
  %size817 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type816, i32 0, i32 2, !dbg !3816
  %443 = load %union.tree_node*, %union.tree_node** %size817, align 8, !dbg !3816
  %cmp818 = icmp ne %union.tree_node* %443, null, !dbg !3816
  br i1 %cmp818, label %lor.lhs.false820, label %if.then825, !dbg !3817

lor.lhs.false820:                                 ; preds = %lor.lhs.false815
  %444 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3818
  %type821 = bitcast %union.tree_node* %444 to %struct.tree_type*, !dbg !3818
  %size822 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type821, i32 0, i32 2, !dbg !3818
  %445 = load %union.tree_node*, %union.tree_node** %size822, align 8, !dbg !3818
  %call823 = call i32 @host_integerp(%union.tree_node* %445, i32 1), !dbg !3819
  %tobool824 = icmp ne i32 %call823, 0, !dbg !3819
  br i1 %tobool824, label %if.end896, label %if.then825, !dbg !3820

if.then825:                                       ; preds = %lor.lhs.false820, %lor.lhs.false815, %land.lhs.true813
  %446 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3821
  %base826 = bitcast %union.tree_node* %446 to %struct.tree_base*, !dbg !3821
  %447 = bitcast %struct.tree_base* %base826 to i64*, !dbg !3821
  %bf.load827 = load i64, i64* %447, align 8, !dbg !3821
  %bf.clear828 = and i64 %bf.load827, 65535, !dbg !3821
  %bf.cast829 = trunc i64 %bf.clear828 to i32, !dbg !3821
  %cmp830 = icmp eq i32 %bf.cast829, 16, !dbg !3821
  %448 = zext i1 %cmp830 to i64, !dbg !3821
  %cond832 = select i1 %cmp830, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i64 0, i64 0), !dbg !3821
  %call833 = call i64 @strlen(i8* %cond832), !dbg !3821
  store i64 %call833, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3821
  %449 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3821
  %450 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3821
  %add.ptr834 = getelementptr inbounds i8, i8* %449, i64 %450, !dbg !3821
  %451 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3821
  %cmp835 = icmp ugt i8* %add.ptr834, %451, !dbg !3821
  br i1 %cmp835, label %cond.true837, label %cond.false839, !dbg !3821

cond.true837:                                     ; preds = %if.then825
  %452 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3821
  %conv838 = trunc i64 %452 to i32, !dbg !3821
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv838), !dbg !3821
  br label %cond.end840, !dbg !3821

cond.false839:                                    ; preds = %if.then825
  br label %cond.end840, !dbg !3821

cond.end840:                                      ; preds = %cond.false839, %cond.true837
  %cond841 = phi i32 [ 0, %cond.true837 ], [ 0, %cond.false839 ], !dbg !3821
  %453 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3821
  %454 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3821
  %base842 = bitcast %union.tree_node* %454 to %struct.tree_base*, !dbg !3821
  %455 = bitcast %struct.tree_base* %base842 to i64*, !dbg !3821
  %bf.load843 = load i64, i64* %455, align 8, !dbg !3821
  %bf.clear844 = and i64 %bf.load843, 65535, !dbg !3821
  %bf.cast845 = trunc i64 %bf.clear844 to i32, !dbg !3821
  %cmp846 = icmp eq i32 %bf.cast845, 16, !dbg !3821
  %456 = zext i1 %cmp846 to i64, !dbg !3821
  %cond848 = select i1 %cmp846, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i64 0, i64 0), !dbg !3821
  %457 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3821
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %453, i8* align 1 %cond848, i64 %457, i1 false), !dbg !3821
  %458 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3821
  %459 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3821
  %add.ptr849 = getelementptr inbounds i8, i8* %459, i64 %458, !dbg !3821
  store i8* %add.ptr849, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3821
  %460 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3823
  %type850 = bitcast %union.tree_node* %460 to %struct.tree_type*, !dbg !3823
  %name851 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type850, i32 0, i32 12, !dbg !3823
  %461 = load %union.tree_node*, %union.tree_node** %name851, align 8, !dbg !3823
  %cmp852 = icmp ne %union.tree_node* %461, null, !dbg !3825
  br i1 %cmp852, label %land.lhs.true854, label %if.else869, !dbg !3826

land.lhs.true854:                                 ; preds = %cond.end840
  %462 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3827
  %type855 = bitcast %union.tree_node* %462 to %struct.tree_type*, !dbg !3827
  %name856 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type855, i32 0, i32 12, !dbg !3827
  %463 = load %union.tree_node*, %union.tree_node** %name856, align 8, !dbg !3827
  %base857 = bitcast %union.tree_node* %463 to %struct.tree_base*, !dbg !3827
  %464 = bitcast %struct.tree_base* %base857 to i64*, !dbg !3827
  %bf.load858 = load i64, i64* %464, align 8, !dbg !3827
  %bf.clear859 = and i64 %bf.load858, 65535, !dbg !3827
  %bf.cast860 = trunc i64 %bf.clear859 to i32, !dbg !3827
  %cmp861 = icmp ne i32 %bf.cast860, 35, !dbg !3828
  br i1 %cmp861, label %if.then868, label %lor.lhs.false863, !dbg !3829

lor.lhs.false863:                                 ; preds = %land.lhs.true854
  %465 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3830
  %type864 = bitcast %union.tree_node* %465 to %struct.tree_type*, !dbg !3830
  %name865 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type864, i32 0, i32 12, !dbg !3830
  %466 = load %union.tree_node*, %union.tree_node** %name865, align 8, !dbg !3830
  %decl_minimal = bitcast %union.tree_node* %466 to %struct.tree_decl_minimal*, !dbg !3830
  %name866 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !3830
  %467 = load %union.tree_node*, %union.tree_node** %name866, align 8, !dbg !3830
  %tobool867 = icmp ne %union.tree_node* %467, null, !dbg !3830
  br i1 %tobool867, label %if.then868, label %if.else869, !dbg !3831

if.then868:                                       ; preds = %lor.lhs.false863, %land.lhs.true854
  %468 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3832
  call void @dbxout_type_name(%union.tree_node* %468), !dbg !3833
  br label %if.end881, !dbg !3833

if.else869:                                       ; preds = %lor.lhs.false863, %cond.end840
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3834
  %469 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3834
  %470 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3834
  %add.ptr870 = getelementptr inbounds i8, i8* %469, i64 %470, !dbg !3834
  %471 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3834
  %cmp871 = icmp ugt i8* %add.ptr870, %471, !dbg !3834
  br i1 %cmp871, label %cond.true873, label %cond.false875, !dbg !3834

cond.true873:                                     ; preds = %if.else869
  %472 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3834
  %conv874 = trunc i64 %472 to i32, !dbg !3834
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv874), !dbg !3834
  br label %cond.end876, !dbg !3834

cond.false875:                                    ; preds = %if.else869
  br label %cond.end876, !dbg !3834

cond.end876:                                      ; preds = %cond.false875, %cond.true873
  %cond877 = phi i32 [ 0, %cond.true873 ], [ 0, %cond.false875 ], !dbg !3834
  %473 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3834
  %474 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3834
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %473, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i64 0, i64 0), i64 %474, i1 false), !dbg !3834
  %475 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3834
  %476 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3834
  %add.ptr878 = getelementptr inbounds i8, i8* %476, i64 %475, !dbg !3834
  store i8* %add.ptr878, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3834
  %477 = load i32, i32* @dbxout_type.anonymous_type_number, align 4, !dbg !3836
  %inc879 = add nsw i32 %477, 1, !dbg !3836
  store i32 %inc879, i32* @dbxout_type.anonymous_type_number, align 4, !dbg !3836
  %conv880 = sext i32 %477 to i64, !dbg !3837
  call void @stabstr_D(i64 %conv880), !dbg !3838
  br label %if.end881

if.end881:                                        ; preds = %cond.end876, %if.then868
  %478 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3839
  %add.ptr882 = getelementptr inbounds i8, i8* %478, i64 1, !dbg !3839
  %479 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3839
  %cmp883 = icmp ugt i8* %add.ptr882, %479, !dbg !3839
  br i1 %cmp883, label %cond.true885, label %cond.false886, !dbg !3839

cond.true885:                                     ; preds = %if.end881
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3839
  br label %cond.end887, !dbg !3839

cond.false886:                                    ; preds = %if.end881
  br label %cond.end887, !dbg !3839

cond.end887:                                      ; preds = %cond.false886, %cond.true885
  %cond888 = phi i32 [ 0, %cond.true885 ], [ 0, %cond.false886 ], !dbg !3839
  %480 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3839
  %incdec.ptr889 = getelementptr inbounds i8, i8* %480, i32 1, !dbg !3839
  store i8* %incdec.ptr889, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3839
  store i8 58, i8* %480, align 1, !dbg !3839
  %481 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !3840
  %482 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3841
  %type890 = bitcast %union.tree_node* %482 to %struct.tree_type*, !dbg !3841
  %symtab891 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type890, i32 0, i32 11, !dbg !3841
  %address892 = bitcast %union.tree_type_symtab* %symtab891 to i32*, !dbg !3841
  %483 = load i32, i32* %address892, align 8, !dbg !3841
  %idxprom893 = sext i32 %483 to i64, !dbg !3840
  %arrayidx894 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %481, i64 %idxprom893, !dbg !3840
  %status895 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %arrayidx894, i32 0, i32 0, !dbg !3842
  store i32 1, i32* %status895, align 4, !dbg !3843
  br label %sw.epilog1462, !dbg !3844

if.end896:                                        ; preds = %lor.lhs.false820
  %484 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3845
  %add.ptr897 = getelementptr inbounds i8, i8* %484, i64 1, !dbg !3845
  %485 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3845
  %cmp898 = icmp ugt i8* %add.ptr897, %485, !dbg !3845
  br i1 %cmp898, label %cond.true900, label %cond.false901, !dbg !3845

cond.true900:                                     ; preds = %if.end896
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3845
  br label %cond.end902, !dbg !3845

cond.false901:                                    ; preds = %if.end896
  br label %cond.end902, !dbg !3845

cond.end902:                                      ; preds = %cond.false901, %cond.true900
  %cond903 = phi i32 [ 0, %cond.true900 ], [ 0, %cond.false901 ], !dbg !3845
  %486 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3845
  %base904 = bitcast %union.tree_node* %486 to %struct.tree_base*, !dbg !3845
  %487 = bitcast %struct.tree_base* %base904 to i64*, !dbg !3845
  %bf.load905 = load i64, i64* %487, align 8, !dbg !3845
  %bf.clear906 = and i64 %bf.load905, 65535, !dbg !3845
  %bf.cast907 = trunc i64 %bf.clear906 to i32, !dbg !3845
  %cmp908 = icmp eq i32 %bf.cast907, 16, !dbg !3845
  %488 = zext i1 %cmp908 to i64, !dbg !3845
  %cond910 = select i1 %cmp908, i32 115, i32 117, !dbg !3845
  %conv911 = trunc i32 %cond910 to i8, !dbg !3845
  %489 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3845
  %incdec.ptr912 = getelementptr inbounds i8, i8* %489, i32 1, !dbg !3845
  store i8* %incdec.ptr912, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3845
  store i8 %conv911, i8* %489, align 1, !dbg !3845
  %490 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3846
  %call913 = call i64 @int_size_in_bytes(%union.tree_node* %490), !dbg !3847
  call void @stabstr_D(i64 %call913), !dbg !3848
  %491 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3849
  %tobool914 = icmp ne %union.tree_node* %491, null, !dbg !3849
  br i1 %tobool914, label %if.then915, label %if.end1111, !dbg !3851

if.then915:                                       ; preds = %cond.end902
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3852, metadata !DIExpression()), !dbg !3854
  call void @llvm.dbg.declare(metadata %union.tree_node** %child, metadata !3855, metadata !DIExpression()), !dbg !3856
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %accesses, metadata !3857, metadata !DIExpression()), !dbg !3858
  %492 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3859
  %binfo916 = bitcast %union.tree_node* %492 to %struct.tree_binfo*, !dbg !3859
  %base_accesses = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo916, i32 0, i32 5, !dbg !3859
  %493 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %base_accesses, align 8, !dbg !3859
  store %struct.VEC_tree_gc* %493, %struct.VEC_tree_gc** %accesses, align 8, !dbg !3858
  %494 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3860
  %tobool917 = icmp ne i8 %494, 0, !dbg !3860
  br i1 %tobool917, label %if.then918, label %if.end960, !dbg !3862

if.then918:                                       ; preds = %if.then915
  %495 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3863
  %binfo919 = bitcast %union.tree_node* %495 to %struct.tree_binfo*, !dbg !3863
  %base_binfos = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo919, i32 0, i32 9, !dbg !3863
  %tobool920 = icmp ne %struct.VEC_tree_none* %base_binfos, null, !dbg !3863
  br i1 %tobool920, label %cond.true921, label %cond.false925, !dbg !3863

cond.true921:                                     ; preds = %if.then918
  %496 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3863
  %binfo922 = bitcast %union.tree_node* %496 to %struct.tree_binfo*, !dbg !3863
  %base_binfos923 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo922, i32 0, i32 9, !dbg !3863
  %base924 = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos923, i32 0, i32 0, !dbg !3863
  br label %cond.end926, !dbg !3863

cond.false925:                                    ; preds = %if.then918
  br label %cond.end926, !dbg !3863

cond.end926:                                      ; preds = %cond.false925, %cond.true921
  %cond927 = phi %struct.VEC_tree_base* [ %base924, %cond.true921 ], [ null, %cond.false925 ], !dbg !3863
  %call928 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond927), !dbg !3863
  %tobool929 = icmp ne i32 %call928, 0, !dbg !3863
  br i1 %tobool929, label %if.then930, label %if.end959, !dbg !3866

if.then930:                                       ; preds = %cond.end926
  %497 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3867
  %add.ptr931 = getelementptr inbounds i8, i8* %497, i64 1, !dbg !3867
  %498 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3867
  %cmp932 = icmp ugt i8* %add.ptr931, %498, !dbg !3867
  br i1 %cmp932, label %cond.true934, label %cond.false935, !dbg !3867

cond.true934:                                     ; preds = %if.then930
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3867
  br label %cond.end936, !dbg !3867

cond.false935:                                    ; preds = %if.then930
  br label %cond.end936, !dbg !3867

cond.end936:                                      ; preds = %cond.false935, %cond.true934
  %cond937 = phi i32 [ 0, %cond.true934 ], [ 0, %cond.false935 ], !dbg !3867
  %499 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3867
  %incdec.ptr938 = getelementptr inbounds i8, i8* %499, i32 1, !dbg !3867
  store i8* %incdec.ptr938, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3867
  store i8 33, i8* %499, align 1, !dbg !3867
  %500 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3869
  %binfo939 = bitcast %union.tree_node* %500 to %struct.tree_binfo*, !dbg !3869
  %base_binfos940 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo939, i32 0, i32 9, !dbg !3869
  %tobool941 = icmp ne %struct.VEC_tree_none* %base_binfos940, null, !dbg !3869
  br i1 %tobool941, label %cond.true942, label %cond.false946, !dbg !3869

cond.true942:                                     ; preds = %cond.end936
  %501 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3869
  %binfo943 = bitcast %union.tree_node* %501 to %struct.tree_binfo*, !dbg !3869
  %base_binfos944 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo943, i32 0, i32 9, !dbg !3869
  %base945 = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos944, i32 0, i32 0, !dbg !3869
  br label %cond.end947, !dbg !3869

cond.false946:                                    ; preds = %cond.end936
  br label %cond.end947, !dbg !3869

cond.end947:                                      ; preds = %cond.false946, %cond.true942
  %cond948 = phi %struct.VEC_tree_base* [ %base945, %cond.true942 ], [ null, %cond.false946 ], !dbg !3869
  %call949 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond948), !dbg !3869
  %conv950 = zext i32 %call949 to i64, !dbg !3869
  call void @stabstr_U(i64 %conv950), !dbg !3870
  %502 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3871
  %add.ptr951 = getelementptr inbounds i8, i8* %502, i64 1, !dbg !3871
  %503 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3871
  %cmp952 = icmp ugt i8* %add.ptr951, %503, !dbg !3871
  br i1 %cmp952, label %cond.true954, label %cond.false955, !dbg !3871

cond.true954:                                     ; preds = %cond.end947
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3871
  br label %cond.end956, !dbg !3871

cond.false955:                                    ; preds = %cond.end947
  br label %cond.end956, !dbg !3871

cond.end956:                                      ; preds = %cond.false955, %cond.true954
  %cond957 = phi i32 [ 0, %cond.true954 ], [ 0, %cond.false955 ], !dbg !3871
  %504 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3871
  %incdec.ptr958 = getelementptr inbounds i8, i8* %504, i32 1, !dbg !3871
  store i8* %incdec.ptr958, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3871
  store i8 44, i8* %504, align 1, !dbg !3871
  br label %if.end959, !dbg !3872

if.end959:                                        ; preds = %cond.end956, %cond.end926
  br label %if.end960, !dbg !3873

if.end960:                                        ; preds = %if.end959, %if.then915
  store i32 0, i32* %i, align 4, !dbg !3874
  br label %for.cond, !dbg !3876

for.cond:                                         ; preds = %for.inc, %if.end960
  %505 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3877
  %binfo961 = bitcast %union.tree_node* %505 to %struct.tree_binfo*, !dbg !3877
  %base_binfos962 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo961, i32 0, i32 9, !dbg !3877
  %tobool963 = icmp ne %struct.VEC_tree_none* %base_binfos962, null, !dbg !3877
  br i1 %tobool963, label %cond.true964, label %cond.false968, !dbg !3877

cond.true964:                                     ; preds = %for.cond
  %506 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3877
  %binfo965 = bitcast %union.tree_node* %506 to %struct.tree_binfo*, !dbg !3877
  %base_binfos966 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo965, i32 0, i32 9, !dbg !3877
  %base967 = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos966, i32 0, i32 0, !dbg !3877
  br label %cond.end969, !dbg !3877

cond.false968:                                    ; preds = %for.cond
  br label %cond.end969, !dbg !3877

cond.end969:                                      ; preds = %cond.false968, %cond.true964
  %cond970 = phi %struct.VEC_tree_base* [ %base967, %cond.true964 ], [ null, %cond.false968 ], !dbg !3877
  %507 = load i32, i32* %i, align 4, !dbg !3877
  %call971 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond970, i32 %507, %union.tree_node** %child), !dbg !3877
  %tobool972 = icmp ne i32 %call971, 0, !dbg !3879
  br i1 %tobool972, label %for.body, label %for.end, !dbg !3879

for.body:                                         ; preds = %cond.end969
  call void @llvm.dbg.declare(metadata %union.tree_node** %access, metadata !3880, metadata !DIExpression()), !dbg !3882
  %508 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %accesses, align 8, !dbg !3883
  %tobool973 = icmp ne %struct.VEC_tree_gc* %508, null, !dbg !3883
  br i1 %tobool973, label %cond.true974, label %cond.false982, !dbg !3883

cond.true974:                                     ; preds = %for.body
  %509 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %accesses, align 8, !dbg !3884
  %tobool975 = icmp ne %struct.VEC_tree_gc* %509, null, !dbg !3884
  br i1 %tobool975, label %cond.true976, label %cond.false978, !dbg !3884

cond.true976:                                     ; preds = %cond.true974
  %510 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %accesses, align 8, !dbg !3884
  %base977 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %510, i32 0, i32 0, !dbg !3884
  br label %cond.end979, !dbg !3884

cond.false978:                                    ; preds = %cond.true974
  br label %cond.end979, !dbg !3884

cond.end979:                                      ; preds = %cond.false978, %cond.true976
  %cond980 = phi %struct.VEC_tree_base* [ %base977, %cond.true976 ], [ null, %cond.false978 ], !dbg !3884
  %511 = load i32, i32* %i, align 4, !dbg !3884
  %call981 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond980, i32 %511), !dbg !3884
  br label %cond.end983, !dbg !3883

cond.false982:                                    ; preds = %for.body
  %512 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 22), align 16, !dbg !3885
  br label %cond.end983, !dbg !3883

cond.end983:                                      ; preds = %cond.false982, %cond.end979
  %cond984 = phi %union.tree_node* [ %call981, %cond.end979 ], [ %512, %cond.false982 ], !dbg !3883
  store %union.tree_node* %cond984, %union.tree_node** %access, align 8, !dbg !3882
  %513 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3886
  %tobool985 = icmp ne i8 %513, 0, !dbg !3886
  br i1 %tobool985, label %if.then986, label %if.else1062, !dbg !3888

if.then986:                                       ; preds = %cond.end983
  %514 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3889
  %add.ptr987 = getelementptr inbounds i8, i8* %514, i64 1, !dbg !3889
  %515 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3889
  %cmp988 = icmp ugt i8* %add.ptr987, %515, !dbg !3889
  br i1 %cmp988, label %cond.true990, label %cond.false991, !dbg !3889

cond.true990:                                     ; preds = %if.then986
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3889
  br label %cond.end992, !dbg !3889

cond.false991:                                    ; preds = %if.then986
  br label %cond.end992, !dbg !3889

cond.end992:                                      ; preds = %cond.false991, %cond.true990
  %cond993 = phi i32 [ 0, %cond.true990 ], [ 0, %cond.false991 ], !dbg !3889
  %516 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3889
  %base994 = bitcast %union.tree_node* %516 to %struct.tree_base*, !dbg !3889
  %517 = bitcast %struct.tree_base* %base994 to i64*, !dbg !3889
  %bf.load995 = load i64, i64* %517, align 8, !dbg !3889
  %bf.lshr996 = lshr i64 %bf.load995, 26, !dbg !3889
  %bf.clear997 = and i64 %bf.lshr996, 1, !dbg !3889
  %bf.cast998 = trunc i64 %bf.clear997 to i32, !dbg !3889
  %tobool999 = icmp ne i32 %bf.cast998, 0, !dbg !3889
  %518 = zext i1 %tobool999 to i64, !dbg !3889
  %cond1000 = select i1 %tobool999, i32 49, i32 48, !dbg !3889
  %conv1001 = trunc i32 %cond1000 to i8, !dbg !3889
  %519 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3889
  %incdec.ptr1002 = getelementptr inbounds i8, i8* %519, i32 1, !dbg !3889
  store i8* %incdec.ptr1002, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3889
  store i8 %conv1001, i8* %519, align 1, !dbg !3889
  %520 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3891
  %add.ptr1003 = getelementptr inbounds i8, i8* %520, i64 1, !dbg !3891
  %521 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3891
  %cmp1004 = icmp ugt i8* %add.ptr1003, %521, !dbg !3891
  br i1 %cmp1004, label %cond.true1006, label %cond.false1007, !dbg !3891

cond.true1006:                                    ; preds = %cond.end992
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3891
  br label %cond.end1008, !dbg !3891

cond.false1007:                                   ; preds = %cond.end992
  br label %cond.end1008, !dbg !3891

cond.end1008:                                     ; preds = %cond.false1007, %cond.true1006
  %cond1009 = phi i32 [ 0, %cond.true1006 ], [ 0, %cond.false1007 ], !dbg !3891
  %522 = load %union.tree_node*, %union.tree_node** %access, align 8, !dbg !3891
  %523 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 22), align 16, !dbg !3891
  %cmp1010 = icmp eq %union.tree_node* %522, %523, !dbg !3891
  br i1 %cmp1010, label %cond.true1012, label %cond.false1013, !dbg !3891

cond.true1012:                                    ; preds = %cond.end1008
  br label %cond.end1017, !dbg !3891

cond.false1013:                                   ; preds = %cond.end1008
  %524 = load %union.tree_node*, %union.tree_node** %access, align 8, !dbg !3891
  %525 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 23), align 8, !dbg !3891
  %cmp1014 = icmp eq %union.tree_node* %524, %525, !dbg !3891
  %526 = zext i1 %cmp1014 to i64, !dbg !3891
  %cond1016 = select i1 %cmp1014, i32 49, i32 48, !dbg !3891
  br label %cond.end1017, !dbg !3891

cond.end1017:                                     ; preds = %cond.false1013, %cond.true1012
  %cond1018 = phi i32 [ 50, %cond.true1012 ], [ %cond1016, %cond.false1013 ], !dbg !3891
  %conv1019 = trunc i32 %cond1018 to i8, !dbg !3891
  %527 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3891
  %incdec.ptr1020 = getelementptr inbounds i8, i8* %527, i32 1, !dbg !3891
  store i8* %incdec.ptr1020, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3891
  store i8 %conv1019, i8* %527, align 1, !dbg !3891
  %528 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3892
  %base1021 = bitcast %union.tree_node* %528 to %struct.tree_base*, !dbg !3892
  %529 = bitcast %struct.tree_base* %base1021 to i64*, !dbg !3892
  %bf.load1022 = load i64, i64* %529, align 8, !dbg !3892
  %bf.lshr1023 = lshr i64 %bf.load1022, 26, !dbg !3892
  %bf.clear1024 = and i64 %bf.lshr1023, 1, !dbg !3892
  %bf.cast1025 = trunc i64 %bf.clear1024 to i32, !dbg !3892
  %tobool1026 = icmp ne i32 %bf.cast1025, 0, !dbg !3892
  br i1 %tobool1026, label %land.lhs.true1027, label %if.else1039, !dbg !3894

land.lhs.true1027:                                ; preds = %cond.end1017
  %530 = load i8*, i8** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 0), align 8, !dbg !3895
  %call1028 = call i32 @strcmp(i8* %530, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0)), !dbg !3896
  %cmp1029 = icmp eq i32 %call1028, 0, !dbg !3897
  br i1 %cmp1029, label %if.then1035, label %lor.lhs.false1031, !dbg !3898

lor.lhs.false1031:                                ; preds = %land.lhs.true1027
  %531 = load i8*, i8** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 0), align 8, !dbg !3899
  %call1032 = call i32 @strcmp(i8* %531, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0)), !dbg !3900
  %cmp1033 = icmp eq i32 %call1032, 0, !dbg !3901
  br i1 %cmp1033, label %if.then1035, label %if.else1039, !dbg !3902

if.then1035:                                      ; preds = %lor.lhs.false1031, %land.lhs.true1027
  %532 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3903
  %binfo1036 = bitcast %union.tree_node* %532 to %struct.tree_binfo*, !dbg !3903
  %vptr_field = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo1036, i32 0, i32 4, !dbg !3903
  %533 = load %union.tree_node*, %union.tree_node** %vptr_field, align 8, !dbg !3903
  %call1037 = call i64 @tree_low_cst(%union.tree_node* %533, i32 0), !dbg !3904
  %mul1038 = mul nsw i64 %call1037, 8, !dbg !3905
  call void @stabstr_D(i64 %mul1038), !dbg !3906
  br label %if.end1043, !dbg !3906

if.else1039:                                      ; preds = %lor.lhs.false1031, %cond.end1017
  %534 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3907
  %binfo1040 = bitcast %union.tree_node* %534 to %struct.tree_binfo*, !dbg !3907
  %offset = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo1040, i32 0, i32 1, !dbg !3907
  %535 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !3907
  %call1041 = call i64 @tree_low_cst(%union.tree_node* %535, i32 0), !dbg !3908
  %mul1042 = mul nsw i64 %call1041, 8, !dbg !3909
  call void @stabstr_D(i64 %mul1042), !dbg !3910
  br label %if.end1043

if.end1043:                                       ; preds = %if.else1039, %if.then1035
  %536 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3911
  %add.ptr1044 = getelementptr inbounds i8, i8* %536, i64 1, !dbg !3911
  %537 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3911
  %cmp1045 = icmp ugt i8* %add.ptr1044, %537, !dbg !3911
  br i1 %cmp1045, label %cond.true1047, label %cond.false1048, !dbg !3911

cond.true1047:                                    ; preds = %if.end1043
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3911
  br label %cond.end1049, !dbg !3911

cond.false1048:                                   ; preds = %if.end1043
  br label %cond.end1049, !dbg !3911

cond.end1049:                                     ; preds = %cond.false1048, %cond.true1047
  %cond1050 = phi i32 [ 0, %cond.true1047 ], [ 0, %cond.false1048 ], !dbg !3911
  %538 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3911
  %incdec.ptr1051 = getelementptr inbounds i8, i8* %538, i32 1, !dbg !3911
  store i8* %incdec.ptr1051, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3911
  store i8 44, i8* %538, align 1, !dbg !3911
  %539 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3912
  %common1052 = bitcast %union.tree_node* %539 to %struct.tree_common*, !dbg !3912
  %type1053 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1052, i32 0, i32 2, !dbg !3912
  %540 = load %union.tree_node*, %union.tree_node** %type1053, align 8, !dbg !3912
  call void @dbxout_type(%union.tree_node* %540, i32 0), !dbg !3913
  %541 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3914
  %add.ptr1054 = getelementptr inbounds i8, i8* %541, i64 1, !dbg !3914
  %542 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3914
  %cmp1055 = icmp ugt i8* %add.ptr1054, %542, !dbg !3914
  br i1 %cmp1055, label %cond.true1057, label %cond.false1058, !dbg !3914

cond.true1057:                                    ; preds = %cond.end1049
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3914
  br label %cond.end1059, !dbg !3914

cond.false1058:                                   ; preds = %cond.end1049
  br label %cond.end1059, !dbg !3914

cond.end1059:                                     ; preds = %cond.false1058, %cond.true1057
  %cond1060 = phi i32 [ 0, %cond.true1057 ], [ 0, %cond.false1058 ], !dbg !3914
  %543 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3914
  %incdec.ptr1061 = getelementptr inbounds i8, i8* %543, i32 1, !dbg !3914
  store i8* %incdec.ptr1061, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3914
  store i8 59, i8* %543, align 1, !dbg !3914
  br label %if.end1109, !dbg !3915

if.else1062:                                      ; preds = %cond.end983
  %544 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3916
  %common1063 = bitcast %union.tree_node* %544 to %struct.tree_common*, !dbg !3916
  %type1064 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1063, i32 0, i32 2, !dbg !3916
  %545 = load %union.tree_node*, %union.tree_node** %type1064, align 8, !dbg !3916
  call void @dbxout_type_name(%union.tree_node* %545), !dbg !3918
  %546 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3919
  %add.ptr1065 = getelementptr inbounds i8, i8* %546, i64 1, !dbg !3919
  %547 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3919
  %cmp1066 = icmp ugt i8* %add.ptr1065, %547, !dbg !3919
  br i1 %cmp1066, label %cond.true1068, label %cond.false1069, !dbg !3919

cond.true1068:                                    ; preds = %if.else1062
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3919
  br label %cond.end1070, !dbg !3919

cond.false1069:                                   ; preds = %if.else1062
  br label %cond.end1070, !dbg !3919

cond.end1070:                                     ; preds = %cond.false1069, %cond.true1068
  %cond1071 = phi i32 [ 0, %cond.true1068 ], [ 0, %cond.false1069 ], !dbg !3919
  %548 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3919
  %incdec.ptr1072 = getelementptr inbounds i8, i8* %548, i32 1, !dbg !3919
  store i8* %incdec.ptr1072, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3919
  store i8 58, i8* %548, align 1, !dbg !3919
  %549 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3920
  %common1073 = bitcast %union.tree_node* %549 to %struct.tree_common*, !dbg !3920
  %type1074 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1073, i32 0, i32 2, !dbg !3920
  %550 = load %union.tree_node*, %union.tree_node** %type1074, align 8, !dbg !3920
  %551 = load i32, i32* %full.addr, align 4, !dbg !3921
  call void @dbxout_type(%union.tree_node* %550, i32 %551), !dbg !3922
  %552 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3923
  %add.ptr1075 = getelementptr inbounds i8, i8* %552, i64 1, !dbg !3923
  %553 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3923
  %cmp1076 = icmp ugt i8* %add.ptr1075, %553, !dbg !3923
  br i1 %cmp1076, label %cond.true1078, label %cond.false1079, !dbg !3923

cond.true1078:                                    ; preds = %cond.end1070
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3923
  br label %cond.end1080, !dbg !3923

cond.false1079:                                   ; preds = %cond.end1070
  br label %cond.end1080, !dbg !3923

cond.end1080:                                     ; preds = %cond.false1079, %cond.true1078
  %cond1081 = phi i32 [ 0, %cond.true1078 ], [ 0, %cond.false1079 ], !dbg !3923
  %554 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3923
  %incdec.ptr1082 = getelementptr inbounds i8, i8* %554, i32 1, !dbg !3923
  store i8* %incdec.ptr1082, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3923
  store i8 44, i8* %554, align 1, !dbg !3923
  %555 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3924
  %binfo1083 = bitcast %union.tree_node* %555 to %struct.tree_binfo*, !dbg !3924
  %offset1084 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo1083, i32 0, i32 1, !dbg !3924
  %556 = load %union.tree_node*, %union.tree_node** %offset1084, align 8, !dbg !3924
  %call1085 = call i64 @tree_low_cst(%union.tree_node* %556, i32 0), !dbg !3925
  %mul1086 = mul nsw i64 %call1085, 8, !dbg !3926
  call void @stabstr_D(i64 %mul1086), !dbg !3927
  %557 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3928
  %add.ptr1087 = getelementptr inbounds i8, i8* %557, i64 1, !dbg !3928
  %558 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3928
  %cmp1088 = icmp ugt i8* %add.ptr1087, %558, !dbg !3928
  br i1 %cmp1088, label %cond.true1090, label %cond.false1091, !dbg !3928

cond.true1090:                                    ; preds = %cond.end1080
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3928
  br label %cond.end1092, !dbg !3928

cond.false1091:                                   ; preds = %cond.end1080
  br label %cond.end1092, !dbg !3928

cond.end1092:                                     ; preds = %cond.false1091, %cond.true1090
  %cond1093 = phi i32 [ 0, %cond.true1090 ], [ 0, %cond.false1091 ], !dbg !3928
  %559 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3928
  %incdec.ptr1094 = getelementptr inbounds i8, i8* %559, i32 1, !dbg !3928
  store i8* %incdec.ptr1094, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3928
  store i8 44, i8* %559, align 1, !dbg !3928
  %560 = load %union.tree_node*, %union.tree_node** %child, align 8, !dbg !3929
  %common1095 = bitcast %union.tree_node* %560 to %struct.tree_common*, !dbg !3929
  %type1096 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1095, i32 0, i32 2, !dbg !3929
  %561 = load %union.tree_node*, %union.tree_node** %type1096, align 8, !dbg !3929
  %type1097 = bitcast %union.tree_node* %561 to %struct.tree_type*, !dbg !3929
  %size1098 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1097, i32 0, i32 2, !dbg !3929
  %562 = load %union.tree_node*, %union.tree_node** %size1098, align 8, !dbg !3929
  %call1099 = call i64 @tree_low_cst(%union.tree_node* %562, i32 0), !dbg !3930
  %mul1100 = mul nsw i64 %call1099, 8, !dbg !3931
  call void @stabstr_D(i64 %mul1100), !dbg !3932
  %563 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3933
  %add.ptr1101 = getelementptr inbounds i8, i8* %563, i64 1, !dbg !3933
  %564 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3933
  %cmp1102 = icmp ugt i8* %add.ptr1101, %564, !dbg !3933
  br i1 %cmp1102, label %cond.true1104, label %cond.false1105, !dbg !3933

cond.true1104:                                    ; preds = %cond.end1092
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3933
  br label %cond.end1106, !dbg !3933

cond.false1105:                                   ; preds = %cond.end1092
  br label %cond.end1106, !dbg !3933

cond.end1106:                                     ; preds = %cond.false1105, %cond.true1104
  %cond1107 = phi i32 [ 0, %cond.true1104 ], [ 0, %cond.false1105 ], !dbg !3933
  %565 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3933
  %incdec.ptr1108 = getelementptr inbounds i8, i8* %565, i32 1, !dbg !3933
  store i8* %incdec.ptr1108, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3933
  store i8 59, i8* %565, align 1, !dbg !3933
  br label %if.end1109

if.end1109:                                       ; preds = %cond.end1106, %cond.end1059
  br label %for.inc, !dbg !3934

for.inc:                                          ; preds = %if.end1109
  %566 = load i32, i32* %i, align 4, !dbg !3935
  %inc1110 = add nsw i32 %566, 1, !dbg !3935
  store i32 %inc1110, i32* %i, align 4, !dbg !3935
  br label %for.cond, !dbg !3936, !llvm.loop !3937

for.end:                                          ; preds = %cond.end969
  br label %if.end1111, !dbg !3939

if.end1111:                                       ; preds = %for.end, %cond.end902
  %567 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3940
  call void @dbxout_type_fields(%union.tree_node* %567), !dbg !3941
  %568 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3942
  %conv1112 = zext i8 %568 to i32, !dbg !3942
  %tobool1113 = icmp ne i32 %conv1112, 0, !dbg !3942
  br i1 %tobool1113, label %land.lhs.true1114, label %if.end1120, !dbg !3944

land.lhs.true1114:                                ; preds = %if.end1111
  %569 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3945
  %type1115 = bitcast %union.tree_node* %569 to %struct.tree_type*, !dbg !3945
  %maxval1116 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1115, i32 0, i32 14, !dbg !3945
  %570 = load %union.tree_node*, %union.tree_node** %maxval1116, align 8, !dbg !3945
  %cmp1117 = icmp ne %union.tree_node* %570, null, !dbg !3946
  br i1 %cmp1117, label %if.then1119, label %if.end1120, !dbg !3947

if.then1119:                                      ; preds = %land.lhs.true1114
  %571 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3948
  call void @dbxout_type_methods(%union.tree_node* %571), !dbg !3950
  br label %if.end1120, !dbg !3951

if.end1120:                                       ; preds = %if.then1119, %land.lhs.true1114, %if.end1111
  %572 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3952
  %add.ptr1121 = getelementptr inbounds i8, i8* %572, i64 1, !dbg !3952
  %573 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3952
  %cmp1122 = icmp ugt i8* %add.ptr1121, %573, !dbg !3952
  br i1 %cmp1122, label %cond.true1124, label %cond.false1125, !dbg !3952

cond.true1124:                                    ; preds = %if.end1120
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3952
  br label %cond.end1126, !dbg !3952

cond.false1125:                                   ; preds = %if.end1120
  br label %cond.end1126, !dbg !3952

cond.end1126:                                     ; preds = %cond.false1125, %cond.true1124
  %cond1127 = phi i32 [ 0, %cond.true1124 ], [ 0, %cond.false1125 ], !dbg !3952
  %574 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3952
  %incdec.ptr1128 = getelementptr inbounds i8, i8* %574, i32 1, !dbg !3952
  store i8* %incdec.ptr1128, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3952
  store i8 59, i8* %574, align 1, !dbg !3952
  %575 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3953
  %conv1129 = zext i8 %575 to i32, !dbg !3953
  %tobool1130 = icmp ne i32 %conv1129, 0, !dbg !3953
  br i1 %tobool1130, label %land.lhs.true1131, label %if.end1162, !dbg !3955

land.lhs.true1131:                                ; preds = %cond.end1126
  %576 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3956
  %base1132 = bitcast %union.tree_node* %576 to %struct.tree_base*, !dbg !3956
  %577 = bitcast %struct.tree_base* %base1132 to i64*, !dbg !3956
  %bf.load1133 = load i64, i64* %577, align 8, !dbg !3956
  %bf.clear1134 = and i64 %bf.load1133, 65535, !dbg !3956
  %bf.cast1135 = trunc i64 %bf.clear1134 to i32, !dbg !3956
  %cmp1136 = icmp eq i32 %bf.cast1135, 16, !dbg !3957
  br i1 %cmp1136, label %land.lhs.true1138, label %if.end1162, !dbg !3958

land.lhs.true1138:                                ; preds = %land.lhs.true1131
  %578 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3959
  %type1139 = bitcast %union.tree_node* %578 to %struct.tree_type*, !dbg !3959
  %minval1140 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1139, i32 0, i32 13, !dbg !3959
  %579 = load %union.tree_node*, %union.tree_node** %minval1140, align 8, !dbg !3959
  %tobool1141 = icmp ne %union.tree_node* %579, null, !dbg !3959
  br i1 %tobool1141, label %if.then1142, label %if.end1162, !dbg !3960

if.then1142:                                      ; preds = %land.lhs.true1138
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3961
  %580 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3961
  %581 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3961
  %add.ptr1143 = getelementptr inbounds i8, i8* %580, i64 %581, !dbg !3961
  %582 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3961
  %cmp1144 = icmp ugt i8* %add.ptr1143, %582, !dbg !3961
  br i1 %cmp1144, label %cond.true1146, label %cond.false1148, !dbg !3961

cond.true1146:                                    ; preds = %if.then1142
  %583 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3961
  %conv1147 = trunc i64 %583 to i32, !dbg !3961
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv1147), !dbg !3961
  br label %cond.end1149, !dbg !3961

cond.false1148:                                   ; preds = %if.then1142
  br label %cond.end1149, !dbg !3961

cond.end1149:                                     ; preds = %cond.false1148, %cond.true1146
  %cond1150 = phi i32 [ 0, %cond.true1146 ], [ 0, %cond.false1148 ], !dbg !3961
  %584 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3961
  %585 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3961
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %584, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i64 %585, i1 false), !dbg !3961
  %586 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3961
  %587 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3961
  %add.ptr1151 = getelementptr inbounds i8, i8* %587, i64 %586, !dbg !3961
  store i8* %add.ptr1151, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3961
  %588 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3963
  %type1152 = bitcast %union.tree_node* %588 to %struct.tree_type*, !dbg !3963
  %minval1153 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1152, i32 0, i32 13, !dbg !3963
  %589 = load %union.tree_node*, %union.tree_node** %minval1153, align 8, !dbg !3963
  %field_decl = bitcast %union.tree_node* %589 to %struct.tree_field_decl*, !dbg !3963
  %fcontext = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 5, !dbg !3963
  %590 = load %union.tree_node*, %union.tree_node** %fcontext, align 8, !dbg !3963
  call void @dbxout_type(%union.tree_node* %590, i32 0), !dbg !3964
  %591 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3965
  %add.ptr1154 = getelementptr inbounds i8, i8* %591, i64 1, !dbg !3965
  %592 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3965
  %cmp1155 = icmp ugt i8* %add.ptr1154, %592, !dbg !3965
  br i1 %cmp1155, label %cond.true1157, label %cond.false1158, !dbg !3965

cond.true1157:                                    ; preds = %cond.end1149
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3965
  br label %cond.end1159, !dbg !3965

cond.false1158:                                   ; preds = %cond.end1149
  br label %cond.end1159, !dbg !3965

cond.end1159:                                     ; preds = %cond.false1158, %cond.true1157
  %cond1160 = phi i32 [ 0, %cond.true1157 ], [ 0, %cond.false1158 ], !dbg !3965
  %593 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3965
  %incdec.ptr1161 = getelementptr inbounds i8, i8* %593, i32 1, !dbg !3965
  store i8* %incdec.ptr1161, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3965
  store i8 59, i8* %593, align 1, !dbg !3965
  br label %if.end1162, !dbg !3966

if.end1162:                                       ; preds = %cond.end1159, %land.lhs.true1138, %land.lhs.true1131, %cond.end1126
  br label %sw.epilog1462, !dbg !3967

sw.bb1163:                                        ; preds = %if.end326
  %594 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3968
  %type1164 = bitcast %union.tree_node* %594 to %struct.tree_type*, !dbg !3968
  %name1165 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1164, i32 0, i32 12, !dbg !3968
  %595 = load %union.tree_node*, %union.tree_node** %name1165, align 8, !dbg !3968
  %cmp1166 = icmp ne %union.tree_node* %595, null, !dbg !3970
  br i1 %cmp1166, label %land.lhs.true1168, label %lor.lhs.false1189, !dbg !3971

land.lhs.true1168:                                ; preds = %sw.bb1163
  %596 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3972
  %type1169 = bitcast %union.tree_node* %596 to %struct.tree_type*, !dbg !3972
  %name1170 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1169, i32 0, i32 12, !dbg !3972
  %597 = load %union.tree_node*, %union.tree_node** %name1170, align 8, !dbg !3972
  %base1171 = bitcast %union.tree_node* %597 to %struct.tree_base*, !dbg !3972
  %598 = bitcast %struct.tree_base* %base1171 to i64*, !dbg !3972
  %bf.load1172 = load i64, i64* %598, align 8, !dbg !3972
  %bf.clear1173 = and i64 %bf.load1172, 65535, !dbg !3972
  %bf.cast1174 = trunc i64 %bf.clear1173 to i32, !dbg !3972
  %cmp1175 = icmp eq i32 %bf.cast1174, 35, !dbg !3973
  br i1 %cmp1175, label %land.lhs.true1177, label %land.lhs.true1187, !dbg !3974

land.lhs.true1177:                                ; preds = %land.lhs.true1168
  %599 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3975
  %type1178 = bitcast %union.tree_node* %599 to %struct.tree_type*, !dbg !3975
  %name1179 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1178, i32 0, i32 12, !dbg !3975
  %600 = load %union.tree_node*, %union.tree_node** %name1179, align 8, !dbg !3975
  %decl_common1180 = bitcast %union.tree_node* %600 to %struct.tree_decl_common*, !dbg !3975
  %ignored_flag1181 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1180, i32 0, i32 2, !dbg !3975
  %601 = bitcast i40* %ignored_flag1181 to i64*, !dbg !3975
  %bf.load1182 = load i64, i64* %601, align 8, !dbg !3975
  %bf.lshr1183 = lshr i64 %bf.load1182, 10, !dbg !3975
  %bf.clear1184 = and i64 %bf.lshr1183, 1, !dbg !3975
  %bf.cast1185 = trunc i64 %bf.clear1184 to i32, !dbg !3975
  %tobool1186 = icmp ne i32 %bf.cast1185, 0, !dbg !3975
  br i1 %tobool1186, label %lor.lhs.false1189, label %land.lhs.true1187, !dbg !3976

land.lhs.true1187:                                ; preds = %land.lhs.true1177, %land.lhs.true1168
  %602 = load i32, i32* %full.addr, align 4, !dbg !3977
  %tobool1188 = icmp ne i32 %602, 0, !dbg !3977
  br i1 %tobool1188, label %lor.lhs.false1189, label %if.then1194, !dbg !3978

lor.lhs.false1189:                                ; preds = %land.lhs.true1187, %land.lhs.true1177, %sw.bb1163
  %603 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3979
  %type1190 = bitcast %union.tree_node* %603 to %struct.tree_type*, !dbg !3979
  %size1191 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1190, i32 0, i32 2, !dbg !3979
  %604 = load %union.tree_node*, %union.tree_node** %size1191, align 8, !dbg !3979
  %cmp1192 = icmp ne %union.tree_node* %604, null, !dbg !3979
  br i1 %cmp1192, label %if.end1218, label %if.then1194, !dbg !3980

if.then1194:                                      ; preds = %lor.lhs.false1189, %land.lhs.true1187
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3981
  %605 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3981
  %606 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3981
  %add.ptr1195 = getelementptr inbounds i8, i8* %605, i64 %606, !dbg !3981
  %607 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3981
  %cmp1196 = icmp ugt i8* %add.ptr1195, %607, !dbg !3981
  br i1 %cmp1196, label %cond.true1198, label %cond.false1200, !dbg !3981

cond.true1198:                                    ; preds = %if.then1194
  %608 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3981
  %conv1199 = trunc i64 %608 to i32, !dbg !3981
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv1199), !dbg !3981
  br label %cond.end1201, !dbg !3981

cond.false1200:                                   ; preds = %if.then1194
  br label %cond.end1201, !dbg !3981

cond.end1201:                                     ; preds = %cond.false1200, %cond.true1198
  %cond1202 = phi i32 [ 0, %cond.true1198 ], [ 0, %cond.false1200 ], !dbg !3981
  %609 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3981
  %610 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3981
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %609, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i64 0, i64 0), i64 %610, i1 false), !dbg !3981
  %611 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3981
  %612 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3981
  %add.ptr1203 = getelementptr inbounds i8, i8* %612, i64 %611, !dbg !3981
  store i8* %add.ptr1203, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3981
  %613 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3983
  call void @dbxout_type_name(%union.tree_node* %613), !dbg !3984
  %614 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !3985
  %615 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3986
  %type1204 = bitcast %union.tree_node* %615 to %struct.tree_type*, !dbg !3986
  %symtab1205 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1204, i32 0, i32 11, !dbg !3986
  %address1206 = bitcast %union.tree_type_symtab* %symtab1205 to i32*, !dbg !3986
  %616 = load i32, i32* %address1206, align 8, !dbg !3986
  %idxprom1207 = sext i32 %616 to i64, !dbg !3985
  %arrayidx1208 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %614, i64 %idxprom1207, !dbg !3985
  %status1209 = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %arrayidx1208, i32 0, i32 0, !dbg !3987
  store i32 1, i32* %status1209, align 4, !dbg !3988
  %617 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3989
  %add.ptr1210 = getelementptr inbounds i8, i8* %617, i64 1, !dbg !3989
  %618 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3989
  %cmp1211 = icmp ugt i8* %add.ptr1210, %618, !dbg !3989
  br i1 %cmp1211, label %cond.true1213, label %cond.false1214, !dbg !3989

cond.true1213:                                    ; preds = %cond.end1201
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !3989
  br label %cond.end1215, !dbg !3989

cond.false1214:                                   ; preds = %cond.end1201
  br label %cond.end1215, !dbg !3989

cond.end1215:                                     ; preds = %cond.false1214, %cond.true1213
  %cond1216 = phi i32 [ 0, %cond.true1213 ], [ 0, %cond.false1214 ], !dbg !3989
  %619 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3989
  %incdec.ptr1217 = getelementptr inbounds i8, i8* %619, i32 1, !dbg !3989
  store i8* %incdec.ptr1217, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3989
  store i8 58, i8* %619, align 1, !dbg !3989
  br label %sw.epilog1462, !dbg !3990

if.end1218:                                       ; preds = %lor.lhs.false1189
  %620 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !3991
  %conv1219 = zext i8 %620 to i32, !dbg !3991
  %tobool1220 = icmp ne i32 %conv1219, 0, !dbg !3991
  br i1 %tobool1220, label %land.lhs.true1221, label %if.end1255, !dbg !3993

land.lhs.true1221:                                ; preds = %if.end1218
  %621 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3994
  %type1222 = bitcast %union.tree_node* %621 to %struct.tree_type*, !dbg !3994
  %precision1223 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1222, i32 0, i32 6, !dbg !3994
  %bf.load1224 = load i32, i32* %precision1223, align 4, !dbg !3994
  %bf.clear1225 = and i32 %bf.load1224, 1023, !dbg !3994
  %622 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !3995
  %type1226 = bitcast %union.tree_node* %622 to %struct.tree_type*, !dbg !3995
  %precision1227 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1226, i32 0, i32 6, !dbg !3995
  %bf.load1228 = load i32, i32* %precision1227, align 4, !dbg !3995
  %bf.clear1229 = and i32 %bf.load1228, 1023, !dbg !3995
  %cmp1230 = icmp ne i32 %bf.clear1225, %bf.clear1229, !dbg !3996
  br i1 %cmp1230, label %if.then1232, label %if.end1255, !dbg !3997

if.then1232:                                      ; preds = %land.lhs.true1221
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3998
  %623 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3998
  %624 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3998
  %add.ptr1233 = getelementptr inbounds i8, i8* %623, i64 %624, !dbg !3998
  %625 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !3998
  %cmp1234 = icmp ugt i8* %add.ptr1233, %625, !dbg !3998
  br i1 %cmp1234, label %cond.true1236, label %cond.false1238, !dbg !3998

cond.true1236:                                    ; preds = %if.then1232
  %626 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3998
  %conv1237 = trunc i64 %626 to i32, !dbg !3998
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv1237), !dbg !3998
  br label %cond.end1239, !dbg !3998

cond.false1238:                                   ; preds = %if.then1232
  br label %cond.end1239, !dbg !3998

cond.end1239:                                     ; preds = %cond.false1238, %cond.true1236
  %cond1240 = phi i32 [ 0, %cond.true1236 ], [ 0, %cond.false1238 ], !dbg !3998
  %627 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3998
  %628 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3998
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %627, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i64 %628, i1 false), !dbg !3998
  %629 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !3998
  %630 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3998
  %add.ptr1241 = getelementptr inbounds i8, i8* %630, i64 %629, !dbg !3998
  store i8* %add.ptr1241, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !3998
  %631 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4000
  %type1242 = bitcast %union.tree_node* %631 to %struct.tree_type*, !dbg !4000
  %precision1243 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1242, i32 0, i32 6, !dbg !4000
  %bf.load1244 = load i32, i32* %precision1243, align 4, !dbg !4000
  %bf.clear1245 = and i32 %bf.load1244, 1023, !dbg !4000
  %conv1246 = zext i32 %bf.clear1245 to i64, !dbg !4000
  call void @stabstr_D(i64 %conv1246), !dbg !4001
  %632 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4002
  %add.ptr1247 = getelementptr inbounds i8, i8* %632, i64 1, !dbg !4002
  %633 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4002
  %cmp1248 = icmp ugt i8* %add.ptr1247, %633, !dbg !4002
  br i1 %cmp1248, label %cond.true1250, label %cond.false1251, !dbg !4002

cond.true1250:                                    ; preds = %cond.end1239
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4002
  br label %cond.end1252, !dbg !4002

cond.false1251:                                   ; preds = %cond.end1239
  br label %cond.end1252, !dbg !4002

cond.end1252:                                     ; preds = %cond.false1251, %cond.true1250
  %cond1253 = phi i32 [ 0, %cond.true1250 ], [ 0, %cond.false1251 ], !dbg !4002
  %634 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4002
  %incdec.ptr1254 = getelementptr inbounds i8, i8* %634, i32 1, !dbg !4002
  store i8* %incdec.ptr1254, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4002
  store i8 59, i8* %634, align 1, !dbg !4002
  br label %if.end1255, !dbg !4003

if.end1255:                                       ; preds = %cond.end1252, %land.lhs.true1221, %if.end1218
  %635 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4004
  %add.ptr1256 = getelementptr inbounds i8, i8* %635, i64 1, !dbg !4004
  %636 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4004
  %cmp1257 = icmp ugt i8* %add.ptr1256, %636, !dbg !4004
  br i1 %cmp1257, label %cond.true1259, label %cond.false1260, !dbg !4004

cond.true1259:                                    ; preds = %if.end1255
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4004
  br label %cond.end1261, !dbg !4004

cond.false1260:                                   ; preds = %if.end1255
  br label %cond.end1261, !dbg !4004

cond.end1261:                                     ; preds = %cond.false1260, %cond.true1259
  %cond1262 = phi i32 [ 0, %cond.true1259 ], [ 0, %cond.false1260 ], !dbg !4004
  %637 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4004
  %incdec.ptr1263 = getelementptr inbounds i8, i8* %637, i32 1, !dbg !4004
  store i8* %incdec.ptr1263, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4004
  store i8 101, i8* %637, align 1, !dbg !4004
  %638 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4005
  %type1264 = bitcast %union.tree_node* %638 to %struct.tree_type*, !dbg !4005
  %values1265 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1264, i32 0, i32 1, !dbg !4005
  %639 = load %union.tree_node*, %union.tree_node** %values1265, align 8, !dbg !4005
  store %union.tree_node* %639, %union.tree_node** %tem, align 8, !dbg !4007
  br label %for.cond1266, !dbg !4008

for.cond1266:                                     ; preds = %for.inc1343, %cond.end1261
  %640 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !4009
  %tobool1267 = icmp ne %union.tree_node* %640, null, !dbg !4011
  br i1 %tobool1267, label %for.body1268, label %for.end1346, !dbg !4011

for.body1268:                                     ; preds = %for.cond1266
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !4012, metadata !DIExpression()), !dbg !4014
  %641 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !4015
  %list = bitcast %union.tree_node* %641 to %struct.tree_list*, !dbg !4015
  %value1269 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4015
  %642 = load %union.tree_node*, %union.tree_node** %value1269, align 8, !dbg !4015
  store %union.tree_node* %642, %union.tree_node** %value, align 8, !dbg !4014
  %643 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !4016
  %list1270 = bitcast %union.tree_node* %643 to %struct.tree_list*, !dbg !4016
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1270, i32 0, i32 1, !dbg !4016
  %644 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !4016
  %identifier = bitcast %union.tree_node* %644 to %struct.tree_identifier*, !dbg !4016
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4016
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !4016
  %645 = load i32, i32* %len, align 8, !dbg !4016
  %conv1271 = zext i32 %645 to i64, !dbg !4016
  store i64 %conv1271, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4016
  %646 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4016
  %647 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4016
  %add.ptr1272 = getelementptr inbounds i8, i8* %646, i64 %647, !dbg !4016
  %648 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4016
  %cmp1273 = icmp ugt i8* %add.ptr1272, %648, !dbg !4016
  br i1 %cmp1273, label %cond.true1275, label %cond.false1277, !dbg !4016

cond.true1275:                                    ; preds = %for.body1268
  %649 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4016
  %conv1276 = trunc i64 %649 to i32, !dbg !4016
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv1276), !dbg !4016
  br label %cond.end1278, !dbg !4016

cond.false1277:                                   ; preds = %for.body1268
  br label %cond.end1278, !dbg !4016

cond.end1278:                                     ; preds = %cond.false1277, %cond.true1275
  %cond1279 = phi i32 [ 0, %cond.true1275 ], [ 0, %cond.false1277 ], !dbg !4016
  %650 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4016
  %651 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !4016
  %list1280 = bitcast %union.tree_node* %651 to %struct.tree_list*, !dbg !4016
  %purpose1281 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1280, i32 0, i32 1, !dbg !4016
  %652 = load %union.tree_node*, %union.tree_node** %purpose1281, align 8, !dbg !4016
  %identifier1282 = bitcast %union.tree_node* %652 to %struct.tree_identifier*, !dbg !4016
  %id1283 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier1282, i32 0, i32 1, !dbg !4016
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id1283, i32 0, i32 0, !dbg !4016
  %653 = load i8*, i8** %str, align 8, !dbg !4016
  %654 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4016
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %650, i8* align 1 %653, i64 %654, i1 false), !dbg !4016
  %655 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4016
  %656 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4016
  %add.ptr1284 = getelementptr inbounds i8, i8* %656, i64 %655, !dbg !4016
  store i8* %add.ptr1284, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4016
  %657 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4017
  %add.ptr1285 = getelementptr inbounds i8, i8* %657, i64 1, !dbg !4017
  %658 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4017
  %cmp1286 = icmp ugt i8* %add.ptr1285, %658, !dbg !4017
  br i1 %cmp1286, label %cond.true1288, label %cond.false1289, !dbg !4017

cond.true1288:                                    ; preds = %cond.end1278
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4017
  br label %cond.end1290, !dbg !4017

cond.false1289:                                   ; preds = %cond.end1278
  br label %cond.end1290, !dbg !4017

cond.end1290:                                     ; preds = %cond.false1289, %cond.true1288
  %cond1291 = phi i32 [ 0, %cond.true1288 ], [ 0, %cond.false1289 ], !dbg !4017
  %659 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4017
  %incdec.ptr1292 = getelementptr inbounds i8, i8* %659, i32 1, !dbg !4017
  store i8* %incdec.ptr1292, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4017
  store i8 58, i8* %659, align 1, !dbg !4017
  %660 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4018
  %base1293 = bitcast %union.tree_node* %660 to %struct.tree_base*, !dbg !4018
  %661 = bitcast %struct.tree_base* %base1293 to i64*, !dbg !4018
  %bf.load1294 = load i64, i64* %661, align 8, !dbg !4018
  %bf.clear1295 = and i64 %bf.load1294, 65535, !dbg !4018
  %bf.cast1296 = trunc i64 %bf.clear1295 to i32, !dbg !4018
  %cmp1297 = icmp eq i32 %bf.cast1296, 33, !dbg !4020
  br i1 %cmp1297, label %if.then1299, label %if.end1301, !dbg !4021

if.then1299:                                      ; preds = %cond.end1290
  %662 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4022
  %decl_common1300 = bitcast %union.tree_node* %662 to %struct.tree_decl_common*, !dbg !4022
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1300, i32 0, i32 5, !dbg !4022
  %663 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4022
  store %union.tree_node* %663, %union.tree_node** %value, align 8, !dbg !4023
  br label %if.end1301, !dbg !4024

if.end1301:                                       ; preds = %if.then1299, %cond.end1290
  %664 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4025
  %int_cst = bitcast %union.tree_node* %664 to %struct.tree_int_cst*, !dbg !4025
  %int_cst1302 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4025
  %high1303 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1302, i32 0, i32 1, !dbg !4025
  %665 = load i64, i64* %high1303, align 8, !dbg !4025
  %cmp1304 = icmp eq i64 %665, 0, !dbg !4027
  br i1 %cmp1304, label %if.then1306, label %if.else1310, !dbg !4028

if.then1306:                                      ; preds = %if.end1301
  %666 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4029
  %int_cst1307 = bitcast %union.tree_node* %666 to %struct.tree_int_cst*, !dbg !4029
  %int_cst1308 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1307, i32 0, i32 1, !dbg !4029
  %low1309 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1308, i32 0, i32 0, !dbg !4029
  %667 = load i64, i64* %low1309, align 8, !dbg !4029
  call void @stabstr_D(i64 %667), !dbg !4030
  br label %if.end1328, !dbg !4030

if.else1310:                                      ; preds = %if.end1301
  %668 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4031
  %int_cst1311 = bitcast %union.tree_node* %668 to %struct.tree_int_cst*, !dbg !4031
  %int_cst1312 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1311, i32 0, i32 1, !dbg !4031
  %high1313 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1312, i32 0, i32 1, !dbg !4031
  %669 = load i64, i64* %high1313, align 8, !dbg !4031
  %cmp1314 = icmp eq i64 %669, -1, !dbg !4033
  br i1 %cmp1314, label %land.lhs.true1316, label %if.else1326, !dbg !4034

land.lhs.true1316:                                ; preds = %if.else1310
  %670 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4035
  %int_cst1317 = bitcast %union.tree_node* %670 to %struct.tree_int_cst*, !dbg !4035
  %int_cst1318 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1317, i32 0, i32 1, !dbg !4035
  %low1319 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1318, i32 0, i32 0, !dbg !4035
  %671 = load i64, i64* %low1319, align 8, !dbg !4035
  %cmp1320 = icmp slt i64 %671, 0, !dbg !4036
  br i1 %cmp1320, label %if.then1322, label %if.else1326, !dbg !4037

if.then1322:                                      ; preds = %land.lhs.true1316
  %672 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4038
  %int_cst1323 = bitcast %union.tree_node* %672 to %struct.tree_int_cst*, !dbg !4038
  %int_cst1324 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1323, i32 0, i32 1, !dbg !4038
  %low1325 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1324, i32 0, i32 0, !dbg !4038
  %673 = load i64, i64* %low1325, align 8, !dbg !4038
  call void @stabstr_D(i64 %673), !dbg !4039
  br label %if.end1327, !dbg !4039

if.else1326:                                      ; preds = %land.lhs.true1316, %if.else1310
  %674 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4040
  call void @stabstr_O(%union.tree_node* %674), !dbg !4041
  br label %if.end1327

if.end1327:                                       ; preds = %if.else1326, %if.then1322
  br label %if.end1328

if.end1328:                                       ; preds = %if.end1327, %if.then1306
  %675 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4042
  %add.ptr1329 = getelementptr inbounds i8, i8* %675, i64 1, !dbg !4042
  %676 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4042
  %cmp1330 = icmp ugt i8* %add.ptr1329, %676, !dbg !4042
  br i1 %cmp1330, label %cond.true1332, label %cond.false1333, !dbg !4042

cond.true1332:                                    ; preds = %if.end1328
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4042
  br label %cond.end1334, !dbg !4042

cond.false1333:                                   ; preds = %if.end1328
  br label %cond.end1334, !dbg !4042

cond.end1334:                                     ; preds = %cond.false1333, %cond.true1332
  %cond1335 = phi i32 [ 0, %cond.true1332 ], [ 0, %cond.false1333 ], !dbg !4042
  %677 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4042
  %incdec.ptr1336 = getelementptr inbounds i8, i8* %677, i32 1, !dbg !4042
  store i8* %incdec.ptr1336, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4042
  store i8 44, i8* %677, align 1, !dbg !4042
  %678 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !4043
  %common1337 = bitcast %union.tree_node* %678 to %struct.tree_common*, !dbg !4043
  %chain1338 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1337, i32 0, i32 1, !dbg !4043
  %679 = load %union.tree_node*, %union.tree_node** %chain1338, align 8, !dbg !4043
  %cmp1339 = icmp ne %union.tree_node* %679, null, !dbg !4045
  br i1 %cmp1339, label %if.then1341, label %if.end1342, !dbg !4046

if.then1341:                                      ; preds = %cond.end1334
  call void @stabstr_continue(), !dbg !4047
  br label %if.end1342, !dbg !4047

if.end1342:                                       ; preds = %if.then1341, %cond.end1334
  br label %for.inc1343, !dbg !4048

for.inc1343:                                      ; preds = %if.end1342
  %680 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !4049
  %common1344 = bitcast %union.tree_node* %680 to %struct.tree_common*, !dbg !4049
  %chain1345 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1344, i32 0, i32 1, !dbg !4049
  %681 = load %union.tree_node*, %union.tree_node** %chain1345, align 8, !dbg !4049
  store %union.tree_node* %681, %union.tree_node** %tem, align 8, !dbg !4050
  br label %for.cond1266, !dbg !4051, !llvm.loop !4052

for.end1346:                                      ; preds = %for.cond1266
  %682 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4054
  %add.ptr1347 = getelementptr inbounds i8, i8* %682, i64 1, !dbg !4054
  %683 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4054
  %cmp1348 = icmp ugt i8* %add.ptr1347, %683, !dbg !4054
  br i1 %cmp1348, label %cond.true1350, label %cond.false1351, !dbg !4054

cond.true1350:                                    ; preds = %for.end1346
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4054
  br label %cond.end1352, !dbg !4054

cond.false1351:                                   ; preds = %for.end1346
  br label %cond.end1352, !dbg !4054

cond.end1352:                                     ; preds = %cond.false1351, %cond.true1350
  %cond1353 = phi i32 [ 0, %cond.true1350 ], [ 0, %cond.false1351 ], !dbg !4054
  %684 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4054
  %incdec.ptr1354 = getelementptr inbounds i8, i8* %684, i32 1, !dbg !4054
  store i8* %incdec.ptr1354, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4054
  store i8 59, i8* %684, align 1, !dbg !4054
  br label %sw.epilog1462, !dbg !4055

sw.bb1355:                                        ; preds = %if.end326
  %685 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4056
  %add.ptr1356 = getelementptr inbounds i8, i8* %685, i64 1, !dbg !4056
  %686 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4056
  %cmp1357 = icmp ugt i8* %add.ptr1356, %686, !dbg !4056
  br i1 %cmp1357, label %cond.true1359, label %cond.false1360, !dbg !4056

cond.true1359:                                    ; preds = %sw.bb1355
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4056
  br label %cond.end1361, !dbg !4056

cond.false1360:                                   ; preds = %sw.bb1355
  br label %cond.end1361, !dbg !4056

cond.end1361:                                     ; preds = %cond.false1360, %cond.true1359
  %cond1362 = phi i32 [ 0, %cond.true1359 ], [ 0, %cond.false1360 ], !dbg !4056
  %687 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4056
  %incdec.ptr1363 = getelementptr inbounds i8, i8* %687, i32 1, !dbg !4056
  store i8* %incdec.ptr1363, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4056
  store i8 42, i8* %687, align 1, !dbg !4056
  %688 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4057
  %common1364 = bitcast %union.tree_node* %688 to %struct.tree_common*, !dbg !4057
  %type1365 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1364, i32 0, i32 2, !dbg !4057
  %689 = load %union.tree_node*, %union.tree_node** %type1365, align 8, !dbg !4057
  call void @dbxout_type(%union.tree_node* %689, i32 0), !dbg !4058
  br label %sw.epilog1462, !dbg !4059

sw.bb1366:                                        ; preds = %if.end326
  %690 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !4060
  %tobool1367 = icmp ne i8 %690, 0, !dbg !4060
  br i1 %tobool1367, label %if.then1368, label %if.else1399, !dbg !4062

if.then1368:                                      ; preds = %sw.bb1366
  %691 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4063
  %add.ptr1369 = getelementptr inbounds i8, i8* %691, i64 1, !dbg !4063
  %692 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4063
  %cmp1370 = icmp ugt i8* %add.ptr1369, %692, !dbg !4063
  br i1 %cmp1370, label %cond.true1372, label %cond.false1373, !dbg !4063

cond.true1372:                                    ; preds = %if.then1368
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4063
  br label %cond.end1374, !dbg !4063

cond.false1373:                                   ; preds = %if.then1368
  br label %cond.end1374, !dbg !4063

cond.end1374:                                     ; preds = %cond.false1373, %cond.true1372
  %cond1375 = phi i32 [ 0, %cond.true1372 ], [ 0, %cond.false1373 ], !dbg !4063
  %693 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4063
  %incdec.ptr1376 = getelementptr inbounds i8, i8* %693, i32 1, !dbg !4063
  store i8* %incdec.ptr1376, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4063
  store i8 35, i8* %693, align 1, !dbg !4063
  %694 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4065
  %type1377 = bitcast %union.tree_node* %694 to %struct.tree_type*, !dbg !4065
  %maxval1378 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1377, i32 0, i32 14, !dbg !4065
  %695 = load %union.tree_node*, %union.tree_node** %maxval1378, align 8, !dbg !4065
  call void @dbxout_type(%union.tree_node* %695, i32 0), !dbg !4066
  %696 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4067
  %add.ptr1379 = getelementptr inbounds i8, i8* %696, i64 1, !dbg !4067
  %697 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4067
  %cmp1380 = icmp ugt i8* %add.ptr1379, %697, !dbg !4067
  br i1 %cmp1380, label %cond.true1382, label %cond.false1383, !dbg !4067

cond.true1382:                                    ; preds = %cond.end1374
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4067
  br label %cond.end1384, !dbg !4067

cond.false1383:                                   ; preds = %cond.end1374
  br label %cond.end1384, !dbg !4067

cond.end1384:                                     ; preds = %cond.false1383, %cond.true1382
  %cond1385 = phi i32 [ 0, %cond.true1382 ], [ 0, %cond.false1383 ], !dbg !4067
  %698 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4067
  %incdec.ptr1386 = getelementptr inbounds i8, i8* %698, i32 1, !dbg !4067
  store i8* %incdec.ptr1386, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4067
  store i8 44, i8* %698, align 1, !dbg !4067
  %699 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4068
  %common1387 = bitcast %union.tree_node* %699 to %struct.tree_common*, !dbg !4068
  %type1388 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1387, i32 0, i32 2, !dbg !4068
  %700 = load %union.tree_node*, %union.tree_node** %type1388, align 8, !dbg !4068
  call void @dbxout_type(%union.tree_node* %700, i32 0), !dbg !4069
  %701 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4070
  %type1389 = bitcast %union.tree_node* %701 to %struct.tree_type*, !dbg !4070
  %values1390 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1389, i32 0, i32 1, !dbg !4070
  %702 = load %union.tree_node*, %union.tree_node** %values1390, align 8, !dbg !4070
  call void @dbxout_args(%union.tree_node* %702), !dbg !4071
  %703 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4072
  %add.ptr1391 = getelementptr inbounds i8, i8* %703, i64 1, !dbg !4072
  %704 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4072
  %cmp1392 = icmp ugt i8* %add.ptr1391, %704, !dbg !4072
  br i1 %cmp1392, label %cond.true1394, label %cond.false1395, !dbg !4072

cond.true1394:                                    ; preds = %cond.end1384
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4072
  br label %cond.end1396, !dbg !4072

cond.false1395:                                   ; preds = %cond.end1384
  br label %cond.end1396, !dbg !4072

cond.end1396:                                     ; preds = %cond.false1395, %cond.true1394
  %cond1397 = phi i32 [ 0, %cond.true1394 ], [ 0, %cond.false1395 ], !dbg !4072
  %705 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4072
  %incdec.ptr1398 = getelementptr inbounds i8, i8* %705, i32 1, !dbg !4072
  store i8* %incdec.ptr1398, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4072
  store i8 59, i8* %705, align 1, !dbg !4072
  br label %if.end1402, !dbg !4073

if.else1399:                                      ; preds = %sw.bb1366
  %706 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4074
  %common1400 = bitcast %union.tree_node* %706 to %struct.tree_common*, !dbg !4074
  %type1401 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1400, i32 0, i32 2, !dbg !4074
  %707 = load %union.tree_node*, %union.tree_node** %type1401, align 8, !dbg !4074
  call void @dbxout_type(%union.tree_node* %707, i32 0), !dbg !4075
  br label %if.end1402

if.end1402:                                       ; preds = %if.else1399, %cond.end1396
  br label %sw.epilog1462, !dbg !4076

sw.bb1403:                                        ; preds = %if.end326
  %708 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !4077
  %tobool1404 = icmp ne i8 %708, 0, !dbg !4077
  br i1 %tobool1404, label %if.then1405, label %if.else1426, !dbg !4079

if.then1405:                                      ; preds = %sw.bb1403
  %709 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4080
  %add.ptr1406 = getelementptr inbounds i8, i8* %709, i64 1, !dbg !4080
  %710 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4080
  %cmp1407 = icmp ugt i8* %add.ptr1406, %710, !dbg !4080
  br i1 %cmp1407, label %cond.true1409, label %cond.false1410, !dbg !4080

cond.true1409:                                    ; preds = %if.then1405
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4080
  br label %cond.end1411, !dbg !4080

cond.false1410:                                   ; preds = %if.then1405
  br label %cond.end1411, !dbg !4080

cond.end1411:                                     ; preds = %cond.false1410, %cond.true1409
  %cond1412 = phi i32 [ 0, %cond.true1409 ], [ 0, %cond.false1410 ], !dbg !4080
  %711 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4080
  %incdec.ptr1413 = getelementptr inbounds i8, i8* %711, i32 1, !dbg !4080
  store i8* %incdec.ptr1413, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4080
  store i8 64, i8* %711, align 1, !dbg !4080
  %712 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4082
  %type1414 = bitcast %union.tree_node* %712 to %struct.tree_type*, !dbg !4082
  %maxval1415 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1414, i32 0, i32 14, !dbg !4082
  %713 = load %union.tree_node*, %union.tree_node** %maxval1415, align 8, !dbg !4082
  call void @dbxout_type(%union.tree_node* %713, i32 0), !dbg !4083
  %714 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4084
  %add.ptr1416 = getelementptr inbounds i8, i8* %714, i64 1, !dbg !4084
  %715 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4084
  %cmp1417 = icmp ugt i8* %add.ptr1416, %715, !dbg !4084
  br i1 %cmp1417, label %cond.true1419, label %cond.false1420, !dbg !4084

cond.true1419:                                    ; preds = %cond.end1411
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4084
  br label %cond.end1421, !dbg !4084

cond.false1420:                                   ; preds = %cond.end1411
  br label %cond.end1421, !dbg !4084

cond.end1421:                                     ; preds = %cond.false1420, %cond.true1419
  %cond1422 = phi i32 [ 0, %cond.true1419 ], [ 0, %cond.false1420 ], !dbg !4084
  %716 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4084
  %incdec.ptr1423 = getelementptr inbounds i8, i8* %716, i32 1, !dbg !4084
  store i8* %incdec.ptr1423, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4084
  store i8 44, i8* %716, align 1, !dbg !4084
  %717 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4085
  %common1424 = bitcast %union.tree_node* %717 to %struct.tree_common*, !dbg !4085
  %type1425 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1424, i32 0, i32 2, !dbg !4085
  %718 = load %union.tree_node*, %union.tree_node** %type1425, align 8, !dbg !4085
  call void @dbxout_type(%union.tree_node* %718, i32 0), !dbg !4086
  br label %if.end1427, !dbg !4087

if.else1426:                                      ; preds = %sw.bb1403
  %719 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !4088
  call void @dbxout_type(%union.tree_node* %719, i32 0), !dbg !4089
  br label %if.end1427

if.end1427:                                       ; preds = %if.else1426, %cond.end1421
  br label %sw.epilog1462, !dbg !4090

sw.bb1428:                                        ; preds = %if.end326
  %720 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !4091
  %tobool1429 = icmp ne i8 %720, 0, !dbg !4091
  br i1 %tobool1429, label %if.then1430, label %if.else1439, !dbg !4093

if.then1430:                                      ; preds = %sw.bb1428
  %721 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4094
  %add.ptr1431 = getelementptr inbounds i8, i8* %721, i64 1, !dbg !4094
  %722 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4094
  %cmp1432 = icmp ugt i8* %add.ptr1431, %722, !dbg !4094
  br i1 %cmp1432, label %cond.true1434, label %cond.false1435, !dbg !4094

cond.true1434:                                    ; preds = %if.then1430
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4094
  br label %cond.end1436, !dbg !4094

cond.false1435:                                   ; preds = %if.then1430
  br label %cond.end1436, !dbg !4094

cond.end1436:                                     ; preds = %cond.false1435, %cond.true1434
  %cond1437 = phi i32 [ 0, %cond.true1434 ], [ 0, %cond.false1435 ], !dbg !4094
  %723 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4094
  %incdec.ptr1438 = getelementptr inbounds i8, i8* %723, i32 1, !dbg !4094
  store i8* %incdec.ptr1438, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4094
  store i8 38, i8* %723, align 1, !dbg !4094
  br label %if.end1448, !dbg !4096

if.else1439:                                      ; preds = %sw.bb1428
  %724 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4097
  %add.ptr1440 = getelementptr inbounds i8, i8* %724, i64 1, !dbg !4097
  %725 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4097
  %cmp1441 = icmp ugt i8* %add.ptr1440, %725, !dbg !4097
  br i1 %cmp1441, label %cond.true1443, label %cond.false1444, !dbg !4097

cond.true1443:                                    ; preds = %if.else1439
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4097
  br label %cond.end1445, !dbg !4097

cond.false1444:                                   ; preds = %if.else1439
  br label %cond.end1445, !dbg !4097

cond.end1445:                                     ; preds = %cond.false1444, %cond.true1443
  %cond1446 = phi i32 [ 0, %cond.true1443 ], [ 0, %cond.false1444 ], !dbg !4097
  %726 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4097
  %incdec.ptr1447 = getelementptr inbounds i8, i8* %726, i32 1, !dbg !4097
  store i8* %incdec.ptr1447, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4097
  store i8 42, i8* %726, align 1, !dbg !4097
  br label %if.end1448

if.end1448:                                       ; preds = %cond.end1445, %cond.end1436
  %727 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4098
  %common1449 = bitcast %union.tree_node* %727 to %struct.tree_common*, !dbg !4098
  %type1450 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1449, i32 0, i32 2, !dbg !4098
  %728 = load %union.tree_node*, %union.tree_node** %type1450, align 8, !dbg !4098
  call void @dbxout_type(%union.tree_node* %728, i32 0), !dbg !4099
  br label %sw.epilog1462, !dbg !4100

sw.bb1451:                                        ; preds = %if.end326
  %729 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4101
  %add.ptr1452 = getelementptr inbounds i8, i8* %729, i64 1, !dbg !4101
  %730 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4101
  %cmp1453 = icmp ugt i8* %add.ptr1452, %730, !dbg !4101
  br i1 %cmp1453, label %cond.true1455, label %cond.false1456, !dbg !4101

cond.true1455:                                    ; preds = %sw.bb1451
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4101
  br label %cond.end1457, !dbg !4101

cond.false1456:                                   ; preds = %sw.bb1451
  br label %cond.end1457, !dbg !4101

cond.end1457:                                     ; preds = %cond.false1456, %cond.true1455
  %cond1458 = phi i32 [ 0, %cond.true1455 ], [ 0, %cond.false1456 ], !dbg !4101
  %731 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4101
  %incdec.ptr1459 = getelementptr inbounds i8, i8* %731, i32 1, !dbg !4101
  store i8* %incdec.ptr1459, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4101
  store i8 102, i8* %731, align 1, !dbg !4101
  %732 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4102
  %common1460 = bitcast %union.tree_node* %732 to %struct.tree_common*, !dbg !4102
  %type1461 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1460, i32 0, i32 2, !dbg !4102
  %733 = load %union.tree_node*, %union.tree_node** %type1461, align 8, !dbg !4102
  call void @dbxout_type(%union.tree_node* %733, i32 0), !dbg !4103
  br label %sw.epilog1462, !dbg !4104

sw.default:                                       ; preds = %if.end326
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 2280, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !4105
  br label %sw.epilog1462, !dbg !4106

sw.epilog1462:                                    ; preds = %if.then191, %sw.bb193, %cond.end221, %cond.end251, %if.end319, %cond.end1215, %sw.default, %cond.end1457, %if.end1448, %if.end1427, %if.end1402, %cond.end1361, %cond.end1352, %if.end1162, %cond.end887, %if.end784, %cond.end707, %if.end677, %if.end557, %cond.end521, %if.end496, %sw.bb331
  ret void, !dbg !4107
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_finish_complex_stabs(%union.tree_node* %sym, i32 %code, %struct.rtx_def* %addr, i8* %label, i32 %number) #0 !dbg !4108 {
entry:
  %sym.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %label.addr = alloca i8*, align 8
  %number.addr = alloca i32, align 4
  %line = alloca i32, align 4
  %str = alloca i8*, align 8
  %len = alloca i64, align 8
  %tmp = alloca %struct.expanded_location, align 8
  %line_ = alloca i32, align 4
  store %union.tree_node* %sym, %union.tree_node** %sym.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym.addr, metadata !4112, metadata !DIExpression()), !dbg !4113
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4114, metadata !DIExpression()), !dbg !4115
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !4116, metadata !DIExpression()), !dbg !4117
  store i8* %label, i8** %label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %label.addr, metadata !4118, metadata !DIExpression()), !dbg !4119
  store i32 %number, i32* %number.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %number.addr, metadata !4120, metadata !DIExpression()), !dbg !4121
  call void @llvm.dbg.declare(metadata i32* %line, metadata !4122, metadata !DIExpression()), !dbg !4123
  call void @llvm.dbg.declare(metadata i8** %str, metadata !4124, metadata !DIExpression()), !dbg !4125
  call void @llvm.dbg.declare(metadata i64* %len, metadata !4126, metadata !DIExpression()), !dbg !4127
  %0 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !4128
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4128
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4128

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !4129
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !4129
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !4129
  %2 = load i32, i32* %locus, align 8, !dbg !4129
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %2), !dbg !4129
  %line1 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 1, !dbg !4129
  %3 = load i32, i32* %line1, align 8, !dbg !4129
  br label %cond.end, !dbg !4128

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4128

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ 0, %cond.false ], !dbg !4128
  store i32 %cond, i32* %line, align 4, !dbg !4130
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4131
  %4 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4131
  %5 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4131
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !4131
  %6 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4131
  %cmp = icmp ugt i8* %add.ptr, %6, !dbg !4131
  br i1 %cmp, label %cond.true2, label %cond.false3, !dbg !4131

cond.true2:                                       ; preds = %cond.end
  %7 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4131
  %conv = trunc i64 %7 to i32, !dbg !4131
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv), !dbg !4131
  br label %cond.end4, !dbg !4131

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !4131

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !4131
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4131
  %9 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4131
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i64 0, i64 0), i64 %9, i1 false), !dbg !4131
  %10 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4131
  %11 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4131
  %add.ptr6 = getelementptr inbounds i8, i8* %11, i64 %10, !dbg !4131
  store i8* %add.ptr6, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4131
  %12 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4134
  %13 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 2), align 8, !dbg !4134
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64, !dbg !4134
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64, !dbg !4134
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4134
  %conv7 = trunc i64 %sub.ptr.sub to i32, !dbg !4134
  %conv8 = zext i32 %conv7 to i64, !dbg !4134
  store i64 %conv8, i64* %len, align 8, !dbg !4135
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4136
  %15 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 2), align 8, !dbg !4136
  %cmp9 = icmp eq i8* %14, %15, !dbg !4136
  br i1 %cmp9, label %cond.true11, label %cond.false12, !dbg !4136

cond.true11:                                      ; preds = %cond.end4
  %bf.load = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 10), align 8, !dbg !4136
  %bf.clear = and i8 %bf.load, -3, !dbg !4136
  %bf.set = or i8 %bf.clear, 2, !dbg !4136
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 10), align 8, !dbg !4136
  br label %cond.end13, !dbg !4136

cond.false12:                                     ; preds = %cond.end4
  br label %cond.end13, !dbg !4136

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i32 [ 0, %cond.true11 ], [ 0, %cond.false12 ], !dbg !4136
  %16 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 2), align 8, !dbg !4136
  %sub.ptr.lhs.cast15 = ptrtoint i8* %16 to i64, !dbg !4136
  %sub.ptr.sub16 = sub i64 %sub.ptr.lhs.cast15, 0, !dbg !4136
  store i64 %sub.ptr.sub16, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4136
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4136
  %sub.ptr.lhs.cast17 = ptrtoint i8* %17 to i64, !dbg !4136
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast17, 0, !dbg !4136
  %18 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 6), align 8, !dbg !4136
  %conv19 = sext i32 %18 to i64, !dbg !4136
  %add = add nsw i64 %sub.ptr.sub18, %conv19, !dbg !4136
  %19 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 6), align 8, !dbg !4136
  %neg = xor i32 %19, -1, !dbg !4136
  %conv20 = sext i32 %neg to i64, !dbg !4136
  %and = and i64 %add, %conv20, !dbg !4136
  %20 = inttoptr i64 %and to i8*, !dbg !4136
  store i8* %20, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4136
  %21 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4136
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 1), align 8, !dbg !4136
  %23 = bitcast %struct._obstack_chunk* %22 to i8*, !dbg !4136
  %sub.ptr.lhs.cast21 = ptrtoint i8* %21 to i64, !dbg !4136
  %sub.ptr.rhs.cast22 = ptrtoint i8* %23 to i64, !dbg !4136
  %sub.ptr.sub23 = sub i64 %sub.ptr.lhs.cast21, %sub.ptr.rhs.cast22, !dbg !4136
  %24 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4136
  %25 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 1), align 8, !dbg !4136
  %26 = bitcast %struct._obstack_chunk* %25 to i8*, !dbg !4136
  %sub.ptr.lhs.cast24 = ptrtoint i8* %24 to i64, !dbg !4136
  %sub.ptr.rhs.cast25 = ptrtoint i8* %26 to i64, !dbg !4136
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25, !dbg !4136
  %cmp27 = icmp sgt i64 %sub.ptr.sub23, %sub.ptr.sub26, !dbg !4136
  br i1 %cmp27, label %cond.true29, label %cond.false30, !dbg !4136

cond.true29:                                      ; preds = %cond.end13
  %27 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4136
  store i8* %27, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4136
  br label %cond.end31, !dbg !4136

cond.false30:                                     ; preds = %cond.end13
  br label %cond.end31, !dbg !4136

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i8* [ %27, %cond.true29 ], [ null, %cond.false30 ], !dbg !4136
  %28 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4136
  store i8* %28, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 2), align 8, !dbg !4136
  %29 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4136
  %30 = inttoptr i64 %29 to i8*, !dbg !4136
  store i8* %30, i8** %str, align 8, !dbg !4137
  %31 = load i8*, i8** %str, align 8, !dbg !4138
  %32 = load i64, i64* %len, align 8, !dbg !4139
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !4140
  %call = call i64 @fwrite(i8* %31, i64 1, i64 %32, %struct._IO_FILE* %33), !dbg !4141
  br label %do.body, !dbg !4142

do.body:                                          ; preds = %cond.end31
  call void @llvm.dbg.declare(metadata i32* %line_, metadata !4143, metadata !DIExpression()), !dbg !4145
  %34 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !4145
  %conv33 = zext i8 %34 to i32, !dbg !4145
  %tobool34 = icmp ne i32 %conv33, 0, !dbg !4145
  br i1 %tobool34, label %cond.true35, label %cond.false36, !dbg !4145

cond.true35:                                      ; preds = %do.body
  %35 = load i32, i32* %line, align 4, !dbg !4145
  br label %cond.end37, !dbg !4145

cond.false36:                                     ; preds = %do.body
  br label %cond.end37, !dbg !4145

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond38 = phi i32 [ %35, %cond.true35 ], [ 0, %cond.false36 ], !dbg !4145
  store i32 %cond38, i32* %line_, align 4, !dbg !4145
  %36 = load i32, i32* %code.addr, align 4, !dbg !4145
  call void @dbxout_int(i32 %36), !dbg !4145
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !4145
  %call39 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), %struct._IO_FILE* %37), !dbg !4145
  %38 = load i32, i32* %line_, align 4, !dbg !4145
  call void @dbxout_int(i32 %38), !dbg !4145
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !4145
  %call40 = call i32 @putc(i32 44, %struct._IO_FILE* %39), !dbg !4145
  %40 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !4146
  %tobool41 = icmp ne %struct.rtx_def* %40, null, !dbg !4146
  br i1 %tobool41, label %if.then, label %if.else, !dbg !4145

if.then:                                          ; preds = %cond.end37
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !4146
  %42 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !4146
  call void @output_addr_const(%struct._IO_FILE* %41, %struct.rtx_def* %42), !dbg !4146
  br label %if.end45, !dbg !4146

if.else:                                          ; preds = %cond.end37
  %43 = load i8*, i8** %label.addr, align 8, !dbg !4148
  %tobool42 = icmp ne i8* %43, null, !dbg !4148
  br i1 %tobool42, label %if.then43, label %if.else44, !dbg !4146

if.then43:                                        ; preds = %if.else
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !4148
  %45 = load i8*, i8** %label.addr, align 8, !dbg !4148
  call void @assemble_name(%struct._IO_FILE* %44, i8* %45), !dbg !4148
  br label %if.end, !dbg !4148

if.else44:                                        ; preds = %if.else
  %46 = load i32, i32* %number.addr, align 4, !dbg !4148
  call void @dbxout_int(i32 %46), !dbg !4148
  br label %if.end

if.end:                                           ; preds = %if.else44, %if.then43
  br label %if.end45

if.end45:                                         ; preds = %if.end, %if.then
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !4145
  %call46 = call i32 @putc(i32 10, %struct._IO_FILE* %47), !dbg !4145
  br label %do.end, !dbg !4145

do.end:                                           ; preds = %if.end45
  %48 = load i8*, i8** %str, align 8, !dbg !4150
  %49 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 1), align 8, !dbg !4150
  %50 = bitcast %struct._obstack_chunk* %49 to i8*, !dbg !4150
  %sub.ptr.lhs.cast47 = ptrtoint i8* %48 to i64, !dbg !4150
  %sub.ptr.rhs.cast48 = ptrtoint i8* %50 to i64, !dbg !4150
  %sub.ptr.sub49 = sub i64 %sub.ptr.lhs.cast47, %sub.ptr.rhs.cast48, !dbg !4150
  store i64 %sub.ptr.sub49, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4150
  %51 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4150
  %cmp50 = icmp sgt i64 %51, 0, !dbg !4150
  br i1 %cmp50, label %land.lhs.true, label %cond.false59, !dbg !4150

land.lhs.true:                                    ; preds = %do.end
  %52 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4150
  %53 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4150
  %54 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 1), align 8, !dbg !4150
  %55 = bitcast %struct._obstack_chunk* %54 to i8*, !dbg !4150
  %sub.ptr.lhs.cast52 = ptrtoint i8* %53 to i64, !dbg !4150
  %sub.ptr.rhs.cast53 = ptrtoint i8* %55 to i64, !dbg !4150
  %sub.ptr.sub54 = sub i64 %sub.ptr.lhs.cast52, %sub.ptr.rhs.cast53, !dbg !4150
  %cmp55 = icmp slt i64 %52, %sub.ptr.sub54, !dbg !4150
  br i1 %cmp55, label %cond.true57, label %cond.false59, !dbg !4150

cond.true57:                                      ; preds = %land.lhs.true
  %56 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4150
  %57 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 1), align 8, !dbg !4150
  %58 = bitcast %struct._obstack_chunk* %57 to i8*, !dbg !4150
  %add.ptr58 = getelementptr inbounds i8, i8* %58, i64 %56, !dbg !4150
  store i8* %add.ptr58, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 2), align 8, !dbg !4150
  store i8* %add.ptr58, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4150
  %59 = ptrtoint i8* %add.ptr58 to i64, !dbg !4150
  br label %cond.end61, !dbg !4150

cond.false59:                                     ; preds = %land.lhs.true, %do.end
  %60 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4150
  %61 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 1), align 8, !dbg !4150
  %62 = bitcast %struct._obstack_chunk* %61 to i8*, !dbg !4150
  %add.ptr60 = getelementptr inbounds i8, i8* %62, i64 %60, !dbg !4150
  call void @obstack_free(%struct.obstack* @stabstr_ob, i8* %add.ptr60), !dbg !4150
  br label %cond.end61, !dbg !4150

cond.end61:                                       ; preds = %cond.false59, %cond.true57
  %cond62 = phi i64 [ %59, %cond.true57 ], [ 0, %cond.false59 ], !dbg !4150
  ret void, !dbg !4151
}

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_class_name_qualifiers(%union.tree_node* %decl) #0 !dbg !4152 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context = alloca %union.tree_node*, align 8
  %name16 = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4153, metadata !DIExpression()), !dbg !4154
  call void @llvm.dbg.declare(metadata %union.tree_node** %context, metadata !4155, metadata !DIExpression()), !dbg !4156
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4157
  %call = call %union.tree_node* @decl_type_context(%union.tree_node* %0), !dbg !4158
  store %union.tree_node* %call, %union.tree_node** %context, align 8, !dbg !4156
  %1 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4159
  %cmp = icmp ne %union.tree_node* %1, null, !dbg !4161
  br i1 %cmp, label %land.lhs.true, label %if.end42, !dbg !4162

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4163
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4163
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !4163
  %bf.load = load i64, i64* %3, align 8, !dbg !4163
  %bf.clear = and i64 %bf.load, 65535, !dbg !4163
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4163
  %cmp1 = icmp eq i32 %bf.cast, 16, !dbg !4164
  br i1 %cmp1, label %land.lhs.true2, label %if.end42, !dbg !4165

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4166
  %type = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !4166
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 12, !dbg !4166
  %5 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4166
  %cmp3 = icmp ne %union.tree_node* %5, null, !dbg !4167
  br i1 %cmp3, label %land.lhs.true4, label %if.end42, !dbg !4168

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %6 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4169
  %type5 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !4169
  %name6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 12, !dbg !4169
  %7 = load %union.tree_node*, %union.tree_node** %name6, align 8, !dbg !4169
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4169
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4169
  %bf.load8 = load i64, i64* %8, align 8, !dbg !4169
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !4169
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4169
  %cmp11 = icmp eq i32 %bf.cast10, 1, !dbg !4170
  br i1 %cmp11, label %if.then, label %lor.lhs.false, !dbg !4171

lor.lhs.false:                                    ; preds = %land.lhs.true4
  %9 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4172
  %type12 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !4172
  %name13 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 12, !dbg !4172
  %10 = load %union.tree_node*, %union.tree_node** %name13, align 8, !dbg !4172
  %decl_minimal = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !4172
  %name14 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !4172
  %11 = load %union.tree_node*, %union.tree_node** %name14, align 8, !dbg !4172
  %cmp15 = icmp ne %union.tree_node* %11, null, !dbg !4173
  br i1 %cmp15, label %if.then, label %if.end42, !dbg !4174

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true4
  call void @llvm.dbg.declare(metadata %union.tree_node** %name16, metadata !4175, metadata !DIExpression()), !dbg !4177
  %12 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4178
  %type17 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !4178
  %name18 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 12, !dbg !4178
  %13 = load %union.tree_node*, %union.tree_node** %name18, align 8, !dbg !4178
  store %union.tree_node* %13, %union.tree_node** %name16, align 8, !dbg !4177
  %14 = load %union.tree_node*, %union.tree_node** %name16, align 8, !dbg !4179
  %base19 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !4179
  %15 = bitcast %struct.tree_base* %base19 to i64*, !dbg !4179
  %bf.load20 = load i64, i64* %15, align 8, !dbg !4179
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !4179
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !4179
  %cmp23 = icmp eq i32 %bf.cast22, 35, !dbg !4181
  br i1 %cmp23, label %if.then24, label %if.end, !dbg !4182

if.then24:                                        ; preds = %if.then
  %16 = load %union.tree_node*, %union.tree_node** %name16, align 8, !dbg !4183
  call void @dbxout_class_name_qualifiers(%union.tree_node* %16), !dbg !4185
  %17 = load %union.tree_node*, %union.tree_node** %name16, align 8, !dbg !4186
  %decl_minimal25 = bitcast %union.tree_node* %17 to %struct.tree_decl_minimal*, !dbg !4186
  %name26 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal25, i32 0, i32 3, !dbg !4186
  %18 = load %union.tree_node*, %union.tree_node** %name26, align 8, !dbg !4186
  store %union.tree_node* %18, %union.tree_node** %name16, align 8, !dbg !4187
  br label %if.end, !dbg !4188

if.end:                                           ; preds = %if.then24, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %name16, align 8, !dbg !4189
  %identifier = bitcast %union.tree_node* %19 to %struct.tree_identifier*, !dbg !4189
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4189
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !4189
  %20 = load i32, i32* %len, align 8, !dbg !4189
  %conv = zext i32 %20 to i64, !dbg !4189
  store i64 %conv, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4189
  %21 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4189
  %22 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4189
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %22, !dbg !4189
  %23 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4189
  %cmp27 = icmp ugt i8* %add.ptr, %23, !dbg !4189
  br i1 %cmp27, label %cond.true, label %cond.false, !dbg !4189

cond.true:                                        ; preds = %if.end
  %24 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4189
  %conv29 = trunc i64 %24 to i32, !dbg !4189
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv29), !dbg !4189
  br label %cond.end, !dbg !4189

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4189

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4189
  %25 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4189
  %26 = load %union.tree_node*, %union.tree_node** %name16, align 8, !dbg !4189
  %identifier30 = bitcast %union.tree_node* %26 to %struct.tree_identifier*, !dbg !4189
  %id31 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier30, i32 0, i32 1, !dbg !4189
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id31, i32 0, i32 0, !dbg !4189
  %27 = load i8*, i8** %str, align 8, !dbg !4189
  %28 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4189
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 %28, i1 false), !dbg !4189
  %29 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4189
  %30 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4189
  %add.ptr32 = getelementptr inbounds i8, i8* %30, i64 %29, !dbg !4189
  store i8* %add.ptr32, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4189
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4190
  %31 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4190
  %32 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4190
  %add.ptr33 = getelementptr inbounds i8, i8* %31, i64 %32, !dbg !4190
  %33 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4190
  %cmp34 = icmp ugt i8* %add.ptr33, %33, !dbg !4190
  br i1 %cmp34, label %cond.true36, label %cond.false38, !dbg !4190

cond.true36:                                      ; preds = %cond.end
  %34 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4190
  %conv37 = trunc i64 %34 to i32, !dbg !4190
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv37), !dbg !4190
  br label %cond.end39, !dbg !4190

cond.false38:                                     ; preds = %cond.end
  br label %cond.end39, !dbg !4190

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false38 ], !dbg !4190
  %35 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4190
  %36 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4190
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i64 0, i64 0), i64 %36, i1 false), !dbg !4190
  %37 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4190
  %38 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4190
  %add.ptr41 = getelementptr inbounds i8, i8* %38, i64 %37, !dbg !4190
  store i8* %add.ptr41, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4190
  br label %if.end42, !dbg !4191

if.end42:                                         ; preds = %cond.end39, %lor.lhs.false, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !4192
}

declare dso_local %union.tree_node* @decl_value_expr_lookup(%union.tree_node*) #1

declare dso_local void @fancy_abort(i8*, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_symbol_name(%union.tree_node* %decl, i8* %suffix, i32 %letter) #0 !dbg !4193 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %suffix.addr = alloca i8*, align 8
  %letter.addr = alloca i32, align 4
  %name = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4196, metadata !DIExpression()), !dbg !4197
  store i8* %suffix, i8** %suffix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %suffix.addr, metadata !4198, metadata !DIExpression()), !dbg !4199
  store i32 %letter, i32* %letter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %letter.addr, metadata !4200, metadata !DIExpression()), !dbg !4201
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4202, metadata !DIExpression()), !dbg !4203
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4204
  %decl_minimal = bitcast %union.tree_node* %0 to %struct.tree_decl_minimal*, !dbg !4204
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !4204
  %1 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4204
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !4204
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4206

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4207
  %decl_minimal1 = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !4207
  %context2 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal1, i32 0, i32 4, !dbg !4207
  %3 = load %union.tree_node*, %union.tree_node** %context2, align 8, !dbg !4207
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4207
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4207
  %bf.load = load i64, i64* %4, align 8, !dbg !4207
  %bf.clear = and i64 %bf.load, 65535, !dbg !4207
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4207
  %idxprom = sext i32 %bf.cast to i64, !dbg !4207
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4207
  %5 = load i32, i32* %arrayidx, align 4, !dbg !4207
  %cmp = icmp eq i32 %5, 2, !dbg !4207
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4208

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4209
  %decl_minimal3 = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !4209
  %context4 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal3, i32 0, i32 4, !dbg !4209
  %7 = load %union.tree_node*, %union.tree_node** %context4, align 8, !dbg !4209
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4209
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !4209
  %bf.load6 = load i64, i64* %8, align 8, !dbg !4209
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !4209
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !4209
  %cmp9 = icmp eq i32 %bf.cast8, 38, !dbg !4210
  br i1 %cmp9, label %if.then, label %if.else, !dbg !4211

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4212
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %9), !dbg !4212
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !4213
  br label %if.end, !dbg !4214

if.else:                                          ; preds = %lor.lhs.false, %entry
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4215
  %decl_minimal10 = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !4215
  %name11 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal10, i32 0, i32 3, !dbg !4215
  %11 = load %union.tree_node*, %union.tree_node** %name11, align 8, !dbg !4215
  store %union.tree_node* %11, %union.tree_node** %name, align 8, !dbg !4216
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4217
  %tobool12 = icmp ne %union.tree_node* %12, null, !dbg !4217
  br i1 %tobool12, label %if.then13, label %if.else20, !dbg !4219

if.then13:                                        ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4220
  %identifier = bitcast %union.tree_node* %13 to %struct.tree_identifier*, !dbg !4220
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4220
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !4220
  %14 = load i32, i32* %len, align 8, !dbg !4220
  %conv = zext i32 %14 to i64, !dbg !4220
  store i64 %conv, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4220
  %15 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4220
  %16 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4220
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %16, !dbg !4220
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4220
  %cmp14 = icmp ugt i8* %add.ptr, %17, !dbg !4220
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !4220

cond.true:                                        ; preds = %if.then13
  %18 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4220
  %conv16 = trunc i64 %18 to i32, !dbg !4220
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv16), !dbg !4220
  br label %cond.end, !dbg !4220

cond.false:                                       ; preds = %if.then13
  br label %cond.end, !dbg !4220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4220
  %19 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4220
  %20 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4220
  %identifier17 = bitcast %union.tree_node* %20 to %struct.tree_identifier*, !dbg !4220
  %id18 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier17, i32 0, i32 1, !dbg !4220
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id18, i32 0, i32 0, !dbg !4220
  %21 = load i8*, i8** %str, align 8, !dbg !4220
  %22 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4220
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %21, i64 %22, i1 false), !dbg !4220
  %23 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4220
  %24 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4220
  %add.ptr19 = getelementptr inbounds i8, i8* %24, i64 %23, !dbg !4220
  store i8* %add.ptr19, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4220
  br label %if.end30, !dbg !4220

if.else20:                                        ; preds = %if.end
  store i64 6, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4221
  %25 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4221
  %26 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4221
  %add.ptr21 = getelementptr inbounds i8, i8* %25, i64 %26, !dbg !4221
  %27 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4221
  %cmp22 = icmp ugt i8* %add.ptr21, %27, !dbg !4221
  br i1 %cmp22, label %cond.true24, label %cond.false26, !dbg !4221

cond.true24:                                      ; preds = %if.else20
  %28 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4221
  %conv25 = trunc i64 %28 to i32, !dbg !4221
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv25), !dbg !4221
  br label %cond.end27, !dbg !4221

cond.false26:                                     ; preds = %if.else20
  br label %cond.end27, !dbg !4221

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi i32 [ 0, %cond.true24 ], [ 0, %cond.false26 ], !dbg !4221
  %29 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4221
  %30 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4221
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i64 0, i64 0), i64 %30, i1 false), !dbg !4221
  %31 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4221
  %32 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4221
  %add.ptr29 = getelementptr inbounds i8, i8* %32, i64 %31, !dbg !4221
  store i8* %add.ptr29, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4221
  br label %if.end30

if.end30:                                         ; preds = %cond.end27, %cond.end
  %33 = load i8*, i8** %suffix.addr, align 8, !dbg !4222
  %tobool31 = icmp ne i8* %33, null, !dbg !4222
  br i1 %tobool31, label %if.then32, label %if.end43, !dbg !4224

if.then32:                                        ; preds = %if.end30
  %34 = load i8*, i8** %suffix.addr, align 8, !dbg !4225
  %call33 = call i64 @strlen(i8* %34), !dbg !4225
  store i64 %call33, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4225
  %35 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4225
  %36 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4225
  %add.ptr34 = getelementptr inbounds i8, i8* %35, i64 %36, !dbg !4225
  %37 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4225
  %cmp35 = icmp ugt i8* %add.ptr34, %37, !dbg !4225
  br i1 %cmp35, label %cond.true37, label %cond.false39, !dbg !4225

cond.true37:                                      ; preds = %if.then32
  %38 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4225
  %conv38 = trunc i64 %38 to i32, !dbg !4225
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv38), !dbg !4225
  br label %cond.end40, !dbg !4225

cond.false39:                                     ; preds = %if.then32
  br label %cond.end40, !dbg !4225

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi i32 [ 0, %cond.true37 ], [ 0, %cond.false39 ], !dbg !4225
  %39 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4225
  %40 = load i8*, i8** %suffix.addr, align 8, !dbg !4225
  %41 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4225
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %40, i64 %41, i1 false), !dbg !4225
  %42 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4225
  %43 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4225
  %add.ptr42 = getelementptr inbounds i8, i8* %43, i64 %42, !dbg !4225
  store i8* %add.ptr42, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4225
  br label %if.end43, !dbg !4225

if.end43:                                         ; preds = %cond.end40, %if.end30
  %44 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4226
  %add.ptr44 = getelementptr inbounds i8, i8* %44, i64 1, !dbg !4226
  %45 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4226
  %cmp45 = icmp ugt i8* %add.ptr44, %45, !dbg !4226
  br i1 %cmp45, label %cond.true47, label %cond.false48, !dbg !4226

cond.true47:                                      ; preds = %if.end43
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4226
  br label %cond.end49, !dbg !4226

cond.false48:                                     ; preds = %if.end43
  br label %cond.end49, !dbg !4226

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi i32 [ 0, %cond.true47 ], [ 0, %cond.false48 ], !dbg !4226
  %46 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4226
  %incdec.ptr = getelementptr inbounds i8, i8* %46, i32 1, !dbg !4226
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4226
  store i8 58, i8* %46, align 1, !dbg !4226
  %47 = load i32, i32* %letter.addr, align 4, !dbg !4227
  %tobool51 = icmp ne i32 %47, 0, !dbg !4227
  br i1 %tobool51, label %if.then52, label %if.end62, !dbg !4229

if.then52:                                        ; preds = %cond.end49
  %48 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4230
  %add.ptr53 = getelementptr inbounds i8, i8* %48, i64 1, !dbg !4230
  %49 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4230
  %cmp54 = icmp ugt i8* %add.ptr53, %49, !dbg !4230
  br i1 %cmp54, label %cond.true56, label %cond.false57, !dbg !4230

cond.true56:                                      ; preds = %if.then52
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4230
  br label %cond.end58, !dbg !4230

cond.false57:                                     ; preds = %if.then52
  br label %cond.end58, !dbg !4230

cond.end58:                                       ; preds = %cond.false57, %cond.true56
  %cond59 = phi i32 [ 0, %cond.true56 ], [ 0, %cond.false57 ], !dbg !4230
  %50 = load i32, i32* %letter.addr, align 4, !dbg !4230
  %conv60 = trunc i32 %50 to i8, !dbg !4230
  %51 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4230
  %incdec.ptr61 = getelementptr inbounds i8, i8* %51, i32 1, !dbg !4230
  store i8* %incdec.ptr61, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4230
  store i8 %conv60, i8* %51, align 1, !dbg !4230
  br label %if.end62, !dbg !4230

if.end62:                                         ; preds = %cond.end58, %cond.end49
  ret void, !dbg !4231
}

; Function Attrs: noinline nounwind uwtable
define internal void @stabstr_D(i64 %num) #0 !dbg !4232 {
entry:
  %num.addr = alloca i64, align 8
  %buf = alloca [64 x i8], align 16
  %p = alloca i8*, align 8
  %unum = alloca i32, align 4
  %digit = alloca i32, align 4
  store i64 %num, i64* %num.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %num.addr, metadata !4235, metadata !DIExpression()), !dbg !4236
  call void @llvm.dbg.declare(metadata [64 x i8]* %buf, metadata !4237, metadata !DIExpression()), !dbg !4238
  call void @llvm.dbg.declare(metadata i8** %p, metadata !4239, metadata !DIExpression()), !dbg !4240
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !4241
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 64, !dbg !4242
  store i8* %add.ptr, i8** %p, align 8, !dbg !4240
  call void @llvm.dbg.declare(metadata i32* %unum, metadata !4243, metadata !DIExpression()), !dbg !4244
  %0 = load i64, i64* %num.addr, align 8, !dbg !4245
  %cmp = icmp eq i64 %0, 0, !dbg !4247
  br i1 %cmp, label %if.then, label %if.end, !dbg !4248

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4249
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 1, !dbg !4249
  %2 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4249
  %cmp2 = icmp ugt i8* %add.ptr1, %2, !dbg !4249
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !4249

cond.true:                                        ; preds = %if.then
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4249
  br label %cond.end, !dbg !4249

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4249

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4249
  %3 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4249
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !4249
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4249
  store i8 48, i8* %3, align 1, !dbg !4249
  br label %return, !dbg !4251

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %num.addr, align 8, !dbg !4252
  %cmp3 = icmp slt i64 %4, 0, !dbg !4254
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !4255

if.then4:                                         ; preds = %if.end
  %5 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4256
  %add.ptr5 = getelementptr inbounds i8, i8* %5, i64 1, !dbg !4256
  %6 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4256
  %cmp6 = icmp ugt i8* %add.ptr5, %6, !dbg !4256
  br i1 %cmp6, label %cond.true7, label %cond.false8, !dbg !4256

cond.true7:                                       ; preds = %if.then4
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !4256
  br label %cond.end9, !dbg !4256

cond.false8:                                      ; preds = %if.then4
  br label %cond.end9, !dbg !4256

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !4256
  %7 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4256
  %incdec.ptr11 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !4256
  store i8* %incdec.ptr11, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4256
  store i8 45, i8* %7, align 1, !dbg !4256
  %8 = load i64, i64* %num.addr, align 8, !dbg !4258
  %sub = sub nsw i64 0, %8, !dbg !4259
  %conv = trunc i64 %sub to i32, !dbg !4259
  store i32 %conv, i32* %unum, align 4, !dbg !4260
  br label %if.end13, !dbg !4261

if.else:                                          ; preds = %if.end
  %9 = load i64, i64* %num.addr, align 8, !dbg !4262
  %conv12 = trunc i64 %9 to i32, !dbg !4262
  store i32 %conv12, i32* %unum, align 4, !dbg !4263
  br label %if.end13

if.end13:                                         ; preds = %if.else, %cond.end9
  br label %do.body, !dbg !4264

do.body:                                          ; preds = %do.cond, %if.end13
  call void @llvm.dbg.declare(metadata i32* %digit, metadata !4265, metadata !DIExpression()), !dbg !4267
  %10 = load i32, i32* %unum, align 4, !dbg !4267
  %rem = urem i32 %10, 10, !dbg !4267
  store i32 %rem, i32* %digit, align 4, !dbg !4267
  %11 = load i32, i32* %unum, align 4, !dbg !4267
  %div = udiv i32 %11, 10, !dbg !4267
  store i32 %div, i32* %unum, align 4, !dbg !4267
  %12 = load i32, i32* %digit, align 4, !dbg !4267
  %add = add nsw i32 %12, 48, !dbg !4267
  %conv14 = trunc i32 %add to i8, !dbg !4267
  %13 = load i8*, i8** %p, align 8, !dbg !4267
  %incdec.ptr15 = getelementptr inbounds i8, i8* %13, i32 -1, !dbg !4267
  store i8* %incdec.ptr15, i8** %p, align 8, !dbg !4267
  store i8 %conv14, i8* %incdec.ptr15, align 1, !dbg !4267
  br label %do.cond, !dbg !4267

do.cond:                                          ; preds = %do.body
  %14 = load i32, i32* %unum, align 4, !dbg !4264
  %cmp16 = icmp ugt i32 %14, 0, !dbg !4264
  br i1 %cmp16, label %do.body, label %do.end, !dbg !4267, !llvm.loop !4268

do.end:                                           ; preds = %do.cond
  %arraydecay18 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !4269
  %add.ptr19 = getelementptr inbounds i8, i8* %arraydecay18, i64 64, !dbg !4269
  %15 = load i8*, i8** %p, align 8, !dbg !4269
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr19 to i64, !dbg !4269
  %sub.ptr.rhs.cast = ptrtoint i8* %15 to i64, !dbg !4269
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4269
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4269
  %16 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4269
  %17 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4269
  %add.ptr20 = getelementptr inbounds i8, i8* %16, i64 %17, !dbg !4269
  %18 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4269
  %cmp21 = icmp ugt i8* %add.ptr20, %18, !dbg !4269
  br i1 %cmp21, label %cond.true23, label %cond.false25, !dbg !4269

cond.true23:                                      ; preds = %do.end
  %19 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4269
  %conv24 = trunc i64 %19 to i32, !dbg !4269
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv24), !dbg !4269
  br label %cond.end26, !dbg !4269

cond.false25:                                     ; preds = %do.end
  br label %cond.end26, !dbg !4269

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false25 ], !dbg !4269
  %20 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4269
  %21 = load i8*, i8** %p, align 8, !dbg !4269
  %22 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4269
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 %22, i1 false), !dbg !4269
  %23 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4269
  %24 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4269
  %add.ptr28 = getelementptr inbounds i8, i8* %24, i64 %23, !dbg !4269
  store i8* %add.ptr28, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4269
  br label %return, !dbg !4270

return:                                           ; preds = %cond.end26, %cond.end
  ret void, !dbg !4270
}

declare dso_local void @debug_flush_symbol_queue() #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @dbxout_expand_expr(%union.tree_node* %expr) #0 !dbg !4271 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %offset = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %volatilep = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4274, metadata !DIExpression()), !dbg !4275
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4276
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4276
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4276
  %bf.load = load i64, i64* %1, align 8, !dbg !4276
  %bf.clear = and i64 %bf.load, 65535, !dbg !4276
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4276
  switch i32 %bf.cast, label %sw.default [
    i32 32, label %sw.bb
    i32 34, label %sw.bb3
    i32 33, label %sw.bb12
    i32 36, label %sw.bb12
    i32 23, label %sw.bb33
    i32 41, label %sw.bb35
    i32 45, label %sw.bb35
    i32 46, label %sw.bb35
    i32 42, label %sw.bb35
  ], !dbg !4277

sw.bb:                                            ; preds = %entry
  %2 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 113), align 4, !dbg !4278
  %tobool = icmp ne i8 %2, 0, !dbg !4281
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4282

land.lhs.true:                                    ; preds = %sw.bb
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4283
  %decl_with_vis = bitcast %union.tree_node* %3 to %struct.tree_decl_with_vis*, !dbg !4283
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4283
  %4 = bitcast i24* %tls_model to i32*, !dbg !4283
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4283
  %bf.lshr = lshr i32 %bf.load1, 13, !dbg !4283
  %bf.clear2 = and i32 %bf.lshr, 7, !dbg !4283
  %cmp = icmp sge i32 %bf.clear2, 2, !dbg !4283
  br i1 %cmp, label %if.then, label %if.end, !dbg !4284

if.then:                                          ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4285
  br label %return, !dbg !4285

if.end:                                           ; preds = %land.lhs.true, %sw.bb
  br label %sw.bb3, !dbg !4283

sw.bb3:                                           ; preds = %entry, %if.end
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4286
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !4286
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4286
  %6 = bitcast i40* %decl_flag_2 to i64*, !dbg !4286
  %bf.load4 = load i64, i64* %6, align 8, !dbg !4286
  %bf.lshr5 = lshr i64 %bf.load4, 26, !dbg !4286
  %bf.clear6 = and i64 %bf.lshr5, 1, !dbg !4286
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !4286
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !4286
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !4288

if.then9:                                         ; preds = %sw.bb3
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4289
  %call = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %7), !dbg !4289
  %call10 = call %struct.rtx_def* @dbxout_expand_expr(%union.tree_node* %call), !dbg !4290
  store %struct.rtx_def* %call10, %struct.rtx_def** %retval, align 8, !dbg !4291
  br label %return, !dbg !4291

if.end11:                                         ; preds = %sw.bb3
  br label %sw.bb12, !dbg !4286

sw.bb12:                                          ; preds = %entry, %entry, %if.end11
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4292
  %base13 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4292
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !4292
  %bf.load14 = load i64, i64* %9, align 8, !dbg !4292
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !4292
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !4292
  %idxprom = zext i32 %bf.cast16 to i64, !dbg !4292
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !4292
  %arrayidx17 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !4292
  %10 = load i8, i8* %arrayidx17, align 1, !dbg !4292
  %conv = zext i8 %10 to i32, !dbg !4292
  %tobool18 = icmp ne i32 %conv, 0, !dbg !4292
  br i1 %tobool18, label %land.lhs.true19, label %cond.false30, !dbg !4292

land.lhs.true19:                                  ; preds = %sw.bb12
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4292
  %decl_with_rtl = bitcast %union.tree_node* %11 to %struct.tree_decl_with_rtl*, !dbg !4292
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !4292
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !4292
  %cmp20 = icmp ne %struct.rtx_def* %12, null, !dbg !4292
  br i1 %cmp20, label %cond.true, label %cond.false30, !dbg !4292

cond.true:                                        ; preds = %land.lhs.true19
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4292
  %decl_with_rtl22 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_rtl*, !dbg !4292
  %rtl23 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl22, i32 0, i32 1, !dbg !4292
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtl23, align 8, !dbg !4292
  %tobool24 = icmp ne %struct.rtx_def* %14, null, !dbg !4292
  br i1 %tobool24, label %cond.true25, label %cond.false, !dbg !4292

cond.true25:                                      ; preds = %cond.true
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4292
  %decl_with_rtl26 = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !4292
  %rtl27 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl26, i32 0, i32 1, !dbg !4292
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl27, align 8, !dbg !4292
  br label %cond.end, !dbg !4292

cond.false:                                       ; preds = %cond.true
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4292
  call void @make_decl_rtl(%union.tree_node* %17), !dbg !4292
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4292
  %decl_with_rtl28 = bitcast %union.tree_node* %18 to %struct.tree_decl_with_rtl*, !dbg !4292
  %rtl29 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl28, i32 0, i32 1, !dbg !4292
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl29, align 8, !dbg !4292
  br label %cond.end, !dbg !4292

cond.end:                                         ; preds = %cond.false, %cond.true25
  %cond = phi %struct.rtx_def* [ %16, %cond.true25 ], [ %19, %cond.false ], !dbg !4292
  br label %cond.end31, !dbg !4292

cond.false30:                                     ; preds = %land.lhs.true19, %sw.bb12
  br label %cond.end31, !dbg !4292

cond.end31:                                       ; preds = %cond.false30, %cond.end
  %cond32 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false30 ], !dbg !4292
  store %struct.rtx_def* %cond32, %struct.rtx_def** %retval, align 8, !dbg !4293
  br label %return, !dbg !4293

sw.bb33:                                          ; preds = %entry
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4294
  %call34 = call %struct.rtx_def* @expand_expr(%union.tree_node* %20, %struct.rtx_def* null, i32 0, i32 4), !dbg !4295
  store %struct.rtx_def* %call34, %struct.rtx_def** %retval, align 8, !dbg !4296
  br label %return, !dbg !4296

sw.bb35:                                          ; preds = %entry, %entry, %entry, %entry
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4297, metadata !DIExpression()), !dbg !4299
  call void @llvm.dbg.declare(metadata i64* %bitsize, metadata !4300, metadata !DIExpression()), !dbg !4301
  call void @llvm.dbg.declare(metadata i64* %bitpos, metadata !4302, metadata !DIExpression()), !dbg !4303
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !4304, metadata !DIExpression()), !dbg !4305
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !4306, metadata !DIExpression()), !dbg !4307
  call void @llvm.dbg.declare(metadata i32* %volatilep, metadata !4308, metadata !DIExpression()), !dbg !4309
  store i32 0, i32* %volatilep, align 4, !dbg !4309
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !4310, metadata !DIExpression()), !dbg !4311
  store i32 0, i32* %unsignedp, align 4, !dbg !4311
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4312, metadata !DIExpression()), !dbg !4313
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4314
  %call36 = call %union.tree_node* @get_inner_reference(%union.tree_node* %21, i64* %bitsize, i64* %bitpos, %union.tree_node** %offset, i32* %mode, i32* %unsignedp, i32* %volatilep, i8 zeroext 1), !dbg !4315
  store %union.tree_node* %call36, %union.tree_node** %tem, align 8, !dbg !4316
  %22 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !4317
  %call37 = call %struct.rtx_def* @dbxout_expand_expr(%union.tree_node* %22), !dbg !4318
  store %struct.rtx_def* %call37, %struct.rtx_def** %x, align 8, !dbg !4319
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4320
  %cmp38 = icmp eq %struct.rtx_def* %23, null, !dbg !4322
  br i1 %cmp38, label %if.then44, label %lor.lhs.false, !dbg !4323

lor.lhs.false:                                    ; preds = %sw.bb35
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4324
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !4324
  %bf.load40 = load i32, i32* %25, align 8, !dbg !4324
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !4324
  %cmp42 = icmp eq i32 %bf.clear41, 43, !dbg !4324
  br i1 %cmp42, label %if.end45, label %if.then44, !dbg !4325

if.then44:                                        ; preds = %lor.lhs.false, %sw.bb35
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4326
  br label %return, !dbg !4326

if.end45:                                         ; preds = %lor.lhs.false
  %26 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4327
  %cmp46 = icmp ne %union.tree_node* %26, null, !dbg !4329
  br i1 %cmp46, label %if.then48, label %if.end55, !dbg !4330

if.then48:                                        ; preds = %if.end45
  %27 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4331
  %call49 = call i32 @host_integerp(%union.tree_node* %27, i32 0), !dbg !4334
  %tobool50 = icmp ne i32 %call49, 0, !dbg !4334
  br i1 %tobool50, label %if.end52, label %if.then51, !dbg !4335

if.then51:                                        ; preds = %if.then48
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4336
  br label %return, !dbg !4336

if.end52:                                         ; preds = %if.then48
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4337
  %29 = load i32, i32* %mode, align 4, !dbg !4337
  %30 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4337
  %call53 = call i64 @tree_low_cst(%union.tree_node* %30, i32 0), !dbg !4337
  %call54 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %28, i32 %29, i64 %call53, i32 0, i32 1), !dbg !4337
  store %struct.rtx_def* %call54, %struct.rtx_def** %x, align 8, !dbg !4338
  br label %if.end55, !dbg !4339

if.end55:                                         ; preds = %if.end52, %if.end45
  %31 = load i64, i64* %bitpos, align 8, !dbg !4340
  %cmp56 = icmp ne i64 %31, 0, !dbg !4342
  br i1 %cmp56, label %if.then58, label %if.end60, !dbg !4343

if.then58:                                        ; preds = %if.end55
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4344
  %33 = load i32, i32* %mode, align 4, !dbg !4344
  %34 = load i64, i64* %bitpos, align 8, !dbg !4344
  %div = sdiv i64 %34, 8, !dbg !4344
  %call59 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %32, i32 %33, i64 %div, i32 0, i32 1), !dbg !4344
  store %struct.rtx_def* %call59, %struct.rtx_def** %x, align 8, !dbg !4345
  br label %if.end60, !dbg !4346

if.end60:                                         ; preds = %if.then58, %if.end55
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4347
  store %struct.rtx_def* %35, %struct.rtx_def** %retval, align 8, !dbg !4348
  br label %return, !dbg !4348

sw.default:                                       ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4349
  br label %return, !dbg !4349

return:                                           ; preds = %sw.default, %if.end60, %if.then51, %if.then44, %sw.bb33, %cond.end31, %if.then9, %if.then
  %36 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4350
  ret %struct.rtx_def* %36, !dbg !4350
}

declare dso_local %struct.rtx_def* @eliminate_regs(%struct.rtx_def*, i32, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @dbxout_symbol_location(%union.tree_node* %decl, %union.tree_node* %type, i8* %suffix, %struct.rtx_def* %home) #0 !dbg !4351 {
entry:
  %retval = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %suffix.addr = alloca i8*, align 8
  %home.addr = alloca %struct.rtx_def*, align 8
  %letter = alloca i32, align 4
  %code = alloca i32, align 4
  %addr = alloca %struct.rtx_def*, align 8
  %number = alloca i32, align 4
  %regno = alloca i32, align 4
  %value = alloca %struct.rtx_def*, align 8
  %offs = alloca i32, align 4
  %marked = alloca i8, align 1
  %tmp = alloca %struct.rtx_def*, align 8
  %offs87 = alloca i32, align 4
  %offs309 = alloca i32, align 4
  %subtype = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4354, metadata !DIExpression()), !dbg !4355
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4356, metadata !DIExpression()), !dbg !4357
  store i8* %suffix, i8** %suffix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %suffix.addr, metadata !4358, metadata !DIExpression()), !dbg !4359
  store %struct.rtx_def* %home, %struct.rtx_def** %home.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %home.addr, metadata !4360, metadata !DIExpression()), !dbg !4361
  call void @llvm.dbg.declare(metadata i32* %letter, metadata !4362, metadata !DIExpression()), !dbg !4363
  store i32 0, i32* %letter, align 4, !dbg !4363
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4364, metadata !DIExpression()), !dbg !4365
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !4366, metadata !DIExpression()), !dbg !4367
  store %struct.rtx_def* null, %struct.rtx_def** %addr, align 8, !dbg !4367
  call void @llvm.dbg.declare(metadata i32* %number, metadata !4368, metadata !DIExpression()), !dbg !4369
  store i32 0, i32* %number, align 4, !dbg !4369
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4370, metadata !DIExpression()), !dbg !4371
  store i32 -1, i32* %regno, align 4, !dbg !4371
  %0 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4372
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4372
  %bf.load = load i32, i32* %1, align 8, !dbg !4372
  %bf.clear = and i32 %bf.load, 65535, !dbg !4372
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !4374
  br i1 %cmp, label %if.then, label %if.end12, !dbg !4375

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !4376, metadata !DIExpression()), !dbg !4378
  %2 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4379
  store %struct.rtx_def* %2, %struct.rtx_def** %value, align 8, !dbg !4378
  br label %while.cond, !dbg !4380

while.cond:                                       ; preds = %while.body, %if.then
  %3 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !4381
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4381
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4381
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4381
  %cmp3 = icmp eq i32 %bf.clear2, 39, !dbg !4382
  br i1 %cmp3, label %while.body, label %while.end, !dbg !4380

while.body:                                       ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !4383
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4383
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4383
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4383
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4383
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4383
  store %struct.rtx_def* %6, %struct.rtx_def** %value, align 8, !dbg !4384
  br label %while.cond, !dbg !4380, !llvm.loop !4385

while.end:                                        ; preds = %while.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !4386
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4386
  %bf.load4 = load i32, i32* %8, align 8, !dbg !4386
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !4386
  %cmp6 = icmp eq i32 %bf.clear5, 37, !dbg !4386
  br i1 %cmp6, label %if.then7, label %if.end10, !dbg !4388

if.then7:                                         ; preds = %while.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !4389
  %call = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !4389
  %cmp8 = icmp uge i32 %call, 53, !dbg !4392
  br i1 %cmp8, label %if.then9, label %if.end, !dbg !4393

if.then9:                                         ; preds = %if.then7
  store i32 0, i32* %retval, align 4, !dbg !4394
  br label %return, !dbg !4394

if.end:                                           ; preds = %if.then7
  br label %if.end10, !dbg !4395

if.end10:                                         ; preds = %if.end, %while.end
  %call11 = call %struct.rtx_def* @alter_subreg(%struct.rtx_def** %home.addr), !dbg !4396
  store %struct.rtx_def* %call11, %struct.rtx_def** %home.addr, align 8, !dbg !4397
  br label %if.end12, !dbg !4398

if.end12:                                         ; preds = %if.end10, %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4399
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4399
  %bf.load13 = load i32, i32* %11, align 8, !dbg !4399
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !4399
  %cmp15 = icmp eq i32 %bf.clear14, 37, !dbg !4399
  br i1 %cmp15, label %if.then16, label %if.end21, !dbg !4401

if.then16:                                        ; preds = %if.end12
  %12 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4402
  %call17 = call i32 @rhs_regno(%struct.rtx_def* %12), !dbg !4402
  store i32 %call17, i32* %regno, align 4, !dbg !4404
  %13 = load i32, i32* %regno, align 4, !dbg !4405
  %cmp18 = icmp sge i32 %13, 53, !dbg !4407
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !4408

if.then19:                                        ; preds = %if.then16
  store i32 0, i32* %retval, align 4, !dbg !4409
  br label %return, !dbg !4409

if.end20:                                         ; preds = %if.then16
  br label %if.end21, !dbg !4410

if.end21:                                         ; preds = %if.end20, %if.end12
  %14 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4411
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4411
  %bf.load22 = load i32, i32* %15, align 8, !dbg !4411
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !4411
  %cmp24 = icmp eq i32 %bf.clear23, 43, !dbg !4411
  br i1 %cmp24, label %land.lhs.true, label %if.else102, !dbg !4413

land.lhs.true:                                    ; preds = %if.end21
  %16 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4414
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !4414
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !4414
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !4414
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !4414
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !4414
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !4414
  %bf.load29 = load i32, i32* %18, align 8, !dbg !4414
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !4414
  %cmp31 = icmp eq i32 %bf.clear30, 45, !dbg !4415
  br i1 %cmp31, label %if.then32, label %if.else102, !dbg !4416

if.then32:                                        ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4417
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !4417
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !4417
  %bf.load33 = load i64, i64* %20, align 8, !dbg !4417
  %bf.lshr = lshr i64 %bf.load33, 27, !dbg !4417
  %bf.clear34 = and i64 %bf.lshr, 1, !dbg !4417
  %bf.cast = trunc i64 %bf.clear34 to i32, !dbg !4417
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4417
  br i1 %tobool, label %if.then35, label %if.else, !dbg !4420

if.then35:                                        ; preds = %if.then32
  call void @llvm.dbg.declare(metadata i32* %offs, metadata !4421, metadata !DIExpression()), !dbg !4423
  store i32 71, i32* %letter, align 4, !dbg !4424
  store i32 32, i32* %code, align 4, !dbg !4425
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4426
  %call36 = call i8* @dbxout_common_check(%union.tree_node* %21, i32* %offs), !dbg !4428
  %cmp37 = icmp ne i8* null, %call36, !dbg !4429
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !4430

if.then38:                                        ; preds = %if.then35
  store i32 86, i32* %letter, align 4, !dbg !4431
  store %struct.rtx_def* null, %struct.rtx_def** %addr, align 8, !dbg !4433
  %22 = load i32, i32* %offs, align 4, !dbg !4434
  store i32 %22, i32* %number, align 4, !dbg !4435
  br label %if.end39, !dbg !4436

if.end39:                                         ; preds = %if.then38, %if.then35
  br label %if.end101, !dbg !4437

if.else:                                          ; preds = %if.then32
  %23 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4438
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !4438
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !4438
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 0, !dbg !4438
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !4438
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !4438
  store %struct.rtx_def* %24, %struct.rtx_def** %addr, align 8, !dbg !4440
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4441
  %call44 = call %union.tree_node* @decl_function_context(%union.tree_node* %25), !dbg !4442
  %tobool45 = icmp ne %union.tree_node* %call44, null, !dbg !4442
  %26 = zext i1 %tobool45 to i64, !dbg !4442
  %cond = select i1 %tobool45, i32 86, i32 83, !dbg !4442
  store i32 %cond, i32* %letter, align 4, !dbg !4443
  %27 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4444
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !4444
  %bf.load46 = load i32, i32* %28, align 8, !dbg !4444
  %bf.clear47 = and i32 %bf.load46, 65535, !dbg !4444
  %cmp48 = icmp eq i32 %bf.clear47, 45, !dbg !4446
  br i1 %cmp48, label %land.lhs.true49, label %if.end78, !dbg !4447

land.lhs.true49:                                  ; preds = %if.else
  %29 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4448
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !4448
  %bf.load50 = load i32, i32* %30, align 8, !dbg !4448
  %bf.lshr51 = lshr i32 %bf.load50, 26, !dbg !4448
  %bf.clear52 = and i32 %bf.lshr51, 1, !dbg !4448
  %tobool53 = icmp ne i32 %bf.clear52, 0, !dbg !4448
  br i1 %tobool53, label %if.then54, label %if.end78, !dbg !4449

if.then54:                                        ; preds = %land.lhs.true49
  call void @llvm.dbg.declare(metadata i8* %marked, metadata !4450, metadata !DIExpression()), !dbg !4452
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !4453, metadata !DIExpression()), !dbg !4454
  %31 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4455
  %call55 = call %struct.rtx_def* @get_pool_constant_mark(%struct.rtx_def* %31, i8* %marked), !dbg !4456
  store %struct.rtx_def* %call55, %struct.rtx_def** %tmp, align 8, !dbg !4454
  %32 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4457
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !4457
  %bf.load56 = load i32, i32* %33, align 8, !dbg !4457
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !4457
  %cmp58 = icmp eq i32 %bf.clear57, 45, !dbg !4459
  br i1 %cmp58, label %if.then59, label %if.else68, !dbg !4460

if.then59:                                        ; preds = %if.then54
  %34 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4461
  store %struct.rtx_def* %34, %struct.rtx_def** %addr, align 8, !dbg !4463
  %35 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4464
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !4464
  %bf.load60 = load i32, i32* %36, align 8, !dbg !4464
  %bf.lshr61 = lshr i32 %bf.load60, 26, !dbg !4464
  %bf.clear62 = and i32 %bf.lshr61, 1, !dbg !4464
  %tobool63 = icmp ne i32 %bf.clear62, 0, !dbg !4464
  br i1 %tobool63, label %if.then64, label %if.else66, !dbg !4466

if.then64:                                        ; preds = %if.then59
  %37 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4467
  %call65 = call %struct.rtx_def* @get_pool_constant_mark(%struct.rtx_def* %37, i8* %marked), !dbg !4468
  br label %if.end67, !dbg !4468

if.else66:                                        ; preds = %if.then59
  store i8 1, i8* %marked, align 1, !dbg !4469
  br label %if.end67

if.end67:                                         ; preds = %if.else66, %if.then64
  br label %if.end74, !dbg !4470

if.else68:                                        ; preds = %if.then54
  %38 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4471
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !4471
  %bf.load69 = load i32, i32* %39, align 8, !dbg !4471
  %bf.clear70 = and i32 %bf.load69, 65535, !dbg !4471
  %cmp71 = icmp eq i32 %bf.clear70, 44, !dbg !4473
  br i1 %cmp71, label %if.then72, label %if.end73, !dbg !4474

if.then72:                                        ; preds = %if.else68
  %40 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !4475
  store %struct.rtx_def* %40, %struct.rtx_def** %addr, align 8, !dbg !4477
  store i8 1, i8* %marked, align 1, !dbg !4478
  br label %if.end73, !dbg !4479

if.end73:                                         ; preds = %if.then72, %if.else68
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.end67
  %41 = load i8, i8* %marked, align 1, !dbg !4480
  %tobool75 = icmp ne i8 %41, 0, !dbg !4480
  br i1 %tobool75, label %if.end77, label %if.then76, !dbg !4482

if.then76:                                        ; preds = %if.end74
  store i32 0, i32* %retval, align 4, !dbg !4483
  br label %return, !dbg !4483

if.end77:                                         ; preds = %if.end74
  br label %if.end78, !dbg !4484

if.end78:                                         ; preds = %if.end77, %land.lhs.true49, %if.else
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4485
  %decl_common = bitcast %union.tree_node* %42 to %struct.tree_decl_common*, !dbg !4485
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4485
  %43 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4485
  %cmp79 = icmp eq %union.tree_node* %43, null, !dbg !4487
  br i1 %cmp79, label %if.then86, label %lor.lhs.false, !dbg !4488

lor.lhs.false:                                    ; preds = %if.end78
  %44 = load i8*, i8** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 0), align 8, !dbg !4489
  %call80 = call i32 @strcmp(i8* %44, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0)), !dbg !4490
  %tobool81 = icmp ne i32 %call80, 0, !dbg !4490
  br i1 %tobool81, label %if.else92, label %land.lhs.true82, !dbg !4491

land.lhs.true82:                                  ; preds = %lor.lhs.false
  %45 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4492
  %decl_common83 = bitcast %union.tree_node* %45 to %struct.tree_decl_common*, !dbg !4492
  %initial84 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common83, i32 0, i32 5, !dbg !4492
  %46 = load %union.tree_node*, %union.tree_node** %initial84, align 8, !dbg !4492
  %47 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4493
  %cmp85 = icmp eq %union.tree_node* %46, %47, !dbg !4494
  br i1 %cmp85, label %if.then86, label %if.else92, !dbg !4495

if.then86:                                        ; preds = %land.lhs.true82, %if.end78
  call void @llvm.dbg.declare(metadata i32* %offs87, metadata !4496, metadata !DIExpression()), !dbg !4498
  store i32 40, i32* %code, align 4, !dbg !4499
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4500
  %call88 = call i8* @dbxout_common_check(%union.tree_node* %48, i32* %offs87), !dbg !4502
  %cmp89 = icmp ne i8* null, %call88, !dbg !4503
  br i1 %cmp89, label %if.then90, label %if.end91, !dbg !4504

if.then90:                                        ; preds = %if.then86
  store %struct.rtx_def* null, %struct.rtx_def** %addr, align 8, !dbg !4505
  %49 = load i32, i32* %offs87, align 4, !dbg !4507
  store i32 %49, i32* %number, align 4, !dbg !4508
  store i32 86, i32* %letter, align 4, !dbg !4509
  store i32 32, i32* %code, align 4, !dbg !4510
  br label %if.end91, !dbg !4511

if.end91:                                         ; preds = %if.then90, %if.then86
  br label %if.end100, !dbg !4512

if.else92:                                        ; preds = %land.lhs.true82, %lor.lhs.false
  %50 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4513
  %decl_with_vis = bitcast %union.tree_node* %50 to %struct.tree_decl_with_vis*, !dbg !4513
  %in_text_section = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4513
  %51 = bitcast i24* %in_text_section to i32*, !dbg !4513
  %bf.load93 = load i32, i32* %51, align 8, !dbg !4513
  %bf.lshr94 = lshr i32 %bf.load93, 4, !dbg !4513
  %bf.clear95 = and i32 %bf.lshr94, 1, !dbg !4513
  %tobool96 = icmp ne i32 %bf.clear95, 0, !dbg !4513
  br i1 %tobool96, label %if.then97, label %if.else98, !dbg !4515

if.then97:                                        ; preds = %if.else92
  store i32 36, i32* %code, align 4, !dbg !4516
  br label %if.end99, !dbg !4517

if.else98:                                        ; preds = %if.else92
  store i32 38, i32* %code, align 4, !dbg !4518
  br label %if.end99

if.end99:                                         ; preds = %if.else98, %if.then97
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.end91
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.end39
  br label %if.end356, !dbg !4520

if.else102:                                       ; preds = %land.lhs.true, %if.end21
  %52 = load i32, i32* %regno, align 4, !dbg !4521
  %cmp103 = icmp sge i32 %52, 0, !dbg !4523
  br i1 %cmp103, label %if.then104, label %if.else106, !dbg !4524

if.then104:                                       ; preds = %if.else102
  store i32 114, i32* %letter, align 4, !dbg !4525
  store i32 64, i32* %code, align 4, !dbg !4527
  %53 = load i32, i32* %regno, align 4, !dbg !4528
  %idxprom = sext i32 %53 to i64, !dbg !4528
  %arrayidx105 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i64 0, i64 %idxprom, !dbg !4528
  %54 = load i32, i32* %arrayidx105, align 4, !dbg !4528
  store i32 %54, i32* %number, align 4, !dbg !4529
  br label %if.end355, !dbg !4530

if.else106:                                       ; preds = %if.else102
  %55 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4531
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !4531
  %bf.load107 = load i32, i32* %56, align 8, !dbg !4531
  %bf.clear108 = and i32 %bf.load107, 65535, !dbg !4531
  %cmp109 = icmp eq i32 %bf.clear108, 43, !dbg !4531
  br i1 %cmp109, label %land.lhs.true110, label %if.else203, !dbg !4533

land.lhs.true110:                                 ; preds = %if.else106
  %57 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4534
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !4534
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !4534
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 0, !dbg !4534
  %rt_rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**, !dbg !4534
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx114, align 8, !dbg !4534
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !4534
  %bf.load115 = load i32, i32* %59, align 8, !dbg !4534
  %bf.clear116 = and i32 %bf.load115, 65535, !dbg !4534
  %cmp117 = icmp eq i32 %bf.clear116, 43, !dbg !4534
  br i1 %cmp117, label %if.then147, label %lor.lhs.false118, !dbg !4535

lor.lhs.false118:                                 ; preds = %land.lhs.true110
  %60 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4536
  %u119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !4536
  %fld120 = bitcast %union.u* %u119 to [1 x %union.rtunion_def]*, !dbg !4536
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i64 0, i64 0, !dbg !4536
  %rt_rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**, !dbg !4536
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx122, align 8, !dbg !4536
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !4536
  %bf.load123 = load i32, i32* %62, align 8, !dbg !4536
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !4536
  %cmp125 = icmp eq i32 %bf.clear124, 37, !dbg !4536
  br i1 %cmp125, label %land.lhs.true126, label %if.else203, !dbg !4537

land.lhs.true126:                                 ; preds = %lor.lhs.false118
  %63 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4538
  %u127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !4538
  %fld128 = bitcast %union.u* %u127 to [1 x %union.rtunion_def]*, !dbg !4538
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i64 0, i64 0, !dbg !4538
  %rt_rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**, !dbg !4538
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx130, align 8, !dbg !4538
  %call131 = call i32 @rhs_regno(%struct.rtx_def* %64), !dbg !4538
  %cmp132 = icmp ne i32 %call131, 6, !dbg !4539
  br i1 %cmp132, label %land.lhs.true133, label %if.else203, !dbg !4540

land.lhs.true133:                                 ; preds = %land.lhs.true126
  %65 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4541
  %u134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !4541
  %fld135 = bitcast %union.u* %u134 to [1 x %union.rtunion_def]*, !dbg !4541
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i64 0, i64 0, !dbg !4541
  %rt_rtx137 = bitcast %union.rtunion_def* %arrayidx136 to %struct.rtx_def**, !dbg !4541
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx137, align 8, !dbg !4541
  %call138 = call i32 @rhs_regno(%struct.rtx_def* %66), !dbg !4541
  %cmp139 = icmp ne i32 %call138, 7, !dbg !4542
  br i1 %cmp139, label %land.lhs.true140, label %if.else203, !dbg !4543

land.lhs.true140:                                 ; preds = %land.lhs.true133
  %67 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4544
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !4544
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !4544
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 0, !dbg !4544
  %rt_rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**, !dbg !4544
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx144, align 8, !dbg !4544
  %call145 = call i32 @rhs_regno(%struct.rtx_def* %68), !dbg !4544
  %cmp146 = icmp ne i32 %call145, 16, !dbg !4545
  br i1 %cmp146, label %if.then147, label %if.else203, !dbg !4546

if.then147:                                       ; preds = %land.lhs.true140, %land.lhs.true110
  %69 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4547
  %u148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !4547
  %fld149 = bitcast %union.u* %u148 to [1 x %union.rtunion_def]*, !dbg !4547
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld149, i64 0, i64 0, !dbg !4547
  %rt_rtx151 = bitcast %union.rtunion_def* %arrayidx150 to %struct.rtx_def**, !dbg !4547
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx151, align 8, !dbg !4547
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !4547
  %bf.load152 = load i32, i32* %71, align 8, !dbg !4547
  %bf.clear153 = and i32 %bf.load152, 65535, !dbg !4547
  %cmp154 = icmp eq i32 %bf.clear153, 37, !dbg !4547
  br i1 %cmp154, label %if.then155, label %if.else171, !dbg !4550

if.then155:                                       ; preds = %if.then147
  store i32 114, i32* %letter, align 4, !dbg !4551
  store i32 64, i32* %code, align 4, !dbg !4553
  %72 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4554
  %u156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !4554
  %fld157 = bitcast %union.u* %u156 to [1 x %union.rtunion_def]*, !dbg !4554
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i64 0, i64 0, !dbg !4554
  %rt_rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**, !dbg !4554
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx159, align 8, !dbg !4554
  %call160 = call i32 @rhs_regno(%struct.rtx_def* %73), !dbg !4554
  %cmp161 = icmp uge i32 %call160, 53, !dbg !4556
  br i1 %cmp161, label %if.then162, label %if.end163, !dbg !4557

if.then162:                                       ; preds = %if.then155
  store i32 0, i32* %retval, align 4, !dbg !4558
  br label %return, !dbg !4558

if.end163:                                        ; preds = %if.then155
  %74 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4559
  %u164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !4559
  %fld165 = bitcast %union.u* %u164 to [1 x %union.rtunion_def]*, !dbg !4559
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i64 0, i64 0, !dbg !4559
  %rt_rtx167 = bitcast %union.rtunion_def* %arrayidx166 to %struct.rtx_def**, !dbg !4559
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx167, align 8, !dbg !4559
  %call168 = call i32 @rhs_regno(%struct.rtx_def* %75), !dbg !4559
  %idxprom169 = zext i32 %call168 to i64, !dbg !4559
  %arrayidx170 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i64 0, i64 %idxprom169, !dbg !4559
  %76 = load i32, i32* %arrayidx170, align 4, !dbg !4559
  store i32 %76, i32* %number, align 4, !dbg !4560
  br label %if.end198, !dbg !4561

if.else171:                                       ; preds = %if.then147
  store i32 128, i32* %code, align 4, !dbg !4562
  %77 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4564
  %u172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !4564
  %fld173 = bitcast %union.u* %u172 to [1 x %union.rtunion_def]*, !dbg !4564
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i64 0, i64 0, !dbg !4564
  %rt_rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**, !dbg !4564
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx175, align 8, !dbg !4564
  %u176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !4564
  %fld177 = bitcast %union.u* %u176 to [1 x %union.rtunion_def]*, !dbg !4564
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i64 0, i64 0, !dbg !4564
  %rt_rtx179 = bitcast %union.rtunion_def* %arrayidx178 to %struct.rtx_def**, !dbg !4564
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx179, align 8, !dbg !4564
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !4564
  %bf.load180 = load i32, i32* %80, align 8, !dbg !4564
  %bf.clear181 = and i32 %bf.load180, 65535, !dbg !4564
  %cmp182 = icmp eq i32 %bf.clear181, 49, !dbg !4564
  br i1 %cmp182, label %cond.true, label %cond.false, !dbg !4564

cond.true:                                        ; preds = %if.else171
  %81 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4564
  %u183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !4564
  %fld184 = bitcast %union.u* %u183 to [1 x %union.rtunion_def]*, !dbg !4564
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i64 0, i64 0, !dbg !4564
  %rt_rtx186 = bitcast %union.rtunion_def* %arrayidx185 to %struct.rtx_def**, !dbg !4564
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx186, align 8, !dbg !4564
  %u187 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !4564
  %fld188 = bitcast %union.u* %u187 to [1 x %union.rtunion_def]*, !dbg !4564
  %arrayidx189 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld188, i64 0, i64 0, !dbg !4564
  %rt_rtx190 = bitcast %union.rtunion_def* %arrayidx189 to %struct.rtx_def**, !dbg !4564
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx190, align 8, !dbg !4564
  %u191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !4564
  %fld192 = bitcast %union.u* %u191 to [1 x %union.rtunion_def]*, !dbg !4564
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i64 0, i64 1, !dbg !4564
  %rt_rtx194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**, !dbg !4564
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx194, align 8, !dbg !4564
  %u195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !4564
  %hwint = bitcast %union.u* %u195 to [1 x i64]*, !dbg !4564
  %arrayidx196 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4564
  %85 = load i64, i64* %arrayidx196, align 8, !dbg !4564
  br label %cond.end, !dbg !4564

cond.false:                                       ; preds = %if.else171
  br label %cond.end, !dbg !4564

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond197 = phi i64 [ %85, %cond.true ], [ 0, %cond.false ], !dbg !4564
  %conv = trunc i64 %cond197 to i32, !dbg !4564
  store i32 %conv, i32* %number, align 4, !dbg !4565
  br label %if.end198

if.end198:                                        ; preds = %cond.end, %if.end163
  %call199 = call %union.tree_node* @make_node_stat(i32 10), !dbg !4566
  store %union.tree_node* %call199, %union.tree_node** %type.addr, align 8, !dbg !4567
  %86 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4568
  %common = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !4568
  %type200 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4568
  %87 = load %union.tree_node*, %union.tree_node** %type200, align 8, !dbg !4568
  %88 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4569
  %common201 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !4569
  %type202 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common201, i32 0, i32 2, !dbg !4569
  store %union.tree_node* %87, %union.tree_node** %type202, align 8, !dbg !4570
  br label %if.end354, !dbg !4571

if.else203:                                       ; preds = %land.lhs.true140, %land.lhs.true133, %land.lhs.true126, %lor.lhs.false118, %if.else106
  %89 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4572
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !4572
  %bf.load204 = load i32, i32* %90, align 8, !dbg !4572
  %bf.clear205 = and i32 %bf.load204, 65535, !dbg !4572
  %cmp206 = icmp eq i32 %bf.clear205, 43, !dbg !4572
  br i1 %cmp206, label %land.lhs.true208, label %if.else242, !dbg !4574

land.lhs.true208:                                 ; preds = %if.else203
  %91 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4575
  %u209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !4575
  %fld210 = bitcast %union.u* %u209 to [1 x %union.rtunion_def]*, !dbg !4575
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i64 0, i64 0, !dbg !4575
  %rt_rtx212 = bitcast %union.rtunion_def* %arrayidx211 to %struct.rtx_def**, !dbg !4575
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx212, align 8, !dbg !4575
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !4575
  %bf.load213 = load i32, i32* %93, align 8, !dbg !4575
  %bf.clear214 = and i32 %bf.load213, 65535, !dbg !4575
  %cmp215 = icmp eq i32 %bf.clear214, 37, !dbg !4575
  br i1 %cmp215, label %if.then217, label %if.else242, !dbg !4576

if.then217:                                       ; preds = %land.lhs.true208
  store i32 128, i32* %code, align 4, !dbg !4577
  %94 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4579
  %u218 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !4579
  %fld219 = bitcast %union.u* %u218 to [1 x %union.rtunion_def]*, !dbg !4579
  %arrayidx220 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld219, i64 0, i64 0, !dbg !4579
  %rt_rtx221 = bitcast %union.rtunion_def* %arrayidx220 to %struct.rtx_def**, !dbg !4579
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx221, align 8, !dbg !4579
  %96 = bitcast %struct.rtx_def* %95 to i32*, !dbg !4579
  %bf.load222 = load i32, i32* %96, align 8, !dbg !4579
  %bf.clear223 = and i32 %bf.load222, 65535, !dbg !4579
  %cmp224 = icmp eq i32 %bf.clear223, 49, !dbg !4579
  br i1 %cmp224, label %cond.true226, label %cond.false238, !dbg !4579

cond.true226:                                     ; preds = %if.then217
  %97 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4579
  %u227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !4579
  %fld228 = bitcast %union.u* %u227 to [1 x %union.rtunion_def]*, !dbg !4579
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i64 0, i64 0, !dbg !4579
  %rt_rtx230 = bitcast %union.rtunion_def* %arrayidx229 to %struct.rtx_def**, !dbg !4579
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx230, align 8, !dbg !4579
  %u231 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1, !dbg !4579
  %fld232 = bitcast %union.u* %u231 to [1 x %union.rtunion_def]*, !dbg !4579
  %arrayidx233 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld232, i64 0, i64 1, !dbg !4579
  %rt_rtx234 = bitcast %union.rtunion_def* %arrayidx233 to %struct.rtx_def**, !dbg !4579
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx234, align 8, !dbg !4579
  %u235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !4579
  %hwint236 = bitcast %union.u* %u235 to [1 x i64]*, !dbg !4579
  %arrayidx237 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint236, i64 0, i64 0, !dbg !4579
  %100 = load i64, i64* %arrayidx237, align 8, !dbg !4579
  br label %cond.end239, !dbg !4579

cond.false238:                                    ; preds = %if.then217
  br label %cond.end239, !dbg !4579

cond.end239:                                      ; preds = %cond.false238, %cond.true226
  %cond240 = phi i64 [ %100, %cond.true226 ], [ 0, %cond.false238 ], !dbg !4579
  %conv241 = trunc i64 %cond240 to i32, !dbg !4579
  store i32 %conv241, i32* %number, align 4, !dbg !4580
  br label %if.end353, !dbg !4581

if.else242:                                       ; preds = %land.lhs.true208, %if.else203
  %101 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4582
  %102 = bitcast %struct.rtx_def* %101 to i32*, !dbg !4582
  %bf.load243 = load i32, i32* %102, align 8, !dbg !4582
  %bf.clear244 = and i32 %bf.load243, 65535, !dbg !4582
  %cmp245 = icmp eq i32 %bf.clear244, 43, !dbg !4582
  br i1 %cmp245, label %land.lhs.true247, label %if.else294, !dbg !4584

land.lhs.true247:                                 ; preds = %if.else242
  %103 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4585
  %u248 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !4585
  %fld249 = bitcast %union.u* %u248 to [1 x %union.rtunion_def]*, !dbg !4585
  %arrayidx250 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld249, i64 0, i64 0, !dbg !4585
  %rt_rtx251 = bitcast %union.rtunion_def* %arrayidx250 to %struct.rtx_def**, !dbg !4585
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx251, align 8, !dbg !4585
  %105 = bitcast %struct.rtx_def* %104 to i32*, !dbg !4585
  %bf.load252 = load i32, i32* %105, align 8, !dbg !4585
  %bf.clear253 = and i32 %bf.load252, 65535, !dbg !4585
  %cmp254 = icmp eq i32 %bf.clear253, 49, !dbg !4586
  br i1 %cmp254, label %land.lhs.true256, label %if.else294, !dbg !4587

land.lhs.true256:                                 ; preds = %land.lhs.true247
  %106 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4588
  %u257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !4588
  %fld258 = bitcast %union.u* %u257 to [1 x %union.rtunion_def]*, !dbg !4588
  %arrayidx259 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld258, i64 0, i64 0, !dbg !4588
  %rt_rtx260 = bitcast %union.rtunion_def* %arrayidx259 to %struct.rtx_def**, !dbg !4588
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx260, align 8, !dbg !4588
  %u261 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1, !dbg !4588
  %fld262 = bitcast %union.u* %u261 to [1 x %union.rtunion_def]*, !dbg !4588
  %arrayidx263 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld262, i64 0, i64 1, !dbg !4588
  %rt_rtx264 = bitcast %union.rtunion_def* %arrayidx263 to %struct.rtx_def**, !dbg !4588
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx264, align 8, !dbg !4588
  %109 = bitcast %struct.rtx_def* %108 to i32*, !dbg !4588
  %bf.load265 = load i32, i32* %109, align 8, !dbg !4588
  %bf.clear266 = and i32 %bf.load265, 65535, !dbg !4588
  %cmp267 = icmp eq i32 %bf.clear266, 30, !dbg !4588
  br i1 %cmp267, label %if.then269, label %if.else294, !dbg !4589

if.then269:                                       ; preds = %land.lhs.true256
  store i32 128, i32* %code, align 4, !dbg !4590
  %110 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4592
  %u270 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !4592
  %fld271 = bitcast %union.u* %u270 to [1 x %union.rtunion_def]*, !dbg !4592
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i64 0, i64 0, !dbg !4592
  %rt_rtx273 = bitcast %union.rtunion_def* %arrayidx272 to %struct.rtx_def**, !dbg !4592
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx273, align 8, !dbg !4592
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !4592
  %bf.load274 = load i32, i32* %112, align 8, !dbg !4592
  %bf.clear275 = and i32 %bf.load274, 65535, !dbg !4592
  %cmp276 = icmp eq i32 %bf.clear275, 49, !dbg !4592
  br i1 %cmp276, label %cond.true278, label %cond.false290, !dbg !4592

cond.true278:                                     ; preds = %if.then269
  %113 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4592
  %u279 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1, !dbg !4592
  %fld280 = bitcast %union.u* %u279 to [1 x %union.rtunion_def]*, !dbg !4592
  %arrayidx281 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld280, i64 0, i64 0, !dbg !4592
  %rt_rtx282 = bitcast %union.rtunion_def* %arrayidx281 to %struct.rtx_def**, !dbg !4592
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx282, align 8, !dbg !4592
  %u283 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !4592
  %fld284 = bitcast %union.u* %u283 to [1 x %union.rtunion_def]*, !dbg !4592
  %arrayidx285 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld284, i64 0, i64 1, !dbg !4592
  %rt_rtx286 = bitcast %union.rtunion_def* %arrayidx285 to %struct.rtx_def**, !dbg !4592
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx286, align 8, !dbg !4592
  %u287 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1, !dbg !4592
  %hwint288 = bitcast %union.u* %u287 to [1 x i64]*, !dbg !4592
  %arrayidx289 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint288, i64 0, i64 0, !dbg !4592
  %116 = load i64, i64* %arrayidx289, align 8, !dbg !4592
  br label %cond.end291, !dbg !4592

cond.false290:                                    ; preds = %if.then269
  br label %cond.end291, !dbg !4592

cond.end291:                                      ; preds = %cond.false290, %cond.true278
  %cond292 = phi i64 [ %116, %cond.true278 ], [ 0, %cond.false290 ], !dbg !4592
  %conv293 = trunc i64 %cond292 to i32, !dbg !4592
  store i32 %conv293, i32* %number, align 4, !dbg !4593
  br label %if.end352, !dbg !4594

if.else294:                                       ; preds = %land.lhs.true256, %land.lhs.true247, %if.else242
  %117 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4595
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !4595
  %bf.load295 = load i32, i32* %118, align 8, !dbg !4595
  %bf.clear296 = and i32 %bf.load295, 65535, !dbg !4595
  %cmp297 = icmp eq i32 %bf.clear296, 43, !dbg !4595
  br i1 %cmp297, label %land.lhs.true299, label %if.else324, !dbg !4597

land.lhs.true299:                                 ; preds = %if.else294
  %119 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4598
  %u300 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1, !dbg !4598
  %fld301 = bitcast %union.u* %u300 to [1 x %union.rtunion_def]*, !dbg !4598
  %arrayidx302 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld301, i64 0, i64 0, !dbg !4598
  %rt_rtx303 = bitcast %union.rtunion_def* %arrayidx302 to %struct.rtx_def**, !dbg !4598
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx303, align 8, !dbg !4598
  %121 = bitcast %struct.rtx_def* %120 to i32*, !dbg !4598
  %bf.load304 = load i32, i32* %121, align 8, !dbg !4598
  %bf.clear305 = and i32 %bf.load304, 65535, !dbg !4598
  %cmp306 = icmp eq i32 %bf.clear305, 35, !dbg !4599
  br i1 %cmp306, label %if.then308, label %if.else324, !dbg !4600

if.then308:                                       ; preds = %land.lhs.true299
  call void @llvm.dbg.declare(metadata i32* %offs309, metadata !4601, metadata !DIExpression()), !dbg !4603
  store i32 40, i32* %code, align 4, !dbg !4604
  store i32 86, i32* %letter, align 4, !dbg !4605
  %122 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4606
  %call310 = call i8* @dbxout_common_check(%union.tree_node* %122, i32* %offs309), !dbg !4608
  %cmp311 = icmp eq i8* null, %call310, !dbg !4609
  br i1 %cmp311, label %if.then313, label %if.else322, !dbg !4610

if.then313:                                       ; preds = %if.then308
  %123 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4611
  %u314 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !4611
  %fld315 = bitcast %union.u* %u314 to [1 x %union.rtunion_def]*, !dbg !4611
  %arrayidx316 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld315, i64 0, i64 0, !dbg !4611
  %rt_rtx317 = bitcast %union.rtunion_def* %arrayidx316 to %struct.rtx_def**, !dbg !4611
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx317, align 8, !dbg !4611
  %u318 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !4611
  %fld319 = bitcast %union.u* %u318 to [1 x %union.rtunion_def]*, !dbg !4611
  %arrayidx320 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld319, i64 0, i64 0, !dbg !4611
  %rt_rtx321 = bitcast %union.rtunion_def* %arrayidx320 to %struct.rtx_def**, !dbg !4611
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx321, align 8, !dbg !4611
  store %struct.rtx_def* %125, %struct.rtx_def** %addr, align 8, !dbg !4612
  br label %if.end323, !dbg !4613

if.else322:                                       ; preds = %if.then308
  store %struct.rtx_def* null, %struct.rtx_def** %addr, align 8, !dbg !4614
  %126 = load i32, i32* %offs309, align 4, !dbg !4616
  store i32 %126, i32* %number, align 4, !dbg !4617
  store i32 32, i32* %code, align 4, !dbg !4618
  br label %if.end323

if.end323:                                        ; preds = %if.else322, %if.then313
  br label %if.end351, !dbg !4619

if.else324:                                       ; preds = %land.lhs.true299, %if.else294
  %127 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4620
  %128 = bitcast %struct.rtx_def* %127 to i32*, !dbg !4620
  %bf.load325 = load i32, i32* %128, align 8, !dbg !4620
  %bf.clear326 = and i32 %bf.load325, 65535, !dbg !4620
  %cmp327 = icmp eq i32 %bf.clear326, 41, !dbg !4622
  br i1 %cmp327, label %if.then329, label %if.else350, !dbg !4623

if.then329:                                       ; preds = %if.else324
  call void @llvm.dbg.declare(metadata %union.tree_node** %subtype, metadata !4624, metadata !DIExpression()), !dbg !4626
  %129 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4627
  %base330 = bitcast %union.tree_node* %129 to %struct.tree_base*, !dbg !4627
  %130 = bitcast %struct.tree_base* %base330 to i64*, !dbg !4627
  %bf.load331 = load i64, i64* %130, align 8, !dbg !4627
  %bf.clear332 = and i64 %bf.load331, 65535, !dbg !4627
  %bf.cast333 = trunc i64 %bf.clear332 to i32, !dbg !4627
  %cmp334 = icmp ne i32 %bf.cast333, 13, !dbg !4629
  br i1 %cmp334, label %if.then336, label %if.end337, !dbg !4630

if.then336:                                       ; preds = %if.then329
  store i32 0, i32* %retval, align 4, !dbg !4631
  br label %return, !dbg !4631

if.end337:                                        ; preds = %if.then329
  %131 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4632
  %common338 = bitcast %union.tree_node* %131 to %struct.tree_common*, !dbg !4632
  %type339 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common338, i32 0, i32 2, !dbg !4632
  %132 = load %union.tree_node*, %union.tree_node** %type339, align 8, !dbg !4632
  store %union.tree_node* %132, %union.tree_node** %subtype, align 8, !dbg !4633
  %133 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4634
  %134 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4636
  %135 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4637
  %u340 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %135, i32 0, i32 1, !dbg !4637
  %fld341 = bitcast %union.u* %u340 to [1 x %union.rtunion_def]*, !dbg !4637
  %arrayidx342 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld341, i64 0, i64 0, !dbg !4637
  %rt_rtx343 = bitcast %union.rtunion_def* %arrayidx342 to %struct.rtx_def**, !dbg !4637
  %136 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx343, align 8, !dbg !4637
  %call344 = call i32 @dbxout_symbol_location(%union.tree_node* %133, %union.tree_node* %134, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i64 0, i64 0), %struct.rtx_def* %136), !dbg !4638
  %137 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4639
  %138 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4641
  %139 = load %struct.rtx_def*, %struct.rtx_def** %home.addr, align 8, !dbg !4642
  %u345 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1, !dbg !4642
  %fld346 = bitcast %union.u* %u345 to [1 x %union.rtunion_def]*, !dbg !4642
  %arrayidx347 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld346, i64 0, i64 1, !dbg !4642
  %rt_rtx348 = bitcast %union.rtunion_def* %arrayidx347 to %struct.rtx_def**, !dbg !4642
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx348, align 8, !dbg !4642
  %call349 = call i32 @dbxout_symbol_location(%union.tree_node* %137, %union.tree_node* %138, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i64 0, i64 0), %struct.rtx_def* %140), !dbg !4643
  store i32 1, i32* %retval, align 4, !dbg !4644
  br label %return, !dbg !4644

if.else350:                                       ; preds = %if.else324
  store i32 0, i32* %retval, align 4, !dbg !4645
  br label %return, !dbg !4645

if.end351:                                        ; preds = %if.end323
  br label %if.end352

if.end352:                                        ; preds = %if.end351, %cond.end291
  br label %if.end353

if.end353:                                        ; preds = %if.end352, %cond.end239
  br label %if.end354

if.end354:                                        ; preds = %if.end353, %if.end198
  br label %if.end355

if.end355:                                        ; preds = %if.end354, %if.then104
  br label %if.end356

if.end356:                                        ; preds = %if.end355, %if.end101
  call void @emit_pending_bincls_if_required(), !dbg !4646
  call void @dbxout_begin_complex_stabs_noforcetext(), !dbg !4647
  %141 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4648
  %142 = load i8*, i8** %suffix.addr, align 8, !dbg !4649
  %143 = load i32, i32* %letter, align 4, !dbg !4650
  call void @dbxout_symbol_name(%union.tree_node* %141, i8* %142, i32 %143), !dbg !4651
  %144 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4652
  call void @dbxout_type(%union.tree_node* %144, i32 0), !dbg !4653
  %145 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4654
  %146 = load i32, i32* %code, align 4, !dbg !4655
  %147 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4656
  %148 = load i32, i32* %number, align 4, !dbg !4657
  call void @dbxout_finish_complex_stabs(%union.tree_node* %145, i32 %146, %struct.rtx_def* %147, i8* null, i32 %148), !dbg !4658
  store i32 1, i32* %retval, align 4, !dbg !4659
  br label %return, !dbg !4659

return:                                           ; preds = %if.end356, %if.else350, %if.end337, %if.then336, %if.then162, %if.then76, %if.then19, %if.then9
  %149 = load i32, i32* %retval, align 4, !dbg !4660
  ret i32 %149, !dbg !4660
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dbxout_syms(%union.tree_node* %syms) #0 !dbg !4661 {
entry:
  %syms.addr = alloca %union.tree_node*, align 8
  %result = alloca i32, align 4
  %comm_prev = alloca i8*, align 8
  %syms_prev = alloca %union.tree_node*, align 8
  %temp = alloca i32, align 4
  %copen = alloca i32, align 4
  %cclos = alloca i32, align 4
  %comm_new = alloca i8*, align 8
  store %union.tree_node* %syms, %union.tree_node** %syms.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %syms.addr, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.declare(metadata i32* %result, metadata !4666, metadata !DIExpression()), !dbg !4667
  store i32 0, i32* %result, align 4, !dbg !4667
  call void @llvm.dbg.declare(metadata i8** %comm_prev, metadata !4668, metadata !DIExpression()), !dbg !4669
  store i8* null, i8** %comm_prev, align 8, !dbg !4669
  call void @llvm.dbg.declare(metadata %union.tree_node** %syms_prev, metadata !4670, metadata !DIExpression()), !dbg !4671
  store %union.tree_node* null, %union.tree_node** %syms_prev, align 8, !dbg !4671
  br label %while.cond, !dbg !4672

while.cond:                                       ; preds = %if.end16, %entry
  %0 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !4673
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4672
  br i1 %tobool, label %while.body, label %while.end, !dbg !4672

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !4674, metadata !DIExpression()), !dbg !4676
  call void @llvm.dbg.declare(metadata i32* %copen, metadata !4677, metadata !DIExpression()), !dbg !4678
  call void @llvm.dbg.declare(metadata i32* %cclos, metadata !4679, metadata !DIExpression()), !dbg !4680
  call void @llvm.dbg.declare(metadata i8** %comm_new, metadata !4681, metadata !DIExpression()), !dbg !4682
  %1 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !4683
  %call = call i8* @dbxout_common_check(%union.tree_node* %1, i32* %temp), !dbg !4684
  store i8* %call, i8** %comm_new, align 8, !dbg !4685
  %2 = load i8*, i8** %comm_new, align 8, !dbg !4686
  %cmp = icmp ne i8* %2, null, !dbg !4687
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4688

land.rhs:                                         ; preds = %while.body
  %3 = load i8*, i8** %comm_prev, align 8, !dbg !4689
  %cmp1 = icmp eq i8* %3, null, !dbg !4690
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !4691

lor.rhs:                                          ; preds = %land.rhs
  %4 = load i8*, i8** %comm_new, align 8, !dbg !4692
  %5 = load i8*, i8** %comm_prev, align 8, !dbg !4693
  %call2 = call i32 @strcmp(i8* %4, i8* %5), !dbg !4694
  %tobool3 = icmp ne i32 %call2, 0, !dbg !4691
  br label %lor.end, !dbg !4691

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %tobool3, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.body
  %7 = phi i1 [ false, %while.body ], [ %6, %lor.end ], !dbg !4695
  %land.ext = zext i1 %7 to i32, !dbg !4688
  store i32 %land.ext, i32* %copen, align 4, !dbg !4696
  %8 = load i8*, i8** %comm_prev, align 8, !dbg !4697
  %cmp4 = icmp ne i8* %8, null, !dbg !4698
  br i1 %cmp4, label %land.rhs5, label %land.end11, !dbg !4699

land.rhs5:                                        ; preds = %land.end
  %9 = load i8*, i8** %comm_new, align 8, !dbg !4700
  %cmp6 = icmp eq i8* %9, null, !dbg !4701
  br i1 %cmp6, label %lor.end10, label %lor.rhs7, !dbg !4702

lor.rhs7:                                         ; preds = %land.rhs5
  %10 = load i8*, i8** %comm_new, align 8, !dbg !4703
  %11 = load i8*, i8** %comm_prev, align 8, !dbg !4704
  %call8 = call i32 @strcmp(i8* %10, i8* %11), !dbg !4705
  %tobool9 = icmp ne i32 %call8, 0, !dbg !4702
  br label %lor.end10, !dbg !4702

lor.end10:                                        ; preds = %lor.rhs7, %land.rhs5
  %12 = phi i1 [ true, %land.rhs5 ], [ %tobool9, %lor.rhs7 ]
  br label %land.end11

land.end11:                                       ; preds = %lor.end10, %land.end
  %13 = phi i1 [ false, %land.end ], [ %12, %lor.end10 ], !dbg !4695
  %land.ext12 = zext i1 %13 to i32, !dbg !4699
  store i32 %land.ext12, i32* %cclos, align 4, !dbg !4706
  %14 = load i32, i32* %cclos, align 4, !dbg !4707
  %tobool13 = icmp ne i32 %14, 0, !dbg !4707
  br i1 %tobool13, label %if.then, label %if.end, !dbg !4709

if.then:                                          ; preds = %land.end11
  %15 = load %union.tree_node*, %union.tree_node** %syms_prev, align 8, !dbg !4710
  %16 = load i8*, i8** %comm_prev, align 8, !dbg !4711
  call void @dbxout_common_name(%union.tree_node* %15, i8* %16, i32 228), !dbg !4712
  br label %if.end, !dbg !4712

if.end:                                           ; preds = %if.then, %land.end11
  %17 = load i32, i32* %copen, align 4, !dbg !4713
  %tobool14 = icmp ne i32 %17, 0, !dbg !4713
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4715

if.then15:                                        ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !4716
  %19 = load i8*, i8** %comm_new, align 8, !dbg !4718
  call void @dbxout_common_name(%union.tree_node* %18, i8* %19, i32 226), !dbg !4719
  %20 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !4720
  store %union.tree_node* %20, %union.tree_node** %syms_prev, align 8, !dbg !4721
  br label %if.end16, !dbg !4722

if.end16:                                         ; preds = %if.then15, %if.end
  %21 = load i8*, i8** %comm_new, align 8, !dbg !4723
  store i8* %21, i8** %comm_prev, align 8, !dbg !4724
  %22 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !4725
  %call17 = call i32 @dbxout_symbol(%union.tree_node* %22, i32 1), !dbg !4726
  %23 = load i32, i32* %result, align 4, !dbg !4727
  %add = add nsw i32 %23, %call17, !dbg !4727
  store i32 %add, i32* %result, align 4, !dbg !4727
  %24 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !4728
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !4728
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4728
  %25 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4728
  store %union.tree_node* %25, %union.tree_node** %syms.addr, align 8, !dbg !4729
  br label %while.cond, !dbg !4672, !llvm.loop !4730

while.end:                                        ; preds = %while.cond
  %26 = load i8*, i8** %comm_prev, align 8, !dbg !4732
  %cmp18 = icmp ne i8* %26, null, !dbg !4734
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !4735

if.then19:                                        ; preds = %while.end
  %27 = load %union.tree_node*, %union.tree_node** %syms_prev, align 8, !dbg !4736
  %28 = load i8*, i8** %comm_prev, align 8, !dbg !4737
  call void @dbxout_common_name(%union.tree_node* %27, i8* %28, i32 228), !dbg !4738
  br label %if.end20, !dbg !4738

if.end20:                                         ; preds = %if.then19, %while.end
  %29 = load i32, i32* %result, align 4, !dbg !4739
  ret i32 %29, !dbg !4740
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @dbxout_common_check(%union.tree_node* %decl, i32* %value) #0 !dbg !4741 {
entry:
  %retval = alloca i8*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca i32*, align 8
  %home = alloca %struct.rtx_def*, align 8
  %sym_addr = alloca %struct.rtx_def*, align 8
  %name = alloca i8*, align 8
  %c_decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4744, metadata !DIExpression()), !dbg !4745
  store i32* %value, i32** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %value.addr, metadata !4746, metadata !DIExpression()), !dbg !4747
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %home, metadata !4748, metadata !DIExpression()), !dbg !4749
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sym_addr, metadata !4750, metadata !DIExpression()), !dbg !4751
  call void @llvm.dbg.declare(metadata i8** %name, metadata !4752, metadata !DIExpression()), !dbg !4753
  store i8* null, i8** %name, align 8, !dbg !4753
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4754
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4754
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4754
  %bf.load = load i64, i64* %1, align 8, !dbg !4754
  %bf.clear = and i64 %bf.load, 65535, !dbg !4754
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4754
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !4756
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4757

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4758
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4758
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4758
  %bf.load2 = load i64, i64* %3, align 8, !dbg !4758
  %bf.lshr = lshr i64 %bf.load2, 26, !dbg !4758
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !4758
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4758
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !4758
  br i1 %tobool, label %lor.lhs.false5, label %if.then, !dbg !4759

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4760
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !4760
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4760
  %5 = bitcast i40* %decl_flag_2 to i64*, !dbg !4760
  %bf.load6 = load i64, i64* %5, align 8, !dbg !4760
  %bf.lshr7 = lshr i64 %bf.load6, 26, !dbg !4760
  %bf.clear8 = and i64 %bf.lshr7, 1, !dbg !4760
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !4760
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !4760
  br i1 %tobool10, label %lor.lhs.false11, label %if.then, !dbg !4761

lor.lhs.false11:                                  ; preds = %lor.lhs.false5
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4762
  %decl_with_vis = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !4762
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4762
  %7 = bitcast i24* %tls_model to i32*, !dbg !4762
  %bf.load12 = load i32, i32* %7, align 8, !dbg !4762
  %bf.lshr13 = lshr i32 %bf.load12, 13, !dbg !4762
  %bf.clear14 = and i32 %bf.lshr13, 7, !dbg !4762
  %cmp15 = icmp sge i32 %bf.clear14, 2, !dbg !4762
  br i1 %cmp15, label %if.then, label %lor.lhs.false16, !dbg !4763

lor.lhs.false16:                                  ; preds = %lor.lhs.false11
  %call = call zeroext i8 @is_fortran(), !dbg !4764
  %tobool17 = icmp ne i8 %call, 0, !dbg !4764
  br i1 %tobool17, label %if.end, label %if.then, !dbg !4765

if.then:                                          ; preds = %lor.lhs.false16, %lor.lhs.false11, %lor.lhs.false5, %lor.lhs.false, %entry
  store i8* null, i8** %retval, align 8, !dbg !4766
  br label %return, !dbg !4766

if.end:                                           ; preds = %lor.lhs.false16
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4767
  %decl_with_rtl = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !4767
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !4767
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !4767
  %tobool18 = icmp ne %struct.rtx_def* %9, null, !dbg !4767
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !4767

cond.true:                                        ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4767
  %decl_with_rtl19 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !4767
  %rtl20 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl19, i32 0, i32 1, !dbg !4767
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl20, align 8, !dbg !4767
  br label %cond.end, !dbg !4767

cond.false:                                       ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4767
  call void @make_decl_rtl(%union.tree_node* %12), !dbg !4767
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4767
  %decl_with_rtl21 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_rtl*, !dbg !4767
  %rtl22 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl21, i32 0, i32 1, !dbg !4767
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtl22, align 8, !dbg !4767
  br label %cond.end, !dbg !4767

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %11, %cond.true ], [ %14, %cond.false ], !dbg !4767
  store %struct.rtx_def* %cond, %struct.rtx_def** %home, align 8, !dbg !4768
  %15 = load %struct.rtx_def*, %struct.rtx_def** %home, align 8, !dbg !4769
  %cmp23 = icmp eq %struct.rtx_def* %15, null, !dbg !4771
  br i1 %cmp23, label %if.then28, label %lor.lhs.false24, !dbg !4772

lor.lhs.false24:                                  ; preds = %cond.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %home, align 8, !dbg !4773
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4773
  %bf.load25 = load i32, i32* %17, align 8, !dbg !4773
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !4773
  %cmp27 = icmp ne i32 %bf.clear26, 43, !dbg !4774
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !4775

if.then28:                                        ; preds = %lor.lhs.false24, %cond.end
  store i8* null, i8** %retval, align 8, !dbg !4776
  br label %return, !dbg !4776

if.end29:                                         ; preds = %lor.lhs.false24
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4777
  %call30 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %18), !dbg !4777
  %call31 = call %struct.rtx_def* @dbxout_expand_expr(%union.tree_node* %call30), !dbg !4778
  store %struct.rtx_def* %call31, %struct.rtx_def** %sym_addr, align 8, !dbg !4779
  %19 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4780
  %cmp32 = icmp eq %struct.rtx_def* %19, null, !dbg !4782
  br i1 %cmp32, label %if.then37, label %lor.lhs.false33, !dbg !4783

lor.lhs.false33:                                  ; preds = %if.end29
  %20 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4784
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !4784
  %bf.load34 = load i32, i32* %21, align 8, !dbg !4784
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !4784
  %cmp36 = icmp ne i32 %bf.clear35, 43, !dbg !4785
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !4786

if.then37:                                        ; preds = %lor.lhs.false33, %if.end29
  store i8* null, i8** %retval, align 8, !dbg !4787
  br label %return, !dbg !4787

if.end38:                                         ; preds = %lor.lhs.false33
  %22 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4788
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4788
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4788
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4788
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4788
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4788
  store %struct.rtx_def* %23, %struct.rtx_def** %sym_addr, align 8, !dbg !4789
  %24 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4790
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !4790
  %bf.load39 = load i32, i32* %25, align 8, !dbg !4790
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !4790
  %cmp41 = icmp eq i32 %bf.clear40, 35, !dbg !4792
  br i1 %cmp41, label %if.then42, label %if.end47, !dbg !4793

if.then42:                                        ; preds = %if.end38
  %26 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4794
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !4794
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !4794
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 0, !dbg !4794
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !4794
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !4794
  store %struct.rtx_def* %27, %struct.rtx_def** %sym_addr, align 8, !dbg !4795
  br label %if.end47, !dbg !4796

if.end47:                                         ; preds = %if.then42, %if.end38
  %28 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4797
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !4797
  %bf.load48 = load i32, i32* %29, align 8, !dbg !4797
  %bf.clear49 = and i32 %bf.load48, 65535, !dbg !4797
  %cmp50 = icmp eq i32 %bf.clear49, 45, !dbg !4799
  br i1 %cmp50, label %land.lhs.true, label %lor.lhs.false51, !dbg !4800

lor.lhs.false51:                                  ; preds = %if.end47
  %30 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4801
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !4801
  %bf.load52 = load i32, i32* %31, align 8, !dbg !4801
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !4801
  %cmp54 = icmp eq i32 %bf.clear53, 49, !dbg !4802
  br i1 %cmp54, label %land.lhs.true, label %if.else168, !dbg !4803

land.lhs.true:                                    ; preds = %lor.lhs.false51, %if.end47
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4804
  %decl_common55 = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !4804
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common55, i32 0, i32 5, !dbg !4804
  %33 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4804
  %cmp56 = icmp eq %union.tree_node* %33, null, !dbg !4805
  br i1 %cmp56, label %if.then57, label %if.else168, !dbg !4806

if.then57:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %c_decl, metadata !4807, metadata !DIExpression()), !dbg !4809
  store %union.tree_node* null, %union.tree_node** %c_decl, align 8, !dbg !4809
  %34 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4810
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4810
  %bf.load58 = load i32, i32* %35, align 8, !dbg !4810
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !4810
  switch i32 %bf.clear59, label %sw.default [
    i32 49, label %sw.bb
    i32 45, label %sw.bb139
  ], !dbg !4811

sw.bb:                                            ; preds = %if.then57
  %36 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4812
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !4812
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !4812
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 0, !dbg !4812
  %rt_rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**, !dbg !4812
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx63, align 8, !dbg !4812
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !4812
  %bf.load64 = load i32, i32* %38, align 8, !dbg !4812
  %bf.clear65 = and i32 %bf.load64, 65535, !dbg !4812
  %cmp66 = icmp eq i32 %bf.clear65, 30, !dbg !4812
  br i1 %cmp66, label %if.then67, label %if.else, !dbg !4815

if.then67:                                        ; preds = %sw.bb
  %39 = load i8* (i8*)*, i8* (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 52), align 8, !dbg !4816
  %40 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4818
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !4818
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !4818
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 1, !dbg !4818
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !4818
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !4818
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !4818
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !4818
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 0, !dbg !4818
  %rt_str = bitcast %union.rtunion_def* %arrayidx74 to i8**, !dbg !4818
  %42 = load i8*, i8** %rt_str, align 8, !dbg !4818
  %call75 = call i8* %39(i8* %42), !dbg !4819
  store i8* %call75, i8** %name, align 8, !dbg !4820
  %43 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4821
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !4821
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !4821
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 0, !dbg !4821
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !4821
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx79, align 8, !dbg !4821
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !4821
  %hwint = bitcast %union.u* %u80 to [1 x i64]*, !dbg !4821
  %arrayidx81 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4821
  %45 = load i64, i64* %arrayidx81, align 8, !dbg !4821
  %conv = trunc i64 %45 to i32, !dbg !4821
  %46 = load i32*, i32** %value.addr, align 8, !dbg !4822
  store i32 %conv, i32* %46, align 4, !dbg !4823
  %47 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4824
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !4824
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 1, !dbg !4824
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !4824
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !4824
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !4824
  %bf.load86 = load i32, i32* %49, align 8, !dbg !4824
  %bf.lshr87 = lshr i32 %bf.load86, 26, !dbg !4824
  %bf.clear88 = and i32 %bf.lshr87, 1, !dbg !4824
  %tobool89 = icmp ne i32 %bf.clear88, 0, !dbg !4824
  br i1 %tobool89, label %cond.true90, label %cond.false91, !dbg !4824

cond.true90:                                      ; preds = %if.then67
  br label %cond.end99, !dbg !4824

cond.false91:                                     ; preds = %if.then67
  %50 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4824
  %u92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !4824
  %fld93 = bitcast %union.u* %u92 to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i64 0, i64 1, !dbg !4824
  %rt_rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**, !dbg !4824
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx95, align 8, !dbg !4824
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !4824
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 2, !dbg !4824
  %rt_tree = bitcast %union.rtunion_def* %arrayidx98 to %union.tree_node**, !dbg !4824
  %52 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !4824
  br label %cond.end99, !dbg !4824

cond.end99:                                       ; preds = %cond.false91, %cond.true90
  %cond100 = phi %union.tree_node* [ null, %cond.true90 ], [ %52, %cond.false91 ], !dbg !4824
  store %union.tree_node* %cond100, %union.tree_node** %c_decl, align 8, !dbg !4825
  br label %if.end138, !dbg !4826

if.else:                                          ; preds = %sw.bb
  %53 = load i8* (i8*)*, i8* (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 52), align 8, !dbg !4827
  %54 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4829
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !4829
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !4829
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 0, !dbg !4829
  %rt_rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**, !dbg !4829
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx104, align 8, !dbg !4829
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !4829
  %fld106 = bitcast %union.u* %u105 to [1 x %union.rtunion_def]*, !dbg !4829
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i64 0, i64 0, !dbg !4829
  %rt_str108 = bitcast %union.rtunion_def* %arrayidx107 to i8**, !dbg !4829
  %56 = load i8*, i8** %rt_str108, align 8, !dbg !4829
  %call109 = call i8* %53(i8* %56), !dbg !4830
  store i8* %call109, i8** %name, align 8, !dbg !4831
  %57 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4832
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !4832
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !4832
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 1, !dbg !4832
  %rt_rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**, !dbg !4832
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx113, align 8, !dbg !4832
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !4832
  %hwint115 = bitcast %union.u* %u114 to [1 x i64]*, !dbg !4832
  %arrayidx116 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint115, i64 0, i64 0, !dbg !4832
  %59 = load i64, i64* %arrayidx116, align 8, !dbg !4832
  %conv117 = trunc i64 %59 to i32, !dbg !4832
  %60 = load i32*, i32** %value.addr, align 8, !dbg !4833
  store i32 %conv117, i32* %60, align 4, !dbg !4834
  %61 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4835
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !4835
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !4835
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 0, !dbg !4835
  %rt_rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**, !dbg !4835
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx121, align 8, !dbg !4835
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !4835
  %bf.load122 = load i32, i32* %63, align 8, !dbg !4835
  %bf.lshr123 = lshr i32 %bf.load122, 26, !dbg !4835
  %bf.clear124 = and i32 %bf.lshr123, 1, !dbg !4835
  %tobool125 = icmp ne i32 %bf.clear124, 0, !dbg !4835
  br i1 %tobool125, label %cond.true126, label %cond.false127, !dbg !4835

cond.true126:                                     ; preds = %if.else
  br label %cond.end136, !dbg !4835

cond.false127:                                    ; preds = %if.else
  %64 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4835
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !4835
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !4835
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 0, !dbg !4835
  %rt_rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**, !dbg !4835
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx131, align 8, !dbg !4835
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !4835
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !4835
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 2, !dbg !4835
  %rt_tree135 = bitcast %union.rtunion_def* %arrayidx134 to %union.tree_node**, !dbg !4835
  %66 = load %union.tree_node*, %union.tree_node** %rt_tree135, align 8, !dbg !4835
  br label %cond.end136, !dbg !4835

cond.end136:                                      ; preds = %cond.false127, %cond.true126
  %cond137 = phi %union.tree_node* [ null, %cond.true126 ], [ %66, %cond.false127 ], !dbg !4835
  store %union.tree_node* %cond137, %union.tree_node** %c_decl, align 8, !dbg !4836
  br label %if.end138

if.end138:                                        ; preds = %cond.end136, %cond.end99
  br label %sw.epilog, !dbg !4837

sw.bb139:                                         ; preds = %if.then57
  %67 = load i8* (i8*)*, i8* (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 52), align 8, !dbg !4838
  %68 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4839
  %u140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !4839
  %fld141 = bitcast %union.u* %u140 to [1 x %union.rtunion_def]*, !dbg !4839
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld141, i64 0, i64 0, !dbg !4839
  %rt_str143 = bitcast %union.rtunion_def* %arrayidx142 to i8**, !dbg !4839
  %69 = load i8*, i8** %rt_str143, align 8, !dbg !4839
  %call144 = call i8* %67(i8* %69), !dbg !4840
  store i8* %call144, i8** %name, align 8, !dbg !4841
  %70 = load i32*, i32** %value.addr, align 8, !dbg !4842
  store i32 0, i32* %70, align 4, !dbg !4843
  %71 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4844
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !4844
  %bf.load145 = load i32, i32* %72, align 8, !dbg !4844
  %bf.lshr146 = lshr i32 %bf.load145, 26, !dbg !4844
  %bf.clear147 = and i32 %bf.lshr146, 1, !dbg !4844
  %tobool148 = icmp ne i32 %bf.clear147, 0, !dbg !4844
  br i1 %tobool148, label %cond.true149, label %cond.false150, !dbg !4844

cond.true149:                                     ; preds = %sw.bb139
  br label %cond.end155, !dbg !4844

cond.false150:                                    ; preds = %sw.bb139
  %73 = load %struct.rtx_def*, %struct.rtx_def** %sym_addr, align 8, !dbg !4844
  %u151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !4844
  %fld152 = bitcast %union.u* %u151 to [1 x %union.rtunion_def]*, !dbg !4844
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i64 0, i64 2, !dbg !4844
  %rt_tree154 = bitcast %union.rtunion_def* %arrayidx153 to %union.tree_node**, !dbg !4844
  %74 = load %union.tree_node*, %union.tree_node** %rt_tree154, align 8, !dbg !4844
  br label %cond.end155, !dbg !4844

cond.end155:                                      ; preds = %cond.false150, %cond.true149
  %cond156 = phi %union.tree_node* [ null, %cond.true149 ], [ %74, %cond.false150 ], !dbg !4844
  store %union.tree_node* %cond156, %union.tree_node** %c_decl, align 8, !dbg !4845
  br label %sw.epilog, !dbg !4846

sw.default:                                       ; preds = %if.then57
  call void (i8*, ...) @error(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.58, i64 0, i64 0)), !dbg !4847
  br label %sw.epilog, !dbg !4848

sw.epilog:                                        ; preds = %sw.default, %cond.end155, %if.end138
  %75 = load %union.tree_node*, %union.tree_node** %c_decl, align 8, !dbg !4849
  %cmp157 = icmp eq %union.tree_node* %75, null, !dbg !4851
  br i1 %cmp157, label %if.then166, label %lor.lhs.false159, !dbg !4852

lor.lhs.false159:                                 ; preds = %sw.epilog
  %76 = load %union.tree_node*, %union.tree_node** %c_decl, align 8, !dbg !4853
  %base160 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !4853
  %77 = bitcast %struct.tree_base* %base160 to i64*, !dbg !4853
  %bf.load161 = load i64, i64* %77, align 8, !dbg !4853
  %bf.lshr162 = lshr i64 %bf.load161, 27, !dbg !4853
  %bf.clear163 = and i64 %bf.lshr162, 1, !dbg !4853
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !4853
  %tobool165 = icmp ne i32 %bf.cast164, 0, !dbg !4853
  br i1 %tobool165, label %if.end167, label %if.then166, !dbg !4854

if.then166:                                       ; preds = %lor.lhs.false159, %sw.epilog
  store i8* null, i8** %name, align 8, !dbg !4855
  br label %if.end167, !dbg !4856

if.end167:                                        ; preds = %if.then166, %lor.lhs.false159
  br label %if.end169, !dbg !4857

if.else168:                                       ; preds = %land.lhs.true, %lor.lhs.false51
  store i8* null, i8** %name, align 8, !dbg !4858
  br label %if.end169

if.end169:                                        ; preds = %if.else168, %if.end167
  %78 = load i8*, i8** %name, align 8, !dbg !4859
  store i8* %78, i8** %retval, align 8, !dbg !4860
  br label %return, !dbg !4860

return:                                           ; preds = %if.end169, %if.then37, %if.then28, %if.then
  %79 = load i8*, i8** %retval, align 8, !dbg !4861
  ret i8* %79, !dbg !4861
}

declare dso_local i32 @strcmp(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_common_name(%union.tree_node* %decl, i8* %name, i32 %op) #0 !dbg !4862 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %op.addr = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4865, metadata !DIExpression()), !dbg !4866
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4867, metadata !DIExpression()), !dbg !4868
  store i32 %op, i32* %op.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op.addr, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @dbxout_begin_complex_stabs(), !dbg !4871
  %0 = load i8*, i8** %name.addr, align 8, !dbg !4872
  %call = call i64 @strlen(i8* %0), !dbg !4872
  store i64 %call, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4872
  %1 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4872
  %2 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4872
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2, !dbg !4872
  %3 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !4872
  %cmp = icmp ugt i8* %add.ptr, %3, !dbg !4872
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4872

cond.true:                                        ; preds = %entry
  %4 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4872
  %conv = trunc i64 %4 to i32, !dbg !4872
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv), !dbg !4872
  br label %cond.end, !dbg !4872

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4872

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4872
  %5 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4872
  %6 = load i8*, i8** %name.addr, align 8, !dbg !4872
  %7 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4872
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %6, i64 %7, i1 false), !dbg !4872
  %8 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !4872
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4872
  %add.ptr1 = getelementptr inbounds i8, i8* %9, i64 %8, !dbg !4872
  store i8* %add.ptr1, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !4872
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4873
  %11 = load i32, i32* %op.addr, align 4, !dbg !4874
  call void @dbxout_finish_complex_stabs(%union.tree_node* %10, i32 %11, %struct.rtx_def* null, i8* null, i32 0), !dbg !4875
  ret void, !dbg !4876
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_parms(%union.tree_node* %parms) #0 !dbg !4877 {
entry:
  %parms.addr = alloca %union.tree_node*, align 8
  %eff_type = alloca %union.tree_node*, align 8
  %letter = alloca i8, align 1
  %code = alloca i32, align 4
  %number = alloca i32, align 4
  %inrtl = alloca %struct.rtx_def*, align 8
  %best_rtl = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %parms, %union.tree_node** %parms.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parms.addr, metadata !4878, metadata !DIExpression()), !dbg !4879
  %0 = load i32, i32* @debug_nesting, align 4, !dbg !4880
  %inc = add nsw i32 %0, 1, !dbg !4880
  store i32 %inc, i32* @debug_nesting, align 4, !dbg !4880
  call void @emit_pending_bincls_if_required(), !dbg !4881
  br label %for.cond, !dbg !4882

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4883
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !4886
  br i1 %tobool, label %for.body, label %for.end, !dbg !4886

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4887
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !4887
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !4887
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4887
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !4887
  br i1 %tobool1, label %land.lhs.true, label %if.end511, !dbg !4889

land.lhs.true:                                    ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4890
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !4890
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4890
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4890
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4891
  %cmp = icmp ne %union.tree_node* %5, %6, !dbg !4892
  br i1 %cmp, label %land.lhs.true2, label %if.end511, !dbg !4893

land.lhs.true2:                                   ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4894
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4894
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !4894
  %bf.load = load i64, i64* %8, align 8, !dbg !4894
  %bf.clear = and i64 %bf.load, 65535, !dbg !4894
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4894
  %idxprom = zext i32 %bf.cast to i64, !dbg !4894
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !4894
  %arrayidx3 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !4894
  %9 = load i8, i8* %arrayidx3, align 1, !dbg !4894
  %conv = zext i8 %9 to i32, !dbg !4894
  %tobool4 = icmp ne i32 %conv, 0, !dbg !4894
  br i1 %tobool4, label %land.lhs.true5, label %if.end511, !dbg !4894

land.lhs.true5:                                   ; preds = %land.lhs.true2
  %10 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4894
  %decl_with_rtl = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !4894
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !4894
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !4894
  %cmp6 = icmp ne %struct.rtx_def* %11, null, !dbg !4894
  br i1 %cmp6, label %land.lhs.true8, label %if.end511, !dbg !4895

land.lhs.true8:                                   ; preds = %land.lhs.true5
  %12 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4896
  %parm_decl = bitcast %union.tree_node* %12 to %struct.tree_parm_decl*, !dbg !4896
  %incoming_rtl = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 1, !dbg !4896
  %13 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl, align 8, !dbg !4896
  %tobool9 = icmp ne %struct.rtx_def* %13, null, !dbg !4896
  br i1 %tobool9, label %if.then, label %if.end511, !dbg !4897

if.then:                                          ; preds = %land.lhs.true8
  call void @llvm.dbg.declare(metadata %union.tree_node** %eff_type, metadata !4898, metadata !DIExpression()), !dbg !4900
  call void @llvm.dbg.declare(metadata i8* %letter, metadata !4901, metadata !DIExpression()), !dbg !4902
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4903, metadata !DIExpression()), !dbg !4904
  call void @llvm.dbg.declare(metadata i32* %number, metadata !4905, metadata !DIExpression()), !dbg !4906
  %14 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4907
  %parm_decl10 = bitcast %union.tree_node* %14 to %struct.tree_parm_decl*, !dbg !4907
  %incoming_rtl11 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl10, i32 0, i32 1, !dbg !4907
  %15 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl11, align 8, !dbg !4907
  %call = call %struct.rtx_def* @eliminate_regs(%struct.rtx_def* %15, i32 0, %struct.rtx_def* null), !dbg !4908
  %16 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4909
  %parm_decl12 = bitcast %union.tree_node* %16 to %struct.tree_parm_decl*, !dbg !4909
  %incoming_rtl13 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl12, i32 0, i32 1, !dbg !4909
  store %struct.rtx_def* %call, %struct.rtx_def** %incoming_rtl13, align 8, !dbg !4910
  %17 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4911
  %18 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4911
  %decl_with_rtl14 = bitcast %union.tree_node* %18 to %struct.tree_decl_with_rtl*, !dbg !4911
  %rtl15 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl14, i32 0, i32 1, !dbg !4911
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl15, align 8, !dbg !4911
  %tobool16 = icmp ne %struct.rtx_def* %19, null, !dbg !4911
  br i1 %tobool16, label %cond.true, label %cond.false, !dbg !4911

cond.true:                                        ; preds = %if.then
  %20 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4911
  %decl_with_rtl17 = bitcast %union.tree_node* %20 to %struct.tree_decl_with_rtl*, !dbg !4911
  %rtl18 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl17, i32 0, i32 1, !dbg !4911
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl18, align 8, !dbg !4911
  br label %cond.end, !dbg !4911

cond.false:                                       ; preds = %if.then
  %22 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4911
  call void @make_decl_rtl(%union.tree_node* %22), !dbg !4911
  %23 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4911
  %decl_with_rtl19 = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !4911
  %rtl20 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl19, i32 0, i32 1, !dbg !4911
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl20, align 8, !dbg !4911
  br label %cond.end, !dbg !4911

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %21, %cond.true ], [ %24, %cond.false ], !dbg !4911
  %call21 = call %struct.rtx_def* @eliminate_regs(%struct.rtx_def* %cond, i32 0, %struct.rtx_def* null), !dbg !4911
  call void @set_decl_rtl(%union.tree_node* %17, %struct.rtx_def* %call21), !dbg !4911
  %25 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4912
  %parm_decl22 = bitcast %union.tree_node* %25 to %struct.tree_parm_decl*, !dbg !4912
  %incoming_rtl23 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl22, i32 0, i32 1, !dbg !4912
  %26 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl23, align 8, !dbg !4912
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !4912
  %bf.load24 = load i32, i32* %27, align 8, !dbg !4912
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !4912
  %cmp26 = icmp eq i32 %bf.clear25, 43, !dbg !4912
  br i1 %cmp26, label %if.then28, label %if.else53, !dbg !4914

if.then28:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %inrtl, metadata !4915, metadata !DIExpression()), !dbg !4917
  %28 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4918
  %parm_decl29 = bitcast %union.tree_node* %28 to %struct.tree_parm_decl*, !dbg !4918
  %incoming_rtl30 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl29, i32 0, i32 1, !dbg !4918
  %29 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl30, align 8, !dbg !4918
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !4918
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4918
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4918
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !4918
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4918
  store %struct.rtx_def* %30, %struct.rtx_def** %inrtl, align 8, !dbg !4917
  %31 = load %struct.rtx_def*, %struct.rtx_def** %inrtl, align 8, !dbg !4919
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !4919
  %bf.load32 = load i32, i32* %32, align 8, !dbg !4919
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !4919
  %cmp34 = icmp eq i32 %bf.clear33, 49, !dbg !4921
  br i1 %cmp34, label %land.lhs.true36, label %if.else, !dbg !4922

land.lhs.true36:                                  ; preds = %if.then28
  %33 = load %struct.rtx_def*, %struct.rtx_def** %inrtl, align 8, !dbg !4923
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4923
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !4923
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !4923
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !4923
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !4923
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4923
  %bf.load41 = load i32, i32* %35, align 8, !dbg !4923
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !4923
  %cmp43 = icmp eq i32 %bf.clear42, 30, !dbg !4923
  br i1 %cmp43, label %if.then45, label %if.else, !dbg !4924

if.then45:                                        ; preds = %land.lhs.true36
  %36 = load %struct.rtx_def*, %struct.rtx_def** %inrtl, align 8, !dbg !4925
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !4925
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !4925
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 1, !dbg !4925
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !4925
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !4925
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !4925
  %hwint = bitcast %union.u* %u50 to [1 x i64]*, !dbg !4925
  %arrayidx51 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4925
  %38 = load i64, i64* %arrayidx51, align 8, !dbg !4925
  %conv52 = trunc i64 %38 to i32, !dbg !4925
  store i32 %conv52, i32* %number, align 4, !dbg !4926
  br label %if.end, !dbg !4927

if.else:                                          ; preds = %land.lhs.true36, %if.then28
  store i32 0, i32* %number, align 4, !dbg !4928
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then45
  store i32 160, i32* %code, align 4, !dbg !4929
  %39 = load i32, i32* %number, align 4, !dbg !4930
  store i32 %39, i32* %number, align 4, !dbg !4931
  store i8 112, i8* %letter, align 1, !dbg !4932
  %40 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4933
  %decl_common = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !4933
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4933
  %41 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4933
  store %union.tree_node* %41, %union.tree_node** %eff_type, align 8, !dbg !4934
  br label %if.end465, !dbg !4935

if.else53:                                        ; preds = %cond.end
  %42 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4936
  %decl_with_rtl54 = bitcast %union.tree_node* %42 to %struct.tree_decl_with_rtl*, !dbg !4936
  %rtl55 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl54, i32 0, i32 1, !dbg !4936
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtl55, align 8, !dbg !4936
  %tobool56 = icmp ne %struct.rtx_def* %43, null, !dbg !4936
  br i1 %tobool56, label %cond.true57, label %cond.false60, !dbg !4936

cond.true57:                                      ; preds = %if.else53
  %44 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4936
  %decl_with_rtl58 = bitcast %union.tree_node* %44 to %struct.tree_decl_with_rtl*, !dbg !4936
  %rtl59 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl58, i32 0, i32 1, !dbg !4936
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtl59, align 8, !dbg !4936
  br label %cond.end63, !dbg !4936

cond.false60:                                     ; preds = %if.else53
  %46 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4936
  call void @make_decl_rtl(%union.tree_node* %46), !dbg !4936
  %47 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4936
  %decl_with_rtl61 = bitcast %union.tree_node* %47 to %struct.tree_decl_with_rtl*, !dbg !4936
  %rtl62 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl61, i32 0, i32 1, !dbg !4936
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtl62, align 8, !dbg !4936
  br label %cond.end63, !dbg !4936

cond.end63:                                       ; preds = %cond.false60, %cond.true57
  %cond64 = phi %struct.rtx_def* [ %45, %cond.true57 ], [ %48, %cond.false60 ], !dbg !4936
  %49 = bitcast %struct.rtx_def* %cond64 to i32*, !dbg !4936
  %bf.load65 = load i32, i32* %49, align 8, !dbg !4936
  %bf.clear66 = and i32 %bf.load65, 65535, !dbg !4936
  %cmp67 = icmp eq i32 %bf.clear66, 37, !dbg !4936
  br i1 %cmp67, label %if.then69, label %if.else124, !dbg !4938

if.then69:                                        ; preds = %cond.end63
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %best_rtl, metadata !4939, metadata !DIExpression()), !dbg !4941
  store i32 64, i32* %code, align 4, !dbg !4942
  store i8 80, i8* %letter, align 1, !dbg !4943
  %50 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4944
  %common70 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !4944
  %type71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 2, !dbg !4944
  %51 = load %union.tree_node*, %union.tree_node** %type71, align 8, !dbg !4944
  store %union.tree_node* %51, %union.tree_node** %eff_type, align 8, !dbg !4945
  %52 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4946
  %decl_with_rtl72 = bitcast %union.tree_node* %52 to %struct.tree_decl_with_rtl*, !dbg !4946
  %rtl73 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl72, i32 0, i32 1, !dbg !4946
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl73, align 8, !dbg !4946
  %tobool74 = icmp ne %struct.rtx_def* %53, null, !dbg !4946
  br i1 %tobool74, label %cond.true75, label %cond.false78, !dbg !4946

cond.true75:                                      ; preds = %if.then69
  %54 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4946
  %decl_with_rtl76 = bitcast %union.tree_node* %54 to %struct.tree_decl_with_rtl*, !dbg !4946
  %rtl77 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl76, i32 0, i32 1, !dbg !4946
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtl77, align 8, !dbg !4946
  br label %cond.end81, !dbg !4946

cond.false78:                                     ; preds = %if.then69
  %56 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4946
  call void @make_decl_rtl(%union.tree_node* %56), !dbg !4946
  %57 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4946
  %decl_with_rtl79 = bitcast %union.tree_node* %57 to %struct.tree_decl_with_rtl*, !dbg !4946
  %rtl80 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl79, i32 0, i32 1, !dbg !4946
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtl80, align 8, !dbg !4946
  br label %cond.end81, !dbg !4946

cond.end81:                                       ; preds = %cond.false78, %cond.true75
  %cond82 = phi %struct.rtx_def* [ %55, %cond.true75 ], [ %58, %cond.false78 ], !dbg !4946
  %call83 = call i32 @rhs_regno(%struct.rtx_def* %cond82), !dbg !4946
  %cmp84 = icmp ult i32 %call83, 53, !dbg !4948
  br i1 %cmp84, label %if.then86, label %if.else98, !dbg !4949

if.then86:                                        ; preds = %cond.end81
  %59 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4950
  %decl_with_rtl87 = bitcast %union.tree_node* %59 to %struct.tree_decl_with_rtl*, !dbg !4950
  %rtl88 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl87, i32 0, i32 1, !dbg !4950
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtl88, align 8, !dbg !4950
  %tobool89 = icmp ne %struct.rtx_def* %60, null, !dbg !4950
  br i1 %tobool89, label %cond.true90, label %cond.false93, !dbg !4950

cond.true90:                                      ; preds = %if.then86
  %61 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4950
  %decl_with_rtl91 = bitcast %union.tree_node* %61 to %struct.tree_decl_with_rtl*, !dbg !4950
  %rtl92 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl91, i32 0, i32 1, !dbg !4950
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtl92, align 8, !dbg !4950
  br label %cond.end96, !dbg !4950

cond.false93:                                     ; preds = %if.then86
  %63 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4950
  call void @make_decl_rtl(%union.tree_node* %63), !dbg !4950
  %64 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4950
  %decl_with_rtl94 = bitcast %union.tree_node* %64 to %struct.tree_decl_with_rtl*, !dbg !4950
  %rtl95 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl94, i32 0, i32 1, !dbg !4950
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtl95, align 8, !dbg !4950
  br label %cond.end96, !dbg !4950

cond.end96:                                       ; preds = %cond.false93, %cond.true90
  %cond97 = phi %struct.rtx_def* [ %62, %cond.true90 ], [ %65, %cond.false93 ], !dbg !4950
  store %struct.rtx_def* %cond97, %struct.rtx_def** %best_rtl, align 8, !dbg !4951
  br label %if.end120, !dbg !4952

if.else98:                                        ; preds = %cond.end81
  %66 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4953
  %parm_decl99 = bitcast %union.tree_node* %66 to %struct.tree_parm_decl*, !dbg !4953
  %incoming_rtl100 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl99, i32 0, i32 1, !dbg !4953
  %67 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl100, align 8, !dbg !4953
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !4953
  %bf.load101 = load i32, i32* %68, align 8, !dbg !4953
  %bf.clear102 = and i32 %bf.load101, 65535, !dbg !4953
  %cmp103 = icmp eq i32 %bf.clear102, 15, !dbg !4955
  br i1 %cmp103, label %if.then105, label %if.else116, !dbg !4956

if.then105:                                       ; preds = %if.else98
  %69 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4957
  %parm_decl106 = bitcast %union.tree_node* %69 to %struct.tree_parm_decl*, !dbg !4957
  %incoming_rtl107 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl106, i32 0, i32 1, !dbg !4957
  %70 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl107, align 8, !dbg !4957
  %u108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !4957
  %fld109 = bitcast %union.u* %u108 to [1 x %union.rtunion_def]*, !dbg !4957
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i64 0, i64 0, !dbg !4957
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtvec_def**, !dbg !4957
  %71 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4957
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %71, i32 0, i32 1, !dbg !4957
  %arrayidx111 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !4957
  %72 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx111, align 8, !dbg !4957
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !4957
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !4957
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 0, !dbg !4957
  %rt_rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**, !dbg !4957
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx115, align 8, !dbg !4957
  store %struct.rtx_def* %73, %struct.rtx_def** %best_rtl, align 8, !dbg !4958
  br label %if.end119, !dbg !4959

if.else116:                                       ; preds = %if.else98
  %74 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4960
  %parm_decl117 = bitcast %union.tree_node* %74 to %struct.tree_parm_decl*, !dbg !4960
  %incoming_rtl118 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl117, i32 0, i32 1, !dbg !4960
  %75 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl118, align 8, !dbg !4960
  store %struct.rtx_def* %75, %struct.rtx_def** %best_rtl, align 8, !dbg !4961
  br label %if.end119

if.end119:                                        ; preds = %if.else116, %if.then105
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %cond.end96
  %76 = load %struct.rtx_def*, %struct.rtx_def** %best_rtl, align 8, !dbg !4962
  %call121 = call i32 @rhs_regno(%struct.rtx_def* %76), !dbg !4962
  %idxprom122 = zext i32 %call121 to i64, !dbg !4962
  %arrayidx123 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i64 0, i64 %idxprom122, !dbg !4962
  %77 = load i32, i32* %arrayidx123, align 4, !dbg !4962
  store i32 %77, i32* %number, align 4, !dbg !4963
  br label %if.end464, !dbg !4964

if.else124:                                       ; preds = %cond.end63
  %78 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4965
  %decl_with_rtl125 = bitcast %union.tree_node* %78 to %struct.tree_decl_with_rtl*, !dbg !4965
  %rtl126 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl125, i32 0, i32 1, !dbg !4965
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtl126, align 8, !dbg !4965
  %tobool127 = icmp ne %struct.rtx_def* %79, null, !dbg !4965
  br i1 %tobool127, label %cond.true128, label %cond.false131, !dbg !4965

cond.true128:                                     ; preds = %if.else124
  %80 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4965
  %decl_with_rtl129 = bitcast %union.tree_node* %80 to %struct.tree_decl_with_rtl*, !dbg !4965
  %rtl130 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl129, i32 0, i32 1, !dbg !4965
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtl130, align 8, !dbg !4965
  br label %cond.end134, !dbg !4965

cond.false131:                                    ; preds = %if.else124
  %82 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4965
  call void @make_decl_rtl(%union.tree_node* %82), !dbg !4965
  %83 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4965
  %decl_with_rtl132 = bitcast %union.tree_node* %83 to %struct.tree_decl_with_rtl*, !dbg !4965
  %rtl133 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl132, i32 0, i32 1, !dbg !4965
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtl133, align 8, !dbg !4965
  br label %cond.end134, !dbg !4965

cond.end134:                                      ; preds = %cond.false131, %cond.true128
  %cond135 = phi %struct.rtx_def* [ %81, %cond.true128 ], [ %84, %cond.false131 ], !dbg !4965
  %85 = bitcast %struct.rtx_def* %cond135 to i32*, !dbg !4965
  %bf.load136 = load i32, i32* %85, align 8, !dbg !4965
  %bf.clear137 = and i32 %bf.load136, 65535, !dbg !4965
  %cmp138 = icmp eq i32 %bf.clear137, 43, !dbg !4965
  br i1 %cmp138, label %land.lhs.true140, label %if.else264, !dbg !4967

land.lhs.true140:                                 ; preds = %cond.end134
  %86 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4968
  %decl_with_rtl141 = bitcast %union.tree_node* %86 to %struct.tree_decl_with_rtl*, !dbg !4968
  %rtl142 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl141, i32 0, i32 1, !dbg !4968
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtl142, align 8, !dbg !4968
  %tobool143 = icmp ne %struct.rtx_def* %87, null, !dbg !4968
  br i1 %tobool143, label %cond.true144, label %cond.false147, !dbg !4968

cond.true144:                                     ; preds = %land.lhs.true140
  %88 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4968
  %decl_with_rtl145 = bitcast %union.tree_node* %88 to %struct.tree_decl_with_rtl*, !dbg !4968
  %rtl146 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl145, i32 0, i32 1, !dbg !4968
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rtl146, align 8, !dbg !4968
  br label %cond.end150, !dbg !4968

cond.false147:                                    ; preds = %land.lhs.true140
  %90 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4968
  call void @make_decl_rtl(%union.tree_node* %90), !dbg !4968
  %91 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4968
  %decl_with_rtl148 = bitcast %union.tree_node* %91 to %struct.tree_decl_with_rtl*, !dbg !4968
  %rtl149 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl148, i32 0, i32 1, !dbg !4968
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rtl149, align 8, !dbg !4968
  br label %cond.end150, !dbg !4968

cond.end150:                                      ; preds = %cond.false147, %cond.true144
  %cond151 = phi %struct.rtx_def* [ %89, %cond.true144 ], [ %92, %cond.false147 ], !dbg !4968
  %u152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond151, i32 0, i32 1, !dbg !4968
  %fld153 = bitcast %union.u* %u152 to [1 x %union.rtunion_def]*, !dbg !4968
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i64 0, i64 0, !dbg !4968
  %rt_rtx155 = bitcast %union.rtunion_def* %arrayidx154 to %struct.rtx_def**, !dbg !4968
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx155, align 8, !dbg !4968
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !4968
  %bf.load156 = load i32, i32* %94, align 8, !dbg !4968
  %bf.clear157 = and i32 %bf.load156, 65535, !dbg !4968
  %cmp158 = icmp eq i32 %bf.clear157, 37, !dbg !4968
  br i1 %cmp158, label %land.lhs.true160, label %if.else264, !dbg !4969

land.lhs.true160:                                 ; preds = %cond.end150
  %95 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4970
  %decl_with_rtl161 = bitcast %union.tree_node* %95 to %struct.tree_decl_with_rtl*, !dbg !4970
  %rtl162 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl161, i32 0, i32 1, !dbg !4970
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtl162, align 8, !dbg !4970
  %tobool163 = icmp ne %struct.rtx_def* %96, null, !dbg !4970
  br i1 %tobool163, label %cond.true164, label %cond.false167, !dbg !4970

cond.true164:                                     ; preds = %land.lhs.true160
  %97 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4970
  %decl_with_rtl165 = bitcast %union.tree_node* %97 to %struct.tree_decl_with_rtl*, !dbg !4970
  %rtl166 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl165, i32 0, i32 1, !dbg !4970
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtl166, align 8, !dbg !4970
  br label %cond.end170, !dbg !4970

cond.false167:                                    ; preds = %land.lhs.true160
  %99 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4970
  call void @make_decl_rtl(%union.tree_node* %99), !dbg !4970
  %100 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4970
  %decl_with_rtl168 = bitcast %union.tree_node* %100 to %struct.tree_decl_with_rtl*, !dbg !4970
  %rtl169 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl168, i32 0, i32 1, !dbg !4970
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtl169, align 8, !dbg !4970
  br label %cond.end170, !dbg !4970

cond.end170:                                      ; preds = %cond.false167, %cond.true164
  %cond171 = phi %struct.rtx_def* [ %98, %cond.true164 ], [ %101, %cond.false167 ], !dbg !4970
  %u172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond171, i32 0, i32 1, !dbg !4970
  %fld173 = bitcast %union.u* %u172 to [1 x %union.rtunion_def]*, !dbg !4970
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i64 0, i64 0, !dbg !4970
  %rt_rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**, !dbg !4970
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx175, align 8, !dbg !4970
  %call176 = call i32 @rhs_regno(%struct.rtx_def* %102), !dbg !4970
  %cmp177 = icmp ne i32 %call176, 6, !dbg !4971
  br i1 %cmp177, label %land.lhs.true179, label %if.else264, !dbg !4972

land.lhs.true179:                                 ; preds = %cond.end170
  %103 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4973
  %decl_with_rtl180 = bitcast %union.tree_node* %103 to %struct.tree_decl_with_rtl*, !dbg !4973
  %rtl181 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl180, i32 0, i32 1, !dbg !4973
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rtl181, align 8, !dbg !4973
  %tobool182 = icmp ne %struct.rtx_def* %104, null, !dbg !4973
  br i1 %tobool182, label %cond.true183, label %cond.false186, !dbg !4973

cond.true183:                                     ; preds = %land.lhs.true179
  %105 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4973
  %decl_with_rtl184 = bitcast %union.tree_node* %105 to %struct.tree_decl_with_rtl*, !dbg !4973
  %rtl185 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl184, i32 0, i32 1, !dbg !4973
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rtl185, align 8, !dbg !4973
  br label %cond.end189, !dbg !4973

cond.false186:                                    ; preds = %land.lhs.true179
  %107 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4973
  call void @make_decl_rtl(%union.tree_node* %107), !dbg !4973
  %108 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4973
  %decl_with_rtl187 = bitcast %union.tree_node* %108 to %struct.tree_decl_with_rtl*, !dbg !4973
  %rtl188 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl187, i32 0, i32 1, !dbg !4973
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rtl188, align 8, !dbg !4973
  br label %cond.end189, !dbg !4973

cond.end189:                                      ; preds = %cond.false186, %cond.true183
  %cond190 = phi %struct.rtx_def* [ %106, %cond.true183 ], [ %109, %cond.false186 ], !dbg !4973
  %u191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond190, i32 0, i32 1, !dbg !4973
  %fld192 = bitcast %union.u* %u191 to [1 x %union.rtunion_def]*, !dbg !4973
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i64 0, i64 0, !dbg !4973
  %rt_rtx194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**, !dbg !4973
  %110 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx194, align 8, !dbg !4973
  %call195 = call i32 @rhs_regno(%struct.rtx_def* %110), !dbg !4973
  %cmp196 = icmp ne i32 %call195, 7, !dbg !4974
  br i1 %cmp196, label %land.lhs.true198, label %if.else264, !dbg !4975

land.lhs.true198:                                 ; preds = %cond.end189
  %111 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4976
  %decl_with_rtl199 = bitcast %union.tree_node* %111 to %struct.tree_decl_with_rtl*, !dbg !4976
  %rtl200 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl199, i32 0, i32 1, !dbg !4976
  %112 = load %struct.rtx_def*, %struct.rtx_def** %rtl200, align 8, !dbg !4976
  %tobool201 = icmp ne %struct.rtx_def* %112, null, !dbg !4976
  br i1 %tobool201, label %cond.true202, label %cond.false205, !dbg !4976

cond.true202:                                     ; preds = %land.lhs.true198
  %113 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4976
  %decl_with_rtl203 = bitcast %union.tree_node* %113 to %struct.tree_decl_with_rtl*, !dbg !4976
  %rtl204 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl203, i32 0, i32 1, !dbg !4976
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rtl204, align 8, !dbg !4976
  br label %cond.end208, !dbg !4976

cond.false205:                                    ; preds = %land.lhs.true198
  %115 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4976
  call void @make_decl_rtl(%union.tree_node* %115), !dbg !4976
  %116 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4976
  %decl_with_rtl206 = bitcast %union.tree_node* %116 to %struct.tree_decl_with_rtl*, !dbg !4976
  %rtl207 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl206, i32 0, i32 1, !dbg !4976
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rtl207, align 8, !dbg !4976
  br label %cond.end208, !dbg !4976

cond.end208:                                      ; preds = %cond.false205, %cond.true202
  %cond209 = phi %struct.rtx_def* [ %114, %cond.true202 ], [ %117, %cond.false205 ], !dbg !4976
  %u210 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond209, i32 0, i32 1, !dbg !4976
  %fld211 = bitcast %union.u* %u210 to [1 x %union.rtunion_def]*, !dbg !4976
  %arrayidx212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld211, i64 0, i64 0, !dbg !4976
  %rt_rtx213 = bitcast %union.rtunion_def* %arrayidx212 to %struct.rtx_def**, !dbg !4976
  %118 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx213, align 8, !dbg !4976
  %call214 = call i32 @rhs_regno(%struct.rtx_def* %118), !dbg !4976
  %cmp215 = icmp ne i32 %call214, 16, !dbg !4977
  br i1 %cmp215, label %if.then217, label %if.else264, !dbg !4978

if.then217:                                       ; preds = %cond.end208
  store i32 64, i32* %code, align 4, !dbg !4979
  %119 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !4981
  %conv218 = zext i8 %119 to i32, !dbg !4981
  %tobool219 = icmp ne i32 %conv218, 0, !dbg !4981
  %120 = zext i1 %tobool219 to i64, !dbg !4981
  %cond220 = select i1 %tobool219, i32 97, i32 80, !dbg !4981
  %conv221 = trunc i32 %cond220 to i8, !dbg !4982
  store i8 %conv221, i8* %letter, align 1, !dbg !4983
  %121 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4984
  %common222 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !4984
  %type223 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common222, i32 0, i32 2, !dbg !4984
  %122 = load %union.tree_node*, %union.tree_node** %type223, align 8, !dbg !4984
  store %union.tree_node* %122, %union.tree_node** %eff_type, align 8, !dbg !4985
  %123 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4986
  %decl_with_rtl224 = bitcast %union.tree_node* %123 to %struct.tree_decl_with_rtl*, !dbg !4986
  %rtl225 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl224, i32 0, i32 1, !dbg !4986
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtl225, align 8, !dbg !4986
  %tobool226 = icmp ne %struct.rtx_def* %124, null, !dbg !4986
  br i1 %tobool226, label %cond.true227, label %cond.false230, !dbg !4986

cond.true227:                                     ; preds = %if.then217
  %125 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4986
  %decl_with_rtl228 = bitcast %union.tree_node* %125 to %struct.tree_decl_with_rtl*, !dbg !4986
  %rtl229 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl228, i32 0, i32 1, !dbg !4986
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtl229, align 8, !dbg !4986
  br label %cond.end233, !dbg !4986

cond.false230:                                    ; preds = %if.then217
  %127 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4986
  call void @make_decl_rtl(%union.tree_node* %127), !dbg !4986
  %128 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4986
  %decl_with_rtl231 = bitcast %union.tree_node* %128 to %struct.tree_decl_with_rtl*, !dbg !4986
  %rtl232 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl231, i32 0, i32 1, !dbg !4986
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtl232, align 8, !dbg !4986
  br label %cond.end233, !dbg !4986

cond.end233:                                      ; preds = %cond.false230, %cond.true227
  %cond234 = phi %struct.rtx_def* [ %126, %cond.true227 ], [ %129, %cond.false230 ], !dbg !4986
  %u235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond234, i32 0, i32 1, !dbg !4986
  %fld236 = bitcast %union.u* %u235 to [1 x %union.rtunion_def]*, !dbg !4986
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i64 0, i64 0, !dbg !4986
  %rt_rtx238 = bitcast %union.rtunion_def* %arrayidx237 to %struct.rtx_def**, !dbg !4986
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx238, align 8, !dbg !4986
  %call239 = call i32 @rhs_regno(%struct.rtx_def* %130), !dbg !4986
  %cmp240 = icmp ult i32 %call239, 53, !dbg !4988
  br i1 %cmp240, label %if.then242, label %if.else259, !dbg !4989

if.then242:                                       ; preds = %cond.end233
  %131 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4990
  %decl_with_rtl243 = bitcast %union.tree_node* %131 to %struct.tree_decl_with_rtl*, !dbg !4990
  %rtl244 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl243, i32 0, i32 1, !dbg !4990
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rtl244, align 8, !dbg !4990
  %tobool245 = icmp ne %struct.rtx_def* %132, null, !dbg !4990
  br i1 %tobool245, label %cond.true246, label %cond.false249, !dbg !4990

cond.true246:                                     ; preds = %if.then242
  %133 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4990
  %decl_with_rtl247 = bitcast %union.tree_node* %133 to %struct.tree_decl_with_rtl*, !dbg !4990
  %rtl248 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl247, i32 0, i32 1, !dbg !4990
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtl248, align 8, !dbg !4990
  br label %cond.end252, !dbg !4990

cond.false249:                                    ; preds = %if.then242
  %135 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4990
  call void @make_decl_rtl(%union.tree_node* %135), !dbg !4990
  %136 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4990
  %decl_with_rtl250 = bitcast %union.tree_node* %136 to %struct.tree_decl_with_rtl*, !dbg !4990
  %rtl251 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl250, i32 0, i32 1, !dbg !4990
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rtl251, align 8, !dbg !4990
  br label %cond.end252, !dbg !4990

cond.end252:                                      ; preds = %cond.false249, %cond.true246
  %cond253 = phi %struct.rtx_def* [ %134, %cond.true246 ], [ %137, %cond.false249 ], !dbg !4990
  %u254 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond253, i32 0, i32 1, !dbg !4990
  %fld255 = bitcast %union.u* %u254 to [1 x %union.rtunion_def]*, !dbg !4990
  %arrayidx256 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld255, i64 0, i64 0, !dbg !4990
  %rt_rtx257 = bitcast %union.rtunion_def* %arrayidx256 to %struct.rtx_def**, !dbg !4990
  %138 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx257, align 8, !dbg !4990
  %call258 = call i32 @rhs_regno(%struct.rtx_def* %138), !dbg !4990
  store i32 %call258, i32* %number, align 4, !dbg !4991
  br label %if.end263, !dbg !4992

if.else259:                                       ; preds = %cond.end233
  %139 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4993
  %parm_decl260 = bitcast %union.tree_node* %139 to %struct.tree_parm_decl*, !dbg !4993
  %incoming_rtl261 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl260, i32 0, i32 1, !dbg !4993
  %140 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl261, align 8, !dbg !4993
  %call262 = call i32 @rhs_regno(%struct.rtx_def* %140), !dbg !4993
  store i32 %call262, i32* %number, align 4, !dbg !4994
  br label %if.end263

if.end263:                                        ; preds = %if.else259, %cond.end252
  br label %if.end463, !dbg !4995

if.else264:                                       ; preds = %cond.end208, %cond.end189, %cond.end170, %cond.end150, %cond.end134
  %141 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4996
  %decl_with_rtl265 = bitcast %union.tree_node* %141 to %struct.tree_decl_with_rtl*, !dbg !4996
  %rtl266 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl265, i32 0, i32 1, !dbg !4996
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rtl266, align 8, !dbg !4996
  %tobool267 = icmp ne %struct.rtx_def* %142, null, !dbg !4996
  br i1 %tobool267, label %cond.true268, label %cond.false271, !dbg !4996

cond.true268:                                     ; preds = %if.else264
  %143 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4996
  %decl_with_rtl269 = bitcast %union.tree_node* %143 to %struct.tree_decl_with_rtl*, !dbg !4996
  %rtl270 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl269, i32 0, i32 1, !dbg !4996
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rtl270, align 8, !dbg !4996
  br label %cond.end274, !dbg !4996

cond.false271:                                    ; preds = %if.else264
  %145 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4996
  call void @make_decl_rtl(%union.tree_node* %145), !dbg !4996
  %146 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4996
  %decl_with_rtl272 = bitcast %union.tree_node* %146 to %struct.tree_decl_with_rtl*, !dbg !4996
  %rtl273 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl272, i32 0, i32 1, !dbg !4996
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rtl273, align 8, !dbg !4996
  br label %cond.end274, !dbg !4996

cond.end274:                                      ; preds = %cond.false271, %cond.true268
  %cond275 = phi %struct.rtx_def* [ %144, %cond.true268 ], [ %147, %cond.false271 ], !dbg !4996
  %148 = bitcast %struct.rtx_def* %cond275 to i32*, !dbg !4996
  %bf.load276 = load i32, i32* %148, align 8, !dbg !4996
  %bf.clear277 = and i32 %bf.load276, 65535, !dbg !4996
  %cmp278 = icmp eq i32 %bf.clear277, 43, !dbg !4996
  br i1 %cmp278, label %land.lhs.true280, label %if.else356, !dbg !4998

land.lhs.true280:                                 ; preds = %cond.end274
  %149 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4999
  %decl_with_rtl281 = bitcast %union.tree_node* %149 to %struct.tree_decl_with_rtl*, !dbg !4999
  %rtl282 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl281, i32 0, i32 1, !dbg !4999
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtl282, align 8, !dbg !4999
  %tobool283 = icmp ne %struct.rtx_def* %150, null, !dbg !4999
  br i1 %tobool283, label %cond.true284, label %cond.false287, !dbg !4999

cond.true284:                                     ; preds = %land.lhs.true280
  %151 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4999
  %decl_with_rtl285 = bitcast %union.tree_node* %151 to %struct.tree_decl_with_rtl*, !dbg !4999
  %rtl286 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl285, i32 0, i32 1, !dbg !4999
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rtl286, align 8, !dbg !4999
  br label %cond.end290, !dbg !4999

cond.false287:                                    ; preds = %land.lhs.true280
  %153 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4999
  call void @make_decl_rtl(%union.tree_node* %153), !dbg !4999
  %154 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !4999
  %decl_with_rtl288 = bitcast %union.tree_node* %154 to %struct.tree_decl_with_rtl*, !dbg !4999
  %rtl289 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl288, i32 0, i32 1, !dbg !4999
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtl289, align 8, !dbg !4999
  br label %cond.end290, !dbg !4999

cond.end290:                                      ; preds = %cond.false287, %cond.true284
  %cond291 = phi %struct.rtx_def* [ %152, %cond.true284 ], [ %155, %cond.false287 ], !dbg !4999
  %u292 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond291, i32 0, i32 1, !dbg !4999
  %fld293 = bitcast %union.u* %u292 to [1 x %union.rtunion_def]*, !dbg !4999
  %arrayidx294 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld293, i64 0, i64 0, !dbg !4999
  %rt_rtx295 = bitcast %union.rtunion_def* %arrayidx294 to %struct.rtx_def**, !dbg !4999
  %156 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx295, align 8, !dbg !4999
  %157 = bitcast %struct.rtx_def* %156 to i32*, !dbg !4999
  %bf.load296 = load i32, i32* %157, align 8, !dbg !4999
  %bf.clear297 = and i32 %bf.load296, 65535, !dbg !4999
  %cmp298 = icmp eq i32 %bf.clear297, 43, !dbg !4999
  br i1 %cmp298, label %if.then300, label %if.else356, !dbg !5000

if.then300:                                       ; preds = %cond.end290
  store i32 160, i32* %code, align 4, !dbg !5001
  store i8 118, i8* %letter, align 1, !dbg !5003
  %158 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5004
  %common301 = bitcast %union.tree_node* %158 to %struct.tree_common*, !dbg !5004
  %type302 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common301, i32 0, i32 2, !dbg !5004
  %159 = load %union.tree_node*, %union.tree_node** %type302, align 8, !dbg !5004
  store %union.tree_node* %159, %union.tree_node** %eff_type, align 8, !dbg !5005
  %160 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5006
  %decl_with_rtl303 = bitcast %union.tree_node* %160 to %struct.tree_decl_with_rtl*, !dbg !5006
  %rtl304 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl303, i32 0, i32 1, !dbg !5006
  %161 = load %struct.rtx_def*, %struct.rtx_def** %rtl304, align 8, !dbg !5006
  %tobool305 = icmp ne %struct.rtx_def* %161, null, !dbg !5006
  br i1 %tobool305, label %cond.true306, label %cond.false309, !dbg !5006

cond.true306:                                     ; preds = %if.then300
  %162 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5006
  %decl_with_rtl307 = bitcast %union.tree_node* %162 to %struct.tree_decl_with_rtl*, !dbg !5006
  %rtl308 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl307, i32 0, i32 1, !dbg !5006
  %163 = load %struct.rtx_def*, %struct.rtx_def** %rtl308, align 8, !dbg !5006
  br label %cond.end312, !dbg !5006

cond.false309:                                    ; preds = %if.then300
  %164 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5006
  call void @make_decl_rtl(%union.tree_node* %164), !dbg !5006
  %165 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5006
  %decl_with_rtl310 = bitcast %union.tree_node* %165 to %struct.tree_decl_with_rtl*, !dbg !5006
  %rtl311 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl310, i32 0, i32 1, !dbg !5006
  %166 = load %struct.rtx_def*, %struct.rtx_def** %rtl311, align 8, !dbg !5006
  br label %cond.end312, !dbg !5006

cond.end312:                                      ; preds = %cond.false309, %cond.true306
  %cond313 = phi %struct.rtx_def* [ %163, %cond.true306 ], [ %166, %cond.false309 ], !dbg !5006
  %u314 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond313, i32 0, i32 1, !dbg !5006
  %fld315 = bitcast %union.u* %u314 to [1 x %union.rtunion_def]*, !dbg !5006
  %arrayidx316 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld315, i64 0, i64 0, !dbg !5006
  %rt_rtx317 = bitcast %union.rtunion_def* %arrayidx316 to %struct.rtx_def**, !dbg !5006
  %167 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx317, align 8, !dbg !5006
  %u318 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !5006
  %fld319 = bitcast %union.u* %u318 to [1 x %union.rtunion_def]*, !dbg !5006
  %arrayidx320 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld319, i64 0, i64 0, !dbg !5006
  %rt_rtx321 = bitcast %union.rtunion_def* %arrayidx320 to %struct.rtx_def**, !dbg !5006
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx321, align 8, !dbg !5006
  %169 = bitcast %struct.rtx_def* %168 to i32*, !dbg !5006
  %bf.load322 = load i32, i32* %169, align 8, !dbg !5006
  %bf.clear323 = and i32 %bf.load322, 65535, !dbg !5006
  %cmp324 = icmp eq i32 %bf.clear323, 37, !dbg !5006
  br i1 %cmp324, label %if.else354, label %if.then326, !dbg !5008

if.then326:                                       ; preds = %cond.end312
  %170 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5009
  %decl_with_rtl327 = bitcast %union.tree_node* %170 to %struct.tree_decl_with_rtl*, !dbg !5009
  %rtl328 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl327, i32 0, i32 1, !dbg !5009
  %171 = load %struct.rtx_def*, %struct.rtx_def** %rtl328, align 8, !dbg !5009
  %tobool329 = icmp ne %struct.rtx_def* %171, null, !dbg !5009
  br i1 %tobool329, label %cond.true330, label %cond.false333, !dbg !5009

cond.true330:                                     ; preds = %if.then326
  %172 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5009
  %decl_with_rtl331 = bitcast %union.tree_node* %172 to %struct.tree_decl_with_rtl*, !dbg !5009
  %rtl332 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl331, i32 0, i32 1, !dbg !5009
  %173 = load %struct.rtx_def*, %struct.rtx_def** %rtl332, align 8, !dbg !5009
  br label %cond.end336, !dbg !5009

cond.false333:                                    ; preds = %if.then326
  %174 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5009
  call void @make_decl_rtl(%union.tree_node* %174), !dbg !5009
  %175 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5009
  %decl_with_rtl334 = bitcast %union.tree_node* %175 to %struct.tree_decl_with_rtl*, !dbg !5009
  %rtl335 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl334, i32 0, i32 1, !dbg !5009
  %176 = load %struct.rtx_def*, %struct.rtx_def** %rtl335, align 8, !dbg !5009
  br label %cond.end336, !dbg !5009

cond.end336:                                      ; preds = %cond.false333, %cond.true330
  %cond337 = phi %struct.rtx_def* [ %173, %cond.true330 ], [ %176, %cond.false333 ], !dbg !5009
  %u338 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond337, i32 0, i32 1, !dbg !5009
  %fld339 = bitcast %union.u* %u338 to [1 x %union.rtunion_def]*, !dbg !5009
  %arrayidx340 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld339, i64 0, i64 0, !dbg !5009
  %rt_rtx341 = bitcast %union.rtunion_def* %arrayidx340 to %struct.rtx_def**, !dbg !5009
  %177 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx341, align 8, !dbg !5009
  %u342 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1, !dbg !5009
  %fld343 = bitcast %union.u* %u342 to [1 x %union.rtunion_def]*, !dbg !5009
  %arrayidx344 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld343, i64 0, i64 0, !dbg !5009
  %rt_rtx345 = bitcast %union.rtunion_def* %arrayidx344 to %struct.rtx_def**, !dbg !5009
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx345, align 8, !dbg !5009
  %u346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1, !dbg !5009
  %fld347 = bitcast %union.u* %u346 to [1 x %union.rtunion_def]*, !dbg !5009
  %arrayidx348 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld347, i64 0, i64 1, !dbg !5009
  %rt_rtx349 = bitcast %union.rtunion_def* %arrayidx348 to %struct.rtx_def**, !dbg !5009
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx349, align 8, !dbg !5009
  %u350 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1, !dbg !5009
  %hwint351 = bitcast %union.u* %u350 to [1 x i64]*, !dbg !5009
  %arrayidx352 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint351, i64 0, i64 0, !dbg !5009
  %180 = load i64, i64* %arrayidx352, align 8, !dbg !5009
  %conv353 = trunc i64 %180 to i32, !dbg !5009
  store i32 %conv353, i32* %number, align 4, !dbg !5010
  br label %if.end355, !dbg !5011

if.else354:                                       ; preds = %cond.end312
  store i32 0, i32* %number, align 4, !dbg !5012
  br label %if.end355

if.end355:                                        ; preds = %if.else354, %cond.end336
  %181 = load i32, i32* %number, align 4, !dbg !5013
  store i32 %181, i32* %number, align 4, !dbg !5014
  br label %if.end462, !dbg !5015

if.else356:                                       ; preds = %cond.end290, %cond.end274
  %182 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5016
  %decl_with_rtl357 = bitcast %union.tree_node* %182 to %struct.tree_decl_with_rtl*, !dbg !5016
  %rtl358 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl357, i32 0, i32 1, !dbg !5016
  %183 = load %struct.rtx_def*, %struct.rtx_def** %rtl358, align 8, !dbg !5016
  %tobool359 = icmp ne %struct.rtx_def* %183, null, !dbg !5016
  br i1 %tobool359, label %cond.true360, label %cond.false363, !dbg !5016

cond.true360:                                     ; preds = %if.else356
  %184 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5016
  %decl_with_rtl361 = bitcast %union.tree_node* %184 to %struct.tree_decl_with_rtl*, !dbg !5016
  %rtl362 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl361, i32 0, i32 1, !dbg !5016
  %185 = load %struct.rtx_def*, %struct.rtx_def** %rtl362, align 8, !dbg !5016
  br label %cond.end366, !dbg !5016

cond.false363:                                    ; preds = %if.else356
  %186 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5016
  call void @make_decl_rtl(%union.tree_node* %186), !dbg !5016
  %187 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5016
  %decl_with_rtl364 = bitcast %union.tree_node* %187 to %struct.tree_decl_with_rtl*, !dbg !5016
  %rtl365 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl364, i32 0, i32 1, !dbg !5016
  %188 = load %struct.rtx_def*, %struct.rtx_def** %rtl365, align 8, !dbg !5016
  br label %cond.end366, !dbg !5016

cond.end366:                                      ; preds = %cond.false363, %cond.true360
  %cond367 = phi %struct.rtx_def* [ %185, %cond.true360 ], [ %188, %cond.false363 ], !dbg !5016
  %189 = bitcast %struct.rtx_def* %cond367 to i32*, !dbg !5016
  %bf.load368 = load i32, i32* %189, align 8, !dbg !5016
  %bf.clear369 = and i32 %bf.load368, 65535, !dbg !5016
  %cmp370 = icmp eq i32 %bf.clear369, 43, !dbg !5016
  br i1 %cmp370, label %land.lhs.true372, label %if.else460, !dbg !5018

land.lhs.true372:                                 ; preds = %cond.end366
  %190 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5019
  %decl_with_rtl373 = bitcast %union.tree_node* %190 to %struct.tree_decl_with_rtl*, !dbg !5019
  %rtl374 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl373, i32 0, i32 1, !dbg !5019
  %191 = load %struct.rtx_def*, %struct.rtx_def** %rtl374, align 8, !dbg !5019
  %tobool375 = icmp ne %struct.rtx_def* %191, null, !dbg !5019
  br i1 %tobool375, label %cond.true376, label %cond.false379, !dbg !5019

cond.true376:                                     ; preds = %land.lhs.true372
  %192 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5019
  %decl_with_rtl377 = bitcast %union.tree_node* %192 to %struct.tree_decl_with_rtl*, !dbg !5019
  %rtl378 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl377, i32 0, i32 1, !dbg !5019
  %193 = load %struct.rtx_def*, %struct.rtx_def** %rtl378, align 8, !dbg !5019
  br label %cond.end382, !dbg !5019

cond.false379:                                    ; preds = %land.lhs.true372
  %194 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5019
  call void @make_decl_rtl(%union.tree_node* %194), !dbg !5019
  %195 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5019
  %decl_with_rtl380 = bitcast %union.tree_node* %195 to %struct.tree_decl_with_rtl*, !dbg !5019
  %rtl381 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl380, i32 0, i32 1, !dbg !5019
  %196 = load %struct.rtx_def*, %struct.rtx_def** %rtl381, align 8, !dbg !5019
  br label %cond.end382, !dbg !5019

cond.end382:                                      ; preds = %cond.false379, %cond.true376
  %cond383 = phi %struct.rtx_def* [ %193, %cond.true376 ], [ %196, %cond.false379 ], !dbg !5019
  %u384 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond383, i32 0, i32 1, !dbg !5019
  %fld385 = bitcast %union.u* %u384 to [1 x %union.rtunion_def]*, !dbg !5019
  %arrayidx386 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld385, i64 0, i64 0, !dbg !5019
  %rt_rtx387 = bitcast %union.rtunion_def* %arrayidx386 to %struct.rtx_def**, !dbg !5019
  %197 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx387, align 8, !dbg !5019
  %198 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5020
  %cmp388 = icmp ne %struct.rtx_def* %197, %198, !dbg !5021
  br i1 %cmp388, label %land.lhs.true390, label %if.else460, !dbg !5022

land.lhs.true390:                                 ; preds = %cond.end382
  %199 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5023
  %decl_with_rtl391 = bitcast %union.tree_node* %199 to %struct.tree_decl_with_rtl*, !dbg !5023
  %rtl392 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl391, i32 0, i32 1, !dbg !5023
  %200 = load %struct.rtx_def*, %struct.rtx_def** %rtl392, align 8, !dbg !5023
  %tobool393 = icmp ne %struct.rtx_def* %200, null, !dbg !5023
  br i1 %tobool393, label %cond.true394, label %cond.false397, !dbg !5023

cond.true394:                                     ; preds = %land.lhs.true390
  %201 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5023
  %decl_with_rtl395 = bitcast %union.tree_node* %201 to %struct.tree_decl_with_rtl*, !dbg !5023
  %rtl396 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl395, i32 0, i32 1, !dbg !5023
  %202 = load %struct.rtx_def*, %struct.rtx_def** %rtl396, align 8, !dbg !5023
  br label %cond.end400, !dbg !5023

cond.false397:                                    ; preds = %land.lhs.true390
  %203 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5023
  call void @make_decl_rtl(%union.tree_node* %203), !dbg !5023
  %204 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5023
  %decl_with_rtl398 = bitcast %union.tree_node* %204 to %struct.tree_decl_with_rtl*, !dbg !5023
  %rtl399 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl398, i32 0, i32 1, !dbg !5023
  %205 = load %struct.rtx_def*, %struct.rtx_def** %rtl399, align 8, !dbg !5023
  br label %cond.end400, !dbg !5023

cond.end400:                                      ; preds = %cond.false397, %cond.true394
  %cond401 = phi %struct.rtx_def* [ %202, %cond.true394 ], [ %205, %cond.false397 ], !dbg !5023
  %u402 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond401, i32 0, i32 1, !dbg !5023
  %fld403 = bitcast %union.u* %u402 to [1 x %union.rtunion_def]*, !dbg !5023
  %arrayidx404 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld403, i64 0, i64 0, !dbg !5023
  %rt_rtx405 = bitcast %union.rtunion_def* %arrayidx404 to %struct.rtx_def**, !dbg !5023
  %206 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx405, align 8, !dbg !5023
  %207 = bitcast %struct.rtx_def* %206 to i32*, !dbg !5023
  %bf.load406 = load i32, i32* %207, align 8, !dbg !5023
  %bf.clear407 = and i32 %bf.load406, 65535, !dbg !5023
  %idxprom408 = sext i32 %bf.clear407 to i64, !dbg !5023
  %arrayidx409 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom408, !dbg !5023
  %208 = load i32, i32* %arrayidx409, align 4, !dbg !5023
  %cmp410 = icmp eq i32 %208, 9, !dbg !5023
  br i1 %cmp410, label %if.else460, label %if.then412, !dbg !5024

if.then412:                                       ; preds = %cond.end400
  store i32 160, i32* %code, align 4, !dbg !5025
  store i8 112, i8* %letter, align 1, !dbg !5027
  %209 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5028
  %common413 = bitcast %union.tree_node* %209 to %struct.tree_common*, !dbg !5028
  %type414 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common413, i32 0, i32 2, !dbg !5028
  %210 = load %union.tree_node*, %union.tree_node** %type414, align 8, !dbg !5028
  store %union.tree_node* %210, %union.tree_node** %eff_type, align 8, !dbg !5029
  %211 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5030
  %decl_with_rtl415 = bitcast %union.tree_node* %211 to %struct.tree_decl_with_rtl*, !dbg !5030
  %rtl416 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl415, i32 0, i32 1, !dbg !5030
  %212 = load %struct.rtx_def*, %struct.rtx_def** %rtl416, align 8, !dbg !5030
  %tobool417 = icmp ne %struct.rtx_def* %212, null, !dbg !5030
  br i1 %tobool417, label %cond.true418, label %cond.false421, !dbg !5030

cond.true418:                                     ; preds = %if.then412
  %213 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5030
  %decl_with_rtl419 = bitcast %union.tree_node* %213 to %struct.tree_decl_with_rtl*, !dbg !5030
  %rtl420 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl419, i32 0, i32 1, !dbg !5030
  %214 = load %struct.rtx_def*, %struct.rtx_def** %rtl420, align 8, !dbg !5030
  br label %cond.end424, !dbg !5030

cond.false421:                                    ; preds = %if.then412
  %215 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5030
  call void @make_decl_rtl(%union.tree_node* %215), !dbg !5030
  %216 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5030
  %decl_with_rtl422 = bitcast %union.tree_node* %216 to %struct.tree_decl_with_rtl*, !dbg !5030
  %rtl423 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl422, i32 0, i32 1, !dbg !5030
  %217 = load %struct.rtx_def*, %struct.rtx_def** %rtl423, align 8, !dbg !5030
  br label %cond.end424, !dbg !5030

cond.end424:                                      ; preds = %cond.false421, %cond.true418
  %cond425 = phi %struct.rtx_def* [ %214, %cond.true418 ], [ %217, %cond.false421 ], !dbg !5030
  %u426 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond425, i32 0, i32 1, !dbg !5030
  %fld427 = bitcast %union.u* %u426 to [1 x %union.rtunion_def]*, !dbg !5030
  %arrayidx428 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld427, i64 0, i64 0, !dbg !5030
  %rt_rtx429 = bitcast %union.rtunion_def* %arrayidx428 to %struct.rtx_def**, !dbg !5030
  %218 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx429, align 8, !dbg !5030
  %219 = bitcast %struct.rtx_def* %218 to i32*, !dbg !5030
  %bf.load430 = load i32, i32* %219, align 8, !dbg !5030
  %bf.clear431 = and i32 %bf.load430, 65535, !dbg !5030
  %cmp432 = icmp eq i32 %bf.clear431, 37, !dbg !5030
  br i1 %cmp432, label %if.else458, label %if.then434, !dbg !5032

if.then434:                                       ; preds = %cond.end424
  %220 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5033
  %decl_with_rtl435 = bitcast %union.tree_node* %220 to %struct.tree_decl_with_rtl*, !dbg !5033
  %rtl436 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl435, i32 0, i32 1, !dbg !5033
  %221 = load %struct.rtx_def*, %struct.rtx_def** %rtl436, align 8, !dbg !5033
  %tobool437 = icmp ne %struct.rtx_def* %221, null, !dbg !5033
  br i1 %tobool437, label %cond.true438, label %cond.false441, !dbg !5033

cond.true438:                                     ; preds = %if.then434
  %222 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5033
  %decl_with_rtl439 = bitcast %union.tree_node* %222 to %struct.tree_decl_with_rtl*, !dbg !5033
  %rtl440 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl439, i32 0, i32 1, !dbg !5033
  %223 = load %struct.rtx_def*, %struct.rtx_def** %rtl440, align 8, !dbg !5033
  br label %cond.end444, !dbg !5033

cond.false441:                                    ; preds = %if.then434
  %224 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5033
  call void @make_decl_rtl(%union.tree_node* %224), !dbg !5033
  %225 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5033
  %decl_with_rtl442 = bitcast %union.tree_node* %225 to %struct.tree_decl_with_rtl*, !dbg !5033
  %rtl443 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl442, i32 0, i32 1, !dbg !5033
  %226 = load %struct.rtx_def*, %struct.rtx_def** %rtl443, align 8, !dbg !5033
  br label %cond.end444, !dbg !5033

cond.end444:                                      ; preds = %cond.false441, %cond.true438
  %cond445 = phi %struct.rtx_def* [ %223, %cond.true438 ], [ %226, %cond.false441 ], !dbg !5033
  %u446 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond445, i32 0, i32 1, !dbg !5033
  %fld447 = bitcast %union.u* %u446 to [1 x %union.rtunion_def]*, !dbg !5033
  %arrayidx448 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld447, i64 0, i64 0, !dbg !5033
  %rt_rtx449 = bitcast %union.rtunion_def* %arrayidx448 to %struct.rtx_def**, !dbg !5033
  %227 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx449, align 8, !dbg !5033
  %u450 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %227, i32 0, i32 1, !dbg !5033
  %fld451 = bitcast %union.u* %u450 to [1 x %union.rtunion_def]*, !dbg !5033
  %arrayidx452 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld451, i64 0, i64 1, !dbg !5033
  %rt_rtx453 = bitcast %union.rtunion_def* %arrayidx452 to %struct.rtx_def**, !dbg !5033
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx453, align 8, !dbg !5033
  %u454 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %228, i32 0, i32 1, !dbg !5033
  %hwint455 = bitcast %union.u* %u454 to [1 x i64]*, !dbg !5033
  %arrayidx456 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint455, i64 0, i64 0, !dbg !5033
  %229 = load i64, i64* %arrayidx456, align 8, !dbg !5033
  %conv457 = trunc i64 %229 to i32, !dbg !5033
  store i32 %conv457, i32* %number, align 4, !dbg !5034
  br label %if.end459, !dbg !5035

if.else458:                                       ; preds = %cond.end424
  store i32 0, i32* %number, align 4, !dbg !5036
  br label %if.end459

if.end459:                                        ; preds = %if.else458, %cond.end444
  br label %if.end461, !dbg !5037

if.else460:                                       ; preds = %cond.end400, %cond.end382, %cond.end366
  br label %for.inc, !dbg !5038

if.end461:                                        ; preds = %if.end459
  br label %if.end462

if.end462:                                        ; preds = %if.end461, %if.end355
  br label %if.end463

if.end463:                                        ; preds = %if.end462, %if.end263
  br label %if.end464

if.end464:                                        ; preds = %if.end463, %if.end120
  br label %if.end465

if.end465:                                        ; preds = %if.end464, %if.end
  call void @dbxout_begin_complex_stabs(), !dbg !5039
  %230 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5040
  %decl_minimal466 = bitcast %union.tree_node* %230 to %struct.tree_decl_minimal*, !dbg !5040
  %name467 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal466, i32 0, i32 3, !dbg !5040
  %231 = load %union.tree_node*, %union.tree_node** %name467, align 8, !dbg !5040
  %tobool468 = icmp ne %union.tree_node* %231, null, !dbg !5040
  br i1 %tobool468, label %if.then469, label %if.else492, !dbg !5042

if.then469:                                       ; preds = %if.end465
  %232 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5043
  %decl_minimal470 = bitcast %union.tree_node* %232 to %struct.tree_decl_minimal*, !dbg !5043
  %name471 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal470, i32 0, i32 3, !dbg !5043
  %233 = load %union.tree_node*, %union.tree_node** %name471, align 8, !dbg !5043
  %identifier = bitcast %union.tree_node* %233 to %struct.tree_identifier*, !dbg !5043
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !5043
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !5043
  %234 = load i32, i32* %len, align 8, !dbg !5043
  %conv472 = zext i32 %234 to i64, !dbg !5043
  store i64 %conv472, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5043
  %235 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5043
  %236 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5043
  %add.ptr = getelementptr inbounds i8, i8* %235, i64 %236, !dbg !5043
  %237 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5043
  %cmp473 = icmp ugt i8* %add.ptr, %237, !dbg !5043
  br i1 %cmp473, label %cond.true475, label %cond.false477, !dbg !5043

cond.true475:                                     ; preds = %if.then469
  %238 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5043
  %conv476 = trunc i64 %238 to i32, !dbg !5043
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv476), !dbg !5043
  br label %cond.end478, !dbg !5043

cond.false477:                                    ; preds = %if.then469
  br label %cond.end478, !dbg !5043

cond.end478:                                      ; preds = %cond.false477, %cond.true475
  %cond479 = phi i32 [ 0, %cond.true475 ], [ 0, %cond.false477 ], !dbg !5043
  %239 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5043
  %240 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5043
  %decl_minimal480 = bitcast %union.tree_node* %240 to %struct.tree_decl_minimal*, !dbg !5043
  %name481 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal480, i32 0, i32 3, !dbg !5043
  %241 = load %union.tree_node*, %union.tree_node** %name481, align 8, !dbg !5043
  %identifier482 = bitcast %union.tree_node* %241 to %struct.tree_identifier*, !dbg !5043
  %id483 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier482, i32 0, i32 1, !dbg !5043
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id483, i32 0, i32 0, !dbg !5043
  %242 = load i8*, i8** %str, align 8, !dbg !5043
  %243 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5043
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %239, i8* align 1 %242, i64 %243, i1 false), !dbg !5043
  %244 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5043
  %245 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5043
  %add.ptr484 = getelementptr inbounds i8, i8* %245, i64 %244, !dbg !5043
  store i8* %add.ptr484, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5043
  %246 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5045
  %add.ptr485 = getelementptr inbounds i8, i8* %246, i64 1, !dbg !5045
  %247 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5045
  %cmp486 = icmp ugt i8* %add.ptr485, %247, !dbg !5045
  br i1 %cmp486, label %cond.true488, label %cond.false489, !dbg !5045

cond.true488:                                     ; preds = %cond.end478
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5045
  br label %cond.end490, !dbg !5045

cond.false489:                                    ; preds = %cond.end478
  br label %cond.end490, !dbg !5045

cond.end490:                                      ; preds = %cond.false489, %cond.true488
  %cond491 = phi i32 [ 0, %cond.true488 ], [ 0, %cond.false489 ], !dbg !5045
  %248 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5045
  %incdec.ptr = getelementptr inbounds i8, i8* %248, i32 1, !dbg !5045
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5045
  store i8 58, i8* %248, align 1, !dbg !5045
  br label %if.end502, !dbg !5046

if.else492:                                       ; preds = %if.end465
  store i64 7, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5047
  %249 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5047
  %250 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5047
  %add.ptr493 = getelementptr inbounds i8, i8* %249, i64 %250, !dbg !5047
  %251 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5047
  %cmp494 = icmp ugt i8* %add.ptr493, %251, !dbg !5047
  br i1 %cmp494, label %cond.true496, label %cond.false498, !dbg !5047

cond.true496:                                     ; preds = %if.else492
  %252 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5047
  %conv497 = trunc i64 %252 to i32, !dbg !5047
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv497), !dbg !5047
  br label %cond.end499, !dbg !5047

cond.false498:                                    ; preds = %if.else492
  br label %cond.end499, !dbg !5047

cond.end499:                                      ; preds = %cond.false498, %cond.true496
  %cond500 = phi i32 [ 0, %cond.true496 ], [ 0, %cond.false498 ], !dbg !5047
  %253 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5047
  %254 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5047
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %253, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0), i64 %254, i1 false), !dbg !5047
  %255 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5047
  %256 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5047
  %add.ptr501 = getelementptr inbounds i8, i8* %256, i64 %255, !dbg !5047
  store i8* %add.ptr501, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5047
  br label %if.end502

if.end502:                                        ; preds = %cond.end499, %cond.end490
  %257 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5048
  %add.ptr503 = getelementptr inbounds i8, i8* %257, i64 1, !dbg !5048
  %258 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5048
  %cmp504 = icmp ugt i8* %add.ptr503, %258, !dbg !5048
  br i1 %cmp504, label %cond.true506, label %cond.false507, !dbg !5048

cond.true506:                                     ; preds = %if.end502
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5048
  br label %cond.end508, !dbg !5048

cond.false507:                                    ; preds = %if.end502
  br label %cond.end508, !dbg !5048

cond.end508:                                      ; preds = %cond.false507, %cond.true506
  %cond509 = phi i32 [ 0, %cond.true506 ], [ 0, %cond.false507 ], !dbg !5048
  %259 = load i8, i8* %letter, align 1, !dbg !5048
  %260 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5048
  %incdec.ptr510 = getelementptr inbounds i8, i8* %260, i32 1, !dbg !5048
  store i8* %incdec.ptr510, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5048
  store i8 %259, i8* %260, align 1, !dbg !5048
  %261 = load %union.tree_node*, %union.tree_node** %eff_type, align 8, !dbg !5049
  call void @dbxout_type(%union.tree_node* %261, i32 0), !dbg !5050
  %262 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5051
  %263 = load i32, i32* %code, align 4, !dbg !5052
  %264 = load i32, i32* %number, align 4, !dbg !5053
  call void @dbxout_finish_complex_stabs(%union.tree_node* %262, i32 %263, %struct.rtx_def* null, i8* null, i32 %264), !dbg !5054
  br label %if.end511, !dbg !5055

if.end511:                                        ; preds = %cond.end508, %land.lhs.true8, %land.lhs.true5, %land.lhs.true2, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4896

for.inc:                                          ; preds = %if.end511, %if.else460
  %265 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5056
  %common512 = bitcast %union.tree_node* %265 to %struct.tree_common*, !dbg !5056
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common512, i32 0, i32 1, !dbg !5056
  %266 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5056
  store %union.tree_node* %266, %union.tree_node** %parms.addr, align 8, !dbg !5057
  br label %for.cond, !dbg !5058, !llvm.loop !5059

for.end:                                          ; preds = %for.cond
  %267 = load i32, i32* @debug_nesting, align 4, !dbg !5061
  %dec = add nsw i32 %267, -1, !dbg !5061
  store i32 %dec, i32* @debug_nesting, align 4, !dbg !5061
  %cmp513 = icmp eq i32 %dec, 0, !dbg !5061
  br i1 %cmp513, label %land.lhs.true515, label %if.end519, !dbg !5061

land.lhs.true515:                                 ; preds = %for.end
  %268 = load i32, i32* @symbol_queue_index, align 4, !dbg !5061
  %cmp516 = icmp sgt i32 %268, 0, !dbg !5061
  br i1 %cmp516, label %if.then518, label %if.end519, !dbg !5063

if.then518:                                       ; preds = %land.lhs.true515
  call void @emit_pending_bincls_if_required(), !dbg !5064
  call void @debug_flush_symbol_queue(), !dbg !5064
  br label %if.end519, !dbg !5064

if.end519:                                        ; preds = %if.then518, %land.lhs.true515, %for.end
  ret void, !dbg !5066
}

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !5067 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5073, metadata !DIExpression()), !dbg !5074
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5075
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5075
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5075
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5075
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !5075
  %1 = load i32, i32* %rt_uint, align 8, !dbg !5075
  ret i32 %1, !dbg !5076
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dbxout_reg_parms(%union.tree_node* %parms) #0 !dbg !5077 {
entry:
  %parms.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %parms, %union.tree_node** %parms.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parms.addr, metadata !5078, metadata !DIExpression()), !dbg !5079
  %0 = load i32, i32* @debug_nesting, align 4, !dbg !5080
  %inc = add nsw i32 %0, 1, !dbg !5080
  store i32 %inc, i32* @debug_nesting, align 4, !dbg !5080
  br label %for.cond, !dbg !5081

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5082
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !5085
  br i1 %tobool, label %for.body, label %for.end, !dbg !5085

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5086
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !5086
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !5086
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5086
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !5086
  br i1 %tobool1, label %land.lhs.true, label %if.end113, !dbg !5088

land.lhs.true:                                    ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5089
  %parm_decl = bitcast %union.tree_node* %4 to %struct.tree_parm_decl*, !dbg !5089
  %incoming_rtl = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 1, !dbg !5089
  %5 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl, align 8, !dbg !5089
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !5089
  %bf.load = load i32, i32* %6, align 8, !dbg !5089
  %bf.clear = and i32 %bf.load, 65535, !dbg !5089
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !5089
  br i1 %cmp, label %if.then, label %if.end113, !dbg !5090

if.then:                                          ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5091
  %decl_with_rtl = bitcast %union.tree_node* %7 to %struct.tree_decl_with_rtl*, !dbg !5091
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !5091
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5091
  %tobool2 = icmp ne %struct.rtx_def* %8, null, !dbg !5091
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !5091

cond.true:                                        ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5091
  %decl_with_rtl3 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_rtl*, !dbg !5091
  %rtl4 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl3, i32 0, i32 1, !dbg !5091
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl4, align 8, !dbg !5091
  br label %cond.end, !dbg !5091

cond.false:                                       ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5091
  call void @make_decl_rtl(%union.tree_node* %11), !dbg !5091
  %12 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5091
  %decl_with_rtl5 = bitcast %union.tree_node* %12 to %struct.tree_decl_with_rtl*, !dbg !5091
  %rtl6 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl5, i32 0, i32 1, !dbg !5091
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl6, align 8, !dbg !5091
  br label %cond.end, !dbg !5091

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %10, %cond.true ], [ %13, %cond.false ], !dbg !5091
  %14 = bitcast %struct.rtx_def* %cond to i32*, !dbg !5091
  %bf.load7 = load i32, i32* %14, align 8, !dbg !5091
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !5091
  %cmp9 = icmp eq i32 %bf.clear8, 37, !dbg !5091
  br i1 %cmp9, label %land.lhs.true10, label %if.else, !dbg !5094

land.lhs.true10:                                  ; preds = %cond.end
  %15 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5095
  %decl_with_rtl11 = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !5095
  %rtl12 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl11, i32 0, i32 1, !dbg !5095
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl12, align 8, !dbg !5095
  %tobool13 = icmp ne %struct.rtx_def* %16, null, !dbg !5095
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !5095

cond.true14:                                      ; preds = %land.lhs.true10
  %17 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5095
  %decl_with_rtl15 = bitcast %union.tree_node* %17 to %struct.tree_decl_with_rtl*, !dbg !5095
  %rtl16 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl15, i32 0, i32 1, !dbg !5095
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl16, align 8, !dbg !5095
  br label %cond.end20, !dbg !5095

cond.false17:                                     ; preds = %land.lhs.true10
  %19 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5095
  call void @make_decl_rtl(%union.tree_node* %19), !dbg !5095
  %20 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5095
  %decl_with_rtl18 = bitcast %union.tree_node* %20 to %struct.tree_decl_with_rtl*, !dbg !5095
  %rtl19 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl18, i32 0, i32 1, !dbg !5095
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl19, align 8, !dbg !5095
  br label %cond.end20, !dbg !5095

cond.end20:                                       ; preds = %cond.false17, %cond.true14
  %cond21 = phi %struct.rtx_def* [ %18, %cond.true14 ], [ %21, %cond.false17 ], !dbg !5095
  %call = call i32 @rhs_regno(%struct.rtx_def* %cond21), !dbg !5095
  %cmp22 = icmp ult i32 %call, 53, !dbg !5096
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !5097

if.then23:                                        ; preds = %cond.end20
  %22 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5098
  %23 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5099
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !5099
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5099
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5099
  %25 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5100
  %decl_with_rtl24 = bitcast %union.tree_node* %25 to %struct.tree_decl_with_rtl*, !dbg !5100
  %rtl25 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl24, i32 0, i32 1, !dbg !5100
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl25, align 8, !dbg !5100
  %tobool26 = icmp ne %struct.rtx_def* %26, null, !dbg !5100
  br i1 %tobool26, label %cond.true27, label %cond.false30, !dbg !5100

cond.true27:                                      ; preds = %if.then23
  %27 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5100
  %decl_with_rtl28 = bitcast %union.tree_node* %27 to %struct.tree_decl_with_rtl*, !dbg !5100
  %rtl29 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl28, i32 0, i32 1, !dbg !5100
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtl29, align 8, !dbg !5100
  br label %cond.end33, !dbg !5100

cond.false30:                                     ; preds = %if.then23
  %29 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5100
  call void @make_decl_rtl(%union.tree_node* %29), !dbg !5100
  %30 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5100
  %decl_with_rtl31 = bitcast %union.tree_node* %30 to %struct.tree_decl_with_rtl*, !dbg !5100
  %rtl32 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl31, i32 0, i32 1, !dbg !5100
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl32, align 8, !dbg !5100
  br label %cond.end33, !dbg !5100

cond.end33:                                       ; preds = %cond.false30, %cond.true27
  %cond34 = phi %struct.rtx_def* [ %28, %cond.true27 ], [ %31, %cond.false30 ], !dbg !5100
  %call35 = call i32 @dbxout_symbol_location(%union.tree_node* %22, %union.tree_node* %24, i8* null, %struct.rtx_def* %cond34), !dbg !5101
  br label %if.end112, !dbg !5101

if.else:                                          ; preds = %cond.end20, %cond.end
  %32 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5102
  %decl_with_rtl36 = bitcast %union.tree_node* %32 to %struct.tree_decl_with_rtl*, !dbg !5102
  %rtl37 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl36, i32 0, i32 1, !dbg !5102
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtl37, align 8, !dbg !5102
  %tobool38 = icmp ne %struct.rtx_def* %33, null, !dbg !5102
  br i1 %tobool38, label %cond.true39, label %cond.false42, !dbg !5102

cond.true39:                                      ; preds = %if.else
  %34 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5102
  %decl_with_rtl40 = bitcast %union.tree_node* %34 to %struct.tree_decl_with_rtl*, !dbg !5102
  %rtl41 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl40, i32 0, i32 1, !dbg !5102
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtl41, align 8, !dbg !5102
  br label %cond.end45, !dbg !5102

cond.false42:                                     ; preds = %if.else
  %36 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5102
  call void @make_decl_rtl(%union.tree_node* %36), !dbg !5102
  %37 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5102
  %decl_with_rtl43 = bitcast %union.tree_node* %37 to %struct.tree_decl_with_rtl*, !dbg !5102
  %rtl44 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl43, i32 0, i32 1, !dbg !5102
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl44, align 8, !dbg !5102
  br label %cond.end45, !dbg !5102

cond.end45:                                       ; preds = %cond.false42, %cond.true39
  %cond46 = phi %struct.rtx_def* [ %35, %cond.true39 ], [ %38, %cond.false42 ], !dbg !5102
  %39 = bitcast %struct.rtx_def* %cond46 to i32*, !dbg !5102
  %bf.load47 = load i32, i32* %39, align 8, !dbg !5102
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !5102
  %cmp49 = icmp eq i32 %bf.clear48, 41, !dbg !5104
  br i1 %cmp49, label %if.then50, label %if.else65, !dbg !5105

if.then50:                                        ; preds = %cond.end45
  %40 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5106
  %41 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5107
  %common51 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !5107
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !5107
  %42 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !5107
  %43 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5108
  %decl_with_rtl53 = bitcast %union.tree_node* %43 to %struct.tree_decl_with_rtl*, !dbg !5108
  %rtl54 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl53, i32 0, i32 1, !dbg !5108
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtl54, align 8, !dbg !5108
  %tobool55 = icmp ne %struct.rtx_def* %44, null, !dbg !5108
  br i1 %tobool55, label %cond.true56, label %cond.false59, !dbg !5108

cond.true56:                                      ; preds = %if.then50
  %45 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5108
  %decl_with_rtl57 = bitcast %union.tree_node* %45 to %struct.tree_decl_with_rtl*, !dbg !5108
  %rtl58 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl57, i32 0, i32 1, !dbg !5108
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtl58, align 8, !dbg !5108
  br label %cond.end62, !dbg !5108

cond.false59:                                     ; preds = %if.then50
  %47 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5108
  call void @make_decl_rtl(%union.tree_node* %47), !dbg !5108
  %48 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5108
  %decl_with_rtl60 = bitcast %union.tree_node* %48 to %struct.tree_decl_with_rtl*, !dbg !5108
  %rtl61 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl60, i32 0, i32 1, !dbg !5108
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtl61, align 8, !dbg !5108
  br label %cond.end62, !dbg !5108

cond.end62:                                       ; preds = %cond.false59, %cond.true56
  %cond63 = phi %struct.rtx_def* [ %46, %cond.true56 ], [ %49, %cond.false59 ], !dbg !5108
  %call64 = call i32 @dbxout_symbol_location(%union.tree_node* %40, %union.tree_node* %42, i8* null, %struct.rtx_def* %cond63), !dbg !5109
  br label %if.end111, !dbg !5109

if.else65:                                        ; preds = %cond.end45
  %50 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5110
  %decl_with_rtl66 = bitcast %union.tree_node* %50 to %struct.tree_decl_with_rtl*, !dbg !5110
  %rtl67 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl66, i32 0, i32 1, !dbg !5110
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtl67, align 8, !dbg !5110
  %tobool68 = icmp ne %struct.rtx_def* %51, null, !dbg !5110
  br i1 %tobool68, label %cond.true69, label %cond.false72, !dbg !5110

cond.true69:                                      ; preds = %if.else65
  %52 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5110
  %decl_with_rtl70 = bitcast %union.tree_node* %52 to %struct.tree_decl_with_rtl*, !dbg !5110
  %rtl71 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl70, i32 0, i32 1, !dbg !5110
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl71, align 8, !dbg !5110
  br label %cond.end75, !dbg !5110

cond.false72:                                     ; preds = %if.else65
  %54 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5110
  call void @make_decl_rtl(%union.tree_node* %54), !dbg !5110
  %55 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5110
  %decl_with_rtl73 = bitcast %union.tree_node* %55 to %struct.tree_decl_with_rtl*, !dbg !5110
  %rtl74 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl73, i32 0, i32 1, !dbg !5110
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtl74, align 8, !dbg !5110
  br label %cond.end75, !dbg !5110

cond.end75:                                       ; preds = %cond.false72, %cond.true69
  %cond76 = phi %struct.rtx_def* [ %53, %cond.true69 ], [ %56, %cond.false72 ], !dbg !5110
  %57 = bitcast %struct.rtx_def* %cond76 to i32*, !dbg !5110
  %bf.load77 = load i32, i32* %57, align 8, !dbg !5110
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !5110
  %cmp79 = icmp eq i32 %bf.clear78, 43, !dbg !5110
  br i1 %cmp79, label %land.lhs.true80, label %if.end, !dbg !5112

land.lhs.true80:                                  ; preds = %cond.end75
  %58 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5113
  %decl_with_rtl81 = bitcast %union.tree_node* %58 to %struct.tree_decl_with_rtl*, !dbg !5113
  %rtl82 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl81, i32 0, i32 1, !dbg !5113
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtl82, align 8, !dbg !5113
  %tobool83 = icmp ne %struct.rtx_def* %59, null, !dbg !5113
  br i1 %tobool83, label %cond.true84, label %cond.false87, !dbg !5113

cond.true84:                                      ; preds = %land.lhs.true80
  %60 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5113
  %decl_with_rtl85 = bitcast %union.tree_node* %60 to %struct.tree_decl_with_rtl*, !dbg !5113
  %rtl86 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl85, i32 0, i32 1, !dbg !5113
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtl86, align 8, !dbg !5113
  br label %cond.end90, !dbg !5113

cond.false87:                                     ; preds = %land.lhs.true80
  %62 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5113
  call void @make_decl_rtl(%union.tree_node* %62), !dbg !5113
  %63 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5113
  %decl_with_rtl88 = bitcast %union.tree_node* %63 to %struct.tree_decl_with_rtl*, !dbg !5113
  %rtl89 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl88, i32 0, i32 1, !dbg !5113
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtl89, align 8, !dbg !5113
  br label %cond.end90, !dbg !5113

cond.end90:                                       ; preds = %cond.false87, %cond.true84
  %cond91 = phi %struct.rtx_def* [ %61, %cond.true84 ], [ %64, %cond.false87 ], !dbg !5113
  %65 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5114
  %parm_decl92 = bitcast %union.tree_node* %65 to %struct.tree_parm_decl*, !dbg !5114
  %incoming_rtl93 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl92, i32 0, i32 1, !dbg !5114
  %66 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl93, align 8, !dbg !5114
  %call94 = call i32 @rtx_equal_p(%struct.rtx_def* %cond91, %struct.rtx_def* %66), !dbg !5115
  %tobool95 = icmp ne i32 %call94, 0, !dbg !5115
  br i1 %tobool95, label %if.end, label %if.then96, !dbg !5116

if.then96:                                        ; preds = %cond.end90
  %67 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5117
  %68 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5118
  %common97 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !5118
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !5118
  %69 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !5118
  %70 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5119
  %decl_with_rtl99 = bitcast %union.tree_node* %70 to %struct.tree_decl_with_rtl*, !dbg !5119
  %rtl100 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl99, i32 0, i32 1, !dbg !5119
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtl100, align 8, !dbg !5119
  %tobool101 = icmp ne %struct.rtx_def* %71, null, !dbg !5119
  br i1 %tobool101, label %cond.true102, label %cond.false105, !dbg !5119

cond.true102:                                     ; preds = %if.then96
  %72 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5119
  %decl_with_rtl103 = bitcast %union.tree_node* %72 to %struct.tree_decl_with_rtl*, !dbg !5119
  %rtl104 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl103, i32 0, i32 1, !dbg !5119
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtl104, align 8, !dbg !5119
  br label %cond.end108, !dbg !5119

cond.false105:                                    ; preds = %if.then96
  %74 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5119
  call void @make_decl_rtl(%union.tree_node* %74), !dbg !5119
  %75 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5119
  %decl_with_rtl106 = bitcast %union.tree_node* %75 to %struct.tree_decl_with_rtl*, !dbg !5119
  %rtl107 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl106, i32 0, i32 1, !dbg !5119
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtl107, align 8, !dbg !5119
  br label %cond.end108, !dbg !5119

cond.end108:                                      ; preds = %cond.false105, %cond.true102
  %cond109 = phi %struct.rtx_def* [ %73, %cond.true102 ], [ %76, %cond.false105 ], !dbg !5119
  %call110 = call i32 @dbxout_symbol_location(%union.tree_node* %67, %union.tree_node* %69, i8* null, %struct.rtx_def* %cond109), !dbg !5120
  br label %if.end, !dbg !5120

if.end:                                           ; preds = %cond.end108, %cond.end90, %cond.end75
  br label %if.end111

if.end111:                                        ; preds = %if.end, %cond.end62
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %cond.end33
  br label %if.end113, !dbg !5121

if.end113:                                        ; preds = %if.end112, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5089

for.inc:                                          ; preds = %if.end113
  %77 = load %union.tree_node*, %union.tree_node** %parms.addr, align 8, !dbg !5122
  %common114 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !5122
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 1, !dbg !5122
  %78 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5122
  store %union.tree_node* %78, %union.tree_node** %parms.addr, align 8, !dbg !5123
  br label %for.cond, !dbg !5124, !llvm.loop !5125

for.end:                                          ; preds = %for.cond
  %79 = load i32, i32* @debug_nesting, align 4, !dbg !5127
  %dec = add nsw i32 %79, -1, !dbg !5127
  store i32 %dec, i32* @debug_nesting, align 4, !dbg !5127
  %cmp115 = icmp eq i32 %dec, 0, !dbg !5127
  br i1 %cmp115, label %land.lhs.true116, label %if.end119, !dbg !5127

land.lhs.true116:                                 ; preds = %for.end
  %80 = load i32, i32* @symbol_queue_index, align 4, !dbg !5127
  %cmp117 = icmp sgt i32 %80, 0, !dbg !5127
  br i1 %cmp117, label %if.then118, label %if.end119, !dbg !5129

if.then118:                                       ; preds = %land.lhs.true116
  call void @emit_pending_bincls_if_required(), !dbg !5130
  call void @debug_flush_symbol_queue(), !dbg !5130
  br label %if.end119, !dbg !5130

if.end119:                                        ; preds = %if.then118, %land.lhs.true116, %for.end
  ret void, !dbg !5132
}

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_typeinfo(i8* %x_p) #0 !dbg !5133 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.typeinfo*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5134, metadata !DIExpression()), !dbg !5135
  call void @llvm.dbg.declare(metadata %struct.typeinfo** %x, metadata !5136, metadata !DIExpression()), !dbg !5138
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5139
  %1 = bitcast i8* %0 to %struct.typeinfo*, !dbg !5140
  store %struct.typeinfo* %1, %struct.typeinfo** %x, align 8, !dbg !5138
  %2 = load %struct.typeinfo*, %struct.typeinfo** %x, align 8, !dbg !5141
  %cmp = icmp ne %struct.typeinfo* %2, null, !dbg !5141
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5141

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.typeinfo*, %struct.typeinfo** %x, align 8, !dbg !5141
  %4 = bitcast %struct.typeinfo* %3 to i8*, !dbg !5141
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !5141
  br i1 %cmp1, label %land.lhs.true2, label %if.end, !dbg !5141

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.typeinfo*, %struct.typeinfo** %x, align 8, !dbg !5141
  %6 = bitcast %struct.typeinfo* %5 to i8*, !dbg !5141
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !5141
  %tobool = icmp ne i32 %call, 0, !dbg !5141
  br i1 %tobool, label %if.end, label %if.then, !dbg !5143

if.then:                                          ; preds = %land.lhs.true2
  br label %if.end, !dbg !5144

if.end:                                           ; preds = %if.then, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !5146
}

declare dso_local i32 @ggc_set_mark(i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_typeinfo(i8* %x_p) #0 !dbg !5147 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.typeinfo*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5148, metadata !DIExpression()), !dbg !5149
  call void @llvm.dbg.declare(metadata %struct.typeinfo** %x, metadata !5150, metadata !DIExpression()), !dbg !5151
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5152
  %1 = bitcast i8* %0 to %struct.typeinfo*, !dbg !5153
  store %struct.typeinfo* %1, %struct.typeinfo** %x, align 8, !dbg !5151
  %2 = load %struct.typeinfo*, %struct.typeinfo** %x, align 8, !dbg !5154
  %3 = bitcast %struct.typeinfo* %2 to i8*, !dbg !5154
  %4 = load %struct.typeinfo*, %struct.typeinfo** %x, align 8, !dbg !5156
  %5 = bitcast %struct.typeinfo* %4 to i8*, !dbg !5156
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_8typeinfo, i32 92), !dbg !5157
  %tobool = icmp ne i32 %call, 0, !dbg !5157
  br i1 %tobool, label %if.then, label %if.end, !dbg !5158

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !5159

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5161
}

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_8typeinfo(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !5162 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.typeinfo*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !5166, metadata !DIExpression()), !dbg !5167
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5168, metadata !DIExpression()), !dbg !5169
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !5170, metadata !DIExpression()), !dbg !5171
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !5172, metadata !DIExpression()), !dbg !5173
  call void @llvm.dbg.declare(metadata %struct.typeinfo** %x, metadata !5174, metadata !DIExpression()), !dbg !5175
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !5176
  %1 = bitcast i8* %0 to %struct.typeinfo*, !dbg !5177
  store %struct.typeinfo* %1, %struct.typeinfo** %x, align 8, !dbg !5175
  ret void, !dbg !5178
}

declare dso_local void @gt_ggc_m_S(i8*) #1

declare dso_local void @gt_pch_n_S(i8*) #1

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #1

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @gt_ggc_ma_typevec(i8* %x_p) #0 !dbg !5179 {
entry:
  %x_p.addr = alloca i8*, align 8
  %i0 = alloca i64, align 8
  %a__ = alloca i8*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5180, metadata !DIExpression()), !dbg !5181
  %0 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !5182
  %cmp = icmp ne %struct.typeinfo* %0, null, !dbg !5184
  br i1 %cmp, label %if.then, label %if.end8, !dbg !5185

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !5186, metadata !DIExpression()), !dbg !5188
  store i64 0, i64* %i0, align 8, !dbg !5189
  br label %for.cond, !dbg !5191

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i0, align 8, !dbg !5192
  %2 = load i32, i32* @typevec_len, align 4, !dbg !5194
  %conv = sext i32 %2 to i64, !dbg !5195
  %cmp1 = icmp ne i64 %1, %conv, !dbg !5196
  br i1 %cmp1, label %for.body, label %for.end, !dbg !5197

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !5198

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %i0, align 8, !dbg !5200
  %inc = add i64 %3, 1, !dbg !5200
  store i64 %inc, i64* %i0, align 8, !dbg !5200
  br label %for.cond, !dbg !5201, !llvm.loop !5202

for.end:                                          ; preds = %for.cond
  br label %do.body, !dbg !5204

do.body:                                          ; preds = %for.end
  call void @llvm.dbg.declare(metadata i8** %a__, metadata !5205, metadata !DIExpression()), !dbg !5208
  %4 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !5208
  %5 = bitcast %struct.typeinfo* %4 to i8*, !dbg !5208
  store i8* %5, i8** %a__, align 8, !dbg !5208
  %6 = load i8*, i8** %a__, align 8, !dbg !5209
  %cmp3 = icmp ne i8* %6, null, !dbg !5209
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !5209

land.lhs.true:                                    ; preds = %do.body
  %7 = load i8*, i8** %a__, align 8, !dbg !5209
  %cmp5 = icmp ne i8* %7, inttoptr (i64 1 to i8*), !dbg !5209
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !5208

if.then7:                                         ; preds = %land.lhs.true
  %8 = load i8*, i8** %a__, align 8, !dbg !5209
  %call = call i32 @ggc_set_mark(i8* %8), !dbg !5209
  br label %if.end, !dbg !5209

if.end:                                           ; preds = %if.then7, %land.lhs.true, %do.body
  br label %do.end, !dbg !5208

do.end:                                           ; preds = %if.end
  br label %if.end8, !dbg !5211

if.end8:                                          ; preds = %do.end, %entry
  ret void, !dbg !5212
}

; Function Attrs: noinline nounwind uwtable
define internal void @gt_pch_na_typevec(i8* %x_p) #0 !dbg !5213 {
entry:
  %x_p.addr = alloca i8*, align 8
  %i1 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !5214, metadata !DIExpression()), !dbg !5215
  %0 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !5216
  %cmp = icmp ne %struct.typeinfo* %0, null, !dbg !5218
  br i1 %cmp, label %if.then, label %if.end, !dbg !5219

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i1, metadata !5220, metadata !DIExpression()), !dbg !5222
  store i64 0, i64* %i1, align 8, !dbg !5223
  br label %for.cond, !dbg !5225

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i1, align 8, !dbg !5226
  %2 = load i32, i32* @typevec_len, align 4, !dbg !5228
  %conv = sext i32 %2 to i64, !dbg !5229
  %cmp1 = icmp ne i64 %1, %conv, !dbg !5230
  br i1 %cmp1, label %for.body, label %for.end, !dbg !5231

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !5232

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %i1, align 8, !dbg !5234
  %inc = add i64 %3, 1, !dbg !5234
  store i64 %inc, i64* %i1, align 8, !dbg !5234
  br label %for.cond, !dbg !5235, !llvm.loop !5236

for.end:                                          ; preds = %for.cond
  %4 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !5238
  %5 = bitcast %struct.typeinfo* %4 to i8*, !dbg !5238
  %call = call i32 @gt_pch_note_object(i8* %5, i8* bitcast (%struct.typeinfo** @typevec to i8*), void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_pa_typevec, i32 217), !dbg !5239
  br label %if.end, !dbg !5240

if.end:                                           ; preds = %for.end, %entry
  ret void, !dbg !5241
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #1

declare dso_local i32 @_obstack_begin(%struct.obstack*, i32, i32, i8* (i64)*, void (i8*)*) #1

declare dso_local i8* @xmalloc(i64) #1

declare dso_local void @free(i8*) #1

declare dso_local i8* @get_src_pwd() #1

declare dso_local i8* @concat(i8*, ...) #1

declare dso_local i8* @remap_debug_filename(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_lang_number() #0 !dbg !5242 {
entry:
  %retval = alloca i32, align 4
  %language_string = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %language_string, metadata !5245, metadata !DIExpression()), !dbg !5246
  %0 = load i8*, i8** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 0), align 8, !dbg !5247
  store i8* %0, i8** %language_string, align 8, !dbg !5246
  %1 = load i8*, i8** %language_string, align 8, !dbg !5248
  %call = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0)), !dbg !5250
  %cmp = icmp eq i32 %call, 0, !dbg !5251
  br i1 %cmp, label %if.then, label %if.else, !dbg !5252

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !5253
  br label %return, !dbg !5253

if.else:                                          ; preds = %entry
  %2 = load i8*, i8** %language_string, align 8, !dbg !5254
  %call1 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0)), !dbg !5256
  %cmp2 = icmp eq i32 %call1, 0, !dbg !5257
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !5258

if.then3:                                         ; preds = %if.else
  store i32 4, i32* %retval, align 4, !dbg !5259
  br label %return, !dbg !5259

if.else4:                                         ; preds = %if.else
  %3 = load i8*, i8** %language_string, align 8, !dbg !5260
  %call5 = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0)), !dbg !5262
  %cmp6 = icmp eq i32 %call5, 0, !dbg !5263
  br i1 %cmp6, label %if.then7, label %if.else8, !dbg !5264

if.then7:                                         ; preds = %if.else4
  store i32 5, i32* %retval, align 4, !dbg !5265
  br label %return, !dbg !5265

if.else8:                                         ; preds = %if.else4
  %4 = load i8*, i8** %language_string, align 8, !dbg !5266
  %call9 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i64 0, i64 0)), !dbg !5268
  %cmp10 = icmp eq i32 %call9, 0, !dbg !5269
  br i1 %cmp10, label %if.then11, label %if.else12, !dbg !5270

if.then11:                                        ; preds = %if.else8
  store i32 7, i32* %retval, align 4, !dbg !5271
  br label %return, !dbg !5271

if.else12:                                        ; preds = %if.else8
  %5 = load i8*, i8** %language_string, align 8, !dbg !5272
  %call13 = call i32 @strcmp(i8* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0)), !dbg !5274
  %cmp14 = icmp eq i32 %call13, 0, !dbg !5275
  br i1 %cmp14, label %if.then15, label %if.else16, !dbg !5276

if.then15:                                        ; preds = %if.else12
  store i32 6, i32* %retval, align 4, !dbg !5277
  br label %return, !dbg !5277

if.else16:                                        ; preds = %if.else12
  %6 = load i8*, i8** %language_string, align 8, !dbg !5278
  %call17 = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.24, i64 0, i64 0)), !dbg !5280
  %cmp18 = icmp eq i32 %call17, 0, !dbg !5281
  br i1 %cmp18, label %if.then19, label %if.else20, !dbg !5282

if.then19:                                        ; preds = %if.else16
  store i32 50, i32* %retval, align 4, !dbg !5283
  br label %return, !dbg !5283

if.else20:                                        ; preds = %if.else16
  %7 = load i8*, i8** %language_string, align 8, !dbg !5284
  %call21 = call i32 @strcmp(i8* %7, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0)), !dbg !5286
  %cmp22 = icmp eq i32 %call21, 0, !dbg !5287
  br i1 %cmp22, label %if.then23, label %if.else24, !dbg !5288

if.then23:                                        ; preds = %if.else20
  store i32 51, i32* %retval, align 4, !dbg !5289
  br label %return, !dbg !5289

if.else24:                                        ; preds = %if.else20
  store i32 0, i32* %retval, align 4, !dbg !5290
  br label %return, !dbg !5290

return:                                           ; preds = %if.else24, %if.then23, %if.then19, %if.then15, %if.then11, %if.then7, %if.then3, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5291
  ret i32 %8, !dbg !5291
}

declare dso_local void @switch_to_section(%union.section*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_typedefs(%union.tree_node* %syms) #0 !dbg !5292 {
entry:
  %syms.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %syms, %union.tree_node** %syms.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %syms.addr, metadata !5293, metadata !DIExpression()), !dbg !5294
  br label %for.cond, !dbg !5295

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !5296
  %cmp = icmp ne %union.tree_node* %0, null, !dbg !5299
  br i1 %cmp, label %for.body, label %for.end, !dbg !5300

for.body:                                         ; preds = %for.cond
  %1 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !5301
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5301
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5301
  %bf.load = load i64, i64* %2, align 8, !dbg !5301
  %bf.clear = and i64 %bf.load, 65535, !dbg !5301
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5301
  %cmp1 = icmp eq i32 %bf.cast, 35, !dbg !5304
  br i1 %cmp1, label %if.then, label %if.end30, !dbg !5305

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5306, metadata !DIExpression()), !dbg !5308
  %3 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !5309
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5309
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5309
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !5309
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !5308
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5310
  %type3 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !5310
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 12, !dbg !5310
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5310
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !5310
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5312

land.lhs.true:                                    ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5313
  %type4 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !5313
  %name5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 12, !dbg !5313
  %8 = load %union.tree_node*, %union.tree_node** %name5, align 8, !dbg !5313
  %base6 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5313
  %9 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5313
  %bf.load7 = load i64, i64* %9, align 8, !dbg !5313
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5313
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5313
  %cmp10 = icmp eq i32 %bf.cast9, 35, !dbg !5314
  br i1 %cmp10, label %land.lhs.true11, label %if.end, !dbg !5315

land.lhs.true11:                                  ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5316
  %type12 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !5316
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 2, !dbg !5316
  %11 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5316
  %cmp13 = icmp ne %union.tree_node* %11, null, !dbg !5316
  br i1 %cmp13, label %land.lhs.true19, label %lor.lhs.false, !dbg !5316

lor.lhs.false:                                    ; preds = %land.lhs.true11
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5316
  %base14 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5316
  %13 = bitcast %struct.tree_base* %base14 to i64*, !dbg !5316
  %bf.load15 = load i64, i64* %13, align 8, !dbg !5316
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !5316
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !5316
  %cmp18 = icmp eq i32 %bf.cast17, 19, !dbg !5316
  br i1 %cmp18, label %land.lhs.true19, label %if.end, !dbg !5317

land.lhs.true19:                                  ; preds = %lor.lhs.false, %land.lhs.true11
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5318
  %type20 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !5318
  %name21 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 12, !dbg !5318
  %15 = load %union.tree_node*, %union.tree_node** %name21, align 8, !dbg !5318
  %base22 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5318
  %16 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5318
  %bf.load23 = load i64, i64* %16, align 8, !dbg !5318
  %bf.lshr = lshr i64 %bf.load23, 22, !dbg !5318
  %bf.clear24 = and i64 %bf.lshr, 1, !dbg !5318
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !5318
  %tobool26 = icmp ne i32 %bf.cast25, 0, !dbg !5318
  br i1 %tobool26, label %if.end, label %if.then27, !dbg !5319

if.then27:                                        ; preds = %land.lhs.true19
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5320
  %type28 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !5320
  %name29 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 12, !dbg !5320
  %18 = load %union.tree_node*, %union.tree_node** %name29, align 8, !dbg !5320
  %call = call i32 @dbxout_symbol(%union.tree_node* %18, i32 0), !dbg !5321
  br label %if.end, !dbg !5321

if.end:                                           ; preds = %if.then27, %land.lhs.true19, %lor.lhs.false, %land.lhs.true, %if.then
  br label %if.end30, !dbg !5322

if.end30:                                         ; preds = %if.end, %for.body
  br label %for.inc, !dbg !5323

for.inc:                                          ; preds = %if.end30
  %19 = load %union.tree_node*, %union.tree_node** %syms.addr, align 8, !dbg !5324
  %common31 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !5324
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 1, !dbg !5324
  %20 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5324
  store %union.tree_node* %20, %union.tree_node** %syms.addr, align 8, !dbg !5325
  br label %for.cond, !dbg !5326, !llvm.loop !5327

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5329
}

declare dso_local %union.tree_node* @nreverse(%union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_source_file(i8* %filename) #0 !dbg !5330 {
entry:
  %filename.addr = alloca i8*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !5331, metadata !DIExpression()), !dbg !5332
  %0 = load i8*, i8** @lastfile, align 8, !dbg !5333
  %cmp = icmp eq i8* %0, null, !dbg !5335
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5336

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @lastfile_is_base, align 4, !dbg !5337
  %tobool = icmp ne i32 %1, 0, !dbg !5337
  br i1 %tobool, label %if.then, label %if.end, !dbg !5338

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8*, i8** @base_input_file, align 8, !dbg !5339
  store i8* %2, i8** @lastfile, align 8, !dbg !5341
  store i32 0, i32* @lastfile_is_base, align 4, !dbg !5342
  br label %if.end, !dbg !5343

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load i8*, i8** %filename.addr, align 8, !dbg !5344
  %tobool1 = icmp ne i8* %3, null, !dbg !5344
  br i1 %tobool1, label %land.lhs.true2, label %if.end10, !dbg !5346

land.lhs.true2:                                   ; preds = %if.end
  %4 = load i8*, i8** @lastfile, align 8, !dbg !5347
  %cmp3 = icmp eq i8* %4, null, !dbg !5348
  br i1 %cmp3, label %if.then5, label %lor.lhs.false, !dbg !5349

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %5 = load i8*, i8** %filename.addr, align 8, !dbg !5350
  %6 = load i8*, i8** @lastfile, align 8, !dbg !5351
  %call = call i32 @strcmp(i8* %5, i8* %6), !dbg !5352
  %tobool4 = icmp ne i32 %call, 0, !dbg !5352
  br i1 %tobool4, label %if.then5, label %if.end10, !dbg !5353

if.then5:                                         ; preds = %lor.lhs.false, %land.lhs.true2
  %7 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5354
  %cmp6 = icmp eq %union.tree_node* %7, null, !dbg !5357
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !5358

if.then7:                                         ; preds = %if.then5
  %8 = load %union.section*, %union.section** @text_section, align 8, !dbg !5359
  call void @switch_to_section(%union.section* %8), !dbg !5360
  br label %if.end8, !dbg !5360

if.end8:                                          ; preds = %if.then7, %if.then5
  %9 = load i8*, i8** %filename.addr, align 8, !dbg !5361
  %call9 = call i8* @remap_debug_filename(i8* %9), !dbg !5362
  call void @dbxout_begin_simple_stabs(i8* %call9, i32 132), !dbg !5363
  call void @dbxout_stab_value_internal_label(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0), i32* @source_label_number), !dbg !5364
  %10 = load i8*, i8** %filename.addr, align 8, !dbg !5365
  store i8* %10, i8** @lastfile, align 8, !dbg !5366
  br label %if.end10, !dbg !5367

if.end10:                                         ; preds = %if.end8, %lor.lhs.false, %if.end
  ret void, !dbg !5368
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_block(%union.tree_node* %block, i32 %depth, %union.tree_node* %args) #0 !dbg !5369 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %depth.addr = alloca i32, align 4
  %args.addr = alloca %union.tree_node*, align 8
  %begin_label = alloca [20 x i8], align 16
  %did_output = alloca i32, align 4
  %blocknum = alloca i32, align 4
  %buf = alloca [20 x i8], align 16
  %scope_start = alloca i8*, align 8
  %buf34 = alloca [100 x i8], align 16
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !5372, metadata !DIExpression()), !dbg !5373
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !5374, metadata !DIExpression()), !dbg !5375
  store %union.tree_node* %args, %union.tree_node** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %args.addr, metadata !5376, metadata !DIExpression()), !dbg !5377
  call void @llvm.dbg.declare(metadata [20 x i8]* %begin_label, metadata !5378, metadata !DIExpression()), !dbg !5379
  br label %do.body, !dbg !5380

do.body:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %begin_label, i64 0, i64 0, !dbg !5381
  %0 = load i32, i32* @scope_labelno, align 4, !dbg !5381
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i64 0, i64 0), i32 %0), !dbg !5381
  br label %do.end, !dbg !5381

do.end:                                           ; preds = %do.body
  br label %while.cond, !dbg !5383

while.cond:                                       ; preds = %if.end50, %do.end
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5384
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !5383
  br i1 %tobool, label %while.body, label %while.end, !dbg !5383

while.body:                                       ; preds = %while.cond
  %2 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5385
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5385
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5385
  %bf.load = load i64, i64* %3, align 8, !dbg !5385
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !5385
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5385
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5385
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !5385
  br i1 %tobool1, label %land.lhs.true, label %if.end50, !dbg !5388

land.lhs.true:                                    ; preds = %while.body
  %4 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5389
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5389
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5389
  %bf.load3 = load i64, i64* %5, align 8, !dbg !5389
  %bf.lshr4 = lshr i64 %bf.load3, 22, !dbg !5389
  %bf.clear5 = and i64 %bf.lshr4, 1, !dbg !5389
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5389
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !5389
  br i1 %tobool7, label %if.then, label %if.end50, !dbg !5390

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %did_output, metadata !5391, metadata !DIExpression()), !dbg !5393
  call void @llvm.dbg.declare(metadata i32* %blocknum, metadata !5394, metadata !DIExpression()), !dbg !5395
  %6 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5396
  %block8 = bitcast %union.tree_node* %6 to %struct.tree_block*, !dbg !5396
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block8, i32 0, i32 1, !dbg !5396
  %bf.load9 = load i32, i32* %block_num, align 8, !dbg !5396
  %bf.lshr10 = lshr i32 %bf.load9, 1, !dbg !5396
  store i32 %bf.lshr10, i32* %blocknum, align 4, !dbg !5395
  store i32 0, i32* %did_output, align 4, !dbg !5397
  %7 = load i32, i32* @debug_info_level, align 4, !dbg !5398
  %cmp = icmp ne i32 %7, 1, !dbg !5400
  br i1 %cmp, label %if.then12, label %lor.lhs.false, !dbg !5401

lor.lhs.false:                                    ; preds = %if.then
  %8 = load i32, i32* %depth.addr, align 4, !dbg !5402
  %cmp11 = icmp eq i32 %8, 0, !dbg !5403
  br i1 %cmp11, label %if.then12, label %if.end, !dbg !5404

if.then12:                                        ; preds = %lor.lhs.false, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5405
  %block13 = bitcast %union.tree_node* %9 to %struct.tree_block*, !dbg !5405
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block13, i32 0, i32 3, !dbg !5405
  %10 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !5405
  %call14 = call i32 @dbxout_syms(%union.tree_node* %10), !dbg !5406
  store i32 %call14, i32* %did_output, align 4, !dbg !5407
  br label %if.end, !dbg !5408

if.end:                                           ; preds = %if.then12, %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !5409
  %tobool15 = icmp ne %union.tree_node* %11, null, !dbg !5409
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5411

if.then16:                                        ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !5412
  call void @dbxout_reg_parms(%union.tree_node* %12), !dbg !5413
  br label %if.end17, !dbg !5413

if.end17:                                         ; preds = %if.then16, %if.end
  %13 = load i32, i32* %did_output, align 4, !dbg !5414
  %tobool18 = icmp ne i32 %13, 0, !dbg !5414
  br i1 %tobool18, label %if.then19, label %if.end30, !dbg !5416

if.then19:                                        ; preds = %if.end17
  call void @llvm.dbg.declare(metadata [20 x i8]* %buf, metadata !5417, metadata !DIExpression()), !dbg !5419
  call void @llvm.dbg.declare(metadata i8** %scope_start, metadata !5420, metadata !DIExpression()), !dbg !5421
  %14 = load i32, i32* %depth.addr, align 4, !dbg !5422
  %cmp20 = icmp eq i32 %14, 0, !dbg !5424
  br i1 %cmp20, label %if.then21, label %if.else, !dbg !5425

if.then21:                                        ; preds = %if.then19
  %arraydecay22 = getelementptr inbounds [20 x i8], [20 x i8]* %begin_label, i64 0, i64 0, !dbg !5426
  store i8* %arraydecay22, i8** %scope_start, align 8, !dbg !5427
  br label %if.end28, !dbg !5428

if.else:                                          ; preds = %if.then19
  br label %do.body23, !dbg !5429

do.body23:                                        ; preds = %if.else
  %arraydecay24 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0, !dbg !5431
  %15 = load i32, i32* %blocknum, align 4, !dbg !5431
  %call25 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i64 0, i64 0), i32 %15), !dbg !5431
  br label %do.end26, !dbg !5431

do.end26:                                         ; preds = %do.body23
  %arraydecay27 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0, !dbg !5433
  store i8* %arraydecay27, i8** %scope_start, align 8, !dbg !5434
  br label %if.end28

if.end28:                                         ; preds = %do.end26, %if.then21
  %16 = load i8*, i8** %scope_start, align 8, !dbg !5435
  %arraydecay29 = getelementptr inbounds [20 x i8], [20 x i8]* %begin_label, i64 0, i64 0, !dbg !5436
  call void @dbx_output_lbrac(i8* %16, i8* %arraydecay29), !dbg !5437
  br label %if.end30, !dbg !5438

if.end30:                                         ; preds = %if.end28, %if.end17
  %17 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5439
  %block31 = bitcast %union.tree_node* %17 to %struct.tree_block*, !dbg !5439
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block31, i32 0, i32 5, !dbg !5439
  %18 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !5439
  %19 = load i32, i32* %depth.addr, align 4, !dbg !5440
  %add = add nsw i32 %19, 1, !dbg !5441
  call void @dbxout_block(%union.tree_node* %18, i32 %add, %union.tree_node* null), !dbg !5442
  %20 = load i32, i32* %did_output, align 4, !dbg !5443
  %tobool32 = icmp ne i32 %20, 0, !dbg !5443
  br i1 %tobool32, label %if.then33, label %if.end49, !dbg !5445

if.then33:                                        ; preds = %if.end30
  call void @llvm.dbg.declare(metadata [100 x i8]* %buf34, metadata !5446, metadata !DIExpression()), !dbg !5448
  %21 = load i32, i32* %depth.addr, align 4, !dbg !5449
  %cmp35 = icmp eq i32 %21, 0, !dbg !5451
  br i1 %cmp35, label %if.then36, label %if.else41, !dbg !5452

if.then36:                                        ; preds = %if.then33
  br label %do.body37, !dbg !5453

do.body37:                                        ; preds = %if.then36
  %arraydecay38 = getelementptr inbounds [100 x i8], [100 x i8]* %buf34, i64 0, i64 0, !dbg !5454
  %22 = load i32, i32* @scope_labelno, align 4, !dbg !5454
  %call39 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0), i32 %22), !dbg !5454
  br label %do.end40, !dbg !5454

do.end40:                                         ; preds = %do.body37
  br label %if.end46, !dbg !5454

if.else41:                                        ; preds = %if.then33
  br label %do.body42, !dbg !5456

do.body42:                                        ; preds = %if.else41
  %arraydecay43 = getelementptr inbounds [100 x i8], [100 x i8]* %buf34, i64 0, i64 0, !dbg !5457
  %23 = load i32, i32* %blocknum, align 4, !dbg !5457
  %call44 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0), i32 %23), !dbg !5457
  br label %do.end45, !dbg !5457

do.end45:                                         ; preds = %do.body42
  br label %if.end46

if.end46:                                         ; preds = %do.end45, %do.end40
  %arraydecay47 = getelementptr inbounds [100 x i8], [100 x i8]* %buf34, i64 0, i64 0, !dbg !5459
  %arraydecay48 = getelementptr inbounds [20 x i8], [20 x i8]* %begin_label, i64 0, i64 0, !dbg !5460
  call void @dbx_output_rbrac(i8* %arraydecay47, i8* %arraydecay48), !dbg !5461
  br label %if.end49, !dbg !5462

if.end49:                                         ; preds = %if.end46, %if.end30
  br label %if.end50, !dbg !5463

if.end50:                                         ; preds = %if.end49, %land.lhs.true, %while.body
  %24 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5464
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !5464
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5464
  %25 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5464
  store %union.tree_node* %25, %union.tree_node** %block.addr, align 8, !dbg !5465
  br label %while.cond, !dbg !5383, !llvm.loop !5466

while.end:                                        ; preds = %while.cond
  ret void, !dbg !5468
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_function_end(%union.tree_node* %decl) #0 !dbg !5469 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %lscope_label_name = alloca [100 x i8], align 16
  %begin_label = alloca [20 x i8], align 16
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5470, metadata !DIExpression()), !dbg !5471
  call void @llvm.dbg.declare(metadata [100 x i8]* %lscope_label_name, metadata !5472, metadata !DIExpression()), !dbg !5473
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5474
  %call = call %union.section* @function_section(%union.tree_node* %0), !dbg !5475
  call void @switch_to_section(%union.section* %call), !dbg !5476
  br label %do.body, !dbg !5477

do.body:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %lscope_label_name, i64 0, i64 0, !dbg !5478
  %1 = load i32, i32* @scope_labelno, align 4, !dbg !5478
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0), i32 %1), !dbg !5478
  br label %do.end, !dbg !5478

do.end:                                           ; preds = %do.body
  %2 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !5480
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5481
  %4 = load i32, i32* @scope_labelno, align 4, !dbg !5482
  %conv = sext i32 %4 to i64, !dbg !5482
  call void %2(%struct._IO_FILE* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0), i64 %conv), !dbg !5483
  %5 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !5484
  %tobool = icmp ne i8 %5, 0, !dbg !5484
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5486

lor.lhs.false:                                    ; preds = %do.end
  %6 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 110), align 1, !dbg !5487
  %tobool2 = icmp ne i8 %6, 0, !dbg !5488
  br i1 %tobool2, label %if.end, label %if.then, !dbg !5489

if.then:                                          ; preds = %lor.lhs.false, %do.end
  br label %if.end14, !dbg !5490

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !5491
  %tobool3 = icmp ne i32 %7, 0, !dbg !5491
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !5493

if.then4:                                         ; preds = %if.end
  call void @dbxout_begin_empty_stabs(i32 36), !dbg !5494
  %8 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 2), align 8, !dbg !5496
  %9 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 0), align 8, !dbg !5497
  call void @dbxout_stab_value_label_diff(i8* %8, i8* %9), !dbg !5498
  call void @dbxout_begin_empty_stabs(i32 36), !dbg !5499
  %10 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 3), align 8, !dbg !5500
  %11 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 1), align 8, !dbg !5501
  call void @dbxout_stab_value_label_diff(i8* %10, i8* %11), !dbg !5502
  br label %if.end11, !dbg !5503

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata [20 x i8]* %begin_label, metadata !5504, metadata !DIExpression()), !dbg !5506
  br label %do.body5, !dbg !5507

do.body5:                                         ; preds = %if.else
  %arraydecay6 = getelementptr inbounds [20 x i8], [20 x i8]* %begin_label, i64 0, i64 0, !dbg !5508
  %12 = load i32, i32* @scope_labelno, align 4, !dbg !5508
  %call7 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i64 0, i64 0), i32 %12), !dbg !5508
  br label %do.end8, !dbg !5508

do.end8:                                          ; preds = %do.body5
  call void @dbxout_begin_empty_stabs(i32 36), !dbg !5510
  %arraydecay9 = getelementptr inbounds [100 x i8], [100 x i8]* %lscope_label_name, i64 0, i64 0, !dbg !5511
  %arraydecay10 = getelementptr inbounds [20 x i8], [20 x i8]* %begin_label, i64 0, i64 0, !dbg !5512
  call void @dbxout_stab_value_label_diff(i8* %arraydecay9, i8* %arraydecay10), !dbg !5513
  br label %if.end11

if.end11:                                         ; preds = %do.end8, %if.then4
  %13 = load i32, i32* @flag_debug_only_used_symbols, align 4, !dbg !5514
  %tobool12 = icmp ne i32 %13, 0, !dbg !5514
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !5516

if.then13:                                        ; preds = %if.end11
  call void @dbxout_stabd(i32 78, i32 0), !dbg !5517
  br label %if.end14, !dbg !5517

if.end14:                                         ; preds = %if.then, %if.then13, %if.end11
  ret void, !dbg !5518
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbx_output_lbrac(i8* %label, i8* %begin_label) #0 !dbg !5519 {
entry:
  %label.addr = alloca i8*, align 8
  %begin_label.addr = alloca i8*, align 8
  store i8* %label, i8** %label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %label.addr, metadata !5520, metadata !DIExpression()), !dbg !5521
  store i8* %begin_label, i8** %begin_label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %begin_label.addr, metadata !5522, metadata !DIExpression()), !dbg !5523
  call void @dbxout_begin_stabn(i32 192), !dbg !5524
  %0 = load i8*, i8** %label.addr, align 8, !dbg !5525
  %1 = load i8*, i8** %begin_label.addr, align 8, !dbg !5527
  call void @dbxout_stab_value_label_diff(i8* %0, i8* %1), !dbg !5528
  ret void, !dbg !5529
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbx_output_rbrac(i8* %label, i8* %begin_label) #0 !dbg !5530 {
entry:
  %label.addr = alloca i8*, align 8
  %begin_label.addr = alloca i8*, align 8
  store i8* %label, i8** %label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %label.addr, metadata !5531, metadata !DIExpression()), !dbg !5532
  store i8* %begin_label, i8** %begin_label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %begin_label.addr, metadata !5533, metadata !DIExpression()), !dbg !5534
  call void @dbxout_begin_stabn(i32 224), !dbg !5535
  %0 = load i8*, i8** %label.addr, align 8, !dbg !5536
  %1 = load i8*, i8** %begin_label.addr, align 8, !dbg !5538
  call void @dbxout_stab_value_label_diff(i8* %0, i8* %1), !dbg !5539
  ret void, !dbg !5540
}

declare dso_local %union.section* @function_section(%union.tree_node*) #1

declare dso_local void @debug_free_queue() #1

; Function Attrs: noinline nounwind uwtable
define internal void @emit_pending_bincls() #0 !dbg !5541 {
entry:
  %f = alloca %struct.dbx_file*, align 8
  call void @llvm.dbg.declare(metadata %struct.dbx_file** %f, metadata !5542, metadata !DIExpression()), !dbg !5543
  %0 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !5544
  store %struct.dbx_file* %0, %struct.dbx_file** %f, align 8, !dbg !5543
  br label %while.cond, !dbg !5545

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5546
  %bincl_status = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %1, i32 0, i32 3, !dbg !5547
  %2 = load i32, i32* %bincl_status, align 8, !dbg !5547
  %cmp = icmp eq i32 %2, 1, !dbg !5548
  br i1 %cmp, label %while.body, label %while.end, !dbg !5545

while.body:                                       ; preds = %while.cond
  %3 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5549
  %next = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %3, i32 0, i32 0, !dbg !5550
  %4 = load %struct.dbx_file*, %struct.dbx_file** %next, align 8, !dbg !5550
  store %struct.dbx_file* %4, %struct.dbx_file** %f, align 8, !dbg !5551
  br label %while.cond, !dbg !5545, !llvm.loop !5552

while.end:                                        ; preds = %while.cond
  %5 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5553
  %prev = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %5, i32 0, i32 5, !dbg !5554
  %6 = load %struct.dbx_file*, %struct.dbx_file** %prev, align 8, !dbg !5554
  store %struct.dbx_file* %6, %struct.dbx_file** %f, align 8, !dbg !5555
  br label %while.cond1, !dbg !5556

while.cond1:                                      ; preds = %if.end8, %while.end
  %7 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5557
  %tobool = icmp ne %struct.dbx_file* %7, null, !dbg !5556
  br i1 %tobool, label %while.body2, label %while.end10, !dbg !5556

while.body2:                                      ; preds = %while.cond1
  %8 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5558
  %bincl_status3 = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %8, i32 0, i32 3, !dbg !5561
  %9 = load i32, i32* %bincl_status3, align 8, !dbg !5561
  %cmp4 = icmp eq i32 %9, 1, !dbg !5562
  br i1 %cmp4, label %if.then, label %if.end, !dbg !5563

if.then:                                          ; preds = %while.body2
  %10 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5564
  %pending_bincl_name = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %10, i32 0, i32 4, !dbg !5566
  %11 = load i8*, i8** %pending_bincl_name, align 8, !dbg !5566
  call void @emit_bincl_stab(i8* %11), !dbg !5567
  %12 = load i32, i32* @next_file_number, align 4, !dbg !5568
  %inc = add nsw i32 %12, 1, !dbg !5568
  store i32 %inc, i32* @next_file_number, align 4, !dbg !5568
  %13 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5569
  %file_number = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %13, i32 0, i32 1, !dbg !5570
  store i32 %12, i32* %file_number, align 8, !dbg !5571
  %14 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5572
  %bincl_status5 = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %14, i32 0, i32 3, !dbg !5573
  store i32 2, i32* %bincl_status5, align 8, !dbg !5574
  br label %if.end, !dbg !5575

if.end:                                           ; preds = %if.then, %while.body2
  %15 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5576
  %16 = load %struct.dbx_file*, %struct.dbx_file** @current_file, align 8, !dbg !5578
  %cmp6 = icmp eq %struct.dbx_file* %15, %16, !dbg !5579
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !5580

if.then7:                                         ; preds = %if.end
  br label %while.end10, !dbg !5581

if.end8:                                          ; preds = %if.end
  %17 = load %struct.dbx_file*, %struct.dbx_file** %f, align 8, !dbg !5582
  %prev9 = getelementptr inbounds %struct.dbx_file, %struct.dbx_file* %17, i32 0, i32 5, !dbg !5583
  %18 = load %struct.dbx_file*, %struct.dbx_file** %prev9, align 8, !dbg !5583
  store %struct.dbx_file* %18, %struct.dbx_file** %f, align 8, !dbg !5584
  br label %while.cond1, !dbg !5556, !llvm.loop !5585

while.end10:                                      ; preds = %if.then7, %while.cond1
  store i32 0, i32* @pending_bincls, align 4, !dbg !5587
  ret void, !dbg !5588
}

; Function Attrs: noinline nounwind uwtable
define internal void @emit_bincl_stab(i8* %name) #0 !dbg !5589 {
entry:
  %name.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !5590, metadata !DIExpression()), !dbg !5591
  %0 = load i8*, i8** %name.addr, align 8, !dbg !5592
  call void @dbxout_begin_simple_stabs(i8* %0, i32 130), !dbg !5593
  call void @dbxout_stab_value_zero(), !dbg !5594
  ret void, !dbg !5595
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !5596 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5599, metadata !DIExpression()), !dbg !5600
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5600
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !5600
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !5600
  ret %struct.VEC_tree_heap* %1, !dbg !5600
}

declare dso_local i64 @htab_elements(%struct.htab*) #1

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @output_used_types_helper(i8** %slot, i8* %data) #0 !dbg !5601 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %type = alloca %union.tree_node*, align 8
  %types_p = alloca %struct.VEC_tree_heap**, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !5604, metadata !DIExpression()), !dbg !5605
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5606, metadata !DIExpression()), !dbg !5607
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5608, metadata !DIExpression()), !dbg !5609
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !5610
  %1 = load i8*, i8** %0, align 8, !dbg !5611
  %2 = bitcast i8* %1 to %union.tree_node*, !dbg !5612
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !5609
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %types_p, metadata !5613, metadata !DIExpression()), !dbg !5614
  %3 = load i8*, i8** %data.addr, align 8, !dbg !5615
  %4 = bitcast i8* %3 to %struct.VEC_tree_heap**, !dbg !5616
  store %struct.VEC_tree_heap** %4, %struct.VEC_tree_heap*** %types_p, align 8, !dbg !5614
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5617
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5617
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !5617
  %bf.load = load i64, i64* %6, align 8, !dbg !5617
  %bf.clear = and i64 %bf.load, 65535, !dbg !5617
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5617
  %cmp = icmp eq i32 %bf.cast, 16, !dbg !5619
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5620

lor.lhs.false:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5621
  %base1 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5621
  %8 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5621
  %bf.load2 = load i64, i64* %8, align 8, !dbg !5621
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5621
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5621
  %cmp5 = icmp eq i32 %bf.cast4, 17, !dbg !5622
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !5623

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5624
  %base7 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5624
  %10 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5624
  %bf.load8 = load i64, i64* %10, align 8, !dbg !5624
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !5624
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5624
  %cmp11 = icmp eq i32 %bf.cast10, 18, !dbg !5625
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false12, !dbg !5626

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5627
  %base13 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5627
  %12 = bitcast %struct.tree_base* %base13 to i64*, !dbg !5627
  %bf.load14 = load i64, i64* %12, align 8, !dbg !5627
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !5627
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !5627
  %cmp17 = icmp eq i32 %bf.cast16, 6, !dbg !5628
  br i1 %cmp17, label %land.lhs.true, label %if.else, !dbg !5629

land.lhs.true:                                    ; preds = %lor.lhs.false12, %lor.lhs.false6, %lor.lhs.false, %entry
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5630
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !5630
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5630
  %14 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5630
  %tobool = icmp ne %union.tree_node* %14, null, !dbg !5630
  br i1 %tobool, label %land.lhs.true18, label %if.else, !dbg !5631

land.lhs.true18:                                  ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5632
  %common19 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5632
  %chain20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 1, !dbg !5632
  %16 = load %union.tree_node*, %union.tree_node** %chain20, align 8, !dbg !5632
  %base21 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5632
  %17 = bitcast %struct.tree_base* %base21 to i64*, !dbg !5632
  %bf.load22 = load i64, i64* %17, align 8, !dbg !5632
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !5632
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !5632
  %idxprom = sext i32 %bf.cast24 to i64, !dbg !5632
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5632
  %18 = load i32, i32* %arrayidx, align 4, !dbg !5632
  %cmp25 = icmp eq i32 %18, 3, !dbg !5632
  br i1 %cmp25, label %land.lhs.true26, label %if.else, !dbg !5633

land.lhs.true26:                                  ; preds = %land.lhs.true18
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5634
  %common27 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !5634
  %chain28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 1, !dbg !5634
  %20 = load %union.tree_node*, %union.tree_node** %chain28, align 8, !dbg !5634
  %decl_common = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !5634
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5634
  %21 = bitcast i40* %ignored_flag to i64*, !dbg !5634
  %bf.load29 = load i64, i64* %21, align 8, !dbg !5634
  %bf.lshr = lshr i64 %bf.load29, 10, !dbg !5634
  %bf.clear30 = and i64 %bf.lshr, 1, !dbg !5634
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !5634
  %tobool32 = icmp ne i32 %bf.cast31, 0, !dbg !5634
  br i1 %tobool32, label %if.else, label %if.then, !dbg !5635

if.then:                                          ; preds = %land.lhs.true26
  %22 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %types_p, align 8, !dbg !5636
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %22, align 8, !dbg !5636
  %tobool33 = icmp ne %struct.VEC_tree_heap* %23, null, !dbg !5636
  br i1 %tobool33, label %cond.true, label %cond.false, !dbg !5636

cond.true:                                        ; preds = %if.then
  %24 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %types_p, align 8, !dbg !5636
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %24, align 8, !dbg !5636
  %base34 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i32 0, i32 0, !dbg !5636
  br label %cond.end, !dbg !5636

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5636

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base34, %cond.true ], [ null, %cond.false ], !dbg !5636
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5636
  %common35 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !5636
  %chain36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 1, !dbg !5636
  %27 = load %union.tree_node*, %union.tree_node** %chain36, align 8, !dbg !5636
  %call = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %27), !dbg !5636
  br label %if.end57, !dbg !5636

if.else:                                          ; preds = %land.lhs.true26, %land.lhs.true18, %land.lhs.true, %lor.lhs.false12
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5637
  %type37 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !5637
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type37, i32 0, i32 12, !dbg !5637
  %29 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5637
  %tobool38 = icmp ne %union.tree_node* %29, null, !dbg !5637
  br i1 %tobool38, label %land.lhs.true39, label %if.end, !dbg !5639

land.lhs.true39:                                  ; preds = %if.else
  %30 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5640
  %type40 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !5640
  %name41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 12, !dbg !5640
  %31 = load %union.tree_node*, %union.tree_node** %name41, align 8, !dbg !5640
  %base42 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !5640
  %32 = bitcast %struct.tree_base* %base42 to i64*, !dbg !5640
  %bf.load43 = load i64, i64* %32, align 8, !dbg !5640
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !5640
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !5640
  %cmp46 = icmp eq i32 %bf.cast45, 35, !dbg !5641
  br i1 %cmp46, label %if.then47, label %if.end, !dbg !5642

if.then47:                                        ; preds = %land.lhs.true39
  %33 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %types_p, align 8, !dbg !5643
  %34 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %33, align 8, !dbg !5643
  %tobool48 = icmp ne %struct.VEC_tree_heap* %34, null, !dbg !5643
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !5643

cond.true49:                                      ; preds = %if.then47
  %35 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %types_p, align 8, !dbg !5643
  %36 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %35, align 8, !dbg !5643
  %base50 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %36, i32 0, i32 0, !dbg !5643
  br label %cond.end52, !dbg !5643

cond.false51:                                     ; preds = %if.then47
  br label %cond.end52, !dbg !5643

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_tree_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !5643
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5643
  %type54 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !5643
  %name55 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 12, !dbg !5643
  %38 = load %union.tree_node*, %union.tree_node** %name55, align 8, !dbg !5643
  %call56 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond53, %union.tree_node* %38), !dbg !5643
  br label %if.end, !dbg !5643

if.end:                                           ; preds = %cond.end52, %land.lhs.true39, %if.else
  br label %if.end57

if.end57:                                         ; preds = %if.end, %cond.end
  ret i32 1, !dbg !5644
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #1

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %vec_) #0 !dbg !5645 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5649, metadata !DIExpression()), !dbg !5650
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5650
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5650
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5650

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5650
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 2, !dbg !5650
  %arraydecay = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 0, !dbg !5650
  br label %cond.end, !dbg !5650

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5650

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !5650
  ret %union.tree_node** %cond, !dbg !5650
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !5651 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5656, metadata !DIExpression()), !dbg !5657
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5657
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5657
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5657

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5657
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !5657
  %2 = load i32, i32* %num, align 8, !dbg !5657
  br label %cond.end, !dbg !5657

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5657

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5657
  ret i32 %cond, !dbg !5657
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @output_types_sort(i8* %pa, i8* %pb) #0 !dbg !5658 {
entry:
  %retval = alloca i32, align 4
  %pa.addr = alloca i8*, align 8
  %pb.addr = alloca i8*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  store i8* %pa, i8** %pa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pa.addr, metadata !5659, metadata !DIExpression()), !dbg !5660
  store i8* %pb, i8** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pb.addr, metadata !5661, metadata !DIExpression()), !dbg !5662
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !5663, metadata !DIExpression()), !dbg !5664
  %0 = load i8*, i8** %pa.addr, align 8, !dbg !5665
  %1 = bitcast i8* %0 to %union.tree_node**, !dbg !5666
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5667
  store %union.tree_node* %2, %union.tree_node** %lhs, align 8, !dbg !5664
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !5668, metadata !DIExpression()), !dbg !5669
  %3 = load i8*, i8** %pb.addr, align 8, !dbg !5670
  %4 = bitcast i8* %3 to %union.tree_node**, !dbg !5671
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !5672
  store %union.tree_node* %5, %union.tree_node** %rhs, align 8, !dbg !5669
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5673
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5673
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !5673
  %bf.load = load i64, i64* %7, align 8, !dbg !5673
  %bf.clear = and i64 %bf.load, 65535, !dbg !5673
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5673
  %idxprom = sext i32 %bf.cast to i64, !dbg !5673
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5673
  %8 = load i32, i32* %arrayidx, align 4, !dbg !5673
  %cmp = icmp eq i32 %8, 2, !dbg !5673
  br i1 %cmp, label %if.then, label %if.else11, !dbg !5675

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5676
  %base1 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5676
  %10 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5676
  %bf.load2 = load i64, i64* %10, align 8, !dbg !5676
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5676
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5676
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !5676
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !5676
  %11 = load i32, i32* %arrayidx6, align 4, !dbg !5676
  %cmp7 = icmp eq i32 %11, 2, !dbg !5676
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !5679

if.then8:                                         ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5680
  %type = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !5680
  %uid = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 5, !dbg !5680
  %13 = load i32, i32* %uid, align 8, !dbg !5680
  %14 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5681
  %type9 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !5681
  %uid10 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 5, !dbg !5681
  %15 = load i32, i32* %uid10, align 8, !dbg !5681
  %sub = sub i32 %13, %15, !dbg !5682
  store i32 %sub, i32* %retval, align 4, !dbg !5683
  br label %return, !dbg !5683

if.else:                                          ; preds = %if.then
  store i32 1, i32* %retval, align 4, !dbg !5684
  br label %return, !dbg !5684

if.else11:                                        ; preds = %entry
  %16 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5685
  %base12 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5685
  %17 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5685
  %bf.load13 = load i64, i64* %17, align 8, !dbg !5685
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !5685
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5685
  %idxprom16 = sext i32 %bf.cast15 to i64, !dbg !5685
  %arrayidx17 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom16, !dbg !5685
  %18 = load i32, i32* %arrayidx17, align 4, !dbg !5685
  %cmp18 = icmp eq i32 %18, 2, !dbg !5685
  br i1 %cmp18, label %if.then19, label %if.else20, !dbg !5688

if.then19:                                        ; preds = %if.else11
  store i32 -1, i32* %retval, align 4, !dbg !5689
  br label %return, !dbg !5689

if.else20:                                        ; preds = %if.else11
  %19 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5690
  %decl_minimal = bitcast %union.tree_node* %19 to %struct.tree_decl_minimal*, !dbg !5690
  %uid21 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5690
  %20 = load i32, i32* %uid21, align 4, !dbg !5690
  %21 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5691
  %decl_minimal22 = bitcast %union.tree_node* %21 to %struct.tree_decl_minimal*, !dbg !5691
  %uid23 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal22, i32 0, i32 2, !dbg !5691
  %22 = load i32, i32* %uid23, align 4, !dbg !5691
  %sub24 = sub i32 %20, %22, !dbg !5692
  store i32 %sub24, i32* %retval, align 4, !dbg !5693
  br label %return, !dbg !5693

return:                                           ; preds = %if.else20, %if.then19, %if.else, %if.then8
  %23 = load i32, i32* %retval, align 4, !dbg !5694
  ret i32 %23, !dbg !5694
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !5695 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5698, metadata !DIExpression()), !dbg !5699
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5700, metadata !DIExpression()), !dbg !5699
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !5701, metadata !DIExpression()), !dbg !5699
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5702
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5702
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5702

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5702
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5702
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !5702
  %3 = load i32, i32* %num, align 8, !dbg !5702
  %cmp = icmp ult i32 %1, %3, !dbg !5702
  br i1 %cmp, label %if.then, label %if.else, !dbg !5699

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5704
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !5704
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5704
  %idxprom = zext i32 %5 to i64, !dbg !5704
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5704
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5704
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !5704
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !5704
  store i32 1, i32* %retval, align 4, !dbg !5704
  br label %return, !dbg !5704

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !5706
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !5706
  store i32 0, i32* %retval, align 4, !dbg !5706
  br label %return, !dbg !5706

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5699
  ret i32 %9, !dbg !5699
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !5708 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !5711, metadata !DIExpression()), !dbg !5712
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5713
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !5713
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !5713
  br i1 %tobool, label %if.then, label %if.end, !dbg !5712

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5713
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !5713
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !5713
  call void @free(i8* %4), !dbg !5713
  br label %if.end, !dbg !5713

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5712
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !5712
  ret void, !dbg !5712
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !5715 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5718, metadata !DIExpression()), !dbg !5719
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !5720, metadata !DIExpression()), !dbg !5719
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !5721, metadata !DIExpression()), !dbg !5719
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5719
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !5719
  %1 = load i32, i32* %num, align 8, !dbg !5719
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5719
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !5719
  %3 = load i32, i32* %alloc, align 4, !dbg !5719
  %cmp = icmp ult i32 %1, %3, !dbg !5719
  %conv = zext i1 %cmp to i32, !dbg !5719
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5719
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !5719
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5719
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !5719
  %6 = load i32, i32* %num1, align 8, !dbg !5719
  %inc = add i32 %6, 1, !dbg !5719
  store i32 %inc, i32* %num1, align 8, !dbg !5719
  %idxprom = zext i32 %6 to i64, !dbg !5719
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5719
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !5719
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !5719
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !5719
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !5719
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !5719
  ret %union.tree_node** %9, !dbg !5719
}

declare dso_local zeroext i8 @subrange_type_for_debug_p(%union.tree_node*, %union.tree_node**, %union.tree_node**) #1

declare dso_local i8* @ggc_realloc_stat(i8*, i64) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_type_index(%union.tree_node* %type) #0 !dbg !5722 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %t = alloca %struct.typeinfo*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5723, metadata !DIExpression()), !dbg !5724
  call void @llvm.dbg.declare(metadata %struct.typeinfo** %t, metadata !5725, metadata !DIExpression()), !dbg !5726
  %0 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !5727
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5728
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !5728
  %symtab = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 11, !dbg !5728
  %address = bitcast %union.tree_type_symtab* %symtab to i32*, !dbg !5728
  %2 = load i32, i32* %address, align 8, !dbg !5728
  %idxprom = sext i32 %2 to i64, !dbg !5727
  %arrayidx = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %0, i64 %idxprom, !dbg !5727
  store %struct.typeinfo* %arrayidx, %struct.typeinfo** %t, align 8, !dbg !5726
  %3 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5729
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 1, !dbg !5729
  %4 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5729
  %cmp = icmp ugt i8* %add.ptr, %4, !dbg !5729
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5729

cond.true:                                        ; preds = %entry
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5729
  br label %cond.end, !dbg !5729

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5729

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5729
  %5 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5729
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !5729
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5729
  store i8 40, i8* %5, align 1, !dbg !5729
  %6 = load %struct.typeinfo*, %struct.typeinfo** %t, align 8, !dbg !5730
  %file_number = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %6, i32 0, i32 1, !dbg !5731
  %7 = load i32, i32* %file_number, align 4, !dbg !5731
  %conv = sext i32 %7 to i64, !dbg !5730
  call void @stabstr_D(i64 %conv), !dbg !5732
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5733
  %add.ptr2 = getelementptr inbounds i8, i8* %8, i64 1, !dbg !5733
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5733
  %cmp3 = icmp ugt i8* %add.ptr2, %9, !dbg !5733
  br i1 %cmp3, label %cond.true5, label %cond.false6, !dbg !5733

cond.true5:                                       ; preds = %cond.end
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5733
  br label %cond.end7, !dbg !5733

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !5733

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !5733
  %10 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5733
  %incdec.ptr9 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !5733
  store i8* %incdec.ptr9, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5733
  store i8 44, i8* %10, align 1, !dbg !5733
  %11 = load %struct.typeinfo*, %struct.typeinfo** %t, align 8, !dbg !5734
  %type_number = getelementptr inbounds %struct.typeinfo, %struct.typeinfo* %11, i32 0, i32 2, !dbg !5735
  %12 = load i32, i32* %type_number, align 4, !dbg !5735
  %conv10 = sext i32 %12 to i64, !dbg !5734
  call void @stabstr_D(i64 %conv10), !dbg !5736
  %13 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5737
  %add.ptr11 = getelementptr inbounds i8, i8* %13, i64 1, !dbg !5737
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5737
  %cmp12 = icmp ugt i8* %add.ptr11, %14, !dbg !5737
  br i1 %cmp12, label %cond.true14, label %cond.false15, !dbg !5737

cond.true14:                                      ; preds = %cond.end7
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5737
  br label %cond.end16, !dbg !5737

cond.false15:                                     ; preds = %cond.end7
  br label %cond.end16, !dbg !5737

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !5737
  %15 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5737
  %incdec.ptr18 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !5737
  store i8* %incdec.ptr18, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5737
  store i8 41, i8* %15, align 1, !dbg !5737
  ret void, !dbg !5738
}

declare dso_local %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_range_type(%union.tree_node* %type, %union.tree_node* %low, %union.tree_node* %high) #0 !dbg !5739 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %low.addr = alloca %union.tree_node*, align 8
  %high.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5742, metadata !DIExpression()), !dbg !5743
  store %union.tree_node* %low, %union.tree_node** %low.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %low.addr, metadata !5744, metadata !DIExpression()), !dbg !5745
  store %union.tree_node* %high, %union.tree_node** %high.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %high.addr, metadata !5746, metadata !DIExpression()), !dbg !5747
  %0 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5748
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !5748
  %1 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5748
  %cmp = icmp ugt i8* %add.ptr, %1, !dbg !5748
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5748

cond.true:                                        ; preds = %entry
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5748
  br label %cond.end, !dbg !5748

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5748

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5748
  %2 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5748
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1, !dbg !5748
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5748
  store i8 114, i8* %2, align 1, !dbg !5748
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5749
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5749
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5749
  %4 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5749
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !5749
  br i1 %tobool, label %if.then, label %if.else, !dbg !5751

if.then:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5752
  %common2 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !5752
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !5752
  %6 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !5752
  call void @dbxout_type(%union.tree_node* %6, i32 0), !dbg !5753
  br label %if.end12, !dbg !5753

if.else:                                          ; preds = %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5754
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5754
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !5754
  %bf.load = load i64, i64* %8, align 8, !dbg !5754
  %bf.clear = and i64 %bf.load, 65535, !dbg !5754
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5754
  %cmp4 = icmp ne i32 %bf.cast, 8, !dbg !5756
  br i1 %cmp4, label %if.then5, label %if.else6, !dbg !5757

if.then5:                                         ; preds = %if.else
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5758
  call void @dbxout_type(%union.tree_node* %9, i32 0), !dbg !5759
  br label %if.end11, !dbg !5759

if.else6:                                         ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5760
  %type7 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !5760
  %symtab = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 11, !dbg !5760
  %address = bitcast %union.tree_type_symtab* %symtab to i32*, !dbg !5760
  %11 = load i32, i32* %address, align 8, !dbg !5760
  %cmp8 = icmp ne i32 %11, 0, !dbg !5763
  br i1 %cmp8, label %if.then9, label %if.else10, !dbg !5764

if.then9:                                         ; preds = %if.else6
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5765
  call void @dbxout_type_index(%union.tree_node* %12), !dbg !5766
  br label %if.end, !dbg !5766

if.else10:                                        ; preds = %if.else6
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !5767
  call void @dbxout_type_index(%union.tree_node* %13), !dbg !5768
  br label %if.end

if.end:                                           ; preds = %if.else10, %if.then9
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then5
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5769
  %add.ptr13 = getelementptr inbounds i8, i8* %14, i64 1, !dbg !5769
  %15 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5769
  %cmp14 = icmp ugt i8* %add.ptr13, %15, !dbg !5769
  br i1 %cmp14, label %cond.true15, label %cond.false16, !dbg !5769

cond.true15:                                      ; preds = %if.end12
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5769
  br label %cond.end17, !dbg !5769

cond.false16:                                     ; preds = %if.end12
  br label %cond.end17, !dbg !5769

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 0, %cond.true15 ], [ 0, %cond.false16 ], !dbg !5769
  %16 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5769
  %incdec.ptr19 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !5769
  store i8* %incdec.ptr19, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5769
  store i8 59, i8* %16, align 1, !dbg !5769
  %17 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !5770
  %tobool20 = icmp ne %union.tree_node* %17, null, !dbg !5770
  br i1 %tobool20, label %land.lhs.true, label %if.else29, !dbg !5772

land.lhs.true:                                    ; preds = %cond.end17
  %18 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !5773
  %call = call i32 @host_integerp(%union.tree_node* %18, i32 0), !dbg !5774
  %tobool21 = icmp ne i32 %call, 0, !dbg !5774
  br i1 %tobool21, label %if.then22, label %if.else29, !dbg !5775

if.then22:                                        ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5776
  %20 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !5779
  %21 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !5780
  %call23 = call zeroext i8 @print_int_cst_bounds_in_octal_p(%union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %21), !dbg !5781
  %tobool24 = icmp ne i8 %call23, 0, !dbg !5781
  br i1 %tobool24, label %if.then25, label %if.else26, !dbg !5782

if.then25:                                        ; preds = %if.then22
  %22 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !5783
  call void @stabstr_O(%union.tree_node* %22), !dbg !5784
  br label %if.end28, !dbg !5784

if.else26:                                        ; preds = %if.then22
  %23 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !5785
  %call27 = call i64 @tree_low_cst(%union.tree_node* %23, i32 0), !dbg !5786
  call void @stabstr_D(i64 %call27), !dbg !5787
  br label %if.end28

if.end28:                                         ; preds = %if.else26, %if.then25
  br label %if.end37, !dbg !5788

if.else29:                                        ; preds = %land.lhs.true, %cond.end17
  %24 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5789
  %add.ptr30 = getelementptr inbounds i8, i8* %24, i64 1, !dbg !5789
  %25 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5789
  %cmp31 = icmp ugt i8* %add.ptr30, %25, !dbg !5789
  br i1 %cmp31, label %cond.true32, label %cond.false33, !dbg !5789

cond.true32:                                      ; preds = %if.else29
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5789
  br label %cond.end34, !dbg !5789

cond.false33:                                     ; preds = %if.else29
  br label %cond.end34, !dbg !5789

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 0, %cond.true32 ], [ 0, %cond.false33 ], !dbg !5789
  %26 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5789
  %incdec.ptr36 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !5789
  store i8* %incdec.ptr36, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5789
  store i8 48, i8* %26, align 1, !dbg !5789
  br label %if.end37

if.end37:                                         ; preds = %cond.end34, %if.end28
  %27 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5790
  %add.ptr38 = getelementptr inbounds i8, i8* %27, i64 1, !dbg !5790
  %28 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5790
  %cmp39 = icmp ugt i8* %add.ptr38, %28, !dbg !5790
  br i1 %cmp39, label %cond.true40, label %cond.false41, !dbg !5790

cond.true40:                                      ; preds = %if.end37
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5790
  br label %cond.end42, !dbg !5790

cond.false41:                                     ; preds = %if.end37
  br label %cond.end42, !dbg !5790

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond43 = phi i32 [ 0, %cond.true40 ], [ 0, %cond.false41 ], !dbg !5790
  %29 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5790
  %incdec.ptr44 = getelementptr inbounds i8, i8* %29, i32 1, !dbg !5790
  store i8* %incdec.ptr44, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5790
  store i8 59, i8* %29, align 1, !dbg !5790
  %30 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !5791
  %tobool45 = icmp ne %union.tree_node* %30, null, !dbg !5791
  br i1 %tobool45, label %land.lhs.true46, label %if.else63, !dbg !5793

land.lhs.true46:                                  ; preds = %cond.end42
  %31 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !5794
  %call47 = call i32 @host_integerp(%union.tree_node* %31, i32 0), !dbg !5795
  %tobool48 = icmp ne i32 %call47, 0, !dbg !5795
  br i1 %tobool48, label %if.then49, label %if.else63, !dbg !5796

if.then49:                                        ; preds = %land.lhs.true46
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5797
  %33 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !5800
  %34 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !5801
  %call50 = call zeroext i8 @print_int_cst_bounds_in_octal_p(%union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !5802
  %tobool51 = icmp ne i8 %call50, 0, !dbg !5802
  br i1 %tobool51, label %if.then52, label %if.else53, !dbg !5803

if.then52:                                        ; preds = %if.then49
  %35 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !5804
  call void @stabstr_O(%union.tree_node* %35), !dbg !5805
  br label %if.end55, !dbg !5805

if.else53:                                        ; preds = %if.then49
  %36 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !5806
  %call54 = call i64 @tree_low_cst(%union.tree_node* %36, i32 0), !dbg !5807
  call void @stabstr_D(i64 %call54), !dbg !5808
  br label %if.end55

if.end55:                                         ; preds = %if.else53, %if.then52
  %37 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5809
  %add.ptr56 = getelementptr inbounds i8, i8* %37, i64 1, !dbg !5809
  %38 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5809
  %cmp57 = icmp ugt i8* %add.ptr56, %38, !dbg !5809
  br i1 %cmp57, label %cond.true58, label %cond.false59, !dbg !5809

cond.true58:                                      ; preds = %if.end55
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5809
  br label %cond.end60, !dbg !5809

cond.false59:                                     ; preds = %if.end55
  br label %cond.end60, !dbg !5809

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond61 = phi i32 [ 0, %cond.true58 ], [ 0, %cond.false59 ], !dbg !5809
  %39 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5809
  %incdec.ptr62 = getelementptr inbounds i8, i8* %39, i32 1, !dbg !5809
  store i8* %incdec.ptr62, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5809
  store i8 59, i8* %39, align 1, !dbg !5809
  br label %if.end71, !dbg !5810

if.else63:                                        ; preds = %land.lhs.true46, %cond.end42
  store i64 3, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5811
  %40 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5811
  %41 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5811
  %add.ptr64 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !5811
  %42 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5811
  %cmp65 = icmp ugt i8* %add.ptr64, %42, !dbg !5811
  br i1 %cmp65, label %cond.true66, label %cond.false67, !dbg !5811

cond.true66:                                      ; preds = %if.else63
  %43 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5811
  %conv = trunc i64 %43 to i32, !dbg !5811
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv), !dbg !5811
  br label %cond.end68, !dbg !5811

cond.false67:                                     ; preds = %if.else63
  br label %cond.end68, !dbg !5811

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !5811
  %44 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5811
  %45 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5811
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i64 0, i64 0), i64 %45, i1 false), !dbg !5811
  %46 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5811
  %47 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5811
  %add.ptr70 = getelementptr inbounds i8, i8* %47, i64 %46, !dbg !5811
  store i8* %add.ptr70, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5811
  br label %if.end71

if.end71:                                         ; preds = %cond.end68, %cond.end60
  ret void, !dbg !5812
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @print_int_cst_bounds_in_octal_p(%union.tree_node* %type, %union.tree_node* %low, %union.tree_node* %high) #0 !dbg !5813 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %low.addr = alloca %union.tree_node*, align 8
  %high.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5816, metadata !DIExpression()), !dbg !5817
  store %union.tree_node* %low, %union.tree_node** %low.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %low.addr, metadata !5818, metadata !DIExpression()), !dbg !5819
  store %union.tree_node* %high, %union.tree_node** %high.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %high.addr, metadata !5820, metadata !DIExpression()), !dbg !5821
  %0 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !5822
  %conv = zext i8 %0 to i32, !dbg !5822
  %tobool = icmp ne i32 %conv, 0, !dbg !5822
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5824

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !5825
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !5825
  br i1 %tobool1, label %land.lhs.true2, label %if.else, !dbg !5826

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !5827
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5827
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5827
  %bf.load = load i64, i64* %3, align 8, !dbg !5827
  %bf.clear = and i64 %bf.load, 65535, !dbg !5827
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5827
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !5828
  br i1 %cmp, label %land.lhs.true4, label %if.else, !dbg !5829

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %4 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !5830
  %tobool5 = icmp ne %union.tree_node* %4, null, !dbg !5830
  br i1 %tobool5, label %land.lhs.true6, label %if.else, !dbg !5831

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %5 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !5832
  %base7 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5832
  %6 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5832
  %bf.load8 = load i64, i64* %6, align 8, !dbg !5832
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !5832
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5832
  %cmp11 = icmp eq i32 %bf.cast10, 23, !dbg !5833
  br i1 %cmp11, label %land.lhs.true13, label %if.else, !dbg !5834

land.lhs.true13:                                  ; preds = %land.lhs.true6
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5835
  %type14 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !5835
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 6, !dbg !5835
  %bf.load15 = load i32, i32* %precision, align 4, !dbg !5835
  %bf.clear16 = and i32 %bf.load15, 1023, !dbg !5835
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !5836
  %type17 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !5836
  %precision18 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 6, !dbg !5836
  %bf.load19 = load i32, i32* %precision18, align 4, !dbg !5836
  %bf.clear20 = and i32 %bf.load19, 1023, !dbg !5836
  %cmp21 = icmp sgt i32 %bf.clear16, %bf.clear20, !dbg !5837
  br i1 %cmp21, label %if.then, label %lor.lhs.false, !dbg !5838

lor.lhs.false:                                    ; preds = %land.lhs.true13
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5839
  %type23 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !5839
  %precision24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 6, !dbg !5839
  %bf.load25 = load i32, i32* %precision24, align 4, !dbg !5839
  %bf.clear26 = and i32 %bf.load25, 1023, !dbg !5839
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !5840
  %type27 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !5840
  %precision28 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 6, !dbg !5840
  %bf.load29 = load i32, i32* %precision28, align 4, !dbg !5840
  %bf.clear30 = and i32 %bf.load29, 1023, !dbg !5840
  %cmp31 = icmp eq i32 %bf.clear26, %bf.clear30, !dbg !5841
  br i1 %cmp31, label %land.lhs.true33, label %lor.lhs.false39, !dbg !5842

land.lhs.true33:                                  ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5843
  %base34 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5843
  %12 = bitcast %struct.tree_base* %base34 to i64*, !dbg !5843
  %bf.load35 = load i64, i64* %12, align 8, !dbg !5843
  %bf.lshr = lshr i64 %bf.load35, 21, !dbg !5843
  %bf.clear36 = and i64 %bf.lshr, 1, !dbg !5843
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !5843
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !5843
  br i1 %tobool38, label %if.then, label %lor.lhs.false39, !dbg !5844

lor.lhs.false39:                                  ; preds = %land.lhs.true33, %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5845
  %type40 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !5845
  %precision41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 6, !dbg !5845
  %bf.load42 = load i32, i32* %precision41, align 4, !dbg !5845
  %bf.clear43 = and i32 %bf.load42, 1023, !dbg !5845
  %cmp44 = icmp sgt i32 %bf.clear43, 64, !dbg !5846
  br i1 %cmp44, label %if.then, label %lor.lhs.false46, !dbg !5847

lor.lhs.false46:                                  ; preds = %lor.lhs.false39
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5848
  %type47 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !5848
  %precision48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 6, !dbg !5848
  %bf.load49 = load i32, i32* %precision48, align 4, !dbg !5848
  %bf.clear50 = and i32 %bf.load49, 1023, !dbg !5848
  %cmp51 = icmp eq i32 %bf.clear50, 64, !dbg !5849
  br i1 %cmp51, label %land.lhs.true53, label %if.else, !dbg !5850

land.lhs.true53:                                  ; preds = %lor.lhs.false46
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5851
  %base54 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5851
  %16 = bitcast %struct.tree_base* %base54 to i64*, !dbg !5851
  %bf.load55 = load i64, i64* %16, align 8, !dbg !5851
  %bf.lshr56 = lshr i64 %bf.load55, 21, !dbg !5851
  %bf.clear57 = and i64 %bf.lshr56, 1, !dbg !5851
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !5851
  %tobool59 = icmp ne i32 %bf.cast58, 0, !dbg !5851
  br i1 %tobool59, label %if.then, label %if.else, !dbg !5852

if.then:                                          ; preds = %land.lhs.true53, %lor.lhs.false39, %land.lhs.true33, %land.lhs.true13
  store i8 1, i8* %retval, align 1, !dbg !5853
  br label %return, !dbg !5853

if.else:                                          ; preds = %land.lhs.true53, %lor.lhs.false46, %land.lhs.true6, %land.lhs.true4, %land.lhs.true2, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !5854
  br label %return, !dbg !5854

return:                                           ; preds = %if.else, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !5855
  ret i8 %17, !dbg !5855
}

; Function Attrs: noinline nounwind uwtable
define internal void @stabstr_O(%union.tree_node* %cst) #0 !dbg !5856 {
entry:
  %cst.addr = alloca %union.tree_node*, align 8
  %high = alloca i64, align 8
  %low = alloca i64, align 8
  %buf = alloca [128 x i8], align 16
  %p = alloca i8*, align 8
  %width = alloca i32, align 4
  %digit = alloca i32, align 4
  %n_digits = alloca i32, align 4
  %i = alloca i32, align 4
  %digit35 = alloca i32, align 4
  %n_leftover_bits = alloca i32, align 4
  %n_bits_from_high = alloca i32, align 4
  %low_mask = alloca i64, align 8
  %high_mask = alloca i64, align 8
  %digit42 = alloca i32, align 4
  %digit57 = alloca i32, align 4
  store %union.tree_node* %cst, %union.tree_node** %cst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst.addr, metadata !5857, metadata !DIExpression()), !dbg !5858
  call void @llvm.dbg.declare(metadata i64* %high, metadata !5859, metadata !DIExpression()), !dbg !5860
  %0 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !5861
  %int_cst = bitcast %union.tree_node* %0 to %struct.tree_int_cst*, !dbg !5861
  %int_cst1 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !5861
  %high2 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1, i32 0, i32 1, !dbg !5861
  %1 = load i64, i64* %high2, align 8, !dbg !5861
  store i64 %1, i64* %high, align 8, !dbg !5860
  call void @llvm.dbg.declare(metadata i64* %low, metadata !5862, metadata !DIExpression()), !dbg !5863
  %2 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !5864
  %int_cst3 = bitcast %union.tree_node* %2 to %struct.tree_int_cst*, !dbg !5864
  %int_cst4 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst3, i32 0, i32 1, !dbg !5864
  %low5 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst4, i32 0, i32 0, !dbg !5864
  %3 = load i64, i64* %low5, align 8, !dbg !5864
  store i64 %3, i64* %low, align 8, !dbg !5863
  call void @llvm.dbg.declare(metadata [128 x i8]* %buf, metadata !5865, metadata !DIExpression()), !dbg !5869
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5870, metadata !DIExpression()), !dbg !5871
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !5872
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 128, !dbg !5873
  store i8* %add.ptr, i8** %p, align 8, !dbg !5871
  call void @llvm.dbg.declare(metadata i32* %width, metadata !5874, metadata !DIExpression()), !dbg !5877
  %4 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !5878
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !5878
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5878
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5878
  %type6 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !5878
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 6, !dbg !5878
  %bf.load = load i32, i32* %precision, align 4, !dbg !5878
  %bf.clear = and i32 %bf.load, 1023, !dbg !5878
  store i32 %bf.clear, i32* %width, align 4, !dbg !5877
  %6 = load i32, i32* %width, align 4, !dbg !5879
  %cmp = icmp eq i32 %6, 128, !dbg !5881
  br i1 %cmp, label %if.then, label %if.else, !dbg !5882

if.then:                                          ; preds = %entry
  br label %if.end19, !dbg !5882

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %width, align 4, !dbg !5883
  %cmp7 = icmp ugt i32 %7, 64, !dbg !5885
  br i1 %cmp7, label %if.then8, label %if.else10, !dbg !5886

if.then8:                                         ; preds = %if.else
  %8 = load i32, i32* %width, align 4, !dbg !5887
  %sub = sub i32 %8, 64, !dbg !5888
  %sh_prom = zext i32 %sub to i64, !dbg !5889
  %shl = shl i64 1, %sh_prom, !dbg !5889
  %sub9 = sub nsw i64 %shl, 1, !dbg !5890
  %9 = load i64, i64* %high, align 8, !dbg !5891
  %and = and i64 %9, %sub9, !dbg !5891
  store i64 %and, i64* %high, align 8, !dbg !5891
  br label %if.end18, !dbg !5892

if.else10:                                        ; preds = %if.else
  %10 = load i32, i32* %width, align 4, !dbg !5893
  %cmp11 = icmp eq i32 %10, 64, !dbg !5895
  br i1 %cmp11, label %if.then12, label %if.else13, !dbg !5896

if.then12:                                        ; preds = %if.else10
  store i64 0, i64* %high, align 8, !dbg !5897
  br label %if.end, !dbg !5898

if.else13:                                        ; preds = %if.else10
  store i64 0, i64* %high, align 8, !dbg !5899
  %11 = load i32, i32* %width, align 4, !dbg !5900
  %sh_prom14 = zext i32 %11 to i64, !dbg !5901
  %shl15 = shl i64 1, %sh_prom14, !dbg !5901
  %sub16 = sub nsw i64 %shl15, 1, !dbg !5902
  %12 = load i64, i64* %low, align 8, !dbg !5903
  %and17 = and i64 %12, %sub16, !dbg !5903
  store i64 %and17, i64* %low, align 8, !dbg !5903
  br label %if.end

if.end:                                           ; preds = %if.else13, %if.then12
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then8
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then
  %13 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5904
  %add.ptr20 = getelementptr inbounds i8, i8* %13, i64 1, !dbg !5904
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5904
  %cmp21 = icmp ugt i8* %add.ptr20, %14, !dbg !5904
  br i1 %cmp21, label %cond.true, label %cond.false, !dbg !5904

cond.true:                                        ; preds = %if.end19
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !5904
  br label %cond.end, !dbg !5904

cond.false:                                       ; preds = %if.end19
  br label %cond.end, !dbg !5904

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5904
  %15 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5904
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !5904
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5904
  store i8 48, i8* %15, align 1, !dbg !5904
  %16 = load i64, i64* %high, align 8, !dbg !5905
  %cmp22 = icmp eq i64 %16, 0, !dbg !5907
  br i1 %cmp22, label %land.lhs.true, label %if.end25, !dbg !5908

land.lhs.true:                                    ; preds = %cond.end
  %17 = load i64, i64* %low, align 8, !dbg !5909
  %cmp23 = icmp eq i64 %17, 0, !dbg !5910
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !5911

if.then24:                                        ; preds = %land.lhs.true
  br label %return, !dbg !5912

if.end25:                                         ; preds = %land.lhs.true, %cond.end
  %18 = load i64, i64* %high, align 8, !dbg !5913
  %cmp26 = icmp eq i64 %18, 0, !dbg !5915
  br i1 %cmp26, label %if.then27, label %if.else32, !dbg !5916

if.then27:                                        ; preds = %if.end25
  br label %do.body, !dbg !5917

do.body:                                          ; preds = %do.cond, %if.then27
  call void @llvm.dbg.declare(metadata i32* %digit, metadata !5918, metadata !DIExpression()), !dbg !5920
  %19 = load i64, i64* %low, align 8, !dbg !5920
  %rem = urem i64 %19, 8, !dbg !5920
  %conv = trunc i64 %rem to i32, !dbg !5920
  store i32 %conv, i32* %digit, align 4, !dbg !5920
  %20 = load i64, i64* %low, align 8, !dbg !5920
  %div = udiv i64 %20, 8, !dbg !5920
  store i64 %div, i64* %low, align 8, !dbg !5920
  %21 = load i32, i32* %digit, align 4, !dbg !5920
  %add = add nsw i32 %21, 48, !dbg !5920
  %conv28 = trunc i32 %add to i8, !dbg !5920
  %22 = load i8*, i8** %p, align 8, !dbg !5920
  %incdec.ptr29 = getelementptr inbounds i8, i8* %22, i32 -1, !dbg !5920
  store i8* %incdec.ptr29, i8** %p, align 8, !dbg !5920
  store i8 %conv28, i8* %incdec.ptr29, align 1, !dbg !5920
  br label %do.cond, !dbg !5920

do.cond:                                          ; preds = %do.body
  %23 = load i64, i64* %low, align 8, !dbg !5917
  %cmp30 = icmp ugt i64 %23, 0, !dbg !5917
  br i1 %cmp30, label %do.body, label %do.end, !dbg !5920, !llvm.loop !5921

do.end:                                           ; preds = %do.cond
  br label %if.end69, !dbg !5920

if.else32:                                        ; preds = %if.end25
  call void @llvm.dbg.declare(metadata i32* %n_digits, metadata !5922, metadata !DIExpression()), !dbg !5925
  store i32 21, i32* %n_digits, align 4, !dbg !5925
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5926, metadata !DIExpression()), !dbg !5927
  store i32 1, i32* %i, align 4, !dbg !5928
  br label %for.cond, !dbg !5930

for.cond:                                         ; preds = %for.inc, %if.else32
  %24 = load i32, i32* %i, align 4, !dbg !5931
  %cmp33 = icmp sle i32 %24, 21, !dbg !5933
  br i1 %cmp33, label %for.body, label %for.end, !dbg !5934

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %digit35, metadata !5935, metadata !DIExpression()), !dbg !5937
  %25 = load i64, i64* %low, align 8, !dbg !5938
  %rem36 = urem i64 %25, 8, !dbg !5939
  %conv37 = trunc i64 %rem36 to i32, !dbg !5938
  store i32 %conv37, i32* %digit35, align 4, !dbg !5937
  %26 = load i64, i64* %low, align 8, !dbg !5940
  %div38 = udiv i64 %26, 8, !dbg !5940
  store i64 %div38, i64* %low, align 8, !dbg !5940
  %27 = load i32, i32* %digit35, align 4, !dbg !5941
  %add39 = add i32 48, %27, !dbg !5942
  %conv40 = trunc i32 %add39 to i8, !dbg !5943
  %28 = load i8*, i8** %p, align 8, !dbg !5944
  %incdec.ptr41 = getelementptr inbounds i8, i8* %28, i32 -1, !dbg !5944
  store i8* %incdec.ptr41, i8** %p, align 8, !dbg !5944
  store i8 %conv40, i8* %incdec.ptr41, align 1, !dbg !5945
  br label %for.inc, !dbg !5946

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !dbg !5947
  %inc = add nsw i32 %29, 1, !dbg !5947
  store i32 %inc, i32* %i, align 4, !dbg !5947
  br label %for.cond, !dbg !5948, !llvm.loop !5949

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %n_leftover_bits, metadata !5951, metadata !DIExpression()), !dbg !5954
  store i32 1, i32* %n_leftover_bits, align 4, !dbg !5954
  call void @llvm.dbg.declare(metadata i32* %n_bits_from_high, metadata !5955, metadata !DIExpression()), !dbg !5956
  store i32 2, i32* %n_bits_from_high, align 4, !dbg !5956
  call void @llvm.dbg.declare(metadata i64* %low_mask, metadata !5957, metadata !DIExpression()), !dbg !5959
  store i64 1, i64* %low_mask, align 8, !dbg !5959
  call void @llvm.dbg.declare(metadata i64* %high_mask, metadata !5960, metadata !DIExpression()), !dbg !5961
  store i64 3, i64* %high_mask, align 8, !dbg !5961
  call void @llvm.dbg.declare(metadata i32* %digit42, metadata !5962, metadata !DIExpression()), !dbg !5963
  %30 = load i64, i64* %low, align 8, !dbg !5964
  %and43 = and i64 %30, -2, !dbg !5964
  %tobool = icmp ne i64 %and43, 0, !dbg !5964
  br i1 %tobool, label %cond.true44, label %cond.false45, !dbg !5964

cond.true44:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 764, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !5964
  br label %cond.end46, !dbg !5964

cond.false45:                                     ; preds = %for.end
  br label %cond.end46, !dbg !5964

cond.end46:                                       ; preds = %cond.false45, %cond.true44
  %cond47 = phi i32 [ 0, %cond.true44 ], [ 0, %cond.false45 ], !dbg !5964
  %31 = load i64, i64* %low, align 8, !dbg !5965
  %32 = load i64, i64* %high, align 8, !dbg !5966
  %and48 = and i64 %32, 3, !dbg !5967
  %shl49 = shl i64 %and48, 1, !dbg !5968
  %or = or i64 %31, %shl49, !dbg !5969
  %conv50 = trunc i64 %or to i32, !dbg !5970
  store i32 %conv50, i32* %digit42, align 4, !dbg !5971
  %33 = load i64, i64* %high, align 8, !dbg !5972
  %shr = lshr i64 %33, 2, !dbg !5972
  store i64 %shr, i64* %high, align 8, !dbg !5972
  %34 = load i32, i32* %digit42, align 4, !dbg !5973
  %add51 = add i32 48, %34, !dbg !5974
  %conv52 = trunc i32 %add51 to i8, !dbg !5975
  %35 = load i8*, i8** %p, align 8, !dbg !5976
  %incdec.ptr53 = getelementptr inbounds i8, i8* %35, i32 -1, !dbg !5976
  store i8* %incdec.ptr53, i8** %p, align 8, !dbg !5976
  store i8 %conv52, i8* %incdec.ptr53, align 1, !dbg !5977
  %36 = load i64, i64* %high, align 8, !dbg !5978
  %tobool54 = icmp ne i64 %36, 0, !dbg !5978
  br i1 %tobool54, label %if.then55, label %if.end68, !dbg !5980

if.then55:                                        ; preds = %cond.end46
  br label %do.body56, !dbg !5981

do.body56:                                        ; preds = %do.cond64, %if.then55
  call void @llvm.dbg.declare(metadata i32* %digit57, metadata !5982, metadata !DIExpression()), !dbg !5984
  %37 = load i64, i64* %high, align 8, !dbg !5984
  %rem58 = urem i64 %37, 8, !dbg !5984
  %conv59 = trunc i64 %rem58 to i32, !dbg !5984
  store i32 %conv59, i32* %digit57, align 4, !dbg !5984
  %38 = load i64, i64* %high, align 8, !dbg !5984
  %div60 = udiv i64 %38, 8, !dbg !5984
  store i64 %div60, i64* %high, align 8, !dbg !5984
  %39 = load i32, i32* %digit57, align 4, !dbg !5984
  %add61 = add nsw i32 %39, 48, !dbg !5984
  %conv62 = trunc i32 %add61 to i8, !dbg !5984
  %40 = load i8*, i8** %p, align 8, !dbg !5984
  %incdec.ptr63 = getelementptr inbounds i8, i8* %40, i32 -1, !dbg !5984
  store i8* %incdec.ptr63, i8** %p, align 8, !dbg !5984
  store i8 %conv62, i8* %incdec.ptr63, align 1, !dbg !5984
  br label %do.cond64, !dbg !5984

do.cond64:                                        ; preds = %do.body56
  %41 = load i64, i64* %high, align 8, !dbg !5981
  %cmp65 = icmp ugt i64 %41, 0, !dbg !5981
  br i1 %cmp65, label %do.body56, label %do.end67, !dbg !5984, !llvm.loop !5985

do.end67:                                         ; preds = %do.cond64
  br label %if.end68, !dbg !5984

if.end68:                                         ; preds = %do.end67, %cond.end46
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %do.end
  %arraydecay70 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !5986
  %add.ptr71 = getelementptr inbounds i8, i8* %arraydecay70, i64 128, !dbg !5986
  %42 = load i8*, i8** %p, align 8, !dbg !5986
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr71 to i64, !dbg !5986
  %sub.ptr.rhs.cast = ptrtoint i8* %42 to i64, !dbg !5986
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5986
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5986
  %43 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5986
  %44 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5986
  %add.ptr72 = getelementptr inbounds i8, i8* %43, i64 %44, !dbg !5986
  %45 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !5986
  %cmp73 = icmp ugt i8* %add.ptr72, %45, !dbg !5986
  br i1 %cmp73, label %cond.true75, label %cond.false77, !dbg !5986

cond.true75:                                      ; preds = %if.end69
  %46 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5986
  %conv76 = trunc i64 %46 to i32, !dbg !5986
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv76), !dbg !5986
  br label %cond.end78, !dbg !5986

cond.false77:                                     ; preds = %if.end69
  br label %cond.end78, !dbg !5986

cond.end78:                                       ; preds = %cond.false77, %cond.true75
  %cond79 = phi i32 [ 0, %cond.true75 ], [ 0, %cond.false77 ], !dbg !5986
  %47 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5986
  %48 = load i8*, i8** %p, align 8, !dbg !5986
  %49 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5986
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %48, i64 %49, i1 false), !dbg !5986
  %50 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !5986
  %51 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5986
  %add.ptr80 = getelementptr inbounds i8, i8* %51, i64 %50, !dbg !5986
  store i8* %add.ptr80, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !5986
  br label %return, !dbg !5987

return:                                           ; preds = %cond.end78, %if.then24
  ret void, !dbg !5987
}

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_type_name(%union.tree_node* %type) #0 !dbg !5988 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5989, metadata !DIExpression()), !dbg !5990
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5991, metadata !DIExpression()), !dbg !5992
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5993
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !5993
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 12, !dbg !5993
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5993
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !5992
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5994
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5994
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5994

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 2324, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !5994
  br label %cond.end, !dbg !5994

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5994

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5994
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5995
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5995
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5995
  %bf.load = load i64, i64* %4, align 8, !dbg !5995
  %bf.clear = and i64 %bf.load, 65535, !dbg !5995
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5995
  switch i32 %bf.cast, label %sw.default [
    i32 1, label %sw.bb
    i32 35, label %sw.bb2
  ], !dbg !5996

sw.bb:                                            ; preds = %cond.end
  br label %sw.epilog, !dbg !5997

sw.bb2:                                           ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5999
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !5999
  %name3 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !5999
  %6 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !5999
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !6000
  br label %sw.epilog, !dbg !6001

sw.default:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 2333, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !6002
  br label %sw.epilog, !dbg !6003

sw.epilog:                                        ; preds = %sw.default, %sw.bb2, %sw.bb
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6004
  %identifier = bitcast %union.tree_node* %7 to %struct.tree_identifier*, !dbg !6004
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !6004
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !6004
  %8 = load i32, i32* %len, align 8, !dbg !6004
  %conv = zext i32 %8 to i64, !dbg !6004
  store i64 %conv, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6004
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6004
  %10 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6004
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %10, !dbg !6004
  %11 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6004
  %cmp = icmp ugt i8* %add.ptr, %11, !dbg !6004
  br i1 %cmp, label %cond.true5, label %cond.false7, !dbg !6004

cond.true5:                                       ; preds = %sw.epilog
  %12 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6004
  %conv6 = trunc i64 %12 to i32, !dbg !6004
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv6), !dbg !6004
  br label %cond.end8, !dbg !6004

cond.false7:                                      ; preds = %sw.epilog
  br label %cond.end8, !dbg !6004

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false7 ], !dbg !6004
  %13 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6004
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6004
  %identifier10 = bitcast %union.tree_node* %14 to %struct.tree_identifier*, !dbg !6004
  %id11 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier10, i32 0, i32 1, !dbg !6004
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id11, i32 0, i32 0, !dbg !6004
  %15 = load i8*, i8** %str, align 8, !dbg !6004
  %16 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6004
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %15, i64 %16, i1 false), !dbg !6004
  %17 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6004
  %18 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6004
  %add.ptr12 = getelementptr inbounds i8, i8* %18, i64 %17, !dbg !6004
  store i8* %add.ptr12, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6004
  ret void, !dbg !6005
}

; Function Attrs: noinline nounwind uwtable
define internal void @stabstr_U(i64 %num) #0 !dbg !6006 {
entry:
  %num.addr = alloca i64, align 8
  %buf = alloca [64 x i8], align 16
  %p = alloca i8*, align 8
  %digit = alloca i32, align 4
  store i64 %num, i64* %num.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %num.addr, metadata !6009, metadata !DIExpression()), !dbg !6010
  call void @llvm.dbg.declare(metadata [64 x i8]* %buf, metadata !6011, metadata !DIExpression()), !dbg !6012
  call void @llvm.dbg.declare(metadata i8** %p, metadata !6013, metadata !DIExpression()), !dbg !6014
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !6015
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 64, !dbg !6016
  store i8* %add.ptr, i8** %p, align 8, !dbg !6014
  %0 = load i64, i64* %num.addr, align 8, !dbg !6017
  %cmp = icmp eq i64 %0, 0, !dbg !6019
  br i1 %cmp, label %if.then, label %if.end, !dbg !6020

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6021
  %add.ptr1 = getelementptr inbounds i8, i8* %1, i64 1, !dbg !6021
  %2 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6021
  %cmp2 = icmp ugt i8* %add.ptr1, %2, !dbg !6021
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !6021

cond.true:                                        ; preds = %if.then
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6021
  br label %cond.end, !dbg !6021

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !6021

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6021
  %3 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6021
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !6021
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6021
  store i8 48, i8* %3, align 1, !dbg !6021
  br label %return, !dbg !6023

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !6024

do.body:                                          ; preds = %do.cond, %if.end
  call void @llvm.dbg.declare(metadata i32* %digit, metadata !6025, metadata !DIExpression()), !dbg !6027
  %4 = load i64, i64* %num.addr, align 8, !dbg !6027
  %rem = urem i64 %4, 10, !dbg !6027
  %conv = trunc i64 %rem to i32, !dbg !6027
  store i32 %conv, i32* %digit, align 4, !dbg !6027
  %5 = load i64, i64* %num.addr, align 8, !dbg !6027
  %div = udiv i64 %5, 10, !dbg !6027
  store i64 %div, i64* %num.addr, align 8, !dbg !6027
  %6 = load i32, i32* %digit, align 4, !dbg !6027
  %add = add nsw i32 %6, 48, !dbg !6027
  %conv3 = trunc i32 %add to i8, !dbg !6027
  %7 = load i8*, i8** %p, align 8, !dbg !6027
  %incdec.ptr4 = getelementptr inbounds i8, i8* %7, i32 -1, !dbg !6027
  store i8* %incdec.ptr4, i8** %p, align 8, !dbg !6027
  store i8 %conv3, i8* %incdec.ptr4, align 1, !dbg !6027
  br label %do.cond, !dbg !6027

do.cond:                                          ; preds = %do.body
  %8 = load i64, i64* %num.addr, align 8, !dbg !6024
  %cmp5 = icmp ugt i64 %8, 0, !dbg !6024
  br i1 %cmp5, label %do.body, label %do.end, !dbg !6027, !llvm.loop !6028

do.end:                                           ; preds = %do.cond
  %arraydecay7 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !6029
  %add.ptr8 = getelementptr inbounds i8, i8* %arraydecay7, i64 64, !dbg !6029
  %9 = load i8*, i8** %p, align 8, !dbg !6029
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr8 to i64, !dbg !6029
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64, !dbg !6029
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6029
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6029
  %10 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6029
  %11 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6029
  %add.ptr9 = getelementptr inbounds i8, i8* %10, i64 %11, !dbg !6029
  %12 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6029
  %cmp10 = icmp ugt i8* %add.ptr9, %12, !dbg !6029
  br i1 %cmp10, label %cond.true12, label %cond.false14, !dbg !6029

cond.true12:                                      ; preds = %do.end
  %13 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6029
  %conv13 = trunc i64 %13 to i32, !dbg !6029
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv13), !dbg !6029
  br label %cond.end15, !dbg !6029

cond.false14:                                     ; preds = %do.end
  br label %cond.end15, !dbg !6029

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false14 ], !dbg !6029
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6029
  %15 = load i8*, i8** %p, align 8, !dbg !6029
  %16 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6029
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 %16, i1 false), !dbg !6029
  %17 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6029
  %18 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6029
  %add.ptr17 = getelementptr inbounds i8, i8* %18, i64 %17, !dbg !6029
  store i8* %add.ptr17, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6029
  br label %return, !dbg !6030

return:                                           ; preds = %cond.end15, %cond.end
  ret void, !dbg !6030
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !6031 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6034, metadata !DIExpression()), !dbg !6035
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6036, metadata !DIExpression()), !dbg !6035
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6035
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6035
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6035

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6035
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6035
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6035
  %3 = load i32, i32* %num, align 8, !dbg !6035
  %cmp = icmp ult i32 %1, %3, !dbg !6035
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6037
  %land.ext = zext i1 %4 to i32, !dbg !6035
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6035
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !6035
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6035
  %idxprom = zext i32 %6 to i64, !dbg !6035
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6035
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6035
  ret %union.tree_node* %7, !dbg !6035
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_type_fields(%union.tree_node* %type) #0 !dbg !6038 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %name150 = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6039, metadata !DIExpression()), !dbg !6040
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !6041, metadata !DIExpression()), !dbg !6042
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6043
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !6043
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !6043
  %1 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6043
  store %union.tree_node* %1, %union.tree_node** %tem, align 8, !dbg !6045
  br label %for.cond, !dbg !6046

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6047
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6049
  br i1 %tobool, label %for.body, label %for.end, !dbg !6049

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6050
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6053
  %cmp = icmp eq %union.tree_node* %3, %4, !dbg !6054
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6055

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6056
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6056
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6056
  %6 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6056
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6057
  %cmp3 = icmp eq %union.tree_node* %6, %7, !dbg !6058
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6059

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.end, !dbg !6060

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6061
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6061
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !6061
  %bf.load = load i64, i64* %9, align 8, !dbg !6061
  %bf.clear = and i64 %bf.load, 65535, !dbg !6061
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6061
  %cmp4 = icmp eq i32 %bf.cast, 35, !dbg !6063
  br i1 %cmp4, label %if.then26, label %lor.lhs.false5, !dbg !6064

lor.lhs.false5:                                   ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6065
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !6065
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6065
  %11 = bitcast i40* %ignored_flag to i64*, !dbg !6065
  %bf.load6 = load i64, i64* %11, align 8, !dbg !6065
  %bf.lshr = lshr i64 %bf.load6, 10, !dbg !6065
  %bf.clear7 = and i64 %bf.lshr, 1, !dbg !6065
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !6065
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !6065
  br i1 %tobool9, label %if.then26, label %lor.lhs.false10, !dbg !6066

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %12 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6067
  %base11 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6067
  %13 = bitcast %struct.tree_base* %base11 to i64*, !dbg !6067
  %bf.load12 = load i64, i64* %13, align 8, !dbg !6067
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !6067
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !6067
  %cmp15 = icmp eq i32 %bf.cast14, 31, !dbg !6068
  br i1 %cmp15, label %land.lhs.true, label %if.else, !dbg !6069

land.lhs.true:                                    ; preds = %lor.lhs.false10
  %14 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6070
  %call = call %union.tree_node* @bit_position(%union.tree_node* %14), !dbg !6071
  %call16 = call i32 @host_integerp(%union.tree_node* %call, i32 0), !dbg !6072
  %tobool17 = icmp ne i32 %call16, 0, !dbg !6072
  br i1 %tobool17, label %lor.lhs.false18, label %if.then26, !dbg !6073

lor.lhs.false18:                                  ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6074
  %decl_common19 = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !6074
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common19, i32 0, i32 1, !dbg !6074
  %16 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !6074
  %tobool20 = icmp ne %union.tree_node* %16, null, !dbg !6074
  br i1 %tobool20, label %lor.lhs.false21, label %if.then26, !dbg !6075

lor.lhs.false21:                                  ; preds = %lor.lhs.false18
  %17 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6076
  %decl_common22 = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !6076
  %size23 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common22, i32 0, i32 1, !dbg !6076
  %18 = load %union.tree_node*, %union.tree_node** %size23, align 8, !dbg !6076
  %call24 = call i32 @host_integerp(%union.tree_node* %18, i32 1), !dbg !6077
  %tobool25 = icmp ne i32 %call24, 0, !dbg !6077
  br i1 %tobool25, label %if.else, label %if.then26, !dbg !6078

if.then26:                                        ; preds = %lor.lhs.false21, %lor.lhs.false18, %land.lhs.true, %lor.lhs.false5, %if.end
  br label %for.inc, !dbg !6079

if.else:                                          ; preds = %lor.lhs.false21, %lor.lhs.false10
  %19 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6080
  %base27 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6080
  %20 = bitcast %struct.tree_base* %base27 to i64*, !dbg !6080
  %bf.load28 = load i64, i64* %20, align 8, !dbg !6080
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !6080
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !6080
  %cmp31 = icmp ne i32 %bf.cast30, 33, !dbg !6082
  br i1 %cmp31, label %if.then32, label %if.end225, !dbg !6083

if.then32:                                        ; preds = %if.else
  %21 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6084
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6087
  %type33 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !6087
  %values34 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type33, i32 0, i32 1, !dbg !6087
  %23 = load %union.tree_node*, %union.tree_node** %values34, align 8, !dbg !6087
  %cmp35 = icmp ne %union.tree_node* %21, %23, !dbg !6088
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !6089

if.then36:                                        ; preds = %if.then32
  call void @stabstr_continue(), !dbg !6090
  br label %if.end37, !dbg !6090

if.end37:                                         ; preds = %if.then36, %if.then32
  %24 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6091
  %decl_minimal = bitcast %union.tree_node* %24 to %struct.tree_decl_minimal*, !dbg !6091
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !6091
  %25 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6091
  %tobool38 = icmp ne %union.tree_node* %25, null, !dbg !6091
  br i1 %tobool38, label %if.then39, label %if.end50, !dbg !6093

if.then39:                                        ; preds = %if.end37
  %26 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6094
  %decl_minimal40 = bitcast %union.tree_node* %26 to %struct.tree_decl_minimal*, !dbg !6094
  %name41 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal40, i32 0, i32 3, !dbg !6094
  %27 = load %union.tree_node*, %union.tree_node** %name41, align 8, !dbg !6094
  %identifier = bitcast %union.tree_node* %27 to %struct.tree_identifier*, !dbg !6094
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !6094
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !6094
  %28 = load i32, i32* %len, align 8, !dbg !6094
  %conv = zext i32 %28 to i64, !dbg !6094
  store i64 %conv, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6094
  %29 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6094
  %30 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6094
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %30, !dbg !6094
  %31 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6094
  %cmp42 = icmp ugt i8* %add.ptr, %31, !dbg !6094
  br i1 %cmp42, label %cond.true, label %cond.false, !dbg !6094

cond.true:                                        ; preds = %if.then39
  %32 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6094
  %conv44 = trunc i64 %32 to i32, !dbg !6094
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv44), !dbg !6094
  br label %cond.end, !dbg !6094

cond.false:                                       ; preds = %if.then39
  br label %cond.end, !dbg !6094

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6094
  %33 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6094
  %34 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6094
  %decl_minimal45 = bitcast %union.tree_node* %34 to %struct.tree_decl_minimal*, !dbg !6094
  %name46 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal45, i32 0, i32 3, !dbg !6094
  %35 = load %union.tree_node*, %union.tree_node** %name46, align 8, !dbg !6094
  %identifier47 = bitcast %union.tree_node* %35 to %struct.tree_identifier*, !dbg !6094
  %id48 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier47, i32 0, i32 1, !dbg !6094
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id48, i32 0, i32 0, !dbg !6094
  %36 = load i8*, i8** %str, align 8, !dbg !6094
  %37 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6094
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %36, i64 %37, i1 false), !dbg !6094
  %38 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6094
  %39 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6094
  %add.ptr49 = getelementptr inbounds i8, i8* %39, i64 %38, !dbg !6094
  store i8* %add.ptr49, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6094
  br label %if.end50, !dbg !6094

if.end50:                                         ; preds = %cond.end, %if.end37
  %40 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6095
  %add.ptr51 = getelementptr inbounds i8, i8* %40, i64 1, !dbg !6095
  %41 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6095
  %cmp52 = icmp ugt i8* %add.ptr51, %41, !dbg !6095
  br i1 %cmp52, label %cond.true54, label %cond.false55, !dbg !6095

cond.true54:                                      ; preds = %if.end50
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6095
  br label %cond.end56, !dbg !6095

cond.false55:                                     ; preds = %if.end50
  br label %cond.end56, !dbg !6095

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond57 = phi i32 [ 0, %cond.true54 ], [ 0, %cond.false55 ], !dbg !6095
  %42 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6095
  %incdec.ptr = getelementptr inbounds i8, i8* %42, i32 1, !dbg !6095
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6095
  store i8 58, i8* %42, align 1, !dbg !6095
  %43 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !6096
  %conv58 = zext i8 %43 to i32, !dbg !6096
  %tobool59 = icmp ne i32 %conv58, 0, !dbg !6096
  br i1 %tobool59, label %land.lhs.true60, label %if.end116, !dbg !6098

land.lhs.true60:                                  ; preds = %cond.end56
  %44 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6099
  %base61 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !6099
  %45 = bitcast %struct.tree_base* %base61 to i64*, !dbg !6099
  %bf.load62 = load i64, i64* %45, align 8, !dbg !6099
  %bf.lshr63 = lshr i64 %bf.load62, 28, !dbg !6099
  %bf.clear64 = and i64 %bf.lshr63, 1, !dbg !6099
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !6099
  %tobool66 = icmp ne i32 %bf.cast65, 0, !dbg !6099
  br i1 %tobool66, label %if.then81, label %lor.lhs.false67, !dbg !6100

lor.lhs.false67:                                  ; preds = %land.lhs.true60
  %46 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6101
  %base68 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !6101
  %47 = bitcast %struct.tree_base* %base68 to i64*, !dbg !6101
  %bf.load69 = load i64, i64* %47, align 8, !dbg !6101
  %bf.lshr70 = lshr i64 %bf.load69, 29, !dbg !6101
  %bf.clear71 = and i64 %bf.lshr70, 1, !dbg !6101
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !6101
  %tobool73 = icmp ne i32 %bf.cast72, 0, !dbg !6101
  br i1 %tobool73, label %if.then81, label %lor.lhs.false74, !dbg !6102

lor.lhs.false74:                                  ; preds = %lor.lhs.false67
  %48 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6103
  %base75 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !6103
  %49 = bitcast %struct.tree_base* %base75 to i64*, !dbg !6103
  %bf.load76 = load i64, i64* %49, align 8, !dbg !6103
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !6103
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !6103
  %cmp79 = icmp ne i32 %bf.cast78, 31, !dbg !6104
  br i1 %cmp79, label %if.then81, label %if.end116, !dbg !6105

if.then81:                                        ; preds = %lor.lhs.false74, %lor.lhs.false67, %land.lhs.true60
  %50 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6106
  %add.ptr82 = getelementptr inbounds i8, i8* %50, i64 1, !dbg !6106
  %51 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6106
  %cmp83 = icmp ugt i8* %add.ptr82, %51, !dbg !6106
  br i1 %cmp83, label %cond.true85, label %cond.false86, !dbg !6106

cond.true85:                                      ; preds = %if.then81
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6106
  br label %cond.end87, !dbg !6106

cond.false86:                                     ; preds = %if.then81
  br label %cond.end87, !dbg !6106

cond.end87:                                       ; preds = %cond.false86, %cond.true85
  %cond88 = phi i32 [ 0, %cond.true85 ], [ 0, %cond.false86 ], !dbg !6106
  %52 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6106
  %incdec.ptr89 = getelementptr inbounds i8, i8* %52, i32 1, !dbg !6106
  store i8* %incdec.ptr89, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6106
  store i8 47, i8* %52, align 1, !dbg !6106
  %53 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6108
  %add.ptr90 = getelementptr inbounds i8, i8* %53, i64 1, !dbg !6108
  %54 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6108
  %cmp91 = icmp ugt i8* %add.ptr90, %54, !dbg !6108
  br i1 %cmp91, label %cond.true93, label %cond.false94, !dbg !6108

cond.true93:                                      ; preds = %cond.end87
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6108
  br label %cond.end95, !dbg !6108

cond.false94:                                     ; preds = %cond.end87
  br label %cond.end95, !dbg !6108

cond.end95:                                       ; preds = %cond.false94, %cond.true93
  %cond96 = phi i32 [ 0, %cond.true93 ], [ 0, %cond.false94 ], !dbg !6108
  %55 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6108
  %base97 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !6108
  %56 = bitcast %struct.tree_base* %base97 to i64*, !dbg !6108
  %bf.load98 = load i64, i64* %56, align 8, !dbg !6108
  %bf.lshr99 = lshr i64 %bf.load98, 28, !dbg !6108
  %bf.clear100 = and i64 %bf.lshr99, 1, !dbg !6108
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !6108
  %tobool102 = icmp ne i32 %bf.cast101, 0, !dbg !6108
  br i1 %tobool102, label %cond.true103, label %cond.false104, !dbg !6108

cond.true103:                                     ; preds = %cond.end95
  br label %cond.end112, !dbg !6108

cond.false104:                                    ; preds = %cond.end95
  %57 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6108
  %base105 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !6108
  %58 = bitcast %struct.tree_base* %base105 to i64*, !dbg !6108
  %bf.load106 = load i64, i64* %58, align 8, !dbg !6108
  %bf.lshr107 = lshr i64 %bf.load106, 29, !dbg !6108
  %bf.clear108 = and i64 %bf.lshr107, 1, !dbg !6108
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !6108
  %tobool110 = icmp ne i32 %bf.cast109, 0, !dbg !6108
  %59 = zext i1 %tobool110 to i64, !dbg !6108
  %cond111 = select i1 %tobool110, i32 49, i32 50, !dbg !6108
  br label %cond.end112, !dbg !6108

cond.end112:                                      ; preds = %cond.false104, %cond.true103
  %cond113 = phi i32 [ 48, %cond.true103 ], [ %cond111, %cond.false104 ], !dbg !6108
  %conv114 = trunc i32 %cond113 to i8, !dbg !6108
  %60 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6108
  %incdec.ptr115 = getelementptr inbounds i8, i8* %60, i32 1, !dbg !6108
  store i8* %incdec.ptr115, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6108
  store i8 %conv114, i8* %60, align 1, !dbg !6108
  br label %if.end116, !dbg !6109

if.end116:                                        ; preds = %cond.end112, %lor.lhs.false74, %cond.end56
  %61 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6110
  %base117 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !6110
  %62 = bitcast %struct.tree_base* %base117 to i64*, !dbg !6110
  %bf.load118 = load i64, i64* %62, align 8, !dbg !6110
  %bf.clear119 = and i64 %bf.load118, 65535, !dbg !6110
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !6110
  %cmp121 = icmp eq i32 %bf.cast120, 31, !dbg !6111
  br i1 %cmp121, label %land.lhs.true123, label %cond.false128, !dbg !6112

land.lhs.true123:                                 ; preds = %if.end116
  %63 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6113
  %field_decl = bitcast %union.tree_node* %63 to %struct.tree_field_decl*, !dbg !6113
  %bit_field_type = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 2, !dbg !6113
  %64 = load %union.tree_node*, %union.tree_node** %bit_field_type, align 8, !dbg !6113
  %tobool124 = icmp ne %union.tree_node* %64, null, !dbg !6113
  br i1 %tobool124, label %cond.true125, label %cond.false128, !dbg !6114

cond.true125:                                     ; preds = %land.lhs.true123
  %65 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6115
  %field_decl126 = bitcast %union.tree_node* %65 to %struct.tree_field_decl*, !dbg !6115
  %bit_field_type127 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl126, i32 0, i32 2, !dbg !6115
  %66 = load %union.tree_node*, %union.tree_node** %bit_field_type127, align 8, !dbg !6115
  br label %cond.end131, !dbg !6114

cond.false128:                                    ; preds = %land.lhs.true123, %if.end116
  %67 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6116
  %common129 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !6116
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !6116
  %68 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !6116
  br label %cond.end131, !dbg !6114

cond.end131:                                      ; preds = %cond.false128, %cond.true125
  %cond132 = phi %union.tree_node* [ %66, %cond.true125 ], [ %68, %cond.false128 ], !dbg !6114
  call void @dbxout_type(%union.tree_node* %cond132, i32 0), !dbg !6117
  %69 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6118
  %base133 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !6118
  %70 = bitcast %struct.tree_base* %base133 to i64*, !dbg !6118
  %bf.load134 = load i64, i64* %70, align 8, !dbg !6118
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !6118
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !6118
  %cmp137 = icmp eq i32 %bf.cast136, 32, !dbg !6120
  br i1 %cmp137, label %if.then139, label %if.else195, !dbg !6121

if.then139:                                       ; preds = %cond.end131
  %71 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6122
  %base140 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !6122
  %72 = bitcast %struct.tree_base* %base140 to i64*, !dbg !6122
  %bf.load141 = load i64, i64* %72, align 8, !dbg !6122
  %bf.lshr142 = lshr i64 %bf.load141, 26, !dbg !6122
  %bf.clear143 = and i64 %bf.lshr142, 1, !dbg !6122
  %bf.cast144 = trunc i64 %bf.clear143 to i32, !dbg !6122
  %tobool145 = icmp ne i32 %bf.cast144, 0, !dbg !6122
  br i1 %tobool145, label %land.lhs.true146, label %if.else184, !dbg !6125

land.lhs.true146:                                 ; preds = %if.then139
  %73 = load i8, i8* @use_gnu_debug_info_extensions, align 1, !dbg !6126
  %conv147 = zext i8 %73 to i32, !dbg !6126
  %tobool148 = icmp ne i32 %conv147, 0, !dbg !6126
  br i1 %tobool148, label %if.then149, label %if.else184, !dbg !6127

if.then149:                                       ; preds = %land.lhs.true146
  call void @llvm.dbg.declare(metadata %union.tree_node** %name150, metadata !6128, metadata !DIExpression()), !dbg !6130
  %74 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6131
  %call151 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %74), !dbg !6131
  store %union.tree_node* %call151, %union.tree_node** %name150, align 8, !dbg !6130
  %75 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6132
  %add.ptr152 = getelementptr inbounds i8, i8* %75, i64 1, !dbg !6132
  %76 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6132
  %cmp153 = icmp ugt i8* %add.ptr152, %76, !dbg !6132
  br i1 %cmp153, label %cond.true155, label %cond.false156, !dbg !6132

cond.true155:                                     ; preds = %if.then149
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6132
  br label %cond.end157, !dbg !6132

cond.false156:                                    ; preds = %if.then149
  br label %cond.end157, !dbg !6132

cond.end157:                                      ; preds = %cond.false156, %cond.true155
  %cond158 = phi i32 [ 0, %cond.true155 ], [ 0, %cond.false156 ], !dbg !6132
  %77 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6132
  %incdec.ptr159 = getelementptr inbounds i8, i8* %77, i32 1, !dbg !6132
  store i8* %incdec.ptr159, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6132
  store i8 58, i8* %77, align 1, !dbg !6132
  %78 = load %union.tree_node*, %union.tree_node** %name150, align 8, !dbg !6133
  %identifier160 = bitcast %union.tree_node* %78 to %struct.tree_identifier*, !dbg !6133
  %id161 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier160, i32 0, i32 1, !dbg !6133
  %len162 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id161, i32 0, i32 1, !dbg !6133
  %79 = load i32, i32* %len162, align 8, !dbg !6133
  %conv163 = zext i32 %79 to i64, !dbg !6133
  store i64 %conv163, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6133
  %80 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6133
  %81 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6133
  %add.ptr164 = getelementptr inbounds i8, i8* %80, i64 %81, !dbg !6133
  %82 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6133
  %cmp165 = icmp ugt i8* %add.ptr164, %82, !dbg !6133
  br i1 %cmp165, label %cond.true167, label %cond.false169, !dbg !6133

cond.true167:                                     ; preds = %cond.end157
  %83 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6133
  %conv168 = trunc i64 %83 to i32, !dbg !6133
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv168), !dbg !6133
  br label %cond.end170, !dbg !6133

cond.false169:                                    ; preds = %cond.end157
  br label %cond.end170, !dbg !6133

cond.end170:                                      ; preds = %cond.false169, %cond.true167
  %cond171 = phi i32 [ 0, %cond.true167 ], [ 0, %cond.false169 ], !dbg !6133
  %84 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6133
  %85 = load %union.tree_node*, %union.tree_node** %name150, align 8, !dbg !6133
  %identifier172 = bitcast %union.tree_node* %85 to %struct.tree_identifier*, !dbg !6133
  %id173 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier172, i32 0, i32 1, !dbg !6133
  %str174 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id173, i32 0, i32 0, !dbg !6133
  %86 = load i8*, i8** %str174, align 8, !dbg !6133
  %87 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6133
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %86, i64 %87, i1 false), !dbg !6133
  %88 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6133
  %89 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6133
  %add.ptr175 = getelementptr inbounds i8, i8* %89, i64 %88, !dbg !6133
  store i8* %add.ptr175, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6133
  %90 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6134
  %add.ptr176 = getelementptr inbounds i8, i8* %90, i64 1, !dbg !6134
  %91 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6134
  %cmp177 = icmp ugt i8* %add.ptr176, %91, !dbg !6134
  br i1 %cmp177, label %cond.true179, label %cond.false180, !dbg !6134

cond.true179:                                     ; preds = %cond.end170
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6134
  br label %cond.end181, !dbg !6134

cond.false180:                                    ; preds = %cond.end170
  br label %cond.end181, !dbg !6134

cond.end181:                                      ; preds = %cond.false180, %cond.true179
  %cond182 = phi i32 [ 0, %cond.true179 ], [ 0, %cond.false180 ], !dbg !6134
  %92 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6134
  %incdec.ptr183 = getelementptr inbounds i8, i8* %92, i32 1, !dbg !6134
  store i8* %incdec.ptr183, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6134
  store i8 59, i8* %92, align 1, !dbg !6134
  br label %if.end194, !dbg !6135

if.else184:                                       ; preds = %land.lhs.true146, %if.then139
  store i64 5, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6136
  %93 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6136
  %94 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6136
  %add.ptr185 = getelementptr inbounds i8, i8* %93, i64 %94, !dbg !6136
  %95 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6136
  %cmp186 = icmp ugt i8* %add.ptr185, %95, !dbg !6136
  br i1 %cmp186, label %cond.true188, label %cond.false190, !dbg !6136

cond.true188:                                     ; preds = %if.else184
  %96 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6136
  %conv189 = trunc i64 %96 to i32, !dbg !6136
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv189), !dbg !6136
  br label %cond.end191, !dbg !6136

cond.false190:                                    ; preds = %if.else184
  br label %cond.end191, !dbg !6136

cond.end191:                                      ; preds = %cond.false190, %cond.true188
  %cond192 = phi i32 [ 0, %cond.true188 ], [ 0, %cond.false190 ], !dbg !6136
  %97 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6136
  %98 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6136
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %97, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i64 0, i64 0), i64 %98, i1 false), !dbg !6136
  %99 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6136
  %100 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6136
  %add.ptr193 = getelementptr inbounds i8, i8* %100, i64 %99, !dbg !6136
  store i8* %add.ptr193, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6136
  br label %if.end194

if.end194:                                        ; preds = %cond.end191, %cond.end181
  br label %if.end224, !dbg !6137

if.else195:                                       ; preds = %cond.end131
  %101 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6138
  %add.ptr196 = getelementptr inbounds i8, i8* %101, i64 1, !dbg !6138
  %102 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6138
  %cmp197 = icmp ugt i8* %add.ptr196, %102, !dbg !6138
  br i1 %cmp197, label %cond.true199, label %cond.false200, !dbg !6138

cond.true199:                                     ; preds = %if.else195
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6138
  br label %cond.end201, !dbg !6138

cond.false200:                                    ; preds = %if.else195
  br label %cond.end201, !dbg !6138

cond.end201:                                      ; preds = %cond.false200, %cond.true199
  %cond202 = phi i32 [ 0, %cond.true199 ], [ 0, %cond.false200 ], !dbg !6138
  %103 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6138
  %incdec.ptr203 = getelementptr inbounds i8, i8* %103, i32 1, !dbg !6138
  store i8* %incdec.ptr203, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6138
  store i8 44, i8* %103, align 1, !dbg !6138
  %104 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6140
  %call204 = call i64 @int_bit_position(%union.tree_node* %104), !dbg !6141
  call void @stabstr_D(i64 %call204), !dbg !6142
  %105 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6143
  %add.ptr205 = getelementptr inbounds i8, i8* %105, i64 1, !dbg !6143
  %106 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6143
  %cmp206 = icmp ugt i8* %add.ptr205, %106, !dbg !6143
  br i1 %cmp206, label %cond.true208, label %cond.false209, !dbg !6143

cond.true208:                                     ; preds = %cond.end201
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6143
  br label %cond.end210, !dbg !6143

cond.false209:                                    ; preds = %cond.end201
  br label %cond.end210, !dbg !6143

cond.end210:                                      ; preds = %cond.false209, %cond.true208
  %cond211 = phi i32 [ 0, %cond.true208 ], [ 0, %cond.false209 ], !dbg !6143
  %107 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6143
  %incdec.ptr212 = getelementptr inbounds i8, i8* %107, i32 1, !dbg !6143
  store i8* %incdec.ptr212, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6143
  store i8 44, i8* %107, align 1, !dbg !6143
  %108 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6144
  %decl_common213 = bitcast %union.tree_node* %108 to %struct.tree_decl_common*, !dbg !6144
  %size214 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common213, i32 0, i32 1, !dbg !6144
  %109 = load %union.tree_node*, %union.tree_node** %size214, align 8, !dbg !6144
  %call215 = call i64 @tree_low_cst(%union.tree_node* %109, i32 1), !dbg !6145
  call void @stabstr_D(i64 %call215), !dbg !6146
  %110 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6147
  %add.ptr216 = getelementptr inbounds i8, i8* %110, i64 1, !dbg !6147
  %111 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6147
  %cmp217 = icmp ugt i8* %add.ptr216, %111, !dbg !6147
  br i1 %cmp217, label %cond.true219, label %cond.false220, !dbg !6147

cond.true219:                                     ; preds = %cond.end210
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6147
  br label %cond.end221, !dbg !6147

cond.false220:                                    ; preds = %cond.end210
  br label %cond.end221, !dbg !6147

cond.end221:                                      ; preds = %cond.false220, %cond.true219
  %cond222 = phi i32 [ 0, %cond.true219 ], [ 0, %cond.false220 ], !dbg !6147
  %112 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6147
  %incdec.ptr223 = getelementptr inbounds i8, i8* %112, i32 1, !dbg !6147
  store i8* %incdec.ptr223, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6147
  store i8 59, i8* %112, align 1, !dbg !6147
  br label %if.end224

if.end224:                                        ; preds = %cond.end221, %if.end194
  br label %if.end225, !dbg !6148

if.end225:                                        ; preds = %if.end224, %if.else
  br label %if.end226

if.end226:                                        ; preds = %if.end225
  br label %for.inc, !dbg !6149

for.inc:                                          ; preds = %if.end226, %if.then26
  %113 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6150
  %common227 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !6150
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common227, i32 0, i32 1, !dbg !6150
  %114 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6150
  store %union.tree_node* %114, %union.tree_node** %tem, align 8, !dbg !6151
  br label %for.cond, !dbg !6152, !llvm.loop !6153

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !6155
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_type_methods(%union.tree_node* %type) #0 !dbg !6156 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %methods = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %last = alloca %union.tree_node*, align 8
  %need_prefix = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6157, metadata !DIExpression()), !dbg !6158
  call void @llvm.dbg.declare(metadata %union.tree_node** %methods, metadata !6159, metadata !DIExpression()), !dbg !6160
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6161
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !6161
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 14, !dbg !6161
  %1 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !6161
  store %union.tree_node* %1, %union.tree_node** %methods, align 8, !dbg !6160
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6162, metadata !DIExpression()), !dbg !6163
  call void @llvm.dbg.declare(metadata %union.tree_node** %last, metadata !6164, metadata !DIExpression()), !dbg !6165
  %2 = load %union.tree_node*, %union.tree_node** %methods, align 8, !dbg !6166
  %cmp = icmp eq %union.tree_node* %2, null, !dbg !6168
  br i1 %cmp, label %if.then, label %if.end, !dbg !6169

if.then:                                          ; preds = %entry
  br label %while.end, !dbg !6170

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %methods, align 8, !dbg !6171
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6171
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6171
  %bf.load = load i64, i64* %4, align 8, !dbg !6171
  %bf.clear = and i64 %bf.load, 65535, !dbg !6171
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6171
  %cmp2 = icmp ne i32 %bf.cast, 3, !dbg !6173
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !6174

if.then3:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %methods, align 8, !dbg !6175
  store %union.tree_node* %5, %union.tree_node** %fndecl, align 8, !dbg !6176
  br label %if.end14, !dbg !6177

if.else:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %methods, align 8, !dbg !6178
  %vec = bitcast %union.tree_node* %6 to %struct.tree_vec*, !dbg !6178
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 2, !dbg !6178
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i64 0, i64 0, !dbg !6178
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6178
  %cmp4 = icmp ne %union.tree_node* %7, null, !dbg !6180
  br i1 %cmp4, label %if.then5, label %if.else9, !dbg !6181

if.then5:                                         ; preds = %if.else
  %8 = load %union.tree_node*, %union.tree_node** %methods, align 8, !dbg !6182
  %vec6 = bitcast %union.tree_node* %8 to %struct.tree_vec*, !dbg !6182
  %a7 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec6, i32 0, i32 2, !dbg !6182
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a7, i64 0, i64 0, !dbg !6182
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !6182
  store %union.tree_node* %9, %union.tree_node** %fndecl, align 8, !dbg !6183
  br label %if.end13, !dbg !6184

if.else9:                                         ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %methods, align 8, !dbg !6185
  %vec10 = bitcast %union.tree_node* %10 to %struct.tree_vec*, !dbg !6185
  %a11 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec10, i32 0, i32 2, !dbg !6185
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a11, i64 0, i64 1, !dbg !6185
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !6185
  store %union.tree_node* %11, %union.tree_node** %fndecl, align 8, !dbg !6186
  br label %if.end13

if.end13:                                         ; preds = %if.else9, %if.then5
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then3
  br label %while.cond, !dbg !6187

while.cond:                                       ; preds = %if.end72, %if.end14
  %12 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6188
  %tobool = icmp ne %union.tree_node* %12, null, !dbg !6187
  br i1 %tobool, label %while.body, label %while.end, !dbg !6187

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %need_prefix, metadata !6189, metadata !DIExpression()), !dbg !6191
  store i32 1, i32* %need_prefix, align 4, !dbg !6191
  store %union.tree_node* null, %union.tree_node** %last, align 8, !dbg !6192
  br label %for.cond, !dbg !6194

for.cond:                                         ; preds = %for.inc, %while.body
  %13 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6195
  %tobool15 = icmp ne %union.tree_node* %13, null, !dbg !6195
  br i1 %tobool15, label %land.rhs, label %land.end, !dbg !6197

land.rhs:                                         ; preds = %for.cond
  %14 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !6198
  %cmp16 = icmp eq %union.tree_node* %14, null, !dbg !6199
  br i1 %cmp16, label %lor.end, label %lor.rhs, !dbg !6200

lor.rhs:                                          ; preds = %land.rhs
  %15 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6201
  %decl_minimal = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !6201
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !6201
  %16 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6201
  %17 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !6202
  %decl_minimal17 = bitcast %union.tree_node* %17 to %struct.tree_decl_minimal*, !dbg !6202
  %name18 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal17, i32 0, i32 3, !dbg !6202
  %18 = load %union.tree_node*, %union.tree_node** %name18, align 8, !dbg !6202
  %cmp19 = icmp eq %union.tree_node* %16, %18, !dbg !6203
  br label %lor.end, !dbg !6200

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %19 = phi i1 [ true, %land.rhs ], [ %cmp19, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %for.cond
  %20 = phi i1 [ false, %for.cond ], [ %19, %lor.end ], !dbg !6204
  br i1 %20, label %for.body, label %for.end, !dbg !6205

for.body:                                         ; preds = %land.end
  %21 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6206
  %base20 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !6206
  %22 = bitcast %struct.tree_base* %base20 to i64*, !dbg !6206
  %bf.load21 = load i64, i64* %22, align 8, !dbg !6206
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !6206
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !6206
  %cmp24 = icmp ne i32 %bf.cast23, 29, !dbg !6209
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !6210

if.then25:                                        ; preds = %for.body
  br label %for.inc, !dbg !6211

if.end26:                                         ; preds = %for.body
  call void @stabstr_continue(), !dbg !6212
  %23 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6213
  store %union.tree_node* %23, %union.tree_node** %last, align 8, !dbg !6214
  %24 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6215
  %decl_common = bitcast %union.tree_node* %24 to %struct.tree_decl_common*, !dbg !6215
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6215
  %25 = bitcast i40* %ignored_flag to i64*, !dbg !6215
  %bf.load27 = load i64, i64* %25, align 8, !dbg !6215
  %bf.lshr = lshr i64 %bf.load27, 10, !dbg !6215
  %bf.clear28 = and i64 %bf.lshr, 1, !dbg !6215
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !6215
  %tobool30 = icmp ne i32 %bf.cast29, 0, !dbg !6215
  br i1 %tobool30, label %if.then37, label %lor.lhs.false, !dbg !6217

lor.lhs.false:                                    ; preds = %if.end26
  %26 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6218
  %decl_common31 = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !6218
  %abstract_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common31, i32 0, i32 2, !dbg !6218
  %27 = bitcast i40* %abstract_flag to i64*, !dbg !6218
  %bf.load32 = load i64, i64* %27, align 8, !dbg !6218
  %bf.lshr33 = lshr i64 %bf.load32, 11, !dbg !6218
  %bf.clear34 = and i64 %bf.lshr33, 1, !dbg !6218
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !6218
  %tobool36 = icmp ne i32 %bf.cast35, 0, !dbg !6218
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !6219

if.then37:                                        ; preds = %lor.lhs.false, %if.end26
  br label %for.inc, !dbg !6220

if.end38:                                         ; preds = %lor.lhs.false
  %28 = load i32, i32* %need_prefix, align 4, !dbg !6221
  %tobool39 = icmp ne i32 %28, 0, !dbg !6221
  br i1 %tobool39, label %if.then40, label %if.end60, !dbg !6223

if.then40:                                        ; preds = %if.end38
  %29 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6224
  %decl_minimal41 = bitcast %union.tree_node* %29 to %struct.tree_decl_minimal*, !dbg !6224
  %name42 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal41, i32 0, i32 3, !dbg !6224
  %30 = load %union.tree_node*, %union.tree_node** %name42, align 8, !dbg !6224
  %identifier = bitcast %union.tree_node* %30 to %struct.tree_identifier*, !dbg !6224
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !6224
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !6224
  %31 = load i32, i32* %len, align 8, !dbg !6224
  %conv = zext i32 %31 to i64, !dbg !6224
  store i64 %conv, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6224
  %32 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6224
  %33 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6224
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 %33, !dbg !6224
  %34 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6224
  %cmp43 = icmp ugt i8* %add.ptr, %34, !dbg !6224
  br i1 %cmp43, label %cond.true, label %cond.false, !dbg !6224

cond.true:                                        ; preds = %if.then40
  %35 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6224
  %conv45 = trunc i64 %35 to i32, !dbg !6224
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv45), !dbg !6224
  br label %cond.end, !dbg !6224

cond.false:                                       ; preds = %if.then40
  br label %cond.end, !dbg !6224

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6224
  %36 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6224
  %37 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6224
  %decl_minimal46 = bitcast %union.tree_node* %37 to %struct.tree_decl_minimal*, !dbg !6224
  %name47 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal46, i32 0, i32 3, !dbg !6224
  %38 = load %union.tree_node*, %union.tree_node** %name47, align 8, !dbg !6224
  %identifier48 = bitcast %union.tree_node* %38 to %struct.tree_identifier*, !dbg !6224
  %id49 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier48, i32 0, i32 1, !dbg !6224
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id49, i32 0, i32 0, !dbg !6224
  %39 = load i8*, i8** %str, align 8, !dbg !6224
  %40 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6224
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %39, i64 %40, i1 false), !dbg !6224
  %41 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6224
  %42 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6224
  %add.ptr50 = getelementptr inbounds i8, i8* %42, i64 %41, !dbg !6224
  store i8* %add.ptr50, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6224
  store i64 2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6226
  %43 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6226
  %44 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6226
  %add.ptr51 = getelementptr inbounds i8, i8* %43, i64 %44, !dbg !6226
  %45 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6226
  %cmp52 = icmp ugt i8* %add.ptr51, %45, !dbg !6226
  br i1 %cmp52, label %cond.true54, label %cond.false56, !dbg !6226

cond.true54:                                      ; preds = %cond.end
  %46 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6226
  %conv55 = trunc i64 %46 to i32, !dbg !6226
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv55), !dbg !6226
  br label %cond.end57, !dbg !6226

cond.false56:                                     ; preds = %cond.end
  br label %cond.end57, !dbg !6226

cond.end57:                                       ; preds = %cond.false56, %cond.true54
  %cond58 = phi i32 [ 0, %cond.true54 ], [ 0, %cond.false56 ], !dbg !6226
  %47 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6226
  %48 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i64 0, i64 0), i64 %48, i1 false), !dbg !6226
  %49 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6226
  %50 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6226
  %add.ptr59 = getelementptr inbounds i8, i8* %50, i64 %49, !dbg !6226
  store i8* %add.ptr59, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6226
  store i32 0, i32* %need_prefix, align 4, !dbg !6227
  br label %if.end60, !dbg !6228

if.end60:                                         ; preds = %cond.end57, %if.end38
  %51 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6229
  %common = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !6229
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6229
  %52 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !6229
  call void @dbxout_type(%union.tree_node* %52, i32 0), !dbg !6230
  %53 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6231
  call void @dbxout_type_method_1(%union.tree_node* %53), !dbg !6232
  br label %for.inc, !dbg !6233

for.inc:                                          ; preds = %if.end60, %if.then37, %if.then25
  %54 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6234
  %common62 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !6234
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 1, !dbg !6234
  %55 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6234
  store %union.tree_node* %55, %union.tree_node** %fndecl, align 8, !dbg !6235
  br label %for.cond, !dbg !6236, !llvm.loop !6237

for.end:                                          ; preds = %land.end
  %56 = load i32, i32* %need_prefix, align 4, !dbg !6239
  %tobool63 = icmp ne i32 %56, 0, !dbg !6239
  br i1 %tobool63, label %if.end72, label %if.then64, !dbg !6241

if.then64:                                        ; preds = %for.end
  %57 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6242
  %add.ptr65 = getelementptr inbounds i8, i8* %57, i64 1, !dbg !6242
  %58 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6242
  %cmp66 = icmp ugt i8* %add.ptr65, %58, !dbg !6242
  br i1 %cmp66, label %cond.true68, label %cond.false69, !dbg !6242

cond.true68:                                      ; preds = %if.then64
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6242
  br label %cond.end70, !dbg !6242

cond.false69:                                     ; preds = %if.then64
  br label %cond.end70, !dbg !6242

cond.end70:                                       ; preds = %cond.false69, %cond.true68
  %cond71 = phi i32 [ 0, %cond.true68 ], [ 0, %cond.false69 ], !dbg !6242
  %59 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6242
  %incdec.ptr = getelementptr inbounds i8, i8* %59, i32 1, !dbg !6242
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6242
  store i8 59, i8* %59, align 1, !dbg !6242
  br label %if.end72, !dbg !6242

if.end72:                                         ; preds = %cond.end70, %for.end
  br label %while.cond, !dbg !6187, !llvm.loop !6243

while.end:                                        ; preds = %if.then, %while.cond
  ret void, !dbg !6245
}

; Function Attrs: noinline nounwind uwtable
define internal void @stabstr_continue() #0 !dbg !6246 {
entry:
  ret void, !dbg !6247
}

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_args(%union.tree_node* %args) #0 !dbg !6248 {
entry:
  %args.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %args, %union.tree_node** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %args.addr, metadata !6249, metadata !DIExpression()), !dbg !6250
  br label %while.cond, !dbg !6251

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !6252
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6251
  br i1 %tobool, label %while.body, label %while.end, !dbg !6251

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6253
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !6253
  %2 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6253
  %cmp = icmp ugt i8* %add.ptr, %2, !dbg !6253
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6253

cond.true:                                        ; preds = %while.body
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6253
  br label %cond.end, !dbg !6253

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !6253

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6253
  %3 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6253
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !6253
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6253
  store i8 44, i8* %3, align 1, !dbg !6253
  %4 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !6255
  %list = bitcast %union.tree_node* %4 to %struct.tree_list*, !dbg !6255
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6255
  %5 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6255
  call void @dbxout_type(%union.tree_node* %5, i32 0), !dbg !6256
  %6 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !6257
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !6257
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6257
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6257
  store %union.tree_node* %7, %union.tree_node** %args.addr, align 8, !dbg !6258
  br label %while.cond, !dbg !6251, !llvm.loop !6259

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6261
}

declare dso_local %union.tree_node* @bit_position(%union.tree_node*) #1

declare dso_local i64 @int_bit_position(%union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_type_method_1(%union.tree_node* %decl) #0 !dbg !6262 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  %firstarg = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6263, metadata !DIExpression()), !dbg !6264
  call void @llvm.dbg.declare(metadata i8* %c1, metadata !6265, metadata !DIExpression()), !dbg !6266
  store i8 65, i8* %c1, align 1, !dbg !6266
  call void @llvm.dbg.declare(metadata i8* %c2, metadata !6267, metadata !DIExpression()), !dbg !6268
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6269
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6269
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6269
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6269
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6269
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6269
  %bf.load = load i64, i64* %2, align 8, !dbg !6269
  %bf.clear = and i64 %bf.load, 65535, !dbg !6269
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6269
  %cmp = icmp eq i32 %bf.cast, 20, !dbg !6271
  br i1 %cmp, label %if.then, label %if.else, !dbg !6272

if.then:                                          ; preds = %entry
  store i8 63, i8* %c2, align 1, !dbg !6273
  br label %if.end29, !dbg !6274

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %firstarg, metadata !6275, metadata !DIExpression()), !dbg !6277
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6278
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !6278
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !6278
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6278
  %type3 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !6278
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 1, !dbg !6278
  %5 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6278
  %list = bitcast %union.tree_node* %5 to %struct.tree_list*, !dbg !6278
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6278
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6278
  store %union.tree_node* %6, %union.tree_node** %firstarg, align 8, !dbg !6277
  %7 = load %union.tree_node*, %union.tree_node** %firstarg, align 8, !dbg !6279
  %common4 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !6279
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !6279
  %8 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !6279
  %base6 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6279
  %9 = bitcast %struct.tree_base* %base6 to i64*, !dbg !6279
  %bf.load7 = load i64, i64* %9, align 8, !dbg !6279
  %bf.lshr = lshr i64 %bf.load7, 20, !dbg !6279
  %bf.clear8 = and i64 %bf.lshr, 1, !dbg !6279
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !6279
  %tobool = icmp ne i32 %bf.cast9, 0, !dbg !6279
  br i1 %tobool, label %if.then10, label %if.end, !dbg !6281

if.then10:                                        ; preds = %if.else
  %10 = load i8, i8* %c1, align 1, !dbg !6282
  %conv = sext i8 %10 to i32, !dbg !6282
  %add = add nsw i32 %conv, 1, !dbg !6282
  %conv11 = trunc i32 %add to i8, !dbg !6282
  store i8 %conv11, i8* %c1, align 1, !dbg !6282
  br label %if.end, !dbg !6283

if.end:                                           ; preds = %if.then10, %if.else
  %11 = load %union.tree_node*, %union.tree_node** %firstarg, align 8, !dbg !6284
  %common12 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6284
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !6284
  %12 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !6284
  %base14 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6284
  %13 = bitcast %struct.tree_base* %base14 to i64*, !dbg !6284
  %bf.load15 = load i64, i64* %13, align 8, !dbg !6284
  %bf.lshr16 = lshr i64 %bf.load15, 19, !dbg !6284
  %bf.clear17 = and i64 %bf.lshr16, 1, !dbg !6284
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !6284
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !6284
  br i1 %tobool19, label %if.then20, label %if.end24, !dbg !6286

if.then20:                                        ; preds = %if.end
  %14 = load i8, i8* %c1, align 1, !dbg !6287
  %conv21 = sext i8 %14 to i32, !dbg !6287
  %add22 = add nsw i32 %conv21, 2, !dbg !6287
  %conv23 = trunc i32 %add22 to i8, !dbg !6287
  store i8 %conv23, i8* %c1, align 1, !dbg !6287
  br label %if.end24, !dbg !6288

if.end24:                                         ; preds = %if.then20, %if.end
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6289
  %decl_non_common = bitcast %union.tree_node* %15 to %struct.tree_decl_non_common*, !dbg !6289
  %vindex = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 4, !dbg !6289
  %16 = load %union.tree_node*, %union.tree_node** %vindex, align 8, !dbg !6289
  %tobool25 = icmp ne %union.tree_node* %16, null, !dbg !6289
  br i1 %tobool25, label %if.then26, label %if.else27, !dbg !6291

if.then26:                                        ; preds = %if.end24
  store i8 42, i8* %c2, align 1, !dbg !6292
  br label %if.end28, !dbg !6293

if.else27:                                        ; preds = %if.end24
  store i8 46, i8* %c2, align 1, !dbg !6294
  br label %if.end28

if.end28:                                         ; preds = %if.else27, %if.then26
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6295
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 1, !dbg !6295
  %18 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6295
  %cmp30 = icmp ugt i8* %add.ptr, %18, !dbg !6295
  br i1 %cmp30, label %cond.true, label %cond.false, !dbg !6295

cond.true:                                        ; preds = %if.end29
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6295
  br label %cond.end, !dbg !6295

cond.false:                                       ; preds = %if.end29
  br label %cond.end, !dbg !6295

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6295
  %19 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6295
  %incdec.ptr = getelementptr inbounds i8, i8* %19, i32 1, !dbg !6295
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6295
  store i8 58, i8* %19, align 1, !dbg !6295
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6296
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %20), !dbg !6296
  %identifier = bitcast %union.tree_node* %call to %struct.tree_identifier*, !dbg !6296
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !6296
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !6296
  %21 = load i32, i32* %len, align 8, !dbg !6296
  %conv32 = zext i32 %21 to i64, !dbg !6296
  store i64 %conv32, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6296
  %22 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6296
  %23 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6296
  %add.ptr33 = getelementptr inbounds i8, i8* %22, i64 %23, !dbg !6296
  %24 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6296
  %cmp34 = icmp ugt i8* %add.ptr33, %24, !dbg !6296
  br i1 %cmp34, label %cond.true36, label %cond.false38, !dbg !6296

cond.true36:                                      ; preds = %cond.end
  %25 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6296
  %conv37 = trunc i64 %25 to i32, !dbg !6296
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 %conv37), !dbg !6296
  br label %cond.end39, !dbg !6296

cond.false38:                                     ; preds = %cond.end
  br label %cond.end39, !dbg !6296

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false38 ], !dbg !6296
  %26 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6296
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6296
  %call41 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %27), !dbg !6296
  %identifier42 = bitcast %union.tree_node* %call41 to %struct.tree_identifier*, !dbg !6296
  %id43 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier42, i32 0, i32 1, !dbg !6296
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id43, i32 0, i32 0, !dbg !6296
  %28 = load i8*, i8** %str, align 8, !dbg !6296
  %29 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6296
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %28, i64 %29, i1 false), !dbg !6296
  %30 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 5), align 8, !dbg !6296
  %31 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6296
  %add.ptr44 = getelementptr inbounds i8, i8* %31, i64 %30, !dbg !6296
  store i8* %add.ptr44, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6296
  %32 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6297
  %add.ptr45 = getelementptr inbounds i8, i8* %32, i64 1, !dbg !6297
  %33 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6297
  %cmp46 = icmp ugt i8* %add.ptr45, %33, !dbg !6297
  br i1 %cmp46, label %cond.true48, label %cond.false49, !dbg !6297

cond.true48:                                      ; preds = %cond.end39
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6297
  br label %cond.end50, !dbg !6297

cond.false49:                                     ; preds = %cond.end39
  br label %cond.end50, !dbg !6297

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ 0, %cond.true48 ], [ 0, %cond.false49 ], !dbg !6297
  %34 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6297
  %incdec.ptr52 = getelementptr inbounds i8, i8* %34, i32 1, !dbg !6297
  store i8* %incdec.ptr52, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6297
  store i8 59, i8* %34, align 1, !dbg !6297
  %35 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6298
  %add.ptr53 = getelementptr inbounds i8, i8* %35, i64 1, !dbg !6298
  %36 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6298
  %cmp54 = icmp ugt i8* %add.ptr53, %36, !dbg !6298
  br i1 %cmp54, label %cond.true56, label %cond.false57, !dbg !6298

cond.true56:                                      ; preds = %cond.end50
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6298
  br label %cond.end58, !dbg !6298

cond.false57:                                     ; preds = %cond.end50
  br label %cond.end58, !dbg !6298

cond.end58:                                       ; preds = %cond.false57, %cond.true56
  %cond59 = phi i32 [ 0, %cond.true56 ], [ 0, %cond.false57 ], !dbg !6298
  %37 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6298
  %base60 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !6298
  %38 = bitcast %struct.tree_base* %base60 to i64*, !dbg !6298
  %bf.load61 = load i64, i64* %38, align 8, !dbg !6298
  %bf.lshr62 = lshr i64 %bf.load61, 28, !dbg !6298
  %bf.clear63 = and i64 %bf.lshr62, 1, !dbg !6298
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !6298
  %tobool65 = icmp ne i32 %bf.cast64, 0, !dbg !6298
  br i1 %tobool65, label %cond.true66, label %cond.false67, !dbg !6298

cond.true66:                                      ; preds = %cond.end58
  br label %cond.end75, !dbg !6298

cond.false67:                                     ; preds = %cond.end58
  %39 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6298
  %base68 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !6298
  %40 = bitcast %struct.tree_base* %base68 to i64*, !dbg !6298
  %bf.load69 = load i64, i64* %40, align 8, !dbg !6298
  %bf.lshr70 = lshr i64 %bf.load69, 29, !dbg !6298
  %bf.clear71 = and i64 %bf.lshr70, 1, !dbg !6298
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !6298
  %tobool73 = icmp ne i32 %bf.cast72, 0, !dbg !6298
  %41 = zext i1 %tobool73 to i64, !dbg !6298
  %cond74 = select i1 %tobool73, i32 49, i32 50, !dbg !6298
  br label %cond.end75, !dbg !6298

cond.end75:                                       ; preds = %cond.false67, %cond.true66
  %cond76 = phi i32 [ 48, %cond.true66 ], [ %cond74, %cond.false67 ], !dbg !6298
  %conv77 = trunc i32 %cond76 to i8, !dbg !6298
  %42 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6298
  %incdec.ptr78 = getelementptr inbounds i8, i8* %42, i32 1, !dbg !6298
  store i8* %incdec.ptr78, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6298
  store i8 %conv77, i8* %42, align 1, !dbg !6298
  %43 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6299
  %add.ptr79 = getelementptr inbounds i8, i8* %43, i64 1, !dbg !6299
  %44 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6299
  %cmp80 = icmp ugt i8* %add.ptr79, %44, !dbg !6299
  br i1 %cmp80, label %cond.true82, label %cond.false83, !dbg !6299

cond.true82:                                      ; preds = %cond.end75
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6299
  br label %cond.end84, !dbg !6299

cond.false83:                                     ; preds = %cond.end75
  br label %cond.end84, !dbg !6299

cond.end84:                                       ; preds = %cond.false83, %cond.true82
  %cond85 = phi i32 [ 0, %cond.true82 ], [ 0, %cond.false83 ], !dbg !6299
  %45 = load i8, i8* %c1, align 1, !dbg !6299
  %46 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6299
  %incdec.ptr86 = getelementptr inbounds i8, i8* %46, i32 1, !dbg !6299
  store i8* %incdec.ptr86, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6299
  store i8 %45, i8* %46, align 1, !dbg !6299
  %47 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6300
  %add.ptr87 = getelementptr inbounds i8, i8* %47, i64 1, !dbg !6300
  %48 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6300
  %cmp88 = icmp ugt i8* %add.ptr87, %48, !dbg !6300
  br i1 %cmp88, label %cond.true90, label %cond.false91, !dbg !6300

cond.true90:                                      ; preds = %cond.end84
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6300
  br label %cond.end92, !dbg !6300

cond.false91:                                     ; preds = %cond.end84
  br label %cond.end92, !dbg !6300

cond.end92:                                       ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ 0, %cond.false91 ], !dbg !6300
  %49 = load i8, i8* %c2, align 1, !dbg !6300
  %50 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6300
  %incdec.ptr94 = getelementptr inbounds i8, i8* %50, i32 1, !dbg !6300
  store i8* %incdec.ptr94, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6300
  store i8 %49, i8* %50, align 1, !dbg !6300
  %51 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6301
  %decl_non_common95 = bitcast %union.tree_node* %51 to %struct.tree_decl_non_common*, !dbg !6301
  %vindex96 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common95, i32 0, i32 4, !dbg !6301
  %52 = load %union.tree_node*, %union.tree_node** %vindex96, align 8, !dbg !6301
  %tobool97 = icmp ne %union.tree_node* %52, null, !dbg !6301
  br i1 %tobool97, label %land.lhs.true, label %if.end122, !dbg !6303

land.lhs.true:                                    ; preds = %cond.end92
  %53 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6304
  %decl_non_common98 = bitcast %union.tree_node* %53 to %struct.tree_decl_non_common*, !dbg !6304
  %vindex99 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common98, i32 0, i32 4, !dbg !6304
  %54 = load %union.tree_node*, %union.tree_node** %vindex99, align 8, !dbg !6304
  %call100 = call i32 @host_integerp(%union.tree_node* %54, i32 0), !dbg !6305
  %tobool101 = icmp ne i32 %call100, 0, !dbg !6305
  br i1 %tobool101, label %if.then102, label %if.end122, !dbg !6306

if.then102:                                       ; preds = %land.lhs.true
  %55 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6307
  %decl_non_common103 = bitcast %union.tree_node* %55 to %struct.tree_decl_non_common*, !dbg !6307
  %vindex104 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common103, i32 0, i32 4, !dbg !6307
  %56 = load %union.tree_node*, %union.tree_node** %vindex104, align 8, !dbg !6307
  %call105 = call i64 @tree_low_cst(%union.tree_node* %56, i32 0), !dbg !6309
  call void @stabstr_D(i64 %call105), !dbg !6310
  %57 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6311
  %add.ptr106 = getelementptr inbounds i8, i8* %57, i64 1, !dbg !6311
  %58 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6311
  %cmp107 = icmp ugt i8* %add.ptr106, %58, !dbg !6311
  br i1 %cmp107, label %cond.true109, label %cond.false110, !dbg !6311

cond.true109:                                     ; preds = %if.then102
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6311
  br label %cond.end111, !dbg !6311

cond.false110:                                    ; preds = %if.then102
  br label %cond.end111, !dbg !6311

cond.end111:                                      ; preds = %cond.false110, %cond.true109
  %cond112 = phi i32 [ 0, %cond.true109 ], [ 0, %cond.false110 ], !dbg !6311
  %59 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6311
  %incdec.ptr113 = getelementptr inbounds i8, i8* %59, i32 1, !dbg !6311
  store i8* %incdec.ptr113, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6311
  store i8 59, i8* %59, align 1, !dbg !6311
  %60 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6312
  %decl_minimal = bitcast %union.tree_node* %60 to %struct.tree_decl_minimal*, !dbg !6312
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !6312
  %61 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6312
  call void @dbxout_type(%union.tree_node* %61, i32 0), !dbg !6313
  %62 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6314
  %add.ptr114 = getelementptr inbounds i8, i8* %62, i64 1, !dbg !6314
  %63 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 4), align 8, !dbg !6314
  %cmp115 = icmp ugt i8* %add.ptr114, %63, !dbg !6314
  br i1 %cmp115, label %cond.true117, label %cond.false118, !dbg !6314

cond.true117:                                     ; preds = %cond.end111
  call void @_obstack_newchunk(%struct.obstack* @stabstr_ob, i32 1), !dbg !6314
  br label %cond.end119, !dbg !6314

cond.false118:                                    ; preds = %cond.end111
  br label %cond.end119, !dbg !6314

cond.end119:                                      ; preds = %cond.false118, %cond.true117
  %cond120 = phi i32 [ 0, %cond.true117 ], [ 0, %cond.false118 ], !dbg !6314
  %64 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6314
  %incdec.ptr121 = getelementptr inbounds i8, i8* %64, i32 1, !dbg !6314
  store i8* %incdec.ptr121, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @stabstr_ob, i32 0, i32 3), align 8, !dbg !6314
  store i8 59, i8* %64, align 1, !dbg !6314
  br label %if.end122, !dbg !6315

if.end122:                                        ; preds = %cond.end119, %land.lhs.true, %cond.end92
  ret void, !dbg !6316
}

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #1

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #1

declare dso_local void @output_addr_const(%struct._IO_FILE*, %struct.rtx_def*) #1

declare dso_local void @obstack_free(%struct.obstack*, i8*) #1

declare dso_local %union.tree_node* @decl_type_context(%union.tree_node*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !6317 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6320, metadata !DIExpression()), !dbg !6321
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !6322, metadata !DIExpression()), !dbg !6323
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6324, metadata !DIExpression()), !dbg !6325
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !6326, metadata !DIExpression()), !dbg !6327
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6328
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6329
  %2 = load i32, i32* %mode.addr, align 4, !dbg !6330
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !6331
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !6332
  ret %struct.rtx_def* %call, !dbg !6333
}

declare dso_local %union.tree_node* @get_inner_reference(%union.tree_node*, i64*, i64*, %union.tree_node**, i32*, i32*, i32*, i8 zeroext) #1

declare dso_local %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #1

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #1

declare dso_local %struct.rtx_def* @alter_subreg(%struct.rtx_def**) #1

declare dso_local %struct.rtx_def* @get_pool_constant_mark(%struct.rtx_def*, i8*) #1

declare dso_local %union.tree_node* @make_node_stat(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dbxout_begin_complex_stabs_noforcetext() #0 !dbg !6334 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6335
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !6336
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6337
  %call1 = call i32 @putc(i32 34, %struct._IO_FILE* %1), !dbg !6338
  %2 = load i64, i64* @stabstr_last_contin_point, align 8, !dbg !6339
  %cmp = icmp eq i64 %2, 0, !dbg !6339
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6339

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 638, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !6339
  br label %cond.end, !dbg !6339

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6339

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6339
  ret void, !dbg !6340
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_fortran() #0 !dbg !6341 {
entry:
  %lang = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %lang, metadata !6344, metadata !DIExpression()), !dbg !6345
  %call = call i32 @get_lang_number(), !dbg !6346
  store i32 %call, i32* %lang, align 4, !dbg !6345
  %0 = load i32, i32* %lang, align 4, !dbg !6347
  %cmp = icmp eq i32 %0, 5, !dbg !6348
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !6349

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %lang, align 4, !dbg !6350
  %cmp1 = icmp eq i32 %1, 7, !dbg !6351
  br label %lor.end, !dbg !6349

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !6349
  %conv = trunc i32 %lor.ext to i8, !dbg !6352
  ret i8 %conv, !dbg !6353
}

declare dso_local void @error(i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal void @gt_pch_pa_typevec(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !6354 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %i0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !6355, metadata !DIExpression()), !dbg !6356
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !6357, metadata !DIExpression()), !dbg !6358
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !6359, metadata !DIExpression()), !dbg !6360
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !6361, metadata !DIExpression()), !dbg !6362
  %0 = load %struct.typeinfo*, %struct.typeinfo** @typevec, align 8, !dbg !6363
  %cmp = icmp ne %struct.typeinfo* %0, null, !dbg !6365
  br i1 %cmp, label %if.then, label %if.end6, !dbg !6366

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !6367, metadata !DIExpression()), !dbg !6369
  store i64 0, i64* %i0, align 8, !dbg !6370
  br label %for.cond, !dbg !6372

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i0, align 8, !dbg !6373
  %2 = load i32, i32* @typevec_len, align 4, !dbg !6375
  %conv = sext i32 %2 to i64, !dbg !6376
  %cmp1 = icmp ne i64 %1, %conv, !dbg !6377
  br i1 %cmp1, label %for.body, label %for.end, !dbg !6378

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !6379

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %i0, align 8, !dbg !6381
  %inc = add i64 %3, 1, !dbg !6381
  store i64 %inc, i64* %i0, align 8, !dbg !6381
  br label %for.cond, !dbg !6382, !llvm.loop !6383

for.end:                                          ; preds = %for.cond
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !6385
  %cmp3 = icmp eq i8* bitcast (%struct.typeinfo** @typevec to i8*), %4, !dbg !6387
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !6388

if.then5:                                         ; preds = %for.end
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !6389
  %6 = load i8*, i8** %cookie.addr, align 8, !dbg !6390
  call void %5(i8* bitcast (%struct.typeinfo** @typevec to i8*), i8* %6), !dbg !6389
  br label %if.end, !dbg !6389

if.end:                                           ; preds = %if.then5, %for.end
  br label %if.end6, !dbg !6391

if.end6:                                          ; preds = %if.end, %entry
  ret void, !dbg !6392
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2281, !2282, !2283}
!llvm.ident = !{!2284}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "dbx_debug_hooks", scope: !2, file: !3, line: 345, type: !2204, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1039, globals: !2143, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "dbxout.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !150, !169, !176, !183, !377, !425, !438, !475, !618, !752, !767, !772, !993, !998, !1005, !1019, !1029}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !146, line: 474, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149}
!148 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !151, line: 280, baseType: !7, size: 32, elements: !152)
!151 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!152 = !{!153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168}
!153 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!169 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !151, line: 1817, baseType: !7, size: 32, elements: !170)
!170 = !{!171, !172, !173, !174, !175}
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !151, line: 1805, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !151, line: 39, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!185 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!190 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!191 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!192 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!193 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!194 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!195 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!196 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!197 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!199 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!200 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!201 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!202 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!203 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!204 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!205 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!206 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!207 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!208 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!209 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!210 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!213 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!214 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!215 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!216 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!217 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!218 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!219 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!220 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!221 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!222 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!223 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!224 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!225 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!226 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!229 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!230 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!231 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!232 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!233 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!234 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!235 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!236 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!238 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!239 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!240 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!241 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!242 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!243 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!244 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!245 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!246 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!247 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!248 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!249 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!250 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!251 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!253 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!254 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!255 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!257 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!258 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!259 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!260 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!261 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!262 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!263 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!264 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!265 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!266 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!267 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!268 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!269 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!270 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!271 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!274 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!275 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!280 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!281 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!282 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!283 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!284 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!285 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!286 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!287 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!288 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!289 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!290 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!291 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!292 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!293 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!294 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!295 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!296 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!297 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!298 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!299 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!300 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!301 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!302 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!303 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!304 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!305 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!307 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!308 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!309 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!310 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!311 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!312 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!313 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!314 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!315 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!316 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!317 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!318 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!319 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!320 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!321 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!322 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!323 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!324 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!325 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!326 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!327 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!328 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!329 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!330 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!331 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!332 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!333 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!334 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!335 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!336 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!337 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!350 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!351 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!352 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!353 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!354 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!370 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!371 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!372 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!373 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!374 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!375 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!376 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !378, line: 24, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./gstab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424}
!380 = !DIEnumerator(name: "N_GSYM", value: 32, isUnsigned: true)
!381 = !DIEnumerator(name: "N_FNAME", value: 34, isUnsigned: true)
!382 = !DIEnumerator(name: "N_FUN", value: 36, isUnsigned: true)
!383 = !DIEnumerator(name: "N_STSYM", value: 38, isUnsigned: true)
!384 = !DIEnumerator(name: "N_LCSYM", value: 40, isUnsigned: true)
!385 = !DIEnumerator(name: "N_BNSYM", value: 46, isUnsigned: true)
!386 = !DIEnumerator(name: "N_ENSYM", value: 78, isUnsigned: true)
!387 = !DIEnumerator(name: "N_MAIN", value: 42, isUnsigned: true)
!388 = !DIEnumerator(name: "N_PC", value: 48, isUnsigned: true)
!389 = !DIEnumerator(name: "N_NSYMS", value: 50, isUnsigned: true)
!390 = !DIEnumerator(name: "N_NOMAP", value: 52, isUnsigned: true)
!391 = !DIEnumerator(name: "N_OBJ", value: 56, isUnsigned: true)
!392 = !DIEnumerator(name: "N_OPT", value: 60, isUnsigned: true)
!393 = !DIEnumerator(name: "N_RSYM", value: 64, isUnsigned: true)
!394 = !DIEnumerator(name: "N_M2C", value: 66, isUnsigned: true)
!395 = !DIEnumerator(name: "N_SLINE", value: 68, isUnsigned: true)
!396 = !DIEnumerator(name: "N_DSLINE", value: 70, isUnsigned: true)
!397 = !DIEnumerator(name: "N_BSLINE", value: 72, isUnsigned: true)
!398 = !DIEnumerator(name: "N_BROWS", value: 72, isUnsigned: true)
!399 = !DIEnumerator(name: "N_DEFD", value: 74, isUnsigned: true)
!400 = !DIEnumerator(name: "N_EHDECL", value: 80, isUnsigned: true)
!401 = !DIEnumerator(name: "N_MOD2", value: 80, isUnsigned: true)
!402 = !DIEnumerator(name: "N_CATCH", value: 84, isUnsigned: true)
!403 = !DIEnumerator(name: "N_SSYM", value: 96, isUnsigned: true)
!404 = !DIEnumerator(name: "N_SO", value: 100, isUnsigned: true)
!405 = !DIEnumerator(name: "N_LSYM", value: 128, isUnsigned: true)
!406 = !DIEnumerator(name: "N_BINCL", value: 130, isUnsigned: true)
!407 = !DIEnumerator(name: "N_SOL", value: 132, isUnsigned: true)
!408 = !DIEnumerator(name: "N_PSYM", value: 160, isUnsigned: true)
!409 = !DIEnumerator(name: "N_EINCL", value: 162, isUnsigned: true)
!410 = !DIEnumerator(name: "N_ENTRY", value: 164, isUnsigned: true)
!411 = !DIEnumerator(name: "N_LBRAC", value: 192, isUnsigned: true)
!412 = !DIEnumerator(name: "N_EXCL", value: 194, isUnsigned: true)
!413 = !DIEnumerator(name: "N_SCOPE", value: 196, isUnsigned: true)
!414 = !DIEnumerator(name: "N_RBRAC", value: 224, isUnsigned: true)
!415 = !DIEnumerator(name: "N_BCOMM", value: 226, isUnsigned: true)
!416 = !DIEnumerator(name: "N_ECOMM", value: 228, isUnsigned: true)
!417 = !DIEnumerator(name: "N_ECOML", value: 232, isUnsigned: true)
!418 = !DIEnumerator(name: "N_NBTEXT", value: 240, isUnsigned: true)
!419 = !DIEnumerator(name: "N_NBDATA", value: 242, isUnsigned: true)
!420 = !DIEnumerator(name: "N_NBBSS", value: 244, isUnsigned: true)
!421 = !DIEnumerator(name: "N_NBSTS", value: 246, isUnsigned: true)
!422 = !DIEnumerator(name: "N_NBLCS", value: 248, isUnsigned: true)
!423 = !DIEnumerator(name: "N_LENG", value: 254, isUnsigned: true)
!424 = !DIEnumerator(name: "LAST_UNUSED_STAB_CODE", value: 255, isUnsigned: true)
!425 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !151, line: 58, baseType: !7, size: 32, elements: !426)
!426 = !{!427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437}
!427 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!428 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!429 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!430 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!431 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!432 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!433 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!434 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!435 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!436 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!437 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!438 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !151, line: 630, baseType: !7, size: 32, elements: !439)
!439 = !{!440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474}
!440 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!441 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!442 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!443 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!444 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!445 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!446 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!447 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!448 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!449 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!450 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!451 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!452 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!453 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!454 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!455 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!456 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!457 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!458 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!459 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!460 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!461 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!462 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!463 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!464 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!465 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!466 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!467 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!468 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!469 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!470 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!471 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!472 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!473 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!474 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!475 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !476, line: 45, baseType: !7, size: 32, elements: !477)
!476 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!477 = !{!478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617}
!478 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!479 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!480 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!481 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!482 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!483 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!484 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!485 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!486 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!487 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!488 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!489 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!490 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!491 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!492 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!493 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!494 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!495 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!496 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!497 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!498 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!499 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!500 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!501 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!502 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!503 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!504 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!505 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!506 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!507 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!508 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!509 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!510 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!511 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!512 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!513 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!514 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!515 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!516 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!517 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!518 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!519 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!520 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!521 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!522 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!523 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!524 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!525 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!526 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!527 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!528 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!529 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!530 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!531 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!532 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!533 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!534 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!535 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!536 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!537 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!538 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!539 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!540 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!541 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!542 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!543 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!544 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!545 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!546 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!547 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!548 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!549 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!550 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!551 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!552 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!553 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!554 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!555 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!556 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!557 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!558 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!559 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!560 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!561 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!562 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!563 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!564 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!565 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!566 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!567 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!568 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!569 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!570 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!571 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!572 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!573 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!574 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!575 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!576 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!577 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!578 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!579 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!580 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!581 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!582 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!583 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!584 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!585 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!586 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!587 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!588 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!589 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!590 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!591 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!592 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!593 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!594 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!595 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!596 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!597 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!598 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!599 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!600 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!601 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!602 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!603 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!604 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!605 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!606 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!607 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!608 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!609 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!610 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!611 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!612 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!613 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!614 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!615 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!616 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!617 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!618 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !151, line: 3410, baseType: !7, size: 32, elements: !619)
!619 = !{!620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751}
!620 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!621 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!623 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!624 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!625 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!626 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!627 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!628 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!629 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!630 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!631 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!632 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!633 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!634 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!635 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!636 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!637 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!638 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!639 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!640 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!641 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!642 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!643 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!644 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!645 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!646 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!647 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!648 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!649 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!650 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!651 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!652 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!653 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!752 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !476, line: 60, baseType: !7, size: 32, elements: !753)
!753 = !{!754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766}
!754 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!755 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!756 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!757 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!758 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!759 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!760 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!761 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!762 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!763 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!764 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!765 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!766 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!767 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "typestatus", file: !3, line: 165, baseType: !7, size: 32, elements: !768)
!768 = !{!769, !770, !771}
!769 = !DIEnumerator(name: "TYPE_UNSEEN", value: 0, isUnsigned: true)
!770 = !DIEnumerator(name: "TYPE_XREF", value: 1, isUnsigned: true)
!771 = !DIEnumerator(name: "TYPE_DEFINED", value: 2, isUnsigned: true)
!772 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !773, line: 23, baseType: !7, size: 32, elements: !774)
!773 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!774 = !{!775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992}
!775 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!776 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!777 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!778 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!779 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!780 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!781 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!782 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!783 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!784 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!785 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!786 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!787 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!788 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!789 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!790 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!791 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!792 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!793 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!794 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!795 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!796 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!797 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!798 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!799 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!800 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!801 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!802 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!803 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!804 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!805 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!806 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!807 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!808 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!809 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!810 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!811 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!812 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!813 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!814 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!815 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!816 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!817 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!818 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!819 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!820 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!821 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!822 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!823 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!824 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!825 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!826 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!827 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!828 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!829 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!830 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!831 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!832 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!833 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!834 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!835 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!836 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!837 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!838 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!839 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!840 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!841 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!842 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!843 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!844 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!845 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!846 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!847 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!848 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!849 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!850 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!851 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!852 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!853 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!854 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!855 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!856 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!857 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!858 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!859 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!860 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!861 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!862 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!863 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!864 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!865 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!866 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!867 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!868 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!869 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!870 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!871 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!872 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!873 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!874 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!875 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!876 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!877 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!878 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!879 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!880 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!881 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!882 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!883 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!884 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!885 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!886 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!887 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!888 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!889 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!890 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!891 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!892 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!893 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!894 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!895 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!896 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!897 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!898 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!899 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!900 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!901 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!902 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!903 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!904 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!905 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!906 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!907 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!908 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!909 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!910 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!911 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!912 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!913 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!914 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!915 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!916 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!917 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!918 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!919 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!920 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!921 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!922 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!923 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!924 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!925 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!926 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!927 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!928 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!929 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!930 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!931 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!932 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!933 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!934 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!935 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!936 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!937 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!938 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!939 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!940 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!941 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!942 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!943 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!944 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!945 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!946 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!947 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!948 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!949 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!950 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!951 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!952 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!953 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!954 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!955 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!956 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!957 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!958 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!959 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!960 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!961 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!962 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!963 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!964 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!965 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!966 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!967 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!968 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!969 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!970 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!971 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!972 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!973 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!974 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!975 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!976 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!977 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!978 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!979 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!980 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!981 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!982 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!983 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!984 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!985 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!986 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!987 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!988 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!989 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!990 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!991 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!992 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!993 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "binclstatus", file: !3, line: 203, baseType: !7, size: 32, elements: !994)
!994 = !{!995, !996, !997}
!995 = !DIEnumerator(name: "BINCL_NOT_REQUIRED", value: 0, isUnsigned: true)
!996 = !DIEnumerator(name: "BINCL_PENDING", value: 1, isUnsigned: true)
!997 = !DIEnumerator(name: "BINCL_PROCESSED", value: 2, isUnsigned: true)
!998 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_info_level", file: !999, line: 46, baseType: !7, size: 32, elements: !1000)
!999 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1000 = !{!1001, !1002, !1003, !1004}
!1001 = !DIEnumerator(name: "DINFO_LEVEL_NONE", value: 0, isUnsigned: true)
!1002 = !DIEnumerator(name: "DINFO_LEVEL_TERSE", value: 1, isUnsigned: true)
!1003 = !DIEnumerator(name: "DINFO_LEVEL_NORMAL", value: 2, isUnsigned: true)
!1004 = !DIEnumerator(name: "DINFO_LEVEL_VERBOSE", value: 3, isUnsigned: true)
!1005 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !151, line: 3745, baseType: !7, size: 32, elements: !1006)
!1006 = !{!1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018}
!1007 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!1008 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!1009 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!1010 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!1011 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!1012 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!1013 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!1014 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!1015 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!1016 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!1017 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!1018 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!1019 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tls_model", file: !1020, line: 97, baseType: !7, size: 32, elements: !1021)
!1020 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1021 = !{!1022, !1023, !1024, !1025, !1026, !1027, !1028}
!1022 = !DIEnumerator(name: "TLS_MODEL_NONE", value: 0, isUnsigned: true)
!1023 = !DIEnumerator(name: "TLS_MODEL_EMULATED", value: 1, isUnsigned: true)
!1024 = !DIEnumerator(name: "TLS_MODEL_REAL", value: 2, isUnsigned: true)
!1025 = !DIEnumerator(name: "TLS_MODEL_GLOBAL_DYNAMIC", value: 2, isUnsigned: true)
!1026 = !DIEnumerator(name: "TLS_MODEL_LOCAL_DYNAMIC", value: 3, isUnsigned: true)
!1027 = !DIEnumerator(name: "TLS_MODEL_INITIAL_EXEC", value: 4, isUnsigned: true)
!1028 = !DIEnumerator(name: "TLS_MODEL_LOCAL_EXEC", value: 5, isUnsigned: true)
!1029 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !1030, line: 52, baseType: !7, size: 32, elements: !1031)
!1030 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1031 = !{!1032, !1033, !1034, !1035, !1036, !1037, !1038}
!1032 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!1033 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!1034 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!1035 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!1036 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!1037 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!1038 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!1039 = !{!7, !1040, !1322, !183, !1136, !475, !1242, !1217, !2116, !2122, !1635, !2125, !2134, !2139, !2140, !1095, !1093, !1307, !2142, !1641}
!1040 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1020, line: 56, baseType: !1041)
!1041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1042, size: 64)
!1042 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !151, line: 3371, size: 1792, elements: !1043)
!1043 = !{!1044, !1077, !1083, !1096, !1115, !1126, !1131, !1142, !1148, !1162, !1174, !1212, !1496, !1524, !1532, !1533, !1538, !1547, !1553, !1558, !1562, !1566, !1742, !1789, !1795, !1802, !1809, !1835, !1860, !1877, !1889, !1911, !1926, !2098}
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1042, file: !151, line: 3372, baseType: !1045, size: 64)
!1045 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !151, line: 360, size: 64, elements: !1046)
!1046 = !{!1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076}
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1045, file: !151, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1045, file: !151, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1045, file: !151, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1045, file: !151, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1045, file: !151, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1045, file: !151, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1045, file: !151, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1045, file: !151, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1045, file: !151, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1045, file: !151, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1045, file: !151, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1045, file: !151, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1045, file: !151, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1045, file: !151, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1045, file: !151, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1045, file: !151, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1045, file: !151, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1045, file: !151, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1045, file: !151, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1045, file: !151, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1045, file: !151, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1045, file: !151, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1045, file: !151, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1045, file: !151, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1045, file: !151, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1045, file: !151, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1045, file: !151, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1045, file: !151, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1045, file: !151, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1045, file: !151, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1042, file: !151, line: 3373, baseType: !1078, size: 192)
!1078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !151, line: 402, size: 192, elements: !1079)
!1079 = !{!1080, !1081, !1082}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1078, file: !151, line: 403, baseType: !1045, size: 64)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1078, file: !151, line: 404, baseType: !1040, size: 64, offset: 64)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1078, file: !151, line: 405, baseType: !1040, size: 64, offset: 128)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1042, file: !151, line: 3374, baseType: !1084, size: 320)
!1084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !151, line: 1384, size: 320, elements: !1085)
!1085 = !{!1086, !1087}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1084, file: !151, line: 1385, baseType: !1078, size: 192)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1084, file: !151, line: 1386, baseType: !1088, size: 128, offset: 192)
!1088 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1089, line: 58, baseType: !1090)
!1089 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1089, line: 54, size: 128, elements: !1091)
!1091 = !{!1092, !1094}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1090, file: !1089, line: 56, baseType: !1093, size: 64)
!1093 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1090, file: !1089, line: 57, baseType: !1095, size: 64, offset: 64)
!1095 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1042, file: !151, line: 3375, baseType: !1097, size: 256)
!1097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !151, line: 1397, size: 256, elements: !1098)
!1098 = !{!1099, !1100}
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1097, file: !151, line: 1398, baseType: !1078, size: 192)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1097, file: !151, line: 1399, baseType: !1101, size: 64, offset: 192)
!1101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1102, size: 64)
!1102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1103, line: 52, size: 256, elements: !1104)
!1103 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1104 = !{!1105, !1106, !1107, !1108, !1109, !1110, !1111}
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1102, file: !1103, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1102, file: !1103, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1102, file: !1103, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1102, file: !1103, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1102, file: !1103, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1102, file: !1103, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1102, file: !1103, line: 62, baseType: !1112, size: 192, offset: 64)
!1112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1093, size: 192, elements: !1113)
!1113 = !{!1114}
!1114 = !DISubrange(count: 3)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1042, file: !151, line: 3376, baseType: !1116, size: 256)
!1116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !151, line: 1408, size: 256, elements: !1117)
!1117 = !{!1118, !1119}
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1116, file: !151, line: 1409, baseType: !1078, size: 192)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1116, file: !151, line: 1410, baseType: !1120, size: 64, offset: 192)
!1120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1121, size: 64)
!1121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1122, line: 27, size: 192, elements: !1123)
!1122 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1123 = !{!1124, !1125}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1121, file: !1122, line: 29, baseType: !1088, size: 128)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1121, file: !1122, line: 30, baseType: !5, size: 32, offset: 128)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1042, file: !151, line: 3377, baseType: !1127, size: 256)
!1127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !151, line: 1437, size: 256, elements: !1128)
!1128 = !{!1129, !1130}
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1127, file: !151, line: 1438, baseType: !1078, size: 192)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1127, file: !151, line: 1439, baseType: !1040, size: 64, offset: 192)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1042, file: !151, line: 3378, baseType: !1132, size: 256)
!1132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !151, line: 1418, size: 256, elements: !1133)
!1133 = !{!1134, !1135, !1137}
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1132, file: !151, line: 1419, baseType: !1078, size: 192)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1132, file: !151, line: 1420, baseType: !1136, size: 32, offset: 192)
!1136 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1132, file: !151, line: 1421, baseType: !1138, size: 8, offset: 224)
!1138 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1139, size: 8, elements: !1140)
!1139 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1140 = !{!1141}
!1141 = !DISubrange(count: 1)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1042, file: !151, line: 3379, baseType: !1143, size: 320)
!1143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !151, line: 1428, size: 320, elements: !1144)
!1144 = !{!1145, !1146, !1147}
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1143, file: !151, line: 1429, baseType: !1078, size: 192)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1143, file: !151, line: 1430, baseType: !1040, size: 64, offset: 192)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1143, file: !151, line: 1431, baseType: !1040, size: 64, offset: 256)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1042, file: !151, line: 3380, baseType: !1149, size: 320)
!1149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !151, line: 1460, size: 320, elements: !1150)
!1150 = !{!1151, !1152}
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1149, file: !151, line: 1461, baseType: !1078, size: 192)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1149, file: !151, line: 1462, baseType: !1153, size: 128, offset: 192)
!1153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1154, line: 31, size: 128, elements: !1155)
!1154 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1155 = !{!1156, !1160, !1161}
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1153, file: !1154, line: 32, baseType: !1157, size: 64)
!1157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1158, size: 64)
!1158 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1159)
!1159 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1153, file: !1154, line: 33, baseType: !7, size: 32, offset: 64)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1153, file: !1154, line: 34, baseType: !7, size: 32, offset: 96)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1042, file: !151, line: 3381, baseType: !1163, size: 384)
!1163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !151, line: 2507, size: 384, elements: !1164)
!1164 = !{!1165, !1166, !1171, !1172, !1173}
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1163, file: !151, line: 2508, baseType: !1078, size: 192)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1163, file: !151, line: 2509, baseType: !1167, size: 32, offset: 192)
!1167 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1168, line: 58, baseType: !1169)
!1168 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1169 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1170, line: 44, baseType: !7)
!1170 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1163, file: !151, line: 2510, baseType: !7, size: 32, offset: 224)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1163, file: !151, line: 2511, baseType: !1040, size: 64, offset: 256)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1163, file: !151, line: 2512, baseType: !1040, size: 64, offset: 320)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1042, file: !151, line: 3382, baseType: !1175, size: 896)
!1175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !151, line: 2652, size: 896, elements: !1176)
!1176 = !{!1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209}
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1175, file: !151, line: 2653, baseType: !1163, size: 384)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1175, file: !151, line: 2654, baseType: !1040, size: 64, offset: 384)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1175, file: !151, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1175, file: !151, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1175, file: !151, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1175, file: !151, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1175, file: !151, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1175, file: !151, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1175, file: !151, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1175, file: !151, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1175, file: !151, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1175, file: !151, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1175, file: !151, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1175, file: !151, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1175, file: !151, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1175, file: !151, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1175, file: !151, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1175, file: !151, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1175, file: !151, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1175, file: !151, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1175, file: !151, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1175, file: !151, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1175, file: !151, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1175, file: !151, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1175, file: !151, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1175, file: !151, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1175, file: !151, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1175, file: !151, line: 2703, baseType: !7, size: 32, offset: 512)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1175, file: !151, line: 2705, baseType: !1040, size: 64, offset: 576)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1175, file: !151, line: 2706, baseType: !1040, size: 64, offset: 640)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1175, file: !151, line: 2707, baseType: !1040, size: 64, offset: 704)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1175, file: !151, line: 2708, baseType: !1040, size: 64, offset: 768)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1175, file: !151, line: 2711, baseType: !1210, size: 64, offset: 832)
!1210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1211, size: 64)
!1211 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !151, line: 2711, flags: DIFlagFwdDecl)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1042, file: !151, line: 3383, baseType: !1213, size: 960)
!1213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !151, line: 2756, size: 960, elements: !1214)
!1214 = !{!1215, !1216}
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1213, file: !151, line: 2757, baseType: !1175, size: 896)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1213, file: !151, line: 2758, baseType: !1217, size: 64, offset: 896)
!1217 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1020, line: 50, baseType: !1218)
!1218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1219, size: 64)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !476, line: 240, size: 384, elements: !1220)
!1220 = !{!1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1219, file: !476, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1219, file: !476, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1219, file: !476, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1219, file: !476, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1219, file: !476, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1219, file: !476, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1219, file: !476, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1219, file: !476, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1219, file: !476, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1219, file: !476, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1219, file: !476, line: 321, baseType: !1232, size: 320, offset: 64)
!1232 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !476, line: 315, size: 320, elements: !1233)
!1233 = !{!1234, !1429, !1431, !1494, !1495}
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1232, file: !476, line: 316, baseType: !1235, size: 64)
!1235 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1236, size: 64, elements: !1140)
!1236 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !476, line: 183, baseType: !1237)
!1237 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !476, line: 166, size: 64, elements: !1238)
!1238 = !{!1239, !1240, !1241, !1244, !1245, !1253, !1254, !1266, !1269, !1331, !1332, !1406, !1419, !1426}
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1237, file: !476, line: 168, baseType: !1136, size: 32)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1237, file: !476, line: 169, baseType: !7, size: 32)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1237, file: !476, line: 170, baseType: !1242, size: 64)
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1139)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1237, file: !476, line: 171, baseType: !1217, size: 64)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1237, file: !476, line: 172, baseType: !1246, size: 64)
!1246 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1020, line: 53, baseType: !1247)
!1247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1248, size: 64)
!1248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !476, line: 359, size: 128, elements: !1249)
!1249 = !{!1250, !1251}
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1248, file: !476, line: 360, baseType: !1136, size: 32)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1248, file: !476, line: 361, baseType: !1252, size: 64, offset: 64)
!1252 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1217, size: 64, elements: !1140)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1237, file: !476, line: 173, baseType: !5, size: 32)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1237, file: !476, line: 174, baseType: !1255, size: 32)
!1255 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !476, line: 133, baseType: !1256)
!1256 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !476, line: 115, size: 32, elements: !1257)
!1257 = !{!1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265}
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1256, file: !476, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1256, file: !476, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1256, file: !476, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1256, file: !476, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1256, file: !476, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1256, file: !476, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1256, file: !476, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1256, file: !476, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1237, file: !476, line: 175, baseType: !1267, size: 64)
!1267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1268, size: 64)
!1268 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !476, line: 175, flags: DIFlagFwdDecl)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1237, file: !476, line: 176, baseType: !1270, size: 64)
!1270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1271, size: 64)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1272, line: 75, size: 256, elements: !1273)
!1272 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1273 = !{!1274, !1288, !1289, !1290}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1271, file: !1272, line: 76, baseType: !1275, size: 64)
!1275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1276, size: 64)
!1276 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1272, line: 68, baseType: !1277)
!1277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1272, line: 63, size: 320, elements: !1278)
!1278 = !{!1279, !1281, !1282, !1283}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1277, file: !1272, line: 64, baseType: !1280, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1277, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1277, file: !1272, line: 65, baseType: !1280, size: 64, offset: 64)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1277, file: !1272, line: 66, baseType: !7, size: 32, offset: 128)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1277, file: !1272, line: 67, baseType: !1284, size: 128, offset: 192)
!1284 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1285, size: 128, elements: !1286)
!1285 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1272, line: 29, baseType: !1093)
!1286 = !{!1287}
!1287 = !DISubrange(count: 2)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1271, file: !1272, line: 77, baseType: !1275, size: 64, offset: 64)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1271, file: !1272, line: 78, baseType: !7, size: 32, offset: 128)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1271, file: !1272, line: 79, baseType: !1291, size: 64, offset: 192)
!1291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1292, size: 64)
!1292 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1272, line: 49, baseType: !1293)
!1293 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1272, line: 45, size: 832, elements: !1294)
!1294 = !{!1295, !1296, !1297}
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1293, file: !1272, line: 46, baseType: !1280, size: 64)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1293, file: !1272, line: 47, baseType: !1270, size: 64, offset: 64)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1293, file: !1272, line: 48, baseType: !1298, size: 704, offset: 128)
!1298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1299, line: 164, size: 704, elements: !1300)
!1299 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1300 = !{!1301, !1302, !1313, !1314, !1315, !1316, !1317, !1318, !1323, !1327, !1328, !1329, !1330}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1298, file: !1299, line: 166, baseType: !1095, size: 64)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1298, file: !1299, line: 167, baseType: !1303, size: 64, offset: 64)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1304, size: 64)
!1304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1299, line: 157, size: 192, elements: !1305)
!1305 = !{!1306, !1308, !1309}
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1304, file: !1299, line: 159, baseType: !1307, size: 64)
!1307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1139, size: 64)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1304, file: !1299, line: 160, baseType: !1303, size: 64, offset: 64)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1304, file: !1299, line: 161, baseType: !1310, size: 32, offset: 128)
!1310 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1139, size: 32, elements: !1311)
!1311 = !{!1312}
!1312 = !DISubrange(count: 4)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1298, file: !1299, line: 168, baseType: !1307, size: 64, offset: 128)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1298, file: !1299, line: 169, baseType: !1307, size: 64, offset: 192)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1298, file: !1299, line: 170, baseType: !1307, size: 64, offset: 256)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1298, file: !1299, line: 171, baseType: !1095, size: 64, offset: 320)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1298, file: !1299, line: 172, baseType: !1136, size: 32, offset: 384)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1298, file: !1299, line: 176, baseType: !1319, size: 64, offset: 448)
!1319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1320, size: 64)
!1320 = !DISubroutineType(types: !1321)
!1321 = !{!1303, !1322, !1095}
!1322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1298, file: !1299, line: 177, baseType: !1324, size: 64, offset: 512)
!1324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1325, size: 64)
!1325 = !DISubroutineType(types: !1326)
!1326 = !{null, !1322, !1303}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1298, file: !1299, line: 178, baseType: !1322, size: 64, offset: 576)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1298, file: !1299, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1298, file: !1299, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1298, file: !1299, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1237, file: !476, line: 177, baseType: !1040, size: 64)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1237, file: !476, line: 178, baseType: !1333, size: 64)
!1333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1334, size: 64)
!1334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1335)
!1335 = !{!1336, !1371, !1372, !1373, !1376, !1380, !1381, !1382, !1400, !1401, !1402, !1403, !1404, !1405}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1334, file: !135, line: 219, baseType: !1337, size: 64)
!1337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1338, size: 64)
!1338 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1339)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1340)
!1340 = !{!1341}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1339, file: !135, line: 151, baseType: !1342, size: 128)
!1342 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1343)
!1343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1344)
!1344 = !{!1345, !1346, !1347}
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1343, file: !135, line: 150, baseType: !7, size: 32)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1343, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1343, file: !135, line: 150, baseType: !1348, size: 64, offset: 64)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1349, size: 64, elements: !1140)
!1349 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1020, line: 108, baseType: !1350)
!1350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1351, size: 64)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1352)
!1352 = !{!1353, !1354, !1355, !1363, !1364, !1365, !1366, !1367, !1368, !1369}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1351, file: !135, line: 124, baseType: !1333, size: 64)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1351, file: !135, line: 125, baseType: !1333, size: 64, offset: 64)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1351, file: !135, line: 131, baseType: !1356, size: 64, offset: 128)
!1356 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1357)
!1357 = !{!1358, !1362}
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1356, file: !135, line: 129, baseType: !1359, size: 64)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1020, line: 66, baseType: !1360)
!1360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1361, size: 64)
!1361 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1020, line: 65, flags: DIFlagFwdDecl)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1356, file: !135, line: 130, baseType: !1217, size: 64)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1351, file: !135, line: 134, baseType: !1322, size: 64, offset: 192)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1351, file: !135, line: 137, baseType: !1040, size: 64, offset: 256)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1351, file: !135, line: 138, baseType: !1167, size: 32, offset: 320)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1351, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1351, file: !135, line: 144, baseType: !1136, size: 32, offset: 384)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1351, file: !135, line: 145, baseType: !1136, size: 32, offset: 416)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1351, file: !135, line: 146, baseType: !1370, size: 64, offset: 448)
!1370 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !1095)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1334, file: !135, line: 220, baseType: !1337, size: 64, offset: 64)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1334, file: !135, line: 223, baseType: !1322, size: 64, offset: 128)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1334, file: !135, line: 226, baseType: !1374, size: 64, offset: 192)
!1374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1375, size: 64)
!1375 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !135, line: 185, flags: DIFlagFwdDecl)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1334, file: !135, line: 229, baseType: !1377, size: 128, offset: 256)
!1377 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1378, size: 128, elements: !1286)
!1378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1379, size: 64)
!1379 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1334, file: !135, line: 232, baseType: !1333, size: 64, offset: 384)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1334, file: !135, line: 233, baseType: !1333, size: 64, offset: 448)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1334, file: !135, line: 238, baseType: !1383, size: 64, offset: 512)
!1383 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1384)
!1384 = !{!1385, !1391}
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1383, file: !135, line: 236, baseType: !1386, size: 64)
!1386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1387, size: 64)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1388)
!1388 = !{!1389, !1390}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1387, file: !135, line: 275, baseType: !1359, size: 64)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1387, file: !135, line: 278, baseType: !1359, size: 64, offset: 64)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1383, file: !135, line: 237, baseType: !1392, size: 64)
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1393, size: 64)
!1393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1394)
!1394 = !{!1395, !1396, !1397, !1398, !1399}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1393, file: !135, line: 261, baseType: !1217, size: 64)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1393, file: !135, line: 262, baseType: !1217, size: 64, offset: 64)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1393, file: !135, line: 266, baseType: !1217, size: 64, offset: 128)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1393, file: !135, line: 267, baseType: !1217, size: 64, offset: 192)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1393, file: !135, line: 270, baseType: !1136, size: 32, offset: 256)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1334, file: !135, line: 241, baseType: !1370, size: 64, offset: 576)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1334, file: !135, line: 244, baseType: !1136, size: 32, offset: 640)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1334, file: !135, line: 247, baseType: !1136, size: 32, offset: 672)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1334, file: !135, line: 250, baseType: !1136, size: 32, offset: 704)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1334, file: !135, line: 253, baseType: !1136, size: 32, offset: 736)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1334, file: !135, line: 256, baseType: !1136, size: 32, offset: 768)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1237, file: !476, line: 179, baseType: !1407, size: 64)
!1407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1408, size: 64)
!1408 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !476, line: 150, baseType: !1409)
!1409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !476, line: 142, size: 320, elements: !1410)
!1410 = !{!1411, !1412, !1413, !1414, !1417, !1418}
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1409, file: !476, line: 144, baseType: !1040, size: 64)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1409, file: !476, line: 145, baseType: !1217, size: 64, offset: 64)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1409, file: !476, line: 146, baseType: !1217, size: 64, offset: 128)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1409, file: !476, line: 147, baseType: !1415, size: 32, offset: 192)
!1415 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1416, line: 31, baseType: !1136)
!1416 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1409, file: !476, line: 148, baseType: !7, size: 32, offset: 224)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1409, file: !476, line: 149, baseType: !1159, size: 8, offset: 256)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1237, file: !476, line: 180, baseType: !1420, size: 64)
!1420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1421, size: 64)
!1421 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !476, line: 162, baseType: !1422)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !476, line: 159, size: 128, elements: !1423)
!1423 = !{!1424, !1425}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1422, file: !476, line: 160, baseType: !1040, size: 64)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1422, file: !476, line: 161, baseType: !1095, size: 64, offset: 64)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1237, file: !476, line: 181, baseType: !1427, size: 64)
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1428, size: 64)
!1428 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !476, line: 181, flags: DIFlagFwdDecl)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1232, file: !476, line: 317, baseType: !1430, size: 64)
!1430 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1095, size: 64, elements: !1140)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1232, file: !476, line: 318, baseType: !1432, size: 320)
!1432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !476, line: 188, size: 320, elements: !1433)
!1433 = !{!1434, !1436, !1493}
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1432, file: !476, line: 190, baseType: !1435, size: 192)
!1435 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1236, size: 192, elements: !1113)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1432, file: !476, line: 193, baseType: !1437, size: 64, offset: 192)
!1437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1438, size: 64)
!1438 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !476, line: 206, size: 320, elements: !1439)
!1439 = !{!1440, !1478, !1479, !1480, !1492}
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1438, file: !476, line: 208, baseType: !1441, size: 64)
!1441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1442, size: 64)
!1442 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1020, line: 62, baseType: !1443)
!1443 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1444, line: 538, size: 256, elements: !1445)
!1444 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1445 = !{!1446, !1450, !1456, !1469}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1443, file: !1444, line: 539, baseType: !1447, size: 32)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1444, line: 482, size: 32, elements: !1448)
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1447, file: !1444, line: 484, baseType: !7, size: 32)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1443, file: !1444, line: 540, baseType: !1451, size: 192)
!1451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1444, line: 488, size: 192, elements: !1452)
!1452 = !{!1453, !1454, !1455}
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1451, file: !1444, line: 489, baseType: !1447, size: 32)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1451, file: !1444, line: 492, baseType: !1242, size: 64, offset: 64)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1451, file: !1444, line: 496, baseType: !1040, size: 64, offset: 128)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1443, file: !1444, line: 541, baseType: !1457, size: 256)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1444, line: 504, size: 256, elements: !1458)
!1458 = !{!1459, !1460, !1467, !1468}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1457, file: !1444, line: 505, baseType: !1447, size: 32)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1457, file: !1444, line: 509, baseType: !1461, size: 64, offset: 64)
!1461 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1444, line: 501, baseType: !1462)
!1462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1463, size: 64)
!1463 = !DISubroutineType(types: !1464)
!1464 = !{null, !1465}
!1465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1466, size: 64)
!1466 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1457, file: !1444, line: 510, baseType: !1465, size: 64, offset: 128)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1457, file: !1444, line: 513, baseType: !1441, size: 64, offset: 192)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1443, file: !1444, line: 542, baseType: !1470, size: 128)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1444, line: 530, size: 128, elements: !1471)
!1471 = !{!1472, !1473}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1470, file: !1444, line: 531, baseType: !1447, size: 32)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1470, file: !1444, line: 534, baseType: !1474, size: 64, offset: 64)
!1474 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1444, line: 525, baseType: !1475)
!1475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1476, size: 64)
!1476 = !DISubroutineType(types: !1477)
!1477 = !{!1159, !1040, !1242, !1093, !1093}
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1438, file: !476, line: 211, baseType: !7, size: 32, offset: 64)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1438, file: !476, line: 214, baseType: !1095, size: 64, offset: 128)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1438, file: !476, line: 224, baseType: !1481, size: 64, offset: 192)
!1481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1482, size: 64)
!1482 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !476, line: 202, baseType: !1483)
!1483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !476, line: 202, size: 128, elements: !1484)
!1484 = !{!1485}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1483, file: !476, line: 202, baseType: !1486, size: 128)
!1486 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !476, line: 200, baseType: !1487)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !476, line: 200, size: 128, elements: !1488)
!1488 = !{!1489, !1490, !1491}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1487, file: !476, line: 200, baseType: !7, size: 32)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1487, file: !476, line: 200, baseType: !7, size: 32, offset: 32)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1487, file: !476, line: 200, baseType: !1252, size: 64, offset: 64)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1438, file: !476, line: 234, baseType: !1481, size: 64, offset: 256)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1432, file: !476, line: 197, baseType: !1095, size: 64, offset: 256)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1232, file: !476, line: 319, baseType: !1102, size: 256)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1232, file: !476, line: 320, baseType: !1121, size: 192)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1042, file: !151, line: 3384, baseType: !1497, size: 1472)
!1497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !151, line: 3114, size: 1472, elements: !1498)
!1498 = !{!1499, !1520, !1521, !1522, !1523}
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1497, file: !151, line: 3115, baseType: !1500, size: 1216)
!1500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !151, line: 2984, size: 1216, elements: !1501)
!1501 = !{!1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519}
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1500, file: !151, line: 2985, baseType: !1213, size: 960)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1500, file: !151, line: 2986, baseType: !1040, size: 64, offset: 960)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1500, file: !151, line: 2987, baseType: !1040, size: 64, offset: 1024)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1500, file: !151, line: 2988, baseType: !1040, size: 64, offset: 1088)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1500, file: !151, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1500, file: !151, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1500, file: !151, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1500, file: !151, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1500, file: !151, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1500, file: !151, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1500, file: !151, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1500, file: !151, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1500, file: !151, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1500, file: !151, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1500, file: !151, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1500, file: !151, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1500, file: !151, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1500, file: !151, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1497, file: !151, line: 3117, baseType: !1040, size: 64, offset: 1216)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1497, file: !151, line: 3119, baseType: !1040, size: 64, offset: 1280)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1497, file: !151, line: 3121, baseType: !1040, size: 64, offset: 1344)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1497, file: !151, line: 3123, baseType: !1040, size: 64, offset: 1408)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1042, file: !151, line: 3385, baseType: !1525, size: 1088)
!1525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !151, line: 2874, size: 1088, elements: !1526)
!1526 = !{!1527, !1528, !1529}
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1525, file: !151, line: 2875, baseType: !1213, size: 960)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1525, file: !151, line: 2876, baseType: !1217, size: 64, offset: 960)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1525, file: !151, line: 2877, baseType: !1530, size: 64, offset: 1024)
!1530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1531, size: 64)
!1531 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !151, line: 2856, flags: DIFlagFwdDecl)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1042, file: !151, line: 3386, baseType: !1500, size: 1216)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1042, file: !151, line: 3387, baseType: !1534, size: 1280)
!1534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !151, line: 3093, size: 1280, elements: !1535)
!1535 = !{!1536, !1537}
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1534, file: !151, line: 3094, baseType: !1500, size: 1216)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1534, file: !151, line: 3095, baseType: !1530, size: 64, offset: 1216)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1042, file: !151, line: 3388, baseType: !1539, size: 1216)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !151, line: 2824, size: 1216, elements: !1540)
!1540 = !{!1541, !1542, !1543, !1544, !1545, !1546}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1539, file: !151, line: 2825, baseType: !1175, size: 896)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1539, file: !151, line: 2827, baseType: !1040, size: 64, offset: 896)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1539, file: !151, line: 2828, baseType: !1040, size: 64, offset: 960)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1539, file: !151, line: 2829, baseType: !1040, size: 64, offset: 1024)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1539, file: !151, line: 2830, baseType: !1040, size: 64, offset: 1088)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1539, file: !151, line: 2831, baseType: !1040, size: 64, offset: 1152)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1042, file: !151, line: 3389, baseType: !1548, size: 1024)
!1548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !151, line: 2850, size: 1024, elements: !1549)
!1549 = !{!1550, !1551, !1552}
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1548, file: !151, line: 2851, baseType: !1213, size: 960)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1548, file: !151, line: 2852, baseType: !1136, size: 32, offset: 960)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1548, file: !151, line: 2853, baseType: !1136, size: 32, offset: 992)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1042, file: !151, line: 3390, baseType: !1554, size: 1024)
!1554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !151, line: 2857, size: 1024, elements: !1555)
!1555 = !{!1556, !1557}
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1554, file: !151, line: 2858, baseType: !1213, size: 960)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1554, file: !151, line: 2859, baseType: !1530, size: 64, offset: 960)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1042, file: !151, line: 3391, baseType: !1559, size: 960)
!1559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !151, line: 2862, size: 960, elements: !1560)
!1560 = !{!1561}
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1559, file: !151, line: 2863, baseType: !1213, size: 960)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1042, file: !151, line: 3392, baseType: !1563, size: 1472)
!1563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !151, line: 3304, size: 1472, elements: !1564)
!1564 = !{!1565}
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1563, file: !151, line: 3305, baseType: !1497, size: 1472)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1042, file: !151, line: 3393, baseType: !1567, size: 1792)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !151, line: 3248, size: 1792, elements: !1568)
!1568 = !{!1569, !1570, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1567, file: !151, line: 3249, baseType: !1497, size: 1472)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1567, file: !151, line: 3251, baseType: !1571, size: 64, offset: 1472)
!1571 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1572, size: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1573, line: 463, size: 1152, elements: !1574)
!1573 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1574 = !{!1575, !1578, !1609, !1610, !1613, !1616, !1666, !1667, !1668, !1669, !1670, !1694, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720}
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1572, file: !1573, line: 464, baseType: !1576, size: 64)
!1576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1577, size: 64)
!1577 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1573, line: 464, flags: DIFlagFwdDecl)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1572, file: !1573, line: 467, baseType: !1579, size: 64, offset: 64)
!1579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1580, size: 64)
!1580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1581)
!1581 = !{!1582, !1584, !1585, !1598, !1599, !1600, !1601, !1602, !1603, !1605, !1607, !1608}
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1580, file: !135, line: 377, baseType: !1583, size: 64)
!1583 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1020, line: 111, baseType: !1333)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1580, file: !135, line: 378, baseType: !1583, size: 64, offset: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1580, file: !135, line: 381, baseType: !1586, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1587, size: 64)
!1587 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1588)
!1588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1589)
!1589 = !{!1590}
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1588, file: !135, line: 282, baseType: !1591, size: 128)
!1591 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1592)
!1592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1593)
!1593 = !{!1594, !1595, !1596}
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1592, file: !135, line: 281, baseType: !7, size: 32)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1592, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1592, file: !135, line: 281, baseType: !1597, size: 64, offset: 64)
!1597 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1583, size: 64, elements: !1140)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1580, file: !135, line: 384, baseType: !1136, size: 32, offset: 192)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1580, file: !135, line: 387, baseType: !1136, size: 32, offset: 224)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1580, file: !135, line: 390, baseType: !1136, size: 32, offset: 256)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1580, file: !135, line: 394, baseType: !1586, size: 64, offset: 320)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1580, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1580, file: !135, line: 399, baseType: !1604, size: 64, offset: 416)
!1604 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !1286)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1580, file: !135, line: 402, baseType: !1606, size: 64, offset: 480)
!1606 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1286)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1580, file: !135, line: 406, baseType: !1136, size: 32, offset: 544)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1580, file: !135, line: 409, baseType: !1136, size: 32, offset: 576)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1572, file: !1573, line: 470, baseType: !1360, size: 64, offset: 128)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1572, file: !1573, line: 473, baseType: !1611, size: 64, offset: 192)
!1611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1612, size: 64)
!1612 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1573, line: 166, flags: DIFlagFwdDecl)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1572, file: !1573, line: 476, baseType: !1614, size: 64, offset: 256)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64)
!1615 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1573, line: 476, flags: DIFlagFwdDecl)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1572, file: !1573, line: 479, baseType: !1617, size: 64, offset: 320)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1618, line: 144, baseType: !1619)
!1618 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1620, size: 64)
!1620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1618, line: 100, size: 896, elements: !1621)
!1621 = !{!1622, !1628, !1633, !1638, !1640, !1643, !1644, !1645, !1646, !1647, !1652, !1654, !1655, !1660, !1665}
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1620, file: !1618, line: 102, baseType: !1623, size: 64)
!1623 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1618, line: 52, baseType: !1624)
!1624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1625, size: 64)
!1625 = !DISubroutineType(types: !1626)
!1626 = !{!1627, !1465}
!1627 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1618, line: 47, baseType: !7)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1620, file: !1618, line: 105, baseType: !1629, size: 64, offset: 64)
!1629 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1618, line: 59, baseType: !1630)
!1630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1631, size: 64)
!1631 = !DISubroutineType(types: !1632)
!1632 = !{!1136, !1465, !1465}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1620, file: !1618, line: 108, baseType: !1634, size: 64, offset: 128)
!1634 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1618, line: 63, baseType: !1635)
!1635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1636, size: 64)
!1636 = !DISubroutineType(types: !1637)
!1637 = !{null, !1322}
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1620, file: !1618, line: 111, baseType: !1639, size: 64, offset: 192)
!1639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1322, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1620, file: !1618, line: 114, baseType: !1641, size: 64, offset: 256)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1642, line: 46, baseType: !1093)
!1642 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1620, file: !1618, line: 117, baseType: !1641, size: 64, offset: 320)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1620, file: !1618, line: 120, baseType: !1641, size: 64, offset: 384)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1620, file: !1618, line: 124, baseType: !7, size: 32, offset: 448)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1620, file: !1618, line: 128, baseType: !7, size: 32, offset: 480)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1620, file: !1618, line: 131, baseType: !1648, size: 64, offset: 512)
!1648 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1618, line: 75, baseType: !1649)
!1649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1650, size: 64)
!1650 = !DISubroutineType(types: !1651)
!1651 = !{!1322, !1641, !1641}
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1620, file: !1618, line: 132, baseType: !1653, size: 64, offset: 576)
!1653 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1618, line: 78, baseType: !1635)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1620, file: !1618, line: 135, baseType: !1322, size: 64, offset: 640)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1620, file: !1618, line: 136, baseType: !1656, size: 64, offset: 704)
!1656 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1618, line: 82, baseType: !1657)
!1657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!1658 = !DISubroutineType(types: !1659)
!1659 = !{!1322, !1322, !1641, !1641}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1620, file: !1618, line: 137, baseType: !1661, size: 64, offset: 768)
!1661 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1618, line: 83, baseType: !1662)
!1662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1663, size: 64)
!1663 = !DISubroutineType(types: !1664)
!1664 = !{null, !1322, !1322}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1620, file: !1618, line: 141, baseType: !7, size: 32, offset: 832)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1572, file: !1573, line: 484, baseType: !1040, size: 64, offset: 384)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1572, file: !1573, line: 488, baseType: !1040, size: 64, offset: 448)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1572, file: !1573, line: 493, baseType: !1040, size: 64, offset: 512)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1572, file: !1573, line: 496, baseType: !1040, size: 64, offset: 576)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1572, file: !1573, line: 501, baseType: !1671, size: 64, offset: 640)
!1671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1672, size: 64)
!1672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !146, line: 2355, size: 576, elements: !1673)
!1673 = !{!1674, !1677, !1678, !1679, !1680, !1682, !1683, !1688, !1689, !1690, !1691, !1692, !1693}
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1672, file: !146, line: 2356, baseType: !1675, size: 64)
!1675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1676, size: 64)
!1676 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !146, line: 2356, flags: DIFlagFwdDecl)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1672, file: !146, line: 2357, baseType: !1242, size: 64, offset: 64)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1672, file: !146, line: 2358, baseType: !1136, size: 32, offset: 128)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1672, file: !146, line: 2359, baseType: !1136, size: 32, offset: 160)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1672, file: !146, line: 2360, baseType: !1681, size: 128, offset: 192)
!1681 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1136, size: 128, elements: !1311)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1672, file: !146, line: 2364, baseType: !1136, size: 32, offset: 320)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1672, file: !146, line: 2367, baseType: !1684, size: 128, offset: 384)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !146, line: 2349, size: 128, elements: !1685)
!1685 = !{!1686, !1687}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1684, file: !146, line: 2351, baseType: !1217, size: 64)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1684, file: !146, line: 2352, baseType: !1095, size: 64, offset: 64)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1672, file: !146, line: 2371, baseType: !145, size: 32, offset: 512)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1672, file: !146, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1672, file: !146, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1672, file: !146, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1672, file: !146, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1672, file: !146, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1572, file: !1573, line: 504, baseType: !1695, size: 64, offset: 704)
!1695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1696, size: 64)
!1696 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1573, line: 504, flags: DIFlagFwdDecl)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1572, file: !1573, line: 507, baseType: !1617, size: 64, offset: 768)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1572, file: !1573, line: 510, baseType: !1136, size: 32, offset: 832)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1572, file: !1573, line: 513, baseType: !1136, size: 32, offset: 864)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1572, file: !1573, line: 516, baseType: !1167, size: 32, offset: 896)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1572, file: !1573, line: 519, baseType: !1167, size: 32, offset: 928)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1572, file: !1573, line: 522, baseType: !7, size: 32, offset: 960)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1572, file: !1573, line: 523, baseType: !7, size: 32, offset: 992)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1572, file: !1573, line: 528, baseType: !1242, size: 64, offset: 1024)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1572, file: !1573, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1572, file: !1573, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1572, file: !1573, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1572, file: !1573, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1572, file: !1573, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1572, file: !1573, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1572, file: !1573, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1572, file: !1573, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1572, file: !1573, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1572, file: !1573, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1572, file: !1573, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1572, file: !1573, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1572, file: !1573, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1572, file: !1573, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1572, file: !1573, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1572, file: !1573, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1567, file: !151, line: 3254, baseType: !1040, size: 64, offset: 1536)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1567, file: !151, line: 3257, baseType: !1040, size: 64, offset: 1600)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1567, file: !151, line: 3258, baseType: !1040, size: 64, offset: 1664)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1567, file: !151, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1567, file: !151, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1567, file: !151, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1567, file: !151, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1567, file: !151, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1567, file: !151, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1567, file: !151, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1567, file: !151, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1567, file: !151, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1567, file: !151, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1567, file: !151, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1567, file: !151, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1567, file: !151, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1567, file: !151, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1567, file: !151, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1567, file: !151, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1567, file: !151, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1567, file: !151, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1042, file: !151, line: 3394, baseType: !1743, size: 1344)
!1743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !151, line: 2279, size: 1344, elements: !1744)
!1744 = !{!1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1743, file: !151, line: 2280, baseType: !1078, size: 192)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1743, file: !151, line: 2281, baseType: !1040, size: 64, offset: 192)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1743, file: !151, line: 2282, baseType: !1040, size: 64, offset: 256)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1743, file: !151, line: 2283, baseType: !1040, size: 64, offset: 320)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1743, file: !151, line: 2284, baseType: !1040, size: 64, offset: 384)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1743, file: !151, line: 2285, baseType: !7, size: 32, offset: 448)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1743, file: !151, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1743, file: !151, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1743, file: !151, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1743, file: !151, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1743, file: !151, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1743, file: !151, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1743, file: !151, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1743, file: !151, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1743, file: !151, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1743, file: !151, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1743, file: !151, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1743, file: !151, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1743, file: !151, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1743, file: !151, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1743, file: !151, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1743, file: !151, line: 2305, baseType: !7, size: 32, offset: 512)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1743, file: !151, line: 2306, baseType: !1415, size: 32, offset: 544)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1743, file: !151, line: 2307, baseType: !1040, size: 64, offset: 576)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1743, file: !151, line: 2308, baseType: !1040, size: 64, offset: 640)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1743, file: !151, line: 2314, baseType: !1771, size: 64, offset: 704)
!1771 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !151, line: 2309, size: 64, elements: !1772)
!1772 = !{!1773, !1774, !1775}
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1771, file: !151, line: 2310, baseType: !1136, size: 32)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1771, file: !151, line: 2311, baseType: !1242, size: 64)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1771, file: !151, line: 2312, baseType: !1776, size: 64)
!1776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1777, size: 64)
!1777 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !151, line: 2277, flags: DIFlagFwdDecl)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1743, file: !151, line: 2315, baseType: !1040, size: 64, offset: 768)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1743, file: !151, line: 2316, baseType: !1040, size: 64, offset: 832)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1743, file: !151, line: 2317, baseType: !1040, size: 64, offset: 896)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1743, file: !151, line: 2318, baseType: !1040, size: 64, offset: 960)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1743, file: !151, line: 2319, baseType: !1040, size: 64, offset: 1024)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1743, file: !151, line: 2320, baseType: !1040, size: 64, offset: 1088)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1743, file: !151, line: 2321, baseType: !1040, size: 64, offset: 1152)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1743, file: !151, line: 2322, baseType: !1040, size: 64, offset: 1216)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1743, file: !151, line: 2324, baseType: !1787, size: 64, offset: 1280)
!1787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1788, size: 64)
!1788 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !151, line: 2324, flags: DIFlagFwdDecl)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1042, file: !151, line: 3395, baseType: !1790, size: 320)
!1790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !151, line: 1469, size: 320, elements: !1791)
!1791 = !{!1792, !1793, !1794}
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1790, file: !151, line: 1470, baseType: !1078, size: 192)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1790, file: !151, line: 1471, baseType: !1040, size: 64, offset: 192)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1790, file: !151, line: 1472, baseType: !1040, size: 64, offset: 256)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1042, file: !151, line: 3396, baseType: !1796, size: 320)
!1796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !151, line: 1482, size: 320, elements: !1797)
!1797 = !{!1798, !1799, !1800}
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1796, file: !151, line: 1483, baseType: !1078, size: 192)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1796, file: !151, line: 1484, baseType: !1136, size: 32, offset: 192)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1796, file: !151, line: 1485, baseType: !1801, size: 64, offset: 256)
!1801 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1040, size: 64, elements: !1140)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1042, file: !151, line: 3397, baseType: !1803, size: 384)
!1803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !151, line: 1829, size: 384, elements: !1804)
!1804 = !{!1805, !1806, !1807, !1808}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1803, file: !151, line: 1830, baseType: !1078, size: 192)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1803, file: !151, line: 1831, baseType: !1167, size: 32, offset: 192)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1803, file: !151, line: 1832, baseType: !1040, size: 64, offset: 256)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1803, file: !151, line: 1835, baseType: !1801, size: 64, offset: 320)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1042, file: !151, line: 3398, baseType: !1810, size: 704)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !151, line: 1898, size: 704, elements: !1811)
!1811 = !{!1812, !1813, !1814, !1818, !1819, !1822}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1810, file: !151, line: 1899, baseType: !1078, size: 192)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1810, file: !151, line: 1902, baseType: !1040, size: 64, offset: 192)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1810, file: !151, line: 1905, baseType: !1815, size: 64, offset: 256)
!1815 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1020, line: 58, baseType: !1816)
!1816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1817, size: 64)
!1817 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1020, line: 57, flags: DIFlagFwdDecl)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1810, file: !151, line: 1908, baseType: !7, size: 32, offset: 320)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1810, file: !151, line: 1911, baseType: !1820, size: 64, offset: 384)
!1820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1821, size: 64)
!1821 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !151, line: 1876, flags: DIFlagFwdDecl)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1810, file: !151, line: 1914, baseType: !1823, size: 256, offset: 448)
!1823 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !151, line: 1883, size: 256, elements: !1824)
!1824 = !{!1825, !1827, !1828, !1833}
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1823, file: !151, line: 1884, baseType: !1826, size: 64)
!1826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1823, size: 64)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1823, file: !151, line: 1885, baseType: !1826, size: 64, offset: 64)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1823, file: !151, line: 1891, baseType: !1829, size: 64, offset: 128)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1823, file: !151, line: 1891, size: 64, elements: !1830)
!1830 = !{!1831, !1832}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1829, file: !151, line: 1891, baseType: !1815, size: 64)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1829, file: !151, line: 1891, baseType: !1040, size: 64)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1823, file: !151, line: 1892, baseType: !1834, size: 64, offset: 192)
!1834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1040, size: 64)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1042, file: !151, line: 3399, baseType: !1836, size: 704)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !151, line: 2008, size: 704, elements: !1837)
!1837 = !{!1838, !1839, !1840, !1841, !1842, !1843, !1855, !1856, !1857, !1858, !1859}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1836, file: !151, line: 2009, baseType: !1078, size: 192)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1836, file: !151, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1836, file: !151, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1836, file: !151, line: 2014, baseType: !1167, size: 32, offset: 224)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1836, file: !151, line: 2016, baseType: !1040, size: 64, offset: 256)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1836, file: !151, line: 2017, baseType: !1844, size: 64, offset: 320)
!1844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1845, size: 64)
!1845 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !151, line: 183, baseType: !1846)
!1846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !151, line: 183, size: 128, elements: !1847)
!1847 = !{!1848}
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1846, file: !151, line: 183, baseType: !1849, size: 128)
!1849 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !151, line: 182, baseType: !1850)
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !151, line: 182, size: 128, elements: !1851)
!1851 = !{!1852, !1853, !1854}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1850, file: !151, line: 182, baseType: !7, size: 32)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1850, file: !151, line: 182, baseType: !7, size: 32, offset: 32)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1850, file: !151, line: 182, baseType: !1801, size: 64, offset: 64)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1836, file: !151, line: 2019, baseType: !1040, size: 64, offset: 384)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1836, file: !151, line: 2020, baseType: !1040, size: 64, offset: 448)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1836, file: !151, line: 2021, baseType: !1040, size: 64, offset: 512)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1836, file: !151, line: 2022, baseType: !1040, size: 64, offset: 576)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1836, file: !151, line: 2023, baseType: !1040, size: 64, offset: 640)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1042, file: !151, line: 3400, baseType: !1861, size: 832)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !151, line: 2430, size: 832, elements: !1862)
!1862 = !{!1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1861, file: !151, line: 2431, baseType: !1078, size: 192)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1861, file: !151, line: 2433, baseType: !1040, size: 64, offset: 192)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1861, file: !151, line: 2434, baseType: !1040, size: 64, offset: 256)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1861, file: !151, line: 2435, baseType: !1040, size: 64, offset: 320)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1861, file: !151, line: 2436, baseType: !1040, size: 64, offset: 384)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1861, file: !151, line: 2437, baseType: !1844, size: 64, offset: 448)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1861, file: !151, line: 2438, baseType: !1040, size: 64, offset: 512)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1861, file: !151, line: 2440, baseType: !1040, size: 64, offset: 576)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1861, file: !151, line: 2441, baseType: !1040, size: 64, offset: 640)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1861, file: !151, line: 2443, baseType: !1873, size: 128, offset: 704)
!1873 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !151, line: 182, baseType: !1874)
!1874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !151, line: 182, size: 128, elements: !1875)
!1875 = !{!1876}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1874, file: !151, line: 182, baseType: !1849, size: 128)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1042, file: !151, line: 3401, baseType: !1878, size: 320)
!1878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !151, line: 3327, size: 320, elements: !1879)
!1879 = !{!1880, !1881, !1888}
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1878, file: !151, line: 3329, baseType: !1078, size: 192)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1878, file: !151, line: 3330, baseType: !1882, size: 64, offset: 192)
!1882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1883, size: 64)
!1883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !151, line: 3320, size: 192, elements: !1884)
!1884 = !{!1885, !1886, !1887}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1883, file: !151, line: 3322, baseType: !1882, size: 64)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1883, file: !151, line: 3323, baseType: !1882, size: 64, offset: 64)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1883, file: !151, line: 3324, baseType: !1040, size: 64, offset: 128)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1878, file: !151, line: 3331, baseType: !1882, size: 64, offset: 256)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1042, file: !151, line: 3402, baseType: !1890, size: 256)
!1890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !151, line: 1540, size: 256, elements: !1891)
!1891 = !{!1892, !1893}
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1890, file: !151, line: 1541, baseType: !1078, size: 192)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1890, file: !151, line: 1542, baseType: !1894, size: 64, offset: 192)
!1894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1895, size: 64)
!1895 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !151, line: 1538, baseType: !1896)
!1896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !151, line: 1538, size: 192, elements: !1897)
!1897 = !{!1898}
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1896, file: !151, line: 1538, baseType: !1899, size: 192)
!1899 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !151, line: 1537, baseType: !1900)
!1900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !151, line: 1537, size: 192, elements: !1901)
!1901 = !{!1902, !1903, !1904}
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1900, file: !151, line: 1537, baseType: !7, size: 32)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1900, file: !151, line: 1537, baseType: !7, size: 32, offset: 32)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1900, file: !151, line: 1537, baseType: !1905, size: 128, offset: 64)
!1905 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1906, size: 128, elements: !1140)
!1906 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !151, line: 1535, baseType: !1907)
!1907 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !151, line: 1532, size: 128, elements: !1908)
!1908 = !{!1909, !1910}
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1907, file: !151, line: 1533, baseType: !1040, size: 64)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1907, file: !151, line: 1534, baseType: !1040, size: 64, offset: 64)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1042, file: !151, line: 3403, baseType: !1912, size: 512)
!1912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !151, line: 1938, size: 512, elements: !1913)
!1913 = !{!1914, !1915, !1916, !1917, !1923, !1924, !1925}
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1912, file: !151, line: 1939, baseType: !1078, size: 192)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1912, file: !151, line: 1940, baseType: !1167, size: 32, offset: 192)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1912, file: !151, line: 1941, baseType: !150, size: 32, offset: 224)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1912, file: !151, line: 1946, baseType: !1918, size: 32, offset: 256)
!1918 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !151, line: 1942, size: 32, elements: !1919)
!1919 = !{!1920, !1921, !1922}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1918, file: !151, line: 1943, baseType: !169, size: 32)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1918, file: !151, line: 1944, baseType: !176, size: 32)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1918, file: !151, line: 1945, baseType: !183, size: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1912, file: !151, line: 1950, baseType: !1359, size: 64, offset: 320)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1912, file: !151, line: 1951, baseType: !1359, size: 64, offset: 384)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1912, file: !151, line: 1953, baseType: !1801, size: 64, offset: 448)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1042, file: !151, line: 3404, baseType: !1927, size: 1664)
!1927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !151, line: 3337, size: 1664, elements: !1928)
!1928 = !{!1929, !1930}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1927, file: !151, line: 3338, baseType: !1078, size: 192)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1927, file: !151, line: 3341, baseType: !1931, size: 1472, offset: 192)
!1931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1932, line: 410, size: 1472, elements: !1933)
!1932 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1933 = !{!1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097}
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1931, file: !1932, line: 412, baseType: !1136, size: 32)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1931, file: !1932, line: 413, baseType: !1136, size: 32, offset: 32)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1931, file: !1932, line: 414, baseType: !1136, size: 32, offset: 64)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1931, file: !1932, line: 415, baseType: !1136, size: 32, offset: 96)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1931, file: !1932, line: 416, baseType: !1136, size: 32, offset: 128)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1931, file: !1932, line: 417, baseType: !1136, size: 32, offset: 160)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1931, file: !1932, line: 418, baseType: !1159, size: 8, offset: 192)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1931, file: !1932, line: 419, baseType: !1159, size: 8, offset: 200)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1931, file: !1932, line: 420, baseType: !1943, size: 8, offset: 208)
!1943 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1931, file: !1932, line: 421, baseType: !1943, size: 8, offset: 216)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1931, file: !1932, line: 422, baseType: !1943, size: 8, offset: 224)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1931, file: !1932, line: 423, baseType: !1943, size: 8, offset: 232)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1931, file: !1932, line: 424, baseType: !1943, size: 8, offset: 240)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1931, file: !1932, line: 425, baseType: !1943, size: 8, offset: 248)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1931, file: !1932, line: 426, baseType: !1943, size: 8, offset: 256)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1931, file: !1932, line: 427, baseType: !1943, size: 8, offset: 264)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1931, file: !1932, line: 428, baseType: !1943, size: 8, offset: 272)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1931, file: !1932, line: 429, baseType: !1943, size: 8, offset: 280)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1931, file: !1932, line: 430, baseType: !1943, size: 8, offset: 288)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1931, file: !1932, line: 431, baseType: !1943, size: 8, offset: 296)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1931, file: !1932, line: 432, baseType: !1943, size: 8, offset: 304)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1931, file: !1932, line: 433, baseType: !1943, size: 8, offset: 312)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1931, file: !1932, line: 434, baseType: !1943, size: 8, offset: 320)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1931, file: !1932, line: 435, baseType: !1943, size: 8, offset: 328)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1931, file: !1932, line: 436, baseType: !1943, size: 8, offset: 336)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1931, file: !1932, line: 437, baseType: !1943, size: 8, offset: 344)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1931, file: !1932, line: 438, baseType: !1943, size: 8, offset: 352)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1931, file: !1932, line: 439, baseType: !1943, size: 8, offset: 360)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1931, file: !1932, line: 440, baseType: !1943, size: 8, offset: 368)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1931, file: !1932, line: 441, baseType: !1943, size: 8, offset: 376)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1931, file: !1932, line: 442, baseType: !1943, size: 8, offset: 384)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1931, file: !1932, line: 443, baseType: !1943, size: 8, offset: 392)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1931, file: !1932, line: 444, baseType: !1943, size: 8, offset: 400)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1931, file: !1932, line: 445, baseType: !1943, size: 8, offset: 408)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1931, file: !1932, line: 446, baseType: !1943, size: 8, offset: 416)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1931, file: !1932, line: 447, baseType: !1943, size: 8, offset: 424)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1931, file: !1932, line: 448, baseType: !1943, size: 8, offset: 432)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1931, file: !1932, line: 449, baseType: !1943, size: 8, offset: 440)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1931, file: !1932, line: 450, baseType: !1943, size: 8, offset: 448)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1931, file: !1932, line: 451, baseType: !1943, size: 8, offset: 456)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1931, file: !1932, line: 452, baseType: !1943, size: 8, offset: 464)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1931, file: !1932, line: 453, baseType: !1943, size: 8, offset: 472)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1931, file: !1932, line: 454, baseType: !1943, size: 8, offset: 480)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1931, file: !1932, line: 455, baseType: !1943, size: 8, offset: 488)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1931, file: !1932, line: 456, baseType: !1943, size: 8, offset: 496)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1931, file: !1932, line: 457, baseType: !1943, size: 8, offset: 504)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1931, file: !1932, line: 458, baseType: !1943, size: 8, offset: 512)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1931, file: !1932, line: 459, baseType: !1943, size: 8, offset: 520)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1931, file: !1932, line: 460, baseType: !1943, size: 8, offset: 528)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1931, file: !1932, line: 461, baseType: !1943, size: 8, offset: 536)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1931, file: !1932, line: 462, baseType: !1943, size: 8, offset: 544)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1931, file: !1932, line: 463, baseType: !1943, size: 8, offset: 552)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1931, file: !1932, line: 464, baseType: !1943, size: 8, offset: 560)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1931, file: !1932, line: 465, baseType: !1943, size: 8, offset: 568)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1931, file: !1932, line: 466, baseType: !1943, size: 8, offset: 576)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1931, file: !1932, line: 467, baseType: !1943, size: 8, offset: 584)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1931, file: !1932, line: 468, baseType: !1943, size: 8, offset: 592)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1931, file: !1932, line: 469, baseType: !1943, size: 8, offset: 600)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1931, file: !1932, line: 470, baseType: !1943, size: 8, offset: 608)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1931, file: !1932, line: 471, baseType: !1943, size: 8, offset: 616)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1931, file: !1932, line: 472, baseType: !1943, size: 8, offset: 624)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1931, file: !1932, line: 473, baseType: !1943, size: 8, offset: 632)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1931, file: !1932, line: 474, baseType: !1943, size: 8, offset: 640)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1931, file: !1932, line: 475, baseType: !1943, size: 8, offset: 648)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1931, file: !1932, line: 476, baseType: !1943, size: 8, offset: 656)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1931, file: !1932, line: 477, baseType: !1943, size: 8, offset: 664)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1931, file: !1932, line: 478, baseType: !1943, size: 8, offset: 672)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1931, file: !1932, line: 479, baseType: !1943, size: 8, offset: 680)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1931, file: !1932, line: 480, baseType: !1943, size: 8, offset: 688)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1931, file: !1932, line: 481, baseType: !1943, size: 8, offset: 696)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1931, file: !1932, line: 482, baseType: !1943, size: 8, offset: 704)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1931, file: !1932, line: 483, baseType: !1943, size: 8, offset: 712)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1931, file: !1932, line: 484, baseType: !1943, size: 8, offset: 720)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1931, file: !1932, line: 485, baseType: !1943, size: 8, offset: 728)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1931, file: !1932, line: 486, baseType: !1943, size: 8, offset: 736)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1931, file: !1932, line: 487, baseType: !1943, size: 8, offset: 744)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1931, file: !1932, line: 488, baseType: !1943, size: 8, offset: 752)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1931, file: !1932, line: 489, baseType: !1943, size: 8, offset: 760)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1931, file: !1932, line: 490, baseType: !1943, size: 8, offset: 768)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1931, file: !1932, line: 491, baseType: !1943, size: 8, offset: 776)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1931, file: !1932, line: 492, baseType: !1943, size: 8, offset: 784)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1931, file: !1932, line: 493, baseType: !1943, size: 8, offset: 792)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1931, file: !1932, line: 494, baseType: !1943, size: 8, offset: 800)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1931, file: !1932, line: 495, baseType: !1943, size: 8, offset: 808)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1931, file: !1932, line: 496, baseType: !1943, size: 8, offset: 816)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1931, file: !1932, line: 497, baseType: !1943, size: 8, offset: 824)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1931, file: !1932, line: 498, baseType: !1943, size: 8, offset: 832)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1931, file: !1932, line: 499, baseType: !1943, size: 8, offset: 840)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1931, file: !1932, line: 500, baseType: !1943, size: 8, offset: 848)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1931, file: !1932, line: 501, baseType: !1943, size: 8, offset: 856)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1931, file: !1932, line: 502, baseType: !1943, size: 8, offset: 864)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1931, file: !1932, line: 503, baseType: !1943, size: 8, offset: 872)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1931, file: !1932, line: 504, baseType: !1943, size: 8, offset: 880)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1931, file: !1932, line: 505, baseType: !1943, size: 8, offset: 888)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1931, file: !1932, line: 506, baseType: !1943, size: 8, offset: 896)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1931, file: !1932, line: 507, baseType: !1943, size: 8, offset: 904)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1931, file: !1932, line: 508, baseType: !1943, size: 8, offset: 912)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1931, file: !1932, line: 509, baseType: !1943, size: 8, offset: 920)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1931, file: !1932, line: 510, baseType: !1943, size: 8, offset: 928)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1931, file: !1932, line: 511, baseType: !1943, size: 8, offset: 936)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1931, file: !1932, line: 512, baseType: !1943, size: 8, offset: 944)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1931, file: !1932, line: 513, baseType: !1943, size: 8, offset: 952)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1931, file: !1932, line: 514, baseType: !1943, size: 8, offset: 960)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1931, file: !1932, line: 515, baseType: !1943, size: 8, offset: 968)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1931, file: !1932, line: 516, baseType: !1943, size: 8, offset: 976)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1931, file: !1932, line: 517, baseType: !1943, size: 8, offset: 984)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1931, file: !1932, line: 518, baseType: !1943, size: 8, offset: 992)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1931, file: !1932, line: 519, baseType: !1943, size: 8, offset: 1000)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1931, file: !1932, line: 520, baseType: !1943, size: 8, offset: 1008)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1931, file: !1932, line: 521, baseType: !1943, size: 8, offset: 1016)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1931, file: !1932, line: 522, baseType: !1943, size: 8, offset: 1024)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1931, file: !1932, line: 523, baseType: !1943, size: 8, offset: 1032)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1931, file: !1932, line: 524, baseType: !1943, size: 8, offset: 1040)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1931, file: !1932, line: 525, baseType: !1943, size: 8, offset: 1048)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1931, file: !1932, line: 526, baseType: !1943, size: 8, offset: 1056)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1931, file: !1932, line: 527, baseType: !1943, size: 8, offset: 1064)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1931, file: !1932, line: 528, baseType: !1943, size: 8, offset: 1072)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1931, file: !1932, line: 529, baseType: !1943, size: 8, offset: 1080)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1931, file: !1932, line: 530, baseType: !1943, size: 8, offset: 1088)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1931, file: !1932, line: 531, baseType: !1943, size: 8, offset: 1096)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1931, file: !1932, line: 532, baseType: !1943, size: 8, offset: 1104)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1931, file: !1932, line: 533, baseType: !1943, size: 8, offset: 1112)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1931, file: !1932, line: 534, baseType: !1943, size: 8, offset: 1120)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1931, file: !1932, line: 535, baseType: !1943, size: 8, offset: 1128)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1931, file: !1932, line: 536, baseType: !1943, size: 8, offset: 1136)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1931, file: !1932, line: 537, baseType: !1943, size: 8, offset: 1144)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1931, file: !1932, line: 538, baseType: !1943, size: 8, offset: 1152)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1931, file: !1932, line: 539, baseType: !1943, size: 8, offset: 1160)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1931, file: !1932, line: 540, baseType: !1943, size: 8, offset: 1168)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1931, file: !1932, line: 541, baseType: !1943, size: 8, offset: 1176)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1931, file: !1932, line: 542, baseType: !1943, size: 8, offset: 1184)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1931, file: !1932, line: 543, baseType: !1943, size: 8, offset: 1192)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1931, file: !1932, line: 544, baseType: !1943, size: 8, offset: 1200)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1931, file: !1932, line: 545, baseType: !1943, size: 8, offset: 1208)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1931, file: !1932, line: 546, baseType: !1943, size: 8, offset: 1216)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1931, file: !1932, line: 547, baseType: !1943, size: 8, offset: 1224)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1931, file: !1932, line: 548, baseType: !1943, size: 8, offset: 1232)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1931, file: !1932, line: 549, baseType: !1943, size: 8, offset: 1240)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1931, file: !1932, line: 550, baseType: !1943, size: 8, offset: 1248)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1931, file: !1932, line: 551, baseType: !1943, size: 8, offset: 1256)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1931, file: !1932, line: 552, baseType: !1943, size: 8, offset: 1264)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1931, file: !1932, line: 553, baseType: !1943, size: 8, offset: 1272)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1931, file: !1932, line: 554, baseType: !1943, size: 8, offset: 1280)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1931, file: !1932, line: 555, baseType: !1943, size: 8, offset: 1288)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1931, file: !1932, line: 556, baseType: !1943, size: 8, offset: 1296)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1931, file: !1932, line: 557, baseType: !1943, size: 8, offset: 1304)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1931, file: !1932, line: 558, baseType: !1943, size: 8, offset: 1312)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1931, file: !1932, line: 559, baseType: !1943, size: 8, offset: 1320)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1931, file: !1932, line: 560, baseType: !1943, size: 8, offset: 1328)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1931, file: !1932, line: 561, baseType: !1943, size: 8, offset: 1336)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1931, file: !1932, line: 562, baseType: !1943, size: 8, offset: 1344)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1931, file: !1932, line: 563, baseType: !1943, size: 8, offset: 1352)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1931, file: !1932, line: 564, baseType: !1943, size: 8, offset: 1360)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1931, file: !1932, line: 565, baseType: !1943, size: 8, offset: 1368)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1931, file: !1932, line: 566, baseType: !1943, size: 8, offset: 1376)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1931, file: !1932, line: 567, baseType: !1943, size: 8, offset: 1384)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1931, file: !1932, line: 568, baseType: !1943, size: 8, offset: 1392)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1931, file: !1932, line: 569, baseType: !1943, size: 8, offset: 1400)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1931, file: !1932, line: 570, baseType: !1943, size: 8, offset: 1408)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1931, file: !1932, line: 571, baseType: !1943, size: 8, offset: 1416)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1931, file: !1932, line: 572, baseType: !1943, size: 8, offset: 1424)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1931, file: !1932, line: 573, baseType: !1943, size: 8, offset: 1432)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1931, file: !1932, line: 574, baseType: !1943, size: 8, offset: 1440)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1042, file: !151, line: 3405, baseType: !2099, size: 384)
!2099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !151, line: 3352, size: 384, elements: !2100)
!2100 = !{!2101, !2102}
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2099, file: !151, line: 3353, baseType: !1078, size: 192)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2099, file: !151, line: 3356, baseType: !2103, size: 192, offset: 192)
!2103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1932, line: 578, size: 192, elements: !2104)
!2104 = !{!2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115}
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2103, file: !1932, line: 580, baseType: !1136, size: 32)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2103, file: !1932, line: 581, baseType: !1136, size: 32, offset: 32)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2103, file: !1932, line: 582, baseType: !1136, size: 32, offset: 64)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2103, file: !1932, line: 583, baseType: !1136, size: 32, offset: 96)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2103, file: !1932, line: 584, baseType: !1159, size: 8, offset: 128)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2103, file: !1932, line: 585, baseType: !1159, size: 8, offset: 136)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2103, file: !1932, line: 586, baseType: !1159, size: 8, offset: 144)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2103, file: !1932, line: 587, baseType: !1159, size: 8, offset: 152)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2103, file: !1932, line: 588, baseType: !1159, size: 8, offset: 160)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2103, file: !1932, line: 589, baseType: !1159, size: 8, offset: 168)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2103, file: !1932, line: 590, baseType: !1159, size: 8, offset: 176)
!2116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2117, size: 64)
!2117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "typeinfo", file: !3, line: 174, size: 96, elements: !2118)
!2118 = !{!2119, !2120, !2121}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !2117, file: !3, line: 175, baseType: !767, size: 32)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "file_number", scope: !2117, file: !3, line: 176, baseType: !1136, size: 32, offset: 32)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "type_number", scope: !2117, file: !3, line: 177, baseType: !1136, size: 32, offset: 64)
!2122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2123, size: 64)
!2123 = !DISubroutineType(types: !2124)
!2124 = !{!1322, !1095}
!2125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2126, size: 64)
!2126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dbx_file", file: !3, line: 209, size: 320, elements: !2127)
!2127 = !{!2128, !2129, !2130, !2131, !2132, !2133}
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2126, file: !3, line: 211, baseType: !2125, size: 64)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "file_number", scope: !2126, file: !3, line: 212, baseType: !1136, size: 32, offset: 64)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "next_type_number", scope: !2126, file: !3, line: 213, baseType: !1136, size: 32, offset: 96)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "bincl_status", scope: !2126, file: !3, line: 214, baseType: !993, size: 32, offset: 128)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "pending_bincl_name", scope: !2126, file: !3, line: 215, baseType: !1242, size: 64, offset: 192)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2126, file: !3, line: 216, baseType: !2125, size: 64, offset: 256)
!2134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2135, size: 64)
!2135 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !151, line: 184, baseType: !2136)
!2136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !151, line: 184, size: 128, elements: !2137)
!2137 = !{!2138}
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2136, file: !151, line: 184, baseType: !1849, size: 128)
!2139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2134, size: 64)
!2140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2141, size: 64)
!2141 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1040)
!2142 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !1642, line: 35, baseType: !1095)
!2143 = !{!0, !2144, !2158, !2163, !2165, !2167, !2169, !2171, !2173, !2175, !2177, !2179, !2181, !2183, !2189, !2191, !2193, !2195, !2197, !2202}
!2144 = !DIGlobalVariableExpression(var: !2145, expr: !DIExpression())
!2145 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_dbxout_h", scope: !2, file: !2146, line: 91, type: !2147, isLocal: false, isDefinition: true)
!2146 = !DIFile(filename: "./gt-dbxout.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2147 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2148, size: 1280, elements: !1311)
!2148 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2149)
!2149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2150, line: 69, size: 320, elements: !2151)
!2150 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2151 = !{!2152, !2153, !2154, !2155, !2157}
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2149, file: !2150, line: 70, baseType: !1322, size: 64)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2149, file: !2150, line: 71, baseType: !1641, size: 64, offset: 64)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2149, file: !2150, line: 72, baseType: !1641, size: 64, offset: 128)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2149, file: !2150, line: 73, baseType: !2156, size: 64, offset: 192)
!2156 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2150, line: 65, baseType: !1635)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2149, file: !2150, line: 74, baseType: !2156, size: 64, offset: 256)
!2158 = !DIGlobalVariableExpression(var: !2159, expr: !DIExpression())
!2159 = distinct !DIGlobalVariable(name: "gt_pch_rs_gt_dbxout_h", scope: !2, file: !2146, line: 116, type: !2160, isLocal: false, isDefinition: true)
!2160 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2148, size: 2560, elements: !2161)
!2161 = !{!2162}
!2162 = !DISubrange(count: 8)
!2163 = !DIGlobalVariableExpression(var: !2164, expr: !DIExpression())
!2164 = distinct !DIGlobalVariable(name: "typevec", scope: !2, file: !3, line: 185, type: !2116, isLocal: true, isDefinition: true)
!2165 = !DIGlobalVariableExpression(var: !2166, expr: !DIExpression())
!2166 = distinct !DIGlobalVariable(name: "typevec_len", scope: !2, file: !3, line: 189, type: !1136, isLocal: true, isDefinition: true)
!2167 = !DIGlobalVariableExpression(var: !2168, expr: !DIExpression())
!2168 = distinct !DIGlobalVariable(name: "next_type_number", scope: !2, file: !3, line: 195, type: !1136, isLocal: true, isDefinition: true)
!2169 = !DIGlobalVariableExpression(var: !2170, expr: !DIExpression())
!2170 = distinct !DIGlobalVariable(name: "preinit_symbols", scope: !2, file: !3, line: 201, type: !1040, isLocal: true, isDefinition: true)
!2171 = !DIGlobalVariableExpression(var: !2172, expr: !DIExpression())
!2172 = distinct !DIGlobalVariable(name: "next_file_number", scope: !2, file: !3, line: 234, type: !1136, isLocal: true, isDefinition: true)
!2173 = !DIGlobalVariableExpression(var: !2174, expr: !DIExpression())
!2174 = distinct !DIGlobalVariable(name: "scope_labelno", scope: !2, file: !3, line: 238, type: !1136, isLocal: true, isDefinition: true)
!2175 = !DIGlobalVariableExpression(var: !2176, expr: !DIExpression())
!2176 = distinct !DIGlobalVariable(name: "dbxout_source_line_counter", scope: !2, file: !3, line: 242, type: !1136, isLocal: true, isDefinition: true)
!2177 = !DIGlobalVariableExpression(var: !2178, expr: !DIExpression())
!2178 = distinct !DIGlobalVariable(name: "lastfile", scope: !2, file: !3, line: 251, type: !1242, isLocal: true, isDefinition: true)
!2179 = !DIGlobalVariableExpression(var: !2180, expr: !DIExpression())
!2180 = distinct !DIGlobalVariable(name: "lastfile_is_base", scope: !2, file: !3, line: 255, type: !1136, isLocal: true, isDefinition: true)
!2181 = !DIGlobalVariableExpression(var: !2182, expr: !DIExpression())
!2182 = distinct !DIGlobalVariable(name: "stabstr_ob", scope: !2, file: !3, line: 299, type: !1298, isLocal: true, isDefinition: true)
!2183 = !DIGlobalVariableExpression(var: !2184, expr: !DIExpression())
!2184 = distinct !DIGlobalVariable(name: "cwd", scope: !2185, file: !3, line: 1021, type: !1242, isLocal: true, isDefinition: true)
!2185 = distinct !DISubprogram(name: "dbxout_init", scope: !3, file: !3, line: 999, type: !2186, scopeLine: 1000, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2186 = !DISubroutineType(types: !2187)
!2187 = !{null, !1242}
!2188 = !{}
!2189 = !DIGlobalVariableExpression(var: !2190, expr: !DIExpression())
!2190 = distinct !DIGlobalVariable(name: "base_input_file", scope: !2, file: !3, line: 268, type: !1242, isLocal: true, isDefinition: true)
!2191 = !DIGlobalVariableExpression(var: !2192, expr: !DIExpression())
!2192 = distinct !DIGlobalVariable(name: "current_file", scope: !2, file: !3, line: 229, type: !2125, isLocal: true, isDefinition: true)
!2193 = !DIGlobalVariableExpression(var: !2194, expr: !DIExpression())
!2194 = distinct !DIGlobalVariable(name: "pending_bincls", scope: !2, file: !3, line: 264, type: !1136, isLocal: true, isDefinition: true)
!2195 = !DIGlobalVariableExpression(var: !2196, expr: !DIExpression())
!2196 = distinct !DIGlobalVariable(name: "stabstr_last_contin_point", scope: !2, file: !3, line: 300, type: !1641, isLocal: true, isDefinition: true)
!2197 = !DIGlobalVariableExpression(var: !2198, expr: !DIExpression())
!2198 = distinct !DIGlobalVariable(name: "anonymous_type_number", scope: !2199, file: !3, line: 1673, type: !1136, isLocal: true, isDefinition: true)
!2199 = distinct !DISubprogram(name: "dbxout_type", scope: !3, file: !3, line: 1671, type: !2200, scopeLine: 1672, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2200 = !DISubroutineType(types: !2201)
!2201 = !{null, !1040, !1136}
!2202 = !DIGlobalVariableExpression(var: !2203, expr: !DIExpression())
!2203 = distinct !DIGlobalVariable(name: "source_label_number", scope: !2, file: !3, line: 247, type: !1136, isLocal: true, isDefinition: true)
!2204 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2205)
!2205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gcc_debug_hooks", file: !2206, line: 25, size: 2048, elements: !2207)
!2206 = !DIFile(filename: "./debug.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2207 = !{!2208, !2210, !2211, !2215, !2219, !2220, !2221, !2225, !2229, !2230, !2237, !2241, !2242, !2243, !2244, !2248, !2249, !2250, !2251, !2253, !2257, !2258, !2259, !2263, !2264, !2265, !2266, !2267, !2268, !2272, !2276, !2280}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !2205, file: !2206, line: 29, baseType: !2209, size: 64)
!2209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2186, size: 64)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "finish", scope: !2205, file: !2206, line: 32, baseType: !2209, size: 64, offset: 64)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "assembly_start", scope: !2205, file: !2206, line: 36, baseType: !2212, size: 64, offset: 128)
!2212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2213, size: 64)
!2213 = !DISubroutineType(types: !2214)
!2214 = !{null}
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "define", scope: !2205, file: !2206, line: 39, baseType: !2216, size: 64, offset: 192)
!2216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2217, size: 64)
!2217 = !DISubroutineType(types: !2218)
!2218 = !{null, !7, !1242}
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "undef", scope: !2205, file: !2206, line: 42, baseType: !2216, size: 64, offset: 256)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "start_source_file", scope: !2205, file: !2206, line: 46, baseType: !2216, size: 64, offset: 320)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "end_source_file", scope: !2205, file: !2206, line: 50, baseType: !2222, size: 64, offset: 384)
!2222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2223, size: 64)
!2223 = !DISubroutineType(types: !2224)
!2224 = !{null, !7}
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "begin_block", scope: !2205, file: !2206, line: 54, baseType: !2226, size: 64, offset: 448)
!2226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2227, size: 64)
!2227 = !DISubroutineType(types: !2228)
!2228 = !{null, !7, !7}
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "end_block", scope: !2205, file: !2206, line: 57, baseType: !2226, size: 64, offset: 512)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "ignore_block", scope: !2205, file: !2206, line: 64, baseType: !2231, size: 64, offset: 576)
!2231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2232, size: 64)
!2232 = !DISubroutineType(types: !2233)
!2233 = !{!1159, !2234}
!2234 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1020, line: 59, baseType: !2235)
!2235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2236, size: 64)
!2236 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1042)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "source_line", scope: !2205, file: !2206, line: 67, baseType: !2238, size: 64, offset: 640)
!2238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2239, size: 64)
!2239 = !DISubroutineType(types: !2240)
!2240 = !{null, !7, !1242, !1136, !1159}
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "begin_prologue", scope: !2205, file: !2206, line: 72, baseType: !2216, size: 64, offset: 704)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "end_prologue", scope: !2205, file: !2206, line: 76, baseType: !2216, size: 64, offset: 768)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "end_epilogue", scope: !2205, file: !2206, line: 79, baseType: !2216, size: 64, offset: 832)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "begin_function", scope: !2205, file: !2206, line: 82, baseType: !2245, size: 64, offset: 896)
!2245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2246, size: 64)
!2246 = !DISubroutineType(types: !2247)
!2247 = !{null, !1040}
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "end_function", scope: !2205, file: !2206, line: 85, baseType: !2222, size: 64, offset: 960)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2205, file: !2206, line: 91, baseType: !2245, size: 64, offset: 1024)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "global_decl", scope: !2205, file: !2206, line: 95, baseType: !2245, size: 64, offset: 1088)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2205, file: !2206, line: 103, baseType: !2252, size: 64, offset: 1152)
!2252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2200, size: 64)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "imported_module_or_decl", scope: !2205, file: !2206, line: 106, baseType: !2254, size: 64, offset: 1216)
!2254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!2255 = !DISubroutineType(types: !2256)
!2256 = !{null, !1040, !1040, !1040, !1159}
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "deferred_inline_function", scope: !2205, file: !2206, line: 111, baseType: !2245, size: 64, offset: 1280)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "outlining_inline_function", scope: !2205, file: !2206, line: 116, baseType: !2245, size: 64, offset: 1344)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2205, file: !2206, line: 120, baseType: !2260, size: 64, offset: 1408)
!2260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2261, size: 64)
!2261 = !DISubroutineType(types: !2262)
!2262 = !{null, !1217}
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "handle_pch", scope: !2205, file: !2206, line: 124, baseType: !2222, size: 64, offset: 1472)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "var_location", scope: !2205, file: !2206, line: 127, baseType: !2260, size: 64, offset: 1536)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "switch_text_section", scope: !2205, file: !2206, line: 131, baseType: !2212, size: 64, offset: 1600)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "direct_call", scope: !2205, file: !2206, line: 136, baseType: !2245, size: 64, offset: 1664)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_call_token", scope: !2205, file: !2206, line: 144, baseType: !2252, size: 64, offset: 1728)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "copy_call_info", scope: !2205, file: !2206, line: 150, baseType: !2269, size: 64, offset: 1792)
!2269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2270 = !DISubroutineType(types: !2271)
!2271 = !{null, !1217, !1217}
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_call", scope: !2205, file: !2206, line: 156, baseType: !2273, size: 64, offset: 1856)
!2273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2274, size: 64)
!2274 = !DISubroutineType(types: !2275)
!2275 = !{null, !1136}
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "set_name", scope: !2205, file: !2206, line: 160, baseType: !2277, size: 64, offset: 1920)
!2277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2278, size: 64)
!2278 = !DISubroutineType(types: !2279)
!2279 = !{null, !1040, !1040}
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "start_end_main_source_file", scope: !2205, file: !2206, line: 164, baseType: !1136, size: 32, offset: 1984)
!2281 = !{i32 7, !"Dwarf Version", i32 4}
!2282 = !{i32 2, !"Debug Info Version", i32 3}
!2283 = !{i32 1, !"wchar_size", i32 4}
!2284 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2285 = !DILocalVariable(name: "input_file_name", arg: 1, scope: !2185, file: !3, line: 999, type: !1242)
!2286 = !DILocation(line: 999, column: 26, scope: !2185)
!2287 = !DILocalVariable(name: "ltext_label_name", scope: !2185, file: !3, line: 1001, type: !2288)
!2288 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1139, size: 800, elements: !2289)
!2289 = !{!2290}
!2290 = !DISubrange(count: 100)
!2291 = !DILocation(line: 1001, column: 8, scope: !2185)
!2292 = !DILocalVariable(name: "used_ltext_label_name", scope: !2185, file: !3, line: 1002, type: !1159)
!2293 = !DILocation(line: 1002, column: 8, scope: !2185)
!2294 = !DILocalVariable(name: "syms", scope: !2185, file: !3, line: 1003, type: !1040)
!2295 = !DILocation(line: 1003, column: 8, scope: !2185)
!2296 = !DILocation(line: 1003, column: 32, scope: !2185)
!2297 = !DILocation(line: 1003, column: 15, scope: !2185)
!2298 = !DILocalVariable(name: "mapped_name", scope: !2185, file: !3, line: 1004, type: !1242)
!2299 = !DILocation(line: 1004, column: 15, scope: !2185)
!2300 = !DILocation(line: 1006, column: 15, scope: !2185)
!2301 = !DILocation(line: 1007, column: 13, scope: !2185)
!2302 = !DILocation(line: 1007, column: 11, scope: !2185)
!2303 = !DILocation(line: 1011, column: 3, scope: !2185)
!2304 = !DILocation(line: 1016, column: 3, scope: !2185)
!2305 = !DILocation(line: 1016, column: 3, scope: !2306)
!2306 = distinct !DILexicalBlock(scope: !2185, file: !3, line: 1016, column: 3)
!2307 = !DILocation(line: 1019, column: 7, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2185, file: !3, line: 1019, column: 7)
!2309 = !DILocation(line: 1019, column: 7, scope: !2185)
!2310 = !DILocation(line: 1023, column: 12, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2312, file: !3, line: 1023, column: 11)
!2312 = distinct !DILexicalBlock(scope: !2308, file: !3, line: 1020, column: 5)
!2313 = !DILocation(line: 1023, column: 11, scope: !2312)
!2314 = !DILocation(line: 1025, column: 10, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2311, file: !3, line: 1024, column: 2)
!2316 = !DILocation(line: 1025, column: 8, scope: !2315)
!2317 = !DILocation(line: 1026, column: 8, scope: !2318)
!2318 = distinct !DILexicalBlock(scope: !2315, file: !3, line: 1026, column: 8)
!2319 = !DILocation(line: 1026, column: 15, scope: !2318)
!2320 = !DILocation(line: 1026, column: 8, scope: !2315)
!2321 = !DILocation(line: 1027, column: 10, scope: !2318)
!2322 = !DILocation(line: 1027, column: 6, scope: !2318)
!2323 = !DILocation(line: 1028, column: 14, scope: !2324)
!2324 = distinct !DILexicalBlock(scope: !2318, file: !3, line: 1028, column: 13)
!2325 = !DILocation(line: 1028, column: 13, scope: !2318)
!2326 = !DILocation(line: 1029, column: 20, scope: !2324)
!2327 = !DILocation(line: 1029, column: 12, scope: !2324)
!2328 = !DILocation(line: 1029, column: 10, scope: !2324)
!2329 = !DILocation(line: 1029, column: 6, scope: !2324)
!2330 = !DILocation(line: 1030, column: 32, scope: !2315)
!2331 = !DILocation(line: 1030, column: 10, scope: !2315)
!2332 = !DILocation(line: 1030, column: 8, scope: !2315)
!2333 = !DILocation(line: 1031, column: 2, scope: !2315)
!2334 = !DILocation(line: 1035, column: 39, scope: !2312)
!2335 = !DILocation(line: 1035, column: 50, scope: !2312)
!2336 = !DILocation(line: 1035, column: 7, scope: !2312)
!2337 = !DILocation(line: 1036, column: 32, scope: !2312)
!2338 = !DILocation(line: 1036, column: 7, scope: !2312)
!2339 = !DILocation(line: 1037, column: 29, scope: !2312)
!2340 = !DILocation(line: 1039, column: 5, scope: !2312)
!2341 = !DILocation(line: 1041, column: 39, scope: !2185)
!2342 = !DILocation(line: 1041, column: 17, scope: !2185)
!2343 = !DILocation(line: 1041, column: 15, scope: !2185)
!2344 = !DILocation(line: 1045, column: 35, scope: !2185)
!2345 = !DILocation(line: 1045, column: 54, scope: !2185)
!2346 = !DILocation(line: 1045, column: 3, scope: !2185)
!2347 = !DILocation(line: 1046, column: 28, scope: !2185)
!2348 = !DILocation(line: 1046, column: 3, scope: !2185)
!2349 = !DILocation(line: 1047, column: 25, scope: !2185)
!2350 = !DILocation(line: 1050, column: 7, scope: !2351)
!2351 = distinct !DILexicalBlock(scope: !2185, file: !3, line: 1050, column: 7)
!2352 = !DILocation(line: 1050, column: 7, scope: !2185)
!2353 = !DILocation(line: 1052, column: 26, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !2351, file: !3, line: 1051, column: 5)
!2355 = !DILocation(line: 1052, column: 7, scope: !2354)
!2356 = !DILocation(line: 1053, column: 23, scope: !2354)
!2357 = !DILocation(line: 1053, column: 39, scope: !2354)
!2358 = !DILocation(line: 1053, column: 7, scope: !2354)
!2359 = !DILocation(line: 1054, column: 5, scope: !2354)
!2360 = !DILocation(line: 1059, column: 3, scope: !2185)
!2361 = !DILocation(line: 1060, column: 3, scope: !2185)
!2362 = !DILocation(line: 1063, column: 32, scope: !2185)
!2363 = !DILocation(line: 1063, column: 30, scope: !2185)
!2364 = !DILocation(line: 1063, column: 19, scope: !2185)
!2365 = !DILocation(line: 1065, column: 20, scope: !2185)
!2366 = !DILocation(line: 1068, column: 18, scope: !2185)
!2367 = !DILocation(line: 1068, column: 16, scope: !2185)
!2368 = !DILocation(line: 1069, column: 3, scope: !2185)
!2369 = !DILocation(line: 1069, column: 17, scope: !2185)
!2370 = !DILocation(line: 1069, column: 22, scope: !2185)
!2371 = !DILocation(line: 1070, column: 3, scope: !2185)
!2372 = !DILocation(line: 1070, column: 17, scope: !2185)
!2373 = !DILocation(line: 1070, column: 29, scope: !2185)
!2374 = !DILocation(line: 1071, column: 3, scope: !2185)
!2375 = !DILocation(line: 1071, column: 17, scope: !2185)
!2376 = !DILocation(line: 1071, column: 34, scope: !2185)
!2377 = !DILocation(line: 1072, column: 20, scope: !2185)
!2378 = !DILocation(line: 1073, column: 3, scope: !2185)
!2379 = !DILocation(line: 1073, column: 17, scope: !2185)
!2380 = !DILocation(line: 1073, column: 22, scope: !2185)
!2381 = !DILocation(line: 1074, column: 3, scope: !2185)
!2382 = !DILocation(line: 1074, column: 17, scope: !2185)
!2383 = !DILocation(line: 1074, column: 30, scope: !2185)
!2384 = !DILocation(line: 1075, column: 3, scope: !2185)
!2385 = !DILocation(line: 1075, column: 17, scope: !2185)
!2386 = !DILocation(line: 1075, column: 36, scope: !2185)
!2387 = !DILocation(line: 1083, column: 20, scope: !2185)
!2388 = !DILocation(line: 1083, column: 3, scope: !2185)
!2389 = !DILocation(line: 1085, column: 7, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2185, file: !3, line: 1085, column: 7)
!2391 = !DILocation(line: 1085, column: 7, scope: !2185)
!2392 = !DILocalVariable(name: "t", scope: !2393, file: !3, line: 1087, type: !1040)
!2393 = distinct !DILexicalBlock(scope: !2390, file: !3, line: 1086, column: 5)
!2394 = !DILocation(line: 1087, column: 12, scope: !2393)
!2395 = !DILocation(line: 1088, column: 26, scope: !2396)
!2396 = distinct !DILexicalBlock(scope: !2393, file: !3, line: 1088, column: 7)
!2397 = !DILocation(line: 1088, column: 16, scope: !2396)
!2398 = !DILocation(line: 1088, column: 14, scope: !2396)
!2399 = !DILocation(line: 1088, column: 12, scope: !2396)
!2400 = !DILocation(line: 1088, column: 44, scope: !2401)
!2401 = distinct !DILexicalBlock(scope: !2396, file: !3, line: 1088, column: 7)
!2402 = !DILocation(line: 1088, column: 7, scope: !2396)
!2403 = !DILocation(line: 1089, column: 17, scope: !2401)
!2404 = !DILocation(line: 1089, column: 2, scope: !2401)
!2405 = !DILocation(line: 1088, column: 51, scope: !2401)
!2406 = !DILocation(line: 1088, column: 49, scope: !2401)
!2407 = !DILocation(line: 1088, column: 7, scope: !2401)
!2408 = distinct !{!2408, !2402, !2409}
!2409 = !DILocation(line: 1089, column: 34, scope: !2396)
!2410 = !DILocation(line: 1090, column: 23, scope: !2393)
!2411 = !DILocation(line: 1091, column: 5, scope: !2393)
!2412 = !DILocation(line: 1092, column: 1, scope: !2185)
!2413 = distinct !DISubprogram(name: "dbxout_finish", scope: !3, file: !3, line: 1374, type: !2186, scopeLine: 1375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2414 = !DILocalVariable(name: "filename", arg: 1, scope: !2413, file: !3, line: 1374, type: !1242)
!2415 = !DILocation(line: 1374, column: 28, scope: !2413)
!2416 = !DILocation(line: 1380, column: 23, scope: !2417)
!2417 = distinct !DILexicalBlock(scope: !2413, file: !3, line: 1379, column: 2)
!2418 = !DILocation(line: 1380, column: 4, scope: !2417)
!2419 = !DILocation(line: 1381, column: 4, scope: !2417)
!2420 = !DILocation(line: 1382, column: 4, scope: !2417)
!2421 = !DILocation(line: 1385, column: 3, scope: !2413)
!2422 = !DILocation(line: 1386, column: 1, scope: !2413)
!2423 = distinct !DISubprogram(name: "dbxout_start_source_file", scope: !3, file: !3, line: 1173, type: !2217, scopeLine: 1175, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2424 = !DILocalVariable(name: "line", arg: 1, scope: !2423, file: !3, line: 1173, type: !7)
!2425 = !DILocation(line: 1173, column: 40, scope: !2423)
!2426 = !DILocalVariable(name: "filename", arg: 2, scope: !2423, file: !3, line: 1174, type: !1242)
!2427 = !DILocation(line: 1174, column: 18, scope: !2423)
!2428 = !DILocalVariable(name: "n", scope: !2423, file: !3, line: 1177, type: !2125)
!2429 = !DILocation(line: 1177, column: 20, scope: !2423)
!2430 = !DILocation(line: 1177, column: 24, scope: !2423)
!2431 = !DILocation(line: 1179, column: 13, scope: !2423)
!2432 = !DILocation(line: 1179, column: 3, scope: !2423)
!2433 = !DILocation(line: 1179, column: 6, scope: !2423)
!2434 = !DILocation(line: 1179, column: 11, scope: !2423)
!2435 = !DILocation(line: 1180, column: 3, scope: !2423)
!2436 = !DILocation(line: 1180, column: 6, scope: !2423)
!2437 = !DILocation(line: 1180, column: 23, scope: !2423)
!2438 = !DILocation(line: 1183, column: 3, scope: !2423)
!2439 = !DILocation(line: 1183, column: 6, scope: !2423)
!2440 = !DILocation(line: 1183, column: 18, scope: !2423)
!2441 = !DILocation(line: 1184, column: 3, scope: !2423)
!2442 = !DILocation(line: 1184, column: 6, scope: !2423)
!2443 = !DILocation(line: 1184, column: 11, scope: !2423)
!2444 = !DILocation(line: 1185, column: 24, scope: !2423)
!2445 = !DILocation(line: 1185, column: 3, scope: !2423)
!2446 = !DILocation(line: 1185, column: 17, scope: !2423)
!2447 = !DILocation(line: 1185, column: 22, scope: !2423)
!2448 = !DILocation(line: 1186, column: 3, scope: !2423)
!2449 = !DILocation(line: 1186, column: 6, scope: !2423)
!2450 = !DILocation(line: 1186, column: 19, scope: !2423)
!2451 = !DILocation(line: 1187, column: 49, scope: !2423)
!2452 = !DILocation(line: 1187, column: 27, scope: !2423)
!2453 = !DILocation(line: 1187, column: 3, scope: !2423)
!2454 = !DILocation(line: 1187, column: 6, scope: !2423)
!2455 = !DILocation(line: 1187, column: 25, scope: !2423)
!2456 = !DILocation(line: 1188, column: 18, scope: !2423)
!2457 = !DILocation(line: 1189, column: 18, scope: !2423)
!2458 = !DILocation(line: 1189, column: 16, scope: !2423)
!2459 = !DILocation(line: 1191, column: 1, scope: !2423)
!2460 = distinct !DISubprogram(name: "dbxout_end_source_file", scope: !3, file: !3, line: 1196, type: !2223, scopeLine: 1197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2461 = !DILocalVariable(name: "line", arg: 1, scope: !2460, file: !3, line: 1196, type: !7)
!2462 = !DILocation(line: 1196, column: 38, scope: !2460)
!2463 = !DILocation(line: 1200, column: 7, scope: !2464)
!2464 = distinct !DILexicalBlock(scope: !2460, file: !3, line: 1200, column: 7)
!2465 = !DILocation(line: 1200, column: 21, scope: !2464)
!2466 = !DILocation(line: 1200, column: 34, scope: !2464)
!2467 = !DILocation(line: 1200, column: 7, scope: !2460)
!2468 = !DILocation(line: 1202, column: 7, scope: !2469)
!2469 = distinct !DILexicalBlock(scope: !2464, file: !3, line: 1201, column: 5)
!2470 = !DILocation(line: 1203, column: 7, scope: !2469)
!2471 = !DILocation(line: 1204, column: 5, scope: !2469)
!2472 = !DILocation(line: 1205, column: 3, scope: !2460)
!2473 = !DILocation(line: 1205, column: 17, scope: !2460)
!2474 = !DILocation(line: 1205, column: 30, scope: !2460)
!2475 = !DILocation(line: 1206, column: 18, scope: !2460)
!2476 = !DILocation(line: 1206, column: 32, scope: !2460)
!2477 = !DILocation(line: 1206, column: 16, scope: !2460)
!2478 = !DILocation(line: 1208, column: 1, scope: !2460)
!2479 = distinct !DISubprogram(name: "dbxout_begin_block", scope: !3, file: !3, line: 1314, type: !2227, scopeLine: 1315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2480 = !DILocalVariable(name: "line", arg: 1, scope: !2479, file: !3, line: 1314, type: !7)
!2481 = !DILocation(line: 1314, column: 34, scope: !2479)
!2482 = !DILocalVariable(name: "n", arg: 2, scope: !2479, file: !3, line: 1314, type: !7)
!2483 = !DILocation(line: 1314, column: 70, scope: !2479)
!2484 = !DILocation(line: 1316, column: 3, scope: !2479)
!2485 = !DILocation(line: 1317, column: 19, scope: !2479)
!2486 = !DILocation(line: 1317, column: 35, scope: !2479)
!2487 = !DILocation(line: 1317, column: 56, scope: !2479)
!2488 = !DILocation(line: 1317, column: 3, scope: !2479)
!2489 = !DILocation(line: 1318, column: 1, scope: !2479)
!2490 = distinct !DISubprogram(name: "dbxout_end_block", scope: !3, file: !3, line: 1323, type: !2227, scopeLine: 1324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2491 = !DILocalVariable(name: "line", arg: 1, scope: !2490, file: !3, line: 1323, type: !7)
!2492 = !DILocation(line: 1323, column: 32, scope: !2490)
!2493 = !DILocalVariable(name: "n", arg: 2, scope: !2490, file: !3, line: 1323, type: !7)
!2494 = !DILocation(line: 1323, column: 68, scope: !2490)
!2495 = !DILocation(line: 1325, column: 3, scope: !2490)
!2496 = !DILocation(line: 1326, column: 19, scope: !2490)
!2497 = !DILocation(line: 1326, column: 35, scope: !2490)
!2498 = !DILocation(line: 1326, column: 56, scope: !2490)
!2499 = !DILocation(line: 1326, column: 3, scope: !2490)
!2500 = !DILocation(line: 1327, column: 1, scope: !2490)
!2501 = distinct !DISubprogram(name: "dbxout_source_line", scope: !3, file: !3, line: 1288, type: !2239, scopeLine: 1291, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2502 = !DILocalVariable(name: "lineno", arg: 1, scope: !2501, file: !3, line: 1288, type: !7)
!2503 = !DILocation(line: 1288, column: 34, scope: !2501)
!2504 = !DILocalVariable(name: "filename", arg: 2, scope: !2501, file: !3, line: 1288, type: !1242)
!2505 = !DILocation(line: 1288, column: 54, scope: !2501)
!2506 = !DILocalVariable(name: "discriminator", arg: 3, scope: !2501, file: !3, line: 1289, type: !1136)
!2507 = !DILocation(line: 1289, column: 25, scope: !2501)
!2508 = !DILocalVariable(name: "is_stmt", arg: 4, scope: !2501, file: !3, line: 1290, type: !1159)
!2509 = !DILocation(line: 1290, column: 26, scope: !2501)
!2510 = !DILocation(line: 1292, column: 23, scope: !2501)
!2511 = !DILocation(line: 1292, column: 3, scope: !2501)
!2512 = !DILocalVariable(name: "begin_label", scope: !2513, file: !3, line: 1299, type: !2515)
!2513 = distinct !DILexicalBlock(scope: !2514, file: !3, line: 1298, column: 5)
!2514 = distinct !DILexicalBlock(scope: !2501, file: !3, line: 1297, column: 7)
!2515 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1139, size: 160, elements: !2516)
!2516 = !{!2517}
!2517 = !DISubrange(count: 20)
!2518 = !DILocation(line: 1299, column: 12, scope: !2513)
!2519 = !DILocation(line: 1300, column: 33, scope: !2513)
!2520 = !DILocation(line: 1300, column: 7, scope: !2513)
!2521 = !DILocation(line: 1302, column: 7, scope: !2513)
!2522 = !DILocation(line: 1302, column: 7, scope: !2523)
!2523 = distinct !DILexicalBlock(scope: !2513, file: !3, line: 1302, column: 7)
!2524 = !DILocation(line: 1304, column: 11, scope: !2513)
!2525 = !DILocation(line: 1303, column: 7, scope: !2513)
!2526 = !DILocation(line: 1309, column: 1, scope: !2501)
!2527 = distinct !DISubprogram(name: "dbxout_begin_prologue", scope: !3, file: !3, line: 1266, type: !2217, scopeLine: 1267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2528 = !DILocalVariable(name: "lineno", arg: 1, scope: !2527, file: !3, line: 1266, type: !7)
!2529 = !DILocation(line: 1266, column: 37, scope: !2527)
!2530 = !DILocalVariable(name: "filename", arg: 2, scope: !2527, file: !3, line: 1266, type: !1242)
!2531 = !DILocation(line: 1266, column: 57, scope: !2527)
!2532 = !DILocation(line: 1268, column: 7, scope: !2533)
!2533 = distinct !DILexicalBlock(scope: !2527, file: !3, line: 1268, column: 7)
!2534 = !DILocation(line: 1271, column: 7, scope: !2533)
!2535 = !DILocation(line: 1271, column: 11, scope: !2533)
!2536 = !DILocation(line: 1268, column: 7, scope: !2527)
!2537 = !DILocation(line: 1272, column: 5, scope: !2533)
!2538 = !DILocation(line: 1275, column: 16, scope: !2527)
!2539 = !DILocation(line: 1277, column: 23, scope: !2527)
!2540 = !DILocation(line: 1277, column: 31, scope: !2527)
!2541 = !DILocation(line: 1277, column: 3, scope: !2527)
!2542 = !DILocation(line: 1280, column: 3, scope: !2527)
!2543 = !DILocation(line: 1281, column: 19, scope: !2527)
!2544 = !DILocation(line: 1281, column: 35, scope: !2527)
!2545 = !DILocation(line: 1281, column: 57, scope: !2527)
!2546 = !DILocation(line: 1281, column: 3, scope: !2527)
!2547 = !DILocation(line: 1282, column: 1, scope: !2527)
!2548 = distinct !DISubprogram(name: "dbxout_begin_function", scope: !3, file: !3, line: 3696, type: !2246, scopeLine: 3697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2549 = !DILocalVariable(name: "decl", arg: 1, scope: !2548, file: !3, line: 3696, type: !1040)
!2550 = !DILocation(line: 3696, column: 29, scope: !2548)
!2551 = !DILocalVariable(name: "saved_tree_used1", scope: !2548, file: !3, line: 3698, type: !1136)
!2552 = !DILocation(line: 3698, column: 7, scope: !2548)
!2553 = !DILocation(line: 3700, column: 22, scope: !2548)
!2554 = !DILocation(line: 3700, column: 20, scope: !2548)
!2555 = !DILocation(line: 3701, column: 3, scope: !2548)
!2556 = !DILocation(line: 3701, column: 20, scope: !2548)
!2557 = !DILocation(line: 3702, column: 7, scope: !2558)
!2558 = distinct !DILexicalBlock(scope: !2548, file: !3, line: 3702, column: 7)
!2559 = !DILocation(line: 3702, column: 38, scope: !2558)
!2560 = !DILocation(line: 3702, column: 7, scope: !2548)
!2561 = !DILocalVariable(name: "saved_tree_used2", scope: !2562, file: !3, line: 3704, type: !1136)
!2562 = distinct !DILexicalBlock(scope: !2558, file: !3, line: 3703, column: 5)
!2563 = !DILocation(line: 3704, column: 11, scope: !2562)
!2564 = !DILocation(line: 3704, column: 30, scope: !2562)
!2565 = !DILocation(line: 3705, column: 7, scope: !2562)
!2566 = !DILocation(line: 3705, column: 38, scope: !2562)
!2567 = !DILocation(line: 3706, column: 22, scope: !2562)
!2568 = !DILocation(line: 3706, column: 7, scope: !2562)
!2569 = !DILocation(line: 3707, column: 40, scope: !2562)
!2570 = !DILocation(line: 3707, column: 7, scope: !2562)
!2571 = !DILocation(line: 3707, column: 38, scope: !2562)
!2572 = !DILocation(line: 3708, column: 5, scope: !2562)
!2573 = !DILocation(line: 3710, column: 20, scope: !2558)
!2574 = !DILocation(line: 3710, column: 5, scope: !2558)
!2575 = !DILocation(line: 3711, column: 22, scope: !2548)
!2576 = !DILocation(line: 3711, column: 3, scope: !2548)
!2577 = !DILocation(line: 3711, column: 20, scope: !2548)
!2578 = !DILocation(line: 3713, column: 17, scope: !2548)
!2579 = !DILocation(line: 3713, column: 3, scope: !2548)
!2580 = !DILocation(line: 3714, column: 7, scope: !2581)
!2581 = distinct !DILexicalBlock(scope: !2548, file: !3, line: 3714, column: 7)
!2582 = !DILocation(line: 3714, column: 38, scope: !2581)
!2583 = !DILocation(line: 3714, column: 7, scope: !2548)
!2584 = !DILocation(line: 3715, column: 20, scope: !2581)
!2585 = !DILocation(line: 3715, column: 5, scope: !2581)
!2586 = !DILocation(line: 3716, column: 1, scope: !2548)
!2587 = distinct !DISubprogram(name: "dbxout_function_decl", scope: !3, file: !3, line: 1336, type: !2246, scopeLine: 1337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2588 = !DILocalVariable(name: "decl", arg: 1, scope: !2587, file: !3, line: 1336, type: !1040)
!2589 = !DILocation(line: 1336, column: 28, scope: !2587)
!2590 = !DILocation(line: 1338, column: 3, scope: !2587)
!2591 = !DILocation(line: 1342, column: 17, scope: !2587)
!2592 = !DILocation(line: 1342, column: 41, scope: !2587)
!2593 = !DILocation(line: 1342, column: 3, scope: !2587)
!2594 = !DILocation(line: 1343, column: 24, scope: !2587)
!2595 = !DILocation(line: 1343, column: 3, scope: !2587)
!2596 = !DILocation(line: 1344, column: 1, scope: !2587)
!2597 = distinct !DISubprogram(name: "dbxout_global_decl", scope: !3, file: !3, line: 1351, type: !2246, scopeLine: 1352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2598 = !DILocalVariable(name: "decl", arg: 1, scope: !2597, file: !3, line: 1351, type: !1040)
!2599 = !DILocation(line: 1351, column: 26, scope: !2597)
!2600 = !DILocation(line: 1353, column: 7, scope: !2601)
!2601 = distinct !DILexicalBlock(scope: !2597, file: !3, line: 1353, column: 7)
!2602 = !DILocation(line: 1353, column: 24, scope: !2601)
!2603 = !DILocation(line: 1353, column: 36, scope: !2601)
!2604 = !DILocation(line: 1353, column: 40, scope: !2601)
!2605 = !DILocation(line: 1353, column: 7, scope: !2597)
!2606 = !DILocalVariable(name: "saved_tree_used", scope: !2607, file: !3, line: 1355, type: !1136)
!2607 = distinct !DILexicalBlock(scope: !2601, file: !3, line: 1354, column: 5)
!2608 = !DILocation(line: 1355, column: 11, scope: !2607)
!2609 = !DILocation(line: 1355, column: 29, scope: !2607)
!2610 = !DILocation(line: 1356, column: 7, scope: !2607)
!2611 = !DILocation(line: 1356, column: 24, scope: !2607)
!2612 = !DILocation(line: 1357, column: 22, scope: !2607)
!2613 = !DILocation(line: 1357, column: 7, scope: !2607)
!2614 = !DILocation(line: 1358, column: 26, scope: !2607)
!2615 = !DILocation(line: 1358, column: 7, scope: !2607)
!2616 = !DILocation(line: 1358, column: 24, scope: !2607)
!2617 = !DILocation(line: 1359, column: 5, scope: !2607)
!2618 = !DILocation(line: 1360, column: 1, scope: !2597)
!2619 = distinct !DISubprogram(name: "dbxout_type_decl", scope: !3, file: !3, line: 1365, type: !2200, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2620 = !DILocalVariable(name: "decl", arg: 1, scope: !2619, file: !3, line: 1365, type: !1040)
!2621 = !DILocation(line: 1365, column: 24, scope: !2619)
!2622 = !DILocalVariable(name: "local", arg: 2, scope: !2619, file: !3, line: 1365, type: !1136)
!2623 = !DILocation(line: 1365, column: 34, scope: !2619)
!2624 = !DILocation(line: 1367, column: 18, scope: !2619)
!2625 = !DILocation(line: 1367, column: 24, scope: !2619)
!2626 = !DILocation(line: 1367, column: 3, scope: !2619)
!2627 = !DILocation(line: 1368, column: 1, scope: !2619)
!2628 = distinct !DISubprogram(name: "dbxout_handle_pch", scope: !3, file: !3, line: 1213, type: !2223, scopeLine: 1214, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2629 = !DILocalVariable(name: "at_end", arg: 1, scope: !2628, file: !3, line: 1213, type: !7)
!2630 = !DILocation(line: 1213, column: 29, scope: !2628)
!2631 = !DILocation(line: 1215, column: 9, scope: !2632)
!2632 = distinct !DILexicalBlock(scope: !2628, file: !3, line: 1215, column: 7)
!2633 = !DILocation(line: 1215, column: 7, scope: !2628)
!2634 = !DILocation(line: 1219, column: 36, scope: !2635)
!2635 = distinct !DILexicalBlock(scope: !2632, file: !3, line: 1216, column: 5)
!2636 = !DILocation(line: 1219, column: 7, scope: !2635)
!2637 = !DILocation(line: 1223, column: 16, scope: !2635)
!2638 = !DILocation(line: 1224, column: 5, scope: !2635)
!2639 = !DILocation(line: 1228, column: 7, scope: !2640)
!2640 = distinct !DILexicalBlock(scope: !2632, file: !3, line: 1226, column: 5)
!2641 = !DILocation(line: 1231, column: 26, scope: !2640)
!2642 = !DILocation(line: 1231, column: 35, scope: !2640)
!2643 = !DILocation(line: 1231, column: 24, scope: !2640)
!2644 = !DILocation(line: 1233, column: 1, scope: !2628)
!2645 = distinct !DISubprogram(name: "dbxout_int", scope: !3, file: !3, line: 437, type: !2274, scopeLine: 438, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2646 = !DILocalVariable(name: "num", arg: 1, scope: !2645, file: !3, line: 437, type: !1136)
!2647 = !DILocation(line: 437, column: 17, scope: !2645)
!2648 = !DILocalVariable(name: "buf", scope: !2645, file: !3, line: 439, type: !2649)
!2649 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1139, size: 512, elements: !2650)
!2650 = !{!2651}
!2651 = !DISubrange(count: 64)
!2652 = !DILocation(line: 439, column: 8, scope: !2645)
!2653 = !DILocalVariable(name: "p", scope: !2645, file: !3, line: 440, type: !1307)
!2654 = !DILocation(line: 440, column: 9, scope: !2645)
!2655 = !DILocation(line: 440, column: 13, scope: !2645)
!2656 = !DILocation(line: 440, column: 17, scope: !2645)
!2657 = !DILocalVariable(name: "unum", scope: !2645, file: !3, line: 441, type: !7)
!2658 = !DILocation(line: 441, column: 16, scope: !2645)
!2659 = !DILocation(line: 443, column: 7, scope: !2660)
!2660 = distinct !DILexicalBlock(scope: !2645, file: !3, line: 443, column: 7)
!2661 = !DILocation(line: 443, column: 11, scope: !2660)
!2662 = !DILocation(line: 443, column: 7, scope: !2645)
!2663 = !DILocation(line: 445, column: 18, scope: !2664)
!2664 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 444, column: 5)
!2665 = !DILocation(line: 445, column: 7, scope: !2664)
!2666 = !DILocation(line: 446, column: 7, scope: !2664)
!2667 = !DILocation(line: 448, column: 7, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2645, file: !3, line: 448, column: 7)
!2669 = !DILocation(line: 448, column: 11, scope: !2668)
!2670 = !DILocation(line: 448, column: 7, scope: !2645)
!2671 = !DILocation(line: 450, column: 18, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 449, column: 5)
!2673 = !DILocation(line: 450, column: 7, scope: !2672)
!2674 = !DILocation(line: 451, column: 15, scope: !2672)
!2675 = !DILocation(line: 451, column: 14, scope: !2672)
!2676 = !DILocation(line: 451, column: 12, scope: !2672)
!2677 = !DILocation(line: 452, column: 5, scope: !2672)
!2678 = !DILocation(line: 454, column: 12, scope: !2668)
!2679 = !DILocation(line: 454, column: 10, scope: !2668)
!2680 = !DILocation(line: 456, column: 3, scope: !2645)
!2681 = !DILocalVariable(name: "digit", scope: !2682, file: !3, line: 456, type: !1136)
!2682 = distinct !DILexicalBlock(scope: !2645, file: !3, line: 456, column: 3)
!2683 = !DILocation(line: 456, column: 3, scope: !2682)
!2684 = distinct !{!2684, !2680, !2680}
!2685 = !DILocation(line: 458, column: 3, scope: !2645)
!2686 = !DILocation(line: 458, column: 10, scope: !2645)
!2687 = !DILocation(line: 458, column: 14, scope: !2645)
!2688 = !DILocation(line: 458, column: 18, scope: !2645)
!2689 = !DILocation(line: 458, column: 12, scope: !2645)
!2690 = !DILocation(line: 460, column: 14, scope: !2691)
!2691 = distinct !DILexicalBlock(scope: !2645, file: !3, line: 459, column: 5)
!2692 = !DILocation(line: 460, column: 13, scope: !2691)
!2693 = !DILocation(line: 460, column: 17, scope: !2691)
!2694 = !DILocation(line: 460, column: 7, scope: !2691)
!2695 = !DILocation(line: 461, column: 8, scope: !2691)
!2696 = distinct !{!2696, !2685, !2697}
!2697 = !DILocation(line: 462, column: 5, scope: !2645)
!2698 = !DILocation(line: 463, column: 1, scope: !2645)
!2699 = distinct !DISubprogram(name: "dbxout_stab_value_zero", scope: !3, file: !3, line: 478, type: !2213, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2700 = !DILocation(line: 480, column: 17, scope: !2699)
!2701 = !DILocation(line: 480, column: 3, scope: !2699)
!2702 = !DILocation(line: 481, column: 1, scope: !2699)
!2703 = distinct !DISubprogram(name: "dbxout_stab_value_label", scope: !3, file: !3, line: 485, type: !2186, scopeLine: 486, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2704 = !DILocalVariable(name: "label", arg: 1, scope: !2703, file: !3, line: 485, type: !1242)
!2705 = !DILocation(line: 485, column: 38, scope: !2703)
!2706 = !DILocation(line: 487, column: 18, scope: !2703)
!2707 = !DILocation(line: 487, column: 32, scope: !2703)
!2708 = !DILocation(line: 487, column: 3, scope: !2703)
!2709 = !DILocation(line: 488, column: 15, scope: !2703)
!2710 = !DILocation(line: 488, column: 3, scope: !2703)
!2711 = !DILocation(line: 489, column: 1, scope: !2703)
!2712 = distinct !DISubprogram(name: "dbxout_stab_value_label_diff", scope: !3, file: !3, line: 494, type: !2713, scopeLine: 495, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2713 = !DISubroutineType(types: !2714)
!2714 = !{null, !1242, !1242}
!2715 = !DILocalVariable(name: "label", arg: 1, scope: !2712, file: !3, line: 494, type: !1242)
!2716 = !DILocation(line: 494, column: 43, scope: !2712)
!2717 = !DILocalVariable(name: "base", arg: 2, scope: !2712, file: !3, line: 494, type: !1242)
!2718 = !DILocation(line: 494, column: 62, scope: !2712)
!2719 = !DILocation(line: 496, column: 18, scope: !2712)
!2720 = !DILocation(line: 496, column: 32, scope: !2712)
!2721 = !DILocation(line: 496, column: 3, scope: !2712)
!2722 = !DILocation(line: 497, column: 14, scope: !2712)
!2723 = !DILocation(line: 497, column: 3, scope: !2712)
!2724 = !DILocation(line: 498, column: 18, scope: !2712)
!2725 = !DILocation(line: 498, column: 32, scope: !2712)
!2726 = !DILocation(line: 498, column: 3, scope: !2712)
!2727 = !DILocation(line: 499, column: 15, scope: !2712)
!2728 = !DILocation(line: 499, column: 3, scope: !2712)
!2729 = !DILocation(line: 500, column: 1, scope: !2712)
!2730 = distinct !DISubprogram(name: "dbxout_stab_value_internal_label", scope: !3, file: !3, line: 508, type: !2731, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2731 = !DISubroutineType(types: !2732)
!2732 = !{null, !1242, !2733}
!2733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1136, size: 64)
!2734 = !DILocalVariable(name: "stem", arg: 1, scope: !2730, file: !3, line: 508, type: !1242)
!2735 = !DILocation(line: 508, column: 47, scope: !2730)
!2736 = !DILocalVariable(name: "counterp", arg: 2, scope: !2730, file: !3, line: 508, type: !2733)
!2737 = !DILocation(line: 508, column: 58, scope: !2730)
!2738 = !DILocalVariable(name: "label", scope: !2730, file: !3, line: 510, type: !2288)
!2739 = !DILocation(line: 510, column: 8, scope: !2730)
!2740 = !DILocalVariable(name: "counter", scope: !2730, file: !3, line: 511, type: !1136)
!2741 = !DILocation(line: 511, column: 7, scope: !2730)
!2742 = !DILocation(line: 511, column: 17, scope: !2730)
!2743 = !DILocation(line: 511, column: 30, scope: !2730)
!2744 = !DILocation(line: 511, column: 39, scope: !2730)
!2745 = !DILocation(line: 513, column: 3, scope: !2730)
!2746 = !DILocation(line: 513, column: 3, scope: !2747)
!2747 = distinct !DILexicalBlock(scope: !2730, file: !3, line: 513, column: 3)
!2748 = !DILocation(line: 514, column: 28, scope: !2730)
!2749 = !DILocation(line: 514, column: 3, scope: !2730)
!2750 = !DILocation(line: 515, column: 19, scope: !2730)
!2751 = !DILocation(line: 515, column: 35, scope: !2730)
!2752 = !DILocation(line: 515, column: 49, scope: !2730)
!2753 = !DILocation(line: 515, column: 55, scope: !2730)
!2754 = !DILocation(line: 515, column: 3, scope: !2730)
!2755 = !DILocation(line: 516, column: 1, scope: !2730)
!2756 = distinct !DISubprogram(name: "dbxout_stab_value_internal_label_diff", scope: !3, file: !3, line: 522, type: !2757, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2757 = !DISubroutineType(types: !2758)
!2758 = !{null, !1242, !2733, !1242}
!2759 = !DILocalVariable(name: "stem", arg: 1, scope: !2756, file: !3, line: 522, type: !1242)
!2760 = !DILocation(line: 522, column: 52, scope: !2756)
!2761 = !DILocalVariable(name: "counterp", arg: 2, scope: !2756, file: !3, line: 522, type: !2733)
!2762 = !DILocation(line: 522, column: 63, scope: !2756)
!2763 = !DILocalVariable(name: "base", arg: 3, scope: !2756, file: !3, line: 523, type: !1242)
!2764 = !DILocation(line: 523, column: 24, scope: !2756)
!2765 = !DILocalVariable(name: "label", scope: !2756, file: !3, line: 525, type: !2288)
!2766 = !DILocation(line: 525, column: 8, scope: !2756)
!2767 = !DILocalVariable(name: "counter", scope: !2756, file: !3, line: 526, type: !1136)
!2768 = !DILocation(line: 526, column: 7, scope: !2756)
!2769 = !DILocation(line: 526, column: 17, scope: !2756)
!2770 = !DILocation(line: 526, column: 30, scope: !2756)
!2771 = !DILocation(line: 526, column: 39, scope: !2756)
!2772 = !DILocation(line: 528, column: 3, scope: !2756)
!2773 = !DILocation(line: 528, column: 3, scope: !2774)
!2774 = distinct !DILexicalBlock(scope: !2756, file: !3, line: 528, column: 3)
!2775 = !DILocation(line: 529, column: 33, scope: !2756)
!2776 = !DILocation(line: 529, column: 40, scope: !2756)
!2777 = !DILocation(line: 529, column: 3, scope: !2756)
!2778 = !DILocation(line: 530, column: 19, scope: !2756)
!2779 = !DILocation(line: 530, column: 35, scope: !2756)
!2780 = !DILocation(line: 530, column: 49, scope: !2756)
!2781 = !DILocation(line: 530, column: 55, scope: !2756)
!2782 = !DILocation(line: 530, column: 3, scope: !2756)
!2783 = !DILocation(line: 531, column: 1, scope: !2756)
!2784 = distinct !DISubprogram(name: "dbxout_stabd", scope: !3, file: !3, line: 537, type: !2785, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2785 = !DISubroutineType(types: !2786)
!2786 = !{null, !1136, !1136}
!2787 = !DILocalVariable(name: "stype", arg: 1, scope: !2784, file: !3, line: 537, type: !1136)
!2788 = !DILocation(line: 537, column: 19, scope: !2784)
!2789 = !DILocalVariable(name: "sdesc", arg: 2, scope: !2784, file: !3, line: 537, type: !1136)
!2790 = !DILocation(line: 537, column: 30, scope: !2784)
!2791 = !DILocation(line: 539, column: 24, scope: !2784)
!2792 = !DILocation(line: 539, column: 3, scope: !2784)
!2793 = !DILocation(line: 540, column: 15, scope: !2784)
!2794 = !DILocation(line: 540, column: 3, scope: !2784)
!2795 = !DILocation(line: 541, column: 17, scope: !2784)
!2796 = !DILocation(line: 541, column: 3, scope: !2784)
!2797 = !DILocation(line: 542, column: 15, scope: !2784)
!2798 = !DILocation(line: 542, column: 3, scope: !2784)
!2799 = !DILocation(line: 543, column: 15, scope: !2784)
!2800 = !DILocation(line: 543, column: 3, scope: !2784)
!2801 = !DILocation(line: 544, column: 1, scope: !2784)
!2802 = distinct !DISubprogram(name: "dbxout_begin_stabn", scope: !3, file: !3, line: 552, type: !2274, scopeLine: 553, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2803 = !DILocalVariable(name: "stype", arg: 1, scope: !2802, file: !3, line: 552, type: !1136)
!2804 = !DILocation(line: 552, column: 25, scope: !2802)
!2805 = !DILocation(line: 554, column: 24, scope: !2802)
!2806 = !DILocation(line: 554, column: 3, scope: !2802)
!2807 = !DILocation(line: 555, column: 15, scope: !2802)
!2808 = !DILocation(line: 555, column: 3, scope: !2802)
!2809 = !DILocation(line: 556, column: 19, scope: !2802)
!2810 = !DILocation(line: 556, column: 3, scope: !2802)
!2811 = !DILocation(line: 557, column: 1, scope: !2802)
!2812 = distinct !DISubprogram(name: "dbxout_begin_stabn_sline", scope: !3, file: !3, line: 562, type: !2274, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2813 = !DILocalVariable(name: "lineno", arg: 1, scope: !2812, file: !3, line: 562, type: !1136)
!2814 = !DILocation(line: 562, column: 31, scope: !2812)
!2815 = !DILocation(line: 564, column: 24, scope: !2812)
!2816 = !DILocation(line: 564, column: 3, scope: !2812)
!2817 = !DILocation(line: 565, column: 3, scope: !2812)
!2818 = !DILocation(line: 566, column: 17, scope: !2812)
!2819 = !DILocation(line: 566, column: 3, scope: !2812)
!2820 = !DILocation(line: 567, column: 15, scope: !2812)
!2821 = !DILocation(line: 567, column: 3, scope: !2812)
!2822 = !DILocation(line: 568, column: 14, scope: !2812)
!2823 = !DILocation(line: 568, column: 3, scope: !2812)
!2824 = !DILocation(line: 569, column: 1, scope: !2812)
!2825 = distinct !DISubprogram(name: "dbxout_begin_empty_stabs", scope: !3, file: !3, line: 575, type: !2274, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2826 = !DILocalVariable(name: "stype", arg: 1, scope: !2825, file: !3, line: 575, type: !1136)
!2827 = !DILocation(line: 575, column: 31, scope: !2825)
!2828 = !DILocation(line: 577, column: 24, scope: !2825)
!2829 = !DILocation(line: 577, column: 3, scope: !2825)
!2830 = !DILocation(line: 578, column: 19, scope: !2825)
!2831 = !DILocation(line: 578, column: 3, scope: !2825)
!2832 = !DILocation(line: 579, column: 15, scope: !2825)
!2833 = !DILocation(line: 579, column: 3, scope: !2825)
!2834 = !DILocation(line: 580, column: 19, scope: !2825)
!2835 = !DILocation(line: 580, column: 3, scope: !2825)
!2836 = !DILocation(line: 581, column: 1, scope: !2825)
!2837 = distinct !DISubprogram(name: "dbxout_begin_simple_stabs", scope: !3, file: !3, line: 586, type: !2838, scopeLine: 587, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2838 = !DISubroutineType(types: !2839)
!2839 = !{null, !1242, !1136}
!2840 = !DILocalVariable(name: "str", arg: 1, scope: !2837, file: !3, line: 586, type: !1242)
!2841 = !DILocation(line: 586, column: 40, scope: !2837)
!2842 = !DILocalVariable(name: "stype", arg: 2, scope: !2837, file: !3, line: 586, type: !1136)
!2843 = !DILocation(line: 586, column: 49, scope: !2837)
!2844 = !DILocation(line: 588, column: 24, scope: !2837)
!2845 = !DILocation(line: 588, column: 3, scope: !2837)
!2846 = !DILocation(line: 589, column: 25, scope: !2837)
!2847 = !DILocation(line: 589, column: 39, scope: !2837)
!2848 = !DILocation(line: 589, column: 3, scope: !2837)
!2849 = !DILocation(line: 590, column: 14, scope: !2837)
!2850 = !DILocation(line: 590, column: 3, scope: !2837)
!2851 = !DILocation(line: 591, column: 15, scope: !2837)
!2852 = !DILocation(line: 591, column: 3, scope: !2837)
!2853 = !DILocation(line: 592, column: 19, scope: !2837)
!2854 = !DILocation(line: 592, column: 3, scope: !2837)
!2855 = !DILocation(line: 593, column: 1, scope: !2837)
!2856 = distinct !DISubprogram(name: "dbxout_begin_simple_stabs_desc", scope: !3, file: !3, line: 597, type: !2857, scopeLine: 598, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2857 = !DISubroutineType(types: !2858)
!2858 = !{null, !1242, !1136, !1136}
!2859 = !DILocalVariable(name: "str", arg: 1, scope: !2856, file: !3, line: 597, type: !1242)
!2860 = !DILocation(line: 597, column: 45, scope: !2856)
!2861 = !DILocalVariable(name: "stype", arg: 2, scope: !2856, file: !3, line: 597, type: !1136)
!2862 = !DILocation(line: 597, column: 54, scope: !2856)
!2863 = !DILocalVariable(name: "sdesc", arg: 3, scope: !2856, file: !3, line: 597, type: !1136)
!2864 = !DILocation(line: 597, column: 65, scope: !2856)
!2865 = !DILocation(line: 599, column: 24, scope: !2856)
!2866 = !DILocation(line: 599, column: 3, scope: !2856)
!2867 = !DILocation(line: 600, column: 25, scope: !2856)
!2868 = !DILocation(line: 600, column: 39, scope: !2856)
!2869 = !DILocation(line: 600, column: 3, scope: !2856)
!2870 = !DILocation(line: 601, column: 14, scope: !2856)
!2871 = !DILocation(line: 601, column: 3, scope: !2856)
!2872 = !DILocation(line: 602, column: 15, scope: !2856)
!2873 = !DILocation(line: 602, column: 3, scope: !2856)
!2874 = !DILocation(line: 603, column: 17, scope: !2856)
!2875 = !DILocation(line: 603, column: 3, scope: !2856)
!2876 = !DILocation(line: 604, column: 15, scope: !2856)
!2877 = !DILocation(line: 604, column: 3, scope: !2856)
!2878 = !DILocation(line: 605, column: 14, scope: !2856)
!2879 = !DILocation(line: 605, column: 3, scope: !2856)
!2880 = !DILocation(line: 606, column: 1, scope: !2856)
!2881 = distinct !DISubprogram(name: "dbxout_symbol", scope: !3, file: !3, line: 2520, type: !2882, scopeLine: 2521, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!2882 = !DISubroutineType(types: !2883)
!2883 = !{!1136, !1040, !1136}
!2884 = !DILocalVariable(name: "decl", arg: 1, scope: !2881, file: !3, line: 2520, type: !1040)
!2885 = !DILocation(line: 2520, column: 21, scope: !2881)
!2886 = !DILocalVariable(name: "local", arg: 2, scope: !2881, file: !3, line: 2520, type: !1136)
!2887 = !DILocation(line: 2520, column: 31, scope: !2881)
!2888 = !DILocalVariable(name: "type", scope: !2881, file: !3, line: 2522, type: !1040)
!2889 = !DILocation(line: 2522, column: 8, scope: !2881)
!2890 = !DILocation(line: 2522, column: 15, scope: !2881)
!2891 = !DILocalVariable(name: "context", scope: !2881, file: !3, line: 2523, type: !1040)
!2892 = !DILocation(line: 2523, column: 8, scope: !2881)
!2893 = !DILocalVariable(name: "result", scope: !2881, file: !3, line: 2524, type: !1136)
!2894 = !DILocation(line: 2524, column: 7, scope: !2881)
!2895 = !DILocalVariable(name: "decl_rtl", scope: !2881, file: !3, line: 2525, type: !1217)
!2896 = !DILocation(line: 2525, column: 7, scope: !2881)
!2897 = !DILocation(line: 2528, column: 3, scope: !2881)
!2898 = !DILocation(line: 2532, column: 8, scope: !2899)
!2899 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 2532, column: 7)
!2900 = !DILocation(line: 2532, column: 25, scope: !2899)
!2901 = !DILocation(line: 2532, column: 30, scope: !2899)
!2902 = !DILocation(line: 2532, column: 33, scope: !2899)
!2903 = !DILocation(line: 2532, column: 50, scope: !2899)
!2904 = !DILocation(line: 2533, column: 7, scope: !2899)
!2905 = !DILocation(line: 2533, column: 10, scope: !2899)
!2906 = !DILocation(line: 2532, column: 7, scope: !2881)
!2907 = !DILocation(line: 2534, column: 5, scope: !2899)
!2908 = !DILocation(line: 2534, column: 5, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2899, file: !3, line: 2534, column: 5)
!2910 = !DILocation(line: 2540, column: 7, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 2540, column: 7)
!2912 = !DILocation(line: 2541, column: 7, scope: !2911)
!2913 = !DILocation(line: 2541, column: 12, scope: !2911)
!2914 = !DILocation(line: 2542, column: 11, scope: !2911)
!2915 = !DILocation(line: 2542, column: 15, scope: !2911)
!2916 = !DILocation(line: 2542, column: 32, scope: !2911)
!2917 = !DILocation(line: 2542, column: 44, scope: !2911)
!2918 = !DILocation(line: 2542, column: 48, scope: !2911)
!2919 = !DILocation(line: 2540, column: 7, scope: !2881)
!2920 = !DILocation(line: 2543, column: 5, scope: !2911)
!2921 = !DILocation(line: 2543, column: 5, scope: !2922)
!2922 = distinct !DILexicalBlock(scope: !2911, file: !3, line: 2543, column: 5)
!2923 = !DILocation(line: 2546, column: 8, scope: !2924)
!2924 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 2546, column: 7)
!2925 = !DILocation(line: 2546, column: 7, scope: !2881)
!2926 = !DILocation(line: 2548, column: 25, scope: !2927)
!2927 = distinct !DILexicalBlock(scope: !2924, file: !3, line: 2547, column: 5)
!2928 = !DILocation(line: 2548, column: 23, scope: !2927)
!2929 = !DILocation(line: 2549, column: 7, scope: !2927)
!2930 = !DILocation(line: 2549, column: 7, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !2927, file: !3, line: 2549, column: 7)
!2932 = !DILocation(line: 2550, column: 5, scope: !2927)
!2933 = !DILocation(line: 2552, column: 7, scope: !2934)
!2934 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 2552, column: 7)
!2935 = !DILocation(line: 2552, column: 7, scope: !2881)
!2936 = !DILocalVariable(name: "t", scope: !2937, file: !3, line: 2554, type: !1040)
!2937 = distinct !DILexicalBlock(scope: !2934, file: !3, line: 2553, column: 5)
!2938 = !DILocation(line: 2554, column: 12, scope: !2937)
!2939 = !DILocation(line: 2566, column: 11, scope: !2937)
!2940 = !DILocation(line: 2566, column: 9, scope: !2937)
!2941 = !DILocation(line: 2567, column: 7, scope: !2937)
!2942 = !DILocation(line: 2567, column: 14, scope: !2937)
!2943 = !DILocation(line: 2568, column: 13, scope: !2937)
!2944 = !DILocation(line: 2568, column: 11, scope: !2937)
!2945 = distinct !{!2945, !2941, !2943}
!2946 = !DILocation(line: 2577, column: 11, scope: !2947)
!2947 = distinct !DILexicalBlock(scope: !2937, file: !3, line: 2577, column: 11)
!2948 = !DILocation(line: 2577, column: 25, scope: !2947)
!2949 = !DILocation(line: 2578, column: 12, scope: !2947)
!2950 = !DILocation(line: 2578, column: 15, scope: !2947)
!2951 = !DILocation(line: 2578, column: 29, scope: !2947)
!2952 = !DILocation(line: 2579, column: 12, scope: !2947)
!2953 = !DILocation(line: 2579, column: 15, scope: !2947)
!2954 = !DILocation(line: 2579, column: 29, scope: !2947)
!2955 = !DILocation(line: 2580, column: 12, scope: !2947)
!2956 = !DILocation(line: 2580, column: 15, scope: !2947)
!2957 = !DILocation(line: 2580, column: 29, scope: !2947)
!2958 = !DILocation(line: 2577, column: 11, scope: !2937)
!2959 = !DILocation(line: 2582, column: 10, scope: !2960)
!2960 = distinct !DILexicalBlock(scope: !2961, file: !3, line: 2582, column: 10)
!2961 = distinct !DILexicalBlock(scope: !2947, file: !3, line: 2581, column: 9)
!2962 = !DILocation(line: 2583, column: 3, scope: !2960)
!2963 = !DILocation(line: 2583, column: 6, scope: !2960)
!2964 = !DILocation(line: 2583, column: 28, scope: !2960)
!2965 = !DILocation(line: 2583, column: 25, scope: !2960)
!2966 = !DILocation(line: 2584, column: 3, scope: !2960)
!2967 = !DILocation(line: 2584, column: 6, scope: !2960)
!2968 = !DILocation(line: 2585, column: 3, scope: !2960)
!2969 = !DILocation(line: 2585, column: 8, scope: !2960)
!2970 = !DILocation(line: 2582, column: 10, scope: !2961)
!2971 = !DILocation(line: 2587, column: 28, scope: !2972)
!2972 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 2586, column: 6)
!2973 = !DILocation(line: 2587, column: 8, scope: !2972)
!2974 = !DILocation(line: 2588, column: 12, scope: !2975)
!2975 = distinct !DILexicalBlock(scope: !2972, file: !3, line: 2588, column: 12)
!2976 = !DILocation(line: 2589, column: 5, scope: !2975)
!2977 = !DILocation(line: 2589, column: 8, scope: !2975)
!2978 = !DILocation(line: 2589, column: 25, scope: !2975)
!2979 = !DILocation(line: 2589, column: 22, scope: !2975)
!2980 = !DILocation(line: 2590, column: 5, scope: !2975)
!2981 = !DILocation(line: 2590, column: 8, scope: !2975)
!2982 = !DILocation(line: 2590, column: 25, scope: !2975)
!2983 = !DILocation(line: 2590, column: 22, scope: !2975)
!2984 = !DILocation(line: 2591, column: 5, scope: !2975)
!2985 = !DILocation(line: 2591, column: 8, scope: !2975)
!2986 = !DILocation(line: 2588, column: 12, scope: !2972)
!2987 = !DILocation(line: 2592, column: 23, scope: !2975)
!2988 = !DILocation(line: 2592, column: 3, scope: !2975)
!2989 = !DILocation(line: 2593, column: 6, scope: !2972)
!2990 = !DILocation(line: 2594, column: 2, scope: !2961)
!2991 = !DILocation(line: 2595, column: 16, scope: !2992)
!2992 = distinct !DILexicalBlock(scope: !2947, file: !3, line: 2595, column: 16)
!2993 = !DILocation(line: 2596, column: 9, scope: !2992)
!2994 = !DILocation(line: 2596, column: 12, scope: !2992)
!2995 = !DILocation(line: 2596, column: 29, scope: !2992)
!2996 = !DILocation(line: 2596, column: 26, scope: !2992)
!2997 = !DILocation(line: 2597, column: 9, scope: !2992)
!2998 = !DILocation(line: 2597, column: 12, scope: !2992)
!2999 = !DILocation(line: 2595, column: 16, scope: !2947)
!3000 = !DILocation(line: 2598, column: 29, scope: !2992)
!3001 = !DILocation(line: 2598, column: 9, scope: !2992)
!3002 = !DILocation(line: 2599, column: 5, scope: !2937)
!3003 = !DILocation(line: 2601, column: 3, scope: !2881)
!3004 = !DILocation(line: 2603, column: 11, scope: !2881)
!3005 = !DILocation(line: 2603, column: 3, scope: !2881)
!3006 = !DILocation(line: 2607, column: 7, scope: !3007)
!3007 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 2604, column: 5)
!3008 = !DILocation(line: 2610, column: 18, scope: !3007)
!3009 = !DILocation(line: 2610, column: 16, scope: !3007)
!3010 = !DILocation(line: 2611, column: 12, scope: !3011)
!3011 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2611, column: 11)
!3012 = !DILocation(line: 2611, column: 11, scope: !3007)
!3013 = !DILocation(line: 2612, column: 2, scope: !3011)
!3014 = !DILocation(line: 2612, column: 2, scope: !3015)
!3015 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 2612, column: 2)
!3016 = !DILocation(line: 2613, column: 11, scope: !3017)
!3017 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2613, column: 11)
!3018 = !DILocation(line: 2613, column: 11, scope: !3007)
!3019 = !DILocation(line: 2614, column: 2, scope: !3017)
!3020 = !DILocation(line: 2616, column: 40, scope: !3007)
!3021 = !DILocation(line: 2616, column: 17, scope: !3007)
!3022 = !DILocation(line: 2616, column: 15, scope: !3007)
!3023 = !DILocation(line: 2617, column: 11, scope: !3024)
!3024 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2617, column: 11)
!3025 = !DILocation(line: 2617, column: 22, scope: !3024)
!3026 = !DILocation(line: 2617, column: 19, scope: !3024)
!3027 = !DILocation(line: 2617, column: 11, scope: !3007)
!3028 = !DILocation(line: 2618, column: 2, scope: !3024)
!3029 = !DILocation(line: 2620, column: 11, scope: !3030)
!3030 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2620, column: 11)
!3031 = !DILocation(line: 2620, column: 19, scope: !3030)
!3032 = !DILocation(line: 2620, column: 22, scope: !3030)
!3033 = !DILocation(line: 2620, column: 11, scope: !3007)
!3034 = !DILocation(line: 2621, column: 2, scope: !3030)
!3035 = !DILocation(line: 2622, column: 12, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2622, column: 11)
!3037 = !DILocation(line: 2623, column: 4, scope: !3036)
!3038 = !DILocation(line: 2623, column: 7, scope: !3036)
!3039 = !DILocation(line: 2623, column: 37, scope: !3036)
!3040 = !DILocation(line: 2622, column: 11, scope: !3007)
!3041 = !DILocation(line: 2624, column: 2, scope: !3036)
!3042 = !DILocation(line: 2626, column: 11, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2626, column: 11)
!3044 = !DILocation(line: 2626, column: 11, scope: !3007)
!3045 = !DILocation(line: 2627, column: 2, scope: !3043)
!3046 = !DILocation(line: 2629, column: 7, scope: !3007)
!3047 = !DILocation(line: 2630, column: 7, scope: !3007)
!3048 = !DILocation(line: 2631, column: 7, scope: !3007)
!3049 = !DILocation(line: 2632, column: 14, scope: !3007)
!3050 = !DILocation(line: 2634, column: 11, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2634, column: 11)
!3052 = !DILocation(line: 2634, column: 11, scope: !3007)
!3053 = !DILocation(line: 2635, column: 15, scope: !3051)
!3054 = !DILocation(line: 2635, column: 2, scope: !3051)
!3055 = !DILocation(line: 2637, column: 15, scope: !3051)
!3056 = !DILocation(line: 2637, column: 2, scope: !3051)
!3057 = !DILocation(line: 2642, column: 11, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2642, column: 11)
!3059 = !DILocation(line: 2642, column: 19, scope: !3058)
!3060 = !DILocation(line: 2642, column: 11, scope: !3007)
!3061 = !DILocation(line: 2644, column: 4, scope: !3062)
!3062 = distinct !DILexicalBlock(scope: !3058, file: !3, line: 2643, column: 2)
!3063 = !DILocation(line: 2645, column: 4, scope: !3062)
!3064 = !DILocation(line: 2646, column: 4, scope: !3062)
!3065 = !DILocation(line: 2647, column: 4, scope: !3062)
!3066 = !DILocation(line: 2648, column: 2, scope: !3062)
!3067 = !DILocation(line: 2650, column: 36, scope: !3007)
!3068 = !DILocation(line: 2650, column: 49, scope: !3007)
!3069 = !DILocation(line: 2650, column: 7, scope: !3007)
!3070 = !DILocation(line: 2651, column: 7, scope: !3007)
!3071 = !DILocation(line: 2656, column: 11, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2656, column: 11)
!3073 = !DILocation(line: 2656, column: 35, scope: !3072)
!3074 = !DILocation(line: 2656, column: 38, scope: !3072)
!3075 = !DILocation(line: 2656, column: 11, scope: !3007)
!3076 = !DILocation(line: 2657, column: 2, scope: !3072)
!3077 = !DILocation(line: 2657, column: 2, scope: !3078)
!3078 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 2657, column: 2)
!3079 = !DILocation(line: 2674, column: 14, scope: !3007)
!3080 = !DILocalVariable(name: "tag_needed", scope: !3081, file: !3, line: 2676, type: !1136)
!3081 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2675, column: 7)
!3082 = !DILocation(line: 2676, column: 6, scope: !3081)
!3083 = !DILocalVariable(name: "did_output", scope: !3081, file: !3, line: 2677, type: !1136)
!3084 = !DILocation(line: 2677, column: 6, scope: !3081)
!3085 = !DILocation(line: 2679, column: 6, scope: !3086)
!3086 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 2679, column: 6)
!3087 = !DILocation(line: 2679, column: 6, scope: !3081)
!3088 = !DILocation(line: 2682, column: 17, scope: !3089)
!3089 = distinct !DILexicalBlock(scope: !3086, file: !3, line: 2680, column: 4)
!3090 = !DILocation(line: 2688, column: 11, scope: !3091)
!3091 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 2688, column: 10)
!3092 = !DILocation(line: 2688, column: 28, scope: !3091)
!3093 = !DILocation(line: 2689, column: 4, scope: !3091)
!3094 = !DILocation(line: 2689, column: 7, scope: !3091)
!3095 = !DILocation(line: 2689, column: 24, scope: !3091)
!3096 = !DILocation(line: 2690, column: 4, scope: !3091)
!3097 = !DILocation(line: 2690, column: 7, scope: !3091)
!3098 = !DILocation(line: 2690, column: 24, scope: !3091)
!3099 = !DILocation(line: 2691, column: 3, scope: !3091)
!3100 = !DILocation(line: 2691, column: 6, scope: !3091)
!3101 = !DILocation(line: 2691, column: 26, scope: !3091)
!3102 = !DILocation(line: 2691, column: 23, scope: !3091)
!3103 = !DILocation(line: 2692, column: 3, scope: !3091)
!3104 = !DILocation(line: 2692, column: 7, scope: !3091)
!3105 = !DILocation(line: 2693, column: 3, scope: !3091)
!3106 = !DILocation(line: 2693, column: 7, scope: !3091)
!3107 = !DILocation(line: 2696, column: 3, scope: !3091)
!3108 = !DILocation(line: 2696, column: 6, scope: !3091)
!3109 = !DILocation(line: 2698, column: 17, scope: !3091)
!3110 = !DILocation(line: 2698, column: 20, scope: !3091)
!3111 = !DILocation(line: 2702, column: 3, scope: !3091)
!3112 = !DILocation(line: 2702, column: 21, scope: !3091)
!3113 = !DILocation(line: 2702, column: 6, scope: !3091)
!3114 = !DILocation(line: 2688, column: 10, scope: !3089)
!3115 = !DILocalVariable(name: "name", scope: !3116, file: !3, line: 2704, type: !1040)
!3116 = distinct !DILexicalBlock(scope: !3091, file: !3, line: 2703, column: 8)
!3117 = !DILocation(line: 2704, column: 8, scope: !3116)
!3118 = !DILocation(line: 2704, column: 15, scope: !3116)
!3119 = !DILocation(line: 2705, column: 7, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3116, file: !3, line: 2705, column: 7)
!3121 = !DILocation(line: 2705, column: 24, scope: !3120)
!3122 = !DILocation(line: 2705, column: 7, scope: !3116)
!3123 = !DILocation(line: 2706, column: 12, scope: !3120)
!3124 = !DILocation(line: 2706, column: 10, scope: !3120)
!3125 = !DILocation(line: 2706, column: 5, scope: !3120)
!3126 = !DILocation(line: 2708, column: 3, scope: !3116)
!3127 = !DILocation(line: 2709, column: 3, scope: !3116)
!3128 = !DILocation(line: 2710, column: 3, scope: !3116)
!3129 = !DILocation(line: 2711, column: 16, scope: !3116)
!3130 = !DILocation(line: 2711, column: 3, scope: !3116)
!3131 = !DILocation(line: 2712, column: 3, scope: !3116)
!3132 = !DILocation(line: 2714, column: 8, scope: !3116)
!3133 = !DILocation(line: 2716, column: 6, scope: !3089)
!3134 = !DILocation(line: 2719, column: 10, scope: !3135)
!3135 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 2719, column: 10)
!3136 = !DILocation(line: 2719, column: 10, scope: !3089)
!3137 = !DILocation(line: 2720, column: 38, scope: !3135)
!3138 = !DILocation(line: 2720, column: 8, scope: !3135)
!3139 = !DILocation(line: 2723, column: 6, scope: !3089)
!3140 = !DILocation(line: 2724, column: 6, scope: !3089)
!3141 = !DILocation(line: 2727, column: 11, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 2727, column: 10)
!3143 = !DILocation(line: 2727, column: 28, scope: !3142)
!3144 = !DILocation(line: 2728, column: 4, scope: !3142)
!3145 = !DILocation(line: 2728, column: 7, scope: !3142)
!3146 = !DILocation(line: 2728, column: 24, scope: !3142)
!3147 = !DILocation(line: 2729, column: 4, scope: !3142)
!3148 = !DILocation(line: 2729, column: 7, scope: !3142)
!3149 = !DILocation(line: 2729, column: 24, scope: !3142)
!3150 = !DILocation(line: 2730, column: 3, scope: !3142)
!3151 = !DILocation(line: 2730, column: 6, scope: !3142)
!3152 = !DILocation(line: 2730, column: 26, scope: !3142)
!3153 = !DILocation(line: 2730, column: 23, scope: !3142)
!3154 = !DILocation(line: 2733, column: 3, scope: !3142)
!3155 = !DILocation(line: 2733, column: 6, scope: !3142)
!3156 = !DILocation(line: 2727, column: 10, scope: !3089)
!3157 = !DILocation(line: 2735, column: 7, scope: !3158)
!3158 = distinct !DILexicalBlock(scope: !3159, file: !3, line: 2735, column: 7)
!3159 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 2734, column: 8)
!3160 = !DILocation(line: 2735, column: 7, scope: !3159)
!3161 = !DILocation(line: 2737, column: 7, scope: !3162)
!3162 = distinct !DILexicalBlock(scope: !3158, file: !3, line: 2736, column: 5)
!3163 = !DILocation(line: 2738, column: 7, scope: !3162)
!3164 = !DILocation(line: 2738, column: 43, scope: !3162)
!3165 = !DILocation(line: 2739, column: 5, scope: !3162)
!3166 = !DILocation(line: 2740, column: 8, scope: !3159)
!3167 = !DILocation(line: 2742, column: 6, scope: !3089)
!3168 = !DILocation(line: 2743, column: 19, scope: !3089)
!3169 = !DILocation(line: 2743, column: 6, scope: !3089)
!3170 = !DILocation(line: 2744, column: 35, scope: !3089)
!3171 = !DILocation(line: 2744, column: 6, scope: !3089)
!3172 = !DILocation(line: 2746, column: 17, scope: !3089)
!3173 = !DILocation(line: 2747, column: 4, scope: !3089)
!3174 = !DILocation(line: 2752, column: 6, scope: !3175)
!3175 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 2752, column: 6)
!3176 = !DILocation(line: 2752, column: 17, scope: !3175)
!3177 = !DILocation(line: 2752, column: 20, scope: !3175)
!3178 = !DILocation(line: 2752, column: 37, scope: !3175)
!3179 = !DILocation(line: 2753, column: 6, scope: !3175)
!3180 = !DILocation(line: 2753, column: 10, scope: !3175)
!3181 = !DILocation(line: 2753, column: 39, scope: !3175)
!3182 = !DILocation(line: 2754, column: 3, scope: !3175)
!3183 = !DILocation(line: 2754, column: 7, scope: !3175)
!3184 = !DILocation(line: 2754, column: 36, scope: !3175)
!3185 = !DILocation(line: 2755, column: 6, scope: !3175)
!3186 = !DILocation(line: 2755, column: 9, scope: !3175)
!3187 = !DILocation(line: 2756, column: 6, scope: !3175)
!3188 = !DILocation(line: 2756, column: 10, scope: !3175)
!3189 = !DILocation(line: 2752, column: 6, scope: !3081)
!3190 = !DILocalVariable(name: "name", scope: !3191, file: !3, line: 2763, type: !1040)
!3191 = distinct !DILexicalBlock(scope: !3175, file: !3, line: 2757, column: 4)
!3192 = !DILocation(line: 2763, column: 11, scope: !3191)
!3193 = !DILocation(line: 2763, column: 18, scope: !3191)
!3194 = !DILocation(line: 2764, column: 10, scope: !3195)
!3195 = distinct !DILexicalBlock(scope: !3191, file: !3, line: 2764, column: 10)
!3196 = !DILocation(line: 2764, column: 27, scope: !3195)
!3197 = !DILocation(line: 2764, column: 10, scope: !3191)
!3198 = !DILocation(line: 2765, column: 15, scope: !3195)
!3199 = !DILocation(line: 2765, column: 13, scope: !3195)
!3200 = !DILocation(line: 2765, column: 8, scope: !3195)
!3201 = !DILocation(line: 2767, column: 6, scope: !3191)
!3202 = !DILocation(line: 2768, column: 6, scope: !3191)
!3203 = !DILocation(line: 2769, column: 6, scope: !3191)
!3204 = !DILocation(line: 2770, column: 19, scope: !3191)
!3205 = !DILocation(line: 2770, column: 6, scope: !3191)
!3206 = !DILocation(line: 2771, column: 6, scope: !3191)
!3207 = !DILocation(line: 2772, column: 17, scope: !3191)
!3208 = !DILocation(line: 2773, column: 4, scope: !3191)
!3209 = !DILocation(line: 2779, column: 7, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 2779, column: 6)
!3211 = !DILocation(line: 2779, column: 18, scope: !3210)
!3212 = !DILocation(line: 2779, column: 21, scope: !3210)
!3213 = !DILocation(line: 2779, column: 38, scope: !3210)
!3214 = !DILocation(line: 2779, column: 6, scope: !3081)
!3215 = !DILocation(line: 2781, column: 6, scope: !3216)
!3216 = distinct !DILexicalBlock(scope: !3210, file: !3, line: 2780, column: 4)
!3217 = !DILocation(line: 2784, column: 6, scope: !3216)
!3218 = !DILocation(line: 2785, column: 19, scope: !3216)
!3219 = !DILocation(line: 2785, column: 6, scope: !3216)
!3220 = !DILocation(line: 2786, column: 6, scope: !3216)
!3221 = !DILocation(line: 2787, column: 4, scope: !3216)
!3222 = !DILocation(line: 2790, column: 2, scope: !3081)
!3223 = !DILocation(line: 2790, column: 26, scope: !3081)
!3224 = !DILocation(line: 2791, column: 2, scope: !3081)
!3225 = !DILocation(line: 2795, column: 11, scope: !3226)
!3226 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2795, column: 11)
!3227 = !DILocation(line: 2795, column: 11, scope: !3007)
!3228 = !DILocation(line: 2796, column: 9, scope: !3226)
!3229 = !DILocation(line: 2796, column: 7, scope: !3226)
!3230 = !DILocation(line: 2796, column: 2, scope: !3226)
!3231 = !DILocation(line: 2801, column: 7, scope: !3007)
!3232 = !DILocation(line: 2809, column: 11, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2809, column: 11)
!3234 = !DILocation(line: 2809, column: 11, scope: !3007)
!3235 = !DILocation(line: 2810, column: 2, scope: !3233)
!3236 = !DILocation(line: 2816, column: 11, scope: !3237)
!3237 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2816, column: 11)
!3238 = !DILocation(line: 2816, column: 30, scope: !3237)
!3239 = !DILocation(line: 2816, column: 33, scope: !3237)
!3240 = !DILocation(line: 2817, column: 4, scope: !3237)
!3241 = !DILocation(line: 2817, column: 7, scope: !3237)
!3242 = !DILocation(line: 2817, column: 27, scope: !3237)
!3243 = !DILocation(line: 2818, column: 4, scope: !3237)
!3244 = !DILocation(line: 2818, column: 22, scope: !3237)
!3245 = !DILocation(line: 2818, column: 7, scope: !3237)
!3246 = !DILocation(line: 2819, column: 4, scope: !3237)
!3247 = !DILocation(line: 2819, column: 9, scope: !3237)
!3248 = !DILocation(line: 2820, column: 4, scope: !3237)
!3249 = !DILocation(line: 2820, column: 8, scope: !3237)
!3250 = !DILocation(line: 2820, column: 28, scope: !3237)
!3251 = !DILocation(line: 2821, column: 8, scope: !3237)
!3252 = !DILocation(line: 2821, column: 11, scope: !3237)
!3253 = !DILocation(line: 2821, column: 43, scope: !3237)
!3254 = !DILocation(line: 2822, column: 8, scope: !3237)
!3255 = !DILocation(line: 2822, column: 11, scope: !3237)
!3256 = !DILocation(line: 2822, column: 43, scope: !3237)
!3257 = !DILocation(line: 2823, column: 4, scope: !3237)
!3258 = !DILocation(line: 2823, column: 7, scope: !3237)
!3259 = !DILocation(line: 2823, column: 26, scope: !3237)
!3260 = !DILocation(line: 2816, column: 11, scope: !3007)
!3261 = !DILocation(line: 2827, column: 8, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3263, file: !3, line: 2827, column: 8)
!3263 = distinct !DILexicalBlock(scope: !3237, file: !3, line: 2824, column: 2)
!3264 = !DILocation(line: 2827, column: 37, scope: !3262)
!3265 = !DILocation(line: 2828, column: 8, scope: !3262)
!3266 = !DILocation(line: 2828, column: 11, scope: !3262)
!3267 = !DILocation(line: 2828, column: 40, scope: !3262)
!3268 = !DILocation(line: 2827, column: 8, scope: !3263)
!3269 = !DILocalVariable(name: "ival", scope: !3270, file: !3, line: 2830, type: !1095)
!3270 = distinct !DILexicalBlock(scope: !3262, file: !3, line: 2829, column: 6)
!3271 = !DILocation(line: 2830, column: 22, scope: !3270)
!3272 = !DILocation(line: 2830, column: 29, scope: !3270)
!3273 = !DILocation(line: 2832, column: 8, scope: !3270)
!3274 = !DILocation(line: 2833, column: 28, scope: !3270)
!3275 = !DILocation(line: 2833, column: 8, scope: !3270)
!3276 = !DILocation(line: 2834, column: 8, scope: !3270)
!3277 = !DILocation(line: 2835, column: 19, scope: !3270)
!3278 = !DILocation(line: 2835, column: 8, scope: !3270)
!3279 = !DILocation(line: 2836, column: 8, scope: !3270)
!3280 = !DILocation(line: 2837, column: 8, scope: !3281)
!3281 = distinct !DILexicalBlock(scope: !3270, file: !3, line: 2837, column: 8)
!3282 = !DILocation(line: 2837, column: 8, scope: !3270)
!3283 = !DILocation(line: 2837, column: 8, scope: !3284)
!3284 = distinct !DILexicalBlock(scope: !3281, file: !3, line: 2837, column: 8)
!3285 = !DILocation(line: 2838, column: 8, scope: !3270)
!3286 = !DILocation(line: 2841, column: 6, scope: !3262)
!3287 = !DILocation(line: 2845, column: 38, scope: !3007)
!3288 = !DILocation(line: 2845, column: 18, scope: !3007)
!3289 = !DILocation(line: 2845, column: 16, scope: !3007)
!3290 = !DILocation(line: 2846, column: 12, scope: !3291)
!3291 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 2846, column: 11)
!3292 = !DILocation(line: 2846, column: 11, scope: !3007)
!3293 = !DILocation(line: 2847, column: 2, scope: !3291)
!3294 = !DILocation(line: 2847, column: 2, scope: !3295)
!3295 = distinct !DILexicalBlock(scope: !3291, file: !3, line: 2847, column: 2)
!3296 = !DILocation(line: 2849, column: 34, scope: !3007)
!3297 = !DILocation(line: 2849, column: 18, scope: !3007)
!3298 = !DILocation(line: 2849, column: 16, scope: !3007)
!3299 = !DILocation(line: 2855, column: 40, scope: !3007)
!3300 = !DILocation(line: 2855, column: 46, scope: !3007)
!3301 = !DILocation(line: 2855, column: 55, scope: !3007)
!3302 = !DILocation(line: 2855, column: 16, scope: !3007)
!3303 = !DILocation(line: 2855, column: 14, scope: !3007)
!3304 = !DILocation(line: 2856, column: 7, scope: !3007)
!3305 = !DILocation(line: 2859, column: 7, scope: !3007)
!3306 = !DILocation(line: 2861, column: 3, scope: !3307)
!3307 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 2861, column: 3)
!3308 = !DILocation(line: 2861, column: 3, scope: !2881)
!3309 = !DILocation(line: 2861, column: 3, scope: !3310)
!3310 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 2861, column: 3)
!3311 = !DILocation(line: 2862, column: 10, scope: !2881)
!3312 = !DILocation(line: 2862, column: 3, scope: !2881)
!3313 = !DILocation(line: 2863, column: 1, scope: !2881)
!3314 = distinct !DISubprogram(name: "emit_pending_bincls_if_required", scope: !3, file: !3, line: 1125, type: !2213, scopeLine: 1126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!3315 = !DILocation(line: 1127, column: 7, scope: !3316)
!3316 = distinct !DILexicalBlock(scope: !3314, file: !3, line: 1127, column: 7)
!3317 = !DILocation(line: 1127, column: 7, scope: !3314)
!3318 = !DILocation(line: 1128, column: 5, scope: !3316)
!3319 = !DILocation(line: 1129, column: 1, scope: !3314)
!3320 = distinct !DISubprogram(name: "output_used_types", scope: !3, file: !3, line: 2486, type: !2213, scopeLine: 2487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!3321 = !DILocation(line: 2488, column: 7, scope: !3322)
!3322 = distinct !DILexicalBlock(scope: !3320, file: !3, line: 2488, column: 7)
!3323 = !DILocation(line: 2488, column: 12, scope: !3322)
!3324 = !DILocation(line: 2488, column: 15, scope: !3322)
!3325 = !DILocation(line: 2488, column: 21, scope: !3322)
!3326 = !DILocation(line: 2488, column: 7, scope: !3320)
!3327 = !DILocalVariable(name: "types", scope: !3328, file: !3, line: 2490, type: !2134)
!3328 = distinct !DILexicalBlock(scope: !3322, file: !3, line: 2489, column: 5)
!3329 = !DILocation(line: 2490, column: 24, scope: !3328)
!3330 = !DILocalVariable(name: "i", scope: !3328, file: !3, line: 2491, type: !1136)
!3331 = !DILocation(line: 2491, column: 11, scope: !3328)
!3332 = !DILocalVariable(name: "type", scope: !3328, file: !3, line: 2492, type: !1040)
!3333 = !DILocation(line: 2492, column: 12, scope: !3328)
!3334 = !DILocation(line: 2494, column: 15, scope: !3328)
!3335 = !DILocation(line: 2494, column: 13, scope: !3328)
!3336 = !DILocation(line: 2495, column: 22, scope: !3328)
!3337 = !DILocation(line: 2495, column: 28, scope: !3328)
!3338 = !DILocation(line: 2495, column: 71, scope: !3328)
!3339 = !DILocation(line: 2495, column: 7, scope: !3328)
!3340 = !DILocation(line: 2499, column: 19, scope: !3328)
!3341 = !DILocation(line: 2499, column: 46, scope: !3328)
!3342 = !DILocation(line: 2499, column: 7, scope: !3328)
!3343 = !DILocation(line: 2506, column: 14, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3328, file: !3, line: 2506, column: 7)
!3345 = !DILocation(line: 2506, column: 12, scope: !3344)
!3346 = !DILocation(line: 2506, column: 19, scope: !3347)
!3347 = distinct !DILexicalBlock(scope: !3344, file: !3, line: 2506, column: 7)
!3348 = !DILocation(line: 2506, column: 7, scope: !3344)
!3349 = !DILocation(line: 2507, column: 22, scope: !3347)
!3350 = !DILocation(line: 2507, column: 2, scope: !3347)
!3351 = !DILocation(line: 2506, column: 56, scope: !3347)
!3352 = !DILocation(line: 2506, column: 7, scope: !3347)
!3353 = distinct !{!3353, !3348, !3354}
!3354 = !DILocation(line: 2507, column: 26, scope: !3344)
!3355 = !DILocation(line: 2509, column: 7, scope: !3328)
!3356 = !DILocation(line: 2510, column: 5, scope: !3328)
!3357 = !DILocation(line: 2511, column: 1, scope: !3320)
!3358 = distinct !DISubprogram(name: "dbxout_begin_complex_stabs", scope: !3, file: !3, line: 622, type: !2213, scopeLine: 623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!3359 = !DILocation(line: 624, column: 3, scope: !3358)
!3360 = !DILocation(line: 626, column: 24, scope: !3358)
!3361 = !DILocation(line: 626, column: 3, scope: !3358)
!3362 = !DILocation(line: 627, column: 14, scope: !3358)
!3363 = !DILocation(line: 627, column: 3, scope: !3358)
!3364 = !DILocation(line: 628, column: 3, scope: !3358)
!3365 = !DILocation(line: 629, column: 1, scope: !3358)
!3366 = !DILocalVariable(name: "type", arg: 1, scope: !2199, file: !3, line: 1671, type: !1040)
!3367 = !DILocation(line: 1671, column: 19, scope: !2199)
!3368 = !DILocalVariable(name: "full", arg: 2, scope: !2199, file: !3, line: 1671, type: !1136)
!3369 = !DILocation(line: 1671, column: 29, scope: !2199)
!3370 = !DILocalVariable(name: "vector_type", scope: !2199, file: !3, line: 1674, type: !1159)
!3371 = !DILocation(line: 1674, column: 8, scope: !2199)
!3372 = !DILocalVariable(name: "tem", scope: !2199, file: !3, line: 1675, type: !1040)
!3373 = !DILocation(line: 1675, column: 8, scope: !2199)
!3374 = !DILocalVariable(name: "main_variant", scope: !2199, file: !3, line: 1675, type: !1040)
!3375 = !DILocation(line: 1675, column: 13, scope: !2199)
!3376 = !DILocalVariable(name: "low", scope: !2199, file: !3, line: 1675, type: !1040)
!3377 = !DILocation(line: 1675, column: 27, scope: !2199)
!3378 = !DILocalVariable(name: "high", scope: !2199, file: !3, line: 1675, type: !1040)
!3379 = !DILocation(line: 1675, column: 32, scope: !2199)
!3380 = !DILocation(line: 1677, column: 7, scope: !3381)
!3381 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1677, column: 7)
!3382 = !DILocation(line: 1677, column: 24, scope: !3381)
!3383 = !DILocation(line: 1677, column: 7, scope: !2199)
!3384 = !DILocation(line: 1681, column: 14, scope: !3385)
!3385 = distinct !DILexicalBlock(scope: !3381, file: !3, line: 1678, column: 5)
!3386 = !DILocation(line: 1681, column: 12, scope: !3385)
!3387 = !DILocation(line: 1682, column: 19, scope: !3385)
!3388 = !DILocation(line: 1683, column: 5, scope: !3385)
!3389 = !DILocation(line: 1685, column: 7, scope: !3390)
!3390 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1685, column: 7)
!3391 = !DILocation(line: 1685, column: 24, scope: !3390)
!3392 = !DILocation(line: 1685, column: 7, scope: !2199)
!3393 = !DILocation(line: 1687, column: 11, scope: !3394)
!3394 = distinct !DILexicalBlock(scope: !3395, file: !3, line: 1687, column: 11)
!3395 = distinct !DILexicalBlock(scope: !3390, file: !3, line: 1686, column: 5)
!3396 = !DILocation(line: 1687, column: 28, scope: !3394)
!3397 = !DILocation(line: 1687, column: 11, scope: !3395)
!3398 = !DILocation(line: 1689, column: 10, scope: !3399)
!3399 = distinct !DILexicalBlock(scope: !3394, file: !3, line: 1688, column: 2)
!3400 = !DILocation(line: 1689, column: 8, scope: !3399)
!3401 = !DILocation(line: 1690, column: 11, scope: !3399)
!3402 = !DILocation(line: 1690, column: 9, scope: !3399)
!3403 = !DILocation(line: 1691, column: 2, scope: !3399)
!3404 = !DILocation(line: 1693, column: 43, scope: !3405)
!3405 = distinct !DILexicalBlock(scope: !3394, file: !3, line: 1693, column: 16)
!3406 = !DILocation(line: 1693, column: 16, scope: !3405)
!3407 = !DILocation(line: 1693, column: 16, scope: !3394)
!3408 = !DILocation(line: 1700, column: 11, scope: !3409)
!3409 = distinct !DILexicalBlock(scope: !3405, file: !3, line: 1699, column: 2)
!3410 = !DILocation(line: 1700, column: 9, scope: !3409)
!3411 = !DILocation(line: 1701, column: 10, scope: !3409)
!3412 = !DILocation(line: 1701, column: 8, scope: !3409)
!3413 = !DILocation(line: 1702, column: 11, scope: !3409)
!3414 = !DILocation(line: 1702, column: 9, scope: !3409)
!3415 = !DILocation(line: 1704, column: 5, scope: !3395)
!3416 = !DILocation(line: 1709, column: 7, scope: !3417)
!3417 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1709, column: 7)
!3418 = !DILocation(line: 1709, column: 15, scope: !3417)
!3419 = !DILocation(line: 1709, column: 12, scope: !3417)
!3420 = !DILocation(line: 1709, column: 7, scope: !2199)
!3421 = !DILocation(line: 1710, column: 12, scope: !3417)
!3422 = !DILocation(line: 1710, column: 10, scope: !3417)
!3423 = !DILocation(line: 1710, column: 5, scope: !3417)
!3424 = !DILocation(line: 1713, column: 11, scope: !3425)
!3425 = distinct !DILexicalBlock(scope: !3426, file: !3, line: 1713, column: 11)
!3426 = distinct !DILexicalBlock(scope: !3417, file: !3, line: 1712, column: 5)
!3427 = !DILocation(line: 1714, column: 4, scope: !3425)
!3428 = !DILocation(line: 1714, column: 7, scope: !3425)
!3429 = !DILocation(line: 1714, column: 36, scope: !3425)
!3430 = !DILocation(line: 1715, column: 4, scope: !3425)
!3431 = !DILocation(line: 1715, column: 7, scope: !3425)
!3432 = !DILocation(line: 1713, column: 11, scope: !3426)
!3433 = !DILocation(line: 1716, column: 7, scope: !3425)
!3434 = !DILocation(line: 1716, column: 2, scope: !3425)
!3435 = !DILocation(line: 1720, column: 7, scope: !3436)
!3436 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1720, column: 7)
!3437 = !DILocation(line: 1720, column: 24, scope: !3436)
!3438 = !DILocation(line: 1720, column: 27, scope: !3436)
!3439 = !DILocation(line: 1720, column: 56, scope: !3436)
!3440 = !DILocation(line: 1721, column: 7, scope: !3436)
!3441 = !DILocation(line: 1721, column: 10, scope: !3436)
!3442 = !DILocation(line: 1720, column: 7, scope: !2199)
!3443 = !DILocation(line: 1722, column: 20, scope: !3436)
!3444 = !DILocation(line: 1722, column: 18, scope: !3436)
!3445 = !DILocation(line: 1722, column: 5, scope: !3436)
!3446 = !DILocation(line: 1724, column: 20, scope: !3436)
!3447 = !DILocation(line: 1724, column: 18, scope: !3436)
!3448 = !DILocation(line: 1728, column: 8, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1728, column: 7)
!3450 = !DILocation(line: 1728, column: 7, scope: !2199)
!3451 = !DILocation(line: 1729, column: 12, scope: !3449)
!3452 = !DILocation(line: 1729, column: 10, scope: !3449)
!3453 = !DILocation(line: 1729, column: 5, scope: !3449)
!3454 = !DILocation(line: 1731, column: 7, scope: !3455)
!3455 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1731, column: 7)
!3456 = !DILocation(line: 1731, column: 34, scope: !3455)
!3457 = !DILocation(line: 1731, column: 7, scope: !2199)
!3458 = !DILocation(line: 1734, column: 52, scope: !3459)
!3459 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 1732, column: 5)
!3460 = !DILocation(line: 1734, column: 7, scope: !3459)
!3461 = !DILocation(line: 1734, column: 34, scope: !3459)
!3462 = !DILocation(line: 1738, column: 11, scope: !3463)
!3463 = distinct !DILexicalBlock(scope: !3459, file: !3, line: 1738, column: 11)
!3464 = !DILocation(line: 1738, column: 31, scope: !3463)
!3465 = !DILocation(line: 1738, column: 28, scope: !3463)
!3466 = !DILocation(line: 1738, column: 11, scope: !3459)
!3467 = !DILocation(line: 1740, column: 14, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !3463, file: !3, line: 1739, column: 2)
!3469 = !DILocation(line: 1740, column: 12, scope: !3468)
!3470 = !DILocation(line: 1741, column: 12, scope: !3468)
!3471 = !DILocation(line: 1741, column: 22, scope: !3468)
!3472 = !DILocation(line: 1741, column: 20, scope: !3468)
!3473 = !DILocation(line: 1741, column: 4, scope: !3468)
!3474 = !DILocation(line: 1741, column: 38, scope: !3468)
!3475 = !DILocation(line: 1741, column: 50, scope: !3468)
!3476 = !DILocation(line: 1742, column: 16, scope: !3468)
!3477 = !DILocation(line: 1743, column: 2, scope: !3468)
!3478 = !DILocation(line: 1746, column: 7, scope: !3459)
!3479 = !DILocation(line: 1748, column: 4, scope: !3459)
!3480 = !DILocation(line: 1748, column: 18, scope: !3459)
!3481 = !DILocation(line: 1747, column: 7, scope: !3459)
!3482 = !DILocation(line: 1747, column: 15, scope: !3459)
!3483 = !DILocation(line: 1747, column: 43, scope: !3459)
!3484 = !DILocation(line: 1748, column: 2, scope: !3459)
!3485 = !DILocation(line: 1750, column: 4, scope: !3459)
!3486 = !DILocation(line: 1750, column: 18, scope: !3459)
!3487 = !DILocation(line: 1750, column: 34, scope: !3459)
!3488 = !DILocation(line: 1749, column: 7, scope: !3459)
!3489 = !DILocation(line: 1749, column: 15, scope: !3459)
!3490 = !DILocation(line: 1749, column: 43, scope: !3459)
!3491 = !DILocation(line: 1750, column: 2, scope: !3459)
!3492 = !DILocation(line: 1752, column: 5, scope: !3459)
!3493 = !DILocation(line: 1754, column: 7, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1754, column: 7)
!3495 = !DILocation(line: 1754, column: 7, scope: !2199)
!3496 = !DILocation(line: 1756, column: 12, scope: !3497)
!3497 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 1756, column: 11)
!3498 = distinct !DILexicalBlock(scope: !3494, file: !3, line: 1755, column: 5)
!3499 = !DILocation(line: 1756, column: 29, scope: !3497)
!3500 = !DILocation(line: 1757, column: 5, scope: !3497)
!3501 = !DILocation(line: 1757, column: 8, scope: !3497)
!3502 = !DILocation(line: 1757, column: 25, scope: !3497)
!3503 = !DILocation(line: 1758, column: 5, scope: !3497)
!3504 = !DILocation(line: 1758, column: 8, scope: !3497)
!3505 = !DILocation(line: 1758, column: 25, scope: !3497)
!3506 = !DILocation(line: 1759, column: 5, scope: !3497)
!3507 = !DILocation(line: 1759, column: 8, scope: !3497)
!3508 = !DILocation(line: 1759, column: 25, scope: !3497)
!3509 = !DILocation(line: 1760, column: 4, scope: !3497)
!3510 = !DILocation(line: 1760, column: 7, scope: !3497)
!3511 = !DILocation(line: 1761, column: 4, scope: !3497)
!3512 = !DILocation(line: 1761, column: 7, scope: !3497)
!3513 = !DILocation(line: 1762, column: 4, scope: !3497)
!3514 = !DILocation(line: 1762, column: 9, scope: !3497)
!3515 = !DILocation(line: 1756, column: 11, scope: !3498)
!3516 = !DILocation(line: 1763, column: 22, scope: !3497)
!3517 = !DILocation(line: 1763, column: 2, scope: !3497)
!3518 = !DILocation(line: 1764, column: 16, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3497, file: !3, line: 1764, column: 16)
!3520 = !DILocation(line: 1765, column: 9, scope: !3519)
!3521 = !DILocation(line: 1765, column: 12, scope: !3519)
!3522 = !DILocation(line: 1765, column: 41, scope: !3519)
!3523 = !DILocation(line: 1764, column: 16, scope: !3497)
!3524 = !DILocation(line: 1766, column: 22, scope: !3519)
!3525 = !DILocation(line: 1766, column: 2, scope: !3519)
!3526 = !DILocation(line: 1767, column: 5, scope: !3498)
!3527 = !DILocation(line: 1770, column: 22, scope: !2199)
!3528 = !DILocation(line: 1770, column: 3, scope: !2199)
!3529 = !DILocation(line: 1780, column: 11, scope: !2199)
!3530 = !DILocation(line: 1780, column: 19, scope: !2199)
!3531 = !DILocation(line: 1780, column: 47, scope: !2199)
!3532 = !DILocation(line: 1780, column: 3, scope: !2199)
!3533 = !DILocation(line: 1783, column: 7, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1781, column: 5)
!3535 = !DILocation(line: 1789, column: 13, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3534, file: !3, line: 1789, column: 11)
!3537 = !DILocation(line: 1789, column: 18, scope: !3536)
!3538 = !DILocation(line: 1789, column: 22, scope: !3536)
!3539 = !DILocation(line: 1791, column: 4, scope: !3536)
!3540 = !DILocation(line: 1791, column: 24, scope: !3536)
!3541 = !DILocation(line: 1791, column: 9, scope: !3536)
!3542 = !DILocation(line: 1789, column: 11, scope: !3534)
!3543 = !DILocation(line: 1792, column: 2, scope: !3536)
!3544 = !DILocation(line: 1793, column: 7, scope: !3534)
!3545 = !DILocation(line: 1795, column: 7, scope: !3534)
!3546 = !DILocation(line: 1824, column: 3, scope: !2199)
!3547 = !DILocation(line: 1829, column: 3, scope: !2199)
!3548 = !DILocation(line: 1829, column: 11, scope: !2199)
!3549 = !DILocation(line: 1829, column: 39, scope: !2199)
!3550 = !DILocation(line: 1829, column: 46, scope: !2199)
!3551 = !DILocation(line: 1834, column: 7, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1834, column: 7)
!3553 = !DILocation(line: 1834, column: 30, scope: !3552)
!3554 = !DILocation(line: 1834, column: 28, scope: !3552)
!3555 = !DILocation(line: 1834, column: 7, scope: !2199)
!3556 = !DILocation(line: 1836, column: 7, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 1835, column: 5)
!3558 = !DILocation(line: 1837, column: 20, scope: !3557)
!3559 = !DILocation(line: 1837, column: 7, scope: !3557)
!3560 = !DILocation(line: 1838, column: 7, scope: !3557)
!3561 = !DILocation(line: 1840, column: 12, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 1840, column: 12)
!3563 = !DILocation(line: 1840, column: 35, scope: !3562)
!3564 = !DILocation(line: 1840, column: 33, scope: !3562)
!3565 = !DILocation(line: 1840, column: 12, scope: !3552)
!3566 = !DILocation(line: 1842, column: 7, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3562, file: !3, line: 1841, column: 5)
!3568 = !DILocation(line: 1843, column: 20, scope: !3567)
!3569 = !DILocation(line: 1843, column: 7, scope: !3567)
!3570 = !DILocation(line: 1844, column: 7, scope: !3567)
!3571 = !DILocation(line: 1846, column: 12, scope: !3572)
!3572 = distinct !DILexicalBlock(scope: !3562, file: !3, line: 1846, column: 12)
!3573 = !DILocation(line: 1846, column: 28, scope: !3572)
!3574 = !DILocation(line: 1846, column: 25, scope: !3572)
!3575 = !DILocation(line: 1846, column: 12, scope: !3562)
!3576 = !DILocation(line: 1848, column: 11, scope: !3577)
!3577 = distinct !DILexicalBlock(scope: !3578, file: !3, line: 1848, column: 11)
!3578 = distinct !DILexicalBlock(scope: !3572, file: !3, line: 1847, column: 5)
!3579 = !DILocation(line: 1848, column: 11, scope: !3578)
!3580 = !DILocalVariable(name: "orig_type", scope: !3581, file: !3, line: 1850, type: !1040)
!3581 = distinct !DILexicalBlock(scope: !3577, file: !3, line: 1849, column: 9)
!3582 = !DILocation(line: 1850, column: 16, scope: !3581)
!3583 = !DILocation(line: 1850, column: 28, scope: !3581)
!3584 = !DILocation(line: 1852, column: 16, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3581, file: !3, line: 1852, column: 15)
!3586 = !DILocation(line: 1852, column: 38, scope: !3585)
!3587 = !DILocation(line: 1853, column: 16, scope: !3585)
!3588 = !DILocation(line: 1853, column: 19, scope: !3585)
!3589 = !DILocation(line: 1853, column: 41, scope: !3585)
!3590 = !DILocation(line: 1854, column: 16, scope: !3585)
!3591 = !DILocation(line: 1854, column: 19, scope: !3585)
!3592 = !DILocation(line: 1854, column: 41, scope: !3585)
!3593 = !DILocation(line: 1855, column: 16, scope: !3585)
!3594 = !DILocation(line: 1855, column: 19, scope: !3585)
!3595 = !DILocation(line: 1855, column: 41, scope: !3585)
!3596 = !DILocation(line: 1856, column: 15, scope: !3585)
!3597 = !DILocation(line: 1856, column: 18, scope: !3585)
!3598 = !DILocation(line: 1857, column: 15, scope: !3585)
!3599 = !DILocation(line: 1857, column: 20, scope: !3585)
!3600 = !DILocation(line: 1852, column: 15, scope: !3581)
!3601 = !DILocation(line: 1858, column: 33, scope: !3585)
!3602 = !DILocation(line: 1858, column: 13, scope: !3585)
!3603 = !DILocation(line: 1859, column: 9, scope: !3581)
!3604 = !DILocation(line: 1861, column: 20, scope: !3578)
!3605 = !DILocation(line: 1861, column: 7, scope: !3578)
!3606 = !DILocation(line: 1862, column: 7, scope: !3578)
!3607 = !DILocation(line: 1866, column: 11, scope: !2199)
!3608 = !DILocation(line: 1866, column: 3, scope: !2199)
!3609 = !DILocation(line: 1875, column: 26, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1867, column: 5)
!3611 = !DILocation(line: 1875, column: 7, scope: !3610)
!3612 = !DILocation(line: 1876, column: 7, scope: !3610)
!3613 = !DILocation(line: 1879, column: 11, scope: !3614)
!3614 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 1879, column: 11)
!3615 = !DILocation(line: 1879, column: 19, scope: !3614)
!3616 = !DILocation(line: 1879, column: 16, scope: !3614)
!3617 = !DILocation(line: 1879, column: 34, scope: !3614)
!3618 = !DILocation(line: 1879, column: 39, scope: !3614)
!3619 = !DILocation(line: 1879, column: 11, scope: !3610)
!3620 = !DILocation(line: 1886, column: 4, scope: !3621)
!3621 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1880, column: 2)
!3622 = !DILocation(line: 1887, column: 23, scope: !3621)
!3623 = !DILocation(line: 1887, column: 4, scope: !3621)
!3624 = !DILocation(line: 1888, column: 4, scope: !3621)
!3625 = !DILocation(line: 1889, column: 2, scope: !3621)
!3626 = !DILocation(line: 1893, column: 16, scope: !3627)
!3627 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1893, column: 16)
!3628 = !DILocation(line: 1893, column: 33, scope: !3627)
!3629 = !DILocation(line: 1894, column: 9, scope: !3627)
!3630 = !DILocation(line: 1894, column: 12, scope: !3627)
!3631 = !DILocation(line: 1894, column: 41, scope: !3627)
!3632 = !DILocation(line: 1893, column: 16, scope: !3614)
!3633 = !DILocation(line: 1899, column: 8, scope: !3634)
!3634 = distinct !DILexicalBlock(scope: !3635, file: !3, line: 1899, column: 8)
!3635 = distinct !DILexicalBlock(scope: !3627, file: !3, line: 1895, column: 2)
!3636 = !DILocation(line: 1900, column: 8, scope: !3634)
!3637 = !DILocation(line: 1900, column: 11, scope: !3634)
!3638 = !DILocation(line: 1900, column: 36, scope: !3634)
!3639 = !DILocation(line: 1900, column: 33, scope: !3634)
!3640 = !DILocation(line: 1899, column: 8, scope: !3635)
!3641 = !DILocation(line: 1902, column: 8, scope: !3642)
!3642 = distinct !DILexicalBlock(scope: !3634, file: !3, line: 1901, column: 6)
!3643 = !DILocation(line: 1903, column: 19, scope: !3642)
!3644 = !DILocation(line: 1903, column: 8, scope: !3642)
!3645 = !DILocation(line: 1904, column: 8, scope: !3642)
!3646 = !DILocation(line: 1905, column: 6, scope: !3642)
!3647 = !DILocation(line: 1907, column: 23, scope: !3635)
!3648 = !DILocation(line: 1907, column: 29, scope: !3635)
!3649 = !DILocation(line: 1907, column: 34, scope: !3635)
!3650 = !DILocation(line: 1907, column: 4, scope: !3635)
!3651 = !DILocation(line: 1908, column: 2, scope: !3635)
!3652 = !DILocation(line: 1915, column: 8, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3654, file: !3, line: 1915, column: 8)
!3654 = distinct !DILexicalBlock(scope: !3627, file: !3, line: 1911, column: 2)
!3655 = !DILocation(line: 1916, column: 8, scope: !3653)
!3656 = !DILocation(line: 1916, column: 11, scope: !3653)
!3657 = !DILocation(line: 1916, column: 36, scope: !3653)
!3658 = !DILocation(line: 1916, column: 33, scope: !3653)
!3659 = !DILocation(line: 1915, column: 8, scope: !3654)
!3660 = !DILocation(line: 1918, column: 8, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3653, file: !3, line: 1917, column: 6)
!3662 = !DILocation(line: 1919, column: 19, scope: !3661)
!3663 = !DILocation(line: 1919, column: 8, scope: !3661)
!3664 = !DILocation(line: 1920, column: 8, scope: !3661)
!3665 = !DILocation(line: 1921, column: 6, scope: !3661)
!3666 = !DILocation(line: 1923, column: 41, scope: !3667)
!3667 = distinct !DILexicalBlock(scope: !3654, file: !3, line: 1923, column: 8)
!3668 = !DILocation(line: 1923, column: 47, scope: !3667)
!3669 = !DILocation(line: 1923, column: 52, scope: !3667)
!3670 = !DILocation(line: 1923, column: 8, scope: !3667)
!3671 = !DILocation(line: 1923, column: 8, scope: !3654)
!3672 = !DILocation(line: 1925, column: 8, scope: !3673)
!3673 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 1924, column: 6)
!3674 = !DILocation(line: 1932, column: 19, scope: !3675)
!3675 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 1932, column: 19)
!3676 = !DILocation(line: 1932, column: 36, scope: !3675)
!3677 = !DILocation(line: 1932, column: 19, scope: !3673)
!3678 = !DILocation(line: 1933, column: 36, scope: !3675)
!3679 = !DILocation(line: 1933, column: 17, scope: !3675)
!3680 = !DILocation(line: 1935, column: 36, scope: !3675)
!3681 = !DILocation(line: 1935, column: 17, scope: !3675)
!3682 = !DILocation(line: 1937, column: 8, scope: !3673)
!3683 = !DILocation(line: 1938, column: 19, scope: !3673)
!3684 = !DILocation(line: 1938, column: 8, scope: !3673)
!3685 = !DILocation(line: 1939, column: 8, scope: !3673)
!3686 = !DILocation(line: 1940, column: 19, scope: !3673)
!3687 = !DILocation(line: 1940, column: 8, scope: !3673)
!3688 = !DILocation(line: 1941, column: 8, scope: !3673)
!3689 = !DILocation(line: 1942, column: 6, scope: !3673)
!3690 = !DILocation(line: 1946, column: 25, scope: !3667)
!3691 = !DILocation(line: 1946, column: 31, scope: !3667)
!3692 = !DILocation(line: 1946, column: 36, scope: !3667)
!3693 = !DILocation(line: 1946, column: 6, scope: !3667)
!3694 = !DILocation(line: 1949, column: 7, scope: !3610)
!3695 = !DILocation(line: 1955, column: 7, scope: !3610)
!3696 = !DILocation(line: 1956, column: 26, scope: !3610)
!3697 = !DILocation(line: 1956, column: 7, scope: !3610)
!3698 = !DILocation(line: 1957, column: 7, scope: !3610)
!3699 = !DILocation(line: 1958, column: 37, scope: !3610)
!3700 = !DILocation(line: 1958, column: 18, scope: !3610)
!3701 = !DILocation(line: 1958, column: 7, scope: !3610)
!3702 = !DILocation(line: 1959, column: 7, scope: !3610)
!3703 = !DILocation(line: 1960, column: 7, scope: !3610)
!3704 = !DILocation(line: 1963, column: 11, scope: !3705)
!3705 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 1963, column: 11)
!3706 = !DILocation(line: 1963, column: 11, scope: !3610)
!3707 = !DILocation(line: 1965, column: 4, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3705, file: !3, line: 1964, column: 2)
!3709 = !DILocation(line: 1966, column: 50, scope: !3708)
!3710 = !DILocation(line: 1966, column: 31, scope: !3708)
!3711 = !DILocation(line: 1966, column: 29, scope: !3708)
!3712 = !DILocation(line: 1966, column: 4, scope: !3708)
!3713 = !DILocation(line: 1967, column: 4, scope: !3708)
!3714 = !DILocation(line: 1968, column: 2, scope: !3708)
!3715 = !DILocation(line: 1970, column: 2, scope: !3705)
!3716 = !DILocation(line: 1971, column: 7, scope: !3610)
!3717 = !DILocation(line: 1978, column: 11, scope: !3718)
!3718 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 1978, column: 11)
!3719 = !DILocation(line: 1978, column: 40, scope: !3718)
!3720 = !DILocation(line: 1978, column: 11, scope: !3610)
!3721 = !DILocation(line: 1980, column: 4, scope: !3722)
!3722 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 1979, column: 2)
!3723 = !DILocation(line: 1981, column: 38, scope: !3722)
!3724 = !DILocation(line: 1981, column: 19, scope: !3722)
!3725 = !DILocation(line: 1981, column: 17, scope: !3722)
!3726 = !DILocation(line: 1981, column: 4, scope: !3722)
!3727 = !DILocation(line: 1982, column: 4, scope: !3722)
!3728 = !DILocation(line: 1983, column: 2, scope: !3722)
!3729 = !DILocation(line: 1988, column: 4, scope: !3730)
!3730 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 1985, column: 2)
!3731 = !DILocation(line: 1989, column: 34, scope: !3730)
!3732 = !DILocation(line: 1989, column: 15, scope: !3730)
!3733 = !DILocation(line: 1989, column: 4, scope: !3730)
!3734 = !DILocation(line: 1991, column: 4, scope: !3730)
!3735 = !DILocation(line: 1992, column: 17, scope: !3730)
!3736 = !DILocation(line: 1992, column: 4, scope: !3730)
!3737 = !DILocation(line: 1993, column: 4, scope: !3730)
!3738 = !DILocation(line: 1994, column: 15, scope: !3730)
!3739 = !DILocation(line: 1994, column: 4, scope: !3730)
!3740 = !DILocation(line: 1996, column: 4, scope: !3730)
!3741 = !DILocation(line: 1997, column: 17, scope: !3730)
!3742 = !DILocation(line: 1997, column: 4, scope: !3730)
!3743 = !DILocation(line: 1998, column: 4, scope: !3730)
!3744 = !DILocation(line: 1999, column: 15, scope: !3730)
!3745 = !DILocation(line: 1999, column: 4, scope: !3730)
!3746 = !DILocation(line: 2000, column: 4, scope: !3730)
!3747 = !DILocation(line: 2001, column: 15, scope: !3730)
!3748 = !DILocation(line: 2001, column: 4, scope: !3730)
!3749 = !DILocation(line: 2002, column: 4, scope: !3730)
!3750 = !DILocation(line: 2004, column: 7, scope: !3610)
!3751 = !DILocation(line: 2008, column: 11, scope: !3752)
!3752 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2008, column: 11)
!3753 = !DILocation(line: 2008, column: 30, scope: !3752)
!3754 = !DILocation(line: 2008, column: 33, scope: !3752)
!3755 = !DILocation(line: 2008, column: 11, scope: !3610)
!3756 = !DILocation(line: 2010, column: 4, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !3752, file: !3, line: 2009, column: 2)
!3758 = !DILocation(line: 2011, column: 50, scope: !3757)
!3759 = !DILocation(line: 2011, column: 31, scope: !3757)
!3760 = !DILocation(line: 2011, column: 29, scope: !3757)
!3761 = !DILocation(line: 2011, column: 4, scope: !3757)
!3762 = !DILocation(line: 2012, column: 4, scope: !3757)
!3763 = !DILocation(line: 2013, column: 17, scope: !3757)
!3764 = !DILocation(line: 2013, column: 4, scope: !3757)
!3765 = !DILocation(line: 2014, column: 4, scope: !3757)
!3766 = !DILocation(line: 2017, column: 11, scope: !3767)
!3767 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2017, column: 11)
!3768 = !DILocation(line: 2017, column: 41, scope: !3767)
!3769 = !DILocation(line: 2017, column: 44, scope: !3767)
!3770 = !DILocation(line: 2017, column: 11, scope: !3610)
!3771 = !DILocation(line: 2018, column: 2, scope: !3767)
!3772 = !DILocation(line: 2026, column: 11, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2026, column: 11)
!3774 = !DILocation(line: 2026, column: 35, scope: !3773)
!3775 = !DILocation(line: 2026, column: 38, scope: !3773)
!3776 = !DILocation(line: 2026, column: 11, scope: !3610)
!3777 = !DILocation(line: 2028, column: 4, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 2027, column: 2)
!3779 = !DILocation(line: 2029, column: 2, scope: !3778)
!3780 = !DILocation(line: 2030, column: 13, scope: !3610)
!3781 = !DILocation(line: 2030, column: 11, scope: !3610)
!3782 = !DILocation(line: 2031, column: 11, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2031, column: 11)
!3784 = !DILocation(line: 2031, column: 15, scope: !3783)
!3785 = !DILocation(line: 2031, column: 11, scope: !3610)
!3786 = !DILocation(line: 2033, column: 4, scope: !3787)
!3787 = distinct !DILexicalBlock(scope: !3783, file: !3, line: 2032, column: 2)
!3788 = !DILocation(line: 2034, column: 23, scope: !3787)
!3789 = !DILocation(line: 2034, column: 4, scope: !3787)
!3790 = !DILocation(line: 2035, column: 4, scope: !3787)
!3791 = !DILocation(line: 2036, column: 2, scope: !3787)
!3792 = !DILocation(line: 2039, column: 4, scope: !3793)
!3793 = distinct !DILexicalBlock(scope: !3783, file: !3, line: 2038, column: 2)
!3794 = !DILocation(line: 2040, column: 23, scope: !3793)
!3795 = !DILocation(line: 2040, column: 28, scope: !3793)
!3796 = !DILocation(line: 2040, column: 50, scope: !3793)
!3797 = !DILocation(line: 2040, column: 4, scope: !3793)
!3798 = !DILocation(line: 2043, column: 20, scope: !3610)
!3799 = !DILocation(line: 2043, column: 7, scope: !3610)
!3800 = !DILocation(line: 2044, column: 7, scope: !3610)
!3801 = !DILocalVariable(name: "binfo", scope: !3802, file: !3, line: 2050, type: !1040)
!3802 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2049, column: 7)
!3803 = !DILocation(line: 2050, column: 7, scope: !3802)
!3804 = !DILocation(line: 2050, column: 15, scope: !3802)
!3805 = !DILocation(line: 2054, column: 7, scope: !3806)
!3806 = distinct !DILexicalBlock(scope: !3802, file: !3, line: 2054, column: 6)
!3807 = !DILocation(line: 2054, column: 24, scope: !3806)
!3808 = !DILocation(line: 2055, column: 7, scope: !3806)
!3809 = !DILocation(line: 2055, column: 13, scope: !3806)
!3810 = !DILocation(line: 2055, column: 42, scope: !3806)
!3811 = !DILocation(line: 2056, column: 6, scope: !3806)
!3812 = !DILocation(line: 2056, column: 9, scope: !3806)
!3813 = !DILocation(line: 2057, column: 7, scope: !3806)
!3814 = !DILocation(line: 2057, column: 11, scope: !3806)
!3815 = !DILocation(line: 2058, column: 6, scope: !3806)
!3816 = !DILocation(line: 2058, column: 10, scope: !3806)
!3817 = !DILocation(line: 2060, column: 6, scope: !3806)
!3818 = !DILocation(line: 2060, column: 26, scope: !3806)
!3819 = !DILocation(line: 2060, column: 11, scope: !3806)
!3820 = !DILocation(line: 2054, column: 6, scope: !3802)
!3821 = !DILocation(line: 2069, column: 6, scope: !3822)
!3822 = distinct !DILexicalBlock(scope: !3806, file: !3, line: 2061, column: 4)
!3823 = !DILocation(line: 2070, column: 10, scope: !3824)
!3824 = distinct !DILexicalBlock(scope: !3822, file: !3, line: 2070, column: 10)
!3825 = !DILocation(line: 2070, column: 27, scope: !3824)
!3826 = !DILocation(line: 2073, column: 3, scope: !3824)
!3827 = !DILocation(line: 2073, column: 7, scope: !3824)
!3828 = !DILocation(line: 2073, column: 36, scope: !3824)
!3829 = !DILocation(line: 2074, column: 7, scope: !3824)
!3830 = !DILocation(line: 2074, column: 10, scope: !3824)
!3831 = !DILocation(line: 2070, column: 10, scope: !3822)
!3832 = !DILocation(line: 2075, column: 26, scope: !3824)
!3833 = !DILocation(line: 2075, column: 8, scope: !3824)
!3834 = !DILocation(line: 2078, column: 3, scope: !3835)
!3835 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 2077, column: 8)
!3836 = !DILocation(line: 2079, column: 35, scope: !3835)
!3837 = !DILocation(line: 2079, column: 14, scope: !3835)
!3838 = !DILocation(line: 2079, column: 3, scope: !3835)
!3839 = !DILocation(line: 2082, column: 6, scope: !3822)
!3840 = !DILocation(line: 2083, column: 6, scope: !3822)
!3841 = !DILocation(line: 2083, column: 14, scope: !3822)
!3842 = !DILocation(line: 2083, column: 42, scope: !3822)
!3843 = !DILocation(line: 2083, column: 49, scope: !3822)
!3844 = !DILocation(line: 2084, column: 6, scope: !3822)
!3845 = !DILocation(line: 2088, column: 2, scope: !3802)
!3846 = !DILocation(line: 2089, column: 32, scope: !3802)
!3847 = !DILocation(line: 2089, column: 13, scope: !3802)
!3848 = !DILocation(line: 2089, column: 2, scope: !3802)
!3849 = !DILocation(line: 2091, column: 6, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3802, file: !3, line: 2091, column: 6)
!3851 = !DILocation(line: 2091, column: 6, scope: !3802)
!3852 = !DILocalVariable(name: "i", scope: !3853, file: !3, line: 2093, type: !1136)
!3853 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 2092, column: 4)
!3854 = !DILocation(line: 2093, column: 10, scope: !3853)
!3855 = !DILocalVariable(name: "child", scope: !3853, file: !3, line: 2094, type: !1040)
!3856 = !DILocation(line: 2094, column: 11, scope: !3853)
!3857 = !DILocalVariable(name: "accesses", scope: !3853, file: !3, line: 2095, type: !1844)
!3858 = !DILocation(line: 2095, column: 20, scope: !3853)
!3859 = !DILocation(line: 2095, column: 31, scope: !3853)
!3860 = !DILocation(line: 2097, column: 10, scope: !3861)
!3861 = distinct !DILexicalBlock(scope: !3853, file: !3, line: 2097, column: 10)
!3862 = !DILocation(line: 2097, column: 10, scope: !3853)
!3863 = !DILocation(line: 2099, column: 7, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !3865, file: !3, line: 2099, column: 7)
!3865 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 2098, column: 8)
!3866 = !DILocation(line: 2099, column: 7, scope: !3865)
!3867 = !DILocation(line: 2101, column: 7, scope: !3868)
!3868 = distinct !DILexicalBlock(scope: !3864, file: !3, line: 2100, column: 5)
!3869 = !DILocation(line: 2102, column: 18, scope: !3868)
!3870 = !DILocation(line: 2102, column: 7, scope: !3868)
!3871 = !DILocation(line: 2103, column: 7, scope: !3868)
!3872 = !DILocation(line: 2104, column: 5, scope: !3868)
!3873 = !DILocation(line: 2105, column: 8, scope: !3865)
!3874 = !DILocation(line: 2106, column: 13, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !3853, file: !3, line: 2106, column: 6)
!3876 = !DILocation(line: 2106, column: 11, scope: !3875)
!3877 = !DILocation(line: 2106, column: 18, scope: !3878)
!3878 = distinct !DILexicalBlock(scope: !3875, file: !3, line: 2106, column: 6)
!3879 = !DILocation(line: 2106, column: 6, scope: !3875)
!3880 = !DILocalVariable(name: "access", scope: !3881, file: !3, line: 2108, type: !1040)
!3881 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 2107, column: 8)
!3882 = !DILocation(line: 2108, column: 8, scope: !3881)
!3883 = !DILocation(line: 2108, column: 18, scope: !3881)
!3884 = !DILocation(line: 2108, column: 29, scope: !3881)
!3885 = !DILocation(line: 2109, column: 13, scope: !3881)
!3886 = !DILocation(line: 2111, column: 7, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3881, file: !3, line: 2111, column: 7)
!3888 = !DILocation(line: 2111, column: 7, scope: !3881)
!3889 = !DILocation(line: 2113, column: 7, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3887, file: !3, line: 2112, column: 5)
!3891 = !DILocation(line: 2114, column: 7, scope: !3890)
!3892 = !DILocation(line: 2117, column: 11, scope: !3893)
!3893 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 2117, column: 11)
!3894 = !DILocation(line: 2118, column: 4, scope: !3893)
!3895 = !DILocation(line: 2118, column: 27, scope: !3893)
!3896 = !DILocation(line: 2118, column: 8, scope: !3893)
!3897 = !DILocation(line: 2118, column: 44, scope: !3893)
!3898 = !DILocation(line: 2119, column: 8, scope: !3893)
!3899 = !DILocation(line: 2119, column: 30, scope: !3893)
!3900 = !DILocation(line: 2119, column: 11, scope: !3893)
!3901 = !DILocation(line: 2119, column: 57, scope: !3893)
!3902 = !DILocation(line: 2117, column: 11, scope: !3890)
!3903 = !DILocation(line: 2124, column: 19, scope: !3893)
!3904 = !DILocation(line: 2124, column: 5, scope: !3893)
!3905 = !DILocation(line: 2125, column: 5, scope: !3893)
!3906 = !DILocation(line: 2123, column: 9, scope: !3893)
!3907 = !DILocation(line: 2127, column: 34, scope: !3893)
!3908 = !DILocation(line: 2127, column: 20, scope: !3893)
!3909 = !DILocation(line: 2128, column: 12, scope: !3893)
!3910 = !DILocation(line: 2127, column: 9, scope: !3893)
!3911 = !DILocation(line: 2129, column: 7, scope: !3890)
!3912 = !DILocation(line: 2130, column: 20, scope: !3890)
!3913 = !DILocation(line: 2130, column: 7, scope: !3890)
!3914 = !DILocation(line: 2131, column: 7, scope: !3890)
!3915 = !DILocation(line: 2132, column: 5, scope: !3890)
!3916 = !DILocation(line: 2138, column: 25, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3887, file: !3, line: 2134, column: 5)
!3918 = !DILocation(line: 2138, column: 7, scope: !3917)
!3919 = !DILocation(line: 2139, column: 7, scope: !3917)
!3920 = !DILocation(line: 2140, column: 20, scope: !3917)
!3921 = !DILocation(line: 2140, column: 40, scope: !3917)
!3922 = !DILocation(line: 2140, column: 7, scope: !3917)
!3923 = !DILocation(line: 2141, column: 7, scope: !3917)
!3924 = !DILocation(line: 2142, column: 32, scope: !3917)
!3925 = !DILocation(line: 2142, column: 18, scope: !3917)
!3926 = !DILocation(line: 2143, column: 10, scope: !3917)
!3927 = !DILocation(line: 2142, column: 7, scope: !3917)
!3928 = !DILocation(line: 2144, column: 7, scope: !3917)
!3929 = !DILocation(line: 2146, column: 24, scope: !3917)
!3930 = !DILocation(line: 2146, column: 10, scope: !3917)
!3931 = !DILocation(line: 2147, column: 10, scope: !3917)
!3932 = !DILocation(line: 2145, column: 7, scope: !3917)
!3933 = !DILocation(line: 2148, column: 7, scope: !3917)
!3934 = !DILocation(line: 2150, column: 8, scope: !3881)
!3935 = !DILocation(line: 2106, column: 57, scope: !3878)
!3936 = !DILocation(line: 2106, column: 6, scope: !3878)
!3937 = distinct !{!3937, !3879, !3938}
!3938 = !DILocation(line: 2150, column: 8, scope: !3875)
!3939 = !DILocation(line: 2151, column: 4, scope: !3853)
!3940 = !DILocation(line: 2155, column: 27, scope: !3610)
!3941 = !DILocation(line: 2155, column: 7, scope: !3610)
!3942 = !DILocation(line: 2156, column: 11, scope: !3943)
!3943 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2156, column: 11)
!3944 = !DILocation(line: 2156, column: 41, scope: !3943)
!3945 = !DILocation(line: 2156, column: 44, scope: !3943)
!3946 = !DILocation(line: 2156, column: 64, scope: !3943)
!3947 = !DILocation(line: 2156, column: 11, scope: !3610)
!3948 = !DILocation(line: 2158, column: 25, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 2157, column: 2)
!3950 = !DILocation(line: 2158, column: 4, scope: !3949)
!3951 = !DILocation(line: 2159, column: 2, scope: !3949)
!3952 = !DILocation(line: 2161, column: 7, scope: !3610)
!3953 = !DILocation(line: 2163, column: 11, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2163, column: 11)
!3955 = !DILocation(line: 2163, column: 41, scope: !3954)
!3956 = !DILocation(line: 2163, column: 44, scope: !3954)
!3957 = !DILocation(line: 2163, column: 61, scope: !3954)
!3958 = !DILocation(line: 2165, column: 4, scope: !3954)
!3959 = !DILocation(line: 2165, column: 7, scope: !3954)
!3960 = !DILocation(line: 2163, column: 11, scope: !3610)
!3961 = !DILocation(line: 2172, column: 4, scope: !3962)
!3962 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 2166, column: 2)
!3963 = !DILocation(line: 2173, column: 17, scope: !3962)
!3964 = !DILocation(line: 2173, column: 4, scope: !3962)
!3965 = !DILocation(line: 2174, column: 4, scope: !3962)
!3966 = !DILocation(line: 2175, column: 2, scope: !3962)
!3967 = !DILocation(line: 2176, column: 7, scope: !3610)
!3968 = !DILocation(line: 2182, column: 12, scope: !3969)
!3969 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2182, column: 11)
!3970 = !DILocation(line: 2182, column: 29, scope: !3969)
!3971 = !DILocation(line: 2183, column: 5, scope: !3969)
!3972 = !DILocation(line: 2183, column: 11, scope: !3969)
!3973 = !DILocation(line: 2183, column: 40, scope: !3969)
!3974 = !DILocation(line: 2184, column: 4, scope: !3969)
!3975 = !DILocation(line: 2184, column: 7, scope: !3969)
!3976 = !DILocation(line: 2185, column: 5, scope: !3969)
!3977 = !DILocation(line: 2185, column: 9, scope: !3969)
!3978 = !DILocation(line: 2186, column: 4, scope: !3969)
!3979 = !DILocation(line: 2186, column: 8, scope: !3969)
!3980 = !DILocation(line: 2182, column: 11, scope: !3610)
!3981 = !DILocation(line: 2188, column: 4, scope: !3982)
!3982 = distinct !DILexicalBlock(scope: !3969, file: !3, line: 2187, column: 2)
!3983 = !DILocation(line: 2189, column: 22, scope: !3982)
!3984 = !DILocation(line: 2189, column: 4, scope: !3982)
!3985 = !DILocation(line: 2190, column: 4, scope: !3982)
!3986 = !DILocation(line: 2190, column: 12, scope: !3982)
!3987 = !DILocation(line: 2190, column: 40, scope: !3982)
!3988 = !DILocation(line: 2190, column: 47, scope: !3982)
!3989 = !DILocation(line: 2191, column: 4, scope: !3982)
!3990 = !DILocation(line: 2192, column: 4, scope: !3982)
!3991 = !DILocation(line: 2194, column: 11, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2194, column: 11)
!3993 = !DILocation(line: 2195, column: 4, scope: !3992)
!3994 = !DILocation(line: 2195, column: 7, scope: !3992)
!3995 = !DILocation(line: 2195, column: 32, scope: !3992)
!3996 = !DILocation(line: 2195, column: 29, scope: !3992)
!3997 = !DILocation(line: 2194, column: 11, scope: !3610)
!3998 = !DILocation(line: 2197, column: 4, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3992, file: !3, line: 2196, column: 2)
!4000 = !DILocation(line: 2198, column: 15, scope: !3999)
!4001 = !DILocation(line: 2198, column: 4, scope: !3999)
!4002 = !DILocation(line: 2199, column: 4, scope: !3999)
!4003 = !DILocation(line: 2200, column: 2, scope: !3999)
!4004 = !DILocation(line: 2202, column: 7, scope: !3610)
!4005 = !DILocation(line: 2203, column: 18, scope: !4006)
!4006 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2203, column: 7)
!4007 = !DILocation(line: 2203, column: 16, scope: !4006)
!4008 = !DILocation(line: 2203, column: 12, scope: !4006)
!4009 = !DILocation(line: 2203, column: 38, scope: !4010)
!4010 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 2203, column: 7)
!4011 = !DILocation(line: 2203, column: 7, scope: !4006)
!4012 = !DILocalVariable(name: "value", scope: !4013, file: !3, line: 2205, type: !1040)
!4013 = distinct !DILexicalBlock(scope: !4010, file: !3, line: 2204, column: 2)
!4014 = !DILocation(line: 2205, column: 16, scope: !4013)
!4015 = !DILocation(line: 2205, column: 24, scope: !4013)
!4016 = !DILocation(line: 2207, column: 4, scope: !4013)
!4017 = !DILocation(line: 2208, column: 4, scope: !4013)
!4018 = !DILocation(line: 2210, column: 15, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !4013, file: !3, line: 2210, column: 15)
!4020 = !DILocation(line: 2210, column: 33, scope: !4019)
!4021 = !DILocation(line: 2210, column: 15, scope: !4013)
!4022 = !DILocation(line: 2211, column: 21, scope: !4019)
!4023 = !DILocation(line: 2211, column: 19, scope: !4019)
!4024 = !DILocation(line: 2211, column: 13, scope: !4019)
!4025 = !DILocation(line: 2213, column: 8, scope: !4026)
!4026 = distinct !DILexicalBlock(scope: !4013, file: !3, line: 2213, column: 8)
!4027 = !DILocation(line: 2213, column: 34, scope: !4026)
!4028 = !DILocation(line: 2213, column: 8, scope: !4013)
!4029 = !DILocation(line: 2214, column: 17, scope: !4026)
!4030 = !DILocation(line: 2214, column: 6, scope: !4026)
!4031 = !DILocation(line: 2215, column: 13, scope: !4032)
!4032 = distinct !DILexicalBlock(scope: !4026, file: !3, line: 2215, column: 13)
!4033 = !DILocation(line: 2215, column: 39, scope: !4032)
!4034 = !DILocation(line: 2216, column: 6, scope: !4032)
!4035 = !DILocation(line: 2216, column: 25, scope: !4032)
!4036 = !DILocation(line: 2216, column: 50, scope: !4032)
!4037 = !DILocation(line: 2215, column: 13, scope: !4026)
!4038 = !DILocation(line: 2217, column: 17, scope: !4032)
!4039 = !DILocation(line: 2217, column: 6, scope: !4032)
!4040 = !DILocation(line: 2219, column: 17, scope: !4032)
!4041 = !DILocation(line: 2219, column: 6, scope: !4032)
!4042 = !DILocation(line: 2221, column: 4, scope: !4013)
!4043 = !DILocation(line: 2222, column: 8, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4013, file: !3, line: 2222, column: 8)
!4045 = !DILocation(line: 2222, column: 25, scope: !4044)
!4046 = !DILocation(line: 2222, column: 8, scope: !4013)
!4047 = !DILocation(line: 2223, column: 6, scope: !4044)
!4048 = !DILocation(line: 2224, column: 2, scope: !4013)
!4049 = !DILocation(line: 2203, column: 49, scope: !4010)
!4050 = !DILocation(line: 2203, column: 47, scope: !4010)
!4051 = !DILocation(line: 2203, column: 7, scope: !4010)
!4052 = distinct !{!4052, !4011, !4053}
!4053 = !DILocation(line: 2224, column: 2, scope: !4006)
!4054 = !DILocation(line: 2226, column: 7, scope: !3610)
!4055 = !DILocation(line: 2227, column: 7, scope: !3610)
!4056 = !DILocation(line: 2230, column: 7, scope: !3610)
!4057 = !DILocation(line: 2231, column: 20, scope: !3610)
!4058 = !DILocation(line: 2231, column: 7, scope: !3610)
!4059 = !DILocation(line: 2232, column: 7, scope: !3610)
!4060 = !DILocation(line: 2235, column: 11, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2235, column: 11)
!4062 = !DILocation(line: 2235, column: 11, scope: !3610)
!4063 = !DILocation(line: 2237, column: 4, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 2236, column: 2)
!4065 = !DILocation(line: 2240, column: 17, scope: !4064)
!4066 = !DILocation(line: 2240, column: 4, scope: !4064)
!4067 = !DILocation(line: 2241, column: 4, scope: !4064)
!4068 = !DILocation(line: 2242, column: 17, scope: !4064)
!4069 = !DILocation(line: 2242, column: 4, scope: !4064)
!4070 = !DILocation(line: 2243, column: 17, scope: !4064)
!4071 = !DILocation(line: 2243, column: 4, scope: !4064)
!4072 = !DILocation(line: 2244, column: 4, scope: !4064)
!4073 = !DILocation(line: 2245, column: 2, scope: !4064)
!4074 = !DILocation(line: 2248, column: 15, scope: !4061)
!4075 = !DILocation(line: 2248, column: 2, scope: !4061)
!4076 = !DILocation(line: 2249, column: 7, scope: !3610)
!4077 = !DILocation(line: 2252, column: 11, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2252, column: 11)
!4079 = !DILocation(line: 2252, column: 11, scope: !3610)
!4080 = !DILocation(line: 2254, column: 4, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 2253, column: 2)
!4082 = !DILocation(line: 2255, column: 17, scope: !4081)
!4083 = !DILocation(line: 2255, column: 4, scope: !4081)
!4084 = !DILocation(line: 2256, column: 4, scope: !4081)
!4085 = !DILocation(line: 2257, column: 17, scope: !4081)
!4086 = !DILocation(line: 2257, column: 4, scope: !4081)
!4087 = !DILocation(line: 2258, column: 2, scope: !4081)
!4088 = !DILocation(line: 2261, column: 15, scope: !4078)
!4089 = !DILocation(line: 2261, column: 2, scope: !4078)
!4090 = !DILocation(line: 2262, column: 7, scope: !3610)
!4091 = !DILocation(line: 2265, column: 11, scope: !4092)
!4092 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 2265, column: 11)
!4093 = !DILocation(line: 2265, column: 11, scope: !3610)
!4094 = !DILocation(line: 2267, column: 4, scope: !4095)
!4095 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 2266, column: 2)
!4096 = !DILocation(line: 2268, column: 2, scope: !4095)
!4097 = !DILocation(line: 2270, column: 2, scope: !4092)
!4098 = !DILocation(line: 2271, column: 20, scope: !3610)
!4099 = !DILocation(line: 2271, column: 7, scope: !3610)
!4100 = !DILocation(line: 2272, column: 7, scope: !3610)
!4101 = !DILocation(line: 2275, column: 7, scope: !3610)
!4102 = !DILocation(line: 2276, column: 20, scope: !3610)
!4103 = !DILocation(line: 2276, column: 7, scope: !3610)
!4104 = !DILocation(line: 2277, column: 7, scope: !3610)
!4105 = !DILocation(line: 2280, column: 7, scope: !3610)
!4106 = !DILocation(line: 2281, column: 5, scope: !3610)
!4107 = !DILocation(line: 2282, column: 1, scope: !2199)
!4108 = distinct !DISubprogram(name: "dbxout_finish_complex_stabs", scope: !3, file: !3, line: 853, type: !4109, scopeLine: 855, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4109 = !DISubroutineType(types: !4110)
!4110 = !{null, !1040, !4111, !1217, !1242, !1136}
!4111 = !DIDerivedType(tag: DW_TAG_typedef, name: "stab_code_type", file: !378, line: 31, baseType: !1136)
!4112 = !DILocalVariable(name: "sym", arg: 1, scope: !4108, file: !3, line: 853, type: !1040)
!4113 = !DILocation(line: 853, column: 35, scope: !4108)
!4114 = !DILocalVariable(name: "code", arg: 2, scope: !4108, file: !3, line: 853, type: !4111)
!4115 = !DILocation(line: 853, column: 55, scope: !4108)
!4116 = !DILocalVariable(name: "addr", arg: 3, scope: !4108, file: !3, line: 854, type: !1217)
!4117 = !DILocation(line: 854, column: 13, scope: !4108)
!4118 = !DILocalVariable(name: "label", arg: 4, scope: !4108, file: !3, line: 854, type: !1242)
!4119 = !DILocation(line: 854, column: 31, scope: !4108)
!4120 = !DILocalVariable(name: "number", arg: 5, scope: !4108, file: !3, line: 854, type: !1136)
!4121 = !DILocation(line: 854, column: 42, scope: !4108)
!4122 = !DILocalVariable(name: "line", scope: !4108, file: !3, line: 856, type: !1136)
!4123 = !DILocation(line: 856, column: 7, scope: !4108)
!4124 = !DILocalVariable(name: "str", scope: !4108, file: !3, line: 857, type: !1307)
!4125 = !DILocation(line: 857, column: 9, scope: !4108)
!4126 = !DILocalVariable(name: "len", scope: !4108, file: !3, line: 858, type: !1641)
!4127 = !DILocation(line: 858, column: 10, scope: !4108)
!4128 = !DILocation(line: 860, column: 10, scope: !4108)
!4129 = !DILocation(line: 860, column: 16, scope: !4108)
!4130 = !DILocation(line: 860, column: 8, scope: !4108)
!4131 = !DILocation(line: 902, column: 7, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4133, file: !3, line: 898, column: 5)
!4133 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 861, column: 7)
!4134 = !DILocation(line: 903, column: 13, scope: !4132)
!4135 = !DILocation(line: 903, column: 11, scope: !4132)
!4136 = !DILocation(line: 904, column: 13, scope: !4132)
!4137 = !DILocation(line: 904, column: 11, scope: !4132)
!4138 = !DILocation(line: 906, column: 15, scope: !4132)
!4139 = !DILocation(line: 906, column: 23, scope: !4132)
!4140 = !DILocation(line: 906, column: 28, scope: !4132)
!4141 = !DILocation(line: 906, column: 7, scope: !4132)
!4142 = !DILocation(line: 907, column: 7, scope: !4132)
!4143 = !DILocalVariable(name: "line_", scope: !4144, file: !3, line: 907, type: !1136)
!4144 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 907, column: 7)
!4145 = !DILocation(line: 907, column: 7, scope: !4144)
!4146 = !DILocation(line: 907, column: 7, scope: !4147)
!4147 = distinct !DILexicalBlock(scope: !4144, file: !3, line: 907, column: 7)
!4148 = !DILocation(line: 907, column: 7, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4147, file: !3, line: 907, column: 7)
!4150 = !DILocation(line: 909, column: 3, scope: !4108)
!4151 = !DILocation(line: 910, column: 1, scope: !4108)
!4152 = distinct !DISubprogram(name: "dbxout_class_name_qualifiers", scope: !3, file: !3, line: 2343, type: !2246, scopeLine: 2344, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4153 = !DILocalVariable(name: "decl", arg: 1, scope: !4152, file: !3, line: 2343, type: !1040)
!4154 = !DILocation(line: 2343, column: 36, scope: !4152)
!4155 = !DILocalVariable(name: "context", scope: !4152, file: !3, line: 2345, type: !1040)
!4156 = !DILocation(line: 2345, column: 8, scope: !4152)
!4157 = !DILocation(line: 2345, column: 37, scope: !4152)
!4158 = !DILocation(line: 2345, column: 18, scope: !4152)
!4159 = !DILocation(line: 2347, column: 7, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4152, file: !3, line: 2347, column: 7)
!4161 = !DILocation(line: 2347, column: 15, scope: !4160)
!4162 = !DILocation(line: 2348, column: 7, scope: !4160)
!4163 = !DILocation(line: 2348, column: 10, scope: !4160)
!4164 = !DILocation(line: 2348, column: 29, scope: !4160)
!4165 = !DILocation(line: 2349, column: 7, scope: !4160)
!4166 = !DILocation(line: 2349, column: 10, scope: !4160)
!4167 = !DILocation(line: 2349, column: 30, scope: !4160)
!4168 = !DILocation(line: 2350, column: 7, scope: !4160)
!4169 = !DILocation(line: 2350, column: 11, scope: !4160)
!4170 = !DILocation(line: 2350, column: 43, scope: !4160)
!4171 = !DILocation(line: 2351, column: 11, scope: !4160)
!4172 = !DILocation(line: 2351, column: 15, scope: !4160)
!4173 = !DILocation(line: 2351, column: 47, scope: !4160)
!4174 = !DILocation(line: 2347, column: 7, scope: !4152)
!4175 = !DILocalVariable(name: "name", scope: !4176, file: !3, line: 2353, type: !1040)
!4176 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 2352, column: 5)
!4177 = !DILocation(line: 2353, column: 12, scope: !4176)
!4178 = !DILocation(line: 2353, column: 19, scope: !4176)
!4179 = !DILocation(line: 2355, column: 11, scope: !4180)
!4180 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 2355, column: 11)
!4181 = !DILocation(line: 2355, column: 28, scope: !4180)
!4182 = !DILocation(line: 2355, column: 11, scope: !4176)
!4183 = !DILocation(line: 2357, column: 34, scope: !4184)
!4184 = distinct !DILexicalBlock(scope: !4180, file: !3, line: 2356, column: 2)
!4185 = !DILocation(line: 2357, column: 4, scope: !4184)
!4186 = !DILocation(line: 2358, column: 11, scope: !4184)
!4187 = !DILocation(line: 2358, column: 9, scope: !4184)
!4188 = !DILocation(line: 2359, column: 2, scope: !4184)
!4189 = !DILocation(line: 2360, column: 7, scope: !4176)
!4190 = !DILocation(line: 2361, column: 7, scope: !4176)
!4191 = !DILocation(line: 2362, column: 5, scope: !4176)
!4192 = !DILocation(line: 2363, column: 1, scope: !4152)
!4193 = distinct !DISubprogram(name: "dbxout_symbol_name", scope: !3, file: !3, line: 3142, type: !4194, scopeLine: 3143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4194 = !DISubroutineType(types: !4195)
!4195 = !{null, !1040, !1242, !1136}
!4196 = !DILocalVariable(name: "decl", arg: 1, scope: !4193, file: !3, line: 3142, type: !1040)
!4197 = !DILocation(line: 3142, column: 26, scope: !4193)
!4198 = !DILocalVariable(name: "suffix", arg: 2, scope: !4193, file: !3, line: 3142, type: !1242)
!4199 = !DILocation(line: 3142, column: 44, scope: !4193)
!4200 = !DILocalVariable(name: "letter", arg: 3, scope: !4193, file: !3, line: 3142, type: !1136)
!4201 = !DILocation(line: 3142, column: 56, scope: !4193)
!4202 = !DILocalVariable(name: "name", scope: !4193, file: !3, line: 3144, type: !1040)
!4203 = !DILocation(line: 3144, column: 8, scope: !4193)
!4204 = !DILocation(line: 3146, column: 7, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 3146, column: 7)
!4206 = !DILocation(line: 3147, column: 7, scope: !4205)
!4207 = !DILocation(line: 3147, column: 11, scope: !4205)
!4208 = !DILocation(line: 3148, column: 4, scope: !4205)
!4209 = !DILocation(line: 3148, column: 7, scope: !4205)
!4210 = !DILocation(line: 3148, column: 39, scope: !4205)
!4211 = !DILocation(line: 3146, column: 7, scope: !4193)
!4212 = !DILocation(line: 3153, column: 12, scope: !4205)
!4213 = !DILocation(line: 3153, column: 10, scope: !4205)
!4214 = !DILocation(line: 3153, column: 5, scope: !4205)
!4215 = !DILocation(line: 3157, column: 12, scope: !4205)
!4216 = !DILocation(line: 3157, column: 10, scope: !4205)
!4217 = !DILocation(line: 3159, column: 7, scope: !4218)
!4218 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 3159, column: 7)
!4219 = !DILocation(line: 3159, column: 7, scope: !4193)
!4220 = !DILocation(line: 3160, column: 5, scope: !4218)
!4221 = !DILocation(line: 3162, column: 5, scope: !4218)
!4222 = !DILocation(line: 3164, column: 7, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 3164, column: 7)
!4224 = !DILocation(line: 3164, column: 7, scope: !4193)
!4225 = !DILocation(line: 3165, column: 5, scope: !4223)
!4226 = !DILocation(line: 3166, column: 3, scope: !4193)
!4227 = !DILocation(line: 3167, column: 7, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 3167, column: 7)
!4229 = !DILocation(line: 3167, column: 7, scope: !4193)
!4230 = !DILocation(line: 3168, column: 5, scope: !4228)
!4231 = !DILocation(line: 3169, column: 1, scope: !4193)
!4232 = distinct !DISubprogram(name: "stabstr_D", scope: !3, file: !3, line: 654, type: !4233, scopeLine: 655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4233 = !DISubroutineType(types: !4234)
!4234 = !{null, !1095}
!4235 = !DILocalVariable(name: "num", arg: 1, scope: !4232, file: !3, line: 654, type: !1095)
!4236 = !DILocation(line: 654, column: 26, scope: !4232)
!4237 = !DILocalVariable(name: "buf", scope: !4232, file: !3, line: 656, type: !2649)
!4238 = !DILocation(line: 656, column: 8, scope: !4232)
!4239 = !DILocalVariable(name: "p", scope: !4232, file: !3, line: 657, type: !1307)
!4240 = !DILocation(line: 657, column: 9, scope: !4232)
!4241 = !DILocation(line: 657, column: 13, scope: !4232)
!4242 = !DILocation(line: 657, column: 17, scope: !4232)
!4243 = !DILocalVariable(name: "unum", scope: !4232, file: !3, line: 658, type: !7)
!4244 = !DILocation(line: 658, column: 16, scope: !4232)
!4245 = !DILocation(line: 660, column: 7, scope: !4246)
!4246 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 660, column: 7)
!4247 = !DILocation(line: 660, column: 11, scope: !4246)
!4248 = !DILocation(line: 660, column: 7, scope: !4232)
!4249 = !DILocation(line: 662, column: 7, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4246, file: !3, line: 661, column: 5)
!4251 = !DILocation(line: 663, column: 7, scope: !4250)
!4252 = !DILocation(line: 665, column: 7, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 665, column: 7)
!4254 = !DILocation(line: 665, column: 11, scope: !4253)
!4255 = !DILocation(line: 665, column: 7, scope: !4232)
!4256 = !DILocation(line: 667, column: 7, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 666, column: 5)
!4258 = !DILocation(line: 668, column: 15, scope: !4257)
!4259 = !DILocation(line: 668, column: 14, scope: !4257)
!4260 = !DILocation(line: 668, column: 12, scope: !4257)
!4261 = !DILocation(line: 669, column: 5, scope: !4257)
!4262 = !DILocation(line: 671, column: 12, scope: !4253)
!4263 = !DILocation(line: 671, column: 10, scope: !4253)
!4264 = !DILocation(line: 673, column: 3, scope: !4232)
!4265 = !DILocalVariable(name: "digit", scope: !4266, file: !3, line: 673, type: !1136)
!4266 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 673, column: 3)
!4267 = !DILocation(line: 673, column: 3, scope: !4266)
!4268 = distinct !{!4268, !4264, !4264}
!4269 = !DILocation(line: 675, column: 3, scope: !4232)
!4270 = !DILocation(line: 676, column: 1, scope: !4232)
!4271 = distinct !DISubprogram(name: "dbxout_expand_expr", scope: !3, file: !3, line: 2371, type: !4272, scopeLine: 2372, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4272 = !DISubroutineType(types: !4273)
!4273 = !{!1217, !1040}
!4274 = !DILocalVariable(name: "expr", arg: 1, scope: !4271, file: !3, line: 2371, type: !1040)
!4275 = !DILocation(line: 2371, column: 26, scope: !4271)
!4276 = !DILocation(line: 2373, column: 11, scope: !4271)
!4277 = !DILocation(line: 2373, column: 3, scope: !4271)
!4278 = !DILocation(line: 2381, column: 20, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 2381, column: 11)
!4280 = distinct !DILexicalBlock(scope: !4271, file: !3, line: 2374, column: 5)
!4281 = !DILocation(line: 2381, column: 12, scope: !4279)
!4282 = !DILocation(line: 2381, column: 29, scope: !4279)
!4283 = !DILocation(line: 2381, column: 32, scope: !4279)
!4284 = !DILocation(line: 2381, column: 11, scope: !4280)
!4285 = !DILocation(line: 2382, column: 2, scope: !4279)
!4286 = !DILocation(line: 2386, column: 11, scope: !4287)
!4287 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 2386, column: 11)
!4288 = !DILocation(line: 2386, column: 11, scope: !4280)
!4289 = !DILocation(line: 2387, column: 29, scope: !4287)
!4290 = !DILocation(line: 2387, column: 9, scope: !4287)
!4291 = !DILocation(line: 2387, column: 2, scope: !4287)
!4292 = !DILocation(line: 2392, column: 14, scope: !4280)
!4293 = !DILocation(line: 2392, column: 7, scope: !4280)
!4294 = !DILocation(line: 2395, column: 27, scope: !4280)
!4295 = !DILocation(line: 2395, column: 14, scope: !4280)
!4296 = !DILocation(line: 2395, column: 7, scope: !4280)
!4297 = !DILocalVariable(name: "mode", scope: !4298, file: !3, line: 2402, type: !5)
!4298 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 2401, column: 7)
!4299 = !DILocation(line: 2402, column: 20, scope: !4298)
!4300 = !DILocalVariable(name: "bitsize", scope: !4298, file: !3, line: 2403, type: !1095)
!4301 = !DILocation(line: 2403, column: 16, scope: !4298)
!4302 = !DILocalVariable(name: "bitpos", scope: !4298, file: !3, line: 2403, type: !1095)
!4303 = !DILocation(line: 2403, column: 25, scope: !4298)
!4304 = !DILocalVariable(name: "offset", scope: !4298, file: !3, line: 2404, type: !1040)
!4305 = !DILocation(line: 2404, column: 7, scope: !4298)
!4306 = !DILocalVariable(name: "tem", scope: !4298, file: !3, line: 2404, type: !1040)
!4307 = !DILocation(line: 2404, column: 15, scope: !4298)
!4308 = !DILocalVariable(name: "volatilep", scope: !4298, file: !3, line: 2405, type: !1136)
!4309 = !DILocation(line: 2405, column: 6, scope: !4298)
!4310 = !DILocalVariable(name: "unsignedp", scope: !4298, file: !3, line: 2405, type: !1136)
!4311 = !DILocation(line: 2405, column: 21, scope: !4298)
!4312 = !DILocalVariable(name: "x", scope: !4298, file: !3, line: 2406, type: !1217)
!4313 = !DILocation(line: 2406, column: 6, scope: !4298)
!4314 = !DILocation(line: 2408, column: 29, scope: !4298)
!4315 = !DILocation(line: 2408, column: 8, scope: !4298)
!4316 = !DILocation(line: 2408, column: 6, scope: !4298)
!4317 = !DILocation(line: 2411, column: 26, scope: !4298)
!4318 = !DILocation(line: 2411, column: 6, scope: !4298)
!4319 = !DILocation(line: 2411, column: 4, scope: !4298)
!4320 = !DILocation(line: 2412, column: 6, scope: !4321)
!4321 = distinct !DILexicalBlock(scope: !4298, file: !3, line: 2412, column: 6)
!4322 = !DILocation(line: 2412, column: 8, scope: !4321)
!4323 = !DILocation(line: 2412, column: 16, scope: !4321)
!4324 = !DILocation(line: 2412, column: 20, scope: !4321)
!4325 = !DILocation(line: 2412, column: 6, scope: !4298)
!4326 = !DILocation(line: 2413, column: 4, scope: !4321)
!4327 = !DILocation(line: 2414, column: 6, scope: !4328)
!4328 = distinct !DILexicalBlock(scope: !4298, file: !3, line: 2414, column: 6)
!4329 = !DILocation(line: 2414, column: 13, scope: !4328)
!4330 = !DILocation(line: 2414, column: 6, scope: !4298)
!4331 = !DILocation(line: 2416, column: 26, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 2416, column: 10)
!4333 = distinct !DILexicalBlock(scope: !4328, file: !3, line: 2415, column: 4)
!4334 = !DILocation(line: 2416, column: 11, scope: !4332)
!4335 = !DILocation(line: 2416, column: 10, scope: !4333)
!4336 = !DILocation(line: 2417, column: 8, scope: !4332)
!4337 = !DILocation(line: 2418, column: 10, scope: !4333)
!4338 = !DILocation(line: 2418, column: 8, scope: !4333)
!4339 = !DILocation(line: 2419, column: 4, scope: !4333)
!4340 = !DILocation(line: 2420, column: 6, scope: !4341)
!4341 = distinct !DILexicalBlock(scope: !4298, file: !3, line: 2420, column: 6)
!4342 = !DILocation(line: 2420, column: 13, scope: !4341)
!4343 = !DILocation(line: 2420, column: 6, scope: !4298)
!4344 = !DILocation(line: 2421, column: 8, scope: !4341)
!4345 = !DILocation(line: 2421, column: 6, scope: !4341)
!4346 = !DILocation(line: 2421, column: 4, scope: !4341)
!4347 = !DILocation(line: 2423, column: 9, scope: !4298)
!4348 = !DILocation(line: 2423, column: 2, scope: !4298)
!4349 = !DILocation(line: 2427, column: 7, scope: !4280)
!4350 = !DILocation(line: 2429, column: 1, scope: !4271)
!4351 = distinct !DISubprogram(name: "dbxout_symbol_location", scope: !3, file: !3, line: 2872, type: !4352, scopeLine: 2873, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4352 = !DISubroutineType(types: !4353)
!4353 = !{!1136, !1040, !1040, !1242, !1217}
!4354 = !DILocalVariable(name: "decl", arg: 1, scope: !4351, file: !3, line: 2872, type: !1040)
!4355 = !DILocation(line: 2872, column: 30, scope: !4351)
!4356 = !DILocalVariable(name: "type", arg: 2, scope: !4351, file: !3, line: 2872, type: !1040)
!4357 = !DILocation(line: 2872, column: 41, scope: !4351)
!4358 = !DILocalVariable(name: "suffix", arg: 3, scope: !4351, file: !3, line: 2872, type: !1242)
!4359 = !DILocation(line: 2872, column: 59, scope: !4351)
!4360 = !DILocalVariable(name: "home", arg: 4, scope: !4351, file: !3, line: 2872, type: !1217)
!4361 = !DILocation(line: 2872, column: 71, scope: !4351)
!4362 = !DILocalVariable(name: "letter", scope: !4351, file: !3, line: 2874, type: !1136)
!4363 = !DILocation(line: 2874, column: 7, scope: !4351)
!4364 = !DILocalVariable(name: "code", scope: !4351, file: !3, line: 2875, type: !4111)
!4365 = !DILocation(line: 2875, column: 18, scope: !4351)
!4366 = !DILocalVariable(name: "addr", scope: !4351, file: !3, line: 2876, type: !1217)
!4367 = !DILocation(line: 2876, column: 7, scope: !4351)
!4368 = !DILocalVariable(name: "number", scope: !4351, file: !3, line: 2877, type: !1136)
!4369 = !DILocation(line: 2877, column: 7, scope: !4351)
!4370 = !DILocalVariable(name: "regno", scope: !4351, file: !3, line: 2878, type: !1136)
!4371 = !DILocation(line: 2878, column: 7, scope: !4351)
!4372 = !DILocation(line: 2886, column: 7, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 2886, column: 7)
!4374 = !DILocation(line: 2886, column: 23, scope: !4373)
!4375 = !DILocation(line: 2886, column: 7, scope: !4351)
!4376 = !DILocalVariable(name: "value", scope: !4377, file: !3, line: 2888, type: !1217)
!4377 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 2887, column: 5)
!4378 = !DILocation(line: 2888, column: 11, scope: !4377)
!4379 = !DILocation(line: 2888, column: 19, scope: !4377)
!4380 = !DILocation(line: 2890, column: 7, scope: !4377)
!4381 = !DILocation(line: 2890, column: 14, scope: !4377)
!4382 = !DILocation(line: 2890, column: 31, scope: !4377)
!4383 = !DILocation(line: 2891, column: 10, scope: !4377)
!4384 = !DILocation(line: 2891, column: 8, scope: !4377)
!4385 = distinct !{!4385, !4380, !4383}
!4386 = !DILocation(line: 2892, column: 11, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4377, file: !3, line: 2892, column: 11)
!4388 = !DILocation(line: 2892, column: 11, scope: !4377)
!4389 = !DILocation(line: 2894, column: 8, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4391, file: !3, line: 2894, column: 8)
!4391 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 2893, column: 2)
!4392 = !DILocation(line: 2894, column: 22, scope: !4390)
!4393 = !DILocation(line: 2894, column: 8, scope: !4391)
!4394 = !DILocation(line: 2895, column: 6, scope: !4390)
!4395 = !DILocation(line: 2896, column: 2, scope: !4391)
!4396 = !DILocation(line: 2897, column: 14, scope: !4377)
!4397 = !DILocation(line: 2897, column: 12, scope: !4377)
!4398 = !DILocation(line: 2898, column: 5, scope: !4377)
!4399 = !DILocation(line: 2899, column: 7, scope: !4400)
!4400 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 2899, column: 7)
!4401 = !DILocation(line: 2899, column: 7, scope: !4351)
!4402 = !DILocation(line: 2901, column: 15, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4400, file: !3, line: 2900, column: 5)
!4404 = !DILocation(line: 2901, column: 13, scope: !4403)
!4405 = !DILocation(line: 2902, column: 11, scope: !4406)
!4406 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 2902, column: 11)
!4407 = !DILocation(line: 2902, column: 17, scope: !4406)
!4408 = !DILocation(line: 2902, column: 11, scope: !4403)
!4409 = !DILocation(line: 2903, column: 2, scope: !4406)
!4410 = !DILocation(line: 2904, column: 5, scope: !4403)
!4411 = !DILocation(line: 2919, column: 7, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 2919, column: 7)
!4413 = !DILocation(line: 2919, column: 20, scope: !4412)
!4414 = !DILocation(line: 2919, column: 23, scope: !4412)
!4415 = !DILocation(line: 2919, column: 49, scope: !4412)
!4416 = !DILocation(line: 2919, column: 7, scope: !4351)
!4417 = !DILocation(line: 2921, column: 11, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4419, file: !3, line: 2921, column: 11)
!4419 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 2920, column: 5)
!4420 = !DILocation(line: 2921, column: 11, scope: !4419)
!4421 = !DILocalVariable(name: "offs", scope: !4422, file: !3, line: 2923, type: !1136)
!4422 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 2922, column: 2)
!4423 = !DILocation(line: 2923, column: 8, scope: !4422)
!4424 = !DILocation(line: 2924, column: 11, scope: !4422)
!4425 = !DILocation(line: 2925, column: 9, scope: !4422)
!4426 = !DILocation(line: 2926, column: 37, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4422, file: !3, line: 2926, column: 8)
!4428 = !DILocation(line: 2926, column: 16, scope: !4427)
!4429 = !DILocation(line: 2926, column: 13, scope: !4427)
!4430 = !DILocation(line: 2926, column: 8, scope: !4422)
!4431 = !DILocation(line: 2928, column: 15, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 2927, column: 6)
!4433 = !DILocation(line: 2929, column: 13, scope: !4432)
!4434 = !DILocation(line: 2930, column: 17, scope: !4432)
!4435 = !DILocation(line: 2930, column: 15, scope: !4432)
!4436 = !DILocation(line: 2931, column: 6, scope: !4432)
!4437 = !DILocation(line: 2932, column: 2, scope: !4422)
!4438 = !DILocation(line: 2935, column: 11, scope: !4439)
!4439 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 2934, column: 2)
!4440 = !DILocation(line: 2935, column: 9, scope: !4439)
!4441 = !DILocation(line: 2937, column: 36, scope: !4439)
!4442 = !DILocation(line: 2937, column: 13, scope: !4439)
!4443 = !DILocation(line: 2937, column: 11, scope: !4439)
!4444 = !DILocation(line: 2944, column: 8, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4439, file: !3, line: 2944, column: 8)
!4446 = !DILocation(line: 2944, column: 24, scope: !4445)
!4447 = !DILocation(line: 2945, column: 8, scope: !4445)
!4448 = !DILocation(line: 2945, column: 11, scope: !4445)
!4449 = !DILocation(line: 2944, column: 8, scope: !4439)
!4450 = !DILocalVariable(name: "marked", scope: !4451, file: !3, line: 2947, type: !1159)
!4451 = distinct !DILexicalBlock(scope: !4445, file: !3, line: 2946, column: 6)
!4452 = !DILocation(line: 2947, column: 13, scope: !4451)
!4453 = !DILocalVariable(name: "tmp", scope: !4451, file: !3, line: 2948, type: !1217)
!4454 = !DILocation(line: 2948, column: 12, scope: !4451)
!4455 = !DILocation(line: 2948, column: 42, scope: !4451)
!4456 = !DILocation(line: 2948, column: 18, scope: !4451)
!4457 = !DILocation(line: 2950, column: 12, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4451, file: !3, line: 2950, column: 12)
!4459 = !DILocation(line: 2950, column: 27, scope: !4458)
!4460 = !DILocation(line: 2950, column: 12, scope: !4451)
!4461 = !DILocation(line: 2952, column: 12, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4458, file: !3, line: 2951, column: 3)
!4463 = !DILocation(line: 2952, column: 10, scope: !4462)
!4464 = !DILocation(line: 2953, column: 9, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4462, file: !3, line: 2953, column: 9)
!4466 = !DILocation(line: 2953, column: 9, scope: !4462)
!4467 = !DILocation(line: 2954, column: 31, scope: !4465)
!4468 = !DILocation(line: 2954, column: 7, scope: !4465)
!4469 = !DILocation(line: 2956, column: 14, scope: !4465)
!4470 = !DILocation(line: 2957, column: 3, scope: !4462)
!4471 = !DILocation(line: 2958, column: 17, scope: !4472)
!4472 = distinct !DILexicalBlock(scope: !4458, file: !3, line: 2958, column: 17)
!4473 = !DILocation(line: 2958, column: 32, scope: !4472)
!4474 = !DILocation(line: 2958, column: 17, scope: !4458)
!4475 = !DILocation(line: 2960, column: 12, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 2959, column: 3)
!4477 = !DILocation(line: 2960, column: 10, scope: !4476)
!4478 = !DILocation(line: 2961, column: 12, scope: !4476)
!4479 = !DILocation(line: 2962, column: 3, scope: !4476)
!4480 = !DILocation(line: 2966, column: 13, scope: !4481)
!4481 = distinct !DILexicalBlock(scope: !4451, file: !3, line: 2966, column: 12)
!4482 = !DILocation(line: 2966, column: 12, scope: !4451)
!4483 = !DILocation(line: 2967, column: 3, scope: !4481)
!4484 = !DILocation(line: 2968, column: 6, scope: !4451)
!4485 = !DILocation(line: 2974, column: 8, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4439, file: !3, line: 2974, column: 8)
!4487 = !DILocation(line: 2974, column: 28, scope: !4486)
!4488 = !DILocation(line: 2975, column: 8, scope: !4486)
!4489 = !DILocation(line: 2975, column: 32, scope: !4486)
!4490 = !DILocation(line: 2975, column: 13, scope: !4486)
!4491 = !DILocation(line: 2976, column: 5, scope: !4486)
!4492 = !DILocation(line: 2976, column: 8, scope: !4486)
!4493 = !DILocation(line: 2976, column: 31, scope: !4486)
!4494 = !DILocation(line: 2976, column: 28, scope: !4486)
!4495 = !DILocation(line: 2974, column: 8, scope: !4439)
!4496 = !DILocalVariable(name: "offs", scope: !4497, file: !3, line: 2978, type: !1136)
!4497 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2977, column: 6)
!4498 = !DILocation(line: 2978, column: 12, scope: !4497)
!4499 = !DILocation(line: 2979, column: 13, scope: !4497)
!4500 = !DILocation(line: 2980, column: 41, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 2980, column: 12)
!4502 = !DILocation(line: 2980, column: 20, scope: !4501)
!4503 = !DILocation(line: 2980, column: 17, scope: !4501)
!4504 = !DILocation(line: 2980, column: 12, scope: !4497)
!4505 = !DILocation(line: 2982, column: 10, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4501, file: !3, line: 2981, column: 10)
!4507 = !DILocation(line: 2983, column: 14, scope: !4506)
!4508 = !DILocation(line: 2983, column: 12, scope: !4506)
!4509 = !DILocation(line: 2984, column: 12, scope: !4506)
!4510 = !DILocation(line: 2985, column: 10, scope: !4506)
!4511 = !DILocation(line: 2986, column: 3, scope: !4506)
!4512 = !DILocation(line: 2987, column: 6, scope: !4497)
!4513 = !DILocation(line: 2988, column: 13, scope: !4514)
!4514 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2988, column: 13)
!4515 = !DILocation(line: 2988, column: 13, scope: !4486)
!4516 = !DILocation(line: 2991, column: 11, scope: !4514)
!4517 = !DILocation(line: 2991, column: 6, scope: !4514)
!4518 = !DILocation(line: 2998, column: 13, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 2993, column: 6)
!4520 = !DILocation(line: 3001, column: 5, scope: !4419)
!4521 = !DILocation(line: 3002, column: 12, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 3002, column: 12)
!4523 = !DILocation(line: 3002, column: 18, scope: !4522)
!4524 = !DILocation(line: 3002, column: 12, scope: !4412)
!4525 = !DILocation(line: 3004, column: 14, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4522, file: !3, line: 3003, column: 5)
!4527 = !DILocation(line: 3005, column: 12, scope: !4526)
!4528 = !DILocation(line: 3006, column: 16, scope: !4526)
!4529 = !DILocation(line: 3006, column: 14, scope: !4526)
!4530 = !DILocation(line: 3007, column: 5, scope: !4526)
!4531 = !DILocation(line: 3008, column: 12, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4522, file: !3, line: 3008, column: 12)
!4533 = !DILocation(line: 3009, column: 5, scope: !4532)
!4534 = !DILocation(line: 3009, column: 9, scope: !4532)
!4535 = !DILocation(line: 3010, column: 9, scope: !4532)
!4536 = !DILocation(line: 3010, column: 13, scope: !4532)
!4537 = !DILocation(line: 3011, column: 6, scope: !4532)
!4538 = !DILocation(line: 3011, column: 9, scope: !4532)
!4539 = !DILocation(line: 3011, column: 32, scope: !4532)
!4540 = !DILocation(line: 3012, column: 6, scope: !4532)
!4541 = !DILocation(line: 3012, column: 9, scope: !4532)
!4542 = !DILocation(line: 3012, column: 32, scope: !4532)
!4543 = !DILocation(line: 3014, column: 6, scope: !4532)
!4544 = !DILocation(line: 3014, column: 9, scope: !4532)
!4545 = !DILocation(line: 3014, column: 32, scope: !4532)
!4546 = !DILocation(line: 3008, column: 12, scope: !4522)
!4547 = !DILocation(line: 3024, column: 11, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4549, file: !3, line: 3024, column: 11)
!4549 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 3023, column: 5)
!4550 = !DILocation(line: 3024, column: 11, scope: !4549)
!4551 = !DILocation(line: 3026, column: 11, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4548, file: !3, line: 3025, column: 2)
!4553 = !DILocation(line: 3027, column: 9, scope: !4552)
!4554 = !DILocation(line: 3028, column: 8, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4552, file: !3, line: 3028, column: 8)
!4556 = !DILocation(line: 3028, column: 31, scope: !4555)
!4557 = !DILocation(line: 3028, column: 8, scope: !4552)
!4558 = !DILocation(line: 3029, column: 6, scope: !4555)
!4559 = !DILocation(line: 3030, column: 13, scope: !4552)
!4560 = !DILocation(line: 3030, column: 11, scope: !4552)
!4561 = !DILocation(line: 3031, column: 2, scope: !4552)
!4562 = !DILocation(line: 3034, column: 9, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4548, file: !3, line: 3033, column: 2)
!4564 = !DILocation(line: 3037, column: 13, scope: !4563)
!4565 = !DILocation(line: 3037, column: 11, scope: !4563)
!4566 = !DILocation(line: 3044, column: 14, scope: !4549)
!4567 = !DILocation(line: 3044, column: 12, scope: !4549)
!4568 = !DILocation(line: 3045, column: 26, scope: !4549)
!4569 = !DILocation(line: 3045, column: 7, scope: !4549)
!4570 = !DILocation(line: 3045, column: 24, scope: !4549)
!4571 = !DILocation(line: 3046, column: 5, scope: !4549)
!4572 = !DILocation(line: 3047, column: 12, scope: !4573)
!4573 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 3047, column: 12)
!4574 = !DILocation(line: 3048, column: 5, scope: !4573)
!4575 = !DILocation(line: 3048, column: 8, scope: !4573)
!4576 = !DILocation(line: 3047, column: 12, scope: !4532)
!4577 = !DILocation(line: 3050, column: 12, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4573, file: !3, line: 3049, column: 5)
!4579 = !DILocation(line: 3051, column: 16, scope: !4578)
!4580 = !DILocation(line: 3051, column: 14, scope: !4578)
!4581 = !DILocation(line: 3052, column: 5, scope: !4578)
!4582 = !DILocation(line: 3053, column: 12, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4573, file: !3, line: 3053, column: 12)
!4584 = !DILocation(line: 3054, column: 5, scope: !4583)
!4585 = !DILocation(line: 3054, column: 8, scope: !4583)
!4586 = !DILocation(line: 3054, column: 34, scope: !4583)
!4587 = !DILocation(line: 3055, column: 5, scope: !4583)
!4588 = !DILocation(line: 3055, column: 8, scope: !4583)
!4589 = !DILocation(line: 3053, column: 12, scope: !4573)
!4590 = !DILocation(line: 3057, column: 12, scope: !4591)
!4591 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 3056, column: 5)
!4592 = !DILocation(line: 3060, column: 16, scope: !4591)
!4593 = !DILocation(line: 3060, column: 14, scope: !4591)
!4594 = !DILocation(line: 3061, column: 5, scope: !4591)
!4595 = !DILocation(line: 3062, column: 12, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 3062, column: 12)
!4597 = !DILocation(line: 3063, column: 5, scope: !4596)
!4598 = !DILocation(line: 3063, column: 8, scope: !4596)
!4599 = !DILocation(line: 3063, column: 34, scope: !4596)
!4600 = !DILocation(line: 3062, column: 12, scope: !4583)
!4601 = !DILocalVariable(name: "offs", scope: !4602, file: !3, line: 3076, type: !1136)
!4602 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3064, column: 5)
!4603 = !DILocation(line: 3076, column: 11, scope: !4602)
!4604 = !DILocation(line: 3077, column: 12, scope: !4602)
!4605 = !DILocation(line: 3078, column: 14, scope: !4602)
!4606 = !DILocation(line: 3079, column: 40, scope: !4607)
!4607 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 3079, column: 11)
!4608 = !DILocation(line: 3079, column: 19, scope: !4607)
!4609 = !DILocation(line: 3079, column: 16, scope: !4607)
!4610 = !DILocation(line: 3079, column: 11, scope: !4602)
!4611 = !DILocation(line: 3080, column: 16, scope: !4607)
!4612 = !DILocation(line: 3080, column: 14, scope: !4607)
!4613 = !DILocation(line: 3080, column: 9, scope: !4607)
!4614 = !DILocation(line: 3083, column: 9, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 3082, column: 9)
!4616 = !DILocation(line: 3084, column: 13, scope: !4615)
!4617 = !DILocation(line: 3084, column: 11, scope: !4615)
!4618 = !DILocation(line: 3085, column: 9, scope: !4615)
!4619 = !DILocation(line: 3087, column: 5, scope: !4602)
!4620 = !DILocation(line: 3088, column: 12, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3088, column: 12)
!4622 = !DILocation(line: 3088, column: 28, scope: !4621)
!4623 = !DILocation(line: 3088, column: 12, scope: !4596)
!4624 = !DILocalVariable(name: "subtype", scope: !4625, file: !3, line: 3090, type: !1040)
!4625 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 3089, column: 5)
!4626 = !DILocation(line: 3090, column: 12, scope: !4625)
!4627 = !DILocation(line: 3095, column: 11, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 3095, column: 11)
!4629 = !DILocation(line: 3095, column: 28, scope: !4628)
!4630 = !DILocation(line: 3095, column: 11, scope: !4625)
!4631 = !DILocation(line: 3096, column: 2, scope: !4628)
!4632 = !DILocation(line: 3098, column: 17, scope: !4625)
!4633 = !DILocation(line: 3098, column: 15, scope: !4625)
!4634 = !DILocation(line: 3105, column: 26, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 3102, column: 11)
!4636 = !DILocation(line: 3105, column: 32, scope: !4635)
!4637 = !DILocation(line: 3105, column: 50, scope: !4635)
!4638 = !DILocation(line: 3105, column: 2, scope: !4635)
!4639 = !DILocation(line: 3110, column: 26, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 3107, column: 11)
!4641 = !DILocation(line: 3110, column: 32, scope: !4640)
!4642 = !DILocation(line: 3110, column: 50, scope: !4640)
!4643 = !DILocation(line: 3110, column: 2, scope: !4640)
!4644 = !DILocation(line: 3111, column: 7, scope: !4625)
!4645 = !DILocation(line: 3117, column: 5, scope: !4621)
!4646 = !DILocation(line: 3120, column: 3, scope: !4351)
!4647 = !DILocation(line: 3127, column: 3, scope: !4351)
!4648 = !DILocation(line: 3128, column: 23, scope: !4351)
!4649 = !DILocation(line: 3128, column: 29, scope: !4351)
!4650 = !DILocation(line: 3128, column: 37, scope: !4351)
!4651 = !DILocation(line: 3128, column: 3, scope: !4351)
!4652 = !DILocation(line: 3129, column: 16, scope: !4351)
!4653 = !DILocation(line: 3129, column: 3, scope: !4351)
!4654 = !DILocation(line: 3130, column: 32, scope: !4351)
!4655 = !DILocation(line: 3130, column: 38, scope: !4351)
!4656 = !DILocation(line: 3130, column: 44, scope: !4351)
!4657 = !DILocation(line: 3130, column: 53, scope: !4351)
!4658 = !DILocation(line: 3130, column: 3, scope: !4351)
!4659 = !DILocation(line: 3135, column: 3, scope: !4351)
!4660 = !DILocation(line: 3136, column: 1, scope: !4351)
!4661 = distinct !DISubprogram(name: "dbxout_syms", scope: !3, file: !3, line: 3284, type: !4662, scopeLine: 3285, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4662 = !DISubroutineType(types: !4663)
!4663 = !{!1136, !1040}
!4664 = !DILocalVariable(name: "syms", arg: 1, scope: !4661, file: !3, line: 3284, type: !1040)
!4665 = !DILocation(line: 3284, column: 19, scope: !4661)
!4666 = !DILocalVariable(name: "result", scope: !4661, file: !3, line: 3286, type: !1136)
!4667 = !DILocation(line: 3286, column: 7, scope: !4661)
!4668 = !DILocalVariable(name: "comm_prev", scope: !4661, file: !3, line: 3287, type: !1242)
!4669 = !DILocation(line: 3287, column: 15, scope: !4661)
!4670 = !DILocalVariable(name: "syms_prev", scope: !4661, file: !3, line: 3288, type: !1040)
!4671 = !DILocation(line: 3288, column: 8, scope: !4661)
!4672 = !DILocation(line: 3290, column: 3, scope: !4661)
!4673 = !DILocation(line: 3290, column: 10, scope: !4661)
!4674 = !DILocalVariable(name: "temp", scope: !4675, file: !3, line: 3292, type: !1136)
!4675 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 3291, column: 5)
!4676 = !DILocation(line: 3292, column: 11, scope: !4675)
!4677 = !DILocalVariable(name: "copen", scope: !4675, file: !3, line: 3292, type: !1136)
!4678 = !DILocation(line: 3292, column: 17, scope: !4675)
!4679 = !DILocalVariable(name: "cclos", scope: !4675, file: !3, line: 3292, type: !1136)
!4680 = !DILocation(line: 3292, column: 24, scope: !4675)
!4681 = !DILocalVariable(name: "comm_new", scope: !4675, file: !3, line: 3293, type: !1242)
!4682 = !DILocation(line: 3293, column: 19, scope: !4675)
!4683 = !DILocation(line: 3298, column: 39, scope: !4675)
!4684 = !DILocation(line: 3298, column: 18, scope: !4675)
!4685 = !DILocation(line: 3298, column: 16, scope: !4675)
!4686 = !DILocation(line: 3299, column: 15, scope: !4675)
!4687 = !DILocation(line: 3299, column: 24, scope: !4675)
!4688 = !DILocation(line: 3300, column: 15, scope: !4675)
!4689 = !DILocation(line: 3300, column: 19, scope: !4675)
!4690 = !DILocation(line: 3300, column: 29, scope: !4675)
!4691 = !DILocation(line: 3300, column: 37, scope: !4675)
!4692 = !DILocation(line: 3300, column: 48, scope: !4675)
!4693 = !DILocation(line: 3300, column: 58, scope: !4675)
!4694 = !DILocation(line: 3300, column: 40, scope: !4675)
!4695 = !DILocation(line: 0, scope: !4675)
!4696 = !DILocation(line: 3299, column: 13, scope: !4675)
!4697 = !DILocation(line: 3301, column: 15, scope: !4675)
!4698 = !DILocation(line: 3301, column: 25, scope: !4675)
!4699 = !DILocation(line: 3302, column: 15, scope: !4675)
!4700 = !DILocation(line: 3302, column: 19, scope: !4675)
!4701 = !DILocation(line: 3302, column: 28, scope: !4675)
!4702 = !DILocation(line: 3302, column: 36, scope: !4675)
!4703 = !DILocation(line: 3302, column: 47, scope: !4675)
!4704 = !DILocation(line: 3302, column: 57, scope: !4675)
!4705 = !DILocation(line: 3302, column: 39, scope: !4675)
!4706 = !DILocation(line: 3301, column: 13, scope: !4675)
!4707 = !DILocation(line: 3303, column: 11, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4675, file: !3, line: 3303, column: 11)
!4709 = !DILocation(line: 3303, column: 11, scope: !4675)
!4710 = !DILocation(line: 3304, column: 29, scope: !4708)
!4711 = !DILocation(line: 3304, column: 40, scope: !4708)
!4712 = !DILocation(line: 3304, column: 9, scope: !4708)
!4713 = !DILocation(line: 3305, column: 11, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4675, file: !3, line: 3305, column: 11)
!4715 = !DILocation(line: 3305, column: 11, scope: !4675)
!4716 = !DILocation(line: 3307, column: 31, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4714, file: !3, line: 3306, column: 9)
!4718 = !DILocation(line: 3307, column: 37, scope: !4717)
!4719 = !DILocation(line: 3307, column: 11, scope: !4717)
!4720 = !DILocation(line: 3308, column: 23, scope: !4717)
!4721 = !DILocation(line: 3308, column: 21, scope: !4717)
!4722 = !DILocation(line: 3309, column: 9, scope: !4717)
!4723 = !DILocation(line: 3310, column: 19, scope: !4675)
!4724 = !DILocation(line: 3310, column: 17, scope: !4675)
!4725 = !DILocation(line: 3312, column: 32, scope: !4675)
!4726 = !DILocation(line: 3312, column: 17, scope: !4675)
!4727 = !DILocation(line: 3312, column: 14, scope: !4675)
!4728 = !DILocation(line: 3313, column: 14, scope: !4675)
!4729 = !DILocation(line: 3313, column: 12, scope: !4675)
!4730 = distinct !{!4730, !4672, !4731}
!4731 = !DILocation(line: 3314, column: 5, scope: !4661)
!4732 = !DILocation(line: 3316, column: 7, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 3316, column: 7)
!4734 = !DILocation(line: 3316, column: 17, scope: !4733)
!4735 = !DILocation(line: 3316, column: 7, scope: !4661)
!4736 = !DILocation(line: 3317, column: 25, scope: !4733)
!4737 = !DILocation(line: 3317, column: 36, scope: !4733)
!4738 = !DILocation(line: 3317, column: 5, scope: !4733)
!4739 = !DILocation(line: 3319, column: 10, scope: !4661)
!4740 = !DILocation(line: 3319, column: 3, scope: !4661)
!4741 = distinct !DISubprogram(name: "dbxout_common_check", scope: !3, file: !3, line: 3193, type: !4742, scopeLine: 3194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4742 = !DISubroutineType(types: !4743)
!4743 = !{!1242, !1040, !2733}
!4744 = !DILocalVariable(name: "decl", arg: 1, scope: !4741, file: !3, line: 3193, type: !1040)
!4745 = !DILocation(line: 3193, column: 27, scope: !4741)
!4746 = !DILocalVariable(name: "value", arg: 2, scope: !4741, file: !3, line: 3193, type: !2733)
!4747 = !DILocation(line: 3193, column: 38, scope: !4741)
!4748 = !DILocalVariable(name: "home", scope: !4741, file: !3, line: 3195, type: !1217)
!4749 = !DILocation(line: 3195, column: 7, scope: !4741)
!4750 = !DILocalVariable(name: "sym_addr", scope: !4741, file: !3, line: 3196, type: !1217)
!4751 = !DILocation(line: 3196, column: 7, scope: !4741)
!4752 = !DILocalVariable(name: "name", scope: !4741, file: !3, line: 3197, type: !1242)
!4753 = !DILocation(line: 3197, column: 15, scope: !4741)
!4754 = !DILocation(line: 3207, column: 7, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 3207, column: 7)
!4756 = !DILocation(line: 3207, column: 24, scope: !4755)
!4757 = !DILocation(line: 3208, column: 7, scope: !4755)
!4758 = !DILocation(line: 3208, column: 11, scope: !4755)
!4759 = !DILocation(line: 3209, column: 7, scope: !4755)
!4760 = !DILocation(line: 3209, column: 11, scope: !4755)
!4761 = !DILocation(line: 3210, column: 7, scope: !4755)
!4762 = !DILocation(line: 3210, column: 10, scope: !4755)
!4763 = !DILocation(line: 3211, column: 7, scope: !4755)
!4764 = !DILocation(line: 3211, column: 11, scope: !4755)
!4765 = !DILocation(line: 3207, column: 7, scope: !4741)
!4766 = !DILocation(line: 3212, column: 5, scope: !4755)
!4767 = !DILocation(line: 3214, column: 10, scope: !4741)
!4768 = !DILocation(line: 3214, column: 8, scope: !4741)
!4769 = !DILocation(line: 3215, column: 7, scope: !4770)
!4770 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 3215, column: 7)
!4771 = !DILocation(line: 3215, column: 12, scope: !4770)
!4772 = !DILocation(line: 3215, column: 24, scope: !4770)
!4773 = !DILocation(line: 3215, column: 27, scope: !4770)
!4774 = !DILocation(line: 3215, column: 43, scope: !4770)
!4775 = !DILocation(line: 3215, column: 7, scope: !4741)
!4776 = !DILocation(line: 3216, column: 5, scope: !4770)
!4777 = !DILocation(line: 3218, column: 34, scope: !4741)
!4778 = !DILocation(line: 3218, column: 14, scope: !4741)
!4779 = !DILocation(line: 3218, column: 12, scope: !4741)
!4780 = !DILocation(line: 3219, column: 7, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 3219, column: 7)
!4782 = !DILocation(line: 3219, column: 16, scope: !4781)
!4783 = !DILocation(line: 3219, column: 28, scope: !4781)
!4784 = !DILocation(line: 3219, column: 31, scope: !4781)
!4785 = !DILocation(line: 3219, column: 51, scope: !4781)
!4786 = !DILocation(line: 3219, column: 7, scope: !4741)
!4787 = !DILocation(line: 3220, column: 5, scope: !4781)
!4788 = !DILocation(line: 3222, column: 14, scope: !4741)
!4789 = !DILocation(line: 3222, column: 12, scope: !4741)
!4790 = !DILocation(line: 3223, column: 7, scope: !4791)
!4791 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 3223, column: 7)
!4792 = !DILocation(line: 3223, column: 27, scope: !4791)
!4793 = !DILocation(line: 3223, column: 7, scope: !4741)
!4794 = !DILocation(line: 3224, column: 16, scope: !4791)
!4795 = !DILocation(line: 3224, column: 14, scope: !4791)
!4796 = !DILocation(line: 3224, column: 5, scope: !4791)
!4797 = !DILocation(line: 3225, column: 8, scope: !4798)
!4798 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 3225, column: 7)
!4799 = !DILocation(line: 3225, column: 28, scope: !4798)
!4800 = !DILocation(line: 3225, column: 42, scope: !4798)
!4801 = !DILocation(line: 3225, column: 45, scope: !4798)
!4802 = !DILocation(line: 3225, column: 65, scope: !4798)
!4803 = !DILocation(line: 3226, column: 7, scope: !4798)
!4804 = !DILocation(line: 3226, column: 10, scope: !4798)
!4805 = !DILocation(line: 3226, column: 30, scope: !4798)
!4806 = !DILocation(line: 3225, column: 7, scope: !4741)
!4807 = !DILocalVariable(name: "c_decl", scope: !4808, file: !3, line: 3236, type: !1040)
!4808 = distinct !DILexicalBlock(scope: !4798, file: !3, line: 3227, column: 5)
!4809 = !DILocation(line: 3236, column: 12, scope: !4808)
!4810 = !DILocation(line: 3238, column: 15, scope: !4808)
!4811 = !DILocation(line: 3238, column: 7, scope: !4808)
!4812 = !DILocation(line: 3241, column: 15, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !4814, file: !3, line: 3241, column: 15)
!4814 = distinct !DILexicalBlock(scope: !4808, file: !3, line: 3239, column: 9)
!4815 = !DILocation(line: 3241, column: 15, scope: !4814)
!4816 = !DILocation(line: 3244, column: 25, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 3242, column: 13)
!4818 = !DILocation(line: 3244, column: 45, scope: !4817)
!4819 = !DILocation(line: 3244, column: 17, scope: !4817)
!4820 = !DILocation(line: 3243, column: 20, scope: !4817)
!4821 = !DILocation(line: 3245, column: 24, scope: !4817)
!4822 = !DILocation(line: 3245, column: 16, scope: !4817)
!4823 = !DILocation(line: 3245, column: 22, scope: !4817)
!4824 = !DILocation(line: 3246, column: 24, scope: !4817)
!4825 = !DILocation(line: 3246, column: 22, scope: !4817)
!4826 = !DILocation(line: 3247, column: 13, scope: !4817)
!4827 = !DILocation(line: 3251, column: 25, scope: !4828)
!4828 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 3249, column: 13)
!4829 = !DILocation(line: 3251, column: 45, scope: !4828)
!4830 = !DILocation(line: 3251, column: 17, scope: !4828)
!4831 = !DILocation(line: 3250, column: 20, scope: !4828)
!4832 = !DILocation(line: 3252, column: 24, scope: !4828)
!4833 = !DILocation(line: 3252, column: 16, scope: !4828)
!4834 = !DILocation(line: 3252, column: 22, scope: !4828)
!4835 = !DILocation(line: 3253, column: 24, scope: !4828)
!4836 = !DILocation(line: 3253, column: 22, scope: !4828)
!4837 = !DILocation(line: 3255, column: 11, scope: !4814)
!4838 = !DILocation(line: 3258, column: 26, scope: !4814)
!4839 = !DILocation(line: 3258, column: 46, scope: !4814)
!4840 = !DILocation(line: 3258, column: 18, scope: !4814)
!4841 = !DILocation(line: 3258, column: 16, scope: !4814)
!4842 = !DILocation(line: 3259, column: 12, scope: !4814)
!4843 = !DILocation(line: 3259, column: 18, scope: !4814)
!4844 = !DILocation(line: 3260, column: 20, scope: !4814)
!4845 = !DILocation(line: 3260, column: 18, scope: !4814)
!4846 = !DILocation(line: 3261, column: 11, scope: !4814)
!4847 = !DILocation(line: 3264, column: 11, scope: !4814)
!4848 = !DILocation(line: 3266, column: 9, scope: !4814)
!4849 = !DILocation(line: 3271, column: 11, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4808, file: !3, line: 3271, column: 11)
!4851 = !DILocation(line: 3271, column: 18, scope: !4850)
!4852 = !DILocation(line: 3271, column: 26, scope: !4850)
!4853 = !DILocation(line: 3271, column: 30, scope: !4850)
!4854 = !DILocation(line: 3271, column: 11, scope: !4808)
!4855 = !DILocation(line: 3272, column: 14, scope: !4850)
!4856 = !DILocation(line: 3272, column: 9, scope: !4850)
!4857 = !DILocation(line: 3273, column: 5, scope: !4808)
!4858 = !DILocation(line: 3275, column: 10, scope: !4798)
!4859 = !DILocation(line: 3277, column: 10, scope: !4741)
!4860 = !DILocation(line: 3277, column: 3, scope: !4741)
!4861 = !DILocation(line: 3278, column: 1, scope: !4741)
!4862 = distinct !DISubprogram(name: "dbxout_common_name", scope: !3, file: !3, line: 3180, type: !4863, scopeLine: 3181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4863 = !DISubroutineType(types: !4864)
!4864 = !{null, !1040, !1242, !4111}
!4865 = !DILocalVariable(name: "decl", arg: 1, scope: !4862, file: !3, line: 3180, type: !1040)
!4866 = !DILocation(line: 3180, column: 26, scope: !4862)
!4867 = !DILocalVariable(name: "name", arg: 2, scope: !4862, file: !3, line: 3180, type: !1242)
!4868 = !DILocation(line: 3180, column: 44, scope: !4862)
!4869 = !DILocalVariable(name: "op", arg: 3, scope: !4862, file: !3, line: 3180, type: !4111)
!4870 = !DILocation(line: 3180, column: 65, scope: !4862)
!4871 = !DILocation(line: 3182, column: 3, scope: !4862)
!4872 = !DILocation(line: 3183, column: 3, scope: !4862)
!4873 = !DILocation(line: 3184, column: 32, scope: !4862)
!4874 = !DILocation(line: 3184, column: 38, scope: !4862)
!4875 = !DILocation(line: 3184, column: 3, scope: !4862)
!4876 = !DILocation(line: 3185, column: 1, scope: !4862)
!4877 = distinct !DISubprogram(name: "dbxout_parms", scope: !3, file: !3, line: 3335, type: !2246, scopeLine: 3336, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!4878 = !DILocalVariable(name: "parms", arg: 1, scope: !4877, file: !3, line: 3335, type: !1040)
!4879 = !DILocation(line: 3335, column: 20, scope: !4877)
!4880 = !DILocation(line: 3337, column: 3, scope: !4877)
!4881 = !DILocation(line: 3338, column: 3, scope: !4877)
!4882 = !DILocation(line: 3340, column: 3, scope: !4877)
!4883 = !DILocation(line: 3340, column: 10, scope: !4884)
!4884 = distinct !DILexicalBlock(scope: !4885, file: !3, line: 3340, column: 3)
!4885 = distinct !DILexicalBlock(scope: !4877, file: !3, line: 3340, column: 3)
!4886 = !DILocation(line: 3340, column: 3, scope: !4885)
!4887 = !DILocation(line: 3341, column: 9, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 3341, column: 9)
!4889 = !DILocation(line: 3342, column: 2, scope: !4888)
!4890 = !DILocation(line: 3342, column: 5, scope: !4888)
!4891 = !DILocation(line: 3342, column: 26, scope: !4888)
!4892 = !DILocation(line: 3342, column: 23, scope: !4888)
!4893 = !DILocation(line: 3343, column: 2, scope: !4888)
!4894 = !DILocation(line: 3343, column: 5, scope: !4888)
!4895 = !DILocation(line: 3344, column: 2, scope: !4888)
!4896 = !DILocation(line: 3344, column: 5, scope: !4888)
!4897 = !DILocation(line: 3341, column: 9, scope: !4884)
!4898 = !DILocalVariable(name: "eff_type", scope: !4899, file: !3, line: 3346, type: !1040)
!4899 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 3345, column: 7)
!4900 = !DILocation(line: 3346, column: 7, scope: !4899)
!4901 = !DILocalVariable(name: "letter", scope: !4899, file: !3, line: 3347, type: !1139)
!4902 = !DILocation(line: 3347, column: 7, scope: !4899)
!4903 = !DILocalVariable(name: "code", scope: !4899, file: !3, line: 3348, type: !4111)
!4904 = !DILocation(line: 3348, column: 17, scope: !4899)
!4905 = !DILocalVariable(name: "number", scope: !4899, file: !3, line: 3349, type: !1136)
!4906 = !DILocation(line: 3349, column: 6, scope: !4899)
!4907 = !DILocation(line: 3354, column: 22, scope: !4899)
!4908 = !DILocation(line: 3354, column: 6, scope: !4899)
!4909 = !DILocation(line: 3353, column: 2, scope: !4899)
!4910 = !DILocation(line: 3354, column: 4, scope: !4899)
!4911 = !DILocation(line: 3355, column: 2, scope: !4899)
!4912 = !DILocation(line: 3365, column: 6, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 3365, column: 6)
!4914 = !DILocation(line: 3365, column: 6, scope: !4899)
!4915 = !DILocalVariable(name: "inrtl", scope: !4916, file: !3, line: 3367, type: !1217)
!4916 = distinct !DILexicalBlock(scope: !4913, file: !3, line: 3366, column: 4)
!4917 = !DILocation(line: 3367, column: 10, scope: !4916)
!4918 = !DILocation(line: 3367, column: 18, scope: !4916)
!4919 = !DILocation(line: 3373, column: 10, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4916, file: !3, line: 3373, column: 10)
!4921 = !DILocation(line: 3373, column: 27, scope: !4920)
!4922 = !DILocation(line: 3374, column: 3, scope: !4920)
!4923 = !DILocation(line: 3374, column: 6, scope: !4920)
!4924 = !DILocation(line: 3373, column: 10, scope: !4916)
!4925 = !DILocation(line: 3375, column: 17, scope: !4920)
!4926 = !DILocation(line: 3375, column: 15, scope: !4920)
!4927 = !DILocation(line: 3375, column: 8, scope: !4920)
!4928 = !DILocation(line: 3377, column: 15, scope: !4920)
!4929 = !DILocation(line: 3379, column: 11, scope: !4916)
!4930 = !DILocation(line: 3380, column: 15, scope: !4916)
!4931 = !DILocation(line: 3380, column: 13, scope: !4916)
!4932 = !DILocation(line: 3381, column: 13, scope: !4916)
!4933 = !DILocation(line: 3395, column: 17, scope: !4916)
!4934 = !DILocation(line: 3395, column: 15, scope: !4916)
!4935 = !DILocation(line: 3396, column: 4, scope: !4916)
!4936 = !DILocation(line: 3397, column: 11, scope: !4937)
!4937 = distinct !DILexicalBlock(scope: !4913, file: !3, line: 3397, column: 11)
!4938 = !DILocation(line: 3397, column: 11, scope: !4913)
!4939 = !DILocalVariable(name: "best_rtl", scope: !4940, file: !3, line: 3399, type: !1217)
!4940 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 3398, column: 4)
!4941 = !DILocation(line: 3399, column: 10, scope: !4940)
!4942 = !DILocation(line: 3402, column: 11, scope: !4940)
!4943 = !DILocation(line: 3403, column: 13, scope: !4940)
!4944 = !DILocation(line: 3407, column: 17, scope: !4940)
!4945 = !DILocation(line: 3407, column: 15, scope: !4940)
!4946 = !DILocation(line: 3415, column: 10, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 3415, column: 10)
!4948 = !DILocation(line: 3415, column: 35, scope: !4947)
!4949 = !DILocation(line: 3415, column: 10, scope: !4940)
!4950 = !DILocation(line: 3416, column: 19, scope: !4947)
!4951 = !DILocation(line: 3416, column: 17, scope: !4947)
!4952 = !DILocation(line: 3416, column: 8, scope: !4947)
!4953 = !DILocation(line: 3417, column: 15, scope: !4954)
!4954 = distinct !DILexicalBlock(scope: !4947, file: !3, line: 3417, column: 15)
!4955 = !DILocation(line: 3417, column: 52, scope: !4954)
!4956 = !DILocation(line: 3417, column: 15, scope: !4947)
!4957 = !DILocation(line: 3418, column: 19, scope: !4954)
!4958 = !DILocation(line: 3418, column: 17, scope: !4954)
!4959 = !DILocation(line: 3418, column: 8, scope: !4954)
!4960 = !DILocation(line: 3420, column: 19, scope: !4954)
!4961 = !DILocation(line: 3420, column: 17, scope: !4954)
!4962 = !DILocation(line: 3422, column: 15, scope: !4940)
!4963 = !DILocation(line: 3422, column: 13, scope: !4940)
!4964 = !DILocation(line: 3423, column: 4, scope: !4940)
!4965 = !DILocation(line: 3424, column: 11, scope: !4966)
!4966 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 3424, column: 11)
!4967 = !DILocation(line: 3425, column: 4, scope: !4966)
!4968 = !DILocation(line: 3425, column: 7, scope: !4966)
!4969 = !DILocation(line: 3426, column: 4, scope: !4966)
!4970 = !DILocation(line: 3426, column: 7, scope: !4966)
!4971 = !DILocation(line: 3426, column: 42, scope: !4966)
!4972 = !DILocation(line: 3427, column: 4, scope: !4966)
!4973 = !DILocation(line: 3427, column: 7, scope: !4966)
!4974 = !DILocation(line: 3427, column: 42, scope: !4966)
!4975 = !DILocation(line: 3429, column: 4, scope: !4966)
!4976 = !DILocation(line: 3429, column: 7, scope: !4966)
!4977 = !DILocation(line: 3429, column: 42, scope: !4966)
!4978 = !DILocation(line: 3424, column: 11, scope: !4937)
!4979 = !DILocation(line: 3439, column: 11, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 3432, column: 4)
!4981 = !DILocation(line: 3442, column: 16, scope: !4980)
!4982 = !DILocation(line: 3442, column: 15, scope: !4980)
!4983 = !DILocation(line: 3442, column: 13, scope: !4980)
!4984 = !DILocation(line: 3444, column: 17, scope: !4980)
!4985 = !DILocation(line: 3444, column: 15, scope: !4980)
!4986 = !DILocation(line: 3451, column: 10, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4980, file: !3, line: 3451, column: 10)
!4988 = !DILocation(line: 3451, column: 45, scope: !4987)
!4989 = !DILocation(line: 3451, column: 10, scope: !4980)
!4990 = !DILocation(line: 3452, column: 17, scope: !4987)
!4991 = !DILocation(line: 3452, column: 15, scope: !4987)
!4992 = !DILocation(line: 3452, column: 8, scope: !4987)
!4993 = !DILocation(line: 3454, column: 17, scope: !4987)
!4994 = !DILocation(line: 3454, column: 15, scope: !4987)
!4995 = !DILocation(line: 3455, column: 4, scope: !4980)
!4996 = !DILocation(line: 3456, column: 11, scope: !4997)
!4997 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 3456, column: 11)
!4998 = !DILocation(line: 3457, column: 4, scope: !4997)
!4999 = !DILocation(line: 3457, column: 7, scope: !4997)
!5000 = !DILocation(line: 3456, column: 11, scope: !4966)
!5001 = !DILocation(line: 3464, column: 11, scope: !5002)
!5002 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 3458, column: 4)
!5003 = !DILocation(line: 3465, column: 13, scope: !5002)
!5004 = !DILocation(line: 3466, column: 17, scope: !5002)
!5005 = !DILocation(line: 3466, column: 15, scope: !5002)
!5006 = !DILocation(line: 3468, column: 11, scope: !5007)
!5007 = distinct !DILexicalBlock(scope: !5002, file: !3, line: 3468, column: 10)
!5008 = !DILocation(line: 3468, column: 10, scope: !5002)
!5009 = !DILocation(line: 3469, column: 17, scope: !5007)
!5010 = !DILocation(line: 3469, column: 15, scope: !5007)
!5011 = !DILocation(line: 3469, column: 8, scope: !5007)
!5012 = !DILocation(line: 3471, column: 15, scope: !5007)
!5013 = !DILocation(line: 3473, column: 15, scope: !5002)
!5014 = !DILocation(line: 3473, column: 13, scope: !5002)
!5015 = !DILocation(line: 3475, column: 4, scope: !5002)
!5016 = !DILocation(line: 3476, column: 11, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 3476, column: 11)
!5018 = !DILocation(line: 3477, column: 4, scope: !5017)
!5019 = !DILocation(line: 3477, column: 7, scope: !5017)
!5020 = !DILocation(line: 3477, column: 37, scope: !5017)
!5021 = !DILocation(line: 3477, column: 34, scope: !5017)
!5022 = !DILocation(line: 3481, column: 4, scope: !5017)
!5023 = !DILocation(line: 3481, column: 9, scope: !5017)
!5024 = !DILocation(line: 3476, column: 11, scope: !4997)
!5025 = !DILocation(line: 3485, column: 11, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5017, file: !3, line: 3482, column: 4)
!5027 = !DILocation(line: 3486, column: 13, scope: !5026)
!5028 = !DILocation(line: 3487, column: 17, scope: !5026)
!5029 = !DILocation(line: 3487, column: 15, scope: !5026)
!5030 = !DILocation(line: 3493, column: 11, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !5026, file: !3, line: 3493, column: 10)
!5032 = !DILocation(line: 3493, column: 10, scope: !5026)
!5033 = !DILocation(line: 3494, column: 17, scope: !5031)
!5034 = !DILocation(line: 3494, column: 15, scope: !5031)
!5035 = !DILocation(line: 3494, column: 8, scope: !5031)
!5036 = !DILocation(line: 3496, column: 15, scope: !5031)
!5037 = !DILocation(line: 3505, column: 4, scope: !5026)
!5038 = !DILocation(line: 3508, column: 4, scope: !5017)
!5039 = !DILocation(line: 3510, column: 2, scope: !4899)
!5040 = !DILocation(line: 3512, column: 6, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 3512, column: 6)
!5042 = !DILocation(line: 3512, column: 6, scope: !4899)
!5043 = !DILocation(line: 3514, column: 6, scope: !5044)
!5044 = distinct !DILexicalBlock(scope: !5041, file: !3, line: 3513, column: 4)
!5045 = !DILocation(line: 3515, column: 6, scope: !5044)
!5046 = !DILocation(line: 3516, column: 4, scope: !5044)
!5047 = !DILocation(line: 3518, column: 4, scope: !5041)
!5048 = !DILocation(line: 3519, column: 2, scope: !4899)
!5049 = !DILocation(line: 3520, column: 15, scope: !4899)
!5050 = !DILocation(line: 3520, column: 2, scope: !4899)
!5051 = !DILocation(line: 3521, column: 31, scope: !4899)
!5052 = !DILocation(line: 3521, column: 38, scope: !4899)
!5053 = !DILocation(line: 3521, column: 50, scope: !4899)
!5054 = !DILocation(line: 3521, column: 2, scope: !4899)
!5055 = !DILocation(line: 3522, column: 7, scope: !4899)
!5056 = !DILocation(line: 3340, column: 25, scope: !4884)
!5057 = !DILocation(line: 3340, column: 23, scope: !4884)
!5058 = !DILocation(line: 3340, column: 3, scope: !4884)
!5059 = distinct !{!5059, !4886, !5060}
!5060 = !DILocation(line: 3522, column: 7, scope: !4885)
!5061 = !DILocation(line: 3523, column: 3, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !4877, file: !3, line: 3523, column: 3)
!5063 = !DILocation(line: 3523, column: 3, scope: !4877)
!5064 = !DILocation(line: 3523, column: 3, scope: !5065)
!5065 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 3523, column: 3)
!5066 = !DILocation(line: 3524, column: 1, scope: !4877)
!5067 = distinct !DISubprogram(name: "rhs_regno", scope: !476, file: !476, line: 1051, type: !5068, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5068 = !DISubroutineType(types: !5069)
!5069 = !{!7, !5070}
!5070 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !1020, line: 51, baseType: !5071)
!5071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5072, size: 64)
!5072 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1219)
!5073 = !DILocalVariable(name: "x", arg: 1, scope: !5067, file: !476, line: 1051, type: !5070)
!5074 = !DILocation(line: 1051, column: 22, scope: !5067)
!5075 = !DILocation(line: 1053, column: 10, scope: !5067)
!5076 = !DILocation(line: 1053, column: 3, scope: !5067)
!5077 = distinct !DISubprogram(name: "dbxout_reg_parms", scope: !3, file: !3, line: 3538, type: !2246, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5078 = !DILocalVariable(name: "parms", arg: 1, scope: !5077, file: !3, line: 3538, type: !1040)
!5079 = !DILocation(line: 3538, column: 24, scope: !5077)
!5080 = !DILocation(line: 3540, column: 3, scope: !5077)
!5081 = !DILocation(line: 3542, column: 3, scope: !5077)
!5082 = !DILocation(line: 3542, column: 10, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5084, file: !3, line: 3542, column: 3)
!5084 = distinct !DILexicalBlock(scope: !5077, file: !3, line: 3542, column: 3)
!5085 = !DILocation(line: 3542, column: 3, scope: !5084)
!5086 = !DILocation(line: 3543, column: 9, scope: !5087)
!5087 = distinct !DILexicalBlock(scope: !5083, file: !3, line: 3543, column: 9)
!5088 = !DILocation(line: 3543, column: 27, scope: !5087)
!5089 = !DILocation(line: 3543, column: 30, scope: !5087)
!5090 = !DILocation(line: 3543, column: 9, scope: !5083)
!5091 = !DILocation(line: 3547, column: 6, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 3547, column: 6)
!5093 = distinct !DILexicalBlock(scope: !5087, file: !3, line: 3544, column: 7)
!5094 = !DILocation(line: 3548, column: 6, scope: !5092)
!5095 = !DILocation(line: 3548, column: 9, scope: !5092)
!5096 = !DILocation(line: 3548, column: 34, scope: !5092)
!5097 = !DILocation(line: 3547, column: 6, scope: !5093)
!5098 = !DILocation(line: 3549, column: 28, scope: !5092)
!5099 = !DILocation(line: 3549, column: 35, scope: !5092)
!5100 = !DILocation(line: 3550, column: 10, scope: !5092)
!5101 = !DILocation(line: 3549, column: 4, scope: !5092)
!5102 = !DILocation(line: 3551, column: 11, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 3551, column: 11)
!5104 = !DILocation(line: 3551, column: 39, scope: !5103)
!5105 = !DILocation(line: 3551, column: 11, scope: !5092)
!5106 = !DILocation(line: 3552, column: 28, scope: !5103)
!5107 = !DILocation(line: 3552, column: 35, scope: !5103)
!5108 = !DILocation(line: 3553, column: 10, scope: !5103)
!5109 = !DILocation(line: 3552, column: 4, scope: !5103)
!5110 = !DILocation(line: 3555, column: 11, scope: !5111)
!5111 = distinct !DILexicalBlock(scope: !5103, file: !3, line: 3555, column: 11)
!5112 = !DILocation(line: 3556, column: 4, scope: !5111)
!5113 = !DILocation(line: 3556, column: 22, scope: !5111)
!5114 = !DILocation(line: 3556, column: 40, scope: !5111)
!5115 = !DILocation(line: 3556, column: 9, scope: !5111)
!5116 = !DILocation(line: 3555, column: 11, scope: !5103)
!5117 = !DILocation(line: 3557, column: 28, scope: !5111)
!5118 = !DILocation(line: 3557, column: 35, scope: !5111)
!5119 = !DILocation(line: 3558, column: 10, scope: !5111)
!5120 = !DILocation(line: 3557, column: 4, scope: !5111)
!5121 = !DILocation(line: 3559, column: 7, scope: !5093)
!5122 = !DILocation(line: 3542, column: 25, scope: !5083)
!5123 = !DILocation(line: 3542, column: 23, scope: !5083)
!5124 = !DILocation(line: 3542, column: 3, scope: !5083)
!5125 = distinct !{!5125, !5085, !5126}
!5126 = !DILocation(line: 3559, column: 7, scope: !5084)
!5127 = !DILocation(line: 3560, column: 3, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5077, file: !3, line: 3560, column: 3)
!5129 = !DILocation(line: 3560, column: 3, scope: !5077)
!5130 = !DILocation(line: 3560, column: 3, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 3560, column: 3)
!5132 = !DILocation(line: 3561, column: 1, scope: !5077)
!5133 = distinct !DISubprogram(name: "gt_ggc_mx_typeinfo", scope: !2146, file: !2146, line: 23, type: !1636, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5134 = !DILocalVariable(name: "x_p", arg: 1, scope: !5133, file: !2146, line: 23, type: !1322)
!5135 = !DILocation(line: 23, column: 27, scope: !5133)
!5136 = !DILocalVariable(name: "x", scope: !5133, file: !2146, line: 25, type: !5137)
!5137 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2116)
!5138 = !DILocation(line: 25, column: 27, scope: !5133)
!5139 = !DILocation(line: 25, column: 50, scope: !5133)
!5140 = !DILocation(line: 25, column: 31, scope: !5133)
!5141 = !DILocation(line: 26, column: 7, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5133, file: !2146, line: 26, column: 7)
!5143 = !DILocation(line: 26, column: 7, scope: !5133)
!5144 = !DILocation(line: 28, column: 5, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5142, file: !2146, line: 27, column: 5)
!5146 = !DILocation(line: 29, column: 1, scope: !5133)
!5147 = distinct !DISubprogram(name: "gt_pch_nx_typeinfo", scope: !2146, file: !2146, line: 32, type: !1636, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5148 = !DILocalVariable(name: "x_p", arg: 1, scope: !5147, file: !2146, line: 32, type: !1322)
!5149 = !DILocation(line: 32, column: 27, scope: !5147)
!5150 = !DILocalVariable(name: "x", scope: !5147, file: !2146, line: 34, type: !5137)
!5151 = !DILocation(line: 34, column: 27, scope: !5147)
!5152 = !DILocation(line: 34, column: 50, scope: !5147)
!5153 = !DILocation(line: 34, column: 31, scope: !5147)
!5154 = !DILocation(line: 35, column: 27, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5147, file: !2146, line: 35, column: 7)
!5156 = !DILocation(line: 35, column: 30, scope: !5155)
!5157 = !DILocation(line: 35, column: 7, scope: !5155)
!5158 = !DILocation(line: 35, column: 7, scope: !5147)
!5159 = !DILocation(line: 37, column: 5, scope: !5160)
!5160 = distinct !DILexicalBlock(scope: !5155, file: !2146, line: 36, column: 5)
!5161 = !DILocation(line: 38, column: 1, scope: !5147)
!5162 = distinct !DISubprogram(name: "gt_pch_p_8typeinfo", scope: !2146, file: !2146, line: 41, type: !5163, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5163 = !DISubroutineType(types: !5164)
!5164 = !{null, !1322, !1322, !5165, !1322}
!5165 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !2150, line: 38, baseType: !1662)
!5166 = !DILocalVariable(name: "this_obj", arg: 1, scope: !5162, file: !2146, line: 41, type: !1322)
!5167 = !DILocation(line: 41, column: 44, scope: !5162)
!5168 = !DILocalVariable(name: "x_p", arg: 2, scope: !5162, file: !2146, line: 42, type: !1322)
!5169 = !DILocation(line: 42, column: 8, scope: !5162)
!5170 = !DILocalVariable(name: "op", arg: 3, scope: !5162, file: !2146, line: 43, type: !5165)
!5171 = !DILocation(line: 43, column: 39, scope: !5162)
!5172 = !DILocalVariable(name: "cookie", arg: 4, scope: !5162, file: !2146, line: 44, type: !1322)
!5173 = !DILocation(line: 44, column: 25, scope: !5162)
!5174 = !DILocalVariable(name: "x", scope: !5162, file: !2146, line: 46, type: !5137)
!5175 = !DILocation(line: 46, column: 27, scope: !5162)
!5176 = !DILocation(line: 46, column: 67, scope: !5162)
!5177 = !DILocation(line: 46, column: 48, scope: !5162)
!5178 = !DILocation(line: 47, column: 1, scope: !5162)
!5179 = distinct !DISubprogram(name: "gt_ggc_ma_typevec", scope: !2146, file: !2146, line: 53, type: !1636, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5180 = !DILocalVariable(name: "x_p", arg: 1, scope: !5179, file: !2146, line: 53, type: !1322)
!5181 = !DILocation(line: 53, column: 43, scope: !5179)
!5182 = !DILocation(line: 55, column: 7, scope: !5183)
!5183 = distinct !DILexicalBlock(scope: !5179, file: !2146, line: 55, column: 7)
!5184 = !DILocation(line: 55, column: 15, scope: !5183)
!5185 = !DILocation(line: 55, column: 7, scope: !5179)
!5186 = !DILocalVariable(name: "i0", scope: !5187, file: !2146, line: 56, type: !1641)
!5187 = distinct !DILexicalBlock(scope: !5183, file: !2146, line: 55, column: 24)
!5188 = !DILocation(line: 56, column: 12, scope: !5187)
!5189 = !DILocation(line: 57, column: 13, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5187, file: !2146, line: 57, column: 5)
!5191 = !DILocation(line: 57, column: 10, scope: !5190)
!5192 = !DILocation(line: 57, column: 18, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !5190, file: !2146, line: 57, column: 5)
!5194 = !DILocation(line: 57, column: 33, scope: !5193)
!5195 = !DILocation(line: 57, column: 24, scope: !5193)
!5196 = !DILocation(line: 57, column: 21, scope: !5193)
!5197 = !DILocation(line: 57, column: 5, scope: !5190)
!5198 = !DILocation(line: 58, column: 5, scope: !5199)
!5199 = distinct !DILexicalBlock(scope: !5193, file: !2146, line: 57, column: 53)
!5200 = !DILocation(line: 57, column: 49, scope: !5193)
!5201 = !DILocation(line: 57, column: 5, scope: !5193)
!5202 = distinct !{!5202, !5197, !5203}
!5203 = !DILocation(line: 58, column: 5, scope: !5190)
!5204 = !DILocation(line: 59, column: 5, scope: !5187)
!5205 = !DILocalVariable(name: "a__", scope: !5206, file: !2146, line: 59, type: !5207)
!5206 = distinct !DILexicalBlock(scope: !5187, file: !2146, line: 59, column: 5)
!5207 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1465)
!5208 = !DILocation(line: 59, column: 5, scope: !5206)
!5209 = !DILocation(line: 59, column: 5, scope: !5210)
!5210 = distinct !DILexicalBlock(scope: !5206, file: !2146, line: 59, column: 5)
!5211 = !DILocation(line: 60, column: 3, scope: !5187)
!5212 = !DILocation(line: 61, column: 1, scope: !5179)
!5213 = distinct !DISubprogram(name: "gt_pch_na_typevec", scope: !2146, file: !2146, line: 81, type: !1636, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5214 = !DILocalVariable(name: "x_p", arg: 1, scope: !5213, file: !2146, line: 81, type: !1322)
!5215 = !DILocation(line: 81, column: 43, scope: !5213)
!5216 = !DILocation(line: 83, column: 7, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5213, file: !2146, line: 83, column: 7)
!5218 = !DILocation(line: 83, column: 15, scope: !5217)
!5219 = !DILocation(line: 83, column: 7, scope: !5213)
!5220 = !DILocalVariable(name: "i1", scope: !5221, file: !2146, line: 84, type: !1641)
!5221 = distinct !DILexicalBlock(scope: !5217, file: !2146, line: 83, column: 24)
!5222 = !DILocation(line: 84, column: 12, scope: !5221)
!5223 = !DILocation(line: 85, column: 13, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5221, file: !2146, line: 85, column: 5)
!5225 = !DILocation(line: 85, column: 10, scope: !5224)
!5226 = !DILocation(line: 85, column: 18, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5224, file: !2146, line: 85, column: 5)
!5228 = !DILocation(line: 85, column: 33, scope: !5227)
!5229 = !DILocation(line: 85, column: 24, scope: !5227)
!5230 = !DILocation(line: 85, column: 21, scope: !5227)
!5231 = !DILocation(line: 85, column: 5, scope: !5224)
!5232 = !DILocation(line: 86, column: 5, scope: !5233)
!5233 = distinct !DILexicalBlock(scope: !5227, file: !2146, line: 85, column: 53)
!5234 = !DILocation(line: 85, column: 49, scope: !5227)
!5235 = !DILocation(line: 85, column: 5, scope: !5227)
!5236 = distinct !{!5236, !5231, !5237}
!5237 = !DILocation(line: 86, column: 5, scope: !5224)
!5238 = !DILocation(line: 87, column: 25, scope: !5221)
!5239 = !DILocation(line: 87, column: 5, scope: !5221)
!5240 = !DILocation(line: 88, column: 3, scope: !5221)
!5241 = !DILocation(line: 89, column: 1, scope: !5213)
!5242 = distinct !DISubprogram(name: "get_lang_number", scope: !3, file: !3, line: 964, type: !5243, scopeLine: 965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5243 = !DISubroutineType(types: !5244)
!5244 = !{!7}
!5245 = !DILocalVariable(name: "language_string", scope: !5242, file: !3, line: 966, type: !1242)
!5246 = !DILocation(line: 966, column: 15, scope: !5242)
!5247 = !DILocation(line: 966, column: 44, scope: !5242)
!5248 = !DILocation(line: 968, column: 15, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 968, column: 7)
!5250 = !DILocation(line: 968, column: 7, scope: !5249)
!5251 = !DILocation(line: 968, column: 41, scope: !5249)
!5252 = !DILocation(line: 968, column: 7, scope: !5242)
!5253 = !DILocation(line: 969, column: 5, scope: !5249)
!5254 = !DILocation(line: 970, column: 20, scope: !5255)
!5255 = distinct !DILexicalBlock(scope: !5249, file: !3, line: 970, column: 12)
!5256 = !DILocation(line: 970, column: 12, scope: !5255)
!5257 = !DILocation(line: 970, column: 48, scope: !5255)
!5258 = !DILocation(line: 970, column: 12, scope: !5249)
!5259 = !DILocation(line: 971, column: 5, scope: !5255)
!5260 = !DILocation(line: 972, column: 20, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 972, column: 12)
!5262 = !DILocation(line: 972, column: 12, scope: !5261)
!5263 = !DILocation(line: 972, column: 48, scope: !5261)
!5264 = !DILocation(line: 972, column: 12, scope: !5255)
!5265 = !DILocation(line: 973, column: 5, scope: !5261)
!5266 = !DILocation(line: 974, column: 20, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5261, file: !3, line: 974, column: 12)
!5268 = !DILocation(line: 974, column: 12, scope: !5267)
!5269 = !DILocation(line: 974, column: 52, scope: !5267)
!5270 = !DILocation(line: 974, column: 12, scope: !5261)
!5271 = !DILocation(line: 975, column: 5, scope: !5267)
!5272 = !DILocation(line: 976, column: 20, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5267, file: !3, line: 976, column: 12)
!5274 = !DILocation(line: 976, column: 12, scope: !5273)
!5275 = !DILocation(line: 976, column: 51, scope: !5273)
!5276 = !DILocation(line: 976, column: 12, scope: !5267)
!5277 = !DILocation(line: 977, column: 5, scope: !5273)
!5278 = !DILocation(line: 978, column: 20, scope: !5279)
!5279 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 978, column: 12)
!5280 = !DILocation(line: 978, column: 12, scope: !5279)
!5281 = !DILocation(line: 978, column: 56, scope: !5279)
!5282 = !DILocation(line: 978, column: 12, scope: !5273)
!5283 = !DILocation(line: 979, column: 5, scope: !5279)
!5284 = !DILocation(line: 980, column: 20, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5279, file: !3, line: 980, column: 12)
!5286 = !DILocation(line: 980, column: 12, scope: !5285)
!5287 = !DILocation(line: 980, column: 58, scope: !5285)
!5288 = !DILocation(line: 980, column: 12, scope: !5279)
!5289 = !DILocation(line: 981, column: 5, scope: !5285)
!5290 = !DILocation(line: 983, column: 5, scope: !5285)
!5291 = !DILocation(line: 985, column: 1, scope: !5242)
!5292 = distinct !DISubprogram(name: "dbxout_typedefs", scope: !3, file: !3, line: 1097, type: !2246, scopeLine: 1098, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5293 = !DILocalVariable(name: "syms", arg: 1, scope: !5292, file: !3, line: 1097, type: !1040)
!5294 = !DILocation(line: 1097, column: 23, scope: !5292)
!5295 = !DILocation(line: 1099, column: 3, scope: !5292)
!5296 = !DILocation(line: 1099, column: 10, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !5298, file: !3, line: 1099, column: 3)
!5298 = distinct !DILexicalBlock(scope: !5292, file: !3, line: 1099, column: 3)
!5299 = !DILocation(line: 1099, column: 15, scope: !5297)
!5300 = !DILocation(line: 1099, column: 3, scope: !5298)
!5301 = !DILocation(line: 1101, column: 11, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !5303, file: !3, line: 1101, column: 11)
!5303 = distinct !DILexicalBlock(scope: !5297, file: !3, line: 1100, column: 5)
!5304 = !DILocation(line: 1101, column: 28, scope: !5302)
!5305 = !DILocation(line: 1101, column: 11, scope: !5303)
!5306 = !DILocalVariable(name: "type", scope: !5307, file: !3, line: 1103, type: !1040)
!5307 = distinct !DILexicalBlock(scope: !5302, file: !3, line: 1102, column: 2)
!5308 = !DILocation(line: 1103, column: 9, scope: !5307)
!5309 = !DILocation(line: 1103, column: 16, scope: !5307)
!5310 = !DILocation(line: 1104, column: 8, scope: !5311)
!5311 = distinct !DILexicalBlock(scope: !5307, file: !3, line: 1104, column: 8)
!5312 = !DILocation(line: 1105, column: 8, scope: !5311)
!5313 = !DILocation(line: 1105, column: 11, scope: !5311)
!5314 = !DILocation(line: 1105, column: 40, scope: !5311)
!5315 = !DILocation(line: 1106, column: 8, scope: !5311)
!5316 = !DILocation(line: 1106, column: 11, scope: !5311)
!5317 = !DILocation(line: 1107, column: 8, scope: !5311)
!5318 = !DILocation(line: 1107, column: 13, scope: !5311)
!5319 = !DILocation(line: 1104, column: 8, scope: !5307)
!5320 = !DILocation(line: 1108, column: 21, scope: !5311)
!5321 = !DILocation(line: 1108, column: 6, scope: !5311)
!5322 = !DILocation(line: 1109, column: 2, scope: !5307)
!5323 = !DILocation(line: 1110, column: 5, scope: !5303)
!5324 = !DILocation(line: 1099, column: 36, scope: !5297)
!5325 = !DILocation(line: 1099, column: 34, scope: !5297)
!5326 = !DILocation(line: 1099, column: 3, scope: !5297)
!5327 = distinct !{!5327, !5300, !5328}
!5328 = !DILocation(line: 1110, column: 5, scope: !5298)
!5329 = !DILocation(line: 1111, column: 1, scope: !5292)
!5330 = distinct !DISubprogram(name: "dbxout_source_file", scope: !3, file: !3, line: 1242, type: !2186, scopeLine: 1243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5331 = !DILocalVariable(name: "filename", arg: 1, scope: !5330, file: !3, line: 1242, type: !1242)
!5332 = !DILocation(line: 1242, column: 33, scope: !5330)
!5333 = !DILocation(line: 1244, column: 7, scope: !5334)
!5334 = distinct !DILexicalBlock(scope: !5330, file: !3, line: 1244, column: 7)
!5335 = !DILocation(line: 1244, column: 16, scope: !5334)
!5336 = !DILocation(line: 1244, column: 21, scope: !5334)
!5337 = !DILocation(line: 1244, column: 24, scope: !5334)
!5338 = !DILocation(line: 1244, column: 7, scope: !5330)
!5339 = !DILocation(line: 1246, column: 18, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5334, file: !3, line: 1245, column: 5)
!5341 = !DILocation(line: 1246, column: 16, scope: !5340)
!5342 = !DILocation(line: 1247, column: 24, scope: !5340)
!5343 = !DILocation(line: 1248, column: 5, scope: !5340)
!5344 = !DILocation(line: 1250, column: 7, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5330, file: !3, line: 1250, column: 7)
!5346 = !DILocation(line: 1250, column: 16, scope: !5345)
!5347 = !DILocation(line: 1250, column: 20, scope: !5345)
!5348 = !DILocation(line: 1250, column: 29, scope: !5345)
!5349 = !DILocation(line: 1250, column: 34, scope: !5345)
!5350 = !DILocation(line: 1250, column: 45, scope: !5345)
!5351 = !DILocation(line: 1250, column: 55, scope: !5345)
!5352 = !DILocation(line: 1250, column: 37, scope: !5345)
!5353 = !DILocation(line: 1250, column: 7, scope: !5330)
!5354 = !DILocation(line: 1253, column: 11, scope: !5355)
!5355 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 1253, column: 11)
!5356 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 1251, column: 5)
!5357 = !DILocation(line: 1253, column: 33, scope: !5355)
!5358 = !DILocation(line: 1253, column: 11, scope: !5356)
!5359 = !DILocation(line: 1254, column: 21, scope: !5355)
!5360 = !DILocation(line: 1254, column: 2, scope: !5355)
!5361 = !DILocation(line: 1256, column: 56, scope: !5356)
!5362 = !DILocation(line: 1256, column: 34, scope: !5356)
!5363 = !DILocation(line: 1256, column: 7, scope: !5356)
!5364 = !DILocation(line: 1257, column: 7, scope: !5356)
!5365 = !DILocation(line: 1258, column: 18, scope: !5356)
!5366 = !DILocation(line: 1258, column: 16, scope: !5356)
!5367 = !DILocation(line: 1259, column: 5, scope: !5356)
!5368 = !DILocation(line: 1260, column: 1, scope: !5330)
!5369 = distinct !DISubprogram(name: "dbxout_block", scope: !3, file: !3, line: 3625, type: !5370, scopeLine: 3626, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5370 = !DISubroutineType(types: !5371)
!5371 = !{null, !1040, !1136, !1040}
!5372 = !DILocalVariable(name: "block", arg: 1, scope: !5369, file: !3, line: 3625, type: !1040)
!5373 = !DILocation(line: 3625, column: 20, scope: !5369)
!5374 = !DILocalVariable(name: "depth", arg: 2, scope: !5369, file: !3, line: 3625, type: !1136)
!5375 = !DILocation(line: 3625, column: 31, scope: !5369)
!5376 = !DILocalVariable(name: "args", arg: 3, scope: !5369, file: !3, line: 3625, type: !1040)
!5377 = !DILocation(line: 3625, column: 43, scope: !5369)
!5378 = !DILocalVariable(name: "begin_label", scope: !5369, file: !3, line: 3627, type: !2515)
!5379 = !DILocation(line: 3627, column: 8, scope: !5369)
!5380 = !DILocation(line: 3629, column: 3, scope: !5369)
!5381 = !DILocation(line: 3629, column: 3, scope: !5382)
!5382 = distinct !DILexicalBlock(scope: !5369, file: !3, line: 3629, column: 3)
!5383 = !DILocation(line: 3631, column: 3, scope: !5369)
!5384 = !DILocation(line: 3631, column: 10, scope: !5369)
!5385 = !DILocation(line: 3634, column: 11, scope: !5386)
!5386 = distinct !DILexicalBlock(scope: !5387, file: !3, line: 3634, column: 11)
!5387 = distinct !DILexicalBlock(scope: !5369, file: !3, line: 3632, column: 5)
!5388 = !DILocation(line: 3634, column: 29, scope: !5386)
!5389 = !DILocation(line: 3634, column: 32, scope: !5386)
!5390 = !DILocation(line: 3634, column: 11, scope: !5387)
!5391 = !DILocalVariable(name: "did_output", scope: !5392, file: !3, line: 3636, type: !1136)
!5392 = distinct !DILexicalBlock(scope: !5386, file: !3, line: 3635, column: 2)
!5393 = !DILocation(line: 3636, column: 8, scope: !5392)
!5394 = !DILocalVariable(name: "blocknum", scope: !5392, file: !3, line: 3637, type: !1136)
!5395 = !DILocation(line: 3637, column: 8, scope: !5392)
!5396 = !DILocation(line: 3637, column: 19, scope: !5392)
!5397 = !DILocation(line: 3641, column: 15, scope: !5392)
!5398 = !DILocation(line: 3642, column: 8, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 3642, column: 8)
!5400 = !DILocation(line: 3642, column: 25, scope: !5399)
!5401 = !DILocation(line: 3642, column: 46, scope: !5399)
!5402 = !DILocation(line: 3642, column: 49, scope: !5399)
!5403 = !DILocation(line: 3642, column: 55, scope: !5399)
!5404 = !DILocation(line: 3642, column: 8, scope: !5392)
!5405 = !DILocation(line: 3643, column: 32, scope: !5399)
!5406 = !DILocation(line: 3643, column: 19, scope: !5399)
!5407 = !DILocation(line: 3643, column: 17, scope: !5399)
!5408 = !DILocation(line: 3643, column: 6, scope: !5399)
!5409 = !DILocation(line: 3644, column: 8, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 3644, column: 8)
!5411 = !DILocation(line: 3644, column: 8, scope: !5392)
!5412 = !DILocation(line: 3645, column: 24, scope: !5410)
!5413 = !DILocation(line: 3645, column: 6, scope: !5410)
!5414 = !DILocation(line: 3651, column: 8, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 3651, column: 8)
!5416 = !DILocation(line: 3651, column: 8, scope: !5392)
!5417 = !DILocalVariable(name: "buf", scope: !5418, file: !3, line: 3653, type: !2515)
!5418 = distinct !DILexicalBlock(scope: !5415, file: !3, line: 3652, column: 6)
!5419 = !DILocation(line: 3653, column: 13, scope: !5418)
!5420 = !DILocalVariable(name: "scope_start", scope: !5418, file: !3, line: 3654, type: !1242)
!5421 = !DILocation(line: 3654, column: 20, scope: !5418)
!5422 = !DILocation(line: 3656, column: 12, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5418, file: !3, line: 3656, column: 12)
!5424 = !DILocation(line: 3656, column: 18, scope: !5423)
!5425 = !DILocation(line: 3656, column: 12, scope: !5418)
!5426 = !DILocation(line: 3659, column: 17, scope: !5423)
!5427 = !DILocation(line: 3659, column: 15, scope: !5423)
!5428 = !DILocation(line: 3659, column: 3, scope: !5423)
!5429 = !DILocation(line: 3662, column: 5, scope: !5430)
!5430 = distinct !DILexicalBlock(scope: !5423, file: !3, line: 3661, column: 3)
!5431 = !DILocation(line: 3662, column: 5, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5430, file: !3, line: 3662, column: 5)
!5433 = !DILocation(line: 3663, column: 19, scope: !5430)
!5434 = !DILocation(line: 3663, column: 17, scope: !5430)
!5435 = !DILocation(line: 3666, column: 26, scope: !5418)
!5436 = !DILocation(line: 3666, column: 39, scope: !5418)
!5437 = !DILocation(line: 3666, column: 8, scope: !5418)
!5438 = !DILocation(line: 3667, column: 6, scope: !5418)
!5439 = !DILocation(line: 3670, column: 18, scope: !5392)
!5440 = !DILocation(line: 3670, column: 43, scope: !5392)
!5441 = !DILocation(line: 3670, column: 49, scope: !5392)
!5442 = !DILocation(line: 3670, column: 4, scope: !5392)
!5443 = !DILocation(line: 3673, column: 8, scope: !5444)
!5444 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 3673, column: 8)
!5445 = !DILocation(line: 3673, column: 8, scope: !5392)
!5446 = !DILocalVariable(name: "buf", scope: !5447, file: !3, line: 3675, type: !2288)
!5447 = distinct !DILexicalBlock(scope: !5444, file: !3, line: 3674, column: 6)
!5448 = !DILocation(line: 3675, column: 13, scope: !5447)
!5449 = !DILocation(line: 3676, column: 12, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 3676, column: 12)
!5451 = !DILocation(line: 3676, column: 18, scope: !5450)
!5452 = !DILocation(line: 3676, column: 12, scope: !5447)
!5453 = !DILocation(line: 3680, column: 3, scope: !5450)
!5454 = !DILocation(line: 3680, column: 3, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 3680, column: 3)
!5456 = !DILocation(line: 3682, column: 3, scope: !5450)
!5457 = !DILocation(line: 3682, column: 3, scope: !5458)
!5458 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 3682, column: 3)
!5459 = !DILocation(line: 3684, column: 26, scope: !5447)
!5460 = !DILocation(line: 3684, column: 31, scope: !5447)
!5461 = !DILocation(line: 3684, column: 8, scope: !5447)
!5462 = !DILocation(line: 3685, column: 6, scope: !5447)
!5463 = !DILocation(line: 3686, column: 2, scope: !5392)
!5464 = !DILocation(line: 3687, column: 15, scope: !5387)
!5465 = !DILocation(line: 3687, column: 13, scope: !5387)
!5466 = distinct !{!5466, !5383, !5467}
!5467 = !DILocation(line: 3688, column: 5, scope: !5369)
!5468 = !DILocation(line: 3689, column: 1, scope: !5369)
!5469 = distinct !DISubprogram(name: "dbxout_function_end", scope: !3, file: !3, line: 915, type: !2246, scopeLine: 916, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5470 = !DILocalVariable(name: "decl", arg: 1, scope: !5469, file: !3, line: 915, type: !1040)
!5471 = !DILocation(line: 915, column: 27, scope: !5469)
!5472 = !DILocalVariable(name: "lscope_label_name", scope: !5469, file: !3, line: 917, type: !2288)
!5473 = !DILocation(line: 917, column: 8, scope: !5469)
!5474 = !DILocation(line: 921, column: 40, scope: !5469)
!5475 = !DILocation(line: 921, column: 22, scope: !5469)
!5476 = !DILocation(line: 921, column: 3, scope: !5469)
!5477 = !DILocation(line: 926, column: 3, scope: !5469)
!5478 = !DILocation(line: 926, column: 3, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 926, column: 3)
!5480 = !DILocation(line: 927, column: 19, scope: !5469)
!5481 = !DILocation(line: 927, column: 35, scope: !5469)
!5482 = !DILocation(line: 927, column: 59, scope: !5469)
!5483 = !DILocation(line: 927, column: 3, scope: !5469)
!5484 = !DILocation(line: 932, column: 8, scope: !5485)
!5485 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 932, column: 7)
!5486 = !DILocation(line: 934, column: 7, scope: !5485)
!5487 = !DILocation(line: 934, column: 19, scope: !5485)
!5488 = !DILocation(line: 934, column: 11, scope: !5485)
!5489 = !DILocation(line: 932, column: 7, scope: !5469)
!5490 = !DILocation(line: 935, column: 5, scope: !5485)
!5491 = !DILocation(line: 939, column: 7, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 939, column: 7)
!5493 = !DILocation(line: 939, column: 7, scope: !5469)
!5494 = !DILocation(line: 941, column: 7, scope: !5495)
!5495 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 940, column: 5)
!5496 = !DILocation(line: 942, column: 55, scope: !5495)
!5497 = !DILocation(line: 943, column: 27, scope: !5495)
!5498 = !DILocation(line: 942, column: 7, scope: !5495)
!5499 = !DILocation(line: 944, column: 7, scope: !5495)
!5500 = !DILocation(line: 945, column: 55, scope: !5495)
!5501 = !DILocation(line: 946, column: 27, scope: !5495)
!5502 = !DILocation(line: 945, column: 7, scope: !5495)
!5503 = !DILocation(line: 947, column: 5, scope: !5495)
!5504 = !DILocalVariable(name: "begin_label", scope: !5505, file: !3, line: 950, type: !2515)
!5505 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 949, column: 5)
!5506 = !DILocation(line: 950, column: 12, scope: !5505)
!5507 = !DILocation(line: 952, column: 7, scope: !5505)
!5508 = !DILocation(line: 952, column: 7, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !5505, file: !3, line: 952, column: 7)
!5510 = !DILocation(line: 953, column: 7, scope: !5505)
!5511 = !DILocation(line: 954, column: 37, scope: !5505)
!5512 = !DILocation(line: 954, column: 56, scope: !5505)
!5513 = !DILocation(line: 954, column: 7, scope: !5505)
!5514 = !DILocation(line: 957, column: 31, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 957, column: 7)
!5516 = !DILocation(line: 957, column: 7, scope: !5469)
!5517 = !DILocation(line: 958, column: 5, scope: !5515)
!5518 = !DILocation(line: 959, column: 1, scope: !5469)
!5519 = distinct !DISubprogram(name: "dbx_output_lbrac", scope: !3, file: !3, line: 3583, type: !2713, scopeLine: 3585, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5520 = !DILocalVariable(name: "label", arg: 1, scope: !5519, file: !3, line: 3583, type: !1242)
!5521 = !DILocation(line: 3583, column: 31, scope: !5519)
!5522 = !DILocalVariable(name: "begin_label", arg: 2, scope: !5519, file: !3, line: 3584, type: !1242)
!5523 = !DILocation(line: 3584, column: 17, scope: !5519)
!5524 = !DILocation(line: 3586, column: 3, scope: !5519)
!5525 = !DILocation(line: 3588, column: 35, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 3587, column: 7)
!5527 = !DILocation(line: 3588, column: 42, scope: !5526)
!5528 = !DILocation(line: 3588, column: 5, scope: !5526)
!5529 = !DILocation(line: 3591, column: 1, scope: !5519)
!5530 = distinct !DISubprogram(name: "dbx_output_rbrac", scope: !3, file: !3, line: 3597, type: !2713, scopeLine: 3599, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5531 = !DILocalVariable(name: "label", arg: 1, scope: !5530, file: !3, line: 3597, type: !1242)
!5532 = !DILocation(line: 3597, column: 31, scope: !5530)
!5533 = !DILocalVariable(name: "begin_label", arg: 2, scope: !5530, file: !3, line: 3598, type: !1242)
!5534 = !DILocation(line: 3598, column: 17, scope: !5530)
!5535 = !DILocation(line: 3600, column: 3, scope: !5530)
!5536 = !DILocation(line: 3602, column: 35, scope: !5537)
!5537 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 3601, column: 7)
!5538 = !DILocation(line: 3602, column: 42, scope: !5537)
!5539 = !DILocation(line: 3602, column: 5, scope: !5537)
!5540 = !DILocation(line: 3605, column: 1, scope: !5530)
!5541 = distinct !DISubprogram(name: "emit_pending_bincls", scope: !3, file: !3, line: 1134, type: !2213, scopeLine: 1135, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5542 = !DILocalVariable(name: "f", scope: !5541, file: !3, line: 1136, type: !2125)
!5543 = !DILocation(line: 1136, column: 20, scope: !5541)
!5544 = !DILocation(line: 1136, column: 24, scope: !5541)
!5545 = !DILocation(line: 1139, column: 3, scope: !5541)
!5546 = !DILocation(line: 1139, column: 10, scope: !5541)
!5547 = !DILocation(line: 1139, column: 13, scope: !5541)
!5548 = !DILocation(line: 1139, column: 26, scope: !5541)
!5549 = !DILocation(line: 1140, column: 9, scope: !5541)
!5550 = !DILocation(line: 1140, column: 12, scope: !5541)
!5551 = !DILocation(line: 1140, column: 7, scope: !5541)
!5552 = distinct !{!5552, !5545, !5550}
!5553 = !DILocation(line: 1143, column: 7, scope: !5541)
!5554 = !DILocation(line: 1143, column: 10, scope: !5541)
!5555 = !DILocation(line: 1143, column: 5, scope: !5541)
!5556 = !DILocation(line: 1145, column: 3, scope: !5541)
!5557 = !DILocation(line: 1145, column: 10, scope: !5541)
!5558 = !DILocation(line: 1147, column: 11, scope: !5559)
!5559 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 1147, column: 11)
!5560 = distinct !DILexicalBlock(scope: !5541, file: !3, line: 1146, column: 5)
!5561 = !DILocation(line: 1147, column: 14, scope: !5559)
!5562 = !DILocation(line: 1147, column: 27, scope: !5559)
!5563 = !DILocation(line: 1147, column: 11, scope: !5560)
!5564 = !DILocation(line: 1149, column: 28, scope: !5565)
!5565 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 1148, column: 9)
!5566 = !DILocation(line: 1149, column: 31, scope: !5565)
!5567 = !DILocation(line: 1149, column: 11, scope: !5565)
!5568 = !DILocation(line: 1152, column: 44, scope: !5565)
!5569 = !DILocation(line: 1152, column: 11, scope: !5565)
!5570 = !DILocation(line: 1152, column: 14, scope: !5565)
!5571 = !DILocation(line: 1152, column: 26, scope: !5565)
!5572 = !DILocation(line: 1153, column: 11, scope: !5565)
!5573 = !DILocation(line: 1153, column: 14, scope: !5565)
!5574 = !DILocation(line: 1153, column: 27, scope: !5565)
!5575 = !DILocation(line: 1154, column: 9, scope: !5565)
!5576 = !DILocation(line: 1155, column: 11, scope: !5577)
!5577 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 1155, column: 11)
!5578 = !DILocation(line: 1155, column: 16, scope: !5577)
!5579 = !DILocation(line: 1155, column: 13, scope: !5577)
!5580 = !DILocation(line: 1155, column: 11, scope: !5560)
!5581 = !DILocation(line: 1156, column: 9, scope: !5577)
!5582 = !DILocation(line: 1157, column: 11, scope: !5560)
!5583 = !DILocation(line: 1157, column: 14, scope: !5560)
!5584 = !DILocation(line: 1157, column: 9, scope: !5560)
!5585 = distinct !{!5585, !5556, !5586}
!5586 = !DILocation(line: 1158, column: 5, scope: !5541)
!5587 = !DILocation(line: 1161, column: 18, scope: !5541)
!5588 = !DILocation(line: 1162, column: 1, scope: !5541)
!5589 = distinct !DISubprogram(name: "emit_bincl_stab", scope: !3, file: !3, line: 1116, type: !2186, scopeLine: 1117, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5590 = !DILocalVariable(name: "name", arg: 1, scope: !5589, file: !3, line: 1116, type: !1242)
!5591 = !DILocation(line: 1116, column: 30, scope: !5589)
!5592 = !DILocation(line: 1118, column: 30, scope: !5589)
!5593 = !DILocation(line: 1118, column: 3, scope: !5589)
!5594 = !DILocation(line: 1119, column: 3, scope: !5589)
!5595 = !DILocation(line: 1120, column: 1, scope: !5589)
!5596 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !151, file: !151, line: 184, type: !5597, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5597 = !DISubroutineType(types: !5598)
!5598 = !{!2134, !1136}
!5599 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5596, file: !151, line: 184, type: !1136)
!5600 = !DILocation(line: 184, column: 1, scope: !5596)
!5601 = distinct !DISubprogram(name: "output_used_types_helper", scope: !3, file: !3, line: 2435, type: !5602, scopeLine: 2436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5602 = !DISubroutineType(types: !5603)
!5603 = !{!1136, !1639, !1322}
!5604 = !DILocalVariable(name: "slot", arg: 1, scope: !5601, file: !3, line: 2435, type: !1639)
!5605 = !DILocation(line: 2435, column: 34, scope: !5601)
!5606 = !DILocalVariable(name: "data", arg: 2, scope: !5601, file: !3, line: 2435, type: !1322)
!5607 = !DILocation(line: 2435, column: 46, scope: !5601)
!5608 = !DILocalVariable(name: "type", scope: !5601, file: !3, line: 2437, type: !1040)
!5609 = !DILocation(line: 2437, column: 8, scope: !5601)
!5610 = !DILocation(line: 2437, column: 23, scope: !5601)
!5611 = !DILocation(line: 2437, column: 22, scope: !5601)
!5612 = !DILocation(line: 2437, column: 15, scope: !5601)
!5613 = !DILocalVariable(name: "types_p", scope: !5601, file: !3, line: 2438, type: !2139)
!5614 = !DILocation(line: 2438, column: 21, scope: !5601)
!5615 = !DILocation(line: 2438, column: 52, scope: !5601)
!5616 = !DILocation(line: 2438, column: 31, scope: !5601)
!5617 = !DILocation(line: 2440, column: 8, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 2440, column: 7)
!5619 = !DILocation(line: 2440, column: 25, scope: !5618)
!5620 = !DILocation(line: 2441, column: 8, scope: !5618)
!5621 = !DILocation(line: 2441, column: 11, scope: !5618)
!5622 = !DILocation(line: 2441, column: 28, scope: !5618)
!5623 = !DILocation(line: 2442, column: 8, scope: !5618)
!5624 = !DILocation(line: 2442, column: 11, scope: !5618)
!5625 = !DILocation(line: 2442, column: 28, scope: !5618)
!5626 = !DILocation(line: 2443, column: 8, scope: !5618)
!5627 = !DILocation(line: 2443, column: 11, scope: !5618)
!5628 = !DILocation(line: 2443, column: 28, scope: !5618)
!5629 = !DILocation(line: 2444, column: 7, scope: !5618)
!5630 = !DILocation(line: 2444, column: 10, scope: !5618)
!5631 = !DILocation(line: 2445, column: 7, scope: !5618)
!5632 = !DILocation(line: 2445, column: 10, scope: !5618)
!5633 = !DILocation(line: 2446, column: 7, scope: !5618)
!5634 = !DILocation(line: 2446, column: 12, scope: !5618)
!5635 = !DILocation(line: 2440, column: 7, scope: !5601)
!5636 = !DILocation(line: 2447, column: 5, scope: !5618)
!5637 = !DILocation(line: 2448, column: 12, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5618, file: !3, line: 2448, column: 12)
!5639 = !DILocation(line: 2449, column: 5, scope: !5638)
!5640 = !DILocation(line: 2449, column: 8, scope: !5638)
!5641 = !DILocation(line: 2449, column: 37, scope: !5638)
!5642 = !DILocation(line: 2448, column: 12, scope: !5618)
!5643 = !DILocation(line: 2450, column: 5, scope: !5638)
!5644 = !DILocation(line: 2452, column: 3, scope: !5601)
!5645 = distinct !DISubprogram(name: "VEC_tree_base_address", scope: !151, file: !151, line: 182, type: !5646, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5646 = !DISubroutineType(types: !5647)
!5647 = !{!1834, !5648}
!5648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1849, size: 64)
!5649 = !DILocalVariable(name: "vec_", arg: 1, scope: !5645, file: !151, line: 182, type: !5648)
!5650 = !DILocation(line: 182, column: 1, scope: !5645)
!5651 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !151, file: !151, line: 182, type: !5652, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5652 = !DISubroutineType(types: !5653)
!5653 = !{!7, !5654}
!5654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5655, size: 64)
!5655 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1849)
!5656 = !DILocalVariable(name: "vec_", arg: 1, scope: !5651, file: !151, line: 182, type: !5654)
!5657 = !DILocation(line: 182, column: 1, scope: !5651)
!5658 = distinct !DISubprogram(name: "output_types_sort", scope: !3, file: !3, line: 2460, type: !1631, scopeLine: 2461, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5659 = !DILocalVariable(name: "pa", arg: 1, scope: !5658, file: !3, line: 2460, type: !1465)
!5660 = !DILocation(line: 2460, column: 32, scope: !5658)
!5661 = !DILocalVariable(name: "pb", arg: 2, scope: !5658, file: !3, line: 2460, type: !1465)
!5662 = !DILocation(line: 2460, column: 48, scope: !5658)
!5663 = !DILocalVariable(name: "lhs", scope: !5658, file: !3, line: 2462, type: !2141)
!5664 = !DILocation(line: 2462, column: 14, scope: !5658)
!5665 = !DILocation(line: 2462, column: 36, scope: !5658)
!5666 = !DILocation(line: 2462, column: 22, scope: !5658)
!5667 = !DILocation(line: 2462, column: 20, scope: !5658)
!5668 = !DILocalVariable(name: "rhs", scope: !5658, file: !3, line: 2463, type: !2141)
!5669 = !DILocation(line: 2463, column: 14, scope: !5658)
!5670 = !DILocation(line: 2463, column: 36, scope: !5658)
!5671 = !DILocation(line: 2463, column: 22, scope: !5658)
!5672 = !DILocation(line: 2463, column: 20, scope: !5658)
!5673 = !DILocation(line: 2465, column: 7, scope: !5674)
!5674 = distinct !DILexicalBlock(scope: !5658, file: !3, line: 2465, column: 7)
!5675 = !DILocation(line: 2465, column: 7, scope: !5658)
!5676 = !DILocation(line: 2467, column: 11, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5678, file: !3, line: 2467, column: 11)
!5678 = distinct !DILexicalBlock(scope: !5674, file: !3, line: 2466, column: 5)
!5679 = !DILocation(line: 2467, column: 11, scope: !5678)
!5680 = !DILocation(line: 2468, column: 9, scope: !5677)
!5681 = !DILocation(line: 2468, column: 26, scope: !5677)
!5682 = !DILocation(line: 2468, column: 24, scope: !5677)
!5683 = !DILocation(line: 2468, column: 2, scope: !5677)
!5684 = !DILocation(line: 2470, column: 2, scope: !5677)
!5685 = !DILocation(line: 2474, column: 11, scope: !5686)
!5686 = distinct !DILexicalBlock(scope: !5687, file: !3, line: 2474, column: 11)
!5687 = distinct !DILexicalBlock(scope: !5674, file: !3, line: 2473, column: 5)
!5688 = !DILocation(line: 2474, column: 11, scope: !5687)
!5689 = !DILocation(line: 2475, column: 2, scope: !5686)
!5690 = !DILocation(line: 2477, column: 9, scope: !5686)
!5691 = !DILocation(line: 2477, column: 26, scope: !5686)
!5692 = !DILocation(line: 2477, column: 24, scope: !5686)
!5693 = !DILocation(line: 2477, column: 2, scope: !5686)
!5694 = !DILocation(line: 2479, column: 1, scope: !5658)
!5695 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !151, file: !151, line: 182, type: !5696, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5696 = !DISubroutineType(types: !5697)
!5697 = !{!1136, !5654, !7, !1834}
!5698 = !DILocalVariable(name: "vec_", arg: 1, scope: !5695, file: !151, line: 182, type: !5654)
!5699 = !DILocation(line: 182, column: 1, scope: !5695)
!5700 = !DILocalVariable(name: "ix_", arg: 2, scope: !5695, file: !151, line: 182, type: !7)
!5701 = !DILocalVariable(name: "ptr", arg: 3, scope: !5695, file: !151, line: 182, type: !1834)
!5702 = !DILocation(line: 182, column: 1, scope: !5703)
!5703 = distinct !DILexicalBlock(scope: !5695, file: !151, line: 182, column: 1)
!5704 = !DILocation(line: 182, column: 1, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5703, file: !151, line: 182, column: 1)
!5706 = !DILocation(line: 182, column: 1, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5703, file: !151, line: 182, column: 1)
!5708 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !151, file: !151, line: 184, type: !5709, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5709 = !DISubroutineType(types: !5710)
!5710 = !{null, !2139}
!5711 = !DILocalVariable(name: "vec_", arg: 1, scope: !5708, file: !151, line: 184, type: !2139)
!5712 = !DILocation(line: 184, column: 1, scope: !5708)
!5713 = !DILocation(line: 184, column: 1, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5708, file: !151, line: 184, column: 1)
!5715 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !151, file: !151, line: 182, type: !5716, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5716 = !DISubroutineType(types: !5717)
!5717 = !{!1834, !5648, !1040}
!5718 = !DILocalVariable(name: "vec_", arg: 1, scope: !5715, file: !151, line: 182, type: !5648)
!5719 = !DILocation(line: 182, column: 1, scope: !5715)
!5720 = !DILocalVariable(name: "obj_", arg: 2, scope: !5715, file: !151, line: 182, type: !1040)
!5721 = !DILocalVariable(name: "slot_", scope: !5715, file: !151, line: 182, type: !1834)
!5722 = distinct !DISubprogram(name: "dbxout_type_index", scope: !3, file: !3, line: 1391, type: !2246, scopeLine: 1392, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5723 = !DILocalVariable(name: "type", arg: 1, scope: !5722, file: !3, line: 1391, type: !1040)
!5724 = !DILocation(line: 1391, column: 25, scope: !5722)
!5725 = !DILocalVariable(name: "t", scope: !5722, file: !3, line: 1396, type: !2116)
!5726 = !DILocation(line: 1396, column: 20, scope: !5722)
!5727 = !DILocation(line: 1396, column: 25, scope: !5722)
!5728 = !DILocation(line: 1396, column: 33, scope: !5722)
!5729 = !DILocation(line: 1397, column: 3, scope: !5722)
!5730 = !DILocation(line: 1398, column: 14, scope: !5722)
!5731 = !DILocation(line: 1398, column: 17, scope: !5722)
!5732 = !DILocation(line: 1398, column: 3, scope: !5722)
!5733 = !DILocation(line: 1399, column: 3, scope: !5722)
!5734 = !DILocation(line: 1400, column: 14, scope: !5722)
!5735 = !DILocation(line: 1400, column: 17, scope: !5722)
!5736 = !DILocation(line: 1400, column: 3, scope: !5722)
!5737 = !DILocation(line: 1401, column: 3, scope: !5722)
!5738 = !DILocation(line: 1403, column: 1, scope: !5722)
!5739 = distinct !DISubprogram(name: "dbxout_range_type", scope: !3, file: !3, line: 1608, type: !5740, scopeLine: 1609, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5740 = !DISubroutineType(types: !5741)
!5741 = !{null, !1040, !1040, !1040}
!5742 = !DILocalVariable(name: "type", arg: 1, scope: !5739, file: !3, line: 1608, type: !1040)
!5743 = !DILocation(line: 1608, column: 25, scope: !5739)
!5744 = !DILocalVariable(name: "low", arg: 2, scope: !5739, file: !3, line: 1608, type: !1040)
!5745 = !DILocation(line: 1608, column: 36, scope: !5739)
!5746 = !DILocalVariable(name: "high", arg: 3, scope: !5739, file: !3, line: 1608, type: !1040)
!5747 = !DILocation(line: 1608, column: 46, scope: !5739)
!5748 = !DILocation(line: 1610, column: 3, scope: !5739)
!5749 = !DILocation(line: 1611, column: 7, scope: !5750)
!5750 = distinct !DILexicalBlock(scope: !5739, file: !3, line: 1611, column: 7)
!5751 = !DILocation(line: 1611, column: 7, scope: !5739)
!5752 = !DILocation(line: 1612, column: 18, scope: !5750)
!5753 = !DILocation(line: 1612, column: 5, scope: !5750)
!5754 = !DILocation(line: 1613, column: 12, scope: !5755)
!5755 = distinct !DILexicalBlock(scope: !5750, file: !3, line: 1613, column: 12)
!5756 = !DILocation(line: 1613, column: 29, scope: !5755)
!5757 = !DILocation(line: 1613, column: 12, scope: !5750)
!5758 = !DILocation(line: 1614, column: 18, scope: !5755)
!5759 = !DILocation(line: 1614, column: 5, scope: !5755)
!5760 = !DILocation(line: 1629, column: 11, scope: !5761)
!5761 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 1629, column: 11)
!5762 = distinct !DILexicalBlock(scope: !5755, file: !3, line: 1616, column: 5)
!5763 = !DILocation(line: 1629, column: 38, scope: !5761)
!5764 = !DILocation(line: 1629, column: 11, scope: !5762)
!5765 = !DILocation(line: 1630, column: 21, scope: !5761)
!5766 = !DILocation(line: 1630, column: 2, scope: !5761)
!5767 = !DILocation(line: 1632, column: 21, scope: !5761)
!5768 = !DILocation(line: 1632, column: 2, scope: !5761)
!5769 = !DILocation(line: 1635, column: 3, scope: !5739)
!5770 = !DILocation(line: 1636, column: 7, scope: !5771)
!5771 = distinct !DILexicalBlock(scope: !5739, file: !3, line: 1636, column: 7)
!5772 = !DILocation(line: 1636, column: 11, scope: !5771)
!5773 = !DILocation(line: 1636, column: 29, scope: !5771)
!5774 = !DILocation(line: 1636, column: 14, scope: !5771)
!5775 = !DILocation(line: 1636, column: 7, scope: !5739)
!5776 = !DILocation(line: 1638, column: 44, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 1638, column: 11)
!5778 = distinct !DILexicalBlock(scope: !5771, file: !3, line: 1637, column: 5)
!5779 = !DILocation(line: 1638, column: 50, scope: !5777)
!5780 = !DILocation(line: 1638, column: 55, scope: !5777)
!5781 = !DILocation(line: 1638, column: 11, scope: !5777)
!5782 = !DILocation(line: 1638, column: 11, scope: !5778)
!5783 = !DILocation(line: 1639, column: 20, scope: !5777)
!5784 = !DILocation(line: 1639, column: 9, scope: !5777)
!5785 = !DILocation(line: 1641, column: 34, scope: !5777)
!5786 = !DILocation(line: 1641, column: 20, scope: !5777)
!5787 = !DILocation(line: 1641, column: 9, scope: !5777)
!5788 = !DILocation(line: 1642, column: 5, scope: !5778)
!5789 = !DILocation(line: 1644, column: 5, scope: !5771)
!5790 = !DILocation(line: 1646, column: 3, scope: !5739)
!5791 = !DILocation(line: 1647, column: 7, scope: !5792)
!5792 = distinct !DILexicalBlock(scope: !5739, file: !3, line: 1647, column: 7)
!5793 = !DILocation(line: 1647, column: 12, scope: !5792)
!5794 = !DILocation(line: 1647, column: 30, scope: !5792)
!5795 = !DILocation(line: 1647, column: 15, scope: !5792)
!5796 = !DILocation(line: 1647, column: 7, scope: !5739)
!5797 = !DILocation(line: 1649, column: 44, scope: !5798)
!5798 = distinct !DILexicalBlock(scope: !5799, file: !3, line: 1649, column: 11)
!5799 = distinct !DILexicalBlock(scope: !5792, file: !3, line: 1648, column: 5)
!5800 = !DILocation(line: 1649, column: 50, scope: !5798)
!5801 = !DILocation(line: 1649, column: 55, scope: !5798)
!5802 = !DILocation(line: 1649, column: 11, scope: !5798)
!5803 = !DILocation(line: 1649, column: 11, scope: !5799)
!5804 = !DILocation(line: 1650, column: 20, scope: !5798)
!5805 = !DILocation(line: 1650, column: 9, scope: !5798)
!5806 = !DILocation(line: 1652, column: 34, scope: !5798)
!5807 = !DILocation(line: 1652, column: 20, scope: !5798)
!5808 = !DILocation(line: 1652, column: 9, scope: !5798)
!5809 = !DILocation(line: 1653, column: 7, scope: !5799)
!5810 = !DILocation(line: 1654, column: 5, scope: !5799)
!5811 = !DILocation(line: 1656, column: 5, scope: !5792)
!5812 = !DILocation(line: 1657, column: 1, scope: !5739)
!5813 = distinct !DISubprogram(name: "print_int_cst_bounds_in_octal_p", scope: !3, file: !3, line: 2288, type: !5814, scopeLine: 2289, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5814 = !DISubroutineType(types: !5815)
!5815 = !{!1159, !1040, !1040, !1040}
!5816 = !DILocalVariable(name: "type", arg: 1, scope: !5813, file: !3, line: 2288, type: !1040)
!5817 = !DILocation(line: 2288, column: 39, scope: !5813)
!5818 = !DILocalVariable(name: "low", arg: 2, scope: !5813, file: !3, line: 2288, type: !1040)
!5819 = !DILocation(line: 2288, column: 50, scope: !5813)
!5820 = !DILocalVariable(name: "high", arg: 3, scope: !5813, file: !3, line: 2288, type: !1040)
!5821 = !DILocation(line: 2288, column: 60, scope: !5813)
!5822 = !DILocation(line: 2301, column: 7, scope: !5823)
!5823 = distinct !DILexicalBlock(scope: !5813, file: !3, line: 2301, column: 7)
!5824 = !DILocation(line: 2302, column: 7, scope: !5823)
!5825 = !DILocation(line: 2302, column: 10, scope: !5823)
!5826 = !DILocation(line: 2302, column: 14, scope: !5823)
!5827 = !DILocation(line: 2302, column: 17, scope: !5823)
!5828 = !DILocation(line: 2302, column: 33, scope: !5823)
!5829 = !DILocation(line: 2303, column: 7, scope: !5823)
!5830 = !DILocation(line: 2303, column: 10, scope: !5823)
!5831 = !DILocation(line: 2303, column: 15, scope: !5823)
!5832 = !DILocation(line: 2303, column: 18, scope: !5823)
!5833 = !DILocation(line: 2303, column: 35, scope: !5823)
!5834 = !DILocation(line: 2304, column: 7, scope: !5823)
!5835 = !DILocation(line: 2304, column: 11, scope: !5823)
!5836 = !DILocation(line: 2304, column: 35, scope: !5823)
!5837 = !DILocation(line: 2304, column: 33, scope: !5823)
!5838 = !DILocation(line: 2305, column: 4, scope: !5823)
!5839 = !DILocation(line: 2305, column: 9, scope: !5823)
!5840 = !DILocation(line: 2305, column: 34, scope: !5823)
!5841 = !DILocation(line: 2305, column: 31, scope: !5823)
!5842 = !DILocation(line: 2306, column: 8, scope: !5823)
!5843 = !DILocation(line: 2306, column: 11, scope: !5823)
!5844 = !DILocation(line: 2307, column: 4, scope: !5823)
!5845 = !DILocation(line: 2307, column: 7, scope: !5823)
!5846 = !DILocation(line: 2307, column: 29, scope: !5823)
!5847 = !DILocation(line: 2308, column: 4, scope: !5823)
!5848 = !DILocation(line: 2308, column: 8, scope: !5823)
!5849 = !DILocation(line: 2308, column: 30, scope: !5823)
!5850 = !DILocation(line: 2309, column: 8, scope: !5823)
!5851 = !DILocation(line: 2309, column: 11, scope: !5823)
!5852 = !DILocation(line: 2301, column: 7, scope: !5813)
!5853 = !DILocation(line: 2310, column: 5, scope: !5823)
!5854 = !DILocation(line: 2312, column: 5, scope: !5823)
!5855 = !DILocation(line: 2313, column: 1, scope: !5813)
!5856 = distinct !DISubprogram(name: "stabstr_O", scope: !3, file: !3, line: 697, type: !2246, scopeLine: 698, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5857 = !DILocalVariable(name: "cst", arg: 1, scope: !5856, file: !3, line: 697, type: !1040)
!5858 = !DILocation(line: 697, column: 17, scope: !5856)
!5859 = !DILocalVariable(name: "high", scope: !5856, file: !3, line: 699, type: !1093)
!5860 = !DILocation(line: 699, column: 26, scope: !5856)
!5861 = !DILocation(line: 699, column: 33, scope: !5856)
!5862 = !DILocalVariable(name: "low", scope: !5856, file: !3, line: 700, type: !1093)
!5863 = !DILocation(line: 700, column: 26, scope: !5856)
!5864 = !DILocation(line: 700, column: 32, scope: !5856)
!5865 = !DILocalVariable(name: "buf", scope: !5856, file: !3, line: 702, type: !5866)
!5866 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1139, size: 1024, elements: !5867)
!5867 = !{!5868}
!5868 = !DISubrange(count: 128)
!5869 = !DILocation(line: 702, column: 8, scope: !5856)
!5870 = !DILocalVariable(name: "p", scope: !5856, file: !3, line: 703, type: !1307)
!5871 = !DILocation(line: 703, column: 9, scope: !5856)
!5872 = !DILocation(line: 703, column: 13, scope: !5856)
!5873 = !DILocation(line: 703, column: 17, scope: !5856)
!5874 = !DILocalVariable(name: "width", scope: !5875, file: !3, line: 709, type: !5876)
!5875 = distinct !DILexicalBlock(scope: !5856, file: !3, line: 708, column: 3)
!5876 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!5877 = !DILocation(line: 709, column: 24, scope: !5875)
!5878 = !DILocation(line: 709, column: 32, scope: !5875)
!5879 = !DILocation(line: 710, column: 9, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 710, column: 9)
!5881 = !DILocation(line: 710, column: 15, scope: !5880)
!5882 = !DILocation(line: 710, column: 9, scope: !5875)
!5883 = !DILocation(line: 712, column: 14, scope: !5884)
!5884 = distinct !DILexicalBlock(scope: !5880, file: !3, line: 712, column: 14)
!5885 = !DILocation(line: 712, column: 20, scope: !5884)
!5886 = !DILocation(line: 712, column: 14, scope: !5880)
!5887 = !DILocation(line: 713, column: 39, scope: !5884)
!5888 = !DILocation(line: 713, column: 45, scope: !5884)
!5889 = !DILocation(line: 713, column: 35, scope: !5884)
!5890 = !DILocation(line: 713, column: 72, scope: !5884)
!5891 = !DILocation(line: 713, column: 12, scope: !5884)
!5892 = !DILocation(line: 713, column: 7, scope: !5884)
!5893 = !DILocation(line: 714, column: 14, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5884, file: !3, line: 714, column: 14)
!5895 = !DILocation(line: 714, column: 20, scope: !5894)
!5896 = !DILocation(line: 714, column: 14, scope: !5884)
!5897 = !DILocation(line: 715, column: 12, scope: !5894)
!5898 = !DILocation(line: 715, column: 7, scope: !5894)
!5899 = !DILocation(line: 717, column: 12, scope: !5894)
!5900 = !DILocation(line: 717, column: 47, scope: !5894)
!5901 = !DILocation(line: 717, column: 44, scope: !5894)
!5902 = !DILocation(line: 717, column: 54, scope: !5894)
!5903 = !DILocation(line: 717, column: 21, scope: !5894)
!5904 = !DILocation(line: 721, column: 3, scope: !5856)
!5905 = !DILocation(line: 725, column: 7, scope: !5906)
!5906 = distinct !DILexicalBlock(scope: !5856, file: !3, line: 725, column: 7)
!5907 = !DILocation(line: 725, column: 12, scope: !5906)
!5908 = !DILocation(line: 725, column: 17, scope: !5906)
!5909 = !DILocation(line: 725, column: 20, scope: !5906)
!5910 = !DILocation(line: 725, column: 24, scope: !5906)
!5911 = !DILocation(line: 725, column: 7, scope: !5856)
!5912 = !DILocation(line: 726, column: 5, scope: !5906)
!5913 = !DILocation(line: 729, column: 7, scope: !5914)
!5914 = distinct !DILexicalBlock(scope: !5856, file: !3, line: 729, column: 7)
!5915 = !DILocation(line: 729, column: 12, scope: !5914)
!5916 = !DILocation(line: 729, column: 7, scope: !5856)
!5917 = !DILocation(line: 730, column: 5, scope: !5914)
!5918 = !DILocalVariable(name: "digit", scope: !5919, file: !3, line: 730, type: !1136)
!5919 = distinct !DILexicalBlock(scope: !5914, file: !3, line: 730, column: 5)
!5920 = !DILocation(line: 730, column: 5, scope: !5919)
!5921 = distinct !{!5921, !5917, !5917}
!5922 = !DILocalVariable(name: "n_digits", scope: !5923, file: !3, line: 736, type: !5924)
!5923 = distinct !DILexicalBlock(scope: !5914, file: !3, line: 732, column: 5)
!5924 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1136)
!5925 = !DILocation(line: 736, column: 17, scope: !5923)
!5926 = !DILocalVariable(name: "i", scope: !5923, file: !3, line: 737, type: !1136)
!5927 = !DILocation(line: 737, column: 11, scope: !5923)
!5928 = !DILocation(line: 739, column: 14, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 739, column: 7)
!5930 = !DILocation(line: 739, column: 12, scope: !5929)
!5931 = !DILocation(line: 739, column: 19, scope: !5932)
!5932 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 739, column: 7)
!5933 = !DILocation(line: 739, column: 21, scope: !5932)
!5934 = !DILocation(line: 739, column: 7, scope: !5929)
!5935 = !DILocalVariable(name: "digit", scope: !5936, file: !3, line: 741, type: !7)
!5936 = distinct !DILexicalBlock(scope: !5932, file: !3, line: 740, column: 2)
!5937 = !DILocation(line: 741, column: 17, scope: !5936)
!5938 = !DILocation(line: 741, column: 25, scope: !5936)
!5939 = !DILocation(line: 741, column: 29, scope: !5936)
!5940 = !DILocation(line: 742, column: 8, scope: !5936)
!5941 = !DILocation(line: 743, column: 17, scope: !5936)
!5942 = !DILocation(line: 743, column: 15, scope: !5936)
!5943 = !DILocation(line: 743, column: 11, scope: !5936)
!5944 = !DILocation(line: 743, column: 5, scope: !5936)
!5945 = !DILocation(line: 743, column: 9, scope: !5936)
!5946 = !DILocation(line: 744, column: 2, scope: !5936)
!5947 = !DILocation(line: 739, column: 35, scope: !5932)
!5948 = !DILocation(line: 739, column: 7, scope: !5932)
!5949 = distinct !{!5949, !5934, !5950}
!5950 = !DILocation(line: 744, column: 2, scope: !5929)
!5951 = !DILocalVariable(name: "n_leftover_bits", scope: !5952, file: !3, line: 752, type: !5924)
!5952 = distinct !DILexicalBlock(scope: !5953, file: !3, line: 751, column: 2)
!5953 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 750, column: 11)
!5954 = !DILocation(line: 752, column: 14, scope: !5952)
!5955 = !DILocalVariable(name: "n_bits_from_high", scope: !5952, file: !3, line: 753, type: !5924)
!5956 = !DILocation(line: 753, column: 14, scope: !5952)
!5957 = !DILocalVariable(name: "low_mask", scope: !5952, file: !3, line: 756, type: !5958)
!5958 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1093)
!5959 = !DILocation(line: 756, column: 6, scope: !5952)
!5960 = !DILocalVariable(name: "high_mask", scope: !5952, file: !3, line: 758, type: !5958)
!5961 = !DILocation(line: 758, column: 6, scope: !5952)
!5962 = !DILocalVariable(name: "digit", scope: !5952, file: !3, line: 760, type: !7)
!5963 = !DILocation(line: 760, column: 17, scope: !5952)
!5964 = !DILocation(line: 764, column: 4, scope: !5952)
!5965 = !DILocation(line: 766, column: 13, scope: !5952)
!5966 = !DILocation(line: 766, column: 21, scope: !5952)
!5967 = !DILocation(line: 766, column: 26, scope: !5952)
!5968 = !DILocation(line: 766, column: 39, scope: !5952)
!5969 = !DILocation(line: 766, column: 17, scope: !5952)
!5970 = !DILocation(line: 766, column: 12, scope: !5952)
!5971 = !DILocation(line: 766, column: 10, scope: !5952)
!5972 = !DILocation(line: 767, column: 9, scope: !5952)
!5973 = !DILocation(line: 769, column: 17, scope: !5952)
!5974 = !DILocation(line: 769, column: 15, scope: !5952)
!5975 = !DILocation(line: 769, column: 11, scope: !5952)
!5976 = !DILocation(line: 769, column: 5, scope: !5952)
!5977 = !DILocation(line: 769, column: 9, scope: !5952)
!5978 = !DILocation(line: 776, column: 11, scope: !5979)
!5979 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 776, column: 11)
!5980 = !DILocation(line: 776, column: 11, scope: !5923)
!5981 = !DILocation(line: 777, column: 2, scope: !5979)
!5982 = !DILocalVariable(name: "digit", scope: !5983, file: !3, line: 777, type: !1136)
!5983 = distinct !DILexicalBlock(scope: !5979, file: !3, line: 777, column: 2)
!5984 = !DILocation(line: 777, column: 2, scope: !5983)
!5985 = distinct !{!5985, !5981, !5981}
!5986 = !DILocation(line: 780, column: 3, scope: !5856)
!5987 = !DILocation(line: 781, column: 1, scope: !5856)
!5988 = distinct !DISubprogram(name: "dbxout_type_name", scope: !3, file: !3, line: 2320, type: !2246, scopeLine: 2321, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!5989 = !DILocalVariable(name: "type", arg: 1, scope: !5988, file: !3, line: 2320, type: !1040)
!5990 = !DILocation(line: 2320, column: 24, scope: !5988)
!5991 = !DILocalVariable(name: "t", scope: !5988, file: !3, line: 2322, type: !1040)
!5992 = !DILocation(line: 2322, column: 8, scope: !5988)
!5993 = !DILocation(line: 2322, column: 12, scope: !5988)
!5994 = !DILocation(line: 2324, column: 3, scope: !5988)
!5995 = !DILocation(line: 2325, column: 11, scope: !5988)
!5996 = !DILocation(line: 2325, column: 3, scope: !5988)
!5997 = !DILocation(line: 2328, column: 7, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5988, file: !3, line: 2326, column: 5)
!5999 = !DILocation(line: 2330, column: 11, scope: !5998)
!6000 = !DILocation(line: 2330, column: 9, scope: !5998)
!6001 = !DILocation(line: 2331, column: 7, scope: !5998)
!6002 = !DILocation(line: 2333, column: 7, scope: !5998)
!6003 = !DILocation(line: 2334, column: 5, scope: !5998)
!6004 = !DILocation(line: 2336, column: 3, scope: !5988)
!6005 = !DILocation(line: 2337, column: 1, scope: !5988)
!6006 = distinct !DISubprogram(name: "stabstr_U", scope: !3, file: !3, line: 680, type: !6007, scopeLine: 681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6007 = !DISubroutineType(types: !6008)
!6008 = !{null, !1093}
!6009 = !DILocalVariable(name: "num", arg: 1, scope: !6006, file: !3, line: 680, type: !1093)
!6010 = !DILocation(line: 680, column: 35, scope: !6006)
!6011 = !DILocalVariable(name: "buf", scope: !6006, file: !3, line: 682, type: !2649)
!6012 = !DILocation(line: 682, column: 8, scope: !6006)
!6013 = !DILocalVariable(name: "p", scope: !6006, file: !3, line: 683, type: !1307)
!6014 = !DILocation(line: 683, column: 9, scope: !6006)
!6015 = !DILocation(line: 683, column: 13, scope: !6006)
!6016 = !DILocation(line: 683, column: 17, scope: !6006)
!6017 = !DILocation(line: 684, column: 7, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 684, column: 7)
!6019 = !DILocation(line: 684, column: 11, scope: !6018)
!6020 = !DILocation(line: 684, column: 7, scope: !6006)
!6021 = !DILocation(line: 686, column: 7, scope: !6022)
!6022 = distinct !DILexicalBlock(scope: !6018, file: !3, line: 685, column: 5)
!6023 = !DILocation(line: 687, column: 7, scope: !6022)
!6024 = !DILocation(line: 689, column: 3, scope: !6006)
!6025 = !DILocalVariable(name: "digit", scope: !6026, file: !3, line: 689, type: !1136)
!6026 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 689, column: 3)
!6027 = !DILocation(line: 689, column: 3, scope: !6026)
!6028 = distinct !{!6028, !6024, !6024}
!6029 = !DILocation(line: 690, column: 3, scope: !6006)
!6030 = !DILocation(line: 691, column: 1, scope: !6006)
!6031 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !151, file: !151, line: 182, type: !6032, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6032 = !DISubroutineType(types: !6033)
!6033 = !{!1040, !5654, !7}
!6034 = !DILocalVariable(name: "vec_", arg: 1, scope: !6031, file: !151, line: 182, type: !5654)
!6035 = !DILocation(line: 182, column: 1, scope: !6031)
!6036 = !DILocalVariable(name: "ix_", arg: 2, scope: !6031, file: !151, line: 182, type: !7)
!6037 = !DILocation(line: 0, scope: !6031)
!6038 = distinct !DISubprogram(name: "dbxout_type_fields", scope: !3, file: !3, line: 1417, type: !2246, scopeLine: 1418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6039 = !DILocalVariable(name: "type", arg: 1, scope: !6038, file: !3, line: 1417, type: !1040)
!6040 = !DILocation(line: 1417, column: 26, scope: !6038)
!6041 = !DILocalVariable(name: "tem", scope: !6038, file: !3, line: 1419, type: !1040)
!6042 = !DILocation(line: 1419, column: 8, scope: !6038)
!6043 = !DILocation(line: 1423, column: 14, scope: !6044)
!6044 = distinct !DILexicalBlock(scope: !6038, file: !3, line: 1423, column: 3)
!6045 = !DILocation(line: 1423, column: 12, scope: !6044)
!6046 = !DILocation(line: 1423, column: 8, scope: !6044)
!6047 = !DILocation(line: 1423, column: 34, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !6044, file: !3, line: 1423, column: 3)
!6049 = !DILocation(line: 1423, column: 3, scope: !6044)
!6050 = !DILocation(line: 1427, column: 11, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !6052, file: !3, line: 1427, column: 11)
!6052 = distinct !DILexicalBlock(scope: !6048, file: !3, line: 1424, column: 5)
!6053 = !DILocation(line: 1427, column: 18, scope: !6051)
!6054 = !DILocation(line: 1427, column: 15, scope: !6051)
!6055 = !DILocation(line: 1427, column: 34, scope: !6051)
!6056 = !DILocation(line: 1427, column: 37, scope: !6051)
!6057 = !DILocation(line: 1427, column: 56, scope: !6051)
!6058 = !DILocation(line: 1427, column: 53, scope: !6051)
!6059 = !DILocation(line: 1427, column: 11, scope: !6052)
!6060 = !DILocation(line: 1428, column: 2, scope: !6051)
!6061 = !DILocation(line: 1431, column: 11, scope: !6062)
!6062 = distinct !DILexicalBlock(scope: !6052, file: !3, line: 1431, column: 11)
!6063 = !DILocation(line: 1431, column: 27, scope: !6062)
!6064 = !DILocation(line: 1433, column: 4, scope: !6062)
!6065 = !DILocation(line: 1433, column: 7, scope: !6062)
!6066 = !DILocation(line: 1436, column: 4, scope: !6062)
!6067 = !DILocation(line: 1436, column: 8, scope: !6062)
!6068 = !DILocation(line: 1436, column: 24, scope: !6062)
!6069 = !DILocation(line: 1437, column: 8, scope: !6062)
!6070 = !DILocation(line: 1437, column: 43, scope: !6062)
!6071 = !DILocation(line: 1437, column: 29, scope: !6062)
!6072 = !DILocation(line: 1437, column: 14, scope: !6062)
!6073 = !DILocation(line: 1438, column: 5, scope: !6062)
!6074 = !DILocation(line: 1438, column: 10, scope: !6062)
!6075 = !DILocation(line: 1439, column: 5, scope: !6062)
!6076 = !DILocation(line: 1439, column: 25, scope: !6062)
!6077 = !DILocation(line: 1439, column: 10, scope: !6062)
!6078 = !DILocation(line: 1431, column: 11, scope: !6052)
!6079 = !DILocation(line: 1440, column: 2, scope: !6062)
!6080 = !DILocation(line: 1442, column: 16, scope: !6081)
!6081 = distinct !DILexicalBlock(scope: !6062, file: !3, line: 1442, column: 16)
!6082 = !DILocation(line: 1442, column: 32, scope: !6081)
!6083 = !DILocation(line: 1442, column: 16, scope: !6062)
!6084 = !DILocation(line: 1446, column: 8, scope: !6085)
!6085 = distinct !DILexicalBlock(scope: !6086, file: !3, line: 1446, column: 8)
!6086 = distinct !DILexicalBlock(scope: !6081, file: !3, line: 1443, column: 2)
!6087 = !DILocation(line: 1446, column: 15, scope: !6085)
!6088 = !DILocation(line: 1446, column: 12, scope: !6085)
!6089 = !DILocation(line: 1446, column: 8, scope: !6086)
!6090 = !DILocation(line: 1447, column: 6, scope: !6085)
!6091 = !DILocation(line: 1449, column: 8, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6086, file: !3, line: 1449, column: 8)
!6093 = !DILocation(line: 1449, column: 8, scope: !6086)
!6094 = !DILocation(line: 1450, column: 6, scope: !6092)
!6095 = !DILocation(line: 1451, column: 4, scope: !6086)
!6096 = !DILocation(line: 1453, column: 8, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6086, file: !3, line: 1453, column: 8)
!6098 = !DILocation(line: 1454, column: 8, scope: !6097)
!6099 = !DILocation(line: 1454, column: 12, scope: !6097)
!6100 = !DILocation(line: 1454, column: 31, scope: !6097)
!6101 = !DILocation(line: 1454, column: 34, scope: !6097)
!6102 = !DILocation(line: 1455, column: 5, scope: !6097)
!6103 = !DILocation(line: 1455, column: 8, scope: !6097)
!6104 = !DILocation(line: 1455, column: 24, scope: !6097)
!6105 = !DILocation(line: 1453, column: 8, scope: !6086)
!6106 = !DILocation(line: 1457, column: 8, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6097, file: !3, line: 1456, column: 6)
!6108 = !DILocation(line: 1458, column: 8, scope: !6107)
!6109 = !DILocation(line: 1459, column: 6, scope: !6107)
!6110 = !DILocation(line: 1461, column: 18, scope: !6086)
!6111 = !DILocation(line: 1461, column: 34, scope: !6086)
!6112 = !DILocation(line: 1462, column: 4, scope: !6086)
!6113 = !DILocation(line: 1462, column: 7, scope: !6086)
!6114 = !DILocation(line: 1461, column: 17, scope: !6086)
!6115 = !DILocation(line: 1463, column: 12, scope: !6086)
!6116 = !DILocation(line: 1463, column: 40, scope: !6086)
!6117 = !DILocation(line: 1461, column: 4, scope: !6086)
!6118 = !DILocation(line: 1465, column: 8, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6086, file: !3, line: 1465, column: 8)
!6120 = !DILocation(line: 1465, column: 24, scope: !6119)
!6121 = !DILocation(line: 1465, column: 8, scope: !6086)
!6122 = !DILocation(line: 1467, column: 12, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6124, file: !3, line: 1467, column: 12)
!6124 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 1466, column: 6)
!6125 = !DILocation(line: 1467, column: 30, scope: !6123)
!6126 = !DILocation(line: 1467, column: 33, scope: !6123)
!6127 = !DILocation(line: 1467, column: 12, scope: !6124)
!6128 = !DILocalVariable(name: "name", scope: !6129, file: !3, line: 1469, type: !1040)
!6129 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 1468, column: 3)
!6130 = !DILocation(line: 1469, column: 10, scope: !6129)
!6131 = !DILocation(line: 1469, column: 17, scope: !6129)
!6132 = !DILocation(line: 1471, column: 5, scope: !6129)
!6133 = !DILocation(line: 1472, column: 5, scope: !6129)
!6134 = !DILocation(line: 1473, column: 5, scope: !6129)
!6135 = !DILocation(line: 1474, column: 3, scope: !6129)
!6136 = !DILocation(line: 1477, column: 3, scope: !6123)
!6137 = !DILocation(line: 1478, column: 6, scope: !6124)
!6138 = !DILocation(line: 1481, column: 8, scope: !6139)
!6139 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 1480, column: 6)
!6140 = !DILocation(line: 1482, column: 37, scope: !6139)
!6141 = !DILocation(line: 1482, column: 19, scope: !6139)
!6142 = !DILocation(line: 1482, column: 8, scope: !6139)
!6143 = !DILocation(line: 1483, column: 8, scope: !6139)
!6144 = !DILocation(line: 1484, column: 33, scope: !6139)
!6145 = !DILocation(line: 1484, column: 19, scope: !6139)
!6146 = !DILocation(line: 1484, column: 8, scope: !6139)
!6147 = !DILocation(line: 1485, column: 8, scope: !6139)
!6148 = !DILocation(line: 1487, column: 2, scope: !6086)
!6149 = !DILocation(line: 1488, column: 5, scope: !6052)
!6150 = !DILocation(line: 1423, column: 45, scope: !6048)
!6151 = !DILocation(line: 1423, column: 43, scope: !6048)
!6152 = !DILocation(line: 1423, column: 3, scope: !6048)
!6153 = distinct !{!6153, !6049, !6154}
!6154 = !DILocation(line: 1488, column: 5, scope: !6044)
!6155 = !DILocation(line: 1489, column: 1, scope: !6038)
!6156 = distinct !DISubprogram(name: "dbxout_type_methods", scope: !3, file: !3, line: 1541, type: !2246, scopeLine: 1542, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6157 = !DILocalVariable(name: "type", arg: 1, scope: !6156, file: !3, line: 1541, type: !1040)
!6158 = !DILocation(line: 1541, column: 27, scope: !6156)
!6159 = !DILocalVariable(name: "methods", scope: !6156, file: !3, line: 1544, type: !1040)
!6160 = !DILocation(line: 1544, column: 8, scope: !6156)
!6161 = !DILocation(line: 1544, column: 18, scope: !6156)
!6162 = !DILocalVariable(name: "fndecl", scope: !6156, file: !3, line: 1545, type: !1040)
!6163 = !DILocation(line: 1545, column: 8, scope: !6156)
!6164 = !DILocalVariable(name: "last", scope: !6156, file: !3, line: 1546, type: !1040)
!6165 = !DILocation(line: 1546, column: 8, scope: !6156)
!6166 = !DILocation(line: 1548, column: 7, scope: !6167)
!6167 = distinct !DILexicalBlock(scope: !6156, file: !3, line: 1548, column: 7)
!6168 = !DILocation(line: 1548, column: 15, scope: !6167)
!6169 = !DILocation(line: 1548, column: 7, scope: !6156)
!6170 = !DILocation(line: 1549, column: 5, scope: !6167)
!6171 = !DILocation(line: 1551, column: 7, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !6156, file: !3, line: 1551, column: 7)
!6173 = !DILocation(line: 1551, column: 27, scope: !6172)
!6174 = !DILocation(line: 1551, column: 7, scope: !6156)
!6175 = !DILocation(line: 1552, column: 14, scope: !6172)
!6176 = !DILocation(line: 1552, column: 12, scope: !6172)
!6177 = !DILocation(line: 1552, column: 5, scope: !6172)
!6178 = !DILocation(line: 1553, column: 12, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 1553, column: 12)
!6180 = !DILocation(line: 1553, column: 38, scope: !6179)
!6181 = !DILocation(line: 1553, column: 12, scope: !6172)
!6182 = !DILocation(line: 1554, column: 14, scope: !6179)
!6183 = !DILocation(line: 1554, column: 12, scope: !6179)
!6184 = !DILocation(line: 1554, column: 5, scope: !6179)
!6185 = !DILocation(line: 1556, column: 14, scope: !6179)
!6186 = !DILocation(line: 1556, column: 12, scope: !6179)
!6187 = !DILocation(line: 1558, column: 3, scope: !6156)
!6188 = !DILocation(line: 1558, column: 10, scope: !6156)
!6189 = !DILocalVariable(name: "need_prefix", scope: !6190, file: !3, line: 1560, type: !1136)
!6190 = distinct !DILexicalBlock(scope: !6156, file: !3, line: 1559, column: 5)
!6191 = !DILocation(line: 1560, column: 11, scope: !6190)
!6192 = !DILocation(line: 1564, column: 17, scope: !6193)
!6193 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 1564, column: 7)
!6194 = !DILocation(line: 1564, column: 12, scope: !6193)
!6195 = !DILocation(line: 1565, column: 5, scope: !6196)
!6196 = distinct !DILexicalBlock(scope: !6193, file: !3, line: 1564, column: 7)
!6197 = !DILocation(line: 1565, column: 12, scope: !6196)
!6198 = !DILocation(line: 1565, column: 16, scope: !6196)
!6199 = !DILocation(line: 1565, column: 21, scope: !6196)
!6200 = !DILocation(line: 1565, column: 34, scope: !6196)
!6201 = !DILocation(line: 1565, column: 37, scope: !6196)
!6202 = !DILocation(line: 1565, column: 59, scope: !6196)
!6203 = !DILocation(line: 1565, column: 56, scope: !6196)
!6204 = !DILocation(line: 0, scope: !6196)
!6205 = !DILocation(line: 1564, column: 7, scope: !6193)
!6206 = !DILocation(line: 1574, column: 8, scope: !6207)
!6207 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 1574, column: 8)
!6208 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 1570, column: 2)
!6209 = !DILocation(line: 1574, column: 27, scope: !6207)
!6210 = !DILocation(line: 1574, column: 8, scope: !6208)
!6211 = !DILocation(line: 1575, column: 6, scope: !6207)
!6212 = !DILocation(line: 1577, column: 4, scope: !6208)
!6213 = !DILocation(line: 1579, column: 11, scope: !6208)
!6214 = !DILocation(line: 1579, column: 9, scope: !6208)
!6215 = !DILocation(line: 1583, column: 8, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 1583, column: 8)
!6217 = !DILocation(line: 1583, column: 32, scope: !6216)
!6218 = !DILocation(line: 1583, column: 35, scope: !6216)
!6219 = !DILocation(line: 1583, column: 8, scope: !6208)
!6220 = !DILocation(line: 1584, column: 6, scope: !6216)
!6221 = !DILocation(line: 1588, column: 8, scope: !6222)
!6222 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 1588, column: 8)
!6223 = !DILocation(line: 1588, column: 8, scope: !6208)
!6224 = !DILocation(line: 1590, column: 8, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6222, file: !3, line: 1589, column: 6)
!6226 = !DILocation(line: 1591, column: 8, scope: !6225)
!6227 = !DILocation(line: 1592, column: 20, scope: !6225)
!6228 = !DILocation(line: 1593, column: 6, scope: !6225)
!6229 = !DILocation(line: 1595, column: 17, scope: !6208)
!6230 = !DILocation(line: 1595, column: 4, scope: !6208)
!6231 = !DILocation(line: 1596, column: 26, scope: !6208)
!6232 = !DILocation(line: 1596, column: 4, scope: !6208)
!6233 = !DILocation(line: 1597, column: 2, scope: !6208)
!6234 = !DILocation(line: 1566, column: 14, scope: !6196)
!6235 = !DILocation(line: 1566, column: 12, scope: !6196)
!6236 = !DILocation(line: 1564, column: 7, scope: !6196)
!6237 = distinct !{!6237, !6205, !6238}
!6238 = !DILocation(line: 1597, column: 2, scope: !6193)
!6239 = !DILocation(line: 1598, column: 12, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 1598, column: 11)
!6241 = !DILocation(line: 1598, column: 11, scope: !6190)
!6242 = !DILocation(line: 1599, column: 2, scope: !6240)
!6243 = distinct !{!6243, !6187, !6244}
!6244 = !DILocation(line: 1600, column: 5, scope: !6156)
!6245 = !DILocation(line: 1601, column: 1, scope: !6156)
!6246 = distinct !DISubprogram(name: "stabstr_continue", scope: !3, file: !3, line: 789, type: !2213, scopeLine: 790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6247 = !DILocation(line: 801, column: 1, scope: !6246)
!6248 = distinct !DISubprogram(name: "dbxout_args", scope: !3, file: !3, line: 3567, type: !2246, scopeLine: 3568, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6249 = !DILocalVariable(name: "args", arg: 1, scope: !6248, file: !3, line: 3567, type: !1040)
!6250 = !DILocation(line: 3567, column: 19, scope: !6248)
!6251 = !DILocation(line: 3569, column: 3, scope: !6248)
!6252 = !DILocation(line: 3569, column: 10, scope: !6248)
!6253 = !DILocation(line: 3571, column: 7, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 3570, column: 5)
!6255 = !DILocation(line: 3572, column: 20, scope: !6254)
!6256 = !DILocation(line: 3572, column: 7, scope: !6254)
!6257 = !DILocation(line: 3573, column: 14, scope: !6254)
!6258 = !DILocation(line: 3573, column: 12, scope: !6254)
!6259 = distinct !{!6259, !6251, !6260}
!6260 = !DILocation(line: 3574, column: 5, scope: !6248)
!6261 = !DILocation(line: 3575, column: 1, scope: !6248)
!6262 = distinct !DISubprogram(name: "dbxout_type_method_1", scope: !3, file: !3, line: 1495, type: !2246, scopeLine: 1496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6263 = !DILocalVariable(name: "decl", arg: 1, scope: !6262, file: !3, line: 1495, type: !1040)
!6264 = !DILocation(line: 1495, column: 28, scope: !6262)
!6265 = !DILocalVariable(name: "c1", scope: !6262, file: !3, line: 1497, type: !1139)
!6266 = !DILocation(line: 1497, column: 8, scope: !6262)
!6267 = !DILocalVariable(name: "c2", scope: !6262, file: !3, line: 1497, type: !1139)
!6268 = !DILocation(line: 1497, column: 18, scope: !6262)
!6269 = !DILocation(line: 1499, column: 7, scope: !6270)
!6270 = distinct !DILexicalBlock(scope: !6262, file: !3, line: 1499, column: 7)
!6271 = !DILocation(line: 1499, column: 36, scope: !6270)
!6272 = !DILocation(line: 1499, column: 7, scope: !6262)
!6273 = !DILocation(line: 1500, column: 8, scope: !6270)
!6274 = !DILocation(line: 1500, column: 5, scope: !6270)
!6275 = !DILocalVariable(name: "firstarg", scope: !6276, file: !3, line: 1503, type: !1040)
!6276 = distinct !DILexicalBlock(scope: !6270, file: !3, line: 1502, column: 5)
!6277 = !DILocation(line: 1503, column: 12, scope: !6276)
!6278 = !DILocation(line: 1503, column: 23, scope: !6276)
!6279 = !DILocation(line: 1508, column: 11, scope: !6280)
!6280 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 1508, column: 11)
!6281 = !DILocation(line: 1508, column: 11, scope: !6276)
!6282 = !DILocation(line: 1509, column: 5, scope: !6280)
!6283 = !DILocation(line: 1509, column: 2, scope: !6280)
!6284 = !DILocation(line: 1510, column: 11, scope: !6285)
!6285 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 1510, column: 11)
!6286 = !DILocation(line: 1510, column: 11, scope: !6276)
!6287 = !DILocation(line: 1511, column: 5, scope: !6285)
!6288 = !DILocation(line: 1511, column: 2, scope: !6285)
!6289 = !DILocation(line: 1513, column: 11, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 1513, column: 11)
!6291 = !DILocation(line: 1513, column: 11, scope: !6276)
!6292 = !DILocation(line: 1514, column: 5, scope: !6290)
!6293 = !DILocation(line: 1514, column: 2, scope: !6290)
!6294 = !DILocation(line: 1516, column: 5, scope: !6290)
!6295 = !DILocation(line: 1521, column: 3, scope: !6262)
!6296 = !DILocation(line: 1522, column: 3, scope: !6262)
!6297 = !DILocation(line: 1523, column: 3, scope: !6262)
!6298 = !DILocation(line: 1524, column: 3, scope: !6262)
!6299 = !DILocation(line: 1525, column: 3, scope: !6262)
!6300 = !DILocation(line: 1526, column: 3, scope: !6262)
!6301 = !DILocation(line: 1528, column: 7, scope: !6302)
!6302 = distinct !DILexicalBlock(scope: !6262, file: !3, line: 1528, column: 7)
!6303 = !DILocation(line: 1528, column: 26, scope: !6302)
!6304 = !DILocation(line: 1528, column: 44, scope: !6302)
!6305 = !DILocation(line: 1528, column: 29, scope: !6302)
!6306 = !DILocation(line: 1528, column: 7, scope: !6262)
!6307 = !DILocation(line: 1530, column: 32, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 1529, column: 5)
!6309 = !DILocation(line: 1530, column: 18, scope: !6308)
!6310 = !DILocation(line: 1530, column: 7, scope: !6308)
!6311 = !DILocation(line: 1531, column: 7, scope: !6308)
!6312 = !DILocation(line: 1532, column: 20, scope: !6308)
!6313 = !DILocation(line: 1532, column: 7, scope: !6308)
!6314 = !DILocation(line: 1533, column: 7, scope: !6308)
!6315 = !DILocation(line: 1534, column: 5, scope: !6308)
!6316 = !DILocation(line: 1535, column: 1, scope: !6262)
!6317 = distinct !DISubprogram(name: "expand_expr", scope: !1030, file: !1030, line: 555, type: !6318, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6318 = !DISubroutineType(types: !6319)
!6319 = !{!1217, !1040, !1217, !5, !1029}
!6320 = !DILocalVariable(name: "exp", arg: 1, scope: !6317, file: !1030, line: 555, type: !1040)
!6321 = !DILocation(line: 555, column: 19, scope: !6317)
!6322 = !DILocalVariable(name: "target", arg: 2, scope: !6317, file: !1030, line: 555, type: !1217)
!6323 = !DILocation(line: 555, column: 28, scope: !6317)
!6324 = !DILocalVariable(name: "mode", arg: 3, scope: !6317, file: !1030, line: 555, type: !5)
!6325 = !DILocation(line: 555, column: 54, scope: !6317)
!6326 = !DILocalVariable(name: "modifier", arg: 4, scope: !6317, file: !1030, line: 556, type: !1029)
!6327 = !DILocation(line: 556, column: 28, scope: !6317)
!6328 = !DILocation(line: 558, column: 28, scope: !6317)
!6329 = !DILocation(line: 558, column: 33, scope: !6317)
!6330 = !DILocation(line: 558, column: 41, scope: !6317)
!6331 = !DILocation(line: 558, column: 47, scope: !6317)
!6332 = !DILocation(line: 558, column: 10, scope: !6317)
!6333 = !DILocation(line: 558, column: 3, scope: !6317)
!6334 = distinct !DISubprogram(name: "dbxout_begin_complex_stabs_noforcetext", scope: !3, file: !3, line: 634, type: !2213, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6335 = !DILocation(line: 636, column: 24, scope: !6334)
!6336 = !DILocation(line: 636, column: 3, scope: !6334)
!6337 = !DILocation(line: 637, column: 14, scope: !6334)
!6338 = !DILocation(line: 637, column: 3, scope: !6334)
!6339 = !DILocation(line: 638, column: 3, scope: !6334)
!6340 = !DILocation(line: 639, column: 1, scope: !6334)
!6341 = distinct !DISubprogram(name: "is_fortran", scope: !3, file: !3, line: 988, type: !6342, scopeLine: 989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6342 = !DISubroutineType(types: !6343)
!6343 = !{!1159}
!6344 = !DILocalVariable(name: "lang", scope: !6341, file: !3, line: 990, type: !7)
!6345 = !DILocation(line: 990, column: 17, scope: !6341)
!6346 = !DILocation(line: 990, column: 24, scope: !6341)
!6347 = !DILocation(line: 992, column: 12, scope: !6341)
!6348 = !DILocation(line: 992, column: 17, scope: !6341)
!6349 = !DILocation(line: 992, column: 34, scope: !6341)
!6350 = !DILocation(line: 992, column: 38, scope: !6341)
!6351 = !DILocation(line: 992, column: 43, scope: !6341)
!6352 = !DILocation(line: 992, column: 11, scope: !6341)
!6353 = !DILocation(line: 992, column: 4, scope: !6341)
!6354 = distinct !DISubprogram(name: "gt_pch_pa_typevec", scope: !2146, file: !2146, line: 65, type: !5163, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2188)
!6355 = !DILocalVariable(name: "this_obj", arg: 1, scope: !6354, file: !2146, line: 65, type: !1322)
!6356 = !DILocation(line: 65, column: 55, scope: !6354)
!6357 = !DILocalVariable(name: "x_p", arg: 2, scope: !6354, file: !2146, line: 66, type: !1322)
!6358 = !DILocation(line: 66, column: 30, scope: !6354)
!6359 = !DILocalVariable(name: "op", arg: 3, scope: !6354, file: !2146, line: 67, type: !5165)
!6360 = !DILocation(line: 67, column: 44, scope: !6354)
!6361 = !DILocalVariable(name: "cookie", arg: 4, scope: !6354, file: !2146, line: 68, type: !1322)
!6362 = !DILocation(line: 68, column: 31, scope: !6354)
!6363 = !DILocation(line: 70, column: 7, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6354, file: !2146, line: 70, column: 7)
!6365 = !DILocation(line: 70, column: 15, scope: !6364)
!6366 = !DILocation(line: 70, column: 7, scope: !6354)
!6367 = !DILocalVariable(name: "i0", scope: !6368, file: !2146, line: 71, type: !1641)
!6368 = distinct !DILexicalBlock(scope: !6364, file: !2146, line: 70, column: 24)
!6369 = !DILocation(line: 71, column: 12, scope: !6368)
!6370 = !DILocation(line: 72, column: 13, scope: !6371)
!6371 = distinct !DILexicalBlock(scope: !6368, file: !2146, line: 72, column: 5)
!6372 = !DILocation(line: 72, column: 10, scope: !6371)
!6373 = !DILocation(line: 72, column: 18, scope: !6374)
!6374 = distinct !DILexicalBlock(scope: !6371, file: !2146, line: 72, column: 5)
!6375 = !DILocation(line: 72, column: 33, scope: !6374)
!6376 = !DILocation(line: 72, column: 24, scope: !6374)
!6377 = !DILocation(line: 72, column: 21, scope: !6374)
!6378 = !DILocation(line: 72, column: 5, scope: !6371)
!6379 = !DILocation(line: 73, column: 5, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6374, file: !2146, line: 72, column: 53)
!6381 = !DILocation(line: 72, column: 49, scope: !6374)
!6382 = !DILocation(line: 72, column: 5, scope: !6374)
!6383 = distinct !{!6383, !6378, !6384}
!6384 = !DILocation(line: 73, column: 5, scope: !6371)
!6385 = !DILocation(line: 74, column: 31, scope: !6386)
!6386 = distinct !DILexicalBlock(scope: !6368, file: !2146, line: 74, column: 9)
!6387 = !DILocation(line: 74, column: 28, scope: !6386)
!6388 = !DILocation(line: 74, column: 9, scope: !6368)
!6389 = !DILocation(line: 75, column: 7, scope: !6386)
!6390 = !DILocation(line: 75, column: 23, scope: !6386)
!6391 = !DILocation(line: 76, column: 3, scope: !6368)
!6392 = !DILocation(line: 77, column: 1, scope: !6354)
