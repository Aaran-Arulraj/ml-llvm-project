; ModuleID = 'tree-complex.c'
source_filename = "tree-complex.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_complex_lattice_t_heap = type { %struct.VEC_complex_lattice_t_base }
%struct.VEC_complex_lattice_t_base = type { i32, i32, [1 x i32] }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.real_value = type { i32, [3 x i64] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.var_ann_d = type { i8, i32, %union.tree_node* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_var_decl = type { %struct.tree_decl_with_vis, %struct.var_ann_d* }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.tree_result_decl = type { %struct.tree_decl_with_rtl, %struct.var_ann_d* }
%struct.tree_complex = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_real_cst = type { %struct.tree_common, %struct.real_value* }
%struct.int_tree_map = type { i32, %union.tree_node* }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque

@.str = private unnamed_addr constant [10 x i8] c"cplxlower\00", align 1
@pass_lower_complex = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8 ()* null, i32 ()* @tree_lower_complex, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 32, i32 1024, i32 0, i32 0, i32 2067 } }, align 8, !dbg !0
@.str.1 = private unnamed_addr constant [11 x i8] c"cplxlower0\00", align 1
@pass_lower_complex_O0 = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i8 ()* @gate_no_optimization, i32 ()* @tree_lower_complex, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 8, i32 1024, i32 0, i32 0, i32 2067 } }, align 8, !dbg !2891
@cfun = external dso_local global %struct.function*, align 8
@complex_lattice_values = internal global %struct.VEC_complex_lattice_t_heap* null, align 8, !dbg !2919
@complex_variable_components = internal global %struct.htab* null, align 8, !dbg !2921
@complex_ssa_name_components = internal global %struct.VEC_tree_heap* null, align 8, !dbg !2923
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.2 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"tree-complex.c\00", align 1
@flag_signed_zeros = external dso_local global i32, align 4
@dconst0 = external dso_local global %struct.real_value, align 8
@.str.5 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"CI\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"$imag\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"$real\00", align 1
@libiberty_concat_ptr = external dso_local global i8*, align 8
@tree_code_type = external dso_local constant [0 x i32], align 4
@dconst1 = external dso_local global %struct.real_value, align 8
@flag_complex_method = external dso_local global i32, align 4
@mode_class = external dso_local constant [87 x i8], align 16
@built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@global_trees = external dso_local global [131 x %union.tree_node*], align 16

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_lower_complex() #0 !dbg !2929 {
entry:
  %retval = alloca i32, align 4
  %old_last_basic_block = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata i32* %old_last_basic_block, metadata !2931, metadata !DIExpression()), !dbg !2932
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2933, metadata !DIExpression()), !dbg !2940
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2941, metadata !DIExpression()), !dbg !2942
  %call = call zeroext i8 @init_dont_simulate_again(), !dbg !2943
  %tobool = icmp ne i8 %call, 0, !dbg !2943
  br i1 %tobool, label %if.end, label %if.then, !dbg !2945

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2946
  br label %return, !dbg !2946

if.end:                                           ; preds = %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2947
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2947
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !2947
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !2947
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !2947
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !2947
  %tobool1 = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !2947
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !2947

cond.true:                                        ; preds = %if.end
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2947
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !2947
  %gimple_df3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 3, !dbg !2947
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df3, align 8, !dbg !2947
  %ssa_names4 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !2947
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names4, align 8, !dbg !2947
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !2947
  br label %cond.end, !dbg !2947

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2947

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2947
  %call5 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !2947
  %call6 = call %struct.VEC_complex_lattice_t_heap* @VEC_complex_lattice_t_heap_alloc(i32 %call5), !dbg !2947
  store %struct.VEC_complex_lattice_t_heap* %call6, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !2948
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2949
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2949
  %gimple_df8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 3, !dbg !2949
  %7 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df8, align 8, !dbg !2949
  %ssa_names9 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %7, i32 0, i32 2, !dbg !2949
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names9, align 8, !dbg !2949
  %tobool10 = icmp ne %struct.VEC_tree_gc* %8, null, !dbg !2949
  br i1 %tobool10, label %cond.true11, label %cond.false16, !dbg !2949

cond.true11:                                      ; preds = %cond.end
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2949
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2949
  %gimple_df13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 3, !dbg !2949
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df13, align 8, !dbg !2949
  %ssa_names14 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i32 0, i32 2, !dbg !2949
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names14, align 8, !dbg !2949
  %base15 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i32 0, i32 0, !dbg !2949
  br label %cond.end17, !dbg !2949

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17, !dbg !2949

cond.end17:                                       ; preds = %cond.false16, %cond.true11
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true11 ], [ null, %cond.false16 ], !dbg !2949
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond18), !dbg !2949
  call void @VEC_complex_lattice_t_heap_safe_grow_cleared(%struct.VEC_complex_lattice_t_heap** @complex_lattice_values, i32 %call19), !dbg !2949
  call void @init_parameter_lattice_values(), !dbg !2950
  call void @ssa_propagate(i32 (%union.gimple_statement_d*, %struct.edge_def**, %union.tree_node**)* @complex_visit_stmt, i32 (%union.gimple_statement_d*)* @complex_visit_phi), !dbg !2951
  %call20 = call %struct.htab* @htab_create(i64 10, i32 (i8*)* @int_tree_map_hash, i32 (i8*, i8*)* @int_tree_map_eq, void (i8*)* @free), !dbg !2952
  store %struct.htab* %call20, %struct.htab** @complex_variable_components, align 8, !dbg !2953
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2954
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2954
  %gimple_df22 = getelementptr inbounds %struct.function, %struct.function* %add.ptr21, i32 0, i32 3, !dbg !2954
  %13 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df22, align 8, !dbg !2954
  %ssa_names23 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %13, i32 0, i32 2, !dbg !2954
  %14 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names23, align 8, !dbg !2954
  %tobool24 = icmp ne %struct.VEC_tree_gc* %14, null, !dbg !2954
  br i1 %tobool24, label %cond.true25, label %cond.false30, !dbg !2954

cond.true25:                                      ; preds = %cond.end17
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2954
  %add.ptr26 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !2954
  %gimple_df27 = getelementptr inbounds %struct.function, %struct.function* %add.ptr26, i32 0, i32 3, !dbg !2954
  %16 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df27, align 8, !dbg !2954
  %ssa_names28 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %16, i32 0, i32 2, !dbg !2954
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names28, align 8, !dbg !2954
  %base29 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %17, i32 0, i32 0, !dbg !2954
  br label %cond.end31, !dbg !2954

cond.false30:                                     ; preds = %cond.end17
  br label %cond.end31, !dbg !2954

cond.end31:                                       ; preds = %cond.false30, %cond.true25
  %cond32 = phi %struct.VEC_tree_base* [ %base29, %cond.true25 ], [ null, %cond.false30 ], !dbg !2954
  %call33 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond32), !dbg !2954
  %mul = mul i32 2, %call33, !dbg !2954
  %call34 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %mul), !dbg !2954
  store %struct.VEC_tree_heap* %call34, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !2955
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2956
  %add.ptr35 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !2956
  %gimple_df36 = getelementptr inbounds %struct.function, %struct.function* %add.ptr35, i32 0, i32 3, !dbg !2956
  %19 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df36, align 8, !dbg !2956
  %ssa_names37 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %19, i32 0, i32 2, !dbg !2956
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names37, align 8, !dbg !2956
  %tobool38 = icmp ne %struct.VEC_tree_gc* %20, null, !dbg !2956
  br i1 %tobool38, label %cond.true39, label %cond.false44, !dbg !2956

cond.true39:                                      ; preds = %cond.end31
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2956
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !2956
  %gimple_df41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 3, !dbg !2956
  %22 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df41, align 8, !dbg !2956
  %ssa_names42 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %22, i32 0, i32 2, !dbg !2956
  %23 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names42, align 8, !dbg !2956
  %base43 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %23, i32 0, i32 0, !dbg !2956
  br label %cond.end45, !dbg !2956

cond.false44:                                     ; preds = %cond.end31
  br label %cond.end45, !dbg !2956

cond.end45:                                       ; preds = %cond.false44, %cond.true39
  %cond46 = phi %struct.VEC_tree_base* [ %base43, %cond.true39 ], [ null, %cond.false44 ], !dbg !2956
  %call47 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond46), !dbg !2956
  %mul48 = mul i32 2, %call47, !dbg !2956
  call void @VEC_tree_heap_safe_grow_cleared(%struct.VEC_tree_heap** @complex_ssa_name_components, i32 %mul48), !dbg !2956
  call void @update_parameter_components(), !dbg !2957
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2958
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !2958
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 1, !dbg !2958
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2958
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 5, !dbg !2958
  %26 = load i32, i32* %x_last_basic_block, align 8, !dbg !2958
  store i32 %26, i32* %old_last_basic_block, align 4, !dbg !2959
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2960
  %add.ptr50 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !2960
  %cfg51 = getelementptr inbounds %struct.function, %struct.function* %add.ptr50, i32 0, i32 1, !dbg !2960
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg51, align 8, !dbg !2960
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 0, !dbg !2960
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2960
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 6, !dbg !2960
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2960
  store %struct.basic_block_def* %30, %struct.basic_block_def** %bb, align 8, !dbg !2960
  br label %for.cond, !dbg !2960

for.cond:                                         ; preds = %for.inc61, %cond.end45
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2962
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2962
  %add.ptr52 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !2962
  %cfg53 = getelementptr inbounds %struct.function, %struct.function* %add.ptr52, i32 0, i32 1, !dbg !2962
  %33 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg53, align 8, !dbg !2962
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %33, i32 0, i32 1, !dbg !2962
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2962
  %cmp = icmp ne %struct.basic_block_def* %31, %34, !dbg !2962
  br i1 %cmp, label %for.body, label %for.end63, !dbg !2960

for.body:                                         ; preds = %for.cond
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2964
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 9, !dbg !2967
  %36 = load i32, i32* %index, align 8, !dbg !2967
  %37 = load i32, i32* %old_last_basic_block, align 4, !dbg !2968
  %cmp54 = icmp sge i32 %36, %37, !dbg !2969
  br i1 %cmp54, label %if.then55, label %if.end56, !dbg !2970

if.then55:                                        ; preds = %for.body
  br label %for.inc61, !dbg !2971

if.end56:                                         ; preds = %for.body
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2972
  call void @update_phi_components(%struct.basic_block_def* %38), !dbg !2973
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2974
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %39), !dbg !2976
  %40 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2976
  %41 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2976
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false), !dbg !2976
  br label %for.cond57, !dbg !2977

for.cond57:                                       ; preds = %for.inc, %if.end56
  %call58 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2978
  %tobool59 = icmp ne i8 %call58, 0, !dbg !2980
  %lnot = xor i1 %tobool59, true, !dbg !2980
  br i1 %lnot, label %for.body60, label %for.end, !dbg !2981

for.body60:                                       ; preds = %for.cond57
  call void @expand_complex_operations_1(%struct.gimple_stmt_iterator* %gsi), !dbg !2982
  br label %for.inc, !dbg !2982

for.inc:                                          ; preds = %for.body60
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !2983
  br label %for.cond57, !dbg !2984, !llvm.loop !2985

for.end:                                          ; preds = %for.cond57
  br label %for.inc61, !dbg !2987

for.inc61:                                        ; preds = %for.end, %if.then55
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2962
  %next_bb62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 6, !dbg !2962
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb62, align 8, !dbg !2962
  store %struct.basic_block_def* %43, %struct.basic_block_def** %bb, align 8, !dbg !2962
  br label %for.cond, !dbg !2962, !llvm.loop !2988

for.end63:                                        ; preds = %for.cond
  call void @gsi_commit_edge_inserts(), !dbg !2990
  %44 = load %struct.htab*, %struct.htab** @complex_variable_components, align 8, !dbg !2991
  call void @htab_delete(%struct.htab* %44), !dbg !2992
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** @complex_ssa_name_components), !dbg !2993
  call void @VEC_complex_lattice_t_heap_free(%struct.VEC_complex_lattice_t_heap** @complex_lattice_values), !dbg !2994
  store i32 0, i32* %retval, align 4, !dbg !2995
  br label %return, !dbg !2995

return:                                           ; preds = %for.end63, %if.then
  %45 = load i32, i32* %retval, align 4, !dbg !2996
  ret i32 %45, !dbg !2996
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_no_optimization() #0 !dbg !2997 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2998
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2998
  %curr_properties = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 17, !dbg !2999
  %1 = load i32, i32* %curr_properties, align 8, !dbg !2999
  %and = and i32 %1, 1024, !dbg !3000
  %tobool = icmp ne i32 %and, 0, !dbg !3001
  %lnot = xor i1 %tobool, true, !dbg !3001
  %lnot.ext = zext i1 %lnot to i32, !dbg !3001
  %conv = trunc i32 %lnot.ext to i8, !dbg !3001
  ret i8 %conv, !dbg !3002
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @init_dont_simulate_again() #0 !dbg !3003 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %saw_a_complex_op = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp8 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %sim_again_p = alloca i8, align 1
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3004, metadata !DIExpression()), !dbg !3005
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3006, metadata !DIExpression()), !dbg !3007
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3008, metadata !DIExpression()), !dbg !3009
  call void @llvm.dbg.declare(metadata i8* %saw_a_complex_op, metadata !3010, metadata !DIExpression()), !dbg !3011
  store i8 0, i8* %saw_a_complex_op, align 1, !dbg !3011
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3012
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3012
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3012
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3012
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3012
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3012
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3012
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3012
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3012
  br label %for.cond, !dbg !3012

for.cond:                                         ; preds = %for.inc82, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3014
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3014
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3014
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3014
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3014
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3014
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3014
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3014
  br i1 %cmp, label %for.body, label %for.end84, !dbg !3012

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3016
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !3019
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3019
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3019
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !3019
  br label %for.cond3, !dbg !3020

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3021
  %tobool = icmp ne i8 %call, 0, !dbg !3023
  %lnot = xor i1 %tobool, true, !dbg !3023
  br i1 %lnot, label %for.body4, label %for.end, !dbg !3024

for.body4:                                        ; preds = %for.cond3
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3025
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %phi, align 8, !dbg !3027
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3028
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3029
  %call6 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %12), !dbg !3030
  %call7 = call zeroext i8 @is_complex_reg(%union.tree_node* %call6), !dbg !3031
  call void @prop_set_simulate_again(%union.gimple_statement_d* %11, i8 zeroext %call7), !dbg !3032
  br label %for.inc, !dbg !3033

for.inc:                                          ; preds = %for.body4
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3034
  br label %for.cond3, !dbg !3035, !llvm.loop !3036

for.end:                                          ; preds = %for.cond3
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3038
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp8, %struct.basic_block_def* %13), !dbg !3040
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3040
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp8 to i8*, !dbg !3040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !3040
  br label %for.cond9, !dbg !3041

for.cond9:                                        ; preds = %for.inc80, %for.end
  %call10 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3042
  %tobool11 = icmp ne i8 %call10, 0, !dbg !3044
  %lnot12 = xor i1 %tobool11, true, !dbg !3044
  br i1 %lnot12, label %for.body13, label %for.end81, !dbg !3045

for.body13:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3046, metadata !DIExpression()), !dbg !3048
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !3049, metadata !DIExpression()), !dbg !3050
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !3051, metadata !DIExpression()), !dbg !3052
  call void @llvm.dbg.declare(metadata i8* %sim_again_p, metadata !3053, metadata !DIExpression()), !dbg !3054
  %call14 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3055
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %stmt, align 8, !dbg !3056
  store %union.tree_node* null, %union.tree_node** %op1, align 8, !dbg !3057
  store %union.tree_node* null, %union.tree_node** %op0, align 8, !dbg !3058
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3059
  %call15 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %16), !dbg !3060
  store i8 %call15, i8* %sim_again_p, align 1, !dbg !3061
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3062
  %call16 = call i32 @gimple_code(%union.gimple_statement_d* %17), !dbg !3063
  switch i32 %call16, label %sw.default [
    i32 8, label %sw.bb
    i32 6, label %sw.bb21
    i32 1, label %sw.bb37
  ], !dbg !3064

sw.bb:                                            ; preds = %for.body13
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3065
  %call17 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %18), !dbg !3068
  %tobool18 = icmp ne %union.tree_node* %call17, null, !dbg !3068
  br i1 %tobool18, label %if.then, label %if.end, !dbg !3069

if.then:                                          ; preds = %sw.bb
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3070
  %call19 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %19), !dbg !3071
  %call20 = call zeroext i8 @is_complex_reg(%union.tree_node* %call19), !dbg !3072
  store i8 %call20, i8* %sim_again_p, align 1, !dbg !3073
  br label %if.end, !dbg !3074

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog, !dbg !3075

sw.bb21:                                          ; preds = %for.body13
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3076
  %call22 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %20), !dbg !3077
  %call23 = call zeroext i8 @is_complex_reg(%union.tree_node* %call22), !dbg !3078
  store i8 %call23, i8* %sim_again_p, align 1, !dbg !3079
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3080
  %call24 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %21), !dbg !3082
  %cmp25 = icmp eq i32 %call24, 43, !dbg !3083
  br i1 %cmp25, label %if.then28, label %lor.lhs.false, !dbg !3084

lor.lhs.false:                                    ; preds = %sw.bb21
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3085
  %call26 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %22), !dbg !3086
  %cmp27 = icmp eq i32 %call26, 44, !dbg !3087
  br i1 %cmp27, label %if.then28, label %if.else, !dbg !3088

if.then28:                                        ; preds = %lor.lhs.false, %sw.bb21
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3089
  %call29 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %23), !dbg !3089
  %exp = bitcast %union.tree_node* %call29 to %struct.tree_exp*, !dbg !3089
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3089
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3089
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3089
  store %union.tree_node* %24, %union.tree_node** %op0, align 8, !dbg !3090
  br label %if.end31, !dbg !3091

if.else:                                          ; preds = %lor.lhs.false
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3092
  %call30 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %25), !dbg !3093
  store %union.tree_node* %call30, %union.tree_node** %op0, align 8, !dbg !3094
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.then28
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3095
  %call32 = call i32 @gimple_num_ops(%union.gimple_statement_d* %26), !dbg !3097
  %cmp33 = icmp ugt i32 %call32, 2, !dbg !3098
  br i1 %cmp33, label %if.then34, label %if.end36, !dbg !3099

if.then34:                                        ; preds = %if.end31
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3100
  %call35 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %27), !dbg !3101
  store %union.tree_node* %call35, %union.tree_node** %op1, align 8, !dbg !3102
  br label %if.end36, !dbg !3103

if.end36:                                         ; preds = %if.then34, %if.end31
  br label %sw.epilog, !dbg !3104

sw.bb37:                                          ; preds = %for.body13
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3105
  %call38 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %28), !dbg !3106
  store %union.tree_node* %call38, %union.tree_node** %op0, align 8, !dbg !3107
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3108
  %call39 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %29), !dbg !3109
  store %union.tree_node* %call39, %union.tree_node** %op1, align 8, !dbg !3110
  br label %sw.epilog, !dbg !3111

sw.default:                                       ; preds = %for.body13
  br label %sw.epilog, !dbg !3112

sw.epilog:                                        ; preds = %sw.default, %sw.bb37, %if.end36, %if.end
  %30 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3113
  %tobool40 = icmp ne %union.tree_node* %30, null, !dbg !3113
  br i1 %tobool40, label %if.then43, label %lor.lhs.false41, !dbg !3115

lor.lhs.false41:                                  ; preds = %sw.epilog
  %31 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !3116
  %tobool42 = icmp ne %union.tree_node* %31, null, !dbg !3116
  br i1 %tobool42, label %if.then43, label %if.end79, !dbg !3117

if.then43:                                        ; preds = %lor.lhs.false41, %sw.epilog
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3118
  %call44 = call i32 @gimple_expr_code(%union.gimple_statement_d* %32), !dbg !3119
  switch i32 %call44, label %sw.default77 [
    i32 101, label %sw.bb45
    i32 102, label %sw.bb45
    i32 63, label %sw.bb45
    i32 64, label %sw.bb45
    i32 65, label %sw.bb45
    i32 67, label %sw.bb45
    i32 68, label %sw.bb45
    i32 69, label %sw.bb45
    i32 70, label %sw.bb45
    i32 75, label %sw.bb45
    i32 79, label %sw.bb57
    i32 124, label %sw.bb57
    i32 43, label %sw.bb67
    i32 44, label %sw.bb67
  ], !dbg !3120

sw.bb45:                                          ; preds = %if.then43, %if.then43, %if.then43, %if.then43, %if.then43, %if.then43, %if.then43, %if.then43, %if.then43, %if.then43
  %33 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3121
  %common = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !3121
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3121
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3121
  %base = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !3121
  %35 = bitcast %struct.tree_base* %base to i64*, !dbg !3121
  %bf.load = load i64, i64* %35, align 8, !dbg !3121
  %bf.clear = and i64 %bf.load, 65535, !dbg !3121
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3121
  %cmp46 = icmp eq i32 %bf.cast, 13, !dbg !3124
  br i1 %cmp46, label %if.then55, label %lor.lhs.false47, !dbg !3125

lor.lhs.false47:                                  ; preds = %sw.bb45
  %36 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !3126
  %common48 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !3126
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2, !dbg !3126
  %37 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !3126
  %base50 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !3126
  %38 = bitcast %struct.tree_base* %base50 to i64*, !dbg !3126
  %bf.load51 = load i64, i64* %38, align 8, !dbg !3126
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !3126
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !3126
  %cmp54 = icmp eq i32 %bf.cast53, 13, !dbg !3127
  br i1 %cmp54, label %if.then55, label %if.end56, !dbg !3128

if.then55:                                        ; preds = %lor.lhs.false47, %sw.bb45
  store i8 1, i8* %saw_a_complex_op, align 1, !dbg !3129
  br label %if.end56, !dbg !3130

if.end56:                                         ; preds = %if.then55, %lor.lhs.false47
  br label %sw.epilog78, !dbg !3131

sw.bb57:                                          ; preds = %if.then43, %if.then43
  %39 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3132
  %common58 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !3132
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !3132
  %40 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !3132
  %base60 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !3132
  %41 = bitcast %struct.tree_base* %base60 to i64*, !dbg !3132
  %bf.load61 = load i64, i64* %41, align 8, !dbg !3132
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !3132
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !3132
  %cmp64 = icmp eq i32 %bf.cast63, 13, !dbg !3134
  br i1 %cmp64, label %if.then65, label %if.end66, !dbg !3135

if.then65:                                        ; preds = %sw.bb57
  store i8 1, i8* %saw_a_complex_op, align 1, !dbg !3136
  br label %if.end66, !dbg !3137

if.end66:                                         ; preds = %if.then65, %sw.bb57
  br label %sw.epilog78, !dbg !3138

sw.bb67:                                          ; preds = %if.then43, %if.then43
  %42 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3139
  %base68 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !3139
  %43 = bitcast %struct.tree_base* %base68 to i64*, !dbg !3139
  %bf.load69 = load i64, i64* %43, align 8, !dbg !3139
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !3139
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !3139
  %cmp72 = icmp eq i32 %bf.cast71, 141, !dbg !3141
  br i1 %cmp72, label %land.lhs.true, label %if.end76, !dbg !3142

land.lhs.true:                                    ; preds = %sw.bb67
  %44 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3143
  %call73 = call zeroext i8 @ssa_undefined_value_p(%union.tree_node* %44), !dbg !3144
  %conv = zext i8 %call73 to i32, !dbg !3144
  %tobool74 = icmp ne i32 %conv, 0, !dbg !3144
  br i1 %tobool74, label %if.then75, label %if.end76, !dbg !3145

if.then75:                                        ; preds = %land.lhs.true
  store i8 1, i8* %saw_a_complex_op, align 1, !dbg !3146
  br label %if.end76, !dbg !3147

if.end76:                                         ; preds = %if.then75, %land.lhs.true, %sw.bb67
  br label %sw.epilog78, !dbg !3148

sw.default77:                                     ; preds = %if.then43
  br label %sw.epilog78, !dbg !3149

sw.epilog78:                                      ; preds = %sw.default77, %if.end76, %if.end66, %if.end56
  br label %if.end79, !dbg !3150

if.end79:                                         ; preds = %sw.epilog78, %lor.lhs.false41
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3151
  %46 = load i8, i8* %sim_again_p, align 1, !dbg !3152
  call void @prop_set_simulate_again(%union.gimple_statement_d* %45, i8 zeroext %46), !dbg !3153
  br label %for.inc80, !dbg !3154

for.inc80:                                        ; preds = %if.end79
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3155
  br label %for.cond9, !dbg !3156, !llvm.loop !3157

for.end81:                                        ; preds = %for.cond9
  br label %for.inc82, !dbg !3159

for.inc82:                                        ; preds = %for.end81
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3014
  %next_bb83 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 6, !dbg !3014
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb83, align 8, !dbg !3014
  store %struct.basic_block_def* %48, %struct.basic_block_def** %bb, align 8, !dbg !3014
  br label %for.cond, !dbg !3014, !llvm.loop !3160

for.end84:                                        ; preds = %for.cond
  %49 = load i8, i8* %saw_a_complex_op, align 1, !dbg !3162
  ret i8 %49, !dbg !3163
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_complex_lattice_t_heap* @VEC_complex_lattice_t_heap_alloc(i32 %alloc_) #0 !dbg !3164 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3167, metadata !DIExpression()), !dbg !3168
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3168
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !3168
  %1 = bitcast i8* %call to %struct.VEC_complex_lattice_t_heap*, !dbg !3168
  ret %struct.VEC_complex_lattice_t_heap* %1, !dbg !3168
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !3169 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3174, metadata !DIExpression()), !dbg !3175
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3175
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3175
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3175

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3175
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !3175
  %2 = load i32, i32* %num, align 8, !dbg !3175
  br label %cond.end, !dbg !3175

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3175

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3175
  ret i32 %cond, !dbg !3175
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_complex_lattice_t_heap_safe_grow_cleared(%struct.VEC_complex_lattice_t_heap** %vec_, i32 %size_) #0 !dbg !3176 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_complex_lattice_t_heap** %vec_, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_heap*** %vec_.addr, metadata !3180, metadata !DIExpression()), !dbg !3181
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !3182, metadata !DIExpression()), !dbg !3181
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !3183, metadata !DIExpression()), !dbg !3181
  %0 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !3181
  %1 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %0, align 8, !dbg !3181
  %tobool = icmp ne %struct.VEC_complex_lattice_t_heap* %1, null, !dbg !3181
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3181

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !3181
  %3 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %2, align 8, !dbg !3181
  %base = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %3, i32 0, i32 0, !dbg !3181
  br label %cond.end, !dbg !3181

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3181

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_complex_lattice_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3181
  %call = call i32 @VEC_complex_lattice_t_base_length(%struct.VEC_complex_lattice_t_base* %cond), !dbg !3181
  store i32 %call, i32* %oldsize, align 4, !dbg !3181
  %4 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !3181
  %5 = load i32, i32* %size_.addr, align 4, !dbg !3181
  call void @VEC_complex_lattice_t_heap_safe_grow(%struct.VEC_complex_lattice_t_heap** %4, i32 %5), !dbg !3181
  %6 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !3181
  %7 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %6, align 8, !dbg !3181
  %tobool1 = icmp ne %struct.VEC_complex_lattice_t_heap* %7, null, !dbg !3181
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3181

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !3181
  %9 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %8, align 8, !dbg !3181
  %base3 = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %9, i32 0, i32 0, !dbg !3181
  br label %cond.end5, !dbg !3181

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3181

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_complex_lattice_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3181
  %call7 = call i32* @VEC_complex_lattice_t_base_address(%struct.VEC_complex_lattice_t_base* %cond6), !dbg !3181
  %10 = load i32, i32* %oldsize, align 4, !dbg !3181
  %idxprom = sext i32 %10 to i64, !dbg !3181
  %arrayidx = getelementptr inbounds i32, i32* %call7, i64 %idxprom, !dbg !3181
  %11 = bitcast i32* %arrayidx to i8*, !dbg !3181
  %12 = load i32, i32* %size_.addr, align 4, !dbg !3181
  %13 = load i32, i32* %oldsize, align 4, !dbg !3181
  %sub = sub nsw i32 %12, %13, !dbg !3181
  %conv = sext i32 %sub to i64, !dbg !3181
  %mul = mul i64 4, %conv, !dbg !3181
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 %mul, i1 false), !dbg !3181
  ret void, !dbg !3181
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_parameter_lattice_values() #0 !dbg !3184 {
entry:
  %parm = alloca %union.tree_node*, align 8
  %ssa_name = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !3187, metadata !DIExpression()), !dbg !3188
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_name, metadata !3189, metadata !DIExpression()), !dbg !3190
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3191
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3191
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !3191
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3191
  %decl_non_common = bitcast %union.tree_node* %1 to %struct.tree_decl_non_common*, !dbg !3191
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !3191
  %2 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !3191
  store %union.tree_node* %2, %union.tree_node** %parm, align 8, !dbg !3193
  br label %for.cond, !dbg !3194

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3195
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !3197
  br i1 %tobool, label %for.body, label %for.end, !dbg !3197

for.body:                                         ; preds = %for.cond
  %4 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3198
  %call = call zeroext i8 @is_complex_reg(%union.tree_node* %4), !dbg !3200
  %conv = zext i8 %call to i32, !dbg !3200
  %tobool1 = icmp ne i32 %conv, 0, !dbg !3200
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !3201

land.lhs.true:                                    ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3202
  %call2 = call %struct.var_ann_d* @var_ann(%union.tree_node* %5), !dbg !3203
  %cmp = icmp ne %struct.var_ann_d* %call2, null, !dbg !3204
  br i1 %cmp, label %land.lhs.true4, label %if.end, !dbg !3205

land.lhs.true4:                                   ; preds = %land.lhs.true
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3206
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3206
  %7 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3207
  %call6 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr5, %union.tree_node* %7), !dbg !3208
  store %union.tree_node* %call6, %union.tree_node** %ssa_name, align 8, !dbg !3209
  %cmp7 = icmp ne %union.tree_node* %call6, null, !dbg !3210
  br i1 %cmp7, label %if.then, label %if.end, !dbg !3211

if.then:                                          ; preds = %land.lhs.true4
  %8 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3212
  %tobool9 = icmp ne %struct.VEC_complex_lattice_t_heap* %8, null, !dbg !3212
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !3212

cond.true:                                        ; preds = %if.then
  %9 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3212
  %base = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %9, i32 0, i32 0, !dbg !3212
  br label %cond.end, !dbg !3212

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3212

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_complex_lattice_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3212
  %10 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !3212
  %ssa_name10 = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !3212
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 3, !dbg !3212
  %11 = load i32, i32* %version, align 8, !dbg !3212
  %call11 = call i32 @VEC_complex_lattice_t_base_replace(%struct.VEC_complex_lattice_t_base* %cond, i32 %11, i32 3), !dbg !3212
  br label %if.end, !dbg !3212

if.end:                                           ; preds = %cond.end, %land.lhs.true4, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3213

for.inc:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3214
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !3214
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3214
  %13 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3214
  store %union.tree_node* %13, %union.tree_node** %parm, align 8, !dbg !3215
  br label %for.cond, !dbg !3216, !llvm.loop !3217

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3219
}

declare dso_local void @ssa_propagate(i32 (%union.gimple_statement_d*, %struct.edge_def**, %union.tree_node**)*, i32 (%union.gimple_statement_d*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @complex_visit_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p, %union.tree_node** %result_p) #0 !dbg !3220 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %taken_edge_p.addr = alloca %struct.edge_def**, align 8
  %result_p.addr = alloca %union.tree_node**, align 8
  %new_l = alloca i32, align 4
  %old_l = alloca i32, align 4
  %op1_l = alloca i32, align 4
  %op2_l = alloca i32, align 4
  %ver = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3224, metadata !DIExpression()), !dbg !3225
  store %struct.edge_def** %taken_edge_p, %struct.edge_def*** %taken_edge_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %taken_edge_p.addr, metadata !3226, metadata !DIExpression()), !dbg !3227
  store %union.tree_node** %result_p, %union.tree_node*** %result_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %result_p.addr, metadata !3228, metadata !DIExpression()), !dbg !3229
  call void @llvm.dbg.declare(metadata i32* %new_l, metadata !3230, metadata !DIExpression()), !dbg !3231
  call void @llvm.dbg.declare(metadata i32* %old_l, metadata !3232, metadata !DIExpression()), !dbg !3233
  call void @llvm.dbg.declare(metadata i32* %op1_l, metadata !3234, metadata !DIExpression()), !dbg !3235
  call void @llvm.dbg.declare(metadata i32* %op2_l, metadata !3236, metadata !DIExpression()), !dbg !3237
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !3238, metadata !DIExpression()), !dbg !3239
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3240, metadata !DIExpression()), !dbg !3241
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3242
  %call = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %0), !dbg !3243
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !3244
  %1 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3245
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !3245
  br i1 %tobool, label %if.end, label %if.then, !dbg !3247

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !3248
  br label %return, !dbg !3248

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3249
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3249
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3249
  %bf.load = load i64, i64* %3, align 8, !dbg !3249
  %bf.clear = and i64 %bf.load, 65535, !dbg !3249
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3249
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3249
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3249

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 313, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3249
  br label %cond.end, !dbg !3249

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3249

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3249
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3250
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3250
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3250
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3250
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3250
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3250
  %bf.load2 = load i64, i64* %6, align 8, !dbg !3250
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3250
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3250
  %cmp5 = icmp eq i32 %bf.cast4, 13, !dbg !3250
  br i1 %cmp5, label %cond.false7, label %cond.true6, !dbg !3250

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 314, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3250
  br label %cond.end8, !dbg !3250

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !3250

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !3250
  %7 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3251
  %8 = load %union.tree_node**, %union.tree_node*** %result_p.addr, align 8, !dbg !3252
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !3253
  %9 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3254
  %ssa_name = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !3254
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3254
  %10 = load i32, i32* %version, align 8, !dbg !3254
  store i32 %10, i32* %ver, align 4, !dbg !3255
  %11 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3256
  %tobool10 = icmp ne %struct.VEC_complex_lattice_t_heap* %11, null, !dbg !3256
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !3256

cond.true11:                                      ; preds = %cond.end8
  %12 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3256
  %base12 = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %12, i32 0, i32 0, !dbg !3256
  br label %cond.end14, !dbg !3256

cond.false13:                                     ; preds = %cond.end8
  br label %cond.end14, !dbg !3256

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_complex_lattice_t_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !3256
  %13 = load i32, i32* %ver, align 4, !dbg !3256
  %call16 = call i32 @VEC_complex_lattice_t_base_index(%struct.VEC_complex_lattice_t_base* %cond15, i32 %13), !dbg !3256
  store i32 %call16, i32* %old_l, align 4, !dbg !3257
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3258
  %call17 = call i32 @gimple_expr_code(%union.gimple_statement_d* %14), !dbg !3259
  switch i32 %call17, label %sw.default [
    i32 141, label %sw.bb
    i32 26, label %sw.bb
    i32 123, label %sw.bb20
    i32 63, label %sw.bb24
    i32 64, label %sw.bb24
    i32 65, label %sw.bb29
    i32 75, label %sw.bb29
    i32 67, label %sw.bb29
    i32 68, label %sw.bb29
    i32 69, label %sw.bb29
    i32 70, label %sw.bb29
    i32 79, label %sw.bb48
    i32 124, label %sw.bb48
  ], !dbg !3260

sw.bb:                                            ; preds = %cond.end14, %cond.end14
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3261
  %call18 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %15), !dbg !3263
  %call19 = call i32 @find_lattice_value(%union.tree_node* %call18), !dbg !3264
  store i32 %call19, i32* %new_l, align 4, !dbg !3265
  br label %sw.epilog, !dbg !3266

sw.bb20:                                          ; preds = %cond.end14
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3267
  %call21 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %16), !dbg !3268
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3269
  %call22 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %17), !dbg !3270
  %call23 = call i32 @find_lattice_value_parts(%union.tree_node* %call21, %union.tree_node* %call22), !dbg !3271
  store i32 %call23, i32* %new_l, align 4, !dbg !3272
  br label %sw.epilog, !dbg !3273

sw.bb24:                                          ; preds = %cond.end14, %cond.end14
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3274
  %call25 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %18), !dbg !3275
  %call26 = call i32 @find_lattice_value(%union.tree_node* %call25), !dbg !3276
  store i32 %call26, i32* %op1_l, align 4, !dbg !3277
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3278
  %call27 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %19), !dbg !3279
  %call28 = call i32 @find_lattice_value(%union.tree_node* %call27), !dbg !3280
  store i32 %call28, i32* %op2_l, align 4, !dbg !3281
  %20 = load i32, i32* %op1_l, align 4, !dbg !3282
  %21 = load i32, i32* %op2_l, align 4, !dbg !3283
  %or = or i32 %20, %21, !dbg !3284
  store i32 %or, i32* %new_l, align 4, !dbg !3285
  br label %sw.epilog, !dbg !3286

sw.bb29:                                          ; preds = %cond.end14, %cond.end14, %cond.end14, %cond.end14, %cond.end14, %cond.end14
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3287
  %call30 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %22), !dbg !3288
  %call31 = call i32 @find_lattice_value(%union.tree_node* %call30), !dbg !3289
  store i32 %call31, i32* %op1_l, align 4, !dbg !3290
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3291
  %call32 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %23), !dbg !3292
  %call33 = call i32 @find_lattice_value(%union.tree_node* %call32), !dbg !3293
  store i32 %call33, i32* %op2_l, align 4, !dbg !3294
  %24 = load i32, i32* %op1_l, align 4, !dbg !3295
  %cmp34 = icmp eq i32 %24, 3, !dbg !3297
  br i1 %cmp34, label %if.then36, label %lor.lhs.false, !dbg !3298

lor.lhs.false:                                    ; preds = %sw.bb29
  %25 = load i32, i32* %op2_l, align 4, !dbg !3299
  %cmp35 = icmp eq i32 %25, 3, !dbg !3300
  br i1 %cmp35, label %if.then36, label %if.else, !dbg !3301

if.then36:                                        ; preds = %lor.lhs.false, %sw.bb29
  store i32 3, i32* %new_l, align 4, !dbg !3302
  br label %if.end47, !dbg !3303

if.else:                                          ; preds = %lor.lhs.false
  %26 = load i32, i32* %op1_l, align 4, !dbg !3304
  %cmp37 = icmp eq i32 %26, 0, !dbg !3306
  br i1 %cmp37, label %if.then38, label %if.else39, !dbg !3307

if.then38:                                        ; preds = %if.else
  %27 = load i32, i32* %op2_l, align 4, !dbg !3308
  store i32 %27, i32* %new_l, align 4, !dbg !3309
  br label %if.end46, !dbg !3310

if.else39:                                        ; preds = %if.else
  %28 = load i32, i32* %op2_l, align 4, !dbg !3311
  %cmp40 = icmp eq i32 %28, 0, !dbg !3313
  br i1 %cmp40, label %if.then41, label %if.else42, !dbg !3314

if.then41:                                        ; preds = %if.else39
  %29 = load i32, i32* %op1_l, align 4, !dbg !3315
  store i32 %29, i32* %new_l, align 4, !dbg !3316
  br label %if.end45, !dbg !3317

if.else42:                                        ; preds = %if.else39
  %30 = load i32, i32* %op1_l, align 4, !dbg !3318
  %sub = sub nsw i32 %30, 1, !dbg !3320
  %31 = load i32, i32* %op2_l, align 4, !dbg !3321
  %sub43 = sub nsw i32 %31, 1, !dbg !3322
  %xor = xor i32 %sub, %sub43, !dbg !3323
  %add = add nsw i32 %xor, 1, !dbg !3324
  store i32 %add, i32* %new_l, align 4, !dbg !3325
  %32 = load i32, i32* %old_l, align 4, !dbg !3326
  %33 = load i32, i32* %new_l, align 4, !dbg !3327
  %or44 = or i32 %33, %32, !dbg !3327
  store i32 %or44, i32* %new_l, align 4, !dbg !3327
  br label %if.end45

if.end45:                                         ; preds = %if.else42, %if.then41
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then38
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then36
  br label %sw.epilog, !dbg !3328

sw.bb48:                                          ; preds = %cond.end14, %cond.end14
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3329
  %call49 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %34), !dbg !3330
  %call50 = call i32 @find_lattice_value(%union.tree_node* %call49), !dbg !3331
  store i32 %call50, i32* %new_l, align 4, !dbg !3332
  br label %sw.epilog, !dbg !3333

sw.default:                                       ; preds = %cond.end14
  store i32 3, i32* %new_l, align 4, !dbg !3334
  br label %sw.epilog, !dbg !3335

sw.epilog:                                        ; preds = %sw.default, %sw.bb48, %if.end47, %sw.bb24, %sw.bb20, %sw.bb
  %35 = load i32, i32* %new_l, align 4, !dbg !3336
  %36 = load i32, i32* %old_l, align 4, !dbg !3338
  %cmp51 = icmp eq i32 %35, %36, !dbg !3339
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !3340

if.then52:                                        ; preds = %sw.epilog
  store i32 0, i32* %retval, align 4, !dbg !3341
  br label %return, !dbg !3341

if.end53:                                         ; preds = %sw.epilog
  %37 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3342
  %tobool54 = icmp ne %struct.VEC_complex_lattice_t_heap* %37, null, !dbg !3342
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !3342

cond.true55:                                      ; preds = %if.end53
  %38 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3342
  %base56 = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %38, i32 0, i32 0, !dbg !3342
  br label %cond.end58, !dbg !3342

cond.false57:                                     ; preds = %if.end53
  br label %cond.end58, !dbg !3342

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_complex_lattice_t_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !3342
  %39 = load i32, i32* %ver, align 4, !dbg !3342
  %40 = load i32, i32* %new_l, align 4, !dbg !3342
  %call60 = call i32 @VEC_complex_lattice_t_base_replace(%struct.VEC_complex_lattice_t_base* %cond59, i32 %39, i32 %40), !dbg !3342
  %41 = load i32, i32* %new_l, align 4, !dbg !3343
  %cmp61 = icmp eq i32 %41, 3, !dbg !3344
  %42 = zext i1 %cmp61 to i64, !dbg !3343
  %cond62 = select i1 %cmp61, i32 2, i32 1, !dbg !3343
  store i32 %cond62, i32* %retval, align 4, !dbg !3345
  br label %return, !dbg !3345

return:                                           ; preds = %cond.end58, %if.then52, %if.then
  %43 = load i32, i32* %retval, align 4, !dbg !3346
  ret i32 %43, !dbg !3346
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @complex_visit_phi(%union.gimple_statement_d* %phi) #0 !dbg !3347 {
entry:
  %retval = alloca i32, align 4
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %new_l = alloca i32, align 4
  %old_l = alloca i32, align 4
  %ver = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !3350, metadata !DIExpression()), !dbg !3351
  call void @llvm.dbg.declare(metadata i32* %new_l, metadata !3352, metadata !DIExpression()), !dbg !3353
  call void @llvm.dbg.declare(metadata i32* %old_l, metadata !3354, metadata !DIExpression()), !dbg !3355
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !3356, metadata !DIExpression()), !dbg !3357
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3358, metadata !DIExpression()), !dbg !3359
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3360, metadata !DIExpression()), !dbg !3361
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3362
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !3363
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !3364
  %1 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3365
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !3365
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3365
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3365
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3365
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3365
  %bf.load = load i64, i64* %3, align 8, !dbg !3365
  %bf.clear = and i64 %bf.load, 65535, !dbg !3365
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3365
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !3365
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3365

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 405, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3365
  br label %cond.end, !dbg !3365

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3365

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3365
  store i32 0, i32* %new_l, align 4, !dbg !3366
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3367
  %call1 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %4), !dbg !3369
  %sub = sub i32 %call1, 1, !dbg !3370
  store i32 %sub, i32* %i, align 4, !dbg !3371
  br label %for.cond, !dbg !3372

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %i, align 4, !dbg !3373
  %cmp2 = icmp sge i32 %5, 0, !dbg !3375
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3376

for.body:                                         ; preds = %for.cond
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3377
  %7 = load i32, i32* %i, align 4, !dbg !3378
  %conv = sext i32 %7 to i64, !dbg !3378
  %call3 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %6, i64 %conv), !dbg !3379
  %call4 = call i32 @find_lattice_value(%union.tree_node* %call3), !dbg !3380
  %8 = load i32, i32* %new_l, align 4, !dbg !3381
  %or = or i32 %8, %call4, !dbg !3381
  store i32 %or, i32* %new_l, align 4, !dbg !3381
  br label %for.inc, !dbg !3382

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !3383
  %dec = add nsw i32 %9, -1, !dbg !3383
  store i32 %dec, i32* %i, align 4, !dbg !3383
  br label %for.cond, !dbg !3384, !llvm.loop !3385

for.end:                                          ; preds = %for.cond
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3387
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !3387
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3387
  %11 = load i32, i32* %version, align 8, !dbg !3387
  store i32 %11, i32* %ver, align 4, !dbg !3388
  %12 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3389
  %tobool = icmp ne %struct.VEC_complex_lattice_t_heap* %12, null, !dbg !3389
  br i1 %tobool, label %cond.true5, label %cond.false7, !dbg !3389

cond.true5:                                       ; preds = %for.end
  %13 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3389
  %base6 = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %13, i32 0, i32 0, !dbg !3389
  br label %cond.end8, !dbg !3389

cond.false7:                                      ; preds = %for.end
  br label %cond.end8, !dbg !3389

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_complex_lattice_t_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !3389
  %14 = load i32, i32* %ver, align 4, !dbg !3389
  %call10 = call i32 @VEC_complex_lattice_t_base_index(%struct.VEC_complex_lattice_t_base* %cond9, i32 %14), !dbg !3389
  store i32 %call10, i32* %old_l, align 4, !dbg !3390
  %15 = load i32, i32* %new_l, align 4, !dbg !3391
  %16 = load i32, i32* %old_l, align 4, !dbg !3393
  %cmp11 = icmp eq i32 %15, %16, !dbg !3394
  br i1 %cmp11, label %if.then, label %if.end, !dbg !3395

if.then:                                          ; preds = %cond.end8
  store i32 0, i32* %retval, align 4, !dbg !3396
  br label %return, !dbg !3396

if.end:                                           ; preds = %cond.end8
  %17 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3397
  %tobool13 = icmp ne %struct.VEC_complex_lattice_t_heap* %17, null, !dbg !3397
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !3397

cond.true14:                                      ; preds = %if.end
  %18 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !3397
  %base15 = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %18, i32 0, i32 0, !dbg !3397
  br label %cond.end17, !dbg !3397

cond.false16:                                     ; preds = %if.end
  br label %cond.end17, !dbg !3397

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_complex_lattice_t_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !3397
  %19 = load i32, i32* %ver, align 4, !dbg !3397
  %20 = load i32, i32* %new_l, align 4, !dbg !3397
  %call19 = call i32 @VEC_complex_lattice_t_base_replace(%struct.VEC_complex_lattice_t_base* %cond18, i32 %19, i32 %20), !dbg !3397
  %21 = load i32, i32* %new_l, align 4, !dbg !3398
  %cmp20 = icmp eq i32 %21, 3, !dbg !3399
  %22 = zext i1 %cmp20 to i64, !dbg !3398
  %cond22 = select i1 %cmp20, i32 2, i32 1, !dbg !3398
  store i32 %cond22, i32* %retval, align 4, !dbg !3400
  br label %return, !dbg !3400

return:                                           ; preds = %cond.end17, %if.then
  %23 = load i32, i32* %retval, align 4, !dbg !3401
  ret i32 %23, !dbg !3401
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

declare dso_local i32 @int_tree_map_hash(i8*) #2

declare dso_local i32 @int_tree_map_eq(i8*, i8*) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !3402 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3405, metadata !DIExpression()), !dbg !3406
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3406
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3406
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !3406
  ret %struct.VEC_tree_heap* %1, !dbg !3406
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_safe_grow_cleared(%struct.VEC_tree_heap** %vec_, i32 %size_) #0 !dbg !3407 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !3411, metadata !DIExpression()), !dbg !3412
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !3413, metadata !DIExpression()), !dbg !3412
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !3414, metadata !DIExpression()), !dbg !3412
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3412
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !3412
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !3412
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3412

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3412
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !3412
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !3412
  br label %cond.end, !dbg !3412

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3412

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3412
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3412
  store i32 %call, i32* %oldsize, align 4, !dbg !3412
  %4 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3412
  %5 = load i32, i32* %size_.addr, align 4, !dbg !3412
  call void @VEC_tree_heap_safe_grow(%struct.VEC_tree_heap** %4, i32 %5), !dbg !3412
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3412
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !3412
  %tobool1 = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !3412
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3412

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3412
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %8, align 8, !dbg !3412
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %9, i32 0, i32 0, !dbg !3412
  br label %cond.end5, !dbg !3412

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3412

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3412
  %call7 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond6), !dbg !3412
  %10 = load i32, i32* %oldsize, align 4, !dbg !3412
  %idxprom = sext i32 %10 to i64, !dbg !3412
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call7, i64 %idxprom, !dbg !3412
  %11 = bitcast %union.tree_node** %arrayidx to i8*, !dbg !3412
  %12 = load i32, i32* %size_.addr, align 4, !dbg !3412
  %13 = load i32, i32* %oldsize, align 4, !dbg !3412
  %sub = sub nsw i32 %12, %13, !dbg !3412
  %conv = sext i32 %sub to i64, !dbg !3412
  %mul = mul i64 8, %conv, !dbg !3412
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !3412
  ret void, !dbg !3412
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_parameter_components() #0 !dbg !3415 {
entry:
  %entry_edge = alloca %struct.edge_def*, align 8
  %parm = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %ssa_name = alloca %union.tree_node*, align 8
  %r = alloca %union.tree_node*, align 8
  %i = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry_edge, metadata !3416, metadata !DIExpression()), !dbg !3417
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3418
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3418
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3418
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3418
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3418
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3418
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %2), !dbg !3419
  store %struct.edge_def* %call, %struct.edge_def** %entry_edge, align 8, !dbg !3417
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !3420, metadata !DIExpression()), !dbg !3421
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3422
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3422
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 6, !dbg !3422
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3422
  %decl_non_common = bitcast %union.tree_node* %4 to %struct.tree_decl_non_common*, !dbg !3422
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !3422
  %5 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !3422
  store %union.tree_node* %5, %union.tree_node** %parm, align 8, !dbg !3424
  br label %for.cond, !dbg !3425

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3426
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !3428
  br i1 %tobool, label %for.body, label %for.end, !dbg !3428

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3429, metadata !DIExpression()), !dbg !3431
  %7 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3432
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !3432
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3432
  %8 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !3432
  store %union.tree_node* %8, %union.tree_node** %type, align 8, !dbg !3431
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_name, metadata !3433, metadata !DIExpression()), !dbg !3434
  call void @llvm.dbg.declare(metadata %union.tree_node** %r, metadata !3435, metadata !DIExpression()), !dbg !3436
  call void @llvm.dbg.declare(metadata %union.tree_node** %i, metadata !3437, metadata !DIExpression()), !dbg !3438
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3439
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3439
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !3439
  %bf.load = load i64, i64* %10, align 8, !dbg !3439
  %bf.clear = and i64 %bf.load, 65535, !dbg !3439
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3439
  %cmp = icmp ne i32 %bf.cast, 13, !dbg !3441
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3442

lor.lhs.false:                                    ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3443
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %11), !dbg !3444
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3444
  br i1 %tobool4, label %if.end, label %if.then, !dbg !3445

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !3446

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3447
  %common5 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !3447
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !3447
  %13 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !3447
  store %union.tree_node* %13, %union.tree_node** %type, align 8, !dbg !3448
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3449
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !3449
  %15 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3450
  %call8 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr7, %union.tree_node* %15), !dbg !3451
  store %union.tree_node* %call8, %union.tree_node** %ssa_name, align 8, !dbg !3452
  %16 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !3453
  %tobool9 = icmp ne %union.tree_node* %16, null, !dbg !3453
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !3455

if.then10:                                        ; preds = %if.end
  br label %for.inc, !dbg !3456

if.end11:                                         ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3457
  %18 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !3457
  %call12 = call %union.tree_node* @build1_stat(i32 43, %union.tree_node* %17, %union.tree_node* %18), !dbg !3457
  store %union.tree_node* %call12, %union.tree_node** %r, align 8, !dbg !3458
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3459
  %20 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !3459
  %call13 = call %union.tree_node* @build1_stat(i32 44, %union.tree_node* %19, %union.tree_node* %20), !dbg !3459
  store %union.tree_node* %call13, %union.tree_node** %i, align 8, !dbg !3460
  %21 = load %struct.edge_def*, %struct.edge_def** %entry_edge, align 8, !dbg !3461
  %22 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !3462
  %23 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !3463
  %24 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !3464
  call void @update_complex_components_on_edge(%struct.edge_def* %21, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %24), !dbg !3465
  br label %for.inc, !dbg !3466

for.inc:                                          ; preds = %if.end11, %if.then10, %if.then
  %25 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3467
  %common14 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !3467
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1, !dbg !3467
  %26 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3467
  store %union.tree_node* %26, %union.tree_node** %parm, align 8, !dbg !3468
  br label %for.cond, !dbg !3469, !llvm.loop !3470

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3472
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_phi_components(%struct.basic_block_def* %bb) #0 !dbg !3473 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %lr = alloca %union.tree_node*, align 8
  %li = alloca %union.tree_node*, align 8
  %pr = alloca %union.gimple_statement_d*, align 8
  %pi = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %comp = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3476, metadata !DIExpression()), !dbg !3477
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3478, metadata !DIExpression()), !dbg !3479
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3480
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !3482
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3482
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3482
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !3482
  br label %for.cond, !dbg !3483

for.cond:                                         ; preds = %for.inc37, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3484
  %tobool = icmp ne i8 %call, 0, !dbg !3486
  %lnot = xor i1 %tobool, true, !dbg !3486
  br i1 %lnot, label %for.body, label %for.end38, !dbg !3487

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3488, metadata !DIExpression()), !dbg !3490
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3491
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !3490
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3492
  %call2 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %3), !dbg !3494
  %call3 = call zeroext i8 @is_complex_reg(%union.tree_node* %call2), !dbg !3495
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3495
  br i1 %tobool4, label %if.then, label %if.end36, !dbg !3496

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %lr, metadata !3497, metadata !DIExpression()), !dbg !3499
  call void @llvm.dbg.declare(metadata %union.tree_node** %li, metadata !3500, metadata !DIExpression()), !dbg !3501
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %pr, metadata !3502, metadata !DIExpression()), !dbg !3503
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %pr, align 8, !dbg !3503
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %pi, metadata !3504, metadata !DIExpression()), !dbg !3505
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %pi, align 8, !dbg !3505
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3506, metadata !DIExpression()), !dbg !3507
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3508, metadata !DIExpression()), !dbg !3509
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3510
  %call5 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %4), !dbg !3511
  %call6 = call %union.tree_node* @get_component_ssa_name(%union.tree_node* %call5, i8 zeroext 0), !dbg !3512
  store %union.tree_node* %call6, %union.tree_node** %lr, align 8, !dbg !3513
  %5 = load %union.tree_node*, %union.tree_node** %lr, align 8, !dbg !3514
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3514
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !3514
  %bf.load = load i64, i64* %6, align 8, !dbg !3514
  %bf.clear = and i64 %bf.load, 65535, !dbg !3514
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3514
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3516
  br i1 %cmp, label %if.then7, label %if.end, !dbg !3517

if.then7:                                         ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %lr, align 8, !dbg !3518
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3520
  %call8 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %7, %struct.basic_block_def* %8), !dbg !3521
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %pr, align 8, !dbg !3522
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %pr, align 8, !dbg !3523
  %10 = load %union.tree_node*, %union.tree_node** %lr, align 8, !dbg !3524
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !3524
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3524
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3525
  br label %if.end, !dbg !3526

if.end:                                           ; preds = %if.then7, %if.then
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3527
  %call9 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %11), !dbg !3528
  %call10 = call %union.tree_node* @get_component_ssa_name(%union.tree_node* %call9, i8 zeroext 1), !dbg !3529
  store %union.tree_node* %call10, %union.tree_node** %li, align 8, !dbg !3530
  %12 = load %union.tree_node*, %union.tree_node** %li, align 8, !dbg !3531
  %base11 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3531
  %13 = bitcast %struct.tree_base* %base11 to i64*, !dbg !3531
  %bf.load12 = load i64, i64* %13, align 8, !dbg !3531
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !3531
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !3531
  %cmp15 = icmp eq i32 %bf.cast14, 141, !dbg !3533
  br i1 %cmp15, label %if.then16, label %if.end20, !dbg !3534

if.then16:                                        ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %li, align 8, !dbg !3535
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3537
  %call17 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %14, %struct.basic_block_def* %15), !dbg !3538
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %pi, align 8, !dbg !3539
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %pi, align 8, !dbg !3540
  %17 = load %union.tree_node*, %union.tree_node** %li, align 8, !dbg !3541
  %ssa_name18 = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !3541
  %def_stmt19 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name18, i32 0, i32 2, !dbg !3541
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %def_stmt19, align 8, !dbg !3542
  br label %if.end20, !dbg !3543

if.end20:                                         ; preds = %if.then16, %if.end
  store i32 0, i32* %i, align 4, !dbg !3544
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3546
  %call21 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %18), !dbg !3547
  store i32 %call21, i32* %n, align 4, !dbg !3548
  br label %for.cond22, !dbg !3549

for.cond22:                                       ; preds = %for.inc, %if.end20
  %19 = load i32, i32* %i, align 4, !dbg !3550
  %20 = load i32, i32* %n, align 4, !dbg !3552
  %cmp23 = icmp ult i32 %19, %20, !dbg !3553
  br i1 %cmp23, label %for.body24, label %for.end, !dbg !3554

for.body24:                                       ; preds = %for.cond22
  call void @llvm.dbg.declare(metadata %union.tree_node** %comp, metadata !3555, metadata !DIExpression()), !dbg !3557
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !3558, metadata !DIExpression()), !dbg !3559
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3560
  %22 = load i32, i32* %i, align 4, !dbg !3561
  %conv = zext i32 %22 to i64, !dbg !3561
  %call25 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %21, i64 %conv), !dbg !3562
  store %union.tree_node* %call25, %union.tree_node** %arg, align 8, !dbg !3559
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %pr, align 8, !dbg !3563
  %tobool26 = icmp ne %union.gimple_statement_d* %23, null, !dbg !3563
  br i1 %tobool26, label %if.then27, label %if.end30, !dbg !3565

if.then27:                                        ; preds = %for.body24
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3566
  %call28 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* null, %union.tree_node* %24, i8 zeroext 0, i8 zeroext 0), !dbg !3568
  store %union.tree_node* %call28, %union.tree_node** %comp, align 8, !dbg !3569
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %pr, align 8, !dbg !3570
  %26 = load i32, i32* %i, align 4, !dbg !3570
  %call29 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %25, i32 %26), !dbg !3570
  %27 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !3570
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call29, %union.tree_node* %27), !dbg !3570
  br label %if.end30, !dbg !3571

if.end30:                                         ; preds = %if.then27, %for.body24
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %pi, align 8, !dbg !3572
  %tobool31 = icmp ne %union.gimple_statement_d* %28, null, !dbg !3572
  br i1 %tobool31, label %if.then32, label %if.end35, !dbg !3574

if.then32:                                        ; preds = %if.end30
  %29 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3575
  %call33 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* null, %union.tree_node* %29, i8 zeroext 1, i8 zeroext 0), !dbg !3577
  store %union.tree_node* %call33, %union.tree_node** %comp, align 8, !dbg !3578
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %pi, align 8, !dbg !3579
  %31 = load i32, i32* %i, align 4, !dbg !3579
  %call34 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %30, i32 %31), !dbg !3579
  %32 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !3579
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call34, %union.tree_node* %32), !dbg !3579
  br label %if.end35, !dbg !3580

if.end35:                                         ; preds = %if.then32, %if.end30
  br label %for.inc, !dbg !3581

for.inc:                                          ; preds = %if.end35
  %33 = load i32, i32* %i, align 4, !dbg !3582
  %inc = add i32 %33, 1, !dbg !3582
  store i32 %inc, i32* %i, align 4, !dbg !3582
  br label %for.cond22, !dbg !3583, !llvm.loop !3584

for.end:                                          ; preds = %for.cond22
  br label %if.end36, !dbg !3586

if.end36:                                         ; preds = %for.end, %for.body
  br label %for.inc37, !dbg !3587

for.inc37:                                        ; preds = %if.end36
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3588
  br label %for.cond, !dbg !3589, !llvm.loop !3590

for.end38:                                        ; preds = %for.cond
  ret void, !dbg !3592
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !3593 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3596, metadata !DIExpression()), !dbg !3597
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3598, metadata !DIExpression()), !dbg !3599
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !3600, metadata !DIExpression()), !dbg !3601
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3602
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !3603
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !3604
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3605
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !3606
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3607
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3608
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3609
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3610
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3611
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3612
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3613
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3614
  ret void, !dbg !3615
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3616 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3619, metadata !DIExpression()), !dbg !3620
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3621
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3621
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3622
  %conv = zext i1 %cmp to i32, !dbg !3622
  %conv1 = trunc i32 %conv to i8, !dbg !3623
  ret i8 %conv1, !dbg !3624
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_operations_1(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !3625 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %type = alloca %union.tree_node*, align 8
  %inner_type = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %ac = alloca %union.tree_node*, align 8
  %ar = alloca %union.tree_node*, align 8
  %ai = alloca %union.tree_node*, align 8
  %bc = alloca %union.tree_node*, align 8
  %br = alloca %union.tree_node*, align 8
  %bi = alloca %union.tree_node*, align 8
  %al = alloca i32, align 4
  %bl = alloca i32, align 4
  %code = alloca i32, align 4
  %rhs = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !3629, metadata !DIExpression()), !dbg !3630
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3631, metadata !DIExpression()), !dbg !3632
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3633
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !3634
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !3632
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3635, metadata !DIExpression()), !dbg !3636
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type, metadata !3637, metadata !DIExpression()), !dbg !3638
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3639, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.declare(metadata %union.tree_node** %ac, metadata !3641, metadata !DIExpression()), !dbg !3642
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar, metadata !3643, metadata !DIExpression()), !dbg !3644
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai, metadata !3645, metadata !DIExpression()), !dbg !3646
  call void @llvm.dbg.declare(metadata %union.tree_node** %bc, metadata !3647, metadata !DIExpression()), !dbg !3648
  call void @llvm.dbg.declare(metadata %union.tree_node** %br, metadata !3649, metadata !DIExpression()), !dbg !3650
  call void @llvm.dbg.declare(metadata %union.tree_node** %bi, metadata !3651, metadata !DIExpression()), !dbg !3652
  call void @llvm.dbg.declare(metadata i32* %al, metadata !3653, metadata !DIExpression()), !dbg !3654
  call void @llvm.dbg.declare(metadata i32* %bl, metadata !3655, metadata !DIExpression()), !dbg !3656
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3657, metadata !DIExpression()), !dbg !3658
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3659
  %call1 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %1), !dbg !3660
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !3661
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3662
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !3662
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !3664

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3665
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !3666
  %cmp = icmp ne i32 %call2, 1, !dbg !3667
  br i1 %cmp, label %if.then, label %if.end, !dbg !3668

if.then:                                          ; preds = %land.lhs.true
  br label %sw.epilog116, !dbg !3669

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3670
  %call3 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %4, i32 0), !dbg !3670
  %common = bitcast %union.tree_node* %call3 to %struct.tree_common*, !dbg !3670
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3670
  %5 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !3670
  store %union.tree_node* %5, %union.tree_node** %type, align 8, !dbg !3671
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3672
  %call5 = call i32 @gimple_expr_code(%union.gimple_statement_d* %6), !dbg !3673
  store i32 %call5, i32* %code, align 4, !dbg !3674
  %7 = load i32, i32* %code, align 4, !dbg !3675
  switch i32 %7, label %sw.default [
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 65, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 75, label %sw.bb
    i32 79, label %sw.bb
    i32 124, label %sw.bb
    i32 101, label %sw.bb11
    i32 102, label %sw.bb11
  ], !dbg !3676

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3677
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !3677
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !3677
  %bf.load = load i64, i64* %9, align 8, !dbg !3677
  %bf.clear = and i64 %bf.load, 65535, !dbg !3677
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3677
  %cmp6 = icmp ne i32 %bf.cast, 13, !dbg !3680
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !3681

if.then7:                                         ; preds = %sw.bb
  br label %sw.epilog116, !dbg !3682

if.end8:                                          ; preds = %sw.bb
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3683
  %common9 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !3683
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !3683
  %11 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3683
  store %union.tree_node* %11, %union.tree_node** %inner_type, align 8, !dbg !3684
  br label %sw.epilog, !dbg !3685

sw.bb11:                                          ; preds = %if.end, %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3686
  %call12 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %12, i32 1), !dbg !3686
  %common13 = bitcast %union.tree_node* %call12 to %struct.tree_common*, !dbg !3686
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !3686
  %13 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !3686
  store %union.tree_node* %13, %union.tree_node** %inner_type, align 8, !dbg !3687
  %14 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !3688
  %base15 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3688
  %15 = bitcast %struct.tree_base* %base15 to i64*, !dbg !3688
  %bf.load16 = load i64, i64* %15, align 8, !dbg !3688
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !3688
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !3688
  %cmp19 = icmp ne i32 %bf.cast18, 13, !dbg !3690
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !3691

if.then20:                                        ; preds = %sw.bb11
  br label %sw.epilog116, !dbg !3692

if.end21:                                         ; preds = %sw.bb11
  br label %sw.epilog, !dbg !3693

sw.default:                                       ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !3694, metadata !DIExpression()), !dbg !3696
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3697
  %call22 = call i32 @gimple_code(%union.gimple_statement_d* %16), !dbg !3699
  %cmp23 = icmp eq i32 %call22, 1, !dbg !3700
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !3701

if.then24:                                        ; preds = %sw.default
  br label %sw.epilog116, !dbg !3702

if.end25:                                         ; preds = %sw.default
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3703
  %base26 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !3703
  %18 = bitcast %struct.tree_base* %base26 to i64*, !dbg !3703
  %bf.load27 = load i64, i64* %18, align 8, !dbg !3703
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !3703
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !3703
  %cmp30 = icmp eq i32 %bf.cast29, 13, !dbg !3705
  br i1 %cmp30, label %if.then31, label %if.else, !dbg !3706

if.then31:                                        ; preds = %if.end25
  %19 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3707
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3708
  call void @expand_complex_move(%struct.gimple_stmt_iterator* %19, %union.tree_node* %20), !dbg !3709
  br label %if.end57, !dbg !3709

if.else:                                          ; preds = %if.end25
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3710
  %call32 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %21), !dbg !3712
  %conv = zext i8 %call32 to i32, !dbg !3712
  %tobool33 = icmp ne i32 %conv, 0, !dbg !3712
  br i1 %tobool33, label %land.lhs.true34, label %if.end56, !dbg !3713

land.lhs.true34:                                  ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3714
  %call35 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %22), !dbg !3715
  %cmp36 = icmp eq i32 %call35, 43, !dbg !3716
  br i1 %cmp36, label %land.lhs.true41, label %lor.lhs.false, !dbg !3717

lor.lhs.false:                                    ; preds = %land.lhs.true34
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3718
  %call38 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %23), !dbg !3719
  %cmp39 = icmp eq i32 %call38, 44, !dbg !3720
  br i1 %cmp39, label %land.lhs.true41, label %if.end56, !dbg !3721

land.lhs.true41:                                  ; preds = %lor.lhs.false, %land.lhs.true34
  %24 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3722
  %base42 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !3722
  %25 = bitcast %struct.tree_base* %base42 to i64*, !dbg !3722
  %bf.load43 = load i64, i64* %25, align 8, !dbg !3722
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !3722
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !3722
  %cmp46 = icmp eq i32 %bf.cast45, 141, !dbg !3723
  br i1 %cmp46, label %if.then48, label %if.end56, !dbg !3724

if.then48:                                        ; preds = %land.lhs.true41
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3725
  %call49 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %26), !dbg !3727
  store %union.tree_node* %call49, %union.tree_node** %rhs, align 8, !dbg !3728
  %27 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3729
  %28 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !3730
  %exp = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !3730
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3730
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3730
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3730
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3731
  %call50 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %30), !dbg !3732
  %cmp51 = icmp eq i32 %call50, 44, !dbg !3733
  %conv52 = zext i1 %cmp51 to i32, !dbg !3733
  %conv53 = trunc i32 %conv52 to i8, !dbg !3732
  %call54 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %27, %union.tree_node* %29, i8 zeroext %conv53, i8 zeroext 0), !dbg !3734
  store %union.tree_node* %call54, %union.tree_node** %rhs, align 8, !dbg !3735
  %31 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3736
  %32 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !3737
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %31, %union.tree_node* %32), !dbg !3738
  %33 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3739
  %call55 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %33), !dbg !3740
  store %union.gimple_statement_d* %call55, %union.gimple_statement_d** %stmt, align 8, !dbg !3741
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3742
  call void @update_stmt(%union.gimple_statement_d* %34), !dbg !3743
  br label %if.end56, !dbg !3744

if.end56:                                         ; preds = %if.then48, %land.lhs.true41, %lor.lhs.false, %if.else
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then31
  br label %sw.epilog116, !dbg !3745

sw.epilog:                                        ; preds = %if.end21, %if.end8
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3746
  %call58 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %35), !dbg !3748
  %tobool59 = icmp ne i8 %call58, 0, !dbg !3748
  br i1 %tobool59, label %if.then60, label %if.else66, !dbg !3749

if.then60:                                        ; preds = %sw.epilog
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3750
  %call61 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %36), !dbg !3752
  store %union.tree_node* %call61, %union.tree_node** %ac, align 8, !dbg !3753
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3754
  %call62 = call i32 @gimple_num_ops(%union.gimple_statement_d* %37), !dbg !3755
  %cmp63 = icmp ugt i32 %call62, 2, !dbg !3756
  br i1 %cmp63, label %cond.true, label %cond.false, !dbg !3757

cond.true:                                        ; preds = %if.then60
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3758
  %call65 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %38), !dbg !3759
  br label %cond.end, !dbg !3757

cond.false:                                       ; preds = %if.then60
  br label %cond.end, !dbg !3757

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call65, %cond.true ], [ null, %cond.false ], !dbg !3757
  store %union.tree_node* %cond, %union.tree_node** %bc, align 8, !dbg !3760
  br label %if.end69, !dbg !3761

if.else66:                                        ; preds = %sw.epilog
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3762
  %call67 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %39), !dbg !3764
  store %union.tree_node* %call67, %union.tree_node** %ac, align 8, !dbg !3765
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3766
  %call68 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %40), !dbg !3767
  store %union.tree_node* %call68, %union.tree_node** %bc, align 8, !dbg !3768
  br label %if.end69

if.end69:                                         ; preds = %if.else66, %cond.end
  %41 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3769
  %42 = load %union.tree_node*, %union.tree_node** %ac, align 8, !dbg !3770
  %call70 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %41, %union.tree_node* %42, i8 zeroext 0, i8 zeroext 1), !dbg !3771
  store %union.tree_node* %call70, %union.tree_node** %ar, align 8, !dbg !3772
  %43 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3773
  %44 = load %union.tree_node*, %union.tree_node** %ac, align 8, !dbg !3774
  %call71 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %43, %union.tree_node* %44, i8 zeroext 1, i8 zeroext 1), !dbg !3775
  store %union.tree_node* %call71, %union.tree_node** %ai, align 8, !dbg !3776
  %45 = load %union.tree_node*, %union.tree_node** %ac, align 8, !dbg !3777
  %46 = load %union.tree_node*, %union.tree_node** %bc, align 8, !dbg !3779
  %cmp72 = icmp eq %union.tree_node* %45, %46, !dbg !3780
  br i1 %cmp72, label %if.then74, label %if.else75, !dbg !3781

if.then74:                                        ; preds = %if.end69
  %47 = load %union.tree_node*, %union.tree_node** %ar, align 8, !dbg !3782
  store %union.tree_node* %47, %union.tree_node** %br, align 8, !dbg !3783
  %48 = load %union.tree_node*, %union.tree_node** %ai, align 8, !dbg !3784
  store %union.tree_node* %48, %union.tree_node** %bi, align 8, !dbg !3785
  br label %if.end82, !dbg !3786

if.else75:                                        ; preds = %if.end69
  %49 = load %union.tree_node*, %union.tree_node** %bc, align 8, !dbg !3787
  %tobool76 = icmp ne %union.tree_node* %49, null, !dbg !3787
  br i1 %tobool76, label %if.then77, label %if.else80, !dbg !3789

if.then77:                                        ; preds = %if.else75
  %50 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3790
  %51 = load %union.tree_node*, %union.tree_node** %bc, align 8, !dbg !3792
  %call78 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %50, %union.tree_node* %51, i8 zeroext 0, i8 zeroext 1), !dbg !3793
  store %union.tree_node* %call78, %union.tree_node** %br, align 8, !dbg !3794
  %52 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3795
  %53 = load %union.tree_node*, %union.tree_node** %bc, align 8, !dbg !3796
  %call79 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %52, %union.tree_node* %53, i8 zeroext 1, i8 zeroext 1), !dbg !3797
  store %union.tree_node* %call79, %union.tree_node** %bi, align 8, !dbg !3798
  br label %if.end81, !dbg !3799

if.else80:                                        ; preds = %if.else75
  store %union.tree_node* null, %union.tree_node** %bi, align 8, !dbg !3800
  store %union.tree_node* null, %union.tree_node** %br, align 8, !dbg !3801
  br label %if.end81

if.end81:                                         ; preds = %if.else80, %if.then77
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then74
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3802
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, !dbg !3802
  %call83 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !3804
  %tobool84 = icmp ne i8 %call83, 0, !dbg !3804
  br i1 %tobool84, label %if.then85, label %if.else107, !dbg !3805

if.then85:                                        ; preds = %if.end82
  %55 = load %union.tree_node*, %union.tree_node** %ac, align 8, !dbg !3806
  %call86 = call i32 @find_lattice_value(%union.tree_node* %55), !dbg !3808
  store i32 %call86, i32* %al, align 4, !dbg !3809
  %56 = load i32, i32* %al, align 4, !dbg !3810
  %cmp87 = icmp eq i32 %56, 0, !dbg !3812
  br i1 %cmp87, label %if.then89, label %if.end90, !dbg !3813

if.then89:                                        ; preds = %if.then85
  store i32 3, i32* %al, align 4, !dbg !3814
  br label %if.end90, !dbg !3815

if.end90:                                         ; preds = %if.then89, %if.then85
  %57 = load i32, i32* %code, align 4, !dbg !3816
  %idxprom = sext i32 %57 to i64, !dbg !3816
  %arrayidx91 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3816
  %58 = load i32, i32* %arrayidx91, align 4, !dbg !3816
  %cmp92 = icmp eq i32 %58, 6, !dbg !3818
  br i1 %cmp92, label %if.then94, label %if.else95, !dbg !3819

if.then94:                                        ; preds = %if.end90
  store i32 0, i32* %bl, align 4, !dbg !3820
  br label %if.end106, !dbg !3821

if.else95:                                        ; preds = %if.end90
  %59 = load %union.tree_node*, %union.tree_node** %ac, align 8, !dbg !3822
  %60 = load %union.tree_node*, %union.tree_node** %bc, align 8, !dbg !3824
  %cmp96 = icmp eq %union.tree_node* %59, %60, !dbg !3825
  br i1 %cmp96, label %if.then98, label %if.else99, !dbg !3826

if.then98:                                        ; preds = %if.else95
  %61 = load i32, i32* %al, align 4, !dbg !3827
  store i32 %61, i32* %bl, align 4, !dbg !3828
  br label %if.end105, !dbg !3829

if.else99:                                        ; preds = %if.else95
  %62 = load %union.tree_node*, %union.tree_node** %bc, align 8, !dbg !3830
  %call100 = call i32 @find_lattice_value(%union.tree_node* %62), !dbg !3832
  store i32 %call100, i32* %bl, align 4, !dbg !3833
  %63 = load i32, i32* %bl, align 4, !dbg !3834
  %cmp101 = icmp eq i32 %63, 0, !dbg !3836
  br i1 %cmp101, label %if.then103, label %if.end104, !dbg !3837

if.then103:                                       ; preds = %if.else99
  store i32 3, i32* %bl, align 4, !dbg !3838
  br label %if.end104, !dbg !3839

if.end104:                                        ; preds = %if.then103, %if.else99
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then98
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then94
  br label %if.end108, !dbg !3840

if.else107:                                       ; preds = %if.end82
  store i32 3, i32* %bl, align 4, !dbg !3841
  store i32 3, i32* %al, align 4, !dbg !3842
  br label %if.end108

if.end108:                                        ; preds = %if.else107, %if.end106
  %64 = load i32, i32* %code, align 4, !dbg !3843
  switch i32 %64, label %sw.default115 [
    i32 63, label %sw.bb109
    i32 64, label %sw.bb109
    i32 65, label %sw.bb110
    i32 67, label %sw.bb111
    i32 68, label %sw.bb111
    i32 69, label %sw.bb111
    i32 70, label %sw.bb111
    i32 75, label %sw.bb111
    i32 79, label %sw.bb112
    i32 124, label %sw.bb113
    i32 101, label %sw.bb114
    i32 102, label %sw.bb114
  ], !dbg !3844

sw.bb109:                                         ; preds = %if.end108, %if.end108
  %65 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3845
  %66 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !3847
  %67 = load %union.tree_node*, %union.tree_node** %ar, align 8, !dbg !3848
  %68 = load %union.tree_node*, %union.tree_node** %ai, align 8, !dbg !3849
  %69 = load %union.tree_node*, %union.tree_node** %br, align 8, !dbg !3850
  %70 = load %union.tree_node*, %union.tree_node** %bi, align 8, !dbg !3851
  %71 = load i32, i32* %code, align 4, !dbg !3852
  %72 = load i32, i32* %al, align 4, !dbg !3853
  %73 = load i32, i32* %bl, align 4, !dbg !3854
  call void @expand_complex_addition(%struct.gimple_stmt_iterator* %65, %union.tree_node* %66, %union.tree_node* %67, %union.tree_node* %68, %union.tree_node* %69, %union.tree_node* %70, i32 %71, i32 %72, i32 %73), !dbg !3855
  br label %sw.epilog116, !dbg !3856

sw.bb110:                                         ; preds = %if.end108
  %74 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3857
  %75 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !3858
  %76 = load %union.tree_node*, %union.tree_node** %ar, align 8, !dbg !3859
  %77 = load %union.tree_node*, %union.tree_node** %ai, align 8, !dbg !3860
  %78 = load %union.tree_node*, %union.tree_node** %br, align 8, !dbg !3861
  %79 = load %union.tree_node*, %union.tree_node** %bi, align 8, !dbg !3862
  %80 = load i32, i32* %al, align 4, !dbg !3863
  %81 = load i32, i32* %bl, align 4, !dbg !3864
  call void @expand_complex_multiplication(%struct.gimple_stmt_iterator* %74, %union.tree_node* %75, %union.tree_node* %76, %union.tree_node* %77, %union.tree_node* %78, %union.tree_node* %79, i32 %80, i32 %81), !dbg !3865
  br label %sw.epilog116, !dbg !3866

sw.bb111:                                         ; preds = %if.end108, %if.end108, %if.end108, %if.end108, %if.end108
  %82 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3867
  %83 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !3868
  %84 = load %union.tree_node*, %union.tree_node** %ar, align 8, !dbg !3869
  %85 = load %union.tree_node*, %union.tree_node** %ai, align 8, !dbg !3870
  %86 = load %union.tree_node*, %union.tree_node** %br, align 8, !dbg !3871
  %87 = load %union.tree_node*, %union.tree_node** %bi, align 8, !dbg !3872
  %88 = load i32, i32* %code, align 4, !dbg !3873
  %89 = load i32, i32* %al, align 4, !dbg !3874
  %90 = load i32, i32* %bl, align 4, !dbg !3875
  call void @expand_complex_division(%struct.gimple_stmt_iterator* %82, %union.tree_node* %83, %union.tree_node* %84, %union.tree_node* %85, %union.tree_node* %86, %union.tree_node* %87, i32 %88, i32 %89, i32 %90), !dbg !3876
  br label %sw.epilog116, !dbg !3877

sw.bb112:                                         ; preds = %if.end108
  %91 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3878
  %92 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !3879
  %93 = load %union.tree_node*, %union.tree_node** %ar, align 8, !dbg !3880
  %94 = load %union.tree_node*, %union.tree_node** %ai, align 8, !dbg !3881
  call void @expand_complex_negation(%struct.gimple_stmt_iterator* %91, %union.tree_node* %92, %union.tree_node* %93, %union.tree_node* %94), !dbg !3882
  br label %sw.epilog116, !dbg !3883

sw.bb113:                                         ; preds = %if.end108
  %95 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3884
  %96 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !3885
  %97 = load %union.tree_node*, %union.tree_node** %ar, align 8, !dbg !3886
  %98 = load %union.tree_node*, %union.tree_node** %ai, align 8, !dbg !3887
  call void @expand_complex_conjugate(%struct.gimple_stmt_iterator* %95, %union.tree_node* %96, %union.tree_node* %97, %union.tree_node* %98), !dbg !3888
  br label %sw.epilog116, !dbg !3889

sw.bb114:                                         ; preds = %if.end108, %if.end108
  %99 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3890
  %100 = load %union.tree_node*, %union.tree_node** %ar, align 8, !dbg !3891
  %101 = load %union.tree_node*, %union.tree_node** %ai, align 8, !dbg !3892
  %102 = load %union.tree_node*, %union.tree_node** %br, align 8, !dbg !3893
  %103 = load %union.tree_node*, %union.tree_node** %bi, align 8, !dbg !3894
  %104 = load i32, i32* %code, align 4, !dbg !3895
  call void @expand_complex_comparison(%struct.gimple_stmt_iterator* %99, %union.tree_node* %100, %union.tree_node* %101, %union.tree_node* %102, %union.tree_node* %103, i32 %104), !dbg !3896
  br label %sw.epilog116, !dbg !3897

sw.default115:                                    ; preds = %if.end108
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1563, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3898
  br label %sw.epilog116, !dbg !3899

sw.epilog116:                                     ; preds = %if.then, %if.then7, %if.then20, %if.then24, %if.end57, %sw.default115, %sw.bb114, %sw.bb113, %sw.bb112, %sw.bb111, %sw.bb110, %sw.bb109
  ret void, !dbg !3900
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3901 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3902, metadata !DIExpression()), !dbg !3903
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3904
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !3905
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3905
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !3906
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !3906
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3907
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !3908
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !3909
  ret void, !dbg !3910
}

declare dso_local void @gsi_commit_edge_inserts() #2

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !3911 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !3914, metadata !DIExpression()), !dbg !3915
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3916
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !3916
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !3916
  br i1 %tobool, label %if.then, label %if.end, !dbg !3915

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3916
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !3916
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !3916
  call void @free(i8* %4), !dbg !3916
  br label %if.end, !dbg !3916

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3915
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !3915
  ret void, !dbg !3915
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_complex_lattice_t_heap_free(%struct.VEC_complex_lattice_t_heap** %vec_) #0 !dbg !3918 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_heap**, align 8
  store %struct.VEC_complex_lattice_t_heap** %vec_, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_heap*** %vec_.addr, metadata !3921, metadata !DIExpression()), !dbg !3922
  %0 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !3923
  %1 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %0, align 8, !dbg !3923
  %tobool = icmp ne %struct.VEC_complex_lattice_t_heap* %1, null, !dbg !3923
  br i1 %tobool, label %if.then, label %if.end, !dbg !3922

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !3923
  %3 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %2, align 8, !dbg !3923
  %4 = bitcast %struct.VEC_complex_lattice_t_heap* %3 to i8*, !dbg !3923
  call void @free(i8* %4), !dbg !3923
  br label %if.end, !dbg !3923

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !3922
  store %struct.VEC_complex_lattice_t_heap* null, %struct.VEC_complex_lattice_t_heap** %5, align 8, !dbg !3922
  ret void, !dbg !3922
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3925 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3928, metadata !DIExpression()), !dbg !3929
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3930
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3930
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3931
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3931
  ret %union.gimple_statement_d* %1, !dbg !3932
}

; Function Attrs: noinline nounwind uwtable
define internal void @prop_set_simulate_again(%union.gimple_statement_d* %s, i8 zeroext %visit_p) #0 !dbg !3933 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %visit_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3936, metadata !DIExpression()), !dbg !3937
  store i8 %visit_p, i8* %visit_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %visit_p.addr, metadata !3938, metadata !DIExpression()), !dbg !3939
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3940
  %1 = load i8, i8* %visit_p.addr, align 1, !dbg !3941
  call void @gimple_set_visited(%union.gimple_statement_d* %0, i8 zeroext %1), !dbg !3942
  ret void, !dbg !3943
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_complex_reg(%union.tree_node* %lhs) #0 !dbg !3944 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !3947, metadata !DIExpression()), !dbg !3948
  %0 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !3949
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3949
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3949
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3949
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3949
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3949
  %bf.load = load i64, i64* %2, align 8, !dbg !3949
  %bf.clear = and i64 %bf.load, 65535, !dbg !3949
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3949
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !3950
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3951

land.rhs:                                         ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !3952
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %3), !dbg !3953
  %conv = zext i8 %call to i32, !dbg !3953
  %tobool = icmp ne i32 %conv, 0, !dbg !3951
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ], !dbg !3954
  %land.ext = zext i1 %4 to i32, !dbg !3951
  %conv1 = trunc i32 %land.ext to i8, !dbg !3949
  ret i8 %conv1, !dbg !3955
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !3956 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3960, metadata !DIExpression()), !dbg !3961
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3962
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3963
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !3964
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3964
  ret %union.tree_node* %1, !dbg !3965
}

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3966 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3969, metadata !DIExpression()), !dbg !3970
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3971
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3972
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3973
  %bf.load = load i32, i32* %1, align 8, !dbg !3973
  %bf.clear = and i32 %bf.load, 255, !dbg !3973
  ret i32 %bf.clear, !dbg !3974
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !3975 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3976, metadata !DIExpression()), !dbg !3977
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3978
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !3979
  ret %union.tree_node* %call, !dbg !3980
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !3981 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3982, metadata !DIExpression()), !dbg !3983
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3984
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !3985
  ret %union.tree_node* %call, !dbg !3986
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !3987 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3990, metadata !DIExpression()), !dbg !3991
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3992, metadata !DIExpression()), !dbg !3993
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3994
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !3995
  store i32 %call, i32* %code, align 4, !dbg !3996
  %1 = load i32, i32* %code, align 4, !dbg !3997
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !3999
  %cmp = icmp eq i32 %call1, 3, !dbg !4000
  br i1 %cmp, label %if.then, label %if.end, !dbg !4001

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4002
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !4002
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !4002
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !4002
  %bf.load = load i64, i64* %3, align 8, !dbg !4002
  %bf.clear = and i64 %bf.load, 65535, !dbg !4002
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4002
  store i32 %bf.cast, i32* %code, align 4, !dbg !4003
  br label %if.end, !dbg !4004

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !4005
  ret i32 %4, !dbg !4006
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !4007 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4008, metadata !DIExpression()), !dbg !4009
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4010
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !4011
  ret %union.tree_node* %call, !dbg !4012
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !4013 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4016, metadata !DIExpression()), !dbg !4017
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4018
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4019
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !4020
  %1 = load i32, i32* %num_ops, align 4, !dbg !4020
  ret i32 %1, !dbg !4021
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !4022 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4023, metadata !DIExpression()), !dbg !4024
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4025
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !4027
  %cmp = icmp uge i32 %call, 3, !dbg !4028
  br i1 %cmp, label %if.then, label %if.else, !dbg !4029

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4030
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !4031
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !4032
  br label %return, !dbg !4032

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4033
  br label %return, !dbg !4033

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4034
  ret %union.tree_node* %2, !dbg !4034
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !4035 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4036, metadata !DIExpression()), !dbg !4037
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4038
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !4039
  ret %union.tree_node* %call, !dbg !4040
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !4041 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4042, metadata !DIExpression()), !dbg !4043
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4044
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !4045
  ret %union.tree_node* %call, !dbg !4046
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !4047 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4048, metadata !DIExpression()), !dbg !4049
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4050, metadata !DIExpression()), !dbg !4051
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4052
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4053
  store i32 %call, i32* %code, align 4, !dbg !4051
  %1 = load i32, i32* %code, align 4, !dbg !4054
  %cmp = icmp eq i32 %1, 6, !dbg !4056
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4057

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !4058
  %cmp1 = icmp eq i32 %2, 1, !dbg !4059
  br i1 %cmp1, label %if.then, label %if.else, !dbg !4060

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4061
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !4062
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4063
  %bf.load = load i32, i32* %4, align 8, !dbg !4063
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4063
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !4064
  br label %return, !dbg !4064

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !4065
  %cmp2 = icmp eq i32 %5, 8, !dbg !4067
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !4068

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !4069
  br label %return, !dbg !4069

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4070
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4071
  br label %return, !dbg !4071

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !4072
  ret i32 %6, !dbg !4072
}

declare dso_local zeroext i8 @ssa_undefined_value_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext %visited_p) #0 !dbg !4073 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %visited_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4074, metadata !DIExpression()), !dbg !4075
  store i8 %visited_p, i8* %visited_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %visited_p.addr, metadata !4076, metadata !DIExpression()), !dbg !4077
  %0 = load i8, i8* %visited_p.addr, align 1, !dbg !4078
  %conv = zext i8 %0 to i32, !dbg !4079
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4080
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !4081
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4082
  %bf.load = load i32, i32* %2, align 8, !dbg !4083
  %bf.value = and i32 %conv, 1, !dbg !4083
  %bf.shl = shl i32 %bf.value, 9, !dbg !4083
  %bf.clear = and i32 %bf.load, -513, !dbg !4083
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !4083
  store i32 %bf.set, i32* %2, align 8, !dbg !4083
  ret void, !dbg !4084
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !4085 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4088, metadata !DIExpression()), !dbg !4089
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4090, metadata !DIExpression()), !dbg !4091
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4092
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !4094
  %tobool = icmp ne i8 %call, 0, !dbg !4094
  br i1 %tobool, label %if.then, label %if.else, !dbg !4095

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4096
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !4098
  %2 = load i32, i32* %i.addr, align 4, !dbg !4099
  %idxprom = zext i32 %2 to i64, !dbg !4098
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !4098
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4098
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !4100
  br label %return, !dbg !4100

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4101
  br label %return, !dbg !4101

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4102
  ret %union.tree_node* %4, !dbg !4102
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !4103 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4106, metadata !DIExpression()), !dbg !4107
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4108
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4109
  %cmp = icmp uge i32 %call, 1, !dbg !4110
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4111

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4112
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4113
  %cmp2 = icmp ule i32 %call1, 9, !dbg !4114
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !4115
  %land.ext = zext i1 %2 to i32, !dbg !4111
  %conv = trunc i32 %land.ext to i8, !dbg !4109
  ret i8 %conv, !dbg !4116
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !4117 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4120, metadata !DIExpression()), !dbg !4121
  call void @llvm.dbg.declare(metadata i64* %off, metadata !4122, metadata !DIExpression()), !dbg !4123
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4124
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !4125
  %idxprom = zext i32 %call to i64, !dbg !4126
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !4126
  %1 = load i64, i64* %arrayidx, align 8, !dbg !4126
  store i64 %1, i64* %off, align 8, !dbg !4127
  %2 = load i64, i64* %off, align 8, !dbg !4128
  %cmp = icmp ne i64 %2, 0, !dbg !4128
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4128

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4128
  br label %cond.end, !dbg !4128

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4128

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4128
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4129
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4130
  %5 = load i64, i64* %off, align 8, !dbg !4131
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !4132
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !4133
  ret %union.tree_node** %6, !dbg !4134
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !4135 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4138, metadata !DIExpression()), !dbg !4139
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4140
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4141
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !4142
  ret i32 %call1, !dbg !4143
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !4144 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4147, metadata !DIExpression()), !dbg !4148
  %0 = load i32, i32* %code.addr, align 4, !dbg !4149
  %idxprom = zext i32 %0 to i64, !dbg !4150
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !4150
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4150
  ret i32 %1, !dbg !4151
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !4152 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4155, metadata !DIExpression()), !dbg !4156
  %0 = load i32, i32* %code.addr, align 4, !dbg !4157
  %idxprom = sext i32 %0 to i64, !dbg !4158
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !4158
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4158
  %conv = zext i8 %1 to i32, !dbg !4159
  ret i32 %conv, !dbg !4160
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_complex_lattice_t_base_length(%struct.VEC_complex_lattice_t_base* %vec_) #0 !dbg !4161 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_base*, align 8
  store %struct.VEC_complex_lattice_t_base* %vec_, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_base** %vec_.addr, metadata !4166, metadata !DIExpression()), !dbg !4167
  %0 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4167
  %tobool = icmp ne %struct.VEC_complex_lattice_t_base* %0, null, !dbg !4167
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4167

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4167
  %num = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %1, i32 0, i32 0, !dbg !4167
  %2 = load i32, i32* %num, align 4, !dbg !4167
  br label %cond.end, !dbg !4167

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4167

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4167
  ret i32 %cond, !dbg !4167
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_complex_lattice_t_heap_safe_grow(%struct.VEC_complex_lattice_t_heap** %vec_, i32 %size_) #0 !dbg !4168 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_complex_lattice_t_heap** %vec_, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_heap*** %vec_.addr, metadata !4169, metadata !DIExpression()), !dbg !4170
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !4171, metadata !DIExpression()), !dbg !4170
  %0 = load i32, i32* %size_.addr, align 4, !dbg !4170
  %cmp = icmp sge i32 %0, 0, !dbg !4170
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4170

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4170
  %2 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %1, align 8, !dbg !4170
  %tobool = icmp ne %struct.VEC_complex_lattice_t_heap* %2, null, !dbg !4170
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4170

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4170
  %4 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %3, align 8, !dbg !4170
  %base = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %4, i32 0, i32 0, !dbg !4170
  br label %cond.end, !dbg !4170

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !4170

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_complex_lattice_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4170
  %call = call i32 @VEC_complex_lattice_t_base_length(%struct.VEC_complex_lattice_t_base* %cond), !dbg !4170
  %5 = load i32, i32* %size_.addr, align 4, !dbg !4170
  %cmp1 = icmp ule i32 %call, %5, !dbg !4170
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !4172
  %land.ext = zext i1 %6 to i32, !dbg !4170
  %7 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4170
  %8 = load i32, i32* %size_.addr, align 4, !dbg !4170
  %9 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4170
  %10 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %9, align 8, !dbg !4170
  %tobool2 = icmp ne %struct.VEC_complex_lattice_t_heap* %10, null, !dbg !4170
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !4170

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4170
  %12 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %11, align 8, !dbg !4170
  %tobool4 = icmp ne %struct.VEC_complex_lattice_t_heap* %12, null, !dbg !4170
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !4170

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4170
  %14 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %13, align 8, !dbg !4170
  %base6 = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %14, i32 0, i32 0, !dbg !4170
  br label %cond.end8, !dbg !4170

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !4170

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_complex_lattice_t_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !4170
  %num = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %cond9, i32 0, i32 0, !dbg !4170
  %15 = load i32, i32* %num, align 4, !dbg !4170
  br label %cond.end11, !dbg !4170

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !4170

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !4170
  %sub = sub nsw i32 %8, %cond12, !dbg !4170
  %call13 = call i32 @VEC_complex_lattice_t_heap_reserve_exact(%struct.VEC_complex_lattice_t_heap** %7, i32 %sub), !dbg !4170
  %16 = load i32, i32* %size_.addr, align 4, !dbg !4170
  %17 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4170
  %18 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %17, align 8, !dbg !4170
  %tobool14 = icmp ne %struct.VEC_complex_lattice_t_heap* %18, null, !dbg !4170
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !4170

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4170
  %20 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %19, align 8, !dbg !4170
  %base16 = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %20, i32 0, i32 0, !dbg !4170
  br label %cond.end18, !dbg !4170

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !4170

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_complex_lattice_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !4170
  %num20 = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %cond19, i32 0, i32 0, !dbg !4170
  store i32 %16, i32* %num20, align 4, !dbg !4170
  ret void, !dbg !4170
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_complex_lattice_t_base_address(%struct.VEC_complex_lattice_t_base* %vec_) #0 !dbg !4173 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_base*, align 8
  store %struct.VEC_complex_lattice_t_base* %vec_, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_base** %vec_.addr, metadata !4178, metadata !DIExpression()), !dbg !4179
  %0 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4179
  %tobool = icmp ne %struct.VEC_complex_lattice_t_base* %0, null, !dbg !4179
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4179

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4179
  %vec = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %1, i32 0, i32 2, !dbg !4179
  %arraydecay = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 0, !dbg !4179
  br label %cond.end, !dbg !4179

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4179

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !4179
  ret i32* %cond, !dbg !4179
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_complex_lattice_t_heap_reserve_exact(%struct.VEC_complex_lattice_t_heap** %vec_, i32 %alloc_) #0 !dbg !4180 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_complex_lattice_t_heap** %vec_, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_heap*** %vec_.addr, metadata !4183, metadata !DIExpression()), !dbg !4184
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4185, metadata !DIExpression()), !dbg !4184
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4186, metadata !DIExpression()), !dbg !4184
  %0 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4184
  %1 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %0, align 8, !dbg !4184
  %tobool = icmp ne %struct.VEC_complex_lattice_t_heap* %1, null, !dbg !4184
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4184

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4184
  %3 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %2, align 8, !dbg !4184
  %base = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %3, i32 0, i32 0, !dbg !4184
  br label %cond.end, !dbg !4184

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4184

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_complex_lattice_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4184
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4184
  %call = call i32 @VEC_complex_lattice_t_base_space(%struct.VEC_complex_lattice_t_base* %cond, i32 %4), !dbg !4184
  %tobool1 = icmp ne i32 %call, 0, !dbg !4184
  %lnot = xor i1 %tobool1, true, !dbg !4184
  %lnot.ext = zext i1 %lnot to i32, !dbg !4184
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4184
  %5 = load i32, i32* %extend, align 4, !dbg !4187
  %tobool2 = icmp ne i32 %5, 0, !dbg !4187
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4184

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4187
  %7 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** %6, align 8, !dbg !4187
  %8 = bitcast %struct.VEC_complex_lattice_t_heap* %7 to i8*, !dbg !4187
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4187
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 4), !dbg !4187
  %10 = bitcast i8* %call3 to %struct.VEC_complex_lattice_t_heap*, !dbg !4187
  %11 = load %struct.VEC_complex_lattice_t_heap**, %struct.VEC_complex_lattice_t_heap*** %vec_.addr, align 8, !dbg !4187
  store %struct.VEC_complex_lattice_t_heap* %10, %struct.VEC_complex_lattice_t_heap** %11, align 8, !dbg !4187
  br label %if.end, !dbg !4187

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4184
  ret i32 %12, !dbg !4184
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_complex_lattice_t_base_space(%struct.VEC_complex_lattice_t_base* %vec_, i32 %alloc_) #0 !dbg !4189 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_complex_lattice_t_base* %vec_, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_base** %vec_.addr, metadata !4192, metadata !DIExpression()), !dbg !4193
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4194, metadata !DIExpression()), !dbg !4193
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4193
  %cmp = icmp sge i32 %0, 0, !dbg !4193
  %conv = zext i1 %cmp to i32, !dbg !4193
  %1 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4193
  %tobool = icmp ne %struct.VEC_complex_lattice_t_base* %1, null, !dbg !4193
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4193

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4193
  %alloc = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %2, i32 0, i32 1, !dbg !4193
  %3 = load i32, i32* %alloc, align 4, !dbg !4193
  %4 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4193
  %num = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %4, i32 0, i32 0, !dbg !4193
  %5 = load i32, i32* %num, align 4, !dbg !4193
  %sub = sub i32 %3, %5, !dbg !4193
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4193
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4193
  %conv2 = zext i1 %cmp1 to i32, !dbg !4193
  br label %cond.end, !dbg !4193

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4193
  %tobool3 = icmp ne i32 %7, 0, !dbg !4193
  %lnot = xor i1 %tobool3, true, !dbg !4193
  %lnot.ext = zext i1 %lnot to i32, !dbg !4193
  br label %cond.end, !dbg !4193

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4193
  ret i32 %cond, !dbg !4193
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_ann_d* @var_ann(%union.tree_node* %t) #0 !dbg !4195 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.var_ann_d**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4201, metadata !DIExpression()), !dbg !4202
  call void @llvm.dbg.declare(metadata %struct.var_ann_d*** %p, metadata !4203, metadata !DIExpression()), !dbg !4206
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4207
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4207
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4207
  %bf.load = load i64, i64* %1, align 8, !dbg !4207
  %bf.clear = and i64 %bf.load, 65535, !dbg !4207
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4207
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !4207
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4207

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4207
  %var_decl = bitcast %union.tree_node* %2 to %struct.tree_var_decl*, !dbg !4207
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !4207
  br label %cond.end19, !dbg !4207

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4207
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4207
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4207
  %bf.load2 = load i64, i64* %4, align 8, !dbg !4207
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4207
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4207
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !4207
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !4207

cond.true6:                                       ; preds = %cond.false
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4207
  %parm_decl = bitcast %union.tree_node* %5 to %struct.tree_parm_decl*, !dbg !4207
  %ann7 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !4207
  br label %cond.end17, !dbg !4207

cond.false8:                                      ; preds = %cond.false
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4207
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4207
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !4207
  %bf.load10 = load i64, i64* %7, align 8, !dbg !4207
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !4207
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !4207
  %cmp13 = icmp eq i32 %bf.cast12, 36, !dbg !4207
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !4207

cond.true14:                                      ; preds = %cond.false8
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4207
  %result_decl = bitcast %union.tree_node* %8 to %struct.tree_result_decl*, !dbg !4207
  %ann15 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !4207
  br label %cond.end, !dbg !4207

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end, !dbg !4207

cond.end:                                         ; preds = %cond.false16, %cond.true14
  %cond = phi %struct.var_ann_d** [ %ann15, %cond.true14 ], [ null, %cond.false16 ], !dbg !4207
  br label %cond.end17, !dbg !4207

cond.end17:                                       ; preds = %cond.end, %cond.true6
  %cond18 = phi %struct.var_ann_d** [ %ann7, %cond.true6 ], [ %cond, %cond.end ], !dbg !4207
  br label %cond.end19, !dbg !4207

cond.end19:                                       ; preds = %cond.end17, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond18, %cond.end17 ], !dbg !4207
  store %struct.var_ann_d** %cond20, %struct.var_ann_d*** %p, align 8, !dbg !4206
  %9 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !4208
  %tobool = icmp ne %struct.var_ann_d** %9, null, !dbg !4208
  br i1 %tobool, label %cond.true21, label %cond.false22, !dbg !4208

cond.true21:                                      ; preds = %cond.end19
  %10 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !4209
  %11 = load %struct.var_ann_d*, %struct.var_ann_d** %10, align 8, !dbg !4210
  br label %cond.end23, !dbg !4208

cond.false22:                                     ; preds = %cond.end19
  br label %cond.end23, !dbg !4208

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi %struct.var_ann_d* [ %11, %cond.true21 ], [ null, %cond.false22 ], !dbg !4208
  ret %struct.var_ann_d* %cond24, !dbg !4211
}

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_complex_lattice_t_base_replace(%struct.VEC_complex_lattice_t_base* %vec_, i32 %ix_, i32 %obj_) #0 !dbg !4212 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca i32, align 4
  %old_obj_ = alloca i32, align 4
  store %struct.VEC_complex_lattice_t_base* %vec_, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_base** %vec_.addr, metadata !4215, metadata !DIExpression()), !dbg !4216
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4217, metadata !DIExpression()), !dbg !4216
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !4218, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.declare(metadata i32* %old_obj_, metadata !4219, metadata !DIExpression()), !dbg !4216
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !4216
  %1 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4216
  %num = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %1, i32 0, i32 0, !dbg !4216
  %2 = load i32, i32* %num, align 4, !dbg !4216
  %cmp = icmp ult i32 %0, %2, !dbg !4216
  %conv = zext i1 %cmp to i32, !dbg !4216
  %3 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4216
  %vec = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %3, i32 0, i32 2, !dbg !4216
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !4216
  %idxprom = zext i32 %4 to i64, !dbg !4216
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !4216
  %5 = load i32, i32* %arrayidx, align 4, !dbg !4216
  store i32 %5, i32* %old_obj_, align 4, !dbg !4216
  %6 = load i32, i32* %obj_.addr, align 4, !dbg !4216
  %7 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4216
  %vec1 = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %7, i32 0, i32 2, !dbg !4216
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !4216
  %idxprom2 = zext i32 %8 to i64, !dbg !4216
  %arrayidx3 = getelementptr inbounds [1 x i32], [1 x i32]* %vec1, i64 0, i64 %idxprom2, !dbg !4216
  store i32 %6, i32* %arrayidx3, align 4, !dbg !4216
  %9 = load i32, i32* %old_obj_, align 4, !dbg !4216
  ret i32 %9, !dbg !4216
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_complex_lattice_t_base_index(%struct.VEC_complex_lattice_t_base* %vec_, i32 %ix_) #0 !dbg !4220 {
entry:
  %vec_.addr = alloca %struct.VEC_complex_lattice_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_complex_lattice_t_base* %vec_, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_complex_lattice_t_base** %vec_.addr, metadata !4223, metadata !DIExpression()), !dbg !4224
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4225, metadata !DIExpression()), !dbg !4224
  %0 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4224
  %tobool = icmp ne %struct.VEC_complex_lattice_t_base* %0, null, !dbg !4224
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4224

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4224
  %2 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4224
  %num = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %2, i32 0, i32 0, !dbg !4224
  %3 = load i32, i32* %num, align 4, !dbg !4224
  %cmp = icmp ult i32 %1, %3, !dbg !4224
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4226
  %land.ext = zext i1 %4 to i32, !dbg !4224
  %5 = load %struct.VEC_complex_lattice_t_base*, %struct.VEC_complex_lattice_t_base** %vec_.addr, align 8, !dbg !4224
  %vec = getelementptr inbounds %struct.VEC_complex_lattice_t_base, %struct.VEC_complex_lattice_t_base* %5, i32 0, i32 2, !dbg !4224
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4224
  %idxprom = zext i32 %6 to i64, !dbg !4224
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !4224
  %7 = load i32, i32* %arrayidx, align 4, !dbg !4224
  ret i32 %7, !dbg !4224
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_lattice_value(%union.tree_node* %t) #0 !dbg !4227 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  %real = alloca %union.tree_node*, align 8
  %imag = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4230, metadata !DIExpression()), !dbg !4231
  call void @llvm.dbg.declare(metadata %union.tree_node** %real, metadata !4232, metadata !DIExpression()), !dbg !4233
  call void @llvm.dbg.declare(metadata %union.tree_node** %imag, metadata !4234, metadata !DIExpression()), !dbg !4235
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4236
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4236
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4236
  %bf.load = load i64, i64* %1, align 8, !dbg !4236
  %bf.clear = and i64 %bf.load, 65535, !dbg !4236
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4236
  switch i32 %bf.cast, label %sw.default [
    i32 141, label %sw.bb
    i32 26, label %sw.bb2
  ], !dbg !4237

sw.bb:                                            ; preds = %entry
  %2 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !4238
  %tobool = icmp ne %struct.VEC_complex_lattice_t_heap* %2, null, !dbg !4238
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4238

cond.true:                                        ; preds = %sw.bb
  %3 = load %struct.VEC_complex_lattice_t_heap*, %struct.VEC_complex_lattice_t_heap** @complex_lattice_values, align 8, !dbg !4238
  %base1 = getelementptr inbounds %struct.VEC_complex_lattice_t_heap, %struct.VEC_complex_lattice_t_heap* %3, i32 0, i32 0, !dbg !4238
  br label %cond.end, !dbg !4238

cond.false:                                       ; preds = %sw.bb
  br label %cond.end, !dbg !4238

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_complex_lattice_t_base* [ %base1, %cond.true ], [ null, %cond.false ], !dbg !4238
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4238
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !4238
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4238
  %5 = load i32, i32* %version, align 8, !dbg !4238
  %call = call i32 @VEC_complex_lattice_t_base_index(%struct.VEC_complex_lattice_t_base* %cond, i32 %5), !dbg !4238
  store i32 %call, i32* %retval, align 4, !dbg !4240
  br label %return, !dbg !4240

sw.bb2:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4241
  %complex = bitcast %union.tree_node* %6 to %struct.tree_complex*, !dbg !4241
  %real3 = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 1, !dbg !4241
  %7 = load %union.tree_node*, %union.tree_node** %real3, align 8, !dbg !4241
  store %union.tree_node* %7, %union.tree_node** %real, align 8, !dbg !4242
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4243
  %complex4 = bitcast %union.tree_node* %8 to %struct.tree_complex*, !dbg !4243
  %imag5 = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex4, i32 0, i32 2, !dbg !4243
  %9 = load %union.tree_node*, %union.tree_node** %imag5, align 8, !dbg !4243
  store %union.tree_node* %9, %union.tree_node** %imag, align 8, !dbg !4244
  br label %sw.epilog, !dbg !4245

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 158, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4246
  br label %sw.epilog, !dbg !4247

sw.epilog:                                        ; preds = %sw.default, %sw.bb2
  %10 = load %union.tree_node*, %union.tree_node** %real, align 8, !dbg !4248
  %11 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !4249
  %call6 = call i32 @find_lattice_value_parts(%union.tree_node* %10, %union.tree_node* %11), !dbg !4250
  store i32 %call6, i32* %retval, align 4, !dbg !4251
  br label %return, !dbg !4251

return:                                           ; preds = %sw.epilog, %cond.end
  %12 = load i32, i32* %retval, align 4, !dbg !4252
  ret i32 %12, !dbg !4252
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_lattice_value_parts(%union.tree_node* %real, %union.tree_node* %imag) #0 !dbg !4253 {
entry:
  %real.addr = alloca %union.tree_node*, align 8
  %imag.addr = alloca %union.tree_node*, align 8
  %r = alloca i32, align 4
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  store %union.tree_node* %real, %union.tree_node** %real.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %real.addr, metadata !4256, metadata !DIExpression()), !dbg !4257
  store %union.tree_node* %imag, %union.tree_node** %imag.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %imag.addr, metadata !4258, metadata !DIExpression()), !dbg !4259
  call void @llvm.dbg.declare(metadata i32* %r, metadata !4260, metadata !DIExpression()), !dbg !4261
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4262, metadata !DIExpression()), !dbg !4263
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4264, metadata !DIExpression()), !dbg !4265
  %0 = load %union.tree_node*, %union.tree_node** %real.addr, align 8, !dbg !4266
  %call = call i32 @some_nonzerop(%union.tree_node* %0), !dbg !4267
  store i32 %call, i32* %r, align 4, !dbg !4268
  %1 = load %union.tree_node*, %union.tree_node** %imag.addr, align 8, !dbg !4269
  %call1 = call i32 @some_nonzerop(%union.tree_node* %1), !dbg !4270
  store i32 %call1, i32* %i, align 4, !dbg !4271
  %2 = load i32, i32* %r, align 4, !dbg !4272
  %mul = mul nsw i32 %2, 1, !dbg !4273
  %3 = load i32, i32* %i, align 4, !dbg !4274
  %mul2 = mul nsw i32 %3, 2, !dbg !4275
  %add = add nsw i32 %mul, %mul2, !dbg !4276
  store i32 %add, i32* %ret, align 4, !dbg !4277
  %4 = load i32, i32* %ret, align 4, !dbg !4278
  %cmp = icmp eq i32 %4, 0, !dbg !4280
  br i1 %cmp, label %if.then, label %if.end, !dbg !4281

if.then:                                          ; preds = %entry
  store i32 1, i32* %ret, align 4, !dbg !4282
  br label %if.end, !dbg !4283

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %ret, align 4, !dbg !4284
  ret i32 %5, !dbg !4285
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @some_nonzerop(%union.tree_node* %t) #0 !dbg !4286 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %zerop = alloca i32, align 4
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4289, metadata !DIExpression()), !dbg !4290
  call void @llvm.dbg.declare(metadata i32* %zerop, metadata !4291, metadata !DIExpression()), !dbg !4292
  store i32 0, i32* %zerop, align 4, !dbg !4292
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4293
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4293
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4293
  %bf.load = load i64, i64* %1, align 8, !dbg !4293
  %bf.clear = and i64 %bf.load, 65535, !dbg !4293
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4293
  %cmp = icmp eq i32 %bf.cast, 24, !dbg !4295
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !4296

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @flag_signed_zeros, align 4, !dbg !4297
  %tobool = icmp ne i32 %2, 0, !dbg !4297
  br i1 %tobool, label %if.else, label %if.then, !dbg !4298

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4299
  %real_cst = bitcast %union.tree_node* %3 to %struct.tree_real_cst*, !dbg !4299
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !4299
  %4 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !4299
  %call = call zeroext i8 @real_identical(%struct.real_value* %4, %struct.real_value* @dconst0), !dbg !4299
  %conv = zext i8 %call to i32, !dbg !4299
  store i32 %conv, i32* %zerop, align 4, !dbg !4300
  br label %if.end19, !dbg !4301

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4302
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4302
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4302
  %bf.load2 = load i64, i64* %6, align 8, !dbg !4302
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4302
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4302
  %cmp5 = icmp eq i32 %bf.cast4, 25, !dbg !4304
  br i1 %cmp5, label %if.then7, label %if.else9, !dbg !4305

if.then7:                                         ; preds = %if.else
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4306
  %call8 = call i32 @fixed_zerop(%union.tree_node* %7), !dbg !4307
  store i32 %call8, i32* %zerop, align 4, !dbg !4308
  br label %if.end18, !dbg !4309

if.else9:                                         ; preds = %if.else
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4310
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4310
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4310
  %bf.load11 = load i64, i64* %9, align 8, !dbg !4310
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4310
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4310
  %cmp14 = icmp eq i32 %bf.cast13, 23, !dbg !4312
  br i1 %cmp14, label %if.then16, label %if.end, !dbg !4313

if.then16:                                        ; preds = %if.else9
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4314
  %call17 = call i32 @integer_zerop(%union.tree_node* %10), !dbg !4315
  store i32 %call17, i32* %zerop, align 4, !dbg !4316
  br label %if.end, !dbg !4317

if.end:                                           ; preds = %if.then16, %if.else9
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then7
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then
  %11 = load i32, i32* %zerop, align 4, !dbg !4318
  %tobool20 = icmp ne i32 %11, 0, !dbg !4319
  %lnot = xor i1 %tobool20, true, !dbg !4319
  %lnot.ext = zext i1 %lnot to i32, !dbg !4319
  ret i32 %lnot.ext, !dbg !4320
}

declare dso_local zeroext i8 @real_identical(%struct.real_value*, %struct.real_value*) #2

declare dso_local i32 @fixed_zerop(%union.tree_node*) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !4321 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4322, metadata !DIExpression()), !dbg !4323
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4324
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !4325
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !4326
  %1 = load i32, i32* %nargs, align 4, !dbg !4326
  ret i32 %1, !dbg !4327
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !4328 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4331, metadata !DIExpression()), !dbg !4332
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !4333, metadata !DIExpression()), !dbg !4334
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !4335, metadata !DIExpression()), !dbg !4337
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4338
  %1 = load i64, i64* %index.addr, align 8, !dbg !4339
  %conv = trunc i64 %1 to i32, !dbg !4339
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !4340
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !4337
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !4341
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !4342
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !4343
  ret %union.tree_node* %call1, !dbg !4344
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !4345 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4348, metadata !DIExpression()), !dbg !4349
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !4350, metadata !DIExpression()), !dbg !4351
  %0 = load i32, i32* %index.addr, align 4, !dbg !4352
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4352
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !4352
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !4352
  %2 = load i32, i32* %capacity, align 8, !dbg !4352
  %cmp = icmp ule i32 %0, %2, !dbg !4352
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4352

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4352
  br label %cond.end, !dbg !4352

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4352

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4352
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4353
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !4354
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !4355
  %4 = load i32, i32* %index.addr, align 4, !dbg !4356
  %idxprom = zext i32 %4 to i64, !dbg !4353
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !4353
  ret %struct.phi_arg_d* %arrayidx, !dbg !4357
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !4358 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !4364, metadata !DIExpression()), !dbg !4365
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !4366
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !4367
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !4367
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !4368
  ret %union.tree_node* %2, !dbg !4369
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_safe_grow(%struct.VEC_tree_heap** %vec_, i32 %size_) #0 !dbg !4370 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !4371, metadata !DIExpression()), !dbg !4372
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !4373, metadata !DIExpression()), !dbg !4372
  %0 = load i32, i32* %size_.addr, align 4, !dbg !4372
  %cmp = icmp sge i32 %0, 0, !dbg !4372
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4372

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4372
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !4372
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !4372
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4372

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4372
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !4372
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !4372
  br label %cond.end, !dbg !4372

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !4372

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4372
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4372
  %5 = load i32, i32* %size_.addr, align 4, !dbg !4372
  %cmp1 = icmp ule i32 %call, %5, !dbg !4372
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !4374
  %land.ext = zext i1 %6 to i32, !dbg !4372
  %7 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4372
  %8 = load i32, i32* %size_.addr, align 4, !dbg !4372
  %9 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4372
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %9, align 8, !dbg !4372
  %tobool2 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !4372
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !4372

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4372
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %11, align 8, !dbg !4372
  %tobool4 = icmp ne %struct.VEC_tree_heap* %12, null, !dbg !4372
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !4372

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4372
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %13, align 8, !dbg !4372
  %base6 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !4372
  br label %cond.end8, !dbg !4372

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !4372

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_tree_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !4372
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %cond9, i32 0, i32 0, !dbg !4372
  %15 = load i32, i32* %num, align 8, !dbg !4372
  br label %cond.end11, !dbg !4372

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !4372

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !4372
  %sub = sub nsw i32 %8, %cond12, !dbg !4372
  %call13 = call i32 @VEC_tree_heap_reserve_exact(%struct.VEC_tree_heap** %7, i32 %sub), !dbg !4372
  %16 = load i32, i32* %size_.addr, align 4, !dbg !4372
  %17 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4372
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %17, align 8, !dbg !4372
  %tobool14 = icmp ne %struct.VEC_tree_heap* %18, null, !dbg !4372
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !4372

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4372
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %19, align 8, !dbg !4372
  %base16 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %20, i32 0, i32 0, !dbg !4372
  br label %cond.end18, !dbg !4372

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !4372

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !4372
  %num20 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %cond19, i32 0, i32 0, !dbg !4372
  store i32 %16, i32* %num20, align 8, !dbg !4372
  ret void, !dbg !4372
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %vec_) #0 !dbg !4375 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4379, metadata !DIExpression()), !dbg !4380
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4380
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4380
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4380

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4380
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 2, !dbg !4380
  %arraydecay = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 0, !dbg !4380
  br label %cond.end, !dbg !4380

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4380

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !4380
  ret %union.tree_node** %cond, !dbg !4380
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve_exact(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !4381 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !4384, metadata !DIExpression()), !dbg !4385
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4386, metadata !DIExpression()), !dbg !4385
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4387, metadata !DIExpression()), !dbg !4385
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4385
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !4385
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !4385
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4385

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4385
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !4385
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !4385
  br label %cond.end, !dbg !4385

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4385

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4385
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4385
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !4385
  %tobool1 = icmp ne i32 %call, 0, !dbg !4385
  %lnot = xor i1 %tobool1, true, !dbg !4385
  %lnot.ext = zext i1 %lnot to i32, !dbg !4385
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4385
  %5 = load i32, i32* %extend, align 4, !dbg !4388
  %tobool2 = icmp ne i32 %5, 0, !dbg !4388
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4385

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4388
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !4388
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !4388
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4388
  %call3 = call i8* @vec_heap_p_reserve_exact(i8* %8, i32 %9), !dbg !4388
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !4388
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4388
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !4388
  br label %if.end, !dbg !4388

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4385
  ret i32 %12, !dbg !4385
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !4390 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4393, metadata !DIExpression()), !dbg !4394
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4395, metadata !DIExpression()), !dbg !4394
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4394
  %cmp = icmp sge i32 %0, 0, !dbg !4394
  %conv = zext i1 %cmp to i32, !dbg !4394
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4394
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !4394
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4394

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4394
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !4394
  %3 = load i32, i32* %alloc, align 4, !dbg !4394
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4394
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !4394
  %5 = load i32, i32* %num, align 8, !dbg !4394
  %sub = sub i32 %3, %5, !dbg !4394
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4394
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4394
  %conv2 = zext i1 %cmp1 to i32, !dbg !4394
  br label %cond.end, !dbg !4394

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4394
  %tobool3 = icmp ne i32 %7, 0, !dbg !4394
  %lnot = xor i1 %tobool3, true, !dbg !4394
  %lnot.ext = zext i1 %lnot to i32, !dbg !4394
  br label %cond.end, !dbg !4394

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4394
  ret i32 %cond, !dbg !4394
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !4396 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4402, metadata !DIExpression()), !dbg !4403
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4404
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !4404
  %tobool = icmp ne i8 %call, 0, !dbg !4404
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4404

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4404
  br label %cond.end, !dbg !4404

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4404

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4404
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4405
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !4405
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4405
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !4405
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4405

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4405
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !4405
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !4405
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !4405
  br label %cond.end5, !dbg !4405

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4405

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !4405
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !4405
  ret %struct.edge_def* %call7, !dbg !4406
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_complex_components_on_edge(%struct.edge_def* %e, %union.tree_node* %lhs, %union.tree_node* %r, %union.tree_node* %i) #0 !dbg !4407 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %r.addr = alloca %union.tree_node*, align 8
  %i.addr = alloca %union.tree_node*, align 8
  %list = alloca %struct.gimple_seq_d*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4410, metadata !DIExpression()), !dbg !4411
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !4412, metadata !DIExpression()), !dbg !4413
  store %union.tree_node* %r, %union.tree_node** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %r.addr, metadata !4414, metadata !DIExpression()), !dbg !4415
  store %union.tree_node* %i, %union.tree_node** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %i.addr, metadata !4416, metadata !DIExpression()), !dbg !4417
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %list, metadata !4418, metadata !DIExpression()), !dbg !4419
  %0 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4420
  %1 = load %union.tree_node*, %union.tree_node** %r.addr, align 8, !dbg !4421
  %call = call %struct.gimple_seq_d* @set_component_ssa_name(%union.tree_node* %0, i8 zeroext 0, %union.tree_node* %1), !dbg !4422
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %list, align 8, !dbg !4423
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !4424
  %tobool = icmp ne %struct.gimple_seq_d* %2, null, !dbg !4424
  br i1 %tobool, label %if.then, label %if.end, !dbg !4426

if.then:                                          ; preds = %entry
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4427
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !4428
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %3, %struct.gimple_seq_d* %4), !dbg !4429
  br label %if.end, !dbg !4429

if.end:                                           ; preds = %if.then, %entry
  %5 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4430
  %6 = load %union.tree_node*, %union.tree_node** %i.addr, align 8, !dbg !4431
  %call1 = call %struct.gimple_seq_d* @set_component_ssa_name(%union.tree_node* %5, i8 zeroext 1, %union.tree_node* %6), !dbg !4432
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %list, align 8, !dbg !4433
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !4434
  %tobool2 = icmp ne %struct.gimple_seq_d* %7, null, !dbg !4434
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !4436

if.then3:                                         ; preds = %if.end
  %8 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4437
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !4438
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %8, %struct.gimple_seq_d* %9), !dbg !4439
  br label %if.end4, !dbg !4439

if.end4:                                          ; preds = %if.then3, %if.end
  ret void, !dbg !4440
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !4441 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4444, metadata !DIExpression()), !dbg !4445
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4446
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !4446
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4446
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !4446
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4446

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4446
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !4446
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !4446
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !4446
  br label %cond.end, !dbg !4446

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4446

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4446
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4446
  %cmp = icmp eq i32 %call, 1, !dbg !4447
  %conv = zext i1 %cmp to i32, !dbg !4447
  %conv2 = trunc i32 %conv to i8, !dbg !4446
  ret i8 %conv2, !dbg !4448
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !4449 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4454, metadata !DIExpression()), !dbg !4455
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4456, metadata !DIExpression()), !dbg !4455
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4455
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4455
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4455

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4455
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4455
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4455
  %3 = load i32, i32* %num, align 8, !dbg !4455
  %cmp = icmp ult i32 %1, %3, !dbg !4455
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4457
  %land.ext = zext i1 %4 to i32, !dbg !4455
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4455
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !4455
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4455
  %idxprom = zext i32 %6 to i64, !dbg !4455
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4455
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4455
  ret %struct.edge_def* %7, !dbg !4455
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !4458 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4461, metadata !DIExpression()), !dbg !4462
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4462
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4462
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4462

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4462
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !4462
  %2 = load i32, i32* %num, align 8, !dbg !4462
  br label %cond.end, !dbg !4462

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4462

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4462
  ret i32 %cond, !dbg !4462
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @set_component_ssa_name(%union.tree_node* %ssa_name, i8 zeroext %imag_p, %union.tree_node* %value) #0 !dbg !4463 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %ssa_name.addr = alloca %union.tree_node*, align 8
  %imag_p.addr = alloca i8, align 1
  %value.addr = alloca %union.tree_node*, align 8
  %lattice = alloca i32, align 4
  %ssa_name_index = alloca i64, align 8
  %comp = alloca %union.tree_node*, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %list = alloca %struct.gimple_seq_d*, align 8
  store %union.tree_node* %ssa_name, %union.tree_node** %ssa_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_name.addr, metadata !4466, metadata !DIExpression()), !dbg !4467
  store i8 %imag_p, i8* %imag_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %imag_p.addr, metadata !4468, metadata !DIExpression()), !dbg !4469
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !4470, metadata !DIExpression()), !dbg !4471
  call void @llvm.dbg.declare(metadata i32* %lattice, metadata !4472, metadata !DIExpression()), !dbg !4473
  %0 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4474
  %call = call i32 @find_lattice_value(%union.tree_node* %0), !dbg !4475
  store i32 %call, i32* %lattice, align 4, !dbg !4473
  call void @llvm.dbg.declare(metadata i64* %ssa_name_index, metadata !4476, metadata !DIExpression()), !dbg !4477
  call void @llvm.dbg.declare(metadata %union.tree_node** %comp, metadata !4478, metadata !DIExpression()), !dbg !4479
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !4480, metadata !DIExpression()), !dbg !4481
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %list, metadata !4482, metadata !DIExpression()), !dbg !4483
  %1 = load i32, i32* %lattice, align 4, !dbg !4484
  %2 = load i8, i8* %imag_p.addr, align 1, !dbg !4486
  %conv = zext i8 %2 to i32, !dbg !4486
  %tobool = icmp ne i32 %conv, 0, !dbg !4486
  %3 = zext i1 %tobool to i64, !dbg !4486
  %cond = select i1 %tobool, i32 1, i32 2, !dbg !4486
  %cmp = icmp eq i32 %1, %cond, !dbg !4487
  br i1 %cmp, label %if.then, label %if.end, !dbg !4488

if.then:                                          ; preds = %entry
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !4489
  br label %return, !dbg !4489

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4490
  %ssa_name2 = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !4490
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name2, i32 0, i32 3, !dbg !4490
  %5 = load i32, i32* %version, align 8, !dbg !4490
  %mul = mul i32 %5, 2, !dbg !4491
  %6 = load i8, i8* %imag_p.addr, align 1, !dbg !4492
  %conv3 = zext i8 %6 to i32, !dbg !4492
  %add = add i32 %mul, %conv3, !dbg !4493
  %conv4 = zext i32 %add to i64, !dbg !4490
  store i64 %conv4, i64* %ssa_name_index, align 8, !dbg !4494
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4495
  %tobool5 = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !4495
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !4495

cond.true:                                        ; preds = %if.end
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4495
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %8, i32 0, i32 0, !dbg !4495
  br label %cond.end, !dbg !4495

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4495

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond6 = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4495
  %9 = load i64, i64* %ssa_name_index, align 8, !dbg !4495
  %conv7 = trunc i64 %9 to i32, !dbg !4495
  %call8 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond6, i32 %conv7), !dbg !4495
  store %union.tree_node* %call8, %union.tree_node** %comp, align 8, !dbg !4496
  %10 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !4497
  %tobool9 = icmp ne %union.tree_node* %10, null, !dbg !4497
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !4499

if.then10:                                        ; preds = %cond.end
  br label %if.end73, !dbg !4499

if.else:                                          ; preds = %cond.end
  %11 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4500
  %call11 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %11), !dbg !4502
  %conv12 = zext i8 %call11 to i32, !dbg !4502
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !4502
  br i1 %tobool13, label %land.lhs.true, label %if.else25, !dbg !4503

land.lhs.true:                                    ; preds = %if.else
  %12 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4504
  %base14 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4504
  %13 = bitcast %struct.tree_base* %base14 to i64*, !dbg !4504
  %bf.load = load i64, i64* %13, align 8, !dbg !4504
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !4504
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4504
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4504
  %tobool15 = icmp ne i32 %bf.cast, 0, !dbg !4504
  br i1 %tobool15, label %if.else25, label %if.then16, !dbg !4505

if.then16:                                        ; preds = %land.lhs.true
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4506
  %tobool17 = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !4506
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !4506

cond.true18:                                      ; preds = %if.then16
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4506
  %base19 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !4506
  br label %cond.end21, !dbg !4506

cond.false20:                                     ; preds = %if.then16
  br label %cond.end21, !dbg !4506

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_tree_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !4506
  %16 = load i64, i64* %ssa_name_index, align 8, !dbg !4506
  %conv23 = trunc i64 %16 to i32, !dbg !4506
  %17 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4506
  %call24 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond22, i32 %conv23, %union.tree_node* %17), !dbg !4506
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !4508
  br label %return, !dbg !4508

if.else25:                                        ; preds = %land.lhs.true, %if.else
  %18 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4509
  %base26 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !4509
  %19 = bitcast %struct.tree_base* %base26 to i64*, !dbg !4509
  %bf.load27 = load i64, i64* %19, align 8, !dbg !4509
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !4509
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !4509
  %cmp30 = icmp eq i32 %bf.cast29, 141, !dbg !4511
  br i1 %cmp30, label %land.lhs.true32, label %if.else69, !dbg !4512

land.lhs.true32:                                  ; preds = %if.else25
  %20 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4513
  %base33 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4513
  %21 = bitcast %struct.tree_base* %base33 to i64*, !dbg !4513
  %bf.load34 = load i64, i64* %21, align 8, !dbg !4513
  %bf.lshr35 = lshr i64 %bf.load34, 22, !dbg !4513
  %bf.clear36 = and i64 %bf.lshr35, 1, !dbg !4513
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !4513
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !4513
  br i1 %tobool38, label %if.else69, label %if.then39, !dbg !4514

if.then39:                                        ; preds = %land.lhs.true32
  %22 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4515
  %ssa_name40 = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !4515
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name40, i32 0, i32 1, !dbg !4515
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4515
  %decl_common = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !4515
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4515
  %24 = bitcast i40* %ignored_flag to i64*, !dbg !4515
  %bf.load41 = load i64, i64* %24, align 8, !dbg !4515
  %bf.lshr42 = lshr i64 %bf.load41, 10, !dbg !4515
  %bf.clear43 = and i64 %bf.lshr42, 1, !dbg !4515
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !4515
  %tobool45 = icmp ne i32 %bf.cast44, 0, !dbg !4515
  br i1 %tobool45, label %land.lhs.true46, label %if.end60, !dbg !4518

land.lhs.true46:                                  ; preds = %if.then39
  %25 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4519
  %ssa_name47 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !4519
  %var48 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name47, i32 0, i32 1, !dbg !4519
  %26 = load %union.tree_node*, %union.tree_node** %var48, align 8, !dbg !4519
  %decl_common49 = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !4519
  %ignored_flag50 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common49, i32 0, i32 2, !dbg !4519
  %27 = bitcast i40* %ignored_flag50 to i64*, !dbg !4519
  %bf.load51 = load i64, i64* %27, align 8, !dbg !4519
  %bf.lshr52 = lshr i64 %bf.load51, 10, !dbg !4519
  %bf.clear53 = and i64 %bf.lshr52, 1, !dbg !4519
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !4519
  %tobool55 = icmp ne i32 %bf.cast54, 0, !dbg !4519
  br i1 %tobool55, label %if.end60, label %if.then56, !dbg !4520

if.then56:                                        ; preds = %land.lhs.true46
  %28 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4521
  %ssa_name57 = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !4521
  %var58 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name57, i32 0, i32 1, !dbg !4521
  %29 = load %union.tree_node*, %union.tree_node** %var58, align 8, !dbg !4521
  %30 = load i8, i8* %imag_p.addr, align 1, !dbg !4523
  %call59 = call %union.tree_node* @get_component_var(%union.tree_node* %29, i8 zeroext %30), !dbg !4524
  store %union.tree_node* %call59, %union.tree_node** %comp, align 8, !dbg !4525
  %31 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4526
  %32 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !4527
  call void @replace_ssa_name_symbol(%union.tree_node* %31, %union.tree_node* %32), !dbg !4528
  br label %if.end60, !dbg !4529

if.end60:                                         ; preds = %if.then56, %land.lhs.true46, %if.then39
  %33 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4530
  %tobool61 = icmp ne %struct.VEC_tree_heap* %33, null, !dbg !4530
  br i1 %tobool61, label %cond.true62, label %cond.false64, !dbg !4530

cond.true62:                                      ; preds = %if.end60
  %34 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4530
  %base63 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %34, i32 0, i32 0, !dbg !4530
  br label %cond.end65, !dbg !4530

cond.false64:                                     ; preds = %if.end60
  br label %cond.end65, !dbg !4530

cond.end65:                                       ; preds = %cond.false64, %cond.true62
  %cond66 = phi %struct.VEC_tree_base* [ %base63, %cond.true62 ], [ null, %cond.false64 ], !dbg !4530
  %35 = load i64, i64* %ssa_name_index, align 8, !dbg !4530
  %conv67 = trunc i64 %35 to i32, !dbg !4530
  %36 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4530
  %call68 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond66, i32 %conv67, %union.tree_node* %36), !dbg !4530
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !4531
  br label %return, !dbg !4531

if.else69:                                        ; preds = %land.lhs.true32, %if.else25
  %37 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4532
  %38 = load i8, i8* %imag_p.addr, align 1, !dbg !4533
  %call70 = call %union.tree_node* @get_component_ssa_name(%union.tree_node* %37, i8 zeroext %38), !dbg !4534
  store %union.tree_node* %call70, %union.tree_node** %comp, align 8, !dbg !4535
  br label %if.end71

if.end71:                                         ; preds = %if.else69
  br label %if.end72

if.end72:                                         ; preds = %if.end71
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then10
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %list, align 8, !dbg !4536
  %39 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4537
  %call74 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %39, %struct.gimple_seq_d** %list, i8 zeroext 0, %union.tree_node* null), !dbg !4538
  store %union.tree_node* %call74, %union.tree_node** %value.addr, align 8, !dbg !4539
  %40 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !4540
  %41 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4540
  %call75 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %40, %union.tree_node* %41), !dbg !4540
  store %union.gimple_statement_d* %call75, %union.gimple_statement_d** %last, align 8, !dbg !4541
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4542
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %list, %union.gimple_statement_d* %42), !dbg !4543
  %43 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !4544
  %ssa_name76 = bitcast %union.tree_node* %43 to %struct.tree_ssa_name*, !dbg !4544
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name76, i32 0, i32 2, !dbg !4544
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4544
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4544
  %cmp77 = icmp eq %union.gimple_statement_d* %44, %45, !dbg !4544
  br i1 %cmp77, label %cond.false80, label %cond.true79, !dbg !4544

cond.true79:                                      ; preds = %if.end73
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 578, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4544
  br label %cond.end81, !dbg !4544

cond.false80:                                     ; preds = %if.end73
  br label %cond.end81, !dbg !4544

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond82 = phi i32 [ 0, %cond.true79 ], [ 0, %cond.false80 ], !dbg !4544
  %46 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !4545
  store %struct.gimple_seq_d* %46, %struct.gimple_seq_d** %retval, align 8, !dbg !4546
  br label %return, !dbg !4546

return:                                           ; preds = %cond.end81, %cond.end65, %cond.end21, %if.then
  %47 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !4547
  ret %struct.gimple_seq_d* %47, !dbg !4547
}

declare dso_local void @gsi_insert_seq_on_edge(%struct.edge_def*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !4548 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4551, metadata !DIExpression()), !dbg !4552
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4553, metadata !DIExpression()), !dbg !4552
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4552
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4552
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4552

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4552
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4552
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !4552
  %3 = load i32, i32* %num, align 8, !dbg !4552
  %cmp = icmp ult i32 %1, %3, !dbg !4552
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4554
  %land.ext = zext i1 %4 to i32, !dbg !4552
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4552
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !4552
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4552
  %idxprom = zext i32 %6 to i64, !dbg !4552
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4552
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4552
  ret %union.tree_node* %7, !dbg !4552
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node* %obj_) #0 !dbg !4555 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.tree_node*, align 8
  %old_obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4558, metadata !DIExpression()), !dbg !4559
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4560, metadata !DIExpression()), !dbg !4559
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !4561, metadata !DIExpression()), !dbg !4559
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_obj_, metadata !4562, metadata !DIExpression()), !dbg !4559
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !4559
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4559
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !4559
  %2 = load i32, i32* %num, align 8, !dbg !4559
  %cmp = icmp ult i32 %0, %2, !dbg !4559
  %conv = zext i1 %cmp to i32, !dbg !4559
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4559
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 2, !dbg !4559
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !4559
  %idxprom = zext i32 %4 to i64, !dbg !4559
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4559
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4559
  store %union.tree_node* %5, %union.tree_node** %old_obj_, align 8, !dbg !4559
  %6 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !4559
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4559
  %vec1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 2, !dbg !4559
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !4559
  %idxprom2 = zext i32 %8 to i64, !dbg !4559
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec1, i64 0, i64 %idxprom2, !dbg !4559
  store %union.tree_node* %6, %union.tree_node** %arrayidx3, align 8, !dbg !4559
  %9 = load %union.tree_node*, %union.tree_node** %old_obj_, align 8, !dbg !4559
  ret %union.tree_node* %9, !dbg !4559
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_component_var(%union.tree_node* %var, i8 zeroext %imag_p) #0 !dbg !4563 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %imag_p.addr = alloca i8, align 1
  %decl_index = alloca i64, align 8
  %ret = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4566, metadata !DIExpression()), !dbg !4567
  store i8 %imag_p, i8* %imag_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %imag_p.addr, metadata !4568, metadata !DIExpression()), !dbg !4569
  call void @llvm.dbg.declare(metadata i64* %decl_index, metadata !4570, metadata !DIExpression()), !dbg !4571
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4572
  %decl_minimal = bitcast %union.tree_node* %0 to %struct.tree_decl_minimal*, !dbg !4572
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4572
  %1 = load i32, i32* %uid, align 4, !dbg !4572
  %mul = mul i32 %1, 2, !dbg !4573
  %2 = load i8, i8* %imag_p.addr, align 1, !dbg !4574
  %conv = zext i8 %2 to i32, !dbg !4574
  %add = add i32 %mul, %conv, !dbg !4575
  %conv1 = zext i32 %add to i64, !dbg !4572
  store i64 %conv1, i64* %decl_index, align 8, !dbg !4571
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !4576, metadata !DIExpression()), !dbg !4577
  %3 = load i64, i64* %decl_index, align 8, !dbg !4578
  %conv2 = trunc i64 %3 to i32, !dbg !4578
  %call = call %union.tree_node* @cvc_lookup(i32 %conv2), !dbg !4579
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !4577
  %4 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4580
  %cmp = icmp eq %union.tree_node* %4, null, !dbg !4582
  br i1 %cmp, label %if.then, label %if.end, !dbg !4583

if.then:                                          ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4584
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4584
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4584
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4584
  %common4 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !4584
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !4584
  %7 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !4584
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4586
  %9 = load i8, i8* %imag_p.addr, align 1, !dbg !4587
  %conv6 = zext i8 %9 to i32, !dbg !4587
  %tobool = icmp ne i32 %conv6, 0, !dbg !4587
  %10 = zext i1 %tobool to i64, !dbg !4587
  %cond = select i1 %tobool, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), !dbg !4587
  %11 = load i8, i8* %imag_p.addr, align 1, !dbg !4588
  %conv7 = zext i8 %11 to i32, !dbg !4588
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !4588
  %12 = zext i1 %tobool8 to i64, !dbg !4588
  %cond9 = select i1 %tobool8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), !dbg !4588
  %13 = load i8, i8* %imag_p.addr, align 1, !dbg !4589
  %conv10 = zext i8 %13 to i32, !dbg !4589
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !4589
  %14 = zext i1 %tobool11 to i64, !dbg !4589
  %cond12 = select i1 %tobool11, i32 44, i32 43, !dbg !4589
  %call13 = call %union.tree_node* @create_one_component_var(%union.tree_node* %7, %union.tree_node* %8, i8* %cond, i8* %cond9, i32 %cond12), !dbg !4590
  store %union.tree_node* %call13, %union.tree_node** %ret, align 8, !dbg !4591
  %15 = load i64, i64* %decl_index, align 8, !dbg !4592
  %conv14 = trunc i64 %15 to i32, !dbg !4592
  %16 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4593
  call void @cvc_insert(i32 %conv14, %union.tree_node* %16), !dbg !4594
  br label %if.end, !dbg !4595

if.end:                                           ; preds = %if.then, %entry
  %17 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4596
  ret %union.tree_node* %17, !dbg !4597
}

declare dso_local void @replace_ssa_name_symbol(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_component_ssa_name(%union.tree_node* %ssa_name, i8 zeroext %imag_p) #0 !dbg !4598 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ssa_name.addr = alloca %union.tree_node*, align 8
  %imag_p.addr = alloca i8, align 1
  %lattice = alloca i32, align 4
  %ssa_name_index = alloca i64, align 8
  %ret = alloca %union.tree_node*, align 8
  %inner_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %ssa_name, %union.tree_node** %ssa_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_name.addr, metadata !4599, metadata !DIExpression()), !dbg !4600
  store i8 %imag_p, i8* %imag_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %imag_p.addr, metadata !4601, metadata !DIExpression()), !dbg !4602
  call void @llvm.dbg.declare(metadata i32* %lattice, metadata !4603, metadata !DIExpression()), !dbg !4604
  %0 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4605
  %call = call i32 @find_lattice_value(%union.tree_node* %0), !dbg !4606
  store i32 %call, i32* %lattice, align 4, !dbg !4604
  call void @llvm.dbg.declare(metadata i64* %ssa_name_index, metadata !4607, metadata !DIExpression()), !dbg !4608
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !4609, metadata !DIExpression()), !dbg !4610
  %1 = load i32, i32* %lattice, align 4, !dbg !4611
  %2 = load i8, i8* %imag_p.addr, align 1, !dbg !4613
  %conv = zext i8 %2 to i32, !dbg !4613
  %tobool = icmp ne i32 %conv, 0, !dbg !4613
  %3 = zext i1 %tobool to i64, !dbg !4613
  %cond = select i1 %tobool, i32 1, i32 2, !dbg !4613
  %cmp = icmp eq i32 %1, %cond, !dbg !4614
  br i1 %cmp, label %if.then, label %if.end, !dbg !4615

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type, metadata !4616, metadata !DIExpression()), !dbg !4618
  %4 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4619
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !4619
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4619
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4619
  %common2 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4619
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !4619
  %6 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !4619
  store %union.tree_node* %6, %union.tree_node** %inner_type, align 8, !dbg !4618
  %7 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !4620
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4620
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !4620
  %bf.load = load i64, i64* %8, align 8, !dbg !4620
  %bf.clear = and i64 %bf.load, 65535, !dbg !4620
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4620
  %cmp4 = icmp eq i32 %bf.cast, 9, !dbg !4620
  br i1 %cmp4, label %if.then6, label %if.else, !dbg !4622

if.then6:                                         ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !4623
  %call7 = call %union.tree_node* @build_real(%union.tree_node* %9, %struct.real_value* byval(%struct.real_value) align 8 @dconst0), !dbg !4624
  store %union.tree_node* %call7, %union.tree_node** %retval, align 8, !dbg !4625
  br label %return, !dbg !4625

if.else:                                          ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !4626
  %call8 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 0), !dbg !4627
  store %union.tree_node* %call8, %union.tree_node** %retval, align 8, !dbg !4628
  br label %return, !dbg !4628

if.end:                                           ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4629
  %ssa_name9 = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !4629
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name9, i32 0, i32 3, !dbg !4629
  %12 = load i32, i32* %version, align 8, !dbg !4629
  %mul = mul i32 %12, 2, !dbg !4630
  %13 = load i8, i8* %imag_p.addr, align 1, !dbg !4631
  %conv10 = zext i8 %13 to i32, !dbg !4631
  %add = add i32 %mul, %conv10, !dbg !4632
  %conv11 = zext i32 %add to i64, !dbg !4629
  store i64 %conv11, i64* %ssa_name_index, align 8, !dbg !4633
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4634
  %tobool12 = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !4634
  br i1 %tobool12, label %cond.true, label %cond.false, !dbg !4634

cond.true:                                        ; preds = %if.end
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4634
  %base13 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !4634
  br label %cond.end, !dbg !4634

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4634

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond14 = phi %struct.VEC_tree_base* [ %base13, %cond.true ], [ null, %cond.false ], !dbg !4634
  %16 = load i64, i64* %ssa_name_index, align 8, !dbg !4634
  %conv15 = trunc i64 %16 to i32, !dbg !4634
  %call16 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond14, i32 %conv15), !dbg !4634
  store %union.tree_node* %call16, %union.tree_node** %ret, align 8, !dbg !4635
  %17 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4636
  %cmp17 = icmp eq %union.tree_node* %17, null, !dbg !4638
  br i1 %cmp17, label %if.then19, label %if.end58, !dbg !4639

if.then19:                                        ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4640
  %ssa_name20 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !4640
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name20, i32 0, i32 1, !dbg !4640
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4640
  %20 = load i8, i8* %imag_p.addr, align 1, !dbg !4642
  %call21 = call %union.tree_node* @get_component_var(%union.tree_node* %19, i8 zeroext %20), !dbg !4643
  store %union.tree_node* %call21, %union.tree_node** %ret, align 8, !dbg !4644
  %21 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4645
  %call22 = call %union.tree_node* @make_ssa_name(%union.tree_node* %21, %union.gimple_statement_d* null), !dbg !4646
  store %union.tree_node* %call22, %union.tree_node** %ret, align 8, !dbg !4647
  %22 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4648
  %base23 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4648
  %23 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4648
  %bf.load24 = load i64, i64* %23, align 8, !dbg !4648
  %bf.lshr = lshr i64 %bf.load24, 22, !dbg !4648
  %bf.clear25 = and i64 %bf.lshr, 1, !dbg !4648
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !4648
  %24 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4649
  %base27 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4649
  %25 = bitcast %struct.tree_base* %base27 to i64*, !dbg !4649
  %26 = zext i32 %bf.cast26 to i64, !dbg !4650
  %bf.load28 = load i64, i64* %25, align 8, !dbg !4650
  %bf.value = and i64 %26, 1, !dbg !4650
  %bf.shl = shl i64 %bf.value, 22, !dbg !4650
  %bf.clear29 = and i64 %bf.load28, -4194305, !dbg !4650
  %bf.set = or i64 %bf.clear29, %bf.shl, !dbg !4650
  store i64 %bf.set, i64* %25, align 8, !dbg !4650
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !4650
  %27 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4651
  %ssa_name30 = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !4651
  %var31 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name30, i32 0, i32 1, !dbg !4651
  %28 = load %union.tree_node*, %union.tree_node** %var31, align 8, !dbg !4651
  %base32 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4651
  %29 = bitcast %struct.tree_base* %base32 to i64*, !dbg !4651
  %bf.load33 = load i64, i64* %29, align 8, !dbg !4651
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !4651
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !4651
  %cmp36 = icmp eq i32 %bf.cast35, 32, !dbg !4653
  br i1 %cmp36, label %land.lhs.true, label %if.end49, !dbg !4654

land.lhs.true:                                    ; preds = %if.then19
  %30 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4655
  %ssa_name38 = bitcast %union.tree_node* %30 to %struct.tree_ssa_name*, !dbg !4655
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name38, i32 0, i32 2, !dbg !4655
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4655
  %call39 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %31), !dbg !4656
  %conv40 = zext i8 %call39 to i32, !dbg !4656
  %tobool41 = icmp ne i32 %conv40, 0, !dbg !4656
  br i1 %tobool41, label %if.then42, label %if.end49, !dbg !4657

if.then42:                                        ; preds = %land.lhs.true
  %32 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4658
  %ssa_name43 = bitcast %union.tree_node* %32 to %struct.tree_ssa_name*, !dbg !4658
  %def_stmt44 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name43, i32 0, i32 2, !dbg !4658
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt44, align 8, !dbg !4658
  %34 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4660
  %ssa_name45 = bitcast %union.tree_node* %34 to %struct.tree_ssa_name*, !dbg !4660
  %def_stmt46 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name45, i32 0, i32 2, !dbg !4660
  store %union.gimple_statement_d* %33, %union.gimple_statement_d** %def_stmt46, align 8, !dbg !4661
  %35 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4662
  %ssa_name47 = bitcast %union.tree_node* %35 to %struct.tree_ssa_name*, !dbg !4662
  %var48 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name47, i32 0, i32 1, !dbg !4662
  %36 = load %union.tree_node*, %union.tree_node** %var48, align 8, !dbg !4662
  %37 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4663
  call void @set_default_def(%union.tree_node* %36, %union.tree_node* %37), !dbg !4664
  br label %if.end49, !dbg !4665

if.end49:                                         ; preds = %if.then42, %land.lhs.true, %if.then19
  %38 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4666
  %tobool50 = icmp ne %struct.VEC_tree_heap* %38, null, !dbg !4666
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !4666

cond.true51:                                      ; preds = %if.end49
  %39 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @complex_ssa_name_components, align 8, !dbg !4666
  %base52 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %39, i32 0, i32 0, !dbg !4666
  br label %cond.end54, !dbg !4666

cond.false53:                                     ; preds = %if.end49
  br label %cond.end54, !dbg !4666

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_tree_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !4666
  %40 = load i64, i64* %ssa_name_index, align 8, !dbg !4666
  %conv56 = trunc i64 %40 to i32, !dbg !4666
  %41 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4666
  %call57 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond55, i32 %conv56, %union.tree_node* %41), !dbg !4666
  br label %if.end58, !dbg !4667

if.end58:                                         ; preds = %cond.end54, %cond.end
  %42 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4668
  store %union.tree_node* %42, %union.tree_node** %retval, align 8, !dbg !4669
  br label %return, !dbg !4669

return:                                           ; preds = %if.end58, %if.else, %if.then6
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4670
  ret %union.tree_node* %43, !dbg !4670
}

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @cvc_lookup(i32 %uid) #0 !dbg !4671 {
entry:
  %uid.addr = alloca i32, align 4
  %h = alloca %struct.int_tree_map*, align 8
  %in = alloca %struct.int_tree_map, align 8
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !4674, metadata !DIExpression()), !dbg !4675
  call void @llvm.dbg.declare(metadata %struct.int_tree_map** %h, metadata !4676, metadata !DIExpression()), !dbg !4677
  call void @llvm.dbg.declare(metadata %struct.int_tree_map* %in, metadata !4678, metadata !DIExpression()), !dbg !4679
  %0 = load i32, i32* %uid.addr, align 4, !dbg !4680
  %uid1 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %in, i32 0, i32 0, !dbg !4681
  store i32 %0, i32* %uid1, align 8, !dbg !4682
  %1 = load %struct.htab*, %struct.htab** @complex_variable_components, align 8, !dbg !4683
  %2 = bitcast %struct.int_tree_map* %in to i8*, !dbg !4684
  %3 = load i32, i32* %uid.addr, align 4, !dbg !4685
  %call = call i8* @htab_find_with_hash(%struct.htab* %1, i8* %2, i32 %3), !dbg !4686
  %4 = bitcast i8* %call to %struct.int_tree_map*, !dbg !4687
  store %struct.int_tree_map* %4, %struct.int_tree_map** %h, align 8, !dbg !4688
  %5 = load %struct.int_tree_map*, %struct.int_tree_map** %h, align 8, !dbg !4689
  %tobool = icmp ne %struct.int_tree_map* %5, null, !dbg !4689
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4689

cond.true:                                        ; preds = %entry
  %6 = load %struct.int_tree_map*, %struct.int_tree_map** %h, align 8, !dbg !4690
  %to = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %6, i32 0, i32 1, !dbg !4691
  %7 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4691
  br label %cond.end, !dbg !4689

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4689

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %7, %cond.true ], [ null, %cond.false ], !dbg !4689
  ret %union.tree_node* %cond, !dbg !4692
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_one_component_var(%union.tree_node* %type, %union.tree_node* %orig, i8* %prefix, i8* %suffix, i32 %code) #0 !dbg !4693 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %orig.addr = alloca %union.tree_node*, align 8
  %prefix.addr = alloca i8*, align 8
  %suffix.addr = alloca i8*, align 8
  %code.addr = alloca i32, align 4
  %r = alloca %union.tree_node*, align 8
  %name9 = alloca i8*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4696, metadata !DIExpression()), !dbg !4697
  store %union.tree_node* %orig, %union.tree_node** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig.addr, metadata !4698, metadata !DIExpression()), !dbg !4699
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !4700, metadata !DIExpression()), !dbg !4701
  store i8* %suffix, i8** %suffix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %suffix.addr, metadata !4702, metadata !DIExpression()), !dbg !4703
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4704, metadata !DIExpression()), !dbg !4705
  call void @llvm.dbg.declare(metadata %union.tree_node** %r, metadata !4706, metadata !DIExpression()), !dbg !4707
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4708
  %1 = load i8*, i8** %prefix.addr, align 8, !dbg !4709
  %call = call %union.tree_node* @create_tmp_var(%union.tree_node* %0, i8* %1), !dbg !4710
  store %union.tree_node* %call, %union.tree_node** %r, align 8, !dbg !4707
  %2 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4711
  %call1 = call zeroext i8 @add_referenced_var(%union.tree_node* %2), !dbg !4712
  %3 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !4713
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !4713
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !4713
  %4 = load i32, i32* %locus, align 8, !dbg !4713
  %5 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4714
  %decl_minimal2 = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !4714
  %locus3 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal2, i32 0, i32 1, !dbg !4714
  store i32 %4, i32* %locus3, align 8, !dbg !4715
  %6 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4716
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !4716
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4716
  %7 = bitcast i40* %artificial_flag to i64*, !dbg !4716
  %bf.load = load i64, i64* %7, align 8, !dbg !4717
  %bf.clear = and i64 %bf.load, -4097, !dbg !4717
  %bf.set = or i64 %bf.clear, 4096, !dbg !4717
  store i64 %bf.set, i64* %7, align 8, !dbg !4717
  %8 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !4718
  %decl_minimal4 = bitcast %union.tree_node* %8 to %struct.tree_decl_minimal*, !dbg !4718
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal4, i32 0, i32 3, !dbg !4718
  %9 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4718
  %tobool = icmp ne %union.tree_node* %9, null, !dbg !4718
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4720

land.lhs.true:                                    ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !4721
  %decl_common5 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !4721
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common5, i32 0, i32 2, !dbg !4721
  %11 = bitcast i40* %ignored_flag to i64*, !dbg !4721
  %bf.load6 = load i64, i64* %11, align 8, !dbg !4721
  %bf.lshr = lshr i64 %bf.load6, 10, !dbg !4721
  %bf.clear7 = and i64 %bf.lshr, 1, !dbg !4721
  %bf.cast = trunc i64 %bf.clear7 to i32, !dbg !4721
  %tobool8 = icmp ne i32 %bf.cast, 0, !dbg !4721
  br i1 %tobool8, label %if.else, label %if.then, !dbg !4722

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %name9, metadata !4723, metadata !DIExpression()), !dbg !4725
  %12 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !4726
  %decl_minimal10 = bitcast %union.tree_node* %12 to %struct.tree_decl_minimal*, !dbg !4726
  %name11 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal10, i32 0, i32 3, !dbg !4726
  %13 = load %union.tree_node*, %union.tree_node** %name11, align 8, !dbg !4726
  %identifier = bitcast %union.tree_node* %13 to %struct.tree_identifier*, !dbg !4726
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4726
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !4726
  %14 = load i8*, i8** %str, align 8, !dbg !4726
  store i8* %14, i8** %name9, align 8, !dbg !4725
  %15 = load i8*, i8** %name9, align 8, !dbg !4727
  %16 = load i8*, i8** %suffix.addr, align 8, !dbg !4727
  %call12 = call i64 (i8*, ...) @concat_length(i8* %15, i8* %16, i8* null), !dbg !4727
  %add = add i64 %call12, 1, !dbg !4727
  %17 = alloca i8, i64 %add, align 16, !dbg !4727
  store i8* %17, i8** @libiberty_concat_ptr, align 8, !dbg !4727
  %18 = load i8*, i8** %name9, align 8, !dbg !4727
  %19 = load i8*, i8** %suffix.addr, align 8, !dbg !4727
  %call13 = call i8* (i8*, ...) @concat_copy2(i8* %18, i8* %19, i8* null), !dbg !4727
  %call14 = call %union.tree_node* @get_identifier(i8* %call13), !dbg !4728
  %20 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4729
  %decl_minimal15 = bitcast %union.tree_node* %20 to %struct.tree_decl_minimal*, !dbg !4729
  %name16 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal15, i32 0, i32 3, !dbg !4729
  store %union.tree_node* %call14, %union.tree_node** %name16, align 8, !dbg !4730
  %21 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4731
  %22 = load i32, i32* %code.addr, align 4, !dbg !4731
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4731
  %24 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !4731
  %call17 = call %union.tree_node* @build1_stat(i32 %22, %union.tree_node* %23, %union.tree_node* %24), !dbg !4731
  call void @decl_debug_expr_insert(%union.tree_node* %21, %union.tree_node* %call17), !dbg !4731
  %25 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4732
  %decl_common18 = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !4732
  %debug_expr_is_from = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 2, !dbg !4732
  %26 = bitcast i40* %debug_expr_is_from to i64*, !dbg !4732
  %bf.load19 = load i64, i64* %26, align 8, !dbg !4733
  %bf.clear20 = and i64 %bf.load19, -16385, !dbg !4733
  %bf.set21 = or i64 %bf.clear20, 16384, !dbg !4733
  store i64 %bf.set21, i64* %26, align 8, !dbg !4733
  %27 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4734
  %decl_common22 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !4734
  %ignored_flag23 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common22, i32 0, i32 2, !dbg !4734
  %28 = bitcast i40* %ignored_flag23 to i64*, !dbg !4734
  %bf.load24 = load i64, i64* %28, align 8, !dbg !4735
  %bf.clear25 = and i64 %bf.load24, -1025, !dbg !4735
  store i64 %bf.clear25, i64* %28, align 8, !dbg !4735
  %29 = load %union.tree_node*, %union.tree_node** %orig.addr, align 8, !dbg !4736
  %base = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !4736
  %30 = bitcast %struct.tree_base* %base to i64*, !dbg !4736
  %bf.load26 = load i64, i64* %30, align 8, !dbg !4736
  %bf.lshr27 = lshr i64 %bf.load26, 23, !dbg !4736
  %bf.clear28 = and i64 %bf.lshr27, 1, !dbg !4736
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !4736
  %31 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4737
  %base30 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !4737
  %32 = bitcast %struct.tree_base* %base30 to i64*, !dbg !4737
  %33 = zext i32 %bf.cast29 to i64, !dbg !4738
  %bf.load31 = load i64, i64* %32, align 8, !dbg !4738
  %bf.value = and i64 %33, 1, !dbg !4738
  %bf.shl = shl i64 %bf.value, 23, !dbg !4738
  %bf.clear32 = and i64 %bf.load31, -8388609, !dbg !4738
  %bf.set33 = or i64 %bf.clear32, %bf.shl, !dbg !4738
  store i64 %bf.set33, i64* %32, align 8, !dbg !4738
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !4738
  br label %if.end, !dbg !4739

if.else:                                          ; preds = %land.lhs.true, %entry
  %34 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4740
  %decl_common34 = bitcast %union.tree_node* %34 to %struct.tree_decl_common*, !dbg !4740
  %ignored_flag35 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common34, i32 0, i32 2, !dbg !4740
  %35 = bitcast i40* %ignored_flag35 to i64*, !dbg !4740
  %bf.load36 = load i64, i64* %35, align 8, !dbg !4742
  %bf.clear37 = and i64 %bf.load36, -1025, !dbg !4742
  %bf.set38 = or i64 %bf.clear37, 1024, !dbg !4742
  store i64 %bf.set38, i64* %35, align 8, !dbg !4742
  %36 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4743
  %base39 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !4743
  %37 = bitcast %struct.tree_base* %base39 to i64*, !dbg !4743
  %bf.load40 = load i64, i64* %37, align 8, !dbg !4744
  %bf.clear41 = and i64 %bf.load40, -8388609, !dbg !4744
  %bf.set42 = or i64 %bf.clear41, 8388608, !dbg !4744
  store i64 %bf.set42, i64* %37, align 8, !dbg !4744
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %38 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !4745
  ret %union.tree_node* %38, !dbg !4746
}

; Function Attrs: noinline nounwind uwtable
define internal void @cvc_insert(i32 %uid, %union.tree_node* %to) #0 !dbg !4747 {
entry:
  %uid.addr = alloca i32, align 4
  %to.addr = alloca %union.tree_node*, align 8
  %h = alloca %struct.int_tree_map*, align 8
  %loc = alloca i8**, align 8
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !4750, metadata !DIExpression()), !dbg !4751
  store %union.tree_node* %to, %union.tree_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to.addr, metadata !4752, metadata !DIExpression()), !dbg !4753
  call void @llvm.dbg.declare(metadata %struct.int_tree_map** %h, metadata !4754, metadata !DIExpression()), !dbg !4755
  call void @llvm.dbg.declare(metadata i8*** %loc, metadata !4756, metadata !DIExpression()), !dbg !4757
  %call = call i8* @xmalloc(i64 16), !dbg !4758
  %0 = bitcast i8* %call to %struct.int_tree_map*, !dbg !4758
  store %struct.int_tree_map* %0, %struct.int_tree_map** %h, align 8, !dbg !4759
  %1 = load i32, i32* %uid.addr, align 4, !dbg !4760
  %2 = load %struct.int_tree_map*, %struct.int_tree_map** %h, align 8, !dbg !4761
  %uid1 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %2, i32 0, i32 0, !dbg !4762
  store i32 %1, i32* %uid1, align 8, !dbg !4763
  %3 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !4764
  %4 = load %struct.int_tree_map*, %struct.int_tree_map** %h, align 8, !dbg !4765
  %to2 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %4, i32 0, i32 1, !dbg !4766
  store %union.tree_node* %3, %union.tree_node** %to2, align 8, !dbg !4767
  %5 = load %struct.htab*, %struct.htab** @complex_variable_components, align 8, !dbg !4768
  %6 = load %struct.int_tree_map*, %struct.int_tree_map** %h, align 8, !dbg !4769
  %7 = bitcast %struct.int_tree_map* %6 to i8*, !dbg !4769
  %8 = load i32, i32* %uid.addr, align 4, !dbg !4770
  %call3 = call i8** @htab_find_slot_with_hash(%struct.htab* %5, i8* %7, i32 %8, i32 1), !dbg !4771
  store i8** %call3, i8*** %loc, align 8, !dbg !4772
  %9 = load %struct.int_tree_map*, %struct.int_tree_map** %h, align 8, !dbg !4773
  %10 = load i8**, i8*** %loc, align 8, !dbg !4774
  %11 = bitcast i8** %10 to %struct.int_tree_map**, !dbg !4775
  store %struct.int_tree_map* %9, %struct.int_tree_map** %11, align 8, !dbg !4776
  ret void, !dbg !4777
}

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local i64 @concat_length(i8*, ...) #2

declare dso_local i8* @concat_copy2(i8*, ...) #2

declare dso_local void @decl_debug_expr_insert(%union.tree_node*, %union.tree_node*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local %union.tree_node* @build_real(%union.tree_node*, %struct.real_value* byval(%struct.real_value) align 8) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !4778 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4781, metadata !DIExpression()), !dbg !4782
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4783, metadata !DIExpression()), !dbg !4784
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4785
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4785
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4786
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4787
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !4788
  ret %union.tree_node* %call, !dbg !4789
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !4790 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4791, metadata !DIExpression()), !dbg !4792
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4793
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4794
  %cmp = icmp eq i32 %call, 18, !dbg !4795
  %conv = zext i1 %cmp to i32, !dbg !4795
  %conv1 = trunc i32 %conv to i8, !dbg !4794
  ret i8 %conv1, !dbg !4796
}

declare dso_local void @set_default_def(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %t, i8 zeroext %imagpart_p, i8 zeroext %gimple_p) #0 !dbg !4797 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %imagpart_p.addr = alloca i8, align 1
  %gimple_p.addr = alloca i8, align 1
  %inner_type = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4800, metadata !DIExpression()), !dbg !4801
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4802, metadata !DIExpression()), !dbg !4803
  store i8 %imagpart_p, i8* %imagpart_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %imagpart_p.addr, metadata !4804, metadata !DIExpression()), !dbg !4805
  store i8 %gimple_p, i8* %gimple_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %gimple_p.addr, metadata !4806, metadata !DIExpression()), !dbg !4807
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4808
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4808
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4808
  %bf.load = load i64, i64* %1, align 8, !dbg !4808
  %bf.clear = and i64 %bf.load, 65535, !dbg !4808
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4808
  switch i32 %bf.cast, label %sw.default [
    i32 26, label %sw.bb
    i32 123, label %sw.bb2
    i32 32, label %sw.bb3
    i32 36, label %sw.bb3
    i32 34, label %sw.bb3
    i32 47, label %sw.bb3
    i32 41, label %sw.bb3
    i32 45, label %sw.bb3
    i32 118, label %sw.bb3
    i32 141, label %sw.bb12
  ], !dbg !4809

sw.bb:                                            ; preds = %entry
  %2 = load i8, i8* %imagpart_p.addr, align 1, !dbg !4810
  %conv = zext i8 %2 to i32, !dbg !4810
  %tobool = icmp ne i32 %conv, 0, !dbg !4810
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4810

cond.true:                                        ; preds = %sw.bb
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4812
  %complex = bitcast %union.tree_node* %3 to %struct.tree_complex*, !dbg !4812
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 2, !dbg !4812
  %4 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !4812
  br label %cond.end, !dbg !4810

cond.false:                                       ; preds = %sw.bb
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4813
  %complex1 = bitcast %union.tree_node* %5 to %struct.tree_complex*, !dbg !4813
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex1, i32 0, i32 1, !dbg !4813
  %6 = load %union.tree_node*, %union.tree_node** %real, align 8, !dbg !4813
  br label %cond.end, !dbg !4810

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %4, %cond.true ], [ %6, %cond.false ], !dbg !4810
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !4814
  br label %return, !dbg !4814

sw.bb2:                                           ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 597, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4815
  br label %sw.bb3, !dbg !4815

sw.bb3:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.bb2
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type, metadata !4816, metadata !DIExpression()), !dbg !4818
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4819
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !4819
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4819
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4819
  %common4 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !4819
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !4819
  %9 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !4819
  store %union.tree_node* %9, %union.tree_node** %inner_type, align 8, !dbg !4818
  %10 = load i8, i8* %imagpart_p.addr, align 1, !dbg !4820
  %conv6 = zext i8 %10 to i32, !dbg !4820
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !4820
  %11 = zext i1 %tobool7 to i64, !dbg !4820
  %cond8 = select i1 %tobool7, i32 44, i32 43, !dbg !4820
  %12 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !4820
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4820
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %13), !dbg !4820
  %call9 = call %union.tree_node* @build1_stat(i32 %cond8, %union.tree_node* %12, %union.tree_node* %call), !dbg !4820
  store %union.tree_node* %call9, %union.tree_node** %t.addr, align 8, !dbg !4821
  %14 = load i8, i8* %gimple_p.addr, align 1, !dbg !4822
  %tobool10 = icmp ne i8 %14, 0, !dbg !4822
  br i1 %tobool10, label %if.then, label %if.end, !dbg !4824

if.then:                                          ; preds = %sw.bb3
  %15 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4825
  %16 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4826
  %call11 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %15, %union.tree_node* %16, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !4827
  store %union.tree_node* %call11, %union.tree_node** %t.addr, align 8, !dbg !4828
  br label %if.end, !dbg !4829

if.end:                                           ; preds = %if.then, %sw.bb3
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4830
  store %union.tree_node* %17, %union.tree_node** %retval, align 8, !dbg !4831
  br label %return, !dbg !4831

sw.bb12:                                          ; preds = %entry
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4832
  %19 = load i8, i8* %imagpart_p.addr, align 1, !dbg !4833
  %call13 = call %union.tree_node* @get_component_ssa_name(%union.tree_node* %18, i8 zeroext %19), !dbg !4834
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !4835
  br label %return, !dbg !4835

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 623, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4836
  br label %sw.epilog, !dbg !4837

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4838
  br label %return, !dbg !4838

return:                                           ; preds = %sw.epilog, %sw.bb12, %if.end, %cond.end
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4839
  ret %union.tree_node* %20, !dbg !4839
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !4840 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !4843, metadata !DIExpression()), !dbg !4844
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !4845, metadata !DIExpression()), !dbg !4846
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !4847
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !4848
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4849
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !4850
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !4851
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !4851
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !4852
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !4853
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4854
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !4855
  ret void, !dbg !4856
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !4857 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4860, metadata !DIExpression()), !dbg !4861
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4862, metadata !DIExpression()), !dbg !4863
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4864
  %1 = load i32, i32* %i.addr, align 4, !dbg !4865
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !4866
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !4867
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !4868
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !4869 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !4872, metadata !DIExpression()), !dbg !4873
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4874
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !4876
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !4876
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !4877
  br i1 %cmp, label %if.then, label %if.end, !dbg !4878

if.then:                                          ; preds = %entry
  br label %return, !dbg !4879

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4880
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !4881
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !4881
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4882
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !4883
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !4883
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !4884
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !4885
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4886
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !4887
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !4887
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4888
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !4889
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !4889
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !4890
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !4891
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4892
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !4893
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !4894
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4895
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !4896
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !4897
  br label %return, !dbg !4898

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !4898
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !4899 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !4902, metadata !DIExpression()), !dbg !4903
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !4904, metadata !DIExpression()), !dbg !4905
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !4906, metadata !DIExpression()), !dbg !4907
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !4908
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4908
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4910

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !4911
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4911
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4911
  %bf.load = load i64, i64* %2, align 8, !dbg !4911
  %bf.clear = and i64 %bf.load, 65535, !dbg !4911
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4911
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !4912
  br i1 %cmp, label %if.then, label %if.else, !dbg !4913

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4914
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !4915
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !4916
  br label %if.end, !dbg !4914

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !4917
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !4917
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !4917
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !4919
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4920
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !4921
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !4922
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !4923
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !4924 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !4927, metadata !DIExpression()), !dbg !4928
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !4929, metadata !DIExpression()), !dbg !4930
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !4931
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4932
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !4933
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !4934
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !4935
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !4936
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !4936
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4937
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !4938
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !4939
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4940
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !4941
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !4942
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !4942
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !4943
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !4944
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !4945
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !4946
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !4947
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !4948
  ret void, !dbg !4949
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !4950 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4953, metadata !DIExpression()), !dbg !4954
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4955
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !4956
  %1 = load i32, i32* %flags, align 8, !dbg !4956
  %and = and i32 %1, 512, !dbg !4957
  %tobool = icmp ne i32 %and, 0, !dbg !4957
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !4958

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4959
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !4960
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !4961
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !4961
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !4959
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4962

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4963
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !4964
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !4965
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !4965
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !4966
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4966
  br label %cond.end, !dbg !4962

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !4962

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !4962
  ret %struct.gimple_seq_d* %cond, !dbg !4967
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !4968 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4974, metadata !DIExpression()), !dbg !4975
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4976
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !4976
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4976

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4977
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !4978
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !4978
  br label %cond.end, !dbg !4976

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4976

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !4976
  ret %struct.gimple_seq_node_d* %cond, !dbg !4979
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_move(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %type) #0 !dbg !4980 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %inner_type = alloca %union.tree_node*, align 8
  %r = alloca %union.tree_node*, align 8
  %i = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %x = alloca %union.tree_node*, align 8
  %t = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4983, metadata !DIExpression()), !dbg !4984
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4985, metadata !DIExpression()), !dbg !4986
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type, metadata !4987, metadata !DIExpression()), !dbg !4988
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4989
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !4989
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4989
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4989
  store %union.tree_node* %1, %union.tree_node** %inner_type, align 8, !dbg !4988
  call void @llvm.dbg.declare(metadata %union.tree_node** %r, metadata !4990, metadata !DIExpression()), !dbg !4991
  call void @llvm.dbg.declare(metadata %union.tree_node** %i, metadata !4992, metadata !DIExpression()), !dbg !4993
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4994, metadata !DIExpression()), !dbg !4995
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4996, metadata !DIExpression()), !dbg !4997
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4998, metadata !DIExpression()), !dbg !4999
  %2 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5000
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %2), !dbg !5001
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !4999
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5002
  %call2 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %3), !dbg !5004
  %tobool = icmp ne i8 %call2, 0, !dbg !5004
  br i1 %tobool, label %if.then, label %if.else7, !dbg !5005

if.then:                                          ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5006
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %4), !dbg !5008
  store %union.tree_node* %call3, %union.tree_node** %lhs, align 8, !dbg !5009
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5010
  %call4 = call i32 @gimple_num_ops(%union.gimple_statement_d* %5), !dbg !5012
  %cmp = icmp eq i32 %call4, 2, !dbg !5013
  br i1 %cmp, label %if.then5, label %if.else, !dbg !5014

if.then5:                                         ; preds = %if.then
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5015
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !5016
  store %union.tree_node* %call6, %union.tree_node** %rhs, align 8, !dbg !5017
  br label %if.end, !dbg !5018

if.else:                                          ; preds = %if.then
  store %union.tree_node* null, %union.tree_node** %rhs, align 8, !dbg !5019
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  br label %if.end14, !dbg !5020

if.else7:                                         ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5021
  %call8 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %7), !dbg !5023
  %tobool9 = icmp ne i8 %call8, 0, !dbg !5023
  br i1 %tobool9, label %if.then10, label %if.else12, !dbg !5024

if.then10:                                        ; preds = %if.else7
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5025
  %call11 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %8), !dbg !5027
  store %union.tree_node* %call11, %union.tree_node** %lhs, align 8, !dbg !5028
  store %union.tree_node* null, %union.tree_node** %rhs, align 8, !dbg !5029
  br label %if.end13, !dbg !5030

if.else12:                                        ; preds = %if.else7
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 781, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5031
  br label %if.end13

if.end13:                                         ; preds = %if.else12, %if.then10
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  %9 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5032
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5032
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !5032
  %bf.load = load i64, i64* %10, align 8, !dbg !5032
  %bf.clear = and i64 %bf.load, 65535, !dbg !5032
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5032
  %cmp15 = icmp eq i32 %bf.cast, 141, !dbg !5034
  br i1 %cmp15, label %if.then16, label %if.else55, !dbg !5035

if.then16:                                        ; preds = %if.end14
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5036
  %call17 = call zeroext i8 @is_ctrl_altering_stmt(%union.gimple_statement_d* %11), !dbg !5039
  %tobool18 = icmp ne i8 %call17, 0, !dbg !5039
  br i1 %tobool18, label %if.then19, label %if.else29, !dbg !5040

if.then19:                                        ; preds = %if.then16
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5041, metadata !DIExpression()), !dbg !5049
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5050, metadata !DIExpression()), !dbg !5051
  %12 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5052
  %call20 = call %struct.basic_block_def* @gsi_bb(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %12), !dbg !5052
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call20, i32 0, i32 1, !dbg !5052
  %call21 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5052
  %13 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5052
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !5052
  %15 = extractvalue { i32, %struct.VEC_edge_gc** } %call21, 0, !dbg !5052
  store i32 %15, i32* %14, align 8, !dbg !5052
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !5052
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call21, 1, !dbg !5052
  store %struct.VEC_edge_gc** %17, %struct.VEC_edge_gc*** %16, align 8, !dbg !5052
  %18 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5052
  %19 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5052
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false), !dbg !5052
  br label %for.cond, !dbg !5052

for.cond:                                         ; preds = %for.inc, %if.then19
  %20 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5054
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 0, !dbg !5054
  %22 = load i32, i32* %21, align 8, !dbg !5054
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 1, !dbg !5054
  %24 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %23, align 8, !dbg !5054
  %call22 = call zeroext i8 @ei_cond(i32 %22, %struct.VEC_edge_gc** %24, %struct.edge_def** %e), !dbg !5054
  %tobool23 = icmp ne i8 %call22, 0, !dbg !5052
  br i1 %tobool23, label %for.body, label %for.end, !dbg !5052

for.body:                                         ; preds = %for.cond
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5056
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 7, !dbg !5058
  %26 = load i32, i32* %flags, align 8, !dbg !5058
  %and = and i32 %26, 1, !dbg !5059
  %tobool24 = icmp ne i32 %and, 0, !dbg !5059
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !5060

if.then25:                                        ; preds = %for.body
  br label %found_fallthru, !dbg !5061

if.end26:                                         ; preds = %for.body
  br label %for.inc, !dbg !5062

for.inc:                                          ; preds = %if.end26
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5054
  br label %for.cond, !dbg !5054, !llvm.loop !5063

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 796, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5065
  br label %found_fallthru, !dbg !5065

found_fallthru:                                   ; preds = %for.end, %if.then25
  call void @llvm.dbg.label(metadata !5066), !dbg !5067
  %27 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !5068
  %28 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5068
  %call27 = call %union.tree_node* @build1_stat(i32 43, %union.tree_node* %27, %union.tree_node* %28), !dbg !5068
  store %union.tree_node* %call27, %union.tree_node** %r, align 8, !dbg !5069
  %29 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !5070
  %30 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5070
  %call28 = call %union.tree_node* @build1_stat(i32 44, %union.tree_node* %29, %union.tree_node* %30), !dbg !5070
  store %union.tree_node* %call28, %union.tree_node** %i, align 8, !dbg !5071
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5072
  %32 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5073
  %33 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !5074
  %34 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !5075
  call void @update_complex_components_on_edge(%struct.edge_def* %31, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !5076
  br label %if.end54, !dbg !5077

if.else29:                                        ; preds = %if.then16
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5078
  %call30 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %35), !dbg !5080
  %conv = zext i8 %call30 to i32, !dbg !5080
  %tobool31 = icmp ne i32 %conv, 0, !dbg !5080
  br i1 %tobool31, label %if.then39, label %lor.lhs.false, !dbg !5081

lor.lhs.false:                                    ; preds = %if.else29
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5082
  %call32 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %36), !dbg !5083
  %conv33 = zext i8 %call32 to i32, !dbg !5083
  %tobool34 = icmp ne i32 %conv33, 0, !dbg !5083
  br i1 %tobool34, label %if.then39, label %lor.lhs.false35, !dbg !5084

lor.lhs.false35:                                  ; preds = %lor.lhs.false
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5085
  %call36 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %37), !dbg !5086
  %cmp37 = icmp eq i32 %call36, 112, !dbg !5087
  br i1 %cmp37, label %if.then39, label %if.else42, !dbg !5088

if.then39:                                        ; preds = %lor.lhs.false35, %lor.lhs.false, %if.else29
  %38 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !5089
  %39 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5089
  %call40 = call %union.tree_node* @build1_stat(i32 43, %union.tree_node* %38, %union.tree_node* %39), !dbg !5089
  store %union.tree_node* %call40, %union.tree_node** %r, align 8, !dbg !5091
  %40 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !5092
  %41 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5092
  %call41 = call %union.tree_node* @build1_stat(i32 44, %union.tree_node* %40, %union.tree_node* %41), !dbg !5092
  store %union.tree_node* %call41, %union.tree_node** %i, align 8, !dbg !5093
  %42 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5094
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5095
  %44 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !5096
  %45 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !5097
  call void @update_complex_components(%struct.gimple_stmt_iterator* %42, %union.gimple_statement_d* %43, %union.tree_node* %44, %union.tree_node* %45), !dbg !5098
  br label %if.end53, !dbg !5099

if.else42:                                        ; preds = %lor.lhs.false35
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5100
  %call43 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %46), !dbg !5103
  %cmp44 = icmp ne i32 %call43, 123, !dbg !5104
  br i1 %cmp44, label %if.then46, label %if.else49, !dbg !5105

if.then46:                                        ; preds = %if.else42
  %47 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5106
  %48 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5108
  %call47 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %47, %union.tree_node* %48, i8 zeroext 0, i8 zeroext 1), !dbg !5109
  store %union.tree_node* %call47, %union.tree_node** %r, align 8, !dbg !5110
  %49 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5111
  %50 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5112
  %call48 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %49, %union.tree_node* %50, i8 zeroext 1, i8 zeroext 1), !dbg !5113
  store %union.tree_node* %call48, %union.tree_node** %i, align 8, !dbg !5114
  br label %if.end52, !dbg !5115

if.else49:                                        ; preds = %if.else42
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5116
  %call50 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %51), !dbg !5118
  store %union.tree_node* %call50, %union.tree_node** %r, align 8, !dbg !5119
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5120
  %call51 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %52), !dbg !5121
  store %union.tree_node* %call51, %union.tree_node** %i, align 8, !dbg !5122
  br label %if.end52

if.end52:                                         ; preds = %if.else49, %if.then46
  %53 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5123
  %54 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !5124
  %55 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !5125
  call void @update_complex_assignment(%struct.gimple_stmt_iterator* %53, %union.tree_node* %54, %union.tree_node* %55), !dbg !5126
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then39
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %found_fallthru
  br label %if.end91, !dbg !5127

if.else55:                                        ; preds = %if.end14
  %56 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5128
  %tobool56 = icmp ne %union.tree_node* %56, null, !dbg !5128
  br i1 %tobool56, label %land.lhs.true, label %if.end90, !dbg !5130

land.lhs.true:                                    ; preds = %if.else55
  %57 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5131
  %base57 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !5131
  %58 = bitcast %struct.tree_base* %base57 to i64*, !dbg !5131
  %bf.load58 = load i64, i64* %58, align 8, !dbg !5131
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !5131
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !5131
  %cmp61 = icmp eq i32 %bf.cast60, 141, !dbg !5132
  br i1 %cmp61, label %land.lhs.true63, label %if.end90, !dbg !5133

land.lhs.true63:                                  ; preds = %land.lhs.true
  %59 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5134
  %base64 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !5134
  %60 = bitcast %struct.tree_base* %base64 to i64*, !dbg !5134
  %bf.load65 = load i64, i64* %60, align 8, !dbg !5134
  %bf.lshr = lshr i64 %bf.load65, 16, !dbg !5134
  %bf.clear66 = and i64 %bf.lshr, 1, !dbg !5134
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !5134
  %tobool68 = icmp ne i32 %bf.cast67, 0, !dbg !5134
  br i1 %tobool68, label %if.end90, label %if.then69, !dbg !5135

if.then69:                                        ; preds = %land.lhs.true63
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !5136, metadata !DIExpression()), !dbg !5138
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t, metadata !5139, metadata !DIExpression()), !dbg !5140
  %61 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5141
  %62 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5142
  %call70 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %61, %union.tree_node* %62, i8 zeroext 0, i8 zeroext 0), !dbg !5143
  store %union.tree_node* %call70, %union.tree_node** %r, align 8, !dbg !5144
  %63 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5145
  %64 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5146
  %call71 = call %union.tree_node* @extract_component(%struct.gimple_stmt_iterator* %63, %union.tree_node* %64, i8 zeroext 1, i8 zeroext 0), !dbg !5147
  store %union.tree_node* %call71, %union.tree_node** %i, align 8, !dbg !5148
  %65 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !5149
  %66 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5149
  %call72 = call %union.tree_node* @unshare_expr(%union.tree_node* %66), !dbg !5149
  %call73 = call %union.tree_node* @build1_stat(i32 43, %union.tree_node* %65, %union.tree_node* %call72), !dbg !5149
  store %union.tree_node* %call73, %union.tree_node** %x, align 8, !dbg !5150
  %67 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5151
  %68 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !5151
  %call74 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %67, %union.tree_node* %68), !dbg !5151
  store %union.gimple_statement_d* %call74, %union.gimple_statement_d** %t, align 8, !dbg !5152
  %69 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5153
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5154
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %69, %union.gimple_statement_d* %70, i32 1), !dbg !5155
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5156
  %72 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5158
  %call75 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %72), !dbg !5159
  %cmp76 = icmp eq %union.gimple_statement_d* %71, %call75, !dbg !5160
  br i1 %cmp76, label %if.then78, label %if.else81, !dbg !5161

if.then78:                                        ; preds = %if.then69
  %73 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !5162
  %74 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5162
  %call79 = call %union.tree_node* @unshare_expr(%union.tree_node* %74), !dbg !5162
  %call80 = call %union.tree_node* @build1_stat(i32 44, %union.tree_node* %73, %union.tree_node* %call79), !dbg !5162
  store %union.tree_node* %call80, %union.tree_node** %x, align 8, !dbg !5164
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5165
  %76 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5166
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %75, %union.tree_node* %76), !dbg !5167
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5168
  %78 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !5169
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %77, %union.tree_node* %78), !dbg !5170
  br label %if.end89, !dbg !5171

if.else81:                                        ; preds = %if.then69
  %79 = load %union.tree_node*, %union.tree_node** %inner_type, align 8, !dbg !5172
  %80 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5172
  %call82 = call %union.tree_node* @unshare_expr(%union.tree_node* %80), !dbg !5172
  %call83 = call %union.tree_node* @build1_stat(i32 44, %union.tree_node* %79, %union.tree_node* %call82), !dbg !5172
  store %union.tree_node* %call83, %union.tree_node** %x, align 8, !dbg !5174
  %81 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5175
  %82 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !5175
  %call84 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %81, %union.tree_node* %82), !dbg !5175
  store %union.gimple_statement_d* %call84, %union.gimple_statement_d** %t, align 8, !dbg !5176
  %83 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5177
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5178
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %83, %union.gimple_statement_d* %84, i32 1), !dbg !5179
  %85 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5180
  %call85 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %85), !dbg !5181
  store %union.gimple_statement_d* %call85, %union.gimple_statement_d** %stmt, align 8, !dbg !5182
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5183
  %call86 = call i32 @gimple_code(%union.gimple_statement_d* %86), !dbg !5183
  %cmp87 = icmp eq i32 %call86, 9, !dbg !5183
  br i1 %cmp87, label %cond.false, label %cond.true, !dbg !5183

cond.true:                                        ; preds = %if.else81
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 851, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5183
  br label %cond.end, !dbg !5183

cond.false:                                       ; preds = %if.else81
  br label %cond.end, !dbg !5183

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5183
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5184
  %88 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5185
  call void @gimple_return_set_retval(%union.gimple_statement_d* %87, %union.tree_node* %88), !dbg !5186
  br label %if.end89

if.end89:                                         ; preds = %cond.end, %if.then78
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5187
  call void @update_stmt(%union.gimple_statement_d* %89), !dbg !5188
  br label %if.end90, !dbg !5189

if.end90:                                         ; preds = %if.end89, %land.lhs.true63, %land.lhs.true, %if.else55
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end54
  ret void, !dbg !5190
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !5191 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5192, metadata !DIExpression()), !dbg !5193
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5194
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5195
  %cmp = icmp eq i32 %call, 6, !dbg !5196
  %conv = zext i1 %cmp to i32, !dbg !5196
  %conv1 = trunc i32 %conv to i8, !dbg !5195
  ret i8 %conv1, !dbg !5197
}

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !5198 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5201, metadata !DIExpression()), !dbg !5202
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5203
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5205
  %tobool = icmp ne i8 %call, 0, !dbg !5205
  br i1 %tobool, label %if.then, label %if.end, !dbg !5206

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5207
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !5209
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5210
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !5211
  br label %if.end, !dbg !5212

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5213
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !5214 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !5219, metadata !DIExpression()), !dbg !5220
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5221
  %tobool = icmp ne %struct.function* %0, null, !dbg !5221
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !5222

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5223
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !5224
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5224
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !5223
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !5225

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5226
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !5227
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !5227
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !5228
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !5228
  %bf.clear = and i8 %bf.load, 1, !dbg !5228
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5228
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !5225
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !5229
  %land.ext = zext i1 %5 to i32, !dbg !5225
  %conv = trunc i32 %land.ext to i8, !dbg !5221
  ret i8 %conv, !dbg !5230
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_addition(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %inner_type, %union.tree_node* %ar, %union.tree_node* %ai, %union.tree_node* %br, %union.tree_node* %bi, i32 %code, i32 %al, i32 %bl) #0 !dbg !5231 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %inner_type.addr = alloca %union.tree_node*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %br.addr = alloca %union.tree_node*, align 8
  %bi.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %al.addr = alloca i32, align 4
  %bl.addr = alloca i32, align 4
  %rr = alloca %union.tree_node*, align 8
  %ri = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5234, metadata !DIExpression()), !dbg !5235
  store %union.tree_node* %inner_type, %union.tree_node** %inner_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type.addr, metadata !5236, metadata !DIExpression()), !dbg !5237
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !5238, metadata !DIExpression()), !dbg !5239
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !5240, metadata !DIExpression()), !dbg !5241
  store %union.tree_node* %br, %union.tree_node** %br.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %br.addr, metadata !5242, metadata !DIExpression()), !dbg !5243
  store %union.tree_node* %bi, %union.tree_node** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bi.addr, metadata !5244, metadata !DIExpression()), !dbg !5245
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5246, metadata !DIExpression()), !dbg !5247
  store i32 %al, i32* %al.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %al.addr, metadata !5248, metadata !DIExpression()), !dbg !5249
  store i32 %bl, i32* %bl.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bl.addr, metadata !5250, metadata !DIExpression()), !dbg !5251
  call void @llvm.dbg.declare(metadata %union.tree_node** %rr, metadata !5252, metadata !DIExpression()), !dbg !5253
  call void @llvm.dbg.declare(metadata %union.tree_node** %ri, metadata !5254, metadata !DIExpression()), !dbg !5255
  %0 = load i32, i32* %al.addr, align 4, !dbg !5256
  %shl = shl i32 %0, 2, !dbg !5256
  %1 = load i32, i32* %bl.addr, align 4, !dbg !5256
  %or = or i32 %shl, %1, !dbg !5256
  switch i32 %or, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb1
    i32 9, label %sw.bb3
    i32 10, label %sw.bb9
    i32 13, label %sw.bb11
    i32 14, label %sw.bb13
    i32 7, label %sw.bb15
    i32 11, label %sw.bb20
    i32 15, label %sw.bb25
  ], !dbg !5257

sw.bb:                                            ; preds = %entry
  %2 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5258
  %3 = load i32, i32* %code.addr, align 4, !dbg !5260
  %4 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5261
  %5 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5262
  %6 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5263
  %call = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %2, i32 %3, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %6), !dbg !5264
  store %union.tree_node* %call, %union.tree_node** %rr, align 8, !dbg !5265
  %7 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5266
  store %union.tree_node* %7, %union.tree_node** %ri, align 8, !dbg !5267
  br label %sw.epilog, !dbg !5268

sw.bb1:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5269
  store %union.tree_node* %8, %union.tree_node** %rr, align 8, !dbg !5270
  %9 = load i32, i32* %code.addr, align 4, !dbg !5271
  %cmp = icmp eq i32 %9, 64, !dbg !5273
  br i1 %cmp, label %if.then, label %if.else, !dbg !5274

if.then:                                          ; preds = %sw.bb1
  %10 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5275
  %11 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5276
  %12 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5277
  %13 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5278
  %call2 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %10, i32 64, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !5279
  store %union.tree_node* %call2, %union.tree_node** %ri, align 8, !dbg !5280
  br label %if.end, !dbg !5281

if.else:                                          ; preds = %sw.bb1
  %14 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5282
  store %union.tree_node* %14, %union.tree_node** %ri, align 8, !dbg !5283
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !5284

sw.bb3:                                           ; preds = %entry
  %15 = load i32, i32* %code.addr, align 4, !dbg !5285
  %cmp4 = icmp eq i32 %15, 64, !dbg !5287
  br i1 %cmp4, label %if.then5, label %if.else7, !dbg !5288

if.then5:                                         ; preds = %sw.bb3
  %16 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5289
  %17 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5290
  %18 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5291
  %19 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5292
  %call6 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %16, i32 64, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !5293
  store %union.tree_node* %call6, %union.tree_node** %rr, align 8, !dbg !5294
  br label %if.end8, !dbg !5295

if.else7:                                         ; preds = %sw.bb3
  %20 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5296
  store %union.tree_node* %20, %union.tree_node** %rr, align 8, !dbg !5297
  br label %if.end8

if.end8:                                          ; preds = %if.else7, %if.then5
  %21 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5298
  store %union.tree_node* %21, %union.tree_node** %ri, align 8, !dbg !5299
  br label %sw.epilog, !dbg !5300

sw.bb9:                                           ; preds = %entry
  %22 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5301
  store %union.tree_node* %22, %union.tree_node** %rr, align 8, !dbg !5302
  %23 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5303
  %24 = load i32, i32* %code.addr, align 4, !dbg !5304
  %25 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5305
  %26 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5306
  %27 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5307
  %call10 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %23, i32 %24, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !5308
  store %union.tree_node* %call10, %union.tree_node** %ri, align 8, !dbg !5309
  br label %sw.epilog, !dbg !5310

sw.bb11:                                          ; preds = %entry
  %28 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5311
  %29 = load i32, i32* %code.addr, align 4, !dbg !5312
  %30 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5313
  %31 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5314
  %32 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5315
  %call12 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %28, i32 %29, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !5316
  store %union.tree_node* %call12, %union.tree_node** %rr, align 8, !dbg !5317
  %33 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5318
  store %union.tree_node* %33, %union.tree_node** %ri, align 8, !dbg !5319
  br label %sw.epilog, !dbg !5320

sw.bb13:                                          ; preds = %entry
  %34 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5321
  store %union.tree_node* %34, %union.tree_node** %rr, align 8, !dbg !5322
  %35 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5323
  %36 = load i32, i32* %code.addr, align 4, !dbg !5324
  %37 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5325
  %38 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5326
  %39 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5327
  %call14 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %35, i32 %36, %union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %39), !dbg !5328
  store %union.tree_node* %call14, %union.tree_node** %ri, align 8, !dbg !5329
  br label %sw.epilog, !dbg !5330

sw.bb15:                                          ; preds = %entry
  %40 = load i32, i32* %code.addr, align 4, !dbg !5331
  %cmp16 = icmp eq i32 %40, 64, !dbg !5333
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !5334

if.then17:                                        ; preds = %sw.bb15
  br label %general, !dbg !5335

if.end18:                                         ; preds = %sw.bb15
  %41 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5336
  %42 = load i32, i32* %code.addr, align 4, !dbg !5337
  %43 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5338
  %44 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5339
  %45 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5340
  %call19 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %41, i32 %42, %union.tree_node* %43, %union.tree_node* %44, %union.tree_node* %45), !dbg !5341
  store %union.tree_node* %call19, %union.tree_node** %rr, align 8, !dbg !5342
  %46 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5343
  store %union.tree_node* %46, %union.tree_node** %ri, align 8, !dbg !5344
  br label %sw.epilog, !dbg !5345

sw.bb20:                                          ; preds = %entry
  %47 = load i32, i32* %code.addr, align 4, !dbg !5346
  %cmp21 = icmp eq i32 %47, 64, !dbg !5348
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !5349

if.then22:                                        ; preds = %sw.bb20
  br label %general, !dbg !5350

if.end23:                                         ; preds = %sw.bb20
  %48 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5351
  store %union.tree_node* %48, %union.tree_node** %rr, align 8, !dbg !5352
  %49 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5353
  %50 = load i32, i32* %code.addr, align 4, !dbg !5354
  %51 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5355
  %52 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5356
  %53 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5357
  %call24 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %49, i32 %50, %union.tree_node* %51, %union.tree_node* %52, %union.tree_node* %53), !dbg !5358
  store %union.tree_node* %call24, %union.tree_node** %ri, align 8, !dbg !5359
  br label %sw.epilog, !dbg !5360

sw.bb25:                                          ; preds = %entry
  br label %general, !dbg !5360

general:                                          ; preds = %sw.bb25, %if.then22, %if.then17
  call void @llvm.dbg.label(metadata !5361), !dbg !5362
  %54 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5363
  %55 = load i32, i32* %code.addr, align 4, !dbg !5364
  %56 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5365
  %57 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5366
  %58 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5367
  %call26 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %54, i32 %55, %union.tree_node* %56, %union.tree_node* %57, %union.tree_node* %58), !dbg !5368
  store %union.tree_node* %call26, %union.tree_node** %rr, align 8, !dbg !5369
  %59 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5370
  %60 = load i32, i32* %code.addr, align 4, !dbg !5371
  %61 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5372
  %62 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5373
  %63 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5374
  %call27 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %59, i32 %60, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %63), !dbg !5375
  store %union.tree_node* %call27, %union.tree_node** %ri, align 8, !dbg !5376
  br label %sw.epilog, !dbg !5377

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 931, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5378
  br label %sw.epilog, !dbg !5379

sw.epilog:                                        ; preds = %sw.default, %general, %if.end23, %if.end18, %sw.bb13, %sw.bb11, %sw.bb9, %if.end8, %if.end, %sw.bb
  %64 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5380
  %65 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !5381
  %66 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !5382
  call void @update_complex_assignment(%struct.gimple_stmt_iterator* %64, %union.tree_node* %65, %union.tree_node* %66), !dbg !5383
  ret void, !dbg !5384
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_multiplication(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %inner_type, %union.tree_node* %ar, %union.tree_node* %ai, %union.tree_node* %br, %union.tree_node* %bi, i32 %al, i32 %bl) #0 !dbg !5385 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %inner_type.addr = alloca %union.tree_node*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %br.addr = alloca %union.tree_node*, align 8
  %bi.addr = alloca %union.tree_node*, align 8
  %al.addr = alloca i32, align 4
  %bl.addr = alloca i32, align 4
  %rr = alloca %union.tree_node*, align 8
  %ri = alloca %union.tree_node*, align 8
  %tl = alloca i32, align 4
  %t1 = alloca %union.tree_node*, align 8
  %t2 = alloca %union.tree_node*, align 8
  %t3 = alloca %union.tree_node*, align 8
  %t4 = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5388, metadata !DIExpression()), !dbg !5389
  store %union.tree_node* %inner_type, %union.tree_node** %inner_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type.addr, metadata !5390, metadata !DIExpression()), !dbg !5391
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !5392, metadata !DIExpression()), !dbg !5393
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !5394, metadata !DIExpression()), !dbg !5395
  store %union.tree_node* %br, %union.tree_node** %br.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %br.addr, metadata !5396, metadata !DIExpression()), !dbg !5397
  store %union.tree_node* %bi, %union.tree_node** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bi.addr, metadata !5398, metadata !DIExpression()), !dbg !5399
  store i32 %al, i32* %al.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %al.addr, metadata !5400, metadata !DIExpression()), !dbg !5401
  store i32 %bl, i32* %bl.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bl.addr, metadata !5402, metadata !DIExpression()), !dbg !5403
  call void @llvm.dbg.declare(metadata %union.tree_node** %rr, metadata !5404, metadata !DIExpression()), !dbg !5405
  call void @llvm.dbg.declare(metadata %union.tree_node** %ri, metadata !5406, metadata !DIExpression()), !dbg !5407
  %0 = load i32, i32* %al.addr, align 4, !dbg !5408
  %1 = load i32, i32* %bl.addr, align 4, !dbg !5410
  %cmp = icmp slt i32 %0, %1, !dbg !5411
  br i1 %cmp, label %if.then, label %if.end, !dbg !5412

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %tl, metadata !5413, metadata !DIExpression()), !dbg !5415
  %2 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5416
  store %union.tree_node* %2, %union.tree_node** %rr, align 8, !dbg !5417
  %3 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5418
  store %union.tree_node* %3, %union.tree_node** %ar.addr, align 8, !dbg !5419
  %4 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !5420
  store %union.tree_node* %4, %union.tree_node** %br.addr, align 8, !dbg !5421
  %5 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5422
  store %union.tree_node* %5, %union.tree_node** %ri, align 8, !dbg !5423
  %6 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5424
  store %union.tree_node* %6, %union.tree_node** %ai.addr, align 8, !dbg !5425
  %7 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !5426
  store %union.tree_node* %7, %union.tree_node** %bi.addr, align 8, !dbg !5427
  %8 = load i32, i32* %al.addr, align 4, !dbg !5428
  store i32 %8, i32* %tl, align 4, !dbg !5429
  %9 = load i32, i32* %bl.addr, align 4, !dbg !5430
  store i32 %9, i32* %al.addr, align 4, !dbg !5431
  %10 = load i32, i32* %tl, align 4, !dbg !5432
  store i32 %10, i32* %bl.addr, align 4, !dbg !5433
  br label %if.end, !dbg !5434

if.end:                                           ; preds = %if.then, %entry
  %11 = load i32, i32* %al.addr, align 4, !dbg !5435
  %shl = shl i32 %11, 2, !dbg !5435
  %12 = load i32, i32* %bl.addr, align 4, !dbg !5435
  %or = or i32 %shl, %12, !dbg !5435
  switch i32 %or, label %sw.default [
    i32 5, label %sw.bb
    i32 9, label %sw.bb1
    i32 10, label %sw.bb7
    i32 13, label %sw.bb10
    i32 14, label %sw.bb13
    i32 15, label %sw.bb17
  ], !dbg !5436

sw.bb:                                            ; preds = %if.end
  %13 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5437
  %14 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5439
  %15 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5440
  %16 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5441
  %call = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %13, i32 65, %union.tree_node* %14, %union.tree_node* %15, %union.tree_node* %16), !dbg !5442
  store %union.tree_node* %call, %union.tree_node** %rr, align 8, !dbg !5443
  %17 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5444
  store %union.tree_node* %17, %union.tree_node** %ri, align 8, !dbg !5445
  br label %sw.epilog, !dbg !5446

sw.bb1:                                           ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5447
  store %union.tree_node* %18, %union.tree_node** %rr, align 8, !dbg !5448
  %19 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5449
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5449
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !5449
  %bf.load = load i64, i64* %20, align 8, !dbg !5449
  %bf.clear = and i64 %bf.load, 65535, !dbg !5449
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5449
  %cmp2 = icmp eq i32 %bf.cast, 24, !dbg !5451
  br i1 %cmp2, label %land.lhs.true, label %if.else, !dbg !5452

land.lhs.true:                                    ; preds = %sw.bb1
  %21 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5453
  %real_cst = bitcast %union.tree_node* %21 to %struct.tree_real_cst*, !dbg !5453
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !5453
  %22 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !5453
  %call3 = call zeroext i8 @real_identical(%struct.real_value* %22, %struct.real_value* @dconst1), !dbg !5453
  %conv = zext i8 %call3 to i32, !dbg !5453
  %tobool = icmp ne i32 %conv, 0, !dbg !5453
  br i1 %tobool, label %if.then4, label %if.else, !dbg !5454

if.then4:                                         ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5455
  store %union.tree_node* %23, %union.tree_node** %ri, align 8, !dbg !5456
  br label %if.end6, !dbg !5457

if.else:                                          ; preds = %land.lhs.true, %sw.bb1
  %24 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5458
  %25 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5459
  %26 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5460
  %27 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5461
  %call5 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %24, i32 65, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !5462
  store %union.tree_node* %call5, %union.tree_node** %ri, align 8, !dbg !5463
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then4
  br label %sw.epilog, !dbg !5464

sw.bb7:                                           ; preds = %if.end
  %28 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5465
  %29 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5466
  %30 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5467
  %31 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5468
  %call8 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %28, i32 65, %union.tree_node* %29, %union.tree_node* %30, %union.tree_node* %31), !dbg !5469
  store %union.tree_node* %call8, %union.tree_node** %rr, align 8, !dbg !5470
  %32 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5471
  %33 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5472
  %34 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !5473
  %call9 = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %32, i32 79, %union.tree_node* %33, %union.tree_node* %34), !dbg !5474
  store %union.tree_node* %call9, %union.tree_node** %rr, align 8, !dbg !5475
  %35 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5476
  store %union.tree_node* %35, %union.tree_node** %ri, align 8, !dbg !5477
  br label %sw.epilog, !dbg !5478

sw.bb10:                                          ; preds = %if.end
  %36 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5479
  %37 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5480
  %38 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5481
  %39 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5482
  %call11 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %36, i32 65, %union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %39), !dbg !5483
  store %union.tree_node* %call11, %union.tree_node** %rr, align 8, !dbg !5484
  %40 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5485
  %41 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5486
  %42 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5487
  %43 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5488
  %call12 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %40, i32 65, %union.tree_node* %41, %union.tree_node* %42, %union.tree_node* %43), !dbg !5489
  store %union.tree_node* %call12, %union.tree_node** %ri, align 8, !dbg !5490
  br label %sw.epilog, !dbg !5491

sw.bb13:                                          ; preds = %if.end
  %44 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5492
  %45 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5493
  %46 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5494
  %47 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5495
  %call14 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %44, i32 65, %union.tree_node* %45, %union.tree_node* %46, %union.tree_node* %47), !dbg !5496
  store %union.tree_node* %call14, %union.tree_node** %rr, align 8, !dbg !5497
  %48 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5498
  %49 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5499
  %50 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !5500
  %call15 = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %48, i32 79, %union.tree_node* %49, %union.tree_node* %50), !dbg !5501
  store %union.tree_node* %call15, %union.tree_node** %rr, align 8, !dbg !5502
  %51 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5503
  %52 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5504
  %53 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5505
  %54 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5506
  %call16 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %51, i32 65, %union.tree_node* %52, %union.tree_node* %53, %union.tree_node* %54), !dbg !5507
  store %union.tree_node* %call16, %union.tree_node** %ri, align 8, !dbg !5508
  br label %sw.epilog, !dbg !5509

sw.bb17:                                          ; preds = %if.end
  %55 = load i32, i32* @flag_complex_method, align 4, !dbg !5510
  %cmp18 = icmp eq i32 %55, 2, !dbg !5512
  br i1 %cmp18, label %land.lhs.true20, label %if.else28, !dbg !5513

land.lhs.true20:                                  ; preds = %sw.bb17
  %56 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5514
  %base21 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !5514
  %57 = bitcast %struct.tree_base* %base21 to i64*, !dbg !5514
  %bf.load22 = load i64, i64* %57, align 8, !dbg !5514
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !5514
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !5514
  %cmp25 = icmp eq i32 %bf.cast24, 9, !dbg !5514
  br i1 %cmp25, label %if.then27, label %if.else28, !dbg !5515

if.then27:                                        ; preds = %land.lhs.true20
  %58 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5516
  %59 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5518
  %60 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5519
  %61 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5520
  %62 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5521
  call void @expand_complex_libcall(%struct.gimple_stmt_iterator* %58, %union.tree_node* %59, %union.tree_node* %60, %union.tree_node* %61, %union.tree_node* %62, i32 65), !dbg !5522
  br label %return, !dbg !5523

if.else28:                                        ; preds = %land.lhs.true20, %sw.bb17
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1, metadata !5524, metadata !DIExpression()), !dbg !5526
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2, metadata !5527, metadata !DIExpression()), !dbg !5528
  call void @llvm.dbg.declare(metadata %union.tree_node** %t3, metadata !5529, metadata !DIExpression()), !dbg !5530
  call void @llvm.dbg.declare(metadata %union.tree_node** %t4, metadata !5531, metadata !DIExpression()), !dbg !5532
  %63 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5533
  %64 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5534
  %65 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5535
  %66 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5536
  %call29 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %63, i32 65, %union.tree_node* %64, %union.tree_node* %65, %union.tree_node* %66), !dbg !5537
  store %union.tree_node* %call29, %union.tree_node** %t1, align 8, !dbg !5538
  %67 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5539
  %68 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5540
  %69 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5541
  %70 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5542
  %call30 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %67, i32 65, %union.tree_node* %68, %union.tree_node* %69, %union.tree_node* %70), !dbg !5543
  store %union.tree_node* %call30, %union.tree_node** %t2, align 8, !dbg !5544
  %71 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5545
  %72 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5546
  %73 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5547
  %74 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5548
  %call31 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %71, i32 65, %union.tree_node* %72, %union.tree_node* %73, %union.tree_node* %74), !dbg !5549
  store %union.tree_node* %call31, %union.tree_node** %t3, align 8, !dbg !5550
  %75 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5551
  %76 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5553
  %cmp32 = icmp eq %union.tree_node* %75, %76, !dbg !5554
  br i1 %cmp32, label %land.lhs.true34, label %if.else38, !dbg !5555

land.lhs.true34:                                  ; preds = %if.else28
  %77 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5556
  %78 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5557
  %cmp35 = icmp eq %union.tree_node* %77, %78, !dbg !5558
  br i1 %cmp35, label %if.then37, label %if.else38, !dbg !5559

if.then37:                                        ; preds = %land.lhs.true34
  %79 = load %union.tree_node*, %union.tree_node** %t3, align 8, !dbg !5560
  store %union.tree_node* %79, %union.tree_node** %t4, align 8, !dbg !5561
  br label %if.end40, !dbg !5562

if.else38:                                        ; preds = %land.lhs.true34, %if.else28
  %80 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5563
  %81 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5564
  %82 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5565
  %83 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5566
  %call39 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %80, i32 65, %union.tree_node* %81, %union.tree_node* %82, %union.tree_node* %83), !dbg !5567
  store %union.tree_node* %call39, %union.tree_node** %t4, align 8, !dbg !5568
  br label %if.end40

if.end40:                                         ; preds = %if.else38, %if.then37
  %84 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5569
  %85 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5570
  %86 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !5571
  %87 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !5572
  %call41 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %84, i32 64, %union.tree_node* %85, %union.tree_node* %86, %union.tree_node* %87), !dbg !5573
  store %union.tree_node* %call41, %union.tree_node** %rr, align 8, !dbg !5574
  %88 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5575
  %89 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5576
  %90 = load %union.tree_node*, %union.tree_node** %t3, align 8, !dbg !5577
  %91 = load %union.tree_node*, %union.tree_node** %t4, align 8, !dbg !5578
  %call42 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %88, i32 63, %union.tree_node* %89, %union.tree_node* %90, %union.tree_node* %91), !dbg !5579
  store %union.tree_node* %call42, %union.tree_node** %ri, align 8, !dbg !5580
  br label %if.end43

if.end43:                                         ; preds = %if.end40
  br label %sw.epilog, !dbg !5581

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1063, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5582
  br label %sw.epilog, !dbg !5583

sw.epilog:                                        ; preds = %sw.default, %if.end43, %sw.bb13, %sw.bb10, %sw.bb7, %if.end6, %sw.bb
  %92 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5584
  %93 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !5585
  %94 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !5586
  call void @update_complex_assignment(%struct.gimple_stmt_iterator* %92, %union.tree_node* %93, %union.tree_node* %94), !dbg !5587
  br label %return, !dbg !5588

return:                                           ; preds = %sw.epilog, %if.then27
  ret void, !dbg !5588
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_division(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %inner_type, %union.tree_node* %ar, %union.tree_node* %ai, %union.tree_node* %br, %union.tree_node* %bi, i32 %code, i32 %al, i32 %bl) #0 !dbg !5589 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %inner_type.addr = alloca %union.tree_node*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %br.addr = alloca %union.tree_node*, align 8
  %bi.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %al.addr = alloca i32, align 4
  %bl.addr = alloca i32, align 4
  %rr = alloca %union.tree_node*, align 8
  %ri = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5590, metadata !DIExpression()), !dbg !5591
  store %union.tree_node* %inner_type, %union.tree_node** %inner_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type.addr, metadata !5592, metadata !DIExpression()), !dbg !5593
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !5594, metadata !DIExpression()), !dbg !5595
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !5596, metadata !DIExpression()), !dbg !5597
  store %union.tree_node* %br, %union.tree_node** %br.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %br.addr, metadata !5598, metadata !DIExpression()), !dbg !5599
  store %union.tree_node* %bi, %union.tree_node** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bi.addr, metadata !5600, metadata !DIExpression()), !dbg !5601
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5602, metadata !DIExpression()), !dbg !5603
  store i32 %al, i32* %al.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %al.addr, metadata !5604, metadata !DIExpression()), !dbg !5605
  store i32 %bl, i32* %bl.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bl.addr, metadata !5606, metadata !DIExpression()), !dbg !5607
  call void @llvm.dbg.declare(metadata %union.tree_node** %rr, metadata !5608, metadata !DIExpression()), !dbg !5609
  call void @llvm.dbg.declare(metadata %union.tree_node** %ri, metadata !5610, metadata !DIExpression()), !dbg !5611
  %0 = load i32, i32* %al.addr, align 4, !dbg !5612
  %shl = shl i32 %0, 2, !dbg !5612
  %1 = load i32, i32* %bl.addr, align 4, !dbg !5612
  %or = or i32 %shl, %1, !dbg !5612
  switch i32 %or, label %sw.default19 [
    i32 5, label %sw.bb
    i32 6, label %sw.bb1
    i32 9, label %sw.bb4
    i32 10, label %sw.bb6
    i32 13, label %sw.bb8
    i32 14, label %sw.bb11
    i32 7, label %sw.bb15
    i32 11, label %sw.bb15
    i32 15, label %sw.bb15
  ], !dbg !5613

sw.bb:                                            ; preds = %entry
  %2 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5614
  %3 = load i32, i32* %code.addr, align 4, !dbg !5616
  %4 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5617
  %5 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5618
  %6 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5619
  %call = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %2, i32 %3, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %6), !dbg !5620
  store %union.tree_node* %call, %union.tree_node** %rr, align 8, !dbg !5621
  %7 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5622
  store %union.tree_node* %7, %union.tree_node** %ri, align 8, !dbg !5623
  br label %sw.epilog20, !dbg !5624

sw.bb1:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5625
  store %union.tree_node* %8, %union.tree_node** %rr, align 8, !dbg !5626
  %9 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5627
  %10 = load i32, i32* %code.addr, align 4, !dbg !5628
  %11 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5629
  %12 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5630
  %13 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5631
  %call2 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %9, i32 %10, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !5632
  store %union.tree_node* %call2, %union.tree_node** %ri, align 8, !dbg !5633
  %14 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5634
  %15 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5635
  %16 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !5636
  %call3 = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %14, i32 79, %union.tree_node* %15, %union.tree_node* %16), !dbg !5637
  store %union.tree_node* %call3, %union.tree_node** %ri, align 8, !dbg !5638
  br label %sw.epilog20, !dbg !5639

sw.bb4:                                           ; preds = %entry
  %17 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5640
  store %union.tree_node* %17, %union.tree_node** %rr, align 8, !dbg !5641
  %18 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5642
  %19 = load i32, i32* %code.addr, align 4, !dbg !5643
  %20 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5644
  %21 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5645
  %22 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5646
  %call5 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %18, i32 %19, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* %22), !dbg !5647
  store %union.tree_node* %call5, %union.tree_node** %ri, align 8, !dbg !5648
  br label %sw.epilog20, !dbg !5649

sw.bb6:                                           ; preds = %entry
  %23 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5650
  %24 = load i32, i32* %code.addr, align 4, !dbg !5651
  %25 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5652
  %26 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5653
  %27 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5654
  %call7 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %23, i32 %24, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !5655
  store %union.tree_node* %call7, %union.tree_node** %rr, align 8, !dbg !5656
  %28 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5657
  store %union.tree_node* %28, %union.tree_node** %ri, align 8, !dbg !5658
  br label %sw.epilog20, !dbg !5659

sw.bb8:                                           ; preds = %entry
  %29 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5660
  %30 = load i32, i32* %code.addr, align 4, !dbg !5661
  %31 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5662
  %32 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5663
  %33 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5664
  %call9 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %29, i32 %30, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33), !dbg !5665
  store %union.tree_node* %call9, %union.tree_node** %rr, align 8, !dbg !5666
  %34 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5667
  %35 = load i32, i32* %code.addr, align 4, !dbg !5668
  %36 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5669
  %37 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5670
  %38 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5671
  %call10 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %34, i32 %35, %union.tree_node* %36, %union.tree_node* %37, %union.tree_node* %38), !dbg !5672
  store %union.tree_node* %call10, %union.tree_node** %ri, align 8, !dbg !5673
  br label %sw.epilog20, !dbg !5674

sw.bb11:                                          ; preds = %entry
  %39 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5675
  %40 = load i32, i32* %code.addr, align 4, !dbg !5676
  %41 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5677
  %42 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5678
  %43 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5679
  %call12 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %39, i32 %40, %union.tree_node* %41, %union.tree_node* %42, %union.tree_node* %43), !dbg !5680
  store %union.tree_node* %call12, %union.tree_node** %rr, align 8, !dbg !5681
  %44 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5682
  %45 = load i32, i32* %code.addr, align 4, !dbg !5683
  %46 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5684
  %47 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5685
  %48 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5686
  %call13 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %44, i32 %45, %union.tree_node* %46, %union.tree_node* %47, %union.tree_node* %48), !dbg !5687
  store %union.tree_node* %call13, %union.tree_node** %ri, align 8, !dbg !5688
  %49 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5689
  %50 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5690
  %51 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !5691
  %call14 = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %49, i32 79, %union.tree_node* %50, %union.tree_node* %51), !dbg !5692
  store %union.tree_node* %call14, %union.tree_node** %ri, align 8, !dbg !5693
  br label %sw.bb15, !dbg !5694

sw.bb15:                                          ; preds = %entry, %entry, %entry, %sw.bb11
  %52 = load i32, i32* @flag_complex_method, align 4, !dbg !5695
  switch i32 %52, label %sw.default [
    i32 0, label %sw.bb16
    i32 2, label %sw.bb17
    i32 1, label %sw.bb18
  ], !dbg !5696

sw.bb16:                                          ; preds = %sw.bb15
  %53 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5697
  %54 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5699
  %55 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5700
  %56 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5701
  %57 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5702
  %58 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5703
  %59 = load i32, i32* %code.addr, align 4, !dbg !5704
  call void @expand_complex_div_straight(%struct.gimple_stmt_iterator* %53, %union.tree_node* %54, %union.tree_node* %55, %union.tree_node* %56, %union.tree_node* %57, %union.tree_node* %58, i32 %59), !dbg !5705
  br label %sw.epilog, !dbg !5706

sw.bb17:                                          ; preds = %sw.bb15
  %60 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5707
  %base = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !5707
  %61 = bitcast %struct.tree_base* %base to i64*, !dbg !5707
  %bf.load = load i64, i64* %61, align 8, !dbg !5707
  %bf.clear = and i64 %bf.load, 65535, !dbg !5707
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5707
  %cmp = icmp eq i32 %bf.cast, 9, !dbg !5707
  br i1 %cmp, label %if.then, label %if.end, !dbg !5709

if.then:                                          ; preds = %sw.bb17
  %62 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5710
  %63 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5712
  %64 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5713
  %65 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5714
  %66 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5715
  %67 = load i32, i32* %code.addr, align 4, !dbg !5716
  call void @expand_complex_libcall(%struct.gimple_stmt_iterator* %62, %union.tree_node* %63, %union.tree_node* %64, %union.tree_node* %65, %union.tree_node* %66, i32 %67), !dbg !5717
  br label %sw.epilog, !dbg !5718

if.end:                                           ; preds = %sw.bb17
  br label %sw.bb18, !dbg !5707

sw.bb18:                                          ; preds = %sw.bb15, %if.end
  %68 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5719
  %69 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5720
  %70 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5721
  %71 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5722
  %72 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5723
  %73 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5724
  %74 = load i32, i32* %code.addr, align 4, !dbg !5725
  call void @expand_complex_div_wide(%struct.gimple_stmt_iterator* %68, %union.tree_node* %69, %union.tree_node* %70, %union.tree_node* %71, %union.tree_node* %72, %union.tree_node* %73, i32 %74), !dbg !5726
  br label %sw.epilog, !dbg !5727

sw.default:                                       ; preds = %sw.bb15
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1323, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5728
  br label %sw.epilog, !dbg !5729

sw.epilog:                                        ; preds = %sw.default, %sw.bb18, %if.then, %sw.bb16
  br label %return, !dbg !5730

sw.default19:                                     ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1328, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5731
  br label %sw.epilog20, !dbg !5732

sw.epilog20:                                      ; preds = %sw.default19, %sw.bb8, %sw.bb6, %sw.bb4, %sw.bb1, %sw.bb
  %75 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5733
  %76 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !5734
  %77 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !5735
  call void @update_complex_assignment(%struct.gimple_stmt_iterator* %75, %union.tree_node* %76, %union.tree_node* %77), !dbg !5736
  br label %return, !dbg !5737

return:                                           ; preds = %sw.epilog20, %sw.epilog
  ret void, !dbg !5737
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_negation(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %inner_type, %union.tree_node* %ar, %union.tree_node* %ai) #0 !dbg !5738 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %inner_type.addr = alloca %union.tree_node*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %rr = alloca %union.tree_node*, align 8
  %ri = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5741, metadata !DIExpression()), !dbg !5742
  store %union.tree_node* %inner_type, %union.tree_node** %inner_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type.addr, metadata !5743, metadata !DIExpression()), !dbg !5744
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !5745, metadata !DIExpression()), !dbg !5746
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !5747, metadata !DIExpression()), !dbg !5748
  call void @llvm.dbg.declare(metadata %union.tree_node** %rr, metadata !5749, metadata !DIExpression()), !dbg !5750
  call void @llvm.dbg.declare(metadata %union.tree_node** %ri, metadata !5751, metadata !DIExpression()), !dbg !5752
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5753
  %1 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5754
  %2 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5755
  %call = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %0, i32 79, %union.tree_node* %1, %union.tree_node* %2), !dbg !5756
  store %union.tree_node* %call, %union.tree_node** %rr, align 8, !dbg !5757
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5758
  %4 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5759
  %5 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5760
  %call1 = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %3, i32 79, %union.tree_node* %4, %union.tree_node* %5), !dbg !5761
  store %union.tree_node* %call1, %union.tree_node** %ri, align 8, !dbg !5762
  %6 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5763
  %7 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !5764
  %8 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !5765
  call void @update_complex_assignment(%struct.gimple_stmt_iterator* %6, %union.tree_node* %7, %union.tree_node* %8), !dbg !5766
  ret void, !dbg !5767
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_conjugate(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %inner_type, %union.tree_node* %ar, %union.tree_node* %ai) #0 !dbg !5768 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %inner_type.addr = alloca %union.tree_node*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %ri = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5769, metadata !DIExpression()), !dbg !5770
  store %union.tree_node* %inner_type, %union.tree_node** %inner_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type.addr, metadata !5771, metadata !DIExpression()), !dbg !5772
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !5773, metadata !DIExpression()), !dbg !5774
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !5775, metadata !DIExpression()), !dbg !5776
  call void @llvm.dbg.declare(metadata %union.tree_node** %ri, metadata !5777, metadata !DIExpression()), !dbg !5778
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5779
  %1 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5780
  %2 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5781
  %call = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %0, i32 79, %union.tree_node* %1, %union.tree_node* %2), !dbg !5782
  store %union.tree_node* %call, %union.tree_node** %ri, align 8, !dbg !5783
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5784
  %4 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5785
  %5 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !5786
  call void @update_complex_assignment(%struct.gimple_stmt_iterator* %3, %union.tree_node* %4, %union.tree_node* %5), !dbg !5787
  ret void, !dbg !5788
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_comparison(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %ar, %union.tree_node* %ai, %union.tree_node* %br, %union.tree_node* %bi, i32 %code) #0 !dbg !5789 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %br.addr = alloca %union.tree_node*, align 8
  %bi.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %cr = alloca %union.tree_node*, align 8
  %ci = alloca %union.tree_node*, align 8
  %cc = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5792, metadata !DIExpression()), !dbg !5793
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !5794, metadata !DIExpression()), !dbg !5795
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !5796, metadata !DIExpression()), !dbg !5797
  store %union.tree_node* %br, %union.tree_node** %br.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %br.addr, metadata !5798, metadata !DIExpression()), !dbg !5799
  store %union.tree_node* %bi, %union.tree_node** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bi.addr, metadata !5800, metadata !DIExpression()), !dbg !5801
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5802, metadata !DIExpression()), !dbg !5803
  call void @llvm.dbg.declare(metadata %union.tree_node** %cr, metadata !5804, metadata !DIExpression()), !dbg !5805
  call void @llvm.dbg.declare(metadata %union.tree_node** %ci, metadata !5806, metadata !DIExpression()), !dbg !5807
  call void @llvm.dbg.declare(metadata %union.tree_node** %cc, metadata !5808, metadata !DIExpression()), !dbg !5809
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5810, metadata !DIExpression()), !dbg !5811
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5812, metadata !DIExpression()), !dbg !5813
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5814
  %1 = load i32, i32* %code.addr, align 4, !dbg !5815
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5816
  %3 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !5817
  %4 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !5818
  %call = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %0, i32 %1, %union.tree_node* %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !5819
  store %union.tree_node* %call, %union.tree_node** %cr, align 8, !dbg !5820
  %5 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5821
  %6 = load i32, i32* %code.addr, align 4, !dbg !5822
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5823
  %8 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !5824
  %9 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !5825
  %call1 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %5, i32 %6, %union.tree_node* %7, %union.tree_node* %8, %union.tree_node* %9), !dbg !5826
  store %union.tree_node* %call1, %union.tree_node** %ci, align 8, !dbg !5827
  %10 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5828
  %11 = load i32, i32* %code.addr, align 4, !dbg !5829
  %cmp = icmp eq i32 %11, 101, !dbg !5830
  %12 = zext i1 %cmp to i64, !dbg !5829
  %cond = select i1 %cmp, i32 93, i32 94, !dbg !5829
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5831
  %14 = load %union.tree_node*, %union.tree_node** %cr, align 8, !dbg !5832
  %15 = load %union.tree_node*, %union.tree_node** %ci, align 8, !dbg !5833
  %call2 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %10, i32 %cond, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %15), !dbg !5834
  store %union.tree_node* %call2, %union.tree_node** %cc, align 8, !dbg !5835
  %16 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5836
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %16), !dbg !5837
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !5838
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5839
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %17), !dbg !5840
  switch i32 %call4, label %sw.default [
    i32 9, label %sw.bb
    i32 6, label %sw.bb8
    i32 1, label %sw.bb14
  ], !dbg !5841

sw.bb:                                            ; preds = %entry
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5842
  %call5 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %18), !dbg !5842
  %common = bitcast %union.tree_node* %call5 to %struct.tree_common*, !dbg !5842
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5842
  %19 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !5842
  store %union.tree_node* %19, %union.tree_node** %type, align 8, !dbg !5844
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5845
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5846
  %22 = load %union.tree_node*, %union.tree_node** %cc, align 8, !dbg !5846
  %call7 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %21, %union.tree_node* %22), !dbg !5846
  call void @gimple_return_set_retval(%union.gimple_statement_d* %20, %union.tree_node* %call7), !dbg !5847
  br label %sw.epilog, !dbg !5848

sw.bb8:                                           ; preds = %entry
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5849
  %call9 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %23), !dbg !5849
  %common10 = bitcast %union.tree_node* %call9 to %struct.tree_common*, !dbg !5849
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !5849
  %24 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !5849
  store %union.tree_node* %24, %union.tree_node** %type, align 8, !dbg !5850
  %25 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5851
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5852
  %27 = load %union.tree_node*, %union.tree_node** %cc, align 8, !dbg !5852
  %call12 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %26, %union.tree_node* %27), !dbg !5852
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %25, %union.tree_node* %call12), !dbg !5853
  %28 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5854
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %28), !dbg !5855
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt, align 8, !dbg !5856
  br label %sw.epilog, !dbg !5857

sw.bb14:                                          ; preds = %entry
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5858
  call void @gimple_cond_set_code(%union.gimple_statement_d* %29, i32 101), !dbg !5859
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5860
  %31 = load %union.tree_node*, %union.tree_node** %cc, align 8, !dbg !5861
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %30, %union.tree_node* %31), !dbg !5862
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5863
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5864
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %32, %union.tree_node* %33), !dbg !5865
  br label %sw.epilog, !dbg !5866

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1402, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5867
  br label %sw.epilog, !dbg !5868

sw.epilog:                                        ; preds = %sw.default, %sw.bb14, %sw.bb8, %sw.bb
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5869
  call void @update_stmt(%union.gimple_statement_d* %34), !dbg !5870
  ret void, !dbg !5871
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !5872 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5873, metadata !DIExpression()), !dbg !5874
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5875
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5876
  %cmp = icmp eq i32 %call, 8, !dbg !5877
  %conv = zext i1 %cmp to i32, !dbg !5877
  %conv1 = trunc i32 %conv to i8, !dbg !5876
  ret i8 %conv1, !dbg !5878
}

declare dso_local zeroext i8 @is_ctrl_altering_stmt(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !5879 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !5882, metadata !DIExpression()), !dbg !5883
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !5884, metadata !DIExpression()), !dbg !5885
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !5886
  store i32 0, i32* %index, align 8, !dbg !5887
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !5888
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !5889
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !5890
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !5891
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !5891
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !5891
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gsi_bb(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5892 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5895, metadata !DIExpression()), !dbg !5896
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 2, !dbg !5897
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5897
  ret %struct.basic_block_def* %0, !dbg !5898
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !5899 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5902, metadata !DIExpression()), !dbg !5903
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !5904, metadata !DIExpression()), !dbg !5905
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5906
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5906
  %5 = load i32, i32* %4, align 8, !dbg !5906
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5906
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5906
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5906
  %tobool = icmp ne i8 %call, 0, !dbg !5906
  br i1 %tobool, label %if.else, label %if.then, !dbg !5908

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5909
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5909
  %10 = load i32, i32* %9, align 8, !dbg !5909
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5909
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5909
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5909
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !5911
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !5912
  store i8 1, i8* %retval, align 1, !dbg !5913
  br label %return, !dbg !5913

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !5914
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !5916
  store i8 0, i8* %retval, align 1, !dbg !5917
  br label %return, !dbg !5917

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !5918
  ret i8 %15, !dbg !5918
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !5919 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !5923, metadata !DIExpression()), !dbg !5924
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5925
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !5925
  %1 = load i32, i32* %index, align 8, !dbg !5925
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5925
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !5925
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5925
  %5 = load i32, i32* %4, align 8, !dbg !5925
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5925
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5925
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5925
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5925
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5925

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5925
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !5925
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5925
  %11 = load i32, i32* %10, align 8, !dbg !5925
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5925
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5925
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5925
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5925
  br label %cond.end, !dbg !5925

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5925

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5925
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5925
  %cmp = icmp ult i32 %1, %call2, !dbg !5925
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !5925

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5925
  br label %cond.end5, !dbg !5925

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5925

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5925
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5926
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !5927
  %15 = load i32, i32* %index7, align 8, !dbg !5928
  %inc = add i32 %15, 1, !dbg !5928
  store i32 %inc, i32* %index7, align 8, !dbg !5928
  ret void, !dbg !5929
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_complex_components(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %stmt, %union.tree_node* %r, %union.tree_node* %i) #0 !dbg !5930 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %r.addr = alloca %union.tree_node*, align 8
  %i.addr = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %list = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5933, metadata !DIExpression()), !dbg !5934
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5935, metadata !DIExpression()), !dbg !5936
  store %union.tree_node* %r, %union.tree_node** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %r.addr, metadata !5937, metadata !DIExpression()), !dbg !5938
  store %union.tree_node* %i, %union.tree_node** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %i.addr, metadata !5939, metadata !DIExpression()), !dbg !5940
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !5941, metadata !DIExpression()), !dbg !5942
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %list, metadata !5943, metadata !DIExpression()), !dbg !5944
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5945
  %call = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %0), !dbg !5946
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !5947
  %1 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5948
  %2 = load %union.tree_node*, %union.tree_node** %r.addr, align 8, !dbg !5949
  %call1 = call %struct.gimple_seq_d* @set_component_ssa_name(%union.tree_node* %1, i8 zeroext 0, %union.tree_node* %2), !dbg !5950
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %list, align 8, !dbg !5951
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !5952
  %tobool = icmp ne %struct.gimple_seq_d* %3, null, !dbg !5952
  br i1 %tobool, label %if.then, label %if.end, !dbg !5954

if.then:                                          ; preds = %entry
  %4 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5955
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !5956
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %4, %struct.gimple_seq_d* %5, i32 2), !dbg !5957
  br label %if.end, !dbg !5957

if.end:                                           ; preds = %if.then, %entry
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5958
  %7 = load %union.tree_node*, %union.tree_node** %i.addr, align 8, !dbg !5959
  %call2 = call %struct.gimple_seq_d* @set_component_ssa_name(%union.tree_node* %6, i8 zeroext 1, %union.tree_node* %7), !dbg !5960
  store %struct.gimple_seq_d* %call2, %struct.gimple_seq_d** %list, align 8, !dbg !5961
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !5962
  %tobool3 = icmp ne %struct.gimple_seq_d* %8, null, !dbg !5962
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !5964

if.then4:                                         ; preds = %if.end
  %9 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5965
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !5966
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %9, %struct.gimple_seq_d* %10, i32 2), !dbg !5967
  br label %if.end5, !dbg !5967

if.end5:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !5968
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_complex_assignment(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %r, %union.tree_node* %i) #0 !dbg !5969 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %r.addr = alloca %union.tree_node*, align 8
  %i.addr = alloca %union.tree_node*, align 8
  %orig_si = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5972, metadata !DIExpression()), !dbg !5973
  store %union.tree_node* %r, %union.tree_node** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %r.addr, metadata !5974, metadata !DIExpression()), !dbg !5975
  store %union.tree_node* %i, %union.tree_node** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %i.addr, metadata !5976, metadata !DIExpression()), !dbg !5977
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %orig_si, metadata !5978, metadata !DIExpression()), !dbg !5979
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5980
  %1 = bitcast %struct.gimple_stmt_iterator* %orig_si to i8*, !dbg !5981
  %2 = bitcast %struct.gimple_stmt_iterator* %0 to i8*, !dbg !5981
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !5981
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5982
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5982
  %call = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !5984
  %tobool = icmp ne i8 %call, 0, !dbg !5984
  br i1 %tobool, label %if.then, label %if.end, !dbg !5985

if.then:                                          ; preds = %entry
  %4 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5986
  %5 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5987
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %5), !dbg !5988
  %6 = load %union.tree_node*, %union.tree_node** %r.addr, align 8, !dbg !5989
  %7 = load %union.tree_node*, %union.tree_node** %i.addr, align 8, !dbg !5990
  call void @update_complex_components(%struct.gimple_stmt_iterator* %4, %union.gimple_statement_d* %call1, %union.tree_node* %6, %union.tree_node* %7), !dbg !5991
  br label %if.end, !dbg !5991

if.end:                                           ; preds = %if.then, %entry
  %8 = load %union.tree_node*, %union.tree_node** %r.addr, align 8, !dbg !5992
  %9 = load %union.tree_node*, %union.tree_node** %i.addr, align 8, !dbg !5993
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %orig_si, i32 123, %union.tree_node* %8, %union.tree_node* %9), !dbg !5994
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %orig_si), !dbg !5995
  call void @update_stmt(%union.gimple_statement_d* %call2), !dbg !5996
  ret void, !dbg !5997
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !5998 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6001, metadata !DIExpression()), !dbg !6002
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6003, metadata !DIExpression()), !dbg !6004
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6005
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6006
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6007
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6008
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6008
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6010

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6011
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6011
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6011
  %bf.load = load i64, i64* %4, align 8, !dbg !6011
  %bf.clear = and i64 %bf.load, 65535, !dbg !6011
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6011
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6012
  br i1 %cmp, label %if.then, label %if.end, !dbg !6013

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6014
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6015
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6015
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6015
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6016
  br label %if.end, !dbg !6015

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !6017
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !6018 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6019, metadata !DIExpression()), !dbg !6020
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !6021, metadata !DIExpression()), !dbg !6022
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6023
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6024
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !6025
  ret void, !dbg !6026
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_return_set_retval(%union.gimple_statement_d* %gs, %union.tree_node* %retval) #0 !dbg !6027 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %retval.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6028, metadata !DIExpression()), !dbg !6029
  store %union.tree_node* %retval, %union.tree_node** %retval.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval.addr, metadata !6030, metadata !DIExpression()), !dbg !6031
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6032
  %1 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8, !dbg !6033
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6034
  ret void, !dbg !6035
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6036 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6039, metadata !DIExpression()), !dbg !6040
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6041
  %3 = load i32, i32* %index, align 8, !dbg !6041
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6042
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !6042
  %6 = load i32, i32* %5, align 8, !dbg !6042
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !6042
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !6042
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !6042
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6042
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6042

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6042
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6042
  %11 = load i32, i32* %10, align 8, !dbg !6042
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6042
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6042
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6042
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6042
  br label %cond.end, !dbg !6042

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6042

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6042
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6042
  %cmp = icmp eq i32 %3, %call2, !dbg !6043
  %conv = zext i1 %cmp to i32, !dbg !6043
  %conv3 = trunc i32 %conv to i8, !dbg !6044
  ret i8 %conv3, !dbg !6045
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6046 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6049, metadata !DIExpression()), !dbg !6050
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6051
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6051
  %5 = load i32, i32* %4, align 8, !dbg !6051
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6051
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6051
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6051
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6051
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6051

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6051
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6051
  %10 = load i32, i32* %9, align 8, !dbg !6051
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6051
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6051
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6051
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6051
  br label %cond.end, !dbg !6051

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6051

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6051
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6051
  %13 = load i32, i32* %index, align 8, !dbg !6051
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !6051
  ret %struct.edge_def* %call2, !dbg !6052
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6053 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6056, metadata !DIExpression()), !dbg !6057
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6058
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !6058
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !6058
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6058

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6058
  br label %cond.end, !dbg !6058

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6058

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6058
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6059
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !6059
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !6060
  ret %struct.VEC_edge_gc* %5, !dbg !6061
}

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

declare dso_local void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator*, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6062 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6065, metadata !DIExpression()), !dbg !6066
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6067, metadata !DIExpression()), !dbg !6068
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6069, metadata !DIExpression()), !dbg !6070
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6071
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6071
  %conv = zext i8 %call to i32, !dbg !6071
  %tobool = icmp ne i32 %conv, 0, !dbg !6071
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6071

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6071
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6071
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6071
  %cmp = icmp ult i32 %1, %call1, !dbg !6071
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6071

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6071
  br label %cond.end, !dbg !6071

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6071

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6071
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6072
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6073
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6074
  %5 = load i32, i32* %i.addr, align 4, !dbg !6075
  %idxprom = zext i32 %5 to i64, !dbg !6074
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6074
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6076
  ret void, !dbg !6077
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator*, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator*, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_libcall(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %ar, %union.tree_node* %ai, %union.tree_node* %br, %union.tree_node* %bi, i32 %code) #0 !dbg !6078 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %br.addr = alloca %union.tree_node*, align 8
  %bi.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %bcode = alloca i32, align 4
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %old_stmt = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6079, metadata !DIExpression()), !dbg !6080
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !6081, metadata !DIExpression()), !dbg !6082
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !6083, metadata !DIExpression()), !dbg !6084
  store %union.tree_node* %br, %union.tree_node** %br.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %br.addr, metadata !6085, metadata !DIExpression()), !dbg !6086
  store %union.tree_node* %bi, %union.tree_node** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bi.addr, metadata !6087, metadata !DIExpression()), !dbg !6088
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6091, metadata !DIExpression()), !dbg !6092
  call void @llvm.dbg.declare(metadata i32* %bcode, metadata !6093, metadata !DIExpression()), !dbg !6094
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6095, metadata !DIExpression()), !dbg !6096
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6097, metadata !DIExpression()), !dbg !6098
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6099, metadata !DIExpression()), !dbg !6100
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt, metadata !6101, metadata !DIExpression()), !dbg !6102
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6103, metadata !DIExpression()), !dbg !6104
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6105
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !6106
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %old_stmt, align 8, !dbg !6107
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !6108
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !6109
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !6110
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6111
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6111
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6111
  %3 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6111
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !6112
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6113
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6113
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !6113
  %bf.load = load i64, i64* %5, align 8, !dbg !6113
  %bf.clear = and i64 %bf.load, 65535, !dbg !6113
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6113
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !6113
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6113

cond.true:                                        ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6113
  %call3 = call i32 @vector_type_mode(%union.tree_node* %6), !dbg !6113
  br label %cond.end, !dbg !6113

cond.false:                                       ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6113
  %type4 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !6113
  %mode5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 6, !dbg !6113
  %bf.load6 = load i32, i32* %mode5, align 4, !dbg !6113
  %bf.lshr = lshr i32 %bf.load6, 16, !dbg !6113
  %bf.clear7 = and i32 %bf.lshr, 255, !dbg !6113
  br label %cond.end, !dbg !6113

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %bf.clear7, %cond.false ], !dbg !6113
  store i32 %cond, i32* %mode, align 4, !dbg !6114
  %8 = load i32, i32* %mode, align 4, !dbg !6115
  %idxprom = zext i32 %8 to i64, !dbg !6115
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !6115
  %9 = load i8, i8* %arrayidx, align 1, !dbg !6115
  %conv = zext i8 %9 to i32, !dbg !6115
  %cmp8 = icmp eq i32 %conv, 11, !dbg !6115
  br i1 %cmp8, label %cond.false11, label %cond.true10, !dbg !6115

cond.true10:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 954, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6115
  br label %cond.end12, !dbg !6115

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !6115

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !6115
  %10 = load i32, i32* %code.addr, align 4, !dbg !6116
  %cmp14 = icmp eq i32 %10, 65, !dbg !6118
  br i1 %cmp14, label %if.then, label %if.else, !dbg !6119

if.then:                                          ; preds = %cond.end12
  %11 = load i32, i32* %mode, align 4, !dbg !6120
  %add = add i32 713, %11, !dbg !6121
  %sub = sub i32 %add, 51, !dbg !6122
  store i32 %sub, i32* %bcode, align 4, !dbg !6123
  br label %if.end22, !dbg !6124

if.else:                                          ; preds = %cond.end12
  %12 = load i32, i32* %code.addr, align 4, !dbg !6125
  %cmp16 = icmp eq i32 %12, 75, !dbg !6127
  br i1 %cmp16, label %if.then18, label %if.else21, !dbg !6128

if.then18:                                        ; preds = %if.else
  %13 = load i32, i32* %mode, align 4, !dbg !6129
  %add19 = add i32 717, %13, !dbg !6130
  %sub20 = sub i32 %add19, 51, !dbg !6131
  store i32 %sub20, i32* %bcode, align 4, !dbg !6132
  br label %if.end, !dbg !6133

if.else21:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 963, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6134
  br label %if.end

if.end:                                           ; preds = %if.else21, %if.then18
  br label %if.end22

if.end22:                                         ; preds = %if.end, %if.then
  %14 = load i32, i32* %bcode, align 4, !dbg !6135
  %idxprom23 = zext i32 %14 to i64, !dbg !6136
  %arrayidx24 = getelementptr inbounds [721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 %idxprom23, !dbg !6136
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !6136
  store %union.tree_node* %15, %union.tree_node** %fn, align 8, !dbg !6137
  %16 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6138
  %17 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !6139
  %18 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !6140
  %19 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6141
  %20 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6142
  %call25 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %16, i32 4, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !6143
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %stmt, align 8, !dbg !6144
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6145
  %22 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6146
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %21, %union.tree_node* %22), !dbg !6147
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6148
  call void @update_stmt(%union.gimple_statement_d* %23), !dbg !6149
  %24 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6150
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6151
  call void @gsi_replace(%struct.gimple_stmt_iterator* %24, %union.gimple_statement_d* %25, i8 zeroext 0), !dbg !6152
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !6153
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6155
  %call26 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %26, %union.gimple_statement_d* %27), !dbg !6156
  %tobool = icmp ne i8 %call26, 0, !dbg !6156
  br i1 %tobool, label %if.then27, label %if.end30, !dbg !6157

if.then27:                                        ; preds = %if.end22
  %28 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6158
  %call28 = call %struct.basic_block_def* @gsi_bb(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %28), !dbg !6159
  %call29 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %call28), !dbg !6160
  br label %if.end30, !dbg !6160

if.end30:                                         ; preds = %if.then27, %if.end22
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6161
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !6161
  %call31 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !6163
  %tobool32 = icmp ne i8 %call31, 0, !dbg !6163
  br i1 %tobool32, label %if.then33, label %if.end38, !dbg !6164

if.then33:                                        ; preds = %if.end30
  %30 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6165
  %common34 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !6165
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !6165
  %31 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !6165
  store %union.tree_node* %31, %union.tree_node** %type, align 8, !dbg !6167
  %32 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6168
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6169
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6170
  %35 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6170
  %call36 = call %union.tree_node* @build1_stat(i32 43, %union.tree_node* %34, %union.tree_node* %35), !dbg !6170
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6171
  %37 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6171
  %call37 = call %union.tree_node* @build1_stat(i32 44, %union.tree_node* %36, %union.tree_node* %37), !dbg !6171
  call void @update_complex_components(%struct.gimple_stmt_iterator* %32, %union.gimple_statement_d* %33, %union.tree_node* %call36, %union.tree_node* %call37), !dbg !6172
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6173
  %39 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6174
  %ssa_name = bitcast %union.tree_node* %39 to %struct.tree_ssa_name*, !dbg !6174
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6174
  store %union.gimple_statement_d* %38, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6175
  br label %if.end38, !dbg !6176

if.end38:                                         ; preds = %if.then33, %if.end30
  ret void, !dbg !6177
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node*, i32, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !6178 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6179, metadata !DIExpression()), !dbg !6180
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6181, metadata !DIExpression()), !dbg !6182
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6183
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6184
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6185
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6186
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6186
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6188

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6189
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6189
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6189
  %bf.load = load i64, i64* %4, align 8, !dbg !6189
  %bf.clear = and i64 %bf.load, 65535, !dbg !6189
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6189
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6190
  br i1 %cmp, label %if.then, label %if.end, !dbg !6191

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6192
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6193
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6193
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6193
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6194
  br label %if.end, !dbg !6193

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !6195
}

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_div_straight(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %inner_type, %union.tree_node* %ar, %union.tree_node* %ai, %union.tree_node* %br, %union.tree_node* %bi, i32 %code) #0 !dbg !6196 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %inner_type.addr = alloca %union.tree_node*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %br.addr = alloca %union.tree_node*, align 8
  %bi.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %rr = alloca %union.tree_node*, align 8
  %ri = alloca %union.tree_node*, align 8
  %div = alloca %union.tree_node*, align 8
  %t1 = alloca %union.tree_node*, align 8
  %t2 = alloca %union.tree_node*, align 8
  %t3 = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6199, metadata !DIExpression()), !dbg !6200
  store %union.tree_node* %inner_type, %union.tree_node** %inner_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type.addr, metadata !6201, metadata !DIExpression()), !dbg !6202
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !6203, metadata !DIExpression()), !dbg !6204
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !6205, metadata !DIExpression()), !dbg !6206
  store %union.tree_node* %br, %union.tree_node** %br.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %br.addr, metadata !6207, metadata !DIExpression()), !dbg !6208
  store %union.tree_node* %bi, %union.tree_node** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bi.addr, metadata !6209, metadata !DIExpression()), !dbg !6210
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  call void @llvm.dbg.declare(metadata %union.tree_node** %rr, metadata !6213, metadata !DIExpression()), !dbg !6214
  call void @llvm.dbg.declare(metadata %union.tree_node** %ri, metadata !6215, metadata !DIExpression()), !dbg !6216
  call void @llvm.dbg.declare(metadata %union.tree_node** %div, metadata !6217, metadata !DIExpression()), !dbg !6218
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1, metadata !6219, metadata !DIExpression()), !dbg !6220
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @llvm.dbg.declare(metadata %union.tree_node** %t3, metadata !6223, metadata !DIExpression()), !dbg !6224
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6225
  %1 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6226
  %2 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6227
  %3 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6228
  %call = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %0, i32 65, %union.tree_node* %1, %union.tree_node* %2, %union.tree_node* %3), !dbg !6229
  store %union.tree_node* %call, %union.tree_node** %t1, align 8, !dbg !6230
  %4 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6231
  %5 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6232
  %6 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6233
  %7 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6234
  %call1 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %4, i32 65, %union.tree_node* %5, %union.tree_node* %6, %union.tree_node* %7), !dbg !6235
  store %union.tree_node* %call1, %union.tree_node** %t2, align 8, !dbg !6236
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6237
  %9 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6238
  %10 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6239
  %11 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !6240
  %call2 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %8, i32 63, %union.tree_node* %9, %union.tree_node* %10, %union.tree_node* %11), !dbg !6241
  store %union.tree_node* %call2, %union.tree_node** %div, align 8, !dbg !6242
  %12 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6243
  %13 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6244
  %14 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !6245
  %15 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6246
  %call3 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %12, i32 65, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %15), !dbg !6247
  store %union.tree_node* %call3, %union.tree_node** %t1, align 8, !dbg !6248
  %16 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6249
  %17 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6250
  %18 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !6251
  %19 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6252
  %call4 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %16, i32 65, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !6253
  store %union.tree_node* %call4, %union.tree_node** %t2, align 8, !dbg !6254
  %20 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6255
  %21 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6256
  %22 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6257
  %23 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !6258
  %call5 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %20, i32 63, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %23), !dbg !6259
  store %union.tree_node* %call5, %union.tree_node** %t3, align 8, !dbg !6260
  %24 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6261
  %25 = load i32, i32* %code.addr, align 4, !dbg !6262
  %26 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6263
  %27 = load %union.tree_node*, %union.tree_node** %t3, align 8, !dbg !6264
  %28 = load %union.tree_node*, %union.tree_node** %div, align 8, !dbg !6265
  %call6 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %24, i32 %25, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28), !dbg !6266
  store %union.tree_node* %call6, %union.tree_node** %rr, align 8, !dbg !6267
  %29 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6268
  %30 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6269
  %31 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !6270
  %32 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6271
  %call7 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %29, i32 65, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !6272
  store %union.tree_node* %call7, %union.tree_node** %t1, align 8, !dbg !6273
  %33 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6274
  %34 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6275
  %35 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !6276
  %36 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6277
  %call8 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %33, i32 65, %union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36), !dbg !6278
  store %union.tree_node* %call8, %union.tree_node** %t2, align 8, !dbg !6279
  %37 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6280
  %38 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6281
  %39 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6282
  %40 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !6283
  %call9 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %37, i32 64, %union.tree_node* %38, %union.tree_node* %39, %union.tree_node* %40), !dbg !6284
  store %union.tree_node* %call9, %union.tree_node** %t3, align 8, !dbg !6285
  %41 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6286
  %42 = load i32, i32* %code.addr, align 4, !dbg !6287
  %43 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6288
  %44 = load %union.tree_node*, %union.tree_node** %t3, align 8, !dbg !6289
  %45 = load %union.tree_node*, %union.tree_node** %div, align 8, !dbg !6290
  %call10 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %41, i32 %42, %union.tree_node* %43, %union.tree_node* %44, %union.tree_node* %45), !dbg !6291
  store %union.tree_node* %call10, %union.tree_node** %ri, align 8, !dbg !6292
  %46 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6293
  %47 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !6294
  %48 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !6295
  call void @update_complex_assignment(%struct.gimple_stmt_iterator* %46, %union.tree_node* %47, %union.tree_node* %48), !dbg !6296
  ret void, !dbg !6297
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_complex_div_wide(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %inner_type, %union.tree_node* %ar, %union.tree_node* %ai, %union.tree_node* %br, %union.tree_node* %bi, i32 %code) #0 !dbg !6298 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %inner_type.addr = alloca %union.tree_node*, align 8
  %ar.addr = alloca %union.tree_node*, align 8
  %ai.addr = alloca %union.tree_node*, align 8
  %br.addr = alloca %union.tree_node*, align 8
  %bi.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %rr = alloca %union.tree_node*, align 8
  %ri = alloca %union.tree_node*, align 8
  %ratio = alloca %union.tree_node*, align 8
  %div = alloca %union.tree_node*, align 8
  %t1 = alloca %union.tree_node*, align 8
  %t2 = alloca %union.tree_node*, align 8
  %tr = alloca %union.tree_node*, align 8
  %ti = alloca %union.tree_node*, align 8
  %compare = alloca %union.tree_node*, align 8
  %bb_cond = alloca %struct.basic_block_def*, align 8
  %bb_true = alloca %struct.basic_block_def*, align 8
  %bb_false = alloca %struct.basic_block_def*, align 8
  %bb_join = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %e = alloca %struct.edge_def*, align 8
  %stmt6 = alloca %union.gimple_statement_d*, align 8
  %cond = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %tmp35 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp60 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp80 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6299, metadata !DIExpression()), !dbg !6300
  store %union.tree_node* %inner_type, %union.tree_node** %inner_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type.addr, metadata !6301, metadata !DIExpression()), !dbg !6302
  store %union.tree_node* %ar, %union.tree_node** %ar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ar.addr, metadata !6303, metadata !DIExpression()), !dbg !6304
  store %union.tree_node* %ai, %union.tree_node** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ai.addr, metadata !6305, metadata !DIExpression()), !dbg !6306
  store %union.tree_node* %br, %union.tree_node** %br.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %br.addr, metadata !6307, metadata !DIExpression()), !dbg !6308
  store %union.tree_node* %bi, %union.tree_node** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bi.addr, metadata !6309, metadata !DIExpression()), !dbg !6310
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6311, metadata !DIExpression()), !dbg !6312
  call void @llvm.dbg.declare(metadata %union.tree_node** %rr, metadata !6313, metadata !DIExpression()), !dbg !6314
  call void @llvm.dbg.declare(metadata %union.tree_node** %ri, metadata !6315, metadata !DIExpression()), !dbg !6316
  call void @llvm.dbg.declare(metadata %union.tree_node** %ratio, metadata !6317, metadata !DIExpression()), !dbg !6318
  call void @llvm.dbg.declare(metadata %union.tree_node** %div, metadata !6319, metadata !DIExpression()), !dbg !6320
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1, metadata !6321, metadata !DIExpression()), !dbg !6322
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2, metadata !6323, metadata !DIExpression()), !dbg !6324
  call void @llvm.dbg.declare(metadata %union.tree_node** %tr, metadata !6325, metadata !DIExpression()), !dbg !6326
  call void @llvm.dbg.declare(metadata %union.tree_node** %ti, metadata !6327, metadata !DIExpression()), !dbg !6328
  call void @llvm.dbg.declare(metadata %union.tree_node** %compare, metadata !6329, metadata !DIExpression()), !dbg !6330
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_cond, metadata !6331, metadata !DIExpression()), !dbg !6332
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_true, metadata !6333, metadata !DIExpression()), !dbg !6334
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_false, metadata !6335, metadata !DIExpression()), !dbg !6336
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_join, metadata !6337, metadata !DIExpression()), !dbg !6338
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6339, metadata !DIExpression()), !dbg !6340
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6341
  %1 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6342
  %2 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6343
  %call = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %0, i32 82, %union.tree_node* %1, %union.tree_node* %2), !dbg !6344
  store %union.tree_node* %call, %union.tree_node** %t1, align 8, !dbg !6345
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6346
  %4 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6347
  %5 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6348
  %call1 = call %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %3, i32 82, %union.tree_node* %4, %union.tree_node* %5), !dbg !6349
  store %union.tree_node* %call1, %union.tree_node** %t2, align 8, !dbg !6350
  %6 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6351
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %6), !dbg !6351
  %call3 = call i32 @gimple_location(%union.gimple_statement_d* %call2), !dbg !6351
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6351
  %8 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6351
  %9 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !6351
  %call4 = call %union.tree_node* @fold_build2_stat_loc(i32 %call3, i32 97, %union.tree_node* %7, %union.tree_node* %8, %union.tree_node* %9), !dbg !6351
  store %union.tree_node* %call4, %union.tree_node** %compare, align 8, !dbg !6352
  %10 = load %union.tree_node*, %union.tree_node** %compare, align 8, !dbg !6353
  %call5 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %10), !dbg !6353
  store %union.tree_node* %call5, %union.tree_node** %compare, align 8, !dbg !6353
  store %struct.basic_block_def* null, %struct.basic_block_def** %bb_join, align 8, !dbg !6354
  store %struct.basic_block_def* null, %struct.basic_block_def** %bb_false, align 8, !dbg !6355
  store %struct.basic_block_def* null, %struct.basic_block_def** %bb_true, align 8, !dbg !6356
  store %struct.basic_block_def* null, %struct.basic_block_def** %bb_cond, align 8, !dbg !6357
  store %union.tree_node* null, %union.tree_node** %ti, align 8, !dbg !6358
  store %union.tree_node* null, %union.tree_node** %tr, align 8, !dbg !6359
  store %union.tree_node* null, %union.tree_node** %ri, align 8, !dbg !6360
  store %union.tree_node* null, %union.tree_node** %rr, align 8, !dbg !6361
  %11 = load %union.tree_node*, %union.tree_node** %compare, align 8, !dbg !6362
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6362
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !6362
  %bf.load = load i64, i64* %12, align 8, !dbg !6362
  %bf.clear = and i64 %bf.load, 65535, !dbg !6362
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6362
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !6364
  br i1 %cmp, label %if.then, label %if.end28, !dbg !6365

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6366, metadata !DIExpression()), !dbg !6368
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt6, metadata !6369, metadata !DIExpression()), !dbg !6370
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !6371, metadata !DIExpression()), !dbg !6372
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !6373, metadata !DIExpression()), !dbg !6374
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6375
  %call7 = call %union.tree_node* @create_tmp_var(%union.tree_node* %13, i8* null), !dbg !6376
  store %union.tree_node* %call7, %union.tree_node** %tmp, align 8, !dbg !6377
  %14 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6378
  %15 = load %union.tree_node*, %union.tree_node** %compare, align 8, !dbg !6378
  %call8 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %14, %union.tree_node* %15), !dbg !6378
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %stmt6, align 8, !dbg !6379
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6380
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !6380
  %call9 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !6382
  %tobool = icmp ne i8 %call9, 0, !dbg !6382
  br i1 %tobool, label %if.then10, label %if.end, !dbg !6383

if.then10:                                        ; preds = %if.then
  %17 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6384
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6386
  %call11 = call %union.tree_node* @make_ssa_name(%union.tree_node* %17, %union.gimple_statement_d* %18), !dbg !6387
  store %union.tree_node* %call11, %union.tree_node** %tmp, align 8, !dbg !6388
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6389
  %20 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6390
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %19, %union.tree_node* %20), !dbg !6391
  br label %if.end, !dbg !6392

if.end:                                           ; preds = %if.then10, %if.then
  %21 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6393
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6394
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %21, %union.gimple_statement_d* %22, i32 1), !dbg !6395
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6396
  %call12 = call i32 @gimple_location(%union.gimple_statement_d* %23), !dbg !6396
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6396
  %25 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6396
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !6396
  %call13 = call %union.tree_node* @fold_build2_stat_loc(i32 %call12, i32 101, %union.tree_node* %24, %union.tree_node* %25, %union.tree_node* %26), !dbg !6396
  store %union.tree_node* %call13, %union.tree_node** %cond, align 8, !dbg !6397
  %27 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !6398
  %call14 = call %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node* %27, %union.tree_node* null, %union.tree_node* null), !dbg !6399
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %stmt6, align 8, !dbg !6400
  %28 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6401
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6402
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %28, %union.gimple_statement_d* %29, i32 1), !dbg !6403
  %30 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6404
  %call15 = call %struct.basic_block_def* @gsi_bb(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %30), !dbg !6405
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6406
  %32 = bitcast %union.gimple_statement_d* %31 to i8*, !dbg !6406
  %call16 = call %struct.edge_def* @split_block(%struct.basic_block_def* %call15, i8* %32), !dbg !6407
  store %struct.edge_def* %call16, %struct.edge_def** %e, align 8, !dbg !6408
  %33 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6409
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 0, !dbg !6410
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6410
  store %struct.basic_block_def* %34, %struct.basic_block_def** %bb_cond, align 8, !dbg !6411
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6412
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 1, !dbg !6413
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6413
  store %struct.basic_block_def* %36, %struct.basic_block_def** %bb_join, align 8, !dbg !6414
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_cond, align 8, !dbg !6415
  %call17 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %37), !dbg !6416
  store %struct.basic_block_def* %call17, %struct.basic_block_def** %bb_true, align 8, !dbg !6417
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_true, align 8, !dbg !6418
  %call18 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %38), !dbg !6419
  store %struct.basic_block_def* %call18, %struct.basic_block_def** %bb_false, align 8, !dbg !6420
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6421
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 7, !dbg !6422
  store i32 1024, i32* %flags, align 8, !dbg !6423
  %40 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6424
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_true, align 8, !dbg !6425
  call void @redirect_edge_succ(%struct.edge_def* %40, %struct.basic_block_def* %41), !dbg !6426
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_cond, align 8, !dbg !6427
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_false, align 8, !dbg !6428
  %call19 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %42, %struct.basic_block_def* %43, i32 2048), !dbg !6429
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_true, align 8, !dbg !6430
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_join, align 8, !dbg !6431
  %call20 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %44, %struct.basic_block_def* %45, i32 1), !dbg !6432
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_false, align 8, !dbg !6433
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_join, align 8, !dbg !6434
  %call21 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %46, %struct.basic_block_def* %47, i32 1), !dbg !6435
  %call22 = call zeroext i8 @dom_info_available_p(i32 1), !dbg !6436
  %tobool23 = icmp ne i8 %call22, 0, !dbg !6436
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !6438

if.then24:                                        ; preds = %if.end
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_true, align 8, !dbg !6439
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_cond, align 8, !dbg !6441
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %48, %struct.basic_block_def* %49), !dbg !6442
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_false, align 8, !dbg !6443
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_cond, align 8, !dbg !6444
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %50, %struct.basic_block_def* %51), !dbg !6445
  br label %if.end25, !dbg !6446

if.end25:                                         ; preds = %if.then24, %if.end
  %52 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6447
  %call26 = call %union.tree_node* @make_rename_temp(%union.tree_node* %52, i8* null), !dbg !6448
  store %union.tree_node* %call26, %union.tree_node** %rr, align 8, !dbg !6449
  %53 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6450
  %call27 = call %union.tree_node* @make_rename_temp(%union.tree_node* %53, i8* null), !dbg !6451
  store %union.tree_node* %call27, %union.tree_node** %ri, align 8, !dbg !6452
  br label %if.end28, !dbg !6453

if.end28:                                         ; preds = %if.end25, %entry
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_true, align 8, !dbg !6454
  %tobool29 = icmp ne %struct.basic_block_def* %54, null, !dbg !6454
  br i1 %tobool29, label %if.then32, label %lor.lhs.false, !dbg !6456

lor.lhs.false:                                    ; preds = %if.end28
  %55 = load %union.tree_node*, %union.tree_node** %compare, align 8, !dbg !6457
  %call30 = call i32 @integer_nonzerop(%union.tree_node* %55), !dbg !6458
  %tobool31 = icmp ne i32 %call30, 0, !dbg !6458
  br i1 %tobool31, label %if.then32, label %if.end52, !dbg !6459

if.then32:                                        ; preds = %lor.lhs.false, %if.end28
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_true, align 8, !dbg !6460
  %tobool33 = icmp ne %struct.basic_block_def* %56, null, !dbg !6460
  br i1 %tobool33, label %if.then34, label %if.end37, !dbg !6463

if.then34:                                        ; preds = %if.then32
  %57 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6464
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_true, align 8, !dbg !6466
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp35, %struct.basic_block_def* %58), !dbg !6467
  %59 = bitcast %struct.gimple_stmt_iterator* %57 to i8*, !dbg !6467
  %60 = bitcast %struct.gimple_stmt_iterator* %tmp35 to i8*, !dbg !6467
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false), !dbg !6467
  %61 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6468
  %call36 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !6469
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %61, %union.gimple_statement_d* %call36, i32 0), !dbg !6470
  br label %if.end37, !dbg !6471

if.end37:                                         ; preds = %if.then34, %if.then32
  %62 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6472
  %63 = load i32, i32* %code.addr, align 4, !dbg !6473
  %64 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6474
  %65 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6475
  %66 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6476
  %call38 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %62, i32 %63, %union.tree_node* %64, %union.tree_node* %65, %union.tree_node* %66), !dbg !6477
  store %union.tree_node* %call38, %union.tree_node** %ratio, align 8, !dbg !6478
  %67 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6479
  %68 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6480
  %69 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6481
  %70 = load %union.tree_node*, %union.tree_node** %ratio, align 8, !dbg !6482
  %call39 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %67, i32 65, %union.tree_node* %68, %union.tree_node* %69, %union.tree_node* %70), !dbg !6483
  store %union.tree_node* %call39, %union.tree_node** %t1, align 8, !dbg !6484
  %71 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6485
  %72 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6486
  %73 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6487
  %74 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6488
  %call40 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %71, i32 63, %union.tree_node* %72, %union.tree_node* %73, %union.tree_node* %74), !dbg !6489
  store %union.tree_node* %call40, %union.tree_node** %div, align 8, !dbg !6490
  %75 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6491
  %76 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6492
  %77 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !6493
  %78 = load %union.tree_node*, %union.tree_node** %ratio, align 8, !dbg !6494
  %call41 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %75, i32 65, %union.tree_node* %76, %union.tree_node* %77, %union.tree_node* %78), !dbg !6495
  store %union.tree_node* %call41, %union.tree_node** %t1, align 8, !dbg !6496
  %79 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6497
  %80 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6498
  %81 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6499
  %82 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !6500
  %call42 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %79, i32 63, %union.tree_node* %80, %union.tree_node* %81, %union.tree_node* %82), !dbg !6501
  store %union.tree_node* %call42, %union.tree_node** %tr, align 8, !dbg !6502
  %83 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6503
  %84 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6504
  %85 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !6505
  %86 = load %union.tree_node*, %union.tree_node** %ratio, align 8, !dbg !6506
  %call43 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %83, i32 65, %union.tree_node* %84, %union.tree_node* %85, %union.tree_node* %86), !dbg !6507
  store %union.tree_node* %call43, %union.tree_node** %t1, align 8, !dbg !6508
  %87 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6509
  %88 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6510
  %89 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6511
  %90 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !6512
  %call44 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %87, i32 64, %union.tree_node* %88, %union.tree_node* %89, %union.tree_node* %90), !dbg !6513
  store %union.tree_node* %call44, %union.tree_node** %ti, align 8, !dbg !6514
  %91 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6515
  %92 = load i32, i32* %code.addr, align 4, !dbg !6516
  %93 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6517
  %94 = load %union.tree_node*, %union.tree_node** %tr, align 8, !dbg !6518
  %95 = load %union.tree_node*, %union.tree_node** %div, align 8, !dbg !6519
  %call45 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %91, i32 %92, %union.tree_node* %93, %union.tree_node* %94, %union.tree_node* %95), !dbg !6520
  store %union.tree_node* %call45, %union.tree_node** %tr, align 8, !dbg !6521
  %96 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6522
  %97 = load i32, i32* %code.addr, align 4, !dbg !6523
  %98 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6524
  %99 = load %union.tree_node*, %union.tree_node** %ti, align 8, !dbg !6525
  %100 = load %union.tree_node*, %union.tree_node** %div, align 8, !dbg !6526
  %call46 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %96, i32 %97, %union.tree_node* %98, %union.tree_node* %99, %union.tree_node* %100), !dbg !6527
  store %union.tree_node* %call46, %union.tree_node** %ti, align 8, !dbg !6528
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_true, align 8, !dbg !6529
  %tobool47 = icmp ne %struct.basic_block_def* %101, null, !dbg !6529
  br i1 %tobool47, label %if.then48, label %if.end51, !dbg !6531

if.then48:                                        ; preds = %if.end37
  %102 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !6532
  %103 = load %union.tree_node*, %union.tree_node** %tr, align 8, !dbg !6532
  %call49 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %102, %union.tree_node* %103), !dbg !6532
  store %union.gimple_statement_d* %call49, %union.gimple_statement_d** %stmt, align 8, !dbg !6534
  %104 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6535
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6536
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %104, %union.gimple_statement_d* %105, i32 1), !dbg !6537
  %106 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !6538
  %107 = load %union.tree_node*, %union.tree_node** %ti, align 8, !dbg !6538
  %call50 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %106, %union.tree_node* %107), !dbg !6538
  store %union.gimple_statement_d* %call50, %union.gimple_statement_d** %stmt, align 8, !dbg !6539
  %108 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6540
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6541
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %108, %union.gimple_statement_d* %109, i32 1), !dbg !6542
  %110 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6543
  call void @gsi_remove(%struct.gimple_stmt_iterator* %110, i8 zeroext 1), !dbg !6544
  br label %if.end51, !dbg !6545

if.end51:                                         ; preds = %if.then48, %if.end37
  br label %if.end52, !dbg !6546

if.end52:                                         ; preds = %if.end51, %lor.lhs.false
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_false, align 8, !dbg !6547
  %tobool53 = icmp ne %struct.basic_block_def* %111, null, !dbg !6547
  br i1 %tobool53, label %if.then57, label %lor.lhs.false54, !dbg !6549

lor.lhs.false54:                                  ; preds = %if.end52
  %112 = load %union.tree_node*, %union.tree_node** %compare, align 8, !dbg !6550
  %call55 = call i32 @integer_zerop(%union.tree_node* %112), !dbg !6551
  %tobool56 = icmp ne i32 %call55, 0, !dbg !6551
  br i1 %tobool56, label %if.then57, label %if.end77, !dbg !6552

if.then57:                                        ; preds = %lor.lhs.false54, %if.end52
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_false, align 8, !dbg !6553
  %tobool58 = icmp ne %struct.basic_block_def* %113, null, !dbg !6553
  br i1 %tobool58, label %if.then59, label %if.end62, !dbg !6556

if.then59:                                        ; preds = %if.then57
  %114 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6557
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_false, align 8, !dbg !6559
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp60, %struct.basic_block_def* %115), !dbg !6560
  %116 = bitcast %struct.gimple_stmt_iterator* %114 to i8*, !dbg !6560
  %117 = bitcast %struct.gimple_stmt_iterator* %tmp60 to i8*, !dbg !6560
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 24, i1 false), !dbg !6560
  %118 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6561
  %call61 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !6562
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %118, %union.gimple_statement_d* %call61, i32 0), !dbg !6563
  br label %if.end62, !dbg !6564

if.end62:                                         ; preds = %if.then59, %if.then57
  %119 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6565
  %120 = load i32, i32* %code.addr, align 4, !dbg !6566
  %121 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6567
  %122 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6568
  %123 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6569
  %call63 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %119, i32 %120, %union.tree_node* %121, %union.tree_node* %122, %union.tree_node* %123), !dbg !6570
  store %union.tree_node* %call63, %union.tree_node** %ratio, align 8, !dbg !6571
  %124 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6572
  %125 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6573
  %126 = load %union.tree_node*, %union.tree_node** %bi.addr, align 8, !dbg !6574
  %127 = load %union.tree_node*, %union.tree_node** %ratio, align 8, !dbg !6575
  %call64 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %124, i32 65, %union.tree_node* %125, %union.tree_node* %126, %union.tree_node* %127), !dbg !6576
  store %union.tree_node* %call64, %union.tree_node** %t1, align 8, !dbg !6577
  %128 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6578
  %129 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6579
  %130 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6580
  %131 = load %union.tree_node*, %union.tree_node** %br.addr, align 8, !dbg !6581
  %call65 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %128, i32 63, %union.tree_node* %129, %union.tree_node* %130, %union.tree_node* %131), !dbg !6582
  store %union.tree_node* %call65, %union.tree_node** %div, align 8, !dbg !6583
  %132 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6584
  %133 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6585
  %134 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !6586
  %135 = load %union.tree_node*, %union.tree_node** %ratio, align 8, !dbg !6587
  %call66 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %132, i32 65, %union.tree_node* %133, %union.tree_node* %134, %union.tree_node* %135), !dbg !6588
  store %union.tree_node* %call66, %union.tree_node** %t1, align 8, !dbg !6589
  %136 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6590
  %137 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6591
  %138 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6592
  %139 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !6593
  %call67 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %136, i32 63, %union.tree_node* %137, %union.tree_node* %138, %union.tree_node* %139), !dbg !6594
  store %union.tree_node* %call67, %union.tree_node** %tr, align 8, !dbg !6595
  %140 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6596
  %141 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6597
  %142 = load %union.tree_node*, %union.tree_node** %ar.addr, align 8, !dbg !6598
  %143 = load %union.tree_node*, %union.tree_node** %ratio, align 8, !dbg !6599
  %call68 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %140, i32 65, %union.tree_node* %141, %union.tree_node* %142, %union.tree_node* %143), !dbg !6600
  store %union.tree_node* %call68, %union.tree_node** %t1, align 8, !dbg !6601
  %144 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6602
  %145 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6603
  %146 = load %union.tree_node*, %union.tree_node** %ai.addr, align 8, !dbg !6604
  %147 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6605
  %call69 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %144, i32 64, %union.tree_node* %145, %union.tree_node* %146, %union.tree_node* %147), !dbg !6606
  store %union.tree_node* %call69, %union.tree_node** %ti, align 8, !dbg !6607
  %148 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6608
  %149 = load i32, i32* %code.addr, align 4, !dbg !6609
  %150 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6610
  %151 = load %union.tree_node*, %union.tree_node** %tr, align 8, !dbg !6611
  %152 = load %union.tree_node*, %union.tree_node** %div, align 8, !dbg !6612
  %call70 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %148, i32 %149, %union.tree_node* %150, %union.tree_node* %151, %union.tree_node* %152), !dbg !6613
  store %union.tree_node* %call70, %union.tree_node** %tr, align 8, !dbg !6614
  %153 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6615
  %154 = load i32, i32* %code.addr, align 4, !dbg !6616
  %155 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6617
  %156 = load %union.tree_node*, %union.tree_node** %ti, align 8, !dbg !6618
  %157 = load %union.tree_node*, %union.tree_node** %div, align 8, !dbg !6619
  %call71 = call %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %153, i32 %154, %union.tree_node* %155, %union.tree_node* %156, %union.tree_node* %157), !dbg !6620
  store %union.tree_node* %call71, %union.tree_node** %ti, align 8, !dbg !6621
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_false, align 8, !dbg !6622
  %tobool72 = icmp ne %struct.basic_block_def* %158, null, !dbg !6622
  br i1 %tobool72, label %if.then73, label %if.end76, !dbg !6624

if.then73:                                        ; preds = %if.end62
  %159 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !6625
  %160 = load %union.tree_node*, %union.tree_node** %tr, align 8, !dbg !6625
  %call74 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %159, %union.tree_node* %160), !dbg !6625
  store %union.gimple_statement_d* %call74, %union.gimple_statement_d** %stmt, align 8, !dbg !6627
  %161 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6628
  %162 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6629
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %161, %union.gimple_statement_d* %162, i32 1), !dbg !6630
  %163 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !6631
  %164 = load %union.tree_node*, %union.tree_node** %ti, align 8, !dbg !6631
  %call75 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %163, %union.tree_node* %164), !dbg !6631
  store %union.gimple_statement_d* %call75, %union.gimple_statement_d** %stmt, align 8, !dbg !6632
  %165 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6633
  %166 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6634
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %165, %union.gimple_statement_d* %166, i32 1), !dbg !6635
  %167 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6636
  call void @gsi_remove(%struct.gimple_stmt_iterator* %167, i8 zeroext 1), !dbg !6637
  br label %if.end76, !dbg !6638

if.end76:                                         ; preds = %if.then73, %if.end62
  br label %if.end77, !dbg !6639

if.end77:                                         ; preds = %if.end76, %lor.lhs.false54
  %168 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_join, align 8, !dbg !6640
  %tobool78 = icmp ne %struct.basic_block_def* %168, null, !dbg !6640
  br i1 %tobool78, label %if.then79, label %if.else, !dbg !6642

if.then79:                                        ; preds = %if.end77
  %169 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6643
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_join, align 8, !dbg !6644
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp80, %struct.basic_block_def* %170), !dbg !6645
  %171 = bitcast %struct.gimple_stmt_iterator* %169 to i8*, !dbg !6645
  %172 = bitcast %struct.gimple_stmt_iterator* %tmp80 to i8*, !dbg !6645
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %171, i8* align 8 %172, i64 24, i1 false), !dbg !6645
  br label %if.end81, !dbg !6646

if.else:                                          ; preds = %if.end77
  %173 = load %union.tree_node*, %union.tree_node** %tr, align 8, !dbg !6647
  store %union.tree_node* %173, %union.tree_node** %rr, align 8, !dbg !6648
  %174 = load %union.tree_node*, %union.tree_node** %ti, align 8, !dbg !6649
  store %union.tree_node* %174, %union.tree_node** %ri, align 8, !dbg !6650
  br label %if.end81

if.end81:                                         ; preds = %if.else, %if.then79
  %175 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6651
  %176 = load %union.tree_node*, %union.tree_node** %rr, align 8, !dbg !6652
  %177 = load %union.tree_node*, %union.tree_node** %ri, align 8, !dbg !6653
  call void @update_complex_assignment(%struct.gimple_stmt_iterator* %175, %union.tree_node* %176, %union.tree_node* %177), !dbg !6654
  ret void, !dbg !6655
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !6656 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6659, metadata !DIExpression()), !dbg !6660
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6661
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6662
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6663
  %1 = load i32, i32* %location, align 8, !dbg !6663
  ret i32 %1, !dbg !6664
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) #2

declare dso_local %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def*) #2

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local zeroext i8 @dom_info_available_p(i32) #2

declare dso_local void @set_immediate_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %union.tree_node* @make_rename_temp(%union.tree_node*, i8*) #2

declare dso_local i32 @integer_nonzerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6665 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6666, metadata !DIExpression()), !dbg !6667
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6668, metadata !DIExpression()), !dbg !6669
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6670, metadata !DIExpression()), !dbg !6671
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6672
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6673
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6674
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6675
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !6676
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6677
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6678
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6679
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6680
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6681
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6682
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6683
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6684
  ret void, !dbg !6685
}

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_nop() #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !6686 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6687, metadata !DIExpression()), !dbg !6688
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6689
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6689
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6689

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6690
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !6691
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !6691
  br label %cond.end, !dbg !6689

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6689

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6689
  ret %struct.gimple_seq_node_d* %cond, !dbg !6692
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !6693 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6694, metadata !DIExpression()), !dbg !6695
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6696
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6697
  ret %union.tree_node* %call, !dbg !6698
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_code(%union.gimple_statement_d* %gs, i32 %code) #0 !dbg !6699 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6702, metadata !DIExpression()), !dbg !6703
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6704, metadata !DIExpression()), !dbg !6705
  %0 = load i32, i32* %code.addr, align 4, !dbg !6706
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6707
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6708
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6709
  %bf.load = load i32, i32* %2, align 8, !dbg !6710
  %bf.value = and i32 %0, 65535, !dbg !6710
  %bf.shl = shl i32 %bf.value, 16, !dbg !6710
  %bf.clear = and i32 %bf.load, 65535, !dbg !6710
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !6710
  store i32 %bf.set, i32* %2, align 8, !dbg !6710
  ret void, !dbg !6711
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !6712 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6713, metadata !DIExpression()), !dbg !6714
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6715, metadata !DIExpression()), !dbg !6716
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6717
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6718
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6719
  ret void, !dbg !6720
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !6721 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6722, metadata !DIExpression()), !dbg !6723
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !6724, metadata !DIExpression()), !dbg !6725
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6726
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6727
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !6728
  ret void, !dbg !6729
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2925, !2926, !2927}
!llvm.ident = !{!2928}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_lower_complex", scope: !2, file: !3, line: 1616, type: !2893, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1560, globals: !2890, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-complex.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !189, !317, !323, !328, !333, !352, !359, !366, !560, !599, !625, !631, !637, !643, !648, !653, !667, !680, !1400, !1422, !1556}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !6, line: 104, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 74, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!16 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!105 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!106 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!107 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!108 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!109 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!110 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!111 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!112 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!113 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!114 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!115 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!116 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!117 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!118 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!119 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!120 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!121 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!122 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!123 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!124 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!125 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!126 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!127 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!128 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!129 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!130 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!131 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!132 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!133 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!134 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!135 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!136 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!137 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!138 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!139 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!140 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!141 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!142 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!143 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!144 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!145 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!146 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!147 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!148 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!149 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!150 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!151 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!152 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!153 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!154 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!155 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!156 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!157 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!158 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!159 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!160 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!161 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!162 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!163 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!164 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!165 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!166 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!167 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!168 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!169 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!170 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!171 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!172 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!173 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!174 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!175 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!176 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!177 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!178 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!179 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!180 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!181 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!182 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!183 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!184 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!185 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!186 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!187 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!188 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !190, line: 7, baseType: !7, size: 32, elements: !191)
!190 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316}
!192 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!281 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!282 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!283 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!284 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!285 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!286 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!287 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!288 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!289 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!290 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!291 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!292 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!293 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!294 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!295 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!296 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!297 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!298 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!299 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!300 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!301 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!302 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!303 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!304 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!305 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!306 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!307 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!308 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!309 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!310 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!311 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!312 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!313 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!314 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!315 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!316 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!317 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !318, line: 363, baseType: !7, size: 32, elements: !319)
!318 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!319 = !{!320, !321, !322}
!320 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!321 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!322 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!323 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !318, line: 355, baseType: !7, size: 32, elements: !324)
!324 = !{!325, !326, !327}
!325 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!326 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!327 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!328 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !329, line: 474, baseType: !7, size: 32, elements: !330)
!329 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!330 = !{!331, !332}
!331 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!332 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!333 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !334, line: 280, baseType: !7, size: 32, elements: !335)
!334 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!335 = !{!336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351}
!336 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!337 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !334, line: 1817, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358}
!354 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!359 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !334, line: 1805, baseType: !7, size: 32, elements: !360)
!360 = !{!361, !362, !363, !364, !365}
!361 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!366 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !334, line: 39, baseType: !7, size: 32, elements: !367)
!367 = !{!368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559}
!368 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!369 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!370 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!371 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!372 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!373 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!374 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!375 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!376 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!377 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!378 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!379 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!380 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!381 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!382 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!383 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!384 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!385 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!386 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!387 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!388 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!389 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!390 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!391 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!392 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!393 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!394 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!395 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!396 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!397 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!398 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!399 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!400 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!401 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!402 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!403 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!404 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!405 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!406 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!407 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!408 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!409 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!410 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!411 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!412 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!413 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!414 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!415 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!416 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!417 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!418 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!419 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!420 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!421 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!422 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!423 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!424 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!425 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!426 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!427 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!428 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!429 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!430 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!431 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!432 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!433 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!434 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!435 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!436 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!437 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!438 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!439 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!440 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!441 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!442 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!443 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!444 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!445 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!446 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!447 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!448 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!449 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!450 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!451 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!452 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!453 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!454 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!455 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!456 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!457 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!458 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!459 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!460 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!461 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!462 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!463 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!464 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!465 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!466 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!467 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!468 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!469 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!470 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!471 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!472 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!473 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!474 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!475 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!476 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!477 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!478 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!479 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!480 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!481 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!482 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!483 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!484 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!485 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!486 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!487 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!488 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!489 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!490 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!491 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!492 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!493 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!494 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!495 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!496 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!497 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!498 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!499 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!500 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!501 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!502 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!503 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!504 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!505 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!506 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!507 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!508 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!509 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!510 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!511 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!512 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!513 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!514 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!515 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!516 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!517 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!518 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!519 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!520 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!521 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!522 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!523 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!524 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!525 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!526 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!527 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!528 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!529 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!530 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!531 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!532 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!533 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!534 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!535 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!536 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!537 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!538 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!539 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!540 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!541 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!542 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!543 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!544 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!545 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!546 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!547 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!548 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!549 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!550 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!551 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!552 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!553 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!554 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!555 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!556 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!557 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!558 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!559 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!560 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !561, line: 51, baseType: !7, size: 32, elements: !562)
!561 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!562 = !{!563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598}
!563 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!564 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!565 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!566 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!567 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!568 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!569 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!570 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!571 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!572 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!573 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!574 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!575 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!576 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!577 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!578 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!579 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!580 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!581 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!582 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!583 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!584 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!585 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!586 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!587 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!588 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!598 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!599 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !561, line: 727, baseType: !7, size: 32, elements: !600)
!600 = !{!601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624}
!601 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!602 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!603 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!604 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!605 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!606 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!607 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!608 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!609 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!610 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!611 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!612 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!613 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!614 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!615 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!616 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!617 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!618 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!619 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!620 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!621 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!622 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!623 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!624 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!625 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !561, line: 80, baseType: !7, size: 32, elements: !626)
!626 = !{!627, !628, !629, !630}
!627 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!628 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!629 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!630 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!631 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !3, line: 41, baseType: !7, size: 32, elements: !632)
!632 = !{!633, !634, !635, !636}
!633 = !DIEnumerator(name: "UNINITIALIZED", value: 0, isUnsigned: true)
!634 = !DIEnumerator(name: "ONLY_REAL", value: 1, isUnsigned: true)
!635 = !DIEnumerator(name: "ONLY_IMAG", value: 2, isUnsigned: true)
!636 = !DIEnumerator(name: "VARYING", value: 3, isUnsigned: true)
!637 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_prop_result", file: !638, line: 44, baseType: !7, size: 32, elements: !639)
!638 = !DIFile(filename: "./tree-ssa-propagate.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!639 = !{!640, !641, !642}
!640 = !DIEnumerator(name: "SSA_PROP_NOT_INTERESTING", value: 0, isUnsigned: true)
!641 = !DIEnumerator(name: "SSA_PROP_INTERESTING", value: 1, isUnsigned: true)
!642 = !DIEnumerator(name: "SSA_PROP_VARYING", value: 2, isUnsigned: true)
!643 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !644, line: 147, baseType: !7, size: 32, elements: !645)
!644 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!645 = !{!646, !647}
!646 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!647 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!648 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !561, line: 4603, baseType: !7, size: 32, elements: !649)
!649 = !{!650, !651, !652}
!650 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!651 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!652 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!653 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !318, line: 295, baseType: !7, size: 32, elements: !654)
!654 = !{!655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666}
!655 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!656 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!657 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!658 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!659 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!660 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!661 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!662 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!663 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!664 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!665 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!666 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!667 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !334, line: 58, baseType: !7, size: 32, elements: !668)
!668 = !{!669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679}
!669 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!670 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!671 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!672 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!673 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!674 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!675 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!676 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!677 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!678 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!679 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!680 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !334, line: 220, baseType: !7, size: 32, elements: !681)
!681 = !{!682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399}
!682 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1399 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1400 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !1401, line: 36, baseType: !7, size: 32, elements: !1402)
!1401 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1402 = !{!1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421}
!1403 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!1404 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!1405 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!1406 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!1407 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!1408 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!1409 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!1410 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!1411 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!1412 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!1413 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!1414 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!1415 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!1416 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!1417 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!1418 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!1419 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!1420 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!1421 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!1422 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !334, line: 3410, baseType: !7, size: 32, elements: !1423)
!1423 = !{!1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555}
!1424 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1425 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1426 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1427 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1428 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1429 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1430 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1431 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1432 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1433 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1434 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1435 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1436 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1437 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1438 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1439 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1440 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1441 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1442 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1443 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1444 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1445 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1446 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1447 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1448 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1449 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1450 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1451 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1452 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1453 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1454 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1455 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1456 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1457 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1458 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1459 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1460 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1461 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1462 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1463 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1464 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1465 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1466 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1467 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1468 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1469 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1470 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1471 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1472 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1473 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1474 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1475 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1476 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1477 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1478 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1479 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1480 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1481 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1482 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1483 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1484 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1485 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1486 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1487 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1488 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1489 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1490 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1491 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1492 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1493 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1494 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1495 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1496 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1497 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1498 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1499 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1500 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1501 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1502 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1503 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1504 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1505 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1506 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1507 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1508 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1509 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1510 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1511 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1512 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1513 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1514 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1515 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1516 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1517 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1518 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1519 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1520 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1521 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1522 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1523 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1524 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1525 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1526 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1527 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1528 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1529 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1530 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1531 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1532 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1533 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1534 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1535 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1536 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1537 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1538 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1539 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1540 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1541 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1542 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1543 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1544 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1545 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1546 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1547 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1548 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1549 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1550 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1551 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1552 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1553 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1554 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1555 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1556 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !318, line: 912, baseType: !7, size: 32, elements: !1557)
!1557 = !{!1558, !1559}
!1558 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!1559 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!1560 = !{!1561, !1845, !366, !7, !1893, !2862, !1927, !1830, !625, !1658, !2864, !2877, !2882, !1765, !2887, !1400, !680, !1563, !2888, !1691}
!1561 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1562, line: 56, baseType: !1563)
!1562 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1564, size: 64)
!1564 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !334, line: 3371, size: 1792, elements: !1565)
!1565 = !{!1566, !1599, !1605, !1618, !1637, !1648, !1653, !1664, !1670, !1684, !1696, !1734, !2196, !2224, !2241, !2242, !2247, !2256, !2262, !2267, !2271, !2275, !2513, !2560, !2566, !2572, !2579, !2592, !2606, !2623, !2635, !2657, !2672, !2844}
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1564, file: !334, line: 3372, baseType: !1567, size: 64)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !334, line: 360, size: 64, elements: !1568)
!1568 = !{!1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1567, file: !334, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1567, file: !334, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1567, file: !334, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1567, file: !334, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1567, file: !334, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1567, file: !334, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1567, file: !334, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1567, file: !334, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1567, file: !334, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1567, file: !334, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1567, file: !334, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1567, file: !334, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1567, file: !334, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1567, file: !334, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1567, file: !334, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1567, file: !334, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1567, file: !334, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1567, file: !334, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1567, file: !334, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1567, file: !334, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1567, file: !334, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1567, file: !334, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1567, file: !334, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1567, file: !334, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1567, file: !334, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1567, file: !334, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1567, file: !334, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1567, file: !334, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1567, file: !334, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1567, file: !334, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1564, file: !334, line: 3373, baseType: !1600, size: 192)
!1600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !334, line: 402, size: 192, elements: !1601)
!1601 = !{!1602, !1603, !1604}
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1600, file: !334, line: 403, baseType: !1567, size: 64)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1600, file: !334, line: 404, baseType: !1561, size: 64, offset: 64)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1600, file: !334, line: 405, baseType: !1561, size: 64, offset: 128)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1564, file: !334, line: 3374, baseType: !1606, size: 320)
!1606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !334, line: 1384, size: 320, elements: !1607)
!1607 = !{!1608, !1609}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1606, file: !334, line: 1385, baseType: !1600, size: 192)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1606, file: !334, line: 1386, baseType: !1610, size: 128, offset: 192)
!1610 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1611, line: 58, baseType: !1612)
!1611 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1612 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1611, line: 54, size: 128, elements: !1613)
!1613 = !{!1614, !1616}
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1612, file: !1611, line: 56, baseType: !1615, size: 64)
!1615 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1612, file: !1611, line: 57, baseType: !1617, size: 64, offset: 64)
!1617 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1564, file: !334, line: 3375, baseType: !1619, size: 256)
!1619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !334, line: 1397, size: 256, elements: !1620)
!1620 = !{!1621, !1622}
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1619, file: !334, line: 1398, baseType: !1600, size: 192)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1619, file: !334, line: 1399, baseType: !1623, size: 64, offset: 192)
!1623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1624, size: 64)
!1624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1625, line: 52, size: 256, elements: !1626)
!1625 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1626 = !{!1627, !1628, !1629, !1630, !1631, !1632, !1633}
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1624, file: !1625, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1624, file: !1625, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1624, file: !1625, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1624, file: !1625, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1624, file: !1625, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1624, file: !1625, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1624, file: !1625, line: 62, baseType: !1634, size: 192, offset: 64)
!1634 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1615, size: 192, elements: !1635)
!1635 = !{!1636}
!1636 = !DISubrange(count: 3)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1564, file: !334, line: 3376, baseType: !1638, size: 256)
!1638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !334, line: 1408, size: 256, elements: !1639)
!1639 = !{!1640, !1641}
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1638, file: !334, line: 1409, baseType: !1600, size: 192)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1638, file: !334, line: 1410, baseType: !1642, size: 64, offset: 192)
!1642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1643, size: 64)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1644, line: 27, size: 192, elements: !1645)
!1644 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1645 = !{!1646, !1647}
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1643, file: !1644, line: 29, baseType: !1610, size: 128)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1643, file: !1644, line: 30, baseType: !189, size: 32, offset: 128)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1564, file: !334, line: 3377, baseType: !1649, size: 256)
!1649 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !334, line: 1437, size: 256, elements: !1650)
!1650 = !{!1651, !1652}
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1649, file: !334, line: 1438, baseType: !1600, size: 192)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1649, file: !334, line: 1439, baseType: !1561, size: 64, offset: 192)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1564, file: !334, line: 3378, baseType: !1654, size: 256)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !334, line: 1418, size: 256, elements: !1655)
!1655 = !{!1656, !1657, !1659}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1654, file: !334, line: 1419, baseType: !1600, size: 192)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1654, file: !334, line: 1420, baseType: !1658, size: 32, offset: 192)
!1658 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1654, file: !334, line: 1421, baseType: !1660, size: 8, offset: 224)
!1660 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1661, size: 8, elements: !1662)
!1661 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1662 = !{!1663}
!1663 = !DISubrange(count: 1)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1564, file: !334, line: 3379, baseType: !1665, size: 320)
!1665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !334, line: 1428, size: 320, elements: !1666)
!1666 = !{!1667, !1668, !1669}
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1665, file: !334, line: 1429, baseType: !1600, size: 192)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1665, file: !334, line: 1430, baseType: !1561, size: 64, offset: 192)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1665, file: !334, line: 1431, baseType: !1561, size: 64, offset: 256)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1564, file: !334, line: 3380, baseType: !1671, size: 320)
!1671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !334, line: 1460, size: 320, elements: !1672)
!1672 = !{!1673, !1674}
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1671, file: !334, line: 1461, baseType: !1600, size: 192)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1671, file: !334, line: 1462, baseType: !1675, size: 128, offset: 192)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1676, line: 31, size: 128, elements: !1677)
!1676 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1677 = !{!1678, !1682, !1683}
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1675, file: !1676, line: 32, baseType: !1679, size: 64)
!1679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1680, size: 64)
!1680 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1681)
!1681 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1675, file: !1676, line: 33, baseType: !7, size: 32, offset: 64)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1675, file: !1676, line: 34, baseType: !7, size: 32, offset: 96)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1564, file: !334, line: 3381, baseType: !1685, size: 384)
!1685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !334, line: 2507, size: 384, elements: !1686)
!1686 = !{!1687, !1688, !1693, !1694, !1695}
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1685, file: !334, line: 2508, baseType: !1600, size: 192)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1685, file: !334, line: 2509, baseType: !1689, size: 32, offset: 192)
!1689 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1690, line: 58, baseType: !1691)
!1690 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1691 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1692, line: 44, baseType: !7)
!1692 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1685, file: !334, line: 2510, baseType: !7, size: 32, offset: 224)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1685, file: !334, line: 2511, baseType: !1561, size: 64, offset: 256)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1685, file: !334, line: 2512, baseType: !1561, size: 64, offset: 320)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1564, file: !334, line: 3382, baseType: !1697, size: 896)
!1697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !334, line: 2652, size: 896, elements: !1698)
!1698 = !{!1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731}
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1697, file: !334, line: 2653, baseType: !1685, size: 384)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1697, file: !334, line: 2654, baseType: !1561, size: 64, offset: 384)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1697, file: !334, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1697, file: !334, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1697, file: !334, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1697, file: !334, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1697, file: !334, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1697, file: !334, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1697, file: !334, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1697, file: !334, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1697, file: !334, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1697, file: !334, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1697, file: !334, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1697, file: !334, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1697, file: !334, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1697, file: !334, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1697, file: !334, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1697, file: !334, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1697, file: !334, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1697, file: !334, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1697, file: !334, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1697, file: !334, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1697, file: !334, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1697, file: !334, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1697, file: !334, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1697, file: !334, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1697, file: !334, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1697, file: !334, line: 2703, baseType: !7, size: 32, offset: 512)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1697, file: !334, line: 2705, baseType: !1561, size: 64, offset: 576)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1697, file: !334, line: 2706, baseType: !1561, size: 64, offset: 640)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1697, file: !334, line: 2707, baseType: !1561, size: 64, offset: 704)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1697, file: !334, line: 2708, baseType: !1561, size: 64, offset: 768)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1697, file: !334, line: 2711, baseType: !1732, size: 64, offset: 832)
!1732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1733, size: 64)
!1733 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !334, line: 2711, flags: DIFlagFwdDecl)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1564, file: !334, line: 3383, baseType: !1735, size: 960)
!1735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !334, line: 2756, size: 960, elements: !1736)
!1736 = !{!1737, !1738}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1735, file: !334, line: 2757, baseType: !1697, size: 896)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1735, file: !334, line: 2758, baseType: !1739, size: 64, offset: 896)
!1739 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1562, line: 50, baseType: !1740)
!1740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1741, size: 64)
!1741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1742, line: 240, size: 384, elements: !1743)
!1742 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1743 = !{!1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754}
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1741, file: !1742, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1741, file: !1742, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1741, file: !1742, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1741, file: !1742, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1741, file: !1742, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1741, file: !1742, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1741, file: !1742, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1741, file: !1742, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1741, file: !1742, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1741, file: !1742, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1741, file: !1742, line: 321, baseType: !1755, size: 320, offset: 64)
!1755 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1742, line: 315, size: 320, elements: !1756)
!1756 = !{!1757, !2163, !2165, !2194, !2195}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1755, file: !1742, line: 316, baseType: !1758, size: 64)
!1758 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1759, size: 64, elements: !1662)
!1759 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1742, line: 183, baseType: !1760)
!1760 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1742, line: 166, size: 64, elements: !1761)
!1761 = !{!1762, !1763, !1764, !1767, !1768, !1776, !1777, !1789, !1792, !1854, !1855, !2140, !2153, !2160}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1760, file: !1742, line: 168, baseType: !1658, size: 32)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1760, file: !1742, line: 169, baseType: !7, size: 32)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1760, file: !1742, line: 170, baseType: !1765, size: 64)
!1765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1766, size: 64)
!1766 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1661)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1760, file: !1742, line: 171, baseType: !1739, size: 64)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1760, file: !1742, line: 172, baseType: !1769, size: 64)
!1769 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1562, line: 53, baseType: !1770)
!1770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1771, size: 64)
!1771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1742, line: 359, size: 128, elements: !1772)
!1772 = !{!1773, !1774}
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1771, file: !1742, line: 360, baseType: !1658, size: 32)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1771, file: !1742, line: 361, baseType: !1775, size: 64, offset: 64)
!1775 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1739, size: 64, elements: !1662)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1760, file: !1742, line: 173, baseType: !189, size: 32)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1760, file: !1742, line: 174, baseType: !1778, size: 32)
!1778 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1742, line: 133, baseType: !1779)
!1779 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1742, line: 115, size: 32, elements: !1780)
!1780 = !{!1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788}
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1779, file: !1742, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1779, file: !1742, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1779, file: !1742, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1779, file: !1742, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1779, file: !1742, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1779, file: !1742, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1779, file: !1742, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1779, file: !1742, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1760, file: !1742, line: 175, baseType: !1790, size: 64)
!1790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1791, size: 64)
!1791 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1742, line: 175, flags: DIFlagFwdDecl)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1760, file: !1742, line: 176, baseType: !1793, size: 64)
!1793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1794, size: 64)
!1794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1795, line: 75, size: 256, elements: !1796)
!1795 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1796 = !{!1797, !1811, !1812, !1813}
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1794, file: !1795, line: 76, baseType: !1798, size: 64)
!1798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1799, size: 64)
!1799 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1795, line: 68, baseType: !1800)
!1800 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1795, line: 63, size: 320, elements: !1801)
!1801 = !{!1802, !1804, !1805, !1806}
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1800, file: !1795, line: 64, baseType: !1803, size: 64)
!1803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1800, size: 64)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1800, file: !1795, line: 65, baseType: !1803, size: 64, offset: 64)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1800, file: !1795, line: 66, baseType: !7, size: 32, offset: 128)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1800, file: !1795, line: 67, baseType: !1807, size: 128, offset: 192)
!1807 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1808, size: 128, elements: !1809)
!1808 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1795, line: 29, baseType: !1615)
!1809 = !{!1810}
!1810 = !DISubrange(count: 2)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1794, file: !1795, line: 77, baseType: !1798, size: 64, offset: 64)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1794, file: !1795, line: 78, baseType: !7, size: 32, offset: 128)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1794, file: !1795, line: 79, baseType: !1814, size: 64, offset: 192)
!1814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1815, size: 64)
!1815 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1795, line: 49, baseType: !1816)
!1816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1795, line: 45, size: 832, elements: !1817)
!1817 = !{!1818, !1819, !1820}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1816, file: !1795, line: 46, baseType: !1803, size: 64)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1816, file: !1795, line: 47, baseType: !1793, size: 64, offset: 64)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1816, file: !1795, line: 48, baseType: !1821, size: 704, offset: 128)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1822, line: 164, size: 704, elements: !1823)
!1822 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1823 = !{!1824, !1825, !1836, !1837, !1838, !1839, !1840, !1841, !1846, !1850, !1851, !1852, !1853}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1821, file: !1822, line: 166, baseType: !1617, size: 64)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1821, file: !1822, line: 167, baseType: !1826, size: 64, offset: 64)
!1826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1827, size: 64)
!1827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1822, line: 157, size: 192, elements: !1828)
!1828 = !{!1829, !1831, !1832}
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1827, file: !1822, line: 159, baseType: !1830, size: 64)
!1830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1661, size: 64)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1827, file: !1822, line: 160, baseType: !1826, size: 64, offset: 64)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1827, file: !1822, line: 161, baseType: !1833, size: 32, offset: 128)
!1833 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1661, size: 32, elements: !1834)
!1834 = !{!1835}
!1835 = !DISubrange(count: 4)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1821, file: !1822, line: 168, baseType: !1830, size: 64, offset: 128)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1821, file: !1822, line: 169, baseType: !1830, size: 64, offset: 192)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1821, file: !1822, line: 170, baseType: !1830, size: 64, offset: 256)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1821, file: !1822, line: 171, baseType: !1617, size: 64, offset: 320)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1821, file: !1822, line: 172, baseType: !1658, size: 32, offset: 384)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1821, file: !1822, line: 176, baseType: !1842, size: 64, offset: 448)
!1842 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1843, size: 64)
!1843 = !DISubroutineType(types: !1844)
!1844 = !{!1826, !1845, !1617}
!1845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1821, file: !1822, line: 177, baseType: !1847, size: 64, offset: 512)
!1847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1848, size: 64)
!1848 = !DISubroutineType(types: !1849)
!1849 = !{null, !1845, !1826}
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1821, file: !1822, line: 178, baseType: !1845, size: 64, offset: 576)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1821, file: !1822, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1821, file: !1822, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1821, file: !1822, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1760, file: !1742, line: 177, baseType: !1561, size: 64)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1760, file: !1742, line: 178, baseType: !1856, size: 64)
!1856 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1857, size: 64)
!1857 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !318, line: 217, size: 832, elements: !1858)
!1858 = !{!1859, !2105, !2106, !2107, !2110, !2114, !2115, !2116, !2134, !2135, !2136, !2137, !2138, !2139}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1857, file: !318, line: 219, baseType: !1860, size: 64)
!1860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1861, size: 64)
!1861 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !318, line: 151, baseType: !1862)
!1862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !318, line: 151, size: 128, elements: !1863)
!1863 = !{!1864}
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1862, file: !318, line: 151, baseType: !1865, size: 128)
!1865 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !318, line: 150, baseType: !1866)
!1866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !318, line: 150, size: 128, elements: !1867)
!1867 = !{!1868, !1869, !1870}
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1866, file: !318, line: 150, baseType: !7, size: 32)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1866, file: !318, line: 150, baseType: !7, size: 32, offset: 32)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1866, file: !318, line: 150, baseType: !1871, size: 64, offset: 64)
!1871 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1872, size: 64, elements: !1662)
!1872 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1562, line: 108, baseType: !1873)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!1874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !318, line: 122, size: 512, elements: !1875)
!1875 = !{!1876, !1877, !1878, !2097, !2098, !2099, !2100, !2101, !2102, !2103}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1874, file: !318, line: 124, baseType: !1856, size: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1874, file: !318, line: 125, baseType: !1856, size: 64, offset: 64)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1874, file: !318, line: 131, baseType: !1879, size: 64, offset: 128)
!1879 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !318, line: 128, size: 64, elements: !1880)
!1880 = !{!1881, !2096}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1879, file: !318, line: 129, baseType: !1882, size: 64)
!1882 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1562, line: 66, baseType: !1883)
!1883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1884, size: 64)
!1884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !561, line: 143, size: 192, elements: !1885)
!1885 = !{!1886, !2094, !2095}
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1884, file: !561, line: 145, baseType: !1887, size: 64)
!1887 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1562, line: 69, baseType: !1888)
!1888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1889, size: 64)
!1889 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !561, line: 136, size: 192, elements: !1890)
!1890 = !{!1891, !2092, !2093}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1889, file: !561, line: 137, baseType: !1892, size: 64)
!1892 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1562, line: 58, baseType: !1893)
!1893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1894, size: 64)
!1894 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !561, line: 737, size: 768, elements: !1895)
!1895 = !{!1896, !1913, !1947, !1953, !1958, !1963, !1970, !1976, !1982, !1987, !2001, !2006, !2012, !2017, !2027, !2032, !2050, !2057, !2064, !2070, !2075, !2081, !2087}
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1894, file: !561, line: 738, baseType: !1897, size: 256)
!1897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !561, line: 271, size: 256, elements: !1898)
!1898 = !{!1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912}
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1897, file: !561, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1897, file: !561, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1897, file: !561, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1897, file: !561, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1897, file: !561, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1897, file: !561, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1897, file: !561, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1897, file: !561, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1897, file: !561, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1897, file: !561, line: 312, baseType: !7, size: 32, offset: 32)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1897, file: !561, line: 316, baseType: !1689, size: 32, offset: 64)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1897, file: !561, line: 319, baseType: !7, size: 32, offset: 96)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1897, file: !561, line: 323, baseType: !1856, size: 64, offset: 128)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1897, file: !561, line: 327, baseType: !1561, size: 64, offset: 192)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1894, file: !561, line: 739, baseType: !1914, size: 448)
!1914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !561, line: 350, size: 448, elements: !1915)
!1915 = !{!1916, !1945}
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1914, file: !561, line: 353, baseType: !1917, size: 384)
!1917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !561, line: 333, size: 384, elements: !1918)
!1918 = !{!1919, !1920, !1928}
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1917, file: !561, line: 336, baseType: !1897, size: 256)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1917, file: !561, line: 343, baseType: !1921, size: 64, offset: 256)
!1921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1922, size: 64)
!1922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1923, line: 37, size: 128, elements: !1924)
!1923 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1924 = !{!1925, !1926}
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1922, file: !1923, line: 39, baseType: !1921, size: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1922, file: !1923, line: 40, baseType: !1927, size: 64, offset: 64)
!1927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1561, size: 64)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1917, file: !561, line: 344, baseType: !1929, size: 64, offset: 320)
!1929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1930, size: 64)
!1930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1923, line: 45, size: 320, elements: !1931)
!1931 = !{!1932, !1933}
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1930, file: !1923, line: 47, baseType: !1929, size: 64)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1930, file: !1923, line: 48, baseType: !1934, size: 256, offset: 64)
!1934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !334, line: 1883, size: 256, elements: !1935)
!1935 = !{!1936, !1938, !1939, !1944}
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1934, file: !334, line: 1884, baseType: !1937, size: 64)
!1937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1934, size: 64)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1934, file: !334, line: 1885, baseType: !1937, size: 64, offset: 64)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1934, file: !334, line: 1891, baseType: !1940, size: 64, offset: 128)
!1940 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1934, file: !334, line: 1891, size: 64, elements: !1941)
!1941 = !{!1942, !1943}
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1940, file: !334, line: 1891, baseType: !1892, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1940, file: !334, line: 1891, baseType: !1561, size: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1934, file: !334, line: 1892, baseType: !1927, size: 64, offset: 192)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1914, file: !561, line: 359, baseType: !1946, size: 64, offset: 384)
!1946 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1561, size: 64, elements: !1662)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1894, file: !561, line: 740, baseType: !1948, size: 512)
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !561, line: 365, size: 512, elements: !1949)
!1949 = !{!1950, !1951, !1952}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1948, file: !561, line: 368, baseType: !1917, size: 384)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1948, file: !561, line: 373, baseType: !1561, size: 64, offset: 384)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1948, file: !561, line: 374, baseType: !1561, size: 64, offset: 448)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1894, file: !561, line: 741, baseType: !1954, size: 576)
!1954 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !561, line: 380, size: 576, elements: !1955)
!1955 = !{!1956, !1957}
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1954, file: !561, line: 383, baseType: !1948, size: 512)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1954, file: !561, line: 389, baseType: !1946, size: 64, offset: 512)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1894, file: !561, line: 742, baseType: !1959, size: 320)
!1959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !561, line: 395, size: 320, elements: !1960)
!1960 = !{!1961, !1962}
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1959, file: !561, line: 397, baseType: !1897, size: 256)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1959, file: !561, line: 400, baseType: !1882, size: 64, offset: 256)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1894, file: !561, line: 743, baseType: !1964, size: 448)
!1964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !561, line: 406, size: 448, elements: !1965)
!1965 = !{!1966, !1967, !1968, !1969}
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1964, file: !561, line: 408, baseType: !1897, size: 256)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1964, file: !561, line: 412, baseType: !1561, size: 64, offset: 256)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1964, file: !561, line: 420, baseType: !1561, size: 64, offset: 320)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1964, file: !561, line: 423, baseType: !1882, size: 64, offset: 384)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1894, file: !561, line: 744, baseType: !1971, size: 384)
!1971 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !561, line: 429, size: 384, elements: !1972)
!1972 = !{!1973, !1974, !1975}
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1971, file: !561, line: 431, baseType: !1897, size: 256)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1971, file: !561, line: 434, baseType: !1561, size: 64, offset: 256)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1971, file: !561, line: 437, baseType: !1882, size: 64, offset: 320)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1894, file: !561, line: 745, baseType: !1977, size: 384)
!1977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !561, line: 443, size: 384, elements: !1978)
!1978 = !{!1979, !1980, !1981}
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1977, file: !561, line: 445, baseType: !1897, size: 256)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1977, file: !561, line: 449, baseType: !1561, size: 64, offset: 256)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1977, file: !561, line: 453, baseType: !1882, size: 64, offset: 320)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1894, file: !561, line: 746, baseType: !1983, size: 320)
!1983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !561, line: 459, size: 320, elements: !1984)
!1984 = !{!1985, !1986}
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1983, file: !561, line: 461, baseType: !1897, size: 256)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1983, file: !561, line: 464, baseType: !1561, size: 64, offset: 256)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1894, file: !561, line: 747, baseType: !1988, size: 768)
!1988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !561, line: 469, size: 768, elements: !1989)
!1989 = !{!1990, !1991, !1992, !1993, !1994}
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1988, file: !561, line: 471, baseType: !1897, size: 256)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1988, file: !561, line: 474, baseType: !7, size: 32, offset: 256)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1988, file: !561, line: 475, baseType: !7, size: 32, offset: 288)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1988, file: !561, line: 478, baseType: !1561, size: 64, offset: 320)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1988, file: !561, line: 481, baseType: !1995, size: 384, offset: 384)
!1995 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1996, size: 384, elements: !1662)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !334, line: 1917, size: 384, elements: !1997)
!1997 = !{!1998, !1999, !2000}
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1996, file: !334, line: 1920, baseType: !1934, size: 256)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1996, file: !334, line: 1921, baseType: !1561, size: 64, offset: 256)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1996, file: !334, line: 1922, baseType: !1689, size: 32, offset: 320)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1894, file: !561, line: 748, baseType: !2002, size: 320)
!2002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !561, line: 487, size: 320, elements: !2003)
!2003 = !{!2004, !2005}
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2002, file: !561, line: 490, baseType: !1897, size: 256)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2002, file: !561, line: 494, baseType: !1658, size: 32, offset: 256)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1894, file: !561, line: 749, baseType: !2007, size: 384)
!2007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !561, line: 500, size: 384, elements: !2008)
!2008 = !{!2009, !2010, !2011}
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2007, file: !561, line: 502, baseType: !1897, size: 256)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2007, file: !561, line: 506, baseType: !1882, size: 64, offset: 256)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2007, file: !561, line: 510, baseType: !1882, size: 64, offset: 320)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1894, file: !561, line: 750, baseType: !2013, size: 320)
!2013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !561, line: 529, size: 320, elements: !2014)
!2014 = !{!2015, !2016}
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2013, file: !561, line: 531, baseType: !1897, size: 256)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2013, file: !561, line: 540, baseType: !1882, size: 64, offset: 256)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1894, file: !561, line: 751, baseType: !2018, size: 704)
!2018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !561, line: 546, size: 704, elements: !2019)
!2019 = !{!2020, !2021, !2022, !2023, !2024, !2025, !2026}
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2018, file: !561, line: 549, baseType: !1948, size: 512)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2018, file: !561, line: 553, baseType: !1765, size: 64, offset: 512)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2018, file: !561, line: 557, baseType: !1681, size: 8, offset: 576)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2018, file: !561, line: 558, baseType: !1681, size: 8, offset: 584)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2018, file: !561, line: 559, baseType: !1681, size: 8, offset: 592)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2018, file: !561, line: 560, baseType: !1681, size: 8, offset: 600)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2018, file: !561, line: 566, baseType: !1946, size: 64, offset: 640)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1894, file: !561, line: 752, baseType: !2028, size: 384)
!2028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !561, line: 571, size: 384, elements: !2029)
!2029 = !{!2030, !2031}
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2028, file: !561, line: 573, baseType: !1959, size: 320)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2028, file: !561, line: 577, baseType: !1561, size: 64, offset: 320)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1894, file: !561, line: 753, baseType: !2033, size: 576)
!2033 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !561, line: 600, size: 576, elements: !2034)
!2034 = !{!2035, !2036, !2037, !2040, !2049}
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2033, file: !561, line: 602, baseType: !1959, size: 320)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2033, file: !561, line: 605, baseType: !1561, size: 64, offset: 320)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2033, file: !561, line: 609, baseType: !2038, size: 64, offset: 384)
!2038 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2039, line: 46, baseType: !1615)
!2039 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2033, file: !561, line: 612, baseType: !2041, size: 64, offset: 448)
!2041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2042, size: 64)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !561, line: 581, size: 320, elements: !2043)
!2043 = !{!2044, !2045, !2046, !2047, !2048}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2042, file: !561, line: 583, baseType: !366, size: 32)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2042, file: !561, line: 586, baseType: !1561, size: 64, offset: 64)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2042, file: !561, line: 589, baseType: !1561, size: 64, offset: 128)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2042, file: !561, line: 592, baseType: !1561, size: 64, offset: 192)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2042, file: !561, line: 595, baseType: !1561, size: 64, offset: 256)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2033, file: !561, line: 616, baseType: !1882, size: 64, offset: 512)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1894, file: !561, line: 754, baseType: !2051, size: 512)
!2051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !561, line: 622, size: 512, elements: !2052)
!2052 = !{!2053, !2054, !2055, !2056}
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2051, file: !561, line: 624, baseType: !1959, size: 320)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2051, file: !561, line: 628, baseType: !1561, size: 64, offset: 320)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2051, file: !561, line: 632, baseType: !1561, size: 64, offset: 384)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2051, file: !561, line: 636, baseType: !1561, size: 64, offset: 448)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1894, file: !561, line: 755, baseType: !2058, size: 704)
!2058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !561, line: 642, size: 704, elements: !2059)
!2059 = !{!2060, !2061, !2062, !2063}
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2058, file: !561, line: 644, baseType: !2051, size: 512)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2058, file: !561, line: 648, baseType: !1561, size: 64, offset: 512)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2058, file: !561, line: 652, baseType: !1561, size: 64, offset: 576)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2058, file: !561, line: 653, baseType: !1561, size: 64, offset: 640)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1894, file: !561, line: 756, baseType: !2065, size: 448)
!2065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !561, line: 663, size: 448, elements: !2066)
!2066 = !{!2067, !2068, !2069}
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2065, file: !561, line: 665, baseType: !1959, size: 320)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2065, file: !561, line: 668, baseType: !1561, size: 64, offset: 320)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2065, file: !561, line: 673, baseType: !1561, size: 64, offset: 384)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1894, file: !561, line: 757, baseType: !2071, size: 384)
!2071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !561, line: 694, size: 384, elements: !2072)
!2072 = !{!2073, !2074}
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2071, file: !561, line: 696, baseType: !1959, size: 320)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2071, file: !561, line: 699, baseType: !1561, size: 64, offset: 320)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1894, file: !561, line: 758, baseType: !2076, size: 384)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !561, line: 681, size: 384, elements: !2077)
!2077 = !{!2078, !2079, !2080}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2076, file: !561, line: 683, baseType: !1897, size: 256)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2076, file: !561, line: 686, baseType: !1561, size: 64, offset: 256)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2076, file: !561, line: 689, baseType: !1561, size: 64, offset: 320)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1894, file: !561, line: 759, baseType: !2082, size: 384)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !561, line: 707, size: 384, elements: !2083)
!2083 = !{!2084, !2085, !2086}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2082, file: !561, line: 709, baseType: !1897, size: 256)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2082, file: !561, line: 712, baseType: !1561, size: 64, offset: 256)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2082, file: !561, line: 712, baseType: !1561, size: 64, offset: 320)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1894, file: !561, line: 760, baseType: !2088, size: 320)
!2088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !561, line: 718, size: 320, elements: !2089)
!2089 = !{!2090, !2091}
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2088, file: !561, line: 720, baseType: !1897, size: 256)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2088, file: !561, line: 723, baseType: !1561, size: 64, offset: 256)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1889, file: !561, line: 138, baseType: !1888, size: 64, offset: 64)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1889, file: !561, line: 139, baseType: !1888, size: 64, offset: 128)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1884, file: !561, line: 146, baseType: !1887, size: 64, offset: 64)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1884, file: !561, line: 152, baseType: !1882, size: 64, offset: 128)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1879, file: !318, line: 130, baseType: !1739, size: 64)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1874, file: !318, line: 134, baseType: !1845, size: 64, offset: 192)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1874, file: !318, line: 137, baseType: !1561, size: 64, offset: 256)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1874, file: !318, line: 138, baseType: !1689, size: 32, offset: 320)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1874, file: !318, line: 142, baseType: !7, size: 32, offset: 352)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1874, file: !318, line: 144, baseType: !1658, size: 32, offset: 384)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1874, file: !318, line: 145, baseType: !1658, size: 32, offset: 416)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1874, file: !318, line: 146, baseType: !2104, size: 64, offset: 448)
!2104 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !318, line: 119, baseType: !1617)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1857, file: !318, line: 220, baseType: !1860, size: 64, offset: 64)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1857, file: !318, line: 223, baseType: !1845, size: 64, offset: 128)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1857, file: !318, line: 226, baseType: !2108, size: 64, offset: 192)
!2108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2109, size: 64)
!2109 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !318, line: 185, flags: DIFlagFwdDecl)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1857, file: !318, line: 229, baseType: !2111, size: 128, offset: 256)
!2111 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2112, size: 128, elements: !1809)
!2112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2113, size: 64)
!2113 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !318, line: 229, flags: DIFlagFwdDecl)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1857, file: !318, line: 232, baseType: !1856, size: 64, offset: 384)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1857, file: !318, line: 233, baseType: !1856, size: 64, offset: 448)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1857, file: !318, line: 238, baseType: !2117, size: 64, offset: 512)
!2117 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !318, line: 235, size: 64, elements: !2118)
!2118 = !{!2119, !2125}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2117, file: !318, line: 236, baseType: !2120, size: 64)
!2120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2121, size: 64)
!2121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !318, line: 273, size: 128, elements: !2122)
!2122 = !{!2123, !2124}
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2121, file: !318, line: 275, baseType: !1882, size: 64)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2121, file: !318, line: 278, baseType: !1882, size: 64, offset: 64)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2117, file: !318, line: 237, baseType: !2126, size: 64)
!2126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2127, size: 64)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !318, line: 259, size: 320, elements: !2128)
!2128 = !{!2129, !2130, !2131, !2132, !2133}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2127, file: !318, line: 261, baseType: !1739, size: 64)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2127, file: !318, line: 262, baseType: !1739, size: 64, offset: 64)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2127, file: !318, line: 266, baseType: !1739, size: 64, offset: 128)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2127, file: !318, line: 267, baseType: !1739, size: 64, offset: 192)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2127, file: !318, line: 270, baseType: !1658, size: 32, offset: 256)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1857, file: !318, line: 241, baseType: !2104, size: 64, offset: 576)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1857, file: !318, line: 244, baseType: !1658, size: 32, offset: 640)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1857, file: !318, line: 247, baseType: !1658, size: 32, offset: 672)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1857, file: !318, line: 250, baseType: !1658, size: 32, offset: 704)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1857, file: !318, line: 253, baseType: !1658, size: 32, offset: 736)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1857, file: !318, line: 256, baseType: !1658, size: 32, offset: 768)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1760, file: !1742, line: 179, baseType: !2141, size: 64)
!2141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2142, size: 64)
!2142 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1742, line: 150, baseType: !2143)
!2143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1742, line: 142, size: 320, elements: !2144)
!2144 = !{!2145, !2146, !2147, !2148, !2151, !2152}
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2143, file: !1742, line: 144, baseType: !1561, size: 64)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2143, file: !1742, line: 145, baseType: !1739, size: 64, offset: 64)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2143, file: !1742, line: 146, baseType: !1739, size: 64, offset: 128)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2143, file: !1742, line: 147, baseType: !2149, size: 32, offset: 192)
!2149 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2150, line: 31, baseType: !1658)
!2150 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2143, file: !1742, line: 148, baseType: !7, size: 32, offset: 224)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2143, file: !1742, line: 149, baseType: !1681, size: 8, offset: 256)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1760, file: !1742, line: 180, baseType: !2154, size: 64)
!2154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2155, size: 64)
!2155 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1742, line: 162, baseType: !2156)
!2156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1742, line: 159, size: 128, elements: !2157)
!2157 = !{!2158, !2159}
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2156, file: !1742, line: 160, baseType: !1561, size: 64)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2156, file: !1742, line: 161, baseType: !1617, size: 64, offset: 64)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1760, file: !1742, line: 181, baseType: !2161, size: 64)
!2161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2162, size: 64)
!2162 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1742, line: 181, flags: DIFlagFwdDecl)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1755, file: !1742, line: 317, baseType: !2164, size: 64)
!2164 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1617, size: 64, elements: !1662)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1755, file: !1742, line: 318, baseType: !2166, size: 320)
!2166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1742, line: 188, size: 320, elements: !2167)
!2167 = !{!2168, !2170, !2193}
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2166, file: !1742, line: 190, baseType: !2169, size: 192)
!2169 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1759, size: 192, elements: !1635)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2166, file: !1742, line: 193, baseType: !2171, size: 64, offset: 192)
!2171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2172, size: 64)
!2172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1742, line: 206, size: 320, elements: !2173)
!2173 = !{!2174, !2178, !2179, !2180, !2192}
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2172, file: !1742, line: 208, baseType: !2175, size: 64)
!2175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2176, size: 64)
!2176 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1562, line: 62, baseType: !2177)
!2177 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1562, line: 61, flags: DIFlagFwdDecl)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2172, file: !1742, line: 211, baseType: !7, size: 32, offset: 64)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2172, file: !1742, line: 214, baseType: !1617, size: 64, offset: 128)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2172, file: !1742, line: 224, baseType: !2181, size: 64, offset: 192)
!2181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2182, size: 64)
!2182 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1742, line: 202, baseType: !2183)
!2183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1742, line: 202, size: 128, elements: !2184)
!2184 = !{!2185}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2183, file: !1742, line: 202, baseType: !2186, size: 128)
!2186 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1742, line: 200, baseType: !2187)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1742, line: 200, size: 128, elements: !2188)
!2188 = !{!2189, !2190, !2191}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2187, file: !1742, line: 200, baseType: !7, size: 32)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2187, file: !1742, line: 200, baseType: !7, size: 32, offset: 32)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2187, file: !1742, line: 200, baseType: !1775, size: 64, offset: 64)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2172, file: !1742, line: 234, baseType: !2181, size: 64, offset: 256)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2166, file: !1742, line: 197, baseType: !1617, size: 64, offset: 256)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1755, file: !1742, line: 319, baseType: !1624, size: 256)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1755, file: !1742, line: 320, baseType: !1643, size: 192)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1564, file: !334, line: 3384, baseType: !2197, size: 1472)
!2197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !334, line: 3114, size: 1472, elements: !2198)
!2198 = !{!2199, !2220, !2221, !2222, !2223}
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2197, file: !334, line: 3115, baseType: !2200, size: 1216)
!2200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !334, line: 2984, size: 1216, elements: !2201)
!2201 = !{!2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2200, file: !334, line: 2985, baseType: !1735, size: 960)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2200, file: !334, line: 2986, baseType: !1561, size: 64, offset: 960)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2200, file: !334, line: 2987, baseType: !1561, size: 64, offset: 1024)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2200, file: !334, line: 2988, baseType: !1561, size: 64, offset: 1088)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2200, file: !334, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2200, file: !334, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2200, file: !334, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2200, file: !334, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2200, file: !334, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2200, file: !334, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2200, file: !334, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2200, file: !334, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2200, file: !334, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2200, file: !334, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2200, file: !334, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2200, file: !334, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2200, file: !334, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2200, file: !334, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2197, file: !334, line: 3117, baseType: !1561, size: 64, offset: 1216)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2197, file: !334, line: 3119, baseType: !1561, size: 64, offset: 1280)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2197, file: !334, line: 3121, baseType: !1561, size: 64, offset: 1344)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2197, file: !334, line: 3123, baseType: !1561, size: 64, offset: 1408)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1564, file: !334, line: 3385, baseType: !2225, size: 1088)
!2225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !334, line: 2874, size: 1088, elements: !2226)
!2226 = !{!2227, !2228, !2229}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2225, file: !334, line: 2875, baseType: !1735, size: 960)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2225, file: !334, line: 2876, baseType: !1739, size: 64, offset: 960)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2225, file: !334, line: 2877, baseType: !2230, size: 64, offset: 1024)
!2230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2231, size: 64)
!2231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2232, line: 172, size: 128, elements: !2233)
!2232 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2233 = !{!2234, !2235, !2236, !2237, !2238, !2239, !2240}
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2231, file: !2232, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2231, file: !2232, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2231, file: !2232, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2231, file: !2232, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2231, file: !2232, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2231, file: !2232, line: 195, baseType: !7, size: 32, offset: 32)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2231, file: !2232, line: 199, baseType: !1561, size: 64, offset: 64)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1564, file: !334, line: 3386, baseType: !2200, size: 1216)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1564, file: !334, line: 3387, baseType: !2243, size: 1280)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !334, line: 3093, size: 1280, elements: !2244)
!2244 = !{!2245, !2246}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2243, file: !334, line: 3094, baseType: !2200, size: 1216)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2243, file: !334, line: 3095, baseType: !2230, size: 64, offset: 1216)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1564, file: !334, line: 3388, baseType: !2248, size: 1216)
!2248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !334, line: 2824, size: 1216, elements: !2249)
!2249 = !{!2250, !2251, !2252, !2253, !2254, !2255}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2248, file: !334, line: 2825, baseType: !1697, size: 896)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2248, file: !334, line: 2827, baseType: !1561, size: 64, offset: 896)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2248, file: !334, line: 2828, baseType: !1561, size: 64, offset: 960)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2248, file: !334, line: 2829, baseType: !1561, size: 64, offset: 1024)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2248, file: !334, line: 2830, baseType: !1561, size: 64, offset: 1088)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2248, file: !334, line: 2831, baseType: !1561, size: 64, offset: 1152)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1564, file: !334, line: 3389, baseType: !2257, size: 1024)
!2257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !334, line: 2850, size: 1024, elements: !2258)
!2258 = !{!2259, !2260, !2261}
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2257, file: !334, line: 2851, baseType: !1735, size: 960)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2257, file: !334, line: 2852, baseType: !1658, size: 32, offset: 960)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2257, file: !334, line: 2853, baseType: !1658, size: 32, offset: 992)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1564, file: !334, line: 3390, baseType: !2263, size: 1024)
!2263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !334, line: 2857, size: 1024, elements: !2264)
!2264 = !{!2265, !2266}
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2263, file: !334, line: 2858, baseType: !1735, size: 960)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2263, file: !334, line: 2859, baseType: !2230, size: 64, offset: 960)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1564, file: !334, line: 3391, baseType: !2268, size: 960)
!2268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !334, line: 2862, size: 960, elements: !2269)
!2269 = !{!2270}
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2268, file: !334, line: 2863, baseType: !1735, size: 960)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1564, file: !334, line: 3392, baseType: !2272, size: 1472)
!2272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !334, line: 3304, size: 1472, elements: !2273)
!2273 = !{!2274}
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2272, file: !334, line: 3305, baseType: !2197, size: 1472)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1564, file: !334, line: 3393, baseType: !2276, size: 1792)
!2276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !334, line: 3248, size: 1792, elements: !2277)
!2277 = !{!2278, !2279, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512}
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2276, file: !334, line: 3249, baseType: !2197, size: 1472)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2276, file: !334, line: 3251, baseType: !2280, size: 64, offset: 1472)
!2280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2281, size: 64)
!2281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2282, line: 463, size: 1152, elements: !2283)
!2282 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2283 = !{!2284, !2287, !2318, !2319, !2433, !2436, !2437, !2438, !2439, !2440, !2441, !2465, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2281, file: !2282, line: 464, baseType: !2285, size: 64)
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2286, size: 64)
!2286 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2282, line: 464, flags: DIFlagFwdDecl)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2281, file: !2282, line: 467, baseType: !2288, size: 64, offset: 64)
!2288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2289, size: 64)
!2289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !318, line: 374, size: 640, elements: !2290)
!2290 = !{!2291, !2293, !2294, !2307, !2308, !2309, !2310, !2311, !2312, !2314, !2316, !2317}
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2289, file: !318, line: 377, baseType: !2292, size: 64)
!2292 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1562, line: 111, baseType: !1856)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2289, file: !318, line: 378, baseType: !2292, size: 64, offset: 64)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2289, file: !318, line: 381, baseType: !2295, size: 64, offset: 128)
!2295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2296, size: 64)
!2296 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !318, line: 282, baseType: !2297)
!2297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !318, line: 282, size: 128, elements: !2298)
!2298 = !{!2299}
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2297, file: !318, line: 282, baseType: !2300, size: 128)
!2300 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !318, line: 281, baseType: !2301)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !318, line: 281, size: 128, elements: !2302)
!2302 = !{!2303, !2304, !2305}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2301, file: !318, line: 281, baseType: !7, size: 32)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2301, file: !318, line: 281, baseType: !7, size: 32, offset: 32)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2301, file: !318, line: 281, baseType: !2306, size: 64, offset: 64)
!2306 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2292, size: 64, elements: !1662)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2289, file: !318, line: 384, baseType: !1658, size: 32, offset: 192)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2289, file: !318, line: 387, baseType: !1658, size: 32, offset: 224)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2289, file: !318, line: 390, baseType: !1658, size: 32, offset: 256)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2289, file: !318, line: 394, baseType: !2295, size: 64, offset: 320)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2289, file: !318, line: 396, baseType: !317, size: 32, offset: 384)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2289, file: !318, line: 399, baseType: !2313, size: 64, offset: 416)
!2313 = !DICompositeType(tag: DW_TAG_array_type, baseType: !323, size: 64, elements: !1809)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2289, file: !318, line: 402, baseType: !2315, size: 64, offset: 480)
!2315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1809)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2289, file: !318, line: 406, baseType: !1658, size: 32, offset: 544)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2289, file: !318, line: 409, baseType: !1658, size: 32, offset: 576)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2281, file: !2282, line: 470, baseType: !1883, size: 64, offset: 128)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2281, file: !2282, line: 473, baseType: !2320, size: 64, offset: 192)
!2320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2321, size: 64)
!2321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2232, line: 39, size: 1152, elements: !2322)
!2322 = !{!2323, !2372, !2385, !2397, !2398, !2410, !2411, !2415, !2416, !2417, !2418, !2419}
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2321, file: !2232, line: 41, baseType: !2324, size: 64)
!2324 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !644, line: 144, baseType: !2325)
!2325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2326, size: 64)
!2326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !644, line: 100, size: 896, elements: !2327)
!2327 = !{!2328, !2336, !2341, !2346, !2348, !2349, !2350, !2351, !2352, !2353, !2358, !2360, !2361, !2366, !2371}
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2326, file: !644, line: 102, baseType: !2329, size: 64)
!2329 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !644, line: 52, baseType: !2330)
!2330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2331, size: 64)
!2331 = !DISubroutineType(types: !2332)
!2332 = !{!2333, !2334}
!2333 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !644, line: 47, baseType: !7)
!2334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2335, size: 64)
!2335 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2326, file: !644, line: 105, baseType: !2337, size: 64, offset: 64)
!2337 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !644, line: 59, baseType: !2338)
!2338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2339, size: 64)
!2339 = !DISubroutineType(types: !2340)
!2340 = !{!1658, !2334, !2334}
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2326, file: !644, line: 108, baseType: !2342, size: 64, offset: 128)
!2342 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !644, line: 63, baseType: !2343)
!2343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2344, size: 64)
!2344 = !DISubroutineType(types: !2345)
!2345 = !{null, !1845}
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2326, file: !644, line: 111, baseType: !2347, size: 64, offset: 192)
!2347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1845, size: 64)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2326, file: !644, line: 114, baseType: !2038, size: 64, offset: 256)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2326, file: !644, line: 117, baseType: !2038, size: 64, offset: 320)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2326, file: !644, line: 120, baseType: !2038, size: 64, offset: 384)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2326, file: !644, line: 124, baseType: !7, size: 32, offset: 448)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2326, file: !644, line: 128, baseType: !7, size: 32, offset: 480)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2326, file: !644, line: 131, baseType: !2354, size: 64, offset: 512)
!2354 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !644, line: 75, baseType: !2355)
!2355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2356, size: 64)
!2356 = !DISubroutineType(types: !2357)
!2357 = !{!1845, !2038, !2038}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2326, file: !644, line: 132, baseType: !2359, size: 64, offset: 576)
!2359 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !644, line: 78, baseType: !2343)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2326, file: !644, line: 135, baseType: !1845, size: 64, offset: 640)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2326, file: !644, line: 136, baseType: !2362, size: 64, offset: 704)
!2362 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !644, line: 82, baseType: !2363)
!2363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2364, size: 64)
!2364 = !DISubroutineType(types: !2365)
!2365 = !{!1845, !1845, !2038, !2038}
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2326, file: !644, line: 137, baseType: !2367, size: 64, offset: 768)
!2367 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !644, line: 83, baseType: !2368)
!2368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2369, size: 64)
!2369 = !DISubroutineType(types: !2370)
!2370 = !{null, !1845, !1845}
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2326, file: !644, line: 141, baseType: !7, size: 32, offset: 832)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2321, file: !2232, line: 48, baseType: !2373, size: 64, offset: 64)
!2373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2374, size: 64)
!2374 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !561, line: 35, baseType: !2375)
!2375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !561, line: 35, size: 128, elements: !2376)
!2376 = !{!2377}
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2375, file: !561, line: 35, baseType: !2378, size: 128)
!2378 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !561, line: 33, baseType: !2379)
!2379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !561, line: 33, size: 128, elements: !2380)
!2380 = !{!2381, !2382, !2383}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2379, file: !561, line: 33, baseType: !7, size: 32)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2379, file: !561, line: 33, baseType: !7, size: 32, offset: 32)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2379, file: !561, line: 33, baseType: !2384, size: 64, offset: 64)
!2384 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1892, size: 64, elements: !1662)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2321, file: !2232, line: 51, baseType: !2386, size: 64, offset: 128)
!2386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2387, size: 64)
!2387 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !334, line: 183, baseType: !2388)
!2388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !334, line: 183, size: 128, elements: !2389)
!2389 = !{!2390}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2388, file: !334, line: 183, baseType: !2391, size: 128)
!2391 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !334, line: 182, baseType: !2392)
!2392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !334, line: 182, size: 128, elements: !2393)
!2393 = !{!2394, !2395, !2396}
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2392, file: !334, line: 182, baseType: !7, size: 32)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2392, file: !334, line: 182, baseType: !7, size: 32, offset: 32)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2392, file: !334, line: 182, baseType: !1946, size: 64, offset: 64)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2321, file: !2232, line: 54, baseType: !1561, size: 64, offset: 192)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2321, file: !2232, line: 57, baseType: !2399, size: 128, offset: 256)
!2399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2400, line: 31, size: 128, elements: !2401)
!2400 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2401 = !{!2402, !2403, !2404, !2405, !2406, !2407, !2408}
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2399, file: !2400, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2399, file: !2400, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2399, file: !2400, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2399, file: !2400, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2399, file: !2400, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2399, file: !2400, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2399, file: !2400, line: 56, baseType: !2409, size: 64, offset: 64)
!2409 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1562, line: 47, baseType: !1793)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2321, file: !2232, line: 60, baseType: !2399, size: 128, offset: 384)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2321, file: !2232, line: 64, baseType: !2412, size: 64, offset: 512)
!2412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2413, size: 64)
!2413 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2414, line: 33, flags: DIFlagFwdDecl)
!2414 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2321, file: !2232, line: 67, baseType: !1561, size: 64, offset: 576)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2321, file: !2232, line: 73, baseType: !2324, size: 64, offset: 640)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2321, file: !2232, line: 77, baseType: !2409, size: 64, offset: 704)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2321, file: !2232, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2321, file: !2232, line: 82, baseType: !2420, size: 320, offset: 832)
!2420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1923, line: 62, size: 320, elements: !2421)
!2421 = !{!2422, !2428, !2429, !2430, !2431, !2432}
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2420, file: !1923, line: 63, baseType: !2423, size: 64)
!2423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2424, size: 64)
!2424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1923, line: 56, size: 128, elements: !2425)
!2425 = !{!2426, !2427}
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2424, file: !1923, line: 57, baseType: !2423, size: 64)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2424, file: !1923, line: 58, baseType: !1660, size: 8, offset: 64)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2420, file: !1923, line: 64, baseType: !7, size: 32, offset: 64)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2420, file: !1923, line: 66, baseType: !7, size: 32, offset: 96)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2420, file: !1923, line: 68, baseType: !1681, size: 8, offset: 128)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2420, file: !1923, line: 70, baseType: !1921, size: 64, offset: 192)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2420, file: !1923, line: 71, baseType: !1929, size: 64, offset: 256)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2281, file: !2282, line: 476, baseType: !2434, size: 64, offset: 256)
!2434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2435, size: 64)
!2435 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2282, line: 476, flags: DIFlagFwdDecl)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2281, file: !2282, line: 479, baseType: !2324, size: 64, offset: 320)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2281, file: !2282, line: 484, baseType: !1561, size: 64, offset: 384)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2281, file: !2282, line: 488, baseType: !1561, size: 64, offset: 448)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2281, file: !2282, line: 493, baseType: !1561, size: 64, offset: 512)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2281, file: !2282, line: 496, baseType: !1561, size: 64, offset: 576)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2281, file: !2282, line: 501, baseType: !2442, size: 64, offset: 640)
!2442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2443, size: 64)
!2443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !329, line: 2355, size: 576, elements: !2444)
!2444 = !{!2445, !2448, !2449, !2450, !2451, !2453, !2454, !2459, !2460, !2461, !2462, !2463, !2464}
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2443, file: !329, line: 2356, baseType: !2446, size: 64)
!2446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2447, size: 64)
!2447 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !329, line: 2356, flags: DIFlagFwdDecl)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2443, file: !329, line: 2357, baseType: !1765, size: 64, offset: 64)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2443, file: !329, line: 2358, baseType: !1658, size: 32, offset: 128)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2443, file: !329, line: 2359, baseType: !1658, size: 32, offset: 160)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2443, file: !329, line: 2360, baseType: !2452, size: 128, offset: 192)
!2452 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1658, size: 128, elements: !1834)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2443, file: !329, line: 2364, baseType: !1658, size: 32, offset: 320)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2443, file: !329, line: 2367, baseType: !2455, size: 128, offset: 384)
!2455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !329, line: 2349, size: 128, elements: !2456)
!2456 = !{!2457, !2458}
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2455, file: !329, line: 2351, baseType: !1739, size: 64)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2455, file: !329, line: 2352, baseType: !1617, size: 64, offset: 64)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2443, file: !329, line: 2371, baseType: !328, size: 32, offset: 512)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2443, file: !329, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2443, file: !329, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2443, file: !329, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2443, file: !329, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2443, file: !329, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2281, file: !2282, line: 504, baseType: !2466, size: 64, offset: 704)
!2466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2467, size: 64)
!2467 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2282, line: 504, flags: DIFlagFwdDecl)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2281, file: !2282, line: 507, baseType: !2324, size: 64, offset: 768)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2281, file: !2282, line: 510, baseType: !1658, size: 32, offset: 832)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2281, file: !2282, line: 513, baseType: !1658, size: 32, offset: 864)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2281, file: !2282, line: 516, baseType: !1689, size: 32, offset: 896)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2281, file: !2282, line: 519, baseType: !1689, size: 32, offset: 928)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2281, file: !2282, line: 522, baseType: !7, size: 32, offset: 960)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2281, file: !2282, line: 523, baseType: !7, size: 32, offset: 992)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2281, file: !2282, line: 528, baseType: !1765, size: 64, offset: 1024)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2281, file: !2282, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2281, file: !2282, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2281, file: !2282, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2281, file: !2282, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2281, file: !2282, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2281, file: !2282, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2281, file: !2282, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2281, file: !2282, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2281, file: !2282, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2281, file: !2282, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2281, file: !2282, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2281, file: !2282, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2281, file: !2282, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2281, file: !2282, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2281, file: !2282, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2281, file: !2282, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2276, file: !334, line: 3254, baseType: !1561, size: 64, offset: 1536)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2276, file: !334, line: 3257, baseType: !1561, size: 64, offset: 1600)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2276, file: !334, line: 3258, baseType: !1561, size: 64, offset: 1664)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2276, file: !334, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2276, file: !334, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2276, file: !334, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2276, file: !334, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2276, file: !334, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2276, file: !334, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2276, file: !334, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2276, file: !334, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2276, file: !334, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2276, file: !334, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2276, file: !334, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2276, file: !334, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2276, file: !334, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2276, file: !334, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2276, file: !334, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2276, file: !334, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2276, file: !334, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2276, file: !334, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1564, file: !334, line: 3394, baseType: !2514, size: 1344)
!2514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !334, line: 2279, size: 1344, elements: !2515)
!2515 = !{!2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557}
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2514, file: !334, line: 2280, baseType: !1600, size: 192)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2514, file: !334, line: 2281, baseType: !1561, size: 64, offset: 192)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2514, file: !334, line: 2282, baseType: !1561, size: 64, offset: 256)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2514, file: !334, line: 2283, baseType: !1561, size: 64, offset: 320)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2514, file: !334, line: 2284, baseType: !1561, size: 64, offset: 384)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2514, file: !334, line: 2285, baseType: !7, size: 32, offset: 448)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2514, file: !334, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2514, file: !334, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2514, file: !334, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2514, file: !334, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2514, file: !334, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2514, file: !334, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2514, file: !334, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2514, file: !334, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2514, file: !334, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2514, file: !334, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2514, file: !334, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2514, file: !334, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2514, file: !334, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2514, file: !334, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2514, file: !334, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2514, file: !334, line: 2305, baseType: !7, size: 32, offset: 512)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2514, file: !334, line: 2306, baseType: !2149, size: 32, offset: 544)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2514, file: !334, line: 2307, baseType: !1561, size: 64, offset: 576)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2514, file: !334, line: 2308, baseType: !1561, size: 64, offset: 640)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2514, file: !334, line: 2314, baseType: !2542, size: 64, offset: 704)
!2542 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !334, line: 2309, size: 64, elements: !2543)
!2543 = !{!2544, !2545, !2546}
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2542, file: !334, line: 2310, baseType: !1658, size: 32)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2542, file: !334, line: 2311, baseType: !1765, size: 64)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2542, file: !334, line: 2312, baseType: !2547, size: 64)
!2547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2548, size: 64)
!2548 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !334, line: 2277, flags: DIFlagFwdDecl)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2514, file: !334, line: 2315, baseType: !1561, size: 64, offset: 768)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2514, file: !334, line: 2316, baseType: !1561, size: 64, offset: 832)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2514, file: !334, line: 2317, baseType: !1561, size: 64, offset: 896)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2514, file: !334, line: 2318, baseType: !1561, size: 64, offset: 960)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2514, file: !334, line: 2319, baseType: !1561, size: 64, offset: 1024)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2514, file: !334, line: 2320, baseType: !1561, size: 64, offset: 1088)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2514, file: !334, line: 2321, baseType: !1561, size: 64, offset: 1152)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2514, file: !334, line: 2322, baseType: !1561, size: 64, offset: 1216)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2514, file: !334, line: 2324, baseType: !2558, size: 64, offset: 1280)
!2558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2559, size: 64)
!2559 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !334, line: 2324, flags: DIFlagFwdDecl)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1564, file: !334, line: 3395, baseType: !2561, size: 320)
!2561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !334, line: 1469, size: 320, elements: !2562)
!2562 = !{!2563, !2564, !2565}
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2561, file: !334, line: 1470, baseType: !1600, size: 192)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2561, file: !334, line: 1471, baseType: !1561, size: 64, offset: 192)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2561, file: !334, line: 1472, baseType: !1561, size: 64, offset: 256)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1564, file: !334, line: 3396, baseType: !2567, size: 320)
!2567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !334, line: 1482, size: 320, elements: !2568)
!2568 = !{!2569, !2570, !2571}
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2567, file: !334, line: 1483, baseType: !1600, size: 192)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2567, file: !334, line: 1484, baseType: !1658, size: 32, offset: 192)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2567, file: !334, line: 1485, baseType: !1946, size: 64, offset: 256)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1564, file: !334, line: 3397, baseType: !2573, size: 384)
!2573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !334, line: 1829, size: 384, elements: !2574)
!2574 = !{!2575, !2576, !2577, !2578}
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2573, file: !334, line: 1830, baseType: !1600, size: 192)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2573, file: !334, line: 1831, baseType: !1689, size: 32, offset: 192)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2573, file: !334, line: 1832, baseType: !1561, size: 64, offset: 256)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2573, file: !334, line: 1835, baseType: !1946, size: 64, offset: 320)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1564, file: !334, line: 3398, baseType: !2580, size: 704)
!2580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !334, line: 1898, size: 704, elements: !2581)
!2581 = !{!2582, !2583, !2584, !2585, !2586, !2591}
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2580, file: !334, line: 1899, baseType: !1600, size: 192)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2580, file: !334, line: 1902, baseType: !1561, size: 64, offset: 192)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2580, file: !334, line: 1905, baseType: !1892, size: 64, offset: 256)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2580, file: !334, line: 1908, baseType: !7, size: 32, offset: 320)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2580, file: !334, line: 1911, baseType: !2587, size: 64, offset: 384)
!2587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2588, size: 64)
!2588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2232, line: 117, size: 128, elements: !2589)
!2589 = !{!2590}
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2588, file: !2232, line: 120, baseType: !2399, size: 128)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2580, file: !334, line: 1914, baseType: !1934, size: 256, offset: 448)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1564, file: !334, line: 3399, baseType: !2593, size: 704)
!2593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !334, line: 2008, size: 704, elements: !2594)
!2594 = !{!2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605}
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2593, file: !334, line: 2009, baseType: !1600, size: 192)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2593, file: !334, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2593, file: !334, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2593, file: !334, line: 2014, baseType: !1689, size: 32, offset: 224)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2593, file: !334, line: 2016, baseType: !1561, size: 64, offset: 256)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2593, file: !334, line: 2017, baseType: !2386, size: 64, offset: 320)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2593, file: !334, line: 2019, baseType: !1561, size: 64, offset: 384)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2593, file: !334, line: 2020, baseType: !1561, size: 64, offset: 448)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2593, file: !334, line: 2021, baseType: !1561, size: 64, offset: 512)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2593, file: !334, line: 2022, baseType: !1561, size: 64, offset: 576)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2593, file: !334, line: 2023, baseType: !1561, size: 64, offset: 640)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1564, file: !334, line: 3400, baseType: !2607, size: 832)
!2607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !334, line: 2430, size: 832, elements: !2608)
!2608 = !{!2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618}
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2607, file: !334, line: 2431, baseType: !1600, size: 192)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2607, file: !334, line: 2433, baseType: !1561, size: 64, offset: 192)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2607, file: !334, line: 2434, baseType: !1561, size: 64, offset: 256)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2607, file: !334, line: 2435, baseType: !1561, size: 64, offset: 320)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2607, file: !334, line: 2436, baseType: !1561, size: 64, offset: 384)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2607, file: !334, line: 2437, baseType: !2386, size: 64, offset: 448)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2607, file: !334, line: 2438, baseType: !1561, size: 64, offset: 512)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2607, file: !334, line: 2440, baseType: !1561, size: 64, offset: 576)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2607, file: !334, line: 2441, baseType: !1561, size: 64, offset: 640)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2607, file: !334, line: 2443, baseType: !2619, size: 128, offset: 704)
!2619 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !334, line: 182, baseType: !2620)
!2620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !334, line: 182, size: 128, elements: !2621)
!2621 = !{!2622}
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2620, file: !334, line: 182, baseType: !2391, size: 128)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1564, file: !334, line: 3401, baseType: !2624, size: 320)
!2624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !334, line: 3327, size: 320, elements: !2625)
!2625 = !{!2626, !2627, !2634}
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2624, file: !334, line: 3329, baseType: !1600, size: 192)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2624, file: !334, line: 3330, baseType: !2628, size: 64, offset: 192)
!2628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2629, size: 64)
!2629 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !334, line: 3320, size: 192, elements: !2630)
!2630 = !{!2631, !2632, !2633}
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2629, file: !334, line: 3322, baseType: !2628, size: 64)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2629, file: !334, line: 3323, baseType: !2628, size: 64, offset: 64)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2629, file: !334, line: 3324, baseType: !1561, size: 64, offset: 128)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2624, file: !334, line: 3331, baseType: !2628, size: 64, offset: 256)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1564, file: !334, line: 3402, baseType: !2636, size: 256)
!2636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !334, line: 1540, size: 256, elements: !2637)
!2637 = !{!2638, !2639}
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2636, file: !334, line: 1541, baseType: !1600, size: 192)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2636, file: !334, line: 1542, baseType: !2640, size: 64, offset: 192)
!2640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2641, size: 64)
!2641 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !334, line: 1538, baseType: !2642)
!2642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !334, line: 1538, size: 192, elements: !2643)
!2643 = !{!2644}
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2642, file: !334, line: 1538, baseType: !2645, size: 192)
!2645 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !334, line: 1537, baseType: !2646)
!2646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !334, line: 1537, size: 192, elements: !2647)
!2647 = !{!2648, !2649, !2650}
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2646, file: !334, line: 1537, baseType: !7, size: 32)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2646, file: !334, line: 1537, baseType: !7, size: 32, offset: 32)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2646, file: !334, line: 1537, baseType: !2651, size: 128, offset: 64)
!2651 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2652, size: 128, elements: !1662)
!2652 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !334, line: 1535, baseType: !2653)
!2653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !334, line: 1532, size: 128, elements: !2654)
!2654 = !{!2655, !2656}
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2653, file: !334, line: 1533, baseType: !1561, size: 64)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2653, file: !334, line: 1534, baseType: !1561, size: 64, offset: 64)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1564, file: !334, line: 3403, baseType: !2658, size: 512)
!2658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !334, line: 1938, size: 512, elements: !2659)
!2659 = !{!2660, !2661, !2662, !2663, !2669, !2670, !2671}
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2658, file: !334, line: 1939, baseType: !1600, size: 192)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2658, file: !334, line: 1940, baseType: !1689, size: 32, offset: 192)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2658, file: !334, line: 1941, baseType: !333, size: 32, offset: 224)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2658, file: !334, line: 1946, baseType: !2664, size: 32, offset: 256)
!2664 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !334, line: 1942, size: 32, elements: !2665)
!2665 = !{!2666, !2667, !2668}
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2664, file: !334, line: 1943, baseType: !352, size: 32)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2664, file: !334, line: 1944, baseType: !359, size: 32)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2664, file: !334, line: 1945, baseType: !366, size: 32)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2658, file: !334, line: 1950, baseType: !1882, size: 64, offset: 320)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2658, file: !334, line: 1951, baseType: !1882, size: 64, offset: 384)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2658, file: !334, line: 1953, baseType: !1946, size: 64, offset: 448)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1564, file: !334, line: 3404, baseType: !2673, size: 1664)
!2673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !334, line: 3337, size: 1664, elements: !2674)
!2674 = !{!2675, !2676}
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2673, file: !334, line: 3338, baseType: !1600, size: 192)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2673, file: !334, line: 3341, baseType: !2677, size: 1472, offset: 192)
!2677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2678, line: 410, size: 1472, elements: !2679)
!2678 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2679 = !{!2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843}
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2677, file: !2678, line: 412, baseType: !1658, size: 32)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2677, file: !2678, line: 413, baseType: !1658, size: 32, offset: 32)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2677, file: !2678, line: 414, baseType: !1658, size: 32, offset: 64)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2677, file: !2678, line: 415, baseType: !1658, size: 32, offset: 96)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2677, file: !2678, line: 416, baseType: !1658, size: 32, offset: 128)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2677, file: !2678, line: 417, baseType: !1658, size: 32, offset: 160)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2677, file: !2678, line: 418, baseType: !1681, size: 8, offset: 192)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2677, file: !2678, line: 419, baseType: !1681, size: 8, offset: 200)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2677, file: !2678, line: 420, baseType: !2689, size: 8, offset: 208)
!2689 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2677, file: !2678, line: 421, baseType: !2689, size: 8, offset: 216)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2677, file: !2678, line: 422, baseType: !2689, size: 8, offset: 224)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2677, file: !2678, line: 423, baseType: !2689, size: 8, offset: 232)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2677, file: !2678, line: 424, baseType: !2689, size: 8, offset: 240)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2677, file: !2678, line: 425, baseType: !2689, size: 8, offset: 248)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2677, file: !2678, line: 426, baseType: !2689, size: 8, offset: 256)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2677, file: !2678, line: 427, baseType: !2689, size: 8, offset: 264)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2677, file: !2678, line: 428, baseType: !2689, size: 8, offset: 272)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2677, file: !2678, line: 429, baseType: !2689, size: 8, offset: 280)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2677, file: !2678, line: 430, baseType: !2689, size: 8, offset: 288)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2677, file: !2678, line: 431, baseType: !2689, size: 8, offset: 296)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2677, file: !2678, line: 432, baseType: !2689, size: 8, offset: 304)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2677, file: !2678, line: 433, baseType: !2689, size: 8, offset: 312)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2677, file: !2678, line: 434, baseType: !2689, size: 8, offset: 320)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2677, file: !2678, line: 435, baseType: !2689, size: 8, offset: 328)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2677, file: !2678, line: 436, baseType: !2689, size: 8, offset: 336)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2677, file: !2678, line: 437, baseType: !2689, size: 8, offset: 344)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2677, file: !2678, line: 438, baseType: !2689, size: 8, offset: 352)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2677, file: !2678, line: 439, baseType: !2689, size: 8, offset: 360)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2677, file: !2678, line: 440, baseType: !2689, size: 8, offset: 368)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2677, file: !2678, line: 441, baseType: !2689, size: 8, offset: 376)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2677, file: !2678, line: 442, baseType: !2689, size: 8, offset: 384)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2677, file: !2678, line: 443, baseType: !2689, size: 8, offset: 392)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2677, file: !2678, line: 444, baseType: !2689, size: 8, offset: 400)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2677, file: !2678, line: 445, baseType: !2689, size: 8, offset: 408)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2677, file: !2678, line: 446, baseType: !2689, size: 8, offset: 416)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2677, file: !2678, line: 447, baseType: !2689, size: 8, offset: 424)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2677, file: !2678, line: 448, baseType: !2689, size: 8, offset: 432)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2677, file: !2678, line: 449, baseType: !2689, size: 8, offset: 440)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2677, file: !2678, line: 450, baseType: !2689, size: 8, offset: 448)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2677, file: !2678, line: 451, baseType: !2689, size: 8, offset: 456)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2677, file: !2678, line: 452, baseType: !2689, size: 8, offset: 464)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2677, file: !2678, line: 453, baseType: !2689, size: 8, offset: 472)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2677, file: !2678, line: 454, baseType: !2689, size: 8, offset: 480)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2677, file: !2678, line: 455, baseType: !2689, size: 8, offset: 488)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2677, file: !2678, line: 456, baseType: !2689, size: 8, offset: 496)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2677, file: !2678, line: 457, baseType: !2689, size: 8, offset: 504)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2677, file: !2678, line: 458, baseType: !2689, size: 8, offset: 512)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2677, file: !2678, line: 459, baseType: !2689, size: 8, offset: 520)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2677, file: !2678, line: 460, baseType: !2689, size: 8, offset: 528)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2677, file: !2678, line: 461, baseType: !2689, size: 8, offset: 536)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2677, file: !2678, line: 462, baseType: !2689, size: 8, offset: 544)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2677, file: !2678, line: 463, baseType: !2689, size: 8, offset: 552)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2677, file: !2678, line: 464, baseType: !2689, size: 8, offset: 560)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2677, file: !2678, line: 465, baseType: !2689, size: 8, offset: 568)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2677, file: !2678, line: 466, baseType: !2689, size: 8, offset: 576)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2677, file: !2678, line: 467, baseType: !2689, size: 8, offset: 584)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2677, file: !2678, line: 468, baseType: !2689, size: 8, offset: 592)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2677, file: !2678, line: 469, baseType: !2689, size: 8, offset: 600)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2677, file: !2678, line: 470, baseType: !2689, size: 8, offset: 608)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2677, file: !2678, line: 471, baseType: !2689, size: 8, offset: 616)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2677, file: !2678, line: 472, baseType: !2689, size: 8, offset: 624)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2677, file: !2678, line: 473, baseType: !2689, size: 8, offset: 632)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2677, file: !2678, line: 474, baseType: !2689, size: 8, offset: 640)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2677, file: !2678, line: 475, baseType: !2689, size: 8, offset: 648)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2677, file: !2678, line: 476, baseType: !2689, size: 8, offset: 656)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2677, file: !2678, line: 477, baseType: !2689, size: 8, offset: 664)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2677, file: !2678, line: 478, baseType: !2689, size: 8, offset: 672)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2677, file: !2678, line: 479, baseType: !2689, size: 8, offset: 680)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2677, file: !2678, line: 480, baseType: !2689, size: 8, offset: 688)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2677, file: !2678, line: 481, baseType: !2689, size: 8, offset: 696)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2677, file: !2678, line: 482, baseType: !2689, size: 8, offset: 704)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2677, file: !2678, line: 483, baseType: !2689, size: 8, offset: 712)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2677, file: !2678, line: 484, baseType: !2689, size: 8, offset: 720)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2677, file: !2678, line: 485, baseType: !2689, size: 8, offset: 728)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2677, file: !2678, line: 486, baseType: !2689, size: 8, offset: 736)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2677, file: !2678, line: 487, baseType: !2689, size: 8, offset: 744)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2677, file: !2678, line: 488, baseType: !2689, size: 8, offset: 752)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2677, file: !2678, line: 489, baseType: !2689, size: 8, offset: 760)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2677, file: !2678, line: 490, baseType: !2689, size: 8, offset: 768)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2677, file: !2678, line: 491, baseType: !2689, size: 8, offset: 776)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2677, file: !2678, line: 492, baseType: !2689, size: 8, offset: 784)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2677, file: !2678, line: 493, baseType: !2689, size: 8, offset: 792)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2677, file: !2678, line: 494, baseType: !2689, size: 8, offset: 800)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2677, file: !2678, line: 495, baseType: !2689, size: 8, offset: 808)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2677, file: !2678, line: 496, baseType: !2689, size: 8, offset: 816)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2677, file: !2678, line: 497, baseType: !2689, size: 8, offset: 824)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2677, file: !2678, line: 498, baseType: !2689, size: 8, offset: 832)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2677, file: !2678, line: 499, baseType: !2689, size: 8, offset: 840)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2677, file: !2678, line: 500, baseType: !2689, size: 8, offset: 848)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2677, file: !2678, line: 501, baseType: !2689, size: 8, offset: 856)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2677, file: !2678, line: 502, baseType: !2689, size: 8, offset: 864)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2677, file: !2678, line: 503, baseType: !2689, size: 8, offset: 872)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2677, file: !2678, line: 504, baseType: !2689, size: 8, offset: 880)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2677, file: !2678, line: 505, baseType: !2689, size: 8, offset: 888)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2677, file: !2678, line: 506, baseType: !2689, size: 8, offset: 896)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2677, file: !2678, line: 507, baseType: !2689, size: 8, offset: 904)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2677, file: !2678, line: 508, baseType: !2689, size: 8, offset: 912)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2677, file: !2678, line: 509, baseType: !2689, size: 8, offset: 920)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2677, file: !2678, line: 510, baseType: !2689, size: 8, offset: 928)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2677, file: !2678, line: 511, baseType: !2689, size: 8, offset: 936)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2677, file: !2678, line: 512, baseType: !2689, size: 8, offset: 944)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2677, file: !2678, line: 513, baseType: !2689, size: 8, offset: 952)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2677, file: !2678, line: 514, baseType: !2689, size: 8, offset: 960)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2677, file: !2678, line: 515, baseType: !2689, size: 8, offset: 968)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2677, file: !2678, line: 516, baseType: !2689, size: 8, offset: 976)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2677, file: !2678, line: 517, baseType: !2689, size: 8, offset: 984)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2677, file: !2678, line: 518, baseType: !2689, size: 8, offset: 992)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2677, file: !2678, line: 519, baseType: !2689, size: 8, offset: 1000)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2677, file: !2678, line: 520, baseType: !2689, size: 8, offset: 1008)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2677, file: !2678, line: 521, baseType: !2689, size: 8, offset: 1016)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2677, file: !2678, line: 522, baseType: !2689, size: 8, offset: 1024)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2677, file: !2678, line: 523, baseType: !2689, size: 8, offset: 1032)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2677, file: !2678, line: 524, baseType: !2689, size: 8, offset: 1040)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2677, file: !2678, line: 525, baseType: !2689, size: 8, offset: 1048)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2677, file: !2678, line: 526, baseType: !2689, size: 8, offset: 1056)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2677, file: !2678, line: 527, baseType: !2689, size: 8, offset: 1064)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2677, file: !2678, line: 528, baseType: !2689, size: 8, offset: 1072)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2677, file: !2678, line: 529, baseType: !2689, size: 8, offset: 1080)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2677, file: !2678, line: 530, baseType: !2689, size: 8, offset: 1088)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2677, file: !2678, line: 531, baseType: !2689, size: 8, offset: 1096)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2677, file: !2678, line: 532, baseType: !2689, size: 8, offset: 1104)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2677, file: !2678, line: 533, baseType: !2689, size: 8, offset: 1112)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2677, file: !2678, line: 534, baseType: !2689, size: 8, offset: 1120)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2677, file: !2678, line: 535, baseType: !2689, size: 8, offset: 1128)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2677, file: !2678, line: 536, baseType: !2689, size: 8, offset: 1136)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2677, file: !2678, line: 537, baseType: !2689, size: 8, offset: 1144)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2677, file: !2678, line: 538, baseType: !2689, size: 8, offset: 1152)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2677, file: !2678, line: 539, baseType: !2689, size: 8, offset: 1160)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2677, file: !2678, line: 540, baseType: !2689, size: 8, offset: 1168)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2677, file: !2678, line: 541, baseType: !2689, size: 8, offset: 1176)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2677, file: !2678, line: 542, baseType: !2689, size: 8, offset: 1184)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2677, file: !2678, line: 543, baseType: !2689, size: 8, offset: 1192)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2677, file: !2678, line: 544, baseType: !2689, size: 8, offset: 1200)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2677, file: !2678, line: 545, baseType: !2689, size: 8, offset: 1208)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2677, file: !2678, line: 546, baseType: !2689, size: 8, offset: 1216)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2677, file: !2678, line: 547, baseType: !2689, size: 8, offset: 1224)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2677, file: !2678, line: 548, baseType: !2689, size: 8, offset: 1232)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2677, file: !2678, line: 549, baseType: !2689, size: 8, offset: 1240)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2677, file: !2678, line: 550, baseType: !2689, size: 8, offset: 1248)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2677, file: !2678, line: 551, baseType: !2689, size: 8, offset: 1256)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2677, file: !2678, line: 552, baseType: !2689, size: 8, offset: 1264)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2677, file: !2678, line: 553, baseType: !2689, size: 8, offset: 1272)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2677, file: !2678, line: 554, baseType: !2689, size: 8, offset: 1280)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2677, file: !2678, line: 555, baseType: !2689, size: 8, offset: 1288)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2677, file: !2678, line: 556, baseType: !2689, size: 8, offset: 1296)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2677, file: !2678, line: 557, baseType: !2689, size: 8, offset: 1304)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2677, file: !2678, line: 558, baseType: !2689, size: 8, offset: 1312)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2677, file: !2678, line: 559, baseType: !2689, size: 8, offset: 1320)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2677, file: !2678, line: 560, baseType: !2689, size: 8, offset: 1328)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2677, file: !2678, line: 561, baseType: !2689, size: 8, offset: 1336)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2677, file: !2678, line: 562, baseType: !2689, size: 8, offset: 1344)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2677, file: !2678, line: 563, baseType: !2689, size: 8, offset: 1352)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2677, file: !2678, line: 564, baseType: !2689, size: 8, offset: 1360)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2677, file: !2678, line: 565, baseType: !2689, size: 8, offset: 1368)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2677, file: !2678, line: 566, baseType: !2689, size: 8, offset: 1376)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2677, file: !2678, line: 567, baseType: !2689, size: 8, offset: 1384)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2677, file: !2678, line: 568, baseType: !2689, size: 8, offset: 1392)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2677, file: !2678, line: 569, baseType: !2689, size: 8, offset: 1400)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2677, file: !2678, line: 570, baseType: !2689, size: 8, offset: 1408)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2677, file: !2678, line: 571, baseType: !2689, size: 8, offset: 1416)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2677, file: !2678, line: 572, baseType: !2689, size: 8, offset: 1424)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2677, file: !2678, line: 573, baseType: !2689, size: 8, offset: 1432)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2677, file: !2678, line: 574, baseType: !2689, size: 8, offset: 1440)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1564, file: !334, line: 3405, baseType: !2845, size: 384)
!2845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !334, line: 3352, size: 384, elements: !2846)
!2846 = !{!2847, !2848}
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2845, file: !334, line: 3353, baseType: !1600, size: 192)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2845, file: !334, line: 3356, baseType: !2849, size: 192, offset: 192)
!2849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2678, line: 578, size: 192, elements: !2850)
!2850 = !{!2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861}
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2849, file: !2678, line: 580, baseType: !1658, size: 32)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2849, file: !2678, line: 581, baseType: !1658, size: 32, offset: 32)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2849, file: !2678, line: 582, baseType: !1658, size: 32, offset: 64)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2849, file: !2678, line: 583, baseType: !1658, size: 32, offset: 96)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2849, file: !2678, line: 584, baseType: !1681, size: 8, offset: 128)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2849, file: !2678, line: 585, baseType: !1681, size: 8, offset: 136)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2849, file: !2678, line: 586, baseType: !1681, size: 8, offset: 144)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2849, file: !2678, line: 587, baseType: !1681, size: 8, offset: 152)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2849, file: !2678, line: 588, baseType: !1681, size: 8, offset: 160)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2849, file: !2678, line: 589, baseType: !1681, size: 8, offset: 168)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2849, file: !2678, line: 590, baseType: !1681, size: 8, offset: 176)
!2862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2863, size: 64)
!2863 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1894)
!2864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2865, size: 64)
!2865 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_complex_lattice_t_heap", file: !3, line: 56, baseType: !2866)
!2866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_complex_lattice_t_heap", file: !3, line: 56, size: 96, elements: !2867)
!2867 = !{!2868}
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2866, file: !3, line: 56, baseType: !2869, size: 96)
!2869 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_complex_lattice_t_base", file: !3, line: 55, baseType: !2870)
!2870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_complex_lattice_t_base", file: !3, line: 55, size: 96, elements: !2871)
!2871 = !{!2872, !2873, !2874}
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2870, file: !3, line: 55, baseType: !7, size: 32)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2870, file: !3, line: 55, baseType: !7, size: 32, offset: 32)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2870, file: !3, line: 55, baseType: !2875, size: 32, offset: 64)
!2875 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2876, size: 32, elements: !1662)
!2876 = !DIDerivedType(tag: DW_TAG_typedef, name: "complex_lattice_t", file: !3, line: 51, baseType: !1658)
!2877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2878, size: 64)
!2878 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !334, line: 184, baseType: !2879)
!2879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !334, line: 184, size: 128, elements: !2880)
!2880 = !{!2881}
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2879, file: !334, line: 184, baseType: !2391, size: 128)
!2882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2883, size: 64)
!2883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int_tree_map", file: !2232, line: 321, size: 128, elements: !2884)
!2884 = !{!2885, !2886}
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2883, file: !2232, line: 323, baseType: !7, size: 32)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !2883, file: !2232, line: 324, baseType: !1561, size: 64, offset: 64)
!2887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2882, size: 64)
!2888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2889, size: 64)
!2889 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1564)
!2890 = !{!0, !2891, !2919, !2921, !2923}
!2891 = !DIGlobalVariableExpression(var: !2892, expr: !DIExpression())
!2892 = distinct !DIGlobalVariable(name: "pass_lower_complex_O0", scope: !2, file: !3, line: 1647, type: !2893, isLocal: false, isDefinition: true)
!2893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !6, line: 156, size: 640, elements: !2894)
!2894 = !{!2895}
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2893, file: !6, line: 158, baseType: !2896, size: 640)
!2896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !6, line: 114, size: 640, elements: !2897)
!2897 = !{!2898, !2899, !2900, !2904, !2908, !2910, !2911, !2912, !2914, !2915, !2916, !2917, !2918}
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2896, file: !6, line: 117, baseType: !5, size: 32)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2896, file: !6, line: 121, baseType: !1765, size: 64, offset: 64)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2896, file: !6, line: 125, baseType: !2901, size: 64, offset: 128)
!2901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2902, size: 64)
!2902 = !DISubroutineType(types: !2903)
!2903 = !{!1681}
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2896, file: !6, line: 130, baseType: !2905, size: 64, offset: 192)
!2905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2906, size: 64)
!2906 = !DISubroutineType(types: !2907)
!2907 = !{!7}
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2896, file: !6, line: 133, baseType: !2909, size: 64, offset: 256)
!2909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2896, size: 64)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2896, file: !6, line: 136, baseType: !2909, size: 64, offset: 320)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2896, file: !6, line: 139, baseType: !1658, size: 32, offset: 384)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2896, file: !6, line: 143, baseType: !2913, size: 32, offset: 416)
!2913 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !14, line: 80, baseType: !13)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2896, file: !6, line: 146, baseType: !7, size: 32, offset: 448)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2896, file: !6, line: 147, baseType: !7, size: 32, offset: 480)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2896, file: !6, line: 148, baseType: !7, size: 32, offset: 512)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2896, file: !6, line: 151, baseType: !7, size: 32, offset: 544)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2896, file: !6, line: 152, baseType: !7, size: 32, offset: 576)
!2919 = !DIGlobalVariableExpression(var: !2920, expr: !DIExpression())
!2920 = distinct !DIGlobalVariable(name: "complex_lattice_values", scope: !2, file: !3, line: 58, type: !2864, isLocal: true, isDefinition: true)
!2921 = !DIGlobalVariableExpression(var: !2922, expr: !DIExpression())
!2922 = distinct !DIGlobalVariable(name: "complex_variable_components", scope: !2, file: !3, line: 62, type: !2324, isLocal: true, isDefinition: true)
!2923 = !DIGlobalVariableExpression(var: !2924, expr: !DIExpression())
!2924 = distinct !DIGlobalVariable(name: "complex_ssa_name_components", scope: !2, file: !3, line: 65, type: !2877, isLocal: true, isDefinition: true)
!2925 = !{i32 7, !"Dwarf Version", i32 4}
!2926 = !{i32 2, !"Debug Info Version", i32 3}
!2927 = !{i32 1, !"wchar_size", i32 4}
!2928 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2929 = distinct !DISubprogram(name: "tree_lower_complex", scope: !3, file: !3, line: 1571, type: !2906, scopeLine: 1572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!2930 = !{}
!2931 = !DILocalVariable(name: "old_last_basic_block", scope: !2929, file: !3, line: 1573, type: !1658)
!2932 = !DILocation(line: 1573, column: 7, scope: !2929)
!2933 = !DILocalVariable(name: "gsi", scope: !2929, file: !3, line: 1574, type: !2934)
!2934 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !561, line: 265, baseType: !2935)
!2935 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !561, line: 254, size: 192, elements: !2936)
!2936 = !{!2937, !2938, !2939}
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2935, file: !561, line: 257, baseType: !1887, size: 64)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2935, file: !561, line: 263, baseType: !1882, size: 64, offset: 64)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2935, file: !561, line: 264, baseType: !2292, size: 64, offset: 128)
!2940 = !DILocation(line: 1574, column: 24, scope: !2929)
!2941 = !DILocalVariable(name: "bb", scope: !2929, file: !3, line: 1575, type: !2292)
!2942 = !DILocation(line: 1575, column: 15, scope: !2929)
!2943 = !DILocation(line: 1577, column: 8, scope: !2944)
!2944 = distinct !DILexicalBlock(scope: !2929, file: !3, line: 1577, column: 7)
!2945 = !DILocation(line: 1577, column: 7, scope: !2929)
!2946 = !DILocation(line: 1578, column: 5, scope: !2944)
!2947 = !DILocation(line: 1580, column: 28, scope: !2929)
!2948 = !DILocation(line: 1580, column: 26, scope: !2929)
!2949 = !DILocation(line: 1581, column: 3, scope: !2929)
!2950 = !DILocation(line: 1584, column: 3, scope: !2929)
!2951 = !DILocation(line: 1585, column: 3, scope: !2929)
!2952 = !DILocation(line: 1587, column: 33, scope: !2929)
!2953 = !DILocation(line: 1587, column: 31, scope: !2929)
!2954 = !DILocation(line: 1590, column: 33, scope: !2929)
!2955 = !DILocation(line: 1590, column: 31, scope: !2929)
!2956 = !DILocation(line: 1591, column: 3, scope: !2929)
!2957 = !DILocation(line: 1594, column: 3, scope: !2929)
!2958 = !DILocation(line: 1597, column: 26, scope: !2929)
!2959 = !DILocation(line: 1597, column: 24, scope: !2929)
!2960 = !DILocation(line: 1598, column: 3, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2929, file: !3, line: 1598, column: 3)
!2962 = !DILocation(line: 1598, column: 3, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2961, file: !3, line: 1598, column: 3)
!2964 = !DILocation(line: 1600, column: 11, scope: !2965)
!2965 = distinct !DILexicalBlock(scope: !2966, file: !3, line: 1600, column: 11)
!2966 = distinct !DILexicalBlock(scope: !2963, file: !3, line: 1599, column: 5)
!2967 = !DILocation(line: 1600, column: 15, scope: !2965)
!2968 = !DILocation(line: 1600, column: 24, scope: !2965)
!2969 = !DILocation(line: 1600, column: 21, scope: !2965)
!2970 = !DILocation(line: 1600, column: 11, scope: !2966)
!2971 = !DILocation(line: 1601, column: 2, scope: !2965)
!2972 = !DILocation(line: 1603, column: 30, scope: !2966)
!2973 = !DILocation(line: 1603, column: 7, scope: !2966)
!2974 = !DILocation(line: 1604, column: 32, scope: !2975)
!2975 = distinct !DILexicalBlock(scope: !2966, file: !3, line: 1604, column: 7)
!2976 = !DILocation(line: 1604, column: 18, scope: !2975)
!2977 = !DILocation(line: 1604, column: 12, scope: !2975)
!2978 = !DILocation(line: 1604, column: 38, scope: !2979)
!2979 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 1604, column: 7)
!2980 = !DILocation(line: 1604, column: 37, scope: !2979)
!2981 = !DILocation(line: 1604, column: 7, scope: !2975)
!2982 = !DILocation(line: 1605, column: 2, scope: !2979)
!2983 = !DILocation(line: 1604, column: 55, scope: !2979)
!2984 = !DILocation(line: 1604, column: 7, scope: !2979)
!2985 = distinct !{!2985, !2981, !2986}
!2986 = !DILocation(line: 1605, column: 35, scope: !2975)
!2987 = !DILocation(line: 1606, column: 5, scope: !2966)
!2988 = distinct !{!2988, !2960, !2989}
!2989 = !DILocation(line: 1606, column: 5, scope: !2961)
!2990 = !DILocation(line: 1608, column: 3, scope: !2929)
!2991 = !DILocation(line: 1610, column: 16, scope: !2929)
!2992 = !DILocation(line: 1610, column: 3, scope: !2929)
!2993 = !DILocation(line: 1611, column: 3, scope: !2929)
!2994 = !DILocation(line: 1612, column: 3, scope: !2929)
!2995 = !DILocation(line: 1613, column: 3, scope: !2929)
!2996 = !DILocation(line: 1614, column: 1, scope: !2929)
!2997 = distinct !DISubprogram(name: "gate_no_optimization", scope: !3, file: !3, line: 1640, type: !2902, scopeLine: 1641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!2998 = !DILocation(line: 1644, column: 12, scope: !2997)
!2999 = !DILocation(line: 1644, column: 18, scope: !2997)
!3000 = !DILocation(line: 1644, column: 34, scope: !2997)
!3001 = !DILocation(line: 1644, column: 10, scope: !2997)
!3002 = !DILocation(line: 1644, column: 3, scope: !2997)
!3003 = distinct !DISubprogram(name: "init_dont_simulate_again", scope: !3, file: !3, line: 193, type: !2902, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3004 = !DILocalVariable(name: "bb", scope: !3003, file: !3, line: 195, type: !2292)
!3005 = !DILocation(line: 195, column: 15, scope: !3003)
!3006 = !DILocalVariable(name: "gsi", scope: !3003, file: !3, line: 196, type: !2934)
!3007 = !DILocation(line: 196, column: 24, scope: !3003)
!3008 = !DILocalVariable(name: "phi", scope: !3003, file: !3, line: 197, type: !1892)
!3009 = !DILocation(line: 197, column: 10, scope: !3003)
!3010 = !DILocalVariable(name: "saw_a_complex_op", scope: !3003, file: !3, line: 198, type: !1681)
!3011 = !DILocation(line: 198, column: 8, scope: !3003)
!3012 = !DILocation(line: 200, column: 3, scope: !3013)
!3013 = distinct !DILexicalBlock(scope: !3003, file: !3, line: 200, column: 3)
!3014 = !DILocation(line: 200, column: 3, scope: !3015)
!3015 = distinct !DILexicalBlock(scope: !3013, file: !3, line: 200, column: 3)
!3016 = !DILocation(line: 202, column: 34, scope: !3017)
!3017 = distinct !DILexicalBlock(scope: !3018, file: !3, line: 202, column: 7)
!3018 = distinct !DILexicalBlock(scope: !3015, file: !3, line: 201, column: 5)
!3019 = !DILocation(line: 202, column: 18, scope: !3017)
!3020 = !DILocation(line: 202, column: 12, scope: !3017)
!3021 = !DILocation(line: 202, column: 40, scope: !3022)
!3022 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 202, column: 7)
!3023 = !DILocation(line: 202, column: 39, scope: !3022)
!3024 = !DILocation(line: 202, column: 7, scope: !3017)
!3025 = !DILocation(line: 204, column: 10, scope: !3026)
!3026 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 203, column: 2)
!3027 = !DILocation(line: 204, column: 8, scope: !3026)
!3028 = !DILocation(line: 205, column: 29, scope: !3026)
!3029 = !DILocation(line: 206, column: 43, scope: !3026)
!3030 = !DILocation(line: 206, column: 24, scope: !3026)
!3031 = !DILocation(line: 206, column: 8, scope: !3026)
!3032 = !DILocation(line: 205, column: 4, scope: !3026)
!3033 = !DILocation(line: 207, column: 2, scope: !3026)
!3034 = !DILocation(line: 202, column: 57, scope: !3022)
!3035 = !DILocation(line: 202, column: 7, scope: !3022)
!3036 = distinct !{!3036, !3024, !3037}
!3037 = !DILocation(line: 207, column: 2, scope: !3017)
!3038 = !DILocation(line: 209, column: 32, scope: !3039)
!3039 = distinct !DILexicalBlock(scope: !3018, file: !3, line: 209, column: 7)
!3040 = !DILocation(line: 209, column: 18, scope: !3039)
!3041 = !DILocation(line: 209, column: 12, scope: !3039)
!3042 = !DILocation(line: 209, column: 38, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !3039, file: !3, line: 209, column: 7)
!3044 = !DILocation(line: 209, column: 37, scope: !3043)
!3045 = !DILocation(line: 209, column: 7, scope: !3039)
!3046 = !DILocalVariable(name: "stmt", scope: !3047, file: !3, line: 211, type: !1892)
!3047 = distinct !DILexicalBlock(scope: !3043, file: !3, line: 210, column: 2)
!3048 = !DILocation(line: 211, column: 11, scope: !3047)
!3049 = !DILocalVariable(name: "op0", scope: !3047, file: !3, line: 212, type: !1561)
!3050 = !DILocation(line: 212, column: 9, scope: !3047)
!3051 = !DILocalVariable(name: "op1", scope: !3047, file: !3, line: 212, type: !1561)
!3052 = !DILocation(line: 212, column: 14, scope: !3047)
!3053 = !DILocalVariable(name: "sim_again_p", scope: !3047, file: !3, line: 213, type: !1681)
!3054 = !DILocation(line: 213, column: 9, scope: !3047)
!3055 = !DILocation(line: 215, column: 11, scope: !3047)
!3056 = !DILocation(line: 215, column: 9, scope: !3047)
!3057 = !DILocation(line: 216, column: 14, scope: !3047)
!3058 = !DILocation(line: 216, column: 8, scope: !3047)
!3059 = !DILocation(line: 220, column: 34, scope: !3047)
!3060 = !DILocation(line: 220, column: 18, scope: !3047)
!3061 = !DILocation(line: 220, column: 16, scope: !3047)
!3062 = !DILocation(line: 222, column: 25, scope: !3047)
!3063 = !DILocation(line: 222, column: 12, scope: !3047)
!3064 = !DILocation(line: 222, column: 4, scope: !3047)
!3065 = !DILocation(line: 225, column: 29, scope: !3066)
!3066 = distinct !DILexicalBlock(scope: !3067, file: !3, line: 225, column: 12)
!3067 = distinct !DILexicalBlock(scope: !3047, file: !3, line: 223, column: 6)
!3068 = !DILocation(line: 225, column: 12, scope: !3066)
!3069 = !DILocation(line: 225, column: 12, scope: !3067)
!3070 = !DILocation(line: 226, column: 57, scope: !3066)
!3071 = !DILocation(line: 226, column: 40, scope: !3066)
!3072 = !DILocation(line: 226, column: 24, scope: !3066)
!3073 = !DILocation(line: 226, column: 22, scope: !3066)
!3074 = !DILocation(line: 226, column: 10, scope: !3066)
!3075 = !DILocation(line: 227, column: 8, scope: !3067)
!3076 = !DILocation(line: 230, column: 57, scope: !3067)
!3077 = !DILocation(line: 230, column: 38, scope: !3067)
!3078 = !DILocation(line: 230, column: 22, scope: !3067)
!3079 = !DILocation(line: 230, column: 20, scope: !3067)
!3080 = !DILocation(line: 231, column: 36, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !3067, file: !3, line: 231, column: 12)
!3082 = !DILocation(line: 231, column: 12, scope: !3081)
!3083 = !DILocation(line: 231, column: 42, scope: !3081)
!3084 = !DILocation(line: 232, column: 5, scope: !3081)
!3085 = !DILocation(line: 232, column: 32, scope: !3081)
!3086 = !DILocation(line: 232, column: 8, scope: !3081)
!3087 = !DILocation(line: 232, column: 38, scope: !3081)
!3088 = !DILocation(line: 231, column: 12, scope: !3067)
!3089 = !DILocation(line: 233, column: 9, scope: !3081)
!3090 = !DILocation(line: 233, column: 7, scope: !3081)
!3091 = !DILocation(line: 233, column: 3, scope: !3081)
!3092 = !DILocation(line: 235, column: 29, scope: !3081)
!3093 = !DILocation(line: 235, column: 9, scope: !3081)
!3094 = !DILocation(line: 235, column: 7, scope: !3081)
!3095 = !DILocation(line: 236, column: 28, scope: !3096)
!3096 = distinct !DILexicalBlock(scope: !3067, file: !3, line: 236, column: 12)
!3097 = !DILocation(line: 236, column: 12, scope: !3096)
!3098 = !DILocation(line: 236, column: 34, scope: !3096)
!3099 = !DILocation(line: 236, column: 12, scope: !3067)
!3100 = !DILocation(line: 237, column: 29, scope: !3096)
!3101 = !DILocation(line: 237, column: 9, scope: !3096)
!3102 = !DILocation(line: 237, column: 7, scope: !3096)
!3103 = !DILocation(line: 237, column: 3, scope: !3096)
!3104 = !DILocation(line: 238, column: 8, scope: !3067)
!3105 = !DILocation(line: 241, column: 31, scope: !3067)
!3106 = !DILocation(line: 241, column: 14, scope: !3067)
!3107 = !DILocation(line: 241, column: 12, scope: !3067)
!3108 = !DILocation(line: 242, column: 31, scope: !3067)
!3109 = !DILocation(line: 242, column: 14, scope: !3067)
!3110 = !DILocation(line: 242, column: 12, scope: !3067)
!3111 = !DILocation(line: 243, column: 8, scope: !3067)
!3112 = !DILocation(line: 246, column: 8, scope: !3067)
!3113 = !DILocation(line: 249, column: 8, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !3047, file: !3, line: 249, column: 8)
!3115 = !DILocation(line: 249, column: 12, scope: !3114)
!3116 = !DILocation(line: 249, column: 15, scope: !3114)
!3117 = !DILocation(line: 249, column: 8, scope: !3047)
!3118 = !DILocation(line: 250, column: 32, scope: !3114)
!3119 = !DILocation(line: 250, column: 14, scope: !3114)
!3120 = !DILocation(line: 250, column: 6, scope: !3114)
!3121 = !DILocation(line: 262, column: 7, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 262, column: 7)
!3123 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 251, column: 8)
!3124 = !DILocation(line: 262, column: 35, scope: !3122)
!3125 = !DILocation(line: 263, column: 7, scope: !3122)
!3126 = !DILocation(line: 263, column: 10, scope: !3122)
!3127 = !DILocation(line: 263, column: 38, scope: !3122)
!3128 = !DILocation(line: 262, column: 7, scope: !3123)
!3129 = !DILocation(line: 264, column: 22, scope: !3122)
!3130 = !DILocation(line: 264, column: 5, scope: !3122)
!3131 = !DILocation(line: 265, column: 3, scope: !3123)
!3132 = !DILocation(line: 269, column: 7, scope: !3133)
!3133 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 269, column: 7)
!3134 = !DILocation(line: 269, column: 35, scope: !3133)
!3135 = !DILocation(line: 269, column: 7, scope: !3123)
!3136 = !DILocation(line: 270, column: 22, scope: !3133)
!3137 = !DILocation(line: 270, column: 5, scope: !3133)
!3138 = !DILocation(line: 271, column: 3, scope: !3123)
!3139 = !DILocation(line: 279, column: 7, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 279, column: 7)
!3141 = !DILocation(line: 279, column: 23, scope: !3140)
!3142 = !DILocation(line: 280, column: 7, scope: !3140)
!3143 = !DILocation(line: 280, column: 33, scope: !3140)
!3144 = !DILocation(line: 280, column: 10, scope: !3140)
!3145 = !DILocation(line: 279, column: 7, scope: !3123)
!3146 = !DILocation(line: 281, column: 22, scope: !3140)
!3147 = !DILocation(line: 281, column: 5, scope: !3140)
!3148 = !DILocation(line: 282, column: 3, scope: !3123)
!3149 = !DILocation(line: 285, column: 3, scope: !3123)
!3150 = !DILocation(line: 286, column: 8, scope: !3123)
!3151 = !DILocation(line: 288, column: 29, scope: !3047)
!3152 = !DILocation(line: 288, column: 35, scope: !3047)
!3153 = !DILocation(line: 288, column: 4, scope: !3047)
!3154 = !DILocation(line: 289, column: 2, scope: !3047)
!3155 = !DILocation(line: 209, column: 55, scope: !3043)
!3156 = !DILocation(line: 209, column: 7, scope: !3043)
!3157 = distinct !{!3157, !3045, !3158}
!3158 = !DILocation(line: 289, column: 2, scope: !3039)
!3159 = !DILocation(line: 290, column: 5, scope: !3018)
!3160 = distinct !{!3160, !3012, !3161}
!3161 = !DILocation(line: 290, column: 5, scope: !3013)
!3162 = !DILocation(line: 292, column: 10, scope: !3003)
!3163 = !DILocation(line: 292, column: 3, scope: !3003)
!3164 = distinct !DISubprogram(name: "VEC_complex_lattice_t_heap_alloc", scope: !3, file: !3, line: 56, type: !3165, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3165 = !DISubroutineType(types: !3166)
!3166 = !{!2864, !1658}
!3167 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3164, file: !3, line: 56, type: !1658)
!3168 = !DILocation(line: 56, column: 1, scope: !3164)
!3169 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !334, file: !334, line: 182, type: !3170, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3170 = !DISubroutineType(types: !3171)
!3171 = !{!7, !3172}
!3172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3173, size: 64)
!3173 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2391)
!3174 = !DILocalVariable(name: "vec_", arg: 1, scope: !3169, file: !334, line: 182, type: !3172)
!3175 = !DILocation(line: 182, column: 1, scope: !3169)
!3176 = distinct !DISubprogram(name: "VEC_complex_lattice_t_heap_safe_grow_cleared", scope: !3, file: !3, line: 56, type: !3177, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3177 = !DISubroutineType(types: !3178)
!3178 = !{null, !3179, !1658}
!3179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2864, size: 64)
!3180 = !DILocalVariable(name: "vec_", arg: 1, scope: !3176, file: !3, line: 56, type: !3179)
!3181 = !DILocation(line: 56, column: 1, scope: !3176)
!3182 = !DILocalVariable(name: "size_", arg: 2, scope: !3176, file: !3, line: 56, type: !1658)
!3183 = !DILocalVariable(name: "oldsize", scope: !3176, file: !3, line: 56, type: !1658)
!3184 = distinct !DISubprogram(name: "init_parameter_lattice_values", scope: !3, file: !3, line: 176, type: !3185, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3185 = !DISubroutineType(types: !3186)
!3186 = !{null}
!3187 = !DILocalVariable(name: "parm", scope: !3184, file: !3, line: 178, type: !1561)
!3188 = !DILocation(line: 178, column: 8, scope: !3184)
!3189 = !DILocalVariable(name: "ssa_name", scope: !3184, file: !3, line: 178, type: !1561)
!3190 = !DILocation(line: 178, column: 14, scope: !3184)
!3191 = !DILocation(line: 180, column: 15, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3184, file: !3, line: 180, column: 3)
!3193 = !DILocation(line: 180, column: 13, scope: !3192)
!3194 = !DILocation(line: 180, column: 8, scope: !3192)
!3195 = !DILocation(line: 180, column: 44, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 180, column: 3)
!3197 = !DILocation(line: 180, column: 3, scope: !3192)
!3198 = !DILocation(line: 181, column: 25, scope: !3199)
!3199 = distinct !DILexicalBlock(scope: !3196, file: !3, line: 181, column: 9)
!3200 = !DILocation(line: 181, column: 9, scope: !3199)
!3201 = !DILocation(line: 182, column: 2, scope: !3199)
!3202 = !DILocation(line: 182, column: 14, scope: !3199)
!3203 = !DILocation(line: 182, column: 5, scope: !3199)
!3204 = !DILocation(line: 182, column: 20, scope: !3199)
!3205 = !DILocation(line: 183, column: 2, scope: !3199)
!3206 = !DILocation(line: 183, column: 37, scope: !3199)
!3207 = !DILocation(line: 183, column: 43, scope: !3199)
!3208 = !DILocation(line: 183, column: 17, scope: !3199)
!3209 = !DILocation(line: 183, column: 15, scope: !3199)
!3210 = !DILocation(line: 183, column: 50, scope: !3199)
!3211 = !DILocation(line: 181, column: 9, scope: !3196)
!3212 = !DILocation(line: 184, column: 7, scope: !3199)
!3213 = !DILocation(line: 183, column: 53, scope: !3199)
!3214 = !DILocation(line: 180, column: 58, scope: !3196)
!3215 = !DILocation(line: 180, column: 56, scope: !3196)
!3216 = !DILocation(line: 180, column: 3, scope: !3196)
!3217 = distinct !{!3217, !3197, !3218}
!3218 = !DILocation(line: 184, column: 7, scope: !3192)
!3219 = !DILocation(line: 186, column: 1, scope: !3184)
!3220 = distinct !DISubprogram(name: "complex_visit_stmt", scope: !3, file: !3, line: 299, type: !3221, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3221 = !DISubroutineType(types: !3222)
!3222 = !{!637, !1892, !3223, !1927}
!3223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1872, size: 64)
!3224 = !DILocalVariable(name: "stmt", arg: 1, scope: !3220, file: !3, line: 299, type: !1892)
!3225 = !DILocation(line: 299, column: 28, scope: !3220)
!3226 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !3220, file: !3, line: 299, type: !3223)
!3227 = !DILocation(line: 299, column: 40, scope: !3220)
!3228 = !DILocalVariable(name: "result_p", arg: 3, scope: !3220, file: !3, line: 300, type: !1927)
!3229 = !DILocation(line: 300, column: 13, scope: !3220)
!3230 = !DILocalVariable(name: "new_l", scope: !3220, file: !3, line: 302, type: !2876)
!3231 = !DILocation(line: 302, column: 21, scope: !3220)
!3232 = !DILocalVariable(name: "old_l", scope: !3220, file: !3, line: 302, type: !2876)
!3233 = !DILocation(line: 302, column: 28, scope: !3220)
!3234 = !DILocalVariable(name: "op1_l", scope: !3220, file: !3, line: 302, type: !2876)
!3235 = !DILocation(line: 302, column: 35, scope: !3220)
!3236 = !DILocalVariable(name: "op2_l", scope: !3220, file: !3, line: 302, type: !2876)
!3237 = !DILocation(line: 302, column: 42, scope: !3220)
!3238 = !DILocalVariable(name: "ver", scope: !3220, file: !3, line: 303, type: !7)
!3239 = !DILocation(line: 303, column: 16, scope: !3220)
!3240 = !DILocalVariable(name: "lhs", scope: !3220, file: !3, line: 304, type: !1561)
!3241 = !DILocation(line: 304, column: 8, scope: !3220)
!3242 = !DILocation(line: 306, column: 25, scope: !3220)
!3243 = !DILocation(line: 306, column: 9, scope: !3220)
!3244 = !DILocation(line: 306, column: 7, scope: !3220)
!3245 = !DILocation(line: 308, column: 8, scope: !3246)
!3246 = distinct !DILexicalBlock(scope: !3220, file: !3, line: 308, column: 7)
!3247 = !DILocation(line: 308, column: 7, scope: !3220)
!3248 = !DILocation(line: 309, column: 5, scope: !3246)
!3249 = !DILocation(line: 313, column: 3, scope: !3220)
!3250 = !DILocation(line: 314, column: 3, scope: !3220)
!3251 = !DILocation(line: 316, column: 15, scope: !3220)
!3252 = !DILocation(line: 316, column: 4, scope: !3220)
!3253 = !DILocation(line: 316, column: 13, scope: !3220)
!3254 = !DILocation(line: 317, column: 9, scope: !3220)
!3255 = !DILocation(line: 317, column: 7, scope: !3220)
!3256 = !DILocation(line: 318, column: 11, scope: !3220)
!3257 = !DILocation(line: 318, column: 9, scope: !3220)
!3258 = !DILocation(line: 320, column: 29, scope: !3220)
!3259 = !DILocation(line: 320, column: 11, scope: !3220)
!3260 = !DILocation(line: 320, column: 3, scope: !3220)
!3261 = !DILocation(line: 324, column: 55, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3220, file: !3, line: 321, column: 5)
!3263 = !DILocation(line: 324, column: 35, scope: !3262)
!3264 = !DILocation(line: 324, column: 15, scope: !3262)
!3265 = !DILocation(line: 324, column: 13, scope: !3262)
!3266 = !DILocation(line: 325, column: 7, scope: !3262)
!3267 = !DILocation(line: 328, column: 61, scope: !3262)
!3268 = !DILocation(line: 328, column: 41, scope: !3262)
!3269 = !DILocation(line: 329, column: 33, scope: !3262)
!3270 = !DILocation(line: 329, column: 13, scope: !3262)
!3271 = !DILocation(line: 328, column: 15, scope: !3262)
!3272 = !DILocation(line: 328, column: 13, scope: !3262)
!3273 = !DILocation(line: 330, column: 7, scope: !3262)
!3274 = !DILocation(line: 334, column: 55, scope: !3262)
!3275 = !DILocation(line: 334, column: 35, scope: !3262)
!3276 = !DILocation(line: 334, column: 15, scope: !3262)
!3277 = !DILocation(line: 334, column: 13, scope: !3262)
!3278 = !DILocation(line: 335, column: 55, scope: !3262)
!3279 = !DILocation(line: 335, column: 35, scope: !3262)
!3280 = !DILocation(line: 335, column: 15, scope: !3262)
!3281 = !DILocation(line: 335, column: 13, scope: !3262)
!3282 = !DILocation(line: 339, column: 15, scope: !3262)
!3283 = !DILocation(line: 339, column: 23, scope: !3262)
!3284 = !DILocation(line: 339, column: 21, scope: !3262)
!3285 = !DILocation(line: 339, column: 13, scope: !3262)
!3286 = !DILocation(line: 340, column: 7, scope: !3262)
!3287 = !DILocation(line: 348, column: 55, scope: !3262)
!3288 = !DILocation(line: 348, column: 35, scope: !3262)
!3289 = !DILocation(line: 348, column: 15, scope: !3262)
!3290 = !DILocation(line: 348, column: 13, scope: !3262)
!3291 = !DILocation(line: 349, column: 55, scope: !3262)
!3292 = !DILocation(line: 349, column: 35, scope: !3262)
!3293 = !DILocation(line: 349, column: 15, scope: !3262)
!3294 = !DILocation(line: 349, column: 13, scope: !3262)
!3295 = !DILocation(line: 352, column: 11, scope: !3296)
!3296 = distinct !DILexicalBlock(scope: !3262, file: !3, line: 352, column: 11)
!3297 = !DILocation(line: 352, column: 17, scope: !3296)
!3298 = !DILocation(line: 352, column: 28, scope: !3296)
!3299 = !DILocation(line: 352, column: 31, scope: !3296)
!3300 = !DILocation(line: 352, column: 37, scope: !3296)
!3301 = !DILocation(line: 352, column: 11, scope: !3262)
!3302 = !DILocation(line: 353, column: 8, scope: !3296)
!3303 = !DILocation(line: 353, column: 2, scope: !3296)
!3304 = !DILocation(line: 356, column: 16, scope: !3305)
!3305 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 356, column: 16)
!3306 = !DILocation(line: 356, column: 22, scope: !3305)
!3307 = !DILocation(line: 356, column: 16, scope: !3296)
!3308 = !DILocation(line: 357, column: 10, scope: !3305)
!3309 = !DILocation(line: 357, column: 8, scope: !3305)
!3310 = !DILocation(line: 357, column: 2, scope: !3305)
!3311 = !DILocation(line: 358, column: 16, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 358, column: 16)
!3313 = !DILocation(line: 358, column: 22, scope: !3312)
!3314 = !DILocation(line: 358, column: 16, scope: !3305)
!3315 = !DILocation(line: 359, column: 10, scope: !3312)
!3316 = !DILocation(line: 359, column: 8, scope: !3312)
!3317 = !DILocation(line: 359, column: 2, scope: !3312)
!3318 = !DILocation(line: 366, column: 14, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !3312, file: !3, line: 361, column: 2)
!3320 = !DILocation(line: 366, column: 20, scope: !3319)
!3321 = !DILocation(line: 366, column: 36, scope: !3319)
!3322 = !DILocation(line: 366, column: 42, scope: !3319)
!3323 = !DILocation(line: 366, column: 33, scope: !3319)
!3324 = !DILocation(line: 366, column: 56, scope: !3319)
!3325 = !DILocation(line: 366, column: 10, scope: !3319)
!3326 = !DILocation(line: 369, column: 13, scope: !3319)
!3327 = !DILocation(line: 369, column: 10, scope: !3319)
!3328 = !DILocation(line: 371, column: 7, scope: !3262)
!3329 = !DILocation(line: 375, column: 55, scope: !3262)
!3330 = !DILocation(line: 375, column: 35, scope: !3262)
!3331 = !DILocation(line: 375, column: 15, scope: !3262)
!3332 = !DILocation(line: 375, column: 13, scope: !3262)
!3333 = !DILocation(line: 376, column: 7, scope: !3262)
!3334 = !DILocation(line: 379, column: 13, scope: !3262)
!3335 = !DILocation(line: 380, column: 7, scope: !3262)
!3336 = !DILocation(line: 384, column: 7, scope: !3337)
!3337 = distinct !DILexicalBlock(scope: !3220, file: !3, line: 384, column: 7)
!3338 = !DILocation(line: 384, column: 16, scope: !3337)
!3339 = !DILocation(line: 384, column: 13, scope: !3337)
!3340 = !DILocation(line: 384, column: 7, scope: !3220)
!3341 = !DILocation(line: 385, column: 5, scope: !3337)
!3342 = !DILocation(line: 387, column: 3, scope: !3220)
!3343 = !DILocation(line: 388, column: 10, scope: !3220)
!3344 = !DILocation(line: 388, column: 16, scope: !3220)
!3345 = !DILocation(line: 388, column: 3, scope: !3220)
!3346 = !DILocation(line: 389, column: 1, scope: !3220)
!3347 = distinct !DISubprogram(name: "complex_visit_phi", scope: !3, file: !3, line: 394, type: !3348, scopeLine: 395, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3348 = !DISubroutineType(types: !3349)
!3349 = !{!637, !1892}
!3350 = !DILocalVariable(name: "phi", arg: 1, scope: !3347, file: !3, line: 394, type: !1892)
!3351 = !DILocation(line: 394, column: 27, scope: !3347)
!3352 = !DILocalVariable(name: "new_l", scope: !3347, file: !3, line: 396, type: !2876)
!3353 = !DILocation(line: 396, column: 21, scope: !3347)
!3354 = !DILocalVariable(name: "old_l", scope: !3347, file: !3, line: 396, type: !2876)
!3355 = !DILocation(line: 396, column: 28, scope: !3347)
!3356 = !DILocalVariable(name: "ver", scope: !3347, file: !3, line: 397, type: !7)
!3357 = !DILocation(line: 397, column: 16, scope: !3347)
!3358 = !DILocalVariable(name: "lhs", scope: !3347, file: !3, line: 398, type: !1561)
!3359 = !DILocation(line: 398, column: 8, scope: !3347)
!3360 = !DILocalVariable(name: "i", scope: !3347, file: !3, line: 399, type: !1658)
!3361 = !DILocation(line: 399, column: 7, scope: !3347)
!3362 = !DILocation(line: 401, column: 28, scope: !3347)
!3363 = !DILocation(line: 401, column: 9, scope: !3347)
!3364 = !DILocation(line: 401, column: 7, scope: !3347)
!3365 = !DILocation(line: 405, column: 3, scope: !3347)
!3366 = !DILocation(line: 408, column: 9, scope: !3347)
!3367 = !DILocation(line: 409, column: 33, scope: !3368)
!3368 = distinct !DILexicalBlock(scope: !3347, file: !3, line: 409, column: 3)
!3369 = !DILocation(line: 409, column: 12, scope: !3368)
!3370 = !DILocation(line: 409, column: 38, scope: !3368)
!3371 = !DILocation(line: 409, column: 10, scope: !3368)
!3372 = !DILocation(line: 409, column: 8, scope: !3368)
!3373 = !DILocation(line: 409, column: 43, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3368, file: !3, line: 409, column: 3)
!3375 = !DILocation(line: 409, column: 45, scope: !3374)
!3376 = !DILocation(line: 409, column: 3, scope: !3368)
!3377 = !DILocation(line: 410, column: 54, scope: !3374)
!3378 = !DILocation(line: 410, column: 59, scope: !3374)
!3379 = !DILocation(line: 410, column: 34, scope: !3374)
!3380 = !DILocation(line: 410, column: 14, scope: !3374)
!3381 = !DILocation(line: 410, column: 11, scope: !3374)
!3382 = !DILocation(line: 410, column: 5, scope: !3374)
!3383 = !DILocation(line: 409, column: 51, scope: !3374)
!3384 = !DILocation(line: 409, column: 3, scope: !3374)
!3385 = distinct !{!3385, !3376, !3386}
!3386 = !DILocation(line: 410, column: 61, scope: !3368)
!3387 = !DILocation(line: 412, column: 9, scope: !3347)
!3388 = !DILocation(line: 412, column: 7, scope: !3347)
!3389 = !DILocation(line: 413, column: 11, scope: !3347)
!3390 = !DILocation(line: 413, column: 9, scope: !3347)
!3391 = !DILocation(line: 415, column: 7, scope: !3392)
!3392 = distinct !DILexicalBlock(scope: !3347, file: !3, line: 415, column: 7)
!3393 = !DILocation(line: 415, column: 16, scope: !3392)
!3394 = !DILocation(line: 415, column: 13, scope: !3392)
!3395 = !DILocation(line: 415, column: 7, scope: !3347)
!3396 = !DILocation(line: 416, column: 5, scope: !3392)
!3397 = !DILocation(line: 418, column: 3, scope: !3347)
!3398 = !DILocation(line: 419, column: 10, scope: !3347)
!3399 = !DILocation(line: 419, column: 16, scope: !3347)
!3400 = !DILocation(line: 419, column: 3, scope: !3347)
!3401 = !DILocation(line: 420, column: 1, scope: !3347)
!3402 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !334, file: !334, line: 184, type: !3403, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3403 = !DISubroutineType(types: !3404)
!3404 = !{!2877, !1658}
!3405 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3402, file: !334, line: 184, type: !1658)
!3406 = !DILocation(line: 184, column: 1, scope: !3402)
!3407 = distinct !DISubprogram(name: "VEC_tree_heap_safe_grow_cleared", scope: !334, file: !334, line: 184, type: !3408, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3408 = !DISubroutineType(types: !3409)
!3409 = !{null, !3410, !1658}
!3410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2877, size: 64)
!3411 = !DILocalVariable(name: "vec_", arg: 1, scope: !3407, file: !334, line: 184, type: !3410)
!3412 = !DILocation(line: 184, column: 1, scope: !3407)
!3413 = !DILocalVariable(name: "size_", arg: 2, scope: !3407, file: !334, line: 184, type: !1658)
!3414 = !DILocalVariable(name: "oldsize", scope: !3407, file: !334, line: 184, type: !1658)
!3415 = distinct !DISubprogram(name: "update_parameter_components", scope: !3, file: !3, line: 684, type: !3185, scopeLine: 685, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3416 = !DILocalVariable(name: "entry_edge", scope: !3415, file: !3, line: 686, type: !1872)
!3417 = !DILocation(line: 686, column: 8, scope: !3415)
!3418 = !DILocation(line: 686, column: 39, scope: !3415)
!3419 = !DILocation(line: 686, column: 21, scope: !3415)
!3420 = !DILocalVariable(name: "parm", scope: !3415, file: !3, line: 687, type: !1561)
!3421 = !DILocation(line: 687, column: 8, scope: !3415)
!3422 = !DILocation(line: 689, column: 15, scope: !3423)
!3423 = distinct !DILexicalBlock(scope: !3415, file: !3, line: 689, column: 3)
!3424 = !DILocation(line: 689, column: 13, scope: !3423)
!3425 = !DILocation(line: 689, column: 8, scope: !3423)
!3426 = !DILocation(line: 689, column: 44, scope: !3427)
!3427 = distinct !DILexicalBlock(scope: !3423, file: !3, line: 689, column: 3)
!3428 = !DILocation(line: 689, column: 3, scope: !3423)
!3429 = !DILocalVariable(name: "type", scope: !3430, file: !3, line: 691, type: !1561)
!3430 = distinct !DILexicalBlock(scope: !3427, file: !3, line: 690, column: 5)
!3431 = !DILocation(line: 691, column: 12, scope: !3430)
!3432 = !DILocation(line: 691, column: 19, scope: !3430)
!3433 = !DILocalVariable(name: "ssa_name", scope: !3430, file: !3, line: 692, type: !1561)
!3434 = !DILocation(line: 692, column: 12, scope: !3430)
!3435 = !DILocalVariable(name: "r", scope: !3430, file: !3, line: 692, type: !1561)
!3436 = !DILocation(line: 692, column: 22, scope: !3430)
!3437 = !DILocalVariable(name: "i", scope: !3430, file: !3, line: 692, type: !1561)
!3438 = !DILocation(line: 692, column: 25, scope: !3430)
!3439 = !DILocation(line: 694, column: 11, scope: !3440)
!3440 = distinct !DILexicalBlock(scope: !3430, file: !3, line: 694, column: 11)
!3441 = !DILocation(line: 694, column: 28, scope: !3440)
!3442 = !DILocation(line: 694, column: 44, scope: !3440)
!3443 = !DILocation(line: 694, column: 63, scope: !3440)
!3444 = !DILocation(line: 694, column: 48, scope: !3440)
!3445 = !DILocation(line: 694, column: 11, scope: !3430)
!3446 = !DILocation(line: 695, column: 2, scope: !3440)
!3447 = !DILocation(line: 697, column: 14, scope: !3430)
!3448 = !DILocation(line: 697, column: 12, scope: !3430)
!3449 = !DILocation(line: 698, column: 38, scope: !3430)
!3450 = !DILocation(line: 698, column: 44, scope: !3430)
!3451 = !DILocation(line: 698, column: 18, scope: !3430)
!3452 = !DILocation(line: 698, column: 16, scope: !3430)
!3453 = !DILocation(line: 699, column: 12, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3430, file: !3, line: 699, column: 11)
!3455 = !DILocation(line: 699, column: 11, scope: !3430)
!3456 = !DILocation(line: 700, column: 2, scope: !3454)
!3457 = !DILocation(line: 702, column: 11, scope: !3430)
!3458 = !DILocation(line: 702, column: 9, scope: !3430)
!3459 = !DILocation(line: 703, column: 11, scope: !3430)
!3460 = !DILocation(line: 703, column: 9, scope: !3430)
!3461 = !DILocation(line: 704, column: 42, scope: !3430)
!3462 = !DILocation(line: 704, column: 54, scope: !3430)
!3463 = !DILocation(line: 704, column: 64, scope: !3430)
!3464 = !DILocation(line: 704, column: 67, scope: !3430)
!3465 = !DILocation(line: 704, column: 7, scope: !3430)
!3466 = !DILocation(line: 705, column: 5, scope: !3430)
!3467 = !DILocation(line: 689, column: 58, scope: !3427)
!3468 = !DILocation(line: 689, column: 56, scope: !3427)
!3469 = !DILocation(line: 689, column: 3, scope: !3427)
!3470 = distinct !{!3470, !3428, !3471}
!3471 = !DILocation(line: 705, column: 5, scope: !3423)
!3472 = !DILocation(line: 706, column: 1, scope: !3415)
!3473 = distinct !DISubprogram(name: "update_phi_components", scope: !3, file: !3, line: 712, type: !3474, scopeLine: 713, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3474 = !DISubroutineType(types: !3475)
!3475 = !{null, !2292}
!3476 = !DILocalVariable(name: "bb", arg: 1, scope: !3473, file: !3, line: 712, type: !2292)
!3477 = !DILocation(line: 712, column: 36, scope: !3473)
!3478 = !DILocalVariable(name: "gsi", scope: !3473, file: !3, line: 714, type: !2934)
!3479 = !DILocation(line: 714, column: 24, scope: !3473)
!3480 = !DILocation(line: 716, column: 30, scope: !3481)
!3481 = distinct !DILexicalBlock(scope: !3473, file: !3, line: 716, column: 3)
!3482 = !DILocation(line: 716, column: 14, scope: !3481)
!3483 = !DILocation(line: 716, column: 8, scope: !3481)
!3484 = !DILocation(line: 716, column: 36, scope: !3485)
!3485 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 716, column: 3)
!3486 = !DILocation(line: 716, column: 35, scope: !3485)
!3487 = !DILocation(line: 716, column: 3, scope: !3481)
!3488 = !DILocalVariable(name: "phi", scope: !3489, file: !3, line: 718, type: !1892)
!3489 = distinct !DILexicalBlock(scope: !3485, file: !3, line: 717, column: 5)
!3490 = !DILocation(line: 718, column: 14, scope: !3489)
!3491 = !DILocation(line: 718, column: 20, scope: !3489)
!3492 = !DILocation(line: 720, column: 46, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 720, column: 11)
!3494 = !DILocation(line: 720, column: 27, scope: !3493)
!3495 = !DILocation(line: 720, column: 11, scope: !3493)
!3496 = !DILocation(line: 720, column: 11, scope: !3489)
!3497 = !DILocalVariable(name: "lr", scope: !3498, file: !3, line: 722, type: !1561)
!3498 = distinct !DILexicalBlock(scope: !3493, file: !3, line: 721, column: 2)
!3499 = !DILocation(line: 722, column: 9, scope: !3498)
!3500 = !DILocalVariable(name: "li", scope: !3498, file: !3, line: 722, type: !1561)
!3501 = !DILocation(line: 722, column: 13, scope: !3498)
!3502 = !DILocalVariable(name: "pr", scope: !3498, file: !3, line: 723, type: !1892)
!3503 = !DILocation(line: 723, column: 11, scope: !3498)
!3504 = !DILocalVariable(name: "pi", scope: !3498, file: !3, line: 723, type: !1892)
!3505 = !DILocation(line: 723, column: 22, scope: !3498)
!3506 = !DILocalVariable(name: "i", scope: !3498, file: !3, line: 724, type: !7)
!3507 = !DILocation(line: 724, column: 17, scope: !3498)
!3508 = !DILocalVariable(name: "n", scope: !3498, file: !3, line: 724, type: !7)
!3509 = !DILocation(line: 724, column: 20, scope: !3498)
!3510 = !DILocation(line: 726, column: 52, scope: !3498)
!3511 = !DILocation(line: 726, column: 33, scope: !3498)
!3512 = !DILocation(line: 726, column: 9, scope: !3498)
!3513 = !DILocation(line: 726, column: 7, scope: !3498)
!3514 = !DILocation(line: 727, column: 8, scope: !3515)
!3515 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 727, column: 8)
!3516 = !DILocation(line: 727, column: 23, scope: !3515)
!3517 = !DILocation(line: 727, column: 8, scope: !3498)
!3518 = !DILocation(line: 729, column: 30, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3515, file: !3, line: 728, column: 6)
!3520 = !DILocation(line: 729, column: 34, scope: !3519)
!3521 = !DILocation(line: 729, column: 13, scope: !3519)
!3522 = !DILocation(line: 729, column: 11, scope: !3519)
!3523 = !DILocation(line: 730, column: 33, scope: !3519)
!3524 = !DILocation(line: 730, column: 8, scope: !3519)
!3525 = !DILocation(line: 730, column: 31, scope: !3519)
!3526 = !DILocation(line: 731, column: 6, scope: !3519)
!3527 = !DILocation(line: 733, column: 52, scope: !3498)
!3528 = !DILocation(line: 733, column: 33, scope: !3498)
!3529 = !DILocation(line: 733, column: 9, scope: !3498)
!3530 = !DILocation(line: 733, column: 7, scope: !3498)
!3531 = !DILocation(line: 734, column: 8, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 734, column: 8)
!3533 = !DILocation(line: 734, column: 23, scope: !3532)
!3534 = !DILocation(line: 734, column: 8, scope: !3498)
!3535 = !DILocation(line: 736, column: 30, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 735, column: 6)
!3537 = !DILocation(line: 736, column: 34, scope: !3536)
!3538 = !DILocation(line: 736, column: 13, scope: !3536)
!3539 = !DILocation(line: 736, column: 11, scope: !3536)
!3540 = !DILocation(line: 737, column: 33, scope: !3536)
!3541 = !DILocation(line: 737, column: 8, scope: !3536)
!3542 = !DILocation(line: 737, column: 31, scope: !3536)
!3543 = !DILocation(line: 738, column: 6, scope: !3536)
!3544 = !DILocation(line: 740, column: 11, scope: !3545)
!3545 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 740, column: 4)
!3546 = !DILocation(line: 740, column: 41, scope: !3545)
!3547 = !DILocation(line: 740, column: 20, scope: !3545)
!3548 = !DILocation(line: 740, column: 18, scope: !3545)
!3549 = !DILocation(line: 740, column: 9, scope: !3545)
!3550 = !DILocation(line: 740, column: 47, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3545, file: !3, line: 740, column: 4)
!3552 = !DILocation(line: 740, column: 51, scope: !3551)
!3553 = !DILocation(line: 740, column: 49, scope: !3551)
!3554 = !DILocation(line: 740, column: 4, scope: !3545)
!3555 = !DILocalVariable(name: "comp", scope: !3556, file: !3, line: 742, type: !1561)
!3556 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 741, column: 6)
!3557 = !DILocation(line: 742, column: 13, scope: !3556)
!3558 = !DILocalVariable(name: "arg", scope: !3556, file: !3, line: 742, type: !1561)
!3559 = !DILocation(line: 742, column: 19, scope: !3556)
!3560 = !DILocation(line: 742, column: 45, scope: !3556)
!3561 = !DILocation(line: 742, column: 50, scope: !3556)
!3562 = !DILocation(line: 742, column: 25, scope: !3556)
!3563 = !DILocation(line: 743, column: 12, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 743, column: 12)
!3565 = !DILocation(line: 743, column: 12, scope: !3556)
!3566 = !DILocation(line: 745, column: 37, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 744, column: 3)
!3568 = !DILocation(line: 745, column: 12, scope: !3567)
!3569 = !DILocation(line: 745, column: 10, scope: !3567)
!3570 = !DILocation(line: 746, column: 5, scope: !3567)
!3571 = !DILocation(line: 747, column: 3, scope: !3567)
!3572 = !DILocation(line: 748, column: 12, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 748, column: 12)
!3574 = !DILocation(line: 748, column: 12, scope: !3556)
!3575 = !DILocation(line: 750, column: 37, scope: !3576)
!3576 = distinct !DILexicalBlock(scope: !3573, file: !3, line: 749, column: 3)
!3577 = !DILocation(line: 750, column: 12, scope: !3576)
!3578 = !DILocation(line: 750, column: 10, scope: !3576)
!3579 = !DILocation(line: 751, column: 5, scope: !3576)
!3580 = !DILocation(line: 752, column: 3, scope: !3576)
!3581 = !DILocation(line: 753, column: 6, scope: !3556)
!3582 = !DILocation(line: 740, column: 54, scope: !3551)
!3583 = !DILocation(line: 740, column: 4, scope: !3551)
!3584 = distinct !{!3584, !3554, !3585}
!3585 = !DILocation(line: 753, column: 6, scope: !3545)
!3586 = !DILocation(line: 754, column: 2, scope: !3498)
!3587 = !DILocation(line: 755, column: 5, scope: !3489)
!3588 = !DILocation(line: 716, column: 53, scope: !3485)
!3589 = !DILocation(line: 716, column: 3, scope: !3485)
!3590 = distinct !{!3590, !3487, !3591}
!3591 = !DILocation(line: 755, column: 5, scope: !3481)
!3592 = !DILocation(line: 756, column: 1, scope: !3473)
!3593 = distinct !DISubprogram(name: "gsi_start_bb", scope: !561, file: !561, line: 4418, type: !3594, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3594 = !DISubroutineType(types: !3595)
!3595 = !{!2934, !2292}
!3596 = !DILocalVariable(name: "bb", arg: 1, scope: !3593, file: !561, line: 4418, type: !2292)
!3597 = !DILocation(line: 4418, column: 27, scope: !3593)
!3598 = !DILocalVariable(name: "i", scope: !3593, file: !561, line: 4420, type: !2934)
!3599 = !DILocation(line: 4420, column: 24, scope: !3593)
!3600 = !DILocalVariable(name: "seq", scope: !3593, file: !561, line: 4421, type: !1882)
!3601 = !DILocation(line: 4421, column: 14, scope: !3593)
!3602 = !DILocation(line: 4423, column: 17, scope: !3593)
!3603 = !DILocation(line: 4423, column: 9, scope: !3593)
!3604 = !DILocation(line: 4423, column: 7, scope: !3593)
!3605 = !DILocation(line: 4424, column: 29, scope: !3593)
!3606 = !DILocation(line: 4424, column: 11, scope: !3593)
!3607 = !DILocation(line: 4424, column: 5, scope: !3593)
!3608 = !DILocation(line: 4424, column: 9, scope: !3593)
!3609 = !DILocation(line: 4425, column: 11, scope: !3593)
!3610 = !DILocation(line: 4425, column: 5, scope: !3593)
!3611 = !DILocation(line: 4425, column: 9, scope: !3593)
!3612 = !DILocation(line: 4426, column: 10, scope: !3593)
!3613 = !DILocation(line: 4426, column: 5, scope: !3593)
!3614 = !DILocation(line: 4426, column: 8, scope: !3593)
!3615 = !DILocation(line: 4428, column: 3, scope: !3593)
!3616 = distinct !DISubprogram(name: "gsi_end_p", scope: !561, file: !561, line: 4467, type: !3617, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3617 = !DISubroutineType(types: !3618)
!3618 = !{!1681, !2934}
!3619 = !DILocalVariable(name: "i", arg: 1, scope: !3616, file: !561, line: 4467, type: !2934)
!3620 = !DILocation(line: 4467, column: 33, scope: !3616)
!3621 = !DILocation(line: 4469, column: 12, scope: !3616)
!3622 = !DILocation(line: 4469, column: 16, scope: !3616)
!3623 = !DILocation(line: 4469, column: 10, scope: !3616)
!3624 = !DILocation(line: 4469, column: 3, scope: !3616)
!3625 = distinct !DISubprogram(name: "expand_complex_operations_1", scope: !3, file: !3, line: 1412, type: !3626, scopeLine: 1413, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3626 = !DISubroutineType(types: !3627)
!3627 = !{null, !3628}
!3628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2934, size: 64)
!3629 = !DILocalVariable(name: "gsi", arg: 1, scope: !3625, file: !3, line: 1412, type: !3628)
!3630 = !DILocation(line: 1412, column: 52, scope: !3625)
!3631 = !DILocalVariable(name: "stmt", scope: !3625, file: !3, line: 1414, type: !1892)
!3632 = !DILocation(line: 1414, column: 10, scope: !3625)
!3633 = !DILocation(line: 1414, column: 28, scope: !3625)
!3634 = !DILocation(line: 1414, column: 17, scope: !3625)
!3635 = !DILocalVariable(name: "type", scope: !3625, file: !3, line: 1415, type: !1561)
!3636 = !DILocation(line: 1415, column: 8, scope: !3625)
!3637 = !DILocalVariable(name: "inner_type", scope: !3625, file: !3, line: 1415, type: !1561)
!3638 = !DILocation(line: 1415, column: 14, scope: !3625)
!3639 = !DILocalVariable(name: "lhs", scope: !3625, file: !3, line: 1415, type: !1561)
!3640 = !DILocation(line: 1415, column: 26, scope: !3625)
!3641 = !DILocalVariable(name: "ac", scope: !3625, file: !3, line: 1416, type: !1561)
!3642 = !DILocation(line: 1416, column: 8, scope: !3625)
!3643 = !DILocalVariable(name: "ar", scope: !3625, file: !3, line: 1416, type: !1561)
!3644 = !DILocation(line: 1416, column: 12, scope: !3625)
!3645 = !DILocalVariable(name: "ai", scope: !3625, file: !3, line: 1416, type: !1561)
!3646 = !DILocation(line: 1416, column: 16, scope: !3625)
!3647 = !DILocalVariable(name: "bc", scope: !3625, file: !3, line: 1416, type: !1561)
!3648 = !DILocation(line: 1416, column: 20, scope: !3625)
!3649 = !DILocalVariable(name: "br", scope: !3625, file: !3, line: 1416, type: !1561)
!3650 = !DILocation(line: 1416, column: 24, scope: !3625)
!3651 = !DILocalVariable(name: "bi", scope: !3625, file: !3, line: 1416, type: !1561)
!3652 = !DILocation(line: 1416, column: 28, scope: !3625)
!3653 = !DILocalVariable(name: "al", scope: !3625, file: !3, line: 1417, type: !2876)
!3654 = !DILocation(line: 1417, column: 21, scope: !3625)
!3655 = !DILocalVariable(name: "bl", scope: !3625, file: !3, line: 1417, type: !2876)
!3656 = !DILocation(line: 1417, column: 25, scope: !3625)
!3657 = !DILocalVariable(name: "code", scope: !3625, file: !3, line: 1418, type: !366)
!3658 = !DILocation(line: 1418, column: 18, scope: !3625)
!3659 = !DILocation(line: 1420, column: 25, scope: !3625)
!3660 = !DILocation(line: 1420, column: 9, scope: !3625)
!3661 = !DILocation(line: 1420, column: 7, scope: !3625)
!3662 = !DILocation(line: 1421, column: 8, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 1421, column: 7)
!3664 = !DILocation(line: 1421, column: 12, scope: !3663)
!3665 = !DILocation(line: 1421, column: 28, scope: !3663)
!3666 = !DILocation(line: 1421, column: 15, scope: !3663)
!3667 = !DILocation(line: 1421, column: 34, scope: !3663)
!3668 = !DILocation(line: 1421, column: 7, scope: !3625)
!3669 = !DILocation(line: 1422, column: 5, scope: !3663)
!3670 = !DILocation(line: 1424, column: 10, scope: !3625)
!3671 = !DILocation(line: 1424, column: 8, scope: !3625)
!3672 = !DILocation(line: 1425, column: 28, scope: !3625)
!3673 = !DILocation(line: 1425, column: 10, scope: !3625)
!3674 = !DILocation(line: 1425, column: 8, scope: !3625)
!3675 = !DILocation(line: 1428, column: 11, scope: !3625)
!3676 = !DILocation(line: 1428, column: 3, scope: !3625)
!3677 = !DILocation(line: 1440, column: 11, scope: !3678)
!3678 = distinct !DILexicalBlock(scope: !3679, file: !3, line: 1440, column: 11)
!3679 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 1429, column: 5)
!3680 = !DILocation(line: 1440, column: 28, scope: !3678)
!3681 = !DILocation(line: 1440, column: 11, scope: !3679)
!3682 = !DILocation(line: 1441, column: 2, scope: !3678)
!3683 = !DILocation(line: 1442, column: 20, scope: !3679)
!3684 = !DILocation(line: 1442, column: 18, scope: !3679)
!3685 = !DILocation(line: 1443, column: 7, scope: !3679)
!3686 = !DILocation(line: 1449, column: 20, scope: !3679)
!3687 = !DILocation(line: 1449, column: 18, scope: !3679)
!3688 = !DILocation(line: 1450, column: 11, scope: !3689)
!3689 = distinct !DILexicalBlock(scope: !3679, file: !3, line: 1450, column: 11)
!3690 = !DILocation(line: 1450, column: 34, scope: !3689)
!3691 = !DILocation(line: 1450, column: 11, scope: !3679)
!3692 = !DILocation(line: 1451, column: 2, scope: !3689)
!3693 = !DILocation(line: 1452, column: 7, scope: !3679)
!3694 = !DILocalVariable(name: "rhs", scope: !3695, file: !3, line: 1456, type: !1561)
!3695 = distinct !DILexicalBlock(scope: !3679, file: !3, line: 1455, column: 7)
!3696 = !DILocation(line: 1456, column: 7, scope: !3695)
!3697 = !DILocation(line: 1460, column: 19, scope: !3698)
!3698 = distinct !DILexicalBlock(scope: !3695, file: !3, line: 1460, column: 6)
!3699 = !DILocation(line: 1460, column: 6, scope: !3698)
!3700 = !DILocation(line: 1460, column: 25, scope: !3698)
!3701 = !DILocation(line: 1460, column: 6, scope: !3695)
!3702 = !DILocation(line: 1461, column: 4, scope: !3698)
!3703 = !DILocation(line: 1463, column: 6, scope: !3704)
!3704 = distinct !DILexicalBlock(scope: !3695, file: !3, line: 1463, column: 6)
!3705 = !DILocation(line: 1463, column: 23, scope: !3704)
!3706 = !DILocation(line: 1463, column: 6, scope: !3695)
!3707 = !DILocation(line: 1464, column: 25, scope: !3704)
!3708 = !DILocation(line: 1464, column: 30, scope: !3704)
!3709 = !DILocation(line: 1464, column: 4, scope: !3704)
!3710 = !DILocation(line: 1465, column: 29, scope: !3711)
!3711 = distinct !DILexicalBlock(scope: !3704, file: !3, line: 1465, column: 11)
!3712 = !DILocation(line: 1465, column: 11, scope: !3711)
!3713 = !DILocation(line: 1466, column: 4, scope: !3711)
!3714 = !DILocation(line: 1466, column: 32, scope: !3711)
!3715 = !DILocation(line: 1466, column: 8, scope: !3711)
!3716 = !DILocation(line: 1466, column: 38, scope: !3711)
!3717 = !DILocation(line: 1467, column: 8, scope: !3711)
!3718 = !DILocation(line: 1467, column: 35, scope: !3711)
!3719 = !DILocation(line: 1467, column: 11, scope: !3711)
!3720 = !DILocation(line: 1467, column: 41, scope: !3711)
!3721 = !DILocation(line: 1468, column: 4, scope: !3711)
!3722 = !DILocation(line: 1468, column: 7, scope: !3711)
!3723 = !DILocation(line: 1468, column: 23, scope: !3711)
!3724 = !DILocation(line: 1465, column: 11, scope: !3704)
!3725 = !DILocation(line: 1470, column: 32, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3711, file: !3, line: 1469, column: 4)
!3727 = !DILocation(line: 1470, column: 12, scope: !3726)
!3728 = !DILocation(line: 1470, column: 10, scope: !3726)
!3729 = !DILocation(line: 1471, column: 31, scope: !3726)
!3730 = !DILocation(line: 1471, column: 36, scope: !3726)
!3731 = !DILocation(line: 1472, column: 48, scope: !3726)
!3732 = !DILocation(line: 1472, column: 24, scope: !3726)
!3733 = !DILocation(line: 1473, column: 12, scope: !3726)
!3734 = !DILocation(line: 1471, column: 12, scope: !3726)
!3735 = !DILocation(line: 1471, column: 10, scope: !3726)
!3736 = !DILocation(line: 1475, column: 39, scope: !3726)
!3737 = !DILocation(line: 1475, column: 44, scope: !3726)
!3738 = !DILocation(line: 1475, column: 6, scope: !3726)
!3739 = !DILocation(line: 1476, column: 24, scope: !3726)
!3740 = !DILocation(line: 1476, column: 13, scope: !3726)
!3741 = !DILocation(line: 1476, column: 11, scope: !3726)
!3742 = !DILocation(line: 1477, column: 19, scope: !3726)
!3743 = !DILocation(line: 1477, column: 6, scope: !3726)
!3744 = !DILocation(line: 1478, column: 4, scope: !3726)
!3745 = !DILocation(line: 1480, column: 7, scope: !3679)
!3746 = !DILocation(line: 1485, column: 25, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 1485, column: 7)
!3748 = !DILocation(line: 1485, column: 7, scope: !3747)
!3749 = !DILocation(line: 1485, column: 7, scope: !3625)
!3750 = !DILocation(line: 1487, column: 32, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3747, file: !3, line: 1486, column: 5)
!3752 = !DILocation(line: 1487, column: 12, scope: !3751)
!3753 = !DILocation(line: 1487, column: 10, scope: !3751)
!3754 = !DILocation(line: 1488, column: 29, scope: !3751)
!3755 = !DILocation(line: 1488, column: 13, scope: !3751)
!3756 = !DILocation(line: 1488, column: 35, scope: !3751)
!3757 = !DILocation(line: 1488, column: 12, scope: !3751)
!3758 = !DILocation(line: 1488, column: 62, scope: !3751)
!3759 = !DILocation(line: 1488, column: 42, scope: !3751)
!3760 = !DILocation(line: 1488, column: 10, scope: !3751)
!3761 = !DILocation(line: 1489, column: 5, scope: !3751)
!3762 = !DILocation(line: 1493, column: 29, scope: !3763)
!3763 = distinct !DILexicalBlock(scope: !3747, file: !3, line: 1492, column: 5)
!3764 = !DILocation(line: 1493, column: 12, scope: !3763)
!3765 = !DILocation(line: 1493, column: 10, scope: !3763)
!3766 = !DILocation(line: 1494, column: 29, scope: !3763)
!3767 = !DILocation(line: 1494, column: 12, scope: !3763)
!3768 = !DILocation(line: 1494, column: 10, scope: !3763)
!3769 = !DILocation(line: 1497, column: 27, scope: !3625)
!3770 = !DILocation(line: 1497, column: 32, scope: !3625)
!3771 = !DILocation(line: 1497, column: 8, scope: !3625)
!3772 = !DILocation(line: 1497, column: 6, scope: !3625)
!3773 = !DILocation(line: 1498, column: 27, scope: !3625)
!3774 = !DILocation(line: 1498, column: 32, scope: !3625)
!3775 = !DILocation(line: 1498, column: 8, scope: !3625)
!3776 = !DILocation(line: 1498, column: 6, scope: !3625)
!3777 = !DILocation(line: 1500, column: 7, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 1500, column: 7)
!3779 = !DILocation(line: 1500, column: 13, scope: !3778)
!3780 = !DILocation(line: 1500, column: 10, scope: !3778)
!3781 = !DILocation(line: 1500, column: 7, scope: !3625)
!3782 = !DILocation(line: 1501, column: 10, scope: !3778)
!3783 = !DILocation(line: 1501, column: 8, scope: !3778)
!3784 = !DILocation(line: 1501, column: 19, scope: !3778)
!3785 = !DILocation(line: 1501, column: 17, scope: !3778)
!3786 = !DILocation(line: 1501, column: 5, scope: !3778)
!3787 = !DILocation(line: 1502, column: 12, scope: !3788)
!3788 = distinct !DILexicalBlock(scope: !3778, file: !3, line: 1502, column: 12)
!3789 = !DILocation(line: 1502, column: 12, scope: !3778)
!3790 = !DILocation(line: 1504, column: 31, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !3788, file: !3, line: 1503, column: 5)
!3792 = !DILocation(line: 1504, column: 36, scope: !3791)
!3793 = !DILocation(line: 1504, column: 12, scope: !3791)
!3794 = !DILocation(line: 1504, column: 10, scope: !3791)
!3795 = !DILocation(line: 1505, column: 31, scope: !3791)
!3796 = !DILocation(line: 1505, column: 36, scope: !3791)
!3797 = !DILocation(line: 1505, column: 12, scope: !3791)
!3798 = !DILocation(line: 1505, column: 10, scope: !3791)
!3799 = !DILocation(line: 1506, column: 5, scope: !3791)
!3800 = !DILocation(line: 1508, column: 13, scope: !3788)
!3801 = !DILocation(line: 1508, column: 8, scope: !3788)
!3802 = !DILocation(line: 1510, column: 24, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 1510, column: 7)
!3804 = !DILocation(line: 1510, column: 7, scope: !3803)
!3805 = !DILocation(line: 1510, column: 7, scope: !3625)
!3806 = !DILocation(line: 1512, column: 32, scope: !3807)
!3807 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 1511, column: 5)
!3808 = !DILocation(line: 1512, column: 12, scope: !3807)
!3809 = !DILocation(line: 1512, column: 10, scope: !3807)
!3810 = !DILocation(line: 1513, column: 11, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3807, file: !3, line: 1513, column: 11)
!3812 = !DILocation(line: 1513, column: 14, scope: !3811)
!3813 = !DILocation(line: 1513, column: 11, scope: !3807)
!3814 = !DILocation(line: 1514, column: 5, scope: !3811)
!3815 = !DILocation(line: 1514, column: 2, scope: !3811)
!3816 = !DILocation(line: 1516, column: 11, scope: !3817)
!3817 = distinct !DILexicalBlock(scope: !3807, file: !3, line: 1516, column: 11)
!3818 = !DILocation(line: 1516, column: 34, scope: !3817)
!3819 = !DILocation(line: 1516, column: 11, scope: !3807)
!3820 = !DILocation(line: 1517, column: 5, scope: !3817)
!3821 = !DILocation(line: 1517, column: 2, scope: !3817)
!3822 = !DILocation(line: 1518, column: 16, scope: !3823)
!3823 = distinct !DILexicalBlock(scope: !3817, file: !3, line: 1518, column: 16)
!3824 = !DILocation(line: 1518, column: 22, scope: !3823)
!3825 = !DILocation(line: 1518, column: 19, scope: !3823)
!3826 = !DILocation(line: 1518, column: 16, scope: !3817)
!3827 = !DILocation(line: 1519, column: 7, scope: !3823)
!3828 = !DILocation(line: 1519, column: 5, scope: !3823)
!3829 = !DILocation(line: 1519, column: 2, scope: !3823)
!3830 = !DILocation(line: 1522, column: 29, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3823, file: !3, line: 1521, column: 2)
!3832 = !DILocation(line: 1522, column: 9, scope: !3831)
!3833 = !DILocation(line: 1522, column: 7, scope: !3831)
!3834 = !DILocation(line: 1523, column: 8, scope: !3835)
!3835 = distinct !DILexicalBlock(scope: !3831, file: !3, line: 1523, column: 8)
!3836 = !DILocation(line: 1523, column: 11, scope: !3835)
!3837 = !DILocation(line: 1523, column: 8, scope: !3831)
!3838 = !DILocation(line: 1524, column: 9, scope: !3835)
!3839 = !DILocation(line: 1524, column: 6, scope: !3835)
!3840 = !DILocation(line: 1526, column: 5, scope: !3807)
!3841 = !DILocation(line: 1528, column: 13, scope: !3803)
!3842 = !DILocation(line: 1528, column: 8, scope: !3803)
!3843 = !DILocation(line: 1530, column: 11, scope: !3625)
!3844 = !DILocation(line: 1530, column: 3, scope: !3625)
!3845 = !DILocation(line: 1534, column: 32, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 1531, column: 5)
!3847 = !DILocation(line: 1534, column: 37, scope: !3846)
!3848 = !DILocation(line: 1534, column: 49, scope: !3846)
!3849 = !DILocation(line: 1534, column: 53, scope: !3846)
!3850 = !DILocation(line: 1534, column: 57, scope: !3846)
!3851 = !DILocation(line: 1534, column: 61, scope: !3846)
!3852 = !DILocation(line: 1534, column: 65, scope: !3846)
!3853 = !DILocation(line: 1534, column: 71, scope: !3846)
!3854 = !DILocation(line: 1534, column: 75, scope: !3846)
!3855 = !DILocation(line: 1534, column: 7, scope: !3846)
!3856 = !DILocation(line: 1535, column: 7, scope: !3846)
!3857 = !DILocation(line: 1538, column: 38, scope: !3846)
!3858 = !DILocation(line: 1538, column: 43, scope: !3846)
!3859 = !DILocation(line: 1538, column: 55, scope: !3846)
!3860 = !DILocation(line: 1538, column: 59, scope: !3846)
!3861 = !DILocation(line: 1538, column: 63, scope: !3846)
!3862 = !DILocation(line: 1538, column: 67, scope: !3846)
!3863 = !DILocation(line: 1538, column: 71, scope: !3846)
!3864 = !DILocation(line: 1538, column: 75, scope: !3846)
!3865 = !DILocation(line: 1538, column: 7, scope: !3846)
!3866 = !DILocation(line: 1539, column: 7, scope: !3846)
!3867 = !DILocation(line: 1546, column: 32, scope: !3846)
!3868 = !DILocation(line: 1546, column: 37, scope: !3846)
!3869 = !DILocation(line: 1546, column: 49, scope: !3846)
!3870 = !DILocation(line: 1546, column: 53, scope: !3846)
!3871 = !DILocation(line: 1546, column: 57, scope: !3846)
!3872 = !DILocation(line: 1546, column: 61, scope: !3846)
!3873 = !DILocation(line: 1546, column: 65, scope: !3846)
!3874 = !DILocation(line: 1546, column: 71, scope: !3846)
!3875 = !DILocation(line: 1546, column: 75, scope: !3846)
!3876 = !DILocation(line: 1546, column: 7, scope: !3846)
!3877 = !DILocation(line: 1547, column: 7, scope: !3846)
!3878 = !DILocation(line: 1550, column: 32, scope: !3846)
!3879 = !DILocation(line: 1550, column: 37, scope: !3846)
!3880 = !DILocation(line: 1550, column: 49, scope: !3846)
!3881 = !DILocation(line: 1550, column: 53, scope: !3846)
!3882 = !DILocation(line: 1550, column: 7, scope: !3846)
!3883 = !DILocation(line: 1551, column: 7, scope: !3846)
!3884 = !DILocation(line: 1554, column: 33, scope: !3846)
!3885 = !DILocation(line: 1554, column: 38, scope: !3846)
!3886 = !DILocation(line: 1554, column: 50, scope: !3846)
!3887 = !DILocation(line: 1554, column: 54, scope: !3846)
!3888 = !DILocation(line: 1554, column: 7, scope: !3846)
!3889 = !DILocation(line: 1555, column: 7, scope: !3846)
!3890 = !DILocation(line: 1559, column: 34, scope: !3846)
!3891 = !DILocation(line: 1559, column: 39, scope: !3846)
!3892 = !DILocation(line: 1559, column: 43, scope: !3846)
!3893 = !DILocation(line: 1559, column: 47, scope: !3846)
!3894 = !DILocation(line: 1559, column: 51, scope: !3846)
!3895 = !DILocation(line: 1559, column: 55, scope: !3846)
!3896 = !DILocation(line: 1559, column: 7, scope: !3846)
!3897 = !DILocation(line: 1560, column: 7, scope: !3846)
!3898 = !DILocation(line: 1563, column: 7, scope: !3846)
!3899 = !DILocation(line: 1564, column: 5, scope: !3846)
!3900 = !DILocation(line: 1565, column: 1, scope: !3625)
!3901 = distinct !DISubprogram(name: "gsi_next", scope: !561, file: !561, line: 4485, type: !3626, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3902 = !DILocalVariable(name: "i", arg: 1, scope: !3901, file: !561, line: 4485, type: !3628)
!3903 = !DILocation(line: 4485, column: 33, scope: !3901)
!3904 = !DILocation(line: 4487, column: 12, scope: !3901)
!3905 = !DILocation(line: 4487, column: 15, scope: !3901)
!3906 = !DILocation(line: 4487, column: 20, scope: !3901)
!3907 = !DILocation(line: 4487, column: 3, scope: !3901)
!3908 = !DILocation(line: 4487, column: 6, scope: !3901)
!3909 = !DILocation(line: 4487, column: 10, scope: !3901)
!3910 = !DILocation(line: 4488, column: 1, scope: !3901)
!3911 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !334, file: !334, line: 184, type: !3912, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3912 = !DISubroutineType(types: !3913)
!3913 = !{null, !3410}
!3914 = !DILocalVariable(name: "vec_", arg: 1, scope: !3911, file: !334, line: 184, type: !3410)
!3915 = !DILocation(line: 184, column: 1, scope: !3911)
!3916 = !DILocation(line: 184, column: 1, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3911, file: !334, line: 184, column: 1)
!3918 = distinct !DISubprogram(name: "VEC_complex_lattice_t_heap_free", scope: !3, file: !3, line: 56, type: !3919, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3919 = !DISubroutineType(types: !3920)
!3920 = !{null, !3179}
!3921 = !DILocalVariable(name: "vec_", arg: 1, scope: !3918, file: !3, line: 56, type: !3179)
!3922 = !DILocation(line: 56, column: 1, scope: !3918)
!3923 = !DILocation(line: 56, column: 1, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3918, file: !3, line: 56, column: 1)
!3925 = distinct !DISubprogram(name: "gsi_stmt", scope: !561, file: !561, line: 4501, type: !3926, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3926 = !DISubroutineType(types: !3927)
!3927 = !{!1892, !2934}
!3928 = !DILocalVariable(name: "i", arg: 1, scope: !3925, file: !561, line: 4501, type: !2934)
!3929 = !DILocation(line: 4501, column: 32, scope: !3925)
!3930 = !DILocation(line: 4503, column: 12, scope: !3925)
!3931 = !DILocation(line: 4503, column: 17, scope: !3925)
!3932 = !DILocation(line: 4503, column: 3, scope: !3925)
!3933 = distinct !DISubprogram(name: "prop_set_simulate_again", scope: !638, file: !638, line: 28, type: !3934, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3934 = !DISubroutineType(types: !3935)
!3935 = !{null, !1892, !1681}
!3936 = !DILocalVariable(name: "s", arg: 1, scope: !3933, file: !638, line: 28, type: !1892)
!3937 = !DILocation(line: 28, column: 33, scope: !3933)
!3938 = !DILocalVariable(name: "visit_p", arg: 2, scope: !3933, file: !638, line: 28, type: !1681)
!3939 = !DILocation(line: 28, column: 41, scope: !3933)
!3940 = !DILocation(line: 30, column: 23, scope: !3933)
!3941 = !DILocation(line: 30, column: 26, scope: !3933)
!3942 = !DILocation(line: 30, column: 3, scope: !3933)
!3943 = !DILocation(line: 31, column: 1, scope: !3933)
!3944 = distinct !DISubprogram(name: "is_complex_reg", scope: !3, file: !3, line: 168, type: !3945, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3945 = !DISubroutineType(types: !3946)
!3946 = !{!1681, !1561}
!3947 = !DILocalVariable(name: "lhs", arg: 1, scope: !3944, file: !3, line: 168, type: !1561)
!3948 = !DILocation(line: 168, column: 22, scope: !3944)
!3949 = !DILocation(line: 170, column: 10, scope: !3944)
!3950 = !DILocation(line: 170, column: 38, scope: !3944)
!3951 = !DILocation(line: 170, column: 54, scope: !3944)
!3952 = !DILocation(line: 170, column: 72, scope: !3944)
!3953 = !DILocation(line: 170, column: 57, scope: !3944)
!3954 = !DILocation(line: 0, scope: !3944)
!3955 = !DILocation(line: 170, column: 3, scope: !3944)
!3956 = distinct !DISubprogram(name: "gimple_phi_result", scope: !561, file: !561, line: 3071, type: !3957, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3957 = !DISubroutineType(types: !3958)
!3958 = !{!1561, !3959}
!3959 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1562, line: 60, baseType: !2862)
!3960 = !DILocalVariable(name: "gs", arg: 1, scope: !3956, file: !561, line: 3071, type: !3959)
!3961 = !DILocation(line: 3071, column: 33, scope: !3956)
!3962 = !DILocation(line: 3074, column: 10, scope: !3956)
!3963 = !DILocation(line: 3074, column: 14, scope: !3956)
!3964 = !DILocation(line: 3074, column: 25, scope: !3956)
!3965 = !DILocation(line: 3074, column: 3, scope: !3956)
!3966 = distinct !DISubprogram(name: "gimple_code", scope: !561, file: !561, line: 1052, type: !3967, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3967 = !DISubroutineType(types: !3968)
!3968 = !{!560, !3959}
!3969 = !DILocalVariable(name: "g", arg: 1, scope: !3966, file: !561, line: 1052, type: !3959)
!3970 = !DILocation(line: 1052, column: 27, scope: !3966)
!3971 = !DILocation(line: 1054, column: 10, scope: !3966)
!3972 = !DILocation(line: 1054, column: 13, scope: !3966)
!3973 = !DILocation(line: 1054, column: 20, scope: !3966)
!3974 = !DILocation(line: 1054, column: 3, scope: !3966)
!3975 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !561, file: !561, line: 1878, type: !3957, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3976 = !DILocalVariable(name: "gs", arg: 1, scope: !3975, file: !561, line: 1878, type: !3959)
!3977 = !DILocation(line: 1878, column: 31, scope: !3975)
!3978 = !DILocation(line: 1881, column: 21, scope: !3975)
!3979 = !DILocation(line: 1881, column: 10, scope: !3975)
!3980 = !DILocation(line: 1881, column: 3, scope: !3975)
!3981 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !561, file: !561, line: 1694, type: !3957, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3982 = !DILocalVariable(name: "gs", arg: 1, scope: !3981, file: !561, line: 1694, type: !3959)
!3983 = !DILocation(line: 1694, column: 33, scope: !3981)
!3984 = !DILocation(line: 1697, column: 21, scope: !3981)
!3985 = !DILocation(line: 1697, column: 10, scope: !3981)
!3986 = !DILocation(line: 1697, column: 3, scope: !3981)
!3987 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !561, file: !561, line: 1815, type: !3988, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!3988 = !DISubroutineType(types: !3989)
!3989 = !{!366, !3959}
!3990 = !DILocalVariable(name: "gs", arg: 1, scope: !3987, file: !561, line: 1815, type: !3959)
!3991 = !DILocation(line: 1815, column: 38, scope: !3987)
!3992 = !DILocalVariable(name: "code", scope: !3987, file: !561, line: 1817, type: !366)
!3993 = !DILocation(line: 1817, column: 18, scope: !3987)
!3994 = !DILocation(line: 1820, column: 28, scope: !3987)
!3995 = !DILocation(line: 1820, column: 10, scope: !3987)
!3996 = !DILocation(line: 1820, column: 8, scope: !3987)
!3997 = !DILocation(line: 1821, column: 29, scope: !3998)
!3998 = distinct !DILexicalBlock(scope: !3987, file: !561, line: 1821, column: 7)
!3999 = !DILocation(line: 1821, column: 7, scope: !3998)
!4000 = !DILocation(line: 1821, column: 35, scope: !3998)
!4001 = !DILocation(line: 1821, column: 7, scope: !3987)
!4002 = !DILocation(line: 1822, column: 12, scope: !3998)
!4003 = !DILocation(line: 1822, column: 10, scope: !3998)
!4004 = !DILocation(line: 1822, column: 5, scope: !3998)
!4005 = !DILocation(line: 1824, column: 10, scope: !3987)
!4006 = !DILocation(line: 1824, column: 3, scope: !3987)
!4007 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !561, file: !561, line: 1727, type: !3957, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4008 = !DILocalVariable(name: "gs", arg: 1, scope: !4007, file: !561, line: 1727, type: !3959)
!4009 = !DILocation(line: 1727, column: 34, scope: !4007)
!4010 = !DILocation(line: 1730, column: 21, scope: !4007)
!4011 = !DILocation(line: 1730, column: 10, scope: !4007)
!4012 = !DILocation(line: 1730, column: 3, scope: !4007)
!4013 = distinct !DISubprogram(name: "gimple_num_ops", scope: !561, file: !561, line: 1596, type: !4014, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4014 = !DISubroutineType(types: !4015)
!4015 = !{!7, !3959}
!4016 = !DILocalVariable(name: "gs", arg: 1, scope: !4013, file: !561, line: 1596, type: !3959)
!4017 = !DILocation(line: 1596, column: 30, scope: !4013)
!4018 = !DILocation(line: 1598, column: 10, scope: !4013)
!4019 = !DILocation(line: 1598, column: 14, scope: !4013)
!4020 = !DILocation(line: 1598, column: 21, scope: !4013)
!4021 = !DILocation(line: 1598, column: 3, scope: !4013)
!4022 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !561, file: !561, line: 1759, type: !3957, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4023 = !DILocalVariable(name: "gs", arg: 1, scope: !4022, file: !561, line: 1759, type: !3959)
!4024 = !DILocation(line: 1759, column: 34, scope: !4022)
!4025 = !DILocation(line: 1763, column: 23, scope: !4026)
!4026 = distinct !DILexicalBlock(scope: !4022, file: !561, line: 1763, column: 7)
!4027 = !DILocation(line: 1763, column: 7, scope: !4026)
!4028 = !DILocation(line: 1763, column: 27, scope: !4026)
!4029 = !DILocation(line: 1763, column: 7, scope: !4022)
!4030 = !DILocation(line: 1764, column: 23, scope: !4026)
!4031 = !DILocation(line: 1764, column: 12, scope: !4026)
!4032 = !DILocation(line: 1764, column: 5, scope: !4026)
!4033 = !DILocation(line: 1766, column: 5, scope: !4026)
!4034 = !DILocation(line: 1767, column: 1, scope: !4022)
!4035 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !561, file: !561, line: 2241, type: !3957, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4036 = !DILocalVariable(name: "gs", arg: 1, scope: !4035, file: !561, line: 2241, type: !3959)
!4037 = !DILocation(line: 2241, column: 31, scope: !4035)
!4038 = !DILocation(line: 2244, column: 21, scope: !4035)
!4039 = !DILocation(line: 2244, column: 10, scope: !4035)
!4040 = !DILocation(line: 2244, column: 3, scope: !4035)
!4041 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !561, file: !561, line: 2271, type: !3957, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4042 = !DILocalVariable(name: "gs", arg: 1, scope: !4041, file: !561, line: 2271, type: !3959)
!4043 = !DILocation(line: 2271, column: 31, scope: !4041)
!4044 = !DILocation(line: 2274, column: 21, scope: !4041)
!4045 = !DILocation(line: 2274, column: 10, scope: !4041)
!4046 = !DILocation(line: 2274, column: 3, scope: !4041)
!4047 = distinct !DISubprogram(name: "gimple_expr_code", scope: !561, file: !561, line: 1438, type: !3988, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4048 = !DILocalVariable(name: "stmt", arg: 1, scope: !4047, file: !561, line: 1438, type: !3959)
!4049 = !DILocation(line: 1438, column: 32, scope: !4047)
!4050 = !DILocalVariable(name: "code", scope: !4047, file: !561, line: 1440, type: !560)
!4051 = !DILocation(line: 1440, column: 20, scope: !4047)
!4052 = !DILocation(line: 1440, column: 40, scope: !4047)
!4053 = !DILocation(line: 1440, column: 27, scope: !4047)
!4054 = !DILocation(line: 1441, column: 7, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4047, file: !561, line: 1441, column: 7)
!4056 = !DILocation(line: 1441, column: 12, scope: !4055)
!4057 = !DILocation(line: 1441, column: 29, scope: !4055)
!4058 = !DILocation(line: 1441, column: 32, scope: !4055)
!4059 = !DILocation(line: 1441, column: 37, scope: !4055)
!4060 = !DILocation(line: 1441, column: 7, scope: !4047)
!4061 = !DILocation(line: 1442, column: 29, scope: !4055)
!4062 = !DILocation(line: 1442, column: 35, scope: !4055)
!4063 = !DILocation(line: 1442, column: 42, scope: !4055)
!4064 = !DILocation(line: 1442, column: 5, scope: !4055)
!4065 = !DILocation(line: 1443, column: 12, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4055, file: !561, line: 1443, column: 12)
!4067 = !DILocation(line: 1443, column: 17, scope: !4066)
!4068 = !DILocation(line: 1443, column: 12, scope: !4055)
!4069 = !DILocation(line: 1444, column: 5, scope: !4066)
!4070 = !DILocation(line: 1446, column: 5, scope: !4066)
!4071 = !DILocation(line: 1448, column: 5, scope: !4047)
!4072 = !DILocation(line: 1450, column: 1, scope: !4047)
!4073 = distinct !DISubprogram(name: "gimple_set_visited", scope: !561, file: !561, line: 1217, type: !3934, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4074 = !DILocalVariable(name: "stmt", arg: 1, scope: !4073, file: !561, line: 1217, type: !1892)
!4075 = !DILocation(line: 1217, column: 28, scope: !4073)
!4076 = !DILocalVariable(name: "visited_p", arg: 2, scope: !4073, file: !561, line: 1217, type: !1681)
!4077 = !DILocation(line: 1217, column: 39, scope: !4073)
!4078 = !DILocation(line: 1219, column: 37, scope: !4073)
!4079 = !DILocation(line: 1219, column: 26, scope: !4073)
!4080 = !DILocation(line: 1219, column: 3, scope: !4073)
!4081 = !DILocation(line: 1219, column: 9, scope: !4073)
!4082 = !DILocation(line: 1219, column: 16, scope: !4073)
!4083 = !DILocation(line: 1219, column: 24, scope: !4073)
!4084 = !DILocation(line: 1220, column: 1, scope: !4073)
!4085 = distinct !DISubprogram(name: "gimple_op", scope: !561, file: !561, line: 1631, type: !4086, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4086 = !DISubroutineType(types: !4087)
!4087 = !{!1561, !3959, !7}
!4088 = !DILocalVariable(name: "gs", arg: 1, scope: !4085, file: !561, line: 1631, type: !3959)
!4089 = !DILocation(line: 1631, column: 25, scope: !4085)
!4090 = !DILocalVariable(name: "i", arg: 2, scope: !4085, file: !561, line: 1631, type: !7)
!4091 = !DILocation(line: 1631, column: 38, scope: !4085)
!4092 = !DILocation(line: 1633, column: 23, scope: !4093)
!4093 = distinct !DILexicalBlock(scope: !4085, file: !561, line: 1633, column: 7)
!4094 = !DILocation(line: 1633, column: 7, scope: !4093)
!4095 = !DILocation(line: 1633, column: 7, scope: !4085)
!4096 = !DILocation(line: 1638, column: 26, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4093, file: !561, line: 1634, column: 5)
!4098 = !DILocation(line: 1638, column: 14, scope: !4097)
!4099 = !DILocation(line: 1638, column: 50, scope: !4097)
!4100 = !DILocation(line: 1638, column: 7, scope: !4097)
!4101 = !DILocation(line: 1641, column: 5, scope: !4093)
!4102 = !DILocation(line: 1642, column: 1, scope: !4085)
!4103 = distinct !DISubprogram(name: "gimple_has_ops", scope: !561, file: !561, line: 1274, type: !4104, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4104 = !DISubroutineType(types: !4105)
!4105 = !{!1681, !3959}
!4106 = !DILocalVariable(name: "g", arg: 1, scope: !4103, file: !561, line: 1274, type: !3959)
!4107 = !DILocation(line: 1274, column: 30, scope: !4103)
!4108 = !DILocation(line: 1276, column: 23, scope: !4103)
!4109 = !DILocation(line: 1276, column: 10, scope: !4103)
!4110 = !DILocation(line: 1276, column: 26, scope: !4103)
!4111 = !DILocation(line: 1276, column: 41, scope: !4103)
!4112 = !DILocation(line: 1276, column: 57, scope: !4103)
!4113 = !DILocation(line: 1276, column: 44, scope: !4103)
!4114 = !DILocation(line: 1276, column: 60, scope: !4103)
!4115 = !DILocation(line: 0, scope: !4103)
!4116 = !DILocation(line: 1276, column: 3, scope: !4103)
!4117 = distinct !DISubprogram(name: "gimple_ops", scope: !561, file: !561, line: 1614, type: !4118, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4118 = !DISubroutineType(types: !4119)
!4119 = !{!1927, !1892}
!4120 = !DILocalVariable(name: "gs", arg: 1, scope: !4117, file: !561, line: 1614, type: !1892)
!4121 = !DILocation(line: 1614, column: 20, scope: !4117)
!4122 = !DILocalVariable(name: "off", scope: !4117, file: !561, line: 1616, type: !2038)
!4123 = !DILocation(line: 1616, column: 10, scope: !4117)
!4124 = !DILocation(line: 1621, column: 56, scope: !4117)
!4125 = !DILocation(line: 1621, column: 28, scope: !4117)
!4126 = !DILocation(line: 1621, column: 9, scope: !4117)
!4127 = !DILocation(line: 1621, column: 7, scope: !4117)
!4128 = !DILocation(line: 1622, column: 3, scope: !4117)
!4129 = !DILocation(line: 1624, column: 29, scope: !4117)
!4130 = !DILocation(line: 1624, column: 20, scope: !4117)
!4131 = !DILocation(line: 1624, column: 34, scope: !4117)
!4132 = !DILocation(line: 1624, column: 32, scope: !4117)
!4133 = !DILocation(line: 1624, column: 10, scope: !4117)
!4134 = !DILocation(line: 1624, column: 3, scope: !4117)
!4135 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !561, file: !561, line: 1073, type: !4136, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4136 = !DISubroutineType(types: !4137)
!4137 = !{!599, !1892}
!4138 = !DILocalVariable(name: "gs", arg: 1, scope: !4135, file: !561, line: 1073, type: !1892)
!4139 = !DILocation(line: 1073, column: 36, scope: !4135)
!4140 = !DILocation(line: 1075, column: 37, scope: !4135)
!4141 = !DILocation(line: 1075, column: 24, scope: !4135)
!4142 = !DILocation(line: 1075, column: 10, scope: !4135)
!4143 = !DILocation(line: 1075, column: 3, scope: !4135)
!4144 = distinct !DISubprogram(name: "gss_for_code", scope: !561, file: !561, line: 1061, type: !4145, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4145 = !DISubroutineType(types: !4146)
!4146 = !{!599, !560}
!4147 = !DILocalVariable(name: "code", arg: 1, scope: !4144, file: !561, line: 1061, type: !560)
!4148 = !DILocation(line: 1061, column: 32, scope: !4144)
!4149 = !DILocation(line: 1066, column: 24, scope: !4144)
!4150 = !DILocation(line: 1066, column: 10, scope: !4144)
!4151 = !DILocation(line: 1066, column: 3, scope: !4144)
!4152 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !561, file: !561, line: 1686, type: !4153, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4153 = !DISubroutineType(types: !4154)
!4154 = !{!625, !366}
!4155 = !DILocalVariable(name: "code", arg: 1, scope: !4152, file: !561, line: 1686, type: !366)
!4156 = !DILocation(line: 1686, column: 38, scope: !4152)
!4157 = !DILocation(line: 1688, column: 63, scope: !4152)
!4158 = !DILocation(line: 1688, column: 34, scope: !4152)
!4159 = !DILocation(line: 1688, column: 10, scope: !4152)
!4160 = !DILocation(line: 1688, column: 3, scope: !4152)
!4161 = distinct !DISubprogram(name: "VEC_complex_lattice_t_base_length", scope: !3, file: !3, line: 55, type: !4162, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4162 = !DISubroutineType(types: !4163)
!4163 = !{!7, !4164}
!4164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4165, size: 64)
!4165 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2869)
!4166 = !DILocalVariable(name: "vec_", arg: 1, scope: !4161, file: !3, line: 55, type: !4164)
!4167 = !DILocation(line: 55, column: 1, scope: !4161)
!4168 = distinct !DISubprogram(name: "VEC_complex_lattice_t_heap_safe_grow", scope: !3, file: !3, line: 56, type: !3177, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4169 = !DILocalVariable(name: "vec_", arg: 1, scope: !4168, file: !3, line: 56, type: !3179)
!4170 = !DILocation(line: 56, column: 1, scope: !4168)
!4171 = !DILocalVariable(name: "size_", arg: 2, scope: !4168, file: !3, line: 56, type: !1658)
!4172 = !DILocation(line: 0, scope: !4168)
!4173 = distinct !DISubprogram(name: "VEC_complex_lattice_t_base_address", scope: !3, file: !3, line: 55, type: !4174, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4174 = !DISubroutineType(types: !4175)
!4175 = !{!4176, !4177}
!4176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2876, size: 64)
!4177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2869, size: 64)
!4178 = !DILocalVariable(name: "vec_", arg: 1, scope: !4173, file: !3, line: 55, type: !4177)
!4179 = !DILocation(line: 55, column: 1, scope: !4173)
!4180 = distinct !DISubprogram(name: "VEC_complex_lattice_t_heap_reserve_exact", scope: !3, file: !3, line: 56, type: !4181, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4181 = !DISubroutineType(types: !4182)
!4182 = !{!1658, !3179, !1658}
!4183 = !DILocalVariable(name: "vec_", arg: 1, scope: !4180, file: !3, line: 56, type: !3179)
!4184 = !DILocation(line: 56, column: 1, scope: !4180)
!4185 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4180, file: !3, line: 56, type: !1658)
!4186 = !DILocalVariable(name: "extend", scope: !4180, file: !3, line: 56, type: !1658)
!4187 = !DILocation(line: 56, column: 1, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4180, file: !3, line: 56, column: 1)
!4189 = distinct !DISubprogram(name: "VEC_complex_lattice_t_base_space", scope: !3, file: !3, line: 55, type: !4190, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4190 = !DISubroutineType(types: !4191)
!4191 = !{!1658, !4177, !1658}
!4192 = !DILocalVariable(name: "vec_", arg: 1, scope: !4189, file: !3, line: 55, type: !4177)
!4193 = !DILocation(line: 55, column: 1, scope: !4189)
!4194 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4189, file: !3, line: 55, type: !1658)
!4195 = distinct !DISubprogram(name: "var_ann", scope: !4196, file: !4196, line: 132, type: !4197, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4196 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4197 = !DISubroutineType(types: !4198)
!4198 = !{!4199, !4200}
!4199 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_ann_t", file: !2232, line: 297, baseType: !2230)
!4200 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1562, line: 59, baseType: !2888)
!4201 = !DILocalVariable(name: "t", arg: 1, scope: !4195, file: !4196, line: 132, type: !4200)
!4202 = !DILocation(line: 132, column: 21, scope: !4195)
!4203 = !DILocalVariable(name: "p", scope: !4195, file: !4196, line: 134, type: !4204)
!4204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4205, size: 64)
!4205 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4199)
!4206 = !DILocation(line: 134, column: 20, scope: !4195)
!4207 = !DILocation(line: 134, column: 24, scope: !4195)
!4208 = !DILocation(line: 135, column: 10, scope: !4195)
!4209 = !DILocation(line: 135, column: 15, scope: !4195)
!4210 = !DILocation(line: 135, column: 14, scope: !4195)
!4211 = !DILocation(line: 135, column: 3, scope: !4195)
!4212 = distinct !DISubprogram(name: "VEC_complex_lattice_t_base_replace", scope: !3, file: !3, line: 55, type: !4213, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4213 = !DISubroutineType(types: !4214)
!4214 = !{!2876, !4177, !7, !2876}
!4215 = !DILocalVariable(name: "vec_", arg: 1, scope: !4212, file: !3, line: 55, type: !4177)
!4216 = !DILocation(line: 55, column: 1, scope: !4212)
!4217 = !DILocalVariable(name: "ix_", arg: 2, scope: !4212, file: !3, line: 55, type: !7)
!4218 = !DILocalVariable(name: "obj_", arg: 3, scope: !4212, file: !3, line: 55, type: !2876)
!4219 = !DILocalVariable(name: "old_obj_", scope: !4212, file: !3, line: 55, type: !2876)
!4220 = distinct !DISubprogram(name: "VEC_complex_lattice_t_base_index", scope: !3, file: !3, line: 55, type: !4221, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4221 = !DISubroutineType(types: !4222)
!4222 = !{!2876, !4164, !7}
!4223 = !DILocalVariable(name: "vec_", arg: 1, scope: !4220, file: !3, line: 55, type: !4164)
!4224 = !DILocation(line: 55, column: 1, scope: !4220)
!4225 = !DILocalVariable(name: "ix_", arg: 2, scope: !4220, file: !3, line: 55, type: !7)
!4226 = !DILocation(line: 0, scope: !4220)
!4227 = distinct !DISubprogram(name: "find_lattice_value", scope: !3, file: !3, line: 142, type: !4228, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4228 = !DISubroutineType(types: !4229)
!4229 = !{!2876, !1561}
!4230 = !DILocalVariable(name: "t", arg: 1, scope: !4227, file: !3, line: 142, type: !1561)
!4231 = !DILocation(line: 142, column: 26, scope: !4227)
!4232 = !DILocalVariable(name: "real", scope: !4227, file: !3, line: 144, type: !1561)
!4233 = !DILocation(line: 144, column: 8, scope: !4227)
!4234 = !DILocalVariable(name: "imag", scope: !4227, file: !3, line: 144, type: !1561)
!4235 = !DILocation(line: 144, column: 14, scope: !4227)
!4236 = !DILocation(line: 146, column: 11, scope: !4227)
!4237 = !DILocation(line: 146, column: 3, scope: !4227)
!4238 = !DILocation(line: 149, column: 14, scope: !4239)
!4239 = distinct !DILexicalBlock(scope: !4227, file: !3, line: 147, column: 5)
!4240 = !DILocation(line: 149, column: 7, scope: !4239)
!4241 = !DILocation(line: 153, column: 14, scope: !4239)
!4242 = !DILocation(line: 153, column: 12, scope: !4239)
!4243 = !DILocation(line: 154, column: 14, scope: !4239)
!4244 = !DILocation(line: 154, column: 12, scope: !4239)
!4245 = !DILocation(line: 155, column: 7, scope: !4239)
!4246 = !DILocation(line: 158, column: 7, scope: !4239)
!4247 = !DILocation(line: 159, column: 5, scope: !4239)
!4248 = !DILocation(line: 161, column: 36, scope: !4227)
!4249 = !DILocation(line: 161, column: 42, scope: !4227)
!4250 = !DILocation(line: 161, column: 10, scope: !4227)
!4251 = !DILocation(line: 161, column: 3, scope: !4227)
!4252 = !DILocation(line: 162, column: 1, scope: !4227)
!4253 = distinct !DISubprogram(name: "find_lattice_value_parts", scope: !3, file: !3, line: 120, type: !4254, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4254 = !DISubroutineType(types: !4255)
!4255 = !{!2876, !1561, !1561}
!4256 = !DILocalVariable(name: "real", arg: 1, scope: !4253, file: !3, line: 120, type: !1561)
!4257 = !DILocation(line: 120, column: 32, scope: !4253)
!4258 = !DILocalVariable(name: "imag", arg: 2, scope: !4253, file: !3, line: 120, type: !1561)
!4259 = !DILocation(line: 120, column: 43, scope: !4253)
!4260 = !DILocalVariable(name: "r", scope: !4253, file: !3, line: 122, type: !1658)
!4261 = !DILocation(line: 122, column: 7, scope: !4253)
!4262 = !DILocalVariable(name: "i", scope: !4253, file: !3, line: 122, type: !1658)
!4263 = !DILocation(line: 122, column: 10, scope: !4253)
!4264 = !DILocalVariable(name: "ret", scope: !4253, file: !3, line: 123, type: !2876)
!4265 = !DILocation(line: 123, column: 21, scope: !4253)
!4266 = !DILocation(line: 125, column: 22, scope: !4253)
!4267 = !DILocation(line: 125, column: 7, scope: !4253)
!4268 = !DILocation(line: 125, column: 5, scope: !4253)
!4269 = !DILocation(line: 126, column: 22, scope: !4253)
!4270 = !DILocation(line: 126, column: 7, scope: !4253)
!4271 = !DILocation(line: 126, column: 5, scope: !4253)
!4272 = !DILocation(line: 127, column: 9, scope: !4253)
!4273 = !DILocation(line: 127, column: 11, scope: !4253)
!4274 = !DILocation(line: 127, column: 25, scope: !4253)
!4275 = !DILocation(line: 127, column: 27, scope: !4253)
!4276 = !DILocation(line: 127, column: 23, scope: !4253)
!4277 = !DILocation(line: 127, column: 7, scope: !4253)
!4278 = !DILocation(line: 132, column: 7, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 132, column: 7)
!4280 = !DILocation(line: 132, column: 11, scope: !4279)
!4281 = !DILocation(line: 132, column: 7, scope: !4253)
!4282 = !DILocation(line: 133, column: 9, scope: !4279)
!4283 = !DILocation(line: 133, column: 5, scope: !4279)
!4284 = !DILocation(line: 135, column: 10, scope: !4253)
!4285 = !DILocation(line: 135, column: 3, scope: !4253)
!4286 = distinct !DISubprogram(name: "some_nonzerop", scope: !3, file: !3, line: 98, type: !4287, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4287 = !DISubroutineType(types: !4288)
!4288 = !{!1658, !1561}
!4289 = !DILocalVariable(name: "t", arg: 1, scope: !4286, file: !3, line: 98, type: !1561)
!4290 = !DILocation(line: 98, column: 21, scope: !4286)
!4291 = !DILocalVariable(name: "zerop", scope: !4286, file: !3, line: 100, type: !1658)
!4292 = !DILocation(line: 100, column: 7, scope: !4286)
!4293 = !DILocation(line: 105, column: 7, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 105, column: 7)
!4295 = !DILocation(line: 105, column: 21, scope: !4294)
!4296 = !DILocation(line: 105, column: 33, scope: !4294)
!4297 = !DILocation(line: 105, column: 37, scope: !4294)
!4298 = !DILocation(line: 105, column: 7, scope: !4286)
!4299 = !DILocation(line: 106, column: 13, scope: !4294)
!4300 = !DILocation(line: 106, column: 11, scope: !4294)
!4301 = !DILocation(line: 106, column: 5, scope: !4294)
!4302 = !DILocation(line: 107, column: 12, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4294, file: !3, line: 107, column: 12)
!4304 = !DILocation(line: 107, column: 26, scope: !4303)
!4305 = !DILocation(line: 107, column: 12, scope: !4294)
!4306 = !DILocation(line: 108, column: 26, scope: !4303)
!4307 = !DILocation(line: 108, column: 13, scope: !4303)
!4308 = !DILocation(line: 108, column: 11, scope: !4303)
!4309 = !DILocation(line: 108, column: 5, scope: !4303)
!4310 = !DILocation(line: 109, column: 12, scope: !4311)
!4311 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 109, column: 12)
!4312 = !DILocation(line: 109, column: 26, scope: !4311)
!4313 = !DILocation(line: 109, column: 12, scope: !4303)
!4314 = !DILocation(line: 110, column: 28, scope: !4311)
!4315 = !DILocation(line: 110, column: 13, scope: !4311)
!4316 = !DILocation(line: 110, column: 11, scope: !4311)
!4317 = !DILocation(line: 110, column: 5, scope: !4311)
!4318 = !DILocation(line: 112, column: 11, scope: !4286)
!4319 = !DILocation(line: 112, column: 10, scope: !4286)
!4320 = !DILocation(line: 112, column: 3, scope: !4286)
!4321 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !561, file: !561, line: 3061, type: !4014, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4322 = !DILocalVariable(name: "gs", arg: 1, scope: !4321, file: !561, line: 3061, type: !3959)
!4323 = !DILocation(line: 3061, column: 35, scope: !4321)
!4324 = !DILocation(line: 3064, column: 10, scope: !4321)
!4325 = !DILocation(line: 3064, column: 14, scope: !4321)
!4326 = !DILocation(line: 3064, column: 25, scope: !4321)
!4327 = !DILocation(line: 3064, column: 3, scope: !4321)
!4328 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !4196, file: !4196, line: 450, type: !4329, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4329 = !DISubroutineType(types: !4330)
!4330 = !{!1561, !1892, !2038}
!4331 = !DILocalVariable(name: "gs", arg: 1, scope: !4328, file: !4196, line: 450, type: !1892)
!4332 = !DILocation(line: 450, column: 28, scope: !4328)
!4333 = !DILocalVariable(name: "index", arg: 2, scope: !4328, file: !4196, line: 450, type: !2038)
!4334 = !DILocation(line: 450, column: 39, scope: !4328)
!4335 = !DILocalVariable(name: "pd", scope: !4328, file: !4196, line: 452, type: !4336)
!4336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1996, size: 64)
!4337 = !DILocation(line: 452, column: 21, scope: !4328)
!4338 = !DILocation(line: 452, column: 42, scope: !4328)
!4339 = !DILocation(line: 452, column: 46, scope: !4328)
!4340 = !DILocation(line: 452, column: 26, scope: !4328)
!4341 = !DILocation(line: 453, column: 29, scope: !4328)
!4342 = !DILocation(line: 453, column: 33, scope: !4328)
!4343 = !DILocation(line: 453, column: 10, scope: !4328)
!4344 = !DILocation(line: 453, column: 3, scope: !4328)
!4345 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !561, file: !561, line: 3100, type: !4346, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4346 = !DISubroutineType(types: !4347)
!4347 = !{!4336, !1892, !7}
!4348 = !DILocalVariable(name: "gs", arg: 1, scope: !4345, file: !561, line: 3100, type: !1892)
!4349 = !DILocation(line: 3100, column: 24, scope: !4345)
!4350 = !DILocalVariable(name: "index", arg: 2, scope: !4345, file: !561, line: 3100, type: !7)
!4351 = !DILocation(line: 3100, column: 37, scope: !4345)
!4352 = !DILocation(line: 3103, column: 3, scope: !4345)
!4353 = !DILocation(line: 3104, column: 12, scope: !4345)
!4354 = !DILocation(line: 3104, column: 16, scope: !4345)
!4355 = !DILocation(line: 3104, column: 27, scope: !4345)
!4356 = !DILocation(line: 3104, column: 32, scope: !4345)
!4357 = !DILocation(line: 3104, column: 3, scope: !4345)
!4358 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !4196, file: !4196, line: 427, type: !4359, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4359 = !DISubroutineType(types: !4360)
!4360 = !{!1561, !4361}
!4361 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1923, line: 30, baseType: !4362)
!4362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4363, size: 64)
!4363 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !334, line: 1893, baseType: !1934)
!4364 = !DILocalVariable(name: "use", arg: 1, scope: !4358, file: !4196, line: 427, type: !4361)
!4365 = !DILocation(line: 427, column: 33, scope: !4358)
!4366 = !DILocation(line: 429, column: 12, scope: !4358)
!4367 = !DILocation(line: 429, column: 17, scope: !4358)
!4368 = !DILocation(line: 429, column: 10, scope: !4358)
!4369 = !DILocation(line: 429, column: 3, scope: !4358)
!4370 = distinct !DISubprogram(name: "VEC_tree_heap_safe_grow", scope: !334, file: !334, line: 184, type: !3408, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4371 = !DILocalVariable(name: "vec_", arg: 1, scope: !4370, file: !334, line: 184, type: !3410)
!4372 = !DILocation(line: 184, column: 1, scope: !4370)
!4373 = !DILocalVariable(name: "size_", arg: 2, scope: !4370, file: !334, line: 184, type: !1658)
!4374 = !DILocation(line: 0, scope: !4370)
!4375 = distinct !DISubprogram(name: "VEC_tree_base_address", scope: !334, file: !334, line: 182, type: !4376, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4376 = !DISubroutineType(types: !4377)
!4377 = !{!1927, !4378}
!4378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2391, size: 64)
!4379 = !DILocalVariable(name: "vec_", arg: 1, scope: !4375, file: !334, line: 182, type: !4378)
!4380 = !DILocation(line: 182, column: 1, scope: !4375)
!4381 = distinct !DISubprogram(name: "VEC_tree_heap_reserve_exact", scope: !334, file: !334, line: 184, type: !4382, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4382 = !DISubroutineType(types: !4383)
!4383 = !{!1658, !3410, !1658}
!4384 = !DILocalVariable(name: "vec_", arg: 1, scope: !4381, file: !334, line: 184, type: !3410)
!4385 = !DILocation(line: 184, column: 1, scope: !4381)
!4386 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4381, file: !334, line: 184, type: !1658)
!4387 = !DILocalVariable(name: "extend", scope: !4381, file: !334, line: 184, type: !1658)
!4388 = !DILocation(line: 184, column: 1, scope: !4389)
!4389 = distinct !DILexicalBlock(scope: !4381, file: !334, line: 184, column: 1)
!4390 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !334, file: !334, line: 182, type: !4391, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4391 = !DISubroutineType(types: !4392)
!4392 = !{!1658, !4378, !1658}
!4393 = !DILocalVariable(name: "vec_", arg: 1, scope: !4390, file: !334, line: 182, type: !4378)
!4394 = !DILocation(line: 182, column: 1, scope: !4390)
!4395 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4390, file: !334, line: 182, type: !1658)
!4396 = distinct !DISubprogram(name: "single_succ_edge", scope: !318, file: !318, line: 643, type: !4397, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4397 = !DISubroutineType(types: !4398)
!4398 = !{!1872, !4399}
!4399 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1562, line: 112, baseType: !4400)
!4400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4401, size: 64)
!4401 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1857)
!4402 = !DILocalVariable(name: "bb", arg: 1, scope: !4396, file: !318, line: 643, type: !4399)
!4403 = !DILocation(line: 643, column: 37, scope: !4396)
!4404 = !DILocation(line: 645, column: 3, scope: !4396)
!4405 = !DILocation(line: 646, column: 10, scope: !4396)
!4406 = !DILocation(line: 646, column: 3, scope: !4396)
!4407 = distinct !DISubprogram(name: "update_complex_components_on_edge", scope: !3, file: !3, line: 651, type: !4408, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4408 = !DISubroutineType(types: !4409)
!4409 = !{null, !1872, !1561, !1561, !1561}
!4410 = !DILocalVariable(name: "e", arg: 1, scope: !4407, file: !3, line: 651, type: !1872)
!4411 = !DILocation(line: 651, column: 41, scope: !4407)
!4412 = !DILocalVariable(name: "lhs", arg: 2, scope: !4407, file: !3, line: 651, type: !1561)
!4413 = !DILocation(line: 651, column: 49, scope: !4407)
!4414 = !DILocalVariable(name: "r", arg: 3, scope: !4407, file: !3, line: 651, type: !1561)
!4415 = !DILocation(line: 651, column: 59, scope: !4407)
!4416 = !DILocalVariable(name: "i", arg: 4, scope: !4407, file: !3, line: 651, type: !1561)
!4417 = !DILocation(line: 651, column: 67, scope: !4407)
!4418 = !DILocalVariable(name: "list", scope: !4407, file: !3, line: 653, type: !1882)
!4419 = !DILocation(line: 653, column: 14, scope: !4407)
!4420 = !DILocation(line: 655, column: 34, scope: !4407)
!4421 = !DILocation(line: 655, column: 46, scope: !4407)
!4422 = !DILocation(line: 655, column: 10, scope: !4407)
!4423 = !DILocation(line: 655, column: 8, scope: !4407)
!4424 = !DILocation(line: 656, column: 7, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 656, column: 7)
!4426 = !DILocation(line: 656, column: 7, scope: !4407)
!4427 = !DILocation(line: 657, column: 29, scope: !4425)
!4428 = !DILocation(line: 657, column: 32, scope: !4425)
!4429 = !DILocation(line: 657, column: 5, scope: !4425)
!4430 = !DILocation(line: 659, column: 34, scope: !4407)
!4431 = !DILocation(line: 659, column: 45, scope: !4407)
!4432 = !DILocation(line: 659, column: 10, scope: !4407)
!4433 = !DILocation(line: 659, column: 8, scope: !4407)
!4434 = !DILocation(line: 660, column: 7, scope: !4435)
!4435 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 660, column: 7)
!4436 = !DILocation(line: 660, column: 7, scope: !4407)
!4437 = !DILocation(line: 661, column: 29, scope: !4435)
!4438 = !DILocation(line: 661, column: 32, scope: !4435)
!4439 = !DILocation(line: 661, column: 5, scope: !4435)
!4440 = !DILocation(line: 662, column: 1, scope: !4407)
!4441 = distinct !DISubprogram(name: "single_succ_p", scope: !318, file: !318, line: 626, type: !4442, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4442 = !DISubroutineType(types: !4443)
!4443 = !{!1681, !4399}
!4444 = !DILocalVariable(name: "bb", arg: 1, scope: !4441, file: !318, line: 626, type: !4399)
!4445 = !DILocation(line: 626, column: 34, scope: !4441)
!4446 = !DILocation(line: 628, column: 10, scope: !4441)
!4447 = !DILocation(line: 628, column: 33, scope: !4441)
!4448 = !DILocation(line: 628, column: 3, scope: !4441)
!4449 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !318, file: !318, line: 150, type: !4450, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4450 = !DISubroutineType(types: !4451)
!4451 = !{!1872, !4452, !7}
!4452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4453, size: 64)
!4453 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1865)
!4454 = !DILocalVariable(name: "vec_", arg: 1, scope: !4449, file: !318, line: 150, type: !4452)
!4455 = !DILocation(line: 150, column: 1, scope: !4449)
!4456 = !DILocalVariable(name: "ix_", arg: 2, scope: !4449, file: !318, line: 150, type: !7)
!4457 = !DILocation(line: 0, scope: !4449)
!4458 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !318, file: !318, line: 150, type: !4459, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4459 = !DISubroutineType(types: !4460)
!4460 = !{!7, !4452}
!4461 = !DILocalVariable(name: "vec_", arg: 1, scope: !4458, file: !318, line: 150, type: !4452)
!4462 = !DILocation(line: 150, column: 1, scope: !4458)
!4463 = distinct !DISubprogram(name: "set_component_ssa_name", scope: !3, file: !3, line: 520, type: !4464, scopeLine: 521, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4464 = !DISubroutineType(types: !4465)
!4465 = !{!1882, !1561, !1681, !1561}
!4466 = !DILocalVariable(name: "ssa_name", arg: 1, scope: !4463, file: !3, line: 520, type: !1561)
!4467 = !DILocation(line: 520, column: 30, scope: !4463)
!4468 = !DILocalVariable(name: "imag_p", arg: 2, scope: !4463, file: !3, line: 520, type: !1681)
!4469 = !DILocation(line: 520, column: 45, scope: !4463)
!4470 = !DILocalVariable(name: "value", arg: 3, scope: !4463, file: !3, line: 520, type: !1561)
!4471 = !DILocation(line: 520, column: 58, scope: !4463)
!4472 = !DILocalVariable(name: "lattice", scope: !4463, file: !3, line: 522, type: !2876)
!4473 = !DILocation(line: 522, column: 21, scope: !4463)
!4474 = !DILocation(line: 522, column: 51, scope: !4463)
!4475 = !DILocation(line: 522, column: 31, scope: !4463)
!4476 = !DILocalVariable(name: "ssa_name_index", scope: !4463, file: !3, line: 523, type: !2038)
!4477 = !DILocation(line: 523, column: 10, scope: !4463)
!4478 = !DILocalVariable(name: "comp", scope: !4463, file: !3, line: 524, type: !1561)
!4479 = !DILocation(line: 524, column: 8, scope: !4463)
!4480 = !DILocalVariable(name: "last", scope: !4463, file: !3, line: 525, type: !1892)
!4481 = !DILocation(line: 525, column: 10, scope: !4463)
!4482 = !DILocalVariable(name: "list", scope: !4463, file: !3, line: 526, type: !1882)
!4483 = !DILocation(line: 526, column: 14, scope: !4463)
!4484 = !DILocation(line: 531, column: 7, scope: !4485)
!4485 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 531, column: 7)
!4486 = !DILocation(line: 531, column: 19, scope: !4485)
!4487 = !DILocation(line: 531, column: 15, scope: !4485)
!4488 = !DILocation(line: 531, column: 7, scope: !4463)
!4489 = !DILocation(line: 532, column: 5, scope: !4485)
!4490 = !DILocation(line: 538, column: 20, scope: !4463)
!4491 = !DILocation(line: 538, column: 48, scope: !4463)
!4492 = !DILocation(line: 538, column: 54, scope: !4463)
!4493 = !DILocation(line: 538, column: 52, scope: !4463)
!4494 = !DILocation(line: 538, column: 18, scope: !4463)
!4495 = !DILocation(line: 539, column: 10, scope: !4463)
!4496 = !DILocation(line: 539, column: 8, scope: !4463)
!4497 = !DILocation(line: 540, column: 7, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 540, column: 7)
!4499 = !DILocation(line: 540, column: 7, scope: !4463)
!4500 = !DILocation(line: 546, column: 37, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 546, column: 12)
!4502 = !DILocation(line: 546, column: 12, scope: !4501)
!4503 = !DILocation(line: 547, column: 5, scope: !4501)
!4504 = !DILocation(line: 547, column: 9, scope: !4501)
!4505 = !DILocation(line: 546, column: 12, scope: !4498)
!4506 = !DILocation(line: 549, column: 7, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4501, file: !3, line: 548, column: 5)
!4508 = !DILocation(line: 550, column: 7, scope: !4507)
!4509 = !DILocation(line: 552, column: 12, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4501, file: !3, line: 552, column: 12)
!4511 = !DILocation(line: 552, column: 30, scope: !4510)
!4512 = !DILocation(line: 553, column: 5, scope: !4510)
!4513 = !DILocation(line: 553, column: 9, scope: !4510)
!4514 = !DILocation(line: 552, column: 12, scope: !4501)
!4515 = !DILocation(line: 557, column: 11, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 557, column: 11)
!4517 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 554, column: 5)
!4518 = !DILocation(line: 558, column: 4, scope: !4516)
!4519 = !DILocation(line: 558, column: 8, scope: !4516)
!4520 = !DILocation(line: 557, column: 11, scope: !4517)
!4521 = !DILocation(line: 560, column: 30, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !4516, file: !3, line: 559, column: 2)
!4523 = !DILocation(line: 560, column: 55, scope: !4522)
!4524 = !DILocation(line: 560, column: 11, scope: !4522)
!4525 = !DILocation(line: 560, column: 9, scope: !4522)
!4526 = !DILocation(line: 561, column: 29, scope: !4522)
!4527 = !DILocation(line: 561, column: 36, scope: !4522)
!4528 = !DILocation(line: 561, column: 4, scope: !4522)
!4529 = !DILocation(line: 562, column: 2, scope: !4522)
!4530 = !DILocation(line: 564, column: 7, scope: !4517)
!4531 = !DILocation(line: 565, column: 7, scope: !4517)
!4532 = !DILocation(line: 571, column: 36, scope: !4510)
!4533 = !DILocation(line: 571, column: 46, scope: !4510)
!4534 = !DILocation(line: 571, column: 12, scope: !4510)
!4535 = !DILocation(line: 571, column: 10, scope: !4510)
!4536 = !DILocation(line: 574, column: 8, scope: !4463)
!4537 = !DILocation(line: 575, column: 33, scope: !4463)
!4538 = !DILocation(line: 575, column: 11, scope: !4463)
!4539 = !DILocation(line: 575, column: 9, scope: !4463)
!4540 = !DILocation(line: 576, column: 11, scope: !4463)
!4541 = !DILocation(line: 576, column: 8, scope: !4463)
!4542 = !DILocation(line: 577, column: 31, scope: !4463)
!4543 = !DILocation(line: 577, column: 3, scope: !4463)
!4544 = !DILocation(line: 578, column: 3, scope: !4463)
!4545 = !DILocation(line: 580, column: 10, scope: !4463)
!4546 = !DILocation(line: 580, column: 3, scope: !4463)
!4547 = !DILocation(line: 581, column: 1, scope: !4463)
!4548 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !334, file: !334, line: 182, type: !4549, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4549 = !DISubroutineType(types: !4550)
!4550 = !{!1561, !3172, !7}
!4551 = !DILocalVariable(name: "vec_", arg: 1, scope: !4548, file: !334, line: 182, type: !3172)
!4552 = !DILocation(line: 182, column: 1, scope: !4548)
!4553 = !DILocalVariable(name: "ix_", arg: 2, scope: !4548, file: !334, line: 182, type: !7)
!4554 = !DILocation(line: 0, scope: !4548)
!4555 = distinct !DISubprogram(name: "VEC_tree_base_replace", scope: !334, file: !334, line: 182, type: !4556, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4556 = !DISubroutineType(types: !4557)
!4557 = !{!1561, !4378, !7, !1561}
!4558 = !DILocalVariable(name: "vec_", arg: 1, scope: !4555, file: !334, line: 182, type: !4378)
!4559 = !DILocation(line: 182, column: 1, scope: !4555)
!4560 = !DILocalVariable(name: "ix_", arg: 2, scope: !4555, file: !334, line: 182, type: !7)
!4561 = !DILocalVariable(name: "obj_", arg: 3, scope: !4555, file: !334, line: 182, type: !1561)
!4562 = !DILocalVariable(name: "old_obj_", scope: !4555, file: !334, line: 182, type: !1561)
!4563 = distinct !DISubprogram(name: "get_component_var", scope: !3, file: !3, line: 457, type: !4564, scopeLine: 458, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4564 = !DISubroutineType(types: !4565)
!4565 = !{!1561, !1561, !1681}
!4566 = !DILocalVariable(name: "var", arg: 1, scope: !4563, file: !3, line: 457, type: !1561)
!4567 = !DILocation(line: 457, column: 25, scope: !4563)
!4568 = !DILocalVariable(name: "imag_p", arg: 2, scope: !4563, file: !3, line: 457, type: !1681)
!4569 = !DILocation(line: 457, column: 35, scope: !4563)
!4570 = !DILocalVariable(name: "decl_index", scope: !4563, file: !3, line: 459, type: !2038)
!4571 = !DILocation(line: 459, column: 10, scope: !4563)
!4572 = !DILocation(line: 459, column: 23, scope: !4563)
!4573 = !DILocation(line: 459, column: 38, scope: !4563)
!4574 = !DILocation(line: 459, column: 44, scope: !4563)
!4575 = !DILocation(line: 459, column: 42, scope: !4563)
!4576 = !DILocalVariable(name: "ret", scope: !4563, file: !3, line: 460, type: !1561)
!4577 = !DILocation(line: 460, column: 8, scope: !4563)
!4578 = !DILocation(line: 460, column: 26, scope: !4563)
!4579 = !DILocation(line: 460, column: 14, scope: !4563)
!4580 = !DILocation(line: 462, column: 7, scope: !4581)
!4581 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 462, column: 7)
!4582 = !DILocation(line: 462, column: 11, scope: !4581)
!4583 = !DILocation(line: 462, column: 7, scope: !4563)
!4584 = !DILocation(line: 464, column: 39, scope: !4585)
!4585 = distinct !DILexicalBlock(scope: !4581, file: !3, line: 463, column: 5)
!4586 = !DILocation(line: 464, column: 68, scope: !4585)
!4587 = !DILocation(line: 465, column: 11, scope: !4585)
!4588 = !DILocation(line: 466, column: 11, scope: !4585)
!4589 = !DILocation(line: 467, column: 11, scope: !4585)
!4590 = !DILocation(line: 464, column: 13, scope: !4585)
!4591 = !DILocation(line: 464, column: 11, scope: !4585)
!4592 = !DILocation(line: 468, column: 19, scope: !4585)
!4593 = !DILocation(line: 468, column: 31, scope: !4585)
!4594 = !DILocation(line: 468, column: 7, scope: !4585)
!4595 = !DILocation(line: 469, column: 5, scope: !4585)
!4596 = !DILocation(line: 471, column: 10, scope: !4563)
!4597 = !DILocation(line: 471, column: 3, scope: !4563)
!4598 = distinct !DISubprogram(name: "get_component_ssa_name", scope: !3, file: !3, line: 477, type: !4564, scopeLine: 478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4599 = !DILocalVariable(name: "ssa_name", arg: 1, scope: !4598, file: !3, line: 477, type: !1561)
!4600 = !DILocation(line: 477, column: 30, scope: !4598)
!4601 = !DILocalVariable(name: "imag_p", arg: 2, scope: !4598, file: !3, line: 477, type: !1681)
!4602 = !DILocation(line: 477, column: 45, scope: !4598)
!4603 = !DILocalVariable(name: "lattice", scope: !4598, file: !3, line: 479, type: !2876)
!4604 = !DILocation(line: 479, column: 21, scope: !4598)
!4605 = !DILocation(line: 479, column: 51, scope: !4598)
!4606 = !DILocation(line: 479, column: 31, scope: !4598)
!4607 = !DILocalVariable(name: "ssa_name_index", scope: !4598, file: !3, line: 480, type: !2038)
!4608 = !DILocation(line: 480, column: 10, scope: !4598)
!4609 = !DILocalVariable(name: "ret", scope: !4598, file: !3, line: 481, type: !1561)
!4610 = !DILocation(line: 481, column: 8, scope: !4598)
!4611 = !DILocation(line: 483, column: 7, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 483, column: 7)
!4613 = !DILocation(line: 483, column: 19, scope: !4612)
!4614 = !DILocation(line: 483, column: 15, scope: !4612)
!4615 = !DILocation(line: 483, column: 7, scope: !4598)
!4616 = !DILocalVariable(name: "inner_type", scope: !4617, file: !3, line: 485, type: !1561)
!4617 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 484, column: 5)
!4618 = !DILocation(line: 485, column: 12, scope: !4617)
!4619 = !DILocation(line: 485, column: 25, scope: !4617)
!4620 = !DILocation(line: 486, column: 11, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4617, file: !3, line: 486, column: 11)
!4622 = !DILocation(line: 486, column: 11, scope: !4617)
!4623 = !DILocation(line: 487, column: 21, scope: !4621)
!4624 = !DILocation(line: 487, column: 9, scope: !4621)
!4625 = !DILocation(line: 487, column: 2, scope: !4621)
!4626 = !DILocation(line: 489, column: 24, scope: !4621)
!4627 = !DILocation(line: 489, column: 9, scope: !4621)
!4628 = !DILocation(line: 489, column: 2, scope: !4621)
!4629 = !DILocation(line: 492, column: 20, scope: !4598)
!4630 = !DILocation(line: 492, column: 48, scope: !4598)
!4631 = !DILocation(line: 492, column: 54, scope: !4598)
!4632 = !DILocation(line: 492, column: 52, scope: !4598)
!4633 = !DILocation(line: 492, column: 18, scope: !4598)
!4634 = !DILocation(line: 493, column: 9, scope: !4598)
!4635 = !DILocation(line: 493, column: 7, scope: !4598)
!4636 = !DILocation(line: 494, column: 7, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 494, column: 7)
!4638 = !DILocation(line: 494, column: 11, scope: !4637)
!4639 = !DILocation(line: 494, column: 7, scope: !4598)
!4640 = !DILocation(line: 496, column: 32, scope: !4641)
!4641 = distinct !DILexicalBlock(scope: !4637, file: !3, line: 495, column: 5)
!4642 = !DILocation(line: 496, column: 57, scope: !4641)
!4643 = !DILocation(line: 496, column: 13, scope: !4641)
!4644 = !DILocation(line: 496, column: 11, scope: !4641)
!4645 = !DILocation(line: 497, column: 28, scope: !4641)
!4646 = !DILocation(line: 497, column: 13, scope: !4641)
!4647 = !DILocation(line: 497, column: 11, scope: !4641)
!4648 = !DILocation(line: 502, column: 4, scope: !4641)
!4649 = !DILocation(line: 501, column: 7, scope: !4641)
!4650 = !DILocation(line: 502, column: 2, scope: !4641)
!4651 = !DILocation(line: 503, column: 11, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 503, column: 11)
!4653 = !DILocation(line: 503, column: 47, scope: !4652)
!4654 = !DILocation(line: 504, column: 4, scope: !4652)
!4655 = !DILocation(line: 504, column: 21, scope: !4652)
!4656 = !DILocation(line: 504, column: 7, scope: !4652)
!4657 = !DILocation(line: 503, column: 11, scope: !4641)
!4658 = !DILocation(line: 506, column: 30, scope: !4659)
!4659 = distinct !DILexicalBlock(scope: !4652, file: !3, line: 505, column: 2)
!4660 = !DILocation(line: 506, column: 4, scope: !4659)
!4661 = !DILocation(line: 506, column: 28, scope: !4659)
!4662 = !DILocation(line: 507, column: 21, scope: !4659)
!4663 = !DILocation(line: 507, column: 41, scope: !4659)
!4664 = !DILocation(line: 507, column: 4, scope: !4659)
!4665 = !DILocation(line: 508, column: 2, scope: !4659)
!4666 = !DILocation(line: 510, column: 7, scope: !4641)
!4667 = !DILocation(line: 511, column: 5, scope: !4641)
!4668 = !DILocation(line: 513, column: 10, scope: !4598)
!4669 = !DILocation(line: 513, column: 3, scope: !4598)
!4670 = !DILocation(line: 514, column: 1, scope: !4598)
!4671 = distinct !DISubprogram(name: "cvc_lookup", scope: !3, file: !3, line: 70, type: !4672, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4672 = !DISubroutineType(types: !4673)
!4673 = !{!1561, !7}
!4674 = !DILocalVariable(name: "uid", arg: 1, scope: !4671, file: !3, line: 70, type: !7)
!4675 = !DILocation(line: 70, column: 26, scope: !4671)
!4676 = !DILocalVariable(name: "h", scope: !4671, file: !3, line: 72, type: !2882)
!4677 = !DILocation(line: 72, column: 24, scope: !4671)
!4678 = !DILocalVariable(name: "in", scope: !4671, file: !3, line: 72, type: !2883)
!4679 = !DILocation(line: 72, column: 27, scope: !4671)
!4680 = !DILocation(line: 73, column: 12, scope: !4671)
!4681 = !DILocation(line: 73, column: 6, scope: !4671)
!4682 = !DILocation(line: 73, column: 10, scope: !4671)
!4683 = !DILocation(line: 74, column: 52, scope: !4671)
!4684 = !DILocation(line: 74, column: 81, scope: !4671)
!4685 = !DILocation(line: 74, column: 86, scope: !4671)
!4686 = !DILocation(line: 74, column: 31, scope: !4671)
!4687 = !DILocation(line: 74, column: 7, scope: !4671)
!4688 = !DILocation(line: 74, column: 5, scope: !4671)
!4689 = !DILocation(line: 75, column: 10, scope: !4671)
!4690 = !DILocation(line: 75, column: 14, scope: !4671)
!4691 = !DILocation(line: 75, column: 17, scope: !4671)
!4692 = !DILocation(line: 75, column: 3, scope: !4671)
!4693 = distinct !DISubprogram(name: "create_one_component_var", scope: !3, file: !3, line: 425, type: !4694, scopeLine: 427, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4694 = !DISubroutineType(types: !4695)
!4695 = !{!1561, !1561, !1561, !1765, !1765, !366}
!4696 = !DILocalVariable(name: "type", arg: 1, scope: !4693, file: !3, line: 425, type: !1561)
!4697 = !DILocation(line: 425, column: 32, scope: !4693)
!4698 = !DILocalVariable(name: "orig", arg: 2, scope: !4693, file: !3, line: 425, type: !1561)
!4699 = !DILocation(line: 425, column: 43, scope: !4693)
!4700 = !DILocalVariable(name: "prefix", arg: 3, scope: !4693, file: !3, line: 425, type: !1765)
!4701 = !DILocation(line: 425, column: 61, scope: !4693)
!4702 = !DILocalVariable(name: "suffix", arg: 4, scope: !4693, file: !3, line: 426, type: !1765)
!4703 = !DILocation(line: 426, column: 18, scope: !4693)
!4704 = !DILocalVariable(name: "code", arg: 5, scope: !4693, file: !3, line: 426, type: !366)
!4705 = !DILocation(line: 426, column: 41, scope: !4693)
!4706 = !DILocalVariable(name: "r", scope: !4693, file: !3, line: 428, type: !1561)
!4707 = !DILocation(line: 428, column: 8, scope: !4693)
!4708 = !DILocation(line: 428, column: 28, scope: !4693)
!4709 = !DILocation(line: 428, column: 34, scope: !4693)
!4710 = !DILocation(line: 428, column: 12, scope: !4693)
!4711 = !DILocation(line: 429, column: 23, scope: !4693)
!4712 = !DILocation(line: 429, column: 3, scope: !4693)
!4713 = !DILocation(line: 431, column: 30, scope: !4693)
!4714 = !DILocation(line: 431, column: 3, scope: !4693)
!4715 = !DILocation(line: 431, column: 28, scope: !4693)
!4716 = !DILocation(line: 432, column: 3, scope: !4693)
!4717 = !DILocation(line: 432, column: 23, scope: !4693)
!4718 = !DILocation(line: 434, column: 7, scope: !4719)
!4719 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 434, column: 7)
!4720 = !DILocation(line: 434, column: 24, scope: !4719)
!4721 = !DILocation(line: 434, column: 28, scope: !4719)
!4722 = !DILocation(line: 434, column: 7, scope: !4693)
!4723 = !DILocalVariable(name: "name", scope: !4724, file: !3, line: 436, type: !1765)
!4724 = distinct !DILexicalBlock(scope: !4719, file: !3, line: 435, column: 5)
!4725 = !DILocation(line: 436, column: 19, scope: !4724)
!4726 = !DILocation(line: 436, column: 26, scope: !4724)
!4727 = !DILocation(line: 438, column: 39, scope: !4724)
!4728 = !DILocation(line: 438, column: 23, scope: !4724)
!4729 = !DILocation(line: 438, column: 7, scope: !4724)
!4730 = !DILocation(line: 438, column: 21, scope: !4724)
!4731 = !DILocation(line: 440, column: 7, scope: !4724)
!4732 = !DILocation(line: 441, column: 7, scope: !4724)
!4733 = !DILocation(line: 441, column: 35, scope: !4724)
!4734 = !DILocation(line: 442, column: 7, scope: !4724)
!4735 = !DILocation(line: 442, column: 26, scope: !4724)
!4736 = !DILocation(line: 443, column: 29, scope: !4724)
!4737 = !DILocation(line: 443, column: 7, scope: !4724)
!4738 = !DILocation(line: 443, column: 27, scope: !4724)
!4739 = !DILocation(line: 444, column: 5, scope: !4724)
!4740 = !DILocation(line: 447, column: 7, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4719, file: !3, line: 446, column: 5)
!4742 = !DILocation(line: 447, column: 26, scope: !4741)
!4743 = !DILocation(line: 448, column: 7, scope: !4741)
!4744 = !DILocation(line: 448, column: 27, scope: !4741)
!4745 = !DILocation(line: 451, column: 10, scope: !4693)
!4746 = !DILocation(line: 451, column: 3, scope: !4693)
!4747 = distinct !DISubprogram(name: "cvc_insert", scope: !3, file: !3, line: 81, type: !4748, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4748 = !DISubroutineType(types: !4749)
!4749 = !{null, !7, !1561}
!4750 = !DILocalVariable(name: "uid", arg: 1, scope: !4747, file: !3, line: 81, type: !7)
!4751 = !DILocation(line: 81, column: 26, scope: !4747)
!4752 = !DILocalVariable(name: "to", arg: 2, scope: !4747, file: !3, line: 81, type: !1561)
!4753 = !DILocation(line: 81, column: 36, scope: !4747)
!4754 = !DILocalVariable(name: "h", scope: !4747, file: !3, line: 83, type: !2882)
!4755 = !DILocation(line: 83, column: 24, scope: !4747)
!4756 = !DILocalVariable(name: "loc", scope: !4747, file: !3, line: 84, type: !2347)
!4757 = !DILocation(line: 84, column: 10, scope: !4747)
!4758 = !DILocation(line: 86, column: 7, scope: !4747)
!4759 = !DILocation(line: 86, column: 5, scope: !4747)
!4760 = !DILocation(line: 87, column: 12, scope: !4747)
!4761 = !DILocation(line: 87, column: 3, scope: !4747)
!4762 = !DILocation(line: 87, column: 6, scope: !4747)
!4763 = !DILocation(line: 87, column: 10, scope: !4747)
!4764 = !DILocation(line: 88, column: 11, scope: !4747)
!4765 = !DILocation(line: 88, column: 3, scope: !4747)
!4766 = !DILocation(line: 88, column: 6, scope: !4747)
!4767 = !DILocation(line: 88, column: 9, scope: !4747)
!4768 = !DILocation(line: 89, column: 35, scope: !4747)
!4769 = !DILocation(line: 89, column: 64, scope: !4747)
!4770 = !DILocation(line: 90, column: 7, scope: !4747)
!4771 = !DILocation(line: 89, column: 9, scope: !4747)
!4772 = !DILocation(line: 89, column: 7, scope: !4747)
!4773 = !DILocation(line: 91, column: 35, scope: !4747)
!4774 = !DILocation(line: 91, column: 29, scope: !4747)
!4775 = !DILocation(line: 91, column: 3, scope: !4747)
!4776 = !DILocation(line: 91, column: 33, scope: !4747)
!4777 = !DILocation(line: 92, column: 1, scope: !4747)
!4778 = distinct !DISubprogram(name: "make_ssa_name", scope: !4196, file: !4196, line: 1245, type: !4779, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4779 = !DISubroutineType(types: !4780)
!4780 = !{!1561, !1561, !1892}
!4781 = !DILocalVariable(name: "var", arg: 1, scope: !4778, file: !4196, line: 1245, type: !1561)
!4782 = !DILocation(line: 1245, column: 21, scope: !4778)
!4783 = !DILocalVariable(name: "stmt", arg: 2, scope: !4778, file: !4196, line: 1245, type: !1892)
!4784 = !DILocation(line: 1245, column: 33, scope: !4778)
!4785 = !DILocation(line: 1247, column: 28, scope: !4778)
!4786 = !DILocation(line: 1247, column: 34, scope: !4778)
!4787 = !DILocation(line: 1247, column: 39, scope: !4778)
!4788 = !DILocation(line: 1247, column: 10, scope: !4778)
!4789 = !DILocation(line: 1247, column: 3, scope: !4778)
!4790 = distinct !DISubprogram(name: "gimple_nop_p", scope: !561, file: !561, line: 4304, type: !4104, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4791 = !DILocalVariable(name: "g", arg: 1, scope: !4790, file: !561, line: 4304, type: !3959)
!4792 = !DILocation(line: 4304, column: 28, scope: !4790)
!4793 = !DILocation(line: 4306, column: 23, scope: !4790)
!4794 = !DILocation(line: 4306, column: 10, scope: !4790)
!4795 = !DILocation(line: 4306, column: 26, scope: !4790)
!4796 = !DILocation(line: 4306, column: 3, scope: !4790)
!4797 = distinct !DISubprogram(name: "extract_component", scope: !3, file: !3, line: 588, type: !4798, scopeLine: 590, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4798 = !DISubroutineType(types: !4799)
!4799 = !{!1561, !3628, !1561, !1681, !1681}
!4800 = !DILocalVariable(name: "gsi", arg: 1, scope: !4797, file: !3, line: 588, type: !3628)
!4801 = !DILocation(line: 588, column: 42, scope: !4797)
!4802 = !DILocalVariable(name: "t", arg: 2, scope: !4797, file: !3, line: 588, type: !1561)
!4803 = !DILocation(line: 588, column: 52, scope: !4797)
!4804 = !DILocalVariable(name: "imagpart_p", arg: 3, scope: !4797, file: !3, line: 588, type: !1681)
!4805 = !DILocation(line: 588, column: 60, scope: !4797)
!4806 = !DILocalVariable(name: "gimple_p", arg: 4, scope: !4797, file: !3, line: 589, type: !1681)
!4807 = !DILocation(line: 589, column: 11, scope: !4797)
!4808 = !DILocation(line: 591, column: 11, scope: !4797)
!4809 = !DILocation(line: 591, column: 3, scope: !4797)
!4810 = !DILocation(line: 594, column: 14, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4797, file: !3, line: 592, column: 5)
!4812 = !DILocation(line: 594, column: 27, scope: !4811)
!4813 = !DILocation(line: 594, column: 47, scope: !4811)
!4814 = !DILocation(line: 594, column: 7, scope: !4811)
!4815 = !DILocation(line: 597, column: 7, scope: !4811)
!4816 = !DILocalVariable(name: "inner_type", scope: !4817, file: !3, line: 607, type: !1561)
!4817 = distinct !DILexicalBlock(scope: !4811, file: !3, line: 606, column: 7)
!4818 = !DILocation(line: 607, column: 7, scope: !4817)
!4819 = !DILocation(line: 607, column: 20, scope: !4817)
!4820 = !DILocation(line: 609, column: 6, scope: !4817)
!4821 = !DILocation(line: 609, column: 4, scope: !4817)
!4822 = !DILocation(line: 612, column: 6, scope: !4823)
!4823 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 612, column: 6)
!4824 = !DILocation(line: 612, column: 6, scope: !4817)
!4825 = !DILocation(line: 613, column: 34, scope: !4823)
!4826 = !DILocation(line: 613, column: 39, scope: !4823)
!4827 = !DILocation(line: 613, column: 8, scope: !4823)
!4828 = !DILocation(line: 613, column: 6, scope: !4823)
!4829 = !DILocation(line: 613, column: 4, scope: !4823)
!4830 = !DILocation(line: 616, column: 9, scope: !4817)
!4831 = !DILocation(line: 616, column: 2, scope: !4817)
!4832 = !DILocation(line: 620, column: 38, scope: !4811)
!4833 = !DILocation(line: 620, column: 41, scope: !4811)
!4834 = !DILocation(line: 620, column: 14, scope: !4811)
!4835 = !DILocation(line: 620, column: 7, scope: !4811)
!4836 = !DILocation(line: 623, column: 7, scope: !4811)
!4837 = !DILocation(line: 624, column: 5, scope: !4811)
!4838 = !DILocation(line: 626, column: 5, scope: !4797)
!4839 = !DILocation(line: 628, column: 1, scope: !4797)
!4840 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !4196, file: !4196, line: 233, type: !4841, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4841 = !DISubroutineType(types: !4842)
!4842 = !{null, !4361, !1561}
!4843 = !DILocalVariable(name: "use", arg: 1, scope: !4840, file: !4196, line: 233, type: !4361)
!4844 = !DILocation(line: 233, column: 37, scope: !4840)
!4845 = !DILocalVariable(name: "val", arg: 2, scope: !4840, file: !4196, line: 233, type: !1561)
!4846 = !DILocation(line: 233, column: 47, scope: !4840)
!4847 = !DILocation(line: 235, column: 19, scope: !4840)
!4848 = !DILocation(line: 235, column: 3, scope: !4840)
!4849 = !DILocation(line: 236, column: 17, scope: !4840)
!4850 = !DILocation(line: 236, column: 5, scope: !4840)
!4851 = !DILocation(line: 236, column: 10, scope: !4840)
!4852 = !DILocation(line: 236, column: 15, scope: !4840)
!4853 = !DILocation(line: 237, column: 17, scope: !4840)
!4854 = !DILocation(line: 237, column: 22, scope: !4840)
!4855 = !DILocation(line: 237, column: 3, scope: !4840)
!4856 = !DILocation(line: 238, column: 1, scope: !4840)
!4857 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !4196, file: !4196, line: 442, type: !4858, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4858 = !DISubroutineType(types: !4859)
!4859 = !{!4361, !1892, !1658}
!4860 = !DILocalVariable(name: "gs", arg: 1, scope: !4857, file: !4196, line: 442, type: !1892)
!4861 = !DILocation(line: 442, column: 36, scope: !4857)
!4862 = !DILocalVariable(name: "i", arg: 2, scope: !4857, file: !4196, line: 442, type: !1658)
!4863 = !DILocation(line: 442, column: 44, scope: !4857)
!4864 = !DILocation(line: 444, column: 27, scope: !4857)
!4865 = !DILocation(line: 444, column: 31, scope: !4857)
!4866 = !DILocation(line: 444, column: 11, scope: !4857)
!4867 = !DILocation(line: 444, column: 35, scope: !4857)
!4868 = !DILocation(line: 444, column: 3, scope: !4857)
!4869 = distinct !DISubprogram(name: "delink_imm_use", scope: !4196, file: !4196, line: 188, type: !4870, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4870 = !DISubroutineType(types: !4871)
!4871 = !{null, !4362}
!4872 = !DILocalVariable(name: "linknode", arg: 1, scope: !4869, file: !4196, line: 188, type: !4362)
!4873 = !DILocation(line: 188, column: 36, scope: !4869)
!4874 = !DILocation(line: 191, column: 7, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4869, file: !4196, line: 191, column: 7)
!4876 = !DILocation(line: 191, column: 17, scope: !4875)
!4877 = !DILocation(line: 191, column: 22, scope: !4875)
!4878 = !DILocation(line: 191, column: 7, scope: !4869)
!4879 = !DILocation(line: 192, column: 5, scope: !4875)
!4880 = !DILocation(line: 194, column: 26, scope: !4869)
!4881 = !DILocation(line: 194, column: 36, scope: !4869)
!4882 = !DILocation(line: 194, column: 3, scope: !4869)
!4883 = !DILocation(line: 194, column: 13, scope: !4869)
!4884 = !DILocation(line: 194, column: 19, scope: !4869)
!4885 = !DILocation(line: 194, column: 24, scope: !4869)
!4886 = !DILocation(line: 195, column: 26, scope: !4869)
!4887 = !DILocation(line: 195, column: 36, scope: !4869)
!4888 = !DILocation(line: 195, column: 3, scope: !4869)
!4889 = !DILocation(line: 195, column: 13, scope: !4869)
!4890 = !DILocation(line: 195, column: 19, scope: !4869)
!4891 = !DILocation(line: 195, column: 24, scope: !4869)
!4892 = !DILocation(line: 196, column: 3, scope: !4869)
!4893 = !DILocation(line: 196, column: 13, scope: !4869)
!4894 = !DILocation(line: 196, column: 18, scope: !4869)
!4895 = !DILocation(line: 197, column: 3, scope: !4869)
!4896 = !DILocation(line: 197, column: 13, scope: !4869)
!4897 = !DILocation(line: 197, column: 18, scope: !4869)
!4898 = !DILocation(line: 198, column: 1, scope: !4869)
!4899 = distinct !DISubprogram(name: "link_imm_use", scope: !4196, file: !4196, line: 214, type: !4900, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4900 = !DISubroutineType(types: !4901)
!4901 = !{null, !4362, !1561}
!4902 = !DILocalVariable(name: "linknode", arg: 1, scope: !4899, file: !4196, line: 214, type: !4362)
!4903 = !DILocation(line: 214, column: 34, scope: !4899)
!4904 = !DILocalVariable(name: "def", arg: 2, scope: !4899, file: !4196, line: 214, type: !1561)
!4905 = !DILocation(line: 214, column: 49, scope: !4899)
!4906 = !DILocalVariable(name: "root", scope: !4899, file: !4196, line: 216, type: !4362)
!4907 = !DILocation(line: 216, column: 22, scope: !4899)
!4908 = !DILocation(line: 218, column: 8, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4899, file: !4196, line: 218, column: 7)
!4910 = !DILocation(line: 218, column: 12, scope: !4909)
!4911 = !DILocation(line: 218, column: 15, scope: !4909)
!4912 = !DILocation(line: 218, column: 31, scope: !4909)
!4913 = !DILocation(line: 218, column: 7, scope: !4899)
!4914 = !DILocation(line: 219, column: 5, scope: !4909)
!4915 = !DILocation(line: 219, column: 15, scope: !4909)
!4916 = !DILocation(line: 219, column: 20, scope: !4909)
!4917 = !DILocation(line: 222, column: 16, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4909, file: !4196, line: 221, column: 5)
!4919 = !DILocation(line: 222, column: 12, scope: !4918)
!4920 = !DILocation(line: 227, column: 29, scope: !4918)
!4921 = !DILocation(line: 227, column: 39, scope: !4918)
!4922 = !DILocation(line: 227, column: 7, scope: !4918)
!4923 = !DILocation(line: 229, column: 1, scope: !4899)
!4924 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !4196, file: !4196, line: 202, type: !4925, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4925 = !DISubroutineType(types: !4926)
!4926 = !{null, !4362, !4362}
!4927 = !DILocalVariable(name: "linknode", arg: 1, scope: !4924, file: !4196, line: 202, type: !4362)
!4928 = !DILocation(line: 202, column: 42, scope: !4924)
!4929 = !DILocalVariable(name: "list", arg: 2, scope: !4924, file: !4196, line: 202, type: !4362)
!4930 = !DILocation(line: 202, column: 71, scope: !4924)
!4931 = !DILocation(line: 206, column: 20, scope: !4924)
!4932 = !DILocation(line: 206, column: 3, scope: !4924)
!4933 = !DILocation(line: 206, column: 13, scope: !4924)
!4934 = !DILocation(line: 206, column: 18, scope: !4924)
!4935 = !DILocation(line: 207, column: 20, scope: !4924)
!4936 = !DILocation(line: 207, column: 26, scope: !4924)
!4937 = !DILocation(line: 207, column: 3, scope: !4924)
!4938 = !DILocation(line: 207, column: 13, scope: !4924)
!4939 = !DILocation(line: 207, column: 18, scope: !4924)
!4940 = !DILocation(line: 208, column: 22, scope: !4924)
!4941 = !DILocation(line: 208, column: 3, scope: !4924)
!4942 = !DILocation(line: 208, column: 9, scope: !4924)
!4943 = !DILocation(line: 208, column: 15, scope: !4924)
!4944 = !DILocation(line: 208, column: 20, scope: !4924)
!4945 = !DILocation(line: 209, column: 16, scope: !4924)
!4946 = !DILocation(line: 209, column: 3, scope: !4924)
!4947 = !DILocation(line: 209, column: 9, scope: !4924)
!4948 = !DILocation(line: 209, column: 14, scope: !4924)
!4949 = !DILocation(line: 210, column: 1, scope: !4924)
!4950 = distinct !DISubprogram(name: "bb_seq", scope: !561, file: !561, line: 237, type: !4951, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4951 = !DISubroutineType(types: !4952)
!4952 = !{!1882, !4399}
!4953 = !DILocalVariable(name: "bb", arg: 1, scope: !4950, file: !561, line: 237, type: !4399)
!4954 = !DILocation(line: 237, column: 27, scope: !4950)
!4955 = !DILocation(line: 239, column: 13, scope: !4950)
!4956 = !DILocation(line: 239, column: 17, scope: !4950)
!4957 = !DILocation(line: 239, column: 23, scope: !4950)
!4958 = !DILocation(line: 239, column: 33, scope: !4950)
!4959 = !DILocation(line: 239, column: 36, scope: !4950)
!4960 = !DILocation(line: 239, column: 40, scope: !4950)
!4961 = !DILocation(line: 239, column: 43, scope: !4950)
!4962 = !DILocation(line: 239, column: 10, scope: !4950)
!4963 = !DILocation(line: 239, column: 53, scope: !4950)
!4964 = !DILocation(line: 239, column: 57, scope: !4950)
!4965 = !DILocation(line: 239, column: 60, scope: !4950)
!4966 = !DILocation(line: 239, column: 68, scope: !4950)
!4967 = !DILocation(line: 239, column: 3, scope: !4950)
!4968 = distinct !DISubprogram(name: "gimple_seq_first", scope: !561, file: !561, line: 159, type: !4969, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4969 = !DISubroutineType(types: !4970)
!4970 = !{!1887, !4971}
!4971 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1562, line: 67, baseType: !4972)
!4972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4973, size: 64)
!4973 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1884)
!4974 = !DILocalVariable(name: "s", arg: 1, scope: !4968, file: !561, line: 159, type: !4971)
!4975 = !DILocation(line: 159, column: 36, scope: !4968)
!4976 = !DILocation(line: 161, column: 10, scope: !4968)
!4977 = !DILocation(line: 161, column: 14, scope: !4968)
!4978 = !DILocation(line: 161, column: 17, scope: !4968)
!4979 = !DILocation(line: 161, column: 3, scope: !4968)
!4980 = distinct !DISubprogram(name: "expand_complex_move", scope: !3, file: !3, line: 761, type: !4981, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!4981 = !DISubroutineType(types: !4982)
!4982 = !{null, !3628, !1561}
!4983 = !DILocalVariable(name: "gsi", arg: 1, scope: !4980, file: !3, line: 761, type: !3628)
!4984 = !DILocation(line: 761, column: 44, scope: !4980)
!4985 = !DILocalVariable(name: "type", arg: 2, scope: !4980, file: !3, line: 761, type: !1561)
!4986 = !DILocation(line: 761, column: 54, scope: !4980)
!4987 = !DILocalVariable(name: "inner_type", scope: !4980, file: !3, line: 763, type: !1561)
!4988 = !DILocation(line: 763, column: 8, scope: !4980)
!4989 = !DILocation(line: 763, column: 21, scope: !4980)
!4990 = !DILocalVariable(name: "r", scope: !4980, file: !3, line: 764, type: !1561)
!4991 = !DILocation(line: 764, column: 8, scope: !4980)
!4992 = !DILocalVariable(name: "i", scope: !4980, file: !3, line: 764, type: !1561)
!4993 = !DILocation(line: 764, column: 11, scope: !4980)
!4994 = !DILocalVariable(name: "lhs", scope: !4980, file: !3, line: 764, type: !1561)
!4995 = !DILocation(line: 764, column: 14, scope: !4980)
!4996 = !DILocalVariable(name: "rhs", scope: !4980, file: !3, line: 764, type: !1561)
!4997 = !DILocation(line: 764, column: 19, scope: !4980)
!4998 = !DILocalVariable(name: "stmt", scope: !4980, file: !3, line: 765, type: !1892)
!4999 = !DILocation(line: 765, column: 10, scope: !4980)
!5000 = !DILocation(line: 765, column: 28, scope: !4980)
!5001 = !DILocation(line: 765, column: 17, scope: !4980)
!5002 = !DILocation(line: 767, column: 25, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4980, file: !3, line: 767, column: 7)
!5004 = !DILocation(line: 767, column: 7, scope: !5003)
!5005 = !DILocation(line: 767, column: 7, scope: !4980)
!5006 = !DILocation(line: 769, column: 32, scope: !5007)
!5007 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 768, column: 5)
!5008 = !DILocation(line: 769, column: 13, scope: !5007)
!5009 = !DILocation(line: 769, column: 11, scope: !5007)
!5010 = !DILocation(line: 770, column: 27, scope: !5011)
!5011 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 770, column: 11)
!5012 = !DILocation(line: 770, column: 11, scope: !5011)
!5013 = !DILocation(line: 770, column: 33, scope: !5011)
!5014 = !DILocation(line: 770, column: 11, scope: !5007)
!5015 = !DILocation(line: 771, column: 28, scope: !5011)
!5016 = !DILocation(line: 771, column: 8, scope: !5011)
!5017 = !DILocation(line: 771, column: 6, scope: !5011)
!5018 = !DILocation(line: 771, column: 2, scope: !5011)
!5019 = !DILocation(line: 773, column: 6, scope: !5011)
!5020 = !DILocation(line: 774, column: 5, scope: !5007)
!5021 = !DILocation(line: 775, column: 28, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 775, column: 12)
!5023 = !DILocation(line: 775, column: 12, scope: !5022)
!5024 = !DILocation(line: 775, column: 12, scope: !5003)
!5025 = !DILocation(line: 777, column: 30, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5022, file: !3, line: 776, column: 5)
!5027 = !DILocation(line: 777, column: 13, scope: !5026)
!5028 = !DILocation(line: 777, column: 11, scope: !5026)
!5029 = !DILocation(line: 778, column: 11, scope: !5026)
!5030 = !DILocation(line: 779, column: 5, scope: !5026)
!5031 = !DILocation(line: 781, column: 5, scope: !5022)
!5032 = !DILocation(line: 783, column: 7, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !4980, file: !3, line: 783, column: 7)
!5034 = !DILocation(line: 783, column: 23, scope: !5033)
!5035 = !DILocation(line: 783, column: 7, scope: !4980)
!5036 = !DILocation(line: 785, column: 34, scope: !5037)
!5037 = distinct !DILexicalBlock(scope: !5038, file: !3, line: 785, column: 11)
!5038 = distinct !DILexicalBlock(scope: !5033, file: !3, line: 784, column: 5)
!5039 = !DILocation(line: 785, column: 11, scope: !5037)
!5040 = !DILocation(line: 785, column: 11, scope: !5038)
!5041 = !DILocalVariable(name: "ei", scope: !5042, file: !3, line: 787, type: !5043)
!5042 = distinct !DILexicalBlock(scope: !5037, file: !3, line: 786, column: 2)
!5043 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !318, line: 682, baseType: !5044)
!5044 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !318, line: 679, size: 128, elements: !5045)
!5045 = !{!5046, !5047}
!5046 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5044, file: !318, line: 680, baseType: !7, size: 32)
!5047 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !5044, file: !318, line: 681, baseType: !5048, size: 64, offset: 64)
!5048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1860, size: 64)
!5049 = !DILocation(line: 787, column: 18, scope: !5042)
!5050 = !DILocalVariable(name: "e", scope: !5042, file: !3, line: 788, type: !1872)
!5051 = !DILocation(line: 788, column: 9, scope: !5042)
!5052 = !DILocation(line: 793, column: 4, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5042, file: !3, line: 793, column: 4)
!5054 = !DILocation(line: 793, column: 4, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !5053, file: !3, line: 793, column: 4)
!5056 = !DILocation(line: 794, column: 10, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !5055, file: !3, line: 794, column: 10)
!5058 = !DILocation(line: 794, column: 13, scope: !5057)
!5059 = !DILocation(line: 794, column: 19, scope: !5057)
!5060 = !DILocation(line: 794, column: 10, scope: !5055)
!5061 = !DILocation(line: 795, column: 8, scope: !5057)
!5062 = !DILocation(line: 794, column: 21, scope: !5057)
!5063 = distinct !{!5063, !5052, !5064}
!5064 = !DILocation(line: 795, column: 13, scope: !5053)
!5065 = !DILocation(line: 796, column: 4, scope: !5042)
!5066 = !DILabel(scope: !5042, name: "found_fallthru", file: !3, line: 797)
!5067 = !DILocation(line: 797, column: 2, scope: !5042)
!5068 = !DILocation(line: 799, column: 8, scope: !5042)
!5069 = !DILocation(line: 799, column: 6, scope: !5042)
!5070 = !DILocation(line: 800, column: 8, scope: !5042)
!5071 = !DILocation(line: 800, column: 6, scope: !5042)
!5072 = !DILocation(line: 801, column: 39, scope: !5042)
!5073 = !DILocation(line: 801, column: 42, scope: !5042)
!5074 = !DILocation(line: 801, column: 47, scope: !5042)
!5075 = !DILocation(line: 801, column: 50, scope: !5042)
!5076 = !DILocation(line: 801, column: 4, scope: !5042)
!5077 = !DILocation(line: 802, column: 2, scope: !5042)
!5078 = !DILocation(line: 803, column: 32, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !5037, file: !3, line: 803, column: 16)
!5080 = !DILocation(line: 803, column: 16, scope: !5079)
!5081 = !DILocation(line: 804, column: 9, scope: !5079)
!5082 = !DILocation(line: 804, column: 37, scope: !5079)
!5083 = !DILocation(line: 804, column: 12, scope: !5079)
!5084 = !DILocation(line: 805, column: 9, scope: !5079)
!5085 = !DILocation(line: 805, column: 36, scope: !5079)
!5086 = !DILocation(line: 805, column: 12, scope: !5079)
!5087 = !DILocation(line: 805, column: 42, scope: !5079)
!5088 = !DILocation(line: 803, column: 16, scope: !5037)
!5089 = !DILocation(line: 807, column: 8, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5079, file: !3, line: 806, column: 2)
!5091 = !DILocation(line: 807, column: 6, scope: !5090)
!5092 = !DILocation(line: 808, column: 8, scope: !5090)
!5093 = !DILocation(line: 808, column: 6, scope: !5090)
!5094 = !DILocation(line: 809, column: 31, scope: !5090)
!5095 = !DILocation(line: 809, column: 36, scope: !5090)
!5096 = !DILocation(line: 809, column: 42, scope: !5090)
!5097 = !DILocation(line: 809, column: 45, scope: !5090)
!5098 = !DILocation(line: 809, column: 4, scope: !5090)
!5099 = !DILocation(line: 810, column: 2, scope: !5090)
!5100 = !DILocation(line: 813, column: 32, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5102, file: !3, line: 813, column: 8)
!5102 = distinct !DILexicalBlock(scope: !5079, file: !3, line: 812, column: 2)
!5103 = !DILocation(line: 813, column: 8, scope: !5101)
!5104 = !DILocation(line: 813, column: 38, scope: !5101)
!5105 = !DILocation(line: 813, column: 8, scope: !5102)
!5106 = !DILocation(line: 815, column: 31, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !5101, file: !3, line: 814, column: 6)
!5108 = !DILocation(line: 815, column: 36, scope: !5107)
!5109 = !DILocation(line: 815, column: 12, scope: !5107)
!5110 = !DILocation(line: 815, column: 10, scope: !5107)
!5111 = !DILocation(line: 816, column: 31, scope: !5107)
!5112 = !DILocation(line: 816, column: 36, scope: !5107)
!5113 = !DILocation(line: 816, column: 12, scope: !5107)
!5114 = !DILocation(line: 816, column: 10, scope: !5107)
!5115 = !DILocation(line: 817, column: 6, scope: !5107)
!5116 = !DILocation(line: 820, column: 32, scope: !5117)
!5117 = distinct !DILexicalBlock(scope: !5101, file: !3, line: 819, column: 6)
!5118 = !DILocation(line: 820, column: 12, scope: !5117)
!5119 = !DILocation(line: 820, column: 10, scope: !5117)
!5120 = !DILocation(line: 821, column: 32, scope: !5117)
!5121 = !DILocation(line: 821, column: 12, scope: !5117)
!5122 = !DILocation(line: 821, column: 10, scope: !5117)
!5123 = !DILocation(line: 823, column: 31, scope: !5102)
!5124 = !DILocation(line: 823, column: 36, scope: !5102)
!5125 = !DILocation(line: 823, column: 39, scope: !5102)
!5126 = !DILocation(line: 823, column: 4, scope: !5102)
!5127 = !DILocation(line: 825, column: 5, scope: !5038)
!5128 = !DILocation(line: 826, column: 12, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !5033, file: !3, line: 826, column: 12)
!5130 = !DILocation(line: 826, column: 16, scope: !5129)
!5131 = !DILocation(line: 826, column: 19, scope: !5129)
!5132 = !DILocation(line: 826, column: 35, scope: !5129)
!5133 = !DILocation(line: 826, column: 47, scope: !5129)
!5134 = !DILocation(line: 826, column: 51, scope: !5129)
!5135 = !DILocation(line: 826, column: 12, scope: !5033)
!5136 = !DILocalVariable(name: "x", scope: !5137, file: !3, line: 828, type: !1561)
!5137 = distinct !DILexicalBlock(scope: !5129, file: !3, line: 827, column: 5)
!5138 = !DILocation(line: 828, column: 12, scope: !5137)
!5139 = !DILocalVariable(name: "t", scope: !5137, file: !3, line: 829, type: !1892)
!5140 = !DILocation(line: 829, column: 14, scope: !5137)
!5141 = !DILocation(line: 831, column: 30, scope: !5137)
!5142 = !DILocation(line: 831, column: 35, scope: !5137)
!5143 = !DILocation(line: 831, column: 11, scope: !5137)
!5144 = !DILocation(line: 831, column: 9, scope: !5137)
!5145 = !DILocation(line: 832, column: 30, scope: !5137)
!5146 = !DILocation(line: 832, column: 35, scope: !5137)
!5147 = !DILocation(line: 832, column: 11, scope: !5137)
!5148 = !DILocation(line: 832, column: 9, scope: !5137)
!5149 = !DILocation(line: 834, column: 11, scope: !5137)
!5150 = !DILocation(line: 834, column: 9, scope: !5137)
!5151 = !DILocation(line: 835, column: 11, scope: !5137)
!5152 = !DILocation(line: 835, column: 9, scope: !5137)
!5153 = !DILocation(line: 836, column: 26, scope: !5137)
!5154 = !DILocation(line: 836, column: 31, scope: !5137)
!5155 = !DILocation(line: 836, column: 7, scope: !5137)
!5156 = !DILocation(line: 838, column: 11, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5137, file: !3, line: 838, column: 11)
!5158 = !DILocation(line: 838, column: 30, scope: !5157)
!5159 = !DILocation(line: 838, column: 19, scope: !5157)
!5160 = !DILocation(line: 838, column: 16, scope: !5157)
!5161 = !DILocation(line: 838, column: 11, scope: !5137)
!5162 = !DILocation(line: 840, column: 8, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 839, column: 2)
!5164 = !DILocation(line: 840, column: 6, scope: !5163)
!5165 = !DILocation(line: 841, column: 27, scope: !5163)
!5166 = !DILocation(line: 841, column: 33, scope: !5163)
!5167 = !DILocation(line: 841, column: 4, scope: !5163)
!5168 = !DILocation(line: 842, column: 28, scope: !5163)
!5169 = !DILocation(line: 842, column: 34, scope: !5163)
!5170 = !DILocation(line: 842, column: 4, scope: !5163)
!5171 = !DILocation(line: 843, column: 2, scope: !5163)
!5172 = !DILocation(line: 846, column: 8, scope: !5173)
!5173 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 845, column: 2)
!5174 = !DILocation(line: 846, column: 6, scope: !5173)
!5175 = !DILocation(line: 847, column: 8, scope: !5173)
!5176 = !DILocation(line: 847, column: 6, scope: !5173)
!5177 = !DILocation(line: 848, column: 23, scope: !5173)
!5178 = !DILocation(line: 848, column: 28, scope: !5173)
!5179 = !DILocation(line: 848, column: 4, scope: !5173)
!5180 = !DILocation(line: 850, column: 22, scope: !5173)
!5181 = !DILocation(line: 850, column: 11, scope: !5173)
!5182 = !DILocation(line: 850, column: 9, scope: !5173)
!5183 = !DILocation(line: 851, column: 4, scope: !5173)
!5184 = !DILocation(line: 852, column: 30, scope: !5173)
!5185 = !DILocation(line: 852, column: 36, scope: !5173)
!5186 = !DILocation(line: 852, column: 4, scope: !5173)
!5187 = !DILocation(line: 855, column: 20, scope: !5137)
!5188 = !DILocation(line: 855, column: 7, scope: !5137)
!5189 = !DILocation(line: 856, column: 5, scope: !5137)
!5190 = !DILocation(line: 857, column: 1, scope: !4980)
!5191 = distinct !DISubprogram(name: "is_gimple_assign", scope: !561, file: !561, line: 1677, type: !4104, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5192 = !DILocalVariable(name: "gs", arg: 1, scope: !5191, file: !561, line: 1677, type: !3959)
!5193 = !DILocation(line: 1677, column: 32, scope: !5191)
!5194 = !DILocation(line: 1679, column: 23, scope: !5191)
!5195 = !DILocation(line: 1679, column: 10, scope: !5191)
!5196 = !DILocation(line: 1679, column: 27, scope: !5191)
!5197 = !DILocation(line: 1679, column: 3, scope: !5191)
!5198 = distinct !DISubprogram(name: "update_stmt", scope: !561, file: !561, line: 1456, type: !5199, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5199 = !DISubroutineType(types: !5200)
!5200 = !{null, !1892}
!5201 = !DILocalVariable(name: "s", arg: 1, scope: !5198, file: !561, line: 1456, type: !1892)
!5202 = !DILocation(line: 1456, column: 21, scope: !5198)
!5203 = !DILocation(line: 1458, column: 23, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !5198, file: !561, line: 1458, column: 7)
!5205 = !DILocation(line: 1458, column: 7, scope: !5204)
!5206 = !DILocation(line: 1458, column: 7, scope: !5198)
!5207 = !DILocation(line: 1460, column: 28, scope: !5208)
!5208 = distinct !DILexicalBlock(scope: !5204, file: !561, line: 1459, column: 5)
!5209 = !DILocation(line: 1460, column: 7, scope: !5208)
!5210 = !DILocation(line: 1461, column: 29, scope: !5208)
!5211 = !DILocation(line: 1461, column: 7, scope: !5208)
!5212 = !DILocation(line: 1462, column: 5, scope: !5208)
!5213 = !DILocation(line: 1463, column: 1, scope: !5198)
!5214 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !4196, file: !4196, line: 33, type: !5215, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5215 = !DISubroutineType(types: !5216)
!5216 = !{!1681, !5217}
!5217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5218, size: 64)
!5218 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2281)
!5219 = !DILocalVariable(name: "fun", arg: 1, scope: !5214, file: !4196, line: 33, type: !5217)
!5220 = !DILocation(line: 33, column: 41, scope: !5214)
!5221 = !DILocation(line: 35, column: 10, scope: !5214)
!5222 = !DILocation(line: 35, column: 14, scope: !5214)
!5223 = !DILocation(line: 35, column: 17, scope: !5214)
!5224 = !DILocation(line: 35, column: 22, scope: !5214)
!5225 = !DILocation(line: 35, column: 32, scope: !5214)
!5226 = !DILocation(line: 35, column: 35, scope: !5214)
!5227 = !DILocation(line: 35, column: 40, scope: !5214)
!5228 = !DILocation(line: 35, column: 51, scope: !5214)
!5229 = !DILocation(line: 0, scope: !5214)
!5230 = !DILocation(line: 35, column: 3, scope: !5214)
!5231 = distinct !DISubprogram(name: "expand_complex_addition", scope: !3, file: !3, line: 865, type: !5232, scopeLine: 869, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5232 = !DISubroutineType(types: !5233)
!5233 = !{null, !3628, !1561, !1561, !1561, !1561, !1561, !366, !2876, !2876}
!5234 = !DILocalVariable(name: "gsi", arg: 1, scope: !5231, file: !3, line: 865, type: !3628)
!5235 = !DILocation(line: 865, column: 48, scope: !5231)
!5236 = !DILocalVariable(name: "inner_type", arg: 2, scope: !5231, file: !3, line: 865, type: !1561)
!5237 = !DILocation(line: 865, column: 58, scope: !5231)
!5238 = !DILocalVariable(name: "ar", arg: 3, scope: !5231, file: !3, line: 866, type: !1561)
!5239 = !DILocation(line: 866, column: 10, scope: !5231)
!5240 = !DILocalVariable(name: "ai", arg: 4, scope: !5231, file: !3, line: 866, type: !1561)
!5241 = !DILocation(line: 866, column: 19, scope: !5231)
!5242 = !DILocalVariable(name: "br", arg: 5, scope: !5231, file: !3, line: 866, type: !1561)
!5243 = !DILocation(line: 866, column: 28, scope: !5231)
!5244 = !DILocalVariable(name: "bi", arg: 6, scope: !5231, file: !3, line: 866, type: !1561)
!5245 = !DILocation(line: 866, column: 37, scope: !5231)
!5246 = !DILocalVariable(name: "code", arg: 7, scope: !5231, file: !3, line: 867, type: !366)
!5247 = !DILocation(line: 867, column: 20, scope: !5231)
!5248 = !DILocalVariable(name: "al", arg: 8, scope: !5231, file: !3, line: 868, type: !2876)
!5249 = !DILocation(line: 868, column: 23, scope: !5231)
!5250 = !DILocalVariable(name: "bl", arg: 9, scope: !5231, file: !3, line: 868, type: !2876)
!5251 = !DILocation(line: 868, column: 45, scope: !5231)
!5252 = !DILocalVariable(name: "rr", scope: !5231, file: !3, line: 870, type: !1561)
!5253 = !DILocation(line: 870, column: 8, scope: !5231)
!5254 = !DILocalVariable(name: "ri", scope: !5231, file: !3, line: 870, type: !1561)
!5255 = !DILocation(line: 870, column: 12, scope: !5231)
!5256 = !DILocation(line: 872, column: 11, scope: !5231)
!5257 = !DILocation(line: 872, column: 3, scope: !5231)
!5258 = !DILocation(line: 875, column: 29, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 873, column: 5)
!5260 = !DILocation(line: 875, column: 34, scope: !5259)
!5261 = !DILocation(line: 875, column: 40, scope: !5259)
!5262 = !DILocation(line: 875, column: 52, scope: !5259)
!5263 = !DILocation(line: 875, column: 56, scope: !5259)
!5264 = !DILocation(line: 875, column: 12, scope: !5259)
!5265 = !DILocation(line: 875, column: 10, scope: !5259)
!5266 = !DILocation(line: 876, column: 12, scope: !5259)
!5267 = !DILocation(line: 876, column: 10, scope: !5259)
!5268 = !DILocation(line: 877, column: 7, scope: !5259)
!5269 = !DILocation(line: 880, column: 12, scope: !5259)
!5270 = !DILocation(line: 880, column: 10, scope: !5259)
!5271 = !DILocation(line: 881, column: 11, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 881, column: 11)
!5273 = !DILocation(line: 881, column: 16, scope: !5272)
!5274 = !DILocation(line: 881, column: 11, scope: !5259)
!5275 = !DILocation(line: 882, column: 24, scope: !5272)
!5276 = !DILocation(line: 882, column: 41, scope: !5272)
!5277 = !DILocation(line: 882, column: 53, scope: !5272)
!5278 = !DILocation(line: 882, column: 57, scope: !5272)
!5279 = !DILocation(line: 882, column: 7, scope: !5272)
!5280 = !DILocation(line: 882, column: 5, scope: !5272)
!5281 = !DILocation(line: 882, column: 2, scope: !5272)
!5282 = !DILocation(line: 884, column: 7, scope: !5272)
!5283 = !DILocation(line: 884, column: 5, scope: !5272)
!5284 = !DILocation(line: 885, column: 7, scope: !5259)
!5285 = !DILocation(line: 888, column: 11, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 888, column: 11)
!5287 = !DILocation(line: 888, column: 16, scope: !5286)
!5288 = !DILocation(line: 888, column: 11, scope: !5259)
!5289 = !DILocation(line: 889, column: 24, scope: !5286)
!5290 = !DILocation(line: 889, column: 41, scope: !5286)
!5291 = !DILocation(line: 889, column: 53, scope: !5286)
!5292 = !DILocation(line: 889, column: 57, scope: !5286)
!5293 = !DILocation(line: 889, column: 7, scope: !5286)
!5294 = !DILocation(line: 889, column: 5, scope: !5286)
!5295 = !DILocation(line: 889, column: 2, scope: !5286)
!5296 = !DILocation(line: 891, column: 7, scope: !5286)
!5297 = !DILocation(line: 891, column: 5, scope: !5286)
!5298 = !DILocation(line: 892, column: 12, scope: !5259)
!5299 = !DILocation(line: 892, column: 10, scope: !5259)
!5300 = !DILocation(line: 893, column: 7, scope: !5259)
!5301 = !DILocation(line: 896, column: 12, scope: !5259)
!5302 = !DILocation(line: 896, column: 10, scope: !5259)
!5303 = !DILocation(line: 897, column: 29, scope: !5259)
!5304 = !DILocation(line: 897, column: 34, scope: !5259)
!5305 = !DILocation(line: 897, column: 40, scope: !5259)
!5306 = !DILocation(line: 897, column: 52, scope: !5259)
!5307 = !DILocation(line: 897, column: 56, scope: !5259)
!5308 = !DILocation(line: 897, column: 12, scope: !5259)
!5309 = !DILocation(line: 897, column: 10, scope: !5259)
!5310 = !DILocation(line: 898, column: 7, scope: !5259)
!5311 = !DILocation(line: 901, column: 29, scope: !5259)
!5312 = !DILocation(line: 901, column: 34, scope: !5259)
!5313 = !DILocation(line: 901, column: 40, scope: !5259)
!5314 = !DILocation(line: 901, column: 52, scope: !5259)
!5315 = !DILocation(line: 901, column: 56, scope: !5259)
!5316 = !DILocation(line: 901, column: 12, scope: !5259)
!5317 = !DILocation(line: 901, column: 10, scope: !5259)
!5318 = !DILocation(line: 902, column: 12, scope: !5259)
!5319 = !DILocation(line: 902, column: 10, scope: !5259)
!5320 = !DILocation(line: 903, column: 7, scope: !5259)
!5321 = !DILocation(line: 906, column: 12, scope: !5259)
!5322 = !DILocation(line: 906, column: 10, scope: !5259)
!5323 = !DILocation(line: 907, column: 29, scope: !5259)
!5324 = !DILocation(line: 907, column: 34, scope: !5259)
!5325 = !DILocation(line: 907, column: 40, scope: !5259)
!5326 = !DILocation(line: 907, column: 52, scope: !5259)
!5327 = !DILocation(line: 907, column: 56, scope: !5259)
!5328 = !DILocation(line: 907, column: 12, scope: !5259)
!5329 = !DILocation(line: 907, column: 10, scope: !5259)
!5330 = !DILocation(line: 908, column: 7, scope: !5259)
!5331 = !DILocation(line: 911, column: 11, scope: !5332)
!5332 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 911, column: 11)
!5333 = !DILocation(line: 911, column: 16, scope: !5332)
!5334 = !DILocation(line: 911, column: 11, scope: !5259)
!5335 = !DILocation(line: 912, column: 2, scope: !5332)
!5336 = !DILocation(line: 913, column: 29, scope: !5259)
!5337 = !DILocation(line: 913, column: 34, scope: !5259)
!5338 = !DILocation(line: 913, column: 40, scope: !5259)
!5339 = !DILocation(line: 913, column: 52, scope: !5259)
!5340 = !DILocation(line: 913, column: 56, scope: !5259)
!5341 = !DILocation(line: 913, column: 12, scope: !5259)
!5342 = !DILocation(line: 913, column: 10, scope: !5259)
!5343 = !DILocation(line: 914, column: 12, scope: !5259)
!5344 = !DILocation(line: 914, column: 10, scope: !5259)
!5345 = !DILocation(line: 915, column: 7, scope: !5259)
!5346 = !DILocation(line: 918, column: 11, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 918, column: 11)
!5348 = !DILocation(line: 918, column: 16, scope: !5347)
!5349 = !DILocation(line: 918, column: 11, scope: !5259)
!5350 = !DILocation(line: 919, column: 2, scope: !5347)
!5351 = !DILocation(line: 920, column: 12, scope: !5259)
!5352 = !DILocation(line: 920, column: 10, scope: !5259)
!5353 = !DILocation(line: 921, column: 29, scope: !5259)
!5354 = !DILocation(line: 921, column: 34, scope: !5259)
!5355 = !DILocation(line: 921, column: 40, scope: !5259)
!5356 = !DILocation(line: 921, column: 52, scope: !5259)
!5357 = !DILocation(line: 921, column: 56, scope: !5259)
!5358 = !DILocation(line: 921, column: 12, scope: !5259)
!5359 = !DILocation(line: 921, column: 10, scope: !5259)
!5360 = !DILocation(line: 922, column: 7, scope: !5259)
!5361 = !DILabel(scope: !5259, name: "general", file: !3, line: 925)
!5362 = !DILocation(line: 925, column: 5, scope: !5259)
!5363 = !DILocation(line: 926, column: 29, scope: !5259)
!5364 = !DILocation(line: 926, column: 34, scope: !5259)
!5365 = !DILocation(line: 926, column: 40, scope: !5259)
!5366 = !DILocation(line: 926, column: 52, scope: !5259)
!5367 = !DILocation(line: 926, column: 56, scope: !5259)
!5368 = !DILocation(line: 926, column: 12, scope: !5259)
!5369 = !DILocation(line: 926, column: 10, scope: !5259)
!5370 = !DILocation(line: 927, column: 29, scope: !5259)
!5371 = !DILocation(line: 927, column: 34, scope: !5259)
!5372 = !DILocation(line: 927, column: 40, scope: !5259)
!5373 = !DILocation(line: 927, column: 52, scope: !5259)
!5374 = !DILocation(line: 927, column: 56, scope: !5259)
!5375 = !DILocation(line: 927, column: 12, scope: !5259)
!5376 = !DILocation(line: 927, column: 10, scope: !5259)
!5377 = !DILocation(line: 928, column: 7, scope: !5259)
!5378 = !DILocation(line: 931, column: 7, scope: !5259)
!5379 = !DILocation(line: 932, column: 5, scope: !5259)
!5380 = !DILocation(line: 934, column: 30, scope: !5231)
!5381 = !DILocation(line: 934, column: 35, scope: !5231)
!5382 = !DILocation(line: 934, column: 39, scope: !5231)
!5383 = !DILocation(line: 934, column: 3, scope: !5231)
!5384 = !DILocation(line: 935, column: 1, scope: !5231)
!5385 = distinct !DISubprogram(name: "expand_complex_multiplication", scope: !3, file: !3, line: 989, type: !5386, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5386 = !DISubroutineType(types: !5387)
!5387 = !{null, !3628, !1561, !1561, !1561, !1561, !1561, !2876, !2876}
!5388 = !DILocalVariable(name: "gsi", arg: 1, scope: !5385, file: !3, line: 989, type: !3628)
!5389 = !DILocation(line: 989, column: 54, scope: !5385)
!5390 = !DILocalVariable(name: "inner_type", arg: 2, scope: !5385, file: !3, line: 989, type: !1561)
!5391 = !DILocation(line: 989, column: 64, scope: !5385)
!5392 = !DILocalVariable(name: "ar", arg: 3, scope: !5385, file: !3, line: 990, type: !1561)
!5393 = !DILocation(line: 990, column: 16, scope: !5385)
!5394 = !DILocalVariable(name: "ai", arg: 4, scope: !5385, file: !3, line: 990, type: !1561)
!5395 = !DILocation(line: 990, column: 25, scope: !5385)
!5396 = !DILocalVariable(name: "br", arg: 5, scope: !5385, file: !3, line: 990, type: !1561)
!5397 = !DILocation(line: 990, column: 34, scope: !5385)
!5398 = !DILocalVariable(name: "bi", arg: 6, scope: !5385, file: !3, line: 990, type: !1561)
!5399 = !DILocation(line: 990, column: 43, scope: !5385)
!5400 = !DILocalVariable(name: "al", arg: 7, scope: !5385, file: !3, line: 991, type: !2876)
!5401 = !DILocation(line: 991, column: 29, scope: !5385)
!5402 = !DILocalVariable(name: "bl", arg: 8, scope: !5385, file: !3, line: 991, type: !2876)
!5403 = !DILocation(line: 991, column: 51, scope: !5385)
!5404 = !DILocalVariable(name: "rr", scope: !5385, file: !3, line: 993, type: !1561)
!5405 = !DILocation(line: 993, column: 8, scope: !5385)
!5406 = !DILocalVariable(name: "ri", scope: !5385, file: !3, line: 993, type: !1561)
!5407 = !DILocation(line: 993, column: 12, scope: !5385)
!5408 = !DILocation(line: 995, column: 7, scope: !5409)
!5409 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 995, column: 7)
!5410 = !DILocation(line: 995, column: 12, scope: !5409)
!5411 = !DILocation(line: 995, column: 10, scope: !5409)
!5412 = !DILocation(line: 995, column: 7, scope: !5385)
!5413 = !DILocalVariable(name: "tl", scope: !5414, file: !3, line: 997, type: !2876)
!5414 = distinct !DILexicalBlock(scope: !5409, file: !3, line: 996, column: 5)
!5415 = !DILocation(line: 997, column: 25, scope: !5414)
!5416 = !DILocation(line: 998, column: 12, scope: !5414)
!5417 = !DILocation(line: 998, column: 10, scope: !5414)
!5418 = !DILocation(line: 998, column: 21, scope: !5414)
!5419 = !DILocation(line: 998, column: 19, scope: !5414)
!5420 = !DILocation(line: 998, column: 30, scope: !5414)
!5421 = !DILocation(line: 998, column: 28, scope: !5414)
!5422 = !DILocation(line: 999, column: 12, scope: !5414)
!5423 = !DILocation(line: 999, column: 10, scope: !5414)
!5424 = !DILocation(line: 999, column: 21, scope: !5414)
!5425 = !DILocation(line: 999, column: 19, scope: !5414)
!5426 = !DILocation(line: 999, column: 30, scope: !5414)
!5427 = !DILocation(line: 999, column: 28, scope: !5414)
!5428 = !DILocation(line: 1000, column: 12, scope: !5414)
!5429 = !DILocation(line: 1000, column: 10, scope: !5414)
!5430 = !DILocation(line: 1000, column: 21, scope: !5414)
!5431 = !DILocation(line: 1000, column: 19, scope: !5414)
!5432 = !DILocation(line: 1000, column: 30, scope: !5414)
!5433 = !DILocation(line: 1000, column: 28, scope: !5414)
!5434 = !DILocation(line: 1001, column: 5, scope: !5414)
!5435 = !DILocation(line: 1003, column: 11, scope: !5385)
!5436 = !DILocation(line: 1003, column: 3, scope: !5385)
!5437 = !DILocation(line: 1006, column: 29, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 1004, column: 5)
!5439 = !DILocation(line: 1006, column: 45, scope: !5438)
!5440 = !DILocation(line: 1006, column: 57, scope: !5438)
!5441 = !DILocation(line: 1006, column: 61, scope: !5438)
!5442 = !DILocation(line: 1006, column: 12, scope: !5438)
!5443 = !DILocation(line: 1006, column: 10, scope: !5438)
!5444 = !DILocation(line: 1007, column: 12, scope: !5438)
!5445 = !DILocation(line: 1007, column: 10, scope: !5438)
!5446 = !DILocation(line: 1008, column: 7, scope: !5438)
!5447 = !DILocation(line: 1011, column: 12, scope: !5438)
!5448 = !DILocation(line: 1011, column: 10, scope: !5438)
!5449 = !DILocation(line: 1012, column: 11, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5438, file: !3, line: 1012, column: 11)
!5451 = !DILocation(line: 1012, column: 26, scope: !5450)
!5452 = !DILocation(line: 1013, column: 4, scope: !5450)
!5453 = !DILocation(line: 1013, column: 7, scope: !5450)
!5454 = !DILocation(line: 1012, column: 11, scope: !5438)
!5455 = !DILocation(line: 1014, column: 7, scope: !5450)
!5456 = !DILocation(line: 1014, column: 5, scope: !5450)
!5457 = !DILocation(line: 1014, column: 2, scope: !5450)
!5458 = !DILocation(line: 1016, column: 24, scope: !5450)
!5459 = !DILocation(line: 1016, column: 40, scope: !5450)
!5460 = !DILocation(line: 1016, column: 52, scope: !5450)
!5461 = !DILocation(line: 1016, column: 56, scope: !5450)
!5462 = !DILocation(line: 1016, column: 7, scope: !5450)
!5463 = !DILocation(line: 1016, column: 5, scope: !5450)
!5464 = !DILocation(line: 1017, column: 7, scope: !5438)
!5465 = !DILocation(line: 1020, column: 29, scope: !5438)
!5466 = !DILocation(line: 1020, column: 45, scope: !5438)
!5467 = !DILocation(line: 1020, column: 57, scope: !5438)
!5468 = !DILocation(line: 1020, column: 61, scope: !5438)
!5469 = !DILocation(line: 1020, column: 12, scope: !5438)
!5470 = !DILocation(line: 1020, column: 10, scope: !5438)
!5471 = !DILocation(line: 1021, column: 29, scope: !5438)
!5472 = !DILocation(line: 1021, column: 47, scope: !5438)
!5473 = !DILocation(line: 1021, column: 59, scope: !5438)
!5474 = !DILocation(line: 1021, column: 12, scope: !5438)
!5475 = !DILocation(line: 1021, column: 10, scope: !5438)
!5476 = !DILocation(line: 1022, column: 12, scope: !5438)
!5477 = !DILocation(line: 1022, column: 10, scope: !5438)
!5478 = !DILocation(line: 1023, column: 7, scope: !5438)
!5479 = !DILocation(line: 1026, column: 29, scope: !5438)
!5480 = !DILocation(line: 1026, column: 45, scope: !5438)
!5481 = !DILocation(line: 1026, column: 57, scope: !5438)
!5482 = !DILocation(line: 1026, column: 61, scope: !5438)
!5483 = !DILocation(line: 1026, column: 12, scope: !5438)
!5484 = !DILocation(line: 1026, column: 10, scope: !5438)
!5485 = !DILocation(line: 1027, column: 29, scope: !5438)
!5486 = !DILocation(line: 1027, column: 45, scope: !5438)
!5487 = !DILocation(line: 1027, column: 57, scope: !5438)
!5488 = !DILocation(line: 1027, column: 61, scope: !5438)
!5489 = !DILocation(line: 1027, column: 12, scope: !5438)
!5490 = !DILocation(line: 1027, column: 10, scope: !5438)
!5491 = !DILocation(line: 1028, column: 7, scope: !5438)
!5492 = !DILocation(line: 1031, column: 29, scope: !5438)
!5493 = !DILocation(line: 1031, column: 45, scope: !5438)
!5494 = !DILocation(line: 1031, column: 57, scope: !5438)
!5495 = !DILocation(line: 1031, column: 61, scope: !5438)
!5496 = !DILocation(line: 1031, column: 12, scope: !5438)
!5497 = !DILocation(line: 1031, column: 10, scope: !5438)
!5498 = !DILocation(line: 1032, column: 29, scope: !5438)
!5499 = !DILocation(line: 1032, column: 47, scope: !5438)
!5500 = !DILocation(line: 1032, column: 59, scope: !5438)
!5501 = !DILocation(line: 1032, column: 12, scope: !5438)
!5502 = !DILocation(line: 1032, column: 10, scope: !5438)
!5503 = !DILocation(line: 1033, column: 29, scope: !5438)
!5504 = !DILocation(line: 1033, column: 45, scope: !5438)
!5505 = !DILocation(line: 1033, column: 57, scope: !5438)
!5506 = !DILocation(line: 1033, column: 61, scope: !5438)
!5507 = !DILocation(line: 1033, column: 12, scope: !5438)
!5508 = !DILocation(line: 1033, column: 10, scope: !5438)
!5509 = !DILocation(line: 1034, column: 7, scope: !5438)
!5510 = !DILocation(line: 1037, column: 11, scope: !5511)
!5511 = distinct !DILexicalBlock(scope: !5438, file: !3, line: 1037, column: 11)
!5512 = !DILocation(line: 1037, column: 31, scope: !5511)
!5513 = !DILocation(line: 1037, column: 36, scope: !5511)
!5514 = !DILocation(line: 1037, column: 39, scope: !5511)
!5515 = !DILocation(line: 1037, column: 11, scope: !5438)
!5516 = !DILocation(line: 1039, column: 28, scope: !5517)
!5517 = distinct !DILexicalBlock(scope: !5511, file: !3, line: 1038, column: 2)
!5518 = !DILocation(line: 1039, column: 33, scope: !5517)
!5519 = !DILocation(line: 1039, column: 37, scope: !5517)
!5520 = !DILocation(line: 1039, column: 41, scope: !5517)
!5521 = !DILocation(line: 1039, column: 45, scope: !5517)
!5522 = !DILocation(line: 1039, column: 4, scope: !5517)
!5523 = !DILocation(line: 1040, column: 4, scope: !5517)
!5524 = !DILocalVariable(name: "t1", scope: !5525, file: !3, line: 1044, type: !1561)
!5525 = distinct !DILexicalBlock(scope: !5511, file: !3, line: 1043, column: 2)
!5526 = !DILocation(line: 1044, column: 9, scope: !5525)
!5527 = !DILocalVariable(name: "t2", scope: !5525, file: !3, line: 1044, type: !1561)
!5528 = !DILocation(line: 1044, column: 13, scope: !5525)
!5529 = !DILocalVariable(name: "t3", scope: !5525, file: !3, line: 1044, type: !1561)
!5530 = !DILocation(line: 1044, column: 17, scope: !5525)
!5531 = !DILocalVariable(name: "t4", scope: !5525, file: !3, line: 1044, type: !1561)
!5532 = !DILocation(line: 1044, column: 21, scope: !5525)
!5533 = !DILocation(line: 1046, column: 26, scope: !5525)
!5534 = !DILocation(line: 1046, column: 42, scope: !5525)
!5535 = !DILocation(line: 1046, column: 54, scope: !5525)
!5536 = !DILocation(line: 1046, column: 58, scope: !5525)
!5537 = !DILocation(line: 1046, column: 9, scope: !5525)
!5538 = !DILocation(line: 1046, column: 7, scope: !5525)
!5539 = !DILocation(line: 1047, column: 26, scope: !5525)
!5540 = !DILocation(line: 1047, column: 42, scope: !5525)
!5541 = !DILocation(line: 1047, column: 54, scope: !5525)
!5542 = !DILocation(line: 1047, column: 58, scope: !5525)
!5543 = !DILocation(line: 1047, column: 9, scope: !5525)
!5544 = !DILocation(line: 1047, column: 7, scope: !5525)
!5545 = !DILocation(line: 1048, column: 26, scope: !5525)
!5546 = !DILocation(line: 1048, column: 42, scope: !5525)
!5547 = !DILocation(line: 1048, column: 54, scope: !5525)
!5548 = !DILocation(line: 1048, column: 58, scope: !5525)
!5549 = !DILocation(line: 1048, column: 9, scope: !5525)
!5550 = !DILocation(line: 1048, column: 7, scope: !5525)
!5551 = !DILocation(line: 1052, column: 8, scope: !5552)
!5552 = distinct !DILexicalBlock(scope: !5525, file: !3, line: 1052, column: 8)
!5553 = !DILocation(line: 1052, column: 14, scope: !5552)
!5554 = !DILocation(line: 1052, column: 11, scope: !5552)
!5555 = !DILocation(line: 1052, column: 17, scope: !5552)
!5556 = !DILocation(line: 1052, column: 20, scope: !5552)
!5557 = !DILocation(line: 1052, column: 26, scope: !5552)
!5558 = !DILocation(line: 1052, column: 23, scope: !5552)
!5559 = !DILocation(line: 1052, column: 8, scope: !5525)
!5560 = !DILocation(line: 1053, column: 11, scope: !5552)
!5561 = !DILocation(line: 1053, column: 9, scope: !5552)
!5562 = !DILocation(line: 1053, column: 6, scope: !5552)
!5563 = !DILocation(line: 1055, column: 28, scope: !5552)
!5564 = !DILocation(line: 1055, column: 44, scope: !5552)
!5565 = !DILocation(line: 1055, column: 56, scope: !5552)
!5566 = !DILocation(line: 1055, column: 60, scope: !5552)
!5567 = !DILocation(line: 1055, column: 11, scope: !5552)
!5568 = !DILocation(line: 1055, column: 9, scope: !5552)
!5569 = !DILocation(line: 1057, column: 26, scope: !5525)
!5570 = !DILocation(line: 1057, column: 43, scope: !5525)
!5571 = !DILocation(line: 1057, column: 55, scope: !5525)
!5572 = !DILocation(line: 1057, column: 59, scope: !5525)
!5573 = !DILocation(line: 1057, column: 9, scope: !5525)
!5574 = !DILocation(line: 1057, column: 7, scope: !5525)
!5575 = !DILocation(line: 1058, column: 26, scope: !5525)
!5576 = !DILocation(line: 1058, column: 42, scope: !5525)
!5577 = !DILocation(line: 1058, column: 54, scope: !5525)
!5578 = !DILocation(line: 1058, column: 58, scope: !5525)
!5579 = !DILocation(line: 1058, column: 9, scope: !5525)
!5580 = !DILocation(line: 1058, column: 7, scope: !5525)
!5581 = !DILocation(line: 1060, column: 7, scope: !5438)
!5582 = !DILocation(line: 1063, column: 7, scope: !5438)
!5583 = !DILocation(line: 1064, column: 5, scope: !5438)
!5584 = !DILocation(line: 1066, column: 30, scope: !5385)
!5585 = !DILocation(line: 1066, column: 35, scope: !5385)
!5586 = !DILocation(line: 1066, column: 39, scope: !5385)
!5587 = !DILocation(line: 1066, column: 3, scope: !5385)
!5588 = !DILocation(line: 1067, column: 1, scope: !5385)
!5589 = distinct !DISubprogram(name: "expand_complex_division", scope: !3, file: !3, line: 1259, type: !5232, scopeLine: 1263, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5590 = !DILocalVariable(name: "gsi", arg: 1, scope: !5589, file: !3, line: 1259, type: !3628)
!5591 = !DILocation(line: 1259, column: 48, scope: !5589)
!5592 = !DILocalVariable(name: "inner_type", arg: 2, scope: !5589, file: !3, line: 1259, type: !1561)
!5593 = !DILocation(line: 1259, column: 58, scope: !5589)
!5594 = !DILocalVariable(name: "ar", arg: 3, scope: !5589, file: !3, line: 1260, type: !1561)
!5595 = !DILocation(line: 1260, column: 10, scope: !5589)
!5596 = !DILocalVariable(name: "ai", arg: 4, scope: !5589, file: !3, line: 1260, type: !1561)
!5597 = !DILocation(line: 1260, column: 19, scope: !5589)
!5598 = !DILocalVariable(name: "br", arg: 5, scope: !5589, file: !3, line: 1260, type: !1561)
!5599 = !DILocation(line: 1260, column: 28, scope: !5589)
!5600 = !DILocalVariable(name: "bi", arg: 6, scope: !5589, file: !3, line: 1260, type: !1561)
!5601 = !DILocation(line: 1260, column: 37, scope: !5589)
!5602 = !DILocalVariable(name: "code", arg: 7, scope: !5589, file: !3, line: 1261, type: !366)
!5603 = !DILocation(line: 1261, column: 20, scope: !5589)
!5604 = !DILocalVariable(name: "al", arg: 8, scope: !5589, file: !3, line: 1262, type: !2876)
!5605 = !DILocation(line: 1262, column: 23, scope: !5589)
!5606 = !DILocalVariable(name: "bl", arg: 9, scope: !5589, file: !3, line: 1262, type: !2876)
!5607 = !DILocation(line: 1262, column: 45, scope: !5589)
!5608 = !DILocalVariable(name: "rr", scope: !5589, file: !3, line: 1264, type: !1561)
!5609 = !DILocation(line: 1264, column: 8, scope: !5589)
!5610 = !DILocalVariable(name: "ri", scope: !5589, file: !3, line: 1264, type: !1561)
!5611 = !DILocation(line: 1264, column: 12, scope: !5589)
!5612 = !DILocation(line: 1266, column: 11, scope: !5589)
!5613 = !DILocation(line: 1266, column: 3, scope: !5589)
!5614 = !DILocation(line: 1269, column: 29, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5589, file: !3, line: 1267, column: 5)
!5616 = !DILocation(line: 1269, column: 34, scope: !5615)
!5617 = !DILocation(line: 1269, column: 40, scope: !5615)
!5618 = !DILocation(line: 1269, column: 52, scope: !5615)
!5619 = !DILocation(line: 1269, column: 56, scope: !5615)
!5620 = !DILocation(line: 1269, column: 12, scope: !5615)
!5621 = !DILocation(line: 1269, column: 10, scope: !5615)
!5622 = !DILocation(line: 1270, column: 12, scope: !5615)
!5623 = !DILocation(line: 1270, column: 10, scope: !5615)
!5624 = !DILocation(line: 1271, column: 7, scope: !5615)
!5625 = !DILocation(line: 1274, column: 12, scope: !5615)
!5626 = !DILocation(line: 1274, column: 10, scope: !5615)
!5627 = !DILocation(line: 1275, column: 29, scope: !5615)
!5628 = !DILocation(line: 1275, column: 34, scope: !5615)
!5629 = !DILocation(line: 1275, column: 40, scope: !5615)
!5630 = !DILocation(line: 1275, column: 52, scope: !5615)
!5631 = !DILocation(line: 1275, column: 56, scope: !5615)
!5632 = !DILocation(line: 1275, column: 12, scope: !5615)
!5633 = !DILocation(line: 1275, column: 10, scope: !5615)
!5634 = !DILocation(line: 1276, column: 29, scope: !5615)
!5635 = !DILocation(line: 1276, column: 47, scope: !5615)
!5636 = !DILocation(line: 1276, column: 59, scope: !5615)
!5637 = !DILocation(line: 1276, column: 12, scope: !5615)
!5638 = !DILocation(line: 1276, column: 10, scope: !5615)
!5639 = !DILocation(line: 1277, column: 7, scope: !5615)
!5640 = !DILocation(line: 1280, column: 12, scope: !5615)
!5641 = !DILocation(line: 1280, column: 10, scope: !5615)
!5642 = !DILocation(line: 1281, column: 29, scope: !5615)
!5643 = !DILocation(line: 1281, column: 34, scope: !5615)
!5644 = !DILocation(line: 1281, column: 40, scope: !5615)
!5645 = !DILocation(line: 1281, column: 52, scope: !5615)
!5646 = !DILocation(line: 1281, column: 56, scope: !5615)
!5647 = !DILocation(line: 1281, column: 12, scope: !5615)
!5648 = !DILocation(line: 1281, column: 10, scope: !5615)
!5649 = !DILocation(line: 1282, column: 7, scope: !5615)
!5650 = !DILocation(line: 1285, column: 29, scope: !5615)
!5651 = !DILocation(line: 1285, column: 34, scope: !5615)
!5652 = !DILocation(line: 1285, column: 40, scope: !5615)
!5653 = !DILocation(line: 1285, column: 52, scope: !5615)
!5654 = !DILocation(line: 1285, column: 56, scope: !5615)
!5655 = !DILocation(line: 1285, column: 12, scope: !5615)
!5656 = !DILocation(line: 1285, column: 10, scope: !5615)
!5657 = !DILocation(line: 1286, column: 12, scope: !5615)
!5658 = !DILocation(line: 1286, column: 10, scope: !5615)
!5659 = !DILocation(line: 1287, column: 7, scope: !5615)
!5660 = !DILocation(line: 1290, column: 29, scope: !5615)
!5661 = !DILocation(line: 1290, column: 34, scope: !5615)
!5662 = !DILocation(line: 1290, column: 40, scope: !5615)
!5663 = !DILocation(line: 1290, column: 52, scope: !5615)
!5664 = !DILocation(line: 1290, column: 56, scope: !5615)
!5665 = !DILocation(line: 1290, column: 12, scope: !5615)
!5666 = !DILocation(line: 1290, column: 10, scope: !5615)
!5667 = !DILocation(line: 1291, column: 29, scope: !5615)
!5668 = !DILocation(line: 1291, column: 34, scope: !5615)
!5669 = !DILocation(line: 1291, column: 40, scope: !5615)
!5670 = !DILocation(line: 1291, column: 52, scope: !5615)
!5671 = !DILocation(line: 1291, column: 56, scope: !5615)
!5672 = !DILocation(line: 1291, column: 12, scope: !5615)
!5673 = !DILocation(line: 1291, column: 10, scope: !5615)
!5674 = !DILocation(line: 1292, column: 7, scope: !5615)
!5675 = !DILocation(line: 1295, column: 29, scope: !5615)
!5676 = !DILocation(line: 1295, column: 34, scope: !5615)
!5677 = !DILocation(line: 1295, column: 40, scope: !5615)
!5678 = !DILocation(line: 1295, column: 52, scope: !5615)
!5679 = !DILocation(line: 1295, column: 56, scope: !5615)
!5680 = !DILocation(line: 1295, column: 12, scope: !5615)
!5681 = !DILocation(line: 1295, column: 10, scope: !5615)
!5682 = !DILocation(line: 1296, column: 29, scope: !5615)
!5683 = !DILocation(line: 1296, column: 34, scope: !5615)
!5684 = !DILocation(line: 1296, column: 40, scope: !5615)
!5685 = !DILocation(line: 1296, column: 52, scope: !5615)
!5686 = !DILocation(line: 1296, column: 56, scope: !5615)
!5687 = !DILocation(line: 1296, column: 12, scope: !5615)
!5688 = !DILocation(line: 1296, column: 10, scope: !5615)
!5689 = !DILocation(line: 1297, column: 29, scope: !5615)
!5690 = !DILocation(line: 1297, column: 47, scope: !5615)
!5691 = !DILocation(line: 1297, column: 59, scope: !5615)
!5692 = !DILocation(line: 1297, column: 12, scope: !5615)
!5693 = !DILocation(line: 1297, column: 10, scope: !5615)
!5694 = !DILocation(line: 1297, column: 7, scope: !5615)
!5695 = !DILocation(line: 1302, column: 15, scope: !5615)
!5696 = !DILocation(line: 1302, column: 7, scope: !5615)
!5697 = !DILocation(line: 1306, column: 33, scope: !5698)
!5698 = distinct !DILexicalBlock(scope: !5615, file: !3, line: 1303, column: 2)
!5699 = !DILocation(line: 1306, column: 38, scope: !5698)
!5700 = !DILocation(line: 1306, column: 50, scope: !5698)
!5701 = !DILocation(line: 1306, column: 54, scope: !5698)
!5702 = !DILocation(line: 1306, column: 58, scope: !5698)
!5703 = !DILocation(line: 1306, column: 62, scope: !5698)
!5704 = !DILocation(line: 1306, column: 66, scope: !5698)
!5705 = !DILocation(line: 1306, column: 4, scope: !5698)
!5706 = !DILocation(line: 1307, column: 4, scope: !5698)
!5707 = !DILocation(line: 1310, column: 8, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5698, file: !3, line: 1310, column: 8)
!5709 = !DILocation(line: 1310, column: 8, scope: !5698)
!5710 = !DILocation(line: 1312, column: 32, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5708, file: !3, line: 1311, column: 6)
!5712 = !DILocation(line: 1312, column: 37, scope: !5711)
!5713 = !DILocation(line: 1312, column: 41, scope: !5711)
!5714 = !DILocation(line: 1312, column: 45, scope: !5711)
!5715 = !DILocation(line: 1312, column: 49, scope: !5711)
!5716 = !DILocation(line: 1312, column: 53, scope: !5711)
!5717 = !DILocation(line: 1312, column: 8, scope: !5711)
!5718 = !DILocation(line: 1313, column: 8, scope: !5711)
!5719 = !DILocation(line: 1319, column: 29, scope: !5698)
!5720 = !DILocation(line: 1319, column: 34, scope: !5698)
!5721 = !DILocation(line: 1319, column: 46, scope: !5698)
!5722 = !DILocation(line: 1319, column: 50, scope: !5698)
!5723 = !DILocation(line: 1319, column: 54, scope: !5698)
!5724 = !DILocation(line: 1319, column: 58, scope: !5698)
!5725 = !DILocation(line: 1319, column: 62, scope: !5698)
!5726 = !DILocation(line: 1319, column: 4, scope: !5698)
!5727 = !DILocation(line: 1320, column: 4, scope: !5698)
!5728 = !DILocation(line: 1323, column: 4, scope: !5698)
!5729 = !DILocation(line: 1324, column: 2, scope: !5698)
!5730 = !DILocation(line: 1325, column: 7, scope: !5615)
!5731 = !DILocation(line: 1328, column: 7, scope: !5615)
!5732 = !DILocation(line: 1329, column: 5, scope: !5615)
!5733 = !DILocation(line: 1331, column: 30, scope: !5589)
!5734 = !DILocation(line: 1331, column: 35, scope: !5589)
!5735 = !DILocation(line: 1331, column: 39, scope: !5589)
!5736 = !DILocation(line: 1331, column: 3, scope: !5589)
!5737 = !DILocation(line: 1332, column: 1, scope: !5589)
!5738 = distinct !DISubprogram(name: "expand_complex_negation", scope: !3, file: !3, line: 1339, type: !5739, scopeLine: 1341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5739 = !DISubroutineType(types: !5740)
!5740 = !{null, !3628, !1561, !1561, !1561}
!5741 = !DILocalVariable(name: "gsi", arg: 1, scope: !5738, file: !3, line: 1339, type: !3628)
!5742 = !DILocation(line: 1339, column: 48, scope: !5738)
!5743 = !DILocalVariable(name: "inner_type", arg: 2, scope: !5738, file: !3, line: 1339, type: !1561)
!5744 = !DILocation(line: 1339, column: 58, scope: !5738)
!5745 = !DILocalVariable(name: "ar", arg: 3, scope: !5738, file: !3, line: 1340, type: !1561)
!5746 = !DILocation(line: 1340, column: 10, scope: !5738)
!5747 = !DILocalVariable(name: "ai", arg: 4, scope: !5738, file: !3, line: 1340, type: !1561)
!5748 = !DILocation(line: 1340, column: 19, scope: !5738)
!5749 = !DILocalVariable(name: "rr", scope: !5738, file: !3, line: 1342, type: !1561)
!5750 = !DILocation(line: 1342, column: 8, scope: !5738)
!5751 = !DILocalVariable(name: "ri", scope: !5738, file: !3, line: 1342, type: !1561)
!5752 = !DILocation(line: 1342, column: 12, scope: !5738)
!5753 = !DILocation(line: 1344, column: 25, scope: !5738)
!5754 = !DILocation(line: 1344, column: 43, scope: !5738)
!5755 = !DILocation(line: 1344, column: 55, scope: !5738)
!5756 = !DILocation(line: 1344, column: 8, scope: !5738)
!5757 = !DILocation(line: 1344, column: 6, scope: !5738)
!5758 = !DILocation(line: 1345, column: 25, scope: !5738)
!5759 = !DILocation(line: 1345, column: 43, scope: !5738)
!5760 = !DILocation(line: 1345, column: 55, scope: !5738)
!5761 = !DILocation(line: 1345, column: 8, scope: !5738)
!5762 = !DILocation(line: 1345, column: 6, scope: !5738)
!5763 = !DILocation(line: 1347, column: 30, scope: !5738)
!5764 = !DILocation(line: 1347, column: 35, scope: !5738)
!5765 = !DILocation(line: 1347, column: 39, scope: !5738)
!5766 = !DILocation(line: 1347, column: 3, scope: !5738)
!5767 = !DILocation(line: 1348, column: 1, scope: !5738)
!5768 = distinct !DISubprogram(name: "expand_complex_conjugate", scope: !3, file: !3, line: 1355, type: !5739, scopeLine: 1357, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5769 = !DILocalVariable(name: "gsi", arg: 1, scope: !5768, file: !3, line: 1355, type: !3628)
!5770 = !DILocation(line: 1355, column: 49, scope: !5768)
!5771 = !DILocalVariable(name: "inner_type", arg: 2, scope: !5768, file: !3, line: 1355, type: !1561)
!5772 = !DILocation(line: 1355, column: 59, scope: !5768)
!5773 = !DILocalVariable(name: "ar", arg: 3, scope: !5768, file: !3, line: 1356, type: !1561)
!5774 = !DILocation(line: 1356, column: 11, scope: !5768)
!5775 = !DILocalVariable(name: "ai", arg: 4, scope: !5768, file: !3, line: 1356, type: !1561)
!5776 = !DILocation(line: 1356, column: 20, scope: !5768)
!5777 = !DILocalVariable(name: "ri", scope: !5768, file: !3, line: 1358, type: !1561)
!5778 = !DILocation(line: 1358, column: 8, scope: !5768)
!5779 = !DILocation(line: 1360, column: 25, scope: !5768)
!5780 = !DILocation(line: 1360, column: 43, scope: !5768)
!5781 = !DILocation(line: 1360, column: 55, scope: !5768)
!5782 = !DILocation(line: 1360, column: 8, scope: !5768)
!5783 = !DILocation(line: 1360, column: 6, scope: !5768)
!5784 = !DILocation(line: 1362, column: 30, scope: !5768)
!5785 = !DILocation(line: 1362, column: 35, scope: !5768)
!5786 = !DILocation(line: 1362, column: 39, scope: !5768)
!5787 = !DILocation(line: 1362, column: 3, scope: !5768)
!5788 = !DILocation(line: 1363, column: 1, scope: !5768)
!5789 = distinct !DISubprogram(name: "expand_complex_comparison", scope: !3, file: !3, line: 1368, type: !5790, scopeLine: 1370, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5790 = !DISubroutineType(types: !5791)
!5791 = !{null, !3628, !1561, !1561, !1561, !1561, !366}
!5792 = !DILocalVariable(name: "gsi", arg: 1, scope: !5789, file: !3, line: 1368, type: !3628)
!5793 = !DILocation(line: 1368, column: 50, scope: !5789)
!5794 = !DILocalVariable(name: "ar", arg: 2, scope: !5789, file: !3, line: 1368, type: !1561)
!5795 = !DILocation(line: 1368, column: 60, scope: !5789)
!5796 = !DILocalVariable(name: "ai", arg: 3, scope: !5789, file: !3, line: 1368, type: !1561)
!5797 = !DILocation(line: 1368, column: 69, scope: !5789)
!5798 = !DILocalVariable(name: "br", arg: 4, scope: !5789, file: !3, line: 1369, type: !1561)
!5799 = !DILocation(line: 1369, column: 12, scope: !5789)
!5800 = !DILocalVariable(name: "bi", arg: 5, scope: !5789, file: !3, line: 1369, type: !1561)
!5801 = !DILocation(line: 1369, column: 21, scope: !5789)
!5802 = !DILocalVariable(name: "code", arg: 6, scope: !5789, file: !3, line: 1369, type: !366)
!5803 = !DILocation(line: 1369, column: 40, scope: !5789)
!5804 = !DILocalVariable(name: "cr", scope: !5789, file: !3, line: 1371, type: !1561)
!5805 = !DILocation(line: 1371, column: 8, scope: !5789)
!5806 = !DILocalVariable(name: "ci", scope: !5789, file: !3, line: 1371, type: !1561)
!5807 = !DILocation(line: 1371, column: 12, scope: !5789)
!5808 = !DILocalVariable(name: "cc", scope: !5789, file: !3, line: 1371, type: !1561)
!5809 = !DILocation(line: 1371, column: 16, scope: !5789)
!5810 = !DILocalVariable(name: "type", scope: !5789, file: !3, line: 1371, type: !1561)
!5811 = !DILocation(line: 1371, column: 20, scope: !5789)
!5812 = !DILocalVariable(name: "stmt", scope: !5789, file: !3, line: 1372, type: !1892)
!5813 = !DILocation(line: 1372, column: 10, scope: !5789)
!5814 = !DILocation(line: 1374, column: 25, scope: !5789)
!5815 = !DILocation(line: 1374, column: 30, scope: !5789)
!5816 = !DILocation(line: 1374, column: 36, scope: !5789)
!5817 = !DILocation(line: 1374, column: 55, scope: !5789)
!5818 = !DILocation(line: 1374, column: 59, scope: !5789)
!5819 = !DILocation(line: 1374, column: 8, scope: !5789)
!5820 = !DILocation(line: 1374, column: 6, scope: !5789)
!5821 = !DILocation(line: 1375, column: 25, scope: !5789)
!5822 = !DILocation(line: 1375, column: 30, scope: !5789)
!5823 = !DILocation(line: 1375, column: 36, scope: !5789)
!5824 = !DILocation(line: 1375, column: 55, scope: !5789)
!5825 = !DILocation(line: 1375, column: 59, scope: !5789)
!5826 = !DILocation(line: 1375, column: 8, scope: !5789)
!5827 = !DILocation(line: 1375, column: 6, scope: !5789)
!5828 = !DILocation(line: 1376, column: 25, scope: !5789)
!5829 = !DILocation(line: 1377, column: 5, scope: !5789)
!5830 = !DILocation(line: 1377, column: 10, scope: !5789)
!5831 = !DILocation(line: 1378, column: 4, scope: !5789)
!5832 = !DILocation(line: 1378, column: 23, scope: !5789)
!5833 = !DILocation(line: 1378, column: 27, scope: !5789)
!5834 = !DILocation(line: 1376, column: 8, scope: !5789)
!5835 = !DILocation(line: 1376, column: 6, scope: !5789)
!5836 = !DILocation(line: 1380, column: 21, scope: !5789)
!5837 = !DILocation(line: 1380, column: 10, scope: !5789)
!5838 = !DILocation(line: 1380, column: 8, scope: !5789)
!5839 = !DILocation(line: 1382, column: 24, scope: !5789)
!5840 = !DILocation(line: 1382, column: 11, scope: !5789)
!5841 = !DILocation(line: 1382, column: 3, scope: !5789)
!5842 = !DILocation(line: 1385, column: 14, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 1383, column: 5)
!5844 = !DILocation(line: 1385, column: 12, scope: !5843)
!5845 = !DILocation(line: 1386, column: 33, scope: !5843)
!5846 = !DILocation(line: 1386, column: 39, scope: !5843)
!5847 = !DILocation(line: 1386, column: 7, scope: !5843)
!5848 = !DILocation(line: 1387, column: 7, scope: !5843)
!5849 = !DILocation(line: 1390, column: 14, scope: !5843)
!5850 = !DILocation(line: 1390, column: 12, scope: !5843)
!5851 = !DILocation(line: 1391, column: 40, scope: !5843)
!5852 = !DILocation(line: 1391, column: 45, scope: !5843)
!5853 = !DILocation(line: 1391, column: 7, scope: !5843)
!5854 = !DILocation(line: 1392, column: 25, scope: !5843)
!5855 = !DILocation(line: 1392, column: 14, scope: !5843)
!5856 = !DILocation(line: 1392, column: 12, scope: !5843)
!5857 = !DILocation(line: 1393, column: 7, scope: !5843)
!5858 = !DILocation(line: 1396, column: 29, scope: !5843)
!5859 = !DILocation(line: 1396, column: 7, scope: !5843)
!5860 = !DILocation(line: 1397, column: 28, scope: !5843)
!5861 = !DILocation(line: 1397, column: 34, scope: !5843)
!5862 = !DILocation(line: 1397, column: 7, scope: !5843)
!5863 = !DILocation(line: 1398, column: 28, scope: !5843)
!5864 = !DILocation(line: 1398, column: 34, scope: !5843)
!5865 = !DILocation(line: 1398, column: 7, scope: !5843)
!5866 = !DILocation(line: 1399, column: 7, scope: !5843)
!5867 = !DILocation(line: 1402, column: 7, scope: !5843)
!5868 = !DILocation(line: 1403, column: 5, scope: !5843)
!5869 = !DILocation(line: 1405, column: 16, scope: !5789)
!5870 = !DILocation(line: 1405, column: 3, scope: !5789)
!5871 = !DILocation(line: 1406, column: 1, scope: !5789)
!5872 = distinct !DISubprogram(name: "is_gimple_call", scope: !561, file: !561, line: 1870, type: !4104, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5873 = !DILocalVariable(name: "gs", arg: 1, scope: !5872, file: !561, line: 1870, type: !3959)
!5874 = !DILocation(line: 1870, column: 30, scope: !5872)
!5875 = !DILocation(line: 1872, column: 23, scope: !5872)
!5876 = !DILocation(line: 1872, column: 10, scope: !5872)
!5877 = !DILocation(line: 1872, column: 27, scope: !5872)
!5878 = !DILocation(line: 1872, column: 3, scope: !5872)
!5879 = distinct !DISubprogram(name: "ei_start_1", scope: !318, file: !318, line: 696, type: !5880, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5880 = !DISubroutineType(types: !5881)
!5881 = !{!5043, !5048}
!5882 = !DILocalVariable(name: "ev", arg: 1, scope: !5879, file: !318, line: 696, type: !5048)
!5883 = !DILocation(line: 696, column: 28, scope: !5879)
!5884 = !DILocalVariable(name: "i", scope: !5879, file: !318, line: 698, type: !5043)
!5885 = !DILocation(line: 698, column: 17, scope: !5879)
!5886 = !DILocation(line: 700, column: 5, scope: !5879)
!5887 = !DILocation(line: 700, column: 11, scope: !5879)
!5888 = !DILocation(line: 701, column: 17, scope: !5879)
!5889 = !DILocation(line: 701, column: 5, scope: !5879)
!5890 = !DILocation(line: 701, column: 15, scope: !5879)
!5891 = !DILocation(line: 703, column: 3, scope: !5879)
!5892 = distinct !DISubprogram(name: "gsi_bb", scope: !561, file: !561, line: 4588, type: !5893, scopeLine: 4589, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5893 = !DISubroutineType(types: !5894)
!5894 = !{!2292, !2934}
!5895 = !DILocalVariable(name: "i", arg: 1, scope: !5892, file: !561, line: 4588, type: !2934)
!5896 = !DILocation(line: 4588, column: 30, scope: !5892)
!5897 = !DILocation(line: 4590, column: 12, scope: !5892)
!5898 = !DILocation(line: 4590, column: 3, scope: !5892)
!5899 = distinct !DISubprogram(name: "ei_cond", scope: !318, file: !318, line: 771, type: !5900, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5900 = !DISubroutineType(types: !5901)
!5901 = !{!1681, !5043, !3223}
!5902 = !DILocalVariable(name: "ei", arg: 1, scope: !5899, file: !318, line: 771, type: !5043)
!5903 = !DILocation(line: 771, column: 24, scope: !5899)
!5904 = !DILocalVariable(name: "p", arg: 2, scope: !5899, file: !318, line: 771, type: !3223)
!5905 = !DILocation(line: 771, column: 34, scope: !5899)
!5906 = !DILocation(line: 773, column: 8, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5899, file: !318, line: 773, column: 7)
!5908 = !DILocation(line: 773, column: 7, scope: !5899)
!5909 = !DILocation(line: 775, column: 12, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5907, file: !318, line: 774, column: 5)
!5911 = !DILocation(line: 775, column: 8, scope: !5910)
!5912 = !DILocation(line: 775, column: 10, scope: !5910)
!5913 = !DILocation(line: 776, column: 7, scope: !5910)
!5914 = !DILocation(line: 780, column: 8, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5907, file: !318, line: 779, column: 5)
!5916 = !DILocation(line: 780, column: 10, scope: !5915)
!5917 = !DILocation(line: 781, column: 7, scope: !5915)
!5918 = !DILocation(line: 783, column: 1, scope: !5899)
!5919 = distinct !DISubprogram(name: "ei_next", scope: !318, file: !318, line: 736, type: !5920, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5920 = !DISubroutineType(types: !5921)
!5921 = !{null, !5922}
!5922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5043, size: 64)
!5923 = !DILocalVariable(name: "i", arg: 1, scope: !5919, file: !318, line: 736, type: !5922)
!5924 = !DILocation(line: 736, column: 25, scope: !5919)
!5925 = !DILocation(line: 738, column: 3, scope: !5919)
!5926 = !DILocation(line: 739, column: 3, scope: !5919)
!5927 = !DILocation(line: 739, column: 6, scope: !5919)
!5928 = !DILocation(line: 739, column: 11, scope: !5919)
!5929 = !DILocation(line: 740, column: 1, scope: !5919)
!5930 = distinct !DISubprogram(name: "update_complex_components", scope: !3, file: !3, line: 633, type: !5931, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5931 = !DISubroutineType(types: !5932)
!5932 = !{null, !3628, !1892, !1561, !1561}
!5933 = !DILocalVariable(name: "gsi", arg: 1, scope: !5930, file: !3, line: 633, type: !3628)
!5934 = !DILocation(line: 633, column: 50, scope: !5930)
!5935 = !DILocalVariable(name: "stmt", arg: 2, scope: !5930, file: !3, line: 633, type: !1892)
!5936 = !DILocation(line: 633, column: 62, scope: !5930)
!5937 = !DILocalVariable(name: "r", arg: 3, scope: !5930, file: !3, line: 633, type: !1561)
!5938 = !DILocation(line: 633, column: 73, scope: !5930)
!5939 = !DILocalVariable(name: "i", arg: 4, scope: !5930, file: !3, line: 634, type: !1561)
!5940 = !DILocation(line: 634, column: 12, scope: !5930)
!5941 = !DILocalVariable(name: "lhs", scope: !5930, file: !3, line: 636, type: !1561)
!5942 = !DILocation(line: 636, column: 8, scope: !5930)
!5943 = !DILocalVariable(name: "list", scope: !5930, file: !3, line: 637, type: !1882)
!5944 = !DILocation(line: 637, column: 14, scope: !5930)
!5945 = !DILocation(line: 639, column: 25, scope: !5930)
!5946 = !DILocation(line: 639, column: 9, scope: !5930)
!5947 = !DILocation(line: 639, column: 7, scope: !5930)
!5948 = !DILocation(line: 641, column: 34, scope: !5930)
!5949 = !DILocation(line: 641, column: 46, scope: !5930)
!5950 = !DILocation(line: 641, column: 10, scope: !5930)
!5951 = !DILocation(line: 641, column: 8, scope: !5930)
!5952 = !DILocation(line: 642, column: 7, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5930, file: !3, line: 642, column: 7)
!5954 = !DILocation(line: 642, column: 7, scope: !5930)
!5955 = !DILocation(line: 643, column: 27, scope: !5953)
!5956 = !DILocation(line: 643, column: 32, scope: !5953)
!5957 = !DILocation(line: 643, column: 5, scope: !5953)
!5958 = !DILocation(line: 645, column: 34, scope: !5930)
!5959 = !DILocation(line: 645, column: 45, scope: !5930)
!5960 = !DILocation(line: 645, column: 10, scope: !5930)
!5961 = !DILocation(line: 645, column: 8, scope: !5930)
!5962 = !DILocation(line: 646, column: 7, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !5930, file: !3, line: 646, column: 7)
!5964 = !DILocation(line: 646, column: 7, scope: !5930)
!5965 = !DILocation(line: 647, column: 27, scope: !5963)
!5966 = !DILocation(line: 647, column: 32, scope: !5963)
!5967 = !DILocation(line: 647, column: 5, scope: !5963)
!5968 = !DILocation(line: 648, column: 1, scope: !5930)
!5969 = distinct !DISubprogram(name: "update_complex_assignment", scope: !3, file: !3, line: 668, type: !5970, scopeLine: 669, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5970 = !DISubroutineType(types: !5971)
!5971 = !{null, !3628, !1561, !1561}
!5972 = !DILocalVariable(name: "gsi", arg: 1, scope: !5969, file: !3, line: 668, type: !3628)
!5973 = !DILocation(line: 668, column: 50, scope: !5969)
!5974 = !DILocalVariable(name: "r", arg: 2, scope: !5969, file: !3, line: 668, type: !1561)
!5975 = !DILocation(line: 668, column: 60, scope: !5969)
!5976 = !DILocalVariable(name: "i", arg: 3, scope: !5969, file: !3, line: 668, type: !1561)
!5977 = !DILocation(line: 668, column: 68, scope: !5969)
!5978 = !DILocalVariable(name: "orig_si", scope: !5969, file: !3, line: 670, type: !2934)
!5979 = !DILocation(line: 670, column: 24, scope: !5969)
!5980 = !DILocation(line: 670, column: 35, scope: !5969)
!5981 = !DILocation(line: 670, column: 34, scope: !5969)
!5982 = !DILocation(line: 672, column: 24, scope: !5983)
!5983 = distinct !DILexicalBlock(scope: !5969, file: !3, line: 672, column: 7)
!5984 = !DILocation(line: 672, column: 7, scope: !5983)
!5985 = !DILocation(line: 672, column: 7, scope: !5969)
!5986 = !DILocation(line: 673, column: 32, scope: !5983)
!5987 = !DILocation(line: 673, column: 48, scope: !5983)
!5988 = !DILocation(line: 673, column: 37, scope: !5983)
!5989 = !DILocation(line: 673, column: 54, scope: !5983)
!5990 = !DILocation(line: 673, column: 57, scope: !5983)
!5991 = !DILocation(line: 673, column: 5, scope: !5983)
!5992 = !DILocation(line: 675, column: 59, scope: !5969)
!5993 = !DILocation(line: 675, column: 62, scope: !5969)
!5994 = !DILocation(line: 675, column: 3, scope: !5969)
!5995 = !DILocation(line: 676, column: 16, scope: !5969)
!5996 = !DILocation(line: 676, column: 3, scope: !5969)
!5997 = !DILocation(line: 677, column: 1, scope: !5969)
!5998 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !561, file: !561, line: 1714, type: !5999, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!5999 = !DISubroutineType(types: !6000)
!6000 = !{null, !1892, !1561}
!6001 = !DILocalVariable(name: "gs", arg: 1, scope: !5998, file: !561, line: 1714, type: !1892)
!6002 = !DILocation(line: 1714, column: 31, scope: !5998)
!6003 = !DILocalVariable(name: "lhs", arg: 2, scope: !5998, file: !561, line: 1714, type: !1561)
!6004 = !DILocation(line: 1714, column: 40, scope: !5998)
!6005 = !DILocation(line: 1717, column: 18, scope: !5998)
!6006 = !DILocation(line: 1717, column: 25, scope: !5998)
!6007 = !DILocation(line: 1717, column: 3, scope: !5998)
!6008 = !DILocation(line: 1719, column: 7, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !5998, file: !561, line: 1719, column: 7)
!6010 = !DILocation(line: 1719, column: 11, scope: !6009)
!6011 = !DILocation(line: 1719, column: 14, scope: !6009)
!6012 = !DILocation(line: 1719, column: 30, scope: !6009)
!6013 = !DILocation(line: 1719, column: 7, scope: !5998)
!6014 = !DILocation(line: 1720, column: 31, scope: !6009)
!6015 = !DILocation(line: 1720, column: 5, scope: !6009)
!6016 = !DILocation(line: 1720, column: 29, scope: !6009)
!6017 = !DILocation(line: 1721, column: 1, scope: !5998)
!6018 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !561, file: !561, line: 1747, type: !5999, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6019 = !DILocalVariable(name: "gs", arg: 1, scope: !6018, file: !561, line: 1747, type: !1892)
!6020 = !DILocation(line: 1747, column: 32, scope: !6018)
!6021 = !DILocalVariable(name: "rhs", arg: 2, scope: !6018, file: !561, line: 1747, type: !1561)
!6022 = !DILocation(line: 1747, column: 41, scope: !6018)
!6023 = !DILocation(line: 1751, column: 18, scope: !6018)
!6024 = !DILocation(line: 1751, column: 25, scope: !6018)
!6025 = !DILocation(line: 1751, column: 3, scope: !6018)
!6026 = !DILocation(line: 1752, column: 1, scope: !6018)
!6027 = distinct !DISubprogram(name: "gimple_return_set_retval", scope: !561, file: !561, line: 4263, type: !5999, scopeLine: 4264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6028 = !DILocalVariable(name: "gs", arg: 1, scope: !6027, file: !561, line: 4263, type: !1892)
!6029 = !DILocation(line: 4263, column: 34, scope: !6027)
!6030 = !DILocalVariable(name: "retval", arg: 2, scope: !6027, file: !561, line: 4263, type: !1561)
!6031 = !DILocation(line: 4263, column: 43, scope: !6027)
!6032 = !DILocation(line: 4266, column: 18, scope: !6027)
!6033 = !DILocation(line: 4266, column: 25, scope: !6027)
!6034 = !DILocation(line: 4266, column: 3, scope: !6027)
!6035 = !DILocation(line: 4267, column: 1, scope: !6027)
!6036 = distinct !DISubprogram(name: "ei_end_p", scope: !318, file: !318, line: 721, type: !6037, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6037 = !DISubroutineType(types: !6038)
!6038 = !{!1681, !5043}
!6039 = !DILocalVariable(name: "i", arg: 1, scope: !6036, file: !318, line: 721, type: !5043)
!6040 = !DILocation(line: 721, column: 25, scope: !6036)
!6041 = !DILocation(line: 723, column: 13, scope: !6036)
!6042 = !DILocation(line: 723, column: 22, scope: !6036)
!6043 = !DILocation(line: 723, column: 19, scope: !6036)
!6044 = !DILocation(line: 723, column: 10, scope: !6036)
!6045 = !DILocation(line: 723, column: 3, scope: !6036)
!6046 = distinct !DISubprogram(name: "ei_edge", scope: !318, file: !318, line: 752, type: !6047, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6047 = !DISubroutineType(types: !6048)
!6048 = !{!1872, !5043}
!6049 = !DILocalVariable(name: "i", arg: 1, scope: !6046, file: !318, line: 752, type: !5043)
!6050 = !DILocation(line: 752, column: 24, scope: !6046)
!6051 = !DILocation(line: 754, column: 10, scope: !6046)
!6052 = !DILocation(line: 754, column: 3, scope: !6046)
!6053 = distinct !DISubprogram(name: "ei_container", scope: !318, file: !318, line: 685, type: !6054, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6054 = !DISubroutineType(types: !6055)
!6055 = !{!1860, !5043}
!6056 = !DILocalVariable(name: "i", arg: 1, scope: !6053, file: !318, line: 685, type: !5043)
!6057 = !DILocation(line: 685, column: 29, scope: !6053)
!6058 = !DILocation(line: 687, column: 3, scope: !6053)
!6059 = !DILocation(line: 688, column: 13, scope: !6053)
!6060 = !DILocation(line: 688, column: 10, scope: !6053)
!6061 = !DILocation(line: 688, column: 3, scope: !6053)
!6062 = distinct !DISubprogram(name: "gimple_set_op", scope: !561, file: !561, line: 1663, type: !6063, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6063 = !DISubroutineType(types: !6064)
!6064 = !{null, !1892, !7, !1561}
!6065 = !DILocalVariable(name: "gs", arg: 1, scope: !6062, file: !561, line: 1663, type: !1892)
!6066 = !DILocation(line: 1663, column: 23, scope: !6062)
!6067 = !DILocalVariable(name: "i", arg: 2, scope: !6062, file: !561, line: 1663, type: !7)
!6068 = !DILocation(line: 1663, column: 36, scope: !6062)
!6069 = !DILocalVariable(name: "op", arg: 3, scope: !6062, file: !561, line: 1663, type: !1561)
!6070 = !DILocation(line: 1663, column: 44, scope: !6062)
!6071 = !DILocation(line: 1665, column: 3, scope: !6062)
!6072 = !DILocation(line: 1671, column: 24, scope: !6062)
!6073 = !DILocation(line: 1671, column: 15, scope: !6062)
!6074 = !DILocation(line: 1671, column: 3, scope: !6062)
!6075 = !DILocation(line: 1671, column: 19, scope: !6062)
!6076 = !DILocation(line: 1671, column: 22, scope: !6062)
!6077 = !DILocation(line: 1672, column: 1, scope: !6062)
!6078 = distinct !DISubprogram(name: "expand_complex_libcall", scope: !3, file: !3, line: 941, type: !5790, scopeLine: 943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6079 = !DILocalVariable(name: "gsi", arg: 1, scope: !6078, file: !3, line: 941, type: !3628)
!6080 = !DILocation(line: 941, column: 47, scope: !6078)
!6081 = !DILocalVariable(name: "ar", arg: 2, scope: !6078, file: !3, line: 941, type: !1561)
!6082 = !DILocation(line: 941, column: 57, scope: !6078)
!6083 = !DILocalVariable(name: "ai", arg: 3, scope: !6078, file: !3, line: 941, type: !1561)
!6084 = !DILocation(line: 941, column: 66, scope: !6078)
!6085 = !DILocalVariable(name: "br", arg: 4, scope: !6078, file: !3, line: 942, type: !1561)
!6086 = !DILocation(line: 942, column: 9, scope: !6078)
!6087 = !DILocalVariable(name: "bi", arg: 5, scope: !6078, file: !3, line: 942, type: !1561)
!6088 = !DILocation(line: 942, column: 18, scope: !6078)
!6089 = !DILocalVariable(name: "code", arg: 6, scope: !6078, file: !3, line: 942, type: !366)
!6090 = !DILocation(line: 942, column: 37, scope: !6078)
!6091 = !DILocalVariable(name: "mode", scope: !6078, file: !3, line: 944, type: !189)
!6092 = !DILocation(line: 944, column: 21, scope: !6078)
!6093 = !DILocalVariable(name: "bcode", scope: !6078, file: !3, line: 945, type: !680)
!6094 = !DILocation(line: 945, column: 26, scope: !6078)
!6095 = !DILocalVariable(name: "fn", scope: !6078, file: !3, line: 946, type: !1561)
!6096 = !DILocation(line: 946, column: 8, scope: !6078)
!6097 = !DILocalVariable(name: "type", scope: !6078, file: !3, line: 946, type: !1561)
!6098 = !DILocation(line: 946, column: 12, scope: !6078)
!6099 = !DILocalVariable(name: "lhs", scope: !6078, file: !3, line: 946, type: !1561)
!6100 = !DILocation(line: 946, column: 18, scope: !6078)
!6101 = !DILocalVariable(name: "old_stmt", scope: !6078, file: !3, line: 947, type: !1892)
!6102 = !DILocation(line: 947, column: 10, scope: !6078)
!6103 = !DILocalVariable(name: "stmt", scope: !6078, file: !3, line: 947, type: !1892)
!6104 = !DILocation(line: 947, column: 20, scope: !6078)
!6105 = !DILocation(line: 949, column: 25, scope: !6078)
!6106 = !DILocation(line: 949, column: 14, scope: !6078)
!6107 = !DILocation(line: 949, column: 12, scope: !6078)
!6108 = !DILocation(line: 950, column: 28, scope: !6078)
!6109 = !DILocation(line: 950, column: 9, scope: !6078)
!6110 = !DILocation(line: 950, column: 7, scope: !6078)
!6111 = !DILocation(line: 951, column: 10, scope: !6078)
!6112 = !DILocation(line: 951, column: 8, scope: !6078)
!6113 = !DILocation(line: 953, column: 10, scope: !6078)
!6114 = !DILocation(line: 953, column: 8, scope: !6078)
!6115 = !DILocation(line: 954, column: 3, scope: !6078)
!6116 = !DILocation(line: 956, column: 7, scope: !6117)
!6117 = distinct !DILexicalBlock(scope: !6078, file: !3, line: 956, column: 7)
!6118 = !DILocation(line: 956, column: 12, scope: !6117)
!6119 = !DILocation(line: 956, column: 7, scope: !6078)
!6120 = !DILocation(line: 958, column: 35, scope: !6117)
!6121 = !DILocation(line: 958, column: 33, scope: !6117)
!6122 = !DILocation(line: 958, column: 40, scope: !6117)
!6123 = !DILocation(line: 957, column: 11, scope: !6117)
!6124 = !DILocation(line: 957, column: 5, scope: !6117)
!6125 = !DILocation(line: 959, column: 12, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 959, column: 12)
!6127 = !DILocation(line: 959, column: 17, scope: !6126)
!6128 = !DILocation(line: 959, column: 12, scope: !6117)
!6129 = !DILocation(line: 961, column: 35, scope: !6126)
!6130 = !DILocation(line: 961, column: 33, scope: !6126)
!6131 = !DILocation(line: 961, column: 40, scope: !6126)
!6132 = !DILocation(line: 960, column: 11, scope: !6126)
!6133 = !DILocation(line: 960, column: 5, scope: !6126)
!6134 = !DILocation(line: 963, column: 5, scope: !6126)
!6135 = !DILocation(line: 964, column: 23, scope: !6078)
!6136 = !DILocation(line: 964, column: 8, scope: !6078)
!6137 = !DILocation(line: 964, column: 6, scope: !6078)
!6138 = !DILocation(line: 966, column: 29, scope: !6078)
!6139 = !DILocation(line: 966, column: 36, scope: !6078)
!6140 = !DILocation(line: 966, column: 40, scope: !6078)
!6141 = !DILocation(line: 966, column: 44, scope: !6078)
!6142 = !DILocation(line: 966, column: 48, scope: !6078)
!6143 = !DILocation(line: 966, column: 10, scope: !6078)
!6144 = !DILocation(line: 966, column: 8, scope: !6078)
!6145 = !DILocation(line: 967, column: 24, scope: !6078)
!6146 = !DILocation(line: 967, column: 30, scope: !6078)
!6147 = !DILocation(line: 967, column: 3, scope: !6078)
!6148 = !DILocation(line: 968, column: 16, scope: !6078)
!6149 = !DILocation(line: 968, column: 3, scope: !6078)
!6150 = !DILocation(line: 969, column: 16, scope: !6078)
!6151 = !DILocation(line: 969, column: 21, scope: !6078)
!6152 = !DILocation(line: 969, column: 3, scope: !6078)
!6153 = !DILocation(line: 971, column: 39, scope: !6154)
!6154 = distinct !DILexicalBlock(scope: !6078, file: !3, line: 971, column: 7)
!6155 = !DILocation(line: 971, column: 49, scope: !6154)
!6156 = !DILocation(line: 971, column: 7, scope: !6154)
!6157 = !DILocation(line: 971, column: 7, scope: !6078)
!6158 = !DILocation(line: 972, column: 42, scope: !6154)
!6159 = !DILocation(line: 972, column: 33, scope: !6154)
!6160 = !DILocation(line: 972, column: 5, scope: !6154)
!6161 = !DILocation(line: 974, column: 24, scope: !6162)
!6162 = distinct !DILexicalBlock(scope: !6078, file: !3, line: 974, column: 7)
!6163 = !DILocation(line: 974, column: 7, scope: !6162)
!6164 = !DILocation(line: 974, column: 7, scope: !6078)
!6165 = !DILocation(line: 976, column: 14, scope: !6166)
!6166 = distinct !DILexicalBlock(scope: !6162, file: !3, line: 975, column: 5)
!6167 = !DILocation(line: 976, column: 12, scope: !6166)
!6168 = !DILocation(line: 977, column: 34, scope: !6166)
!6169 = !DILocation(line: 977, column: 39, scope: !6166)
!6170 = !DILocation(line: 978, column: 6, scope: !6166)
!6171 = !DILocation(line: 979, column: 6, scope: !6166)
!6172 = !DILocation(line: 977, column: 7, scope: !6166)
!6173 = !DILocation(line: 980, column: 33, scope: !6166)
!6174 = !DILocation(line: 980, column: 7, scope: !6166)
!6175 = !DILocation(line: 980, column: 31, scope: !6166)
!6176 = !DILocation(line: 981, column: 5, scope: !6166)
!6177 = !DILocation(line: 982, column: 1, scope: !6078)
!6178 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !561, file: !561, line: 1898, type: !5999, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6179 = !DILocalVariable(name: "gs", arg: 1, scope: !6178, file: !561, line: 1898, type: !1892)
!6180 = !DILocation(line: 1898, column: 29, scope: !6178)
!6181 = !DILocalVariable(name: "lhs", arg: 2, scope: !6178, file: !561, line: 1898, type: !1561)
!6182 = !DILocation(line: 1898, column: 38, scope: !6178)
!6183 = !DILocation(line: 1901, column: 18, scope: !6178)
!6184 = !DILocation(line: 1901, column: 25, scope: !6178)
!6185 = !DILocation(line: 1901, column: 3, scope: !6178)
!6186 = !DILocation(line: 1902, column: 7, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6178, file: !561, line: 1902, column: 7)
!6188 = !DILocation(line: 1902, column: 11, scope: !6187)
!6189 = !DILocation(line: 1902, column: 14, scope: !6187)
!6190 = !DILocation(line: 1902, column: 30, scope: !6187)
!6191 = !DILocation(line: 1902, column: 7, scope: !6178)
!6192 = !DILocation(line: 1903, column: 31, scope: !6187)
!6193 = !DILocation(line: 1903, column: 5, scope: !6187)
!6194 = !DILocation(line: 1903, column: 29, scope: !6187)
!6195 = !DILocation(line: 1904, column: 1, scope: !6178)
!6196 = distinct !DISubprogram(name: "expand_complex_div_straight", scope: !3, file: !3, line: 1077, type: !6197, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6197 = !DISubroutineType(types: !6198)
!6198 = !{null, !3628, !1561, !1561, !1561, !1561, !1561, !366}
!6199 = !DILocalVariable(name: "gsi", arg: 1, scope: !6196, file: !3, line: 1077, type: !3628)
!6200 = !DILocation(line: 1077, column: 52, scope: !6196)
!6201 = !DILocalVariable(name: "inner_type", arg: 2, scope: !6196, file: !3, line: 1077, type: !1561)
!6202 = !DILocation(line: 1077, column: 62, scope: !6196)
!6203 = !DILocalVariable(name: "ar", arg: 3, scope: !6196, file: !3, line: 1078, type: !1561)
!6204 = !DILocation(line: 1078, column: 14, scope: !6196)
!6205 = !DILocalVariable(name: "ai", arg: 4, scope: !6196, file: !3, line: 1078, type: !1561)
!6206 = !DILocation(line: 1078, column: 23, scope: !6196)
!6207 = !DILocalVariable(name: "br", arg: 5, scope: !6196, file: !3, line: 1078, type: !1561)
!6208 = !DILocation(line: 1078, column: 32, scope: !6196)
!6209 = !DILocalVariable(name: "bi", arg: 6, scope: !6196, file: !3, line: 1078, type: !1561)
!6210 = !DILocation(line: 1078, column: 41, scope: !6196)
!6211 = !DILocalVariable(name: "code", arg: 7, scope: !6196, file: !3, line: 1079, type: !366)
!6212 = !DILocation(line: 1079, column: 24, scope: !6196)
!6213 = !DILocalVariable(name: "rr", scope: !6196, file: !3, line: 1081, type: !1561)
!6214 = !DILocation(line: 1081, column: 8, scope: !6196)
!6215 = !DILocalVariable(name: "ri", scope: !6196, file: !3, line: 1081, type: !1561)
!6216 = !DILocation(line: 1081, column: 12, scope: !6196)
!6217 = !DILocalVariable(name: "div", scope: !6196, file: !3, line: 1081, type: !1561)
!6218 = !DILocation(line: 1081, column: 16, scope: !6196)
!6219 = !DILocalVariable(name: "t1", scope: !6196, file: !3, line: 1081, type: !1561)
!6220 = !DILocation(line: 1081, column: 21, scope: !6196)
!6221 = !DILocalVariable(name: "t2", scope: !6196, file: !3, line: 1081, type: !1561)
!6222 = !DILocation(line: 1081, column: 25, scope: !6196)
!6223 = !DILocalVariable(name: "t3", scope: !6196, file: !3, line: 1081, type: !1561)
!6224 = !DILocation(line: 1081, column: 29, scope: !6196)
!6225 = !DILocation(line: 1083, column: 25, scope: !6196)
!6226 = !DILocation(line: 1083, column: 41, scope: !6196)
!6227 = !DILocation(line: 1083, column: 53, scope: !6196)
!6228 = !DILocation(line: 1083, column: 57, scope: !6196)
!6229 = !DILocation(line: 1083, column: 8, scope: !6196)
!6230 = !DILocation(line: 1083, column: 6, scope: !6196)
!6231 = !DILocation(line: 1084, column: 25, scope: !6196)
!6232 = !DILocation(line: 1084, column: 41, scope: !6196)
!6233 = !DILocation(line: 1084, column: 53, scope: !6196)
!6234 = !DILocation(line: 1084, column: 57, scope: !6196)
!6235 = !DILocation(line: 1084, column: 8, scope: !6196)
!6236 = !DILocation(line: 1084, column: 6, scope: !6196)
!6237 = !DILocation(line: 1085, column: 26, scope: !6196)
!6238 = !DILocation(line: 1085, column: 42, scope: !6196)
!6239 = !DILocation(line: 1085, column: 54, scope: !6196)
!6240 = !DILocation(line: 1085, column: 58, scope: !6196)
!6241 = !DILocation(line: 1085, column: 9, scope: !6196)
!6242 = !DILocation(line: 1085, column: 7, scope: !6196)
!6243 = !DILocation(line: 1087, column: 25, scope: !6196)
!6244 = !DILocation(line: 1087, column: 41, scope: !6196)
!6245 = !DILocation(line: 1087, column: 53, scope: !6196)
!6246 = !DILocation(line: 1087, column: 57, scope: !6196)
!6247 = !DILocation(line: 1087, column: 8, scope: !6196)
!6248 = !DILocation(line: 1087, column: 6, scope: !6196)
!6249 = !DILocation(line: 1088, column: 25, scope: !6196)
!6250 = !DILocation(line: 1088, column: 41, scope: !6196)
!6251 = !DILocation(line: 1088, column: 53, scope: !6196)
!6252 = !DILocation(line: 1088, column: 57, scope: !6196)
!6253 = !DILocation(line: 1088, column: 8, scope: !6196)
!6254 = !DILocation(line: 1088, column: 6, scope: !6196)
!6255 = !DILocation(line: 1089, column: 25, scope: !6196)
!6256 = !DILocation(line: 1089, column: 41, scope: !6196)
!6257 = !DILocation(line: 1089, column: 53, scope: !6196)
!6258 = !DILocation(line: 1089, column: 57, scope: !6196)
!6259 = !DILocation(line: 1089, column: 8, scope: !6196)
!6260 = !DILocation(line: 1089, column: 6, scope: !6196)
!6261 = !DILocation(line: 1090, column: 25, scope: !6196)
!6262 = !DILocation(line: 1090, column: 30, scope: !6196)
!6263 = !DILocation(line: 1090, column: 36, scope: !6196)
!6264 = !DILocation(line: 1090, column: 48, scope: !6196)
!6265 = !DILocation(line: 1090, column: 52, scope: !6196)
!6266 = !DILocation(line: 1090, column: 8, scope: !6196)
!6267 = !DILocation(line: 1090, column: 6, scope: !6196)
!6268 = !DILocation(line: 1092, column: 25, scope: !6196)
!6269 = !DILocation(line: 1092, column: 41, scope: !6196)
!6270 = !DILocation(line: 1092, column: 53, scope: !6196)
!6271 = !DILocation(line: 1092, column: 57, scope: !6196)
!6272 = !DILocation(line: 1092, column: 8, scope: !6196)
!6273 = !DILocation(line: 1092, column: 6, scope: !6196)
!6274 = !DILocation(line: 1093, column: 25, scope: !6196)
!6275 = !DILocation(line: 1093, column: 41, scope: !6196)
!6276 = !DILocation(line: 1093, column: 53, scope: !6196)
!6277 = !DILocation(line: 1093, column: 57, scope: !6196)
!6278 = !DILocation(line: 1093, column: 8, scope: !6196)
!6279 = !DILocation(line: 1093, column: 6, scope: !6196)
!6280 = !DILocation(line: 1094, column: 25, scope: !6196)
!6281 = !DILocation(line: 1094, column: 42, scope: !6196)
!6282 = !DILocation(line: 1094, column: 54, scope: !6196)
!6283 = !DILocation(line: 1094, column: 58, scope: !6196)
!6284 = !DILocation(line: 1094, column: 8, scope: !6196)
!6285 = !DILocation(line: 1094, column: 6, scope: !6196)
!6286 = !DILocation(line: 1095, column: 25, scope: !6196)
!6287 = !DILocation(line: 1095, column: 30, scope: !6196)
!6288 = !DILocation(line: 1095, column: 36, scope: !6196)
!6289 = !DILocation(line: 1095, column: 48, scope: !6196)
!6290 = !DILocation(line: 1095, column: 52, scope: !6196)
!6291 = !DILocation(line: 1095, column: 8, scope: !6196)
!6292 = !DILocation(line: 1095, column: 6, scope: !6196)
!6293 = !DILocation(line: 1097, column: 30, scope: !6196)
!6294 = !DILocation(line: 1097, column: 35, scope: !6196)
!6295 = !DILocation(line: 1097, column: 39, scope: !6196)
!6296 = !DILocation(line: 1097, column: 3, scope: !6196)
!6297 = !DILocation(line: 1098, column: 1, scope: !6196)
!6298 = distinct !DISubprogram(name: "expand_complex_div_wide", scope: !3, file: !3, line: 1106, type: !6197, scopeLine: 1109, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6299 = !DILocalVariable(name: "gsi", arg: 1, scope: !6298, file: !3, line: 1106, type: !3628)
!6300 = !DILocation(line: 1106, column: 48, scope: !6298)
!6301 = !DILocalVariable(name: "inner_type", arg: 2, scope: !6298, file: !3, line: 1106, type: !1561)
!6302 = !DILocation(line: 1106, column: 58, scope: !6298)
!6303 = !DILocalVariable(name: "ar", arg: 3, scope: !6298, file: !3, line: 1107, type: !1561)
!6304 = !DILocation(line: 1107, column: 10, scope: !6298)
!6305 = !DILocalVariable(name: "ai", arg: 4, scope: !6298, file: !3, line: 1107, type: !1561)
!6306 = !DILocation(line: 1107, column: 19, scope: !6298)
!6307 = !DILocalVariable(name: "br", arg: 5, scope: !6298, file: !3, line: 1107, type: !1561)
!6308 = !DILocation(line: 1107, column: 28, scope: !6298)
!6309 = !DILocalVariable(name: "bi", arg: 6, scope: !6298, file: !3, line: 1107, type: !1561)
!6310 = !DILocation(line: 1107, column: 37, scope: !6298)
!6311 = !DILocalVariable(name: "code", arg: 7, scope: !6298, file: !3, line: 1108, type: !366)
!6312 = !DILocation(line: 1108, column: 20, scope: !6298)
!6313 = !DILocalVariable(name: "rr", scope: !6298, file: !3, line: 1110, type: !1561)
!6314 = !DILocation(line: 1110, column: 8, scope: !6298)
!6315 = !DILocalVariable(name: "ri", scope: !6298, file: !3, line: 1110, type: !1561)
!6316 = !DILocation(line: 1110, column: 12, scope: !6298)
!6317 = !DILocalVariable(name: "ratio", scope: !6298, file: !3, line: 1110, type: !1561)
!6318 = !DILocation(line: 1110, column: 16, scope: !6298)
!6319 = !DILocalVariable(name: "div", scope: !6298, file: !3, line: 1110, type: !1561)
!6320 = !DILocation(line: 1110, column: 23, scope: !6298)
!6321 = !DILocalVariable(name: "t1", scope: !6298, file: !3, line: 1110, type: !1561)
!6322 = !DILocation(line: 1110, column: 28, scope: !6298)
!6323 = !DILocalVariable(name: "t2", scope: !6298, file: !3, line: 1110, type: !1561)
!6324 = !DILocation(line: 1110, column: 32, scope: !6298)
!6325 = !DILocalVariable(name: "tr", scope: !6298, file: !3, line: 1110, type: !1561)
!6326 = !DILocation(line: 1110, column: 36, scope: !6298)
!6327 = !DILocalVariable(name: "ti", scope: !6298, file: !3, line: 1110, type: !1561)
!6328 = !DILocation(line: 1110, column: 40, scope: !6298)
!6329 = !DILocalVariable(name: "compare", scope: !6298, file: !3, line: 1110, type: !1561)
!6330 = !DILocation(line: 1110, column: 44, scope: !6298)
!6331 = !DILocalVariable(name: "bb_cond", scope: !6298, file: !3, line: 1111, type: !2292)
!6332 = !DILocation(line: 1111, column: 15, scope: !6298)
!6333 = !DILocalVariable(name: "bb_true", scope: !6298, file: !3, line: 1111, type: !2292)
!6334 = !DILocation(line: 1111, column: 24, scope: !6298)
!6335 = !DILocalVariable(name: "bb_false", scope: !6298, file: !3, line: 1111, type: !2292)
!6336 = !DILocation(line: 1111, column: 33, scope: !6298)
!6337 = !DILocalVariable(name: "bb_join", scope: !6298, file: !3, line: 1111, type: !2292)
!6338 = !DILocation(line: 1111, column: 43, scope: !6298)
!6339 = !DILocalVariable(name: "stmt", scope: !6298, file: !3, line: 1112, type: !1892)
!6340 = !DILocation(line: 1112, column: 10, scope: !6298)
!6341 = !DILocation(line: 1115, column: 25, scope: !6298)
!6342 = !DILocation(line: 1115, column: 40, scope: !6298)
!6343 = !DILocation(line: 1115, column: 52, scope: !6298)
!6344 = !DILocation(line: 1115, column: 8, scope: !6298)
!6345 = !DILocation(line: 1115, column: 6, scope: !6298)
!6346 = !DILocation(line: 1116, column: 25, scope: !6298)
!6347 = !DILocation(line: 1116, column: 40, scope: !6298)
!6348 = !DILocation(line: 1116, column: 52, scope: !6298)
!6349 = !DILocation(line: 1116, column: 8, scope: !6298)
!6350 = !DILocation(line: 1116, column: 6, scope: !6298)
!6351 = !DILocation(line: 1117, column: 13, scope: !6298)
!6352 = !DILocation(line: 1117, column: 11, scope: !6298)
!6353 = !DILocation(line: 1119, column: 3, scope: !6298)
!6354 = !DILocation(line: 1121, column: 42, scope: !6298)
!6355 = !DILocation(line: 1121, column: 32, scope: !6298)
!6356 = !DILocation(line: 1121, column: 21, scope: !6298)
!6357 = !DILocation(line: 1121, column: 11, scope: !6298)
!6358 = !DILocation(line: 1122, column: 21, scope: !6298)
!6359 = !DILocation(line: 1122, column: 16, scope: !6298)
!6360 = !DILocation(line: 1122, column: 11, scope: !6298)
!6361 = !DILocation(line: 1122, column: 6, scope: !6298)
!6362 = !DILocation(line: 1123, column: 7, scope: !6363)
!6363 = distinct !DILexicalBlock(scope: !6298, file: !3, line: 1123, column: 7)
!6364 = !DILocation(line: 1123, column: 27, scope: !6363)
!6365 = !DILocation(line: 1123, column: 7, scope: !6298)
!6366 = !DILocalVariable(name: "e", scope: !6367, file: !3, line: 1125, type: !1872)
!6367 = distinct !DILexicalBlock(scope: !6363, file: !3, line: 1124, column: 5)
!6368 = !DILocation(line: 1125, column: 12, scope: !6367)
!6369 = !DILocalVariable(name: "stmt", scope: !6367, file: !3, line: 1126, type: !1892)
!6370 = !DILocation(line: 1126, column: 14, scope: !6367)
!6371 = !DILocalVariable(name: "cond", scope: !6367, file: !3, line: 1127, type: !1561)
!6372 = !DILocation(line: 1127, column: 12, scope: !6367)
!6373 = !DILocalVariable(name: "tmp", scope: !6367, file: !3, line: 1127, type: !1561)
!6374 = !DILocation(line: 1127, column: 18, scope: !6367)
!6375 = !DILocation(line: 1129, column: 29, scope: !6367)
!6376 = !DILocation(line: 1129, column: 13, scope: !6367)
!6377 = !DILocation(line: 1129, column: 11, scope: !6367)
!6378 = !DILocation(line: 1130, column: 14, scope: !6367)
!6379 = !DILocation(line: 1130, column: 12, scope: !6367)
!6380 = !DILocation(line: 1131, column: 28, scope: !6381)
!6381 = distinct !DILexicalBlock(scope: !6367, file: !3, line: 1131, column: 11)
!6382 = !DILocation(line: 1131, column: 11, scope: !6381)
!6383 = !DILocation(line: 1131, column: 11, scope: !6367)
!6384 = !DILocation(line: 1133, column: 25, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 1132, column: 2)
!6386 = !DILocation(line: 1133, column: 31, scope: !6385)
!6387 = !DILocation(line: 1133, column: 10, scope: !6385)
!6388 = !DILocation(line: 1133, column: 8, scope: !6385)
!6389 = !DILocation(line: 1134, column: 27, scope: !6385)
!6390 = !DILocation(line: 1134, column: 33, scope: !6385)
!6391 = !DILocation(line: 1134, column: 4, scope: !6385)
!6392 = !DILocation(line: 1135, column: 2, scope: !6385)
!6393 = !DILocation(line: 1137, column: 26, scope: !6367)
!6394 = !DILocation(line: 1137, column: 31, scope: !6367)
!6395 = !DILocation(line: 1137, column: 7, scope: !6367)
!6396 = !DILocation(line: 1139, column: 14, scope: !6367)
!6397 = !DILocation(line: 1139, column: 12, scope: !6367)
!6398 = !DILocation(line: 1141, column: 43, scope: !6367)
!6399 = !DILocation(line: 1141, column: 14, scope: !6367)
!6400 = !DILocation(line: 1141, column: 12, scope: !6367)
!6401 = !DILocation(line: 1142, column: 26, scope: !6367)
!6402 = !DILocation(line: 1142, column: 31, scope: !6367)
!6403 = !DILocation(line: 1142, column: 7, scope: !6367)
!6404 = !DILocation(line: 1145, column: 33, scope: !6367)
!6405 = !DILocation(line: 1145, column: 24, scope: !6367)
!6406 = !DILocation(line: 1145, column: 39, scope: !6367)
!6407 = !DILocation(line: 1145, column: 11, scope: !6367)
!6408 = !DILocation(line: 1145, column: 9, scope: !6367)
!6409 = !DILocation(line: 1146, column: 17, scope: !6367)
!6410 = !DILocation(line: 1146, column: 20, scope: !6367)
!6411 = !DILocation(line: 1146, column: 15, scope: !6367)
!6412 = !DILocation(line: 1147, column: 17, scope: !6367)
!6413 = !DILocation(line: 1147, column: 20, scope: !6367)
!6414 = !DILocation(line: 1147, column: 15, scope: !6367)
!6415 = !DILocation(line: 1148, column: 34, scope: !6367)
!6416 = !DILocation(line: 1148, column: 17, scope: !6367)
!6417 = !DILocation(line: 1148, column: 15, scope: !6367)
!6418 = !DILocation(line: 1149, column: 35, scope: !6367)
!6419 = !DILocation(line: 1149, column: 18, scope: !6367)
!6420 = !DILocation(line: 1149, column: 16, scope: !6367)
!6421 = !DILocation(line: 1152, column: 7, scope: !6367)
!6422 = !DILocation(line: 1152, column: 10, scope: !6367)
!6423 = !DILocation(line: 1152, column: 16, scope: !6367)
!6424 = !DILocation(line: 1153, column: 27, scope: !6367)
!6425 = !DILocation(line: 1153, column: 30, scope: !6367)
!6426 = !DILocation(line: 1153, column: 7, scope: !6367)
!6427 = !DILocation(line: 1154, column: 18, scope: !6367)
!6428 = !DILocation(line: 1154, column: 27, scope: !6367)
!6429 = !DILocation(line: 1154, column: 7, scope: !6367)
!6430 = !DILocation(line: 1155, column: 18, scope: !6367)
!6431 = !DILocation(line: 1155, column: 27, scope: !6367)
!6432 = !DILocation(line: 1155, column: 7, scope: !6367)
!6433 = !DILocation(line: 1156, column: 18, scope: !6367)
!6434 = !DILocation(line: 1156, column: 28, scope: !6367)
!6435 = !DILocation(line: 1156, column: 7, scope: !6367)
!6436 = !DILocation(line: 1160, column: 11, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6367, file: !3, line: 1160, column: 11)
!6438 = !DILocation(line: 1160, column: 11, scope: !6367)
!6439 = !DILocation(line: 1162, column: 52, scope: !6440)
!6440 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 1161, column: 9)
!6441 = !DILocation(line: 1162, column: 61, scope: !6440)
!6442 = !DILocation(line: 1162, column: 11, scope: !6440)
!6443 = !DILocation(line: 1163, column: 52, scope: !6440)
!6444 = !DILocation(line: 1163, column: 62, scope: !6440)
!6445 = !DILocation(line: 1163, column: 11, scope: !6440)
!6446 = !DILocation(line: 1164, column: 9, scope: !6440)
!6447 = !DILocation(line: 1166, column: 30, scope: !6367)
!6448 = !DILocation(line: 1166, column: 12, scope: !6367)
!6449 = !DILocation(line: 1166, column: 10, scope: !6367)
!6450 = !DILocation(line: 1167, column: 30, scope: !6367)
!6451 = !DILocation(line: 1167, column: 12, scope: !6367)
!6452 = !DILocation(line: 1167, column: 10, scope: !6367)
!6453 = !DILocation(line: 1168, column: 5, scope: !6367)
!6454 = !DILocation(line: 1177, column: 7, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6298, file: !3, line: 1177, column: 7)
!6456 = !DILocation(line: 1177, column: 15, scope: !6455)
!6457 = !DILocation(line: 1177, column: 36, scope: !6455)
!6458 = !DILocation(line: 1177, column: 18, scope: !6455)
!6459 = !DILocation(line: 1177, column: 7, scope: !6298)
!6460 = !DILocation(line: 1179, column: 11, scope: !6461)
!6461 = distinct !DILexicalBlock(scope: !6462, file: !3, line: 1179, column: 11)
!6462 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 1178, column: 5)
!6463 = !DILocation(line: 1179, column: 11, scope: !6462)
!6464 = !DILocation(line: 1181, column: 5, scope: !6465)
!6465 = distinct !DILexicalBlock(scope: !6461, file: !3, line: 1180, column: 2)
!6466 = !DILocation(line: 1181, column: 24, scope: !6465)
!6467 = !DILocation(line: 1181, column: 11, scope: !6465)
!6468 = !DILocation(line: 1182, column: 22, scope: !6465)
!6469 = !DILocation(line: 1182, column: 27, scope: !6465)
!6470 = !DILocation(line: 1182, column: 4, scope: !6465)
!6471 = !DILocation(line: 1183, column: 2, scope: !6465)
!6472 = !DILocation(line: 1185, column: 32, scope: !6462)
!6473 = !DILocation(line: 1185, column: 37, scope: !6462)
!6474 = !DILocation(line: 1185, column: 43, scope: !6462)
!6475 = !DILocation(line: 1185, column: 55, scope: !6462)
!6476 = !DILocation(line: 1185, column: 59, scope: !6462)
!6477 = !DILocation(line: 1185, column: 15, scope: !6462)
!6478 = !DILocation(line: 1185, column: 13, scope: !6462)
!6479 = !DILocation(line: 1187, column: 29, scope: !6462)
!6480 = !DILocation(line: 1187, column: 45, scope: !6462)
!6481 = !DILocation(line: 1187, column: 57, scope: !6462)
!6482 = !DILocation(line: 1187, column: 61, scope: !6462)
!6483 = !DILocation(line: 1187, column: 12, scope: !6462)
!6484 = !DILocation(line: 1187, column: 10, scope: !6462)
!6485 = !DILocation(line: 1188, column: 30, scope: !6462)
!6486 = !DILocation(line: 1188, column: 46, scope: !6462)
!6487 = !DILocation(line: 1188, column: 58, scope: !6462)
!6488 = !DILocation(line: 1188, column: 62, scope: !6462)
!6489 = !DILocation(line: 1188, column: 13, scope: !6462)
!6490 = !DILocation(line: 1188, column: 11, scope: !6462)
!6491 = !DILocation(line: 1190, column: 29, scope: !6462)
!6492 = !DILocation(line: 1190, column: 45, scope: !6462)
!6493 = !DILocation(line: 1190, column: 57, scope: !6462)
!6494 = !DILocation(line: 1190, column: 61, scope: !6462)
!6495 = !DILocation(line: 1190, column: 12, scope: !6462)
!6496 = !DILocation(line: 1190, column: 10, scope: !6462)
!6497 = !DILocation(line: 1191, column: 29, scope: !6462)
!6498 = !DILocation(line: 1191, column: 45, scope: !6462)
!6499 = !DILocation(line: 1191, column: 57, scope: !6462)
!6500 = !DILocation(line: 1191, column: 61, scope: !6462)
!6501 = !DILocation(line: 1191, column: 12, scope: !6462)
!6502 = !DILocation(line: 1191, column: 10, scope: !6462)
!6503 = !DILocation(line: 1193, column: 29, scope: !6462)
!6504 = !DILocation(line: 1193, column: 45, scope: !6462)
!6505 = !DILocation(line: 1193, column: 57, scope: !6462)
!6506 = !DILocation(line: 1193, column: 61, scope: !6462)
!6507 = !DILocation(line: 1193, column: 12, scope: !6462)
!6508 = !DILocation(line: 1193, column: 10, scope: !6462)
!6509 = !DILocation(line: 1194, column: 29, scope: !6462)
!6510 = !DILocation(line: 1194, column: 46, scope: !6462)
!6511 = !DILocation(line: 1194, column: 58, scope: !6462)
!6512 = !DILocation(line: 1194, column: 62, scope: !6462)
!6513 = !DILocation(line: 1194, column: 12, scope: !6462)
!6514 = !DILocation(line: 1194, column: 10, scope: !6462)
!6515 = !DILocation(line: 1196, column: 29, scope: !6462)
!6516 = !DILocation(line: 1196, column: 34, scope: !6462)
!6517 = !DILocation(line: 1196, column: 40, scope: !6462)
!6518 = !DILocation(line: 1196, column: 52, scope: !6462)
!6519 = !DILocation(line: 1196, column: 56, scope: !6462)
!6520 = !DILocation(line: 1196, column: 12, scope: !6462)
!6521 = !DILocation(line: 1196, column: 10, scope: !6462)
!6522 = !DILocation(line: 1197, column: 29, scope: !6462)
!6523 = !DILocation(line: 1197, column: 34, scope: !6462)
!6524 = !DILocation(line: 1197, column: 40, scope: !6462)
!6525 = !DILocation(line: 1197, column: 52, scope: !6462)
!6526 = !DILocation(line: 1197, column: 56, scope: !6462)
!6527 = !DILocation(line: 1197, column: 12, scope: !6462)
!6528 = !DILocation(line: 1197, column: 10, scope: !6462)
!6529 = !DILocation(line: 1199, column: 10, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6462, file: !3, line: 1199, column: 10)
!6531 = !DILocation(line: 1199, column: 10, scope: !6462)
!6532 = !DILocation(line: 1201, column: 10, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6530, file: !3, line: 1200, column: 8)
!6534 = !DILocation(line: 1201, column: 8, scope: !6533)
!6535 = !DILocation(line: 1202, column: 22, scope: !6533)
!6536 = !DILocation(line: 1202, column: 27, scope: !6533)
!6537 = !DILocation(line: 1202, column: 3, scope: !6533)
!6538 = !DILocation(line: 1203, column: 10, scope: !6533)
!6539 = !DILocation(line: 1203, column: 8, scope: !6533)
!6540 = !DILocation(line: 1204, column: 22, scope: !6533)
!6541 = !DILocation(line: 1204, column: 27, scope: !6533)
!6542 = !DILocation(line: 1204, column: 3, scope: !6533)
!6543 = !DILocation(line: 1205, column: 15, scope: !6533)
!6544 = !DILocation(line: 1205, column: 3, scope: !6533)
!6545 = !DILocation(line: 1206, column: 8, scope: !6533)
!6546 = !DILocation(line: 1207, column: 5, scope: !6462)
!6547 = !DILocation(line: 1216, column: 7, scope: !6548)
!6548 = distinct !DILexicalBlock(scope: !6298, file: !3, line: 1216, column: 7)
!6549 = !DILocation(line: 1216, column: 16, scope: !6548)
!6550 = !DILocation(line: 1216, column: 34, scope: !6548)
!6551 = !DILocation(line: 1216, column: 19, scope: !6548)
!6552 = !DILocation(line: 1216, column: 7, scope: !6298)
!6553 = !DILocation(line: 1218, column: 11, scope: !6554)
!6554 = distinct !DILexicalBlock(scope: !6555, file: !3, line: 1218, column: 11)
!6555 = distinct !DILexicalBlock(scope: !6548, file: !3, line: 1217, column: 5)
!6556 = !DILocation(line: 1218, column: 11, scope: !6555)
!6557 = !DILocation(line: 1220, column: 5, scope: !6558)
!6558 = distinct !DILexicalBlock(scope: !6554, file: !3, line: 1219, column: 2)
!6559 = !DILocation(line: 1220, column: 24, scope: !6558)
!6560 = !DILocation(line: 1220, column: 11, scope: !6558)
!6561 = !DILocation(line: 1221, column: 22, scope: !6558)
!6562 = !DILocation(line: 1221, column: 27, scope: !6558)
!6563 = !DILocation(line: 1221, column: 4, scope: !6558)
!6564 = !DILocation(line: 1222, column: 2, scope: !6558)
!6565 = !DILocation(line: 1224, column: 32, scope: !6555)
!6566 = !DILocation(line: 1224, column: 37, scope: !6555)
!6567 = !DILocation(line: 1224, column: 43, scope: !6555)
!6568 = !DILocation(line: 1224, column: 55, scope: !6555)
!6569 = !DILocation(line: 1224, column: 59, scope: !6555)
!6570 = !DILocation(line: 1224, column: 15, scope: !6555)
!6571 = !DILocation(line: 1224, column: 13, scope: !6555)
!6572 = !DILocation(line: 1226, column: 29, scope: !6555)
!6573 = !DILocation(line: 1226, column: 45, scope: !6555)
!6574 = !DILocation(line: 1226, column: 57, scope: !6555)
!6575 = !DILocation(line: 1226, column: 61, scope: !6555)
!6576 = !DILocation(line: 1226, column: 12, scope: !6555)
!6577 = !DILocation(line: 1226, column: 10, scope: !6555)
!6578 = !DILocation(line: 1227, column: 30, scope: !6555)
!6579 = !DILocation(line: 1227, column: 46, scope: !6555)
!6580 = !DILocation(line: 1227, column: 58, scope: !6555)
!6581 = !DILocation(line: 1227, column: 62, scope: !6555)
!6582 = !DILocation(line: 1227, column: 13, scope: !6555)
!6583 = !DILocation(line: 1227, column: 11, scope: !6555)
!6584 = !DILocation(line: 1229, column: 29, scope: !6555)
!6585 = !DILocation(line: 1229, column: 45, scope: !6555)
!6586 = !DILocation(line: 1229, column: 57, scope: !6555)
!6587 = !DILocation(line: 1229, column: 61, scope: !6555)
!6588 = !DILocation(line: 1229, column: 12, scope: !6555)
!6589 = !DILocation(line: 1229, column: 10, scope: !6555)
!6590 = !DILocation(line: 1230, column: 29, scope: !6555)
!6591 = !DILocation(line: 1230, column: 45, scope: !6555)
!6592 = !DILocation(line: 1230, column: 57, scope: !6555)
!6593 = !DILocation(line: 1230, column: 61, scope: !6555)
!6594 = !DILocation(line: 1230, column: 12, scope: !6555)
!6595 = !DILocation(line: 1230, column: 10, scope: !6555)
!6596 = !DILocation(line: 1232, column: 29, scope: !6555)
!6597 = !DILocation(line: 1232, column: 45, scope: !6555)
!6598 = !DILocation(line: 1232, column: 57, scope: !6555)
!6599 = !DILocation(line: 1232, column: 61, scope: !6555)
!6600 = !DILocation(line: 1232, column: 12, scope: !6555)
!6601 = !DILocation(line: 1232, column: 10, scope: !6555)
!6602 = !DILocation(line: 1233, column: 29, scope: !6555)
!6603 = !DILocation(line: 1233, column: 46, scope: !6555)
!6604 = !DILocation(line: 1233, column: 58, scope: !6555)
!6605 = !DILocation(line: 1233, column: 62, scope: !6555)
!6606 = !DILocation(line: 1233, column: 12, scope: !6555)
!6607 = !DILocation(line: 1233, column: 10, scope: !6555)
!6608 = !DILocation(line: 1235, column: 29, scope: !6555)
!6609 = !DILocation(line: 1235, column: 34, scope: !6555)
!6610 = !DILocation(line: 1235, column: 40, scope: !6555)
!6611 = !DILocation(line: 1235, column: 52, scope: !6555)
!6612 = !DILocation(line: 1235, column: 56, scope: !6555)
!6613 = !DILocation(line: 1235, column: 12, scope: !6555)
!6614 = !DILocation(line: 1235, column: 10, scope: !6555)
!6615 = !DILocation(line: 1236, column: 29, scope: !6555)
!6616 = !DILocation(line: 1236, column: 34, scope: !6555)
!6617 = !DILocation(line: 1236, column: 40, scope: !6555)
!6618 = !DILocation(line: 1236, column: 52, scope: !6555)
!6619 = !DILocation(line: 1236, column: 56, scope: !6555)
!6620 = !DILocation(line: 1236, column: 12, scope: !6555)
!6621 = !DILocation(line: 1236, column: 10, scope: !6555)
!6622 = !DILocation(line: 1238, column: 10, scope: !6623)
!6623 = distinct !DILexicalBlock(scope: !6555, file: !3, line: 1238, column: 10)
!6624 = !DILocation(line: 1238, column: 10, scope: !6555)
!6625 = !DILocation(line: 1240, column: 10, scope: !6626)
!6626 = distinct !DILexicalBlock(scope: !6623, file: !3, line: 1239, column: 8)
!6627 = !DILocation(line: 1240, column: 8, scope: !6626)
!6628 = !DILocation(line: 1241, column: 22, scope: !6626)
!6629 = !DILocation(line: 1241, column: 27, scope: !6626)
!6630 = !DILocation(line: 1241, column: 3, scope: !6626)
!6631 = !DILocation(line: 1242, column: 10, scope: !6626)
!6632 = !DILocation(line: 1242, column: 8, scope: !6626)
!6633 = !DILocation(line: 1243, column: 22, scope: !6626)
!6634 = !DILocation(line: 1243, column: 27, scope: !6626)
!6635 = !DILocation(line: 1243, column: 3, scope: !6626)
!6636 = !DILocation(line: 1244, column: 15, scope: !6626)
!6637 = !DILocation(line: 1244, column: 3, scope: !6626)
!6638 = !DILocation(line: 1245, column: 8, scope: !6626)
!6639 = !DILocation(line: 1246, column: 5, scope: !6555)
!6640 = !DILocation(line: 1248, column: 7, scope: !6641)
!6641 = distinct !DILexicalBlock(scope: !6298, file: !3, line: 1248, column: 7)
!6642 = !DILocation(line: 1248, column: 7, scope: !6298)
!6643 = !DILocation(line: 1249, column: 6, scope: !6641)
!6644 = !DILocation(line: 1249, column: 26, scope: !6641)
!6645 = !DILocation(line: 1249, column: 12, scope: !6641)
!6646 = !DILocation(line: 1249, column: 5, scope: !6641)
!6647 = !DILocation(line: 1251, column: 10, scope: !6641)
!6648 = !DILocation(line: 1251, column: 8, scope: !6641)
!6649 = !DILocation(line: 1251, column: 19, scope: !6641)
!6650 = !DILocation(line: 1251, column: 17, scope: !6641)
!6651 = !DILocation(line: 1253, column: 30, scope: !6298)
!6652 = !DILocation(line: 1253, column: 35, scope: !6298)
!6653 = !DILocation(line: 1253, column: 39, scope: !6298)
!6654 = !DILocation(line: 1253, column: 3, scope: !6298)
!6655 = !DILocation(line: 1254, column: 1, scope: !6298)
!6656 = distinct !DISubprogram(name: "gimple_location", scope: !561, file: !561, line: 1139, type: !6657, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6657 = !DISubroutineType(types: !6658)
!6658 = !{!1689, !3959}
!6659 = !DILocalVariable(name: "g", arg: 1, scope: !6656, file: !561, line: 1139, type: !3959)
!6660 = !DILocation(line: 1139, column: 31, scope: !6656)
!6661 = !DILocation(line: 1141, column: 10, scope: !6656)
!6662 = !DILocation(line: 1141, column: 13, scope: !6656)
!6663 = !DILocation(line: 1141, column: 20, scope: !6656)
!6664 = !DILocation(line: 1141, column: 3, scope: !6656)
!6665 = distinct !DISubprogram(name: "gsi_last_bb", scope: !561, file: !561, line: 4450, type: !3594, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6666 = !DILocalVariable(name: "bb", arg: 1, scope: !6665, file: !561, line: 4450, type: !2292)
!6667 = !DILocation(line: 4450, column: 26, scope: !6665)
!6668 = !DILocalVariable(name: "i", scope: !6665, file: !561, line: 4452, type: !2934)
!6669 = !DILocation(line: 4452, column: 24, scope: !6665)
!6670 = !DILocalVariable(name: "seq", scope: !6665, file: !561, line: 4453, type: !1882)
!6671 = !DILocation(line: 4453, column: 14, scope: !6665)
!6672 = !DILocation(line: 4455, column: 17, scope: !6665)
!6673 = !DILocation(line: 4455, column: 9, scope: !6665)
!6674 = !DILocation(line: 4455, column: 7, scope: !6665)
!6675 = !DILocation(line: 4456, column: 28, scope: !6665)
!6676 = !DILocation(line: 4456, column: 11, scope: !6665)
!6677 = !DILocation(line: 4456, column: 5, scope: !6665)
!6678 = !DILocation(line: 4456, column: 9, scope: !6665)
!6679 = !DILocation(line: 4457, column: 11, scope: !6665)
!6680 = !DILocation(line: 4457, column: 5, scope: !6665)
!6681 = !DILocation(line: 4457, column: 9, scope: !6665)
!6682 = !DILocation(line: 4458, column: 10, scope: !6665)
!6683 = !DILocation(line: 4458, column: 5, scope: !6665)
!6684 = !DILocation(line: 4458, column: 8, scope: !6665)
!6685 = !DILocation(line: 4460, column: 3, scope: !6665)
!6686 = distinct !DISubprogram(name: "gimple_seq_last", scope: !561, file: !561, line: 178, type: !4969, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6687 = !DILocalVariable(name: "s", arg: 1, scope: !6686, file: !561, line: 178, type: !4971)
!6688 = !DILocation(line: 178, column: 35, scope: !6686)
!6689 = !DILocation(line: 180, column: 10, scope: !6686)
!6690 = !DILocation(line: 180, column: 14, scope: !6686)
!6691 = !DILocation(line: 180, column: 17, scope: !6686)
!6692 = !DILocation(line: 180, column: 3, scope: !6686)
!6693 = distinct !DISubprogram(name: "gimple_return_retval", scope: !561, file: !561, line: 4253, type: !3957, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6694 = !DILocalVariable(name: "gs", arg: 1, scope: !6693, file: !561, line: 4253, type: !3959)
!6695 = !DILocation(line: 4253, column: 36, scope: !6693)
!6696 = !DILocation(line: 4256, column: 21, scope: !6693)
!6697 = !DILocation(line: 4256, column: 10, scope: !6693)
!6698 = !DILocation(line: 4256, column: 3, scope: !6693)
!6699 = distinct !DISubprogram(name: "gimple_cond_set_code", scope: !561, file: !561, line: 2231, type: !6700, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6700 = !DISubroutineType(types: !6701)
!6701 = !{null, !1892, !366}
!6702 = !DILocalVariable(name: "gs", arg: 1, scope: !6699, file: !561, line: 2231, type: !1892)
!6703 = !DILocation(line: 2231, column: 30, scope: !6699)
!6704 = !DILocalVariable(name: "code", arg: 2, scope: !6699, file: !561, line: 2231, type: !366)
!6705 = !DILocation(line: 2231, column: 49, scope: !6699)
!6706 = !DILocation(line: 2234, column: 24, scope: !6699)
!6707 = !DILocation(line: 2234, column: 3, scope: !6699)
!6708 = !DILocation(line: 2234, column: 7, scope: !6699)
!6709 = !DILocation(line: 2234, column: 14, scope: !6699)
!6710 = !DILocation(line: 2234, column: 22, scope: !6699)
!6711 = !DILocation(line: 2235, column: 1, scope: !6699)
!6712 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !561, file: !561, line: 2261, type: !5999, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6713 = !DILocalVariable(name: "gs", arg: 1, scope: !6712, file: !561, line: 2261, type: !1892)
!6714 = !DILocation(line: 2261, column: 29, scope: !6712)
!6715 = !DILocalVariable(name: "lhs", arg: 2, scope: !6712, file: !561, line: 2261, type: !1561)
!6716 = !DILocation(line: 2261, column: 38, scope: !6712)
!6717 = !DILocation(line: 2264, column: 18, scope: !6712)
!6718 = !DILocation(line: 2264, column: 25, scope: !6712)
!6719 = !DILocation(line: 2264, column: 3, scope: !6712)
!6720 = !DILocation(line: 2265, column: 1, scope: !6712)
!6721 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !561, file: !561, line: 2292, type: !5999, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2930)
!6722 = !DILocalVariable(name: "gs", arg: 1, scope: !6721, file: !561, line: 2292, type: !1892)
!6723 = !DILocation(line: 2292, column: 29, scope: !6721)
!6724 = !DILocalVariable(name: "rhs", arg: 2, scope: !6721, file: !561, line: 2292, type: !1561)
!6725 = !DILocation(line: 2292, column: 38, scope: !6721)
!6726 = !DILocation(line: 2295, column: 18, scope: !6721)
!6727 = !DILocation(line: 2295, column: 25, scope: !6721)
!6728 = !DILocation(line: 2295, column: 3, scope: !6721)
!6729 = !DILocation(line: 2296, column: 1, scope: !6721)
