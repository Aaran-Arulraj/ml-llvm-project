; ModuleID = 'gcse.c'
source_filename = "gcse.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.hash_table_d = type { %struct.expr**, i32, i32, i32 }
%struct.expr = type { %struct.rtx_def*, i32, %struct.expr*, %struct.occr*, %struct.occr*, %struct.rtx_def* }
%struct.occr = type { %struct.occr*, %struct.rtx_def*, i8, i8 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.reg_use = type { %struct.rtx_def* }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.reg_avail_info = type { %struct.basic_block_def*, i32, i32 }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.ls_expr = type { %struct.expr*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.ls_expr*, i32, i32, i32, %struct.rtx_def* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.edge_list = type { i32, i32, %struct.edge_def** }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.cselib_val_struct = type { i32, i32, %struct.rtx_def*, %struct.elt_loc_list*, %struct.elt_list*, %struct.cselib_val_struct* }
%struct.elt_loc_list = type { %struct.elt_loc_list*, %struct.rtx_def*, %struct.rtx_def* }
%struct.elt_list = type { %struct.elt_list*, %struct.cselib_val_struct* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.df_artificial_ref = type { %struct.df_base_ref, %struct.basic_block_def* }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }

@can_copy_p.can_copy_init_p = internal global i8 0, align 1, !dbg !0
@can_copy = internal global [87 x i8] zeroinitializer, align 16, !dbg !3176
@test_insn = internal global %struct.rtx_def* null, align 8, !dbg !3181
@word_mode = external dso_local global i32, align 4
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@targetm = external dso_local global %struct.gcc_target, align 8
@.str = private unnamed_addr constant [6 x i8] c"cprop\00", align 1
@pass_rtl_cprop = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_rtl_cprop, i32 ()* @execute_rtl_cprop, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 130, i32 512, i32 0, i32 0, i32 0, i32 132107 } }, align 8, !dbg !3128
@.str.1 = private unnamed_addr constant [8 x i8] c"rtl pre\00", align 1
@pass_rtl_pre = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8 ()* @gate_rtl_pre, i32 ()* @execute_rtl_pre, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 131, i32 512, i32 0, i32 0, i32 0, i32 132107 } }, align 8, !dbg !3156
@.str.2 = private unnamed_addr constant [6 x i8] c"hoist\00", align 1
@pass_rtl_hoist = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8 ()* @gate_rtl_hoist, i32 ()* @execute_rtl_hoist, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 132, i32 512, i32 0, i32 0, i32 0, i32 132107 } }, align 8, !dbg !3158
@gt_ggc_r_gt_gcse_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.rtx_def** @test_insn to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3160
@flag_rerun_cse_after_global_opts = common dso_local global i32 0, align 4, !dbg !3174
@mode_class = external dso_local constant [87 x i8], align 16
@optimize = external dso_local global i32, align 4
@flag_gcse = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@.str.3 = private unnamed_addr constant [32 x i8] c"const/copy propagation disabled\00", align 1
@local_const_prop_count = internal global i32 0, align 4, !dbg !3183
@global_const_prop_count = internal global i32 0, align 4, !dbg !3185
@local_copy_prop_count = internal global i32 0, align 4, !dbg !3187
@global_copy_prop_count = internal global i32 0, align 4, !dbg !3189
@bytes_used = internal global i32 0, align 4, !dbg !3191
@gcse_obstack = internal global %struct.obstack zeroinitializer, align 8, !dbg !3193
@implicit_sets = internal global %struct.rtx_def** null, align 8, !dbg !3216
@set_hash_table = internal global %struct.hash_table_d zeroinitializer, align 8, !dbg !3218
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [4 x i8] c"SET\00", align 1
@.str.5 = private unnamed_addr constant [48 x i8] c"CPROP of %s, %d basic blocks, %d bytes needed, \00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"%d local const props, %d local copy props, \00", align 1
@.str.7 = private unnamed_addr constant [46 x i8] c"%d global const props, %d global copy props\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [45 x i8] c"%s: %d basic blocks and %d edges/basic block\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.9 = private unnamed_addr constant [37 x i8] c"%s: %d basic blocks and %d registers\00", align 1
@reg_set_bitmap = internal global %struct.bitmap_head_def* null, align 8, !dbg !3195
@modify_mem_list = internal global %struct.rtx_def** null, align 8, !dbg !3198
@canon_modify_mem_list = internal global %struct.rtx_def** null, align 8, !dbg !3200
@modify_mem_list_set = internal global %struct.bitmap_head_def* null, align 8, !dbg !3202
@blocks_with_calls = internal global %struct.bitmap_head_def* null, align 8, !dbg !3204
@reg_use_count = internal global i32 0, align 4, !dbg !3206
@reg_use_table = internal global [8 x %struct.reg_use] zeroinitializer, align 16, !dbg !3208
@mode_size = external dso_local global [87 x i8], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@rtx_format = external dso_local constant [139 x i8*], align 16
@.str.10 = private unnamed_addr constant [39 x i8] c"LOCAL CONST-PROP: Replacing reg %d in \00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"insn %d with constant \00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [45 x i8] c"LOCAL COPY-PROP: Replacing reg %d in insn %d\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c" with reg %d\0A\00", align 1
@rtx_class = external dso_local constant [139 x i32], align 16
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@.str.15 = private unnamed_addr constant [67 x i8] c"GLOBAL CONST-PROP: Replacing reg %d in jump_insn %d with constant \00", align 1
@.str.16 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"Implicit set of reg %d in \00", align 1
@.str.19 = private unnamed_addr constant [16 x i8] c"basic block %d\0A\00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"Found %d implicit sets\0A\00", align 1
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@flag_signed_zeros = external dso_local global i32, align 4
@dconst0 = external dso_local global %struct.real_value, align 8
@reg_avail_info = internal global %struct.reg_avail_info* null, align 8, !dbg !3226
@current_bb = internal global %struct.basic_block_def* null, align 8, !dbg !3228
@regs_invalidated_by_call = external dso_local global i64, align 8
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@df = external dso_local global %struct.df*, align 8
@flag_gcse_las = external dso_local global i32, align 4
@ix86_isa_flags = external dso_local global i32, align 4
@ix86_fpmath = external dso_local global i32, align 4
@gcse_mem_operand = internal global %struct.rtx_def* null, align 8, !dbg !3230
@gcse_mems_conflict_p = internal global i32 0, align 4, !dbg !3235
@pre_ldst_mems = internal global %struct.ls_expr* null, align 8, !dbg !3237
@pre_ldst_table = internal global %struct.htab* null, align 8, !dbg !3239
@.str.21 = private unnamed_addr constant [7 x i8] c"gcse.c\00", align 1
@.str.22 = private unnamed_addr constant [40 x i8] c"%s hash table (%d buckets, %d entries)\0A\00", align 1
@.str.23 = private unnamed_addr constant [28 x i8] c"Index %d (hash value %d)\0A  \00", align 1
@cprop_pavloc = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3241
@cprop_absaltered = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3255
@cprop_avin = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3257
@cprop_avout = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3259
@.str.24 = private unnamed_addr constant [40 x i8] c"GLOBAL CONST-PROP: Replacing reg %d in \00", align 1
@.str.25 = private unnamed_addr constant [46 x i8] c"GLOBAL COPY-PROP: Replacing reg %d in insn %d\00", align 1
@bypass_last_basic_block = internal global i32 0, align 4, !dbg !3261
@.str.26 = private unnamed_addr constant [60 x i8] c"JUMP-BYPASS: Proved reg %d in jump_insn %d equals constant \00", align 1
@.str.27 = private unnamed_addr constant [32 x i8] c"\0ABypass edge from %d->%d to %d\0A\00", align 1
@gcse_subst_count = internal global i32 0, align 4, !dbg !3263
@gcse_create_count = internal global i32 0, align 4, !dbg !3265
@.str.28 = private unnamed_addr constant [13 x i8] c"PRE disabled\00", align 1
@expr_hash_table = internal global %struct.hash_table_d zeroinitializer, align 8, !dbg !3267
@flag_gcse_lm = external dso_local global i32, align 4
@.str.29 = private unnamed_addr constant [11 x i8] c"Expression\00", align 1
@edge_list = internal global %struct.edge_list* null, align 8, !dbg !3285
@.str.30 = private unnamed_addr constant [51 x i8] c"PRE GCSE of %s, %d basic blocks, %d bytes needed, \00", align 1
@.str.31 = private unnamed_addr constant [29 x i8] c"%d substs, %d insns created\0A\00", align 1
@flag_non_call_exceptions = external dso_local global i32, align 4
@flag_float_store = external dso_local global i32, align 4
@.str.32 = private unnamed_addr constant [13 x i8] c"LDST list: \0A\00", align 1
@.str.33 = private unnamed_addr constant [18 x i8] c"  Pattern (%3d): \00", align 1
@.str.34 = private unnamed_addr constant [12 x i8] c"\0A\09 Loads : \00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"(nil)\00", align 1
@.str.36 = private unnamed_addr constant [12 x i8] c"\0A\09Stores : \00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@transp = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3269
@comp = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3271
@antloc = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3273
@pre_optimal = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3275
@pre_redundant = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3277
@pre_insert_map = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3279
@pre_delete_map = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3281
@ae_kill = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3283
@.str.38 = private unnamed_addr constant [43 x i8] c"PRE: redundant insn %d (expression %d) in \00", align 1
@.str.39 = private unnamed_addr constant [27 x i8] c"bb %d, reaching reg is %d\0A\00", align 1
@.str.40 = private unnamed_addr constant [20 x i8] c"PRE: edge (%d,%d), \00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"copy expression %d\0A\00", align 1
@.str.42 = private unnamed_addr constant [35 x i8] c"PRE/HOIST: end of bb %d, insn %d, \00", align 1
@.str.43 = private unnamed_addr constant [33 x i8] c"copying expression %d to reg %d\0A\00", align 1
@.str.44 = private unnamed_addr constant [39 x i8] c"PRE:  store updated with reaching reg \00", align 1
@.str.45 = private unnamed_addr constant [4 x i8] c":\0A\09\00", align 1
@.str.46 = private unnamed_addr constant [62 x i8] c"PRE: bb %d, insn %d, copy expression %d in insn %d to reg %d\0A\00", align 1
@.str.47 = private unnamed_addr constant [14 x i8] c"GCSE disabled\00", align 1
@.str.48 = private unnamed_addr constant [25 x i8] c"Code Hosting Expressions\00", align 1
@.str.49 = private unnamed_addr constant [48 x i8] c"HOIST of %s, %d basic blocks, %d bytes needed, \00", align 1
@hoist_vbein = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3294
@hoist_vbeout = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3296
@hoist_exprs = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3298
@transpout = internal global %struct.simple_bitmap_def** null, align 8, !dbg !3300
@.str.50 = private unnamed_addr constant [42 x i8] c"hoisting vbeinout computation: %d passes\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @can_copy_p(i32 %mode) #0 !dbg !2 {
entry:
  %mode.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3307, metadata !DIExpression()), !dbg !3308
  %0 = load i8, i8* @can_copy_p.can_copy_init_p, align 1, !dbg !3309
  %tobool = icmp ne i8 %0, 0, !dbg !3309
  br i1 %tobool, label %if.end, label %if.then, !dbg !3311

if.then:                                          ; preds = %entry
  call void @compute_can_copy(), !dbg !3312
  store i8 1, i8* @can_copy_p.can_copy_init_p, align 1, !dbg !3314
  br label %if.end, !dbg !3315

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !3316
  %idxprom = zext i32 %1 to i64, !dbg !3317
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @can_copy, i64 0, i64 %idxprom, !dbg !3317
  %2 = load i8, i8* %arrayidx, align 1, !dbg !3317
  %conv = sext i8 %2 to i32, !dbg !3317
  %cmp = icmp ne i32 %conv, 0, !dbg !3318
  %conv1 = zext i1 %cmp to i32, !dbg !3318
  %conv2 = trunc i32 %conv1 to i8, !dbg !3317
  ret i8 %conv2, !dbg !3319
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @compute_can_copy() #0 !dbg !3320 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3323, metadata !DIExpression()), !dbg !3324
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([87 x i8], [87 x i8]* @can_copy, i64 0, i64 0), i8 0, i64 87, i1 false), !dbg !3325
  call void @start_sequence(), !dbg !3326
  store i32 0, i32* %i, align 4, !dbg !3327
  br label %for.cond, !dbg !3329

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3330
  %cmp = icmp slt i32 %0, 87, !dbg !3332
  br i1 %cmp, label %for.body, label %for.end, !dbg !3333

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !3334
  %idxprom = sext i32 %1 to i64, !dbg !3334
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3334
  %2 = load i8, i8* %arrayidx, align 1, !dbg !3334
  %conv = zext i8 %2 to i32, !dbg !3334
  %cmp1 = icmp eq i32 %conv, 1, !dbg !3336
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3337

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4, !dbg !3338
  %idxprom3 = sext i32 %3 to i64, !dbg !3340
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @can_copy, i64 0, i64 %idxprom3, !dbg !3340
  store i8 0, i8* %arrayidx4, align 1, !dbg !3341
  br label %if.end, !dbg !3342

if.else:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !3343
  %idxprom5 = sext i32 %4 to i64, !dbg !3344
  %arrayidx6 = getelementptr inbounds [87 x i8], [87 x i8]* @can_copy, i64 0, i64 %idxprom5, !dbg !3344
  store i8 1, i8* %arrayidx6, align 1, !dbg !3345
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !3346

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !3347
  %inc = add nsw i32 %5, 1, !dbg !3347
  store i32 %inc, i32* %i, align 4, !dbg !3347
  br label %for.cond, !dbg !3348, !llvm.loop !3349

for.end:                                          ; preds = %for.cond
  call void @end_sequence(), !dbg !3351
  ret void, !dbg !3352
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @can_assign_to_reg_without_clobbers_p(%struct.rtx_def* %x) #0 !dbg !3353 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %struct.rtx_def*, align 8
  %num_clobbers = alloca i32, align 4
  %icode = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3356, metadata !DIExpression()), !dbg !3357
  call void @llvm.dbg.declare(metadata i32* %num_clobbers, metadata !3358, metadata !DIExpression()), !dbg !3359
  store i32 0, i32* %num_clobbers, align 4, !dbg !3359
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !3360, metadata !DIExpression()), !dbg !3361
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3362
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3364
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3364
  %bf.load = load i32, i32* %2, align 8, !dbg !3364
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3364
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3364
  %call = call i32 @general_operand(%struct.rtx_def* %0, i32 %bf.clear), !dbg !3365
  %tobool = icmp ne i32 %call, 0, !dbg !3365
  br i1 %tobool, label %if.then, label %if.else, !dbg !3366

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !3367
  br label %return, !dbg !3367

if.else:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3368
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3368
  %bf.load1 = load i32, i32* %4, align 8, !dbg !3368
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !3368
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !3368
  %cmp = icmp eq i32 %bf.clear3, 0, !dbg !3370
  br i1 %cmp, label %if.then4, label %if.end, !dbg !3371

if.then4:                                         ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !3372
  br label %return, !dbg !3372

if.end:                                           ; preds = %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** @test_insn, align 8, !dbg !3373
  %cmp6 = icmp eq %struct.rtx_def* %5, null, !dbg !3375
  br i1 %cmp6, label %if.then7, label %if.end15, !dbg !3376

if.then7:                                         ; preds = %if.end5
  %6 = load i32, i32* @word_mode, align 4, !dbg !3377
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 %6, i32 106), !dbg !3377
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !3377
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %7), !dbg !3377
  %call10 = call %struct.rtx_def* @make_insn_raw(%struct.rtx_def* %call9), !dbg !3379
  store %struct.rtx_def* %call10, %struct.rtx_def** @test_insn, align 8, !dbg !3380
  %8 = load %struct.rtx_def*, %struct.rtx_def** @test_insn, align 8, !dbg !3381
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !3381
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3381
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !3381
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3381
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx, align 8, !dbg !3382
  %9 = load %struct.rtx_def*, %struct.rtx_def** @test_insn, align 8, !dbg !3383
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !3383
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !3383
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 2, !dbg !3383
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !3383
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx14, align 8, !dbg !3384
  br label %if.end15, !dbg !3385

if.end15:                                         ; preds = %if.then7, %if.end5
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3386
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !3386
  %bf.load16 = load i32, i32* %11, align 8, !dbg !3386
  %bf.lshr17 = lshr i32 %bf.load16, 16, !dbg !3386
  %bf.clear18 = and i32 %bf.lshr17, 255, !dbg !3386
  %12 = load %struct.rtx_def*, %struct.rtx_def** @test_insn, align 8, !dbg !3386
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !3386
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !3386
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 5, !dbg !3386
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !3386
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !3386
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !3386
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !3386
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !3386
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !3386
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !3386
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !3386
  %bf.load27 = load i32, i32* %15, align 8, !dbg !3386
  %bf.value = and i32 %bf.clear18, 255, !dbg !3386
  %bf.shl = shl i32 %bf.value, 16, !dbg !3386
  %bf.clear28 = and i32 %bf.load27, -16711681, !dbg !3386
  %bf.set = or i32 %bf.clear28, %bf.shl, !dbg !3386
  store i32 %bf.set, i32* %15, align 8, !dbg !3386
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3387
  %17 = load %struct.rtx_def*, %struct.rtx_def** @test_insn, align 8, !dbg !3388
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !3388
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !3388
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 5, !dbg !3388
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !3388
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !3388
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !3388
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !3388
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 1, !dbg !3388
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !3388
  store %struct.rtx_def* %16, %struct.rtx_def** %rt_rtx36, align 8, !dbg !3389
  %19 = load %struct.rtx_def*, %struct.rtx_def** @test_insn, align 8, !dbg !3390
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3390
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !3390
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 5, !dbg !3390
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !3390
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !3390
  %21 = load %struct.rtx_def*, %struct.rtx_def** @test_insn, align 8, !dbg !3391
  %call41 = call i32 @recog(%struct.rtx_def* %20, %struct.rtx_def* %21, i32* %num_clobbers), !dbg !3392
  store i32 %call41, i32* %icode, align 4, !dbg !3393
  %22 = load i32, i32* %icode, align 4, !dbg !3394
  %cmp42 = icmp slt i32 %22, 0, !dbg !3396
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !3397

if.then43:                                        ; preds = %if.end15
  store i8 0, i8* %retval, align 1, !dbg !3398
  br label %return, !dbg !3398

if.end44:                                         ; preds = %if.end15
  %23 = load i32, i32* %num_clobbers, align 4, !dbg !3399
  %cmp45 = icmp sgt i32 %23, 0, !dbg !3401
  br i1 %cmp45, label %land.lhs.true, label %if.end49, !dbg !3402

land.lhs.true:                                    ; preds = %if.end44
  %24 = load i32, i32* %icode, align 4, !dbg !3403
  %call46 = call i32 @added_clobbers_hard_reg_p(i32 %24), !dbg !3404
  %tobool47 = icmp ne i32 %call46, 0, !dbg !3404
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !3405

if.then48:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !3406
  br label %return, !dbg !3406

if.end49:                                         ; preds = %land.lhs.true, %if.end44
  %25 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 37), align 8, !dbg !3407
  %tobool50 = icmp ne i8 (%struct.rtx_def*)* %25, null, !dbg !3409
  br i1 %tobool50, label %land.lhs.true51, label %if.end55, !dbg !3410

land.lhs.true51:                                  ; preds = %if.end49
  %26 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 37), align 8, !dbg !3411
  %27 = load %struct.rtx_def*, %struct.rtx_def** @test_insn, align 8, !dbg !3412
  %call52 = call zeroext i8 %26(%struct.rtx_def* %27), !dbg !3413
  %conv = zext i8 %call52 to i32, !dbg !3413
  %tobool53 = icmp ne i32 %conv, 0, !dbg !3413
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !3414

if.then54:                                        ; preds = %land.lhs.true51
  store i8 0, i8* %retval, align 1, !dbg !3415
  br label %return, !dbg !3415

if.end55:                                         ; preds = %land.lhs.true51, %if.end49
  store i8 1, i8* %retval, align 1, !dbg !3416
  br label %return, !dbg !3416

return:                                           ; preds = %if.end55, %if.then54, %if.then48, %if.then43, %if.then4, %if.then
  %28 = load i8, i8* %retval, align 1, !dbg !3417
  ret i8 %28, !dbg !3417
}

declare dso_local i32 @general_operand(%struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @make_insn_raw(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

declare dso_local i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #2

declare dso_local i32 @added_clobbers_hard_reg_p(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @fis_get_condition(%struct.rtx_def* %jump) #0 !dbg !3418 {
entry:
  %jump.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !3421, metadata !DIExpression()), !dbg !3422
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !3423
  %call = call %struct.rtx_def* @get_condition(%struct.rtx_def* %0, %struct.rtx_def** null, i32 0, i32 1), !dbg !3424
  ret %struct.rtx_def* %call, !dbg !3425
}

declare dso_local %struct.rtx_def* @get_condition(%struct.rtx_def*, %struct.rtx_def**, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_rtl_cprop() #0 !dbg !3426 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !3427
  %cmp = icmp sgt i32 %0, 0, !dbg !3428
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !3429

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_gcse, align 4, !dbg !3430
  %tobool = icmp ne i32 %1, 0, !dbg !3430
  br i1 %tobool, label %land.lhs.true1, label %land.end, !dbg !3431

land.lhs.true1:                                   ; preds = %land.lhs.true
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3432
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3432
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !3433
  %bf.load = load i32, i32* %calls_setjmp, align 8, !dbg !3433
  %bf.lshr = lshr i32 %bf.load, 18, !dbg !3433
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3433
  %tobool2 = icmp ne i32 %bf.clear, 0, !dbg !3432
  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !3434

land.rhs:                                         ; preds = %land.lhs.true1
  %call = call zeroext i8 @dbg_cnt(i32 4), !dbg !3435
  %conv = zext i8 %call to i32, !dbg !3435
  %tobool3 = icmp ne i32 %conv, 0, !dbg !3434
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true1, %land.lhs.true, %entry
  %3 = phi i1 [ false, %land.lhs.true1 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !3436
  %land.ext = zext i1 %3 to i32, !dbg !3434
  %conv4 = trunc i32 %land.ext to i8, !dbg !3427
  ret i8 %conv4, !dbg !3437
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_rtl_cprop() #0 !dbg !3438 {
entry:
  %call = call zeroext i8 @delete_unreachable_blocks(), !dbg !3439
  %call1 = call i32 @df_set_flags(i32 1), !dbg !3440
  call void @df_analyze(), !dbg !3441
  %call2 = call i32 @one_cprop_pass(), !dbg !3442
  %0 = load i32, i32* @flag_rerun_cse_after_global_opts, align 4, !dbg !3443
  %or = or i32 %0, %call2, !dbg !3443
  store i32 %or, i32* @flag_rerun_cse_after_global_opts, align 4, !dbg !3443
  ret i32 0, !dbg !3444
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_rtl_pre() #0 !dbg !3445 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !3446
  %cmp = icmp sgt i32 %0, 0, !dbg !3447
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !3448

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_gcse, align 4, !dbg !3449
  %tobool = icmp ne i32 %1, 0, !dbg !3449
  br i1 %tobool, label %land.lhs.true1, label %land.end, !dbg !3450

land.lhs.true1:                                   ; preds = %land.lhs.true
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3451
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3451
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !3452
  %bf.load = load i32, i32* %calls_setjmp, align 8, !dbg !3452
  %bf.lshr = lshr i32 %bf.load, 18, !dbg !3452
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3452
  %tobool2 = icmp ne i32 %bf.clear, 0, !dbg !3451
  br i1 %tobool2, label %land.end, label %land.lhs.true3, !dbg !3453

land.lhs.true3:                                   ; preds = %land.lhs.true1
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3454
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3454
  %call = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr4), !dbg !3455
  %conv = zext i8 %call to i32, !dbg !3455
  %tobool5 = icmp ne i32 %conv, 0, !dbg !3455
  br i1 %tobool5, label %land.rhs, label %land.end, !dbg !3456

land.rhs:                                         ; preds = %land.lhs.true3
  %call6 = call zeroext i8 @dbg_cnt(i32 23), !dbg !3457
  %conv7 = zext i8 %call6 to i32, !dbg !3457
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !3456
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true1, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true1 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool8, %land.rhs ], !dbg !3458
  %land.ext = zext i1 %4 to i32, !dbg !3456
  %conv9 = trunc i32 %land.ext to i8, !dbg !3446
  ret i8 %conv9, !dbg !3459
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_rtl_pre() #0 !dbg !3460 {
entry:
  %call = call zeroext i8 @delete_unreachable_blocks(), !dbg !3461
  call void @df_analyze(), !dbg !3462
  %call1 = call i32 @one_pre_gcse_pass(), !dbg !3463
  %0 = load i32, i32* @flag_rerun_cse_after_global_opts, align 4, !dbg !3464
  %or = or i32 %0, %call1, !dbg !3464
  store i32 %or, i32* @flag_rerun_cse_after_global_opts, align 4, !dbg !3464
  ret i32 0, !dbg !3465
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_rtl_hoist() #0 !dbg !3466 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !3467
  %cmp = icmp sgt i32 %0, 0, !dbg !3468
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !3469

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_gcse, align 4, !dbg !3470
  %tobool = icmp ne i32 %1, 0, !dbg !3470
  br i1 %tobool, label %land.lhs.true1, label %land.end, !dbg !3471

land.lhs.true1:                                   ; preds = %land.lhs.true
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3472
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3472
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !3473
  %bf.load = load i32, i32* %calls_setjmp, align 8, !dbg !3473
  %bf.lshr = lshr i32 %bf.load, 18, !dbg !3473
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3473
  %tobool2 = icmp ne i32 %bf.clear, 0, !dbg !3472
  br i1 %tobool2, label %land.end, label %land.lhs.true3, !dbg !3474

land.lhs.true3:                                   ; preds = %land.lhs.true1
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3475
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3475
  %call = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr4), !dbg !3476
  %conv = zext i8 %call to i32, !dbg !3476
  %tobool5 = icmp ne i32 %conv, 0, !dbg !3476
  br i1 %tobool5, label %land.rhs, label %land.end, !dbg !3477

land.rhs:                                         ; preds = %land.lhs.true3
  %call6 = call zeroext i8 @dbg_cnt(i32 16), !dbg !3478
  %conv7 = zext i8 %call6 to i32, !dbg !3478
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !3477
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true1, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true1 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool8, %land.rhs ], !dbg !3479
  %land.ext = zext i1 %4 to i32, !dbg !3477
  %conv9 = trunc i32 %land.ext to i8, !dbg !3467
  ret i8 %conv9, !dbg !3480
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_rtl_hoist() #0 !dbg !3481 {
entry:
  %call = call zeroext i8 @delete_unreachable_blocks(), !dbg !3482
  call void @df_analyze(), !dbg !3483
  %call1 = call i32 @one_code_hoisting_pass(), !dbg !3484
  %0 = load i32, i32* @flag_rerun_cse_after_global_opts, align 4, !dbg !3485
  %or = or i32 %0, %call1, !dbg !3485
  store i32 %or, i32* @flag_rerun_cse_after_global_opts, align 4, !dbg !3485
  ret i32 0, !dbg !3486
}

declare dso_local void @gt_ggc_mx_rtx_def(i8*) #2

declare dso_local void @gt_pch_nx_rtx_def(i8*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local void @start_sequence() #2

declare dso_local void @end_sequence() #2

declare dso_local zeroext i8 @dbg_cnt(i32) #2

declare dso_local zeroext i8 @delete_unreachable_blocks() #2

declare dso_local i32 @df_set_flags(i32) #2

declare dso_local void @df_analyze() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @one_cprop_pass() #0 !dbg !3487 {
entry:
  %retval = alloca i32, align 4
  %changed = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !3490, metadata !DIExpression()), !dbg !3491
  store i32 0, i32* %changed, align 4, !dbg !3491
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3492
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3492
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3492
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3492
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !3492
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !3492
  %cmp = icmp sle i32 %2, 3, !dbg !3494
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3495

lor.lhs.false:                                    ; preds = %entry
  %call = call zeroext i8 @is_too_expensive(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0)), !dbg !3496
  %conv = zext i8 %call to i32, !dbg !3496
  %tobool = icmp ne i32 %conv, 0, !dbg !3496
  br i1 %tobool, label %if.then, label %if.end, !dbg !3497

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !3498
  br label %return, !dbg !3498

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* @local_const_prop_count, align 4, !dbg !3499
  store i32 0, i32* @global_const_prop_count, align 4, !dbg !3500
  store i32 0, i32* @local_copy_prop_count, align 4, !dbg !3501
  store i32 0, i32* @global_copy_prop_count, align 4, !dbg !3502
  store i32 0, i32* @bytes_used, align 4, !dbg !3503
  %call1 = call i32 @_obstack_begin(%struct.obstack* @gcse_obstack, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !3504
  call void @alloc_gcse_mem(), !dbg !3505
  %call2 = call i32 @local_cprop_pass(), !dbg !3506
  %tobool3 = icmp ne i32 %call2, 0, !dbg !3506
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !3508

if.then4:                                         ; preds = %if.end
  %call5 = call zeroext i8 @delete_unreachable_blocks(), !dbg !3509
  call void @df_analyze(), !dbg !3511
  br label %if.end6, !dbg !3512

if.end6:                                          ; preds = %if.then4, %if.end
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3513
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3513
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !3513
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !3513
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 5, !dbg !3513
  %5 = load i32, i32* %x_last_basic_block, align 8, !dbg !3513
  %conv9 = sext i32 %5 to i64, !dbg !3513
  %call10 = call i8* @xcalloc(i64 %conv9, i64 8), !dbg !3513
  %6 = bitcast i8* %call10 to %struct.rtx_def**, !dbg !3513
  store %struct.rtx_def** %6, %struct.rtx_def*** @implicit_sets, align 8, !dbg !3514
  call void @find_implicit_sets(), !dbg !3515
  call void @alloc_hash_table(%struct.hash_table_d* @set_hash_table, i32 1), !dbg !3516
  call void @compute_hash_table(%struct.hash_table_d* @set_hash_table), !dbg !3517
  %7 = load %struct.rtx_def**, %struct.rtx_def*** @implicit_sets, align 8, !dbg !3518
  %8 = bitcast %struct.rtx_def** %7 to i8*, !dbg !3518
  call void @free(i8* %8), !dbg !3519
  store %struct.rtx_def** null, %struct.rtx_def*** @implicit_sets, align 8, !dbg !3520
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3521
  %tobool11 = icmp ne %struct._IO_FILE* %9, null, !dbg !3521
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !3523

if.then12:                                        ; preds = %if.end6
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3524
  call void @dump_hash_table(%struct._IO_FILE* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), %struct.hash_table_d* @set_hash_table), !dbg !3525
  br label %if.end13, !dbg !3525

if.end13:                                         ; preds = %if.then12, %if.end6
  %11 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @set_hash_table, i32 0, i32 2), align 4, !dbg !3526
  %cmp14 = icmp ugt i32 %11, 0, !dbg !3528
  br i1 %cmp14, label %if.then16, label %if.end69, !dbg !3529

if.then16:                                        ; preds = %if.end13
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3530, metadata !DIExpression()), !dbg !3532
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3533, metadata !DIExpression()), !dbg !3534
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3535
  %add.ptr17 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3535
  %cfg18 = getelementptr inbounds %struct.function, %struct.function* %add.ptr17, i32 0, i32 1, !dbg !3535
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg18, align 8, !dbg !3535
  %x_last_basic_block19 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 5, !dbg !3535
  %14 = load i32, i32* %x_last_basic_block19, align 8, !dbg !3535
  %15 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @set_hash_table, i32 0, i32 2), align 4, !dbg !3536
  call void @alloc_cprop_mem(i32 %14, i32 %15), !dbg !3537
  call void @compute_cprop_data(), !dbg !3538
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3539
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !3539
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 1, !dbg !3539
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !3539
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 0, !dbg !3539
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3539
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 6, !dbg !3539
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3539
  %next_bb22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 6, !dbg !3539
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb22, align 8, !dbg !3539
  store %struct.basic_block_def* %20, %struct.basic_block_def** %bb, align 8, !dbg !3539
  br label %for.cond, !dbg !3539

for.cond:                                         ; preds = %for.inc64, %if.then16
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3541
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3541
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !3541
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !3541
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !3541
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 1, !dbg !3541
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3541
  %cmp25 = icmp ne %struct.basic_block_def* %21, %24, !dbg !3541
  br i1 %cmp25, label %for.body, label %for.end66, !dbg !3539

for.body:                                         ; preds = %for.cond
  call void @reset_opr_set_tables(), !dbg !3543
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3545
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 7, !dbg !3545
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3545
  %26 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3545
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %26, i32 0, i32 0, !dbg !3545
  %27 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3545
  store %struct.rtx_def* %27, %struct.rtx_def** %insn, align 8, !dbg !3545
  br label %for.cond27, !dbg !3545

for.cond27:                                       ; preds = %for.inc, %for.body
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3547
  %tobool28 = icmp ne %struct.rtx_def* %28, null, !dbg !3547
  br i1 %tobool28, label %land.rhs, label %land.end, !dbg !3547

land.rhs:                                         ; preds = %for.cond27
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3547
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3547
  %il29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 7, !dbg !3547
  %rtl30 = bitcast %union.basic_block_il_dependent* %il29 to %struct.rtl_bb_info**, !dbg !3547
  %31 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl30, align 8, !dbg !3547
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %31, i32 0, i32 1, !dbg !3547
  %32 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3547
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !3547
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3547
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3547
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3547
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3547
  %cmp31 = icmp ne %struct.rtx_def* %29, %33, !dbg !3547
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond27
  %34 = phi i1 [ false, %for.cond27 ], [ %cmp31, %land.rhs ], !dbg !3549
  br i1 %34, label %for.body33, label %for.end, !dbg !3545

for.body33:                                       ; preds = %land.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3550
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !3550
  %bf.load = load i32, i32* %36, align 8, !dbg !3550
  %bf.clear = and i32 %bf.load, 65535, !dbg !3550
  %cmp34 = icmp eq i32 %bf.clear, 8, !dbg !3550
  br i1 %cmp34, label %if.then51, label %lor.lhs.false36, !dbg !3550

lor.lhs.false36:                                  ; preds = %for.body33
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3550
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !3550
  %bf.load37 = load i32, i32* %38, align 8, !dbg !3550
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !3550
  %cmp39 = icmp eq i32 %bf.clear38, 7, !dbg !3550
  br i1 %cmp39, label %if.then51, label %lor.lhs.false41, !dbg !3550

lor.lhs.false41:                                  ; preds = %lor.lhs.false36
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3550
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !3550
  %bf.load42 = load i32, i32* %40, align 8, !dbg !3550
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !3550
  %cmp44 = icmp eq i32 %bf.clear43, 9, !dbg !3550
  br i1 %cmp44, label %if.then51, label %lor.lhs.false46, !dbg !3550

lor.lhs.false46:                                  ; preds = %lor.lhs.false41
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3550
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !3550
  %bf.load47 = load i32, i32* %42, align 8, !dbg !3550
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !3550
  %cmp49 = icmp eq i32 %bf.clear48, 10, !dbg !3550
  br i1 %cmp49, label %if.then51, label %if.end59, !dbg !3552

if.then51:                                        ; preds = %lor.lhs.false46, %lor.lhs.false41, %lor.lhs.false36, %for.body33
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3553
  %call52 = call i32 @cprop_insn(%struct.rtx_def* %43), !dbg !3555
  %44 = load i32, i32* %changed, align 4, !dbg !3556
  %or = or i32 %44, %call52, !dbg !3556
  store i32 %or, i32* %changed, align 4, !dbg !3556
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3557
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !3557
  %bf.load53 = load i32, i32* %46, align 8, !dbg !3557
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !3557
  %cmp55 = icmp eq i32 %bf.clear54, 13, !dbg !3557
  br i1 %cmp55, label %if.end58, label %if.then57, !dbg !3559

if.then57:                                        ; preds = %if.then51
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3560
  call void @mark_oprs_set(%struct.rtx_def* %47), !dbg !3561
  br label %if.end58, !dbg !3561

if.end58:                                         ; preds = %if.then57, %if.then51
  br label %if.end59, !dbg !3562

if.end59:                                         ; preds = %if.end58, %lor.lhs.false46
  br label %for.inc, !dbg !3550

for.inc:                                          ; preds = %if.end59
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3547
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !3547
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !3547
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 2, !dbg !3547
  %rt_rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**, !dbg !3547
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx63, align 8, !dbg !3547
  store %struct.rtx_def* %49, %struct.rtx_def** %insn, align 8, !dbg !3547
  br label %for.cond27, !dbg !3547, !llvm.loop !3563

for.end:                                          ; preds = %land.end
  br label %for.inc64, !dbg !3565

for.inc64:                                        ; preds = %for.end
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3541
  %next_bb65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 6, !dbg !3541
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb65, align 8, !dbg !3541
  store %struct.basic_block_def* %51, %struct.basic_block_def** %bb, align 8, !dbg !3541
  br label %for.cond, !dbg !3541, !llvm.loop !3566

for.end66:                                        ; preds = %for.cond
  %call67 = call i32 @bypass_conditional_jumps(), !dbg !3568
  %52 = load i32, i32* %changed, align 4, !dbg !3569
  %or68 = or i32 %52, %call67, !dbg !3569
  store i32 %or68, i32* %changed, align 4, !dbg !3569
  call void @free_cprop_mem(), !dbg !3570
  br label %if.end69, !dbg !3571

if.end69:                                         ; preds = %for.end66, %if.end13
  call void @free_hash_table(%struct.hash_table_d* @set_hash_table), !dbg !3572
  call void @free_gcse_mem(), !dbg !3573
  %53 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !3574
  %54 = bitcast %struct._obstack_chunk* %53 to i8*, !dbg !3574
  %sub.ptr.rhs.cast = ptrtoint i8* %54 to i64, !dbg !3574
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !3574
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !3574
  %55 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !3574
  %cmp70 = icmp sgt i64 %55, 0, !dbg !3574
  br i1 %cmp70, label %land.lhs.true, label %cond.false, !dbg !3574

land.lhs.true:                                    ; preds = %if.end69
  %56 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !3574
  %57 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 4), align 8, !dbg !3574
  %58 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !3574
  %59 = bitcast %struct._obstack_chunk* %58 to i8*, !dbg !3574
  %sub.ptr.lhs.cast = ptrtoint i8* %57 to i64, !dbg !3574
  %sub.ptr.rhs.cast72 = ptrtoint i8* %59 to i64, !dbg !3574
  %sub.ptr.sub73 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast72, !dbg !3574
  %cmp74 = icmp slt i64 %56, %sub.ptr.sub73, !dbg !3574
  br i1 %cmp74, label %cond.true, label %cond.false, !dbg !3574

cond.true:                                        ; preds = %land.lhs.true
  %60 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !3574
  %61 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !3574
  %62 = bitcast %struct._obstack_chunk* %61 to i8*, !dbg !3574
  %add.ptr76 = getelementptr inbounds i8, i8* %62, i64 %60, !dbg !3574
  store i8* %add.ptr76, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 2), align 8, !dbg !3574
  store i8* %add.ptr76, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !3574
  %63 = ptrtoint i8* %add.ptr76 to i64, !dbg !3574
  br label %cond.end, !dbg !3574

cond.false:                                       ; preds = %land.lhs.true, %if.end69
  %64 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !3574
  %65 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !3574
  %66 = bitcast %struct._obstack_chunk* %65 to i8*, !dbg !3574
  %add.ptr77 = getelementptr inbounds i8, i8* %66, i64 %64, !dbg !3574
  call void @obstack_free(%struct.obstack* @gcse_obstack, i8* %add.ptr77), !dbg !3574
  br label %cond.end, !dbg !3574

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %63, %cond.true ], [ 0, %cond.false ], !dbg !3574
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3575
  %tobool78 = icmp ne %struct._IO_FILE* %67, null, !dbg !3575
  br i1 %tobool78, label %if.then79, label %if.end87, !dbg !3577

if.then79:                                        ; preds = %cond.end
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3578
  %call80 = call i8* @current_function_name(), !dbg !3580
  %69 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3581
  %add.ptr81 = getelementptr inbounds %struct.function, %struct.function* %69, i64 0, !dbg !3581
  %cfg82 = getelementptr inbounds %struct.function, %struct.function* %add.ptr81, i32 0, i32 1, !dbg !3581
  %70 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg82, align 8, !dbg !3581
  %x_n_basic_blocks83 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %70, i32 0, i32 3, !dbg !3581
  %71 = load i32, i32* %x_n_basic_blocks83, align 8, !dbg !3581
  %72 = load i32, i32* @bytes_used, align 4, !dbg !3582
  %call84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i64 0, i64 0), i8* %call80, i32 %71, i32 %72), !dbg !3583
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3584
  %74 = load i32, i32* @local_const_prop_count, align 4, !dbg !3585
  %75 = load i32, i32* @local_copy_prop_count, align 4, !dbg !3586
  %call85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0), i32 %74, i32 %75), !dbg !3587
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3588
  %77 = load i32, i32* @global_const_prop_count, align 4, !dbg !3589
  %78 = load i32, i32* @global_copy_prop_count, align 4, !dbg !3590
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.7, i64 0, i64 0), i32 %77, i32 %78), !dbg !3591
  br label %if.end87, !dbg !3592

if.end87:                                         ; preds = %if.then79, %cond.end
  %79 = load i32, i32* %changed, align 4, !dbg !3593
  store i32 %79, i32* %retval, align 4, !dbg !3594
  br label %return, !dbg !3594

return:                                           ; preds = %if.end87, %if.then
  %80 = load i32, i32* %retval, align 4, !dbg !3595
  ret i32 %80, !dbg !3595
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_too_expensive(i8* %pass) #0 !dbg !3596 {
entry:
  %retval = alloca i8, align 1
  %pass.addr = alloca i8*, align 8
  store i8* %pass, i8** %pass.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pass.addr, metadata !3599, metadata !DIExpression()), !dbg !3600
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3601
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3601
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3601
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3601
  %x_n_edges = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 4, !dbg !3601
  %2 = load i32, i32* %x_n_edges, align 4, !dbg !3601
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3603
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3603
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3603
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3603
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 3, !dbg !3603
  %5 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !3603
  %mul = mul nsw i32 %5, 4, !dbg !3604
  %add = add nsw i32 20000, %mul, !dbg !3605
  %cmp = icmp sgt i32 %2, %add, !dbg !3606
  br i1 %cmp, label %if.then, label %if.end, !dbg !3607

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %pass.addr, align 8, !dbg !3608
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3610
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3610
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !3610
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !3610
  %x_n_basic_blocks5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 3, !dbg !3610
  %9 = load i32, i32* %x_n_basic_blocks5, align 8, !dbg !3610
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3611
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3611
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !3611
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !3611
  %x_n_edges8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 4, !dbg !3611
  %12 = load i32, i32* %x_n_edges8, align 4, !dbg !3611
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3612
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !3612
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !3612
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !3612
  %x_n_basic_blocks11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 3, !dbg !3612
  %15 = load i32, i32* %x_n_basic_blocks11, align 8, !dbg !3612
  %div = sdiv i32 %12, %15, !dbg !3613
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 69, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0), i8* %6, i32 %9, i32 %div), !dbg !3614
  store i8 1, i8* %retval, align 1, !dbg !3615
  br label %return, !dbg !3615

if.end:                                           ; preds = %entry
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3616
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !3616
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !3616
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !3616
  %x_n_basic_blocks14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 3, !dbg !3616
  %18 = load i32, i32* %x_n_basic_blocks14, align 8, !dbg !3616
  %call15 = call i32 @max_reg_num(), !dbg !3618
  %add16 = add i32 %call15, 64, !dbg !3618
  %sub = sub i32 %add16, 1, !dbg !3618
  %div17 = udiv i32 %sub, 64, !dbg !3618
  %mul18 = mul i32 %18, %div17, !dbg !3619
  %conv = zext i32 %mul18 to i64, !dbg !3616
  %mul19 = mul i64 %conv, 8, !dbg !3620
  %19 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3621
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %19, i64 23, !dbg !3621
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3621
  %20 = load i32, i32* %value, align 8, !dbg !3621
  %conv20 = sext i32 %20 to i64, !dbg !3621
  %cmp21 = icmp ugt i64 %mul19, %conv20, !dbg !3622
  br i1 %cmp21, label %if.then23, label %if.end29, !dbg !3623

if.then23:                                        ; preds = %if.end
  %21 = load i8*, i8** %pass.addr, align 8, !dbg !3624
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3626
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !3626
  %cfg25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 1, !dbg !3626
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg25, align 8, !dbg !3626
  %x_n_basic_blocks26 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 3, !dbg !3626
  %24 = load i32, i32* %x_n_basic_blocks26, align 8, !dbg !3626
  %call27 = call i32 @max_reg_num(), !dbg !3627
  %call28 = call zeroext i8 (i32, i8*, ...) @warning(i32 69, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0), i8* %21, i32 %24, i32 %call27), !dbg !3628
  store i8 1, i8* %retval, align 1, !dbg !3629
  br label %return, !dbg !3629

if.end29:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3630
  br label %return, !dbg !3630

return:                                           ; preds = %if.end29, %if.then23, %if.then
  %25 = load i8, i8* %retval, align 1, !dbg !3631
  ret i8 %25, !dbg !3631
}

declare dso_local i32 @_obstack_begin(%struct.obstack*, i32, i32, i8* (i64)*, void (i8*)*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @alloc_gcse_mem() #0 !dbg !3632 {
entry:
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3633
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @reg_set_bitmap, align 8, !dbg !3634
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3635
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3635
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3635
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3635
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !3635
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !3635
  %conv = sext i32 %2 to i64, !dbg !3635
  %call1 = call i8* @gcalloc(i64 %conv, i64 8), !dbg !3635
  %3 = bitcast i8* %call1 to %struct.rtx_def**, !dbg !3635
  store %struct.rtx_def** %3, %struct.rtx_def*** @modify_mem_list, align 8, !dbg !3636
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3637
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3637
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !3637
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !3637
  %x_last_basic_block4 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !3637
  %6 = load i32, i32* %x_last_basic_block4, align 8, !dbg !3637
  %conv5 = sext i32 %6 to i64, !dbg !3637
  %call6 = call i8* @gcalloc(i64 %conv5, i64 8), !dbg !3637
  %7 = bitcast i8* %call6 to %struct.rtx_def**, !dbg !3637
  store %struct.rtx_def** %7, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !3638
  %call7 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3639
  store %struct.bitmap_head_def* %call7, %struct.bitmap_head_def** @modify_mem_list_set, align 8, !dbg !3640
  %call8 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3641
  store %struct.bitmap_head_def* %call8, %struct.bitmap_head_def** @blocks_with_calls, align 8, !dbg !3642
  ret void, !dbg !3643
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @local_cprop_pass() #0 !dbg !3644 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %reg_used = alloca %struct.reg_use*, align 8
  %changed = alloca i8, align 1
  %note = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3645, metadata !DIExpression()), !dbg !3646
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3647, metadata !DIExpression()), !dbg !3648
  call void @llvm.dbg.declare(metadata %struct.reg_use** %reg_used, metadata !3649, metadata !DIExpression()), !dbg !3651
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !3652, metadata !DIExpression()), !dbg !3653
  store i8 0, i8* %changed, align 1, !dbg !3653
  call void @cselib_init(i32 0), !dbg !3654
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3655
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3655
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3655
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3655
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3655
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3655
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3655
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3655
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3655
  br label %for.cond, !dbg !3655

for.cond:                                         ; preds = %for.inc50, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3657
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3657
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3657
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3657
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3657
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3657
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3657
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3657
  br i1 %cmp, label %for.body, label %for.end52, !dbg !3655

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3659
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !3659
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3659
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3659
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 0, !dbg !3659
  %10 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3659
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !3659
  br label %for.cond3, !dbg !3659

for.cond3:                                        ; preds = %for.inc44, %for.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3662
  %tobool = icmp ne %struct.rtx_def* %11, null, !dbg !3662
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3662

land.rhs:                                         ; preds = %for.cond3
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3662
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3662
  %il4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !3662
  %rtl5 = bitcast %union.basic_block_il_dependent* %il4 to %struct.rtl_bb_info**, !dbg !3662
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl5, align 8, !dbg !3662
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !3662
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3662
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3662
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3662
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3662
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3662
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3662
  %cmp6 = icmp ne %struct.rtx_def* %12, %16, !dbg !3662
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond3
  %17 = phi i1 [ false, %for.cond3 ], [ %cmp6, %land.rhs ], !dbg !3664
  br i1 %17, label %for.body7, label %for.end49, !dbg !3659

for.body7:                                        ; preds = %land.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3665
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !3665
  %bf.load = load i32, i32* %19, align 8, !dbg !3665
  %bf.clear = and i32 %bf.load, 65535, !dbg !3665
  %cmp8 = icmp eq i32 %bf.clear, 8, !dbg !3665
  br i1 %cmp8, label %if.then, label %lor.lhs.false, !dbg !3665

lor.lhs.false:                                    ; preds = %for.body7
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3665
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !3665
  %bf.load9 = load i32, i32* %21, align 8, !dbg !3665
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !3665
  %cmp11 = icmp eq i32 %bf.clear10, 7, !dbg !3665
  br i1 %cmp11, label %if.then, label %lor.lhs.false12, !dbg !3665

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3665
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !3665
  %bf.load13 = load i32, i32* %23, align 8, !dbg !3665
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !3665
  %cmp15 = icmp eq i32 %bf.clear14, 9, !dbg !3665
  br i1 %cmp15, label %if.then, label %lor.lhs.false16, !dbg !3665

lor.lhs.false16:                                  ; preds = %lor.lhs.false12
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3665
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !3665
  %bf.load17 = load i32, i32* %25, align 8, !dbg !3665
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !3665
  %cmp19 = icmp eq i32 %bf.clear18, 10, !dbg !3665
  br i1 %cmp19, label %if.then, label %if.end43, !dbg !3668

if.then:                                          ; preds = %lor.lhs.false16, %lor.lhs.false12, %lor.lhs.false, %for.body7
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !3669, metadata !DIExpression()), !dbg !3671
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3672
  %call = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %26), !dbg !3673
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !3671
  br label %do.body, !dbg !3674

do.body:                                          ; preds = %do.cond, %if.then
  store i32 0, i32* @reg_use_count, align 4, !dbg !3675
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3677
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !3677
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !3677
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !3677
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !3677
  call void @note_uses(%struct.rtx_def** %rt_rtx23, void (%struct.rtx_def**, i8*)* @local_cprop_find_used_regs, i8* null), !dbg !3678
  %28 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3679
  %tobool24 = icmp ne %struct.rtx_def* %28, null, !dbg !3679
  br i1 %tobool24, label %if.then25, label %if.end, !dbg !3681

if.then25:                                        ; preds = %do.body
  %29 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3682
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !3682
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !3682
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 0, !dbg !3682
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !3682
  call void @local_cprop_find_used_regs(%struct.rtx_def** %rt_rtx29, i8* null), !dbg !3683
  br label %if.end, !dbg !3683

if.end:                                           ; preds = %if.then25, %do.body
  store %struct.reg_use* getelementptr inbounds ([8 x %struct.reg_use], [8 x %struct.reg_use]* @reg_use_table, i64 0, i64 0), %struct.reg_use** %reg_used, align 8, !dbg !3684
  br label %for.cond30, !dbg !3686

for.cond30:                                       ; preds = %for.inc, %if.end
  %30 = load i32, i32* @reg_use_count, align 4, !dbg !3687
  %cmp31 = icmp sgt i32 %30, 0, !dbg !3689
  br i1 %cmp31, label %for.body32, label %for.end, !dbg !3690

for.body32:                                       ; preds = %for.cond30
  %31 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !3691
  %reg_rtx = getelementptr inbounds %struct.reg_use, %struct.reg_use* %31, i32 0, i32 0, !dbg !3694
  %32 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx, align 8, !dbg !3694
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3695
  %call33 = call zeroext i8 @do_local_cprop(%struct.rtx_def* %32, %struct.rtx_def* %33), !dbg !3696
  %tobool34 = icmp ne i8 %call33, 0, !dbg !3696
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !3697

if.then35:                                        ; preds = %for.body32
  store i8 1, i8* %changed, align 1, !dbg !3698
  br label %for.end, !dbg !3700

if.end36:                                         ; preds = %for.body32
  br label %for.inc, !dbg !3701

for.inc:                                          ; preds = %if.end36
  %34 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !3702
  %incdec.ptr = getelementptr inbounds %struct.reg_use, %struct.reg_use* %34, i32 1, !dbg !3702
  store %struct.reg_use* %incdec.ptr, %struct.reg_use** %reg_used, align 8, !dbg !3702
  %35 = load i32, i32* @reg_use_count, align 4, !dbg !3703
  %dec = add nsw i32 %35, -1, !dbg !3703
  store i32 %dec, i32* @reg_use_count, align 4, !dbg !3703
  br label %for.cond30, !dbg !3704, !llvm.loop !3705

for.end:                                          ; preds = %if.then35, %for.cond30
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3707
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !3707
  %bf.load37 = load i32, i32* %37, align 8, !dbg !3707
  %bf.lshr = lshr i32 %bf.load37, 27, !dbg !3707
  %bf.clear38 = and i32 %bf.lshr, 1, !dbg !3707
  %tobool39 = icmp ne i32 %bf.clear38, 0, !dbg !3707
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !3709

if.then40:                                        ; preds = %for.end
  br label %do.end, !dbg !3710

if.end41:                                         ; preds = %for.end
  br label %do.cond, !dbg !3711

do.cond:                                          ; preds = %if.end41
  %38 = load i32, i32* @reg_use_count, align 4, !dbg !3712
  %tobool42 = icmp ne i32 %38, 0, !dbg !3711
  br i1 %tobool42, label %do.body, label %do.end, !dbg !3711, !llvm.loop !3713

do.end:                                           ; preds = %do.cond, %if.then40
  br label %if.end43, !dbg !3715

if.end43:                                         ; preds = %do.end, %lor.lhs.false16
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3716
  call void @cselib_process_insn(%struct.rtx_def* %39), !dbg !3717
  br label %for.inc44, !dbg !3718

for.inc44:                                        ; preds = %if.end43
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3662
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !3662
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !3662
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 2, !dbg !3662
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !3662
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !3662
  store %struct.rtx_def* %41, %struct.rtx_def** %insn, align 8, !dbg !3662
  br label %for.cond3, !dbg !3662, !llvm.loop !3719

for.end49:                                        ; preds = %land.end
  call void @cselib_clear_table(), !dbg !3721
  br label %for.inc50, !dbg !3722

for.inc50:                                        ; preds = %for.end49
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3657
  %next_bb51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 6, !dbg !3657
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb51, align 8, !dbg !3657
  store %struct.basic_block_def* %43, %struct.basic_block_def** %bb, align 8, !dbg !3657
  br label %for.cond, !dbg !3657, !llvm.loop !3723

for.end52:                                        ; preds = %for.cond
  call void @cselib_finish(), !dbg !3725
  %44 = load i8, i8* %changed, align 1, !dbg !3726
  %conv = zext i8 %44 to i32, !dbg !3726
  ret i32 %conv, !dbg !3727
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_implicit_sets() #0 !dbg !3728 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  %count = alloca i32, align 4
  %cond = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3729, metadata !DIExpression()), !dbg !3730
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !3731, metadata !DIExpression()), !dbg !3732
  call void @llvm.dbg.declare(metadata i32* %count, metadata !3733, metadata !DIExpression()), !dbg !3734
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !3735, metadata !DIExpression()), !dbg !3736
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !3737, metadata !DIExpression()), !dbg !3738
  store i32 0, i32* %count, align 4, !dbg !3739
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3740
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3740
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3740
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3740
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3740
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3740
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3740
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3740
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3740
  br label %for.cond, !dbg !3740

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3742
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3742
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3742
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3742
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3742
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3742
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3742
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3742
  br i1 %cmp, label %for.body, label %for.end, !dbg !3740

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3744
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !3744
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3744
  %tobool = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !3744
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3744

cond.true:                                        ; preds = %for.body
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3744
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !3744
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !3744
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !3744
  br label %cond.end, !dbg !3744

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3744

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3744
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond4), !dbg !3744
  %cmp5 = icmp ugt i32 %call, 1, !dbg !3746
  br i1 %cmp5, label %if.then, label %if.end137, !dbg !3747

if.then:                                          ; preds = %cond.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3748
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 7, !dbg !3748
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3748
  %13 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3748
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %13, i32 0, i32 1, !dbg !3748
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3748
  %call6 = call %struct.rtx_def* @fis_get_condition(%struct.rtx_def* %14), !dbg !3750
  store %struct.rtx_def* %call6, %struct.rtx_def** %cond, align 8, !dbg !3751
  %15 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3752
  %tobool7 = icmp ne %struct.rtx_def* %15, null, !dbg !3752
  br i1 %tobool7, label %land.lhs.true, label %if.end136, !dbg !3754

land.lhs.true:                                    ; preds = %if.then
  %16 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3755
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !3755
  %bf.load = load i32, i32* %17, align 8, !dbg !3755
  %bf.clear = and i32 %bf.load, 65535, !dbg !3755
  %cmp8 = icmp eq i32 %bf.clear, 81, !dbg !3756
  br i1 %cmp8, label %land.lhs.true12, label %lor.lhs.false, !dbg !3757

lor.lhs.false:                                    ; preds = %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3758
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !3758
  %bf.load9 = load i32, i32* %19, align 8, !dbg !3758
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !3758
  %cmp11 = icmp eq i32 %bf.clear10, 80, !dbg !3759
  br i1 %cmp11, label %land.lhs.true12, label %if.end136, !dbg !3760

land.lhs.true12:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %20 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3761
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !3761
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3761
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3761
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3761
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3761
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !3761
  %bf.load13 = load i32, i32* %22, align 8, !dbg !3761
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !3761
  %cmp15 = icmp eq i32 %bf.clear14, 37, !dbg !3761
  br i1 %cmp15, label %land.lhs.true16, label %if.end136, !dbg !3762

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %23 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3763
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !3763
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !3763
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 0, !dbg !3763
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !3763
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !3763
  %call21 = call i32 @rhs_regno(%struct.rtx_def* %24), !dbg !3763
  %cmp22 = icmp uge i32 %call21, 53, !dbg !3764
  br i1 %cmp22, label %land.lhs.true23, label %if.end136, !dbg !3765

land.lhs.true23:                                  ; preds = %land.lhs.true16
  %25 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3766
  %call24 = call zeroext i8 @implicit_set_cond_p(%struct.rtx_def* %25), !dbg !3767
  %conv = zext i8 %call24 to i32, !dbg !3767
  %tobool25 = icmp ne i32 %conv, 0, !dbg !3767
  br i1 %tobool25, label %if.then26, label %if.end136, !dbg !3768

if.then26:                                        ; preds = %land.lhs.true23
  %26 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3769
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !3769
  %bf.load27 = load i32, i32* %27, align 8, !dbg !3769
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !3769
  %cmp29 = icmp eq i32 %bf.clear28, 81, !dbg !3771
  br i1 %cmp29, label %cond.true31, label %cond.false65, !dbg !3769

cond.true31:                                      ; preds = %if.then26
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3772
  %succs32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 1, !dbg !3772
  %29 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs32, align 8, !dbg !3772
  %tobool33 = icmp ne %struct.VEC_edge_gc* %29, null, !dbg !3772
  br i1 %tobool33, label %cond.true34, label %cond.false37, !dbg !3772

cond.true34:                                      ; preds = %cond.true31
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3772
  %succs35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !3772
  %31 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs35, align 8, !dbg !3772
  %base36 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %31, i32 0, i32 0, !dbg !3772
  br label %cond.end38, !dbg !3772

cond.false37:                                     ; preds = %cond.true31
  br label %cond.end38, !dbg !3772

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi %struct.VEC_edge_base* [ %base36, %cond.true34 ], [ null, %cond.false37 ], !dbg !3772
  %call40 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond39, i32 0), !dbg !3772
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call40, i32 0, i32 7, !dbg !3772
  %32 = load i32, i32* %flags, align 8, !dbg !3772
  %and = and i32 %32, 1, !dbg !3772
  %tobool41 = icmp ne i32 %and, 0, !dbg !3772
  br i1 %tobool41, label %cond.true42, label %cond.false52, !dbg !3772

cond.true42:                                      ; preds = %cond.end38
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3772
  %succs43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 1, !dbg !3772
  %34 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs43, align 8, !dbg !3772
  %tobool44 = icmp ne %struct.VEC_edge_gc* %34, null, !dbg !3772
  br i1 %tobool44, label %cond.true45, label %cond.false48, !dbg !3772

cond.true45:                                      ; preds = %cond.true42
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3772
  %succs46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 1, !dbg !3772
  %36 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs46, align 8, !dbg !3772
  %base47 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %36, i32 0, i32 0, !dbg !3772
  br label %cond.end49, !dbg !3772

cond.false48:                                     ; preds = %cond.true42
  br label %cond.end49, !dbg !3772

cond.end49:                                       ; preds = %cond.false48, %cond.true45
  %cond50 = phi %struct.VEC_edge_base* [ %base47, %cond.true45 ], [ null, %cond.false48 ], !dbg !3772
  %call51 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond50, i32 1), !dbg !3772
  br label %cond.end62, !dbg !3772

cond.false52:                                     ; preds = %cond.end38
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3772
  %succs53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 1, !dbg !3772
  %38 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs53, align 8, !dbg !3772
  %tobool54 = icmp ne %struct.VEC_edge_gc* %38, null, !dbg !3772
  br i1 %tobool54, label %cond.true55, label %cond.false58, !dbg !3772

cond.true55:                                      ; preds = %cond.false52
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3772
  %succs56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 1, !dbg !3772
  %40 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs56, align 8, !dbg !3772
  %base57 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %40, i32 0, i32 0, !dbg !3772
  br label %cond.end59, !dbg !3772

cond.false58:                                     ; preds = %cond.false52
  br label %cond.end59, !dbg !3772

cond.end59:                                       ; preds = %cond.false58, %cond.true55
  %cond60 = phi %struct.VEC_edge_base* [ %base57, %cond.true55 ], [ null, %cond.false58 ], !dbg !3772
  %call61 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond60, i32 0), !dbg !3772
  br label %cond.end62, !dbg !3772

cond.end62:                                       ; preds = %cond.end59, %cond.end49
  %cond63 = phi %struct.edge_def* [ %call51, %cond.end49 ], [ %call61, %cond.end59 ], !dbg !3772
  %dest64 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond63, i32 0, i32 1, !dbg !3773
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest64, align 8, !dbg !3773
  br label %cond.end101, !dbg !3769

cond.false65:                                     ; preds = %if.then26
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3774
  %succs66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 1, !dbg !3774
  %43 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs66, align 8, !dbg !3774
  %tobool67 = icmp ne %struct.VEC_edge_gc* %43, null, !dbg !3774
  br i1 %tobool67, label %cond.true68, label %cond.false71, !dbg !3774

cond.true68:                                      ; preds = %cond.false65
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3774
  %succs69 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 1, !dbg !3774
  %45 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs69, align 8, !dbg !3774
  %base70 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %45, i32 0, i32 0, !dbg !3774
  br label %cond.end72, !dbg !3774

cond.false71:                                     ; preds = %cond.false65
  br label %cond.end72, !dbg !3774

cond.end72:                                       ; preds = %cond.false71, %cond.true68
  %cond73 = phi %struct.VEC_edge_base* [ %base70, %cond.true68 ], [ null, %cond.false71 ], !dbg !3774
  %call74 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond73, i32 0), !dbg !3774
  %flags75 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call74, i32 0, i32 7, !dbg !3774
  %46 = load i32, i32* %flags75, align 8, !dbg !3774
  %and76 = and i32 %46, 1, !dbg !3774
  %tobool77 = icmp ne i32 %and76, 0, !dbg !3774
  br i1 %tobool77, label %cond.true78, label %cond.false88, !dbg !3774

cond.true78:                                      ; preds = %cond.end72
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3774
  %succs79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 1, !dbg !3774
  %48 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs79, align 8, !dbg !3774
  %tobool80 = icmp ne %struct.VEC_edge_gc* %48, null, !dbg !3774
  br i1 %tobool80, label %cond.true81, label %cond.false84, !dbg !3774

cond.true81:                                      ; preds = %cond.true78
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3774
  %succs82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 1, !dbg !3774
  %50 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs82, align 8, !dbg !3774
  %base83 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %50, i32 0, i32 0, !dbg !3774
  br label %cond.end85, !dbg !3774

cond.false84:                                     ; preds = %cond.true78
  br label %cond.end85, !dbg !3774

cond.end85:                                       ; preds = %cond.false84, %cond.true81
  %cond86 = phi %struct.VEC_edge_base* [ %base83, %cond.true81 ], [ null, %cond.false84 ], !dbg !3774
  %call87 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond86, i32 0), !dbg !3774
  br label %cond.end98, !dbg !3774

cond.false88:                                     ; preds = %cond.end72
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3774
  %succs89 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 1, !dbg !3774
  %52 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs89, align 8, !dbg !3774
  %tobool90 = icmp ne %struct.VEC_edge_gc* %52, null, !dbg !3774
  br i1 %tobool90, label %cond.true91, label %cond.false94, !dbg !3774

cond.true91:                                      ; preds = %cond.false88
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3774
  %succs92 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 1, !dbg !3774
  %54 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs92, align 8, !dbg !3774
  %base93 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %54, i32 0, i32 0, !dbg !3774
  br label %cond.end95, !dbg !3774

cond.false94:                                     ; preds = %cond.false88
  br label %cond.end95, !dbg !3774

cond.end95:                                       ; preds = %cond.false94, %cond.true91
  %cond96 = phi %struct.VEC_edge_base* [ %base93, %cond.true91 ], [ null, %cond.false94 ], !dbg !3774
  %call97 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond96, i32 1), !dbg !3774
  br label %cond.end98, !dbg !3774

cond.end98:                                       ; preds = %cond.end95, %cond.end85
  %cond99 = phi %struct.edge_def* [ %call87, %cond.end85 ], [ %call97, %cond.end95 ], !dbg !3774
  %dest100 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond99, i32 0, i32 1, !dbg !3775
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %dest100, align 8, !dbg !3775
  br label %cond.end101, !dbg !3769

cond.end101:                                      ; preds = %cond.end98, %cond.end62
  %cond102 = phi %struct.basic_block_def* [ %41, %cond.end62 ], [ %55, %cond.end98 ], !dbg !3769
  store %struct.basic_block_def* %cond102, %struct.basic_block_def** %dest, align 8, !dbg !3776
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3777
  %tobool103 = icmp ne %struct.basic_block_def* %56, null, !dbg !3777
  br i1 %tobool103, label %land.lhs.true104, label %if.end135, !dbg !3779

land.lhs.true104:                                 ; preds = %cond.end101
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3780
  %call105 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %57), !dbg !3781
  %conv106 = zext i8 %call105 to i32, !dbg !3781
  %tobool107 = icmp ne i32 %conv106, 0, !dbg !3781
  br i1 %tobool107, label %land.lhs.true108, label %if.end135, !dbg !3782

land.lhs.true108:                                 ; preds = %land.lhs.true104
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3783
  %59 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3784
  %add.ptr109 = getelementptr inbounds %struct.function, %struct.function* %59, i64 0, !dbg !3784
  %cfg110 = getelementptr inbounds %struct.function, %struct.function* %add.ptr109, i32 0, i32 1, !dbg !3784
  %60 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg110, align 8, !dbg !3784
  %x_exit_block_ptr111 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %60, i32 0, i32 1, !dbg !3784
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr111, align 8, !dbg !3784
  %cmp112 = icmp ne %struct.basic_block_def* %58, %61, !dbg !3785
  br i1 %cmp112, label %if.then114, label %if.end135, !dbg !3786

if.then114:                                       ; preds = %land.lhs.true108
  %62 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3787
  %u115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !3787
  %fld116 = bitcast %union.u* %u115 to [1 x %union.rtunion_def]*, !dbg !3787
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i64 0, i64 0, !dbg !3787
  %rt_rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**, !dbg !3787
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx118, align 8, !dbg !3787
  %64 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3787
  %u119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !3787
  %fld120 = bitcast %union.u* %u119 to [1 x %union.rtunion_def]*, !dbg !3787
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i64 0, i64 1, !dbg !3787
  %rt_rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**, !dbg !3787
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx122, align 8, !dbg !3787
  %call123 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %63, %struct.rtx_def* %65), !dbg !3787
  store %struct.rtx_def* %call123, %struct.rtx_def** %new_rtx, align 8, !dbg !3789
  %66 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !3790
  %67 = load %struct.rtx_def**, %struct.rtx_def*** @implicit_sets, align 8, !dbg !3791
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3792
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 9, !dbg !3793
  %69 = load i32, i32* %index, align 8, !dbg !3793
  %idxprom = sext i32 %69 to i64, !dbg !3791
  %arrayidx124 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %67, i64 %idxprom, !dbg !3791
  store %struct.rtx_def* %66, %struct.rtx_def** %arrayidx124, align 8, !dbg !3794
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3795
  %tobool125 = icmp ne %struct._IO_FILE* %70, null, !dbg !3795
  br i1 %tobool125, label %if.then126, label %if.end, !dbg !3797

if.then126:                                       ; preds = %if.then114
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3798
  %72 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !3800
  %u127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !3800
  %fld128 = bitcast %union.u* %u127 to [1 x %union.rtunion_def]*, !dbg !3800
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i64 0, i64 0, !dbg !3800
  %rt_rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**, !dbg !3800
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx130, align 8, !dbg !3800
  %call131 = call i32 @rhs_regno(%struct.rtx_def* %73), !dbg !3800
  %call132 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i64 0, i64 0), i32 %call131), !dbg !3801
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3802
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3803
  %index133 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 9, !dbg !3804
  %76 = load i32, i32* %index133, align 8, !dbg !3804
  %call134 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i64 0, i64 0), i32 %76), !dbg !3805
  br label %if.end, !dbg !3806

if.end:                                           ; preds = %if.then126, %if.then114
  %77 = load i32, i32* %count, align 4, !dbg !3807
  %inc = add i32 %77, 1, !dbg !3807
  store i32 %inc, i32* %count, align 4, !dbg !3807
  br label %if.end135, !dbg !3808

if.end135:                                        ; preds = %if.end, %land.lhs.true108, %land.lhs.true104, %cond.end101
  br label %if.end136, !dbg !3809

if.end136:                                        ; preds = %if.end135, %land.lhs.true23, %land.lhs.true16, %land.lhs.true12, %lor.lhs.false, %if.then
  br label %if.end137, !dbg !3810

if.end137:                                        ; preds = %if.end136, %cond.end
  br label %for.inc, !dbg !3811

for.inc:                                          ; preds = %if.end137
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3742
  %next_bb138 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 6, !dbg !3742
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb138, align 8, !dbg !3742
  store %struct.basic_block_def* %79, %struct.basic_block_def** %bb, align 8, !dbg !3742
  br label %for.cond, !dbg !3742, !llvm.loop !3812

for.end:                                          ; preds = %for.cond
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3814
  %tobool139 = icmp ne %struct._IO_FILE* %80, null, !dbg !3814
  br i1 %tobool139, label %if.then140, label %if.end142, !dbg !3816

if.then140:                                       ; preds = %for.end
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3817
  %82 = load i32, i32* %count, align 4, !dbg !3818
  %call141 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %81, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i64 0, i64 0), i32 %82), !dbg !3819
  br label %if.end142, !dbg !3819

if.end142:                                        ; preds = %if.then140, %for.end
  ret void, !dbg !3820
}

; Function Attrs: noinline nounwind uwtable
define internal void @alloc_hash_table(%struct.hash_table_d* %table, i32 %set_p) #0 !dbg !3821 {
entry:
  %table.addr = alloca %struct.hash_table_d*, align 8
  %set_p.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !3825, metadata !DIExpression()), !dbg !3826
  store i32 %set_p, i32* %set_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set_p.addr, metadata !3827, metadata !DIExpression()), !dbg !3828
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3829, metadata !DIExpression()), !dbg !3830
  %call = call i32 @get_max_insn_count(), !dbg !3831
  store i32 %call, i32* %n, align 4, !dbg !3832
  %0 = load i32, i32* %n, align 4, !dbg !3833
  %div = sdiv i32 %0, 4, !dbg !3834
  %1 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3835
  %size = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %1, i32 0, i32 1, !dbg !3836
  store i32 %div, i32* %size, align 8, !dbg !3837
  %2 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3838
  %size1 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %2, i32 0, i32 1, !dbg !3840
  %3 = load i32, i32* %size1, align 8, !dbg !3840
  %cmp = icmp ult i32 %3, 11, !dbg !3841
  br i1 %cmp, label %if.then, label %if.end, !dbg !3842

if.then:                                          ; preds = %entry
  %4 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3843
  %size2 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %4, i32 0, i32 1, !dbg !3844
  store i32 11, i32* %size2, align 8, !dbg !3845
  br label %if.end, !dbg !3843

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3846
  %size3 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %5, i32 0, i32 1, !dbg !3847
  %6 = load i32, i32* %size3, align 8, !dbg !3848
  %or = or i32 %6, 1, !dbg !3848
  store i32 %or, i32* %size3, align 8, !dbg !3848
  %7 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3849
  %size4 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %7, i32 0, i32 1, !dbg !3850
  %8 = load i32, i32* %size4, align 8, !dbg !3850
  %conv = zext i32 %8 to i64, !dbg !3849
  %mul = mul i64 %conv, 8, !dbg !3851
  %conv5 = trunc i64 %mul to i32, !dbg !3849
  store i32 %conv5, i32* %n, align 4, !dbg !3852
  %9 = load i32, i32* %n, align 4, !dbg !3853
  %conv6 = sext i32 %9 to i64, !dbg !3853
  %call7 = call i8* @gmalloc(i64 %conv6), !dbg !3853
  %10 = bitcast i8* %call7 to %struct.expr**, !dbg !3853
  %11 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3854
  %table8 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %11, i32 0, i32 0, !dbg !3855
  store %struct.expr** %10, %struct.expr*** %table8, align 8, !dbg !3856
  %12 = load i32, i32* %set_p.addr, align 4, !dbg !3857
  %13 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3858
  %set_p9 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %13, i32 0, i32 3, !dbg !3859
  store i32 %12, i32* %set_p9, align 8, !dbg !3860
  ret void, !dbg !3861
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_hash_table(%struct.hash_table_d* %table) #0 !dbg !3862 {
entry:
  %table.addr = alloca %struct.hash_table_d*, align 8
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !3865, metadata !DIExpression()), !dbg !3866
  %0 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3867
  %n_elems = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %0, i32 0, i32 2, !dbg !3868
  store i32 0, i32* %n_elems, align 4, !dbg !3869
  %1 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3870
  %table1 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %1, i32 0, i32 0, !dbg !3871
  %2 = load %struct.expr**, %struct.expr*** %table1, align 8, !dbg !3871
  %3 = bitcast %struct.expr** %2 to i8*, !dbg !3872
  %4 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3873
  %size = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %4, i32 0, i32 1, !dbg !3874
  %5 = load i32, i32* %size, align 8, !dbg !3874
  %conv = zext i32 %5 to i64, !dbg !3873
  %mul = mul i64 %conv, 8, !dbg !3875
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 %mul, i1 false), !dbg !3872
  %6 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3876
  call void @compute_hash_table_work(%struct.hash_table_d* %6), !dbg !3877
  ret void, !dbg !3878
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_hash_table(%struct._IO_FILE* %file, i8* %name, %struct.hash_table_d* %table) #0 !dbg !3879 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %name.addr = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table_d*, align 8
  %i = alloca i32, align 4
  %flat_table = alloca %struct.expr**, align 8
  %hash_val = alloca i32*, align 8
  %expr = alloca %struct.expr*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3932, metadata !DIExpression()), !dbg !3933
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !3936, metadata !DIExpression()), !dbg !3937
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3938, metadata !DIExpression()), !dbg !3939
  call void @llvm.dbg.declare(metadata %struct.expr*** %flat_table, metadata !3940, metadata !DIExpression()), !dbg !3941
  call void @llvm.dbg.declare(metadata i32** %hash_val, metadata !3942, metadata !DIExpression()), !dbg !3943
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !3944, metadata !DIExpression()), !dbg !3945
  %0 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3946
  %n_elems = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %0, i32 0, i32 2, !dbg !3946
  %1 = load i32, i32* %n_elems, align 4, !dbg !3946
  %conv = zext i32 %1 to i64, !dbg !3946
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !3946
  %2 = bitcast i8* %call to %struct.expr**, !dbg !3946
  store %struct.expr** %2, %struct.expr*** %flat_table, align 8, !dbg !3947
  %3 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3948
  %n_elems1 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %3, i32 0, i32 2, !dbg !3948
  %4 = load i32, i32* %n_elems1, align 4, !dbg !3948
  %conv2 = zext i32 %4 to i64, !dbg !3948
  %mul = mul i64 4, %conv2, !dbg !3948
  %call3 = call i8* @xmalloc(i64 %mul), !dbg !3948
  %5 = bitcast i8* %call3 to i32*, !dbg !3948
  store i32* %5, i32** %hash_val, align 8, !dbg !3949
  store i32 0, i32* %i, align 4, !dbg !3950
  br label %for.cond, !dbg !3952

for.cond:                                         ; preds = %for.inc15, %entry
  %6 = load i32, i32* %i, align 4, !dbg !3953
  %7 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3955
  %size = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %7, i32 0, i32 1, !dbg !3956
  %8 = load i32, i32* %size, align 8, !dbg !3956
  %cmp = icmp slt i32 %6, %8, !dbg !3957
  br i1 %cmp, label %for.body, label %for.end16, !dbg !3958

for.body:                                         ; preds = %for.cond
  %9 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3959
  %table5 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %9, i32 0, i32 0, !dbg !3961
  %10 = load %struct.expr**, %struct.expr*** %table5, align 8, !dbg !3961
  %11 = load i32, i32* %i, align 4, !dbg !3962
  %idxprom = sext i32 %11 to i64, !dbg !3959
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %10, i64 %idxprom, !dbg !3959
  %12 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !3959
  store %struct.expr* %12, %struct.expr** %expr, align 8, !dbg !3963
  br label %for.cond6, !dbg !3964

for.cond6:                                        ; preds = %for.inc, %for.body
  %13 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !3965
  %cmp7 = icmp ne %struct.expr* %13, null, !dbg !3967
  br i1 %cmp7, label %for.body9, label %for.end, !dbg !3968

for.body9:                                        ; preds = %for.cond6
  %14 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !3969
  %15 = load %struct.expr**, %struct.expr*** %flat_table, align 8, !dbg !3971
  %16 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !3972
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %16, i32 0, i32 1, !dbg !3973
  %17 = load i32, i32* %bitmap_index, align 8, !dbg !3973
  %idxprom10 = sext i32 %17 to i64, !dbg !3971
  %arrayidx11 = getelementptr inbounds %struct.expr*, %struct.expr** %15, i64 %idxprom10, !dbg !3971
  store %struct.expr* %14, %struct.expr** %arrayidx11, align 8, !dbg !3974
  %18 = load i32, i32* %i, align 4, !dbg !3975
  %19 = load i32*, i32** %hash_val, align 8, !dbg !3976
  %20 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !3977
  %bitmap_index12 = getelementptr inbounds %struct.expr, %struct.expr* %20, i32 0, i32 1, !dbg !3978
  %21 = load i32, i32* %bitmap_index12, align 8, !dbg !3978
  %idxprom13 = sext i32 %21 to i64, !dbg !3976
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i64 %idxprom13, !dbg !3976
  store i32 %18, i32* %arrayidx14, align 4, !dbg !3979
  br label %for.inc, !dbg !3980

for.inc:                                          ; preds = %for.body9
  %22 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !3981
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %22, i32 0, i32 2, !dbg !3982
  %23 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !3982
  store %struct.expr* %23, %struct.expr** %expr, align 8, !dbg !3983
  br label %for.cond6, !dbg !3984, !llvm.loop !3985

for.end:                                          ; preds = %for.cond6
  br label %for.inc15, !dbg !3986

for.inc15:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4, !dbg !3987
  %inc = add nsw i32 %24, 1, !dbg !3987
  store i32 %inc, i32* %i, align 4, !dbg !3987
  br label %for.cond, !dbg !3988, !llvm.loop !3989

for.end16:                                        ; preds = %for.cond
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3991
  %26 = load i8*, i8** %name.addr, align 8, !dbg !3992
  %27 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3993
  %size17 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %27, i32 0, i32 1, !dbg !3994
  %28 = load i32, i32* %size17, align 8, !dbg !3994
  %29 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !3995
  %n_elems18 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %29, i32 0, i32 2, !dbg !3996
  %30 = load i32, i32* %n_elems18, align 4, !dbg !3996
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.22, i64 0, i64 0), i8* %26, i32 %28, i32 %30), !dbg !3997
  store i32 0, i32* %i, align 4, !dbg !3998
  br label %for.cond20, !dbg !4000

for.cond20:                                       ; preds = %for.inc37, %for.end16
  %31 = load i32, i32* %i, align 4, !dbg !4001
  %32 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !4003
  %n_elems21 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %32, i32 0, i32 2, !dbg !4004
  %33 = load i32, i32* %n_elems21, align 4, !dbg !4004
  %cmp22 = icmp slt i32 %31, %33, !dbg !4005
  br i1 %cmp22, label %for.body24, label %for.end39, !dbg !4006

for.body24:                                       ; preds = %for.cond20
  %34 = load %struct.expr**, %struct.expr*** %flat_table, align 8, !dbg !4007
  %35 = load i32, i32* %i, align 4, !dbg !4009
  %idxprom25 = sext i32 %35 to i64, !dbg !4007
  %arrayidx26 = getelementptr inbounds %struct.expr*, %struct.expr** %34, i64 %idxprom25, !dbg !4007
  %36 = load %struct.expr*, %struct.expr** %arrayidx26, align 8, !dbg !4007
  %cmp27 = icmp ne %struct.expr* %36, null, !dbg !4010
  br i1 %cmp27, label %if.then, label %if.end, !dbg !4011

if.then:                                          ; preds = %for.body24
  %37 = load %struct.expr**, %struct.expr*** %flat_table, align 8, !dbg !4012
  %38 = load i32, i32* %i, align 4, !dbg !4014
  %idxprom29 = sext i32 %38 to i64, !dbg !4012
  %arrayidx30 = getelementptr inbounds %struct.expr*, %struct.expr** %37, i64 %idxprom29, !dbg !4012
  %39 = load %struct.expr*, %struct.expr** %arrayidx30, align 8, !dbg !4012
  store %struct.expr* %39, %struct.expr** %expr, align 8, !dbg !4015
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4016
  %41 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !4017
  %bitmap_index31 = getelementptr inbounds %struct.expr, %struct.expr* %41, i32 0, i32 1, !dbg !4018
  %42 = load i32, i32* %bitmap_index31, align 8, !dbg !4018
  %43 = load i32*, i32** %hash_val, align 8, !dbg !4019
  %44 = load i32, i32* %i, align 4, !dbg !4020
  %idxprom32 = sext i32 %44 to i64, !dbg !4019
  %arrayidx33 = getelementptr inbounds i32, i32* %43, i64 %idxprom32, !dbg !4019
  %45 = load i32, i32* %arrayidx33, align 4, !dbg !4019
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.23, i64 0, i64 0), i32 %42, i32 %45), !dbg !4021
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4022
  %47 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !4023
  %expr35 = getelementptr inbounds %struct.expr, %struct.expr* %47, i32 0, i32 0, !dbg !4024
  %48 = load %struct.rtx_def*, %struct.rtx_def** %expr35, align 8, !dbg !4024
  call void @print_rtl(%struct._IO_FILE* %46, %struct.rtx_def* %48), !dbg !4025
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4026
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4027
  br label %if.end, !dbg !4028

if.end:                                           ; preds = %if.then, %for.body24
  br label %for.inc37, !dbg !4029

for.inc37:                                        ; preds = %if.end
  %50 = load i32, i32* %i, align 4, !dbg !4030
  %inc38 = add nsw i32 %50, 1, !dbg !4030
  store i32 %inc38, i32* %i, align 4, !dbg !4030
  br label %for.cond20, !dbg !4031, !llvm.loop !4032

for.end39:                                        ; preds = %for.cond20
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4034
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4035
  %52 = load %struct.expr**, %struct.expr*** %flat_table, align 8, !dbg !4036
  %53 = bitcast %struct.expr** %52 to i8*, !dbg !4036
  call void @free(i8* %53), !dbg !4037
  %54 = load i32*, i32** %hash_val, align 8, !dbg !4038
  %55 = bitcast i32* %54 to i8*, !dbg !4038
  call void @free(i8* %55), !dbg !4039
  ret void, !dbg !4040
}

; Function Attrs: noinline nounwind uwtable
define internal void @alloc_cprop_mem(i32 %n_blocks, i32 %n_sets) #0 !dbg !4041 {
entry:
  %n_blocks.addr = alloca i32, align 4
  %n_sets.addr = alloca i32, align 4
  store i32 %n_blocks, i32* %n_blocks.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_blocks.addr, metadata !4044, metadata !DIExpression()), !dbg !4045
  store i32 %n_sets, i32* %n_sets.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_sets.addr, metadata !4046, metadata !DIExpression()), !dbg !4047
  %0 = load i32, i32* %n_blocks.addr, align 4, !dbg !4048
  %1 = load i32, i32* %n_sets.addr, align 4, !dbg !4049
  %call = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %0, i32 %1), !dbg !4050
  store %struct.simple_bitmap_def** %call, %struct.simple_bitmap_def*** @cprop_pavloc, align 8, !dbg !4051
  %2 = load i32, i32* %n_blocks.addr, align 4, !dbg !4052
  %3 = load i32, i32* %n_sets.addr, align 4, !dbg !4053
  %call1 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %2, i32 %3), !dbg !4054
  store %struct.simple_bitmap_def** %call1, %struct.simple_bitmap_def*** @cprop_absaltered, align 8, !dbg !4055
  %4 = load i32, i32* %n_blocks.addr, align 4, !dbg !4056
  %5 = load i32, i32* %n_sets.addr, align 4, !dbg !4057
  %call2 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %4, i32 %5), !dbg !4058
  store %struct.simple_bitmap_def** %call2, %struct.simple_bitmap_def*** @cprop_avin, align 8, !dbg !4059
  %6 = load i32, i32* %n_blocks.addr, align 4, !dbg !4060
  %7 = load i32, i32* %n_sets.addr, align 4, !dbg !4061
  %call3 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %6, i32 %7), !dbg !4062
  store %struct.simple_bitmap_def** %call3, %struct.simple_bitmap_def*** @cprop_avout, align 8, !dbg !4063
  ret void, !dbg !4064
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_cprop_data() #0 !dbg !4065 {
entry:
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_absaltered, align 8, !dbg !4066
  %1 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_pavloc, align 8, !dbg !4067
  call void @compute_local_properties(%struct.simple_bitmap_def** %0, %struct.simple_bitmap_def** %1, %struct.simple_bitmap_def** null, %struct.hash_table_d* @set_hash_table), !dbg !4068
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_pavloc, align 8, !dbg !4069
  %3 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_absaltered, align 8, !dbg !4070
  %4 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_avout, align 8, !dbg !4071
  %5 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_avin, align 8, !dbg !4072
  call void @compute_available(%struct.simple_bitmap_def** %2, %struct.simple_bitmap_def** %3, %struct.simple_bitmap_def** %4, %struct.simple_bitmap_def** %5), !dbg !4073
  ret void, !dbg !4074
}

; Function Attrs: noinline nounwind uwtable
define internal void @reset_opr_set_tables() #0 !dbg !4075 {
entry:
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @reg_set_bitmap, align 8, !dbg !4076
  call void @bitmap_clear(%struct.bitmap_head_def* %0), !dbg !4076
  call void @clear_modify_mem_tables(), !dbg !4077
  ret void, !dbg !4078
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cprop_insn(%struct.rtx_def* %insn) #0 !dbg !4079 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %reg_used = alloca %struct.reg_use*, align 8
  %changed = alloca i32, align 4
  %note = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %pat = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.expr*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4082, metadata !DIExpression()), !dbg !4083
  call void @llvm.dbg.declare(metadata %struct.reg_use** %reg_used, metadata !4084, metadata !DIExpression()), !dbg !4085
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !4086, metadata !DIExpression()), !dbg !4087
  store i32 0, i32* %changed, align 4, !dbg !4087
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4088, metadata !DIExpression()), !dbg !4089
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4090
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4090
  %bf.load = load i32, i32* %1, align 8, !dbg !4090
  %bf.clear = and i32 %bf.load, 65535, !dbg !4090
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4090
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !4090

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4090
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4090
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4090
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4090
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4090
  br i1 %cmp3, label %if.end, label %lor.lhs.false4, !dbg !4090

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4090
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4090
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4090
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4090
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4090
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !4090

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4090
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4090
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4090
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4090
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4090
  br i1 %cmp11, label %if.end, label %if.then, !dbg !4092

if.then:                                          ; preds = %lor.lhs.false8
  store i32 0, i32* %retval, align 4, !dbg !4093
  br label %return, !dbg !4093

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  store i32 0, i32* @reg_use_count, align 4, !dbg !4094
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4095
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4095
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4095
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4095
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4095
  call void @note_uses(%struct.rtx_def** %rt_rtx, void (%struct.rtx_def**, i8*)* @find_used_regs, i8* null), !dbg !4096
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4097
  %call = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %9), !dbg !4098
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !4099
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4100
  %tobool = icmp ne %struct.rtx_def* %10, null, !dbg !4100
  br i1 %tobool, label %if.then12, label %if.end17, !dbg !4102

if.then12:                                        ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4103
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4103
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !4103
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !4103
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !4103
  call void @find_used_regs(%struct.rtx_def** %rt_rtx16, i8* null), !dbg !4104
  br label %if.end17, !dbg !4104

if.end17:                                         ; preds = %if.then12, %if.end
  store %struct.reg_use* getelementptr inbounds ([8 x %struct.reg_use], [8 x %struct.reg_use]* @reg_use_table, i64 0, i64 0), %struct.reg_use** %reg_used, align 8, !dbg !4105
  br label %for.cond, !dbg !4107

for.cond:                                         ; preds = %for.inc, %if.end17
  %12 = load i32, i32* @reg_use_count, align 4, !dbg !4108
  %cmp18 = icmp sgt i32 %12, 0, !dbg !4110
  br i1 %cmp18, label %for.body, label %for.end, !dbg !4111

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4112, metadata !DIExpression()), !dbg !4114
  %13 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !4115
  %reg_rtx = getelementptr inbounds %struct.reg_use, %struct.reg_use* %13, i32 0, i32 0, !dbg !4115
  %14 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx, align 8, !dbg !4115
  %call19 = call i32 @rhs_regno(%struct.rtx_def* %14), !dbg !4115
  store i32 %call19, i32* %regno, align 4, !dbg !4114
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !4116, metadata !DIExpression()), !dbg !4117
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !4118, metadata !DIExpression()), !dbg !4119
  call void @llvm.dbg.declare(metadata %struct.expr** %set, metadata !4120, metadata !DIExpression()), !dbg !4121
  %15 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !4122
  %reg_rtx20 = getelementptr inbounds %struct.reg_use, %struct.reg_use* %15, i32 0, i32 0, !dbg !4124
  %16 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx20, align 8, !dbg !4124
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4125
  %call21 = call i32 @oprs_not_set_p(%struct.rtx_def* %16, %struct.rtx_def* %17), !dbg !4126
  %tobool22 = icmp ne i32 %call21, 0, !dbg !4126
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !4127

if.then23:                                        ; preds = %for.body
  br label %for.inc, !dbg !4128

if.end24:                                         ; preds = %for.body
  %18 = load i32, i32* %regno, align 4, !dbg !4129
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4130
  %call25 = call %struct.expr* @find_avail_set(i32 %18, %struct.rtx_def* %19), !dbg !4131
  store %struct.expr* %call25, %struct.expr** %set, align 8, !dbg !4132
  %20 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !4133
  %tobool26 = icmp ne %struct.expr* %20, null, !dbg !4133
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !4135

if.then27:                                        ; preds = %if.end24
  br label %for.inc, !dbg !4136

if.end28:                                         ; preds = %if.end24
  %21 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !4137
  %expr = getelementptr inbounds %struct.expr, %struct.expr* %21, i32 0, i32 0, !dbg !4138
  %22 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4138
  store %struct.rtx_def* %22, %struct.rtx_def** %pat, align 8, !dbg !4139
  %23 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4140
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4140
  %bf.load29 = load i32, i32* %24, align 8, !dbg !4140
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !4140
  %cmp31 = icmp eq i32 %bf.clear30, 23, !dbg !4140
  br i1 %cmp31, label %cond.false, label %cond.true, !dbg !4140

cond.true:                                        ; preds = %if.end28
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 2554, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !4140
  br label %cond.end, !dbg !4140

cond.false:                                       ; preds = %if.end28
  br label %cond.end, !dbg !4140

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4140
  %25 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4141
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4141
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !4141
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 1, !dbg !4141
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !4141
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !4141
  store %struct.rtx_def* %26, %struct.rtx_def** %src, align 8, !dbg !4142
  %27 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4143
  %call36 = call zeroext i8 @gcse_constant_p(%struct.rtx_def* %27), !dbg !4145
  %tobool37 = icmp ne i8 %call36, 0, !dbg !4145
  br i1 %tobool37, label %if.then38, label %if.else, !dbg !4146

if.then38:                                        ; preds = %cond.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4147
  %29 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !4150
  %reg_rtx39 = getelementptr inbounds %struct.reg_use, %struct.reg_use* %29, i32 0, i32 0, !dbg !4151
  %30 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx39, align 8, !dbg !4151
  %31 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4152
  %call40 = call zeroext i8 @constprop_register(%struct.rtx_def* %28, %struct.rtx_def* %30, %struct.rtx_def* %31), !dbg !4153
  %tobool41 = icmp ne i8 %call40, 0, !dbg !4153
  br i1 %tobool41, label %if.then42, label %if.end57, !dbg !4154

if.then42:                                        ; preds = %if.then38
  store i32 1, i32* %changed, align 4, !dbg !4155
  %32 = load i32, i32* @global_const_prop_count, align 4, !dbg !4157
  %inc = add nsw i32 %32, 1, !dbg !4157
  store i32 %inc, i32* @global_const_prop_count, align 4, !dbg !4157
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4158
  %cmp43 = icmp ne %struct._IO_FILE* %33, null, !dbg !4160
  br i1 %cmp43, label %if.then44, label %if.end51, !dbg !4161

if.then44:                                        ; preds = %if.then42
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4162
  %35 = load i32, i32* %regno, align 4, !dbg !4164
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i32 %35), !dbg !4165
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4166
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4167
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !4167
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !4167
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !4167
  %rt_int = bitcast %union.rtunion_def* %arrayidx48 to i32*, !dbg !4167
  %38 = load i32, i32* %rt_int, align 8, !dbg !4167
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 %38), !dbg !4168
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4169
  %40 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4170
  call void @print_rtl(%struct._IO_FILE* %39, %struct.rtx_def* %40), !dbg !4171
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4172
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4173
  br label %if.end51, !dbg !4174

if.end51:                                         ; preds = %if.then44, %if.then42
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4175
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !4175
  %bf.load52 = load i32, i32* %43, align 8, !dbg !4175
  %bf.lshr = lshr i32 %bf.load52, 27, !dbg !4175
  %bf.clear53 = and i32 %bf.lshr, 1, !dbg !4175
  %tobool54 = icmp ne i32 %bf.clear53, 0, !dbg !4175
  br i1 %tobool54, label %if.then55, label %if.end56, !dbg !4177

if.then55:                                        ; preds = %if.end51
  store i32 1, i32* %retval, align 4, !dbg !4178
  br label %return, !dbg !4178

if.end56:                                         ; preds = %if.end51
  br label %if.end57, !dbg !4179

if.end57:                                         ; preds = %if.end56, %if.then38
  br label %if.end84, !dbg !4180

if.else:                                          ; preds = %cond.end
  %44 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4181
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !4181
  %bf.load58 = load i32, i32* %45, align 8, !dbg !4181
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !4181
  %cmp60 = icmp eq i32 %bf.clear59, 37, !dbg !4181
  br i1 %cmp60, label %land.lhs.true, label %if.end83, !dbg !4183

land.lhs.true:                                    ; preds = %if.else
  %46 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4184
  %call61 = call i32 @rhs_regno(%struct.rtx_def* %46), !dbg !4184
  %cmp62 = icmp uge i32 %call61, 53, !dbg !4185
  br i1 %cmp62, label %land.lhs.true63, label %if.end83, !dbg !4186

land.lhs.true63:                                  ; preds = %land.lhs.true
  %47 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4187
  %call64 = call i32 @rhs_regno(%struct.rtx_def* %47), !dbg !4187
  %48 = load i32, i32* %regno, align 4, !dbg !4188
  %cmp65 = icmp ne i32 %call64, %48, !dbg !4189
  br i1 %cmp65, label %if.then66, label %if.end83, !dbg !4190

if.then66:                                        ; preds = %land.lhs.true63
  %49 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !4191
  %reg_rtx67 = getelementptr inbounds %struct.reg_use, %struct.reg_use* %49, i32 0, i32 0, !dbg !4194
  %50 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx67, align 8, !dbg !4194
  %51 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4195
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4196
  %call68 = call i32 @try_replace_reg(%struct.rtx_def* %50, %struct.rtx_def* %51, %struct.rtx_def* %52), !dbg !4197
  %tobool69 = icmp ne i32 %call68, 0, !dbg !4197
  br i1 %tobool69, label %if.then70, label %if.end82, !dbg !4198

if.then70:                                        ; preds = %if.then66
  store i32 1, i32* %changed, align 4, !dbg !4199
  %53 = load i32, i32* @global_copy_prop_count, align 4, !dbg !4201
  %inc71 = add nsw i32 %53, 1, !dbg !4201
  store i32 %inc71, i32* @global_copy_prop_count, align 4, !dbg !4201
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4202
  %cmp72 = icmp ne %struct._IO_FILE* %54, null, !dbg !4204
  br i1 %cmp72, label %if.then73, label %if.end81, !dbg !4205

if.then73:                                        ; preds = %if.then70
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4206
  %56 = load i32, i32* %regno, align 4, !dbg !4208
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4209
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !4209
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !4209
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 0, !dbg !4209
  %rt_int77 = bitcast %union.rtunion_def* %arrayidx76 to i32*, !dbg !4209
  %58 = load i32, i32* %rt_int77, align 8, !dbg !4209
  %call78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.25, i64 0, i64 0), i32 %56, i32 %58), !dbg !4210
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4211
  %60 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4212
  %call79 = call i32 @rhs_regno(%struct.rtx_def* %60), !dbg !4212
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i32 %call79), !dbg !4213
  br label %if.end81, !dbg !4214

if.end81:                                         ; preds = %if.then73, %if.then70
  br label %if.end82, !dbg !4215

if.end82:                                         ; preds = %if.end81, %if.then66
  br label %if.end83, !dbg !4216

if.end83:                                         ; preds = %if.end82, %land.lhs.true63, %land.lhs.true, %if.else
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end57
  br label %for.inc, !dbg !4217

for.inc:                                          ; preds = %if.end84, %if.then27, %if.then23
  %61 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !4218
  %incdec.ptr = getelementptr inbounds %struct.reg_use, %struct.reg_use* %61, i32 1, !dbg !4218
  store %struct.reg_use* %incdec.ptr, %struct.reg_use** %reg_used, align 8, !dbg !4218
  %62 = load i32, i32* @reg_use_count, align 4, !dbg !4219
  %dec = add nsw i32 %62, -1, !dbg !4219
  store i32 %dec, i32* @reg_use_count, align 4, !dbg !4219
  br label %for.cond, !dbg !4220, !llvm.loop !4221

for.end:                                          ; preds = %for.cond
  %63 = load i32, i32* %changed, align 4, !dbg !4223
  %tobool85 = icmp ne i32 %63, 0, !dbg !4223
  br i1 %tobool85, label %land.lhs.true86, label %if.end91, !dbg !4225

land.lhs.true86:                                  ; preds = %for.end
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4226
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !4226
  %bf.load87 = load i32, i32* %65, align 8, !dbg !4226
  %bf.clear88 = and i32 %bf.load87, 65535, !dbg !4226
  %cmp89 = icmp eq i32 %bf.clear88, 7, !dbg !4226
  br i1 %cmp89, label %if.then90, label %if.end91, !dbg !4227

if.then90:                                        ; preds = %land.lhs.true86
  store i32 0, i32* %retval, align 4, !dbg !4228
  br label %return, !dbg !4228

if.end91:                                         ; preds = %land.lhs.true86, %for.end
  %66 = load i32, i32* %changed, align 4, !dbg !4229
  store i32 %66, i32* %retval, align 4, !dbg !4230
  br label %return, !dbg !4230

return:                                           ; preds = %if.end91, %if.then90, %if.then55, %if.then
  %67 = load i32, i32* %retval, align 4, !dbg !4231
  ret i32 %67, !dbg !4231
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_oprs_set(%struct.rtx_def* %insn) #0 !dbg !4232 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4235, metadata !DIExpression()), !dbg !4236
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !4237, metadata !DIExpression()), !dbg !4238
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4239
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4239
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4239
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4239
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4239
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4239
  store %struct.rtx_def* %1, %struct.rtx_def** %pat, align 8, !dbg !4238
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4240, metadata !DIExpression()), !dbg !4241
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4242
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4242
  %bf.load = load i32, i32* %3, align 8, !dbg !4242
  %bf.clear = and i32 %bf.load, 65535, !dbg !4242
  %cmp = icmp eq i32 %bf.clear, 23, !dbg !4244
  br i1 %cmp, label %if.then, label %if.else, !dbg !4245

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4246
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4247
  call void @mark_set(%struct.rtx_def* %4, %struct.rtx_def* %5), !dbg !4248
  br label %if.end43, !dbg !4248

if.else:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4249
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4249
  %bf.load1 = load i32, i32* %7, align 8, !dbg !4249
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4249
  %cmp3 = icmp eq i32 %bf.clear2, 15, !dbg !4251
  br i1 %cmp3, label %if.then4, label %if.else30, !dbg !4252

if.then4:                                         ; preds = %if.else
  store i32 0, i32* %i, align 4, !dbg !4253
  br label %for.cond, !dbg !4255

for.cond:                                         ; preds = %for.inc, %if.then4
  %8 = load i32, i32* %i, align 4, !dbg !4256
  %9 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4258
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4258
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !4258
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !4258
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtvec_def**, !dbg !4258
  %10 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4258
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %10, i32 0, i32 0, !dbg !4258
  %11 = load i32, i32* %num_elem, align 8, !dbg !4258
  %cmp8 = icmp slt i32 %8, %11, !dbg !4259
  br i1 %cmp8, label %for.body, label %for.end, !dbg !4260

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4261, metadata !DIExpression()), !dbg !4263
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4264
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4264
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !4264
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !4264
  %rt_rtvec12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtvec_def**, !dbg !4264
  %13 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec12, align 8, !dbg !4264
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %13, i32 0, i32 1, !dbg !4264
  %14 = load i32, i32* %i, align 4, !dbg !4264
  %idxprom = sext i32 %14 to i64, !dbg !4264
  %arrayidx13 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !4264
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8, !dbg !4264
  store %struct.rtx_def* %15, %struct.rtx_def** %x, align 8, !dbg !4263
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4265
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4265
  %bf.load14 = load i32, i32* %17, align 8, !dbg !4265
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !4265
  %cmp16 = icmp eq i32 %bf.clear15, 23, !dbg !4267
  br i1 %cmp16, label %if.then17, label %if.else18, !dbg !4268

if.then17:                                        ; preds = %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4269
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4270
  call void @mark_set(%struct.rtx_def* %18, %struct.rtx_def* %19), !dbg !4271
  br label %if.end29, !dbg !4271

if.else18:                                        ; preds = %for.body
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4272
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !4272
  %bf.load19 = load i32, i32* %21, align 8, !dbg !4272
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !4272
  %cmp21 = icmp eq i32 %bf.clear20, 25, !dbg !4274
  br i1 %cmp21, label %if.then22, label %if.else23, !dbg !4275

if.then22:                                        ; preds = %if.else18
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4276
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4277
  call void @mark_clobber(%struct.rtx_def* %22, %struct.rtx_def* %23), !dbg !4278
  br label %if.end28, !dbg !4278

if.else23:                                        ; preds = %if.else18
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4279
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !4279
  %bf.load24 = load i32, i32* %25, align 8, !dbg !4279
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !4279
  %cmp26 = icmp eq i32 %bf.clear25, 26, !dbg !4281
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !4282

if.then27:                                        ; preds = %if.else23
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4283
  call void @mark_call(%struct.rtx_def* %26), !dbg !4284
  br label %if.end, !dbg !4284

if.end:                                           ; preds = %if.then27, %if.else23
  br label %if.end28

if.end28:                                         ; preds = %if.end, %if.then22
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then17
  br label %for.inc, !dbg !4285

for.inc:                                          ; preds = %if.end29
  %27 = load i32, i32* %i, align 4, !dbg !4286
  %inc = add nsw i32 %27, 1, !dbg !4286
  store i32 %inc, i32* %i, align 4, !dbg !4286
  br label %for.cond, !dbg !4287, !llvm.loop !4288

for.end:                                          ; preds = %for.cond
  br label %if.end42, !dbg !4289

if.else30:                                        ; preds = %if.else
  %28 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4290
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !4290
  %bf.load31 = load i32, i32* %29, align 8, !dbg !4290
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !4290
  %cmp33 = icmp eq i32 %bf.clear32, 25, !dbg !4292
  br i1 %cmp33, label %if.then34, label %if.else35, !dbg !4293

if.then34:                                        ; preds = %if.else30
  %30 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4294
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4295
  call void @mark_clobber(%struct.rtx_def* %30, %struct.rtx_def* %31), !dbg !4296
  br label %if.end41, !dbg !4296

if.else35:                                        ; preds = %if.else30
  %32 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4297
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !4297
  %bf.load36 = load i32, i32* %33, align 8, !dbg !4297
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !4297
  %cmp38 = icmp eq i32 %bf.clear37, 26, !dbg !4299
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !4300

if.then39:                                        ; preds = %if.else35
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4301
  call void @mark_call(%struct.rtx_def* %34), !dbg !4302
  br label %if.end40, !dbg !4302

if.end40:                                         ; preds = %if.then39, %if.else35
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then34
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %for.end
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then
  ret void, !dbg !4303
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @bypass_conditional_jumps() #0 !dbg !4304 {
entry:
  %retval = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %changed = alloca i32, align 4
  %setcc = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4305, metadata !DIExpression()), !dbg !4306
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !4307, metadata !DIExpression()), !dbg !4308
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setcc, metadata !4309, metadata !DIExpression()), !dbg !4310
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4311, metadata !DIExpression()), !dbg !4312
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4313, metadata !DIExpression()), !dbg !4314
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4315
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4315
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4315
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4315
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4315
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4315
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4317
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4317
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4318
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !4318
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4318
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4318
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 1, !dbg !4318
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4318
  %cmp = icmp eq %struct.basic_block_def* %3, %6, !dbg !4319
  br i1 %cmp, label %if.then, label %if.end, !dbg !4320

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4321
  br label %return, !dbg !4321

if.end:                                           ; preds = %entry
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4322
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4322
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !4322
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !4322
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 5, !dbg !4322
  %9 = load i32, i32* %x_last_basic_block, align 8, !dbg !4322
  store i32 %9, i32* @bypass_last_basic_block, align 4, !dbg !4323
  %call = call zeroext i8 @mark_dfs_back_edges(), !dbg !4324
  store i32 0, i32* %changed, align 4, !dbg !4325
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4326
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !4326
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !4326
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !4326
  %x_entry_block_ptr7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 0, !dbg !4326
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr7, align 8, !dbg !4326
  %next_bb8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 6, !dbg !4326
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb8, align 8, !dbg !4326
  %next_bb9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !4326
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb9, align 8, !dbg !4326
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !4326
  br label %for.cond, !dbg !4326

for.cond:                                         ; preds = %for.inc96, %if.end
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4328
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4328
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !4328
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 1, !dbg !4328
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !4328
  %x_exit_block_ptr12 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 1, !dbg !4328
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr12, align 8, !dbg !4328
  %cmp13 = icmp ne %struct.basic_block_def* %15, %18, !dbg !4328
  br i1 %cmp13, label %for.body, label %for.end98, !dbg !4326

for.body:                                         ; preds = %for.cond
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4330
  %call14 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %19), !dbg !4333
  %tobool = icmp ne i8 %call14, 0, !dbg !4333
  br i1 %tobool, label %if.end95, label %if.then15, !dbg !4334

if.then15:                                        ; preds = %for.body
  store %struct.rtx_def* null, %struct.rtx_def** %setcc, align 8, !dbg !4335
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4337
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 7, !dbg !4337
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4337
  %21 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4337
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %21, i32 0, i32 0, !dbg !4337
  %22 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4337
  store %struct.rtx_def* %22, %struct.rtx_def** %insn, align 8, !dbg !4337
  br label %for.cond16, !dbg !4337

for.cond16:                                       ; preds = %for.inc, %if.then15
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4339
  %tobool17 = icmp ne %struct.rtx_def* %23, null, !dbg !4339
  br i1 %tobool17, label %land.rhs, label %land.end, !dbg !4339

land.rhs:                                         ; preds = %for.cond16
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4339
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4339
  %il18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 7, !dbg !4339
  %rtl19 = bitcast %union.basic_block_il_dependent* %il18 to %struct.rtl_bb_info**, !dbg !4339
  %26 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl19, align 8, !dbg !4339
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %26, i32 0, i32 1, !dbg !4339
  %27 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4339
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !4339
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4339
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4339
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4339
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4339
  %cmp20 = icmp ne %struct.rtx_def* %24, %28, !dbg !4339
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond16
  %29 = phi i1 [ false, %for.cond16 ], [ %cmp20, %land.rhs ], !dbg !4341
  br i1 %29, label %for.body21, label %for.end, !dbg !4337

for.body21:                                       ; preds = %land.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4342
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !4342
  %bf.load = load i32, i32* %31, align 8, !dbg !4342
  %bf.clear = and i32 %bf.load, 65535, !dbg !4342
  %cmp22 = icmp eq i32 %bf.clear, 7, !dbg !4342
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !4344

if.then23:                                        ; preds = %for.body21
  br label %for.inc, !dbg !4345

if.else:                                          ; preds = %for.body21
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4346
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !4346
  %bf.load24 = load i32, i32* %33, align 8, !dbg !4346
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !4346
  %cmp26 = icmp eq i32 %bf.clear25, 8, !dbg !4346
  br i1 %cmp26, label %if.then27, label %if.else55, !dbg !4348

if.then27:                                        ; preds = %if.else
  %34 = load %struct.rtx_def*, %struct.rtx_def** %setcc, align 8, !dbg !4349
  %tobool28 = icmp ne %struct.rtx_def* %34, null, !dbg !4349
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !4352

if.then29:                                        ; preds = %if.then27
  br label %for.end, !dbg !4353

if.end30:                                         ; preds = %if.then27
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4354
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !4354
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4354
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 5, !dbg !4354
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4354
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4354
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !4354
  %bf.load35 = load i32, i32* %37, align 8, !dbg !4354
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !4354
  %cmp37 = icmp ne i32 %bf.clear36, 23, !dbg !4356
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !4357

if.then38:                                        ; preds = %if.end30
  br label %for.end, !dbg !4358

if.end39:                                         ; preds = %if.end30
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4359
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !4359
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !4359
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 5, !dbg !4359
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !4359
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !4359
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4359
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !4359
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 0, !dbg !4359
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !4359
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !4359
  store %struct.rtx_def* %40, %struct.rtx_def** %dest, align 8, !dbg !4360
  %41 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4361
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !4361
  %bf.load48 = load i32, i32* %42, align 8, !dbg !4361
  %bf.clear49 = and i32 %bf.load48, 65535, !dbg !4361
  %cmp50 = icmp eq i32 %bf.clear49, 37, !dbg !4361
  br i1 %cmp50, label %if.then52, label %lor.lhs.false, !dbg !4363

lor.lhs.false:                                    ; preds = %if.end39
  %43 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4364
  %tobool51 = icmp ne %struct.rtx_def* %43, null, !dbg !4364
  br i1 %tobool51, label %cond.true, label %cond.false, !dbg !4365

cond.true:                                        ; preds = %lor.lhs.false
  br i1 false, label %if.then52, label %if.else53, !dbg !4364

cond.false:                                       ; preds = %lor.lhs.false
  br i1 false, label %if.then52, label %if.else53, !dbg !4365

if.then52:                                        ; preds = %cond.false, %cond.true, %if.end39
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4366
  store %struct.rtx_def* %44, %struct.rtx_def** %setcc, align 8, !dbg !4367
  br label %if.end54, !dbg !4368

if.else53:                                        ; preds = %cond.false, %cond.true
  br label %for.end, !dbg !4369

if.end54:                                         ; preds = %if.then52
  br label %if.end89, !dbg !4370

if.else55:                                        ; preds = %if.else
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4371
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !4371
  %bf.load56 = load i32, i32* %46, align 8, !dbg !4371
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !4371
  %cmp58 = icmp eq i32 %bf.clear57, 9, !dbg !4371
  br i1 %cmp58, label %if.then59, label %if.else70, !dbg !4373

if.then59:                                        ; preds = %if.else55
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4374
  %call60 = call i32 @any_condjump_p(%struct.rtx_def* %47), !dbg !4377
  %tobool61 = icmp ne i32 %call60, 0, !dbg !4377
  br i1 %tobool61, label %land.lhs.true, label %lor.lhs.false62, !dbg !4378

lor.lhs.false62:                                  ; preds = %if.then59
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4379
  %call63 = call i32 @computed_jump_p(%struct.rtx_def* %48), !dbg !4380
  %tobool64 = icmp ne i32 %call63, 0, !dbg !4380
  br i1 %tobool64, label %land.lhs.true, label %if.end69, !dbg !4381

land.lhs.true:                                    ; preds = %lor.lhs.false62, %if.then59
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4382
  %call65 = call i32 @onlyjump_p(%struct.rtx_def* %49), !dbg !4383
  %tobool66 = icmp ne i32 %call65, 0, !dbg !4383
  br i1 %tobool66, label %if.then67, label %if.end69, !dbg !4384

if.then67:                                        ; preds = %land.lhs.true
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4385
  %51 = load %struct.rtx_def*, %struct.rtx_def** %setcc, align 8, !dbg !4386
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4387
  %call68 = call i32 @bypass_block(%struct.basic_block_def* %50, %struct.rtx_def* %51, %struct.rtx_def* %52), !dbg !4388
  %53 = load i32, i32* %changed, align 4, !dbg !4389
  %or = or i32 %53, %call68, !dbg !4389
  store i32 %or, i32* %changed, align 4, !dbg !4389
  br label %if.end69, !dbg !4390

if.end69:                                         ; preds = %if.then67, %land.lhs.true, %lor.lhs.false62
  br label %for.end, !dbg !4391

if.else70:                                        ; preds = %if.else55
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4392
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !4392
  %bf.load71 = load i32, i32* %55, align 8, !dbg !4392
  %bf.clear72 = and i32 %bf.load71, 65535, !dbg !4392
  %cmp73 = icmp eq i32 %bf.clear72, 8, !dbg !4392
  br i1 %cmp73, label %if.then86, label %lor.lhs.false74, !dbg !4392

lor.lhs.false74:                                  ; preds = %if.else70
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4392
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !4392
  %bf.load75 = load i32, i32* %57, align 8, !dbg !4392
  %bf.clear76 = and i32 %bf.load75, 65535, !dbg !4392
  %cmp77 = icmp eq i32 %bf.clear76, 7, !dbg !4392
  br i1 %cmp77, label %if.then86, label %lor.lhs.false78, !dbg !4392

lor.lhs.false78:                                  ; preds = %lor.lhs.false74
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4392
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !4392
  %bf.load79 = load i32, i32* %59, align 8, !dbg !4392
  %bf.clear80 = and i32 %bf.load79, 65535, !dbg !4392
  %cmp81 = icmp eq i32 %bf.clear80, 9, !dbg !4392
  br i1 %cmp81, label %if.then86, label %lor.lhs.false82, !dbg !4392

lor.lhs.false82:                                  ; preds = %lor.lhs.false78
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4392
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !4392
  %bf.load83 = load i32, i32* %61, align 8, !dbg !4392
  %bf.clear84 = and i32 %bf.load83, 65535, !dbg !4392
  %cmp85 = icmp eq i32 %bf.clear84, 10, !dbg !4392
  br i1 %cmp85, label %if.then86, label %if.end87, !dbg !4394

if.then86:                                        ; preds = %lor.lhs.false82, %lor.lhs.false78, %lor.lhs.false74, %if.else70
  br label %for.end, !dbg !4395

if.end87:                                         ; preds = %lor.lhs.false82
  br label %if.end88

if.end88:                                         ; preds = %if.end87
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.end54
  br label %if.end90

if.end90:                                         ; preds = %if.end89
  br label %for.inc, !dbg !4342

for.inc:                                          ; preds = %if.end90, %if.then23
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4339
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !4339
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !4339
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 2, !dbg !4339
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !4339
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !4339
  store %struct.rtx_def* %63, %struct.rtx_def** %insn, align 8, !dbg !4339
  br label %for.cond16, !dbg !4339, !llvm.loop !4396

for.end:                                          ; preds = %if.then86, %if.end69, %if.else53, %if.then38, %if.then29, %land.end
  br label %if.end95, !dbg !4398

if.end95:                                         ; preds = %for.end, %for.body
  br label %for.inc96, !dbg !4399

for.inc96:                                        ; preds = %if.end95
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4328
  %next_bb97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 6, !dbg !4328
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb97, align 8, !dbg !4328
  store %struct.basic_block_def* %65, %struct.basic_block_def** %bb, align 8, !dbg !4328
  br label %for.cond, !dbg !4328, !llvm.loop !4400

for.end98:                                        ; preds = %for.cond
  %66 = load i32, i32* %changed, align 4, !dbg !4402
  %tobool99 = icmp ne i32 %66, 0, !dbg !4402
  br i1 %tobool99, label %if.then100, label %if.end101, !dbg !4404

if.then100:                                       ; preds = %for.end98
  call void @commit_edge_insertions(), !dbg !4405
  br label %if.end101, !dbg !4405

if.end101:                                        ; preds = %if.then100, %for.end98
  %67 = load i32, i32* %changed, align 4, !dbg !4406
  store i32 %67, i32* %retval, align 4, !dbg !4407
  br label %return, !dbg !4407

return:                                           ; preds = %if.end101, %if.then
  %68 = load i32, i32* %retval, align 4, !dbg !4408
  ret i32 %68, !dbg !4408
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_cprop_mem() #0 !dbg !4409 {
entry:
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_pavloc, align 8, !dbg !4410
  %1 = bitcast %struct.simple_bitmap_def** %0 to i8*, !dbg !4410
  call void @free(i8* %1), !dbg !4410
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_absaltered, align 8, !dbg !4411
  %3 = bitcast %struct.simple_bitmap_def** %2 to i8*, !dbg !4411
  call void @free(i8* %3), !dbg !4411
  %4 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_avin, align 8, !dbg !4412
  %5 = bitcast %struct.simple_bitmap_def** %4 to i8*, !dbg !4412
  call void @free(i8* %5), !dbg !4412
  %6 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_avout, align 8, !dbg !4413
  %7 = bitcast %struct.simple_bitmap_def** %6 to i8*, !dbg !4413
  call void @free(i8* %7), !dbg !4413
  ret void, !dbg !4414
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_hash_table(%struct.hash_table_d* %table) #0 !dbg !4415 {
entry:
  %table.addr = alloca %struct.hash_table_d*, align 8
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !4416, metadata !DIExpression()), !dbg !4417
  %0 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !4418
  %table1 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %0, i32 0, i32 0, !dbg !4419
  %1 = load %struct.expr**, %struct.expr*** %table1, align 8, !dbg !4419
  %2 = bitcast %struct.expr** %1 to i8*, !dbg !4418
  call void @free(i8* %2), !dbg !4420
  ret void, !dbg !4421
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_gcse_mem() #0 !dbg !4422 {
entry:
  call void @free_modify_mem_tables(), !dbg !4423
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @modify_mem_list_set, align 8, !dbg !4424
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %0), !dbg !4424
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @modify_mem_list_set, align 8, !dbg !4424
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_calls, align 8, !dbg !4425
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %1), !dbg !4425
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @blocks_with_calls, align 8, !dbg !4425
  ret void, !dbg !4426
}

declare dso_local void @obstack_free(%struct.obstack*, i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local i8* @current_function_name() #2

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

declare dso_local i32 @max_reg_num() #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @gcalloc(i64 %nelem, i64 %elsize) #0 !dbg !4427 {
entry:
  %nelem.addr = alloca i64, align 8
  %elsize.addr = alloca i64, align 8
  store i64 %nelem, i64* %nelem.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nelem.addr, metadata !4428, metadata !DIExpression()), !dbg !4429
  store i64 %elsize, i64* %elsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %elsize.addr, metadata !4430, metadata !DIExpression()), !dbg !4431
  %0 = load i64, i64* %nelem.addr, align 8, !dbg !4432
  %1 = load i64, i64* %elsize.addr, align 8, !dbg !4433
  %mul = mul i64 %0, %1, !dbg !4434
  %2 = load i32, i32* @bytes_used, align 4, !dbg !4435
  %conv = sext i32 %2 to i64, !dbg !4435
  %add = add i64 %conv, %mul, !dbg !4435
  %conv1 = trunc i64 %add to i32, !dbg !4435
  store i32 %conv1, i32* @bytes_used, align 4, !dbg !4435
  %3 = load i64, i64* %nelem.addr, align 8, !dbg !4436
  %4 = load i64, i64* %elsize.addr, align 8, !dbg !4437
  %call = call i8* @xcalloc(i64 %3, i64 %4), !dbg !4438
  ret i8* %call, !dbg !4439
}

declare dso_local void @cselib_init(i32) #2

declare dso_local %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def*) #2

declare dso_local void @note_uses(%struct.rtx_def**, void (%struct.rtx_def**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @local_cprop_find_used_regs(%struct.rtx_def** %xptr, i8* %data) #0 !dbg !4440 {
entry:
  %xptr.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %xptr, %struct.rtx_def*** %xptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %xptr.addr, metadata !4443, metadata !DIExpression()), !dbg !4444
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4445, metadata !DIExpression()), !dbg !4446
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4447, metadata !DIExpression()), !dbg !4448
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %xptr.addr, align 8, !dbg !4449
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !4450
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8, !dbg !4448
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4451
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !4453
  br i1 %cmp, label %if.then, label %if.end, !dbg !4454

if.then:                                          ; preds = %entry
  br label %return, !dbg !4455

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4456
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4456
  %bf.load = load i32, i32* %4, align 8, !dbg !4456
  %bf.clear = and i32 %bf.load, 65535, !dbg !4456
  switch i32 %bf.clear, label %sw.default [
    i32 120, label %sw.bb
    i32 119, label %sw.bb
    i32 40, label %sw.bb
    i32 74, label %sw.bb1
    i32 75, label %sw.bb1
    i32 76, label %sw.bb1
    i32 77, label %sw.bb1
    i32 78, label %sw.bb1
    i32 79, label %sw.bb1
    i32 39, label %sw.bb2
  ], !dbg !4457

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  br label %return, !dbg !4458

sw.bb1:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %return, !dbg !4460

sw.bb2:                                           ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4461
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4461
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4461
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4461
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4461
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4461
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4461
  %bf.load3 = load i32, i32* %7, align 8, !dbg !4461
  %bf.lshr = lshr i32 %bf.load3, 16, !dbg !4461
  %bf.clear4 = and i32 %bf.lshr, 255, !dbg !4461
  %idxprom = zext i32 %bf.clear4 to i64, !dbg !4461
  %arrayidx5 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4461
  %8 = load i8, i8* %arrayidx5, align 1, !dbg !4461
  %conv = zext i8 %8 to i16, !dbg !4461
  %conv6 = zext i16 %conv to i32, !dbg !4461
  %mul = mul nsw i32 %conv6, 8, !dbg !4461
  %conv7 = trunc i32 %mul to i16, !dbg !4461
  %conv8 = zext i16 %conv7 to i32, !dbg !4461
  %cmp9 = icmp sgt i32 %conv8, 32, !dbg !4463
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !4464

if.then11:                                        ; preds = %sw.bb2
  br label %return, !dbg !4465

if.end12:                                         ; preds = %sw.bb2
  br label %sw.epilog, !dbg !4466

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !4467

sw.epilog:                                        ; preds = %sw.default, %if.end12
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %xptr.addr, align 8, !dbg !4468
  %10 = load i8*, i8** %data.addr, align 8, !dbg !4469
  call void @find_used_regs(%struct.rtx_def** %9, i8* %10), !dbg !4470
  br label %return, !dbg !4471

return:                                           ; preds = %sw.epilog, %if.then11, %sw.bb1, %sw.bb, %if.then
  ret void, !dbg !4471
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @do_local_cprop(%struct.rtx_def* %x, %struct.rtx_def* %insn) #0 !dbg !4472 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %newreg = alloca %struct.rtx_def*, align 8
  %newcnst = alloca %struct.rtx_def*, align 8
  %val = alloca %struct.cselib_val_struct*, align 8
  %l = alloca %struct.elt_loc_list*, align 8
  %this_rtx = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4475, metadata !DIExpression()), !dbg !4476
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4477, metadata !DIExpression()), !dbg !4478
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %newreg, metadata !4479, metadata !DIExpression()), !dbg !4480
  store %struct.rtx_def* null, %struct.rtx_def** %newreg, align 8, !dbg !4480
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %newcnst, metadata !4481, metadata !DIExpression()), !dbg !4482
  store %struct.rtx_def* null, %struct.rtx_def** %newcnst, align 8, !dbg !4482
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4483
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4483
  %bf.load = load i32, i32* %1, align 8, !dbg !4483
  %bf.clear = and i32 %bf.load, 65535, !dbg !4483
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !4483
  br i1 %cmp, label %land.lhs.true, label %if.end79, !dbg !4485

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4486
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !4486
  %cmp1 = icmp uge i32 %call, 53, !dbg !4487
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !4488

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4489
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !4489
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4489
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4489
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4489
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4489
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4489
  %bf.load2 = load i32, i32* %5, align 8, !dbg !4489
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !4489
  %cmp4 = icmp ne i32 %bf.clear3, 24, !dbg !4490
  br i1 %cmp4, label %land.lhs.true5, label %if.end79, !dbg !4491

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4492
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4492
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !4492
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 5, !dbg !4492
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !4492
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !4492
  %call10 = call i32 @asm_noperands(%struct.rtx_def* %7), !dbg !4493
  %cmp11 = icmp slt i32 %call10, 0, !dbg !4494
  br i1 %cmp11, label %if.then, label %if.end79, !dbg !4495

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.cselib_val_struct** %val, metadata !4496, metadata !DIExpression()), !dbg !4498
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4499
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4500
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4500
  %bf.load12 = load i32, i32* %10, align 8, !dbg !4500
  %bf.lshr = lshr i32 %bf.load12, 16, !dbg !4500
  %bf.clear13 = and i32 %bf.lshr, 255, !dbg !4500
  %call14 = call %struct.cselib_val_struct* @cselib_lookup(%struct.rtx_def* %8, i32 %bf.clear13, i32 0), !dbg !4501
  store %struct.cselib_val_struct* %call14, %struct.cselib_val_struct** %val, align 8, !dbg !4498
  call void @llvm.dbg.declare(metadata %struct.elt_loc_list** %l, metadata !4502, metadata !DIExpression()), !dbg !4503
  %11 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %val, align 8, !dbg !4504
  %tobool = icmp ne %struct.cselib_val_struct* %11, null, !dbg !4504
  br i1 %tobool, label %if.end, label %if.then15, !dbg !4506

if.then15:                                        ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !4507
  br label %return, !dbg !4507

if.end:                                           ; preds = %if.then
  %12 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %val, align 8, !dbg !4508
  %locs = getelementptr inbounds %struct.cselib_val_struct, %struct.cselib_val_struct* %12, i32 0, i32 3, !dbg !4510
  %13 = load %struct.elt_loc_list*, %struct.elt_loc_list** %locs, align 8, !dbg !4510
  store %struct.elt_loc_list* %13, %struct.elt_loc_list** %l, align 8, !dbg !4511
  br label %for.cond, !dbg !4512

for.cond:                                         ; preds = %for.inc, %if.end
  %14 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !4513
  %tobool16 = icmp ne %struct.elt_loc_list* %14, null, !dbg !4515
  br i1 %tobool16, label %for.body, label %for.end, !dbg !4515

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %this_rtx, metadata !4516, metadata !DIExpression()), !dbg !4518
  %15 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !4519
  %loc = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %15, i32 0, i32 1, !dbg !4520
  %16 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8, !dbg !4520
  store %struct.rtx_def* %16, %struct.rtx_def** %this_rtx, align 8, !dbg !4518
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4521, metadata !DIExpression()), !dbg !4522
  %17 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !4523
  %call17 = call zeroext i8 @gcse_constant_p(%struct.rtx_def* %17), !dbg !4525
  %tobool18 = icmp ne i8 %call17, 0, !dbg !4525
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !4526

if.then19:                                        ; preds = %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !4527
  store %struct.rtx_def* %18, %struct.rtx_def** %newcnst, align 8, !dbg !4528
  br label %if.end20, !dbg !4529

if.end20:                                         ; preds = %if.then19, %for.body
  %19 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !4530
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4530
  %bf.load21 = load i32, i32* %20, align 8, !dbg !4530
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !4530
  %cmp23 = icmp eq i32 %bf.clear22, 37, !dbg !4530
  br i1 %cmp23, label %land.lhs.true24, label %if.end39, !dbg !4532

land.lhs.true24:                                  ; preds = %if.end20
  %21 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !4533
  %call25 = call i32 @rhs_regno(%struct.rtx_def* %21), !dbg !4533
  %cmp26 = icmp uge i32 %call25, 53, !dbg !4534
  br i1 %cmp26, label %land.lhs.true27, label %if.end39, !dbg !4535

land.lhs.true27:                                  ; preds = %land.lhs.true24
  %22 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !4536
  %setting_insn = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %22, i32 0, i32 2, !dbg !4537
  %23 = load %struct.rtx_def*, %struct.rtx_def** %setting_insn, align 8, !dbg !4537
  %call28 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %23, i32 3, %struct.rtx_def* null), !dbg !4538
  store %struct.rtx_def* %call28, %struct.rtx_def** %note, align 8, !dbg !4539
  %tobool29 = icmp ne %struct.rtx_def* %call28, null, !dbg !4539
  br i1 %tobool29, label %lor.lhs.false30, label %if.then38, !dbg !4540

lor.lhs.false30:                                  ; preds = %land.lhs.true27
  %24 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4541
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !4541
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4541
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !4541
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4541
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4541
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !4541
  %bf.load35 = load i32, i32* %26, align 8, !dbg !4541
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !4541
  %cmp37 = icmp eq i32 %bf.clear36, 43, !dbg !4541
  br i1 %cmp37, label %if.end39, label %if.then38, !dbg !4542

if.then38:                                        ; preds = %lor.lhs.false30, %land.lhs.true27
  %27 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !4543
  store %struct.rtx_def* %27, %struct.rtx_def** %newreg, align 8, !dbg !4544
  br label %if.end39, !dbg !4545

if.end39:                                         ; preds = %if.then38, %lor.lhs.false30, %land.lhs.true24, %if.end20
  br label %for.inc, !dbg !4546

for.inc:                                          ; preds = %if.end39
  %28 = load %struct.elt_loc_list*, %struct.elt_loc_list** %l, align 8, !dbg !4547
  %next = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %28, i32 0, i32 0, !dbg !4548
  %29 = load %struct.elt_loc_list*, %struct.elt_loc_list** %next, align 8, !dbg !4548
  store %struct.elt_loc_list* %29, %struct.elt_loc_list** %l, align 8, !dbg !4549
  br label %for.cond, !dbg !4550, !llvm.loop !4551

for.end:                                          ; preds = %for.cond
  %30 = load %struct.rtx_def*, %struct.rtx_def** %newcnst, align 8, !dbg !4553
  %tobool40 = icmp ne %struct.rtx_def* %30, null, !dbg !4553
  br i1 %tobool40, label %land.lhs.true41, label %if.else, !dbg !4555

land.lhs.true41:                                  ; preds = %for.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4556
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4557
  %33 = load %struct.rtx_def*, %struct.rtx_def** %newcnst, align 8, !dbg !4558
  %call42 = call zeroext i8 @constprop_register(%struct.rtx_def* %31, %struct.rtx_def* %32, %struct.rtx_def* %33), !dbg !4559
  %conv = zext i8 %call42 to i32, !dbg !4559
  %tobool43 = icmp ne i32 %conv, 0, !dbg !4559
  br i1 %tobool43, label %if.then44, label %if.else, !dbg !4560

if.then44:                                        ; preds = %land.lhs.true41
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4561
  %cmp45 = icmp ne %struct._IO_FILE* %34, null, !dbg !4564
  br i1 %cmp45, label %if.then47, label %if.end55, !dbg !4565

if.then47:                                        ; preds = %if.then44
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4566
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4568
  %call48 = call i32 @rhs_regno(%struct.rtx_def* %36), !dbg !4568
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0), i32 %call48), !dbg !4569
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4570
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4571
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !4571
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !4571
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 0, !dbg !4571
  %rt_int = bitcast %union.rtunion_def* %arrayidx52 to i32*, !dbg !4571
  %39 = load i32, i32* %rt_int, align 8, !dbg !4571
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 %39), !dbg !4572
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4573
  %41 = load %struct.rtx_def*, %struct.rtx_def** %newcnst, align 8, !dbg !4574
  call void @print_rtl(%struct._IO_FILE* %40, %struct.rtx_def* %41), !dbg !4575
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4576
  %call54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4577
  br label %if.end55, !dbg !4578

if.end55:                                         ; preds = %if.then47, %if.then44
  %43 = load i32, i32* @local_const_prop_count, align 4, !dbg !4579
  %inc = add nsw i32 %43, 1, !dbg !4579
  store i32 %inc, i32* @local_const_prop_count, align 4, !dbg !4579
  store i8 1, i8* %retval, align 1, !dbg !4580
  br label %return, !dbg !4580

if.else:                                          ; preds = %land.lhs.true41, %for.end
  %44 = load %struct.rtx_def*, %struct.rtx_def** %newreg, align 8, !dbg !4581
  %tobool56 = icmp ne %struct.rtx_def* %44, null, !dbg !4581
  br i1 %tobool56, label %land.lhs.true57, label %if.end77, !dbg !4583

land.lhs.true57:                                  ; preds = %if.else
  %45 = load %struct.rtx_def*, %struct.rtx_def** %newreg, align 8, !dbg !4584
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4585
  %cmp58 = icmp ne %struct.rtx_def* %45, %46, !dbg !4586
  br i1 %cmp58, label %land.lhs.true60, label %if.end77, !dbg !4587

land.lhs.true60:                                  ; preds = %land.lhs.true57
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4588
  %48 = load %struct.rtx_def*, %struct.rtx_def** %newreg, align 8, !dbg !4589
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4590
  %call61 = call i32 @try_replace_reg(%struct.rtx_def* %47, %struct.rtx_def* %48, %struct.rtx_def* %49), !dbg !4591
  %tobool62 = icmp ne i32 %call61, 0, !dbg !4591
  br i1 %tobool62, label %if.then63, label %if.end77, !dbg !4592

if.then63:                                        ; preds = %land.lhs.true60
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4593
  %cmp64 = icmp ne %struct._IO_FILE* %50, null, !dbg !4596
  br i1 %cmp64, label %if.then66, label %if.end75, !dbg !4597

if.then66:                                        ; preds = %if.then63
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4598
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4600
  %call67 = call i32 @rhs_regno(%struct.rtx_def* %52), !dbg !4600
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4601
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !4601
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !4601
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 0, !dbg !4601
  %rt_int71 = bitcast %union.rtunion_def* %arrayidx70 to i32*, !dbg !4601
  %54 = load i32, i32* %rt_int71, align 8, !dbg !4601
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.13, i64 0, i64 0), i32 %call67, i32 %54), !dbg !4602
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4603
  %56 = load %struct.rtx_def*, %struct.rtx_def** %newreg, align 8, !dbg !4604
  %call73 = call i32 @rhs_regno(%struct.rtx_def* %56), !dbg !4604
  %call74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i32 %call73), !dbg !4605
  br label %if.end75, !dbg !4606

if.end75:                                         ; preds = %if.then66, %if.then63
  %57 = load i32, i32* @local_copy_prop_count, align 4, !dbg !4607
  %inc76 = add nsw i32 %57, 1, !dbg !4607
  store i32 %inc76, i32* @local_copy_prop_count, align 4, !dbg !4607
  store i8 1, i8* %retval, align 1, !dbg !4608
  br label %return, !dbg !4608

if.end77:                                         ; preds = %land.lhs.true60, %land.lhs.true57, %if.else
  br label %if.end78

if.end78:                                         ; preds = %if.end77
  br label %if.end79, !dbg !4609

if.end79:                                         ; preds = %if.end78, %land.lhs.true5, %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !4610
  br label %return, !dbg !4610

return:                                           ; preds = %if.end79, %if.end75, %if.end55, %if.then15
  %58 = load i8, i8* %retval, align 1, !dbg !4611
  ret i8 %58, !dbg !4611
}

declare dso_local void @cselib_process_insn(%struct.rtx_def*) #2

declare dso_local void @cselib_clear_table() #2

declare dso_local void @cselib_finish() #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_used_regs(%struct.rtx_def** %xptr, i8* %data) #0 !dbg !4612 {
entry:
  %xptr.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %xptr, %struct.rtx_def*** %xptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %xptr.addr, metadata !4613, metadata !DIExpression()), !dbg !4614
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4615, metadata !DIExpression()), !dbg !4616
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4617, metadata !DIExpression()), !dbg !4618
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4619, metadata !DIExpression()), !dbg !4620
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4621, metadata !DIExpression()), !dbg !4622
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !4623, metadata !DIExpression()), !dbg !4624
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4625, metadata !DIExpression()), !dbg !4626
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %xptr.addr, align 8, !dbg !4627
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !4628
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8, !dbg !4626
  br label %repeat, !dbg !4629

repeat:                                           ; preds = %if.then23, %entry
  call void @llvm.dbg.label(metadata !4630), !dbg !4631
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4632
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !4634
  br i1 %cmp, label %if.then, label %if.end, !dbg !4635

if.then:                                          ; preds = %repeat
  br label %for.end56, !dbg !4636

if.end:                                           ; preds = %repeat
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4637
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4637
  %bf.load = load i32, i32* %4, align 8, !dbg !4637
  %bf.clear = and i32 %bf.load, 65535, !dbg !4637
  store i32 %bf.clear, i32* %code, align 4, !dbg !4638
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4639
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4639
  %bf.load1 = load i32, i32* %6, align 8, !dbg !4639
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4639
  %cmp3 = icmp eq i32 %bf.clear2, 37, !dbg !4639
  br i1 %cmp3, label %if.then4, label %if.end8, !dbg !4641

if.then4:                                         ; preds = %if.end
  %7 = load i32, i32* @reg_use_count, align 4, !dbg !4642
  %cmp5 = icmp eq i32 %7, 8, !dbg !4645
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !4646

if.then6:                                         ; preds = %if.then4
  br label %for.end56, !dbg !4647

if.end7:                                          ; preds = %if.then4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4648
  %9 = load i32, i32* @reg_use_count, align 4, !dbg !4649
  %idxprom = sext i32 %9 to i64, !dbg !4650
  %arrayidx = getelementptr inbounds [8 x %struct.reg_use], [8 x %struct.reg_use]* @reg_use_table, i64 0, i64 %idxprom, !dbg !4650
  %reg_rtx = getelementptr inbounds %struct.reg_use, %struct.reg_use* %arrayidx, i32 0, i32 0, !dbg !4651
  store %struct.rtx_def* %8, %struct.rtx_def** %reg_rtx, align 8, !dbg !4652
  %10 = load i32, i32* @reg_use_count, align 4, !dbg !4653
  %inc = add nsw i32 %10, 1, !dbg !4653
  store i32 %inc, i32* @reg_use_count, align 4, !dbg !4653
  br label %if.end8, !dbg !4654

if.end8:                                          ; preds = %if.end7, %if.end
  %11 = load i32, i32* %code, align 4, !dbg !4655
  %idxprom9 = sext i32 %11 to i64, !dbg !4655
  %arrayidx10 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom9, !dbg !4655
  %12 = load i8, i8* %arrayidx10, align 1, !dbg !4655
  %conv = zext i8 %12 to i32, !dbg !4655
  %sub = sub nsw i32 %conv, 1, !dbg !4657
  store i32 %sub, i32* %i, align 4, !dbg !4658
  %13 = load i32, i32* %code, align 4, !dbg !4659
  %idxprom11 = sext i32 %13 to i64, !dbg !4659
  %arrayidx12 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom11, !dbg !4659
  %14 = load i8*, i8** %arrayidx12, align 8, !dbg !4659
  store i8* %14, i8** %fmt, align 8, !dbg !4660
  br label %for.cond, !dbg !4661

for.cond:                                         ; preds = %for.inc55, %if.end8
  %15 = load i32, i32* %i, align 4, !dbg !4662
  %cmp13 = icmp sge i32 %15, 0, !dbg !4664
  br i1 %cmp13, label %for.body, label %for.end56, !dbg !4665

for.body:                                         ; preds = %for.cond
  %16 = load i8*, i8** %fmt, align 8, !dbg !4666
  %17 = load i32, i32* %i, align 4, !dbg !4669
  %idxprom15 = sext i32 %17 to i64, !dbg !4666
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i64 %idxprom15, !dbg !4666
  %18 = load i8, i8* %arrayidx16, align 1, !dbg !4666
  %conv17 = sext i8 %18 to i32, !dbg !4666
  %cmp18 = icmp eq i32 %conv17, 101, !dbg !4670
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !4671

if.then20:                                        ; preds = %for.body
  %19 = load i32, i32* %i, align 4, !dbg !4672
  %cmp21 = icmp eq i32 %19, 0, !dbg !4675
  br i1 %cmp21, label %if.then23, label %if.end25, !dbg !4676

if.then23:                                        ; preds = %if.then20
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4677
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4677
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4677
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4677
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !4677
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4677
  store %struct.rtx_def* %21, %struct.rtx_def** %x, align 8, !dbg !4679
  br label %repeat, !dbg !4680

if.end25:                                         ; preds = %if.then20
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4681
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4681
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !4681
  %23 = load i32, i32* %i, align 4, !dbg !4681
  %idxprom28 = sext i32 %23 to i64, !dbg !4681
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 %idxprom28, !dbg !4681
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4681
  %24 = load i8*, i8** %data.addr, align 8, !dbg !4682
  call void @find_used_regs(%struct.rtx_def** %rt_rtx30, i8* %24), !dbg !4683
  br label %if.end54, !dbg !4684

if.else:                                          ; preds = %for.body
  %25 = load i8*, i8** %fmt, align 8, !dbg !4685
  %26 = load i32, i32* %i, align 4, !dbg !4687
  %idxprom31 = sext i32 %26 to i64, !dbg !4685
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i64 %idxprom31, !dbg !4685
  %27 = load i8, i8* %arrayidx32, align 1, !dbg !4685
  %conv33 = sext i8 %27 to i32, !dbg !4685
  %cmp34 = icmp eq i32 %conv33, 69, !dbg !4688
  br i1 %cmp34, label %if.then36, label %if.end53, !dbg !4689

if.then36:                                        ; preds = %if.else
  store i32 0, i32* %j, align 4, !dbg !4690
  br label %for.cond37, !dbg !4692

for.cond37:                                       ; preds = %for.inc, %if.then36
  %28 = load i32, i32* %j, align 4, !dbg !4693
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4695
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !4695
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !4695
  %30 = load i32, i32* %i, align 4, !dbg !4695
  %idxprom40 = sext i32 %30 to i64, !dbg !4695
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 %idxprom40, !dbg !4695
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtvec_def**, !dbg !4695
  %31 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4695
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %31, i32 0, i32 0, !dbg !4695
  %32 = load i32, i32* %num_elem, align 8, !dbg !4695
  %cmp42 = icmp slt i32 %28, %32, !dbg !4696
  br i1 %cmp42, label %for.body44, label %for.end, !dbg !4697

for.body44:                                       ; preds = %for.cond37
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4698
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4698
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !4698
  %34 = load i32, i32* %i, align 4, !dbg !4698
  %idxprom47 = sext i32 %34 to i64, !dbg !4698
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 %idxprom47, !dbg !4698
  %rt_rtvec49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtvec_def**, !dbg !4698
  %35 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec49, align 8, !dbg !4698
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %35, i32 0, i32 1, !dbg !4698
  %36 = load i32, i32* %j, align 4, !dbg !4698
  %idxprom50 = sext i32 %36 to i64, !dbg !4698
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom50, !dbg !4698
  %37 = load i8*, i8** %data.addr, align 8, !dbg !4699
  call void @find_used_regs(%struct.rtx_def** %arrayidx51, i8* %37), !dbg !4700
  br label %for.inc, !dbg !4700

for.inc:                                          ; preds = %for.body44
  %38 = load i32, i32* %j, align 4, !dbg !4701
  %inc52 = add nsw i32 %38, 1, !dbg !4701
  store i32 %inc52, i32* %j, align 4, !dbg !4701
  br label %for.cond37, !dbg !4702, !llvm.loop !4703

for.end:                                          ; preds = %for.cond37
  br label %if.end53, !dbg !4704

if.end53:                                         ; preds = %for.end, %if.else
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end25
  br label %for.inc55, !dbg !4705

for.inc55:                                        ; preds = %if.end54
  %39 = load i32, i32* %i, align 4, !dbg !4706
  %dec = add nsw i32 %39, -1, !dbg !4706
  store i32 %dec, i32* %i, align 4, !dbg !4706
  br label %for.cond, !dbg !4707, !llvm.loop !4708

for.end56:                                        ; preds = %if.then, %if.then6, %for.cond
  ret void, !dbg !4710
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !4711 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4714, metadata !DIExpression()), !dbg !4715
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4716
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4716
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4716
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4716
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4716
  %1 = load i32, i32* %rt_uint, align 8, !dbg !4716
  ret i32 %1, !dbg !4717
}

declare dso_local i32 @asm_noperands(%struct.rtx_def*) #2

declare dso_local %struct.cselib_val_struct* @cselib_lookup(%struct.rtx_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gcse_constant_p(%struct.rtx_def* %x) #0 !dbg !4718 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4721, metadata !DIExpression()), !dbg !4722
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4723
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4723
  %bf.load = load i32, i32* %1, align 8, !dbg !4723
  %bf.clear = and i32 %bf.load, 65535, !dbg !4723
  %cmp = icmp eq i32 %bf.clear, 48, !dbg !4725
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4726

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4727
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4727
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4727
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4727
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4727
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4727
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4727
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4727
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4727
  %cmp3 = icmp eq i32 %bf.clear2, 30, !dbg !4727
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !4728

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4729
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4729
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !4729
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !4729
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !4729
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !4729
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4729
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4729
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4729
  %cmp11 = icmp eq i32 %bf.clear10, 30, !dbg !4729
  br i1 %cmp11, label %if.then, label %if.end, !dbg !4730

if.then:                                          ; preds = %land.lhs.true4
  store i8 1, i8* %retval, align 1, !dbg !4731
  br label %return, !dbg !4731

if.end:                                           ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4732
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !4732
  %bf.load12 = load i32, i32* %9, align 8, !dbg !4732
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4732
  %cmp14 = icmp eq i32 %bf.clear13, 48, !dbg !4734
  br i1 %cmp14, label %land.lhs.true15, label %if.end143, !dbg !4735

land.lhs.true15:                                  ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4736
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4736
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4736
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 0, !dbg !4736
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4736
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4736
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !4736
  %bf.load20 = load i32, i32* %12, align 8, !dbg !4736
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !4736
  %cmp22 = icmp eq i32 %bf.clear21, 37, !dbg !4736
  br i1 %cmp22, label %land.lhs.true23, label %if.end143, !dbg !4737

land.lhs.true23:                                  ; preds = %land.lhs.true15
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4738
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4738
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !4738
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !4738
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !4738
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !4738
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4738
  %bf.load28 = load i32, i32* %15, align 8, !dbg !4738
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !4738
  %cmp30 = icmp eq i32 %bf.clear29, 37, !dbg !4738
  br i1 %cmp30, label %land.lhs.true31, label %if.end143, !dbg !4739

land.lhs.true31:                                  ; preds = %land.lhs.true23
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4740
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !4740
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !4740
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !4740
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !4740
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !4740
  %call = call i32 @rhs_regno(%struct.rtx_def* %17), !dbg !4740
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4741
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !4741
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !4741
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 1, !dbg !4741
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !4741
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !4741
  %call40 = call i32 @rhs_regno(%struct.rtx_def* %19), !dbg !4741
  %cmp41 = icmp eq i32 %call, %call40, !dbg !4742
  br i1 %cmp41, label %land.lhs.true42, label %if.end143, !dbg !4743

land.lhs.true42:                                  ; preds = %land.lhs.true31
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4744
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4744
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !4744
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 0, !dbg !4744
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !4744
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !4744
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !4744
  %bf.load47 = load i32, i32* %22, align 8, !dbg !4744
  %bf.lshr = lshr i32 %bf.load47, 16, !dbg !4744
  %bf.clear48 = and i32 %bf.lshr, 255, !dbg !4744
  %idxprom = zext i32 %bf.clear48 to i64, !dbg !4744
  %arrayidx49 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4744
  %23 = load i8, i8* %arrayidx49, align 1, !dbg !4744
  %conv = zext i8 %23 to i32, !dbg !4744
  %cmp50 = icmp eq i32 %conv, 8, !dbg !4744
  br i1 %cmp50, label %if.end143, label %lor.lhs.false, !dbg !4744

lor.lhs.false:                                    ; preds = %land.lhs.true42
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4744
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !4744
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !4744
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 0, !dbg !4744
  %rt_rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !4744
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx55, align 8, !dbg !4744
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !4744
  %bf.load56 = load i32, i32* %26, align 8, !dbg !4744
  %bf.lshr57 = lshr i32 %bf.load56, 16, !dbg !4744
  %bf.clear58 = and i32 %bf.lshr57, 255, !dbg !4744
  %idxprom59 = zext i32 %bf.clear58 to i64, !dbg !4744
  %arrayidx60 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom59, !dbg !4744
  %27 = load i8, i8* %arrayidx60, align 1, !dbg !4744
  %conv61 = zext i8 %27 to i32, !dbg !4744
  %cmp62 = icmp eq i32 %conv61, 9, !dbg !4744
  br i1 %cmp62, label %if.end143, label %lor.lhs.false64, !dbg !4744

lor.lhs.false64:                                  ; preds = %lor.lhs.false
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4744
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !4744
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !4744
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !4744
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !4744
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx68, align 8, !dbg !4744
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !4744
  %bf.load69 = load i32, i32* %30, align 8, !dbg !4744
  %bf.lshr70 = lshr i32 %bf.load69, 16, !dbg !4744
  %bf.clear71 = and i32 %bf.lshr70, 255, !dbg !4744
  %idxprom72 = zext i32 %bf.clear71 to i64, !dbg !4744
  %arrayidx73 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom72, !dbg !4744
  %31 = load i8, i8* %arrayidx73, align 1, !dbg !4744
  %conv74 = zext i8 %31 to i32, !dbg !4744
  %cmp75 = icmp eq i32 %conv74, 11, !dbg !4744
  br i1 %cmp75, label %if.end143, label %lor.lhs.false77, !dbg !4744

lor.lhs.false77:                                  ; preds = %lor.lhs.false64
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4744
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !4744
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !4744
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 0, !dbg !4744
  %rt_rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !4744
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx81, align 8, !dbg !4744
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !4744
  %bf.load82 = load i32, i32* %34, align 8, !dbg !4744
  %bf.lshr83 = lshr i32 %bf.load82, 16, !dbg !4744
  %bf.clear84 = and i32 %bf.lshr83, 255, !dbg !4744
  %idxprom85 = zext i32 %bf.clear84 to i64, !dbg !4744
  %arrayidx86 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom85, !dbg !4744
  %35 = load i8, i8* %arrayidx86, align 1, !dbg !4744
  %conv87 = zext i8 %35 to i32, !dbg !4744
  %cmp88 = icmp eq i32 %conv87, 17, !dbg !4744
  br i1 %cmp88, label %if.end143, label %land.lhs.true90, !dbg !4745

land.lhs.true90:                                  ; preds = %lor.lhs.false77
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4746
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !4746
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !4746
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 1, !dbg !4746
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !4746
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !4746
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !4746
  %bf.load95 = load i32, i32* %38, align 8, !dbg !4746
  %bf.lshr96 = lshr i32 %bf.load95, 16, !dbg !4746
  %bf.clear97 = and i32 %bf.lshr96, 255, !dbg !4746
  %idxprom98 = zext i32 %bf.clear97 to i64, !dbg !4746
  %arrayidx99 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom98, !dbg !4746
  %39 = load i8, i8* %arrayidx99, align 1, !dbg !4746
  %conv100 = zext i8 %39 to i32, !dbg !4746
  %cmp101 = icmp eq i32 %conv100, 8, !dbg !4746
  br i1 %cmp101, label %if.end143, label %lor.lhs.false103, !dbg !4746

lor.lhs.false103:                                 ; preds = %land.lhs.true90
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4746
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !4746
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !4746
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 1, !dbg !4746
  %rt_rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**, !dbg !4746
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx107, align 8, !dbg !4746
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !4746
  %bf.load108 = load i32, i32* %42, align 8, !dbg !4746
  %bf.lshr109 = lshr i32 %bf.load108, 16, !dbg !4746
  %bf.clear110 = and i32 %bf.lshr109, 255, !dbg !4746
  %idxprom111 = zext i32 %bf.clear110 to i64, !dbg !4746
  %arrayidx112 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom111, !dbg !4746
  %43 = load i8, i8* %arrayidx112, align 1, !dbg !4746
  %conv113 = zext i8 %43 to i32, !dbg !4746
  %cmp114 = icmp eq i32 %conv113, 9, !dbg !4746
  br i1 %cmp114, label %if.end143, label %lor.lhs.false116, !dbg !4746

lor.lhs.false116:                                 ; preds = %lor.lhs.false103
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4746
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !4746
  %fld118 = bitcast %union.u* %u117 to [1 x %union.rtunion_def]*, !dbg !4746
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i64 0, i64 1, !dbg !4746
  %rt_rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**, !dbg !4746
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx120, align 8, !dbg !4746
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !4746
  %bf.load121 = load i32, i32* %46, align 8, !dbg !4746
  %bf.lshr122 = lshr i32 %bf.load121, 16, !dbg !4746
  %bf.clear123 = and i32 %bf.lshr122, 255, !dbg !4746
  %idxprom124 = zext i32 %bf.clear123 to i64, !dbg !4746
  %arrayidx125 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom124, !dbg !4746
  %47 = load i8, i8* %arrayidx125, align 1, !dbg !4746
  %conv126 = zext i8 %47 to i32, !dbg !4746
  %cmp127 = icmp eq i32 %conv126, 11, !dbg !4746
  br i1 %cmp127, label %if.end143, label %lor.lhs.false129, !dbg !4746

lor.lhs.false129:                                 ; preds = %lor.lhs.false116
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4746
  %u130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !4746
  %fld131 = bitcast %union.u* %u130 to [1 x %union.rtunion_def]*, !dbg !4746
  %arrayidx132 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld131, i64 0, i64 1, !dbg !4746
  %rt_rtx133 = bitcast %union.rtunion_def* %arrayidx132 to %struct.rtx_def**, !dbg !4746
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx133, align 8, !dbg !4746
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !4746
  %bf.load134 = load i32, i32* %50, align 8, !dbg !4746
  %bf.lshr135 = lshr i32 %bf.load134, 16, !dbg !4746
  %bf.clear136 = and i32 %bf.lshr135, 255, !dbg !4746
  %idxprom137 = zext i32 %bf.clear136 to i64, !dbg !4746
  %arrayidx138 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom137, !dbg !4746
  %51 = load i8, i8* %arrayidx138, align 1, !dbg !4746
  %conv139 = zext i8 %51 to i32, !dbg !4746
  %cmp140 = icmp eq i32 %conv139, 17, !dbg !4746
  br i1 %cmp140, label %if.end143, label %if.then142, !dbg !4747

if.then142:                                       ; preds = %lor.lhs.false129
  store i8 1, i8* %retval, align 1, !dbg !4748
  br label %return, !dbg !4748

if.end143:                                        ; preds = %lor.lhs.false129, %lor.lhs.false116, %lor.lhs.false103, %land.lhs.true90, %lor.lhs.false77, %lor.lhs.false64, %lor.lhs.false, %land.lhs.true42, %land.lhs.true31, %land.lhs.true23, %land.lhs.true15, %if.end
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4749
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !4749
  %bf.load144 = load i32, i32* %53, align 8, !dbg !4749
  %bf.clear145 = and i32 %bf.load144, 65535, !dbg !4749
  %idxprom146 = sext i32 %bf.clear145 to i64, !dbg !4749
  %arrayidx147 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom146, !dbg !4749
  %54 = load i32, i32* %arrayidx147, align 4, !dbg !4749
  %cmp148 = icmp eq i32 %54, 9, !dbg !4749
  br i1 %cmp148, label %land.rhs, label %land.end, !dbg !4750

land.rhs:                                         ; preds = %if.end143
  %55 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4751
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !4751
  %bf.load150 = load i32, i32* %56, align 8, !dbg !4751
  %bf.clear151 = and i32 %bf.load150, 65535, !dbg !4751
  %cmp152 = icmp ne i32 %bf.clear151, 35, !dbg !4752
  br i1 %cmp152, label %lor.end, label %lor.rhs, !dbg !4753

lor.rhs:                                          ; preds = %land.rhs
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4754
  %call154 = call zeroext i8 @shared_const_p(%struct.rtx_def* %57), !dbg !4755
  %conv155 = zext i8 %call154 to i32, !dbg !4755
  %tobool = icmp ne i32 %conv155, 0, !dbg !4753
  br label %lor.end, !dbg !4753

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %58 = phi i1 [ true, %land.rhs ], [ %tobool, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.end143
  %59 = phi i1 [ false, %if.end143 ], [ %58, %lor.end ], !dbg !4756
  %land.ext = zext i1 %59 to i32, !dbg !4750
  %conv156 = trunc i32 %land.ext to i8, !dbg !4749
  store i8 %conv156, i8* %retval, align 1, !dbg !4757
  br label %return, !dbg !4757

return:                                           ; preds = %land.end, %if.then142, %if.then
  %60 = load i8, i8* %retval, align 1, !dbg !4758
  ret i8 %60, !dbg !4758
}

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @constprop_register(%struct.rtx_def* %insn, %struct.rtx_def* %from, %struct.rtx_def* %to) #0 !dbg !4759 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.rtx_def*, align 8
  %to.addr = alloca %struct.rtx_def*, align 8
  %sset = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4762, metadata !DIExpression()), !dbg !4763
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !4764, metadata !DIExpression()), !dbg !4765
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !4766, metadata !DIExpression()), !dbg !4767
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sset, metadata !4768, metadata !DIExpression()), !dbg !4769
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4770
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4770
  %bf.load = load i32, i32* %1, align 8, !dbg !4770
  %bf.clear = and i32 %bf.load, 65535, !dbg !4770
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4770
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4770

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4770
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4770
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4770
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4770
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4770
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !4770

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4770
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4770
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4770
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4770
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4770
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !4770

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4770
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4770
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4770
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4770
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4770
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !4770

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4770
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4770
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4770
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4770
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4770
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4770
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4770
  %bf.load12 = load i32, i32* %10, align 8, !dbg !4770
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4770
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !4770
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !4770

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4770
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4770
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4770
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !4770
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4770
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4770
  br label %cond.end, !dbg !4770

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4770
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4770
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4770
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4770
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !4770
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4770
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4770
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !4770
  br label %cond.end, !dbg !4770

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !4770
  br label %cond.end25, !dbg !4770

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !4770

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !4770
  store %struct.rtx_def* %cond26, %struct.rtx_def** %sset, align 8, !dbg !4772
  %cmp27 = icmp ne %struct.rtx_def* %cond26, null, !dbg !4773
  br i1 %cmp27, label %land.lhs.true, label %if.end68, !dbg !4774

land.lhs.true:                                    ; preds = %cond.end25
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4775
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !4775
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4775
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 2, !dbg !4775
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !4775
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !4775
  %tobool = icmp ne %struct.rtx_def* %17, null, !dbg !4775
  br i1 %tobool, label %land.lhs.true32, label %if.end68, !dbg !4776

land.lhs.true32:                                  ; preds = %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4777
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !4777
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !4777
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 2, !dbg !4777
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !4777
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !4777
  %call37 = call i32 @any_condjump_p(%struct.rtx_def* %19), !dbg !4778
  %tobool38 = icmp ne i32 %call37, 0, !dbg !4778
  br i1 %tobool38, label %land.lhs.true39, label %if.end68, !dbg !4779

land.lhs.true39:                                  ; preds = %land.lhs.true32
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4780
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4780
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !4780
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 2, !dbg !4780
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !4780
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !4780
  %call44 = call i32 @onlyjump_p(%struct.rtx_def* %21), !dbg !4781
  %tobool45 = icmp ne i32 %call44, 0, !dbg !4781
  br i1 %tobool45, label %if.then, label %if.end68, !dbg !4782

if.then:                                          ; preds = %land.lhs.true39
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4783, metadata !DIExpression()), !dbg !4785
  %22 = load %struct.rtx_def*, %struct.rtx_def** %sset, align 8, !dbg !4786
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4786
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !4786
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !4786
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !4786
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !4786
  store %struct.rtx_def* %23, %struct.rtx_def** %dest, align 8, !dbg !4785
  %24 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4787
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !4787
  %bf.load50 = load i32, i32* %25, align 8, !dbg !4787
  %bf.clear51 = and i32 %bf.load50, 65535, !dbg !4787
  %cmp52 = icmp eq i32 %bf.clear51, 37, !dbg !4787
  br i1 %cmp52, label %land.lhs.true57, label %lor.lhs.false53, !dbg !4789

lor.lhs.false53:                                  ; preds = %if.then
  %26 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4790
  %tobool54 = icmp ne %struct.rtx_def* %26, null, !dbg !4790
  br i1 %tobool54, label %cond.true55, label %cond.false56, !dbg !4791

cond.true55:                                      ; preds = %lor.lhs.false53
  br i1 false, label %land.lhs.true57, label %if.end, !dbg !4790

cond.false56:                                     ; preds = %lor.lhs.false53
  br i1 false, label %land.lhs.true57, label %if.end, !dbg !4791

land.lhs.true57:                                  ; preds = %cond.false56, %cond.true55, %if.then
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4792
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !4792
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !4792
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 3, !dbg !4792
  %rt_bb = bitcast %union.rtunion_def* %arrayidx60 to %struct.basic_block_def**, !dbg !4792
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4792
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4793
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4794
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !4794
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !4794
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 2, !dbg !4794
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !4794
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !4794
  %32 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !4795
  %33 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !4796
  %call65 = call i32 @cprop_jump(%struct.basic_block_def* %28, %struct.rtx_def* %29, %struct.rtx_def* %31, %struct.rtx_def* %32, %struct.rtx_def* %33), !dbg !4797
  %tobool66 = icmp ne i32 %call65, 0, !dbg !4797
  br i1 %tobool66, label %if.then67, label %if.end, !dbg !4798

if.then67:                                        ; preds = %land.lhs.true57
  store i8 1, i8* %retval, align 1, !dbg !4799
  br label %return, !dbg !4799

if.end:                                           ; preds = %land.lhs.true57, %cond.false56, %cond.true55
  br label %if.end68, !dbg !4800

if.end68:                                         ; preds = %if.end, %land.lhs.true39, %land.lhs.true32, %land.lhs.true, %cond.end25
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4801
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4801
  %bf.load69 = load i32, i32* %35, align 8, !dbg !4801
  %bf.clear70 = and i32 %bf.load69, 65535, !dbg !4801
  %cmp71 = icmp eq i32 %bf.clear70, 8, !dbg !4801
  br i1 %cmp71, label %land.lhs.true72, label %if.else, !dbg !4803

land.lhs.true72:                                  ; preds = %if.end68
  %36 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !4804
  %37 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !4805
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4806
  %call73 = call i32 @try_replace_reg(%struct.rtx_def* %36, %struct.rtx_def* %37, %struct.rtx_def* %38), !dbg !4807
  %tobool74 = icmp ne i32 %call73, 0, !dbg !4807
  br i1 %tobool74, label %if.then75, label %if.else, !dbg !4808

if.then75:                                        ; preds = %land.lhs.true72
  store i8 1, i8* %retval, align 1, !dbg !4809
  br label %return, !dbg !4809

if.else:                                          ; preds = %land.lhs.true72, %if.end68
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4810
  %call76 = call i32 @any_condjump_p(%struct.rtx_def* %39), !dbg !4812
  %tobool77 = icmp ne i32 %call76, 0, !dbg !4812
  br i1 %tobool77, label %land.lhs.true78, label %if.end87, !dbg !4813

land.lhs.true78:                                  ; preds = %if.else
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4814
  %call79 = call i32 @onlyjump_p(%struct.rtx_def* %40), !dbg !4815
  %tobool80 = icmp ne i32 %call79, 0, !dbg !4815
  br i1 %tobool80, label %if.then81, label %if.end87, !dbg !4816

if.then81:                                        ; preds = %land.lhs.true78
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4817
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !4817
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !4817
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 3, !dbg !4817
  %rt_bb85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.basic_block_def**, !dbg !4817
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb85, align 8, !dbg !4817
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4818
  %44 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !4819
  %45 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !4820
  %call86 = call i32 @cprop_jump(%struct.basic_block_def* %42, %struct.rtx_def* null, %struct.rtx_def* %43, %struct.rtx_def* %44, %struct.rtx_def* %45), !dbg !4821
  %conv = trunc i32 %call86 to i8, !dbg !4821
  store i8 %conv, i8* %retval, align 1, !dbg !4822
  br label %return, !dbg !4822

if.end87:                                         ; preds = %land.lhs.true78, %if.else
  br label %if.end88

if.end88:                                         ; preds = %if.end87
  store i8 0, i8* %retval, align 1, !dbg !4823
  br label %return, !dbg !4823

return:                                           ; preds = %if.end88, %if.then81, %if.then75, %if.then67
  %46 = load i8, i8* %retval, align 1, !dbg !4824
  ret i8 %46, !dbg !4824
}

declare dso_local void @print_rtl(%struct._IO_FILE*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @try_replace_reg(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn) #0 !dbg !4825 {
entry:
  %from.addr = alloca %struct.rtx_def*, align 8
  %to.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %success = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !4828, metadata !DIExpression()), !dbg !4829
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !4830, metadata !DIExpression()), !dbg !4831
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4832, metadata !DIExpression()), !dbg !4833
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4834, metadata !DIExpression()), !dbg !4835
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4836
  %call = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %0), !dbg !4837
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !4835
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !4838, metadata !DIExpression()), !dbg !4839
  store %struct.rtx_def* null, %struct.rtx_def** %src, align 8, !dbg !4839
  call void @llvm.dbg.declare(metadata i32* %success, metadata !4840, metadata !DIExpression()), !dbg !4841
  store i32 0, i32* %success, align 4, !dbg !4841
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4842, metadata !DIExpression()), !dbg !4843
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4844
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !4844
  %bf.load = load i32, i32* %2, align 8, !dbg !4844
  %bf.clear = and i32 %bf.load, 65535, !dbg !4844
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4844
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4844

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4844
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4844
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4844
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4844
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4844
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !4844

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4844
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4844
  %bf.load5 = load i32, i32* %6, align 8, !dbg !4844
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4844
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4844
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !4844

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4844
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4844
  %bf.load9 = load i32, i32* %8, align 8, !dbg !4844
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4844
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4844
  br i1 %cmp11, label %cond.true, label %cond.false25, !dbg !4844

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4844
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4844
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4844
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4844
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4844
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4844
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4844
  %bf.load12 = load i32, i32* %11, align 8, !dbg !4844
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4844
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !4844
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !4844

cond.true15:                                      ; preds = %cond.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4844
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4844
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4844
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !4844
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4844
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4844
  br label %cond.end, !dbg !4844

cond.false:                                       ; preds = %cond.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4844
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4844
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4844
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4844
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !4844
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4844
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4844
  %call24 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %14, %struct.rtx_def* %16), !dbg !4844
  br label %cond.end, !dbg !4844

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %13, %cond.true15 ], [ %call24, %cond.false ], !dbg !4844
  br label %cond.end26, !dbg !4844

cond.false25:                                     ; preds = %lor.lhs.false8
  br label %cond.end26, !dbg !4844

cond.end26:                                       ; preds = %cond.false25, %cond.end
  %cond27 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false25 ], !dbg !4844
  store %struct.rtx_def* %cond27, %struct.rtx_def** %set, align 8, !dbg !4843
  %17 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !4845
  %call28 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %17), !dbg !4846
  store %struct.rtx_def* %call28, %struct.rtx_def** %to.addr, align 8, !dbg !4847
  %18 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !4848
  %19 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !4849
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4850
  call void @validate_replace_src_group(%struct.rtx_def* %18, %struct.rtx_def* %19, %struct.rtx_def* %20), !dbg !4851
  %call29 = call i32 @num_changes_pending(), !dbg !4852
  %tobool = icmp ne i32 %call29, 0, !dbg !4852
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4854

land.lhs.true:                                    ; preds = %cond.end26
  %call30 = call i32 @apply_change_group(), !dbg !4855
  %tobool31 = icmp ne i32 %call30, 0, !dbg !4855
  br i1 %tobool31, label %if.then, label %if.end, !dbg !4856

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %success, align 4, !dbg !4857
  br label %if.end, !dbg !4858

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end26
  %21 = load i32, i32* %success, align 4, !dbg !4859
  %tobool32 = icmp ne i32 %21, 0, !dbg !4859
  br i1 %tobool32, label %land.lhs.true33, label %if.end54, !dbg !4861

land.lhs.true33:                                  ; preds = %if.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4862
  %tobool34 = icmp ne %struct.rtx_def* %22, null, !dbg !4862
  br i1 %tobool34, label %land.lhs.true35, label %if.end54, !dbg !4863

land.lhs.true35:                                  ; preds = %land.lhs.true33
  %23 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !4864
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4864
  %bf.load36 = load i32, i32* %24, align 8, !dbg !4864
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !4864
  %idxprom = sext i32 %bf.clear37 to i64, !dbg !4864
  %arrayidx38 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !4864
  %25 = load i32, i32* %arrayidx38, align 4, !dbg !4864
  %cmp39 = icmp eq i32 %25, 9, !dbg !4864
  br i1 %cmp39, label %if.then40, label %if.end54, !dbg !4865

if.then40:                                        ; preds = %land.lhs.true35
  %26 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4866
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !4866
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !4866
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !4866
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !4866
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !4866
  %call45 = call %struct.rtx_def* @simplify_rtx(%struct.rtx_def* %27), !dbg !4868
  store %struct.rtx_def* %call45, %struct.rtx_def** %src, align 8, !dbg !4869
  %28 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4870
  %tobool46 = icmp ne %struct.rtx_def* %28, null, !dbg !4870
  br i1 %tobool46, label %if.then47, label %if.end53, !dbg !4872

if.then47:                                        ; preds = %if.then40
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4873
  %30 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4874
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !4874
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !4874
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 1, !dbg !4874
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !4874
  %31 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4875
  %call52 = call zeroext i8 @validate_change(%struct.rtx_def* %29, %struct.rtx_def** %rt_rtx51, %struct.rtx_def* %31, i8 zeroext 0), !dbg !4876
  br label %if.end53, !dbg !4876

if.end53:                                         ; preds = %if.then47, %if.then40
  br label %if.end54, !dbg !4877

if.end54:                                         ; preds = %if.end53, %land.lhs.true35, %land.lhs.true33, %if.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4878
  %cmp55 = icmp ne %struct.rtx_def* %32, null, !dbg !4880
  br i1 %cmp55, label %land.lhs.true56, label %if.end67, !dbg !4881

land.lhs.true56:                                  ; preds = %if.end54
  %33 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4882
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !4882
  %bf.load57 = load i32, i32* %34, align 8, !dbg !4882
  %bf.lshr = lshr i32 %bf.load57, 16, !dbg !4882
  %bf.clear58 = and i32 %bf.lshr, 255, !dbg !4882
  %cmp59 = icmp eq i32 %bf.clear58, 4, !dbg !4883
  br i1 %cmp59, label %if.then60, label %if.end67, !dbg !4884

if.then60:                                        ; preds = %land.lhs.true56
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4885
  %36 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4886
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !4886
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !4886
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 0, !dbg !4886
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !4886
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !4886
  %38 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !4887
  %39 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !4888
  %call65 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %37, %struct.rtx_def* %38, %struct.rtx_def* %39), !dbg !4889
  %call66 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %35, i32 4, %struct.rtx_def* %call65), !dbg !4890
  br label %if.end67, !dbg !4890

if.end67:                                         ; preds = %if.then60, %land.lhs.true56, %if.end54
  %40 = load i32, i32* %success, align 4, !dbg !4891
  %tobool68 = icmp ne i32 %40, 0, !dbg !4891
  br i1 %tobool68, label %if.end128, label %land.lhs.true69, !dbg !4893

land.lhs.true69:                                  ; preds = %if.end67
  %41 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4894
  %tobool70 = icmp ne %struct.rtx_def* %41, null, !dbg !4894
  br i1 %tobool70, label %land.lhs.true71, label %if.end128, !dbg !4895

land.lhs.true71:                                  ; preds = %land.lhs.true69
  %42 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !4896
  %43 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4897
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !4897
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !4897
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 1, !dbg !4897
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !4897
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !4897
  %call76 = call i32 @reg_mentioned_p(%struct.rtx_def* %42, %struct.rtx_def* %44), !dbg !4898
  %tobool77 = icmp ne i32 %call76, 0, !dbg !4898
  br i1 %tobool77, label %if.then78, label %if.end128, !dbg !4899

if.then78:                                        ; preds = %land.lhs.true71
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4900
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !4900
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !4900
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 1, !dbg !4900
  %rt_rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**, !dbg !4900
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx82, align 8, !dbg !4900
  %47 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !4902
  %48 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !4903
  %call83 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !4904
  store %struct.rtx_def* %call83, %struct.rtx_def** %src, align 8, !dbg !4905
  %49 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4906
  %50 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4908
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !4908
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !4908
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 1, !dbg !4908
  %rt_rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**, !dbg !4908
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx87, align 8, !dbg !4908
  %call88 = call i32 @rtx_equal_p(%struct.rtx_def* %49, %struct.rtx_def* %51), !dbg !4909
  %tobool89 = icmp ne i32 %call88, 0, !dbg !4909
  br i1 %tobool89, label %if.end98, label %land.lhs.true90, !dbg !4910

land.lhs.true90:                                  ; preds = %if.then78
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4911
  %53 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4912
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !4912
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !4912
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 1, !dbg !4912
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !4912
  %54 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4913
  %call95 = call zeroext i8 @validate_change(%struct.rtx_def* %52, %struct.rtx_def** %rt_rtx94, %struct.rtx_def* %54, i8 zeroext 0), !dbg !4914
  %conv = zext i8 %call95 to i32, !dbg !4914
  %tobool96 = icmp ne i32 %conv, 0, !dbg !4914
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !4915

if.then97:                                        ; preds = %land.lhs.true90
  store i32 1, i32* %success, align 4, !dbg !4916
  br label %if.end98, !dbg !4917

if.end98:                                         ; preds = %if.then97, %land.lhs.true90, %if.then78
  %55 = load i32, i32* %success, align 4, !dbg !4918
  %tobool99 = icmp ne i32 %55, 0, !dbg !4918
  br i1 %tobool99, label %if.end127, label %land.lhs.true100, !dbg !4920

land.lhs.true100:                                 ; preds = %if.end98
  %56 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4921
  %cmp101 = icmp eq %struct.rtx_def* %56, null, !dbg !4922
  br i1 %cmp101, label %land.lhs.true103, label %if.end127, !dbg !4923

land.lhs.true103:                                 ; preds = %land.lhs.true100
  %57 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4924
  %cmp104 = icmp ne %struct.rtx_def* %57, null, !dbg !4925
  br i1 %cmp104, label %land.lhs.true106, label %if.end127, !dbg !4926

land.lhs.true106:                                 ; preds = %land.lhs.true103
  %58 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4927
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !4927
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !4927
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 0, !dbg !4927
  %rt_rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**, !dbg !4927
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx110, align 8, !dbg !4927
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !4927
  %bf.load111 = load i32, i32* %60, align 8, !dbg !4927
  %bf.clear112 = and i32 %bf.load111, 65535, !dbg !4927
  %cmp113 = icmp ne i32 %bf.clear112, 120, !dbg !4928
  br i1 %cmp113, label %land.lhs.true115, label %if.end127, !dbg !4929

land.lhs.true115:                                 ; preds = %land.lhs.true106
  %61 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4930
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !4930
  %fld117 = bitcast %union.u* %u116 to [1 x %union.rtunion_def]*, !dbg !4930
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i64 0, i64 0, !dbg !4930
  %rt_rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**, !dbg !4930
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx119, align 8, !dbg !4930
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !4930
  %bf.load120 = load i32, i32* %63, align 8, !dbg !4930
  %bf.clear121 = and i32 %bf.load120, 65535, !dbg !4930
  %cmp122 = icmp ne i32 %bf.clear121, 40, !dbg !4931
  br i1 %cmp122, label %if.then124, label %if.end127, !dbg !4932

if.then124:                                       ; preds = %land.lhs.true115
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4933
  %65 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4934
  %call125 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %65), !dbg !4935
  %call126 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %64, i32 4, %struct.rtx_def* %call125), !dbg !4936
  store %struct.rtx_def* %call126, %struct.rtx_def** %note, align 8, !dbg !4937
  br label %if.end127, !dbg !4938

if.end127:                                        ; preds = %if.then124, %land.lhs.true115, %land.lhs.true106, %land.lhs.true103, %land.lhs.true100, %if.end98
  br label %if.end128, !dbg !4939

if.end128:                                        ; preds = %if.end127, %land.lhs.true71, %land.lhs.true69, %if.end67
  %66 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4940
  %tobool129 = icmp ne %struct.rtx_def* %66, null, !dbg !4940
  br i1 %tobool129, label %land.lhs.true130, label %if.end146, !dbg !4942

land.lhs.true130:                                 ; preds = %if.end128
  %67 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4943
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !4943
  %bf.load131 = load i32, i32* %68, align 8, !dbg !4943
  %bf.lshr132 = lshr i32 %bf.load131, 16, !dbg !4943
  %bf.clear133 = and i32 %bf.lshr132, 255, !dbg !4943
  %cmp134 = icmp eq i32 %bf.clear133, 4, !dbg !4944
  br i1 %cmp134, label %land.lhs.true136, label %if.end146, !dbg !4945

land.lhs.true136:                                 ; preds = %land.lhs.true130
  %69 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4946
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !4946
  %fld138 = bitcast %union.u* %u137 to [1 x %union.rtunion_def]*, !dbg !4946
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i64 0, i64 0, !dbg !4946
  %rt_rtx140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**, !dbg !4946
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx140, align 8, !dbg !4946
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !4946
  %bf.load141 = load i32, i32* %71, align 8, !dbg !4946
  %bf.clear142 = and i32 %bf.load141, 65535, !dbg !4946
  %cmp143 = icmp eq i32 %bf.clear142, 37, !dbg !4946
  br i1 %cmp143, label %if.then145, label %if.end146, !dbg !4947

if.then145:                                       ; preds = %land.lhs.true136
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4948
  %73 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4949
  call void @remove_note(%struct.rtx_def* %72, %struct.rtx_def* %73), !dbg !4950
  br label %if.end146, !dbg !4950

if.end146:                                        ; preds = %if.then145, %land.lhs.true136, %land.lhs.true130, %if.end128
  %74 = load i32, i32* %success, align 4, !dbg !4951
  ret i32 %74, !dbg !4952
}

declare dso_local zeroext i8 @shared_const_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @any_condjump_p(%struct.rtx_def*) #2

declare dso_local i32 @onlyjump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @cprop_jump(%struct.basic_block_def* %bb, %struct.rtx_def* %setcc, %struct.rtx_def* %jump, %struct.rtx_def* %from, %struct.rtx_def* %src) #0 !dbg !4953 {
entry:
  %retval = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %setcc.addr = alloca %struct.rtx_def*, align 8
  %jump.addr = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.rtx_def*, align 8
  %src.addr = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %set_src = alloca %struct.rtx_def*, align 8
  %note_src = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %setcc_src = alloca %struct.rtx_def*, align 8
  %setcc_set = alloca %struct.rtx_def*, align 8
  %setcc_note = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4956, metadata !DIExpression()), !dbg !4957
  store %struct.rtx_def* %setcc, %struct.rtx_def** %setcc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setcc.addr, metadata !4958, metadata !DIExpression()), !dbg !4959
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !4960, metadata !DIExpression()), !dbg !4961
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !4962, metadata !DIExpression()), !dbg !4963
  store %struct.rtx_def* %src, %struct.rtx_def** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src.addr, metadata !4964, metadata !DIExpression()), !dbg !4965
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !4966, metadata !DIExpression()), !dbg !4967
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set_src, metadata !4968, metadata !DIExpression()), !dbg !4969
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note_src, metadata !4970, metadata !DIExpression()), !dbg !4971
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4972, metadata !DIExpression()), !dbg !4973
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !4974
  %call = call %struct.rtx_def* @pc_set(%struct.rtx_def* %0), !dbg !4975
  store %struct.rtx_def* %call, %struct.rtx_def** %set, align 8, !dbg !4973
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4976, metadata !DIExpression()), !dbg !4977
  %1 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !4978
  %call1 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %1), !dbg !4979
  store %struct.rtx_def* %call1, %struct.rtx_def** %note, align 8, !dbg !4977
  %2 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4980
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !4980
  br i1 %tobool, label %if.then, label %if.else, !dbg !4982

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4983
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !4983
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4983
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4983
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4983
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4983
  store %struct.rtx_def* %4, %struct.rtx_def** %note_src, align 8, !dbg !4985
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note_src, align 8, !dbg !4986
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4986
  %bf.load = load i32, i32* %6, align 8, !dbg !4986
  %bf.clear = and i32 %bf.load, 65535, !dbg !4986
  %cmp = icmp eq i32 %bf.clear, 3, !dbg !4988
  br i1 %cmp, label %if.then2, label %if.end, !dbg !4989

if.then2:                                         ; preds = %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %note_src, align 8, !dbg !4990
  br label %if.end, !dbg !4991

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end3, !dbg !4992

if.else:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %note_src, align 8, !dbg !4993
  br label %if.end3

if.end3:                                          ; preds = %if.else, %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note_src, align 8, !dbg !4994
  %tobool4 = icmp ne %struct.rtx_def* %7, null, !dbg !4994
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !4994

cond.true:                                        ; preds = %if.end3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %note_src, align 8, !dbg !4995
  br label %cond.end, !dbg !4994

cond.false:                                       ; preds = %if.end3
  %9 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4996
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4996
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !4996
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !4996
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !4996
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !4996
  br label %cond.end, !dbg !4994

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ %10, %cond.false ], !dbg !4994
  store %struct.rtx_def* %cond, %struct.rtx_def** %set_src, align 8, !dbg !4997
  %11 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !4998
  %cmp9 = icmp ne %struct.rtx_def* %11, null, !dbg !5000
  br i1 %cmp9, label %land.lhs.true, label %if.else81, !dbg !5001

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !5002
  %13 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5003
  %14 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5004
  %call10 = call i32 @modified_between_p(%struct.rtx_def* %12, %struct.rtx_def* %13, %struct.rtx_def* %14), !dbg !5005
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5005
  br i1 %tobool11, label %if.else81, label %land.lhs.true12, !dbg !5006

land.lhs.true12:                                  ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5007
  %16 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5008
  %17 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5009
  %call13 = call i32 @modified_between_p(%struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %17), !dbg !5010
  %tobool14 = icmp ne i32 %call13, 0, !dbg !5010
  br i1 %tobool14, label %if.else81, label %if.then15, !dbg !5011

if.then15:                                        ; preds = %land.lhs.true12
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setcc_src, metadata !5012, metadata !DIExpression()), !dbg !5014
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setcc_set, metadata !5015, metadata !DIExpression()), !dbg !5016
  %18 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5017
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !5017
  %bf.load16 = load i32, i32* %19, align 8, !dbg !5017
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !5017
  %cmp18 = icmp eq i32 %bf.clear17, 8, !dbg !5017
  br i1 %cmp18, label %cond.true30, label %lor.lhs.false, !dbg !5017

lor.lhs.false:                                    ; preds = %if.then15
  %20 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5017
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5017
  %bf.load19 = load i32, i32* %21, align 8, !dbg !5017
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !5017
  %cmp21 = icmp eq i32 %bf.clear20, 7, !dbg !5017
  br i1 %cmp21, label %cond.true30, label %lor.lhs.false22, !dbg !5017

lor.lhs.false22:                                  ; preds = %lor.lhs.false
  %22 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5017
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5017
  %bf.load23 = load i32, i32* %23, align 8, !dbg !5017
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !5017
  %cmp25 = icmp eq i32 %bf.clear24, 9, !dbg !5017
  br i1 %cmp25, label %cond.true30, label %lor.lhs.false26, !dbg !5017

lor.lhs.false26:                                  ; preds = %lor.lhs.false22
  %24 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5017
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !5017
  %bf.load27 = load i32, i32* %25, align 8, !dbg !5017
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !5017
  %cmp29 = icmp eq i32 %bf.clear28, 10, !dbg !5017
  br i1 %cmp29, label %cond.true30, label %cond.false51, !dbg !5017

cond.true30:                                      ; preds = %lor.lhs.false26, %lor.lhs.false22, %lor.lhs.false, %if.then15
  %26 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5017
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5017
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !5017
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 5, !dbg !5017
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !5017
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !5017
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !5017
  %bf.load35 = load i32, i32* %28, align 8, !dbg !5017
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !5017
  %cmp37 = icmp eq i32 %bf.clear36, 23, !dbg !5017
  br i1 %cmp37, label %cond.true38, label %cond.false43, !dbg !5017

cond.true38:                                      ; preds = %cond.true30
  %29 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5017
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !5017
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !5017
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 5, !dbg !5017
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !5017
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !5017
  br label %cond.end49, !dbg !5017

cond.false43:                                     ; preds = %cond.true30
  %31 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5017
  %32 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5017
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !5017
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !5017
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 5, !dbg !5017
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !5017
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !5017
  %call48 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %31, %struct.rtx_def* %33), !dbg !5017
  br label %cond.end49, !dbg !5017

cond.end49:                                       ; preds = %cond.false43, %cond.true38
  %cond50 = phi %struct.rtx_def* [ %30, %cond.true38 ], [ %call48, %cond.false43 ], !dbg !5017
  br label %cond.end52, !dbg !5017

cond.false51:                                     ; preds = %lor.lhs.false26
  br label %cond.end52, !dbg !5017

cond.end52:                                       ; preds = %cond.false51, %cond.end49
  %cond53 = phi %struct.rtx_def* [ %cond50, %cond.end49 ], [ null, %cond.false51 ], !dbg !5017
  store %struct.rtx_def* %cond53, %struct.rtx_def** %setcc_set, align 8, !dbg !5016
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setcc_note, metadata !5018, metadata !DIExpression()), !dbg !5019
  %34 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5020
  %call54 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %34), !dbg !5021
  store %struct.rtx_def* %call54, %struct.rtx_def** %setcc_note, align 8, !dbg !5019
  %35 = load %struct.rtx_def*, %struct.rtx_def** %setcc_note, align 8, !dbg !5022
  %tobool55 = icmp ne %struct.rtx_def* %35, null, !dbg !5022
  br i1 %tobool55, label %land.lhs.true56, label %cond.false69, !dbg !5023

land.lhs.true56:                                  ; preds = %cond.end52
  %36 = load %struct.rtx_def*, %struct.rtx_def** %setcc_note, align 8, !dbg !5024
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !5024
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !5024
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 0, !dbg !5024
  %rt_rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !5024
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx60, align 8, !dbg !5024
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !5024
  %bf.load61 = load i32, i32* %38, align 8, !dbg !5024
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !5024
  %cmp63 = icmp ne i32 %bf.clear62, 3, !dbg !5025
  br i1 %cmp63, label %cond.true64, label %cond.false69, !dbg !5026

cond.true64:                                      ; preds = %land.lhs.true56
  %39 = load %struct.rtx_def*, %struct.rtx_def** %setcc_note, align 8, !dbg !5027
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5027
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !5027
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !5027
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !5027
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx68, align 8, !dbg !5027
  br label %cond.end74, !dbg !5026

cond.false69:                                     ; preds = %land.lhs.true56, %cond.end52
  %41 = load %struct.rtx_def*, %struct.rtx_def** %setcc_set, align 8, !dbg !5028
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5028
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !5028
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 1, !dbg !5028
  %rt_rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**, !dbg !5028
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx73, align 8, !dbg !5028
  br label %cond.end74, !dbg !5026

cond.end74:                                       ; preds = %cond.false69, %cond.true64
  %cond75 = phi %struct.rtx_def* [ %40, %cond.true64 ], [ %42, %cond.false69 ], !dbg !5026
  store %struct.rtx_def* %cond75, %struct.rtx_def** %setcc_src, align 8, !dbg !5029
  %43 = load %struct.rtx_def*, %struct.rtx_def** %set_src, align 8, !dbg !5030
  %44 = load %struct.rtx_def*, %struct.rtx_def** %setcc_set, align 8, !dbg !5031
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !5031
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !5031
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 0, !dbg !5031
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !5031
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx79, align 8, !dbg !5031
  %46 = load %struct.rtx_def*, %struct.rtx_def** %setcc_src, align 8, !dbg !5032
  %call80 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %43, %struct.rtx_def* %45, %struct.rtx_def* %46), !dbg !5033
  store %struct.rtx_def* %call80, %struct.rtx_def** %set_src, align 8, !dbg !5034
  br label %if.end82, !dbg !5035

if.else81:                                        ; preds = %land.lhs.true12, %land.lhs.true, %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %setcc.addr, align 8, !dbg !5036
  br label %if.end82

if.end82:                                         ; preds = %if.else81, %cond.end74
  %47 = load %struct.rtx_def*, %struct.rtx_def** %set_src, align 8, !dbg !5037
  %48 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !5038
  %49 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5039
  %call83 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %47, %struct.rtx_def* %48, %struct.rtx_def* %49), !dbg !5040
  store %struct.rtx_def* %call83, %struct.rtx_def** %new_rtx, align 8, !dbg !5041
  %50 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5042
  %51 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5044
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !5044
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !5044
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 1, !dbg !5044
  %rt_rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**, !dbg !5044
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx87, align 8, !dbg !5044
  %call88 = call i32 @rtx_equal_p(%struct.rtx_def* %50, %struct.rtx_def* %52), !dbg !5045
  %tobool89 = icmp ne i32 %call88, 0, !dbg !5045
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !5046

if.then90:                                        ; preds = %if.end82
  store i32 0, i32* %retval, align 4, !dbg !5047
  br label %return, !dbg !5047

if.end91:                                         ; preds = %if.end82
  %53 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5048
  %54 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !5050
  %cmp92 = icmp eq %struct.rtx_def* %53, %54, !dbg !5051
  br i1 %cmp92, label %if.then93, label %if.else95, !dbg !5052

if.then93:                                        ; preds = %if.end91
  %55 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5053
  %call94 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %55), !dbg !5054
  br label %if.end119, !dbg !5054

if.else95:                                        ; preds = %if.end91
  %56 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5055
  %tobool96 = icmp ne %struct.rtx_def* %56, null, !dbg !5055
  br i1 %tobool96, label %land.lhs.true97, label %if.end101, !dbg !5058

land.lhs.true97:                                  ; preds = %if.else95
  %57 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5059
  %58 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !5060
  %call98 = call i32 @modified_in_p(%struct.rtx_def* %57, %struct.rtx_def* %58), !dbg !5061
  %tobool99 = icmp ne i32 %call98, 0, !dbg !5061
  br i1 %tobool99, label %if.then100, label %if.end101, !dbg !5062

if.then100:                                       ; preds = %land.lhs.true97
  store i32 0, i32* %retval, align 4, !dbg !5063
  br label %return, !dbg !5063

if.end101:                                        ; preds = %land.lhs.true97, %if.else95
  %59 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5064
  %60 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5066
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !5066
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !5066
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 1, !dbg !5066
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !5066
  %61 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5067
  %call106 = call zeroext i8 @validate_unshare_change(%struct.rtx_def* %59, %struct.rtx_def** %rt_rtx105, %struct.rtx_def* %61, i8 zeroext 0), !dbg !5068
  %tobool107 = icmp ne i8 %call106, 0, !dbg !5068
  br i1 %tobool107, label %if.end115, label %if.then108, !dbg !5069

if.then108:                                       ; preds = %if.end101
  %62 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5070
  %63 = load %struct.rtx_def*, %struct.rtx_def** %note_src, align 8, !dbg !5073
  %call109 = call i32 @rtx_equal_p(%struct.rtx_def* %62, %struct.rtx_def* %63), !dbg !5074
  %tobool110 = icmp ne i32 %call109, 0, !dbg !5074
  br i1 %tobool110, label %if.end114, label %if.then111, !dbg !5075

if.then111:                                       ; preds = %if.then108
  %64 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5076
  %65 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5077
  %call112 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %65), !dbg !5078
  %call113 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %64, i32 4, %struct.rtx_def* %call112), !dbg !5079
  br label %if.end114, !dbg !5079

if.end114:                                        ; preds = %if.then111, %if.then108
  store i32 0, i32* %retval, align 4, !dbg !5080
  br label %return, !dbg !5080

if.end115:                                        ; preds = %if.end101
  %66 = load %struct.rtx_def*, %struct.rtx_def** %note_src, align 8, !dbg !5081
  %tobool116 = icmp ne %struct.rtx_def* %66, null, !dbg !5081
  br i1 %tobool116, label %if.then117, label %if.end118, !dbg !5083

if.then117:                                       ; preds = %if.end115
  %67 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5084
  %68 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5085
  call void @remove_note(%struct.rtx_def* %67, %struct.rtx_def* %68), !dbg !5086
  br label %if.end118, !dbg !5086

if.end118:                                        ; preds = %if.then117, %if.end115
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %if.then93
  %69 = load i32, i32* @global_const_prop_count, align 4, !dbg !5087
  %inc = add nsw i32 %69, 1, !dbg !5087
  store i32 %inc, i32* @global_const_prop_count, align 4, !dbg !5087
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5088
  %cmp120 = icmp ne %struct._IO_FILE* %70, null, !dbg !5090
  br i1 %cmp120, label %if.then121, label %if.end128, !dbg !5091

if.then121:                                       ; preds = %if.end119
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5092
  %72 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !5094
  %call122 = call i32 @rhs_regno(%struct.rtx_def* %72), !dbg !5094
  %73 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5095
  %u123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !5095
  %fld124 = bitcast %union.u* %u123 to [1 x %union.rtunion_def]*, !dbg !5095
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i64 0, i64 0, !dbg !5095
  %rt_int = bitcast %union.rtunion_def* %arrayidx125 to i32*, !dbg !5095
  %74 = load i32, i32* %rt_int, align 8, !dbg !5095
  %call126 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.15, i64 0, i64 0), i32 %call122, i32 %74), !dbg !5096
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5097
  %76 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !5098
  call void @print_rtl(%struct._IO_FILE* %75, %struct.rtx_def* %76), !dbg !5099
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5100
  %call127 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5101
  br label %if.end128, !dbg !5102

if.end128:                                        ; preds = %if.then121, %if.end119
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5103
  %call129 = call zeroext i8 @purge_dead_edges(%struct.basic_block_def* %78), !dbg !5104
  %79 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !5105
  %80 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !5107
  %cmp130 = icmp ne %struct.rtx_def* %79, %80, !dbg !5108
  br i1 %cmp130, label %land.lhs.true131, label %if.end149, !dbg !5109

land.lhs.true131:                                 ; preds = %if.end128
  %81 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5110
  %call132 = call i32 @simplejump_p(%struct.rtx_def* %81), !dbg !5111
  %tobool133 = icmp ne i32 %call132, 0, !dbg !5111
  br i1 %tobool133, label %if.then134, label %if.end149, !dbg !5112

if.then134:                                       ; preds = %land.lhs.true131
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5113, metadata !DIExpression()), !dbg !5115
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5116, metadata !DIExpression()), !dbg !5123
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5124
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 1, !dbg !5124
  %call135 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5124
  %83 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5124
  %84 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %83, i32 0, i32 0, !dbg !5124
  %85 = extractvalue { i32, %struct.VEC_edge_gc** } %call135, 0, !dbg !5124
  store i32 %85, i32* %84, align 8, !dbg !5124
  %86 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %83, i32 0, i32 1, !dbg !5124
  %87 = extractvalue { i32, %struct.VEC_edge_gc** } %call135, 1, !dbg !5124
  store %struct.VEC_edge_gc** %87, %struct.VEC_edge_gc*** %86, align 8, !dbg !5124
  %88 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5124
  %89 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5124
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 16, i1 false), !dbg !5124
  br label %for.cond, !dbg !5126

for.cond:                                         ; preds = %for.inc, %if.then134
  %90 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5127
  %91 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %90, i32 0, i32 0, !dbg !5127
  %92 = load i32, i32* %91, align 8, !dbg !5127
  %93 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %90, i32 0, i32 1, !dbg !5127
  %94 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %93, align 8, !dbg !5127
  %call136 = call %struct.edge_def* @ei_safe_edge(i32 %92, %struct.VEC_edge_gc** %94), !dbg !5127
  store %struct.edge_def* %call136, %struct.edge_def** %e, align 8, !dbg !5129
  %tobool137 = icmp ne %struct.edge_def* %call136, null, !dbg !5130
  br i1 %tobool137, label %for.body, label %for.end, !dbg !5130

for.body:                                         ; preds = %for.cond
  %95 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5131
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %95, i32 0, i32 1, !dbg !5133
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5133
  %97 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5134
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %97, i64 0, !dbg !5134
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5134
  %98 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5134
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %98, i32 0, i32 1, !dbg !5134
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5134
  %cmp138 = icmp ne %struct.basic_block_def* %96, %99, !dbg !5135
  br i1 %cmp138, label %land.lhs.true139, label %if.end147, !dbg !5136

land.lhs.true139:                                 ; preds = %for.body
  %100 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5137
  %dest140 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %100, i32 0, i32 1, !dbg !5137
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %dest140, align 8, !dbg !5137
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 7, !dbg !5137
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5137
  %102 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5137
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %102, i32 0, i32 0, !dbg !5137
  %103 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5137
  %104 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5138
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !5138
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !5138
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 8, !dbg !5138
  %rt_rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**, !dbg !5138
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx144, align 8, !dbg !5138
  %cmp145 = icmp eq %struct.rtx_def* %103, %105, !dbg !5139
  br i1 %cmp145, label %if.then146, label %if.end147, !dbg !5140

if.then146:                                       ; preds = %land.lhs.true139
  %106 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5141
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %106, i32 0, i32 7, !dbg !5143
  %107 = load i32, i32* %flags, align 8, !dbg !5144
  %or = or i32 %107, 1, !dbg !5144
  store i32 %or, i32* %flags, align 8, !dbg !5144
  br label %for.end, !dbg !5145

if.end147:                                        ; preds = %land.lhs.true139, %for.body
  br label %for.inc, !dbg !5138

for.inc:                                          ; preds = %if.end147
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5146
  br label %for.cond, !dbg !5147, !llvm.loop !5148

for.end:                                          ; preds = %if.then146, %for.cond
  %108 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5150
  %call148 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %108), !dbg !5151
  br label %if.end149, !dbg !5152

if.end149:                                        ; preds = %for.end, %land.lhs.true131, %if.end128
  store i32 1, i32* %retval, align 4, !dbg !5153
  br label %return, !dbg !5153

return:                                           ; preds = %if.end149, %if.end114, %if.then100, %if.then90
  %109 = load i32, i32* %retval, align 4, !dbg !5154
  ret i32 %109, !dbg !5154
}

declare dso_local %struct.rtx_def* @pc_set(%struct.rtx_def*) #2

declare dso_local i32 @modified_between_p(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

declare dso_local i32 @modified_in_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @validate_unshare_change(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @purge_dead_edges(%struct.basic_block_def*) #2

declare dso_local i32 @simplejump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !5155 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !5158, metadata !DIExpression()), !dbg !5159
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !5160, metadata !DIExpression()), !dbg !5161
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !5162
  store i32 0, i32* %index, align 8, !dbg !5163
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !5164
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !5165
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !5166
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !5167
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !5167
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !5167
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5168 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5171, metadata !DIExpression()), !dbg !5172
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5173
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5173
  %5 = load i32, i32* %4, align 8, !dbg !5173
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5173
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5173
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5173
  %tobool = icmp ne i8 %call, 0, !dbg !5173
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5174

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5175
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5175
  %10 = load i32, i32* %9, align 8, !dbg !5175
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5175
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5175
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5175
  br label %cond.end, !dbg !5174

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5174

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !5174
  ret %struct.edge_def* %cond, !dbg !5176
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !5177 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !5181, metadata !DIExpression()), !dbg !5182
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5183
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !5183
  %1 = load i32, i32* %index, align 8, !dbg !5183
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5183
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !5183
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5183
  %5 = load i32, i32* %4, align 8, !dbg !5183
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5183
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5183
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5183
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5183
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5183

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5183
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !5183
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5183
  %11 = load i32, i32* %10, align 8, !dbg !5183
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5183
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5183
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5183
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5183
  br label %cond.end, !dbg !5183

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5183

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5183
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5183
  %cmp = icmp ult i32 %1, %call2, !dbg !5183
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !5183

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !5183
  br label %cond.end5, !dbg !5183

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5183

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5183
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5184
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !5185
  %15 = load i32, i32* %index7, align 8, !dbg !5186
  %inc = add i32 %15, 1, !dbg !5186
  store i32 %inc, i32* %index7, align 8, !dbg !5186
  ret void, !dbg !5187
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5188 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5191, metadata !DIExpression()), !dbg !5192
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5193
  %3 = load i32, i32* %index, align 8, !dbg !5193
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5194
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5194
  %6 = load i32, i32* %5, align 8, !dbg !5194
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5194
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5194
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5194
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5194
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5194

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5194
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5194
  %11 = load i32, i32* %10, align 8, !dbg !5194
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5194
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5194
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5194
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5194
  br label %cond.end, !dbg !5194

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5194

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5194
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5194
  %cmp = icmp eq i32 %3, %call2, !dbg !5195
  %conv = zext i1 %cmp to i32, !dbg !5195
  %conv3 = trunc i32 %conv to i8, !dbg !5196
  ret i8 %conv3, !dbg !5197
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5198 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5199, metadata !DIExpression()), !dbg !5200
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5201
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5201
  %5 = load i32, i32* %4, align 8, !dbg !5201
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5201
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5201
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5201
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5201
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5201

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5201
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5201
  %10 = load i32, i32* %9, align 8, !dbg !5201
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5201
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5201
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5201
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5201
  br label %cond.end, !dbg !5201

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5201

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5201
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5201
  %13 = load i32, i32* %index, align 8, !dbg !5201
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5201
  ret %struct.edge_def* %call2, !dbg !5202
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5203 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5209
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5209
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5209

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5209
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5209
  %2 = load i32, i32* %num, align 8, !dbg !5209
  br label %cond.end, !dbg !5209

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5209

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5209
  ret i32 %cond, !dbg !5209
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5210 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5213, metadata !DIExpression()), !dbg !5214
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5215
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5215
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5215
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5215

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !5215
  br label %cond.end, !dbg !5215

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5215

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5215
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5216
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5216
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5217
  ret %struct.VEC_edge_gc* %5, !dbg !5218
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !5219 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5222, metadata !DIExpression()), !dbg !5223
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5224, metadata !DIExpression()), !dbg !5223
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5223
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5223
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5223

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5223
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5223
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5223
  %3 = load i32, i32* %num, align 8, !dbg !5223
  %cmp = icmp ult i32 %1, %3, !dbg !5223
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5225
  %land.ext = zext i1 %4 to i32, !dbg !5223
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5223
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !5223
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5223
  %idxprom = zext i32 %6 to i64, !dbg !5223
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5223
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5223
  ret %struct.edge_def* %7, !dbg !5223
}

declare dso_local void @validate_replace_src_group(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @num_changes_pending() #2

declare dso_local i32 @apply_change_group() #2

declare dso_local %struct.rtx_def* @simplify_rtx(%struct.rtx_def*) #2

declare dso_local zeroext i8 @validate_change(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i8 zeroext) #2

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @implicit_set_cond_p(%struct.rtx_def* %cond) #0 !dbg !5226 {
entry:
  %retval = alloca i8, align 1
  %cond.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %cst = alloca %struct.rtx_def*, align 8
  %d = alloca %struct.real_value, align 8
  store %struct.rtx_def* %cond, %struct.rtx_def** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond.addr, metadata !5227, metadata !DIExpression()), !dbg !5228
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !5229, metadata !DIExpression()), !dbg !5231
  %0 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8, !dbg !5232
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5232
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5232
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5232
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5232
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5232
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !5232
  %bf.load = load i32, i32* %2, align 8, !dbg !5232
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5232
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5232
  store i32 %bf.clear, i32* %mode, align 4, !dbg !5231
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cst, metadata !5233, metadata !DIExpression()), !dbg !5234
  %3 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8, !dbg !5235
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5235
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5235
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !5235
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !5235
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !5235
  store %struct.rtx_def* %4, %struct.rtx_def** %cst, align 8, !dbg !5234
  %5 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom = zext i32 %5 to i64, !dbg !5236
  %arrayidx5 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5236
  %6 = load i8, i8* %arrayidx5, align 1, !dbg !5236
  %conv = zext i8 %6 to i32, !dbg !5236
  %cmp = icmp eq i32 %conv, 8, !dbg !5236
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5236

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom7 = zext i32 %7 to i64, !dbg !5236
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !5236
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !5236
  %conv9 = zext i8 %8 to i32, !dbg !5236
  %cmp10 = icmp eq i32 %conv9, 9, !dbg !5236
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false12, !dbg !5236

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %9 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom13 = zext i32 %9 to i64, !dbg !5236
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom13, !dbg !5236
  %10 = load i8, i8* %arrayidx14, align 1, !dbg !5236
  %conv15 = zext i8 %10 to i32, !dbg !5236
  %cmp16 = icmp eq i32 %conv15, 11, !dbg !5236
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false18, !dbg !5236

lor.lhs.false18:                                  ; preds = %lor.lhs.false12
  %11 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom19 = zext i32 %11 to i64, !dbg !5236
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !5236
  %12 = load i8, i8* %arrayidx20, align 1, !dbg !5236
  %conv21 = zext i8 %12 to i32, !dbg !5236
  %cmp22 = icmp eq i32 %conv21, 17, !dbg !5236
  br i1 %cmp22, label %land.lhs.true, label %if.end99, !dbg !5236

land.lhs.true:                                    ; preds = %lor.lhs.false18, %lor.lhs.false12, %lor.lhs.false, %entry
  %13 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom24 = zext i32 %13 to i64, !dbg !5236
  %arrayidx25 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom24, !dbg !5236
  %14 = load i8, i8* %arrayidx25, align 1, !dbg !5236
  %conv26 = zext i8 %14 to i32, !dbg !5236
  %cmp27 = icmp eq i32 %conv26, 8, !dbg !5236
  br i1 %cmp27, label %cond.true, label %lor.lhs.false29, !dbg !5236

lor.lhs.false29:                                  ; preds = %land.lhs.true
  %15 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom30 = zext i32 %15 to i64, !dbg !5236
  %arrayidx31 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom30, !dbg !5236
  %16 = load i8, i8* %arrayidx31, align 1, !dbg !5236
  %conv32 = zext i8 %16 to i32, !dbg !5236
  %cmp33 = icmp eq i32 %conv32, 9, !dbg !5236
  br i1 %cmp33, label %cond.true, label %cond.false, !dbg !5236

cond.true:                                        ; preds = %lor.lhs.false29, %land.lhs.true
  %17 = load i32, i32* %mode, align 4, !dbg !5236
  br label %cond.end, !dbg !5236

cond.false:                                       ; preds = %lor.lhs.false29
  %18 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom35 = zext i32 %18 to i64, !dbg !5236
  %arrayidx36 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom35, !dbg !5236
  %19 = load i8, i8* %arrayidx36, align 1, !dbg !5236
  %conv37 = zext i8 %19 to i32, !dbg !5236
  br label %cond.end, !dbg !5236

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond38 = phi i32 [ %17, %cond.true ], [ %conv37, %cond.false ], !dbg !5236
  %idxprom39 = zext i32 %cond38 to i64, !dbg !5236
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !5236
  %20 = load i8, i8* %arrayidx40, align 1, !dbg !5236
  %conv41 = zext i8 %20 to i32, !dbg !5236
  %cmp42 = icmp eq i32 %conv41, 9, !dbg !5236
  br i1 %cmp42, label %cond.true44, label %cond.false63, !dbg !5236

cond.true44:                                      ; preds = %cond.end
  %21 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom45 = zext i32 %21 to i64, !dbg !5236
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !5236
  %22 = load i8, i8* %arrayidx46, align 1, !dbg !5236
  %conv47 = zext i8 %22 to i32, !dbg !5236
  %cmp48 = icmp eq i32 %conv47, 8, !dbg !5236
  br i1 %cmp48, label %cond.true56, label %lor.lhs.false50, !dbg !5236

lor.lhs.false50:                                  ; preds = %cond.true44
  %23 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom51 = zext i32 %23 to i64, !dbg !5236
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom51, !dbg !5236
  %24 = load i8, i8* %arrayidx52, align 1, !dbg !5236
  %conv53 = zext i8 %24 to i32, !dbg !5236
  %cmp54 = icmp eq i32 %conv53, 9, !dbg !5236
  br i1 %cmp54, label %cond.true56, label %cond.false57, !dbg !5236

cond.true56:                                      ; preds = %lor.lhs.false50, %cond.true44
  %25 = load i32, i32* %mode, align 4, !dbg !5236
  br label %cond.end61, !dbg !5236

cond.false57:                                     ; preds = %lor.lhs.false50
  %26 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom58 = zext i32 %26 to i64, !dbg !5236
  %arrayidx59 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom58, !dbg !5236
  %27 = load i8, i8* %arrayidx59, align 1, !dbg !5236
  %conv60 = zext i8 %27 to i32, !dbg !5236
  br label %cond.end61, !dbg !5236

cond.end61:                                       ; preds = %cond.false57, %cond.true56
  %cond62 = phi i32 [ %25, %cond.true56 ], [ %conv60, %cond.false57 ], !dbg !5236
  %sub = sub i32 %cond62, 42, !dbg !5236
  %add = add i32 %sub, 4, !dbg !5236
  br label %cond.end83, !dbg !5236

cond.false63:                                     ; preds = %cond.end
  %28 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom64 = zext i32 %28 to i64, !dbg !5236
  %arrayidx65 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom64, !dbg !5236
  %29 = load i8, i8* %arrayidx65, align 1, !dbg !5236
  %conv66 = zext i8 %29 to i32, !dbg !5236
  %cmp67 = icmp eq i32 %conv66, 8, !dbg !5236
  br i1 %cmp67, label %cond.true75, label %lor.lhs.false69, !dbg !5236

lor.lhs.false69:                                  ; preds = %cond.false63
  %30 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom70 = zext i32 %30 to i64, !dbg !5236
  %arrayidx71 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom70, !dbg !5236
  %31 = load i8, i8* %arrayidx71, align 1, !dbg !5236
  %conv72 = zext i8 %31 to i32, !dbg !5236
  %cmp73 = icmp eq i32 %conv72, 9, !dbg !5236
  br i1 %cmp73, label %cond.true75, label %cond.false76, !dbg !5236

cond.true75:                                      ; preds = %lor.lhs.false69, %cond.false63
  %32 = load i32, i32* %mode, align 4, !dbg !5236
  br label %cond.end80, !dbg !5236

cond.false76:                                     ; preds = %lor.lhs.false69
  %33 = load i32, i32* %mode, align 4, !dbg !5236
  %idxprom77 = zext i32 %33 to i64, !dbg !5236
  %arrayidx78 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom77, !dbg !5236
  %34 = load i8, i8* %arrayidx78, align 1, !dbg !5236
  %conv79 = zext i8 %34 to i32, !dbg !5236
  br label %cond.end80, !dbg !5236

cond.end80:                                       ; preds = %cond.false76, %cond.true75
  %cond81 = phi i32 [ %32, %cond.true75 ], [ %conv79, %cond.false76 ], !dbg !5236
  %sub82 = sub i32 %cond81, 38, !dbg !5236
  br label %cond.end83, !dbg !5236

cond.end83:                                       ; preds = %cond.end80, %cond.end61
  %cond84 = phi i32 [ %add, %cond.end61 ], [ %sub82, %cond.end80 ], !dbg !5236
  %idxprom85 = zext i32 %cond84 to i64, !dbg !5236
  %arrayidx86 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom85, !dbg !5236
  %35 = load %struct.real_format*, %struct.real_format** %arrayidx86, align 8, !dbg !5236
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %35, i32 0, i32 14, !dbg !5236
  %36 = load i8, i8* %has_signed_zero, align 1, !dbg !5236
  %conv87 = zext i8 %36 to i32, !dbg !5236
  %tobool = icmp ne i32 %conv87, 0, !dbg !5236
  br i1 %tobool, label %land.lhs.true88, label %if.end99, !dbg !5236

land.lhs.true88:                                  ; preds = %cond.end83
  %37 = load i32, i32* @flag_signed_zeros, align 4, !dbg !5236
  %tobool89 = icmp ne i32 %37, 0, !dbg !5236
  br i1 %tobool89, label %if.then, label %if.end99, !dbg !5238

if.then:                                          ; preds = %land.lhs.true88
  %38 = load %struct.rtx_def*, %struct.rtx_def** %cst, align 8, !dbg !5239
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !5239
  %bf.load90 = load i32, i32* %39, align 8, !dbg !5239
  %bf.clear91 = and i32 %bf.load90, 65535, !dbg !5239
  %cmp92 = icmp eq i32 %bf.clear91, 32, !dbg !5242
  br i1 %cmp92, label %if.then94, label %if.else, !dbg !5243

if.then94:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.real_value* %d, metadata !5244, metadata !DIExpression()), !dbg !5246
  %40 = load %struct.rtx_def*, %struct.rtx_def** %cst, align 8, !dbg !5247
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !5247
  %rv = bitcast %union.u* %u95 to %struct.real_value*, !dbg !5247
  %41 = bitcast %struct.real_value* %d to i8*, !dbg !5247
  %42 = bitcast %struct.real_value* %rv to i8*, !dbg !5247
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 32, i1 false), !dbg !5247
  %call = call zeroext i8 @real_compare(i32 101, %struct.real_value* %d, %struct.real_value* @dconst0), !dbg !5248
  %tobool96 = icmp ne i8 %call, 0, !dbg !5248
  br i1 %tobool96, label %if.then97, label %if.end, !dbg !5250

if.then97:                                        ; preds = %if.then94
  store i8 0, i8* %retval, align 1, !dbg !5251
  br label %return, !dbg !5251

if.end:                                           ; preds = %if.then94
  br label %if.end98, !dbg !5252

if.else:                                          ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !5253
  br label %return, !dbg !5253

if.end98:                                         ; preds = %if.end
  br label %if.end99, !dbg !5254

if.end99:                                         ; preds = %if.end98, %land.lhs.true88, %cond.end83, %lor.lhs.false18
  %43 = load %struct.rtx_def*, %struct.rtx_def** %cst, align 8, !dbg !5255
  %call100 = call zeroext i8 @gcse_constant_p(%struct.rtx_def* %43), !dbg !5256
  store i8 %call100, i8* %retval, align 1, !dbg !5257
  br label %return, !dbg !5257

return:                                           ; preds = %if.end99, %if.else, %if.then97
  %44 = load i8, i8* %retval, align 1, !dbg !5258
  ret i8 %44, !dbg !5258
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !5259 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5265, metadata !DIExpression()), !dbg !5266
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5267
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !5267
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5267
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !5267
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5267

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5267
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !5267
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !5267
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !5267
  br label %cond.end, !dbg !5267

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5267

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5267
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5267
  %cmp = icmp eq i32 %call, 1, !dbg !5268
  %conv = zext i1 %cmp to i32, !dbg !5268
  %conv2 = trunc i32 %conv to i8, !dbg !5267
  ret i8 %conv2, !dbg !5269
}

declare dso_local zeroext i8 @real_compare(i32, %struct.real_value*, %struct.real_value*) #2

declare dso_local i32 @get_max_insn_count() #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @gmalloc(i64 %size) #0 !dbg !5270 {
entry:
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !5273, metadata !DIExpression()), !dbg !5274
  %0 = load i64, i64* %size.addr, align 8, !dbg !5275
  %1 = load i32, i32* @bytes_used, align 4, !dbg !5276
  %conv = sext i32 %1 to i64, !dbg !5276
  %add = add i64 %conv, %0, !dbg !5276
  %conv1 = trunc i64 %add to i32, !dbg !5276
  store i32 %conv1, i32* @bytes_used, align 4, !dbg !5276
  %2 = load i64, i64* %size.addr, align 8, !dbg !5277
  %call = call i8* @xmalloc(i64 %2), !dbg !5278
  ret i8* %call, !dbg !5279
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_hash_table_work(%struct.hash_table_d* %table) #0 !dbg !5280 {
entry:
  %table.addr = alloca %struct.hash_table_d*, align 8
  %i = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !5281, metadata !DIExpression()), !dbg !5282
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5283, metadata !DIExpression()), !dbg !5284
  call void @clear_modify_mem_tables(), !dbg !5285
  %call = call i32 @max_reg_num(), !dbg !5286
  %conv = sext i32 %call to i64, !dbg !5286
  %mul = mul i64 16, %conv, !dbg !5286
  %call1 = call i8* @gmalloc(i64 %mul), !dbg !5286
  %0 = bitcast i8* %call1 to %struct.reg_avail_info*, !dbg !5286
  store %struct.reg_avail_info* %0, %struct.reg_avail_info** @reg_avail_info, align 8, !dbg !5287
  store i32 0, i32* %i, align 4, !dbg !5288
  br label %for.cond, !dbg !5290

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !5291
  %call2 = call i32 @max_reg_num(), !dbg !5293
  %cmp = icmp slt i32 %1, %call2, !dbg !5294
  br i1 %cmp, label %for.body, label %for.end, !dbg !5295

for.body:                                         ; preds = %for.cond
  %2 = load %struct.reg_avail_info*, %struct.reg_avail_info** @reg_avail_info, align 8, !dbg !5296
  %3 = load i32, i32* %i, align 4, !dbg !5297
  %idxprom = sext i32 %3 to i64, !dbg !5296
  %arrayidx = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %2, i64 %idxprom, !dbg !5296
  %last_bb = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %arrayidx, i32 0, i32 0, !dbg !5298
  store %struct.basic_block_def* null, %struct.basic_block_def** %last_bb, align 8, !dbg !5299
  br label %for.inc, !dbg !5296

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !5300
  %inc = add nsw i32 %4, 1, !dbg !5300
  store i32 %inc, i32* %i, align 4, !dbg !5300
  br label %for.cond, !dbg !5301, !llvm.loop !5302

for.end:                                          ; preds = %for.cond
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5304
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5304
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5304
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5304
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !5304
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5304
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 6, !dbg !5304
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5304
  store %struct.basic_block_def* %8, %struct.basic_block_def** @current_bb, align 8, !dbg !5304
  br label %for.cond4, !dbg !5304

for.cond4:                                        ; preds = %for.inc116, %for.end
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5306
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5306
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !5306
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !5306
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !5306
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !5306
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5306
  %cmp7 = icmp ne %struct.basic_block_def* %9, %12, !dbg !5306
  br i1 %cmp7, label %for.body9, label %for.end118, !dbg !5304

for.body9:                                        ; preds = %for.cond4
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5308, metadata !DIExpression()), !dbg !5310
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !5311, metadata !DIExpression()), !dbg !5312
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5313
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !5313
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5313
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5313
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 0, !dbg !5313
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5313
  store %struct.rtx_def* %15, %struct.rtx_def** %insn, align 8, !dbg !5313
  br label %for.cond10, !dbg !5313

for.cond10:                                       ; preds = %for.inc53, %for.body9
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5315
  %tobool = icmp ne %struct.rtx_def* %16, null, !dbg !5315
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5315

land.rhs:                                         ; preds = %for.cond10
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5315
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5315
  %il11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 7, !dbg !5315
  %rtl12 = bitcast %union.basic_block_il_dependent* %il11 to %struct.rtl_bb_info**, !dbg !5315
  %19 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl12, align 8, !dbg !5315
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %19, i32 0, i32 1, !dbg !5315
  %20 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5315
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !5315
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5315
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5315
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !5315
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5315
  %cmp14 = icmp ne %struct.rtx_def* %17, %21, !dbg !5315
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond10
  %22 = phi i1 [ false, %for.cond10 ], [ %cmp14, %land.rhs ], !dbg !5317
  br i1 %22, label %for.body16, label %for.end58, !dbg !5313

for.body16:                                       ; preds = %land.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5318
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !5318
  %bf.load = load i32, i32* %24, align 8, !dbg !5318
  %bf.clear = and i32 %bf.load, 65535, !dbg !5318
  %cmp17 = icmp eq i32 %bf.clear, 8, !dbg !5318
  br i1 %cmp17, label %if.end, label %lor.lhs.false, !dbg !5318

lor.lhs.false:                                    ; preds = %for.body16
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5318
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5318
  %bf.load19 = load i32, i32* %26, align 8, !dbg !5318
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !5318
  %cmp21 = icmp eq i32 %bf.clear20, 7, !dbg !5318
  br i1 %cmp21, label %if.end, label %lor.lhs.false23, !dbg !5318

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5318
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !5318
  %bf.load24 = load i32, i32* %28, align 8, !dbg !5318
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !5318
  %cmp26 = icmp eq i32 %bf.clear25, 9, !dbg !5318
  br i1 %cmp26, label %if.end, label %lor.lhs.false28, !dbg !5318

lor.lhs.false28:                                  ; preds = %lor.lhs.false23
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5318
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !5318
  %bf.load29 = load i32, i32* %30, align 8, !dbg !5318
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !5318
  %cmp31 = icmp eq i32 %bf.clear30, 10, !dbg !5318
  br i1 %cmp31, label %if.end, label %if.then, !dbg !5321

if.then:                                          ; preds = %lor.lhs.false28
  br label %for.inc53, !dbg !5322

if.end:                                           ; preds = %lor.lhs.false28, %lor.lhs.false23, %lor.lhs.false, %for.body16
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5323
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !5323
  %bf.load33 = load i32, i32* %32, align 8, !dbg !5323
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !5323
  %cmp35 = icmp eq i32 %bf.clear34, 10, !dbg !5323
  br i1 %cmp35, label %if.then37, label %if.end48, !dbg !5325

if.then37:                                        ; preds = %if.end
  store i32 0, i32* %regno, align 4, !dbg !5326
  br label %for.cond38, !dbg !5329

for.cond38:                                       ; preds = %for.inc45, %if.then37
  %33 = load i32, i32* %regno, align 4, !dbg !5330
  %cmp39 = icmp ult i32 %33, 53, !dbg !5332
  br i1 %cmp39, label %for.body41, label %for.end47, !dbg !5333

for.body41:                                       ; preds = %for.cond38
  %34 = load i64, i64* @regs_invalidated_by_call, align 8, !dbg !5334
  %35 = load i32, i32* %regno, align 4, !dbg !5334
  %sh_prom = zext i32 %35 to i64, !dbg !5334
  %shl = shl i64 1, %sh_prom, !dbg !5334
  %and = and i64 %34, %shl, !dbg !5334
  %tobool42 = icmp ne i64 %and, 0, !dbg !5334
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !5336

if.then43:                                        ; preds = %for.body41
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5337
  %37 = load i32, i32* %regno, align 4, !dbg !5338
  call void @record_last_reg_set_info(%struct.rtx_def* %36, i32 %37), !dbg !5339
  br label %if.end44, !dbg !5339

if.end44:                                         ; preds = %if.then43, %for.body41
  br label %for.inc45, !dbg !5334

for.inc45:                                        ; preds = %if.end44
  %38 = load i32, i32* %regno, align 4, !dbg !5340
  %inc46 = add i32 %38, 1, !dbg !5340
  store i32 %inc46, i32* %regno, align 4, !dbg !5340
  br label %for.cond38, !dbg !5341, !llvm.loop !5342

for.end47:                                        ; preds = %for.cond38
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5344
  call void @mark_call(%struct.rtx_def* %39), !dbg !5345
  br label %if.end48, !dbg !5346

if.end48:                                         ; preds = %for.end47, %if.end
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5347
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !5347
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !5347
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 5, !dbg !5347
  %rt_rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**, !dbg !5347
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx52, align 8, !dbg !5347
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5348
  %43 = bitcast %struct.rtx_def* %42 to i8*, !dbg !5348
  call void @note_stores(%struct.rtx_def* %41, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @record_last_set_info, i8* %43), !dbg !5349
  br label %for.inc53, !dbg !5350

for.inc53:                                        ; preds = %if.end48, %if.then
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5315
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !5315
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !5315
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 2, !dbg !5315
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !5315
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !5315
  store %struct.rtx_def* %45, %struct.rtx_def** %insn, align 8, !dbg !5315
  br label %for.cond10, !dbg !5315, !llvm.loop !5351

for.end58:                                        ; preds = %land.end
  %46 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5353
  %set_p = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %46, i32 0, i32 3, !dbg !5355
  %47 = load i32, i32* %set_p, align 8, !dbg !5355
  %tobool59 = icmp ne i32 %47, 0, !dbg !5353
  br i1 %tobool59, label %land.lhs.true, label %if.end71, !dbg !5356

land.lhs.true:                                    ; preds = %for.end58
  %48 = load %struct.rtx_def**, %struct.rtx_def*** @implicit_sets, align 8, !dbg !5357
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5358
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 9, !dbg !5359
  %50 = load i32, i32* %index, align 8, !dbg !5359
  %idxprom60 = sext i32 %50 to i64, !dbg !5357
  %arrayidx61 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %48, i64 %idxprom60, !dbg !5357
  %51 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx61, align 8, !dbg !5357
  %cmp62 = icmp ne %struct.rtx_def* %51, null, !dbg !5360
  br i1 %cmp62, label %if.then64, label %if.end71, !dbg !5361

if.then64:                                        ; preds = %land.lhs.true
  %52 = load %struct.rtx_def**, %struct.rtx_def*** @implicit_sets, align 8, !dbg !5362
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5363
  %index65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 9, !dbg !5364
  %54 = load i32, i32* %index65, align 8, !dbg !5364
  %idxprom66 = sext i32 %54 to i64, !dbg !5362
  %arrayidx67 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %52, i64 %idxprom66, !dbg !5362
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx67, align 8, !dbg !5362
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5365
  %il68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 7, !dbg !5365
  %rtl69 = bitcast %union.basic_block_il_dependent* %il68 to %struct.rtl_bb_info**, !dbg !5365
  %57 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl69, align 8, !dbg !5365
  %head_70 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %57, i32 0, i32 0, !dbg !5365
  %58 = load %struct.rtx_def*, %struct.rtx_def** %head_70, align 8, !dbg !5365
  %59 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5366
  call void @hash_scan_set(%struct.rtx_def* %55, %struct.rtx_def* %58, %struct.hash_table_d* %59), !dbg !5367
  br label %if.end71, !dbg !5367

if.end71:                                         ; preds = %if.then64, %land.lhs.true, %for.end58
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5368
  %il72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 7, !dbg !5368
  %rtl73 = bitcast %union.basic_block_il_dependent* %il72 to %struct.rtl_bb_info**, !dbg !5368
  %61 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl73, align 8, !dbg !5368
  %head_74 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %61, i32 0, i32 0, !dbg !5368
  %62 = load %struct.rtx_def*, %struct.rtx_def** %head_74, align 8, !dbg !5368
  store %struct.rtx_def* %62, %struct.rtx_def** %insn, align 8, !dbg !5368
  br label %for.cond75, !dbg !5368

for.cond75:                                       ; preds = %for.inc110, %if.end71
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5370
  %tobool76 = icmp ne %struct.rtx_def* %63, null, !dbg !5370
  br i1 %tobool76, label %land.rhs77, label %land.end87, !dbg !5370

land.rhs77:                                       ; preds = %for.cond75
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5370
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5370
  %il78 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 7, !dbg !5370
  %rtl79 = bitcast %union.basic_block_il_dependent* %il78 to %struct.rtl_bb_info**, !dbg !5370
  %66 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl79, align 8, !dbg !5370
  %end_80 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %66, i32 0, i32 1, !dbg !5370
  %67 = load %struct.rtx_def*, %struct.rtx_def** %end_80, align 8, !dbg !5370
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !5370
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !5370
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 2, !dbg !5370
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !5370
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !5370
  %cmp85 = icmp ne %struct.rtx_def* %64, %68, !dbg !5370
  br label %land.end87

land.end87:                                       ; preds = %land.rhs77, %for.cond75
  %69 = phi i1 [ false, %for.cond75 ], [ %cmp85, %land.rhs77 ], !dbg !5372
  br i1 %69, label %for.body88, label %for.end115, !dbg !5368

for.body88:                                       ; preds = %land.end87
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5373
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !5373
  %bf.load89 = load i32, i32* %71, align 8, !dbg !5373
  %bf.clear90 = and i32 %bf.load89, 65535, !dbg !5373
  %cmp91 = icmp eq i32 %bf.clear90, 8, !dbg !5373
  br i1 %cmp91, label %if.then108, label %lor.lhs.false93, !dbg !5373

lor.lhs.false93:                                  ; preds = %for.body88
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5373
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !5373
  %bf.load94 = load i32, i32* %73, align 8, !dbg !5373
  %bf.clear95 = and i32 %bf.load94, 65535, !dbg !5373
  %cmp96 = icmp eq i32 %bf.clear95, 7, !dbg !5373
  br i1 %cmp96, label %if.then108, label %lor.lhs.false98, !dbg !5373

lor.lhs.false98:                                  ; preds = %lor.lhs.false93
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5373
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !5373
  %bf.load99 = load i32, i32* %75, align 8, !dbg !5373
  %bf.clear100 = and i32 %bf.load99, 65535, !dbg !5373
  %cmp101 = icmp eq i32 %bf.clear100, 9, !dbg !5373
  br i1 %cmp101, label %if.then108, label %lor.lhs.false103, !dbg !5373

lor.lhs.false103:                                 ; preds = %lor.lhs.false98
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5373
  %77 = bitcast %struct.rtx_def* %76 to i32*, !dbg !5373
  %bf.load104 = load i32, i32* %77, align 8, !dbg !5373
  %bf.clear105 = and i32 %bf.load104, 65535, !dbg !5373
  %cmp106 = icmp eq i32 %bf.clear105, 10, !dbg !5373
  br i1 %cmp106, label %if.then108, label %if.end109, !dbg !5375

if.then108:                                       ; preds = %lor.lhs.false103, %lor.lhs.false98, %lor.lhs.false93, %for.body88
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5376
  %79 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5377
  call void @hash_scan_insn(%struct.rtx_def* %78, %struct.hash_table_d* %79), !dbg !5378
  br label %if.end109, !dbg !5378

if.end109:                                        ; preds = %if.then108, %lor.lhs.false103
  br label %for.inc110, !dbg !5373

for.inc110:                                       ; preds = %if.end109
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5370
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !5370
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !5370
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 2, !dbg !5370
  %rt_rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**, !dbg !5370
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx114, align 8, !dbg !5370
  store %struct.rtx_def* %81, %struct.rtx_def** %insn, align 8, !dbg !5370
  br label %for.cond75, !dbg !5370, !llvm.loop !5379

for.end115:                                       ; preds = %land.end87
  br label %for.inc116, !dbg !5381

for.inc116:                                       ; preds = %for.end115
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5306
  %next_bb117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 6, !dbg !5306
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb117, align 8, !dbg !5306
  store %struct.basic_block_def* %83, %struct.basic_block_def** @current_bb, align 8, !dbg !5306
  br label %for.cond4, !dbg !5306, !llvm.loop !5382

for.end118:                                       ; preds = %for.cond4
  %84 = load %struct.reg_avail_info*, %struct.reg_avail_info** @reg_avail_info, align 8, !dbg !5384
  %85 = bitcast %struct.reg_avail_info* %84 to i8*, !dbg !5384
  call void @free(i8* %85), !dbg !5385
  store %struct.reg_avail_info* null, %struct.reg_avail_info** @reg_avail_info, align 8, !dbg !5386
  ret void, !dbg !5387
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_modify_mem_tables() #0 !dbg !5388 {
entry:
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5389, metadata !DIExpression()), !dbg !5390
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5391, metadata !DIExpression()), !dbg !5399
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @modify_mem_list_set, align 8, !dbg !5400
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !5400
  br label %for.cond, !dbg !5400

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5402
  %tobool = icmp ne i8 %call, 0, !dbg !5400
  br i1 %tobool, label %for.body, label %for.end, !dbg !5400

for.body:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def**, %struct.rtx_def*** @modify_mem_list, align 8, !dbg !5404
  %2 = load i32, i32* %i, align 4, !dbg !5406
  %idx.ext = zext i32 %2 to i64, !dbg !5407
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 %idx.ext, !dbg !5407
  call void @free_INSN_LIST_list(%struct.rtx_def** %add.ptr), !dbg !5408
  %3 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !5409
  %4 = load i32, i32* %i, align 4, !dbg !5410
  %idx.ext1 = zext i32 %4 to i64, !dbg !5411
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %idx.ext1, !dbg !5411
  call void @free_insn_expr_list_list(%struct.rtx_def** %add.ptr2), !dbg !5412
  br label %for.inc, !dbg !5413

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5402
  br label %for.cond, !dbg !5402, !llvm.loop !5414

for.end:                                          ; preds = %for.cond
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @modify_mem_list_set, align 8, !dbg !5416
  call void @bitmap_clear(%struct.bitmap_head_def* %5), !dbg !5417
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_calls, align 8, !dbg !5418
  call void @bitmap_clear(%struct.bitmap_head_def* %6), !dbg !5419
  ret void, !dbg !5420
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_last_reg_set_info(%struct.rtx_def* %insn, i32 %regno) #0 !dbg !5421 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regno.addr = alloca i32, align 4
  %info = alloca %struct.reg_avail_info*, align 8
  %luid = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5424, metadata !DIExpression()), !dbg !5425
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !5426, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.declare(metadata %struct.reg_avail_info** %info, metadata !5428, metadata !DIExpression()), !dbg !5429
  %0 = load %struct.reg_avail_info*, %struct.reg_avail_info** @reg_avail_info, align 8, !dbg !5430
  %1 = load i32, i32* %regno.addr, align 4, !dbg !5431
  %idxprom = sext i32 %1 to i64, !dbg !5430
  %arrayidx = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %0, i64 %idxprom, !dbg !5430
  store %struct.reg_avail_info* %arrayidx, %struct.reg_avail_info** %info, align 8, !dbg !5429
  call void @llvm.dbg.declare(metadata i32* %luid, metadata !5432, metadata !DIExpression()), !dbg !5433
  %2 = load %struct.df*, %struct.df** @df, align 8, !dbg !5434
  %insns = getelementptr inbounds %struct.df, %struct.df* %2, i32 0, i32 10, !dbg !5434
  %3 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !5434
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5434
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !5434
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5434
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5434
  %rt_int = bitcast %union.rtunion_def* %arrayidx1 to i32*, !dbg !5434
  %5 = load i32, i32* %rt_int, align 8, !dbg !5434
  %idxprom2 = sext i32 %5 to i64, !dbg !5434
  %arrayidx3 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %3, i64 %idxprom2, !dbg !5434
  %6 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx3, align 8, !dbg !5434
  %luid4 = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %6, i32 0, i32 5, !dbg !5434
  %7 = load i32, i32* %luid4, align 8, !dbg !5434
  store i32 %7, i32* %luid, align 4, !dbg !5433
  %8 = load i32, i32* %luid, align 4, !dbg !5435
  %9 = load %struct.reg_avail_info*, %struct.reg_avail_info** %info, align 8, !dbg !5436
  %last_set = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %9, i32 0, i32 2, !dbg !5437
  store i32 %8, i32* %last_set, align 4, !dbg !5438
  %10 = load %struct.reg_avail_info*, %struct.reg_avail_info** %info, align 8, !dbg !5439
  %last_bb = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %10, i32 0, i32 0, !dbg !5441
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %last_bb, align 8, !dbg !5441
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5442
  %cmp = icmp ne %struct.basic_block_def* %11, %12, !dbg !5443
  br i1 %cmp, label %if.then, label %if.end, !dbg !5444

if.then:                                          ; preds = %entry
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !5445
  %14 = load %struct.reg_avail_info*, %struct.reg_avail_info** %info, align 8, !dbg !5447
  %last_bb5 = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %14, i32 0, i32 0, !dbg !5448
  store %struct.basic_block_def* %13, %struct.basic_block_def** %last_bb5, align 8, !dbg !5449
  %15 = load i32, i32* %luid, align 4, !dbg !5450
  %16 = load %struct.reg_avail_info*, %struct.reg_avail_info** %info, align 8, !dbg !5451
  %first_set = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %16, i32 0, i32 1, !dbg !5452
  store i32 %15, i32* %first_set, align 8, !dbg !5453
  br label %if.end, !dbg !5454

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5455
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_call(%struct.rtx_def* %insn) #0 !dbg !5456 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5457, metadata !DIExpression()), !dbg !5458
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5459
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5459
  %bf.load = load i32, i32* %1, align 8, !dbg !5459
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !5459
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5459
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !5459
  br i1 %tobool, label %if.end, label %lor.lhs.false, !dbg !5459

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5459
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5459
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5459
  %bf.lshr2 = lshr i32 %bf.load1, 31, !dbg !5459
  %tobool3 = icmp ne i32 %bf.lshr2, 0, !dbg !5459
  br i1 %tobool3, label %if.end, label %if.then, !dbg !5461

if.then:                                          ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5462
  call void @record_last_mem_set_info(%struct.rtx_def* %4), !dbg !5463
  br label %if.end, !dbg !5463

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  ret void, !dbg !5464
}

declare dso_local void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_last_set_info(%struct.rtx_def* %dest, %struct.rtx_def* %setter, i8* %data) #0 !dbg !5465 {
entry:
  %dest.addr = alloca %struct.rtx_def*, align 8
  %setter.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %last_set_insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !5468, metadata !DIExpression()), !dbg !5469
  store %struct.rtx_def* %setter, %struct.rtx_def** %setter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setter.addr, metadata !5470, metadata !DIExpression()), !dbg !5471
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_set_insn, metadata !5474, metadata !DIExpression()), !dbg !5475
  %0 = load i8*, i8** %data.addr, align 8, !dbg !5476
  %1 = bitcast i8* %0 to %struct.rtx_def*, !dbg !5477
  store %struct.rtx_def* %1, %struct.rtx_def** %last_set_insn, align 8, !dbg !5475
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5478
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5478
  %bf.load = load i32, i32* %3, align 8, !dbg !5478
  %bf.clear = and i32 %bf.load, 65535, !dbg !5478
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !5480
  br i1 %cmp, label %if.then, label %if.end, !dbg !5481

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5482
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !5482
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5482
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5482
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5482
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5482
  store %struct.rtx_def* %5, %struct.rtx_def** %dest.addr, align 8, !dbg !5483
  br label %if.end, !dbg !5484

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5485
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5485
  %bf.load1 = load i32, i32* %7, align 8, !dbg !5485
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !5485
  %cmp3 = icmp eq i32 %bf.clear2, 37, !dbg !5485
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !5487

if.then4:                                         ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last_set_insn, align 8, !dbg !5488
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5489
  %call = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !5489
  call void @record_last_reg_set_info(%struct.rtx_def* %8, i32 %call), !dbg !5490
  br label %if.end13, !dbg !5490

if.else:                                          ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5491
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !5491
  %bf.load5 = load i32, i32* %11, align 8, !dbg !5491
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !5491
  %cmp7 = icmp eq i32 %bf.clear6, 43, !dbg !5491
  br i1 %cmp7, label %land.lhs.true, label %if.end12, !dbg !5493

land.lhs.true:                                    ; preds = %if.else
  %12 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5494
  %13 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !5495
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !5495
  %bf.load8 = load i32, i32* %14, align 8, !dbg !5495
  %bf.lshr = lshr i32 %bf.load8, 16, !dbg !5495
  %bf.clear9 = and i32 %bf.lshr, 255, !dbg !5495
  %call10 = call i32 @push_operand(%struct.rtx_def* %12, i32 %bf.clear9), !dbg !5496
  %tobool = icmp ne i32 %call10, 0, !dbg !5496
  br i1 %tobool, label %if.end12, label %if.then11, !dbg !5497

if.then11:                                        ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %last_set_insn, align 8, !dbg !5498
  call void @record_last_mem_set_info(%struct.rtx_def* %15), !dbg !5499
  br label %if.end12, !dbg !5499

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then4
  ret void, !dbg !5500
}

; Function Attrs: noinline nounwind uwtable
define internal void @hash_scan_set(%struct.rtx_def* %pat, %struct.rtx_def* %insn, %struct.hash_table_d* %table) #0 !dbg !5501 {
entry:
  %pat.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %table.addr = alloca %struct.hash_table_d*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %antic_p = alloca i32, align 4
  %avail_p = alloca i32, align 4
  %regno157 = alloca i32, align 4
  %antic_p194 = alloca i32, align 4
  %avail_p195 = alloca i32, align 4
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !5504, metadata !DIExpression()), !dbg !5505
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5506, metadata !DIExpression()), !dbg !5507
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !5508, metadata !DIExpression()), !dbg !5509
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !5510, metadata !DIExpression()), !dbg !5511
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !5512
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5512
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5512
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5512
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5512
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5512
  store %struct.rtx_def* %1, %struct.rtx_def** %src, align 8, !dbg !5511
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !5513, metadata !DIExpression()), !dbg !5514
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !5515
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5515
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !5515
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !5515
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !5515
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !5515
  store %struct.rtx_def* %3, %struct.rtx_def** %dest, align 8, !dbg !5514
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5516, metadata !DIExpression()), !dbg !5517
  %4 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5518
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5518
  %bf.load = load i32, i32* %5, align 8, !dbg !5518
  %bf.clear = and i32 %bf.load, 65535, !dbg !5518
  %cmp = icmp eq i32 %bf.clear, 26, !dbg !5520
  br i1 %cmp, label %if.then, label %if.else, !dbg !5521

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5522
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5523
  %8 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5524
  call void @hash_scan_call(%struct.rtx_def* %6, %struct.rtx_def* %7, %struct.hash_table_d* %8), !dbg !5525
  br label %if.end212, !dbg !5525

if.else:                                          ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5526
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !5526
  %bf.load5 = load i32, i32* %10, align 8, !dbg !5526
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !5526
  %cmp7 = icmp eq i32 %bf.clear6, 37, !dbg !5526
  br i1 %cmp7, label %if.then8, label %if.else144, !dbg !5528

if.then8:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !5529, metadata !DIExpression()), !dbg !5531
  %11 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5532
  %call = call i32 @rhs_regno(%struct.rtx_def* %11), !dbg !5532
  store i32 %call, i32* %regno, align 4, !dbg !5531
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !5533, metadata !DIExpression()), !dbg !5534
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5535
  %call9 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %12), !dbg !5536
  store %struct.rtx_def* %call9, %struct.rtx_def** %note, align 8, !dbg !5537
  %13 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5538
  %cmp10 = icmp ne %struct.rtx_def* %13, null, !dbg !5540
  br i1 %cmp10, label %land.lhs.true, label %if.end, !dbg !5541

land.lhs.true:                                    ; preds = %if.then8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5542
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !5542
  %bf.load11 = load i32, i32* %15, align 8, !dbg !5542
  %bf.lshr = lshr i32 %bf.load11, 16, !dbg !5542
  %bf.clear12 = and i32 %bf.lshr, 255, !dbg !5542
  %cmp13 = icmp eq i32 %bf.clear12, 4, !dbg !5543
  br i1 %cmp13, label %land.lhs.true14, label %if.end, !dbg !5544

land.lhs.true14:                                  ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5545
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5545
  %bf.load15 = load i32, i32* %17, align 8, !dbg !5545
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !5545
  %cmp17 = icmp eq i32 %bf.clear16, 37, !dbg !5545
  br i1 %cmp17, label %if.end, label %land.lhs.true18, !dbg !5546

land.lhs.true18:                                  ; preds = %land.lhs.true14
  %18 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5547
  %set_p = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %18, i32 0, i32 3, !dbg !5548
  %19 = load i32, i32* %set_p, align 8, !dbg !5548
  %tobool = icmp ne i32 %19, 0, !dbg !5547
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5549

cond.true:                                        ; preds = %land.lhs.true18
  %20 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5550
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !5550
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !5550
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !5550
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !5550
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !5550
  %call23 = call zeroext i8 @gcse_constant_p(%struct.rtx_def* %21), !dbg !5551
  %conv = zext i8 %call23 to i32, !dbg !5551
  %tobool24 = icmp ne i32 %conv, 0, !dbg !5551
  br i1 %tobool24, label %if.then31, label %if.end, !dbg !5547

cond.false:                                       ; preds = %land.lhs.true18
  %22 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5552
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !5552
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !5552
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !5552
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !5552
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !5552
  %call29 = call i32 @want_to_gcse_p(%struct.rtx_def* %23), !dbg !5553
  %tobool30 = icmp ne i32 %call29, 0, !dbg !5553
  br i1 %tobool30, label %if.then31, label %if.end, !dbg !5549

if.then31:                                        ; preds = %cond.false, %cond.true
  %24 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5554
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !5554
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !5554
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !5554
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !5554
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !5554
  store %struct.rtx_def* %25, %struct.rtx_def** %src, align 8, !dbg !5555
  %26 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5556
  %27 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5556
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %26, %struct.rtx_def* %27), !dbg !5556
  store %struct.rtx_def* %call36, %struct.rtx_def** %pat.addr, align 8, !dbg !5557
  br label %if.end, !dbg !5558

if.end:                                           ; preds = %if.then31, %cond.false, %cond.true, %land.lhs.true14, %land.lhs.true, %if.then8
  %28 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5559
  %set_p37 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %28, i32 0, i32 3, !dbg !5561
  %29 = load i32, i32* %set_p37, align 8, !dbg !5561
  %tobool38 = icmp ne i32 %29, 0, !dbg !5559
  br i1 %tobool38, label %if.else87, label %land.lhs.true39, !dbg !5562

land.lhs.true39:                                  ; preds = %if.end
  %30 = load i32, i32* %regno, align 4, !dbg !5563
  %cmp40 = icmp uge i32 %30, 53, !dbg !5564
  br i1 %cmp40, label %land.lhs.true42, label %if.else87, !dbg !5565

land.lhs.true42:                                  ; preds = %land.lhs.true39
  %31 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5566
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !5566
  %bf.load43 = load i32, i32* %32, align 8, !dbg !5566
  %bf.lshr44 = lshr i32 %bf.load43, 16, !dbg !5566
  %bf.clear45 = and i32 %bf.lshr44, 255, !dbg !5566
  %call46 = call zeroext i8 @can_copy_p(i32 %bf.clear45), !dbg !5567
  %conv47 = zext i8 %call46 to i32, !dbg !5567
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !5567
  br i1 %tobool48, label %land.lhs.true49, label %if.else87, !dbg !5568

land.lhs.true49:                                  ; preds = %land.lhs.true42
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5569
  %call50 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %33), !dbg !5570
  %tobool51 = icmp ne i8 %call50, 0, !dbg !5570
  br i1 %tobool51, label %if.else87, label %land.lhs.true52, !dbg !5571

land.lhs.true52:                                  ; preds = %land.lhs.true49
  %34 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5572
  %call53 = call i32 @want_to_gcse_p(%struct.rtx_def* %34), !dbg !5573
  %tobool54 = icmp ne i32 %call53, 0, !dbg !5573
  br i1 %tobool54, label %land.lhs.true55, label %if.else87, !dbg !5574

land.lhs.true55:                                  ; preds = %land.lhs.true52
  %35 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !5575
  %call56 = call i32 @set_noop_p(%struct.rtx_def* %35), !dbg !5576
  %tobool57 = icmp ne i32 %call56, 0, !dbg !5576
  br i1 %tobool57, label %if.else87, label %land.lhs.true58, !dbg !5577

land.lhs.true58:                                  ; preds = %land.lhs.true55
  %36 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5578
  %cmp59 = icmp eq %struct.rtx_def* %36, null, !dbg !5579
  br i1 %cmp59, label %if.then69, label %lor.lhs.false, !dbg !5580

lor.lhs.false:                                    ; preds = %land.lhs.true58
  %37 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5581
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5581
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !5581
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 0, !dbg !5581
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !5581
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !5581
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !5581
  %bf.load65 = load i32, i32* %39, align 8, !dbg !5581
  %bf.clear66 = and i32 %bf.load65, 65535, !dbg !5581
  %cmp67 = icmp eq i32 %bf.clear66, 43, !dbg !5581
  br i1 %cmp67, label %if.else87, label %if.then69, !dbg !5582

if.then69:                                        ; preds = %lor.lhs.false, %land.lhs.true58
  call void @llvm.dbg.declare(metadata i32* %antic_p, metadata !5583, metadata !DIExpression()), !dbg !5585
  %40 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5586
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5587
  %call70 = call i32 @oprs_anticipatable_p(%struct.rtx_def* %40, %struct.rtx_def* %41), !dbg !5588
  %tobool71 = icmp ne i32 %call70, 0, !dbg !5588
  br i1 %tobool71, label %land.rhs, label %land.end, !dbg !5589

land.rhs:                                         ; preds = %if.then69
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5590
  %call72 = call i32 @multiple_sets(%struct.rtx_def* %42), !dbg !5591
  %tobool73 = icmp ne i32 %call72, 0, !dbg !5592
  %lnot = xor i1 %tobool73, true, !dbg !5592
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then69
  %43 = phi i1 [ false, %if.then69 ], [ %lnot, %land.rhs ], !dbg !5593
  %land.ext = zext i1 %43 to i32, !dbg !5589
  store i32 %land.ext, i32* %antic_p, align 4, !dbg !5585
  call void @llvm.dbg.declare(metadata i32* %avail_p, metadata !5594, metadata !DIExpression()), !dbg !5595
  %44 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5596
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5597
  %call74 = call i32 @oprs_available_p(%struct.rtx_def* %44, %struct.rtx_def* %45), !dbg !5598
  %tobool75 = icmp ne i32 %call74, 0, !dbg !5598
  br i1 %tobool75, label %land.rhs76, label %land.end82, !dbg !5599

land.rhs76:                                       ; preds = %land.end
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5600
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !5600
  %bf.load77 = load i32, i32* %47, align 8, !dbg !5600
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !5600
  %cmp79 = icmp eq i32 %bf.clear78, 9, !dbg !5600
  %lnot81 = xor i1 %cmp79, true, !dbg !5601
  br label %land.end82

land.end82:                                       ; preds = %land.rhs76, %land.end
  %48 = phi i1 [ false, %land.end ], [ %lnot81, %land.rhs76 ], !dbg !5593
  %land.ext83 = zext i1 %48 to i32, !dbg !5599
  store i32 %land.ext83, i32* %avail_p, align 4, !dbg !5595
  %49 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5602
  %50 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5603
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !5603
  %bf.load84 = load i32, i32* %51, align 8, !dbg !5603
  %bf.lshr85 = lshr i32 %bf.load84, 16, !dbg !5603
  %bf.clear86 = and i32 %bf.lshr85, 255, !dbg !5603
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5604
  %53 = load i32, i32* %antic_p, align 4, !dbg !5605
  %54 = load i32, i32* %avail_p, align 4, !dbg !5606
  %55 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5607
  call void @insert_expr_in_table(%struct.rtx_def* %49, i32 %bf.clear86, %struct.rtx_def* %52, i32 %53, i32 %54, %struct.hash_table_d* %55), !dbg !5608
  br label %if.end143, !dbg !5609

if.else87:                                        ; preds = %lor.lhs.false, %land.lhs.true55, %land.lhs.true52, %land.lhs.true49, %land.lhs.true42, %land.lhs.true39, %if.end
  %56 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5610
  %set_p88 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %56, i32 0, i32 3, !dbg !5612
  %57 = load i32, i32* %set_p88, align 8, !dbg !5612
  %tobool89 = icmp ne i32 %57, 0, !dbg !5610
  br i1 %tobool89, label %land.lhs.true90, label %if.end142, !dbg !5613

land.lhs.true90:                                  ; preds = %if.else87
  %58 = load i32, i32* %regno, align 4, !dbg !5614
  %cmp91 = icmp uge i32 %58, 53, !dbg !5615
  br i1 %cmp91, label %land.lhs.true93, label %if.end142, !dbg !5616

land.lhs.true93:                                  ; preds = %land.lhs.true90
  %59 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5617
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !5617
  %bf.load94 = load i32, i32* %60, align 8, !dbg !5617
  %bf.clear95 = and i32 %bf.load94, 65535, !dbg !5617
  %cmp96 = icmp eq i32 %bf.clear95, 37, !dbg !5617
  br i1 %cmp96, label %land.lhs.true98, label %lor.lhs.false113, !dbg !5618

land.lhs.true98:                                  ; preds = %land.lhs.true93
  %61 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5619
  %call99 = call i32 @rhs_regno(%struct.rtx_def* %61), !dbg !5619
  %cmp100 = icmp uge i32 %call99, 53, !dbg !5620
  br i1 %cmp100, label %land.lhs.true102, label %lor.lhs.false113, !dbg !5621

land.lhs.true102:                                 ; preds = %land.lhs.true98
  %62 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5622
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !5622
  %bf.load103 = load i32, i32* %63, align 8, !dbg !5622
  %bf.lshr104 = lshr i32 %bf.load103, 16, !dbg !5622
  %bf.clear105 = and i32 %bf.lshr104, 255, !dbg !5622
  %call106 = call zeroext i8 @can_copy_p(i32 %bf.clear105), !dbg !5623
  %conv107 = zext i8 %call106 to i32, !dbg !5623
  %tobool108 = icmp ne i32 %conv107, 0, !dbg !5623
  br i1 %tobool108, label %land.lhs.true109, label %lor.lhs.false113, !dbg !5624

land.lhs.true109:                                 ; preds = %land.lhs.true102
  %64 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5625
  %call110 = call i32 @rhs_regno(%struct.rtx_def* %64), !dbg !5625
  %65 = load i32, i32* %regno, align 4, !dbg !5626
  %cmp111 = icmp ne i32 %call110, %65, !dbg !5627
  br i1 %cmp111, label %land.lhs.true117, label %lor.lhs.false113, !dbg !5628

lor.lhs.false113:                                 ; preds = %land.lhs.true109, %land.lhs.true102, %land.lhs.true98, %land.lhs.true93
  %66 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5629
  %call114 = call zeroext i8 @gcse_constant_p(%struct.rtx_def* %66), !dbg !5630
  %conv115 = zext i8 %call114 to i32, !dbg !5630
  %tobool116 = icmp ne i32 %conv115, 0, !dbg !5630
  br i1 %tobool116, label %land.lhs.true117, label %if.end142, !dbg !5631

land.lhs.true117:                                 ; preds = %lor.lhs.false113, %land.lhs.true109
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5632
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5633
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !5633
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !5633
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 3, !dbg !5633
  %rt_bb = bitcast %union.rtunion_def* %arrayidx120 to %struct.basic_block_def**, !dbg !5633
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !5633
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 7, !dbg !5633
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5633
  %70 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5633
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %70, i32 0, i32 1, !dbg !5633
  %71 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5633
  %cmp121 = icmp eq %struct.rtx_def* %67, %71, !dbg !5634
  br i1 %cmp121, label %if.then141, label %lor.lhs.false123, !dbg !5635

lor.lhs.false123:                                 ; preds = %land.lhs.true117
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5636
  %call124 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %72), !dbg !5637
  store %struct.rtx_def* %call124, %struct.rtx_def** %tmp, align 8, !dbg !5638
  %cmp125 = icmp eq %struct.rtx_def* %call124, null, !dbg !5639
  br i1 %cmp125, label %if.then141, label %lor.lhs.false127, !dbg !5640

lor.lhs.false127:                                 ; preds = %lor.lhs.false123
  %73 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5641
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !5641
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !5641
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 3, !dbg !5641
  %rt_bb131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.basic_block_def**, !dbg !5641
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb131, align 8, !dbg !5641
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5642
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !5642
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !5642
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 3, !dbg !5642
  %rt_bb135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.basic_block_def**, !dbg !5642
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb135, align 8, !dbg !5642
  %cmp136 = icmp ne %struct.basic_block_def* %74, %76, !dbg !5643
  br i1 %cmp136, label %if.then141, label %lor.lhs.false138, !dbg !5644

lor.lhs.false138:                                 ; preds = %lor.lhs.false127
  %77 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !5645
  %78 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5646
  %call139 = call i32 @oprs_available_p(%struct.rtx_def* %77, %struct.rtx_def* %78), !dbg !5647
  %tobool140 = icmp ne i32 %call139, 0, !dbg !5647
  br i1 %tobool140, label %if.then141, label %if.end142, !dbg !5648

if.then141:                                       ; preds = %lor.lhs.false138, %lor.lhs.false127, %lor.lhs.false123, %land.lhs.true117
  %79 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !5649
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5650
  %81 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5651
  call void @insert_set_in_table(%struct.rtx_def* %79, %struct.rtx_def* %80, %struct.hash_table_d* %81), !dbg !5652
  br label %if.end142, !dbg !5652

if.end142:                                        ; preds = %if.then141, %lor.lhs.false138, %lor.lhs.false113, %land.lhs.true90, %if.else87
  br label %if.end143

if.end143:                                        ; preds = %if.end142, %land.end82
  br label %if.end211, !dbg !5653

if.else144:                                       ; preds = %if.else
  %82 = load i32, i32* @flag_gcse_las, align 4, !dbg !5654
  %tobool145 = icmp ne i32 %82, 0, !dbg !5654
  br i1 %tobool145, label %land.lhs.true146, label %if.end210, !dbg !5656

land.lhs.true146:                                 ; preds = %if.else144
  %83 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5657
  %84 = bitcast %struct.rtx_def* %83 to i32*, !dbg !5657
  %bf.load147 = load i32, i32* %84, align 8, !dbg !5657
  %bf.clear148 = and i32 %bf.load147, 65535, !dbg !5657
  %cmp149 = icmp eq i32 %bf.clear148, 37, !dbg !5657
  br i1 %cmp149, label %land.lhs.true151, label %if.end210, !dbg !5658

land.lhs.true151:                                 ; preds = %land.lhs.true146
  %85 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5659
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !5659
  %bf.load152 = load i32, i32* %86, align 8, !dbg !5659
  %bf.clear153 = and i32 %bf.load152, 65535, !dbg !5659
  %cmp154 = icmp eq i32 %bf.clear153, 43, !dbg !5659
  br i1 %cmp154, label %if.then156, label %if.end210, !dbg !5660

if.then156:                                       ; preds = %land.lhs.true151
  call void @llvm.dbg.declare(metadata i32* %regno157, metadata !5661, metadata !DIExpression()), !dbg !5663
  %87 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5664
  %call158 = call i32 @rhs_regno(%struct.rtx_def* %87), !dbg !5664
  store i32 %call158, i32* %regno157, align 4, !dbg !5663
  %88 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5665
  %set_p159 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %88, i32 0, i32 3, !dbg !5667
  %89 = load i32, i32* %set_p159, align 8, !dbg !5667
  %tobool160 = icmp ne i32 %89, 0, !dbg !5665
  br i1 %tobool160, label %if.end209, label %land.lhs.true161, !dbg !5668

land.lhs.true161:                                 ; preds = %if.then156
  %90 = load i32, i32* %regno157, align 4, !dbg !5669
  %cmp162 = icmp uge i32 %90, 53, !dbg !5670
  br i1 %cmp162, label %land.lhs.true164, label %if.end209, !dbg !5671

land.lhs.true164:                                 ; preds = %land.lhs.true161
  %91 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5672
  %92 = bitcast %struct.rtx_def* %91 to i32*, !dbg !5672
  %bf.load165 = load i32, i32* %92, align 8, !dbg !5672
  %bf.lshr166 = lshr i32 %bf.load165, 16, !dbg !5672
  %bf.clear167 = and i32 %bf.lshr166, 255, !dbg !5672
  %call168 = call zeroext i8 @can_copy_p(i32 %bf.clear167), !dbg !5673
  %conv169 = zext i8 %call168 to i32, !dbg !5673
  %tobool170 = icmp ne i32 %conv169, 0, !dbg !5673
  br i1 %tobool170, label %land.lhs.true171, label %if.end209, !dbg !5674

land.lhs.true171:                                 ; preds = %land.lhs.true164
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5675
  %call172 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %93), !dbg !5676
  %tobool173 = icmp ne i8 %call172, 0, !dbg !5676
  br i1 %tobool173, label %if.end209, label %land.lhs.true174, !dbg !5677

land.lhs.true174:                                 ; preds = %land.lhs.true171
  %94 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5678
  %call175 = call i32 @want_to_gcse_p(%struct.rtx_def* %94), !dbg !5679
  %tobool176 = icmp ne i32 %call175, 0, !dbg !5679
  br i1 %tobool176, label %land.lhs.true177, label %if.end209, !dbg !5680

land.lhs.true177:                                 ; preds = %land.lhs.true174
  %95 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !5681
  %call178 = call i32 @set_noop_p(%struct.rtx_def* %95), !dbg !5682
  %tobool179 = icmp ne i32 %call178, 0, !dbg !5682
  br i1 %tobool179, label %if.end209, label %land.lhs.true180, !dbg !5683

land.lhs.true180:                                 ; preds = %land.lhs.true177
  %96 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5684
  %call181 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %96, i32 3, %struct.rtx_def* null), !dbg !5685
  store %struct.rtx_def* %call181, %struct.rtx_def** %note, align 8, !dbg !5686
  %cmp182 = icmp eq %struct.rtx_def* %call181, null, !dbg !5687
  br i1 %cmp182, label %if.then193, label %lor.lhs.false184, !dbg !5688

lor.lhs.false184:                                 ; preds = %land.lhs.true180
  %97 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5689
  %u185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !5689
  %fld186 = bitcast %union.u* %u185 to [1 x %union.rtunion_def]*, !dbg !5689
  %arrayidx187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld186, i64 0, i64 0, !dbg !5689
  %rt_rtx188 = bitcast %union.rtunion_def* %arrayidx187 to %struct.rtx_def**, !dbg !5689
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx188, align 8, !dbg !5689
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !5689
  %bf.load189 = load i32, i32* %99, align 8, !dbg !5689
  %bf.clear190 = and i32 %bf.load189, 65535, !dbg !5689
  %cmp191 = icmp eq i32 %bf.clear190, 43, !dbg !5689
  br i1 %cmp191, label %if.end209, label %if.then193, !dbg !5690

if.then193:                                       ; preds = %lor.lhs.false184, %land.lhs.true180
  call void @llvm.dbg.declare(metadata i32* %antic_p194, metadata !5691, metadata !DIExpression()), !dbg !5693
  store i32 0, i32* %antic_p194, align 4, !dbg !5693
  call void @llvm.dbg.declare(metadata i32* %avail_p195, metadata !5694, metadata !DIExpression()), !dbg !5695
  %100 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5696
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5697
  %call196 = call i32 @oprs_available_p(%struct.rtx_def* %100, %struct.rtx_def* %101), !dbg !5698
  %tobool197 = icmp ne i32 %call196, 0, !dbg !5698
  br i1 %tobool197, label %land.rhs198, label %land.end204, !dbg !5699

land.rhs198:                                      ; preds = %if.then193
  %102 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5700
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !5700
  %bf.load199 = load i32, i32* %103, align 8, !dbg !5700
  %bf.clear200 = and i32 %bf.load199, 65535, !dbg !5700
  %cmp201 = icmp eq i32 %bf.clear200, 9, !dbg !5700
  %lnot203 = xor i1 %cmp201, true, !dbg !5701
  br label %land.end204

land.end204:                                      ; preds = %land.rhs198, %if.then193
  %104 = phi i1 [ false, %if.then193 ], [ %lnot203, %land.rhs198 ], !dbg !5702
  %land.ext205 = zext i1 %104 to i32, !dbg !5699
  store i32 %land.ext205, i32* %avail_p195, align 4, !dbg !5695
  %105 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5703
  %106 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5704
  %107 = bitcast %struct.rtx_def* %106 to i32*, !dbg !5704
  %bf.load206 = load i32, i32* %107, align 8, !dbg !5704
  %bf.lshr207 = lshr i32 %bf.load206, 16, !dbg !5704
  %bf.clear208 = and i32 %bf.lshr207, 255, !dbg !5704
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5705
  %109 = load i32, i32* %antic_p194, align 4, !dbg !5706
  %110 = load i32, i32* %avail_p195, align 4, !dbg !5707
  %111 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5708
  call void @insert_expr_in_table(%struct.rtx_def* %105, i32 %bf.clear208, %struct.rtx_def* %108, i32 %109, i32 %110, %struct.hash_table_d* %111), !dbg !5709
  br label %if.end209, !dbg !5710

if.end209:                                        ; preds = %land.end204, %lor.lhs.false184, %land.lhs.true177, %land.lhs.true174, %land.lhs.true171, %land.lhs.true164, %land.lhs.true161, %if.then156
  br label %if.end210, !dbg !5711

if.end210:                                        ; preds = %if.end209, %land.lhs.true151, %land.lhs.true146, %if.else144
  br label %if.end211

if.end211:                                        ; preds = %if.end210, %if.end143
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.then
  ret void, !dbg !5712
}

; Function Attrs: noinline nounwind uwtable
define internal void @hash_scan_insn(%struct.rtx_def* %insn, %struct.hash_table_d* %table) #0 !dbg !5713 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %table.addr = alloca %struct.hash_table_d*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5716, metadata !DIExpression()), !dbg !5717
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !5718, metadata !DIExpression()), !dbg !5719
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !5720, metadata !DIExpression()), !dbg !5721
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5722
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5722
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5722
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5722
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5722
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5722
  store %struct.rtx_def* %1, %struct.rtx_def** %pat, align 8, !dbg !5721
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5723, metadata !DIExpression()), !dbg !5724
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5725
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5725
  %bf.load = load i32, i32* %3, align 8, !dbg !5725
  %bf.clear = and i32 %bf.load, 65535, !dbg !5725
  %cmp = icmp eq i32 %bf.clear, 23, !dbg !5727
  br i1 %cmp, label %if.then, label %if.else, !dbg !5728

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5729
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5730
  %6 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5731
  call void @hash_scan_set(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.hash_table_d* %6), !dbg !5732
  br label %if.end43, !dbg !5732

if.else:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5733
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !5733
  %bf.load1 = load i32, i32* %8, align 8, !dbg !5733
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !5733
  %cmp3 = icmp eq i32 %bf.clear2, 15, !dbg !5735
  br i1 %cmp3, label %if.then4, label %if.else30, !dbg !5736

if.then4:                                         ; preds = %if.else
  store i32 0, i32* %i, align 4, !dbg !5737
  br label %for.cond, !dbg !5739

for.cond:                                         ; preds = %for.inc, %if.then4
  %9 = load i32, i32* %i, align 4, !dbg !5740
  %10 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5742
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5742
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !5742
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !5742
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtvec_def**, !dbg !5742
  %11 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5742
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %11, i32 0, i32 0, !dbg !5742
  %12 = load i32, i32* %num_elem, align 8, !dbg !5742
  %cmp8 = icmp slt i32 %9, %12, !dbg !5743
  br i1 %cmp8, label %for.body, label %for.end, !dbg !5744

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5745, metadata !DIExpression()), !dbg !5747
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5748
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5748
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !5748
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !5748
  %rt_rtvec12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtvec_def**, !dbg !5748
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec12, align 8, !dbg !5748
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 1, !dbg !5748
  %15 = load i32, i32* %i, align 4, !dbg !5748
  %idxprom = sext i32 %15 to i64, !dbg !5748
  %arrayidx13 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !5748
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8, !dbg !5748
  store %struct.rtx_def* %16, %struct.rtx_def** %x, align 8, !dbg !5747
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5749
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !5749
  %bf.load14 = load i32, i32* %18, align 8, !dbg !5749
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !5749
  %cmp16 = icmp eq i32 %bf.clear15, 23, !dbg !5751
  br i1 %cmp16, label %if.then17, label %if.else18, !dbg !5752

if.then17:                                        ; preds = %for.body
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5753
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5754
  %21 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5755
  call void @hash_scan_set(%struct.rtx_def* %19, %struct.rtx_def* %20, %struct.hash_table_d* %21), !dbg !5756
  br label %if.end29, !dbg !5756

if.else18:                                        ; preds = %for.body
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5757
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5757
  %bf.load19 = load i32, i32* %23, align 8, !dbg !5757
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !5757
  %cmp21 = icmp eq i32 %bf.clear20, 25, !dbg !5759
  br i1 %cmp21, label %if.then22, label %if.else23, !dbg !5760

if.then22:                                        ; preds = %if.else18
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5761
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5762
  %26 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5763
  call void @hash_scan_clobber(%struct.rtx_def* %24, %struct.rtx_def* %25, %struct.hash_table_d* %26), !dbg !5764
  br label %if.end28, !dbg !5764

if.else23:                                        ; preds = %if.else18
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5765
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !5765
  %bf.load24 = load i32, i32* %28, align 8, !dbg !5765
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !5765
  %cmp26 = icmp eq i32 %bf.clear25, 26, !dbg !5767
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !5768

if.then27:                                        ; preds = %if.else23
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5769
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5770
  %31 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5771
  call void @hash_scan_call(%struct.rtx_def* %29, %struct.rtx_def* %30, %struct.hash_table_d* %31), !dbg !5772
  br label %if.end, !dbg !5772

if.end:                                           ; preds = %if.then27, %if.else23
  br label %if.end28

if.end28:                                         ; preds = %if.end, %if.then22
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then17
  br label %for.inc, !dbg !5773

for.inc:                                          ; preds = %if.end29
  %32 = load i32, i32* %i, align 4, !dbg !5774
  %inc = add nsw i32 %32, 1, !dbg !5774
  store i32 %inc, i32* %i, align 4, !dbg !5774
  br label %for.cond, !dbg !5775, !llvm.loop !5776

for.end:                                          ; preds = %for.cond
  br label %if.end42, !dbg !5777

if.else30:                                        ; preds = %if.else
  %33 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5778
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !5778
  %bf.load31 = load i32, i32* %34, align 8, !dbg !5778
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !5778
  %cmp33 = icmp eq i32 %bf.clear32, 25, !dbg !5780
  br i1 %cmp33, label %if.then34, label %if.else35, !dbg !5781

if.then34:                                        ; preds = %if.else30
  %35 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5782
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5783
  %37 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5784
  call void @hash_scan_clobber(%struct.rtx_def* %35, %struct.rtx_def* %36, %struct.hash_table_d* %37), !dbg !5785
  br label %if.end41, !dbg !5785

if.else35:                                        ; preds = %if.else30
  %38 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5786
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !5786
  %bf.load36 = load i32, i32* %39, align 8, !dbg !5786
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !5786
  %cmp38 = icmp eq i32 %bf.clear37, 26, !dbg !5788
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !5789

if.then39:                                        ; preds = %if.else35
  %40 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !5790
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5791
  %42 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !5792
  call void @hash_scan_call(%struct.rtx_def* %40, %struct.rtx_def* %41, %struct.hash_table_d* %42), !dbg !5793
  br label %if.end40, !dbg !5793

if.end40:                                         ; preds = %if.then39, %if.else35
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then34
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %for.end
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then
  ret void, !dbg !5794
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !5795 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5802, metadata !DIExpression()), !dbg !5803
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !5804, metadata !DIExpression()), !dbg !5805
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !5806, metadata !DIExpression()), !dbg !5807
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5808, metadata !DIExpression()), !dbg !5809
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !5810
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !5811
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5811
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5812
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !5813
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !5814
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5815
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !5816
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !5817
  br label %while.body, !dbg !5818

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5819
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !5822
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !5822
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !5819
  br i1 %tobool, label %if.end, label %if.then, !dbg !5823

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5824
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !5826
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !5827
  br label %while.end, !dbg !5828

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5829
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !5831
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !5831
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !5832
  %9 = load i32, i32* %indx, align 8, !dbg !5832
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !5833
  %div = udiv i32 %10, 128, !dbg !5834
  %cmp = icmp uge i32 %9, %div, !dbg !5835
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5836

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !5837

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5838
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !5839
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !5839
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !5840
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5840
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5841
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !5842
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !5843
  br label %while.body, !dbg !5818, !llvm.loop !5844

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5846
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5848
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !5848
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !5849
  %17 = load i32, i32* %indx9, align 8, !dbg !5849
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !5850
  %div10 = udiv i32 %18, 128, !dbg !5851
  %cmp11 = icmp ne i32 %17, %div10, !dbg !5852
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5853

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5854
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !5855
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !5855
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !5856
  %21 = load i32, i32* %indx14, align 8, !dbg !5856
  %mul = mul i32 %21, 128, !dbg !5857
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !5858
  br label %if.end15, !dbg !5859

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !5860
  %div16 = udiv i32 %22, 64, !dbg !5861
  %rem = urem i32 %div16, 2, !dbg !5862
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5863
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !5864
  store i32 %rem, i32* %word_no, align 8, !dbg !5865
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5866
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !5867
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !5867
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !5868
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5869
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !5870
  %27 = load i32, i32* %word_no18, align 8, !dbg !5870
  %idxprom = zext i32 %27 to i64, !dbg !5866
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !5866
  %28 = load i64, i64* %arrayidx, align 8, !dbg !5866
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5871
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !5872
  store i64 %28, i64* %bits19, align 8, !dbg !5873
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !5874
  %rem20 = urem i32 %30, 64, !dbg !5875
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5876
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !5877
  %32 = load i64, i64* %bits21, align 8, !dbg !5878
  %sh_prom = zext i32 %rem20 to i64, !dbg !5878
  %shr = lshr i64 %32, %sh_prom, !dbg !5878
  store i64 %shr, i64* %bits21, align 8, !dbg !5878
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5879
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !5880
  %34 = load i64, i64* %bits22, align 8, !dbg !5880
  %tobool23 = icmp ne i64 %34, 0, !dbg !5881
  %lnot = xor i1 %tobool23, true, !dbg !5881
  %lnot.ext = zext i1 %lnot to i32, !dbg !5881
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !5882
  %add = add i32 %35, %lnot.ext, !dbg !5882
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !5882
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !5883
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !5884
  store i32 %36, i32* %37, align 4, !dbg !5885
  ret void, !dbg !5886
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5887 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5890, metadata !DIExpression()), !dbg !5891
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5892, metadata !DIExpression()), !dbg !5893
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5894
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5896
  %1 = load i64, i64* %bits, align 8, !dbg !5896
  %tobool = icmp ne i64 %1, 0, !dbg !5894
  br i1 %tobool, label %if.then, label %if.end, !dbg !5897

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !5898

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !5899), !dbg !5901
  br label %while.cond, !dbg !5902

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5903
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !5904
  %3 = load i64, i64* %bits1, align 8, !dbg !5904
  %and = and i64 %3, 1, !dbg !5905
  %tobool2 = icmp ne i64 %and, 0, !dbg !5906
  %lnot = xor i1 %tobool2, true, !dbg !5906
  br i1 %lnot, label %while.body, label %while.end, !dbg !5902

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5907
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !5909
  %5 = load i64, i64* %bits3, align 8, !dbg !5910
  %shr = lshr i64 %5, 1, !dbg !5910
  store i64 %shr, i64* %bits3, align 8, !dbg !5910
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !5911
  %7 = load i32, i32* %6, align 4, !dbg !5912
  %add = add i32 %7, 1, !dbg !5912
  store i32 %add, i32* %6, align 4, !dbg !5912
  br label %while.cond, !dbg !5902, !llvm.loop !5913

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !5915
  br label %return, !dbg !5915

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !5916
  %9 = load i32, i32* %8, align 4, !dbg !5917
  %add4 = add i32 %9, 64, !dbg !5918
  %sub = sub i32 %add4, 1, !dbg !5919
  %div = udiv i32 %sub, 64, !dbg !5920
  %mul = mul i32 %div, 64, !dbg !5921
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !5922
  store i32 %mul, i32* %10, align 4, !dbg !5923
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5924
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !5925
  %12 = load i32, i32* %word_no, align 8, !dbg !5926
  %inc = add i32 %12, 1, !dbg !5926
  store i32 %inc, i32* %word_no, align 8, !dbg !5926
  br label %while.body6, !dbg !5927

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !5928

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5930
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !5931
  %14 = load i32, i32* %word_no8, align 8, !dbg !5931
  %cmp = icmp ne i32 %14, 2, !dbg !5932
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !5928

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5933
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5935
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !5935
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !5936
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5937
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !5938
  %18 = load i32, i32* %word_no11, align 8, !dbg !5938
  %idxprom = zext i32 %18 to i64, !dbg !5933
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !5933
  %19 = load i64, i64* %arrayidx, align 8, !dbg !5933
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5939
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !5940
  store i64 %19, i64* %bits12, align 8, !dbg !5941
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5942
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !5944
  %22 = load i64, i64* %bits13, align 8, !dbg !5944
  %tobool14 = icmp ne i64 %22, 0, !dbg !5942
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5945

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !5946

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !5947
  %24 = load i32, i32* %23, align 4, !dbg !5948
  %add17 = add i32 %24, 64, !dbg !5948
  store i32 %add17, i32* %23, align 4, !dbg !5948
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5949
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !5950
  %26 = load i32, i32* %word_no18, align 8, !dbg !5951
  %inc19 = add i32 %26, 1, !dbg !5951
  store i32 %inc19, i32* %word_no18, align 8, !dbg !5951
  br label %while.cond7, !dbg !5928, !llvm.loop !5952

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5954
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !5955
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !5955
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !5956
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5956
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5957
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !5958
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !5959
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5960
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !5962
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !5962
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !5960
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5963

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !5964
  br label %return, !dbg !5964

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5965
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !5966
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !5966
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !5967
  %35 = load i32, i32* %indx, align 8, !dbg !5967
  %mul28 = mul i32 %35, 128, !dbg !5968
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !5969
  store i32 %mul28, i32* %36, align 4, !dbg !5970
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5971
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !5972
  store i32 0, i32* %word_no29, align 8, !dbg !5973
  br label %while.body6, !dbg !5927, !llvm.loop !5974

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !5976
  ret i8 %38, !dbg !5976
}

declare dso_local void @free_INSN_LIST_list(%struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_insn_expr_list_list(%struct.rtx_def** %listp) #0 !dbg !5977 {
entry:
  %listp.addr = alloca %struct.rtx_def**, align 8
  %list = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %listp, %struct.rtx_def*** %listp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %listp.addr, metadata !5980, metadata !DIExpression()), !dbg !5981
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %list, metadata !5982, metadata !DIExpression()), !dbg !5983
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !5984, metadata !DIExpression()), !dbg !5985
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %listp.addr, align 8, !dbg !5986
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !5988
  store %struct.rtx_def* %1, %struct.rtx_def** %list, align 8, !dbg !5989
  br label %for.cond, !dbg !5990

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !5991
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !5993
  br i1 %tobool, label %for.body, label %for.end, !dbg !5993

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !5994
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5994
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5994
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5994
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5994
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5994
  store %struct.rtx_def* %4, %struct.rtx_def** %next, align 8, !dbg !5996
  %5 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !5997
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !5997
  %bf.load = load i32, i32* %6, align 8, !dbg !5997
  %bf.clear = and i32 %bf.load, 65535, !dbg !5997
  %cmp = icmp eq i32 %bf.clear, 3, !dbg !5999
  br i1 %cmp, label %if.then, label %if.else, !dbg !6000

if.then:                                          ; preds = %for.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !6001
  call void @free_EXPR_LIST_node(%struct.rtx_def* %7), !dbg !6002
  br label %if.end, !dbg !6002

if.else:                                          ; preds = %for.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !6003
  call void @free_INSN_LIST_node(%struct.rtx_def* %8), !dbg !6004
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !6005

for.inc:                                          ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6006
  store %struct.rtx_def* %9, %struct.rtx_def** %list, align 8, !dbg !6007
  br label %for.cond, !dbg !6008, !llvm.loop !6009

for.end:                                          ; preds = %for.cond
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %listp.addr, align 8, !dbg !6011
  store %struct.rtx_def* null, %struct.rtx_def** %10, align 8, !dbg !6012
  ret void, !dbg !6013
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !6014 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !6017, metadata !DIExpression()), !dbg !6018
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !6019, metadata !DIExpression()), !dbg !6020
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6021
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !6022
  %1 = load i64, i64* %bits, align 8, !dbg !6023
  %shr = lshr i64 %1, 1, !dbg !6023
  store i64 %shr, i64* %bits, align 8, !dbg !6023
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !6024
  %3 = load i32, i32* %2, align 4, !dbg !6025
  %add = add i32 %3, 1, !dbg !6025
  store i32 %add, i32* %2, align 4, !dbg !6025
  ret void, !dbg !6026
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

declare dso_local void @free_EXPR_LIST_node(%struct.rtx_def*) #2

declare dso_local void @free_INSN_LIST_node(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_last_mem_set_info(%struct.rtx_def* %insn) #0 !dbg !6027 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %bb = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6028, metadata !DIExpression()), !dbg !6029
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !6030, metadata !DIExpression()), !dbg !6031
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6032
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6032
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6032
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !6032
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !6032
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6032
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 9, !dbg !6033
  %2 = load i32, i32* %index, align 8, !dbg !6033
  store i32 %2, i32* %bb, align 4, !dbg !6031
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6034
  %4 = load %struct.rtx_def**, %struct.rtx_def*** @modify_mem_list, align 8, !dbg !6035
  %5 = load i32, i32* %bb, align 4, !dbg !6036
  %idxprom = sext i32 %5 to i64, !dbg !6035
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 %idxprom, !dbg !6035
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8, !dbg !6035
  %call = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %3, %struct.rtx_def* %6), !dbg !6037
  %7 = load %struct.rtx_def**, %struct.rtx_def*** @modify_mem_list, align 8, !dbg !6038
  %8 = load i32, i32* %bb, align 4, !dbg !6039
  %idxprom2 = sext i32 %8 to i64, !dbg !6038
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 %idxprom2, !dbg !6038
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx3, align 8, !dbg !6040
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @modify_mem_list_set, align 8, !dbg !6041
  %10 = load i32, i32* %bb, align 4, !dbg !6042
  %call4 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %9, i32 %10), !dbg !6043
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6044
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6044
  %bf.load = load i32, i32* %12, align 8, !dbg !6044
  %bf.clear = and i32 %bf.load, 65535, !dbg !6044
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !6044
  br i1 %cmp, label %if.then, label %if.else, !dbg !6046

if.then:                                          ; preds = %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6047
  %14 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !6049
  %15 = load i32, i32* %bb, align 4, !dbg !6050
  %idxprom5 = sext i32 %15 to i64, !dbg !6049
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 %idxprom5, !dbg !6049
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8, !dbg !6049
  %call7 = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %13, %struct.rtx_def* %16), !dbg !6051
  %17 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !6052
  %18 = load i32, i32* %bb, align 4, !dbg !6053
  %idxprom8 = sext i32 %18 to i64, !dbg !6052
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 %idxprom8, !dbg !6052
  store %struct.rtx_def* %call7, %struct.rtx_def** %arrayidx9, align 8, !dbg !6054
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_calls, align 8, !dbg !6055
  %20 = load i32, i32* %bb, align 4, !dbg !6056
  %call10 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %19, i32 %20), !dbg !6057
  br label %if.end, !dbg !6058

if.else:                                          ; preds = %entry
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6059
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !6059
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !6059
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 5, !dbg !6059
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !6059
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6059
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6060
  %24 = bitcast %struct.rtx_def* %23 to i8*, !dbg !6061
  call void @note_stores(%struct.rtx_def* %22, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @canon_list_insert, i8* %24), !dbg !6062
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6063
}

declare dso_local %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @canon_list_insert(%struct.rtx_def* %dest, %struct.rtx_def* %unused1, i8* %v_insn) #0 !dbg !6064 {
entry:
  %dest.addr = alloca %struct.rtx_def*, align 8
  %unused1.addr = alloca %struct.rtx_def*, align 8
  %v_insn.addr = alloca i8*, align 8
  %dest_addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %bb = alloca i32, align 4
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !6065, metadata !DIExpression()), !dbg !6066
  store %struct.rtx_def* %unused1, %struct.rtx_def** %unused1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %unused1.addr, metadata !6067, metadata !DIExpression()), !dbg !6068
  store i8* %v_insn, i8** %v_insn.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v_insn.addr, metadata !6069, metadata !DIExpression()), !dbg !6070
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest_addr, metadata !6071, metadata !DIExpression()), !dbg !6072
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6073, metadata !DIExpression()), !dbg !6074
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !6075, metadata !DIExpression()), !dbg !6076
  br label %while.cond, !dbg !6077

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6078
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6078
  %bf.load = load i32, i32* %1, align 8, !dbg !6078
  %bf.clear = and i32 %bf.load, 65535, !dbg !6078
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !6079
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !6080

lor.lhs.false:                                    ; preds = %while.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6081
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6081
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6081
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6081
  %cmp3 = icmp eq i32 %bf.clear2, 120, !dbg !6082
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !6083

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6084
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6084
  %bf.load4 = load i32, i32* %5, align 8, !dbg !6084
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !6084
  %cmp6 = icmp eq i32 %bf.clear5, 40, !dbg !6085
  br label %lor.end, !dbg !6083

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp6, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end, !dbg !6077

while.body:                                       ; preds = %lor.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6086
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !6086
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6086
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6086
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6086
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6086
  store %struct.rtx_def* %8, %struct.rtx_def** %dest.addr, align 8, !dbg !6087
  br label %while.cond, !dbg !6077, !llvm.loop !6088

while.end:                                        ; preds = %lor.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6089
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6089
  %bf.load7 = load i32, i32* %10, align 8, !dbg !6089
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6089
  %cmp9 = icmp eq i32 %bf.clear8, 43, !dbg !6089
  br i1 %cmp9, label %if.end, label %if.then, !dbg !6091

if.then:                                          ; preds = %while.end
  br label %return, !dbg !6092

if.end:                                           ; preds = %while.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6093
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !6093
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !6093
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 0, !dbg !6093
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !6093
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !6093
  %call = call %struct.rtx_def* @get_addr(%struct.rtx_def* %12), !dbg !6094
  store %struct.rtx_def* %call, %struct.rtx_def** %dest_addr, align 8, !dbg !6095
  %13 = load %struct.rtx_def*, %struct.rtx_def** %dest_addr, align 8, !dbg !6096
  %call14 = call %struct.rtx_def* @canon_rtx(%struct.rtx_def* %13), !dbg !6097
  store %struct.rtx_def* %call14, %struct.rtx_def** %dest_addr, align 8, !dbg !6098
  %14 = load i8*, i8** %v_insn.addr, align 8, !dbg !6099
  %15 = bitcast i8* %14 to %struct.rtx_def*, !dbg !6100
  store %struct.rtx_def* %15, %struct.rtx_def** %insn, align 8, !dbg !6101
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6102
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6102
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !6102
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 3, !dbg !6102
  %rt_bb = bitcast %union.rtunion_def* %arrayidx17 to %struct.basic_block_def**, !dbg !6102
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6102
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !6103
  %18 = load i32, i32* %index, align 8, !dbg !6103
  store i32 %18, i32* %bb, align 4, !dbg !6104
  %19 = load %struct.rtx_def*, %struct.rtx_def** %dest_addr, align 8, !dbg !6105
  %20 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !6106
  %21 = load i32, i32* %bb, align 4, !dbg !6107
  %idxprom = sext i32 %21 to i64, !dbg !6106
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 %idxprom, !dbg !6106
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8, !dbg !6106
  %call19 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 0, %struct.rtx_def* %19, %struct.rtx_def* %22), !dbg !6108
  %23 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !6109
  %24 = load i32, i32* %bb, align 4, !dbg !6110
  %idxprom20 = sext i32 %24 to i64, !dbg !6109
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 %idxprom20, !dbg !6109
  store %struct.rtx_def* %call19, %struct.rtx_def** %arrayidx21, align 8, !dbg !6111
  %25 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6112
  %26 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !6113
  %27 = load i32, i32* %bb, align 4, !dbg !6114
  %idxprom22 = sext i32 %27 to i64, !dbg !6113
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %26, i64 %idxprom22, !dbg !6113
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8, !dbg !6113
  %call24 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 0, %struct.rtx_def* %25, %struct.rtx_def* %28), !dbg !6115
  %29 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !6116
  %30 = load i32, i32* %bb, align 4, !dbg !6117
  %idxprom25 = sext i32 %30 to i64, !dbg !6116
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 %idxprom25, !dbg !6116
  store %struct.rtx_def* %call24, %struct.rtx_def** %arrayidx26, align 8, !dbg !6118
  br label %return, !dbg !6119

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6119
}

declare dso_local %struct.rtx_def* @get_addr(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @canon_rtx(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @alloc_EXPR_LIST(i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @push_operand(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @hash_scan_call(%struct.rtx_def* %x, %struct.rtx_def* %insn, %struct.hash_table_d* %table) #0 !dbg !6120 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %table.addr = alloca %struct.hash_table_d*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6121, metadata !DIExpression()), !dbg !6122
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6123, metadata !DIExpression()), !dbg !6124
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !6125, metadata !DIExpression()), !dbg !6126
  ret void, !dbg !6127
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @want_to_gcse_p(%struct.rtx_def* %x) #0 !dbg !6128 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6129, metadata !DIExpression()), !dbg !6130
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6131
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6131
  %bf.load = load i32, i32* %1, align 8, !dbg !6131
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6131
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6131
  %cmp = icmp eq i32 %bf.clear, 38, !dbg !6131
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false4, !dbg !6131

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @ix86_isa_flags, align 4, !dbg !6131
  %and = and i32 %2, 65536, !dbg !6131
  %cmp1 = icmp ne i32 %and, 0, !dbg !6131
  br i1 %cmp1, label %lor.lhs.false, label %if.then, !dbg !6131

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load i32, i32* @ix86_fpmath, align 4, !dbg !6131
  %and2 = and i32 %3, 2, !dbg !6131
  %cmp3 = icmp ne i32 %and2, 0, !dbg !6131
  br i1 %cmp3, label %lor.lhs.false4, label %if.then, !dbg !6131

lor.lhs.false4:                                   ; preds = %lor.lhs.false, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6131
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6131
  %bf.load5 = load i32, i32* %5, align 8, !dbg !6131
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !6131
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !6131
  %cmp8 = icmp eq i32 %bf.clear7, 39, !dbg !6131
  br i1 %cmp8, label %land.lhs.true9, label %lor.lhs.false15, !dbg !6131

land.lhs.true9:                                   ; preds = %lor.lhs.false4
  %6 = load i32, i32* @ix86_isa_flags, align 4, !dbg !6131
  %and10 = and i32 %6, 131072, !dbg !6131
  %cmp11 = icmp ne i32 %and10, 0, !dbg !6131
  br i1 %cmp11, label %lor.lhs.false12, label %if.then, !dbg !6131

lor.lhs.false12:                                  ; preds = %land.lhs.true9
  %7 = load i32, i32* @ix86_fpmath, align 4, !dbg !6131
  %and13 = and i32 %7, 2, !dbg !6131
  %cmp14 = icmp ne i32 %and13, 0, !dbg !6131
  br i1 %cmp14, label %lor.lhs.false15, label %if.then, !dbg !6131

lor.lhs.false15:                                  ; preds = %lor.lhs.false12, %lor.lhs.false4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6131
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6131
  %bf.load16 = load i32, i32* %9, align 8, !dbg !6131
  %bf.lshr17 = lshr i32 %bf.load16, 16, !dbg !6131
  %bf.clear18 = and i32 %bf.lshr17, 255, !dbg !6131
  %cmp19 = icmp eq i32 %bf.clear18, 40, !dbg !6131
  br i1 %cmp19, label %if.then, label %if.end, !dbg !6133

if.then:                                          ; preds = %lor.lhs.false15, %lor.lhs.false12, %land.lhs.true9, %lor.lhs.false, %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6134
  %call = call %struct.rtx_def* @avoid_constant_pool_reference(%struct.rtx_def* %10), !dbg !6135
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8, !dbg !6136
  br label %if.end, !dbg !6137

if.end:                                           ; preds = %if.then, %lor.lhs.false15
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6138
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6138
  %bf.load20 = load i32, i32* %12, align 8, !dbg !6138
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !6138
  switch i32 %bf.clear21, label %sw.default [
    i32 37, label %sw.bb
    i32 39, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 26, label %sw.bb
  ], !dbg !6139

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  store i32 0, i32* %retval, align 4, !dbg !6140
  br label %return, !dbg !6140

sw.default:                                       ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6142
  %call22 = call zeroext i8 @can_assign_to_reg_without_clobbers_p(%struct.rtx_def* %13), !dbg !6143
  %conv = zext i8 %call22 to i32, !dbg !6143
  store i32 %conv, i32* %retval, align 4, !dbg !6144
  br label %return, !dbg !6144

return:                                           ; preds = %sw.default, %sw.bb
  %14 = load i32, i32* %retval, align 4, !dbg !6145
  ret i32 %14, !dbg !6145
}

declare dso_local zeroext i8 @can_throw_internal(%struct.rtx_def*) #2

declare dso_local i32 @set_noop_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @oprs_anticipatable_p(%struct.rtx_def* %x, %struct.rtx_def* %insn) #0 !dbg !6146 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6149, metadata !DIExpression()), !dbg !6150
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6151, metadata !DIExpression()), !dbg !6152
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6153
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6154
  %call = call i32 @oprs_unchanged_p(%struct.rtx_def* %0, %struct.rtx_def* %1, i32 0), !dbg !6155
  ret i32 %call, !dbg !6156
}

declare dso_local i32 @multiple_sets(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @oprs_available_p(%struct.rtx_def* %x, %struct.rtx_def* %insn) #0 !dbg !6157 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6158, metadata !DIExpression()), !dbg !6159
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6160, metadata !DIExpression()), !dbg !6161
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6162
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6163
  %call = call i32 @oprs_unchanged_p(%struct.rtx_def* %0, %struct.rtx_def* %1, i32 1), !dbg !6164
  ret i32 %call, !dbg !6165
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_expr_in_table(%struct.rtx_def* %x, i32 %mode, %struct.rtx_def* %insn, i32 %antic_p, i32 %avail_p, %struct.hash_table_d* %table) #0 !dbg !6166 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %antic_p.addr = alloca i32, align 4
  %avail_p.addr = alloca i32, align 4
  %table.addr = alloca %struct.hash_table_d*, align 8
  %found = alloca i32, align 4
  %do_not_record_p = alloca i32, align 4
  %hash = alloca i32, align 4
  %cur_expr = alloca %struct.expr*, align 8
  %last_expr = alloca %struct.expr*, align 8
  %antic_occr = alloca %struct.occr*, align 8
  %avail_occr = alloca %struct.occr*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6169, metadata !DIExpression()), !dbg !6170
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6171, metadata !DIExpression()), !dbg !6172
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6173, metadata !DIExpression()), !dbg !6174
  store i32 %antic_p, i32* %antic_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %antic_p.addr, metadata !6175, metadata !DIExpression()), !dbg !6176
  store i32 %avail_p, i32* %avail_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %avail_p.addr, metadata !6177, metadata !DIExpression()), !dbg !6178
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !6179, metadata !DIExpression()), !dbg !6180
  call void @llvm.dbg.declare(metadata i32* %found, metadata !6181, metadata !DIExpression()), !dbg !6182
  call void @llvm.dbg.declare(metadata i32* %do_not_record_p, metadata !6183, metadata !DIExpression()), !dbg !6184
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !6185, metadata !DIExpression()), !dbg !6186
  call void @llvm.dbg.declare(metadata %struct.expr** %cur_expr, metadata !6187, metadata !DIExpression()), !dbg !6188
  call void @llvm.dbg.declare(metadata %struct.expr** %last_expr, metadata !6189, metadata !DIExpression()), !dbg !6190
  store %struct.expr* null, %struct.expr** %last_expr, align 8, !dbg !6190
  call void @llvm.dbg.declare(metadata %struct.occr** %antic_occr, metadata !6191, metadata !DIExpression()), !dbg !6192
  call void @llvm.dbg.declare(metadata %struct.occr** %avail_occr, metadata !6193, metadata !DIExpression()), !dbg !6194
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6195
  %1 = load i32, i32* %mode.addr, align 4, !dbg !6196
  %2 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6197
  %size = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %2, i32 0, i32 1, !dbg !6198
  %3 = load i32, i32* %size, align 8, !dbg !6198
  %call = call i32 @hash_expr(%struct.rtx_def* %0, i32 %1, i32* %do_not_record_p, i32 %3), !dbg !6199
  store i32 %call, i32* %hash, align 4, !dbg !6200
  %4 = load i32, i32* %do_not_record_p, align 4, !dbg !6201
  %tobool = icmp ne i32 %4, 0, !dbg !6201
  br i1 %tobool, label %if.then, label %if.end, !dbg !6203

if.then:                                          ; preds = %entry
  br label %if.end79, !dbg !6204

if.end:                                           ; preds = %entry
  %5 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6205
  %table1 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %5, i32 0, i32 0, !dbg !6206
  %6 = load %struct.expr**, %struct.expr*** %table1, align 8, !dbg !6206
  %7 = load i32, i32* %hash, align 4, !dbg !6207
  %idxprom = zext i32 %7 to i64, !dbg !6205
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %6, i64 %idxprom, !dbg !6205
  %8 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !6205
  store %struct.expr* %8, %struct.expr** %cur_expr, align 8, !dbg !6208
  store i32 0, i32* %found, align 4, !dbg !6209
  br label %while.cond, !dbg !6210

while.cond:                                       ; preds = %while.body, %if.end
  %9 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6211
  %tobool2 = icmp ne %struct.expr* %9, null, !dbg !6211
  br i1 %tobool2, label %land.rhs, label %land.end, !dbg !6212

land.rhs:                                         ; preds = %while.cond
  %10 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6213
  %expr = getelementptr inbounds %struct.expr, %struct.expr* %10, i32 0, i32 0, !dbg !6214
  %11 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !6214
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6215
  %call3 = call i32 @expr_equiv_p(%struct.rtx_def* %11, %struct.rtx_def* %12), !dbg !6216
  store i32 %call3, i32* %found, align 4, !dbg !6217
  %cmp = icmp eq i32 0, %call3, !dbg !6218
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %13 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !6219
  br i1 %13, label %while.body, label %while.end, !dbg !6210

while.body:                                       ; preds = %land.end
  %14 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6220
  store %struct.expr* %14, %struct.expr** %last_expr, align 8, !dbg !6222
  %15 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6223
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %15, i32 0, i32 2, !dbg !6224
  %16 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !6224
  store %struct.expr* %16, %struct.expr** %cur_expr, align 8, !dbg !6225
  br label %while.cond, !dbg !6210, !llvm.loop !6226

while.end:                                        ; preds = %land.end
  %17 = load i32, i32* %found, align 4, !dbg !6228
  %tobool4 = icmp ne i32 %17, 0, !dbg !6228
  br i1 %tobool4, label %if.end23, label %if.then5, !dbg !6230

if.then5:                                         ; preds = %while.end
  %call6 = call i8* @gcse_alloc(i64 48), !dbg !6231
  %18 = bitcast i8* %call6 to %struct.expr*, !dbg !6231
  store %struct.expr* %18, %struct.expr** %cur_expr, align 8, !dbg !6233
  %19 = load i32, i32* @bytes_used, align 4, !dbg !6234
  %conv = sext i32 %19 to i64, !dbg !6234
  %add = add i64 %conv, 48, !dbg !6234
  %conv7 = trunc i64 %add to i32, !dbg !6234
  store i32 %conv7, i32* @bytes_used, align 4, !dbg !6234
  %20 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6235
  %table8 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %20, i32 0, i32 0, !dbg !6237
  %21 = load %struct.expr**, %struct.expr*** %table8, align 8, !dbg !6237
  %22 = load i32, i32* %hash, align 4, !dbg !6238
  %idxprom9 = zext i32 %22 to i64, !dbg !6235
  %arrayidx10 = getelementptr inbounds %struct.expr*, %struct.expr** %21, i64 %idxprom9, !dbg !6235
  %23 = load %struct.expr*, %struct.expr** %arrayidx10, align 8, !dbg !6235
  %cmp11 = icmp eq %struct.expr* %23, null, !dbg !6239
  br i1 %cmp11, label %if.then13, label %if.else, !dbg !6240

if.then13:                                        ; preds = %if.then5
  %24 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6241
  %25 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6242
  %table14 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %25, i32 0, i32 0, !dbg !6243
  %26 = load %struct.expr**, %struct.expr*** %table14, align 8, !dbg !6243
  %27 = load i32, i32* %hash, align 4, !dbg !6244
  %idxprom15 = zext i32 %27 to i64, !dbg !6242
  %arrayidx16 = getelementptr inbounds %struct.expr*, %struct.expr** %26, i64 %idxprom15, !dbg !6242
  store %struct.expr* %24, %struct.expr** %arrayidx16, align 8, !dbg !6245
  br label %if.end18, !dbg !6242

if.else:                                          ; preds = %if.then5
  %28 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6246
  %29 = load %struct.expr*, %struct.expr** %last_expr, align 8, !dbg !6247
  %next_same_hash17 = getelementptr inbounds %struct.expr, %struct.expr* %29, i32 0, i32 2, !dbg !6248
  store %struct.expr* %28, %struct.expr** %next_same_hash17, align 8, !dbg !6249
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then13
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6250
  %31 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6251
  %expr19 = getelementptr inbounds %struct.expr, %struct.expr* %31, i32 0, i32 0, !dbg !6252
  store %struct.rtx_def* %30, %struct.rtx_def** %expr19, align 8, !dbg !6253
  %32 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6254
  %n_elems = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %32, i32 0, i32 2, !dbg !6255
  %33 = load i32, i32* %n_elems, align 4, !dbg !6256
  %inc = add i32 %33, 1, !dbg !6256
  store i32 %inc, i32* %n_elems, align 4, !dbg !6256
  %34 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6257
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %34, i32 0, i32 1, !dbg !6258
  store i32 %33, i32* %bitmap_index, align 8, !dbg !6259
  %35 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6260
  %next_same_hash20 = getelementptr inbounds %struct.expr, %struct.expr* %35, i32 0, i32 2, !dbg !6261
  store %struct.expr* null, %struct.expr** %next_same_hash20, align 8, !dbg !6262
  %36 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6263
  %antic_occr21 = getelementptr inbounds %struct.expr, %struct.expr* %36, i32 0, i32 3, !dbg !6264
  store %struct.occr* null, %struct.occr** %antic_occr21, align 8, !dbg !6265
  %37 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6266
  %avail_occr22 = getelementptr inbounds %struct.expr, %struct.expr* %37, i32 0, i32 4, !dbg !6267
  store %struct.occr* null, %struct.occr** %avail_occr22, align 8, !dbg !6268
  br label %if.end23, !dbg !6269

if.end23:                                         ; preds = %if.end18, %while.end
  %38 = load i32, i32* %antic_p.addr, align 4, !dbg !6270
  %tobool24 = icmp ne i32 %38, 0, !dbg !6270
  br i1 %tobool24, label %if.then25, label %if.end49, !dbg !6272

if.then25:                                        ; preds = %if.end23
  %39 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6273
  %antic_occr26 = getelementptr inbounds %struct.expr, %struct.expr* %39, i32 0, i32 3, !dbg !6275
  %40 = load %struct.occr*, %struct.occr** %antic_occr26, align 8, !dbg !6275
  store %struct.occr* %40, %struct.occr** %antic_occr, align 8, !dbg !6276
  %41 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !6277
  %tobool27 = icmp ne %struct.occr* %41, null, !dbg !6277
  br i1 %tobool27, label %land.lhs.true, label %if.end37, !dbg !6279

land.lhs.true:                                    ; preds = %if.then25
  %42 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !6280
  %insn28 = getelementptr inbounds %struct.occr, %struct.occr* %42, i32 0, i32 1, !dbg !6280
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn28, align 8, !dbg !6280
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !6280
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6280
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !6280
  %rt_bb = bitcast %union.rtunion_def* %arrayidx29 to %struct.basic_block_def**, !dbg !6280
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6280
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6281
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !6281
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !6281
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 3, !dbg !6281
  %rt_bb33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.basic_block_def**, !dbg !6281
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb33, align 8, !dbg !6281
  %cmp34 = icmp ne %struct.basic_block_def* %44, %46, !dbg !6282
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !6283

if.then36:                                        ; preds = %land.lhs.true
  store %struct.occr* null, %struct.occr** %antic_occr, align 8, !dbg !6284
  br label %if.end37, !dbg !6285

if.end37:                                         ; preds = %if.then36, %land.lhs.true, %if.then25
  %47 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !6286
  %tobool38 = icmp ne %struct.occr* %47, null, !dbg !6286
  br i1 %tobool38, label %if.then39, label %if.else40, !dbg !6288

if.then39:                                        ; preds = %if.end37
  br label %if.end48, !dbg !6288

if.else40:                                        ; preds = %if.end37
  %call41 = call i8* @gcse_alloc(i64 24), !dbg !6289
  %48 = bitcast i8* %call41 to %struct.occr*, !dbg !6289
  store %struct.occr* %48, %struct.occr** %antic_occr, align 8, !dbg !6291
  %49 = load i32, i32* @bytes_used, align 4, !dbg !6292
  %conv42 = sext i32 %49 to i64, !dbg !6292
  %add43 = add i64 %conv42, 24, !dbg !6292
  %conv44 = trunc i64 %add43 to i32, !dbg !6292
  store i32 %conv44, i32* @bytes_used, align 4, !dbg !6292
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6293
  %51 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !6294
  %insn45 = getelementptr inbounds %struct.occr, %struct.occr* %51, i32 0, i32 1, !dbg !6295
  store %struct.rtx_def* %50, %struct.rtx_def** %insn45, align 8, !dbg !6296
  %52 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6297
  %antic_occr46 = getelementptr inbounds %struct.expr, %struct.expr* %52, i32 0, i32 3, !dbg !6298
  %53 = load %struct.occr*, %struct.occr** %antic_occr46, align 8, !dbg !6298
  %54 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !6299
  %next = getelementptr inbounds %struct.occr, %struct.occr* %54, i32 0, i32 0, !dbg !6300
  store %struct.occr* %53, %struct.occr** %next, align 8, !dbg !6301
  %55 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !6302
  %deleted_p = getelementptr inbounds %struct.occr, %struct.occr* %55, i32 0, i32 2, !dbg !6303
  store i8 0, i8* %deleted_p, align 8, !dbg !6304
  %56 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !6305
  %57 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6306
  %antic_occr47 = getelementptr inbounds %struct.expr, %struct.expr* %57, i32 0, i32 3, !dbg !6307
  store %struct.occr* %56, %struct.occr** %antic_occr47, align 8, !dbg !6308
  br label %if.end48

if.end48:                                         ; preds = %if.else40, %if.then39
  br label %if.end49, !dbg !6309

if.end49:                                         ; preds = %if.end48, %if.end23
  %58 = load i32, i32* %avail_p.addr, align 4, !dbg !6310
  %tobool50 = icmp ne i32 %58, 0, !dbg !6310
  br i1 %tobool50, label %if.then51, label %if.end79, !dbg !6312

if.then51:                                        ; preds = %if.end49
  %59 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6313
  %avail_occr52 = getelementptr inbounds %struct.expr, %struct.expr* %59, i32 0, i32 4, !dbg !6315
  %60 = load %struct.occr*, %struct.occr** %avail_occr52, align 8, !dbg !6315
  store %struct.occr* %60, %struct.occr** %avail_occr, align 8, !dbg !6316
  %61 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !6317
  %tobool53 = icmp ne %struct.occr* %61, null, !dbg !6317
  br i1 %tobool53, label %land.lhs.true54, label %if.else68, !dbg !6319

land.lhs.true54:                                  ; preds = %if.then51
  %62 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !6320
  %insn55 = getelementptr inbounds %struct.occr, %struct.occr* %62, i32 0, i32 1, !dbg !6320
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn55, align 8, !dbg !6320
  %u56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !6320
  %fld57 = bitcast %union.u* %u56 to [1 x %union.rtunion_def]*, !dbg !6320
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i64 0, i64 3, !dbg !6320
  %rt_bb59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.basic_block_def**, !dbg !6320
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb59, align 8, !dbg !6320
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6321
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !6321
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !6321
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 3, !dbg !6321
  %rt_bb63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.basic_block_def**, !dbg !6321
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb63, align 8, !dbg !6321
  %cmp64 = icmp eq %struct.basic_block_def* %64, %66, !dbg !6322
  br i1 %cmp64, label %if.then66, label %if.else68, !dbg !6323

if.then66:                                        ; preds = %land.lhs.true54
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6324
  %68 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !6326
  %insn67 = getelementptr inbounds %struct.occr, %struct.occr* %68, i32 0, i32 1, !dbg !6327
  store %struct.rtx_def* %67, %struct.rtx_def** %insn67, align 8, !dbg !6328
  br label %if.end78, !dbg !6329

if.else68:                                        ; preds = %land.lhs.true54, %if.then51
  %call69 = call i8* @gcse_alloc(i64 24), !dbg !6330
  %69 = bitcast i8* %call69 to %struct.occr*, !dbg !6330
  store %struct.occr* %69, %struct.occr** %avail_occr, align 8, !dbg !6332
  %70 = load i32, i32* @bytes_used, align 4, !dbg !6333
  %conv70 = sext i32 %70 to i64, !dbg !6333
  %add71 = add i64 %conv70, 24, !dbg !6333
  %conv72 = trunc i64 %add71 to i32, !dbg !6333
  store i32 %conv72, i32* @bytes_used, align 4, !dbg !6333
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6334
  %72 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !6335
  %insn73 = getelementptr inbounds %struct.occr, %struct.occr* %72, i32 0, i32 1, !dbg !6336
  store %struct.rtx_def* %71, %struct.rtx_def** %insn73, align 8, !dbg !6337
  %73 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6338
  %avail_occr74 = getelementptr inbounds %struct.expr, %struct.expr* %73, i32 0, i32 4, !dbg !6339
  %74 = load %struct.occr*, %struct.occr** %avail_occr74, align 8, !dbg !6339
  %75 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !6340
  %next75 = getelementptr inbounds %struct.occr, %struct.occr* %75, i32 0, i32 0, !dbg !6341
  store %struct.occr* %74, %struct.occr** %next75, align 8, !dbg !6342
  %76 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !6343
  %deleted_p76 = getelementptr inbounds %struct.occr, %struct.occr* %76, i32 0, i32 2, !dbg !6344
  store i8 0, i8* %deleted_p76, align 8, !dbg !6345
  %77 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !6346
  %78 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6347
  %avail_occr77 = getelementptr inbounds %struct.expr, %struct.expr* %78, i32 0, i32 4, !dbg !6348
  store %struct.occr* %77, %struct.occr** %avail_occr77, align 8, !dbg !6349
  br label %if.end78

if.end78:                                         ; preds = %if.else68, %if.then66
  br label %if.end79, !dbg !6350

if.end79:                                         ; preds = %if.then, %if.end78, %if.end49
  ret void, !dbg !6351
}

declare dso_local %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_set_in_table(%struct.rtx_def* %x, %struct.rtx_def* %insn, %struct.hash_table_d* %table) #0 !dbg !6352 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %table.addr = alloca %struct.hash_table_d*, align 8
  %found = alloca i32, align 4
  %hash = alloca i32, align 4
  %cur_expr = alloca %struct.expr*, align 8
  %last_expr = alloca %struct.expr*, align 8
  %cur_occr = alloca %struct.occr*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6353, metadata !DIExpression()), !dbg !6354
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6355, metadata !DIExpression()), !dbg !6356
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !6357, metadata !DIExpression()), !dbg !6358
  call void @llvm.dbg.declare(metadata i32* %found, metadata !6359, metadata !DIExpression()), !dbg !6360
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !6361, metadata !DIExpression()), !dbg !6362
  call void @llvm.dbg.declare(metadata %struct.expr** %cur_expr, metadata !6363, metadata !DIExpression()), !dbg !6364
  call void @llvm.dbg.declare(metadata %struct.expr** %last_expr, metadata !6365, metadata !DIExpression()), !dbg !6366
  store %struct.expr* null, %struct.expr** %last_expr, align 8, !dbg !6366
  call void @llvm.dbg.declare(metadata %struct.occr** %cur_occr, metadata !6367, metadata !DIExpression()), !dbg !6368
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6369
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6369
  %bf.load = load i32, i32* %1, align 8, !dbg !6369
  %bf.clear = and i32 %bf.load, 65535, !dbg !6369
  %cmp = icmp eq i32 %bf.clear, 23, !dbg !6369
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6369

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6369
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6369
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6369
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6369
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6369
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6369
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !6369
  %bf.load1 = load i32, i32* %4, align 8, !dbg !6369
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6369
  %cmp3 = icmp eq i32 %bf.clear2, 37, !dbg !6369
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !6369

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 1207, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !6369
  br label %cond.end, !dbg !6369

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6369

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6369
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6370
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !6370
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !6370
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 0, !dbg !6370
  %rt_rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !6370
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx7, align 8, !dbg !6370
  %call = call i32 @rhs_regno(%struct.rtx_def* %6), !dbg !6370
  %7 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6371
  %size = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %7, i32 0, i32 1, !dbg !6372
  %8 = load i32, i32* %size, align 8, !dbg !6372
  %call8 = call i32 @hash_set(i32 %call, i32 %8), !dbg !6373
  store i32 %call8, i32* %hash, align 4, !dbg !6374
  %9 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6375
  %table9 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %9, i32 0, i32 0, !dbg !6376
  %10 = load %struct.expr**, %struct.expr*** %table9, align 8, !dbg !6376
  %11 = load i32, i32* %hash, align 4, !dbg !6377
  %idxprom = zext i32 %11 to i64, !dbg !6375
  %arrayidx10 = getelementptr inbounds %struct.expr*, %struct.expr** %10, i64 %idxprom, !dbg !6375
  %12 = load %struct.expr*, %struct.expr** %arrayidx10, align 8, !dbg !6375
  store %struct.expr* %12, %struct.expr** %cur_expr, align 8, !dbg !6378
  store i32 0, i32* %found, align 4, !dbg !6379
  br label %while.cond, !dbg !6380

while.cond:                                       ; preds = %while.body, %cond.end
  %13 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6381
  %tobool = icmp ne %struct.expr* %13, null, !dbg !6381
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6382

land.rhs:                                         ; preds = %while.cond
  %14 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6383
  %expr = getelementptr inbounds %struct.expr, %struct.expr* %14, i32 0, i32 0, !dbg !6384
  %15 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !6384
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6385
  %call11 = call i32 @expr_equiv_p(%struct.rtx_def* %15, %struct.rtx_def* %16), !dbg !6386
  store i32 %call11, i32* %found, align 4, !dbg !6387
  %cmp12 = icmp eq i32 0, %call11, !dbg !6388
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %cmp12, %land.rhs ], !dbg !6389
  br i1 %17, label %while.body, label %while.end, !dbg !6380

while.body:                                       ; preds = %land.end
  %18 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6390
  store %struct.expr* %18, %struct.expr** %last_expr, align 8, !dbg !6392
  %19 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6393
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %19, i32 0, i32 2, !dbg !6394
  %20 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !6394
  store %struct.expr* %20, %struct.expr** %cur_expr, align 8, !dbg !6395
  br label %while.cond, !dbg !6380, !llvm.loop !6396

while.end:                                        ; preds = %land.end
  %21 = load i32, i32* %found, align 4, !dbg !6398
  %tobool13 = icmp ne i32 %21, 0, !dbg !6398
  br i1 %tobool13, label %if.end29, label %if.then, !dbg !6400

if.then:                                          ; preds = %while.end
  %call14 = call i8* @gcse_alloc(i64 48), !dbg !6401
  %22 = bitcast i8* %call14 to %struct.expr*, !dbg !6401
  store %struct.expr* %22, %struct.expr** %cur_expr, align 8, !dbg !6403
  %23 = load i32, i32* @bytes_used, align 4, !dbg !6404
  %conv = sext i32 %23 to i64, !dbg !6404
  %add = add i64 %conv, 48, !dbg !6404
  %conv15 = trunc i64 %add to i32, !dbg !6404
  store i32 %conv15, i32* @bytes_used, align 4, !dbg !6404
  %24 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6405
  %table16 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %24, i32 0, i32 0, !dbg !6407
  %25 = load %struct.expr**, %struct.expr*** %table16, align 8, !dbg !6407
  %26 = load i32, i32* %hash, align 4, !dbg !6408
  %idxprom17 = zext i32 %26 to i64, !dbg !6405
  %arrayidx18 = getelementptr inbounds %struct.expr*, %struct.expr** %25, i64 %idxprom17, !dbg !6405
  %27 = load %struct.expr*, %struct.expr** %arrayidx18, align 8, !dbg !6405
  %cmp19 = icmp eq %struct.expr* %27, null, !dbg !6409
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !6410

if.then21:                                        ; preds = %if.then
  %28 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6411
  %29 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6412
  %table22 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %29, i32 0, i32 0, !dbg !6413
  %30 = load %struct.expr**, %struct.expr*** %table22, align 8, !dbg !6413
  %31 = load i32, i32* %hash, align 4, !dbg !6414
  %idxprom23 = zext i32 %31 to i64, !dbg !6412
  %arrayidx24 = getelementptr inbounds %struct.expr*, %struct.expr** %30, i64 %idxprom23, !dbg !6412
  store %struct.expr* %28, %struct.expr** %arrayidx24, align 8, !dbg !6415
  br label %if.end, !dbg !6412

if.else:                                          ; preds = %if.then
  %32 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6416
  %33 = load %struct.expr*, %struct.expr** %last_expr, align 8, !dbg !6417
  %next_same_hash25 = getelementptr inbounds %struct.expr, %struct.expr* %33, i32 0, i32 2, !dbg !6418
  store %struct.expr* %32, %struct.expr** %next_same_hash25, align 8, !dbg !6419
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then21
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6420
  %call26 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %34), !dbg !6421
  %35 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6422
  %expr27 = getelementptr inbounds %struct.expr, %struct.expr* %35, i32 0, i32 0, !dbg !6423
  store %struct.rtx_def* %call26, %struct.rtx_def** %expr27, align 8, !dbg !6424
  %36 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6425
  %n_elems = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %36, i32 0, i32 2, !dbg !6426
  %37 = load i32, i32* %n_elems, align 4, !dbg !6427
  %inc = add i32 %37, 1, !dbg !6427
  store i32 %inc, i32* %n_elems, align 4, !dbg !6427
  %38 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6428
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %38, i32 0, i32 1, !dbg !6429
  store i32 %37, i32* %bitmap_index, align 8, !dbg !6430
  %39 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6431
  %next_same_hash28 = getelementptr inbounds %struct.expr, %struct.expr* %39, i32 0, i32 2, !dbg !6432
  store %struct.expr* null, %struct.expr** %next_same_hash28, align 8, !dbg !6433
  %40 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6434
  %antic_occr = getelementptr inbounds %struct.expr, %struct.expr* %40, i32 0, i32 3, !dbg !6435
  store %struct.occr* null, %struct.occr** %antic_occr, align 8, !dbg !6436
  %41 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6437
  %avail_occr = getelementptr inbounds %struct.expr, %struct.expr* %41, i32 0, i32 4, !dbg !6438
  store %struct.occr* null, %struct.occr** %avail_occr, align 8, !dbg !6439
  br label %if.end29, !dbg !6440

if.end29:                                         ; preds = %if.end, %while.end
  %42 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6441
  %avail_occr30 = getelementptr inbounds %struct.expr, %struct.expr* %42, i32 0, i32 4, !dbg !6442
  %43 = load %struct.occr*, %struct.occr** %avail_occr30, align 8, !dbg !6442
  store %struct.occr* %43, %struct.occr** %cur_occr, align 8, !dbg !6443
  %44 = load %struct.occr*, %struct.occr** %cur_occr, align 8, !dbg !6444
  %tobool31 = icmp ne %struct.occr* %44, null, !dbg !6444
  br i1 %tobool31, label %land.lhs.true32, label %if.else45, !dbg !6446

land.lhs.true32:                                  ; preds = %if.end29
  %45 = load %struct.occr*, %struct.occr** %cur_occr, align 8, !dbg !6447
  %insn33 = getelementptr inbounds %struct.occr, %struct.occr* %45, i32 0, i32 1, !dbg !6447
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn33, align 8, !dbg !6447
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !6447
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !6447
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 3, !dbg !6447
  %rt_bb = bitcast %union.rtunion_def* %arrayidx36 to %struct.basic_block_def**, !dbg !6447
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6447
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6448
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6448
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !6448
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 3, !dbg !6448
  %rt_bb40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.basic_block_def**, !dbg !6448
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb40, align 8, !dbg !6448
  %cmp41 = icmp eq %struct.basic_block_def* %47, %49, !dbg !6449
  br i1 %cmp41, label %if.then43, label %if.else45, !dbg !6450

if.then43:                                        ; preds = %land.lhs.true32
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6451
  %51 = load %struct.occr*, %struct.occr** %cur_occr, align 8, !dbg !6453
  %insn44 = getelementptr inbounds %struct.occr, %struct.occr* %51, i32 0, i32 1, !dbg !6454
  store %struct.rtx_def* %50, %struct.rtx_def** %insn44, align 8, !dbg !6455
  br label %if.end53, !dbg !6456

if.else45:                                        ; preds = %land.lhs.true32, %if.end29
  %call46 = call i8* @gcse_alloc(i64 24), !dbg !6457
  %52 = bitcast i8* %call46 to %struct.occr*, !dbg !6457
  store %struct.occr* %52, %struct.occr** %cur_occr, align 8, !dbg !6459
  %53 = load i32, i32* @bytes_used, align 4, !dbg !6460
  %conv47 = sext i32 %53 to i64, !dbg !6460
  %add48 = add i64 %conv47, 24, !dbg !6460
  %conv49 = trunc i64 %add48 to i32, !dbg !6460
  store i32 %conv49, i32* @bytes_used, align 4, !dbg !6460
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6461
  %55 = load %struct.occr*, %struct.occr** %cur_occr, align 8, !dbg !6462
  %insn50 = getelementptr inbounds %struct.occr, %struct.occr* %55, i32 0, i32 1, !dbg !6463
  store %struct.rtx_def* %54, %struct.rtx_def** %insn50, align 8, !dbg !6464
  %56 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6465
  %avail_occr51 = getelementptr inbounds %struct.expr, %struct.expr* %56, i32 0, i32 4, !dbg !6466
  %57 = load %struct.occr*, %struct.occr** %avail_occr51, align 8, !dbg !6466
  %58 = load %struct.occr*, %struct.occr** %cur_occr, align 8, !dbg !6467
  %next = getelementptr inbounds %struct.occr, %struct.occr* %58, i32 0, i32 0, !dbg !6468
  store %struct.occr* %57, %struct.occr** %next, align 8, !dbg !6469
  %59 = load %struct.occr*, %struct.occr** %cur_occr, align 8, !dbg !6470
  %deleted_p = getelementptr inbounds %struct.occr, %struct.occr* %59, i32 0, i32 2, !dbg !6471
  store i8 0, i8* %deleted_p, align 8, !dbg !6472
  %60 = load %struct.occr*, %struct.occr** %cur_occr, align 8, !dbg !6473
  %61 = load %struct.expr*, %struct.expr** %cur_expr, align 8, !dbg !6474
  %avail_occr52 = getelementptr inbounds %struct.expr, %struct.expr* %61, i32 0, i32 4, !dbg !6475
  store %struct.occr* %60, %struct.occr** %avail_occr52, align 8, !dbg !6476
  br label %if.end53

if.end53:                                         ; preds = %if.else45, %if.then43
  ret void, !dbg !6477
}

declare dso_local %struct.rtx_def* @avoid_constant_pool_reference(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @oprs_unchanged_p(%struct.rtx_def* %x, %struct.rtx_def* %insn, i32 %avail_p) #0 !dbg !6478 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %avail_p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %info = alloca %struct.reg_avail_info*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6481, metadata !DIExpression()), !dbg !6482
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6483, metadata !DIExpression()), !dbg !6484
  store i32 %avail_p, i32* %avail_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %avail_p.addr, metadata !6485, metadata !DIExpression()), !dbg !6486
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6487, metadata !DIExpression()), !dbg !6488
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6489, metadata !DIExpression()), !dbg !6490
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6491, metadata !DIExpression()), !dbg !6492
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !6493, metadata !DIExpression()), !dbg !6494
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6495
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !6497
  br i1 %cmp, label %if.then, label %if.end, !dbg !6498

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !6499
  br label %return, !dbg !6499

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6500
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6500
  %bf.load = load i32, i32* %2, align 8, !dbg !6500
  %bf.clear = and i32 %bf.load, 65535, !dbg !6500
  store i32 %bf.clear, i32* %code, align 4, !dbg !6501
  %3 = load i32, i32* %code, align 4, !dbg !6502
  switch i32 %3, label %sw.default [
    i32 37, label %sw.bb
    i32 43, label %sw.bb19
    i32 74, label %sw.bb36
    i32 75, label %sw.bb36
    i32 76, label %sw.bb36
    i32 77, label %sw.bb36
    i32 78, label %sw.bb36
    i32 79, label %sw.bb36
    i32 36, label %sw.bb37
    i32 46, label %sw.bb37
    i32 35, label %sw.bb37
    i32 30, label %sw.bb37
    i32 32, label %sw.bb37
    i32 31, label %sw.bb37
    i32 33, label %sw.bb37
    i32 45, label %sw.bb37
    i32 44, label %sw.bb37
    i32 20, label %sw.bb37
    i32 21, label %sw.bb37
  ], !dbg !6503

sw.bb:                                            ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.reg_avail_info** %info, metadata !6504, metadata !DIExpression()), !dbg !6507
  %4 = load %struct.reg_avail_info*, %struct.reg_avail_info** @reg_avail_info, align 8, !dbg !6508
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6509
  %call = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !6509
  %idxprom = zext i32 %call to i64, !dbg !6508
  %arrayidx = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %4, i64 %idxprom, !dbg !6508
  store %struct.reg_avail_info* %arrayidx, %struct.reg_avail_info** %info, align 8, !dbg !6507
  %6 = load %struct.reg_avail_info*, %struct.reg_avail_info** %info, align 8, !dbg !6510
  %last_bb = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %6, i32 0, i32 0, !dbg !6512
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %last_bb, align 8, !dbg !6512
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !6513
  %cmp1 = icmp ne %struct.basic_block_def* %7, %8, !dbg !6514
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !6515

if.then2:                                         ; preds = %sw.bb
  store i32 1, i32* %retval, align 4, !dbg !6516
  br label %return, !dbg !6516

if.end3:                                          ; preds = %sw.bb
  %9 = load i32, i32* %avail_p.addr, align 4, !dbg !6517
  %tobool = icmp ne i32 %9, 0, !dbg !6517
  br i1 %tobool, label %if.then4, label %if.else, !dbg !6519

if.then4:                                         ; preds = %if.end3
  %10 = load %struct.reg_avail_info*, %struct.reg_avail_info** %info, align 8, !dbg !6520
  %last_set = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %10, i32 0, i32 2, !dbg !6521
  %11 = load i32, i32* %last_set, align 4, !dbg !6521
  %12 = load %struct.df*, %struct.df** @df, align 8, !dbg !6522
  %insns = getelementptr inbounds %struct.df, %struct.df* %12, i32 0, i32 10, !dbg !6522
  %13 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !6522
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6522
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6522
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6522
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6522
  %rt_int = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !6522
  %15 = load i32, i32* %rt_int, align 8, !dbg !6522
  %idxprom6 = sext i32 %15 to i64, !dbg !6522
  %arrayidx7 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %13, i64 %idxprom6, !dbg !6522
  %16 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx7, align 8, !dbg !6522
  %luid = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %16, i32 0, i32 5, !dbg !6522
  %17 = load i32, i32* %luid, align 8, !dbg !6522
  %cmp8 = icmp slt i32 %11, %17, !dbg !6523
  %conv = zext i1 %cmp8 to i32, !dbg !6523
  store i32 %conv, i32* %retval, align 4, !dbg !6524
  br label %return, !dbg !6524

if.else:                                          ; preds = %if.end3
  %18 = load %struct.reg_avail_info*, %struct.reg_avail_info** %info, align 8, !dbg !6525
  %first_set = getelementptr inbounds %struct.reg_avail_info, %struct.reg_avail_info* %18, i32 0, i32 1, !dbg !6526
  %19 = load i32, i32* %first_set, align 8, !dbg !6526
  %20 = load %struct.df*, %struct.df** @df, align 8, !dbg !6527
  %insns9 = getelementptr inbounds %struct.df, %struct.df* %20, i32 0, i32 10, !dbg !6527
  %21 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns9, align 8, !dbg !6527
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6527
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6527
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !6527
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 0, !dbg !6527
  %rt_int13 = bitcast %union.rtunion_def* %arrayidx12 to i32*, !dbg !6527
  %23 = load i32, i32* %rt_int13, align 8, !dbg !6527
  %idxprom14 = sext i32 %23 to i64, !dbg !6527
  %arrayidx15 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %21, i64 %idxprom14, !dbg !6527
  %24 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx15, align 8, !dbg !6527
  %luid16 = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %24, i32 0, i32 5, !dbg !6527
  %25 = load i32, i32* %luid16, align 8, !dbg !6527
  %cmp17 = icmp sge i32 %19, %25, !dbg !6528
  %conv18 = zext i1 %cmp17 to i32, !dbg !6528
  store i32 %conv18, i32* %retval, align 4, !dbg !6529
  br label %return, !dbg !6529

sw.bb19:                                          ; preds = %if.end
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** @current_bb, align 8, !dbg !6530
  %27 = load %struct.df*, %struct.df** @df, align 8, !dbg !6532
  %insns20 = getelementptr inbounds %struct.df, %struct.df* %27, i32 0, i32 10, !dbg !6532
  %28 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns20, align 8, !dbg !6532
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6532
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !6532
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !6532
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 0, !dbg !6532
  %rt_int24 = bitcast %union.rtunion_def* %arrayidx23 to i32*, !dbg !6532
  %30 = load i32, i32* %rt_int24, align 8, !dbg !6532
  %idxprom25 = sext i32 %30 to i64, !dbg !6532
  %arrayidx26 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %28, i64 %idxprom25, !dbg !6532
  %31 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx26, align 8, !dbg !6532
  %luid27 = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %31, i32 0, i32 5, !dbg !6532
  %32 = load i32, i32* %luid27, align 8, !dbg !6532
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6533
  %34 = load i32, i32* %avail_p.addr, align 4, !dbg !6534
  %call28 = call i32 @load_killed_in_block_p(%struct.basic_block_def* %26, i32 %32, %struct.rtx_def* %33, i32 %34), !dbg !6535
  %tobool29 = icmp ne i32 %call28, 0, !dbg !6535
  br i1 %tobool29, label %if.then30, label %if.else31, !dbg !6536

if.then30:                                        ; preds = %sw.bb19
  store i32 0, i32* %retval, align 4, !dbg !6537
  br label %return, !dbg !6537

if.else31:                                        ; preds = %sw.bb19
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6538
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6538
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !6538
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !6538
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !6538
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6538
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6539
  %38 = load i32, i32* %avail_p.addr, align 4, !dbg !6540
  %call35 = call i32 @oprs_unchanged_p(%struct.rtx_def* %36, %struct.rtx_def* %37, i32 %38), !dbg !6541
  store i32 %call35, i32* %retval, align 4, !dbg !6542
  br label %return, !dbg !6542

sw.bb36:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  store i32 0, i32* %retval, align 4, !dbg !6543
  br label %return, !dbg !6543

sw.bb37:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  store i32 1, i32* %retval, align 4, !dbg !6544
  br label %return, !dbg !6544

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !6545

sw.epilog:                                        ; preds = %sw.default
  %39 = load i32, i32* %code, align 4, !dbg !6546
  %idxprom38 = sext i32 %39 to i64, !dbg !6546
  %arrayidx39 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom38, !dbg !6546
  %40 = load i8, i8* %arrayidx39, align 1, !dbg !6546
  %conv40 = zext i8 %40 to i32, !dbg !6546
  %sub = sub nsw i32 %conv40, 1, !dbg !6548
  store i32 %sub, i32* %i, align 4, !dbg !6549
  %41 = load i32, i32* %code, align 4, !dbg !6550
  %idxprom41 = sext i32 %41 to i64, !dbg !6550
  %arrayidx42 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom41, !dbg !6550
  %42 = load i8*, i8** %arrayidx42, align 8, !dbg !6550
  store i8* %42, i8** %fmt, align 8, !dbg !6551
  br label %for.cond, !dbg !6552

for.cond:                                         ; preds = %for.inc99, %sw.epilog
  %43 = load i32, i32* %i, align 4, !dbg !6553
  %cmp43 = icmp sge i32 %43, 0, !dbg !6555
  br i1 %cmp43, label %for.body, label %for.end100, !dbg !6556

for.body:                                         ; preds = %for.cond
  %44 = load i8*, i8** %fmt, align 8, !dbg !6557
  %45 = load i32, i32* %i, align 4, !dbg !6560
  %idxprom45 = sext i32 %45 to i64, !dbg !6557
  %arrayidx46 = getelementptr inbounds i8, i8* %44, i64 %idxprom45, !dbg !6557
  %46 = load i8, i8* %arrayidx46, align 1, !dbg !6557
  %conv47 = sext i8 %46 to i32, !dbg !6557
  %cmp48 = icmp eq i32 %conv47, 101, !dbg !6561
  br i1 %cmp48, label %if.then50, label %if.else71, !dbg !6562

if.then50:                                        ; preds = %for.body
  %47 = load i32, i32* %i, align 4, !dbg !6563
  %cmp51 = icmp eq i32 %47, 0, !dbg !6566
  br i1 %cmp51, label %if.then53, label %if.else60, !dbg !6567

if.then53:                                        ; preds = %if.then50
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6568
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6568
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !6568
  %49 = load i32, i32* %i, align 4, !dbg !6568
  %idxprom56 = sext i32 %49 to i64, !dbg !6568
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 %idxprom56, !dbg !6568
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !6568
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !6568
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6569
  %52 = load i32, i32* %avail_p.addr, align 4, !dbg !6570
  %call59 = call i32 @oprs_unchanged_p(%struct.rtx_def* %50, %struct.rtx_def* %51, i32 %52), !dbg !6571
  store i32 %call59, i32* %retval, align 4, !dbg !6572
  br label %return, !dbg !6572

if.else60:                                        ; preds = %if.then50
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6573
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !6573
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !6573
  %54 = load i32, i32* %i, align 4, !dbg !6573
  %idxprom63 = sext i32 %54 to i64, !dbg !6573
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 %idxprom63, !dbg !6573
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !6573
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !6573
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6575
  %57 = load i32, i32* %avail_p.addr, align 4, !dbg !6576
  %call66 = call i32 @oprs_unchanged_p(%struct.rtx_def* %55, %struct.rtx_def* %56, i32 %57), !dbg !6577
  %tobool67 = icmp ne i32 %call66, 0, !dbg !6577
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !6578

if.then68:                                        ; preds = %if.else60
  store i32 0, i32* %retval, align 4, !dbg !6579
  br label %return, !dbg !6579

if.end69:                                         ; preds = %if.else60
  br label %if.end70

if.end70:                                         ; preds = %if.end69
  br label %if.end98, !dbg !6580

if.else71:                                        ; preds = %for.body
  %58 = load i8*, i8** %fmt, align 8, !dbg !6581
  %59 = load i32, i32* %i, align 4, !dbg !6583
  %idxprom72 = sext i32 %59 to i64, !dbg !6581
  %arrayidx73 = getelementptr inbounds i8, i8* %58, i64 %idxprom72, !dbg !6581
  %60 = load i8, i8* %arrayidx73, align 1, !dbg !6581
  %conv74 = sext i8 %60 to i32, !dbg !6581
  %cmp75 = icmp eq i32 %conv74, 69, !dbg !6584
  br i1 %cmp75, label %if.then77, label %if.end97, !dbg !6585

if.then77:                                        ; preds = %if.else71
  store i32 0, i32* %j, align 4, !dbg !6586
  br label %for.cond78, !dbg !6588

for.cond78:                                       ; preds = %for.inc, %if.then77
  %61 = load i32, i32* %j, align 4, !dbg !6589
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6591
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !6591
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !6591
  %63 = load i32, i32* %i, align 4, !dbg !6591
  %idxprom81 = sext i32 %63 to i64, !dbg !6591
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 %idxprom81, !dbg !6591
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtvec_def**, !dbg !6591
  %64 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6591
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %64, i32 0, i32 0, !dbg !6591
  %65 = load i32, i32* %num_elem, align 8, !dbg !6591
  %cmp83 = icmp slt i32 %61, %65, !dbg !6592
  br i1 %cmp83, label %for.body85, label %for.end, !dbg !6593

for.body85:                                       ; preds = %for.cond78
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6594
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !6594
  %fld87 = bitcast %union.u* %u86 to [1 x %union.rtunion_def]*, !dbg !6594
  %67 = load i32, i32* %i, align 4, !dbg !6594
  %idxprom88 = sext i32 %67 to i64, !dbg !6594
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i64 0, i64 %idxprom88, !dbg !6594
  %rt_rtvec90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtvec_def**, !dbg !6594
  %68 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec90, align 8, !dbg !6594
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %68, i32 0, i32 1, !dbg !6594
  %69 = load i32, i32* %j, align 4, !dbg !6594
  %idxprom91 = sext i32 %69 to i64, !dbg !6594
  %arrayidx92 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom91, !dbg !6594
  %70 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx92, align 8, !dbg !6594
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6596
  %72 = load i32, i32* %avail_p.addr, align 4, !dbg !6597
  %call93 = call i32 @oprs_unchanged_p(%struct.rtx_def* %70, %struct.rtx_def* %71, i32 %72), !dbg !6598
  %tobool94 = icmp ne i32 %call93, 0, !dbg !6598
  br i1 %tobool94, label %if.end96, label %if.then95, !dbg !6599

if.then95:                                        ; preds = %for.body85
  store i32 0, i32* %retval, align 4, !dbg !6600
  br label %return, !dbg !6600

if.end96:                                         ; preds = %for.body85
  br label %for.inc, !dbg !6601

for.inc:                                          ; preds = %if.end96
  %73 = load i32, i32* %j, align 4, !dbg !6602
  %inc = add nsw i32 %73, 1, !dbg !6602
  store i32 %inc, i32* %j, align 4, !dbg !6602
  br label %for.cond78, !dbg !6603, !llvm.loop !6604

for.end:                                          ; preds = %for.cond78
  br label %if.end97, !dbg !6605

if.end97:                                         ; preds = %for.end, %if.else71
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end70
  br label %for.inc99, !dbg !6606

for.inc99:                                        ; preds = %if.end98
  %74 = load i32, i32* %i, align 4, !dbg !6607
  %dec = add nsw i32 %74, -1, !dbg !6607
  store i32 %dec, i32* %i, align 4, !dbg !6607
  br label %for.cond, !dbg !6608, !llvm.loop !6609

for.end100:                                       ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !6611
  br label %return, !dbg !6611

return:                                           ; preds = %for.end100, %if.then95, %if.then68, %if.then53, %sw.bb37, %sw.bb36, %if.else31, %if.then30, %if.else, %if.then4, %if.then2, %if.then
  %75 = load i32, i32* %retval, align 4, !dbg !6612
  ret i32 %75, !dbg !6612
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @load_killed_in_block_p(%struct.basic_block_def* %bb, i32 %uid_limit, %struct.rtx_def* %x, i32 %avail_p) #0 !dbg !6613 {
entry:
  %retval = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %uid_limit.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %avail_p.addr = alloca i32, align 4
  %list_entry = alloca %struct.rtx_def*, align 8
  %setter = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6616, metadata !DIExpression()), !dbg !6617
  store i32 %uid_limit, i32* %uid_limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid_limit.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6620, metadata !DIExpression()), !dbg !6621
  store i32 %avail_p, i32* %avail_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %avail_p.addr, metadata !6622, metadata !DIExpression()), !dbg !6623
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %list_entry, metadata !6624, metadata !DIExpression()), !dbg !6625
  %0 = load %struct.rtx_def**, %struct.rtx_def*** @modify_mem_list, align 8, !dbg !6626
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6627
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 9, !dbg !6628
  %2 = load i32, i32* %index, align 8, !dbg !6628
  %idxprom = sext i32 %2 to i64, !dbg !6626
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 %idxprom, !dbg !6626
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !6626
  store %struct.rtx_def* %3, %struct.rtx_def** %list_entry, align 8, !dbg !6625
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6629
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6629
  %bf.load = load i32, i32* %5, align 8, !dbg !6629
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !6629
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6629
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6629
  br i1 %tobool, label %if.then, label %if.end, !dbg !6631

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6632
  br label %return, !dbg !6632

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !6633

while.cond:                                       ; preds = %if.end45, %if.then24, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !6634
  %tobool1 = icmp ne %struct.rtx_def* %6, null, !dbg !6633
  br i1 %tobool1, label %while.body, label %while.end, !dbg !6633

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setter, metadata !6635, metadata !DIExpression()), !dbg !6637
  %7 = load i32, i32* %avail_p.addr, align 4, !dbg !6638
  %tobool2 = icmp ne i32 %7, 0, !dbg !6638
  br i1 %tobool2, label %land.lhs.true, label %lor.lhs.false, !dbg !6640

land.lhs.true:                                    ; preds = %while.body
  %8 = load %struct.df*, %struct.df** @df, align 8, !dbg !6641
  %insns = getelementptr inbounds %struct.df, %struct.df* %8, i32 0, i32 10, !dbg !6641
  %9 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !6641
  %10 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !6641
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6641
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6641
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6641
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !6641
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6641
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !6641
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !6641
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 0, !dbg !6641
  %rt_int = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !6641
  %12 = load i32, i32* %rt_int, align 8, !dbg !6641
  %idxprom7 = sext i32 %12 to i64, !dbg !6641
  %arrayidx8 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %9, i64 %idxprom7, !dbg !6641
  %13 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx8, align 8, !dbg !6641
  %luid = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %13, i32 0, i32 5, !dbg !6641
  %14 = load i32, i32* %luid, align 8, !dbg !6641
  %15 = load i32, i32* %uid_limit.addr, align 4, !dbg !6642
  %cmp = icmp slt i32 %14, %15, !dbg !6643
  br i1 %cmp, label %if.then24, label %lor.lhs.false, !dbg !6644

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %16 = load i32, i32* %avail_p.addr, align 4, !dbg !6645
  %tobool9 = icmp ne i32 %16, 0, !dbg !6645
  br i1 %tobool9, label %if.end29, label %land.lhs.true10, !dbg !6646

land.lhs.true10:                                  ; preds = %lor.lhs.false
  %17 = load %struct.df*, %struct.df** @df, align 8, !dbg !6647
  %insns11 = getelementptr inbounds %struct.df, %struct.df* %17, i32 0, i32 10, !dbg !6647
  %18 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns11, align 8, !dbg !6647
  %19 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !6647
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6647
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !6647
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 0, !dbg !6647
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !6647
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !6647
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !6647
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !6647
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 0, !dbg !6647
  %rt_int19 = bitcast %union.rtunion_def* %arrayidx18 to i32*, !dbg !6647
  %21 = load i32, i32* %rt_int19, align 8, !dbg !6647
  %idxprom20 = sext i32 %21 to i64, !dbg !6647
  %arrayidx21 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %18, i64 %idxprom20, !dbg !6647
  %22 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx21, align 8, !dbg !6647
  %luid22 = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %22, i32 0, i32 5, !dbg !6647
  %23 = load i32, i32* %luid22, align 8, !dbg !6647
  %24 = load i32, i32* %uid_limit.addr, align 4, !dbg !6648
  %cmp23 = icmp sgt i32 %23, %24, !dbg !6649
  br i1 %cmp23, label %if.then24, label %if.end29, !dbg !6650

if.then24:                                        ; preds = %land.lhs.true10, %land.lhs.true
  %25 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !6651
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6651
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !6651
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !6651
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !6651
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !6651
  store %struct.rtx_def* %26, %struct.rtx_def** %list_entry, align 8, !dbg !6653
  br label %while.cond, !dbg !6654, !llvm.loop !6655

if.end29:                                         ; preds = %land.lhs.true10, %lor.lhs.false
  %27 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !6657
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !6657
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !6657
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 0, !dbg !6657
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !6657
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !6657
  store %struct.rtx_def* %28, %struct.rtx_def** %setter, align 8, !dbg !6658
  %29 = load %struct.rtx_def*, %struct.rtx_def** %setter, align 8, !dbg !6659
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !6659
  %bf.load34 = load i32, i32* %30, align 8, !dbg !6659
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !6659
  %cmp36 = icmp eq i32 %bf.clear35, 10, !dbg !6659
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !6661

if.then37:                                        ; preds = %if.end29
  store i32 1, i32* %retval, align 4, !dbg !6662
  br label %return, !dbg !6662

if.end38:                                         ; preds = %if.end29
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6663
  store %struct.rtx_def* %31, %struct.rtx_def** @gcse_mem_operand, align 8, !dbg !6664
  store i32 0, i32* @gcse_mems_conflict_p, align 4, !dbg !6665
  %32 = load %struct.rtx_def*, %struct.rtx_def** %setter, align 8, !dbg !6666
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !6666
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !6666
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 5, !dbg !6666
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !6666
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !6666
  call void @note_stores(%struct.rtx_def* %33, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @mems_conflict_for_gcse_p, i8* null), !dbg !6667
  %34 = load i32, i32* @gcse_mems_conflict_p, align 4, !dbg !6668
  %tobool43 = icmp ne i32 %34, 0, !dbg !6668
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !6670

if.then44:                                        ; preds = %if.end38
  store i32 1, i32* %retval, align 4, !dbg !6671
  br label %return, !dbg !6671

if.end45:                                         ; preds = %if.end38
  %35 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !6672
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6672
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !6672
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 1, !dbg !6672
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !6672
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !6672
  store %struct.rtx_def* %36, %struct.rtx_def** %list_entry, align 8, !dbg !6673
  br label %while.cond, !dbg !6633, !llvm.loop !6655

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !6674
  br label %return, !dbg !6674

return:                                           ; preds = %while.end, %if.then44, %if.then37, %if.then
  %37 = load i32, i32* %retval, align 4, !dbg !6675
  ret i32 %37, !dbg !6675
}

; Function Attrs: noinline nounwind uwtable
define internal void @mems_conflict_for_gcse_p(%struct.rtx_def* %dest, %struct.rtx_def* %setter, i8* %data) #0 !dbg !6676 {
entry:
  %dest.addr = alloca %struct.rtx_def*, align 8
  %setter.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !6677, metadata !DIExpression()), !dbg !6678
  store %struct.rtx_def* %setter, %struct.rtx_def** %setter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setter.addr, metadata !6679, metadata !DIExpression()), !dbg !6680
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6681, metadata !DIExpression()), !dbg !6682
  br label %while.cond, !dbg !6683

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6684
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6684
  %bf.load = load i32, i32* %1, align 8, !dbg !6684
  %bf.clear = and i32 %bf.load, 65535, !dbg !6684
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !6685
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !6686

lor.lhs.false:                                    ; preds = %while.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6687
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6687
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6687
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6687
  %cmp3 = icmp eq i32 %bf.clear2, 120, !dbg !6688
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !6689

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6690
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6690
  %bf.load4 = load i32, i32* %5, align 8, !dbg !6690
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !6690
  %cmp6 = icmp eq i32 %bf.clear5, 40, !dbg !6691
  br label %lor.end, !dbg !6689

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp6, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end, !dbg !6683

while.body:                                       ; preds = %lor.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6692
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !6692
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6692
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6692
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6692
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6692
  store %struct.rtx_def* %8, %struct.rtx_def** %dest.addr, align 8, !dbg !6693
  br label %while.cond, !dbg !6683, !llvm.loop !6694

while.end:                                        ; preds = %lor.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6695
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6695
  %bf.load7 = load i32, i32* %10, align 8, !dbg !6695
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6695
  %cmp9 = icmp eq i32 %bf.clear8, 43, !dbg !6695
  br i1 %cmp9, label %if.end, label %if.then, !dbg !6697

if.then:                                          ; preds = %while.end
  br label %if.end22, !dbg !6698

if.end:                                           ; preds = %while.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6699
  %12 = load %struct.rtx_def*, %struct.rtx_def** @gcse_mem_operand, align 8, !dbg !6701
  %call = call i32 @expr_equiv_p(%struct.rtx_def* %11, %struct.rtx_def* %12), !dbg !6702
  %tobool = icmp ne i32 %call, 0, !dbg !6702
  br i1 %tobool, label %land.lhs.true, label %if.end16, !dbg !6703

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct.ls_expr*, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !6704
  %cmp10 = icmp ne %struct.ls_expr* %13, null, !dbg !6705
  br i1 %cmp10, label %if.then11, label %if.end16, !dbg !6706

if.then11:                                        ; preds = %land.lhs.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6707
  %call12 = call %struct.ls_expr* @find_rtx_in_ldst(%struct.rtx_def* %14), !dbg !6710
  %tobool13 = icmp ne %struct.ls_expr* %call12, null, !dbg !6710
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !6711

if.then14:                                        ; preds = %if.then11
  store i32 1, i32* @gcse_mems_conflict_p, align 4, !dbg !6712
  br label %if.end15, !dbg !6713

if.end15:                                         ; preds = %if.then14, %if.then11
  br label %if.end22, !dbg !6714

if.end16:                                         ; preds = %land.lhs.true, %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6715
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6717
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !6717
  %bf.load17 = load i32, i32* %17, align 8, !dbg !6717
  %bf.lshr = lshr i32 %bf.load17, 16, !dbg !6717
  %bf.clear18 = and i32 %bf.lshr, 255, !dbg !6717
  %18 = load %struct.rtx_def*, %struct.rtx_def** @gcse_mem_operand, align 8, !dbg !6718
  %call19 = call i32 @true_dependence(%struct.rtx_def* %15, i32 %bf.clear18, %struct.rtx_def* %18, i8 (%struct.rtx_def*, i8)* @rtx_addr_varies_p), !dbg !6719
  %tobool20 = icmp ne i32 %call19, 0, !dbg !6719
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !6720

if.then21:                                        ; preds = %if.end16
  store i32 1, i32* @gcse_mems_conflict_p, align 4, !dbg !6721
  br label %if.end22, !dbg !6722

if.end22:                                         ; preds = %if.then, %if.end15, %if.then21, %if.end16
  ret void, !dbg !6723
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @expr_equiv_p(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !6724 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6725, metadata !DIExpression()), !dbg !6726
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !6727, metadata !DIExpression()), !dbg !6728
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6729
  %1 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6730
  %call = call i32 @exp_equiv_p(%struct.rtx_def* %0, %struct.rtx_def* %1, i32 0, i8 zeroext 1), !dbg !6731
  ret i32 %call, !dbg !6732
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ls_expr* @find_rtx_in_ldst(%struct.rtx_def* %x) #0 !dbg !6733 {
entry:
  %retval = alloca %struct.ls_expr*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.ls_expr, align 8
  %slot = alloca i8**, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6736, metadata !DIExpression()), !dbg !6737
  call void @llvm.dbg.declare(metadata %struct.ls_expr* %e, metadata !6738, metadata !DIExpression()), !dbg !6739
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6740, metadata !DIExpression()), !dbg !6741
  %0 = load %struct.htab*, %struct.htab** @pre_ldst_table, align 8, !dbg !6742
  %tobool = icmp ne %struct.htab* %0, null, !dbg !6742
  br i1 %tobool, label %if.end, label %if.then, !dbg !6744

if.then:                                          ; preds = %entry
  store %struct.ls_expr* null, %struct.ls_expr** %retval, align 8, !dbg !6745
  br label %return, !dbg !6745

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6746
  %pattern = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %e, i32 0, i32 1, !dbg !6747
  store %struct.rtx_def* %1, %struct.rtx_def** %pattern, align 8, !dbg !6748
  %2 = load %struct.htab*, %struct.htab** @pre_ldst_table, align 8, !dbg !6749
  %3 = bitcast %struct.ls_expr* %e to i8*, !dbg !6750
  %call = call i8** @htab_find_slot(%struct.htab* %2, i8* %3, i32 0), !dbg !6751
  store i8** %call, i8*** %slot, align 8, !dbg !6752
  %4 = load i8**, i8*** %slot, align 8, !dbg !6753
  %tobool1 = icmp ne i8** %4, null, !dbg !6753
  br i1 %tobool1, label %lor.lhs.false, label %if.then3, !dbg !6755

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i8**, i8*** %slot, align 8, !dbg !6756
  %6 = load i8*, i8** %5, align 8, !dbg !6757
  %7 = bitcast i8* %6 to %struct.ls_expr*, !dbg !6758
  %invalid = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %7, i32 0, i32 6, !dbg !6759
  %8 = load i32, i32* %invalid, align 8, !dbg !6759
  %tobool2 = icmp ne i32 %8, 0, !dbg !6760
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !6761

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  store %struct.ls_expr* null, %struct.ls_expr** %retval, align 8, !dbg !6762
  br label %return, !dbg !6762

if.end4:                                          ; preds = %lor.lhs.false
  %9 = load i8**, i8*** %slot, align 8, !dbg !6763
  %10 = load i8*, i8** %9, align 8, !dbg !6764
  %11 = bitcast i8* %10 to %struct.ls_expr*, !dbg !6765
  store %struct.ls_expr* %11, %struct.ls_expr** %retval, align 8, !dbg !6766
  br label %return, !dbg !6766

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %12 = load %struct.ls_expr*, %struct.ls_expr** %retval, align 8, !dbg !6767
  ret %struct.ls_expr* %12, !dbg !6767
}

declare dso_local i32 @true_dependence(%struct.rtx_def*, i32, %struct.rtx_def*, i8 (%struct.rtx_def*, i8)*) #2

declare dso_local zeroext i8 @rtx_addr_varies_p(%struct.rtx_def*, i8 zeroext) #2

declare dso_local i32 @exp_equiv_p(%struct.rtx_def*, %struct.rtx_def*, i32, i8 zeroext) #2

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_expr(%struct.rtx_def* %x, i32 %mode, i32* %do_not_record_p, i32 %hash_table_size) #0 !dbg !6768 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %do_not_record_p.addr = alloca i32*, align 8
  %hash_table_size.addr = alloca i32, align 4
  %hash = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6772, metadata !DIExpression()), !dbg !6773
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6774, metadata !DIExpression()), !dbg !6775
  store i32* %do_not_record_p, i32** %do_not_record_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %do_not_record_p.addr, metadata !6776, metadata !DIExpression()), !dbg !6777
  store i32 %hash_table_size, i32* %hash_table_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %hash_table_size.addr, metadata !6778, metadata !DIExpression()), !dbg !6779
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !6780, metadata !DIExpression()), !dbg !6781
  %0 = load i32*, i32** %do_not_record_p.addr, align 8, !dbg !6782
  store i32 0, i32* %0, align 4, !dbg !6783
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6784
  %2 = load i32, i32* %mode.addr, align 4, !dbg !6785
  %3 = load i32*, i32** %do_not_record_p.addr, align 8, !dbg !6786
  %call = call i32 @hash_rtx(%struct.rtx_def* %1, i32 %2, i32* %3, i32* null, i8 zeroext 0), !dbg !6787
  store i32 %call, i32* %hash, align 4, !dbg !6788
  %4 = load i32, i32* %hash, align 4, !dbg !6789
  %5 = load i32, i32* %hash_table_size.addr, align 4, !dbg !6790
  %rem = urem i32 %4, %5, !dbg !6791
  ret i32 %rem, !dbg !6792
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @gcse_alloc(i64 %size) #0 !dbg !6793 {
entry:
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !6796, metadata !DIExpression()), !dbg !6797
  %0 = load i64, i64* %size.addr, align 8, !dbg !6798
  %1 = load i32, i32* @bytes_used, align 4, !dbg !6799
  %conv = sext i32 %1 to i64, !dbg !6799
  %add = add i64 %conv, %0, !dbg !6799
  %conv1 = trunc i64 %add to i32, !dbg !6799
  store i32 %conv1, i32* @bytes_used, align 4, !dbg !6799
  %2 = load i64, i64* %size.addr, align 8, !dbg !6800
  store i64 %2, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !6800
  %3 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 4), align 8, !dbg !6800
  %4 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !6800
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !6800
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6800
  %5 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !6800
  %cmp = icmp slt i64 %sub.ptr.sub, %5, !dbg !6800
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6800

cond.true:                                        ; preds = %entry
  %6 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !6800
  %conv3 = trunc i64 %6 to i32, !dbg !6800
  call void @_obstack_newchunk(%struct.obstack* @gcse_obstack, i32 %conv3), !dbg !6800
  br label %cond.end, !dbg !6800

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6800

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6800
  %7 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !6800
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %7, !dbg !6800
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  %10 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 2), align 8, !dbg !6800
  %cmp4 = icmp eq i8* %9, %10, !dbg !6800
  br i1 %cmp4, label %cond.true6, label %cond.false7, !dbg !6800

cond.true6:                                       ; preds = %cond.end
  %bf.load = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 10), align 8, !dbg !6800
  %bf.clear = and i8 %bf.load, -3, !dbg !6800
  %bf.set = or i8 %bf.clear, 2, !dbg !6800
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 10), align 8, !dbg !6800
  br label %cond.end8, !dbg !6800

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !6800

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !6800
  %11 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 2), align 8, !dbg !6800
  %sub.ptr.lhs.cast10 = ptrtoint i8* %11 to i64, !dbg !6800
  %sub.ptr.sub11 = sub i64 %sub.ptr.lhs.cast10, 0, !dbg !6800
  store i64 %sub.ptr.sub11, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !6800
  %12 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  %sub.ptr.lhs.cast12 = ptrtoint i8* %12 to i64, !dbg !6800
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast12, 0, !dbg !6800
  %13 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 6), align 8, !dbg !6800
  %conv14 = sext i32 %13 to i64, !dbg !6800
  %add15 = add nsw i64 %sub.ptr.sub13, %conv14, !dbg !6800
  %14 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 6), align 8, !dbg !6800
  %neg = xor i32 %14, -1, !dbg !6800
  %conv16 = sext i32 %neg to i64, !dbg !6800
  %and = and i64 %add15, %conv16, !dbg !6800
  %15 = inttoptr i64 %and to i8*, !dbg !6800
  store i8* %15, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  %16 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  %17 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !6800
  %18 = bitcast %struct._obstack_chunk* %17 to i8*, !dbg !6800
  %sub.ptr.lhs.cast17 = ptrtoint i8* %16 to i64, !dbg !6800
  %sub.ptr.rhs.cast18 = ptrtoint i8* %18 to i64, !dbg !6800
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18, !dbg !6800
  %19 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 4), align 8, !dbg !6800
  %20 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !6800
  %21 = bitcast %struct._obstack_chunk* %20 to i8*, !dbg !6800
  %sub.ptr.lhs.cast20 = ptrtoint i8* %19 to i64, !dbg !6800
  %sub.ptr.rhs.cast21 = ptrtoint i8* %21 to i64, !dbg !6800
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21, !dbg !6800
  %cmp23 = icmp sgt i64 %sub.ptr.sub19, %sub.ptr.sub22, !dbg !6800
  br i1 %cmp23, label %cond.true25, label %cond.false26, !dbg !6800

cond.true25:                                      ; preds = %cond.end8
  %22 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 4), align 8, !dbg !6800
  store i8* %22, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  br label %cond.end27, !dbg !6800

cond.false26:                                     ; preds = %cond.end8
  br label %cond.end27, !dbg !6800

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i8* [ %22, %cond.true25 ], [ null, %cond.false26 ], !dbg !6800
  %23 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !6800
  store i8* %23, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 2), align 8, !dbg !6800
  %24 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !6800
  %25 = inttoptr i64 %24 to i8*, !dbg !6800
  ret i8* %25, !dbg !6801
}

declare dso_local i32 @hash_rtx(%struct.rtx_def*, i32, i32*, i32*, i8 zeroext) #2

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_set(i32 %regno, i32 %hash_table_size) #0 !dbg !6802 {
entry:
  %regno.addr = alloca i32, align 4
  %hash_table_size.addr = alloca i32, align 4
  %hash = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !6805, metadata !DIExpression()), !dbg !6806
  store i32 %hash_table_size, i32* %hash_table_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %hash_table_size.addr, metadata !6807, metadata !DIExpression()), !dbg !6808
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !6809, metadata !DIExpression()), !dbg !6810
  %0 = load i32, i32* %regno.addr, align 4, !dbg !6811
  store i32 %0, i32* %hash, align 4, !dbg !6812
  %1 = load i32, i32* %hash, align 4, !dbg !6813
  %2 = load i32, i32* %hash_table_size.addr, align 4, !dbg !6814
  %rem = urem i32 %1, %2, !dbg !6815
  ret i32 %rem, !dbg !6816
}

; Function Attrs: noinline nounwind uwtable
define internal void @hash_scan_clobber(%struct.rtx_def* %x, %struct.rtx_def* %insn, %struct.hash_table_d* %table) #0 !dbg !6817 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %table.addr = alloca %struct.hash_table_d*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6818, metadata !DIExpression()), !dbg !6819
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6820, metadata !DIExpression()), !dbg !6821
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !6822, metadata !DIExpression()), !dbg !6823
  ret void, !dbg !6824
}

declare dso_local %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_local_properties(%struct.simple_bitmap_def** %transp, %struct.simple_bitmap_def** %comp, %struct.simple_bitmap_def** %antloc, %struct.hash_table_d* %table) #0 !dbg !6825 {
entry:
  %transp.addr = alloca %struct.simple_bitmap_def**, align 8
  %comp.addr = alloca %struct.simple_bitmap_def**, align 8
  %antloc.addr = alloca %struct.simple_bitmap_def**, align 8
  %table.addr = alloca %struct.hash_table_d*, align 8
  %i = alloca i32, align 4
  %expr = alloca %struct.expr*, align 8
  %indx = alloca i32, align 4
  %occr = alloca %struct.occr*, align 8
  store %struct.simple_bitmap_def** %transp, %struct.simple_bitmap_def*** %transp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def*** %transp.addr, metadata !6828, metadata !DIExpression()), !dbg !6829
  store %struct.simple_bitmap_def** %comp, %struct.simple_bitmap_def*** %comp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def*** %comp.addr, metadata !6830, metadata !DIExpression()), !dbg !6831
  store %struct.simple_bitmap_def** %antloc, %struct.simple_bitmap_def*** %antloc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def*** %antloc.addr, metadata !6832, metadata !DIExpression()), !dbg !6833
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !6834, metadata !DIExpression()), !dbg !6835
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6836, metadata !DIExpression()), !dbg !6837
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %transp.addr, align 8, !dbg !6838
  %tobool = icmp ne %struct.simple_bitmap_def** %0, null, !dbg !6838
  br i1 %tobool, label %if.then, label %if.end6, !dbg !6840

if.then:                                          ; preds = %entry
  %1 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6841
  %set_p = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %1, i32 0, i32 3, !dbg !6844
  %2 = load i32, i32* %set_p, align 8, !dbg !6844
  %tobool1 = icmp ne i32 %2, 0, !dbg !6841
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !6845

if.then2:                                         ; preds = %if.then
  %3 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %transp.addr, align 8, !dbg !6846
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6847
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !6847
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6847
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6847
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !6847
  %6 = load i32, i32* %x_last_basic_block, align 8, !dbg !6847
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %3, i32 %6), !dbg !6848
  br label %if.end, !dbg !6848

if.else:                                          ; preds = %if.then
  %7 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %transp.addr, align 8, !dbg !6849
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6850
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !6850
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !6850
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !6850
  %x_last_basic_block5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 5, !dbg !6850
  %10 = load i32, i32* %x_last_basic_block5, align 8, !dbg !6850
  call void @sbitmap_vector_ones(%struct.simple_bitmap_def** %7, i32 %10), !dbg !6851
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end6, !dbg !6852

if.end6:                                          ; preds = %if.end, %entry
  %11 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %comp.addr, align 8, !dbg !6853
  %tobool7 = icmp ne %struct.simple_bitmap_def** %11, null, !dbg !6853
  br i1 %tobool7, label %if.then8, label %if.end12, !dbg !6855

if.then8:                                         ; preds = %if.end6
  %12 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %comp.addr, align 8, !dbg !6856
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6857
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !6857
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !6857
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !6857
  %x_last_basic_block11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 5, !dbg !6857
  %15 = load i32, i32* %x_last_basic_block11, align 8, !dbg !6857
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %12, i32 %15), !dbg !6858
  br label %if.end12, !dbg !6858

if.end12:                                         ; preds = %if.then8, %if.end6
  %16 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %antloc.addr, align 8, !dbg !6859
  %tobool13 = icmp ne %struct.simple_bitmap_def** %16, null, !dbg !6859
  br i1 %tobool13, label %if.then14, label %if.end18, !dbg !6861

if.then14:                                        ; preds = %if.end12
  %17 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %antloc.addr, align 8, !dbg !6862
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6863
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !6863
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 1, !dbg !6863
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !6863
  %x_last_basic_block17 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 5, !dbg !6863
  %20 = load i32, i32* %x_last_basic_block17, align 8, !dbg !6863
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %17, i32 %20), !dbg !6864
  br label %if.end18, !dbg !6864

if.end18:                                         ; preds = %if.then14, %if.end12
  store i32 0, i32* %i, align 4, !dbg !6865
  br label %for.cond, !dbg !6867

for.cond:                                         ; preds = %for.inc56, %if.end18
  %21 = load i32, i32* %i, align 4, !dbg !6868
  %22 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6870
  %size = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %22, i32 0, i32 1, !dbg !6871
  %23 = load i32, i32* %size, align 8, !dbg !6871
  %cmp = icmp ult i32 %21, %23, !dbg !6872
  br i1 %cmp, label %for.body, label %for.end57, !dbg !6873

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !6874, metadata !DIExpression()), !dbg !6876
  %24 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6877
  %table19 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %24, i32 0, i32 0, !dbg !6879
  %25 = load %struct.expr**, %struct.expr*** %table19, align 8, !dbg !6879
  %26 = load i32, i32* %i, align 4, !dbg !6880
  %idxprom = zext i32 %26 to i64, !dbg !6877
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %25, i64 %idxprom, !dbg !6877
  %27 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !6877
  store %struct.expr* %27, %struct.expr** %expr, align 8, !dbg !6881
  br label %for.cond20, !dbg !6882

for.cond20:                                       ; preds = %for.inc54, %for.body
  %28 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !6883
  %cmp21 = icmp ne %struct.expr* %28, null, !dbg !6885
  br i1 %cmp21, label %for.body22, label %for.end55, !dbg !6886

for.body22:                                       ; preds = %for.cond20
  call void @llvm.dbg.declare(metadata i32* %indx, metadata !6887, metadata !DIExpression()), !dbg !6889
  %29 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !6890
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %29, i32 0, i32 1, !dbg !6891
  %30 = load i32, i32* %bitmap_index, align 8, !dbg !6891
  store i32 %30, i32* %indx, align 4, !dbg !6889
  call void @llvm.dbg.declare(metadata %struct.occr** %occr, metadata !6892, metadata !DIExpression()), !dbg !6893
  %31 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %transp.addr, align 8, !dbg !6894
  %tobool23 = icmp ne %struct.simple_bitmap_def** %31, null, !dbg !6894
  br i1 %tobool23, label %if.then24, label %if.end27, !dbg !6896

if.then24:                                        ; preds = %for.body22
  %32 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !6897
  %expr25 = getelementptr inbounds %struct.expr, %struct.expr* %32, i32 0, i32 0, !dbg !6898
  %33 = load %struct.rtx_def*, %struct.rtx_def** %expr25, align 8, !dbg !6898
  %34 = load i32, i32* %indx, align 4, !dbg !6899
  %35 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %transp.addr, align 8, !dbg !6900
  %36 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !6901
  %set_p26 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %36, i32 0, i32 3, !dbg !6902
  %37 = load i32, i32* %set_p26, align 8, !dbg !6902
  call void @compute_transp(%struct.rtx_def* %33, i32 %34, %struct.simple_bitmap_def** %35, i32 %37), !dbg !6903
  br label %if.end27, !dbg !6903

if.end27:                                         ; preds = %if.then24, %for.body22
  %38 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %antloc.addr, align 8, !dbg !6904
  %tobool28 = icmp ne %struct.simple_bitmap_def** %38, null, !dbg !6904
  br i1 %tobool28, label %if.then29, label %if.end36, !dbg !6906

if.then29:                                        ; preds = %if.end27
  %39 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !6907
  %antic_occr = getelementptr inbounds %struct.expr, %struct.expr* %39, i32 0, i32 3, !dbg !6909
  %40 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !6909
  store %struct.occr* %40, %struct.occr** %occr, align 8, !dbg !6910
  br label %for.cond30, !dbg !6911

for.cond30:                                       ; preds = %for.inc, %if.then29
  %41 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !6912
  %cmp31 = icmp ne %struct.occr* %41, null, !dbg !6914
  br i1 %cmp31, label %for.body32, label %for.end, !dbg !6915

for.body32:                                       ; preds = %for.cond30
  %42 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %antloc.addr, align 8, !dbg !6916
  %43 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !6918
  %insn = getelementptr inbounds %struct.occr, %struct.occr* %43, i32 0, i32 1, !dbg !6918
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6918
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !6918
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6918
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !6918
  %rt_bb = bitcast %union.rtunion_def* %arrayidx33 to %struct.basic_block_def**, !dbg !6918
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6918
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 9, !dbg !6919
  %46 = load i32, i32* %index, align 8, !dbg !6919
  %idxprom34 = sext i32 %46 to i64, !dbg !6916
  %arrayidx35 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %42, i64 %idxprom34, !dbg !6916
  %47 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx35, align 8, !dbg !6916
  %48 = load i32, i32* %indx, align 4, !dbg !6920
  call void @SET_BIT(%struct.simple_bitmap_def* %47, i32 %48), !dbg !6921
  %49 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !6922
  %deleted_p = getelementptr inbounds %struct.occr, %struct.occr* %49, i32 0, i32 2, !dbg !6923
  store i8 0, i8* %deleted_p, align 8, !dbg !6924
  br label %for.inc, !dbg !6925

for.inc:                                          ; preds = %for.body32
  %50 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !6926
  %next = getelementptr inbounds %struct.occr, %struct.occr* %50, i32 0, i32 0, !dbg !6927
  %51 = load %struct.occr*, %struct.occr** %next, align 8, !dbg !6927
  store %struct.occr* %51, %struct.occr** %occr, align 8, !dbg !6928
  br label %for.cond30, !dbg !6929, !llvm.loop !6930

for.end:                                          ; preds = %for.cond30
  br label %if.end36, !dbg !6931

if.end36:                                         ; preds = %for.end, %if.end27
  %52 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %comp.addr, align 8, !dbg !6932
  %tobool37 = icmp ne %struct.simple_bitmap_def** %52, null, !dbg !6932
  br i1 %tobool37, label %if.then38, label %if.end53, !dbg !6934

if.then38:                                        ; preds = %if.end36
  %53 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !6935
  %avail_occr = getelementptr inbounds %struct.expr, %struct.expr* %53, i32 0, i32 4, !dbg !6937
  %54 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !6937
  store %struct.occr* %54, %struct.occr** %occr, align 8, !dbg !6938
  br label %for.cond39, !dbg !6939

for.cond39:                                       ; preds = %for.inc50, %if.then38
  %55 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !6940
  %cmp40 = icmp ne %struct.occr* %55, null, !dbg !6942
  br i1 %cmp40, label %for.body41, label %for.end52, !dbg !6943

for.body41:                                       ; preds = %for.cond39
  %56 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %comp.addr, align 8, !dbg !6944
  %57 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !6946
  %insn42 = getelementptr inbounds %struct.occr, %struct.occr* %57, i32 0, i32 1, !dbg !6946
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn42, align 8, !dbg !6946
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !6946
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !6946
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 3, !dbg !6946
  %rt_bb46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.basic_block_def**, !dbg !6946
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb46, align 8, !dbg !6946
  %index47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 9, !dbg !6947
  %60 = load i32, i32* %index47, align 8, !dbg !6947
  %idxprom48 = sext i32 %60 to i64, !dbg !6944
  %arrayidx49 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %56, i64 %idxprom48, !dbg !6944
  %61 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx49, align 8, !dbg !6944
  %62 = load i32, i32* %indx, align 4, !dbg !6948
  call void @SET_BIT(%struct.simple_bitmap_def* %61, i32 %62), !dbg !6949
  %63 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !6950
  %copied_p = getelementptr inbounds %struct.occr, %struct.occr* %63, i32 0, i32 3, !dbg !6951
  store i8 0, i8* %copied_p, align 1, !dbg !6952
  br label %for.inc50, !dbg !6953

for.inc50:                                        ; preds = %for.body41
  %64 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !6954
  %next51 = getelementptr inbounds %struct.occr, %struct.occr* %64, i32 0, i32 0, !dbg !6955
  %65 = load %struct.occr*, %struct.occr** %next51, align 8, !dbg !6955
  store %struct.occr* %65, %struct.occr** %occr, align 8, !dbg !6956
  br label %for.cond39, !dbg !6957, !llvm.loop !6958

for.end52:                                        ; preds = %for.cond39
  br label %if.end53, !dbg !6959

if.end53:                                         ; preds = %for.end52, %if.end36
  %66 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !6960
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %66, i32 0, i32 5, !dbg !6961
  store %struct.rtx_def* null, %struct.rtx_def** %reaching_reg, align 8, !dbg !6962
  br label %for.inc54, !dbg !6963

for.inc54:                                        ; preds = %if.end53
  %67 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !6964
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %67, i32 0, i32 2, !dbg !6965
  %68 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !6965
  store %struct.expr* %68, %struct.expr** %expr, align 8, !dbg !6966
  br label %for.cond20, !dbg !6967, !llvm.loop !6968

for.end55:                                        ; preds = %for.cond20
  br label %for.inc56, !dbg !6970

for.inc56:                                        ; preds = %for.end55
  %69 = load i32, i32* %i, align 4, !dbg !6971
  %inc = add i32 %69, 1, !dbg !6971
  store i32 %inc, i32* %i, align 4, !dbg !6971
  br label %for.cond, !dbg !6972, !llvm.loop !6973

for.end57:                                        ; preds = %for.cond
  ret void, !dbg !6975
}

declare dso_local void @compute_available(%struct.simple_bitmap_def**, %struct.simple_bitmap_def**, %struct.simple_bitmap_def**, %struct.simple_bitmap_def**) #2

declare dso_local void @sbitmap_vector_zero(%struct.simple_bitmap_def**, i32) #2

declare dso_local void @sbitmap_vector_ones(%struct.simple_bitmap_def**, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_transp(%struct.rtx_def* %x, i32 %indx, %struct.simple_bitmap_def** %bmap, i32 %set_p) #0 !dbg !6976 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %indx.addr = alloca i32, align 4
  %bmap.addr = alloca %struct.simple_bitmap_def**, align 8
  %set_p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %def = alloca %union.df_ref_d*, align 8
  %def11 = alloca %union.df_ref_d*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %bb_index = alloca i32, align 4
  %list_entry = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %dest_addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6979, metadata !DIExpression()), !dbg !6980
  store i32 %indx, i32* %indx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %indx.addr, metadata !6981, metadata !DIExpression()), !dbg !6982
  store %struct.simple_bitmap_def** %bmap, %struct.simple_bitmap_def*** %bmap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def*** %bmap.addr, metadata !6983, metadata !DIExpression()), !dbg !6984
  store i32 %set_p, i32* %set_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set_p.addr, metadata !6985, metadata !DIExpression()), !dbg !6986
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6987, metadata !DIExpression()), !dbg !6988
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6989, metadata !DIExpression()), !dbg !6990
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6991, metadata !DIExpression()), !dbg !6992
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !6993, metadata !DIExpression()), !dbg !6994
  br label %repeat, !dbg !6995

repeat:                                           ; preds = %if.then125, %if.end103, %entry
  call void @llvm.dbg.label(metadata !6996), !dbg !6997
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6998
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !7000
  br i1 %cmp, label %if.then, label %if.end, !dbg !7001

if.then:                                          ; preds = %repeat
  br label %for.end164, !dbg !7002

if.end:                                           ; preds = %repeat
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7003
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !7003
  %bf.load = load i32, i32* %2, align 8, !dbg !7003
  %bf.clear = and i32 %bf.load, 65535, !dbg !7003
  store i32 %bf.clear, i32* %code, align 4, !dbg !7004
  %3 = load i32, i32* %code, align 4, !dbg !7005
  switch i32 %3, label %sw.default [
    i32 37, label %sw.bb
    i32 43, label %sw.bb45
    i32 36, label %sw.bb108
    i32 46, label %sw.bb108
    i32 35, label %sw.bb108
    i32 30, label %sw.bb108
    i32 32, label %sw.bb108
    i32 31, label %sw.bb108
    i32 33, label %sw.bb108
    i32 45, label %sw.bb108
    i32 44, label %sw.bb108
    i32 20, label %sw.bb108
    i32 21, label %sw.bb108
  ], !dbg !7006

sw.bb:                                            ; preds = %if.end
  %4 = load i32, i32* %set_p.addr, align 4, !dbg !7007
  %tobool = icmp ne i32 %4, 0, !dbg !7007
  br i1 %tobool, label %if.then1, label %if.else, !dbg !7010

if.then1:                                         ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def, metadata !7011, metadata !DIExpression()), !dbg !7073
  %5 = load %struct.df*, %struct.df** @df, align 8, !dbg !7074
  %def_regs = getelementptr inbounds %struct.df, %struct.df* %5, i32 0, i32 5, !dbg !7074
  %6 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs, align 8, !dbg !7074
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7074
  %call = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !7074
  %idxprom = zext i32 %call to i64, !dbg !7074
  %arrayidx = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %6, i64 %idxprom, !dbg !7074
  %8 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx, align 8, !dbg !7074
  %reg_chain = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %8, i32 0, i32 0, !dbg !7074
  %9 = load %union.df_ref_d*, %union.df_ref_d** %reg_chain, align 8, !dbg !7074
  store %union.df_ref_d* %9, %union.df_ref_d** %def, align 8, !dbg !7076
  br label %for.cond, !dbg !7077

for.cond:                                         ; preds = %for.inc, %if.then1
  %10 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !7078
  %tobool2 = icmp ne %union.df_ref_d* %10, null, !dbg !7080
  br i1 %tobool2, label %for.body, label %for.end, !dbg !7080

for.body:                                         ; preds = %for.cond
  %11 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %bmap.addr, align 8, !dbg !7081
  %12 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !7082
  %base = bitcast %union.df_ref_d* %12 to %struct.df_base_ref*, !dbg !7082
  %13 = bitcast %struct.df_base_ref* %base to i32*, !dbg !7082
  %bf.load3 = load i32, i32* %13, align 8, !dbg !7082
  %bf.clear4 = and i32 %bf.load3, 255, !dbg !7082
  %cmp5 = icmp eq i32 %bf.clear4, 1, !dbg !7082
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !7082

cond.true:                                        ; preds = %for.body
  %14 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !7082
  %artificial_ref = bitcast %union.df_ref_d* %14 to %struct.df_artificial_ref*, !dbg !7082
  %bb = getelementptr inbounds %struct.df_artificial_ref, %struct.df_artificial_ref* %artificial_ref, i32 0, i32 1, !dbg !7082
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7082
  br label %cond.end, !dbg !7082

cond.false:                                       ; preds = %for.body
  %16 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !7082
  %base6 = bitcast %union.df_ref_d* %16 to %struct.df_base_ref*, !dbg !7082
  %insn_info = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base6, i32 0, i32 3, !dbg !7082
  %17 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !7082
  %insn = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %17, i32 0, i32 0, !dbg !7082
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7082
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7082
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7082
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7082
  %rt_bb = bitcast %union.rtunion_def* %arrayidx7 to %struct.basic_block_def**, !dbg !7082
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7082
  br label %cond.end, !dbg !7082

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %15, %cond.true ], [ %19, %cond.false ], !dbg !7082
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %cond, i32 0, i32 9, !dbg !7083
  %20 = load i32, i32* %index, align 8, !dbg !7083
  %idxprom8 = sext i32 %20 to i64, !dbg !7081
  %arrayidx9 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %11, i64 %idxprom8, !dbg !7081
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx9, align 8, !dbg !7081
  %22 = load i32, i32* %indx.addr, align 4, !dbg !7084
  call void @SET_BIT(%struct.simple_bitmap_def* %21, i32 %22), !dbg !7085
  br label %for.inc, !dbg !7085

for.inc:                                          ; preds = %cond.end
  %23 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !7086
  %base10 = bitcast %union.df_ref_d* %23 to %struct.df_base_ref*, !dbg !7086
  %next_reg = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base10, i32 0, i32 4, !dbg !7086
  %24 = load %union.df_ref_d*, %union.df_ref_d** %next_reg, align 8, !dbg !7086
  store %union.df_ref_d* %24, %union.df_ref_d** %def, align 8, !dbg !7087
  br label %for.cond, !dbg !7088, !llvm.loop !7089

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !7091

if.else:                                          ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def11, metadata !7092, metadata !DIExpression()), !dbg !7094
  %25 = load %struct.df*, %struct.df** @df, align 8, !dbg !7095
  %def_regs12 = getelementptr inbounds %struct.df, %struct.df* %25, i32 0, i32 5, !dbg !7095
  %26 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs12, align 8, !dbg !7095
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7095
  %call13 = call i32 @rhs_regno(%struct.rtx_def* %27), !dbg !7095
  %idxprom14 = zext i32 %call13 to i64, !dbg !7095
  %arrayidx15 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %26, i64 %idxprom14, !dbg !7095
  %28 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx15, align 8, !dbg !7095
  %reg_chain16 = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %28, i32 0, i32 0, !dbg !7095
  %29 = load %union.df_ref_d*, %union.df_ref_d** %reg_chain16, align 8, !dbg !7095
  store %union.df_ref_d* %29, %union.df_ref_d** %def11, align 8, !dbg !7097
  br label %for.cond17, !dbg !7098

for.cond17:                                       ; preds = %for.inc40, %if.else
  %30 = load %union.df_ref_d*, %union.df_ref_d** %def11, align 8, !dbg !7099
  %tobool18 = icmp ne %union.df_ref_d* %30, null, !dbg !7101
  br i1 %tobool18, label %for.body19, label %for.end43, !dbg !7101

for.body19:                                       ; preds = %for.cond17
  %31 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %bmap.addr, align 8, !dbg !7102
  %32 = load %union.df_ref_d*, %union.df_ref_d** %def11, align 8, !dbg !7103
  %base20 = bitcast %union.df_ref_d* %32 to %struct.df_base_ref*, !dbg !7103
  %33 = bitcast %struct.df_base_ref* %base20 to i32*, !dbg !7103
  %bf.load21 = load i32, i32* %33, align 8, !dbg !7103
  %bf.clear22 = and i32 %bf.load21, 255, !dbg !7103
  %cmp23 = icmp eq i32 %bf.clear22, 1, !dbg !7103
  br i1 %cmp23, label %cond.true24, label %cond.false27, !dbg !7103

cond.true24:                                      ; preds = %for.body19
  %34 = load %union.df_ref_d*, %union.df_ref_d** %def11, align 8, !dbg !7103
  %artificial_ref25 = bitcast %union.df_ref_d* %34 to %struct.df_artificial_ref*, !dbg !7103
  %bb26 = getelementptr inbounds %struct.df_artificial_ref, %struct.df_artificial_ref* %artificial_ref25, i32 0, i32 1, !dbg !7103
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb26, align 8, !dbg !7103
  br label %cond.end35, !dbg !7103

cond.false27:                                     ; preds = %for.body19
  %36 = load %union.df_ref_d*, %union.df_ref_d** %def11, align 8, !dbg !7103
  %base28 = bitcast %union.df_ref_d* %36 to %struct.df_base_ref*, !dbg !7103
  %insn_info29 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base28, i32 0, i32 3, !dbg !7103
  %37 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info29, align 8, !dbg !7103
  %insn30 = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %37, i32 0, i32 0, !dbg !7103
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn30, align 8, !dbg !7103
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !7103
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !7103
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 3, !dbg !7103
  %rt_bb34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.basic_block_def**, !dbg !7103
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb34, align 8, !dbg !7103
  br label %cond.end35, !dbg !7103

cond.end35:                                       ; preds = %cond.false27, %cond.true24
  %cond36 = phi %struct.basic_block_def* [ %35, %cond.true24 ], [ %39, %cond.false27 ], !dbg !7103
  %index37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %cond36, i32 0, i32 9, !dbg !7104
  %40 = load i32, i32* %index37, align 8, !dbg !7104
  %idxprom38 = sext i32 %40 to i64, !dbg !7102
  %arrayidx39 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %31, i64 %idxprom38, !dbg !7102
  %41 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx39, align 8, !dbg !7102
  %42 = load i32, i32* %indx.addr, align 4, !dbg !7105
  call void @RESET_BIT(%struct.simple_bitmap_def* %41, i32 %42), !dbg !7106
  br label %for.inc40, !dbg !7106

for.inc40:                                        ; preds = %cond.end35
  %43 = load %union.df_ref_d*, %union.df_ref_d** %def11, align 8, !dbg !7107
  %base41 = bitcast %union.df_ref_d* %43 to %struct.df_base_ref*, !dbg !7107
  %next_reg42 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base41, i32 0, i32 4, !dbg !7107
  %44 = load %union.df_ref_d*, %union.df_ref_d** %next_reg42, align 8, !dbg !7107
  store %union.df_ref_d* %44, %union.df_ref_d** %def11, align 8, !dbg !7108
  br label %for.cond17, !dbg !7109, !llvm.loop !7110

for.end43:                                        ; preds = %for.cond17
  br label %if.end44

if.end44:                                         ; preds = %for.end43, %for.end
  br label %for.end164, !dbg !7112

sw.bb45:                                          ; preds = %if.end
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7113
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !7113
  %bf.load46 = load i32, i32* %46, align 8, !dbg !7113
  %bf.lshr = lshr i32 %bf.load46, 26, !dbg !7113
  %bf.clear47 = and i32 %bf.lshr, 1, !dbg !7113
  %tobool48 = icmp ne i32 %bf.clear47, 0, !dbg !7113
  br i1 %tobool48, label %if.end103, label %if.then49, !dbg !7115

if.then49:                                        ; preds = %sw.bb45
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7116, metadata !DIExpression()), !dbg !7118
  call void @llvm.dbg.declare(metadata i32* %bb_index, metadata !7119, metadata !DIExpression()), !dbg !7120
  %47 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_calls, align 8, !dbg !7121
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %47, i32 0, i32* %bb_index), !dbg !7121
  br label %for.cond50, !dbg !7121

for.cond50:                                       ; preds = %for.inc62, %if.then49
  %call51 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bb_index), !dbg !7123
  %tobool52 = icmp ne i8 %call51, 0, !dbg !7121
  br i1 %tobool52, label %for.body53, label %for.end63, !dbg !7121

for.body53:                                       ; preds = %for.cond50
  %48 = load i32, i32* %set_p.addr, align 4, !dbg !7125
  %tobool54 = icmp ne i32 %48, 0, !dbg !7125
  br i1 %tobool54, label %if.then55, label %if.else58, !dbg !7128

if.then55:                                        ; preds = %for.body53
  %49 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %bmap.addr, align 8, !dbg !7129
  %50 = load i32, i32* %bb_index, align 4, !dbg !7130
  %idxprom56 = zext i32 %50 to i64, !dbg !7129
  %arrayidx57 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %49, i64 %idxprom56, !dbg !7129
  %51 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx57, align 8, !dbg !7129
  %52 = load i32, i32* %indx.addr, align 4, !dbg !7131
  call void @SET_BIT(%struct.simple_bitmap_def* %51, i32 %52), !dbg !7132
  br label %if.end61, !dbg !7132

if.else58:                                        ; preds = %for.body53
  %53 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %bmap.addr, align 8, !dbg !7133
  %54 = load i32, i32* %bb_index, align 4, !dbg !7134
  %idxprom59 = zext i32 %54 to i64, !dbg !7133
  %arrayidx60 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %53, i64 %idxprom59, !dbg !7133
  %55 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx60, align 8, !dbg !7133
  %56 = load i32, i32* %indx.addr, align 4, !dbg !7135
  call void @RESET_BIT(%struct.simple_bitmap_def* %55, i32 %56), !dbg !7136
  br label %if.end61

if.end61:                                         ; preds = %if.else58, %if.then55
  br label %for.inc62, !dbg !7137

for.inc62:                                        ; preds = %if.end61
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bb_index), !dbg !7123
  br label %for.cond50, !dbg !7123, !llvm.loop !7138

for.end63:                                        ; preds = %for.cond50
  %57 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @modify_mem_list_set, align 8, !dbg !7140
  %58 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_calls, align 8, !dbg !7140
  call void @bmp_iter_and_compl_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %57, %struct.bitmap_head_def* %58, i32 0, i32* %bb_index), !dbg !7140
  br label %for.cond64, !dbg !7140

for.cond64:                                       ; preds = %for.inc101, %for.end63
  %call65 = call zeroext i8 @bmp_iter_and_compl(%struct.bitmap_iterator* %bi, i32* %bb_index), !dbg !7142
  %tobool66 = icmp ne i8 %call65, 0, !dbg !7140
  br i1 %tobool66, label %for.body67, label %for.end102, !dbg !7140

for.body67:                                       ; preds = %for.cond64
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %list_entry, metadata !7144, metadata !DIExpression()), !dbg !7146
  %59 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !7147
  %60 = load i32, i32* %bb_index, align 4, !dbg !7148
  %idxprom68 = zext i32 %60 to i64, !dbg !7147
  %arrayidx69 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %59, i64 %idxprom68, !dbg !7147
  %61 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx69, align 8, !dbg !7147
  store %struct.rtx_def* %61, %struct.rtx_def** %list_entry, align 8, !dbg !7146
  br label %while.cond, !dbg !7149

while.cond:                                       ; preds = %if.end96, %for.body67
  %62 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !7150
  %tobool70 = icmp ne %struct.rtx_def* %62, null, !dbg !7149
  br i1 %tobool70, label %while.body, label %while.end, !dbg !7149

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !7151, metadata !DIExpression()), !dbg !7153
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest_addr, metadata !7154, metadata !DIExpression()), !dbg !7155
  %63 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !7156
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !7156
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !7156
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 0, !dbg !7156
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !7156
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7156
  store %struct.rtx_def* %64, %struct.rtx_def** %dest, align 8, !dbg !7157
  %65 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !7158
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !7158
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !7158
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 1, !dbg !7158
  %rt_rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**, !dbg !7158
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx77, align 8, !dbg !7158
  store %struct.rtx_def* %66, %struct.rtx_def** %list_entry, align 8, !dbg !7159
  %67 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !7160
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !7160
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !7160
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 0, !dbg !7160
  %rt_rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !7160
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx81, align 8, !dbg !7160
  store %struct.rtx_def* %68, %struct.rtx_def** %dest_addr, align 8, !dbg !7161
  %69 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7162
  %70 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7164
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !7164
  %bf.load82 = load i32, i32* %71, align 8, !dbg !7164
  %bf.lshr83 = lshr i32 %bf.load82, 16, !dbg !7164
  %bf.clear84 = and i32 %bf.lshr83, 255, !dbg !7164
  %72 = load %struct.rtx_def*, %struct.rtx_def** %dest_addr, align 8, !dbg !7165
  %73 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7166
  %call85 = call i32 @canon_true_dependence(%struct.rtx_def* %69, i32 %bf.clear84, %struct.rtx_def* %72, %struct.rtx_def* %73, %struct.rtx_def* null, i8 (%struct.rtx_def*, i8)* @rtx_addr_varies_p), !dbg !7167
  %tobool86 = icmp ne i32 %call85, 0, !dbg !7167
  br i1 %tobool86, label %if.then87, label %if.end96, !dbg !7168

if.then87:                                        ; preds = %while.body
  %74 = load i32, i32* %set_p.addr, align 4, !dbg !7169
  %tobool88 = icmp ne i32 %74, 0, !dbg !7169
  br i1 %tobool88, label %if.then89, label %if.else92, !dbg !7172

if.then89:                                        ; preds = %if.then87
  %75 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %bmap.addr, align 8, !dbg !7173
  %76 = load i32, i32* %bb_index, align 4, !dbg !7174
  %idxprom90 = zext i32 %76 to i64, !dbg !7173
  %arrayidx91 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %75, i64 %idxprom90, !dbg !7173
  %77 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx91, align 8, !dbg !7173
  %78 = load i32, i32* %indx.addr, align 4, !dbg !7175
  call void @SET_BIT(%struct.simple_bitmap_def* %77, i32 %78), !dbg !7176
  br label %if.end95, !dbg !7176

if.else92:                                        ; preds = %if.then87
  %79 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %bmap.addr, align 8, !dbg !7177
  %80 = load i32, i32* %bb_index, align 4, !dbg !7178
  %idxprom93 = zext i32 %80 to i64, !dbg !7177
  %arrayidx94 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %79, i64 %idxprom93, !dbg !7177
  %81 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx94, align 8, !dbg !7177
  %82 = load i32, i32* %indx.addr, align 4, !dbg !7179
  call void @RESET_BIT(%struct.simple_bitmap_def* %81, i32 %82), !dbg !7180
  br label %if.end95

if.end95:                                         ; preds = %if.else92, %if.then89
  br label %while.end, !dbg !7181

if.end96:                                         ; preds = %while.body
  %83 = load %struct.rtx_def*, %struct.rtx_def** %list_entry, align 8, !dbg !7182
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !7182
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !7182
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 1, !dbg !7182
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !7182
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx100, align 8, !dbg !7182
  store %struct.rtx_def* %84, %struct.rtx_def** %list_entry, align 8, !dbg !7183
  br label %while.cond, !dbg !7149, !llvm.loop !7184

while.end:                                        ; preds = %if.end95, %while.cond
  br label %for.inc101, !dbg !7186

for.inc101:                                       ; preds = %while.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bb_index), !dbg !7142
  br label %for.cond64, !dbg !7142, !llvm.loop !7187

for.end102:                                       ; preds = %for.cond64
  br label %if.end103, !dbg !7189

if.end103:                                        ; preds = %for.end102, %sw.bb45
  %85 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7190
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !7190
  %fld105 = bitcast %union.u* %u104 to [1 x %union.rtunion_def]*, !dbg !7190
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i64 0, i64 0, !dbg !7190
  %rt_rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**, !dbg !7190
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx107, align 8, !dbg !7190
  store %struct.rtx_def* %86, %struct.rtx_def** %x.addr, align 8, !dbg !7191
  br label %repeat, !dbg !7192

sw.bb108:                                         ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %for.end164, !dbg !7193

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !7194

sw.epilog:                                        ; preds = %sw.default
  %87 = load i32, i32* %code, align 4, !dbg !7195
  %idxprom109 = sext i32 %87 to i64, !dbg !7195
  %arrayidx110 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom109, !dbg !7195
  %88 = load i8, i8* %arrayidx110, align 1, !dbg !7195
  %conv = zext i8 %88 to i32, !dbg !7195
  %sub = sub nsw i32 %conv, 1, !dbg !7197
  store i32 %sub, i32* %i, align 4, !dbg !7198
  %89 = load i32, i32* %code, align 4, !dbg !7199
  %idxprom111 = sext i32 %89 to i64, !dbg !7199
  %arrayidx112 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom111, !dbg !7199
  %90 = load i8*, i8** %arrayidx112, align 8, !dbg !7199
  store i8* %90, i8** %fmt, align 8, !dbg !7200
  br label %for.cond113, !dbg !7201

for.cond113:                                      ; preds = %for.inc163, %sw.epilog
  %91 = load i32, i32* %i, align 4, !dbg !7202
  %cmp114 = icmp sge i32 %91, 0, !dbg !7204
  br i1 %cmp114, label %for.body116, label %for.end164, !dbg !7205

for.body116:                                      ; preds = %for.cond113
  %92 = load i8*, i8** %fmt, align 8, !dbg !7206
  %93 = load i32, i32* %i, align 4, !dbg !7209
  %idxprom117 = sext i32 %93 to i64, !dbg !7206
  %arrayidx118 = getelementptr inbounds i8, i8* %92, i64 %idxprom117, !dbg !7206
  %94 = load i8, i8* %arrayidx118, align 1, !dbg !7206
  %conv119 = sext i8 %94 to i32, !dbg !7206
  %cmp120 = icmp eq i32 %conv119, 101, !dbg !7210
  br i1 %cmp120, label %if.then122, label %if.else137, !dbg !7211

if.then122:                                       ; preds = %for.body116
  %95 = load i32, i32* %i, align 4, !dbg !7212
  %cmp123 = icmp eq i32 %95, 0, !dbg !7215
  br i1 %cmp123, label %if.then125, label %if.end131, !dbg !7216

if.then125:                                       ; preds = %if.then122
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7217
  %u126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1, !dbg !7217
  %fld127 = bitcast %union.u* %u126 to [1 x %union.rtunion_def]*, !dbg !7217
  %97 = load i32, i32* %i, align 4, !dbg !7217
  %idxprom128 = sext i32 %97 to i64, !dbg !7217
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i64 0, i64 %idxprom128, !dbg !7217
  %rt_rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**, !dbg !7217
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx130, align 8, !dbg !7217
  store %struct.rtx_def* %98, %struct.rtx_def** %x.addr, align 8, !dbg !7219
  br label %repeat, !dbg !7220

if.end131:                                        ; preds = %if.then122
  %99 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7221
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !7221
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !7221
  %100 = load i32, i32* %i, align 4, !dbg !7221
  %idxprom134 = sext i32 %100 to i64, !dbg !7221
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 %idxprom134, !dbg !7221
  %rt_rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**, !dbg !7221
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx136, align 8, !dbg !7221
  %102 = load i32, i32* %indx.addr, align 4, !dbg !7222
  %103 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %bmap.addr, align 8, !dbg !7223
  %104 = load i32, i32* %set_p.addr, align 4, !dbg !7224
  call void @compute_transp(%struct.rtx_def* %101, i32 %102, %struct.simple_bitmap_def** %103, i32 %104), !dbg !7225
  br label %if.end162, !dbg !7226

if.else137:                                       ; preds = %for.body116
  %105 = load i8*, i8** %fmt, align 8, !dbg !7227
  %106 = load i32, i32* %i, align 4, !dbg !7229
  %idxprom138 = sext i32 %106 to i64, !dbg !7227
  %arrayidx139 = getelementptr inbounds i8, i8* %105, i64 %idxprom138, !dbg !7227
  %107 = load i8, i8* %arrayidx139, align 1, !dbg !7227
  %conv140 = sext i8 %107 to i32, !dbg !7227
  %cmp141 = icmp eq i32 %conv140, 69, !dbg !7230
  br i1 %cmp141, label %if.then143, label %if.end161, !dbg !7231

if.then143:                                       ; preds = %if.else137
  store i32 0, i32* %j, align 4, !dbg !7232
  br label %for.cond144, !dbg !7234

for.cond144:                                      ; preds = %for.inc159, %if.then143
  %108 = load i32, i32* %j, align 4, !dbg !7235
  %109 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7237
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1, !dbg !7237
  %fld146 = bitcast %union.u* %u145 to [1 x %union.rtunion_def]*, !dbg !7237
  %110 = load i32, i32* %i, align 4, !dbg !7237
  %idxprom147 = sext i32 %110 to i64, !dbg !7237
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i64 0, i64 %idxprom147, !dbg !7237
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx148 to %struct.rtvec_def**, !dbg !7237
  %111 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7237
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %111, i32 0, i32 0, !dbg !7237
  %112 = load i32, i32* %num_elem, align 8, !dbg !7237
  %cmp149 = icmp slt i32 %108, %112, !dbg !7238
  br i1 %cmp149, label %for.body151, label %for.end160, !dbg !7239

for.body151:                                      ; preds = %for.cond144
  %113 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7240
  %u152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1, !dbg !7240
  %fld153 = bitcast %union.u* %u152 to [1 x %union.rtunion_def]*, !dbg !7240
  %114 = load i32, i32* %i, align 4, !dbg !7240
  %idxprom154 = sext i32 %114 to i64, !dbg !7240
  %arrayidx155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i64 0, i64 %idxprom154, !dbg !7240
  %rt_rtvec156 = bitcast %union.rtunion_def* %arrayidx155 to %struct.rtvec_def**, !dbg !7240
  %115 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec156, align 8, !dbg !7240
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %115, i32 0, i32 1, !dbg !7240
  %116 = load i32, i32* %j, align 4, !dbg !7240
  %idxprom157 = sext i32 %116 to i64, !dbg !7240
  %arrayidx158 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom157, !dbg !7240
  %117 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx158, align 8, !dbg !7240
  %118 = load i32, i32* %indx.addr, align 4, !dbg !7241
  %119 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %bmap.addr, align 8, !dbg !7242
  %120 = load i32, i32* %set_p.addr, align 4, !dbg !7243
  call void @compute_transp(%struct.rtx_def* %117, i32 %118, %struct.simple_bitmap_def** %119, i32 %120), !dbg !7244
  br label %for.inc159, !dbg !7244

for.inc159:                                       ; preds = %for.body151
  %121 = load i32, i32* %j, align 4, !dbg !7245
  %inc = add nsw i32 %121, 1, !dbg !7245
  store i32 %inc, i32* %j, align 4, !dbg !7245
  br label %for.cond144, !dbg !7246, !llvm.loop !7247

for.end160:                                       ; preds = %for.cond144
  br label %if.end161, !dbg !7248

if.end161:                                        ; preds = %for.end160, %if.else137
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %if.end131
  br label %for.inc163, !dbg !7249

for.inc163:                                       ; preds = %if.end162
  %122 = load i32, i32* %i, align 4, !dbg !7250
  %dec = add nsw i32 %122, -1, !dbg !7250
  store i32 %dec, i32* %i, align 4, !dbg !7250
  br label %for.cond113, !dbg !7251, !llvm.loop !7252

for.end164:                                       ; preds = %if.then, %if.end44, %sw.bb108, %for.cond113
  ret void, !dbg !7254
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !7255 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !7258, metadata !DIExpression()), !dbg !7259
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !7260, metadata !DIExpression()), !dbg !7261
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7262
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !7264
  %1 = load i8*, i8** %popcount, align 8, !dbg !7264
  %tobool = icmp ne i8* %1, null, !dbg !7262
  br i1 %tobool, label %if.then, label %if.end7, !dbg !7265

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !7266, metadata !DIExpression()), !dbg !7268
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7269
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !7269
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !7269
  %div = udiv i32 %3, 64, !dbg !7269
  %idxprom = zext i32 %div to i64, !dbg !7269
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7269
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7269
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !7269
  %rem = urem i32 %5, 64, !dbg !7269
  %sh_prom = zext i32 %rem to i64, !dbg !7269
  %shr = lshr i64 %4, %sh_prom, !dbg !7269
  %and = and i64 %shr, 1, !dbg !7269
  %conv = trunc i64 %and to i8, !dbg !7269
  store i8 %conv, i8* %oldbit, align 1, !dbg !7270
  %6 = load i8, i8* %oldbit, align 1, !dbg !7271
  %tobool1 = icmp ne i8 %6, 0, !dbg !7271
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !7273

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7274
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !7275
  %8 = load i8*, i8** %popcount3, align 8, !dbg !7275
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !7276
  %div4 = udiv i32 %9, 64, !dbg !7277
  %idxprom5 = zext i32 %div4 to i64, !dbg !7274
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !7274
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !7278
  %inc = add i8 %10, 1, !dbg !7278
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !7278
  br label %if.end, !dbg !7274

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !7279

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !7280
  %rem8 = urem i32 %11, 64, !dbg !7281
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !7282
  %shl = shl i64 1, %sh_prom9, !dbg !7282
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7283
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !7284
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !7285
  %div11 = udiv i32 %13, 64, !dbg !7286
  %idxprom12 = zext i32 %div11 to i64, !dbg !7283
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !7283
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !7287
  %or = or i64 %14, %shl, !dbg !7287
  store i64 %or, i64* %arrayidx13, align 8, !dbg !7287
  ret void, !dbg !7288
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !7289 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !7290, metadata !DIExpression()), !dbg !7291
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !7292, metadata !DIExpression()), !dbg !7293
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7294
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !7296
  %1 = load i8*, i8** %popcount, align 8, !dbg !7296
  %tobool = icmp ne i8* %1, null, !dbg !7294
  br i1 %tobool, label %if.then, label %if.end7, !dbg !7297

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !7298, metadata !DIExpression()), !dbg !7300
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7301
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !7301
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !7301
  %div = udiv i32 %3, 64, !dbg !7301
  %idxprom = zext i32 %div to i64, !dbg !7301
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7301
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7301
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !7301
  %rem = urem i32 %5, 64, !dbg !7301
  %sh_prom = zext i32 %rem to i64, !dbg !7301
  %shr = lshr i64 %4, %sh_prom, !dbg !7301
  %and = and i64 %shr, 1, !dbg !7301
  %conv = trunc i64 %and to i8, !dbg !7301
  store i8 %conv, i8* %oldbit, align 1, !dbg !7302
  %6 = load i8, i8* %oldbit, align 1, !dbg !7303
  %tobool1 = icmp ne i8 %6, 0, !dbg !7303
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !7305

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7306
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !7307
  %8 = load i8*, i8** %popcount3, align 8, !dbg !7307
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !7308
  %div4 = udiv i32 %9, 64, !dbg !7309
  %idxprom5 = zext i32 %div4 to i64, !dbg !7306
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !7306
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !7310
  %dec = add i8 %10, -1, !dbg !7310
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !7310
  br label %if.end, !dbg !7306

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !7311

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !7312
  %rem8 = urem i32 %11, 64, !dbg !7313
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !7314
  %shl = shl i64 1, %sh_prom9, !dbg !7314
  %neg = xor i64 %shl, -1, !dbg !7315
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7316
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !7317
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !7318
  %div11 = udiv i32 %13, 64, !dbg !7319
  %idxprom12 = zext i32 %div11 to i64, !dbg !7316
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !7316
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !7320
  %and14 = and i64 %14, %neg, !dbg !7320
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !7320
  ret void, !dbg !7321
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_and_compl_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map1, %struct.bitmap_head_def* %map2, i32 %start_bit, i32* %bit_no) #0 !dbg !7322 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map1.addr = alloca %struct.bitmap_head_def*, align 8
  %map2.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7325, metadata !DIExpression()), !dbg !7326
  store %struct.bitmap_head_def* %map1, %struct.bitmap_head_def** %map1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map1.addr, metadata !7327, metadata !DIExpression()), !dbg !7328
  store %struct.bitmap_head_def* %map2, %struct.bitmap_head_def** %map2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map2.addr, metadata !7329, metadata !DIExpression()), !dbg !7330
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !7331, metadata !DIExpression()), !dbg !7332
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7333, metadata !DIExpression()), !dbg !7334
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map1.addr, align 8, !dbg !7335
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !7336
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !7336
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7337
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !7338
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !7339
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map2.addr, align 8, !dbg !7340
  %first1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 0, !dbg !7341
  %4 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first1, align 8, !dbg !7341
  %5 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7342
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %5, i32 0, i32 1, !dbg !7343
  store %struct.bitmap_element_def* %4, %struct.bitmap_element_def** %elt2, align 8, !dbg !7344
  br label %while.body, !dbg !7345

while.body:                                       ; preds = %entry, %if.end6
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7346
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !7349
  %7 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt12, align 8, !dbg !7349
  %tobool = icmp ne %struct.bitmap_element_def* %7, null, !dbg !7346
  br i1 %tobool, label %if.end, label %if.then, !dbg !7350

if.then:                                          ; preds = %while.body
  %8 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7351
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %8, i32 0, i32 0, !dbg !7353
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt13, align 8, !dbg !7354
  br label %while.end, !dbg !7355

if.end:                                           ; preds = %while.body
  %9 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7356
  %elt14 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %9, i32 0, i32 0, !dbg !7358
  %10 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt14, align 8, !dbg !7358
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %10, i32 0, i32 2, !dbg !7359
  %11 = load i32, i32* %indx, align 8, !dbg !7359
  %12 = load i32, i32* %start_bit.addr, align 4, !dbg !7360
  %div = udiv i32 %12, 128, !dbg !7361
  %cmp = icmp uge i32 %11, %div, !dbg !7362
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !7363

if.then5:                                         ; preds = %if.end
  br label %while.end, !dbg !7364

if.end6:                                          ; preds = %if.end
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7365
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 0, !dbg !7366
  %14 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt17, align 8, !dbg !7366
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %14, i32 0, i32 0, !dbg !7367
  %15 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !7367
  %16 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7368
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %16, i32 0, i32 0, !dbg !7369
  store %struct.bitmap_element_def* %15, %struct.bitmap_element_def** %elt18, align 8, !dbg !7370
  br label %while.body, !dbg !7345, !llvm.loop !7371

while.end:                                        ; preds = %if.then5, %if.then
  br label %while.cond, !dbg !7373

while.cond:                                       ; preds = %while.body16, %while.end
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7374
  %elt29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 1, !dbg !7375
  %18 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt29, align 8, !dbg !7375
  %tobool10 = icmp ne %struct.bitmap_element_def* %18, null, !dbg !7374
  br i1 %tobool10, label %land.rhs, label %land.end, !dbg !7376

land.rhs:                                         ; preds = %while.cond
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7377
  %elt211 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 1, !dbg !7378
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt211, align 8, !dbg !7378
  %indx12 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !7379
  %21 = load i32, i32* %indx12, align 8, !dbg !7379
  %22 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7380
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %22, i32 0, i32 0, !dbg !7381
  %23 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !7381
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %23, i32 0, i32 2, !dbg !7382
  %24 = load i32, i32* %indx14, align 8, !dbg !7382
  %cmp15 = icmp ult i32 %21, %24, !dbg !7383
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %25 = phi i1 [ false, %while.cond ], [ %cmp15, %land.rhs ], !dbg !7384
  br i1 %25, label %while.body16, label %while.end20, !dbg !7373

while.body16:                                     ; preds = %land.end
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7385
  %elt217 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 1, !dbg !7386
  %27 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt217, align 8, !dbg !7386
  %next18 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %27, i32 0, i32 0, !dbg !7387
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next18, align 8, !dbg !7387
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7388
  %elt219 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 1, !dbg !7389
  store %struct.bitmap_element_def* %28, %struct.bitmap_element_def** %elt219, align 8, !dbg !7390
  br label %while.cond, !dbg !7373, !llvm.loop !7391

while.end20:                                      ; preds = %land.end
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7392
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !7394
  %31 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !7394
  %indx22 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %31, i32 0, i32 2, !dbg !7395
  %32 = load i32, i32* %indx22, align 8, !dbg !7395
  %33 = load i32, i32* %start_bit.addr, align 4, !dbg !7396
  %div23 = udiv i32 %33, 128, !dbg !7397
  %cmp24 = icmp ne i32 %32, %div23, !dbg !7398
  br i1 %cmp24, label %if.then25, label %if.end28, !dbg !7399

if.then25:                                        ; preds = %while.end20
  %34 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7400
  %elt126 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %34, i32 0, i32 0, !dbg !7401
  %35 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt126, align 8, !dbg !7401
  %indx27 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %35, i32 0, i32 2, !dbg !7402
  %36 = load i32, i32* %indx27, align 8, !dbg !7402
  %mul = mul i32 %36, 128, !dbg !7403
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !7404
  br label %if.end28, !dbg !7405

if.end28:                                         ; preds = %if.then25, %while.end20
  %37 = load i32, i32* %start_bit.addr, align 4, !dbg !7406
  %div29 = udiv i32 %37, 64, !dbg !7407
  %rem = urem i32 %div29, 2, !dbg !7408
  %38 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7409
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %38, i32 0, i32 2, !dbg !7410
  store i32 %rem, i32* %word_no, align 8, !dbg !7411
  %39 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7412
  %elt130 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %39, i32 0, i32 0, !dbg !7413
  %40 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt130, align 8, !dbg !7413
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %40, i32 0, i32 3, !dbg !7414
  %41 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7415
  %word_no31 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %41, i32 0, i32 2, !dbg !7416
  %42 = load i32, i32* %word_no31, align 8, !dbg !7416
  %idxprom = zext i32 %42 to i64, !dbg !7412
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !7412
  %43 = load i64, i64* %arrayidx, align 8, !dbg !7412
  %44 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7417
  %bits32 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %44, i32 0, i32 3, !dbg !7418
  store i64 %43, i64* %bits32, align 8, !dbg !7419
  %45 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7420
  %elt233 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %45, i32 0, i32 1, !dbg !7422
  %46 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt233, align 8, !dbg !7422
  %tobool34 = icmp ne %struct.bitmap_element_def* %46, null, !dbg !7420
  br i1 %tobool34, label %land.lhs.true, label %if.end47, !dbg !7423

land.lhs.true:                                    ; preds = %if.end28
  %47 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7424
  %elt135 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %47, i32 0, i32 0, !dbg !7425
  %48 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt135, align 8, !dbg !7425
  %indx36 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %48, i32 0, i32 2, !dbg !7426
  %49 = load i32, i32* %indx36, align 8, !dbg !7426
  %50 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7427
  %elt237 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %50, i32 0, i32 1, !dbg !7428
  %51 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt237, align 8, !dbg !7428
  %indx38 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %51, i32 0, i32 2, !dbg !7429
  %52 = load i32, i32* %indx38, align 8, !dbg !7429
  %cmp39 = icmp eq i32 %49, %52, !dbg !7430
  br i1 %cmp39, label %if.then40, label %if.end47, !dbg !7431

if.then40:                                        ; preds = %land.lhs.true
  %53 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7432
  %elt241 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %53, i32 0, i32 1, !dbg !7433
  %54 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt241, align 8, !dbg !7433
  %bits42 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %54, i32 0, i32 3, !dbg !7434
  %55 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7435
  %word_no43 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %55, i32 0, i32 2, !dbg !7436
  %56 = load i32, i32* %word_no43, align 8, !dbg !7436
  %idxprom44 = zext i32 %56 to i64, !dbg !7432
  %arrayidx45 = getelementptr inbounds [2 x i64], [2 x i64]* %bits42, i64 0, i64 %idxprom44, !dbg !7432
  %57 = load i64, i64* %arrayidx45, align 8, !dbg !7432
  %neg = xor i64 %57, -1, !dbg !7437
  %58 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7438
  %bits46 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %58, i32 0, i32 3, !dbg !7439
  %59 = load i64, i64* %bits46, align 8, !dbg !7440
  %and = and i64 %59, %neg, !dbg !7440
  store i64 %and, i64* %bits46, align 8, !dbg !7440
  br label %if.end47, !dbg !7438

if.end47:                                         ; preds = %if.then40, %land.lhs.true, %if.end28
  %60 = load i32, i32* %start_bit.addr, align 4, !dbg !7441
  %rem48 = urem i32 %60, 64, !dbg !7442
  %61 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7443
  %bits49 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %61, i32 0, i32 3, !dbg !7444
  %62 = load i64, i64* %bits49, align 8, !dbg !7445
  %sh_prom = zext i32 %rem48 to i64, !dbg !7445
  %shr = lshr i64 %62, %sh_prom, !dbg !7445
  store i64 %shr, i64* %bits49, align 8, !dbg !7445
  %63 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7446
  %bits50 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %63, i32 0, i32 3, !dbg !7447
  %64 = load i64, i64* %bits50, align 8, !dbg !7447
  %tobool51 = icmp ne i64 %64, 0, !dbg !7448
  %lnot = xor i1 %tobool51, true, !dbg !7448
  %lnot.ext = zext i1 %lnot to i32, !dbg !7448
  %65 = load i32, i32* %start_bit.addr, align 4, !dbg !7449
  %add = add i32 %65, %lnot.ext, !dbg !7449
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !7449
  %66 = load i32, i32* %start_bit.addr, align 4, !dbg !7450
  %67 = load i32*, i32** %bit_no.addr, align 8, !dbg !7451
  store i32 %66, i32* %67, align 4, !dbg !7452
  ret void, !dbg !7453
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_and_compl(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !7454 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7455, metadata !DIExpression()), !dbg !7456
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7457, metadata !DIExpression()), !dbg !7458
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7459
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !7461
  %1 = load i64, i64* %bits, align 8, !dbg !7461
  %tobool = icmp ne i64 %1, 0, !dbg !7459
  br i1 %tobool, label %if.then, label %if.end, !dbg !7462

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !7463

next_bit:                                         ; preds = %if.then29, %if.then
  call void @llvm.dbg.label(metadata !7464), !dbg !7466
  br label %while.cond, !dbg !7467

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7468
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !7469
  %3 = load i64, i64* %bits1, align 8, !dbg !7469
  %and = and i64 %3, 1, !dbg !7470
  %tobool2 = icmp ne i64 %and, 0, !dbg !7471
  %lnot = xor i1 %tobool2, true, !dbg !7471
  br i1 %lnot, label %while.body, label %while.end, !dbg !7467

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7472
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !7474
  %5 = load i64, i64* %bits3, align 8, !dbg !7475
  %shr = lshr i64 %5, 1, !dbg !7475
  store i64 %shr, i64* %bits3, align 8, !dbg !7475
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !7476
  %7 = load i32, i32* %6, align 4, !dbg !7477
  %add = add i32 %7, 1, !dbg !7477
  store i32 %add, i32* %6, align 4, !dbg !7477
  br label %while.cond, !dbg !7467, !llvm.loop !7478

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !7480
  br label %return, !dbg !7480

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !7481
  %9 = load i32, i32* %8, align 4, !dbg !7482
  %add4 = add i32 %9, 64, !dbg !7483
  %sub = sub i32 %add4, 1, !dbg !7484
  %div = udiv i32 %sub, 64, !dbg !7485
  %mul = mul i32 %div, 64, !dbg !7486
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !7487
  store i32 %mul, i32* %10, align 4, !dbg !7488
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7489
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !7490
  %12 = load i32, i32* %word_no, align 8, !dbg !7491
  %inc = add i32 %12, 1, !dbg !7491
  store i32 %inc, i32* %word_no, align 8, !dbg !7491
  br label %while.body6, !dbg !7492

while.body6:                                      ; preds = %if.end, %while.end53
  br label %while.cond7, !dbg !7493

while.cond7:                                      ; preds = %if.end30, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7495
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !7496
  %14 = load i32, i32* %word_no8, align 8, !dbg !7496
  %cmp = icmp ne i32 %14, 2, !dbg !7497
  br i1 %cmp, label %while.body9, label %while.end34, !dbg !7493

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7498
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !7500
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !7500
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !7501
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7502
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !7503
  %18 = load i32, i32* %word_no11, align 8, !dbg !7503
  %idxprom = zext i32 %18 to i64, !dbg !7498
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !7498
  %19 = load i64, i64* %arrayidx, align 8, !dbg !7498
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7504
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !7505
  store i64 %19, i64* %bits12, align 8, !dbg !7506
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7507
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 1, !dbg !7509
  %22 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt2, align 8, !dbg !7509
  %tobool13 = icmp ne %struct.bitmap_element_def* %22, null, !dbg !7507
  br i1 %tobool13, label %land.lhs.true, label %if.end26, !dbg !7510

land.lhs.true:                                    ; preds = %while.body9
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7511
  %elt214 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 1, !dbg !7512
  %24 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt214, align 8, !dbg !7512
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %24, i32 0, i32 2, !dbg !7513
  %25 = load i32, i32* %indx, align 8, !dbg !7513
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7514
  %elt115 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 0, !dbg !7515
  %27 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt115, align 8, !dbg !7515
  %indx16 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %27, i32 0, i32 2, !dbg !7516
  %28 = load i32, i32* %indx16, align 8, !dbg !7516
  %cmp17 = icmp eq i32 %25, %28, !dbg !7517
  br i1 %cmp17, label %if.then18, label %if.end26, !dbg !7518

if.then18:                                        ; preds = %land.lhs.true
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7519
  %elt219 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 1, !dbg !7520
  %30 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt219, align 8, !dbg !7520
  %bits20 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %30, i32 0, i32 3, !dbg !7521
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7522
  %word_no21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 2, !dbg !7523
  %32 = load i32, i32* %word_no21, align 8, !dbg !7523
  %idxprom22 = zext i32 %32 to i64, !dbg !7519
  %arrayidx23 = getelementptr inbounds [2 x i64], [2 x i64]* %bits20, i64 0, i64 %idxprom22, !dbg !7519
  %33 = load i64, i64* %arrayidx23, align 8, !dbg !7519
  %neg = xor i64 %33, -1, !dbg !7524
  %34 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7525
  %bits24 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %34, i32 0, i32 3, !dbg !7526
  %35 = load i64, i64* %bits24, align 8, !dbg !7527
  %and25 = and i64 %35, %neg, !dbg !7527
  store i64 %and25, i64* %bits24, align 8, !dbg !7527
  br label %if.end26, !dbg !7525

if.end26:                                         ; preds = %if.then18, %land.lhs.true, %while.body9
  %36 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7528
  %bits27 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %36, i32 0, i32 3, !dbg !7530
  %37 = load i64, i64* %bits27, align 8, !dbg !7530
  %tobool28 = icmp ne i64 %37, 0, !dbg !7528
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !7531

if.then29:                                        ; preds = %if.end26
  br label %next_bit, !dbg !7532

if.end30:                                         ; preds = %if.end26
  %38 = load i32*, i32** %bit_no.addr, align 8, !dbg !7533
  %39 = load i32, i32* %38, align 4, !dbg !7534
  %add31 = add i32 %39, 64, !dbg !7534
  store i32 %add31, i32* %38, align 4, !dbg !7534
  %40 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7535
  %word_no32 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %40, i32 0, i32 2, !dbg !7536
  %41 = load i32, i32* %word_no32, align 8, !dbg !7537
  %inc33 = add i32 %41, 1, !dbg !7537
  store i32 %inc33, i32* %word_no32, align 8, !dbg !7537
  br label %while.cond7, !dbg !7493, !llvm.loop !7538

while.end34:                                      ; preds = %while.cond7
  %42 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7540
  %elt135 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %42, i32 0, i32 0, !dbg !7541
  %43 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt135, align 8, !dbg !7541
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %43, i32 0, i32 0, !dbg !7542
  %44 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !7542
  %45 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7543
  %elt136 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %45, i32 0, i32 0, !dbg !7544
  store %struct.bitmap_element_def* %44, %struct.bitmap_element_def** %elt136, align 8, !dbg !7545
  %46 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7546
  %elt137 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %46, i32 0, i32 0, !dbg !7548
  %47 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt137, align 8, !dbg !7548
  %tobool38 = icmp ne %struct.bitmap_element_def* %47, null, !dbg !7546
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !7549

if.then39:                                        ; preds = %while.end34
  store i8 0, i8* %retval, align 1, !dbg !7550
  br label %return, !dbg !7550

if.end40:                                         ; preds = %while.end34
  br label %while.cond41, !dbg !7551

while.cond41:                                     ; preds = %while.body49, %if.end40
  %48 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7552
  %elt242 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %48, i32 0, i32 1, !dbg !7553
  %49 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt242, align 8, !dbg !7553
  %tobool43 = icmp ne %struct.bitmap_element_def* %49, null, !dbg !7552
  br i1 %tobool43, label %land.rhs, label %land.end, !dbg !7554

land.rhs:                                         ; preds = %while.cond41
  %50 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7555
  %elt244 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %50, i32 0, i32 1, !dbg !7556
  %51 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt244, align 8, !dbg !7556
  %indx45 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %51, i32 0, i32 2, !dbg !7557
  %52 = load i32, i32* %indx45, align 8, !dbg !7557
  %53 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7558
  %elt146 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %53, i32 0, i32 0, !dbg !7559
  %54 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt146, align 8, !dbg !7559
  %indx47 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %54, i32 0, i32 2, !dbg !7560
  %55 = load i32, i32* %indx47, align 8, !dbg !7560
  %cmp48 = icmp ult i32 %52, %55, !dbg !7561
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond41
  %56 = phi i1 [ false, %while.cond41 ], [ %cmp48, %land.rhs ], !dbg !7562
  br i1 %56, label %while.body49, label %while.end53, !dbg !7551

while.body49:                                     ; preds = %land.end
  %57 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7563
  %elt250 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %57, i32 0, i32 1, !dbg !7564
  %58 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt250, align 8, !dbg !7564
  %next51 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %58, i32 0, i32 0, !dbg !7565
  %59 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next51, align 8, !dbg !7565
  %60 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7566
  %elt252 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %60, i32 0, i32 1, !dbg !7567
  store %struct.bitmap_element_def* %59, %struct.bitmap_element_def** %elt252, align 8, !dbg !7568
  br label %while.cond41, !dbg !7551, !llvm.loop !7569

while.end53:                                      ; preds = %land.end
  %61 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7570
  %elt154 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %61, i32 0, i32 0, !dbg !7571
  %62 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt154, align 8, !dbg !7571
  %indx55 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %62, i32 0, i32 2, !dbg !7572
  %63 = load i32, i32* %indx55, align 8, !dbg !7572
  %mul56 = mul i32 %63, 128, !dbg !7573
  %64 = load i32*, i32** %bit_no.addr, align 8, !dbg !7574
  store i32 %mul56, i32* %64, align 4, !dbg !7575
  %65 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7576
  %word_no57 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %65, i32 0, i32 2, !dbg !7577
  store i32 0, i32* %word_no57, align 8, !dbg !7578
  br label %while.body6, !dbg !7492, !llvm.loop !7579

return:                                           ; preds = %if.then39, %while.end
  %66 = load i8, i8* %retval, align 1, !dbg !7581
  ret i8 %66, !dbg !7581
}

declare dso_local i32 @canon_true_dependence(%struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i8 (%struct.rtx_def*, i8)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @oprs_not_set_p(%struct.rtx_def* %x, %struct.rtx_def* %insn) #0 !dbg !7582 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7583, metadata !DIExpression()), !dbg !7584
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7585, metadata !DIExpression()), !dbg !7586
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7587, metadata !DIExpression()), !dbg !7588
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7589, metadata !DIExpression()), !dbg !7590
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7591, metadata !DIExpression()), !dbg !7592
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !7593, metadata !DIExpression()), !dbg !7594
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7595
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !7597
  br i1 %cmp, label %if.then, label %if.end, !dbg !7598

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !7599
  br label %return, !dbg !7599

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7600
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !7600
  %bf.load = load i32, i32* %2, align 8, !dbg !7600
  %bf.clear = and i32 %bf.load, 65535, !dbg !7600
  store i32 %bf.clear, i32* %code, align 4, !dbg !7601
  %3 = load i32, i32* %code, align 4, !dbg !7602
  switch i32 %3, label %sw.default [
    i32 36, label %sw.bb
    i32 46, label %sw.bb
    i32 35, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 45, label %sw.bb
    i32 44, label %sw.bb
    i32 20, label %sw.bb
    i32 21, label %sw.bb
    i32 43, label %sw.bb1
    i32 37, label %sw.bb11
  ], !dbg !7603

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  store i32 1, i32* %retval, align 4, !dbg !7604
  br label %return, !dbg !7604

sw.bb1:                                           ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7606
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7606
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7606
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7606
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7606
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7606
  %6 = load %struct.df*, %struct.df** @df, align 8, !dbg !7608
  %insns = getelementptr inbounds %struct.df, %struct.df* %6, i32 0, i32 10, !dbg !7608
  %7 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !7608
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7608
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7608
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7608
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 0, !dbg !7608
  %rt_int = bitcast %union.rtunion_def* %arrayidx4 to i32*, !dbg !7608
  %9 = load i32, i32* %rt_int, align 8, !dbg !7608
  %idxprom = sext i32 %9 to i64, !dbg !7608
  %arrayidx5 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %7, i64 %idxprom, !dbg !7608
  %10 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx5, align 8, !dbg !7608
  %luid = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %10, i32 0, i32 5, !dbg !7608
  %11 = load i32, i32* %luid, align 8, !dbg !7608
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7609
  %call = call i32 @load_killed_in_block_p(%struct.basic_block_def* %5, i32 %11, %struct.rtx_def* %12, i32 0), !dbg !7610
  %tobool = icmp ne i32 %call, 0, !dbg !7610
  br i1 %tobool, label %if.then6, label %if.else, !dbg !7611

if.then6:                                         ; preds = %sw.bb1
  store i32 0, i32* %retval, align 4, !dbg !7612
  br label %return, !dbg !7612

if.else:                                          ; preds = %sw.bb1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7613
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !7613
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !7613
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 0, !dbg !7613
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !7613
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7613
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7614
  %call10 = call i32 @oprs_not_set_p(%struct.rtx_def* %14, %struct.rtx_def* %15), !dbg !7615
  store i32 %call10, i32* %retval, align 4, !dbg !7616
  br label %return, !dbg !7616

sw.bb11:                                          ; preds = %if.end
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @reg_set_bitmap, align 8, !dbg !7617
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7617
  %call12 = call i32 @rhs_regno(%struct.rtx_def* %17), !dbg !7617
  %call13 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %16, i32 %call12), !dbg !7617
  %tobool14 = icmp ne i32 %call13, 0, !dbg !7618
  %lnot = xor i1 %tobool14, true, !dbg !7618
  %lnot.ext = zext i1 %lnot to i32, !dbg !7618
  store i32 %lnot.ext, i32* %retval, align 4, !dbg !7619
  br label %return, !dbg !7619

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !7620

sw.epilog:                                        ; preds = %sw.default
  %18 = load i32, i32* %code, align 4, !dbg !7621
  %idxprom15 = sext i32 %18 to i64, !dbg !7621
  %arrayidx16 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom15, !dbg !7621
  %19 = load i8, i8* %arrayidx16, align 1, !dbg !7621
  %conv = zext i8 %19 to i32, !dbg !7621
  %sub = sub nsw i32 %conv, 1, !dbg !7623
  store i32 %sub, i32* %i, align 4, !dbg !7624
  %20 = load i32, i32* %code, align 4, !dbg !7625
  %idxprom17 = sext i32 %20 to i64, !dbg !7625
  %arrayidx18 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom17, !dbg !7625
  %21 = load i8*, i8** %arrayidx18, align 8, !dbg !7625
  store i8* %21, i8** %fmt, align 8, !dbg !7626
  br label %for.cond, !dbg !7627

for.cond:                                         ; preds = %for.inc74, %sw.epilog
  %22 = load i32, i32* %i, align 4, !dbg !7628
  %cmp19 = icmp sge i32 %22, 0, !dbg !7630
  br i1 %cmp19, label %for.body, label %for.end75, !dbg !7631

for.body:                                         ; preds = %for.cond
  %23 = load i8*, i8** %fmt, align 8, !dbg !7632
  %24 = load i32, i32* %i, align 4, !dbg !7635
  %idxprom21 = sext i32 %24 to i64, !dbg !7632
  %arrayidx22 = getelementptr inbounds i8, i8* %23, i64 %idxprom21, !dbg !7632
  %25 = load i8, i8* %arrayidx22, align 1, !dbg !7632
  %conv23 = sext i8 %25 to i32, !dbg !7632
  %cmp24 = icmp eq i32 %conv23, 101, !dbg !7636
  br i1 %cmp24, label %if.then26, label %if.else46, !dbg !7637

if.then26:                                        ; preds = %for.body
  %26 = load i32, i32* %i, align 4, !dbg !7638
  %cmp27 = icmp eq i32 %26, 0, !dbg !7641
  br i1 %cmp27, label %if.then29, label %if.end36, !dbg !7642

if.then29:                                        ; preds = %if.then26
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7643
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !7643
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !7643
  %28 = load i32, i32* %i, align 4, !dbg !7643
  %idxprom32 = sext i32 %28 to i64, !dbg !7643
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 %idxprom32, !dbg !7643
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !7643
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !7643
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7644
  %call35 = call i32 @oprs_not_set_p(%struct.rtx_def* %29, %struct.rtx_def* %30), !dbg !7645
  store i32 %call35, i32* %retval, align 4, !dbg !7646
  br label %return, !dbg !7646

if.end36:                                         ; preds = %if.then26
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7647
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7647
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !7647
  %32 = load i32, i32* %i, align 4, !dbg !7647
  %idxprom39 = sext i32 %32 to i64, !dbg !7647
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 %idxprom39, !dbg !7647
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !7647
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx41, align 8, !dbg !7647
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7649
  %call42 = call i32 @oprs_not_set_p(%struct.rtx_def* %33, %struct.rtx_def* %34), !dbg !7650
  %tobool43 = icmp ne i32 %call42, 0, !dbg !7650
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !7651

if.then44:                                        ; preds = %if.end36
  store i32 0, i32* %retval, align 4, !dbg !7652
  br label %return, !dbg !7652

if.end45:                                         ; preds = %if.end36
  br label %if.end73, !dbg !7653

if.else46:                                        ; preds = %for.body
  %35 = load i8*, i8** %fmt, align 8, !dbg !7654
  %36 = load i32, i32* %i, align 4, !dbg !7656
  %idxprom47 = sext i32 %36 to i64, !dbg !7654
  %arrayidx48 = getelementptr inbounds i8, i8* %35, i64 %idxprom47, !dbg !7654
  %37 = load i8, i8* %arrayidx48, align 1, !dbg !7654
  %conv49 = sext i8 %37 to i32, !dbg !7654
  %cmp50 = icmp eq i32 %conv49, 69, !dbg !7657
  br i1 %cmp50, label %if.then52, label %if.end72, !dbg !7658

if.then52:                                        ; preds = %if.else46
  store i32 0, i32* %j, align 4, !dbg !7659
  br label %for.cond53, !dbg !7661

for.cond53:                                       ; preds = %for.inc, %if.then52
  %38 = load i32, i32* %j, align 4, !dbg !7662
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7664
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !7664
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !7664
  %40 = load i32, i32* %i, align 4, !dbg !7664
  %idxprom56 = sext i32 %40 to i64, !dbg !7664
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 %idxprom56, !dbg !7664
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtvec_def**, !dbg !7664
  %41 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7664
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %41, i32 0, i32 0, !dbg !7664
  %42 = load i32, i32* %num_elem, align 8, !dbg !7664
  %cmp58 = icmp slt i32 %38, %42, !dbg !7665
  br i1 %cmp58, label %for.body60, label %for.end, !dbg !7666

for.body60:                                       ; preds = %for.cond53
  %43 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7667
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !7667
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !7667
  %44 = load i32, i32* %i, align 4, !dbg !7667
  %idxprom63 = sext i32 %44 to i64, !dbg !7667
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 %idxprom63, !dbg !7667
  %rt_rtvec65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtvec_def**, !dbg !7667
  %45 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec65, align 8, !dbg !7667
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %45, i32 0, i32 1, !dbg !7667
  %46 = load i32, i32* %j, align 4, !dbg !7667
  %idxprom66 = sext i32 %46 to i64, !dbg !7667
  %arrayidx67 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom66, !dbg !7667
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx67, align 8, !dbg !7667
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7669
  %call68 = call i32 @oprs_not_set_p(%struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !7670
  %tobool69 = icmp ne i32 %call68, 0, !dbg !7670
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !7671

if.then70:                                        ; preds = %for.body60
  store i32 0, i32* %retval, align 4, !dbg !7672
  br label %return, !dbg !7672

if.end71:                                         ; preds = %for.body60
  br label %for.inc, !dbg !7673

for.inc:                                          ; preds = %if.end71
  %49 = load i32, i32* %j, align 4, !dbg !7674
  %inc = add nsw i32 %49, 1, !dbg !7674
  store i32 %inc, i32* %j, align 4, !dbg !7674
  br label %for.cond53, !dbg !7675, !llvm.loop !7676

for.end:                                          ; preds = %for.cond53
  br label %if.end72, !dbg !7677

if.end72:                                         ; preds = %for.end, %if.else46
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end45
  br label %for.inc74, !dbg !7678

for.inc74:                                        ; preds = %if.end73
  %50 = load i32, i32* %i, align 4, !dbg !7679
  %dec = add nsw i32 %50, -1, !dbg !7679
  store i32 %dec, i32* %i, align 4, !dbg !7679
  br label %for.cond, !dbg !7680, !llvm.loop !7681

for.end75:                                        ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !7683
  br label %return, !dbg !7683

return:                                           ; preds = %for.end75, %if.then70, %if.then44, %if.then29, %sw.bb11, %if.else, %if.then6, %sw.bb, %if.then
  %51 = load i32, i32* %retval, align 4, !dbg !7684
  ret i32 %51, !dbg !7684
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr* @find_avail_set(i32 %regno, %struct.rtx_def* %insn) #0 !dbg !7685 {
entry:
  %regno.addr = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %set1 = alloca %struct.expr*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.expr*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !7688, metadata !DIExpression()), !dbg !7689
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7690, metadata !DIExpression()), !dbg !7691
  call void @llvm.dbg.declare(metadata %struct.expr** %set1, metadata !7692, metadata !DIExpression()), !dbg !7693
  store %struct.expr* null, %struct.expr** %set1, align 8, !dbg !7693
  br label %while.body, !dbg !7694

while.body:                                       ; preds = %entry, %if.end27
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !7695, metadata !DIExpression()), !dbg !7697
  call void @llvm.dbg.declare(metadata %struct.expr** %set, metadata !7698, metadata !DIExpression()), !dbg !7699
  %0 = load i32, i32* %regno.addr, align 4, !dbg !7700
  %call = call %struct.expr* @lookup_set(i32 %0, %struct.hash_table_d* @set_hash_table), !dbg !7701
  store %struct.expr* %call, %struct.expr** %set, align 8, !dbg !7699
  br label %while.cond1, !dbg !7702

while.cond1:                                      ; preds = %if.end, %while.body
  %1 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7703
  %tobool = icmp ne %struct.expr* %1, null, !dbg !7702
  br i1 %tobool, label %while.body2, label %while.end, !dbg !7702

while.body2:                                      ; preds = %while.cond1
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_avin, align 8, !dbg !7704
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7704
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7704
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7704
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7704
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7704
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7704
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !7704
  %5 = load i32, i32* %index, align 8, !dbg !7704
  %idxprom = sext i32 %5 to i64, !dbg !7704
  %arrayidx3 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %2, i64 %idxprom, !dbg !7704
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx3, align 8, !dbg !7704
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %6, i32 0, i32 3, !dbg !7704
  %7 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7704
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %7, i32 0, i32 1, !dbg !7704
  %8 = load i32, i32* %bitmap_index, align 8, !dbg !7704
  %div = udiv i32 %8, 64, !dbg !7704
  %idxprom4 = zext i32 %div to i64, !dbg !7704
  %arrayidx5 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom4, !dbg !7704
  %9 = load i64, i64* %arrayidx5, align 8, !dbg !7704
  %10 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7704
  %bitmap_index6 = getelementptr inbounds %struct.expr, %struct.expr* %10, i32 0, i32 1, !dbg !7704
  %11 = load i32, i32* %bitmap_index6, align 8, !dbg !7704
  %rem = urem i32 %11, 64, !dbg !7704
  %sh_prom = zext i32 %rem to i64, !dbg !7704
  %shr = lshr i64 %9, %sh_prom, !dbg !7704
  %and = and i64 %shr, 1, !dbg !7704
  %tobool7 = icmp ne i64 %and, 0, !dbg !7704
  br i1 %tobool7, label %if.then, label %if.end, !dbg !7707

if.then:                                          ; preds = %while.body2
  br label %while.end, !dbg !7708

if.end:                                           ; preds = %while.body2
  %12 = load i32, i32* %regno.addr, align 4, !dbg !7709
  %13 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7710
  %call8 = call %struct.expr* @next_set(i32 %12, %struct.expr* %13), !dbg !7711
  store %struct.expr* %call8, %struct.expr** %set, align 8, !dbg !7712
  br label %while.cond1, !dbg !7702, !llvm.loop !7713

while.end:                                        ; preds = %if.then, %while.cond1
  %14 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7715
  %cmp = icmp eq %struct.expr* %14, null, !dbg !7717
  br i1 %cmp, label %if.then9, label %if.end10, !dbg !7718

if.then9:                                         ; preds = %while.end
  br label %while.end29, !dbg !7719

if.end10:                                         ; preds = %while.end
  %15 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7720
  %expr = getelementptr inbounds %struct.expr, %struct.expr* %15, i32 0, i32 0, !dbg !7720
  %16 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !7720
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !7720
  %bf.load = load i32, i32* %17, align 8, !dbg !7720
  %bf.clear = and i32 %bf.load, 65535, !dbg !7720
  %cmp11 = icmp eq i32 %bf.clear, 23, !dbg !7720
  br i1 %cmp11, label %cond.false, label %cond.true, !dbg !7720

cond.true:                                        ; preds = %if.end10
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 2334, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !7720
  br label %cond.end, !dbg !7720

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !7720

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7720
  %18 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7721
  %expr12 = getelementptr inbounds %struct.expr, %struct.expr* %18, i32 0, i32 0, !dbg !7721
  %19 = load %struct.rtx_def*, %struct.rtx_def** %expr12, align 8, !dbg !7721
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !7721
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7721
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 1, !dbg !7721
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !7721
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7721
  store %struct.rtx_def* %20, %struct.rtx_def** %src, align 8, !dbg !7722
  %21 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !7723
  %call16 = call zeroext i8 @gcse_constant_p(%struct.rtx_def* %21), !dbg !7725
  %conv = zext i8 %call16 to i32, !dbg !7725
  %tobool17 = icmp ne i32 %conv, 0, !dbg !7725
  br i1 %tobool17, label %if.then20, label %lor.lhs.false, !dbg !7726

lor.lhs.false:                                    ; preds = %cond.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !7727
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7728
  %call18 = call i32 @oprs_not_set_p(%struct.rtx_def* %22, %struct.rtx_def* %23), !dbg !7729
  %tobool19 = icmp ne i32 %call18, 0, !dbg !7729
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !7730

if.then20:                                        ; preds = %lor.lhs.false, %cond.end
  %24 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7731
  store %struct.expr* %24, %struct.expr** %set1, align 8, !dbg !7732
  br label %if.end21, !dbg !7733

if.end21:                                         ; preds = %if.then20, %lor.lhs.false
  %25 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !7734
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !7734
  %bf.load22 = load i32, i32* %26, align 8, !dbg !7734
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !7734
  %cmp24 = icmp eq i32 %bf.clear23, 37, !dbg !7734
  br i1 %cmp24, label %if.end27, label %if.then26, !dbg !7736

if.then26:                                        ; preds = %if.end21
  br label %while.end29, !dbg !7737

if.end27:                                         ; preds = %if.end21
  %27 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !7738
  %call28 = call i32 @rhs_regno(%struct.rtx_def* %27), !dbg !7738
  store i32 %call28, i32* %regno.addr, align 4, !dbg !7739
  br label %while.body, !dbg !7694, !llvm.loop !7740

while.end29:                                      ; preds = %if.then26, %if.then9
  %28 = load %struct.expr*, %struct.expr** %set1, align 8, !dbg !7742
  ret %struct.expr* %28, !dbg !7743
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr* @lookup_set(i32 %regno, %struct.hash_table_d* %table) #0 !dbg !7744 {
entry:
  %regno.addr = alloca i32, align 4
  %table.addr = alloca %struct.hash_table_d*, align 8
  %hash = alloca i32, align 4
  %expr = alloca %struct.expr*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !7747, metadata !DIExpression()), !dbg !7748
  store %struct.hash_table_d* %table, %struct.hash_table_d** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table_d** %table.addr, metadata !7749, metadata !DIExpression()), !dbg !7750
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !7751, metadata !DIExpression()), !dbg !7752
  %0 = load i32, i32* %regno.addr, align 4, !dbg !7753
  %1 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !7754
  %size = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %1, i32 0, i32 1, !dbg !7755
  %2 = load i32, i32* %size, align 8, !dbg !7755
  %call = call i32 @hash_set(i32 %0, i32 %2), !dbg !7756
  store i32 %call, i32* %hash, align 4, !dbg !7752
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !7757, metadata !DIExpression()), !dbg !7758
  %3 = load %struct.hash_table_d*, %struct.hash_table_d** %table.addr, align 8, !dbg !7759
  %table1 = getelementptr inbounds %struct.hash_table_d, %struct.hash_table_d* %3, i32 0, i32 0, !dbg !7760
  %4 = load %struct.expr**, %struct.expr*** %table1, align 8, !dbg !7760
  %5 = load i32, i32* %hash, align 4, !dbg !7761
  %idxprom = zext i32 %5 to i64, !dbg !7759
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %4, i64 %idxprom, !dbg !7759
  %6 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !7759
  store %struct.expr* %6, %struct.expr** %expr, align 8, !dbg !7762
  br label %while.cond, !dbg !7763

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !7764
  %tobool = icmp ne %struct.expr* %7, null, !dbg !7764
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7765

land.rhs:                                         ; preds = %while.cond
  %8 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !7766
  %expr2 = getelementptr inbounds %struct.expr, %struct.expr* %8, i32 0, i32 0, !dbg !7766
  %9 = load %struct.rtx_def*, %struct.rtx_def** %expr2, align 8, !dbg !7766
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7766
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7766
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7766
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7766
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7766
  %call4 = call i32 @rhs_regno(%struct.rtx_def* %10), !dbg !7766
  %11 = load i32, i32* %regno.addr, align 4, !dbg !7767
  %cmp = icmp ne i32 %call4, %11, !dbg !7768
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !7769
  br i1 %12, label %while.body, label %while.end, !dbg !7763

while.body:                                       ; preds = %land.end
  %13 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !7770
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %13, i32 0, i32 2, !dbg !7771
  %14 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !7771
  store %struct.expr* %14, %struct.expr** %expr, align 8, !dbg !7772
  br label %while.cond, !dbg !7763, !llvm.loop !7773

while.end:                                        ; preds = %land.end
  %15 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !7774
  ret %struct.expr* %15, !dbg !7775
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr* @next_set(i32 %regno, %struct.expr* %expr) #0 !dbg !7776 {
entry:
  %regno.addr = alloca i32, align 4
  %expr.addr = alloca %struct.expr*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !7779, metadata !DIExpression()), !dbg !7780
  store %struct.expr* %expr, %struct.expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr** %expr.addr, metadata !7781, metadata !DIExpression()), !dbg !7782
  br label %do.body, !dbg !7783

do.body:                                          ; preds = %land.end, %entry
  %0 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !7784
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %0, i32 0, i32 2, !dbg !7785
  %1 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !7785
  store %struct.expr* %1, %struct.expr** %expr.addr, align 8, !dbg !7786
  br label %do.cond, !dbg !7787

do.cond:                                          ; preds = %do.body
  %2 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !7788
  %tobool = icmp ne %struct.expr* %2, null, !dbg !7788
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7789

land.rhs:                                         ; preds = %do.cond
  %3 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !7790
  %expr1 = getelementptr inbounds %struct.expr, %struct.expr* %3, i32 0, i32 0, !dbg !7790
  %4 = load %struct.rtx_def*, %struct.rtx_def** %expr1, align 8, !dbg !7790
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7790
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7790
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7790
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7790
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7790
  %call = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !7790
  %6 = load i32, i32* %regno.addr, align 4, !dbg !7791
  %cmp = icmp ne i32 %call, %6, !dbg !7792
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %7 = phi i1 [ false, %do.cond ], [ %cmp, %land.rhs ], !dbg !7793
  br i1 %7, label %do.body, label %do.end, !dbg !7787, !llvm.loop !7794

do.end:                                           ; preds = %land.end
  %8 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !7796
  ret %struct.expr* %8, !dbg !7797
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_set(%struct.rtx_def* %pat, %struct.rtx_def* %insn) #0 !dbg !7798 {
entry:
  %pat.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !7801, metadata !DIExpression()), !dbg !7802
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7803, metadata !DIExpression()), !dbg !7804
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !7805, metadata !DIExpression()), !dbg !7806
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7807
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7807
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7807
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7807
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7807
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7807
  store %struct.rtx_def* %1, %struct.rtx_def** %dest, align 8, !dbg !7806
  br label %while.cond, !dbg !7808

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7809
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !7809
  %bf.load = load i32, i32* %3, align 8, !dbg !7809
  %bf.clear = and i32 %bf.load, 65535, !dbg !7809
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !7810
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !7811

lor.lhs.false:                                    ; preds = %while.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7812
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7812
  %bf.load1 = load i32, i32* %5, align 8, !dbg !7812
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !7812
  %cmp3 = icmp eq i32 %bf.clear2, 120, !dbg !7813
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !7814

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7815
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !7815
  %bf.load4 = load i32, i32* %7, align 8, !dbg !7815
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !7815
  %cmp6 = icmp eq i32 %bf.clear5, 40, !dbg !7816
  br label %lor.end, !dbg !7814

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp6, %lor.rhs ]
  br i1 %8, label %while.body, label %while.end, !dbg !7808

while.body:                                       ; preds = %lor.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7817
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7817
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !7817
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 0, !dbg !7817
  %rt_rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !7817
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx10, align 8, !dbg !7817
  store %struct.rtx_def* %10, %struct.rtx_def** %dest, align 8, !dbg !7818
  br label %while.cond, !dbg !7808, !llvm.loop !7819

while.end:                                        ; preds = %lor.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7820
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !7820
  %bf.load11 = load i32, i32* %12, align 8, !dbg !7820
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !7820
  %cmp13 = icmp eq i32 %bf.clear12, 37, !dbg !7820
  br i1 %cmp13, label %if.then, label %if.else, !dbg !7822

if.then:                                          ; preds = %while.end
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @reg_set_bitmap, align 8, !dbg !7823
  %14 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7823
  %call = call i32 @rhs_regno(%struct.rtx_def* %14), !dbg !7823
  %call14 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %13, i32 %call), !dbg !7823
  br label %if.end19, !dbg !7823

if.else:                                          ; preds = %while.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7824
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !7824
  %bf.load15 = load i32, i32* %16, align 8, !dbg !7824
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !7824
  %cmp17 = icmp eq i32 %bf.clear16, 43, !dbg !7824
  br i1 %cmp17, label %if.then18, label %if.end, !dbg !7826

if.then18:                                        ; preds = %if.else
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7827
  call void @record_last_mem_set_info(%struct.rtx_def* %17), !dbg !7828
  br label %if.end, !dbg !7828

if.end:                                           ; preds = %if.then18, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7829
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7829
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !7829
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !7829
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !7829
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !7829
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !7829
  %bf.load24 = load i32, i32* %20, align 8, !dbg !7829
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !7829
  %cmp26 = icmp eq i32 %bf.clear25, 26, !dbg !7831
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !7832

if.then27:                                        ; preds = %if.end19
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7833
  call void @mark_call(%struct.rtx_def* %21), !dbg !7834
  br label %if.end28, !dbg !7834

if.end28:                                         ; preds = %if.then27, %if.end19
  ret void, !dbg !7835
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_clobber(%struct.rtx_def* %pat, %struct.rtx_def* %insn) #0 !dbg !7836 {
entry:
  %pat.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %clob = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !7837, metadata !DIExpression()), !dbg !7838
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7839, metadata !DIExpression()), !dbg !7840
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %clob, metadata !7841, metadata !DIExpression()), !dbg !7842
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7843
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7843
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7843
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7843
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7843
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7843
  store %struct.rtx_def* %1, %struct.rtx_def** %clob, align 8, !dbg !7842
  br label %while.cond, !dbg !7844

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8, !dbg !7845
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !7845
  %bf.load = load i32, i32* %3, align 8, !dbg !7845
  %bf.clear = and i32 %bf.load, 65535, !dbg !7845
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !7846
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7847

lor.rhs:                                          ; preds = %while.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8, !dbg !7848
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7848
  %bf.load1 = load i32, i32* %5, align 8, !dbg !7848
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !7848
  %cmp3 = icmp eq i32 %bf.clear2, 40, !dbg !7849
  br label %lor.end, !dbg !7847

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %6 = phi i1 [ true, %while.cond ], [ %cmp3, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end, !dbg !7844

while.body:                                       ; preds = %lor.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8, !dbg !7850
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !7850
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !7850
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 0, !dbg !7850
  %rt_rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !7850
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx7, align 8, !dbg !7850
  store %struct.rtx_def* %8, %struct.rtx_def** %clob, align 8, !dbg !7851
  br label %while.cond, !dbg !7844, !llvm.loop !7852

while.end:                                        ; preds = %lor.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8, !dbg !7853
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !7853
  %bf.load8 = load i32, i32* %10, align 8, !dbg !7853
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !7853
  %cmp10 = icmp eq i32 %bf.clear9, 37, !dbg !7853
  br i1 %cmp10, label %if.then, label %if.else, !dbg !7855

if.then:                                          ; preds = %while.end
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @reg_set_bitmap, align 8, !dbg !7856
  %12 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8, !dbg !7856
  %call = call i32 @rhs_regno(%struct.rtx_def* %12), !dbg !7856
  %call11 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %call), !dbg !7856
  br label %if.end, !dbg !7856

if.else:                                          ; preds = %while.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7857
  call void @record_last_mem_set_info(%struct.rtx_def* %13), !dbg !7858
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7859
}

declare dso_local zeroext i8 @mark_dfs_back_edges() #2

declare dso_local i32 @computed_jump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @bypass_block(%struct.basic_block_def* %bb, %struct.rtx_def* %setcc, %struct.rtx_def* %jump) #0 !dbg !7860 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %setcc.addr = alloca %struct.rtx_def*, align 8
  %jump.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %edest = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  %change = alloca i32, align 4
  %may_be_loop_header = alloca i32, align 4
  %removed_p = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp11 = alloca %struct.edge_iterator, align 8
  %reg_used = alloca %struct.reg_use*, align 8
  %regno = alloca i32, align 4
  %dest = alloca %struct.basic_block_def*, align 8
  %old_dest = alloca %struct.basic_block_def*, align 8
  %set = alloca %struct.expr*, align 8
  %src37 = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7863, metadata !DIExpression()), !dbg !7864
  store %struct.rtx_def* %setcc, %struct.rtx_def** %setcc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setcc.addr, metadata !7865, metadata !DIExpression()), !dbg !7866
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !7867, metadata !DIExpression()), !dbg !7868
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7869, metadata !DIExpression()), !dbg !7870
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !7871, metadata !DIExpression()), !dbg !7872
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7873, metadata !DIExpression()), !dbg !7874
  call void @llvm.dbg.declare(metadata %struct.edge_def** %edest, metadata !7875, metadata !DIExpression()), !dbg !7876
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7877, metadata !DIExpression()), !dbg !7878
  call void @llvm.dbg.declare(metadata i32* %change, metadata !7879, metadata !DIExpression()), !dbg !7880
  call void @llvm.dbg.declare(metadata i32* %may_be_loop_header, metadata !7881, metadata !DIExpression()), !dbg !7882
  call void @llvm.dbg.declare(metadata i32* %removed_p, metadata !7883, metadata !DIExpression()), !dbg !7884
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7885, metadata !DIExpression()), !dbg !7886
  %0 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !7887
  %cmp = icmp ne %struct.rtx_def* %0, null, !dbg !7888
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7889

cond.true:                                        ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !7890
  br label %cond.end, !dbg !7889

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !7891
  br label %cond.end, !dbg !7889

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %1, %cond.true ], [ %2, %cond.false ], !dbg !7889
  store %struct.rtx_def* %cond, %struct.rtx_def** %insn, align 8, !dbg !7892
  store i32 0, i32* @reg_use_count, align 4, !dbg !7893
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7894
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7894
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7894
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7894
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7894
  call void @note_uses(%struct.rtx_def** %rt_rtx, void (%struct.rtx_def**, i8*)* @find_used_regs, i8* null), !dbg !7895
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7896
  %call = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %4), !dbg !7897
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !7898
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7899
  %tobool = icmp ne %struct.rtx_def* %5, null, !dbg !7899
  br i1 %tobool, label %if.then, label %if.end, !dbg !7901

if.then:                                          ; preds = %cond.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7902
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7902
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7902
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !7902
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7902
  call void @find_used_regs(%struct.rtx_def** %rt_rtx4, i8* null), !dbg !7903
  br label %if.end, !dbg !7903

if.end:                                           ; preds = %if.then, %cond.end
  store i32 0, i32* %may_be_loop_header, align 4, !dbg !7904
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7905
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 0, !dbg !7905
  %call5 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !7905
  %8 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7905
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7905
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call5, 0, !dbg !7905
  store i32 %10, i32* %9, align 8, !dbg !7905
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7905
  %12 = extractvalue { i32, %struct.VEC_edge_gc** } %call5, 1, !dbg !7905
  store %struct.VEC_edge_gc** %12, %struct.VEC_edge_gc*** %11, align 8, !dbg !7905
  %13 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7905
  %14 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7905
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !7905
  br label %for.cond, !dbg !7905

for.cond:                                         ; preds = %for.inc, %if.end
  %15 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7907
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 0, !dbg !7907
  %17 = load i32, i32* %16, align 8, !dbg !7907
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 1, !dbg !7907
  %19 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %18, align 8, !dbg !7907
  %call6 = call zeroext i8 @ei_cond(i32 %17, %struct.VEC_edge_gc** %19, %struct.edge_def** %e), !dbg !7907
  %tobool7 = icmp ne i8 %call6, 0, !dbg !7905
  br i1 %tobool7, label %for.body, label %for.end, !dbg !7905

for.body:                                         ; preds = %for.cond
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7909
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 7, !dbg !7911
  %21 = load i32, i32* %flags, align 8, !dbg !7911
  %and = and i32 %21, 32, !dbg !7912
  %tobool8 = icmp ne i32 %and, 0, !dbg !7912
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !7913

if.then9:                                         ; preds = %for.body
  store i32 1, i32* %may_be_loop_header, align 4, !dbg !7914
  br label %for.end, !dbg !7916

if.end10:                                         ; preds = %for.body
  br label %for.inc, !dbg !7917

for.inc:                                          ; preds = %if.end10
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7907
  br label %for.cond, !dbg !7907, !llvm.loop !7918

for.end:                                          ; preds = %if.then9, %for.cond
  store i32 0, i32* %change, align 4, !dbg !7920
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7921
  %preds12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 0, !dbg !7921
  %call13 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds12), !dbg !7921
  %23 = bitcast %struct.edge_iterator* %tmp11 to { i32, %struct.VEC_edge_gc** }*, !dbg !7921
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 0, !dbg !7921
  %25 = extractvalue { i32, %struct.VEC_edge_gc** } %call13, 0, !dbg !7921
  store i32 %25, i32* %24, align 8, !dbg !7921
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 1, !dbg !7921
  %27 = extractvalue { i32, %struct.VEC_edge_gc** } %call13, 1, !dbg !7921
  store %struct.VEC_edge_gc** %27, %struct.VEC_edge_gc*** %26, align 8, !dbg !7921
  %28 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7921
  %29 = bitcast %struct.edge_iterator* %tmp11 to i8*, !dbg !7921
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false), !dbg !7921
  br label %for.cond14, !dbg !7923

for.cond14:                                       ; preds = %if.end219, %if.then30, %if.then24, %if.then21, %for.end
  %30 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7924
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %30, i32 0, i32 0, !dbg !7924
  %32 = load i32, i32* %31, align 8, !dbg !7924
  %33 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %30, i32 0, i32 1, !dbg !7924
  %34 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %33, align 8, !dbg !7924
  %call15 = call %struct.edge_def* @ei_safe_edge(i32 %32, %struct.VEC_edge_gc** %34), !dbg !7924
  store %struct.edge_def* %call15, %struct.edge_def** %e, align 8, !dbg !7926
  %tobool16 = icmp ne %struct.edge_def* %call15, null, !dbg !7927
  br i1 %tobool16, label %for.body17, label %for.end220, !dbg !7927

for.body17:                                       ; preds = %for.cond14
  store i32 0, i32* %removed_p, align 4, !dbg !7928
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7930
  %flags18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 7, !dbg !7932
  %36 = load i32, i32* %flags18, align 8, !dbg !7932
  %and19 = and i32 %36, 14, !dbg !7933
  %tobool20 = icmp ne i32 %and19, 0, !dbg !7933
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !7934

if.then21:                                        ; preds = %for.body17
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7935
  br label %for.cond14, !dbg !7937, !llvm.loop !7938

if.end22:                                         ; preds = %for.body17
  %37 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7940
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 0, !dbg !7942
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7942
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 9, !dbg !7943
  %39 = load i32, i32* %index, align 8, !dbg !7943
  %40 = load i32, i32* @bypass_last_basic_block, align 4, !dbg !7944
  %cmp23 = icmp sge i32 %39, %40, !dbg !7945
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !7946

if.then24:                                        ; preds = %if.end22
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7947
  br label %for.cond14, !dbg !7949, !llvm.loop !7938

if.end25:                                         ; preds = %if.end22
  %41 = load i32, i32* %may_be_loop_header, align 4, !dbg !7950
  %tobool26 = icmp ne i32 %41, 0, !dbg !7950
  br i1 %tobool26, label %land.lhs.true, label %if.end31, !dbg !7952

land.lhs.true:                                    ; preds = %if.end25
  %42 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7953
  %flags27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %42, i32 0, i32 7, !dbg !7954
  %43 = load i32, i32* %flags27, align 8, !dbg !7954
  %and28 = and i32 %43, 32, !dbg !7955
  %tobool29 = icmp ne i32 %and28, 0, !dbg !7955
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !7956

if.then30:                                        ; preds = %land.lhs.true
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7957
  br label %for.cond14, !dbg !7959, !llvm.loop !7938

if.end31:                                         ; preds = %land.lhs.true, %if.end25
  store i32 0, i32* %i, align 4, !dbg !7960
  br label %for.cond32, !dbg !7962

for.cond32:                                       ; preds = %for.inc215, %if.end31
  %44 = load i32, i32* %i, align 4, !dbg !7963
  %45 = load i32, i32* @reg_use_count, align 4, !dbg !7965
  %cmp33 = icmp slt i32 %44, %45, !dbg !7966
  br i1 %cmp33, label %for.body34, label %for.end216, !dbg !7967

for.body34:                                       ; preds = %for.cond32
  call void @llvm.dbg.declare(metadata %struct.reg_use** %reg_used, metadata !7968, metadata !DIExpression()), !dbg !7970
  %46 = load i32, i32* %i, align 4, !dbg !7971
  %idxprom = sext i32 %46 to i64, !dbg !7972
  %arrayidx35 = getelementptr inbounds [8 x %struct.reg_use], [8 x %struct.reg_use]* @reg_use_table, i64 0, i64 %idxprom, !dbg !7972
  store %struct.reg_use* %arrayidx35, %struct.reg_use** %reg_used, align 8, !dbg !7970
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !7973, metadata !DIExpression()), !dbg !7974
  %47 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !7975
  %reg_rtx = getelementptr inbounds %struct.reg_use, %struct.reg_use* %47, i32 0, i32 0, !dbg !7975
  %48 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx, align 8, !dbg !7975
  %call36 = call i32 @rhs_regno(%struct.rtx_def* %48), !dbg !7975
  store i32 %call36, i32* %regno, align 4, !dbg !7974
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !7976, metadata !DIExpression()), !dbg !7977
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_dest, metadata !7978, metadata !DIExpression()), !dbg !7979
  call void @llvm.dbg.declare(metadata %struct.expr** %set, metadata !7980, metadata !DIExpression()), !dbg !7981
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src37, metadata !7982, metadata !DIExpression()), !dbg !7983
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !7984, metadata !DIExpression()), !dbg !7985
  %49 = load i32, i32* %regno, align 4, !dbg !7986
  %50 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7987
  %src38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 0, !dbg !7988
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %src38, align 8, !dbg !7988
  %index39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !7989
  %52 = load i32, i32* %index39, align 8, !dbg !7989
  %call40 = call %struct.expr* @find_bypass_set(i32 %49, i32 %52), !dbg !7990
  store %struct.expr* %call40, %struct.expr** %set, align 8, !dbg !7991
  %53 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !7992
  %tobool41 = icmp ne %struct.expr* %53, null, !dbg !7992
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !7994

if.then42:                                        ; preds = %for.body34
  br label %for.inc215, !dbg !7995

if.end43:                                         ; preds = %for.body34
  %54 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7996
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 2, !dbg !7998
  %r = bitcast %union.edge_def_insns* %insns to %struct.rtx_def**, !dbg !7999
  %55 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !7999
  %tobool44 = icmp ne %struct.rtx_def* %55, null, !dbg !7996
  br i1 %tobool44, label %land.lhs.true45, label %if.end50, !dbg !8000

land.lhs.true45:                                  ; preds = %if.end43
  %56 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !8001
  %reg_rtx46 = getelementptr inbounds %struct.reg_use, %struct.reg_use* %56, i32 0, i32 0, !dbg !8002
  %57 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx46, align 8, !dbg !8002
  %58 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8003
  %call47 = call zeroext i8 @reg_killed_on_edge(%struct.rtx_def* %57, %struct.edge_def* %58), !dbg !8004
  %conv = zext i8 %call47 to i32, !dbg !8004
  %tobool48 = icmp ne i32 %conv, 0, !dbg !8004
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !8005

if.then49:                                        ; preds = %land.lhs.true45
  br label %for.inc215, !dbg !8006

if.end50:                                         ; preds = %land.lhs.true45, %if.end43
  %59 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8007
  %call51 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %59), !dbg !8007
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call51, i32 0, i32 1, !dbg !8007
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !8007
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 1, !dbg !8007
  %rt_rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !8007
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx55, align 8, !dbg !8007
  store %struct.rtx_def* %60, %struct.rtx_def** %src37, align 8, !dbg !8008
  %61 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !8009
  %cmp56 = icmp ne %struct.rtx_def* %61, null, !dbg !8011
  br i1 %cmp56, label %if.then58, label %if.end76, !dbg !8012

if.then58:                                        ; preds = %if.end50
  %62 = load %struct.rtx_def*, %struct.rtx_def** %src37, align 8, !dbg !8013
  %63 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !8014
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !8014
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !8014
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 5, !dbg !8014
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !8014
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !8014
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !8014
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !8014
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 0, !dbg !8014
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !8014
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !8014
  %66 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !8015
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !8015
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !8015
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 5, !dbg !8015
  %rt_rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**, !dbg !8015
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx70, align 8, !dbg !8015
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !8015
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !8015
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 1, !dbg !8015
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !8015
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !8015
  %call75 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %62, %struct.rtx_def* %65, %struct.rtx_def* %68), !dbg !8016
  store %struct.rtx_def* %call75, %struct.rtx_def** %src37, align 8, !dbg !8017
  br label %if.end76, !dbg !8018

if.end76:                                         ; preds = %if.then58, %if.end50
  %69 = load %struct.rtx_def*, %struct.rtx_def** %src37, align 8, !dbg !8019
  %70 = load %struct.reg_use*, %struct.reg_use** %reg_used, align 8, !dbg !8020
  %reg_rtx77 = getelementptr inbounds %struct.reg_use, %struct.reg_use* %70, i32 0, i32 0, !dbg !8021
  %71 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx77, align 8, !dbg !8021
  %72 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8022
  %expr = getelementptr inbounds %struct.expr, %struct.expr* %72, i32 0, i32 0, !dbg !8022
  %73 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !8022
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !8022
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !8022
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 1, !dbg !8022
  %rt_rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !8022
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx81, align 8, !dbg !8022
  %call82 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %69, %struct.rtx_def* %71, %struct.rtx_def* %74), !dbg !8023
  store %struct.rtx_def* %call82, %struct.rtx_def** %new_rtx, align 8, !dbg !8024
  %75 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !8025
  %76 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !8027
  %cmp83 = icmp eq %struct.rtx_def* %75, %76, !dbg !8028
  br i1 %cmp83, label %if.then85, label %if.else, !dbg !8029

if.then85:                                        ; preds = %if.end76
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8030
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 1, !dbg !8030
  %78 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8030
  %tobool86 = icmp ne %struct.VEC_edge_gc* %78, null, !dbg !8030
  br i1 %tobool86, label %cond.true87, label %cond.false89, !dbg !8030

cond.true87:                                      ; preds = %if.then85
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8030
  %succs88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 1, !dbg !8030
  %80 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs88, align 8, !dbg !8030
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %80, i32 0, i32 0, !dbg !8030
  br label %cond.end90, !dbg !8030

cond.false89:                                     ; preds = %if.then85
  br label %cond.end90, !dbg !8030

cond.end90:                                       ; preds = %cond.false89, %cond.true87
  %cond91 = phi %struct.VEC_edge_base* [ %base, %cond.true87 ], [ null, %cond.false89 ], !dbg !8030
  %call92 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond91, i32 0), !dbg !8030
  %flags93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call92, i32 0, i32 7, !dbg !8030
  %81 = load i32, i32* %flags93, align 8, !dbg !8030
  %and94 = and i32 %81, 1, !dbg !8030
  %tobool95 = icmp ne i32 %and94, 0, !dbg !8030
  br i1 %tobool95, label %cond.true96, label %cond.false106, !dbg !8030

cond.true96:                                      ; preds = %cond.end90
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8030
  %succs97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 1, !dbg !8030
  %83 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs97, align 8, !dbg !8030
  %tobool98 = icmp ne %struct.VEC_edge_gc* %83, null, !dbg !8030
  br i1 %tobool98, label %cond.true99, label %cond.false102, !dbg !8030

cond.true99:                                      ; preds = %cond.true96
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8030
  %succs100 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 1, !dbg !8030
  %85 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs100, align 8, !dbg !8030
  %base101 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %85, i32 0, i32 0, !dbg !8030
  br label %cond.end103, !dbg !8030

cond.false102:                                    ; preds = %cond.true96
  br label %cond.end103, !dbg !8030

cond.end103:                                      ; preds = %cond.false102, %cond.true99
  %cond104 = phi %struct.VEC_edge_base* [ %base101, %cond.true99 ], [ null, %cond.false102 ], !dbg !8030
  %call105 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond104, i32 0), !dbg !8030
  br label %cond.end116, !dbg !8030

cond.false106:                                    ; preds = %cond.end90
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8030
  %succs107 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i32 0, i32 1, !dbg !8030
  %87 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs107, align 8, !dbg !8030
  %tobool108 = icmp ne %struct.VEC_edge_gc* %87, null, !dbg !8030
  br i1 %tobool108, label %cond.true109, label %cond.false112, !dbg !8030

cond.true109:                                     ; preds = %cond.false106
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8030
  %succs110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %88, i32 0, i32 1, !dbg !8030
  %89 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs110, align 8, !dbg !8030
  %base111 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %89, i32 0, i32 0, !dbg !8030
  br label %cond.end113, !dbg !8030

cond.false112:                                    ; preds = %cond.false106
  br label %cond.end113, !dbg !8030

cond.end113:                                      ; preds = %cond.false112, %cond.true109
  %cond114 = phi %struct.VEC_edge_base* [ %base111, %cond.true109 ], [ null, %cond.false112 ], !dbg !8030
  %call115 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond114, i32 1), !dbg !8030
  br label %cond.end116, !dbg !8030

cond.end116:                                      ; preds = %cond.end113, %cond.end103
  %cond117 = phi %struct.edge_def* [ %call105, %cond.end103 ], [ %call115, %cond.end113 ], !dbg !8030
  store %struct.edge_def* %cond117, %struct.edge_def** %edest, align 8, !dbg !8032
  %90 = load %struct.edge_def*, %struct.edge_def** %edest, align 8, !dbg !8033
  %insns118 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %90, i32 0, i32 2, !dbg !8034
  %r119 = bitcast %union.edge_def_insns* %insns118 to %struct.rtx_def**, !dbg !8035
  %91 = load %struct.rtx_def*, %struct.rtx_def** %r119, align 8, !dbg !8035
  %tobool120 = icmp ne %struct.rtx_def* %91, null, !dbg !8033
  br i1 %tobool120, label %cond.true121, label %cond.false122, !dbg !8033

cond.true121:                                     ; preds = %cond.end116
  br label %cond.end124, !dbg !8033

cond.false122:                                    ; preds = %cond.end116
  %92 = load %struct.edge_def*, %struct.edge_def** %edest, align 8, !dbg !8036
  %dest123 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %92, i32 0, i32 1, !dbg !8037
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %dest123, align 8, !dbg !8037
  br label %cond.end124, !dbg !8033

cond.end124:                                      ; preds = %cond.false122, %cond.true121
  %cond125 = phi %struct.basic_block_def* [ null, %cond.true121 ], [ %93, %cond.false122 ], !dbg !8033
  store %struct.basic_block_def* %cond125, %struct.basic_block_def** %dest, align 8, !dbg !8038
  br label %if.end146, !dbg !8039

if.else:                                          ; preds = %if.end76
  %94 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !8040
  %95 = bitcast %struct.rtx_def* %94 to i32*, !dbg !8040
  %bf.load = load i32, i32* %95, align 8, !dbg !8040
  %bf.clear = and i32 %bf.load, 65535, !dbg !8040
  %cmp126 = icmp eq i32 %bf.clear, 44, !dbg !8042
  br i1 %cmp126, label %if.then128, label %if.else144, !dbg !8043

if.then128:                                       ; preds = %if.else
  %96 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !8044
  %u129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1, !dbg !8044
  %fld130 = bitcast %union.u* %u129 to [1 x %union.rtunion_def]*, !dbg !8044
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i64 0, i64 0, !dbg !8044
  %rt_rtx132 = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**, !dbg !8044
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx132, align 8, !dbg !8044
  %u133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !8044
  %fld134 = bitcast %union.u* %u133 to [1 x %union.rtunion_def]*, !dbg !8044
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i64 0, i64 3, !dbg !8044
  %rt_bb = bitcast %union.rtunion_def* %arrayidx135 to %struct.basic_block_def**, !dbg !8044
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8044
  store %struct.basic_block_def* %98, %struct.basic_block_def** %dest, align 8, !dbg !8046
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8047
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8048
  %call136 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %99, %struct.basic_block_def* %100), !dbg !8049
  store %struct.edge_def* %call136, %struct.edge_def** %edest, align 8, !dbg !8050
  %101 = load %struct.edge_def*, %struct.edge_def** %edest, align 8, !dbg !8051
  %tobool137 = icmp ne %struct.edge_def* %101, null, !dbg !8051
  br i1 %tobool137, label %land.lhs.true138, label %if.end143, !dbg !8053

land.lhs.true138:                                 ; preds = %if.then128
  %102 = load %struct.edge_def*, %struct.edge_def** %edest, align 8, !dbg !8054
  %insns139 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 2, !dbg !8055
  %r140 = bitcast %union.edge_def_insns* %insns139 to %struct.rtx_def**, !dbg !8056
  %103 = load %struct.rtx_def*, %struct.rtx_def** %r140, align 8, !dbg !8056
  %tobool141 = icmp ne %struct.rtx_def* %103, null, !dbg !8054
  br i1 %tobool141, label %if.then142, label %if.end143, !dbg !8057

if.then142:                                       ; preds = %land.lhs.true138
  store %struct.basic_block_def* null, %struct.basic_block_def** %dest, align 8, !dbg !8058
  br label %if.end143, !dbg !8059

if.end143:                                        ; preds = %if.then142, %land.lhs.true138, %if.then128
  br label %if.end145, !dbg !8060

if.else144:                                       ; preds = %if.else
  store %struct.basic_block_def* null, %struct.basic_block_def** %dest, align 8, !dbg !8061
  br label %if.end145

if.end145:                                        ; preds = %if.else144, %if.end143
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %cond.end124
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8062
  %tobool147 = icmp ne %struct.basic_block_def* %104, null, !dbg !8062
  br i1 %tobool147, label %land.lhs.true148, label %if.end167, !dbg !8064

land.lhs.true148:                                 ; preds = %if.end146
  %105 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !8065
  %tobool149 = icmp ne %struct.rtx_def* %105, null, !dbg !8065
  br i1 %tobool149, label %land.lhs.true150, label %if.end167, !dbg !8066

land.lhs.true150:                                 ; preds = %land.lhs.true148
  %106 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !8067
  %u151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !8067
  %fld152 = bitcast %union.u* %u151 to [1 x %union.rtunion_def]*, !dbg !8067
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i64 0, i64 5, !dbg !8067
  %rt_rtx154 = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**, !dbg !8067
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx154, align 8, !dbg !8067
  %u155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1, !dbg !8067
  %fld156 = bitcast %union.u* %u155 to [1 x %union.rtunion_def]*, !dbg !8067
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i64 0, i64 0, !dbg !8067
  %rt_rtx158 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtx_def**, !dbg !8067
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx158, align 8, !dbg !8067
  %tobool159 = icmp ne %struct.rtx_def* %108, null, !dbg !8067
  br i1 %tobool159, label %cond.true160, label %cond.false161, !dbg !8068

cond.true160:                                     ; preds = %land.lhs.true150
  br i1 false, label %if.end167, label %land.lhs.true162, !dbg !8067

cond.false161:                                    ; preds = %land.lhs.true150
  br i1 false, label %if.end167, label %land.lhs.true162, !dbg !8068

land.lhs.true162:                                 ; preds = %cond.false161, %cond.true160
  %109 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8069
  %src163 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %109, i32 0, i32 0, !dbg !8070
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %src163, align 8, !dbg !8070
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8071
  %call164 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %110, %struct.basic_block_def* %111), !dbg !8072
  %tobool165 = icmp ne %struct.edge_def* %call164, null, !dbg !8072
  br i1 %tobool165, label %if.then166, label %if.end167, !dbg !8073

if.then166:                                       ; preds = %land.lhs.true162
  store %struct.basic_block_def* null, %struct.basic_block_def** %dest, align 8, !dbg !8074
  br label %if.end167, !dbg !8075

if.end167:                                        ; preds = %if.then166, %land.lhs.true162, %cond.false161, %cond.true160, %land.lhs.true148, %if.end146
  %112 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8076
  %dest168 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %112, i32 0, i32 1, !dbg !8077
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %dest168, align 8, !dbg !8077
  store %struct.basic_block_def* %113, %struct.basic_block_def** %old_dest, align 8, !dbg !8078
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8079
  %cmp169 = icmp ne %struct.basic_block_def* %114, null, !dbg !8081
  br i1 %cmp169, label %land.lhs.true171, label %if.end214, !dbg !8082

land.lhs.true171:                                 ; preds = %if.end167
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8083
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %old_dest, align 8, !dbg !8084
  %cmp172 = icmp ne %struct.basic_block_def* %115, %116, !dbg !8085
  br i1 %cmp172, label %land.lhs.true174, label %if.end214, !dbg !8086

land.lhs.true174:                                 ; preds = %land.lhs.true171
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8087
  %118 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8088
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %118, i64 0, !dbg !8088
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8088
  %119 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8088
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %119, i32 0, i32 1, !dbg !8088
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8088
  %cmp175 = icmp ne %struct.basic_block_def* %117, %120, !dbg !8089
  br i1 %cmp175, label %if.then177, label %if.end214, !dbg !8090

if.then177:                                       ; preds = %land.lhs.true174
  %121 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8091
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8093
  %call178 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %121, %struct.basic_block_def* %122), !dbg !8094
  %123 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !8095
  %tobool179 = icmp ne %struct.rtx_def* %123, null, !dbg !8095
  br i1 %tobool179, label %if.then180, label %if.end195, !dbg !8097

if.then180:                                       ; preds = %if.then177
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !8098, metadata !DIExpression()), !dbg !8100
  %124 = load %struct.rtx_def*, %struct.rtx_def** %setcc.addr, align 8, !dbg !8101
  %u181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !8101
  %fld182 = bitcast %union.u* %u181 to [1 x %union.rtunion_def]*, !dbg !8101
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i64 0, i64 5, !dbg !8101
  %rt_rtx184 = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtx_def**, !dbg !8101
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx184, align 8, !dbg !8101
  store %struct.rtx_def* %125, %struct.rtx_def** %pat, align 8, !dbg !8100
  %126 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8102
  %u185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1, !dbg !8102
  %fld186 = bitcast %union.u* %u185 to [1 x %union.rtunion_def]*, !dbg !8102
  %arrayidx187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld186, i64 0, i64 0, !dbg !8102
  %rt_rtx188 = bitcast %union.rtunion_def* %arrayidx187 to %struct.rtx_def**, !dbg !8102
  %127 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx188, align 8, !dbg !8102
  %tobool189 = icmp ne %struct.rtx_def* %127, null, !dbg !8102
  br i1 %tobool189, label %cond.true190, label %cond.false191, !dbg !8104

cond.true190:                                     ; preds = %if.then180
  br i1 false, label %if.end194, label %if.then192, !dbg !8102

cond.false191:                                    ; preds = %if.then180
  br i1 false, label %if.end194, label %if.then192, !dbg !8104

if.then192:                                       ; preds = %cond.false191, %cond.true190
  %128 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8105
  %call193 = call %struct.rtx_def* @copy_insn(%struct.rtx_def* %128), !dbg !8106
  %129 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8107
  call void @insert_insn_on_edge(%struct.rtx_def* %call193, %struct.edge_def* %129), !dbg !8108
  br label %if.end194, !dbg !8108

if.end194:                                        ; preds = %if.then192, %cond.false191, %cond.true190
  br label %if.end195, !dbg !8109

if.end195:                                        ; preds = %if.end194, %if.then177
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8110
  %cmp196 = icmp ne %struct._IO_FILE* %130, null, !dbg !8112
  br i1 %cmp196, label %if.then198, label %if.end213, !dbg !8113

if.then198:                                       ; preds = %if.end195
  %131 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8114
  %132 = load i32, i32* %regno, align 4, !dbg !8116
  %133 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8117
  %u199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1, !dbg !8117
  %fld200 = bitcast %union.u* %u199 to [1 x %union.rtunion_def]*, !dbg !8117
  %arrayidx201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld200, i64 0, i64 0, !dbg !8117
  %rt_int = bitcast %union.rtunion_def* %arrayidx201 to i32*, !dbg !8117
  %134 = load i32, i32* %rt_int, align 8, !dbg !8117
  %call202 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %131, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.26, i64 0, i64 0), i32 %132, i32 %134), !dbg !8118
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8119
  %136 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8120
  %expr203 = getelementptr inbounds %struct.expr, %struct.expr* %136, i32 0, i32 0, !dbg !8120
  %137 = load %struct.rtx_def*, %struct.rtx_def** %expr203, align 8, !dbg !8120
  %u204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1, !dbg !8120
  %fld205 = bitcast %union.u* %u204 to [1 x %union.rtunion_def]*, !dbg !8120
  %arrayidx206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld205, i64 0, i64 1, !dbg !8120
  %rt_rtx207 = bitcast %union.rtunion_def* %arrayidx206 to %struct.rtx_def**, !dbg !8120
  %138 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx207, align 8, !dbg !8120
  call void @print_rtl(%struct._IO_FILE* %135, %struct.rtx_def* %138), !dbg !8121
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8122
  %140 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8123
  %src208 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %140, i32 0, i32 0, !dbg !8124
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %src208, align 8, !dbg !8124
  %index209 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %141, i32 0, i32 9, !dbg !8125
  %142 = load i32, i32* %index209, align 8, !dbg !8125
  %143 = load %struct.basic_block_def*, %struct.basic_block_def** %old_dest, align 8, !dbg !8126
  %index210 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %143, i32 0, i32 9, !dbg !8127
  %144 = load i32, i32* %index210, align 8, !dbg !8127
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8128
  %index211 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %145, i32 0, i32 9, !dbg !8129
  %146 = load i32, i32* %index211, align 8, !dbg !8129
  %call212 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %139, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.27, i64 0, i64 0), i32 %142, i32 %144, i32 %146), !dbg !8130
  br label %if.end213, !dbg !8131

if.end213:                                        ; preds = %if.then198, %if.end195
  store i32 1, i32* %change, align 4, !dbg !8132
  store i32 1, i32* %removed_p, align 4, !dbg !8133
  br label %for.end216, !dbg !8134

if.end214:                                        ; preds = %land.lhs.true174, %land.lhs.true171, %if.end167
  br label %for.inc215, !dbg !8135

for.inc215:                                       ; preds = %if.end214, %if.then49, %if.then42
  %147 = load i32, i32* %i, align 4, !dbg !8136
  %inc = add nsw i32 %147, 1, !dbg !8136
  store i32 %inc, i32* %i, align 4, !dbg !8136
  br label %for.cond32, !dbg !8137, !llvm.loop !8138

for.end216:                                       ; preds = %if.end213, %for.cond32
  %148 = load i32, i32* %removed_p, align 4, !dbg !8140
  %tobool217 = icmp ne i32 %148, 0, !dbg !8140
  br i1 %tobool217, label %if.end219, label %if.then218, !dbg !8142

if.then218:                                       ; preds = %for.end216
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8143
  br label %if.end219, !dbg !8143

if.end219:                                        ; preds = %if.then218, %for.end216
  br label %for.cond14, !dbg !8144, !llvm.loop !7938

for.end220:                                       ; preds = %for.cond14
  %149 = load i32, i32* %change, align 4, !dbg !8145
  ret i32 %149, !dbg !8146
}

declare dso_local void @commit_edge_insertions() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !8147 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8150, metadata !DIExpression()), !dbg !8151
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !8152, metadata !DIExpression()), !dbg !8153
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8154
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !8154
  %5 = load i32, i32* %4, align 8, !dbg !8154
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !8154
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !8154
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !8154
  %tobool = icmp ne i8 %call, 0, !dbg !8154
  br i1 %tobool, label %if.else, label %if.then, !dbg !8156

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8157
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !8157
  %10 = load i32, i32* %9, align 8, !dbg !8157
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !8157
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !8157
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !8157
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !8159
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !8160
  store i8 1, i8* %retval, align 1, !dbg !8161
  br label %return, !dbg !8161

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !8162
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !8164
  store i8 0, i8* %retval, align 1, !dbg !8165
  br label %return, !dbg !8165

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !8166
  ret i8 %15, !dbg !8166
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr* @find_bypass_set(i32 %regno, i32 %bb) #0 !dbg !8167 {
entry:
  %regno.addr = alloca i32, align 4
  %bb.addr = alloca i32, align 4
  %result = alloca %struct.expr*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.expr*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !8170, metadata !DIExpression()), !dbg !8171
  store i32 %bb, i32* %bb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb.addr, metadata !8172, metadata !DIExpression()), !dbg !8173
  call void @llvm.dbg.declare(metadata %struct.expr** %result, metadata !8174, metadata !DIExpression()), !dbg !8175
  store %struct.expr* null, %struct.expr** %result, align 8, !dbg !8175
  br label %for.cond, !dbg !8176

for.cond:                                         ; preds = %if.end19, %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !8177, metadata !DIExpression()), !dbg !8181
  call void @llvm.dbg.declare(metadata %struct.expr** %set, metadata !8182, metadata !DIExpression()), !dbg !8183
  %0 = load i32, i32* %regno.addr, align 4, !dbg !8184
  %call = call %struct.expr* @lookup_set(i32 %0, %struct.hash_table_d* @set_hash_table), !dbg !8185
  store %struct.expr* %call, %struct.expr** %set, align 8, !dbg !8183
  br label %while.cond, !dbg !8186

while.cond:                                       ; preds = %if.end, %for.cond
  %1 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8187
  %tobool = icmp ne %struct.expr* %1, null, !dbg !8186
  br i1 %tobool, label %while.body, label %while.end, !dbg !8186

while.body:                                       ; preds = %while.cond
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @cprop_avout, align 8, !dbg !8188
  %3 = load i32, i32* %bb.addr, align 4, !dbg !8188
  %idxprom = sext i32 %3 to i64, !dbg !8188
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %2, i64 %idxprom, !dbg !8188
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !8188
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 3, !dbg !8188
  %5 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8188
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %5, i32 0, i32 1, !dbg !8188
  %6 = load i32, i32* %bitmap_index, align 8, !dbg !8188
  %div = udiv i32 %6, 64, !dbg !8188
  %idxprom1 = zext i32 %div to i64, !dbg !8188
  %arrayidx2 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom1, !dbg !8188
  %7 = load i64, i64* %arrayidx2, align 8, !dbg !8188
  %8 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8188
  %bitmap_index3 = getelementptr inbounds %struct.expr, %struct.expr* %8, i32 0, i32 1, !dbg !8188
  %9 = load i32, i32* %bitmap_index3, align 8, !dbg !8188
  %rem = urem i32 %9, 64, !dbg !8188
  %sh_prom = zext i32 %rem to i64, !dbg !8188
  %shr = lshr i64 %7, %sh_prom, !dbg !8188
  %and = and i64 %shr, 1, !dbg !8188
  %tobool4 = icmp ne i64 %and, 0, !dbg !8188
  br i1 %tobool4, label %if.then, label %if.end, !dbg !8191

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !8192

if.end:                                           ; preds = %while.body
  %10 = load i32, i32* %regno.addr, align 4, !dbg !8193
  %11 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8194
  %call5 = call %struct.expr* @next_set(i32 %10, %struct.expr* %11), !dbg !8195
  store %struct.expr* %call5, %struct.expr** %set, align 8, !dbg !8196
  br label %while.cond, !dbg !8186, !llvm.loop !8197

while.end:                                        ; preds = %if.then, %while.cond
  %12 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8199
  %cmp = icmp eq %struct.expr* %12, null, !dbg !8201
  br i1 %cmp, label %if.then6, label %if.end7, !dbg !8202

if.then6:                                         ; preds = %while.end
  br label %for.end, !dbg !8203

if.end7:                                          ; preds = %while.end
  %13 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8204
  %expr = getelementptr inbounds %struct.expr, %struct.expr* %13, i32 0, i32 0, !dbg !8204
  %14 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !8204
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !8204
  %bf.load = load i32, i32* %15, align 8, !dbg !8204
  %bf.clear = and i32 %bf.load, 65535, !dbg !8204
  %cmp8 = icmp eq i32 %bf.clear, 23, !dbg !8204
  br i1 %cmp8, label %cond.false, label %cond.true, !dbg !8204

cond.true:                                        ; preds = %if.end7
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 2908, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !8204
  br label %cond.end, !dbg !8204

cond.false:                                       ; preds = %if.end7
  br label %cond.end, !dbg !8204

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8204
  %16 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8205
  %expr9 = getelementptr inbounds %struct.expr, %struct.expr* %16, i32 0, i32 0, !dbg !8205
  %17 = load %struct.rtx_def*, %struct.rtx_def** %expr9, align 8, !dbg !8205
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !8205
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8205
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8205
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !8205
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8205
  store %struct.rtx_def* %18, %struct.rtx_def** %src, align 8, !dbg !8206
  %19 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8207
  %call11 = call zeroext i8 @gcse_constant_p(%struct.rtx_def* %19), !dbg !8209
  %tobool12 = icmp ne i8 %call11, 0, !dbg !8209
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !8210

if.then13:                                        ; preds = %cond.end
  %20 = load %struct.expr*, %struct.expr** %set, align 8, !dbg !8211
  store %struct.expr* %20, %struct.expr** %result, align 8, !dbg !8212
  br label %if.end14, !dbg !8213

if.end14:                                         ; preds = %if.then13, %cond.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8214
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !8214
  %bf.load15 = load i32, i32* %22, align 8, !dbg !8214
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !8214
  %cmp17 = icmp eq i32 %bf.clear16, 37, !dbg !8214
  br i1 %cmp17, label %if.end19, label %if.then18, !dbg !8216

if.then18:                                        ; preds = %if.end14
  br label %for.end, !dbg !8217

if.end19:                                         ; preds = %if.end14
  %23 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8218
  %call20 = call i32 @rhs_regno(%struct.rtx_def* %23), !dbg !8218
  store i32 %call20, i32* %regno.addr, align 4, !dbg !8219
  br label %for.cond, !dbg !8220, !llvm.loop !8221

for.end:                                          ; preds = %if.then18, %if.then6
  %24 = load %struct.expr*, %struct.expr** %result, align 8, !dbg !8224
  ret %struct.expr* %24, !dbg !8225
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @reg_killed_on_edge(%struct.rtx_def* %reg, %struct.edge_def* %e) #0 !dbg !8226 {
entry:
  %retval = alloca i8, align 1
  %reg.addr = alloca %struct.rtx_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !8232, metadata !DIExpression()), !dbg !8233
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !8234, metadata !DIExpression()), !dbg !8235
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8236, metadata !DIExpression()), !dbg !8237
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !8238
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 2, !dbg !8240
  %r = bitcast %union.edge_def_insns* %insns to %struct.rtx_def**, !dbg !8241
  %1 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !8241
  store %struct.rtx_def* %1, %struct.rtx_def** %insn, align 8, !dbg !8242
  br label %for.cond, !dbg !8243

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8244
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !8246
  br i1 %tobool, label %for.body, label %for.end, !dbg !8246

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8247
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !8247
  %bf.load = load i32, i32* %4, align 8, !dbg !8247
  %bf.clear = and i32 %bf.load, 65535, !dbg !8247
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !8247
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !8247

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8247
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8247
  %bf.load1 = load i32, i32* %6, align 8, !dbg !8247
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8247
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !8247
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false4, !dbg !8247

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8247
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8247
  %bf.load5 = load i32, i32* %8, align 8, !dbg !8247
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !8247
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !8247
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false8, !dbg !8247

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8247
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !8247
  %bf.load9 = load i32, i32* %10, align 8, !dbg !8247
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !8247
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !8247
  br i1 %cmp11, label %land.lhs.true, label %if.end, !dbg !8249

land.lhs.true:                                    ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %for.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !8250
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8251
  %call = call i32 @reg_set_p(%struct.rtx_def* %11, %struct.rtx_def* %12), !dbg !8252
  %tobool12 = icmp ne i32 %call, 0, !dbg !8252
  br i1 %tobool12, label %if.then, label %if.end, !dbg !8253

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !8254
  br label %return, !dbg !8254

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false8
  br label %for.inc, !dbg !8255

for.inc:                                          ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8256
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8256
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8256
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8256
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8256
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8256
  store %struct.rtx_def* %14, %struct.rtx_def** %insn, align 8, !dbg !8257
  br label %for.cond, !dbg !8258, !llvm.loop !8259

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !8261
  br label %return, !dbg !8261

return:                                           ; preds = %for.end, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !8262
  ret i8 %15, !dbg !8262
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local void @insert_insn_on_edge(%struct.rtx_def*, %struct.edge_def*) #2

declare dso_local %struct.rtx_def* @copy_insn(%struct.rtx_def*) #2

declare dso_local i32 @reg_set_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_modify_mem_tables() #0 !dbg !8263 {
entry:
  call void @clear_modify_mem_tables(), !dbg !8264
  %0 = load %struct.rtx_def**, %struct.rtx_def*** @modify_mem_list, align 8, !dbg !8265
  %1 = bitcast %struct.rtx_def** %0 to i8*, !dbg !8265
  call void @free(i8* %1), !dbg !8266
  %2 = load %struct.rtx_def**, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !8267
  %3 = bitcast %struct.rtx_def** %2 to i8*, !dbg !8267
  call void @free(i8* %3), !dbg !8268
  store %struct.rtx_def** null, %struct.rtx_def*** @modify_mem_list, align 8, !dbg !8269
  store %struct.rtx_def** null, %struct.rtx_def*** @canon_modify_mem_list, align 8, !dbg !8270
  ret void, !dbg !8271
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local zeroext i8 @optimize_function_for_speed_p(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @one_pre_gcse_pass() #0 !dbg !8272 {
entry:
  %retval = alloca i32, align 4
  %changed = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !8273, metadata !DIExpression()), !dbg !8274
  store i32 0, i32* %changed, align 4, !dbg !8274
  store i32 0, i32* @gcse_subst_count, align 4, !dbg !8275
  store i32 0, i32* @gcse_create_count, align 4, !dbg !8276
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8277
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8277
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8277
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8277
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !8277
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !8277
  %cmp = icmp sle i32 %2, 3, !dbg !8279
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8280

lor.lhs.false:                                    ; preds = %entry
  %call = call zeroext i8 @is_too_expensive(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.28, i64 0, i64 0)), !dbg !8281
  %conv = zext i8 %call to i32, !dbg !8281
  %tobool = icmp ne i32 %conv, 0, !dbg !8281
  br i1 %tobool, label %if.then, label %if.end, !dbg !8282

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !8283
  br label %return, !dbg !8283

if.end:                                           ; preds = %lor.lhs.false
  call void @init_alias_analysis(), !dbg !8284
  store i32 0, i32* @bytes_used, align 4, !dbg !8285
  %call1 = call i32 @_obstack_begin(%struct.obstack* @gcse_obstack, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !8286
  call void @alloc_gcse_mem(), !dbg !8287
  call void @alloc_hash_table(%struct.hash_table_d* @expr_hash_table, i32 0), !dbg !8288
  call void @add_noreturn_fake_exit_edges(), !dbg !8289
  %3 = load i32, i32* @flag_gcse_lm, align 4, !dbg !8290
  %tobool2 = icmp ne i32 %3, 0, !dbg !8290
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !8292

if.then3:                                         ; preds = %if.end
  call void @compute_ld_motion_mems(), !dbg !8293
  br label %if.end4, !dbg !8293

if.end4:                                          ; preds = %if.then3, %if.end
  call void @compute_hash_table(%struct.hash_table_d* @expr_hash_table), !dbg !8294
  call void @trim_ld_motion_mems(), !dbg !8295
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8296
  %tobool5 = icmp ne %struct._IO_FILE* %4, null, !dbg !8296
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !8298

if.then6:                                         ; preds = %if.end4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8299
  call void @dump_hash_table(%struct._IO_FILE* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0), %struct.hash_table_d* @expr_hash_table), !dbg !8300
  br label %if.end7, !dbg !8300

if.end7:                                          ; preds = %if.then6, %if.end4
  %6 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !8301
  %cmp8 = icmp ugt i32 %6, 0, !dbg !8303
  br i1 %cmp8, label %if.then10, label %if.end14, !dbg !8304

if.then10:                                        ; preds = %if.end7
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8305
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !8305
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !8305
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !8305
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 5, !dbg !8305
  %9 = load i32, i32* %x_last_basic_block, align 8, !dbg !8305
  %10 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !8307
  call void @alloc_pre_mem(i32 %9, i32 %10), !dbg !8308
  call void @compute_pre_data(), !dbg !8309
  %call13 = call i32 @pre_gcse(), !dbg !8310
  %11 = load i32, i32* %changed, align 4, !dbg !8311
  %or = or i32 %11, %call13, !dbg !8311
  store i32 %or, i32* %changed, align 4, !dbg !8311
  %12 = load %struct.edge_list*, %struct.edge_list** @edge_list, align 8, !dbg !8312
  call void @free_edge_list(%struct.edge_list* %12), !dbg !8313
  call void @free_pre_mem(), !dbg !8314
  br label %if.end14, !dbg !8315

if.end14:                                         ; preds = %if.then10, %if.end7
  call void @free_ldst_mems(), !dbg !8316
  call void @remove_fake_exit_edges(), !dbg !8317
  call void @free_hash_table(%struct.hash_table_d* @expr_hash_table), !dbg !8318
  call void @free_gcse_mem(), !dbg !8319
  %13 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !8320
  %14 = bitcast %struct._obstack_chunk* %13 to i8*, !dbg !8320
  %sub.ptr.rhs.cast = ptrtoint i8* %14 to i64, !dbg !8320
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !8320
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !8320
  %15 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !8320
  %cmp15 = icmp sgt i64 %15, 0, !dbg !8320
  br i1 %cmp15, label %land.lhs.true, label %cond.false, !dbg !8320

land.lhs.true:                                    ; preds = %if.end14
  %16 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !8320
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 4), align 8, !dbg !8320
  %18 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !8320
  %19 = bitcast %struct._obstack_chunk* %18 to i8*, !dbg !8320
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64, !dbg !8320
  %sub.ptr.rhs.cast17 = ptrtoint i8* %19 to i64, !dbg !8320
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast17, !dbg !8320
  %cmp19 = icmp slt i64 %16, %sub.ptr.sub18, !dbg !8320
  br i1 %cmp19, label %cond.true, label %cond.false, !dbg !8320

cond.true:                                        ; preds = %land.lhs.true
  %20 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !8320
  %21 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !8320
  %22 = bitcast %struct._obstack_chunk* %21 to i8*, !dbg !8320
  %add.ptr21 = getelementptr inbounds i8, i8* %22, i64 %20, !dbg !8320
  store i8* %add.ptr21, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 2), align 8, !dbg !8320
  store i8* %add.ptr21, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !8320
  %23 = ptrtoint i8* %add.ptr21 to i64, !dbg !8320
  br label %cond.end, !dbg !8320

cond.false:                                       ; preds = %land.lhs.true, %if.end14
  %24 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !8320
  %25 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !8320
  %26 = bitcast %struct._obstack_chunk* %25 to i8*, !dbg !8320
  %add.ptr22 = getelementptr inbounds i8, i8* %26, i64 %24, !dbg !8320
  call void @obstack_free(%struct.obstack* @gcse_obstack, i8* %add.ptr22), !dbg !8320
  br label %cond.end, !dbg !8320

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %23, %cond.true ], [ 0, %cond.false ], !dbg !8320
  call void @end_alias_analysis(), !dbg !8321
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8322
  %tobool23 = icmp ne %struct._IO_FILE* %27, null, !dbg !8322
  br i1 %tobool23, label %if.then24, label %if.end31, !dbg !8324

if.then24:                                        ; preds = %cond.end
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8325
  %call25 = call i8* @current_function_name(), !dbg !8327
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8328
  %add.ptr26 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !8328
  %cfg27 = getelementptr inbounds %struct.function, %struct.function* %add.ptr26, i32 0, i32 1, !dbg !8328
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg27, align 8, !dbg !8328
  %x_n_basic_blocks28 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 3, !dbg !8328
  %31 = load i32, i32* %x_n_basic_blocks28, align 8, !dbg !8328
  %32 = load i32, i32* @bytes_used, align 4, !dbg !8329
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0), i8* %call25, i32 %31, i32 %32), !dbg !8330
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8331
  %34 = load i32, i32* @gcse_subst_count, align 4, !dbg !8332
  %35 = load i32, i32* @gcse_create_count, align 4, !dbg !8333
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.31, i64 0, i64 0), i32 %34, i32 %35), !dbg !8334
  br label %if.end31, !dbg !8335

if.end31:                                         ; preds = %if.then24, %cond.end
  %36 = load i32, i32* %changed, align 4, !dbg !8336
  store i32 %36, i32* %retval, align 4, !dbg !8337
  br label %return, !dbg !8337

return:                                           ; preds = %if.end31, %if.then
  %37 = load i32, i32* %retval, align 4, !dbg !8338
  ret i32 %37, !dbg !8338
}

declare dso_local void @init_alias_analysis() #2

declare dso_local void @add_noreturn_fake_exit_edges() #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_ld_motion_mems() #0 !dbg !8339 {
entry:
  %ptr = alloca %struct.ls_expr*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr, metadata !8340, metadata !DIExpression()), !dbg !8341
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8342, metadata !DIExpression()), !dbg !8343
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8344, metadata !DIExpression()), !dbg !8345
  store %struct.ls_expr* null, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8346
  %call = call %struct.htab* @htab_create(i64 13, i32 (i8*)* @pre_ldst_expr_hash, i32 (i8*, i8*)* @pre_ldst_expr_eq, void (i8*)* null), !dbg !8347
  store %struct.htab* %call, %struct.htab** @pre_ldst_table, align 8, !dbg !8348
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8349
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8349
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8349
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8349
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !8349
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8349
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !8349
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8349
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !8349
  br label %for.cond, !dbg !8349

for.cond:                                         ; preds = %for.inc99, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8351
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8351
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !8351
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !8351
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8351
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !8351
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8351
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !8351
  br i1 %cmp, label %for.body, label %for.end101, !dbg !8349

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8353
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !8353
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8353
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8353
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 0, !dbg !8353
  %10 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !8353
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !8353
  br label %for.cond3, !dbg !8353

for.cond3:                                        ; preds = %for.inc, %for.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8356
  %tobool = icmp ne %struct.rtx_def* %11, null, !dbg !8356
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8356

land.rhs:                                         ; preds = %for.cond3
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8356
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8356
  %il4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !8356
  %rtl5 = bitcast %union.basic_block_il_dependent* %il4 to %struct.rtl_bb_info**, !dbg !8356
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl5, align 8, !dbg !8356
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !8356
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8356
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8356
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8356
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8356
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8356
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8356
  %cmp6 = icmp ne %struct.rtx_def* %12, %16, !dbg !8356
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond3
  %17 = phi i1 [ false, %for.cond3 ], [ %cmp6, %land.rhs ], !dbg !8358
  br i1 %17, label %for.body7, label %for.end, !dbg !8353

for.body7:                                        ; preds = %land.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8359
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !8359
  %bf.load = load i32, i32* %19, align 8, !dbg !8359
  %bf.clear = and i32 %bf.load, 65535, !dbg !8359
  %cmp8 = icmp eq i32 %bf.clear, 8, !dbg !8359
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false, !dbg !8359

lor.lhs.false:                                    ; preds = %for.body7
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8359
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !8359
  %bf.load9 = load i32, i32* %21, align 8, !dbg !8359
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !8359
  %cmp11 = icmp eq i32 %bf.clear10, 7, !dbg !8359
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false12, !dbg !8359

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8359
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !8359
  %bf.load13 = load i32, i32* %23, align 8, !dbg !8359
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !8359
  %cmp15 = icmp eq i32 %bf.clear14, 9, !dbg !8359
  br i1 %cmp15, label %land.lhs.true, label %lor.lhs.false16, !dbg !8359

lor.lhs.false16:                                  ; preds = %lor.lhs.false12
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8359
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !8359
  %bf.load17 = load i32, i32* %25, align 8, !dbg !8359
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !8359
  %cmp19 = icmp eq i32 %bf.clear18, 10, !dbg !8359
  br i1 %cmp19, label %land.lhs.true, label %if.end94, !dbg !8359

land.lhs.true:                                    ; preds = %lor.lhs.false16, %lor.lhs.false12, %lor.lhs.false, %for.body7
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8359
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !8359
  %bf.load20 = load i32, i32* %27, align 8, !dbg !8359
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !8359
  %cmp22 = icmp eq i32 %bf.clear21, 7, !dbg !8359
  br i1 %cmp22, label %if.end94, label %if.then, !dbg !8362

if.then:                                          ; preds = %land.lhs.true
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8363
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !8363
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !8363
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 5, !dbg !8363
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !8363
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !8363
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !8363
  %bf.load27 = load i32, i32* %30, align 8, !dbg !8363
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !8363
  %cmp29 = icmp eq i32 %bf.clear28, 23, !dbg !8366
  br i1 %cmp29, label %if.then30, label %if.else88, !dbg !8367

if.then30:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !8368, metadata !DIExpression()), !dbg !8370
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8371
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !8371
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !8371
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 5, !dbg !8371
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !8371
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !8371
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !8371
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !8371
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 1, !dbg !8371
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !8371
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !8371
  store %struct.rtx_def* %33, %struct.rtx_def** %src, align 8, !dbg !8370
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !8372, metadata !DIExpression()), !dbg !8373
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8374
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !8374
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !8374
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 5, !dbg !8374
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !8374
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !8374
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !8374
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !8374
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 0, !dbg !8374
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !8374
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !8374
  store %struct.rtx_def* %36, %struct.rtx_def** %dest, align 8, !dbg !8373
  %37 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8375
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !8375
  %bf.load47 = load i32, i32* %38, align 8, !dbg !8375
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !8375
  %cmp49 = icmp eq i32 %bf.clear48, 43, !dbg !8375
  br i1 %cmp49, label %land.lhs.true50, label %if.else61, !dbg !8377

land.lhs.true50:                                  ; preds = %if.then30
  %39 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8378
  %call51 = call i32 @simple_mem(%struct.rtx_def* %39), !dbg !8379
  %tobool52 = icmp ne i32 %call51, 0, !dbg !8379
  br i1 %tobool52, label %if.then53, label %if.else61, !dbg !8380

if.then53:                                        ; preds = %land.lhs.true50
  %40 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8381
  %call54 = call %struct.ls_expr* @ldst_entry(%struct.rtx_def* %40), !dbg !8383
  store %struct.ls_expr* %call54, %struct.ls_expr** %ptr, align 8, !dbg !8384
  %41 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !8385
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !8385
  %bf.load55 = load i32, i32* %42, align 8, !dbg !8385
  %bf.clear56 = and i32 %bf.load55, 65535, !dbg !8385
  %cmp57 = icmp eq i32 %bf.clear56, 37, !dbg !8385
  br i1 %cmp57, label %if.then58, label %if.else, !dbg !8387

if.then58:                                        ; preds = %if.then53
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8388
  %44 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8389
  %loads = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %44, i32 0, i32 3, !dbg !8390
  %45 = load %struct.rtx_def*, %struct.rtx_def** %loads, align 8, !dbg !8390
  %call59 = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %43, %struct.rtx_def* %45), !dbg !8391
  %46 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8392
  %loads60 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %46, i32 0, i32 3, !dbg !8393
  store %struct.rtx_def* %call59, %struct.rtx_def** %loads60, align 8, !dbg !8394
  br label %if.end, !dbg !8392

if.else:                                          ; preds = %if.then53
  %47 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8395
  %invalid = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %47, i32 0, i32 6, !dbg !8396
  store i32 1, i32* %invalid, align 8, !dbg !8397
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then58
  br label %if.end62, !dbg !8398

if.else61:                                        ; preds = %land.lhs.true50, %if.then30
  %48 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8399
  call void @invalidate_any_buried_refs(%struct.rtx_def* %48), !dbg !8401
  br label %if.end62

if.end62:                                         ; preds = %if.else61, %if.end
  %49 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !8402
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !8402
  %bf.load63 = load i32, i32* %50, align 8, !dbg !8402
  %bf.clear64 = and i32 %bf.load63, 65535, !dbg !8402
  %cmp65 = icmp eq i32 %bf.clear64, 43, !dbg !8402
  br i1 %cmp65, label %land.lhs.true66, label %if.end87, !dbg !8404

land.lhs.true66:                                  ; preds = %if.end62
  %51 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !8405
  %call67 = call i32 @simple_mem(%struct.rtx_def* %51), !dbg !8406
  %tobool68 = icmp ne i32 %call67, 0, !dbg !8406
  br i1 %tobool68, label %if.then69, label %if.end87, !dbg !8407

if.then69:                                        ; preds = %land.lhs.true66
  %52 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !8408
  %call70 = call %struct.ls_expr* @ldst_entry(%struct.rtx_def* %52), !dbg !8410
  store %struct.ls_expr* %call70, %struct.ls_expr** %ptr, align 8, !dbg !8411
  %53 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8412
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !8412
  %bf.load71 = load i32, i32* %54, align 8, !dbg !8412
  %bf.clear72 = and i32 %bf.load71, 65535, !dbg !8412
  %cmp73 = icmp eq i32 %bf.clear72, 43, !dbg !8412
  br i1 %cmp73, label %if.else84, label %land.lhs.true74, !dbg !8414

land.lhs.true74:                                  ; preds = %if.then69
  %55 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8415
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !8415
  %bf.load75 = load i32, i32* %56, align 8, !dbg !8415
  %bf.clear76 = and i32 %bf.load75, 65535, !dbg !8415
  %cmp77 = icmp ne i32 %bf.clear76, 17, !dbg !8416
  br i1 %cmp77, label %land.lhs.true78, label %if.else84, !dbg !8417

land.lhs.true78:                                  ; preds = %land.lhs.true74
  %57 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8418
  %call79 = call zeroext i8 @can_assign_to_reg_without_clobbers_p(%struct.rtx_def* %57), !dbg !8419
  %conv = zext i8 %call79 to i32, !dbg !8419
  %tobool80 = icmp ne i32 %conv, 0, !dbg !8419
  br i1 %tobool80, label %if.then81, label %if.else84, !dbg !8420

if.then81:                                        ; preds = %land.lhs.true78
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8421
  %59 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8422
  %stores = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %59, i32 0, i32 4, !dbg !8423
  %60 = load %struct.rtx_def*, %struct.rtx_def** %stores, align 8, !dbg !8423
  %call82 = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %58, %struct.rtx_def* %60), !dbg !8424
  %61 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8425
  %stores83 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %61, i32 0, i32 4, !dbg !8426
  store %struct.rtx_def* %call82, %struct.rtx_def** %stores83, align 8, !dbg !8427
  br label %if.end86, !dbg !8425

if.else84:                                        ; preds = %land.lhs.true78, %land.lhs.true74, %if.then69
  %62 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8428
  %invalid85 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %62, i32 0, i32 6, !dbg !8429
  store i32 1, i32* %invalid85, align 8, !dbg !8430
  br label %if.end86

if.end86:                                         ; preds = %if.else84, %if.then81
  br label %if.end87, !dbg !8431

if.end87:                                         ; preds = %if.end86, %land.lhs.true66, %if.end62
  br label %if.end93, !dbg !8432

if.else88:                                        ; preds = %if.then
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8433
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !8433
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !8433
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 5, !dbg !8433
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !8433
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !8433
  call void @invalidate_any_buried_refs(%struct.rtx_def* %64), !dbg !8434
  br label %if.end93

if.end93:                                         ; preds = %if.else88, %if.end87
  br label %if.end94, !dbg !8435

if.end94:                                         ; preds = %if.end93, %land.lhs.true, %lor.lhs.false16
  br label %for.inc, !dbg !8436

for.inc:                                          ; preds = %if.end94
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8356
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !8356
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !8356
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 2, !dbg !8356
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !8356
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !8356
  store %struct.rtx_def* %66, %struct.rtx_def** %insn, align 8, !dbg !8356
  br label %for.cond3, !dbg !8356, !llvm.loop !8437

for.end:                                          ; preds = %land.end
  br label %for.inc99, !dbg !8439

for.inc99:                                        ; preds = %for.end
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8351
  %next_bb100 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 6, !dbg !8351
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb100, align 8, !dbg !8351
  store %struct.basic_block_def* %68, %struct.basic_block_def** %bb, align 8, !dbg !8351
  br label %for.cond, !dbg !8351, !llvm.loop !8440

for.end101:                                       ; preds = %for.cond
  ret void, !dbg !8442
}

; Function Attrs: noinline nounwind uwtable
define internal void @trim_ld_motion_mems() #0 !dbg !8443 {
entry:
  %last = alloca %struct.ls_expr**, align 8
  %ptr = alloca %struct.ls_expr*, align 8
  %expr = alloca %struct.expr*, align 8
  %hash = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.ls_expr*** %last, metadata !8444, metadata !DIExpression()), !dbg !8446
  store %struct.ls_expr** @pre_ldst_mems, %struct.ls_expr*** %last, align 8, !dbg !8446
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr, metadata !8447, metadata !DIExpression()), !dbg !8448
  %0 = load %struct.ls_expr*, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8449
  store %struct.ls_expr* %0, %struct.ls_expr** %ptr, align 8, !dbg !8448
  br label %while.cond, !dbg !8450

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8451
  %cmp = icmp ne %struct.ls_expr* %1, null, !dbg !8452
  br i1 %cmp, label %while.body, label %while.end, !dbg !8450

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !8453, metadata !DIExpression()), !dbg !8455
  %2 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8456
  %invalid = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %2, i32 0, i32 6, !dbg !8458
  %3 = load i32, i32* %invalid, align 8, !dbg !8458
  %tobool = icmp ne i32 %3, 0, !dbg !8456
  br i1 %tobool, label %if.else, label %if.then, !dbg !8459

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !8460, metadata !DIExpression()), !dbg !8462
  %4 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8463
  %hash_index = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %4, i32 0, i32 8, !dbg !8464
  %5 = load i32, i32* %hash_index, align 8, !dbg !8464
  %6 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 1), align 8, !dbg !8465
  %rem = urem i32 %5, %6, !dbg !8466
  store i32 %rem, i32* %hash, align 4, !dbg !8462
  %7 = load %struct.expr**, %struct.expr*** getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 0), align 8, !dbg !8467
  %8 = load i32, i32* %hash, align 4, !dbg !8469
  %idxprom = zext i32 %8 to i64, !dbg !8470
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %7, i64 %idxprom, !dbg !8470
  %9 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !8470
  store %struct.expr* %9, %struct.expr** %expr, align 8, !dbg !8471
  br label %for.cond, !dbg !8472

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8473
  %cmp1 = icmp ne %struct.expr* %10, null, !dbg !8475
  br i1 %cmp1, label %for.body, label %for.end, !dbg !8476

for.body:                                         ; preds = %for.cond
  %11 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8477
  %expr2 = getelementptr inbounds %struct.expr, %struct.expr* %11, i32 0, i32 0, !dbg !8479
  %12 = load %struct.rtx_def*, %struct.rtx_def** %expr2, align 8, !dbg !8479
  %13 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8480
  %pattern = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %13, i32 0, i32 1, !dbg !8481
  %14 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !8481
  %call = call i32 @expr_equiv_p(%struct.rtx_def* %12, %struct.rtx_def* %14), !dbg !8482
  %tobool3 = icmp ne i32 %call, 0, !dbg !8482
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !8483

if.then4:                                         ; preds = %for.body
  br label %for.end, !dbg !8484

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !8485

for.inc:                                          ; preds = %if.end
  %15 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8486
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %15, i32 0, i32 2, !dbg !8487
  %16 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !8487
  store %struct.expr* %16, %struct.expr** %expr, align 8, !dbg !8488
  br label %for.cond, !dbg !8489, !llvm.loop !8490

for.end:                                          ; preds = %if.then4, %for.cond
  br label %if.end5, !dbg !8492

if.else:                                          ; preds = %while.body
  store %struct.expr* null, %struct.expr** %expr, align 8, !dbg !8493
  br label %if.end5

if.end5:                                          ; preds = %if.else, %for.end
  %17 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8494
  %tobool6 = icmp ne %struct.expr* %17, null, !dbg !8494
  br i1 %tobool6, label %if.then7, label %if.else10, !dbg !8496

if.then7:                                         ; preds = %if.end5
  %18 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8497
  %19 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8499
  %expr8 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %19, i32 0, i32 0, !dbg !8500
  store %struct.expr* %18, %struct.expr** %expr8, align 8, !dbg !8501
  %20 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8502
  %next = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %20, i32 0, i32 5, !dbg !8503
  store %struct.ls_expr** %next, %struct.ls_expr*** %last, align 8, !dbg !8504
  %21 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8505
  %next9 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %21, i32 0, i32 5, !dbg !8506
  %22 = load %struct.ls_expr*, %struct.ls_expr** %next9, align 8, !dbg !8506
  store %struct.ls_expr* %22, %struct.ls_expr** %ptr, align 8, !dbg !8507
  br label %if.end13, !dbg !8508

if.else10:                                        ; preds = %if.end5
  %23 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8509
  %next11 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %23, i32 0, i32 5, !dbg !8511
  %24 = load %struct.ls_expr*, %struct.ls_expr** %next11, align 8, !dbg !8511
  %25 = load %struct.ls_expr**, %struct.ls_expr*** %last, align 8, !dbg !8512
  store %struct.ls_expr* %24, %struct.ls_expr** %25, align 8, !dbg !8513
  %26 = load %struct.htab*, %struct.htab** @pre_ldst_table, align 8, !dbg !8514
  %27 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8515
  %28 = bitcast %struct.ls_expr* %27 to i8*, !dbg !8515
  %29 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8516
  %hash_index12 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %29, i32 0, i32 8, !dbg !8517
  %30 = load i32, i32* %hash_index12, align 8, !dbg !8517
  call void @htab_remove_elt_with_hash(%struct.htab* %26, i8* %28, i32 %30), !dbg !8518
  %31 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8519
  call void @free_ldst_entry(%struct.ls_expr* %31), !dbg !8520
  %32 = load %struct.ls_expr**, %struct.ls_expr*** %last, align 8, !dbg !8521
  %33 = load %struct.ls_expr*, %struct.ls_expr** %32, align 8, !dbg !8522
  store %struct.ls_expr* %33, %struct.ls_expr** %ptr, align 8, !dbg !8523
  br label %if.end13

if.end13:                                         ; preds = %if.else10, %if.then7
  br label %while.cond, !dbg !8450, !llvm.loop !8524

while.end:                                        ; preds = %while.cond
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8526
  %tobool14 = icmp ne %struct._IO_FILE* %34, null, !dbg !8526
  br i1 %tobool14, label %land.lhs.true, label %if.end17, !dbg !8528

land.lhs.true:                                    ; preds = %while.end
  %35 = load %struct.ls_expr*, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8529
  %cmp15 = icmp ne %struct.ls_expr* %35, null, !dbg !8530
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !8531

if.then16:                                        ; preds = %land.lhs.true
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8532
  call void @print_ldst_list(%struct._IO_FILE* %36), !dbg !8533
  br label %if.end17, !dbg !8533

if.end17:                                         ; preds = %if.then16, %land.lhs.true, %while.end
  ret void, !dbg !8534
}

; Function Attrs: noinline nounwind uwtable
define internal void @alloc_pre_mem(i32 %n_blocks, i32 %n_exprs) #0 !dbg !8535 {
entry:
  %n_blocks.addr = alloca i32, align 4
  %n_exprs.addr = alloca i32, align 4
  store i32 %n_blocks, i32* %n_blocks.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_blocks.addr, metadata !8536, metadata !DIExpression()), !dbg !8537
  store i32 %n_exprs, i32* %n_exprs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_exprs.addr, metadata !8538, metadata !DIExpression()), !dbg !8539
  %0 = load i32, i32* %n_blocks.addr, align 4, !dbg !8540
  %1 = load i32, i32* %n_exprs.addr, align 4, !dbg !8541
  %call = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %0, i32 %1), !dbg !8542
  store %struct.simple_bitmap_def** %call, %struct.simple_bitmap_def*** @transp, align 8, !dbg !8543
  %2 = load i32, i32* %n_blocks.addr, align 4, !dbg !8544
  %3 = load i32, i32* %n_exprs.addr, align 4, !dbg !8545
  %call1 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %2, i32 %3), !dbg !8546
  store %struct.simple_bitmap_def** %call1, %struct.simple_bitmap_def*** @comp, align 8, !dbg !8547
  %4 = load i32, i32* %n_blocks.addr, align 4, !dbg !8548
  %5 = load i32, i32* %n_exprs.addr, align 4, !dbg !8549
  %call2 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %4, i32 %5), !dbg !8550
  store %struct.simple_bitmap_def** %call2, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !8551
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @pre_optimal, align 8, !dbg !8552
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @pre_redundant, align 8, !dbg !8553
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @pre_insert_map, align 8, !dbg !8554
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @pre_delete_map, align 8, !dbg !8555
  %6 = load i32, i32* %n_blocks.addr, align 4, !dbg !8556
  %7 = load i32, i32* %n_exprs.addr, align 4, !dbg !8557
  %call3 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %6, i32 %7), !dbg !8558
  store %struct.simple_bitmap_def** %call3, %struct.simple_bitmap_def*** @ae_kill, align 8, !dbg !8559
  ret void, !dbg !8560
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_pre_data() #0 !dbg !8561 {
entry:
  %trapping_expr = alloca %struct.simple_bitmap_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %ui = alloca i32, align 4
  %e = alloca %struct.expr*, align 8
  %e14 = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %trapping_expr, metadata !8562, metadata !DIExpression()), !dbg !8563
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8564, metadata !DIExpression()), !dbg !8565
  call void @llvm.dbg.declare(metadata i32* %ui, metadata !8566, metadata !DIExpression()), !dbg !8567
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !8568
  %1 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @comp, align 8, !dbg !8569
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !8570
  call void @compute_local_properties(%struct.simple_bitmap_def** %0, %struct.simple_bitmap_def** %1, %struct.simple_bitmap_def** %2, %struct.hash_table_d* @expr_hash_table), !dbg !8571
  %3 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ae_kill, align 8, !dbg !8572
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8573
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !8573
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8573
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8573
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !8573
  %6 = load i32, i32* %x_last_basic_block, align 8, !dbg !8573
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %3, i32 %6), !dbg !8574
  %7 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !8575
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %7), !dbg !8576
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %trapping_expr, align 8, !dbg !8577
  %8 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %trapping_expr, align 8, !dbg !8578
  call void @sbitmap_zero(%struct.simple_bitmap_def* %8), !dbg !8579
  store i32 0, i32* %ui, align 4, !dbg !8580
  br label %for.cond, !dbg !8582

for.cond:                                         ; preds = %for.inc5, %entry
  %9 = load i32, i32* %ui, align 4, !dbg !8583
  %10 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 1), align 8, !dbg !8585
  %cmp = icmp ult i32 %9, %10, !dbg !8586
  br i1 %cmp, label %for.body, label %for.end6, !dbg !8587

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.expr** %e, metadata !8588, metadata !DIExpression()), !dbg !8590
  %11 = load %struct.expr**, %struct.expr*** getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 0), align 8, !dbg !8591
  %12 = load i32, i32* %ui, align 4, !dbg !8593
  %idxprom = zext i32 %12 to i64, !dbg !8594
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %11, i64 %idxprom, !dbg !8594
  %13 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !8594
  store %struct.expr* %13, %struct.expr** %e, align 8, !dbg !8595
  br label %for.cond1, !dbg !8596

for.cond1:                                        ; preds = %for.inc, %for.body
  %14 = load %struct.expr*, %struct.expr** %e, align 8, !dbg !8597
  %cmp2 = icmp ne %struct.expr* %14, null, !dbg !8599
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !8600

for.body3:                                        ; preds = %for.cond1
  %15 = load %struct.expr*, %struct.expr** %e, align 8, !dbg !8601
  %expr = getelementptr inbounds %struct.expr, %struct.expr* %15, i32 0, i32 0, !dbg !8603
  %16 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !8603
  %call4 = call i32 @may_trap_p(%struct.rtx_def* %16), !dbg !8604
  %tobool = icmp ne i32 %call4, 0, !dbg !8604
  br i1 %tobool, label %if.then, label %if.end, !dbg !8605

if.then:                                          ; preds = %for.body3
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %trapping_expr, align 8, !dbg !8606
  %18 = load %struct.expr*, %struct.expr** %e, align 8, !dbg !8607
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %18, i32 0, i32 1, !dbg !8608
  %19 = load i32, i32* %bitmap_index, align 8, !dbg !8608
  call void @SET_BIT(%struct.simple_bitmap_def* %17, i32 %19), !dbg !8609
  br label %if.end, !dbg !8609

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !8610

for.inc:                                          ; preds = %if.end
  %20 = load %struct.expr*, %struct.expr** %e, align 8, !dbg !8611
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %20, i32 0, i32 2, !dbg !8612
  %21 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !8612
  store %struct.expr* %21, %struct.expr** %e, align 8, !dbg !8613
  br label %for.cond1, !dbg !8614, !llvm.loop !8615

for.end:                                          ; preds = %for.cond1
  br label %for.inc5, !dbg !8617

for.inc5:                                         ; preds = %for.end
  %22 = load i32, i32* %ui, align 4, !dbg !8618
  %inc = add i32 %22, 1, !dbg !8618
  store i32 %inc, i32* %ui, align 4, !dbg !8618
  br label %for.cond, !dbg !8619, !llvm.loop !8620

for.end6:                                         ; preds = %for.cond
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8622
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !8622
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !8622
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !8622
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 0, !dbg !8622
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8622
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 6, !dbg !8622
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8622
  store %struct.basic_block_def* %26, %struct.basic_block_def** %bb, align 8, !dbg !8622
  br label %for.cond9, !dbg !8622

for.cond9:                                        ; preds = %for.inc51, %for.end6
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8624
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8624
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !8624
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 1, !dbg !8624
  %29 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !8624
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i32 0, i32 1, !dbg !8624
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8624
  %cmp12 = icmp ne %struct.basic_block_def* %27, %30, !dbg !8624
  br i1 %cmp12, label %for.body13, label %for.end53, !dbg !8622

for.body13:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e14, metadata !8626, metadata !DIExpression()), !dbg !8628
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8629, metadata !DIExpression()), !dbg !8630
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8631
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 0, !dbg !8631
  %call15 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !8631
  %32 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8631
  %33 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 0, !dbg !8631
  %34 = extractvalue { i32, %struct.VEC_edge_gc** } %call15, 0, !dbg !8631
  store i32 %34, i32* %33, align 8, !dbg !8631
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 1, !dbg !8631
  %36 = extractvalue { i32, %struct.VEC_edge_gc** } %call15, 1, !dbg !8631
  store %struct.VEC_edge_gc** %36, %struct.VEC_edge_gc*** %35, align 8, !dbg !8631
  %37 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8631
  %38 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8631
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false), !dbg !8631
  br label %for.cond16, !dbg !8631

for.cond16:                                       ; preds = %for.inc34, %for.body13
  %39 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8633
  %40 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %39, i32 0, i32 0, !dbg !8633
  %41 = load i32, i32* %40, align 8, !dbg !8633
  %42 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %39, i32 0, i32 1, !dbg !8633
  %43 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %42, align 8, !dbg !8633
  %call17 = call zeroext i8 @ei_cond(i32 %41, %struct.VEC_edge_gc** %43, %struct.edge_def** %e14), !dbg !8633
  %tobool18 = icmp ne i8 %call17, 0, !dbg !8631
  br i1 %tobool18, label %for.body19, label %for.end35, !dbg !8631

for.body19:                                       ; preds = %for.cond16
  %44 = load %struct.edge_def*, %struct.edge_def** %e14, align 8, !dbg !8635
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %44, i32 0, i32 7, !dbg !8637
  %45 = load i32, i32* %flags, align 8, !dbg !8637
  %and = and i32 %45, 2, !dbg !8638
  %tobool20 = icmp ne i32 %and, 0, !dbg !8638
  br i1 %tobool20, label %if.then21, label %if.end33, !dbg !8639

if.then21:                                        ; preds = %for.body19
  %46 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !8640
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8642
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 9, !dbg !8643
  %48 = load i32, i32* %index, align 8, !dbg !8643
  %idxprom22 = sext i32 %48 to i64, !dbg !8640
  %arrayidx23 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %46, i64 %idxprom22, !dbg !8640
  %49 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx23, align 8, !dbg !8640
  %50 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !8644
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8645
  %index24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !8646
  %52 = load i32, i32* %index24, align 8, !dbg !8646
  %idxprom25 = sext i32 %52 to i64, !dbg !8644
  %arrayidx26 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %50, i64 %idxprom25, !dbg !8644
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx26, align 8, !dbg !8644
  %54 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %trapping_expr, align 8, !dbg !8647
  call void @sbitmap_difference(%struct.simple_bitmap_def* %49, %struct.simple_bitmap_def* %53, %struct.simple_bitmap_def* %54), !dbg !8648
  %55 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !8649
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8650
  %index27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 9, !dbg !8651
  %57 = load i32, i32* %index27, align 8, !dbg !8651
  %idxprom28 = sext i32 %57 to i64, !dbg !8649
  %arrayidx29 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %55, i64 %idxprom28, !dbg !8649
  %58 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx29, align 8, !dbg !8649
  %59 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !8652
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8653
  %index30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 9, !dbg !8654
  %61 = load i32, i32* %index30, align 8, !dbg !8654
  %idxprom31 = sext i32 %61 to i64, !dbg !8652
  %arrayidx32 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %59, i64 %idxprom31, !dbg !8652
  %62 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx32, align 8, !dbg !8652
  %63 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %trapping_expr, align 8, !dbg !8655
  call void @sbitmap_difference(%struct.simple_bitmap_def* %58, %struct.simple_bitmap_def* %62, %struct.simple_bitmap_def* %63), !dbg !8656
  br label %for.end35, !dbg !8657

if.end33:                                         ; preds = %for.body19
  br label %for.inc34, !dbg !8658

for.inc34:                                        ; preds = %if.end33
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8633
  br label %for.cond16, !dbg !8633, !llvm.loop !8659

for.end35:                                        ; preds = %if.then21, %for.cond16
  %64 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ae_kill, align 8, !dbg !8661
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8662
  %index36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 9, !dbg !8663
  %66 = load i32, i32* %index36, align 8, !dbg !8663
  %idxprom37 = sext i32 %66 to i64, !dbg !8661
  %arrayidx38 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %64, i64 %idxprom37, !dbg !8661
  %67 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx38, align 8, !dbg !8661
  %68 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !8664
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8665
  %index39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 9, !dbg !8666
  %70 = load i32, i32* %index39, align 8, !dbg !8666
  %idxprom40 = sext i32 %70 to i64, !dbg !8664
  %arrayidx41 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %68, i64 %idxprom40, !dbg !8664
  %71 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx41, align 8, !dbg !8664
  %72 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @comp, align 8, !dbg !8667
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8668
  %index42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 9, !dbg !8669
  %74 = load i32, i32* %index42, align 8, !dbg !8669
  %idxprom43 = sext i32 %74 to i64, !dbg !8667
  %arrayidx44 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %72, i64 %idxprom43, !dbg !8667
  %75 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx44, align 8, !dbg !8667
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %67, %struct.simple_bitmap_def* %71, %struct.simple_bitmap_def* %75), !dbg !8670
  %76 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ae_kill, align 8, !dbg !8671
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8672
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 9, !dbg !8673
  %78 = load i32, i32* %index45, align 8, !dbg !8673
  %idxprom46 = sext i32 %78 to i64, !dbg !8671
  %arrayidx47 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %76, i64 %idxprom46, !dbg !8671
  %79 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx47, align 8, !dbg !8671
  %80 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ae_kill, align 8, !dbg !8674
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8675
  %index48 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 9, !dbg !8676
  %82 = load i32, i32* %index48, align 8, !dbg !8676
  %idxprom49 = sext i32 %82 to i64, !dbg !8674
  %arrayidx50 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %80, i64 %idxprom49, !dbg !8674
  %83 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx50, align 8, !dbg !8674
  call void @sbitmap_not(%struct.simple_bitmap_def* %79, %struct.simple_bitmap_def* %83), !dbg !8677
  br label %for.inc51, !dbg !8678

for.inc51:                                        ; preds = %for.end35
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8624
  %next_bb52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 6, !dbg !8624
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb52, align 8, !dbg !8624
  store %struct.basic_block_def* %85, %struct.basic_block_def** %bb, align 8, !dbg !8624
  br label %for.cond9, !dbg !8624, !llvm.loop !8679

for.end53:                                        ; preds = %for.cond9
  %86 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !8681
  %87 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !8682
  %88 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @comp, align 8, !dbg !8683
  %89 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !8684
  %90 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ae_kill, align 8, !dbg !8685
  %call54 = call %struct.edge_list* @pre_edge_lcm(i32 %86, %struct.simple_bitmap_def** %87, %struct.simple_bitmap_def** %88, %struct.simple_bitmap_def** %89, %struct.simple_bitmap_def** %90, %struct.simple_bitmap_def*** @pre_insert_map, %struct.simple_bitmap_def*** @pre_delete_map), !dbg !8686
  store %struct.edge_list* %call54, %struct.edge_list** @edge_list, align 8, !dbg !8687
  %91 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !8688
  %92 = bitcast %struct.simple_bitmap_def** %91 to i8*, !dbg !8688
  call void @free(i8* %92), !dbg !8688
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !8689
  %93 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ae_kill, align 8, !dbg !8690
  %94 = bitcast %struct.simple_bitmap_def** %93 to i8*, !dbg !8690
  call void @free(i8* %94), !dbg !8690
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @ae_kill, align 8, !dbg !8691
  %95 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %trapping_expr, align 8, !dbg !8692
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %95, i32 0, i32 0, !dbg !8692
  %96 = load i8*, i8** %popcount, align 8, !dbg !8692
  call void @free(i8* %96), !dbg !8692
  %97 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %trapping_expr, align 8, !dbg !8692
  %98 = bitcast %struct.simple_bitmap_def* %97 to i8*, !dbg !8692
  call void @free(i8* %98), !dbg !8692
  ret void, !dbg !8693
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_gcse() #0 !dbg !8694 {
entry:
  %i = alloca i32, align 4
  %did_insert = alloca i32, align 4
  %changed = alloca i32, align 4
  %index_map = alloca %struct.expr**, align 8
  %expr = alloca %struct.expr*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8695, metadata !DIExpression()), !dbg !8696
  call void @llvm.dbg.declare(metadata i32* %did_insert, metadata !8697, metadata !DIExpression()), !dbg !8698
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !8699, metadata !DIExpression()), !dbg !8700
  call void @llvm.dbg.declare(metadata %struct.expr*** %index_map, metadata !8701, metadata !DIExpression()), !dbg !8702
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !8703, metadata !DIExpression()), !dbg !8704
  %0 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !8705
  %conv = zext i32 %0 to i64, !dbg !8705
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !8705
  %1 = bitcast i8* %call to %struct.expr**, !dbg !8705
  store %struct.expr** %1, %struct.expr*** %index_map, align 8, !dbg !8706
  store i32 0, i32* %i, align 4, !dbg !8707
  br label %for.cond, !dbg !8709

for.cond:                                         ; preds = %for.inc8, %entry
  %2 = load i32, i32* %i, align 4, !dbg !8710
  %3 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 1), align 8, !dbg !8712
  %cmp = icmp ult i32 %2, %3, !dbg !8713
  br i1 %cmp, label %for.body, label %for.end9, !dbg !8714

for.body:                                         ; preds = %for.cond
  %4 = load %struct.expr**, %struct.expr*** getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 0), align 8, !dbg !8715
  %5 = load i32, i32* %i, align 4, !dbg !8717
  %idxprom = zext i32 %5 to i64, !dbg !8718
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %4, i64 %idxprom, !dbg !8718
  %6 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !8718
  store %struct.expr* %6, %struct.expr** %expr, align 8, !dbg !8719
  br label %for.cond2, !dbg !8720

for.cond2:                                        ; preds = %for.inc, %for.body
  %7 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8721
  %cmp3 = icmp ne %struct.expr* %7, null, !dbg !8723
  br i1 %cmp3, label %for.body5, label %for.end, !dbg !8724

for.body5:                                        ; preds = %for.cond2
  %8 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8725
  %9 = load %struct.expr**, %struct.expr*** %index_map, align 8, !dbg !8726
  %10 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8727
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %10, i32 0, i32 1, !dbg !8728
  %11 = load i32, i32* %bitmap_index, align 8, !dbg !8728
  %idxprom6 = sext i32 %11 to i64, !dbg !8726
  %arrayidx7 = getelementptr inbounds %struct.expr*, %struct.expr** %9, i64 %idxprom6, !dbg !8726
  store %struct.expr* %8, %struct.expr** %arrayidx7, align 8, !dbg !8729
  br label %for.inc, !dbg !8726

for.inc:                                          ; preds = %for.body5
  %12 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !8730
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %12, i32 0, i32 2, !dbg !8731
  %13 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !8731
  store %struct.expr* %13, %struct.expr** %expr, align 8, !dbg !8732
  br label %for.cond2, !dbg !8733, !llvm.loop !8734

for.end:                                          ; preds = %for.cond2
  br label %for.inc8, !dbg !8735

for.inc8:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4, !dbg !8736
  %inc = add i32 %14, 1, !dbg !8736
  store i32 %inc, i32* %i, align 4, !dbg !8736
  br label %for.cond, !dbg !8737, !llvm.loop !8738

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 @pre_delete(), !dbg !8740
  store i32 %call10, i32* %changed, align 4, !dbg !8741
  %15 = load %struct.edge_list*, %struct.edge_list** @edge_list, align 8, !dbg !8742
  %16 = load %struct.expr**, %struct.expr*** %index_map, align 8, !dbg !8743
  %call11 = call i32 @pre_edge_insert(%struct.edge_list* %15, %struct.expr** %16), !dbg !8744
  store i32 %call11, i32* %did_insert, align 4, !dbg !8745
  call void @pre_insert_copies(), !dbg !8746
  %17 = load i32, i32* %did_insert, align 4, !dbg !8747
  %tobool = icmp ne i32 %17, 0, !dbg !8747
  br i1 %tobool, label %if.then, label %if.end, !dbg !8749

if.then:                                          ; preds = %for.end9
  call void @commit_edge_insertions(), !dbg !8750
  store i32 1, i32* %changed, align 4, !dbg !8752
  br label %if.end, !dbg !8753

if.end:                                           ; preds = %if.then, %for.end9
  %18 = load %struct.expr**, %struct.expr*** %index_map, align 8, !dbg !8754
  %19 = bitcast %struct.expr** %18 to i8*, !dbg !8754
  call void @free(i8* %19), !dbg !8755
  %20 = load i32, i32* %changed, align 4, !dbg !8756
  ret i32 %20, !dbg !8757
}

declare dso_local void @free_edge_list(%struct.edge_list*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_pre_mem() #0 !dbg !8758 {
entry:
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !8759
  %1 = bitcast %struct.simple_bitmap_def** %0 to i8*, !dbg !8759
  call void @free(i8* %1), !dbg !8759
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @comp, align 8, !dbg !8760
  %3 = bitcast %struct.simple_bitmap_def** %2 to i8*, !dbg !8760
  call void @free(i8* %3), !dbg !8760
  %4 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_optimal, align 8, !dbg !8761
  %tobool = icmp ne %struct.simple_bitmap_def** %4, null, !dbg !8761
  br i1 %tobool, label %if.then, label %if.end, !dbg !8763

if.then:                                          ; preds = %entry
  %5 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_optimal, align 8, !dbg !8764
  %6 = bitcast %struct.simple_bitmap_def** %5 to i8*, !dbg !8764
  call void @free(i8* %6), !dbg !8764
  br label %if.end, !dbg !8764

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_redundant, align 8, !dbg !8765
  %tobool1 = icmp ne %struct.simple_bitmap_def** %7, null, !dbg !8765
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !8767

if.then2:                                         ; preds = %if.end
  %8 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_redundant, align 8, !dbg !8768
  %9 = bitcast %struct.simple_bitmap_def** %8 to i8*, !dbg !8768
  call void @free(i8* %9), !dbg !8768
  br label %if.end3, !dbg !8768

if.end3:                                          ; preds = %if.then2, %if.end
  %10 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_insert_map, align 8, !dbg !8769
  %tobool4 = icmp ne %struct.simple_bitmap_def** %10, null, !dbg !8769
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !8771

if.then5:                                         ; preds = %if.end3
  %11 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_insert_map, align 8, !dbg !8772
  %12 = bitcast %struct.simple_bitmap_def** %11 to i8*, !dbg !8772
  call void @free(i8* %12), !dbg !8772
  br label %if.end6, !dbg !8772

if.end6:                                          ; preds = %if.then5, %if.end3
  %13 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_delete_map, align 8, !dbg !8773
  %tobool7 = icmp ne %struct.simple_bitmap_def** %13, null, !dbg !8773
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !8775

if.then8:                                         ; preds = %if.end6
  %14 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_delete_map, align 8, !dbg !8776
  %15 = bitcast %struct.simple_bitmap_def** %14 to i8*, !dbg !8776
  call void @free(i8* %15), !dbg !8776
  br label %if.end9, !dbg !8776

if.end9:                                          ; preds = %if.then8, %if.end6
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @comp, align 8, !dbg !8777
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @transp, align 8, !dbg !8778
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @pre_delete_map, align 8, !dbg !8779
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @pre_insert_map, align 8, !dbg !8780
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @pre_redundant, align 8, !dbg !8781
  store %struct.simple_bitmap_def** null, %struct.simple_bitmap_def*** @pre_optimal, align 8, !dbg !8782
  ret void, !dbg !8783
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_ldst_mems() #0 !dbg !8784 {
entry:
  %tmp = alloca %struct.ls_expr*, align 8
  %0 = load %struct.htab*, %struct.htab** @pre_ldst_table, align 8, !dbg !8785
  %tobool = icmp ne %struct.htab* %0, null, !dbg !8785
  br i1 %tobool, label %if.then, label %if.end, !dbg !8787

if.then:                                          ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @pre_ldst_table, align 8, !dbg !8788
  call void @htab_delete(%struct.htab* %1), !dbg !8789
  br label %if.end, !dbg !8789

if.end:                                           ; preds = %if.then, %entry
  store %struct.htab* null, %struct.htab** @pre_ldst_table, align 8, !dbg !8790
  br label %while.cond, !dbg !8791

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load %struct.ls_expr*, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8792
  %tobool1 = icmp ne %struct.ls_expr* %2, null, !dbg !8791
  br i1 %tobool1, label %while.body, label %while.end, !dbg !8791

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %tmp, metadata !8793, metadata !DIExpression()), !dbg !8795
  %3 = load %struct.ls_expr*, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8796
  store %struct.ls_expr* %3, %struct.ls_expr** %tmp, align 8, !dbg !8795
  %4 = load %struct.ls_expr*, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8797
  %next = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %4, i32 0, i32 5, !dbg !8798
  %5 = load %struct.ls_expr*, %struct.ls_expr** %next, align 8, !dbg !8798
  store %struct.ls_expr* %5, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8799
  %6 = load %struct.ls_expr*, %struct.ls_expr** %tmp, align 8, !dbg !8800
  call void @free_ldst_entry(%struct.ls_expr* %6), !dbg !8801
  br label %while.cond, !dbg !8791, !llvm.loop !8802

while.end:                                        ; preds = %while.cond
  store %struct.ls_expr* null, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8804
  ret void, !dbg !8805
}

declare dso_local void @remove_fake_exit_edges() #2

declare dso_local void @end_alias_analysis() #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_ldst_expr_hash(i8* %p) #0 !dbg !8806 {
entry:
  %p.addr = alloca i8*, align 8
  %do_not_record_p = alloca i32, align 4
  %x = alloca %struct.ls_expr*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !8807, metadata !DIExpression()), !dbg !8808
  call void @llvm.dbg.declare(metadata i32* %do_not_record_p, metadata !8809, metadata !DIExpression()), !dbg !8810
  store i32 0, i32* %do_not_record_p, align 4, !dbg !8810
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %x, metadata !8811, metadata !DIExpression()), !dbg !8813
  %0 = load i8*, i8** %p.addr, align 8, !dbg !8814
  %1 = bitcast i8* %0 to %struct.ls_expr*, !dbg !8815
  store %struct.ls_expr* %1, %struct.ls_expr** %x, align 8, !dbg !8813
  %2 = load %struct.ls_expr*, %struct.ls_expr** %x, align 8, !dbg !8816
  %pattern = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %2, i32 0, i32 1, !dbg !8817
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !8817
  %4 = load %struct.ls_expr*, %struct.ls_expr** %x, align 8, !dbg !8818
  %pattern1 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %4, i32 0, i32 1, !dbg !8818
  %5 = load %struct.rtx_def*, %struct.rtx_def** %pattern1, align 8, !dbg !8818
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8818
  %bf.load = load i32, i32* %6, align 8, !dbg !8818
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8818
  %bf.clear = and i32 %bf.lshr, 255, !dbg !8818
  %call = call i32 @hash_rtx(%struct.rtx_def* %3, i32 %bf.clear, i32* %do_not_record_p, i32* null, i8 zeroext 0), !dbg !8819
  ret i32 %call, !dbg !8820
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_ldst_expr_eq(i8* %p1, i8* %p2) #0 !dbg !8821 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %ptr1 = alloca %struct.ls_expr*, align 8
  %ptr2 = alloca %struct.ls_expr*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !8822, metadata !DIExpression()), !dbg !8823
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !8824, metadata !DIExpression()), !dbg !8825
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr1, metadata !8826, metadata !DIExpression()), !dbg !8827
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !8828
  %1 = bitcast i8* %0 to %struct.ls_expr*, !dbg !8829
  store %struct.ls_expr* %1, %struct.ls_expr** %ptr1, align 8, !dbg !8827
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr2, metadata !8830, metadata !DIExpression()), !dbg !8831
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !8832
  %3 = bitcast i8* %2 to %struct.ls_expr*, !dbg !8833
  store %struct.ls_expr* %3, %struct.ls_expr** %ptr2, align 8, !dbg !8831
  %4 = load %struct.ls_expr*, %struct.ls_expr** %ptr1, align 8, !dbg !8834
  %pattern = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %4, i32 0, i32 1, !dbg !8835
  %5 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !8835
  %6 = load %struct.ls_expr*, %struct.ls_expr** %ptr2, align 8, !dbg !8836
  %pattern1 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %6, i32 0, i32 1, !dbg !8837
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pattern1, align 8, !dbg !8837
  %call = call i32 @expr_equiv_p(%struct.rtx_def* %5, %struct.rtx_def* %7), !dbg !8838
  ret i32 %call, !dbg !8839
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @simple_mem(%struct.rtx_def* %x) #0 !dbg !8840 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8843, metadata !DIExpression()), !dbg !8844
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8845
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8845
  %bf.load = load i32, i32* %1, align 8, !dbg !8845
  %bf.clear = and i32 %bf.load, 65535, !dbg !8845
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !8845
  br i1 %cmp, label %if.end, label %if.then, !dbg !8847

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8848
  br label %return, !dbg !8848

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8849
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8849
  %bf.load1 = load i32, i32* %3, align 8, !dbg !8849
  %bf.lshr = lshr i32 %bf.load1, 27, !dbg !8849
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !8849
  %tobool = icmp ne i32 %bf.clear2, 0, !dbg !8849
  br i1 %tobool, label %if.then3, label %if.end4, !dbg !8851

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !8852
  br label %return, !dbg !8852

if.end4:                                          ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8853
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8853
  %bf.load5 = load i32, i32* %5, align 8, !dbg !8853
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !8853
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !8853
  %cmp8 = icmp eq i32 %bf.clear7, 1, !dbg !8855
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !8856

if.then9:                                         ; preds = %if.end4
  store i32 0, i32* %retval, align 4, !dbg !8857
  br label %return, !dbg !8857

if.end10:                                         ; preds = %if.end4
  %6 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !8858
  %tobool11 = icmp ne i32 %6, 0, !dbg !8858
  br i1 %tobool11, label %land.lhs.true, label %if.end14, !dbg !8860

land.lhs.true:                                    ; preds = %if.end10
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8861
  %call = call i32 @may_trap_p(%struct.rtx_def* %7), !dbg !8862
  %tobool12 = icmp ne i32 %call, 0, !dbg !8862
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !8863

if.then13:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !8864
  br label %return, !dbg !8864

if.end14:                                         ; preds = %land.lhs.true, %if.end10
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8865
  %call15 = call i32 @side_effects_p(%struct.rtx_def* %8), !dbg !8867
  %tobool16 = icmp ne i32 %call15, 0, !dbg !8867
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !8868

if.then17:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4, !dbg !8869
  br label %return, !dbg !8869

if.end18:                                         ; preds = %if.end14
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !8870
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8872
  %call19 = call i32 @reg_mentioned_p(%struct.rtx_def* %9, %struct.rtx_def* %10), !dbg !8873
  %tobool20 = icmp ne i32 %call19, 0, !dbg !8873
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !8874

if.then21:                                        ; preds = %if.end18
  store i32 0, i32* %retval, align 4, !dbg !8875
  br label %return, !dbg !8875

if.end22:                                         ; preds = %if.end18
  %11 = load i32, i32* @flag_float_store, align 4, !dbg !8876
  %tobool23 = icmp ne i32 %11, 0, !dbg !8876
  br i1 %tobool23, label %land.lhs.true24, label %if.end57, !dbg !8878

land.lhs.true24:                                  ; preds = %if.end22
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8879
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !8879
  %bf.load25 = load i32, i32* %13, align 8, !dbg !8879
  %bf.lshr26 = lshr i32 %bf.load25, 16, !dbg !8879
  %bf.clear27 = and i32 %bf.lshr26, 255, !dbg !8879
  %idxprom = zext i32 %bf.clear27 to i64, !dbg !8879
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !8879
  %14 = load i8, i8* %arrayidx, align 1, !dbg !8879
  %conv = zext i8 %14 to i32, !dbg !8879
  %cmp28 = icmp eq i32 %conv, 8, !dbg !8879
  br i1 %cmp28, label %if.then56, label %lor.lhs.false, !dbg !8879

lor.lhs.false:                                    ; preds = %land.lhs.true24
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8879
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !8879
  %bf.load30 = load i32, i32* %16, align 8, !dbg !8879
  %bf.lshr31 = lshr i32 %bf.load30, 16, !dbg !8879
  %bf.clear32 = and i32 %bf.lshr31, 255, !dbg !8879
  %idxprom33 = zext i32 %bf.clear32 to i64, !dbg !8879
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom33, !dbg !8879
  %17 = load i8, i8* %arrayidx34, align 1, !dbg !8879
  %conv35 = zext i8 %17 to i32, !dbg !8879
  %cmp36 = icmp eq i32 %conv35, 9, !dbg !8879
  br i1 %cmp36, label %if.then56, label %lor.lhs.false38, !dbg !8879

lor.lhs.false38:                                  ; preds = %lor.lhs.false
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8879
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !8879
  %bf.load39 = load i32, i32* %19, align 8, !dbg !8879
  %bf.lshr40 = lshr i32 %bf.load39, 16, !dbg !8879
  %bf.clear41 = and i32 %bf.lshr40, 255, !dbg !8879
  %idxprom42 = zext i32 %bf.clear41 to i64, !dbg !8879
  %arrayidx43 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom42, !dbg !8879
  %20 = load i8, i8* %arrayidx43, align 1, !dbg !8879
  %conv44 = zext i8 %20 to i32, !dbg !8879
  %cmp45 = icmp eq i32 %conv44, 11, !dbg !8879
  br i1 %cmp45, label %if.then56, label %lor.lhs.false47, !dbg !8879

lor.lhs.false47:                                  ; preds = %lor.lhs.false38
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8879
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !8879
  %bf.load48 = load i32, i32* %22, align 8, !dbg !8879
  %bf.lshr49 = lshr i32 %bf.load48, 16, !dbg !8879
  %bf.clear50 = and i32 %bf.lshr49, 255, !dbg !8879
  %idxprom51 = zext i32 %bf.clear50 to i64, !dbg !8879
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom51, !dbg !8879
  %23 = load i8, i8* %arrayidx52, align 1, !dbg !8879
  %conv53 = zext i8 %23 to i32, !dbg !8879
  %cmp54 = icmp eq i32 %conv53, 17, !dbg !8879
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !8880

if.then56:                                        ; preds = %lor.lhs.false47, %lor.lhs.false38, %lor.lhs.false, %land.lhs.true24
  store i32 0, i32* %retval, align 4, !dbg !8881
  br label %return, !dbg !8881

if.end57:                                         ; preds = %lor.lhs.false47, %if.end22
  store i32 1, i32* %retval, align 4, !dbg !8882
  br label %return, !dbg !8882

return:                                           ; preds = %if.end57, %if.then56, %if.then21, %if.then17, %if.then13, %if.then9, %if.then3, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !8883
  ret i32 %24, !dbg !8883
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ls_expr* @ldst_entry(%struct.rtx_def* %x) #0 !dbg !8884 {
entry:
  %retval = alloca %struct.ls_expr*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %do_not_record_p = alloca i32, align 4
  %ptr = alloca %struct.ls_expr*, align 8
  %hash = alloca i32, align 4
  %slot = alloca i8**, align 8
  %e = alloca %struct.ls_expr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8885, metadata !DIExpression()), !dbg !8886
  call void @llvm.dbg.declare(metadata i32* %do_not_record_p, metadata !8887, metadata !DIExpression()), !dbg !8888
  store i32 0, i32* %do_not_record_p, align 4, !dbg !8888
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr, metadata !8889, metadata !DIExpression()), !dbg !8890
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !8891, metadata !DIExpression()), !dbg !8892
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8893, metadata !DIExpression()), !dbg !8894
  call void @llvm.dbg.declare(metadata %struct.ls_expr* %e, metadata !8895, metadata !DIExpression()), !dbg !8896
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8897
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8898
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8898
  %bf.load = load i32, i32* %2, align 8, !dbg !8898
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8898
  %bf.clear = and i32 %bf.lshr, 255, !dbg !8898
  %call = call i32 @hash_rtx(%struct.rtx_def* %0, i32 %bf.clear, i32* %do_not_record_p, i32* null, i8 zeroext 0), !dbg !8899
  store i32 %call, i32* %hash, align 4, !dbg !8900
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8901
  %pattern = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %e, i32 0, i32 1, !dbg !8902
  store %struct.rtx_def* %3, %struct.rtx_def** %pattern, align 8, !dbg !8903
  %4 = load %struct.htab*, %struct.htab** @pre_ldst_table, align 8, !dbg !8904
  %5 = bitcast %struct.ls_expr* %e to i8*, !dbg !8905
  %6 = load i32, i32* %hash, align 4, !dbg !8906
  %call1 = call i8** @htab_find_slot_with_hash(%struct.htab* %4, i8* %5, i32 %6, i32 1), !dbg !8907
  store i8** %call1, i8*** %slot, align 8, !dbg !8908
  %7 = load i8**, i8*** %slot, align 8, !dbg !8909
  %8 = load i8*, i8** %7, align 8, !dbg !8911
  %tobool = icmp ne i8* %8, null, !dbg !8911
  br i1 %tobool, label %if.then, label %if.end, !dbg !8912

if.then:                                          ; preds = %entry
  %9 = load i8**, i8*** %slot, align 8, !dbg !8913
  %10 = load i8*, i8** %9, align 8, !dbg !8914
  %11 = bitcast i8* %10 to %struct.ls_expr*, !dbg !8915
  store %struct.ls_expr* %11, %struct.ls_expr** %retval, align 8, !dbg !8916
  br label %return, !dbg !8916

if.end:                                           ; preds = %entry
  %call2 = call i8* @xmalloc(i64 72), !dbg !8917
  %12 = bitcast i8* %call2 to %struct.ls_expr*, !dbg !8917
  store %struct.ls_expr* %12, %struct.ls_expr** %ptr, align 8, !dbg !8918
  %13 = load %struct.ls_expr*, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8919
  %14 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8920
  %next = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %14, i32 0, i32 5, !dbg !8921
  store %struct.ls_expr* %13, %struct.ls_expr** %next, align 8, !dbg !8922
  %15 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8923
  %expr = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %15, i32 0, i32 0, !dbg !8924
  store %struct.expr* null, %struct.expr** %expr, align 8, !dbg !8925
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8926
  %17 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8927
  %pattern3 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %17, i32 0, i32 1, !dbg !8928
  store %struct.rtx_def* %16, %struct.rtx_def** %pattern3, align 8, !dbg !8929
  %18 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8930
  %pattern_regs = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %18, i32 0, i32 2, !dbg !8931
  store %struct.rtx_def* null, %struct.rtx_def** %pattern_regs, align 8, !dbg !8932
  %19 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8933
  %loads = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %19, i32 0, i32 3, !dbg !8934
  store %struct.rtx_def* null, %struct.rtx_def** %loads, align 8, !dbg !8935
  %20 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8936
  %stores = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %20, i32 0, i32 4, !dbg !8937
  store %struct.rtx_def* null, %struct.rtx_def** %stores, align 8, !dbg !8938
  %21 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8939
  %reaching_reg = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %21, i32 0, i32 9, !dbg !8940
  store %struct.rtx_def* null, %struct.rtx_def** %reaching_reg, align 8, !dbg !8941
  %22 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8942
  %invalid = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %22, i32 0, i32 6, !dbg !8943
  store i32 0, i32* %invalid, align 8, !dbg !8944
  %23 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8945
  %index = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %23, i32 0, i32 7, !dbg !8946
  store i32 0, i32* %index, align 4, !dbg !8947
  %24 = load i32, i32* %hash, align 4, !dbg !8948
  %25 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8949
  %hash_index = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %25, i32 0, i32 8, !dbg !8950
  store i32 %24, i32* %hash_index, align 8, !dbg !8951
  %26 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8952
  store %struct.ls_expr* %26, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !8953
  %27 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8954
  %28 = bitcast %struct.ls_expr* %27 to i8*, !dbg !8954
  %29 = load i8**, i8*** %slot, align 8, !dbg !8955
  store i8* %28, i8** %29, align 8, !dbg !8956
  %30 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8957
  store %struct.ls_expr* %30, %struct.ls_expr** %retval, align 8, !dbg !8958
  br label %return, !dbg !8958

return:                                           ; preds = %if.end, %if.then
  %31 = load %struct.ls_expr*, %struct.ls_expr** %retval, align 8, !dbg !8959
  ret %struct.ls_expr* %31, !dbg !8959
}

; Function Attrs: noinline nounwind uwtable
define internal void @invalidate_any_buried_refs(%struct.rtx_def* %x) #0 !dbg !8960 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ptr = alloca %struct.ls_expr*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8961, metadata !DIExpression()), !dbg !8962
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !8963, metadata !DIExpression()), !dbg !8964
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8965, metadata !DIExpression()), !dbg !8966
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8967, metadata !DIExpression()), !dbg !8968
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr, metadata !8969, metadata !DIExpression()), !dbg !8970
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8971
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8971
  %bf.load = load i32, i32* %1, align 8, !dbg !8971
  %bf.clear = and i32 %bf.load, 65535, !dbg !8971
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !8971
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8973

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8974
  %call = call i32 @simple_mem(%struct.rtx_def* %2), !dbg !8975
  %tobool = icmp ne i32 %call, 0, !dbg !8975
  br i1 %tobool, label %if.then, label %if.end, !dbg !8976

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8977
  %call1 = call %struct.ls_expr* @ldst_entry(%struct.rtx_def* %3), !dbg !8979
  store %struct.ls_expr* %call1, %struct.ls_expr** %ptr, align 8, !dbg !8980
  %4 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !8981
  %invalid = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %4, i32 0, i32 6, !dbg !8982
  store i32 1, i32* %invalid, align 8, !dbg !8983
  br label %if.end, !dbg !8984

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8985
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8985
  %bf.load2 = load i32, i32* %6, align 8, !dbg !8985
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !8985
  %idxprom = sext i32 %bf.clear3 to i64, !dbg !8985
  %arrayidx = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !8985
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !8985
  store i8* %7, i8** %fmt, align 8, !dbg !8986
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8987
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !8987
  %bf.load4 = load i32, i32* %9, align 8, !dbg !8987
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !8987
  %idxprom6 = sext i32 %bf.clear5 to i64, !dbg !8987
  %arrayidx7 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom6, !dbg !8987
  %10 = load i8, i8* %arrayidx7, align 1, !dbg !8987
  %conv = zext i8 %10 to i32, !dbg !8987
  %sub = sub nsw i32 %conv, 1, !dbg !8989
  store i32 %sub, i32* %i, align 4, !dbg !8990
  br label %for.cond, !dbg !8991

for.cond:                                         ; preds = %for.inc42, %if.end
  %11 = load i32, i32* %i, align 4, !dbg !8992
  %cmp8 = icmp sge i32 %11, 0, !dbg !8994
  br i1 %cmp8, label %for.body, label %for.end44, !dbg !8995

for.body:                                         ; preds = %for.cond
  %12 = load i8*, i8** %fmt, align 8, !dbg !8996
  %13 = load i32, i32* %i, align 4, !dbg !8999
  %idxprom10 = sext i32 %13 to i64, !dbg !8996
  %arrayidx11 = getelementptr inbounds i8, i8* %12, i64 %idxprom10, !dbg !8996
  %14 = load i8, i8* %arrayidx11, align 1, !dbg !8996
  %conv12 = sext i8 %14 to i32, !dbg !8996
  %cmp13 = icmp eq i32 %conv12, 101, !dbg !9000
  br i1 %cmp13, label %if.then15, label %if.else, !dbg !9001

if.then15:                                        ; preds = %for.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9002
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !9002
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9002
  %16 = load i32, i32* %i, align 4, !dbg !9002
  %idxprom16 = sext i32 %16 to i64, !dbg !9002
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom16, !dbg !9002
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !9002
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9002
  call void @invalidate_any_buried_refs(%struct.rtx_def* %17), !dbg !9003
  br label %if.end41, !dbg !9003

if.else:                                          ; preds = %for.body
  %18 = load i8*, i8** %fmt, align 8, !dbg !9004
  %19 = load i32, i32* %i, align 4, !dbg !9006
  %idxprom18 = sext i32 %19 to i64, !dbg !9004
  %arrayidx19 = getelementptr inbounds i8, i8* %18, i64 %idxprom18, !dbg !9004
  %20 = load i8, i8* %arrayidx19, align 1, !dbg !9004
  %conv20 = sext i8 %20 to i32, !dbg !9004
  %cmp21 = icmp eq i32 %conv20, 69, !dbg !9007
  br i1 %cmp21, label %if.then23, label %if.end40, !dbg !9008

if.then23:                                        ; preds = %if.else
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9009
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !9009
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !9009
  %22 = load i32, i32* %i, align 4, !dbg !9009
  %idxprom26 = sext i32 %22 to i64, !dbg !9009
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 %idxprom26, !dbg !9009
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**, !dbg !9009
  %23 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9009
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %23, i32 0, i32 0, !dbg !9009
  %24 = load i32, i32* %num_elem, align 8, !dbg !9009
  %sub28 = sub nsw i32 %24, 1, !dbg !9011
  store i32 %sub28, i32* %j, align 4, !dbg !9012
  br label %for.cond29, !dbg !9013

for.cond29:                                       ; preds = %for.inc, %if.then23
  %25 = load i32, i32* %j, align 4, !dbg !9014
  %cmp30 = icmp sge i32 %25, 0, !dbg !9016
  br i1 %cmp30, label %for.body32, label %for.end, !dbg !9017

for.body32:                                       ; preds = %for.cond29
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9018
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !9018
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !9018
  %27 = load i32, i32* %i, align 4, !dbg !9018
  %idxprom35 = sext i32 %27 to i64, !dbg !9018
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 %idxprom35, !dbg !9018
  %rt_rtvec37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**, !dbg !9018
  %28 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec37, align 8, !dbg !9018
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %28, i32 0, i32 1, !dbg !9018
  %29 = load i32, i32* %j, align 4, !dbg !9018
  %idxprom38 = sext i32 %29 to i64, !dbg !9018
  %arrayidx39 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom38, !dbg !9018
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx39, align 8, !dbg !9018
  call void @invalidate_any_buried_refs(%struct.rtx_def* %30), !dbg !9019
  br label %for.inc, !dbg !9019

for.inc:                                          ; preds = %for.body32
  %31 = load i32, i32* %j, align 4, !dbg !9020
  %dec = add nsw i32 %31, -1, !dbg !9020
  store i32 %dec, i32* %j, align 4, !dbg !9020
  br label %for.cond29, !dbg !9021, !llvm.loop !9022

for.end:                                          ; preds = %for.cond29
  br label %if.end40, !dbg !9023

if.end40:                                         ; preds = %for.end, %if.else
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then15
  br label %for.inc42, !dbg !9024

for.inc42:                                        ; preds = %if.end41
  %32 = load i32, i32* %i, align 4, !dbg !9025
  %dec43 = add nsw i32 %32, -1, !dbg !9025
  store i32 %dec43, i32* %i, align 4, !dbg !9025
  br label %for.cond, !dbg !9026, !llvm.loop !9027

for.end44:                                        ; preds = %for.cond
  ret void, !dbg !9029
}

declare dso_local i32 @may_trap_p(%struct.rtx_def*) #2

declare dso_local i32 @side_effects_p(%struct.rtx_def*) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local void @htab_remove_elt_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_ldst_entry(%struct.ls_expr* %ptr) #0 !dbg !9030 {
entry:
  %ptr.addr = alloca %struct.ls_expr*, align 8
  store %struct.ls_expr* %ptr, %struct.ls_expr** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr.addr, metadata !9033, metadata !DIExpression()), !dbg !9034
  %0 = load %struct.ls_expr*, %struct.ls_expr** %ptr.addr, align 8, !dbg !9035
  %loads = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %0, i32 0, i32 3, !dbg !9036
  call void @free_INSN_LIST_list(%struct.rtx_def** %loads), !dbg !9037
  %1 = load %struct.ls_expr*, %struct.ls_expr** %ptr.addr, align 8, !dbg !9038
  %stores = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %1, i32 0, i32 4, !dbg !9039
  call void @free_INSN_LIST_list(%struct.rtx_def** %stores), !dbg !9040
  %2 = load %struct.ls_expr*, %struct.ls_expr** %ptr.addr, align 8, !dbg !9041
  %3 = bitcast %struct.ls_expr* %2 to i8*, !dbg !9041
  call void @free(i8* %3), !dbg !9042
  ret void, !dbg !9043
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_ldst_list(%struct._IO_FILE* %file) #0 !dbg !9044 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %ptr = alloca %struct.ls_expr*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !9047, metadata !DIExpression()), !dbg !9048
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr, metadata !9049, metadata !DIExpression()), !dbg !9050
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9051
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.32, i64 0, i64 0)), !dbg !9052
  %call1 = call %struct.ls_expr* @first_ls_expr(), !dbg !9053
  store %struct.ls_expr* %call1, %struct.ls_expr** %ptr, align 8, !dbg !9055
  br label %for.cond, !dbg !9056

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !9057
  %cmp = icmp ne %struct.ls_expr* %1, null, !dbg !9059
  br i1 %cmp, label %for.body, label %for.end, !dbg !9060

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9061
  %3 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !9063
  %index = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %3, i32 0, i32 7, !dbg !9064
  %4 = load i32, i32* %index, align 4, !dbg !9064
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.33, i64 0, i64 0), i32 %4), !dbg !9065
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9066
  %6 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !9067
  %pattern = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %6, i32 0, i32 1, !dbg !9068
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !9068
  call void @print_rtl(%struct._IO_FILE* %5, %struct.rtx_def* %7), !dbg !9069
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9070
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.34, i64 0, i64 0)), !dbg !9071
  %9 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !9072
  %loads = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %9, i32 0, i32 3, !dbg !9074
  %10 = load %struct.rtx_def*, %struct.rtx_def** %loads, align 8, !dbg !9074
  %tobool = icmp ne %struct.rtx_def* %10, null, !dbg !9072
  br i1 %tobool, label %if.then, label %if.else, !dbg !9075

if.then:                                          ; preds = %for.body
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9076
  %12 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !9077
  %loads4 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %12, i32 0, i32 3, !dbg !9078
  %13 = load %struct.rtx_def*, %struct.rtx_def** %loads4, align 8, !dbg !9078
  call void @print_rtl(%struct._IO_FILE* %11, %struct.rtx_def* %13), !dbg !9079
  br label %if.end, !dbg !9079

if.else:                                          ; preds = %for.body
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9080
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0)), !dbg !9081
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9082
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i64 0, i64 0)), !dbg !9083
  %16 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !9084
  %stores = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %16, i32 0, i32 4, !dbg !9086
  %17 = load %struct.rtx_def*, %struct.rtx_def** %stores, align 8, !dbg !9086
  %tobool7 = icmp ne %struct.rtx_def* %17, null, !dbg !9084
  br i1 %tobool7, label %if.then8, label %if.else10, !dbg !9087

if.then8:                                         ; preds = %if.end
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9088
  %19 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !9089
  %stores9 = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %19, i32 0, i32 4, !dbg !9090
  %20 = load %struct.rtx_def*, %struct.rtx_def** %stores9, align 8, !dbg !9090
  call void @print_rtl(%struct._IO_FILE* %18, %struct.rtx_def* %20), !dbg !9091
  br label %if.end12, !dbg !9091

if.else10:                                        ; preds = %if.end
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9092
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0)), !dbg !9093
  br label %if.end12

if.end12:                                         ; preds = %if.else10, %if.then8
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9094
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)), !dbg !9095
  br label %for.inc, !dbg !9096

for.inc:                                          ; preds = %if.end12
  %23 = load %struct.ls_expr*, %struct.ls_expr** %ptr, align 8, !dbg !9097
  %call14 = call %struct.ls_expr* @next_ls_expr(%struct.ls_expr* %23), !dbg !9098
  store %struct.ls_expr* %call14, %struct.ls_expr** %ptr, align 8, !dbg !9099
  br label %for.cond, !dbg !9100, !llvm.loop !9101

for.end:                                          ; preds = %for.cond
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9103
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !9104
  ret void, !dbg !9105
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ls_expr* @first_ls_expr() #0 !dbg !9106 {
entry:
  %0 = load %struct.ls_expr*, %struct.ls_expr** @pre_ldst_mems, align 8, !dbg !9109
  ret %struct.ls_expr* %0, !dbg !9110
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ls_expr* @next_ls_expr(%struct.ls_expr* %ptr) #0 !dbg !9111 {
entry:
  %ptr.addr = alloca %struct.ls_expr*, align 8
  store %struct.ls_expr* %ptr, %struct.ls_expr** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %ptr.addr, metadata !9114, metadata !DIExpression()), !dbg !9115
  %0 = load %struct.ls_expr*, %struct.ls_expr** %ptr.addr, align 8, !dbg !9116
  %next = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %0, i32 0, i32 5, !dbg !9117
  %1 = load %struct.ls_expr*, %struct.ls_expr** %next, align 8, !dbg !9117
  ret %struct.ls_expr* %1, !dbg !9118
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_difference(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_a_or_b(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_not(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare dso_local %struct.edge_list* @pre_edge_lcm(i32, %struct.simple_bitmap_def**, %struct.simple_bitmap_def**, %struct.simple_bitmap_def**, %struct.simple_bitmap_def**, %struct.simple_bitmap_def***, %struct.simple_bitmap_def***) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_delete() #0 !dbg !9119 {
entry:
  %i = alloca i32, align 4
  %changed = alloca i32, align 4
  %expr = alloca %struct.expr*, align 8
  %occr = alloca %struct.occr*, align 8
  %indx = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9120, metadata !DIExpression()), !dbg !9121
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !9122, metadata !DIExpression()), !dbg !9123
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !9124, metadata !DIExpression()), !dbg !9125
  call void @llvm.dbg.declare(metadata %struct.occr** %occr, metadata !9126, metadata !DIExpression()), !dbg !9127
  store i32 0, i32* %changed, align 4, !dbg !9128
  store i32 0, i32* %i, align 4, !dbg !9129
  br label %for.cond, !dbg !9131

for.cond:                                         ; preds = %for.inc77, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9132
  %1 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 1), align 8, !dbg !9134
  %cmp = icmp ult i32 %0, %1, !dbg !9135
  br i1 %cmp, label %for.body, label %for.end79, !dbg !9136

for.body:                                         ; preds = %for.cond
  %2 = load %struct.expr**, %struct.expr*** getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 0), align 8, !dbg !9137
  %3 = load i32, i32* %i, align 4, !dbg !9139
  %idxprom = zext i32 %3 to i64, !dbg !9140
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %2, i64 %idxprom, !dbg !9140
  %4 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !9140
  store %struct.expr* %4, %struct.expr** %expr, align 8, !dbg !9141
  br label %for.cond1, !dbg !9142

for.cond1:                                        ; preds = %for.inc75, %for.body
  %5 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9143
  %cmp2 = icmp ne %struct.expr* %5, null, !dbg !9145
  br i1 %cmp2, label %for.body3, label %for.end76, !dbg !9146

for.body3:                                        ; preds = %for.cond1
  call void @llvm.dbg.declare(metadata i32* %indx, metadata !9147, metadata !DIExpression()), !dbg !9149
  %6 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9150
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %6, i32 0, i32 1, !dbg !9151
  %7 = load i32, i32* %bitmap_index, align 8, !dbg !9151
  store i32 %7, i32* %indx, align 4, !dbg !9149
  %8 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9152
  %antic_occr = getelementptr inbounds %struct.expr, %struct.expr* %8, i32 0, i32 3, !dbg !9154
  %9 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !9154
  store %struct.occr* %9, %struct.occr** %occr, align 8, !dbg !9155
  br label %for.cond4, !dbg !9156

for.cond4:                                        ; preds = %for.inc, %for.body3
  %10 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9157
  %cmp5 = icmp ne %struct.occr* %10, null, !dbg !9159
  br i1 %cmp5, label %for.body6, label %for.end, !dbg !9160

for.body6:                                        ; preds = %for.cond4
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9161, metadata !DIExpression()), !dbg !9163
  %11 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9164
  %insn7 = getelementptr inbounds %struct.occr, %struct.occr* %11, i32 0, i32 1, !dbg !9165
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn7, align 8, !dbg !9165
  store %struct.rtx_def* %12, %struct.rtx_def** %insn, align 8, !dbg !9163
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !9166, metadata !DIExpression()), !dbg !9167
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9168, metadata !DIExpression()), !dbg !9169
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9170
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !9170
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9170
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !9170
  %rt_bb = bitcast %union.rtunion_def* %arrayidx8 to %struct.basic_block_def**, !dbg !9170
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !9170
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !9169
  %15 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_delete_map, align 8, !dbg !9171
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9171
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !9171
  %17 = load i32, i32* %index, align 8, !dbg !9171
  %idxprom9 = sext i32 %17 to i64, !dbg !9171
  %arrayidx10 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %15, i64 %idxprom9, !dbg !9171
  %18 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx10, align 8, !dbg !9171
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %18, i32 0, i32 3, !dbg !9171
  %19 = load i32, i32* %indx, align 4, !dbg !9171
  %div = udiv i32 %19, 64, !dbg !9171
  %idxprom11 = zext i32 %div to i64, !dbg !9171
  %arrayidx12 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom11, !dbg !9171
  %20 = load i64, i64* %arrayidx12, align 8, !dbg !9171
  %21 = load i32, i32* %indx, align 4, !dbg !9171
  %rem = urem i32 %21, 64, !dbg !9171
  %sh_prom = zext i32 %rem to i64, !dbg !9171
  %shr = lshr i64 %20, %sh_prom, !dbg !9171
  %and = and i64 %shr, 1, !dbg !9171
  %tobool = icmp ne i64 %and, 0, !dbg !9171
  br i1 %tobool, label %land.lhs.true, label %if.end74, !dbg !9173

land.lhs.true:                                    ; preds = %for.body6
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9174
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !9174
  %bf.load = load i32, i32* %23, align 8, !dbg !9174
  %bf.clear = and i32 %bf.load, 65535, !dbg !9174
  %cmp13 = icmp eq i32 %bf.clear, 8, !dbg !9174
  br i1 %cmp13, label %cond.true, label %lor.lhs.false, !dbg !9174

lor.lhs.false:                                    ; preds = %land.lhs.true
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9174
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !9174
  %bf.load14 = load i32, i32* %25, align 8, !dbg !9174
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !9174
  %cmp16 = icmp eq i32 %bf.clear15, 7, !dbg !9174
  br i1 %cmp16, label %cond.true, label %lor.lhs.false17, !dbg !9174

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9174
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !9174
  %bf.load18 = load i32, i32* %27, align 8, !dbg !9174
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !9174
  %cmp20 = icmp eq i32 %bf.clear19, 9, !dbg !9174
  br i1 %cmp20, label %cond.true, label %lor.lhs.false21, !dbg !9174

lor.lhs.false21:                                  ; preds = %lor.lhs.false17
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9174
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !9174
  %bf.load22 = load i32, i32* %29, align 8, !dbg !9174
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !9174
  %cmp24 = icmp eq i32 %bf.clear23, 10, !dbg !9174
  br i1 %cmp24, label %cond.true, label %cond.false40, !dbg !9174

cond.true:                                        ; preds = %lor.lhs.false21, %lor.lhs.false17, %lor.lhs.false, %land.lhs.true
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9174
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !9174
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !9174
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 5, !dbg !9174
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !9174
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9174
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !9174
  %bf.load28 = load i32, i32* %32, align 8, !dbg !9174
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !9174
  %cmp30 = icmp eq i32 %bf.clear29, 23, !dbg !9174
  br i1 %cmp30, label %cond.true31, label %cond.false, !dbg !9174

cond.true31:                                      ; preds = %cond.true
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9174
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !9174
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !9174
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 5, !dbg !9174
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !9174
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !9174
  br label %cond.end, !dbg !9174

cond.false:                                       ; preds = %cond.true
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9174
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9174
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !9174
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !9174
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 5, !dbg !9174
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !9174
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !9174
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %35, %struct.rtx_def* %37), !dbg !9174
  br label %cond.end, !dbg !9174

cond.end:                                         ; preds = %cond.false, %cond.true31
  %cond = phi %struct.rtx_def* [ %34, %cond.true31 ], [ %call, %cond.false ], !dbg !9174
  br label %cond.end41, !dbg !9174

cond.false40:                                     ; preds = %lor.lhs.false21
  br label %cond.end41, !dbg !9174

cond.end41:                                       ; preds = %cond.false40, %cond.end
  %cond42 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false40 ], !dbg !9174
  store %struct.rtx_def* %cond42, %struct.rtx_def** %set, align 8, !dbg !9175
  %cmp43 = icmp ne %struct.rtx_def* %cond42, null, !dbg !9176
  br i1 %cmp43, label %land.lhs.true44, label %if.end74, !dbg !9177

land.lhs.true44:                                  ; preds = %cond.end41
  %call45 = call zeroext i8 @dbg_cnt(i32 24), !dbg !9178
  %conv = zext i8 %call45 to i32, !dbg !9178
  %tobool46 = icmp ne i32 %conv, 0, !dbg !9178
  br i1 %tobool46, label %if.then, label %if.end74, !dbg !9179

if.then:                                          ; preds = %land.lhs.true44
  %38 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9180
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %38, i32 0, i32 5, !dbg !9183
  %39 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg, align 8, !dbg !9183
  %cmp47 = icmp eq %struct.rtx_def* %39, null, !dbg !9184
  br i1 %cmp47, label %if.then49, label %if.end, !dbg !9185

if.then49:                                        ; preds = %if.then
  %40 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9186
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !9186
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !9186
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 0, !dbg !9186
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !9186
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !9186
  %call54 = call %struct.rtx_def* @gen_reg_rtx_and_attrs(%struct.rtx_def* %41), !dbg !9187
  %42 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9188
  %reaching_reg55 = getelementptr inbounds %struct.expr, %struct.expr* %42, i32 0, i32 5, !dbg !9189
  store %struct.rtx_def* %call54, %struct.rtx_def** %reaching_reg55, align 8, !dbg !9190
  br label %if.end, !dbg !9188

if.end:                                           ; preds = %if.then49, %if.then
  %43 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9191
  %reaching_reg56 = getelementptr inbounds %struct.expr, %struct.expr* %43, i32 0, i32 5, !dbg !9192
  %44 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg56, align 8, !dbg !9192
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9193
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !9193
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !9193
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 0, !dbg !9193
  %rt_rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !9193
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx60, align 8, !dbg !9193
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9194
  %call61 = call %struct.rtx_def* @gcse_emit_move_after(%struct.rtx_def* %44, %struct.rtx_def* %46, %struct.rtx_def* %47), !dbg !9195
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9196
  %call62 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %48), !dbg !9197
  %49 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9198
  %deleted_p = getelementptr inbounds %struct.occr, %struct.occr* %49, i32 0, i32 2, !dbg !9199
  store i8 1, i8* %deleted_p, align 8, !dbg !9200
  store i32 1, i32* %changed, align 4, !dbg !9201
  %50 = load i32, i32* @gcse_subst_count, align 4, !dbg !9202
  %inc = add nsw i32 %50, 1, !dbg !9202
  store i32 %inc, i32* @gcse_subst_count, align 4, !dbg !9202
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9203
  %tobool63 = icmp ne %struct._IO_FILE* %51, null, !dbg !9203
  br i1 %tobool63, label %if.then64, label %if.end73, !dbg !9205

if.then64:                                        ; preds = %if.end
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9206
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9208
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !9208
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !9208
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !9208
  %rt_int = bitcast %union.rtunion_def* %arrayidx67 to i32*, !dbg !9208
  %54 = load i32, i32* %rt_int, align 8, !dbg !9208
  %55 = load i32, i32* %indx, align 4, !dbg !9209
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0), i32 %54, i32 %55), !dbg !9210
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9211
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9212
  %index69 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 9, !dbg !9213
  %58 = load i32, i32* %index69, align 8, !dbg !9213
  %59 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9214
  %reaching_reg70 = getelementptr inbounds %struct.expr, %struct.expr* %59, i32 0, i32 5, !dbg !9214
  %60 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg70, align 8, !dbg !9214
  %call71 = call i32 @rhs_regno(%struct.rtx_def* %60), !dbg !9214
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0), i32 %58, i32 %call71), !dbg !9215
  br label %if.end73, !dbg !9216

if.end73:                                         ; preds = %if.then64, %if.end
  br label %if.end74, !dbg !9217

if.end74:                                         ; preds = %if.end73, %land.lhs.true44, %cond.end41, %for.body6
  br label %for.inc, !dbg !9218

for.inc:                                          ; preds = %if.end74
  %61 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9219
  %next = getelementptr inbounds %struct.occr, %struct.occr* %61, i32 0, i32 0, !dbg !9220
  %62 = load %struct.occr*, %struct.occr** %next, align 8, !dbg !9220
  store %struct.occr* %62, %struct.occr** %occr, align 8, !dbg !9221
  br label %for.cond4, !dbg !9222, !llvm.loop !9223

for.end:                                          ; preds = %for.cond4
  br label %for.inc75, !dbg !9225

for.inc75:                                        ; preds = %for.end
  %63 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9226
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %63, i32 0, i32 2, !dbg !9227
  %64 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !9227
  store %struct.expr* %64, %struct.expr** %expr, align 8, !dbg !9228
  br label %for.cond1, !dbg !9229, !llvm.loop !9230

for.end76:                                        ; preds = %for.cond1
  br label %for.inc77, !dbg !9231

for.inc77:                                        ; preds = %for.end76
  %65 = load i32, i32* %i, align 4, !dbg !9232
  %inc78 = add i32 %65, 1, !dbg !9232
  store i32 %inc78, i32* %i, align 4, !dbg !9232
  br label %for.cond, !dbg !9233, !llvm.loop !9234

for.end79:                                        ; preds = %for.cond
  %66 = load i32, i32* %changed, align 4, !dbg !9236
  ret i32 %66, !dbg !9237
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_edge_insert(%struct.edge_list* %edge_list, %struct.expr** %index_map) #0 !dbg !9238 {
entry:
  %edge_list.addr = alloca %struct.edge_list*, align 8
  %index_map.addr = alloca %struct.expr**, align 8
  %e = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %num_edges = alloca i32, align 4
  %set_size = alloca i32, align 4
  %did_insert = alloca i32, align 4
  %inserted = alloca %struct.simple_bitmap_def**, align 8
  %indx = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %insert = alloca i64, align 8
  %expr = alloca %struct.expr*, align 8
  %occr = alloca %struct.occr*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %eg = alloca %struct.edge_def*, align 8
  store %struct.edge_list* %edge_list, %struct.edge_list** %edge_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_list** %edge_list.addr, metadata !9241, metadata !DIExpression()), !dbg !9242
  store %struct.expr** %index_map, %struct.expr*** %index_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr*** %index_map.addr, metadata !9243, metadata !DIExpression()), !dbg !9244
  call void @llvm.dbg.declare(metadata i32* %e, metadata !9245, metadata !DIExpression()), !dbg !9246
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9247, metadata !DIExpression()), !dbg !9248
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9249, metadata !DIExpression()), !dbg !9250
  call void @llvm.dbg.declare(metadata i32* %num_edges, metadata !9251, metadata !DIExpression()), !dbg !9252
  call void @llvm.dbg.declare(metadata i32* %set_size, metadata !9253, metadata !DIExpression()), !dbg !9254
  call void @llvm.dbg.declare(metadata i32* %did_insert, metadata !9255, metadata !DIExpression()), !dbg !9256
  store i32 0, i32* %did_insert, align 4, !dbg !9256
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def*** %inserted, metadata !9257, metadata !DIExpression()), !dbg !9258
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_insert_map, align 8, !dbg !9259
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %0, i64 0, !dbg !9259
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !9259
  %size = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1, i32 0, i32 2, !dbg !9260
  %2 = load i32, i32* %size, align 4, !dbg !9260
  store i32 %2, i32* %set_size, align 4, !dbg !9261
  %3 = load %struct.edge_list*, %struct.edge_list** %edge_list.addr, align 8, !dbg !9262
  %num_edges1 = getelementptr inbounds %struct.edge_list, %struct.edge_list* %3, i32 0, i32 1, !dbg !9262
  %4 = load i32, i32* %num_edges1, align 4, !dbg !9262
  store i32 %4, i32* %num_edges, align 4, !dbg !9263
  %5 = load i32, i32* %num_edges, align 4, !dbg !9264
  %6 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !9265
  %call = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %5, i32 %6), !dbg !9266
  store %struct.simple_bitmap_def** %call, %struct.simple_bitmap_def*** %inserted, align 8, !dbg !9267
  %7 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %inserted, align 8, !dbg !9268
  %8 = load i32, i32* %num_edges, align 4, !dbg !9269
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %7, i32 %8), !dbg !9270
  store i32 0, i32* %e, align 4, !dbg !9271
  br label %for.cond, !dbg !9273

for.cond:                                         ; preds = %for.inc64, %entry
  %9 = load i32, i32* %e, align 4, !dbg !9274
  %10 = load i32, i32* %num_edges, align 4, !dbg !9276
  %cmp = icmp slt i32 %9, %10, !dbg !9277
  br i1 %cmp, label %for.body, label %for.end66, !dbg !9278

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %indx, metadata !9279, metadata !DIExpression()), !dbg !9281
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9282, metadata !DIExpression()), !dbg !9283
  %11 = load %struct.edge_list*, %struct.edge_list** %edge_list.addr, align 8, !dbg !9284
  %index_to_edge = getelementptr inbounds %struct.edge_list, %struct.edge_list* %11, i32 0, i32 2, !dbg !9284
  %12 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge, align 8, !dbg !9284
  %13 = load i32, i32* %e, align 4, !dbg !9284
  %idxprom = sext i32 %13 to i64, !dbg !9284
  %arrayidx2 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %12, i64 %idxprom, !dbg !9284
  %14 = load %struct.edge_def*, %struct.edge_def** %arrayidx2, align 8, !dbg !9284
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !9284
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9284
  store %struct.basic_block_def* %15, %struct.basic_block_def** %bb, align 8, !dbg !9283
  store i32 0, i32* %indx, align 4, !dbg !9285
  store i32 0, i32* %i, align 4, !dbg !9287
  br label %for.cond3, !dbg !9288

for.cond3:                                        ; preds = %for.inc61, %for.body
  %16 = load i32, i32* %i, align 4, !dbg !9289
  %17 = load i32, i32* %set_size, align 4, !dbg !9291
  %cmp4 = icmp slt i32 %16, %17, !dbg !9292
  br i1 %cmp4, label %for.body5, label %for.end63, !dbg !9293

for.body5:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata i64* %insert, metadata !9294, metadata !DIExpression()), !dbg !9296
  %18 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pre_insert_map, align 8, !dbg !9297
  %19 = load i32, i32* %e, align 4, !dbg !9298
  %idxprom6 = sext i32 %19 to i64, !dbg !9297
  %arrayidx7 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %18, i64 %idxprom6, !dbg !9297
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx7, align 8, !dbg !9297
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %20, i32 0, i32 3, !dbg !9299
  %21 = load i32, i32* %i, align 4, !dbg !9300
  %idxprom8 = sext i32 %21 to i64, !dbg !9297
  %arrayidx9 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom8, !dbg !9297
  %22 = load i64, i64* %arrayidx9, align 8, !dbg !9297
  store i64 %22, i64* %insert, align 8, !dbg !9296
  %23 = load i32, i32* %indx, align 4, !dbg !9301
  store i32 %23, i32* %j, align 4, !dbg !9303
  br label %for.cond10, !dbg !9304

for.cond10:                                       ; preds = %for.inc57, %for.body5
  %24 = load i64, i64* %insert, align 8, !dbg !9305
  %tobool = icmp ne i64 %24, 0, !dbg !9305
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9307

land.rhs:                                         ; preds = %for.cond10
  %25 = load i32, i32* %j, align 4, !dbg !9308
  %26 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !9309
  %cmp11 = icmp slt i32 %25, %26, !dbg !9310
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond10
  %27 = phi i1 [ false, %for.cond10 ], [ %cmp11, %land.rhs ], !dbg !9311
  br i1 %27, label %for.body12, label %for.end60, !dbg !9312

for.body12:                                       ; preds = %land.end
  %28 = load i64, i64* %insert, align 8, !dbg !9313
  %and = and i64 %28, 1, !dbg !9315
  %cmp13 = icmp ne i64 %and, 0, !dbg !9316
  br i1 %cmp13, label %land.lhs.true, label %if.end56, !dbg !9317

land.lhs.true:                                    ; preds = %for.body12
  %29 = load %struct.expr**, %struct.expr*** %index_map.addr, align 8, !dbg !9318
  %30 = load i32, i32* %j, align 4, !dbg !9319
  %idxprom14 = sext i32 %30 to i64, !dbg !9318
  %arrayidx15 = getelementptr inbounds %struct.expr*, %struct.expr** %29, i64 %idxprom14, !dbg !9318
  %31 = load %struct.expr*, %struct.expr** %arrayidx15, align 8, !dbg !9318
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %31, i32 0, i32 5, !dbg !9320
  %32 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg, align 8, !dbg !9320
  %cmp16 = icmp ne %struct.rtx_def* %32, null, !dbg !9321
  br i1 %cmp16, label %if.then, label %if.end56, !dbg !9322

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !9323, metadata !DIExpression()), !dbg !9325
  %33 = load %struct.expr**, %struct.expr*** %index_map.addr, align 8, !dbg !9326
  %34 = load i32, i32* %j, align 4, !dbg !9327
  %idxprom17 = sext i32 %34 to i64, !dbg !9326
  %arrayidx18 = getelementptr inbounds %struct.expr*, %struct.expr** %33, i64 %idxprom17, !dbg !9326
  %35 = load %struct.expr*, %struct.expr** %arrayidx18, align 8, !dbg !9326
  store %struct.expr* %35, %struct.expr** %expr, align 8, !dbg !9325
  call void @llvm.dbg.declare(metadata %struct.occr** %occr, metadata !9328, metadata !DIExpression()), !dbg !9329
  %36 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9330
  %antic_occr = getelementptr inbounds %struct.expr, %struct.expr* %36, i32 0, i32 3, !dbg !9332
  %37 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !9332
  store %struct.occr* %37, %struct.occr** %occr, align 8, !dbg !9333
  br label %for.cond19, !dbg !9334

for.cond19:                                       ; preds = %for.inc, %if.then
  %38 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9335
  %cmp20 = icmp ne %struct.occr* %38, null, !dbg !9337
  br i1 %cmp20, label %for.body21, label %for.end, !dbg !9338

for.body21:                                       ; preds = %for.cond19
  %39 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9339
  %deleted_p = getelementptr inbounds %struct.occr, %struct.occr* %39, i32 0, i32 2, !dbg !9342
  %40 = load i8, i8* %deleted_p, align 8, !dbg !9342
  %tobool22 = icmp ne i8 %40, 0, !dbg !9339
  br i1 %tobool22, label %if.end, label %if.then23, !dbg !9343

if.then23:                                        ; preds = %for.body21
  br label %for.inc, !dbg !9344

if.end:                                           ; preds = %for.body21
  %41 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %inserted, align 8, !dbg !9345
  %42 = load i32, i32* %e, align 4, !dbg !9345
  %idxprom24 = sext i32 %42 to i64, !dbg !9345
  %arrayidx25 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %41, i64 %idxprom24, !dbg !9345
  %43 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx25, align 8, !dbg !9345
  %elms26 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %43, i32 0, i32 3, !dbg !9345
  %44 = load i32, i32* %j, align 4, !dbg !9345
  %div = udiv i32 %44, 64, !dbg !9345
  %idxprom27 = zext i32 %div to i64, !dbg !9345
  %arrayidx28 = getelementptr inbounds [1 x i64], [1 x i64]* %elms26, i64 0, i64 %idxprom27, !dbg !9345
  %45 = load i64, i64* %arrayidx28, align 8, !dbg !9345
  %46 = load i32, i32* %j, align 4, !dbg !9345
  %rem = urem i32 %46, 64, !dbg !9345
  %sh_prom = zext i32 %rem to i64, !dbg !9345
  %shr = lshr i64 %45, %sh_prom, !dbg !9345
  %and29 = and i64 %shr, 1, !dbg !9345
  %tobool30 = icmp ne i64 %and29, 0, !dbg !9345
  br i1 %tobool30, label %if.end55, label %if.then31, !dbg !9347

if.then31:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9348, metadata !DIExpression()), !dbg !9350
  call void @llvm.dbg.declare(metadata %struct.edge_def** %eg, metadata !9351, metadata !DIExpression()), !dbg !9352
  %47 = load %struct.edge_list*, %struct.edge_list** %edge_list.addr, align 8, !dbg !9353
  %index_to_edge32 = getelementptr inbounds %struct.edge_list, %struct.edge_list* %47, i32 0, i32 2, !dbg !9353
  %48 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge32, align 8, !dbg !9353
  %49 = load i32, i32* %e, align 4, !dbg !9353
  %idxprom33 = sext i32 %49 to i64, !dbg !9353
  %arrayidx34 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %48, i64 %idxprom33, !dbg !9353
  %50 = load %struct.edge_def*, %struct.edge_def** %arrayidx34, align 8, !dbg !9353
  store %struct.edge_def* %50, %struct.edge_def** %eg, align 8, !dbg !9352
  %51 = load %struct.edge_def*, %struct.edge_def** %eg, align 8, !dbg !9354
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 7, !dbg !9356
  %52 = load i32, i32* %flags, align 8, !dbg !9356
  %and35 = and i32 %52, 2, !dbg !9357
  %tobool36 = icmp ne i32 %and35, 0, !dbg !9357
  br i1 %tobool36, label %if.then37, label %if.else, !dbg !9358

if.then37:                                        ; preds = %if.then31
  %53 = load %struct.expr**, %struct.expr*** %index_map.addr, align 8, !dbg !9359
  %54 = load i32, i32* %j, align 4, !dbg !9360
  %idxprom38 = sext i32 %54 to i64, !dbg !9359
  %arrayidx39 = getelementptr inbounds %struct.expr*, %struct.expr** %53, i64 %idxprom38, !dbg !9359
  %55 = load %struct.expr*, %struct.expr** %arrayidx39, align 8, !dbg !9359
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9361
  call void @insert_insn_end_basic_block(%struct.expr* %55, %struct.basic_block_def* %56, i32 0), !dbg !9362
  br label %if.end43, !dbg !9362

if.else:                                          ; preds = %if.then31
  %57 = load %struct.expr**, %struct.expr*** %index_map.addr, align 8, !dbg !9363
  %58 = load i32, i32* %j, align 4, !dbg !9365
  %idxprom40 = sext i32 %58 to i64, !dbg !9363
  %arrayidx41 = getelementptr inbounds %struct.expr*, %struct.expr** %57, i64 %idxprom40, !dbg !9363
  %59 = load %struct.expr*, %struct.expr** %arrayidx41, align 8, !dbg !9363
  %call42 = call %struct.rtx_def* @process_insert_insn(%struct.expr* %59), !dbg !9366
  store %struct.rtx_def* %call42, %struct.rtx_def** %insn, align 8, !dbg !9367
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9368
  %61 = load %struct.edge_def*, %struct.edge_def** %eg, align 8, !dbg !9369
  call void @insert_insn_on_edge(%struct.rtx_def* %60, %struct.edge_def* %61), !dbg !9370
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.then37
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9371
  %tobool44 = icmp ne %struct._IO_FILE* %62, null, !dbg !9371
  br i1 %tobool44, label %if.then45, label %if.end52, !dbg !9373

if.then45:                                        ; preds = %if.end43
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9374
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9376
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 9, !dbg !9377
  %65 = load i32, i32* %index, align 8, !dbg !9377
  %66 = load %struct.edge_list*, %struct.edge_list** %edge_list.addr, align 8, !dbg !9378
  %index_to_edge46 = getelementptr inbounds %struct.edge_list, %struct.edge_list* %66, i32 0, i32 2, !dbg !9378
  %67 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge46, align 8, !dbg !9378
  %68 = load i32, i32* %e, align 4, !dbg !9378
  %idxprom47 = sext i32 %68 to i64, !dbg !9378
  %arrayidx48 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %67, i64 %idxprom47, !dbg !9378
  %69 = load %struct.edge_def*, %struct.edge_def** %arrayidx48, align 8, !dbg !9378
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 1, !dbg !9378
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9378
  %index49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 9, !dbg !9379
  %71 = load i32, i32* %index49, align 8, !dbg !9379
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.40, i64 0, i64 0), i32 %65, i32 %71), !dbg !9380
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9381
  %73 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9382
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %73, i32 0, i32 1, !dbg !9383
  %74 = load i32, i32* %bitmap_index, align 8, !dbg !9383
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i64 0, i64 0), i32 %74), !dbg !9384
  br label %if.end52, !dbg !9385

if.end52:                                         ; preds = %if.then45, %if.end43
  %75 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9386
  call void @update_ld_motion_stores(%struct.expr* %75), !dbg !9387
  %76 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %inserted, align 8, !dbg !9388
  %77 = load i32, i32* %e, align 4, !dbg !9389
  %idxprom53 = sext i32 %77 to i64, !dbg !9388
  %arrayidx54 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %76, i64 %idxprom53, !dbg !9388
  %78 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx54, align 8, !dbg !9388
  %79 = load i32, i32* %j, align 4, !dbg !9390
  call void @SET_BIT(%struct.simple_bitmap_def* %78, i32 %79), !dbg !9391
  store i32 1, i32* %did_insert, align 4, !dbg !9392
  %80 = load i32, i32* @gcse_create_count, align 4, !dbg !9393
  %inc = add nsw i32 %80, 1, !dbg !9393
  store i32 %inc, i32* @gcse_create_count, align 4, !dbg !9393
  br label %if.end55, !dbg !9394

if.end55:                                         ; preds = %if.end52, %if.end
  br label %for.inc, !dbg !9395

for.inc:                                          ; preds = %if.end55, %if.then23
  %81 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9396
  %next = getelementptr inbounds %struct.occr, %struct.occr* %81, i32 0, i32 0, !dbg !9397
  %82 = load %struct.occr*, %struct.occr** %next, align 8, !dbg !9397
  store %struct.occr* %82, %struct.occr** %occr, align 8, !dbg !9398
  br label %for.cond19, !dbg !9399, !llvm.loop !9400

for.end:                                          ; preds = %for.cond19
  br label %if.end56, !dbg !9402

if.end56:                                         ; preds = %for.end, %land.lhs.true, %for.body12
  br label %for.inc57, !dbg !9403

for.inc57:                                        ; preds = %if.end56
  %83 = load i32, i32* %j, align 4, !dbg !9404
  %inc58 = add nsw i32 %83, 1, !dbg !9404
  store i32 %inc58, i32* %j, align 4, !dbg !9404
  %84 = load i64, i64* %insert, align 8, !dbg !9405
  %shr59 = lshr i64 %84, 1, !dbg !9405
  store i64 %shr59, i64* %insert, align 8, !dbg !9405
  br label %for.cond10, !dbg !9406, !llvm.loop !9407

for.end60:                                        ; preds = %land.end
  br label %for.inc61, !dbg !9409

for.inc61:                                        ; preds = %for.end60
  %85 = load i32, i32* %i, align 4, !dbg !9410
  %inc62 = add nsw i32 %85, 1, !dbg !9410
  store i32 %inc62, i32* %i, align 4, !dbg !9410
  %86 = load i32, i32* %indx, align 4, !dbg !9411
  %add = add i32 %86, 64, !dbg !9411
  store i32 %add, i32* %indx, align 4, !dbg !9411
  br label %for.cond3, !dbg !9412, !llvm.loop !9413

for.end63:                                        ; preds = %for.cond3
  br label %for.inc64, !dbg !9415

for.inc64:                                        ; preds = %for.end63
  %87 = load i32, i32* %e, align 4, !dbg !9416
  %inc65 = add nsw i32 %87, 1, !dbg !9416
  store i32 %inc65, i32* %e, align 4, !dbg !9416
  br label %for.cond, !dbg !9417, !llvm.loop !9418

for.end66:                                        ; preds = %for.cond
  %88 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %inserted, align 8, !dbg !9420
  %89 = bitcast %struct.simple_bitmap_def** %88 to i8*, !dbg !9420
  call void @free(i8* %89), !dbg !9420
  %90 = load i32, i32* %did_insert, align 4, !dbg !9421
  ret i32 %90, !dbg !9422
}

; Function Attrs: noinline nounwind uwtable
define internal void @pre_insert_copies() #0 !dbg !9423 {
entry:
  %i = alloca i32, align 4
  %added_copy = alloca i32, align 4
  %expr = alloca %struct.expr*, align 8
  %occr = alloca %struct.occr*, align 8
  %avail = alloca %struct.occr*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9424, metadata !DIExpression()), !dbg !9425
  call void @llvm.dbg.declare(metadata i32* %added_copy, metadata !9426, metadata !DIExpression()), !dbg !9427
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !9428, metadata !DIExpression()), !dbg !9429
  call void @llvm.dbg.declare(metadata %struct.occr** %occr, metadata !9430, metadata !DIExpression()), !dbg !9431
  call void @llvm.dbg.declare(metadata %struct.occr** %avail, metadata !9432, metadata !DIExpression()), !dbg !9433
  store i32 0, i32* %i, align 4, !dbg !9434
  br label %for.cond, !dbg !9436

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9437
  %1 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 1), align 8, !dbg !9439
  %cmp = icmp ult i32 %0, %1, !dbg !9440
  br i1 %cmp, label %for.body, label %for.end40, !dbg !9441

for.body:                                         ; preds = %for.cond
  %2 = load %struct.expr**, %struct.expr*** getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 0), align 8, !dbg !9442
  %3 = load i32, i32* %i, align 4, !dbg !9444
  %idxprom = zext i32 %3 to i64, !dbg !9445
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %2, i64 %idxprom, !dbg !9445
  %4 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !9445
  store %struct.expr* %4, %struct.expr** %expr, align 8, !dbg !9446
  br label %for.cond1, !dbg !9447

for.cond1:                                        ; preds = %for.inc37, %for.body
  %5 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9448
  %cmp2 = icmp ne %struct.expr* %5, null, !dbg !9450
  br i1 %cmp2, label %for.body3, label %for.end38, !dbg !9451

for.body3:                                        ; preds = %for.cond1
  %6 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9452
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %6, i32 0, i32 5, !dbg !9455
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg, align 8, !dbg !9455
  %cmp4 = icmp eq %struct.rtx_def* %7, null, !dbg !9456
  br i1 %cmp4, label %if.then, label %if.end, !dbg !9457

if.then:                                          ; preds = %for.body3
  br label %for.inc37, !dbg !9458

if.end:                                           ; preds = %for.body3
  store i32 0, i32* %added_copy, align 4, !dbg !9459
  %8 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9460
  %antic_occr = getelementptr inbounds %struct.expr, %struct.expr* %8, i32 0, i32 3, !dbg !9462
  %9 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !9462
  store %struct.occr* %9, %struct.occr** %occr, align 8, !dbg !9463
  br label %for.cond5, !dbg !9464

for.cond5:                                        ; preds = %for.inc31, %if.end
  %10 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9465
  %cmp6 = icmp ne %struct.occr* %10, null, !dbg !9467
  br i1 %cmp6, label %for.body7, label %for.end33, !dbg !9468

for.body7:                                        ; preds = %for.cond5
  %11 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9469
  %deleted_p = getelementptr inbounds %struct.occr, %struct.occr* %11, i32 0, i32 2, !dbg !9472
  %12 = load i8, i8* %deleted_p, align 8, !dbg !9472
  %tobool = icmp ne i8 %12, 0, !dbg !9469
  br i1 %tobool, label %if.end9, label %if.then8, !dbg !9473

if.then8:                                         ; preds = %for.body7
  br label %for.inc31, !dbg !9474

if.end9:                                          ; preds = %for.body7
  %13 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9475
  %avail_occr = getelementptr inbounds %struct.expr, %struct.expr* %13, i32 0, i32 4, !dbg !9477
  %14 = load %struct.occr*, %struct.occr** %avail_occr, align 8, !dbg !9477
  store %struct.occr* %14, %struct.occr** %avail, align 8, !dbg !9478
  br label %for.cond10, !dbg !9479

for.cond10:                                       ; preds = %for.inc, %if.end9
  %15 = load %struct.occr*, %struct.occr** %avail, align 8, !dbg !9480
  %cmp11 = icmp ne %struct.occr* %15, null, !dbg !9482
  br i1 %cmp11, label %for.body12, label %for.end, !dbg !9483

for.body12:                                       ; preds = %for.cond10
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9484, metadata !DIExpression()), !dbg !9486
  %16 = load %struct.occr*, %struct.occr** %avail, align 8, !dbg !9487
  %insn13 = getelementptr inbounds %struct.occr, %struct.occr* %16, i32 0, i32 1, !dbg !9488
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn13, align 8, !dbg !9488
  store %struct.rtx_def* %17, %struct.rtx_def** %insn, align 8, !dbg !9486
  %18 = load %struct.occr*, %struct.occr** %avail, align 8, !dbg !9489
  %copied_p = getelementptr inbounds %struct.occr, %struct.occr* %18, i32 0, i32 3, !dbg !9491
  %19 = load i8, i8* %copied_p, align 1, !dbg !9491
  %tobool14 = icmp ne i8 %19, 0, !dbg !9489
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !9492

if.then15:                                        ; preds = %for.body12
  br label %for.inc, !dbg !9493

if.end16:                                         ; preds = %for.body12
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9494
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !9494
  %bf.load = load i32, i32* %21, align 8, !dbg !9494
  %bf.lshr = lshr i32 %bf.load, 27, !dbg !9494
  %bf.clear = and i32 %bf.lshr, 1, !dbg !9494
  %tobool17 = icmp ne i32 %bf.clear, 0, !dbg !9494
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !9496

if.then18:                                        ; preds = %if.end16
  br label %for.inc, !dbg !9497

if.end19:                                         ; preds = %if.end16
  %22 = load %struct.occr*, %struct.occr** %avail, align 8, !dbg !9498
  %insn20 = getelementptr inbounds %struct.occr, %struct.occr* %22, i32 0, i32 1, !dbg !9498
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn20, align 8, !dbg !9498
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !9498
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9498
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !9498
  %rt_bb = bitcast %union.rtunion_def* %arrayidx21 to %struct.basic_block_def**, !dbg !9498
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !9498
  %25 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9500
  %26 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9501
  %insn22 = getelementptr inbounds %struct.occr, %struct.occr* %26, i32 0, i32 1, !dbg !9501
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn22, align 8, !dbg !9501
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !9501
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !9501
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 3, !dbg !9501
  %rt_bb26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.basic_block_def**, !dbg !9501
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb26, align 8, !dbg !9501
  %call = call i32 @pre_expr_reaches_here_p(%struct.basic_block_def* %24, %struct.expr* %25, %struct.basic_block_def* %28), !dbg !9502
  %tobool27 = icmp ne i32 %call, 0, !dbg !9502
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !9503

if.then28:                                        ; preds = %if.end19
  br label %for.inc, !dbg !9504

if.end29:                                         ; preds = %if.end19
  store i32 1, i32* %added_copy, align 4, !dbg !9505
  %29 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9506
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9507
  call void @pre_insert_copy_insn(%struct.expr* %29, %struct.rtx_def* %30), !dbg !9508
  %31 = load %struct.occr*, %struct.occr** %avail, align 8, !dbg !9509
  %copied_p30 = getelementptr inbounds %struct.occr, %struct.occr* %31, i32 0, i32 3, !dbg !9510
  store i8 1, i8* %copied_p30, align 1, !dbg !9511
  br label %for.inc, !dbg !9512

for.inc:                                          ; preds = %if.end29, %if.then28, %if.then18, %if.then15
  %32 = load %struct.occr*, %struct.occr** %avail, align 8, !dbg !9513
  %next = getelementptr inbounds %struct.occr, %struct.occr* %32, i32 0, i32 0, !dbg !9514
  %33 = load %struct.occr*, %struct.occr** %next, align 8, !dbg !9514
  store %struct.occr* %33, %struct.occr** %avail, align 8, !dbg !9515
  br label %for.cond10, !dbg !9516, !llvm.loop !9517

for.end:                                          ; preds = %for.cond10
  br label %for.inc31, !dbg !9519

for.inc31:                                        ; preds = %for.end, %if.then8
  %34 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !9520
  %next32 = getelementptr inbounds %struct.occr, %struct.occr* %34, i32 0, i32 0, !dbg !9521
  %35 = load %struct.occr*, %struct.occr** %next32, align 8, !dbg !9521
  store %struct.occr* %35, %struct.occr** %occr, align 8, !dbg !9522
  br label %for.cond5, !dbg !9523, !llvm.loop !9524

for.end33:                                        ; preds = %for.cond5
  %36 = load i32, i32* %added_copy, align 4, !dbg !9526
  %tobool34 = icmp ne i32 %36, 0, !dbg !9526
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !9528

if.then35:                                        ; preds = %for.end33
  %37 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9529
  call void @update_ld_motion_stores(%struct.expr* %37), !dbg !9530
  br label %if.end36, !dbg !9530

if.end36:                                         ; preds = %if.then35, %for.end33
  br label %for.inc37, !dbg !9531

for.inc37:                                        ; preds = %if.end36, %if.then
  %38 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !9532
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %38, i32 0, i32 2, !dbg !9533
  %39 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !9533
  store %struct.expr* %39, %struct.expr** %expr, align 8, !dbg !9534
  br label %for.cond1, !dbg !9535, !llvm.loop !9536

for.end38:                                        ; preds = %for.cond1
  br label %for.inc39, !dbg !9537

for.inc39:                                        ; preds = %for.end38
  %40 = load i32, i32* %i, align 4, !dbg !9538
  %inc = add i32 %40, 1, !dbg !9538
  store i32 %inc, i32* %i, align 4, !dbg !9538
  br label %for.cond, !dbg !9539, !llvm.loop !9540

for.end40:                                        ; preds = %for.cond
  ret void, !dbg !9542
}

declare dso_local %struct.rtx_def* @gen_reg_rtx_and_attrs(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @gcse_emit_move_after(%struct.rtx_def* %src, %struct.rtx_def* %dest, %struct.rtx_def* %insn) #0 !dbg !9543 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %src.addr = alloca %struct.rtx_def*, align 8
  %dest.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %set2 = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %eqv = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %src, %struct.rtx_def** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src.addr, metadata !9546, metadata !DIExpression()), !dbg !9547
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !9548, metadata !DIExpression()), !dbg !9549
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9550, metadata !DIExpression()), !dbg !9551
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !9552, metadata !DIExpression()), !dbg !9553
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !9554, metadata !DIExpression()), !dbg !9555
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9556
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9556
  %bf.load = load i32, i32* %1, align 8, !dbg !9556
  %bf.clear = and i32 %bf.load, 65535, !dbg !9556
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !9556
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !9556

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9556
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !9556
  %bf.load1 = load i32, i32* %3, align 8, !dbg !9556
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !9556
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !9556
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !9556

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9556
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !9556
  %bf.load5 = load i32, i32* %5, align 8, !dbg !9556
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !9556
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !9556
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !9556

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9556
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !9556
  %bf.load9 = load i32, i32* %7, align 8, !dbg !9556
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !9556
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !9556
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !9556

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9556
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !9556
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9556
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !9556
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9556
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9556
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !9556
  %bf.load12 = load i32, i32* %10, align 8, !dbg !9556
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !9556
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !9556
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !9556

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9556
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !9556
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !9556
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !9556
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !9556
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !9556
  br label %cond.end, !dbg !9556

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9556
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9556
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !9556
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !9556
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !9556
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !9556
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !9556
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !9556
  br label %cond.end, !dbg !9556

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !9556
  br label %cond.end25, !dbg !9556

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !9556

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !9556
  store %struct.rtx_def* %cond26, %struct.rtx_def** %set, align 8, !dbg !9555
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set2, metadata !9557, metadata !DIExpression()), !dbg !9558
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !9559, metadata !DIExpression()), !dbg !9560
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %eqv, metadata !9561, metadata !DIExpression()), !dbg !9562
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !9563
  %17 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8, !dbg !9564
  %call27 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %16, %struct.rtx_def* %17), !dbg !9565
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9566
  %call28 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call27, %struct.rtx_def* %18), !dbg !9567
  store %struct.rtx_def* %call28, %struct.rtx_def** %new_rtx, align 8, !dbg !9568
  %19 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9569
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !9569
  %bf.load29 = load i32, i32* %20, align 8, !dbg !9569
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !9569
  %cmp31 = icmp eq i32 %bf.clear30, 8, !dbg !9569
  br i1 %cmp31, label %cond.true44, label %lor.lhs.false32, !dbg !9569

lor.lhs.false32:                                  ; preds = %cond.end25
  %21 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9569
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !9569
  %bf.load33 = load i32, i32* %22, align 8, !dbg !9569
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !9569
  %cmp35 = icmp eq i32 %bf.clear34, 7, !dbg !9569
  br i1 %cmp35, label %cond.true44, label %lor.lhs.false36, !dbg !9569

lor.lhs.false36:                                  ; preds = %lor.lhs.false32
  %23 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9569
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !9569
  %bf.load37 = load i32, i32* %24, align 8, !dbg !9569
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !9569
  %cmp39 = icmp eq i32 %bf.clear38, 9, !dbg !9569
  br i1 %cmp39, label %cond.true44, label %lor.lhs.false40, !dbg !9569

lor.lhs.false40:                                  ; preds = %lor.lhs.false36
  %25 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9569
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !9569
  %bf.load41 = load i32, i32* %26, align 8, !dbg !9569
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !9569
  %cmp43 = icmp eq i32 %bf.clear42, 10, !dbg !9569
  br i1 %cmp43, label %cond.true44, label %cond.false65, !dbg !9569

cond.true44:                                      ; preds = %lor.lhs.false40, %lor.lhs.false36, %lor.lhs.false32, %cond.end25
  %27 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9569
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !9569
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !9569
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 5, !dbg !9569
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !9569
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !9569
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !9569
  %bf.load49 = load i32, i32* %29, align 8, !dbg !9569
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !9569
  %cmp51 = icmp eq i32 %bf.clear50, 23, !dbg !9569
  br i1 %cmp51, label %cond.true52, label %cond.false57, !dbg !9569

cond.true52:                                      ; preds = %cond.true44
  %30 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9569
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !9569
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !9569
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 5, !dbg !9569
  %rt_rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**, !dbg !9569
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx56, align 8, !dbg !9569
  br label %cond.end63, !dbg !9569

cond.false57:                                     ; preds = %cond.true44
  %32 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9569
  %33 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9569
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !9569
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !9569
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 5, !dbg !9569
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !9569
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !9569
  %call62 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %32, %struct.rtx_def* %34), !dbg !9569
  br label %cond.end63, !dbg !9569

cond.end63:                                       ; preds = %cond.false57, %cond.true52
  %cond64 = phi %struct.rtx_def* [ %31, %cond.true52 ], [ %call62, %cond.false57 ], !dbg !9569
  br label %cond.end66, !dbg !9569

cond.false65:                                     ; preds = %lor.lhs.false40
  br label %cond.end66, !dbg !9569

cond.end66:                                       ; preds = %cond.false65, %cond.end63
  %cond67 = phi %struct.rtx_def* [ %cond64, %cond.end63 ], [ null, %cond.false65 ], !dbg !9569
  store %struct.rtx_def* %cond67, %struct.rtx_def** %set2, align 8, !dbg !9570
  %35 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8, !dbg !9571
  %tobool = icmp ne %struct.rtx_def* %35, null, !dbg !9571
  br i1 %tobool, label %lor.lhs.false68, label %if.then, !dbg !9573

lor.lhs.false68:                                  ; preds = %cond.end66
  %36 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8, !dbg !9574
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !9574
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !9574
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 0, !dbg !9574
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !9574
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !9574
  %38 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !9575
  %call73 = call i32 @rtx_equal_p(%struct.rtx_def* %37, %struct.rtx_def* %38), !dbg !9576
  %tobool74 = icmp ne i32 %call73, 0, !dbg !9576
  br i1 %tobool74, label %if.end, label %if.then, !dbg !9577

if.then:                                          ; preds = %lor.lhs.false68, %cond.end66
  %39 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9578
  store %struct.rtx_def* %39, %struct.rtx_def** %retval, align 8, !dbg !9579
  br label %return, !dbg !9579

if.end:                                           ; preds = %lor.lhs.false68
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9580
  %call75 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %40), !dbg !9582
  store %struct.rtx_def* %call75, %struct.rtx_def** %note, align 8, !dbg !9583
  %tobool76 = icmp ne %struct.rtx_def* %call75, null, !dbg !9583
  br i1 %tobool76, label %if.then77, label %if.else, !dbg !9584

if.then77:                                        ; preds = %if.end
  %41 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9585
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !9585
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !9585
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 0, !dbg !9585
  %rt_rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !9585
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx81, align 8, !dbg !9585
  store %struct.rtx_def* %42, %struct.rtx_def** %eqv, align 8, !dbg !9586
  br label %if.end86, !dbg !9587

if.else:                                          ; preds = %if.end
  %43 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9588
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !9588
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !9588
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 1, !dbg !9588
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !9588
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !9588
  store %struct.rtx_def* %44, %struct.rtx_def** %eqv, align 8, !dbg !9589
  br label %if.end86

if.end86:                                         ; preds = %if.else, %if.then77
  %45 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9590
  %46 = load %struct.rtx_def*, %struct.rtx_def** %eqv, align 8, !dbg !9591
  %call87 = call %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %46), !dbg !9592
  %call88 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %45, i32 4, %struct.rtx_def* %call87), !dbg !9593
  %47 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !9594
  store %struct.rtx_def* %47, %struct.rtx_def** %retval, align 8, !dbg !9595
  br label %return, !dbg !9595

return:                                           ; preds = %if.end86, %if.then
  %48 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9596
  ret %struct.rtx_def* %48, !dbg !9596
}

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @copy_insn_1(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_insn_end_basic_block(%struct.expr* %expr, %struct.basic_block_def* %bb, i32 %pre) #0 !dbg !9597 {
entry:
  %expr.addr = alloca %struct.expr*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %pre.addr = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %new_insn = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %pat = alloca %struct.rtx_def*, align 8
  %pat_end = alloca %struct.rtx_def*, align 8
  store %struct.expr* %expr, %struct.expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr** %expr.addr, metadata !9600, metadata !DIExpression()), !dbg !9601
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9602, metadata !DIExpression()), !dbg !9603
  store i32 %pre, i32* %pre.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pre.addr, metadata !9604, metadata !DIExpression()), !dbg !9605
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9606, metadata !DIExpression()), !dbg !9607
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9608
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !9608
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9608
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9608
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !9608
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9608
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !9607
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_insn, metadata !9609, metadata !DIExpression()), !dbg !9610
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !9611, metadata !DIExpression()), !dbg !9612
  %3 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9613
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %3, i32 0, i32 5, !dbg !9614
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg, align 8, !dbg !9614
  store %struct.rtx_def* %4, %struct.rtx_def** %reg, align 8, !dbg !9612
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !9615, metadata !DIExpression()), !dbg !9616
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !9617
  %call = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !9617
  store i32 %call, i32* %regno, align 4, !dbg !9616
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !9618, metadata !DIExpression()), !dbg !9619
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat_end, metadata !9620, metadata !DIExpression()), !dbg !9621
  %6 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9622
  %call1 = call %struct.rtx_def* @process_insert_insn(%struct.expr* %6), !dbg !9623
  store %struct.rtx_def* %call1, %struct.rtx_def** %pat, align 8, !dbg !9624
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9625
  %tobool = icmp ne %struct.rtx_def* %7, null, !dbg !9625
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !9625

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9625
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !9625
  %bf.load = load i32, i32* %9, align 8, !dbg !9625
  %bf.clear = and i32 %bf.load, 65535, !dbg !9625
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !9625
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !9625

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9625
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !9625
  %bf.load2 = load i32, i32* %11, align 8, !dbg !9625
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !9625
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !9625
  br i1 %cmp4, label %cond.false, label %lor.lhs.false5, !dbg !9625

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9625
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !9625
  %bf.load6 = load i32, i32* %13, align 8, !dbg !9625
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !9625
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !9625
  br i1 %cmp8, label %cond.false, label %lor.lhs.false9, !dbg !9625

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9625
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !9625
  %bf.load10 = load i32, i32* %15, align 8, !dbg !9625
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !9625
  %cmp12 = icmp eq i32 %bf.clear11, 10, !dbg !9625
  br i1 %cmp12, label %cond.false, label %cond.true, !dbg !9625

cond.true:                                        ; preds = %lor.lhs.false9, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 3425, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !9625
  br label %cond.end, !dbg !9625

cond.false:                                       ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %land.lhs.true
  br label %cond.end, !dbg !9625

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9625
  %16 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9626
  store %struct.rtx_def* %16, %struct.rtx_def** %pat_end, align 8, !dbg !9627
  br label %while.cond, !dbg !9628

while.cond:                                       ; preds = %while.body, %cond.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pat_end, align 8, !dbg !9629
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !9629
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9629
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9629
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9629
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9629
  %cmp13 = icmp ne %struct.rtx_def* %18, null, !dbg !9630
  br i1 %cmp13, label %while.body, label %while.end, !dbg !9628

while.body:                                       ; preds = %while.cond
  %19 = load %struct.rtx_def*, %struct.rtx_def** %pat_end, align 8, !dbg !9631
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !9631
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !9631
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 2, !dbg !9631
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !9631
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !9631
  store %struct.rtx_def* %20, %struct.rtx_def** %pat_end, align 8, !dbg !9632
  br label %while.cond, !dbg !9628, !llvm.loop !9633

while.end:                                        ; preds = %while.cond
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9634
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !9634
  %bf.load18 = load i32, i32* %22, align 8, !dbg !9634
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !9634
  %cmp20 = icmp eq i32 %bf.clear19, 9, !dbg !9634
  br i1 %cmp20, label %if.then, label %lor.lhs.false21, !dbg !9636

lor.lhs.false21:                                  ; preds = %while.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9637
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !9637
  %bf.load22 = load i32, i32* %24, align 8, !dbg !9637
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !9637
  %cmp24 = icmp eq i32 %bf.clear23, 8, !dbg !9637
  br i1 %cmp24, label %land.lhs.true25, label %if.else, !dbg !9638

land.lhs.true25:                                  ; preds = %lor.lhs.false21
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9639
  %call26 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %25), !dbg !9640
  %tobool27 = icmp ne i8 %call26, 0, !dbg !9640
  br i1 %tobool27, label %lor.lhs.false28, label %if.then, !dbg !9641

lor.lhs.false28:                                  ; preds = %land.lhs.true25
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9642
  %call29 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %26), !dbg !9643
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call29, i32 0, i32 7, !dbg !9644
  %27 = load i32, i32* %flags, align 8, !dbg !9644
  %and = and i32 %27, 2, !dbg !9645
  %tobool30 = icmp ne i32 %and, 0, !dbg !9645
  br i1 %tobool30, label %if.then, label %if.else, !dbg !9646

if.then:                                          ; preds = %lor.lhs.false28, %land.lhs.true25, %while.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9647
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !9647
  %bf.load31 = load i32, i32* %29, align 8, !dbg !9647
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !9647
  %cmp33 = icmp eq i32 %bf.clear32, 8, !dbg !9647
  br i1 %cmp33, label %lor.lhs.false34, label %cond.false59, !dbg !9647

lor.lhs.false34:                                  ; preds = %if.then
  %30 = load i32, i32* %pre.addr, align 4, !dbg !9647
  %tobool35 = icmp ne i32 %30, 0, !dbg !9647
  br i1 %tobool35, label %lor.lhs.false36, label %cond.false59, !dbg !9647

lor.lhs.false36:                                  ; preds = %lor.lhs.false34
  %31 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !9647
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9647
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !9647
  %33 = load i32, i32* %index, align 8, !dbg !9647
  %idxprom = sext i32 %33 to i64, !dbg !9647
  %arrayidx37 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %31, i64 %idxprom, !dbg !9647
  %34 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx37, align 8, !dbg !9647
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %34, i32 0, i32 3, !dbg !9647
  %35 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9647
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %35, i32 0, i32 1, !dbg !9647
  %36 = load i32, i32* %bitmap_index, align 8, !dbg !9647
  %div = udiv i32 %36, 64, !dbg !9647
  %idxprom38 = zext i32 %div to i64, !dbg !9647
  %arrayidx39 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom38, !dbg !9647
  %37 = load i64, i64* %arrayidx39, align 8, !dbg !9647
  %38 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9647
  %bitmap_index40 = getelementptr inbounds %struct.expr, %struct.expr* %38, i32 0, i32 1, !dbg !9647
  %39 = load i32, i32* %bitmap_index40, align 8, !dbg !9647
  %rem = urem i32 %39, 64, !dbg !9647
  %sh_prom = zext i32 %rem to i64, !dbg !9647
  %shr = lshr i64 %37, %sh_prom, !dbg !9647
  %and41 = and i64 %shr, 1, !dbg !9647
  %tobool42 = icmp ne i64 %and41, 0, !dbg !9647
  br i1 %tobool42, label %cond.false59, label %lor.lhs.false43, !dbg !9647

lor.lhs.false43:                                  ; preds = %lor.lhs.false36
  %40 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !9647
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9647
  %index44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !9647
  %42 = load i32, i32* %index44, align 8, !dbg !9647
  %idxprom45 = sext i32 %42 to i64, !dbg !9647
  %arrayidx46 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %40, i64 %idxprom45, !dbg !9647
  %43 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx46, align 8, !dbg !9647
  %elms47 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %43, i32 0, i32 3, !dbg !9647
  %44 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9647
  %bitmap_index48 = getelementptr inbounds %struct.expr, %struct.expr* %44, i32 0, i32 1, !dbg !9647
  %45 = load i32, i32* %bitmap_index48, align 8, !dbg !9647
  %div49 = udiv i32 %45, 64, !dbg !9647
  %idxprom50 = zext i32 %div49 to i64, !dbg !9647
  %arrayidx51 = getelementptr inbounds [1 x i64], [1 x i64]* %elms47, i64 0, i64 %idxprom50, !dbg !9647
  %46 = load i64, i64* %arrayidx51, align 8, !dbg !9647
  %47 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9647
  %bitmap_index52 = getelementptr inbounds %struct.expr, %struct.expr* %47, i32 0, i32 1, !dbg !9647
  %48 = load i32, i32* %bitmap_index52, align 8, !dbg !9647
  %rem53 = urem i32 %48, 64, !dbg !9647
  %sh_prom54 = zext i32 %rem53 to i64, !dbg !9647
  %shr55 = lshr i64 %46, %sh_prom54, !dbg !9647
  %and56 = and i64 %shr55, 1, !dbg !9647
  %tobool57 = icmp ne i64 %and56, 0, !dbg !9647
  br i1 %tobool57, label %cond.false59, label %cond.true58, !dbg !9647

cond.true58:                                      ; preds = %lor.lhs.false43
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 3448, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !9647
  br label %cond.end60, !dbg !9647

cond.false59:                                     ; preds = %lor.lhs.false43, %lor.lhs.false36, %lor.lhs.false34, %if.then
  br label %cond.end60, !dbg !9647

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond61 = phi i32 [ 0, %cond.true58 ], [ 0, %cond.false59 ], !dbg !9647
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9649
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !9649
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !9649
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 5, !dbg !9649
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !9649
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !9649
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !9649
  %bf.load66 = load i32, i32* %51, align 8, !dbg !9649
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !9649
  %cmp68 = icmp eq i32 %bf.clear67, 20, !dbg !9651
  br i1 %cmp68, label %if.then77, label %lor.lhs.false69, !dbg !9652

lor.lhs.false69:                                  ; preds = %cond.end60
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9653
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !9653
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !9653
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 5, !dbg !9653
  %rt_rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**, !dbg !9653
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx73, align 8, !dbg !9653
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !9653
  %bf.load74 = load i32, i32* %54, align 8, !dbg !9653
  %bf.clear75 = and i32 %bf.load74, 65535, !dbg !9653
  %cmp76 = icmp eq i32 %bf.clear75, 21, !dbg !9654
  br i1 %cmp76, label %if.then77, label %if.end, !dbg !9655

if.then77:                                        ; preds = %lor.lhs.false69, %cond.end60
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9656
  %call78 = call %struct.rtx_def* @prev_real_insn(%struct.rtx_def* %55), !dbg !9657
  store %struct.rtx_def* %call78, %struct.rtx_def** %insn, align 8, !dbg !9658
  br label %if.end, !dbg !9659

if.end:                                           ; preds = %if.then77, %lor.lhs.false69
  %56 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9660
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9661
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9662
  %call79 = call %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def* %56, %struct.rtx_def* %57, %struct.basic_block_def* %58), !dbg !9663
  store %struct.rtx_def* %call79, %struct.rtx_def** %new_insn, align 8, !dbg !9664
  br label %if.end151, !dbg !9665

if.else:                                          ; preds = %lor.lhs.false28, %lor.lhs.false21
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9666
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !9666
  %bf.load80 = load i32, i32* %60, align 8, !dbg !9666
  %bf.clear81 = and i32 %bf.load80, 65535, !dbg !9666
  %cmp82 = icmp eq i32 %bf.clear81, 10, !dbg !9666
  br i1 %cmp82, label %land.lhs.true83, label %if.else148, !dbg !9668

land.lhs.true83:                                  ; preds = %if.else
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9669
  %call84 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %61), !dbg !9670
  %tobool85 = icmp ne i8 %call84, 0, !dbg !9670
  br i1 %tobool85, label %lor.lhs.false86, label %if.then91, !dbg !9671

lor.lhs.false86:                                  ; preds = %land.lhs.true83
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9672
  %call87 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %62), !dbg !9673
  %flags88 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call87, i32 0, i32 7, !dbg !9674
  %63 = load i32, i32* %flags88, align 8, !dbg !9674
  %and89 = and i32 %63, 2, !dbg !9675
  %tobool90 = icmp ne i32 %and89, 0, !dbg !9675
  br i1 %tobool90, label %if.then91, label %if.else148, !dbg !9676

if.then91:                                        ; preds = %lor.lhs.false86, %land.lhs.true83
  %64 = load i32, i32* %pre.addr, align 4, !dbg !9677
  %tobool92 = icmp ne i32 %64, 0, !dbg !9677
  br i1 %tobool92, label %lor.lhs.false93, label %cond.false124, !dbg !9677

lor.lhs.false93:                                  ; preds = %if.then91
  %65 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !9677
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9677
  %index94 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 9, !dbg !9677
  %67 = load i32, i32* %index94, align 8, !dbg !9677
  %idxprom95 = sext i32 %67 to i64, !dbg !9677
  %arrayidx96 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %65, i64 %idxprom95, !dbg !9677
  %68 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx96, align 8, !dbg !9677
  %elms97 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %68, i32 0, i32 3, !dbg !9677
  %69 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9677
  %bitmap_index98 = getelementptr inbounds %struct.expr, %struct.expr* %69, i32 0, i32 1, !dbg !9677
  %70 = load i32, i32* %bitmap_index98, align 8, !dbg !9677
  %div99 = udiv i32 %70, 64, !dbg !9677
  %idxprom100 = zext i32 %div99 to i64, !dbg !9677
  %arrayidx101 = getelementptr inbounds [1 x i64], [1 x i64]* %elms97, i64 0, i64 %idxprom100, !dbg !9677
  %71 = load i64, i64* %arrayidx101, align 8, !dbg !9677
  %72 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9677
  %bitmap_index102 = getelementptr inbounds %struct.expr, %struct.expr* %72, i32 0, i32 1, !dbg !9677
  %73 = load i32, i32* %bitmap_index102, align 8, !dbg !9677
  %rem103 = urem i32 %73, 64, !dbg !9677
  %sh_prom104 = zext i32 %rem103 to i64, !dbg !9677
  %shr105 = lshr i64 %71, %sh_prom104, !dbg !9677
  %and106 = and i64 %shr105, 1, !dbg !9677
  %tobool107 = icmp ne i64 %and106, 0, !dbg !9677
  br i1 %tobool107, label %cond.false124, label %lor.lhs.false108, !dbg !9677

lor.lhs.false108:                                 ; preds = %lor.lhs.false93
  %74 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !9677
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9677
  %index109 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 9, !dbg !9677
  %76 = load i32, i32* %index109, align 8, !dbg !9677
  %idxprom110 = sext i32 %76 to i64, !dbg !9677
  %arrayidx111 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %74, i64 %idxprom110, !dbg !9677
  %77 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx111, align 8, !dbg !9677
  %elms112 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %77, i32 0, i32 3, !dbg !9677
  %78 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9677
  %bitmap_index113 = getelementptr inbounds %struct.expr, %struct.expr* %78, i32 0, i32 1, !dbg !9677
  %79 = load i32, i32* %bitmap_index113, align 8, !dbg !9677
  %div114 = udiv i32 %79, 64, !dbg !9677
  %idxprom115 = zext i32 %div114 to i64, !dbg !9677
  %arrayidx116 = getelementptr inbounds [1 x i64], [1 x i64]* %elms112, i64 0, i64 %idxprom115, !dbg !9677
  %80 = load i64, i64* %arrayidx116, align 8, !dbg !9677
  %81 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9677
  %bitmap_index117 = getelementptr inbounds %struct.expr, %struct.expr* %81, i32 0, i32 1, !dbg !9677
  %82 = load i32, i32* %bitmap_index117, align 8, !dbg !9677
  %rem118 = urem i32 %82, 64, !dbg !9677
  %sh_prom119 = zext i32 %rem118 to i64, !dbg !9677
  %shr120 = lshr i64 %80, %sh_prom119, !dbg !9677
  %and121 = and i64 %shr120, 1, !dbg !9677
  %tobool122 = icmp ne i64 %and121, 0, !dbg !9677
  br i1 %tobool122, label %cond.false124, label %cond.true123, !dbg !9677

cond.true123:                                     ; preds = %lor.lhs.false108
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 3493, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !9677
  br label %cond.end125, !dbg !9677

cond.false124:                                    ; preds = %lor.lhs.false108, %lor.lhs.false93, %if.then91
  br label %cond.end125, !dbg !9677

cond.end125:                                      ; preds = %cond.false124, %cond.true123
  %cond126 = phi i32 [ 0, %cond.true123 ], [ 0, %cond.false124 ], !dbg !9677
  %83 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9679
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9680
  %il127 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 7, !dbg !9680
  %rtl128 = bitcast %union.basic_block_il_dependent* %il127 to %struct.rtl_bb_info**, !dbg !9680
  %85 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl128, align 8, !dbg !9680
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %85, i32 0, i32 0, !dbg !9680
  %86 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9680
  %call129 = call %struct.rtx_def* @find_first_parameter_load(%struct.rtx_def* %83, %struct.rtx_def* %86), !dbg !9681
  store %struct.rtx_def* %call129, %struct.rtx_def** %insn, align 8, !dbg !9682
  br label %while.cond130, !dbg !9683

while.cond130:                                    ; preds = %while.body141, %cond.end125
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9684
  %88 = bitcast %struct.rtx_def* %87 to i32*, !dbg !9684
  %bf.load131 = load i32, i32* %88, align 8, !dbg !9684
  %bf.clear132 = and i32 %bf.load131, 65535, !dbg !9684
  %cmp133 = icmp eq i32 %bf.clear132, 12, !dbg !9684
  br i1 %cmp133, label %lor.end, label %lor.rhs, !dbg !9685

lor.rhs:                                          ; preds = %while.cond130
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9686
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !9686
  %bf.load134 = load i32, i32* %90, align 8, !dbg !9686
  %bf.clear135 = and i32 %bf.load134, 65535, !dbg !9686
  %cmp136 = icmp eq i32 %bf.clear135, 13, !dbg !9686
  br i1 %cmp136, label %land.rhs, label %land.end, !dbg !9686

land.rhs:                                         ; preds = %lor.rhs
  %91 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9686
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !9686
  %fld138 = bitcast %union.u* %u137 to [1 x %union.rtunion_def]*, !dbg !9686
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i64 0, i64 5, !dbg !9686
  %rt_int = bitcast %union.rtunion_def* %arrayidx139 to i32*, !dbg !9686
  %92 = load i32, i32* %rt_int, align 8, !dbg !9686
  %cmp140 = icmp eq i32 %92, 10, !dbg !9686
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %93 = phi i1 [ false, %lor.rhs ], [ %cmp140, %land.rhs ], !dbg !9687
  br label %lor.end, !dbg !9685

lor.end:                                          ; preds = %land.end, %while.cond130
  %94 = phi i1 [ true, %while.cond130 ], [ %93, %land.end ]
  br i1 %94, label %while.body141, label %while.end146, !dbg !9683

while.body141:                                    ; preds = %lor.end
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9688
  %u142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1, !dbg !9688
  %fld143 = bitcast %union.u* %u142 to [1 x %union.rtunion_def]*, !dbg !9688
  %arrayidx144 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld143, i64 0, i64 2, !dbg !9688
  %rt_rtx145 = bitcast %union.rtunion_def* %arrayidx144 to %struct.rtx_def**, !dbg !9688
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx145, align 8, !dbg !9688
  store %struct.rtx_def* %96, %struct.rtx_def** %insn, align 8, !dbg !9689
  br label %while.cond130, !dbg !9683, !llvm.loop !9690

while.end146:                                     ; preds = %lor.end
  %97 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9691
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9692
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9693
  %call147 = call %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def* %97, %struct.rtx_def* %98, %struct.basic_block_def* %99), !dbg !9694
  store %struct.rtx_def* %call147, %struct.rtx_def** %new_insn, align 8, !dbg !9695
  br label %if.end150, !dbg !9696

if.else148:                                       ; preds = %lor.lhs.false86, %if.else
  %100 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9697
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9698
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9699
  %call149 = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %100, %struct.rtx_def* %101, %struct.basic_block_def* %102), !dbg !9700
  store %struct.rtx_def* %call149, %struct.rtx_def** %new_insn, align 8, !dbg !9701
  br label %if.end150

if.end150:                                        ; preds = %if.else148, %while.end146
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.end
  br label %while.body153, !dbg !9702

while.body153:                                    ; preds = %if.end151, %if.end177
  %103 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9703
  %104 = bitcast %struct.rtx_def* %103 to i32*, !dbg !9703
  %bf.load154 = load i32, i32* %104, align 8, !dbg !9703
  %bf.clear155 = and i32 %bf.load154, 65535, !dbg !9703
  %cmp156 = icmp eq i32 %bf.clear155, 8, !dbg !9703
  br i1 %cmp156, label %if.then169, label %lor.lhs.false157, !dbg !9703

lor.lhs.false157:                                 ; preds = %while.body153
  %105 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9703
  %106 = bitcast %struct.rtx_def* %105 to i32*, !dbg !9703
  %bf.load158 = load i32, i32* %106, align 8, !dbg !9703
  %bf.clear159 = and i32 %bf.load158, 65535, !dbg !9703
  %cmp160 = icmp eq i32 %bf.clear159, 7, !dbg !9703
  br i1 %cmp160, label %if.then169, label %lor.lhs.false161, !dbg !9703

lor.lhs.false161:                                 ; preds = %lor.lhs.false157
  %107 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9703
  %108 = bitcast %struct.rtx_def* %107 to i32*, !dbg !9703
  %bf.load162 = load i32, i32* %108, align 8, !dbg !9703
  %bf.clear163 = and i32 %bf.load162, 65535, !dbg !9703
  %cmp164 = icmp eq i32 %bf.clear163, 9, !dbg !9703
  br i1 %cmp164, label %if.then169, label %lor.lhs.false165, !dbg !9703

lor.lhs.false165:                                 ; preds = %lor.lhs.false161
  %109 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9703
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !9703
  %bf.load166 = load i32, i32* %110, align 8, !dbg !9703
  %bf.clear167 = and i32 %bf.load166, 65535, !dbg !9703
  %cmp168 = icmp eq i32 %bf.clear167, 10, !dbg !9703
  br i1 %cmp168, label %if.then169, label %if.end174, !dbg !9706

if.then169:                                       ; preds = %lor.lhs.false165, %lor.lhs.false161, %lor.lhs.false157, %while.body153
  %111 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9707
  %u170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1, !dbg !9707
  %fld171 = bitcast %union.u* %u170 to [1 x %union.rtunion_def]*, !dbg !9707
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i64 0, i64 5, !dbg !9707
  %rt_rtx173 = bitcast %union.rtunion_def* %arrayidx172 to %struct.rtx_def**, !dbg !9707
  %112 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx173, align 8, !dbg !9707
  %113 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !9708
  call void @add_label_notes(%struct.rtx_def* %112, %struct.rtx_def* %113), !dbg !9709
  br label %if.end174, !dbg !9709

if.end174:                                        ; preds = %if.then169, %lor.lhs.false165
  %114 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9710
  %115 = load %struct.rtx_def*, %struct.rtx_def** %pat_end, align 8, !dbg !9712
  %cmp175 = icmp eq %struct.rtx_def* %114, %115, !dbg !9713
  br i1 %cmp175, label %if.then176, label %if.end177, !dbg !9714

if.then176:                                       ; preds = %if.end174
  br label %while.end182, !dbg !9715

if.end177:                                        ; preds = %if.end174
  %116 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9716
  %u178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1, !dbg !9716
  %fld179 = bitcast %union.u* %u178 to [1 x %union.rtunion_def]*, !dbg !9716
  %arrayidx180 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld179, i64 0, i64 2, !dbg !9716
  %rt_rtx181 = bitcast %union.rtunion_def* %arrayidx180 to %struct.rtx_def**, !dbg !9716
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx181, align 8, !dbg !9716
  store %struct.rtx_def* %117, %struct.rtx_def** %pat, align 8, !dbg !9717
  br label %while.body153, !dbg !9702, !llvm.loop !9718

while.end182:                                     ; preds = %if.then176
  %118 = load i32, i32* @gcse_create_count, align 4, !dbg !9720
  %inc = add nsw i32 %118, 1, !dbg !9720
  store i32 %inc, i32* @gcse_create_count, align 4, !dbg !9720
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9721
  %tobool183 = icmp ne %struct._IO_FILE* %119, null, !dbg !9721
  br i1 %tobool183, label %if.then184, label %if.end193, !dbg !9723

if.then184:                                       ; preds = %while.end182
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9724
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9726
  %index185 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %121, i32 0, i32 9, !dbg !9727
  %122 = load i32, i32* %index185, align 8, !dbg !9727
  %123 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !9728
  %u186 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !9728
  %fld187 = bitcast %union.u* %u186 to [1 x %union.rtunion_def]*, !dbg !9728
  %arrayidx188 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld187, i64 0, i64 0, !dbg !9728
  %rt_int189 = bitcast %union.rtunion_def* %arrayidx188 to i32*, !dbg !9728
  %124 = load i32, i32* %rt_int189, align 8, !dbg !9728
  %call190 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %120, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.42, i64 0, i64 0), i32 %122, i32 %124), !dbg !9729
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9730
  %126 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9731
  %bitmap_index191 = getelementptr inbounds %struct.expr, %struct.expr* %126, i32 0, i32 1, !dbg !9732
  %127 = load i32, i32* %bitmap_index191, align 8, !dbg !9732
  %128 = load i32, i32* %regno, align 4, !dbg !9733
  %call192 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %125, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.43, i64 0, i64 0), i32 %127, i32 %128), !dbg !9734
  br label %if.end193, !dbg !9735

if.end193:                                        ; preds = %if.then184, %while.end182
  ret void, !dbg !9736
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @process_insert_insn(%struct.expr* %expr) #0 !dbg !9737 {
entry:
  %expr.addr = alloca %struct.expr*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %exp = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.expr* %expr, %struct.expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr** %expr.addr, metadata !9740, metadata !DIExpression()), !dbg !9741
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !9742, metadata !DIExpression()), !dbg !9743
  %0 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9744
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %0, i32 0, i32 5, !dbg !9745
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg, align 8, !dbg !9745
  store %struct.rtx_def* %1, %struct.rtx_def** %reg, align 8, !dbg !9743
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %exp, metadata !9746, metadata !DIExpression()), !dbg !9747
  %2 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9748
  %expr1 = getelementptr inbounds %struct.expr, %struct.expr* %2, i32 0, i32 0, !dbg !9749
  %3 = load %struct.rtx_def*, %struct.rtx_def** %expr1, align 8, !dbg !9749
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %3), !dbg !9750
  store %struct.rtx_def* %call, %struct.rtx_def** %exp, align 8, !dbg !9747
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !9751, metadata !DIExpression()), !dbg !9752
  call void @start_sequence(), !dbg !9753
  %4 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8, !dbg !9754
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !9756
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !9756
  %bf.load = load i32, i32* %6, align 8, !dbg !9756
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9756
  %bf.clear = and i32 %bf.lshr, 255, !dbg !9756
  %call2 = call i32 @general_operand(%struct.rtx_def* %4, i32 %bf.clear), !dbg !9757
  %tobool = icmp ne i32 %call2, 0, !dbg !9757
  br i1 %tobool, label %if.then, label %if.else, !dbg !9758

if.then:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !9759
  %8 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8, !dbg !9760
  %call3 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !9761
  br label %if.end9, !dbg !9761

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9762, metadata !DIExpression()), !dbg !9764
  %9 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !9765
  %10 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8, !dbg !9765
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10), !dbg !9765
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4), !dbg !9766
  store %struct.rtx_def* %call5, %struct.rtx_def** %insn, align 8, !dbg !9764
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9767
  %call6 = call i32 @insn_invalid_p(%struct.rtx_def* %11), !dbg !9769
  %tobool7 = icmp ne i32 %call6, 0, !dbg !9769
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !9770

if.then8:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 3397, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !9771
  br label %if.end, !dbg !9771

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %call10 = call %struct.rtx_def* @get_insns(), !dbg !9772
  store %struct.rtx_def* %call10, %struct.rtx_def** %pat, align 8, !dbg !9773
  call void @end_sequence(), !dbg !9774
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9775
  ret %struct.rtx_def* %12, !dbg !9776
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_ld_motion_stores(%struct.expr* %expr) #0 !dbg !9777 {
entry:
  %expr.addr = alloca %struct.expr*, align 8
  %mem_ptr = alloca %struct.ls_expr*, align 8
  %list = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %copy = alloca %struct.rtx_def*, align 8
  store %struct.expr* %expr, %struct.expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr** %expr.addr, metadata !9780, metadata !DIExpression()), !dbg !9781
  call void @llvm.dbg.declare(metadata %struct.ls_expr** %mem_ptr, metadata !9782, metadata !DIExpression()), !dbg !9783
  %0 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9784
  %expr1 = getelementptr inbounds %struct.expr, %struct.expr* %0, i32 0, i32 0, !dbg !9786
  %1 = load %struct.rtx_def*, %struct.rtx_def** %expr1, align 8, !dbg !9786
  %call = call %struct.ls_expr* @find_rtx_in_ldst(%struct.rtx_def* %1), !dbg !9787
  store %struct.ls_expr* %call, %struct.ls_expr** %mem_ptr, align 8, !dbg !9788
  %tobool = icmp ne %struct.ls_expr* %call, null, !dbg !9788
  br i1 %tobool, label %if.then, label %if.end39, !dbg !9789

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %list, metadata !9790, metadata !DIExpression()), !dbg !9792
  %2 = load %struct.ls_expr*, %struct.ls_expr** %mem_ptr, align 8, !dbg !9793
  %stores = getelementptr inbounds %struct.ls_expr, %struct.ls_expr* %2, i32 0, i32 4, !dbg !9794
  %3 = load %struct.rtx_def*, %struct.rtx_def** %stores, align 8, !dbg !9794
  store %struct.rtx_def* %3, %struct.rtx_def** %list, align 8, !dbg !9792
  br label %for.cond, !dbg !9795

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !9796
  %cmp = icmp ne %struct.rtx_def* %4, null, !dbg !9799
  br i1 %cmp, label %for.body, label %for.end, !dbg !9800

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9801, metadata !DIExpression()), !dbg !9803
  %5 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !9804
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !9804
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9804
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9804
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9804
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9804
  store %struct.rtx_def* %6, %struct.rtx_def** %insn, align 8, !dbg !9803
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !9805, metadata !DIExpression()), !dbg !9806
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9807
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !9807
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !9807
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 5, !dbg !9807
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !9807
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !9807
  store %struct.rtx_def* %8, %struct.rtx_def** %pat, align 8, !dbg !9806
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !9808, metadata !DIExpression()), !dbg !9809
  %9 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9810
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !9810
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !9810
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !9810
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !9810
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !9810
  store %struct.rtx_def* %10, %struct.rtx_def** %src, align 8, !dbg !9809
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !9811, metadata !DIExpression()), !dbg !9812
  %11 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9813
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %11, i32 0, i32 5, !dbg !9814
  %12 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg, align 8, !dbg !9814
  store %struct.rtx_def* %12, %struct.rtx_def** %reg, align 8, !dbg !9812
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %copy, metadata !9815, metadata !DIExpression()), !dbg !9816
  %13 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9817
  %reaching_reg10 = getelementptr inbounds %struct.expr, %struct.expr* %13, i32 0, i32 5, !dbg !9819
  %14 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg10, align 8, !dbg !9819
  %15 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9820
  %cmp11 = icmp eq %struct.rtx_def* %14, %15, !dbg !9821
  br i1 %cmp11, label %if.then12, label %if.end, !dbg !9822

if.then12:                                        ; preds = %for.body
  br label %for.inc, !dbg !9823

if.end:                                           ; preds = %for.body
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9824
  %tobool13 = icmp ne %struct._IO_FILE* %16, null, !dbg !9824
  br i1 %tobool13, label %if.then14, label %if.end19, !dbg !9826

if.then14:                                        ; preds = %if.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9827
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.44, i64 0, i64 0)), !dbg !9829
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9830
  %19 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9831
  %reaching_reg16 = getelementptr inbounds %struct.expr, %struct.expr* %19, i32 0, i32 5, !dbg !9832
  %20 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg16, align 8, !dbg !9832
  call void @print_rtl(%struct._IO_FILE* %18, %struct.rtx_def* %20), !dbg !9833
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9834
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.45, i64 0, i64 0)), !dbg !9835
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9836
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9837
  call void @print_inline_rtx(%struct._IO_FILE* %22, %struct.rtx_def* %23, i32 8), !dbg !9838
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9839
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !9840
  br label %if.end19, !dbg !9841

if.end19:                                         ; preds = %if.then14, %if.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !9842
  %26 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9843
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !9843
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !9843
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !9843
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !9843
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !9843
  %call24 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %27), !dbg !9844
  %call25 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %25, %struct.rtx_def* %call24), !dbg !9845
  store %struct.rtx_def* %call25, %struct.rtx_def** %copy, align 8, !dbg !9846
  %28 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !9847
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9848
  %call26 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %28, %struct.rtx_def* %29), !dbg !9849
  %30 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !9850
  %31 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9851
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !9851
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !9851
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 1, !dbg !9851
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !9851
  store %struct.rtx_def* %30, %struct.rtx_def** %rt_rtx30, align 8, !dbg !9852
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9853
  %call31 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %32), !dbg !9854
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9855
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !9855
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !9855
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 6, !dbg !9855
  %rt_int = bitcast %union.rtunion_def* %arrayidx34 to i32*, !dbg !9855
  store i32 -1, i32* %rt_int, align 8, !dbg !9856
  %34 = load i32, i32* @gcse_create_count, align 4, !dbg !9857
  %inc = add nsw i32 %34, 1, !dbg !9857
  store i32 %inc, i32* @gcse_create_count, align 4, !dbg !9857
  br label %for.inc, !dbg !9858

for.inc:                                          ; preds = %if.end19, %if.then12
  %35 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !9859
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !9859
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !9859
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 1, !dbg !9859
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !9859
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !9859
  store %struct.rtx_def* %36, %struct.rtx_def** %list, align 8, !dbg !9860
  br label %for.cond, !dbg !9861, !llvm.loop !9862

for.end:                                          ; preds = %for.cond
  br label %if.end39, !dbg !9864

if.end39:                                         ; preds = %for.end, %entry
  ret void, !dbg !9865
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !9866 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9867, metadata !DIExpression()), !dbg !9868
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9869
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !9869
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9869
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !9869
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9869

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9869
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !9869
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !9869
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !9869
  br label %cond.end, !dbg !9869

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9869

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9869
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9869
  %cmp = icmp eq i32 %call, 1, !dbg !9870
  %conv = zext i1 %cmp to i32, !dbg !9870
  %conv2 = trunc i32 %conv to i8, !dbg !9869
  ret i8 %conv2, !dbg !9871
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !9872 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9875, metadata !DIExpression()), !dbg !9876
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9877
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !9877
  %tobool = icmp ne i8 %call, 0, !dbg !9877
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9877

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !9877
  br label %cond.end, !dbg !9877

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9877

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9877
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9878
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !9878
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9878
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !9878
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9878

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9878
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !9878
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !9878
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !9878
  br label %cond.end5, !dbg !9878

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9878

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !9878
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !9878
  ret %struct.edge_def* %call7, !dbg !9879
}

declare dso_local %struct.rtx_def* @prev_real_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_before_noloc(%struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @find_first_parameter_load(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_label_notes(%struct.rtx_def* %x, %struct.rtx_def* %insn) #0 !dbg !9880 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9881, metadata !DIExpression()), !dbg !9882
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9883, metadata !DIExpression()), !dbg !9884
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9885, metadata !DIExpression()), !dbg !9886
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9887
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9887
  %bf.load = load i32, i32* %1, align 8, !dbg !9887
  %bf.clear = and i32 %bf.load, 65535, !dbg !9887
  store i32 %bf.clear, i32* %code, align 4, !dbg !9886
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9888, metadata !DIExpression()), !dbg !9889
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9890, metadata !DIExpression()), !dbg !9891
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !9892, metadata !DIExpression()), !dbg !9893
  %2 = load i32, i32* %code, align 4, !dbg !9894
  %cmp = icmp eq i32 %2, 44, !dbg !9896
  br i1 %cmp, label %land.lhs.true, label %if.end21, !dbg !9897

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9898
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !9898
  %bf.load1 = load i32, i32* %4, align 8, !dbg !9898
  %bf.lshr = lshr i32 %bf.load1, 27, !dbg !9898
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !9898
  %tobool = icmp ne i32 %bf.clear2, 0, !dbg !9898
  br i1 %tobool, label %if.end21, label %if.then, !dbg !9899

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9900
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !9900
  %bf.load3 = load i32, i32* %6, align 8, !dbg !9900
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !9900
  %cmp5 = icmp eq i32 %bf.clear4, 9, !dbg !9900
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !9900

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 4030, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !9900
  br label %cond.end, !dbg !9900

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9900

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9900
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9902
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9903
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !9903
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9903
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9903
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9903
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9903
  call void @add_reg_note(%struct.rtx_def* %7, i32 10, %struct.rtx_def* %9), !dbg !9904
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9905
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !9905
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !9905
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 0, !dbg !9905
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !9905
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !9905
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !9905
  %bf.load10 = load i32, i32* %12, align 8, !dbg !9905
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !9905
  %cmp12 = icmp eq i32 %bf.clear11, 12, !dbg !9905
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !9907

if.then13:                                        ; preds = %cond.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9908
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !9908
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !9908
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !9908
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !9908
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !9908
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !9908
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !9908
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 4, !dbg !9908
  %rt_int = bitcast %union.rtunion_def* %arrayidx20 to i32*, !dbg !9908
  %15 = load i32, i32* %rt_int, align 8, !dbg !9909
  %inc = add nsw i32 %15, 1, !dbg !9909
  store i32 %inc, i32* %rt_int, align 8, !dbg !9909
  br label %if.end, !dbg !9908

if.end:                                           ; preds = %if.then13, %cond.end
  br label %for.end64, !dbg !9910

if.end21:                                         ; preds = %land.lhs.true, %entry
  %16 = load i32, i32* %code, align 4, !dbg !9911
  %idxprom = sext i32 %16 to i64, !dbg !9911
  %arrayidx22 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom, !dbg !9911
  %17 = load i8, i8* %arrayidx22, align 1, !dbg !9911
  %conv = zext i8 %17 to i32, !dbg !9911
  %sub = sub nsw i32 %conv, 1, !dbg !9913
  store i32 %sub, i32* %i, align 4, !dbg !9914
  %18 = load i32, i32* %code, align 4, !dbg !9915
  %idxprom23 = sext i32 %18 to i64, !dbg !9915
  %arrayidx24 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom23, !dbg !9915
  %19 = load i8*, i8** %arrayidx24, align 8, !dbg !9915
  store i8* %19, i8** %fmt, align 8, !dbg !9916
  br label %for.cond, !dbg !9917

for.cond:                                         ; preds = %for.inc62, %if.end21
  %20 = load i32, i32* %i, align 4, !dbg !9918
  %cmp25 = icmp sge i32 %20, 0, !dbg !9920
  br i1 %cmp25, label %for.body, label %for.end64, !dbg !9921

for.body:                                         ; preds = %for.cond
  %21 = load i8*, i8** %fmt, align 8, !dbg !9922
  %22 = load i32, i32* %i, align 4, !dbg !9925
  %idxprom27 = sext i32 %22 to i64, !dbg !9922
  %arrayidx28 = getelementptr inbounds i8, i8* %21, i64 %idxprom27, !dbg !9922
  %23 = load i8, i8* %arrayidx28, align 1, !dbg !9922
  %conv29 = sext i8 %23 to i32, !dbg !9922
  %cmp30 = icmp eq i32 %conv29, 101, !dbg !9926
  br i1 %cmp30, label %if.then32, label %if.else, !dbg !9927

if.then32:                                        ; preds = %for.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9928
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !9928
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !9928
  %25 = load i32, i32* %i, align 4, !dbg !9928
  %idxprom35 = sext i32 %25 to i64, !dbg !9928
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 %idxprom35, !dbg !9928
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !9928
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !9928
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9929
  call void @add_label_notes(%struct.rtx_def* %26, %struct.rtx_def* %27), !dbg !9930
  br label %if.end61, !dbg !9930

if.else:                                          ; preds = %for.body
  %28 = load i8*, i8** %fmt, align 8, !dbg !9931
  %29 = load i32, i32* %i, align 4, !dbg !9933
  %idxprom38 = sext i32 %29 to i64, !dbg !9931
  %arrayidx39 = getelementptr inbounds i8, i8* %28, i64 %idxprom38, !dbg !9931
  %30 = load i8, i8* %arrayidx39, align 1, !dbg !9931
  %conv40 = sext i8 %30 to i32, !dbg !9931
  %cmp41 = icmp eq i32 %conv40, 69, !dbg !9934
  br i1 %cmp41, label %if.then43, label %if.end60, !dbg !9935

if.then43:                                        ; preds = %if.else
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9936
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !9936
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !9936
  %32 = load i32, i32* %i, align 4, !dbg !9936
  %idxprom46 = sext i32 %32 to i64, !dbg !9936
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 %idxprom46, !dbg !9936
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtvec_def**, !dbg !9936
  %33 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9936
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %33, i32 0, i32 0, !dbg !9936
  %34 = load i32, i32* %num_elem, align 8, !dbg !9936
  %sub48 = sub nsw i32 %34, 1, !dbg !9938
  store i32 %sub48, i32* %j, align 4, !dbg !9939
  br label %for.cond49, !dbg !9940

for.cond49:                                       ; preds = %for.inc, %if.then43
  %35 = load i32, i32* %j, align 4, !dbg !9941
  %cmp50 = icmp sge i32 %35, 0, !dbg !9943
  br i1 %cmp50, label %for.body52, label %for.end, !dbg !9944

for.body52:                                       ; preds = %for.cond49
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9945
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !9945
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !9945
  %37 = load i32, i32* %i, align 4, !dbg !9945
  %idxprom55 = sext i32 %37 to i64, !dbg !9945
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 %idxprom55, !dbg !9945
  %rt_rtvec57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtvec_def**, !dbg !9945
  %38 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec57, align 8, !dbg !9945
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %38, i32 0, i32 1, !dbg !9945
  %39 = load i32, i32* %j, align 4, !dbg !9945
  %idxprom58 = sext i32 %39 to i64, !dbg !9945
  %arrayidx59 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom58, !dbg !9945
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx59, align 8, !dbg !9945
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9946
  call void @add_label_notes(%struct.rtx_def* %40, %struct.rtx_def* %41), !dbg !9947
  br label %for.inc, !dbg !9947

for.inc:                                          ; preds = %for.body52
  %42 = load i32, i32* %j, align 4, !dbg !9948
  %dec = add nsw i32 %42, -1, !dbg !9948
  store i32 %dec, i32* %j, align 4, !dbg !9948
  br label %for.cond49, !dbg !9949, !llvm.loop !9950

for.end:                                          ; preds = %for.cond49
  br label %if.end60, !dbg !9951

if.end60:                                         ; preds = %for.end, %if.else
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then32
  br label %for.inc62, !dbg !9952

for.inc62:                                        ; preds = %if.end61
  %43 = load i32, i32* %i, align 4, !dbg !9953
  %dec63 = add nsw i32 %43, -1, !dbg !9953
  store i32 %dec63, i32* %i, align 4, !dbg !9953
  br label %for.cond, !dbg !9954, !llvm.loop !9955

for.end64:                                        ; preds = %if.end, %for.cond
  ret void, !dbg !9957
}

declare dso_local void @add_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local i32 @insn_invalid_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @print_inline_rtx(%struct._IO_FILE*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @df_insn_rescan(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_expr_reaches_here_p(%struct.basic_block_def* %occr_bb, %struct.expr* %expr, %struct.basic_block_def* %bb) #0 !dbg !9958 {
entry:
  %occr_bb.addr = alloca %struct.basic_block_def*, align 8
  %expr.addr = alloca %struct.expr*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %rval = alloca i32, align 4
  %visited = alloca i8*, align 8
  store %struct.basic_block_def* %occr_bb, %struct.basic_block_def** %occr_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %occr_bb.addr, metadata !9961, metadata !DIExpression()), !dbg !9962
  store %struct.expr* %expr, %struct.expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr** %expr.addr, metadata !9963, metadata !DIExpression()), !dbg !9964
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9965, metadata !DIExpression()), !dbg !9966
  call void @llvm.dbg.declare(metadata i32* %rval, metadata !9967, metadata !DIExpression()), !dbg !9968
  call void @llvm.dbg.declare(metadata i8** %visited, metadata !9969, metadata !DIExpression()), !dbg !9970
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9971
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9971
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !9971
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9971
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !9971
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !9971
  %conv = sext i32 %2 to i64, !dbg !9971
  %call = call i8* @xcalloc(i64 %conv, i64 1), !dbg !9971
  store i8* %call, i8** %visited, align 8, !dbg !9970
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %occr_bb.addr, align 8, !dbg !9972
  %4 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9973
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9974
  %6 = load i8*, i8** %visited, align 8, !dbg !9975
  %call1 = call i32 @pre_expr_reaches_here_p_work(%struct.basic_block_def* %3, %struct.expr* %4, %struct.basic_block_def* %5, i8* %6), !dbg !9976
  store i32 %call1, i32* %rval, align 4, !dbg !9977
  %7 = load i8*, i8** %visited, align 8, !dbg !9978
  call void @free(i8* %7), !dbg !9979
  %8 = load i32, i32* %rval, align 4, !dbg !9980
  ret i32 %8, !dbg !9981
}

; Function Attrs: noinline nounwind uwtable
define internal void @pre_insert_copy_insn(%struct.expr* %expr, %struct.rtx_def* %insn) #0 !dbg !9982 {
entry:
  %expr.addr = alloca %struct.expr*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %indx = alloca i32, align 4
  %pat = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %first_set = alloca %struct.rtx_def*, align 8
  %new_insn = alloca %struct.rtx_def*, align 8
  %old_reg = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %struct.expr* %expr, %struct.expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr** %expr.addr, metadata !9985, metadata !DIExpression()), !dbg !9986
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9987, metadata !DIExpression()), !dbg !9988
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !9989, metadata !DIExpression()), !dbg !9990
  %0 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9991
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %0, i32 0, i32 5, !dbg !9992
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg, align 8, !dbg !9992
  store %struct.rtx_def* %1, %struct.rtx_def** %reg, align 8, !dbg !9990
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !9993, metadata !DIExpression()), !dbg !9994
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !9995
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !9995
  store i32 %call, i32* %regno, align 4, !dbg !9994
  call void @llvm.dbg.declare(metadata i32* %indx, metadata !9996, metadata !DIExpression()), !dbg !9997
  %3 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !9998
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %3, i32 0, i32 1, !dbg !9999
  %4 = load i32, i32* %bitmap_index, align 8, !dbg !9999
  store i32 %4, i32* %indx, align 4, !dbg !9997
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !10000, metadata !DIExpression()), !dbg !10001
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10002
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !10002
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10002
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !10002
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10002
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10002
  store %struct.rtx_def* %6, %struct.rtx_def** %pat, align 8, !dbg !10001
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !10003, metadata !DIExpression()), !dbg !10004
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first_set, metadata !10005, metadata !DIExpression()), !dbg !10006
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_insn, metadata !10007, metadata !DIExpression()), !dbg !10008
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_reg, metadata !10009, metadata !DIExpression()), !dbg !10010
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10011, metadata !DIExpression()), !dbg !10012
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10013
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !10013
  %bf.load = load i32, i32* %8, align 8, !dbg !10013
  %bf.clear = and i32 %bf.load, 65535, !dbg !10013
  switch i32 %bf.clear, label %sw.default [
    i32 23, label %sw.bb
    i32 15, label %sw.bb1
  ], !dbg !10014

sw.bb:                                            ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10015
  store %struct.rtx_def* %9, %struct.rtx_def** %set, align 8, !dbg !10017
  br label %sw.epilog, !dbg !10018

sw.bb1:                                           ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %first_set, align 8, !dbg !10019
  store %struct.rtx_def* null, %struct.rtx_def** %set, align 8, !dbg !10020
  store i32 0, i32* %i, align 4, !dbg !10021
  br label %for.cond, !dbg !10023

for.cond:                                         ; preds = %for.inc, %sw.bb1
  %10 = load i32, i32* %i, align 4, !dbg !10024
  %11 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10026
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !10026
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !10026
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 0, !dbg !10026
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtvec_def**, !dbg !10026
  %12 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !10026
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %12, i32 0, i32 0, !dbg !10026
  %13 = load i32, i32* %num_elem, align 8, !dbg !10026
  %cmp = icmp slt i32 %10, %13, !dbg !10027
  br i1 %cmp, label %for.body, label %for.end, !dbg !10028

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !10029, metadata !DIExpression()), !dbg !10031
  %14 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10032
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !10032
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !10032
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !10032
  %rt_rtvec8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtvec_def**, !dbg !10032
  %15 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec8, align 8, !dbg !10032
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %15, i32 0, i32 1, !dbg !10032
  %16 = load i32, i32* %i, align 4, !dbg !10032
  %idxprom = sext i32 %16 to i64, !dbg !10032
  %arrayidx9 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !10032
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8, !dbg !10032
  store %struct.rtx_def* %17, %struct.rtx_def** %x, align 8, !dbg !10031
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10033
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !10033
  %bf.load10 = load i32, i32* %19, align 8, !dbg !10033
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !10033
  %cmp12 = icmp eq i32 %bf.clear11, 23, !dbg !10035
  br i1 %cmp12, label %if.then, label %if.end23, !dbg !10036

if.then:                                          ; preds = %for.body
  %20 = load %struct.rtx_def*, %struct.rtx_def** %first_set, align 8, !dbg !10037
  %cmp13 = icmp eq %struct.rtx_def* %20, null, !dbg !10040
  br i1 %cmp13, label %if.then14, label %if.end, !dbg !10041

if.then14:                                        ; preds = %if.then
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10042
  store %struct.rtx_def* %21, %struct.rtx_def** %first_set, align 8, !dbg !10043
  br label %if.end, !dbg !10044

if.end:                                           ; preds = %if.then14, %if.then
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10045
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !10045
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !10045
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 1, !dbg !10045
  %rt_rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !10045
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx18, align 8, !dbg !10045
  %24 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !10047
  %expr19 = getelementptr inbounds %struct.expr, %struct.expr* %24, i32 0, i32 0, !dbg !10048
  %25 = load %struct.rtx_def*, %struct.rtx_def** %expr19, align 8, !dbg !10048
  %call20 = call i32 @expr_equiv_p(%struct.rtx_def* %23, %struct.rtx_def* %25), !dbg !10049
  %tobool = icmp ne i32 %call20, 0, !dbg !10049
  br i1 %tobool, label %if.then21, label %if.end22, !dbg !10050

if.then21:                                        ; preds = %if.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10051
  store %struct.rtx_def* %26, %struct.rtx_def** %set, align 8, !dbg !10053
  br label %for.end, !dbg !10054

if.end22:                                         ; preds = %if.end
  br label %if.end23, !dbg !10055

if.end23:                                         ; preds = %if.end22, %for.body
  br label %for.inc, !dbg !10056

for.inc:                                          ; preds = %if.end23
  %27 = load i32, i32* %i, align 4, !dbg !10057
  %inc = add nsw i32 %27, 1, !dbg !10057
  store i32 %inc, i32* %i, align 4, !dbg !10057
  br label %for.cond, !dbg !10058, !llvm.loop !10059

for.end:                                          ; preds = %if.then21, %for.cond
  %28 = load %struct.rtx_def*, %struct.rtx_def** %first_set, align 8, !dbg !10061
  %tobool24 = icmp ne %struct.rtx_def* %28, null, !dbg !10061
  br i1 %tobool24, label %cond.false, label %cond.true, !dbg !10061

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 3676, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !10061
  br label %cond.end, !dbg !10061

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !10061

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10061
  %29 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10062
  %cmp25 = icmp eq %struct.rtx_def* %29, null, !dbg !10064
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !10065

if.then26:                                        ; preds = %cond.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %first_set, align 8, !dbg !10066
  store %struct.rtx_def* %30, %struct.rtx_def** %set, align 8, !dbg !10067
  br label %if.end27, !dbg !10068

if.end27:                                         ; preds = %if.then26, %cond.end
  br label %sw.epilog, !dbg !10069

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 3682, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !10070
  br label %sw.epilog, !dbg !10071

sw.epilog:                                        ; preds = %sw.default, %if.end27, %sw.bb
  %31 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10072
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !10072
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !10072
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !10072
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !10072
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !10072
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !10072
  %bf.load32 = load i32, i32* %33, align 8, !dbg !10072
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !10072
  %cmp34 = icmp eq i32 %bf.clear33, 37, !dbg !10072
  br i1 %cmp34, label %if.then35, label %if.else52, !dbg !10074

if.then35:                                        ; preds = %sw.epilog
  %34 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10075
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !10075
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !10075
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !10075
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !10075
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !10075
  store %struct.rtx_def* %35, %struct.rtx_def** %old_reg, align 8, !dbg !10077
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10078
  %37 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10080
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !10080
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !10080
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 0, !dbg !10080
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !10080
  %38 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !10081
  %call44 = call zeroext i8 @validate_change(%struct.rtx_def* %36, %struct.rtx_def** %rt_rtx43, %struct.rtx_def* %38, i8 zeroext 0), !dbg !10082
  %tobool45 = icmp ne i8 %call44, 0, !dbg !10082
  br i1 %tobool45, label %if.then46, label %if.else, !dbg !10083

if.then46:                                        ; preds = %if.then35
  %39 = load %struct.rtx_def*, %struct.rtx_def** %old_reg, align 8, !dbg !10084
  %40 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !10086
  %call47 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %39, %struct.rtx_def* %40), !dbg !10087
  store %struct.rtx_def* %call47, %struct.rtx_def** %new_insn, align 8, !dbg !10088
  %41 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !10089
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10090
  %call48 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %41, %struct.rtx_def* %42), !dbg !10091
  store %struct.rtx_def* %call48, %struct.rtx_def** %new_insn, align 8, !dbg !10092
  br label %if.end51, !dbg !10093

if.else:                                          ; preds = %if.then35
  %43 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !10094
  %44 = load %struct.rtx_def*, %struct.rtx_def** %old_reg, align 8, !dbg !10096
  %call49 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %43, %struct.rtx_def* %44), !dbg !10097
  store %struct.rtx_def* %call49, %struct.rtx_def** %new_insn, align 8, !dbg !10098
  %45 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !10099
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10100
  %call50 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %45, %struct.rtx_def* %46), !dbg !10101
  store %struct.rtx_def* %call50, %struct.rtx_def** %new_insn, align 8, !dbg !10102
  br label %if.end51

if.end51:                                         ; preds = %if.else, %if.then46
  br label %if.end69, !dbg !10103

if.else52:                                        ; preds = %sw.epilog
  %47 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10104
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !10104
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !10104
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 1, !dbg !10104
  %rt_rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**, !dbg !10104
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx56, align 8, !dbg !10104
  store %struct.rtx_def* %48, %struct.rtx_def** %old_reg, align 8, !dbg !10106
  %49 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !10107
  %50 = load %struct.rtx_def*, %struct.rtx_def** %old_reg, align 8, !dbg !10108
  %call57 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %49, %struct.rtx_def* %50), !dbg !10109
  store %struct.rtx_def* %call57, %struct.rtx_def** %new_insn, align 8, !dbg !10110
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10111
  %52 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10113
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !10113
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !10113
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 1, !dbg !10113
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !10113
  %53 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !10114
  %call62 = call zeroext i8 @validate_change(%struct.rtx_def* %51, %struct.rtx_def** %rt_rtx61, %struct.rtx_def* %53, i8 zeroext 0), !dbg !10115
  %tobool63 = icmp ne i8 %call62, 0, !dbg !10115
  br i1 %tobool63, label %if.then64, label %if.else66, !dbg !10116

if.then64:                                        ; preds = %if.else52
  %54 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !10117
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10118
  %call65 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %54, %struct.rtx_def* %55), !dbg !10119
  store %struct.rtx_def* %call65, %struct.rtx_def** %new_insn, align 8, !dbg !10120
  br label %if.end68, !dbg !10121

if.else66:                                        ; preds = %if.else52
  %56 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !10122
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10123
  %call67 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %56, %struct.rtx_def* %57), !dbg !10124
  store %struct.rtx_def* %call67, %struct.rtx_def** %new_insn, align 8, !dbg !10125
  br label %if.end68

if.end68:                                         ; preds = %if.else66, %if.then64
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end51
  %58 = load i32, i32* @gcse_create_count, align 4, !dbg !10126
  %inc70 = add nsw i32 %58, 1, !dbg !10126
  store i32 %inc70, i32* @gcse_create_count, align 4, !dbg !10126
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10127
  %tobool71 = icmp ne %struct._IO_FILE* %59, null, !dbg !10127
  br i1 %tobool71, label %if.then72, label %if.end84, !dbg !10129

if.then72:                                        ; preds = %if.end69
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10130
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10131
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !10131
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !10131
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 3, !dbg !10131
  %rt_bb = bitcast %union.rtunion_def* %arrayidx75 to %struct.basic_block_def**, !dbg !10131
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !10131
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 9, !dbg !10132
  %63 = load i32, i32* %index, align 8, !dbg !10132
  %64 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !10133
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !10133
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !10133
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 0, !dbg !10133
  %rt_int = bitcast %union.rtunion_def* %arrayidx78 to i32*, !dbg !10133
  %65 = load i32, i32* %rt_int, align 8, !dbg !10133
  %66 = load i32, i32* %indx, align 4, !dbg !10134
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10135
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !10135
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !10135
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 0, !dbg !10135
  %rt_int82 = bitcast %union.rtunion_def* %arrayidx81 to i32*, !dbg !10135
  %68 = load i32, i32* %rt_int82, align 8, !dbg !10135
  %69 = load i32, i32* %regno, align 4, !dbg !10136
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.46, i64 0, i64 0), i32 %63, i32 %65, i32 %66, i32 %68, i32 %69), !dbg !10137
  br label %if.end84, !dbg !10137

if.end84:                                         ; preds = %if.then72, %if.end69
  ret void, !dbg !10138
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_expr_reaches_here_p_work(%struct.basic_block_def* %occr_bb, %struct.expr* %expr, %struct.basic_block_def* %bb, i8* %visited) #0 !dbg !10139 {
entry:
  %retval = alloca i32, align 4
  %occr_bb.addr = alloca %struct.basic_block_def*, align 8
  %expr.addr = alloca %struct.expr*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %visited.addr = alloca i8*, align 8
  %pred = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %pred_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %occr_bb, %struct.basic_block_def** %occr_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %occr_bb.addr, metadata !10142, metadata !DIExpression()), !dbg !10143
  store %struct.expr* %expr, %struct.expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr** %expr.addr, metadata !10144, metadata !DIExpression()), !dbg !10145
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10146, metadata !DIExpression()), !dbg !10147
  store i8* %visited, i8** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %visited.addr, metadata !10148, metadata !DIExpression()), !dbg !10149
  call void @llvm.dbg.declare(metadata %struct.edge_def** %pred, metadata !10150, metadata !DIExpression()), !dbg !10151
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10152, metadata !DIExpression()), !dbg !10153
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10154
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !10154
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10154
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10154
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !10154
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !10154
  store i32 %3, i32* %2, align 8, !dbg !10154
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !10154
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !10154
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !10154
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10154
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !10154
  br label %for.cond, !dbg !10154

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10156
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !10156
  %10 = load i32, i32* %9, align 8, !dbg !10156
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !10156
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !10156
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %pred), !dbg !10156
  %tobool = icmp ne i8 %call1, 0, !dbg !10154
  br i1 %tobool, label %for.body, label %for.end, !dbg !10154

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred_bb, metadata !10158, metadata !DIExpression()), !dbg !10160
  %13 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10161
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 0, !dbg !10162
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10162
  store %struct.basic_block_def* %14, %struct.basic_block_def** %pred_bb, align 8, !dbg !10160
  %15 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10163
  %src2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 0, !dbg !10165
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !10165
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10166
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !10166
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10166
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10166
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 0, !dbg !10166
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10166
  %cmp = icmp eq %struct.basic_block_def* %16, %19, !dbg !10167
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10168

lor.lhs.false:                                    ; preds = %for.body
  %20 = load i8*, i8** %visited.addr, align 8, !dbg !10169
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10170
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !10171
  %22 = load i32, i32* %index, align 8, !dbg !10171
  %idxprom = sext i32 %22 to i64, !dbg !10169
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 %idxprom, !dbg !10169
  %23 = load i8, i8* %arrayidx, align 1, !dbg !10169
  %conv = sext i8 %23 to i32, !dbg !10169
  %tobool3 = icmp ne i32 %conv, 0, !dbg !10169
  br i1 %tobool3, label %if.then, label %if.else, !dbg !10172

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %if.end47, !dbg !10172

if.else:                                          ; preds = %lor.lhs.false
  %24 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @comp, align 8, !dbg !10173
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10173
  %index4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 9, !dbg !10173
  %26 = load i32, i32* %index4, align 8, !dbg !10173
  %idxprom5 = sext i32 %26 to i64, !dbg !10173
  %arrayidx6 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %24, i64 %idxprom5, !dbg !10173
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx6, align 8, !dbg !10173
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %27, i32 0, i32 3, !dbg !10173
  %28 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !10173
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %28, i32 0, i32 1, !dbg !10173
  %29 = load i32, i32* %bitmap_index, align 8, !dbg !10173
  %div = udiv i32 %29, 64, !dbg !10173
  %idxprom7 = zext i32 %div to i64, !dbg !10173
  %arrayidx8 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom7, !dbg !10173
  %30 = load i64, i64* %arrayidx8, align 8, !dbg !10173
  %31 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !10173
  %bitmap_index9 = getelementptr inbounds %struct.expr, %struct.expr* %31, i32 0, i32 1, !dbg !10173
  %32 = load i32, i32* %bitmap_index9, align 8, !dbg !10173
  %rem = urem i32 %32, 64, !dbg !10173
  %sh_prom = zext i32 %rem to i64, !dbg !10173
  %shr = lshr i64 %30, %sh_prom, !dbg !10173
  %and = and i64 %shr, 1, !dbg !10173
  %tobool10 = icmp ne i64 %and, 0, !dbg !10173
  br i1 %tobool10, label %if.then11, label %if.else18, !dbg !10175

if.then11:                                        ; preds = %if.else
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %occr_bb.addr, align 8, !dbg !10176
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10179
  %cmp12 = icmp eq %struct.basic_block_def* %33, %34, !dbg !10180
  br i1 %cmp12, label %if.then14, label %if.end, !dbg !10181

if.then14:                                        ; preds = %if.then11
  store i32 1, i32* %retval, align 4, !dbg !10182
  br label %return, !dbg !10182

if.end:                                           ; preds = %if.then11
  %35 = load i8*, i8** %visited.addr, align 8, !dbg !10183
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10184
  %index15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !10185
  %37 = load i32, i32* %index15, align 8, !dbg !10185
  %idxprom16 = sext i32 %37 to i64, !dbg !10183
  %arrayidx17 = getelementptr inbounds i8, i8* %35, i64 %idxprom16, !dbg !10183
  store i8 1, i8* %arrayidx17, align 1, !dbg !10186
  br label %if.end46, !dbg !10187

if.else18:                                        ; preds = %if.else
  %38 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !10188
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10188
  %index19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 9, !dbg !10188
  %40 = load i32, i32* %index19, align 8, !dbg !10188
  %idxprom20 = sext i32 %40 to i64, !dbg !10188
  %arrayidx21 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %38, i64 %idxprom20, !dbg !10188
  %41 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx21, align 8, !dbg !10188
  %elms22 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %41, i32 0, i32 3, !dbg !10188
  %42 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !10188
  %bitmap_index23 = getelementptr inbounds %struct.expr, %struct.expr* %42, i32 0, i32 1, !dbg !10188
  %43 = load i32, i32* %bitmap_index23, align 8, !dbg !10188
  %div24 = udiv i32 %43, 64, !dbg !10188
  %idxprom25 = zext i32 %div24 to i64, !dbg !10188
  %arrayidx26 = getelementptr inbounds [1 x i64], [1 x i64]* %elms22, i64 0, i64 %idxprom25, !dbg !10188
  %44 = load i64, i64* %arrayidx26, align 8, !dbg !10188
  %45 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !10188
  %bitmap_index27 = getelementptr inbounds %struct.expr, %struct.expr* %45, i32 0, i32 1, !dbg !10188
  %46 = load i32, i32* %bitmap_index27, align 8, !dbg !10188
  %rem28 = urem i32 %46, 64, !dbg !10188
  %sh_prom29 = zext i32 %rem28 to i64, !dbg !10188
  %shr30 = lshr i64 %44, %sh_prom29, !dbg !10188
  %and31 = and i64 %shr30, 1, !dbg !10188
  %tobool32 = icmp ne i64 %and31, 0, !dbg !10188
  br i1 %tobool32, label %if.else37, label %if.then33, !dbg !10190

if.then33:                                        ; preds = %if.else18
  %47 = load i8*, i8** %visited.addr, align 8, !dbg !10191
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10192
  %index34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 9, !dbg !10193
  %49 = load i32, i32* %index34, align 8, !dbg !10193
  %idxprom35 = sext i32 %49 to i64, !dbg !10191
  %arrayidx36 = getelementptr inbounds i8, i8* %47, i64 %idxprom35, !dbg !10191
  store i8 1, i8* %arrayidx36, align 1, !dbg !10194
  br label %if.end45, !dbg !10191

if.else37:                                        ; preds = %if.else18
  %50 = load i8*, i8** %visited.addr, align 8, !dbg !10195
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10197
  %index38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !10198
  %52 = load i32, i32* %index38, align 8, !dbg !10198
  %idxprom39 = sext i32 %52 to i64, !dbg !10195
  %arrayidx40 = getelementptr inbounds i8, i8* %50, i64 %idxprom39, !dbg !10195
  store i8 1, i8* %arrayidx40, align 1, !dbg !10199
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %occr_bb.addr, align 8, !dbg !10200
  %54 = load %struct.expr*, %struct.expr** %expr.addr, align 8, !dbg !10202
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10203
  %56 = load i8*, i8** %visited.addr, align 8, !dbg !10204
  %call41 = call i32 @pre_expr_reaches_here_p_work(%struct.basic_block_def* %53, %struct.expr* %54, %struct.basic_block_def* %55, i8* %56), !dbg !10205
  %tobool42 = icmp ne i32 %call41, 0, !dbg !10205
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !10206

if.then43:                                        ; preds = %if.else37
  store i32 1, i32* %retval, align 4, !dbg !10207
  br label %return, !dbg !10207

if.end44:                                         ; preds = %if.else37
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then33
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then
  br label %for.inc, !dbg !10208

for.inc:                                          ; preds = %if.end47
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10156
  br label %for.cond, !dbg !10156, !llvm.loop !10209

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !10211
  br label %return, !dbg !10211

return:                                           ; preds = %for.end, %if.then43, %if.then14
  %57 = load i32, i32* %retval, align 4, !dbg !10212
  ret i32 %57, !dbg !10212
}

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local zeroext i8 @optimize_function_for_size_p(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @one_code_hoisting_pass() #0 !dbg !10213 {
entry:
  %retval = alloca i32, align 4
  %changed = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !10214, metadata !DIExpression()), !dbg !10215
  store i32 0, i32* %changed, align 4, !dbg !10215
  store i32 0, i32* @gcse_subst_count, align 4, !dbg !10216
  store i32 0, i32* @gcse_create_count, align 4, !dbg !10217
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10218
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10218
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10218
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10218
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !10218
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !10218
  %cmp = icmp sle i32 %2, 3, !dbg !10220
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10221

lor.lhs.false:                                    ; preds = %entry
  %call = call zeroext i8 @is_too_expensive(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i64 0, i64 0)), !dbg !10222
  %conv = zext i8 %call to i32, !dbg !10222
  %tobool = icmp ne i32 %conv, 0, !dbg !10222
  br i1 %tobool, label %if.then, label %if.end, !dbg !10223

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !10224
  br label %return, !dbg !10224

if.end:                                           ; preds = %lor.lhs.false
  call void @init_alias_analysis(), !dbg !10225
  store i32 0, i32* @bytes_used, align 4, !dbg !10226
  %call1 = call i32 @_obstack_begin(%struct.obstack* @gcse_obstack, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !10227
  call void @alloc_gcse_mem(), !dbg !10228
  call void @alloc_hash_table(%struct.hash_table_d* @expr_hash_table, i32 0), !dbg !10229
  call void @compute_hash_table(%struct.hash_table_d* @expr_hash_table), !dbg !10230
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10231
  %tobool2 = icmp ne %struct._IO_FILE* %3, null, !dbg !10231
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !10233

if.then3:                                         ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10234
  call void @dump_hash_table(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.48, i64 0, i64 0), %struct.hash_table_d* @expr_hash_table), !dbg !10235
  br label %if.end4, !dbg !10235

if.end4:                                          ; preds = %if.then3, %if.end
  %5 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !10236
  %cmp5 = icmp ugt i32 %5, 0, !dbg !10238
  br i1 %cmp5, label %if.then7, label %if.end11, !dbg !10239

if.then7:                                         ; preds = %if.end4
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10240
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !10240
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !10240
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !10240
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 5, !dbg !10240
  %8 = load i32, i32* %x_last_basic_block, align 8, !dbg !10240
  %9 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !10242
  call void @alloc_code_hoist_mem(i32 %8, i32 %9), !dbg !10243
  call void @compute_code_hoist_data(), !dbg !10244
  %call10 = call i32 @hoist_code(), !dbg !10245
  store i32 %call10, i32* %changed, align 4, !dbg !10246
  call void @free_code_hoist_mem(), !dbg !10247
  br label %if.end11, !dbg !10248

if.end11:                                         ; preds = %if.then7, %if.end4
  call void @free_hash_table(%struct.hash_table_d* @expr_hash_table), !dbg !10249
  call void @free_gcse_mem(), !dbg !10250
  %10 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !10251
  %11 = bitcast %struct._obstack_chunk* %10 to i8*, !dbg !10251
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64, !dbg !10251
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !10251
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !10251
  %12 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !10251
  %cmp12 = icmp sgt i64 %12, 0, !dbg !10251
  br i1 %cmp12, label %land.lhs.true, label %cond.false, !dbg !10251

land.lhs.true:                                    ; preds = %if.end11
  %13 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !10251
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 4), align 8, !dbg !10251
  %15 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !10251
  %16 = bitcast %struct._obstack_chunk* %15 to i8*, !dbg !10251
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64, !dbg !10251
  %sub.ptr.rhs.cast14 = ptrtoint i8* %16 to i64, !dbg !10251
  %sub.ptr.sub15 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast14, !dbg !10251
  %cmp16 = icmp slt i64 %13, %sub.ptr.sub15, !dbg !10251
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !10251

cond.true:                                        ; preds = %land.lhs.true
  %17 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !10251
  %18 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !10251
  %19 = bitcast %struct._obstack_chunk* %18 to i8*, !dbg !10251
  %add.ptr18 = getelementptr inbounds i8, i8* %19, i64 %17, !dbg !10251
  store i8* %add.ptr18, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 2), align 8, !dbg !10251
  store i8* %add.ptr18, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 3), align 8, !dbg !10251
  %20 = ptrtoint i8* %add.ptr18 to i64, !dbg !10251
  br label %cond.end, !dbg !10251

cond.false:                                       ; preds = %land.lhs.true, %if.end11
  %21 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 5), align 8, !dbg !10251
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gcse_obstack, i32 0, i32 1), align 8, !dbg !10251
  %23 = bitcast %struct._obstack_chunk* %22 to i8*, !dbg !10251
  %add.ptr19 = getelementptr inbounds i8, i8* %23, i64 %21, !dbg !10251
  call void @obstack_free(%struct.obstack* @gcse_obstack, i8* %add.ptr19), !dbg !10251
  br label %cond.end, !dbg !10251

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %20, %cond.true ], [ 0, %cond.false ], !dbg !10251
  call void @end_alias_analysis(), !dbg !10252
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10253
  %tobool20 = icmp ne %struct._IO_FILE* %24, null, !dbg !10253
  br i1 %tobool20, label %if.then21, label %if.end28, !dbg !10255

if.then21:                                        ; preds = %cond.end
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10256
  %call22 = call i8* @current_function_name(), !dbg !10258
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10259
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !10259
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !10259
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !10259
  %x_n_basic_blocks25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 3, !dbg !10259
  %28 = load i32, i32* %x_n_basic_blocks25, align 8, !dbg !10259
  %29 = load i32, i32* @bytes_used, align 4, !dbg !10260
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.49, i64 0, i64 0), i8* %call22, i32 %28, i32 %29), !dbg !10261
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10262
  %31 = load i32, i32* @gcse_subst_count, align 4, !dbg !10263
  %32 = load i32, i32* @gcse_create_count, align 4, !dbg !10264
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.31, i64 0, i64 0), i32 %31, i32 %32), !dbg !10265
  br label %if.end28, !dbg !10266

if.end28:                                         ; preds = %if.then21, %cond.end
  %33 = load i32, i32* %changed, align 4, !dbg !10267
  store i32 %33, i32* %retval, align 4, !dbg !10268
  br label %return, !dbg !10268

return:                                           ; preds = %if.end28, %if.then
  %34 = load i32, i32* %retval, align 4, !dbg !10269
  ret i32 %34, !dbg !10269
}

; Function Attrs: noinline nounwind uwtable
define internal void @alloc_code_hoist_mem(i32 %n_blocks, i32 %n_exprs) #0 !dbg !10270 {
entry:
  %n_blocks.addr = alloca i32, align 4
  %n_exprs.addr = alloca i32, align 4
  store i32 %n_blocks, i32* %n_blocks.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_blocks.addr, metadata !10271, metadata !DIExpression()), !dbg !10272
  store i32 %n_exprs, i32* %n_exprs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_exprs.addr, metadata !10273, metadata !DIExpression()), !dbg !10274
  %0 = load i32, i32* %n_blocks.addr, align 4, !dbg !10275
  %1 = load i32, i32* %n_exprs.addr, align 4, !dbg !10276
  %call = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %0, i32 %1), !dbg !10277
  store %struct.simple_bitmap_def** %call, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !10278
  %2 = load i32, i32* %n_blocks.addr, align 4, !dbg !10279
  %3 = load i32, i32* %n_exprs.addr, align 4, !dbg !10280
  %call1 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %2, i32 %3), !dbg !10281
  store %struct.simple_bitmap_def** %call1, %struct.simple_bitmap_def*** @transp, align 8, !dbg !10282
  %4 = load i32, i32* %n_blocks.addr, align 4, !dbg !10283
  %5 = load i32, i32* %n_exprs.addr, align 4, !dbg !10284
  %call2 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %4, i32 %5), !dbg !10285
  store %struct.simple_bitmap_def** %call2, %struct.simple_bitmap_def*** @comp, align 8, !dbg !10286
  %6 = load i32, i32* %n_blocks.addr, align 4, !dbg !10287
  %7 = load i32, i32* %n_exprs.addr, align 4, !dbg !10288
  %call3 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %6, i32 %7), !dbg !10289
  store %struct.simple_bitmap_def** %call3, %struct.simple_bitmap_def*** @hoist_vbein, align 8, !dbg !10290
  %8 = load i32, i32* %n_blocks.addr, align 4, !dbg !10291
  %9 = load i32, i32* %n_exprs.addr, align 4, !dbg !10292
  %call4 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %8, i32 %9), !dbg !10293
  store %struct.simple_bitmap_def** %call4, %struct.simple_bitmap_def*** @hoist_vbeout, align 8, !dbg !10294
  %10 = load i32, i32* %n_blocks.addr, align 4, !dbg !10295
  %11 = load i32, i32* %n_exprs.addr, align 4, !dbg !10296
  %call5 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %10, i32 %11), !dbg !10297
  store %struct.simple_bitmap_def** %call5, %struct.simple_bitmap_def*** @hoist_exprs, align 8, !dbg !10298
  %12 = load i32, i32* %n_blocks.addr, align 4, !dbg !10299
  %13 = load i32, i32* %n_exprs.addr, align 4, !dbg !10300
  %call6 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %12, i32 %13), !dbg !10301
  store %struct.simple_bitmap_def** %call6, %struct.simple_bitmap_def*** @transpout, align 8, !dbg !10302
  ret void, !dbg !10303
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_code_hoist_data() #0 !dbg !10304 {
entry:
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !10305
  %1 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @comp, align 8, !dbg !10306
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !10307
  call void @compute_local_properties(%struct.simple_bitmap_def** %0, %struct.simple_bitmap_def** %1, %struct.simple_bitmap_def** %2, %struct.hash_table_d* @expr_hash_table), !dbg !10308
  call void @compute_transpout(), !dbg !10309
  call void @compute_code_hoist_vbeinout(), !dbg !10310
  call void @calculate_dominance_info(i32 1), !dbg !10311
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10312
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !10312
  br i1 %tobool, label %if.then, label %if.end, !dbg !10314

if.then:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10315
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !10316
  br label %if.end, !dbg !10316

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !10317
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @hoist_code() #0 !dbg !10318 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %dominated = alloca %struct.basic_block_def*, align 8
  %domby = alloca %struct.VEC_basic_block_heap*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %index_map = alloca %struct.expr**, align 8
  %expr = alloca %struct.expr*, align 8
  %changed = alloca i32, align 4
  %found = alloca i32, align 4
  %insn_inserted_p = alloca i32, align 4
  %hoistable = alloca i32, align 4
  %expr138 = alloca %struct.expr*, align 8
  %occr = alloca %struct.occr*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10319, metadata !DIExpression()), !dbg !10320
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dominated, metadata !10321, metadata !DIExpression()), !dbg !10322
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %domby, metadata !10323, metadata !DIExpression()), !dbg !10329
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10330, metadata !DIExpression()), !dbg !10331
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10332, metadata !DIExpression()), !dbg !10333
  call void @llvm.dbg.declare(metadata %struct.expr*** %index_map, metadata !10334, metadata !DIExpression()), !dbg !10335
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !10336, metadata !DIExpression()), !dbg !10337
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !10338, metadata !DIExpression()), !dbg !10339
  store i32 0, i32* %changed, align 4, !dbg !10339
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_exprs, align 8, !dbg !10340
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10341
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !10341
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10341
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10341
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !10341
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !10341
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %0, i32 %3), !dbg !10342
  %4 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 2), align 4, !dbg !10343
  %conv = zext i32 %4 to i64, !dbg !10343
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !10343
  %5 = bitcast i8* %call to %struct.expr**, !dbg !10343
  store %struct.expr** %5, %struct.expr*** %index_map, align 8, !dbg !10344
  store i32 0, i32* %i, align 4, !dbg !10345
  br label %for.cond, !dbg !10347

for.cond:                                         ; preds = %for.inc8, %entry
  %6 = load i32, i32* %i, align 4, !dbg !10348
  %7 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 1), align 8, !dbg !10350
  %cmp = icmp ult i32 %6, %7, !dbg !10351
  br i1 %cmp, label %for.body, label %for.end9, !dbg !10352

for.body:                                         ; preds = %for.cond
  %8 = load %struct.expr**, %struct.expr*** getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 0), align 8, !dbg !10353
  %9 = load i32, i32* %i, align 4, !dbg !10355
  %idxprom = zext i32 %9 to i64, !dbg !10356
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %8, i64 %idxprom, !dbg !10356
  %10 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !10356
  store %struct.expr* %10, %struct.expr** %expr, align 8, !dbg !10357
  br label %for.cond2, !dbg !10358

for.cond2:                                        ; preds = %for.inc, %for.body
  %11 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10359
  %cmp3 = icmp ne %struct.expr* %11, null, !dbg !10361
  br i1 %cmp3, label %for.body5, label %for.end, !dbg !10362

for.body5:                                        ; preds = %for.cond2
  %12 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10363
  %13 = load %struct.expr**, %struct.expr*** %index_map, align 8, !dbg !10364
  %14 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10365
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %14, i32 0, i32 1, !dbg !10366
  %15 = load i32, i32* %bitmap_index, align 8, !dbg !10366
  %idxprom6 = sext i32 %15 to i64, !dbg !10364
  %arrayidx7 = getelementptr inbounds %struct.expr*, %struct.expr** %13, i64 %idxprom6, !dbg !10364
  store %struct.expr* %12, %struct.expr** %arrayidx7, align 8, !dbg !10367
  br label %for.inc, !dbg !10364

for.inc:                                          ; preds = %for.body5
  %16 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10368
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %16, i32 0, i32 2, !dbg !10369
  %17 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !10369
  store %struct.expr* %17, %struct.expr** %expr, align 8, !dbg !10370
  br label %for.cond2, !dbg !10371, !llvm.loop !10372

for.end:                                          ; preds = %for.cond2
  br label %for.inc8, !dbg !10373

for.inc8:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4, !dbg !10374
  %inc = add i32 %18, 1, !dbg !10374
  store i32 %inc, i32* %i, align 4, !dbg !10374
  br label %for.cond, !dbg !10375, !llvm.loop !10376

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10378
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !10378
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 1, !dbg !10378
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !10378
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 0, !dbg !10378
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10378
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 6, !dbg !10378
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !10378
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !10378
  br label %for.cond12, !dbg !10378

for.cond12:                                       ; preds = %for.inc228, %for.end9
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10380
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10380
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !10380
  %cfg14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 1, !dbg !10380
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg14, align 8, !dbg !10380
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 1, !dbg !10380
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10380
  %cmp15 = icmp ne %struct.basic_block_def* %23, %26, !dbg !10380
  br i1 %cmp15, label %for.body17, label %for.end230, !dbg !10378

for.body17:                                       ; preds = %for.cond12
  call void @llvm.dbg.declare(metadata i32* %found, metadata !10382, metadata !DIExpression()), !dbg !10384
  store i32 0, i32* %found, align 4, !dbg !10384
  call void @llvm.dbg.declare(metadata i32* %insn_inserted_p, metadata !10385, metadata !DIExpression()), !dbg !10386
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10387
  %call18 = call %struct.VEC_basic_block_heap* @get_dominated_by(i32 1, %struct.basic_block_def* %27), !dbg !10388
  store %struct.VEC_basic_block_heap* %call18, %struct.VEC_basic_block_heap** %domby, align 8, !dbg !10389
  store i32 0, i32* %i, align 4, !dbg !10390
  br label %for.cond19, !dbg !10392

for.cond19:                                       ; preds = %for.inc80, %for.body17
  %28 = load i32, i32* %i, align 4, !dbg !10393
  %29 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbeout, align 8, !dbg !10395
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10396
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !10397
  %31 = load i32, i32* %index, align 8, !dbg !10397
  %idxprom20 = sext i32 %31 to i64, !dbg !10395
  %arrayidx21 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %29, i64 %idxprom20, !dbg !10395
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx21, align 8, !dbg !10395
  %n_bits = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %32, i32 0, i32 1, !dbg !10398
  %33 = load i32, i32* %n_bits, align 8, !dbg !10398
  %cmp22 = icmp ult i32 %28, %33, !dbg !10399
  br i1 %cmp22, label %for.body24, label %for.end82, !dbg !10400

for.body24:                                       ; preds = %for.cond19
  call void @llvm.dbg.declare(metadata i32* %hoistable, metadata !10401, metadata !DIExpression()), !dbg !10403
  store i32 0, i32* %hoistable, align 4, !dbg !10403
  %34 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbeout, align 8, !dbg !10404
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10404
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 9, !dbg !10404
  %36 = load i32, i32* %index25, align 8, !dbg !10404
  %idxprom26 = sext i32 %36 to i64, !dbg !10404
  %arrayidx27 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %34, i64 %idxprom26, !dbg !10404
  %37 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx27, align 8, !dbg !10404
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %37, i32 0, i32 3, !dbg !10404
  %38 = load i32, i32* %i, align 4, !dbg !10404
  %div = udiv i32 %38, 64, !dbg !10404
  %idxprom28 = zext i32 %div to i64, !dbg !10404
  %arrayidx29 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom28, !dbg !10404
  %39 = load i64, i64* %arrayidx29, align 8, !dbg !10404
  %40 = load i32, i32* %i, align 4, !dbg !10404
  %rem = urem i32 %40, 64, !dbg !10404
  %sh_prom = zext i32 %rem to i64, !dbg !10404
  %shr = lshr i64 %39, %sh_prom, !dbg !10404
  %and = and i64 %shr, 1, !dbg !10404
  %tobool = icmp ne i64 %and, 0, !dbg !10404
  br i1 %tobool, label %land.lhs.true, label %if.end79, !dbg !10406

land.lhs.true:                                    ; preds = %for.body24
  %41 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transpout, align 8, !dbg !10407
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10407
  %index30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 9, !dbg !10407
  %43 = load i32, i32* %index30, align 8, !dbg !10407
  %idxprom31 = sext i32 %43 to i64, !dbg !10407
  %arrayidx32 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %41, i64 %idxprom31, !dbg !10407
  %44 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx32, align 8, !dbg !10407
  %elms33 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %44, i32 0, i32 3, !dbg !10407
  %45 = load i32, i32* %i, align 4, !dbg !10407
  %div34 = udiv i32 %45, 64, !dbg !10407
  %idxprom35 = zext i32 %div34 to i64, !dbg !10407
  %arrayidx36 = getelementptr inbounds [1 x i64], [1 x i64]* %elms33, i64 0, i64 %idxprom35, !dbg !10407
  %46 = load i64, i64* %arrayidx36, align 8, !dbg !10407
  %47 = load i32, i32* %i, align 4, !dbg !10407
  %rem37 = urem i32 %47, 64, !dbg !10407
  %sh_prom38 = zext i32 %rem37 to i64, !dbg !10407
  %shr39 = lshr i64 %46, %sh_prom38, !dbg !10407
  %and40 = and i64 %shr39, 1, !dbg !10407
  %tobool41 = icmp ne i64 %and40, 0, !dbg !10407
  br i1 %tobool41, label %if.then, label %if.end79, !dbg !10408

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %j, align 4, !dbg !10409
  br label %for.cond42, !dbg !10412

for.cond42:                                       ; preds = %for.inc69, %if.then
  %48 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %domby, align 8, !dbg !10413
  %tobool43 = icmp ne %struct.VEC_basic_block_heap* %48, null, !dbg !10413
  br i1 %tobool43, label %cond.true, label %cond.false, !dbg !10413

cond.true:                                        ; preds = %for.cond42
  %49 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %domby, align 8, !dbg !10413
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %49, i32 0, i32 0, !dbg !10413
  br label %cond.end, !dbg !10413

cond.false:                                       ; preds = %for.cond42
  br label %cond.end, !dbg !10413

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10413
  %50 = load i32, i32* %j, align 4, !dbg !10413
  %call44 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond, i32 %50, %struct.basic_block_def** %dominated), !dbg !10413
  %tobool45 = icmp ne i32 %call44, 0, !dbg !10415
  br i1 %tobool45, label %for.body46, label %for.end71, !dbg !10415

for.body46:                                       ; preds = %cond.end
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10416
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !10419
  %cmp47 = icmp eq %struct.basic_block_def* %51, %52, !dbg !10420
  br i1 %cmp47, label %if.then49, label %if.end, !dbg !10421

if.then49:                                        ; preds = %for.body46
  br label %for.inc69, !dbg !10422

if.end:                                           ; preds = %for.body46
  %53 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !10423
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !10423
  %index50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 9, !dbg !10423
  %55 = load i32, i32* %index50, align 8, !dbg !10423
  %idxprom51 = sext i32 %55 to i64, !dbg !10423
  %arrayidx52 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %53, i64 %idxprom51, !dbg !10423
  %56 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx52, align 8, !dbg !10423
  %elms53 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %56, i32 0, i32 3, !dbg !10423
  %57 = load i32, i32* %i, align 4, !dbg !10423
  %div54 = udiv i32 %57, 64, !dbg !10423
  %idxprom55 = zext i32 %div54 to i64, !dbg !10423
  %arrayidx56 = getelementptr inbounds [1 x i64], [1 x i64]* %elms53, i64 0, i64 %idxprom55, !dbg !10423
  %58 = load i64, i64* %arrayidx56, align 8, !dbg !10423
  %59 = load i32, i32* %i, align 4, !dbg !10423
  %rem57 = urem i32 %59, 64, !dbg !10423
  %sh_prom58 = zext i32 %rem57 to i64, !dbg !10423
  %shr59 = lshr i64 %58, %sh_prom58, !dbg !10423
  %and60 = and i64 %shr59, 1, !dbg !10423
  %tobool61 = icmp ne i64 %and60, 0, !dbg !10423
  br i1 %tobool61, label %if.end63, label %if.then62, !dbg !10425

if.then62:                                        ; preds = %if.end
  br label %for.inc69, !dbg !10426

if.end63:                                         ; preds = %if.end
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10427
  %61 = load i32, i32* %i, align 4, !dbg !10429
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !10430
  %call64 = call i32 @hoist_expr_reaches_here_p(%struct.basic_block_def* %60, i32 %61, %struct.basic_block_def* %62, i8* null), !dbg !10431
  %tobool65 = icmp ne i32 %call64, 0, !dbg !10431
  br i1 %tobool65, label %if.then66, label %if.end68, !dbg !10432

if.then66:                                        ; preds = %if.end63
  %63 = load i32, i32* %hoistable, align 4, !dbg !10433
  %inc67 = add nsw i32 %63, 1, !dbg !10433
  store i32 %inc67, i32* %hoistable, align 4, !dbg !10433
  br label %if.end68, !dbg !10434

if.end68:                                         ; preds = %if.then66, %if.end63
  br label %for.inc69, !dbg !10435

for.inc69:                                        ; preds = %if.end68, %if.then62, %if.then49
  %64 = load i32, i32* %j, align 4, !dbg !10436
  %inc70 = add i32 %64, 1, !dbg !10436
  store i32 %inc70, i32* %j, align 4, !dbg !10436
  br label %for.cond42, !dbg !10437, !llvm.loop !10438

for.end71:                                        ; preds = %cond.end
  %65 = load i32, i32* %hoistable, align 4, !dbg !10440
  %cmp72 = icmp sgt i32 %65, 1, !dbg !10442
  br i1 %cmp72, label %if.then74, label %if.end78, !dbg !10443

if.then74:                                        ; preds = %for.end71
  %66 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_exprs, align 8, !dbg !10444
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10446
  %index75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 9, !dbg !10447
  %68 = load i32, i32* %index75, align 8, !dbg !10447
  %idxprom76 = sext i32 %68 to i64, !dbg !10444
  %arrayidx77 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %66, i64 %idxprom76, !dbg !10444
  %69 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx77, align 8, !dbg !10444
  %70 = load i32, i32* %i, align 4, !dbg !10448
  call void @SET_BIT(%struct.simple_bitmap_def* %69, i32 %70), !dbg !10449
  store i32 1, i32* %found, align 4, !dbg !10450
  br label %if.end78, !dbg !10451

if.end78:                                         ; preds = %if.then74, %for.end71
  br label %if.end79, !dbg !10452

if.end79:                                         ; preds = %if.end78, %land.lhs.true, %for.body24
  br label %for.inc80, !dbg !10453

for.inc80:                                        ; preds = %if.end79
  %71 = load i32, i32* %i, align 4, !dbg !10454
  %inc81 = add i32 %71, 1, !dbg !10454
  store i32 %inc81, i32* %i, align 4, !dbg !10454
  br label %for.cond19, !dbg !10455, !llvm.loop !10456

for.end82:                                        ; preds = %for.cond19
  %72 = load i32, i32* %found, align 4, !dbg !10458
  %tobool83 = icmp ne i32 %72, 0, !dbg !10458
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !10460

if.then84:                                        ; preds = %for.end82
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %domby), !dbg !10461
  br label %for.inc228, !dbg !10463

if.end85:                                         ; preds = %for.end82
  store i32 0, i32* %i, align 4, !dbg !10464
  br label %for.cond86, !dbg !10466

for.cond86:                                       ; preds = %for.inc225, %if.end85
  %73 = load i32, i32* %i, align 4, !dbg !10467
  %74 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_exprs, align 8, !dbg !10469
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10470
  %index87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 9, !dbg !10471
  %76 = load i32, i32* %index87, align 8, !dbg !10471
  %idxprom88 = sext i32 %76 to i64, !dbg !10469
  %arrayidx89 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %74, i64 %idxprom88, !dbg !10469
  %77 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx89, align 8, !dbg !10469
  %n_bits90 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %77, i32 0, i32 1, !dbg !10472
  %78 = load i32, i32* %n_bits90, align 8, !dbg !10472
  %cmp91 = icmp ult i32 %73, %78, !dbg !10473
  br i1 %cmp91, label %for.body93, label %for.end227, !dbg !10474

for.body93:                                       ; preds = %for.cond86
  store i32 0, i32* %insn_inserted_p, align 4, !dbg !10475
  %79 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_exprs, align 8, !dbg !10477
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10477
  %index94 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %80, i32 0, i32 9, !dbg !10477
  %81 = load i32, i32* %index94, align 8, !dbg !10477
  %idxprom95 = sext i32 %81 to i64, !dbg !10477
  %arrayidx96 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %79, i64 %idxprom95, !dbg !10477
  %82 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx96, align 8, !dbg !10477
  %elms97 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %82, i32 0, i32 3, !dbg !10477
  %83 = load i32, i32* %i, align 4, !dbg !10477
  %div98 = udiv i32 %83, 64, !dbg !10477
  %idxprom99 = zext i32 %div98 to i64, !dbg !10477
  %arrayidx100 = getelementptr inbounds [1 x i64], [1 x i64]* %elms97, i64 0, i64 %idxprom99, !dbg !10477
  %84 = load i64, i64* %arrayidx100, align 8, !dbg !10477
  %85 = load i32, i32* %i, align 4, !dbg !10477
  %rem101 = urem i32 %85, 64, !dbg !10477
  %sh_prom102 = zext i32 %rem101 to i64, !dbg !10477
  %shr103 = lshr i64 %84, %sh_prom102, !dbg !10477
  %and104 = and i64 %shr103, 1, !dbg !10477
  %tobool105 = icmp ne i64 %and104, 0, !dbg !10477
  br i1 %tobool105, label %if.then106, label %if.end224, !dbg !10479

if.then106:                                       ; preds = %for.body93
  store i32 0, i32* %j, align 4, !dbg !10480
  br label %for.cond107, !dbg !10483

for.cond107:                                      ; preds = %for.inc221, %if.then106
  %86 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %domby, align 8, !dbg !10484
  %tobool108 = icmp ne %struct.VEC_basic_block_heap* %86, null, !dbg !10484
  br i1 %tobool108, label %cond.true109, label %cond.false111, !dbg !10484

cond.true109:                                     ; preds = %for.cond107
  %87 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %domby, align 8, !dbg !10484
  %base110 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %87, i32 0, i32 0, !dbg !10484
  br label %cond.end112, !dbg !10484

cond.false111:                                    ; preds = %for.cond107
  br label %cond.end112, !dbg !10484

cond.end112:                                      ; preds = %cond.false111, %cond.true109
  %cond113 = phi %struct.VEC_basic_block_base* [ %base110, %cond.true109 ], [ null, %cond.false111 ], !dbg !10484
  %88 = load i32, i32* %j, align 4, !dbg !10484
  %call114 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond113, i32 %88, %struct.basic_block_def** %dominated), !dbg !10484
  %tobool115 = icmp ne i32 %call114, 0, !dbg !10486
  br i1 %tobool115, label %for.body116, label %for.end223, !dbg !10486

for.body116:                                      ; preds = %cond.end112
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10487
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !10490
  %cmp117 = icmp eq %struct.basic_block_def* %89, %90, !dbg !10491
  br i1 %cmp117, label %if.then119, label %if.end120, !dbg !10492

if.then119:                                       ; preds = %for.body116
  br label %for.inc221, !dbg !10493

if.end120:                                        ; preds = %for.body116
  %91 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !10494
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !10494
  %index121 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 9, !dbg !10494
  %93 = load i32, i32* %index121, align 8, !dbg !10494
  %idxprom122 = sext i32 %93 to i64, !dbg !10494
  %arrayidx123 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %91, i64 %idxprom122, !dbg !10494
  %94 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx123, align 8, !dbg !10494
  %elms124 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %94, i32 0, i32 3, !dbg !10494
  %95 = load i32, i32* %i, align 4, !dbg !10494
  %div125 = udiv i32 %95, 64, !dbg !10494
  %idxprom126 = zext i32 %div125 to i64, !dbg !10494
  %arrayidx127 = getelementptr inbounds [1 x i64], [1 x i64]* %elms124, i64 0, i64 %idxprom126, !dbg !10494
  %96 = load i64, i64* %arrayidx127, align 8, !dbg !10494
  %97 = load i32, i32* %i, align 4, !dbg !10494
  %rem128 = urem i32 %97, 64, !dbg !10494
  %sh_prom129 = zext i32 %rem128 to i64, !dbg !10494
  %shr130 = lshr i64 %96, %sh_prom129, !dbg !10494
  %and131 = and i64 %shr130, 1, !dbg !10494
  %tobool132 = icmp ne i64 %and131, 0, !dbg !10494
  br i1 %tobool132, label %if.end134, label %if.then133, !dbg !10496

if.then133:                                       ; preds = %if.end120
  br label %for.inc221, !dbg !10497

if.end134:                                        ; preds = %if.end120
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10498
  %99 = load i32, i32* %i, align 4, !dbg !10500
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !10501
  %call135 = call i32 @hoist_expr_reaches_here_p(%struct.basic_block_def* %98, i32 %99, %struct.basic_block_def* %100, i8* null), !dbg !10502
  %tobool136 = icmp ne i32 %call135, 0, !dbg !10502
  br i1 %tobool136, label %if.then137, label %if.end220, !dbg !10503

if.then137:                                       ; preds = %if.end134
  call void @llvm.dbg.declare(metadata %struct.expr** %expr138, metadata !10504, metadata !DIExpression()), !dbg !10506
  %101 = load %struct.expr**, %struct.expr*** %index_map, align 8, !dbg !10507
  %102 = load i32, i32* %i, align 4, !dbg !10508
  %idxprom139 = zext i32 %102 to i64, !dbg !10507
  %arrayidx140 = getelementptr inbounds %struct.expr*, %struct.expr** %101, i64 %idxprom139, !dbg !10507
  %103 = load %struct.expr*, %struct.expr** %arrayidx140, align 8, !dbg !10507
  store %struct.expr* %103, %struct.expr** %expr138, align 8, !dbg !10506
  call void @llvm.dbg.declare(metadata %struct.occr** %occr, metadata !10509, metadata !DIExpression()), !dbg !10510
  %104 = load %struct.expr*, %struct.expr** %expr138, align 8, !dbg !10511
  %antic_occr = getelementptr inbounds %struct.expr, %struct.expr* %104, i32 0, i32 3, !dbg !10512
  %105 = load %struct.occr*, %struct.occr** %antic_occr, align 8, !dbg !10512
  store %struct.occr* %105, %struct.occr** %occr, align 8, !dbg !10510
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !10513, metadata !DIExpression()), !dbg !10514
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !10515, metadata !DIExpression()), !dbg !10516
  br label %while.cond, !dbg !10517

while.cond:                                       ; preds = %while.body, %if.then137
  %106 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !10518
  %insn141 = getelementptr inbounds %struct.occr, %struct.occr* %106, i32 0, i32 1, !dbg !10518
  %107 = load %struct.rtx_def*, %struct.rtx_def** %insn141, align 8, !dbg !10518
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1, !dbg !10518
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10518
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !10518
  %rt_bb = bitcast %union.rtunion_def* %arrayidx142 to %struct.basic_block_def**, !dbg !10518
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !10518
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !10519
  %cmp143 = icmp ne %struct.basic_block_def* %108, %109, !dbg !10520
  br i1 %cmp143, label %land.rhs, label %land.end, !dbg !10521

land.rhs:                                         ; preds = %while.cond
  %110 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !10522
  %tobool145 = icmp ne %struct.occr* %110, null, !dbg !10521
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %111 = phi i1 [ false, %while.cond ], [ %tobool145, %land.rhs ], !dbg !10523
  br i1 %111, label %while.body, label %while.end, !dbg !10517

while.body:                                       ; preds = %land.end
  %112 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !10524
  %next = getelementptr inbounds %struct.occr, %struct.occr* %112, i32 0, i32 0, !dbg !10525
  %113 = load %struct.occr*, %struct.occr** %next, align 8, !dbg !10525
  store %struct.occr* %113, %struct.occr** %occr, align 8, !dbg !10526
  br label %while.cond, !dbg !10517, !llvm.loop !10527

while.end:                                        ; preds = %land.end
  %114 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !10528
  %tobool146 = icmp ne %struct.occr* %114, null, !dbg !10528
  br i1 %tobool146, label %cond.false148, label %cond.true147, !dbg !10528

cond.true147:                                     ; preds = %while.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 4384, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !10528
  br label %cond.end149, !dbg !10528

cond.false148:                                    ; preds = %while.end
  br label %cond.end149, !dbg !10528

cond.end149:                                      ; preds = %cond.false148, %cond.true147
  %cond150 = phi i32 [ 0, %cond.true147 ], [ 0, %cond.false148 ], !dbg !10528
  %115 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !10529
  %insn151 = getelementptr inbounds %struct.occr, %struct.occr* %115, i32 0, i32 1, !dbg !10530
  %116 = load %struct.rtx_def*, %struct.rtx_def** %insn151, align 8, !dbg !10530
  store %struct.rtx_def* %116, %struct.rtx_def** %insn, align 8, !dbg !10531
  %117 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10532
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !10532
  %bf.load = load i32, i32* %118, align 8, !dbg !10532
  %bf.clear = and i32 %bf.load, 65535, !dbg !10532
  %cmp152 = icmp eq i32 %bf.clear, 8, !dbg !10532
  br i1 %cmp152, label %cond.true168, label %lor.lhs.false, !dbg !10532

lor.lhs.false:                                    ; preds = %cond.end149
  %119 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10532
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !10532
  %bf.load154 = load i32, i32* %120, align 8, !dbg !10532
  %bf.clear155 = and i32 %bf.load154, 65535, !dbg !10532
  %cmp156 = icmp eq i32 %bf.clear155, 7, !dbg !10532
  br i1 %cmp156, label %cond.true168, label %lor.lhs.false158, !dbg !10532

lor.lhs.false158:                                 ; preds = %lor.lhs.false
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10532
  %122 = bitcast %struct.rtx_def* %121 to i32*, !dbg !10532
  %bf.load159 = load i32, i32* %122, align 8, !dbg !10532
  %bf.clear160 = and i32 %bf.load159, 65535, !dbg !10532
  %cmp161 = icmp eq i32 %bf.clear160, 9, !dbg !10532
  br i1 %cmp161, label %cond.true168, label %lor.lhs.false163, !dbg !10532

lor.lhs.false163:                                 ; preds = %lor.lhs.false158
  %123 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10532
  %124 = bitcast %struct.rtx_def* %123 to i32*, !dbg !10532
  %bf.load164 = load i32, i32* %124, align 8, !dbg !10532
  %bf.clear165 = and i32 %bf.load164, 65535, !dbg !10532
  %cmp166 = icmp eq i32 %bf.clear165, 10, !dbg !10532
  br i1 %cmp166, label %cond.true168, label %cond.false189, !dbg !10532

cond.true168:                                     ; preds = %lor.lhs.false163, %lor.lhs.false158, %lor.lhs.false, %cond.end149
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10532
  %u169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1, !dbg !10532
  %fld170 = bitcast %union.u* %u169 to [1 x %union.rtunion_def]*, !dbg !10532
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i64 0, i64 5, !dbg !10532
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx171 to %struct.rtx_def**, !dbg !10532
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10532
  %127 = bitcast %struct.rtx_def* %126 to i32*, !dbg !10532
  %bf.load172 = load i32, i32* %127, align 8, !dbg !10532
  %bf.clear173 = and i32 %bf.load172, 65535, !dbg !10532
  %cmp174 = icmp eq i32 %bf.clear173, 23, !dbg !10532
  br i1 %cmp174, label %cond.true176, label %cond.false181, !dbg !10532

cond.true176:                                     ; preds = %cond.true168
  %128 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10532
  %u177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1, !dbg !10532
  %fld178 = bitcast %union.u* %u177 to [1 x %union.rtunion_def]*, !dbg !10532
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i64 0, i64 5, !dbg !10532
  %rt_rtx180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtx_def**, !dbg !10532
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx180, align 8, !dbg !10532
  br label %cond.end187, !dbg !10532

cond.false181:                                    ; preds = %cond.true168
  %130 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10532
  %131 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10532
  %u182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1, !dbg !10532
  %fld183 = bitcast %union.u* %u182 to [1 x %union.rtunion_def]*, !dbg !10532
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i64 0, i64 5, !dbg !10532
  %rt_rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**, !dbg !10532
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx185, align 8, !dbg !10532
  %call186 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %130, %struct.rtx_def* %132), !dbg !10532
  br label %cond.end187, !dbg !10532

cond.end187:                                      ; preds = %cond.false181, %cond.true176
  %cond188 = phi %struct.rtx_def* [ %129, %cond.true176 ], [ %call186, %cond.false181 ], !dbg !10532
  br label %cond.end190, !dbg !10532

cond.false189:                                    ; preds = %lor.lhs.false163
  br label %cond.end190, !dbg !10532

cond.end190:                                      ; preds = %cond.false189, %cond.end187
  %cond191 = phi %struct.rtx_def* [ %cond188, %cond.end187 ], [ null, %cond.false189 ], !dbg !10532
  store %struct.rtx_def* %cond191, %struct.rtx_def** %set, align 8, !dbg !10533
  %133 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10534
  %tobool192 = icmp ne %struct.rtx_def* %133, null, !dbg !10534
  br i1 %tobool192, label %cond.false194, label %cond.true193, !dbg !10534

cond.true193:                                     ; preds = %cond.end190
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 4387, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !10534
  br label %cond.end195, !dbg !10534

cond.false194:                                    ; preds = %cond.end190
  br label %cond.end195, !dbg !10534

cond.end195:                                      ; preds = %cond.false194, %cond.true193
  %cond196 = phi i32 [ 0, %cond.true193 ], [ 0, %cond.false194 ], !dbg !10534
  %134 = load %struct.expr*, %struct.expr** %expr138, align 8, !dbg !10535
  %reaching_reg = getelementptr inbounds %struct.expr, %struct.expr* %134, i32 0, i32 5, !dbg !10537
  %135 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg, align 8, !dbg !10537
  %cmp197 = icmp eq %struct.rtx_def* %135, null, !dbg !10538
  br i1 %cmp197, label %if.then199, label %if.end206, !dbg !10539

if.then199:                                       ; preds = %cond.end195
  %136 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10540
  %u200 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !10540
  %fld201 = bitcast %union.u* %u200 to [1 x %union.rtunion_def]*, !dbg !10540
  %arrayidx202 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld201, i64 0, i64 0, !dbg !10540
  %rt_rtx203 = bitcast %union.rtunion_def* %arrayidx202 to %struct.rtx_def**, !dbg !10540
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx203, align 8, !dbg !10540
  %call204 = call %struct.rtx_def* @gen_reg_rtx_and_attrs(%struct.rtx_def* %137), !dbg !10541
  %138 = load %struct.expr*, %struct.expr** %expr138, align 8, !dbg !10542
  %reaching_reg205 = getelementptr inbounds %struct.expr, %struct.expr* %138, i32 0, i32 5, !dbg !10543
  store %struct.rtx_def* %call204, %struct.rtx_def** %reaching_reg205, align 8, !dbg !10544
  br label %if.end206, !dbg !10542

if.end206:                                        ; preds = %if.then199, %cond.end195
  %139 = load %struct.expr*, %struct.expr** %expr138, align 8, !dbg !10545
  %reaching_reg207 = getelementptr inbounds %struct.expr, %struct.expr* %139, i32 0, i32 5, !dbg !10546
  %140 = load %struct.rtx_def*, %struct.rtx_def** %reaching_reg207, align 8, !dbg !10546
  %141 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10547
  %u208 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1, !dbg !10547
  %fld209 = bitcast %union.u* %u208 to [1 x %union.rtunion_def]*, !dbg !10547
  %arrayidx210 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld209, i64 0, i64 0, !dbg !10547
  %rt_rtx211 = bitcast %union.rtunion_def* %arrayidx210 to %struct.rtx_def**, !dbg !10547
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx211, align 8, !dbg !10547
  %143 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10548
  %call212 = call %struct.rtx_def* @gcse_emit_move_after(%struct.rtx_def* %140, %struct.rtx_def* %142, %struct.rtx_def* %143), !dbg !10549
  %144 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10550
  %call213 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %144), !dbg !10551
  %145 = load %struct.occr*, %struct.occr** %occr, align 8, !dbg !10552
  %deleted_p = getelementptr inbounds %struct.occr, %struct.occr* %145, i32 0, i32 2, !dbg !10553
  store i8 1, i8* %deleted_p, align 8, !dbg !10554
  store i32 1, i32* %changed, align 4, !dbg !10555
  %146 = load i32, i32* @gcse_subst_count, align 4, !dbg !10556
  %inc214 = add nsw i32 %146, 1, !dbg !10556
  store i32 %inc214, i32* @gcse_subst_count, align 4, !dbg !10556
  %147 = load i32, i32* %insn_inserted_p, align 4, !dbg !10557
  %tobool215 = icmp ne i32 %147, 0, !dbg !10557
  br i1 %tobool215, label %if.end219, label %if.then216, !dbg !10559

if.then216:                                       ; preds = %if.end206
  %148 = load %struct.expr**, %struct.expr*** %index_map, align 8, !dbg !10560
  %149 = load i32, i32* %i, align 4, !dbg !10562
  %idxprom217 = zext i32 %149 to i64, !dbg !10560
  %arrayidx218 = getelementptr inbounds %struct.expr*, %struct.expr** %148, i64 %idxprom217, !dbg !10560
  %150 = load %struct.expr*, %struct.expr** %arrayidx218, align 8, !dbg !10560
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10563
  call void @insert_insn_end_basic_block(%struct.expr* %150, %struct.basic_block_def* %151, i32 0), !dbg !10564
  store i32 1, i32* %insn_inserted_p, align 4, !dbg !10565
  br label %if.end219, !dbg !10566

if.end219:                                        ; preds = %if.then216, %if.end206
  br label %if.end220, !dbg !10567

if.end220:                                        ; preds = %if.end219, %if.end134
  br label %for.inc221, !dbg !10568

for.inc221:                                       ; preds = %if.end220, %if.then133, %if.then119
  %152 = load i32, i32* %j, align 4, !dbg !10569
  %inc222 = add i32 %152, 1, !dbg !10569
  store i32 %inc222, i32* %j, align 4, !dbg !10569
  br label %for.cond107, !dbg !10570, !llvm.loop !10571

for.end223:                                       ; preds = %cond.end112
  br label %if.end224, !dbg !10573

if.end224:                                        ; preds = %for.end223, %for.body93
  br label %for.inc225, !dbg !10574

for.inc225:                                       ; preds = %if.end224
  %153 = load i32, i32* %i, align 4, !dbg !10575
  %inc226 = add i32 %153, 1, !dbg !10575
  store i32 %inc226, i32* %i, align 4, !dbg !10575
  br label %for.cond86, !dbg !10576, !llvm.loop !10577

for.end227:                                       ; preds = %for.cond86
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %domby), !dbg !10579
  br label %for.inc228, !dbg !10580

for.inc228:                                       ; preds = %for.end227, %if.then84
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10380
  %next_bb229 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %154, i32 0, i32 6, !dbg !10380
  %155 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb229, align 8, !dbg !10380
  store %struct.basic_block_def* %155, %struct.basic_block_def** %bb, align 8, !dbg !10380
  br label %for.cond12, !dbg !10380, !llvm.loop !10581

for.end230:                                       ; preds = %for.cond12
  %156 = load %struct.expr**, %struct.expr*** %index_map, align 8, !dbg !10583
  %157 = bitcast %struct.expr** %156 to i8*, !dbg !10583
  call void @free(i8* %157), !dbg !10584
  %158 = load i32, i32* %changed, align 4, !dbg !10585
  ret i32 %158, !dbg !10586
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_code_hoist_mem() #0 !dbg !10587 {
entry:
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !10588
  %1 = bitcast %struct.simple_bitmap_def** %0 to i8*, !dbg !10588
  call void @free(i8* %1), !dbg !10588
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !10589
  %3 = bitcast %struct.simple_bitmap_def** %2 to i8*, !dbg !10589
  call void @free(i8* %3), !dbg !10589
  %4 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @comp, align 8, !dbg !10590
  %5 = bitcast %struct.simple_bitmap_def** %4 to i8*, !dbg !10590
  call void @free(i8* %5), !dbg !10590
  %6 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbein, align 8, !dbg !10591
  %7 = bitcast %struct.simple_bitmap_def** %6 to i8*, !dbg !10591
  call void @free(i8* %7), !dbg !10591
  %8 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbeout, align 8, !dbg !10592
  %9 = bitcast %struct.simple_bitmap_def** %8 to i8*, !dbg !10592
  call void @free(i8* %9), !dbg !10592
  %10 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_exprs, align 8, !dbg !10593
  %11 = bitcast %struct.simple_bitmap_def** %10 to i8*, !dbg !10593
  call void @free(i8* %11), !dbg !10593
  %12 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transpout, align 8, !dbg !10594
  %13 = bitcast %struct.simple_bitmap_def** %12 to i8*, !dbg !10594
  call void @free(i8* %13), !dbg !10594
  call void @free_dominance_info(i32 1), !dbg !10595
  ret void, !dbg !10596
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_transpout() #0 !dbg !10597 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %expr = alloca %struct.expr*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10598, metadata !DIExpression()), !dbg !10599
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10600, metadata !DIExpression()), !dbg !10601
  call void @llvm.dbg.declare(metadata %struct.expr** %expr, metadata !10602, metadata !DIExpression()), !dbg !10603
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transpout, align 8, !dbg !10604
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10605
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !10605
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10605
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10605
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !10605
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !10605
  call void @sbitmap_vector_ones(%struct.simple_bitmap_def** %0, i32 %3), !dbg !10606
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10607
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !10607
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !10607
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !10607
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !10607
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10607
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 6, !dbg !10607
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !10607
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !10607
  br label %for.cond, !dbg !10607

for.cond:                                         ; preds = %for.inc36, %entry
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10609
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10609
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !10609
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !10609
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !10609
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !10609
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10609
  %cmp = icmp ne %struct.basic_block_def* %8, %11, !dbg !10609
  br i1 %cmp, label %for.body, label %for.end38, !dbg !10607

for.body:                                         ; preds = %for.cond
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10611
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 7, !dbg !10611
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !10611
  %13 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !10611
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %13, i32 0, i32 1, !dbg !10611
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !10611
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !10611
  %bf.load = load i32, i32* %15, align 8, !dbg !10611
  %bf.clear = and i32 %bf.load, 65535, !dbg !10611
  %cmp5 = icmp eq i32 %bf.clear, 10, !dbg !10611
  br i1 %cmp5, label %if.end, label %if.then, !dbg !10614

if.then:                                          ; preds = %for.body
  br label %for.inc36, !dbg !10615

if.end:                                           ; preds = %for.body
  store i32 0, i32* %i, align 4, !dbg !10616
  br label %for.cond6, !dbg !10618

for.cond6:                                        ; preds = %for.inc34, %if.end
  %16 = load i32, i32* %i, align 4, !dbg !10619
  %17 = load i32, i32* getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 1), align 8, !dbg !10621
  %cmp7 = icmp ult i32 %16, %17, !dbg !10622
  br i1 %cmp7, label %for.body8, label %for.end35, !dbg !10623

for.body8:                                        ; preds = %for.cond6
  %18 = load %struct.expr**, %struct.expr*** getelementptr inbounds (%struct.hash_table_d, %struct.hash_table_d* @expr_hash_table, i32 0, i32 0), align 8, !dbg !10624
  %19 = load i32, i32* %i, align 4, !dbg !10626
  %idxprom = zext i32 %19 to i64, !dbg !10627
  %arrayidx = getelementptr inbounds %struct.expr*, %struct.expr** %18, i64 %idxprom, !dbg !10627
  %20 = load %struct.expr*, %struct.expr** %arrayidx, align 8, !dbg !10627
  store %struct.expr* %20, %struct.expr** %expr, align 8, !dbg !10628
  br label %for.cond9, !dbg !10629

for.cond9:                                        ; preds = %for.inc, %for.body8
  %21 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10630
  %tobool = icmp ne %struct.expr* %21, null, !dbg !10632
  br i1 %tobool, label %for.body10, label %for.end, !dbg !10632

for.body10:                                       ; preds = %for.cond9
  %22 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10633
  %expr11 = getelementptr inbounds %struct.expr, %struct.expr* %22, i32 0, i32 0, !dbg !10633
  %23 = load %struct.rtx_def*, %struct.rtx_def** %expr11, align 8, !dbg !10633
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !10633
  %bf.load12 = load i32, i32* %24, align 8, !dbg !10633
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !10633
  %cmp14 = icmp eq i32 %bf.clear13, 43, !dbg !10633
  br i1 %cmp14, label %if.then15, label %if.end33, !dbg !10635

if.then15:                                        ; preds = %for.body10
  %25 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10636
  %expr16 = getelementptr inbounds %struct.expr, %struct.expr* %25, i32 0, i32 0, !dbg !10636
  %26 = load %struct.rtx_def*, %struct.rtx_def** %expr16, align 8, !dbg !10636
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !10636
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10636
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !10636
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !10636
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10636
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !10636
  %bf.load18 = load i32, i32* %28, align 8, !dbg !10636
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !10636
  %cmp20 = icmp eq i32 %bf.clear19, 45, !dbg !10639
  br i1 %cmp20, label %land.lhs.true, label %if.end30, !dbg !10640

land.lhs.true:                                    ; preds = %if.then15
  %29 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10641
  %expr21 = getelementptr inbounds %struct.expr, %struct.expr* %29, i32 0, i32 0, !dbg !10641
  %30 = load %struct.rtx_def*, %struct.rtx_def** %expr21, align 8, !dbg !10641
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !10641
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !10641
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 0, !dbg !10641
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !10641
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !10641
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !10641
  %bf.load26 = load i32, i32* %32, align 8, !dbg !10641
  %bf.lshr = lshr i32 %bf.load26, 26, !dbg !10641
  %bf.clear27 = and i32 %bf.lshr, 1, !dbg !10641
  %tobool28 = icmp ne i32 %bf.clear27, 0, !dbg !10641
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !10642

if.then29:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !10643

if.end30:                                         ; preds = %land.lhs.true, %if.then15
  %33 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transpout, align 8, !dbg !10644
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10645
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 9, !dbg !10646
  %35 = load i32, i32* %index, align 8, !dbg !10646
  %idxprom31 = sext i32 %35 to i64, !dbg !10644
  %arrayidx32 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %33, i64 %idxprom31, !dbg !10644
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx32, align 8, !dbg !10644
  %37 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10647
  %bitmap_index = getelementptr inbounds %struct.expr, %struct.expr* %37, i32 0, i32 1, !dbg !10648
  %38 = load i32, i32* %bitmap_index, align 8, !dbg !10648
  call void @RESET_BIT(%struct.simple_bitmap_def* %36, i32 %38), !dbg !10649
  br label %if.end33, !dbg !10650

if.end33:                                         ; preds = %if.end30, %for.body10
  br label %for.inc, !dbg !10633

for.inc:                                          ; preds = %if.end33, %if.then29
  %39 = load %struct.expr*, %struct.expr** %expr, align 8, !dbg !10651
  %next_same_hash = getelementptr inbounds %struct.expr, %struct.expr* %39, i32 0, i32 2, !dbg !10652
  %40 = load %struct.expr*, %struct.expr** %next_same_hash, align 8, !dbg !10652
  store %struct.expr* %40, %struct.expr** %expr, align 8, !dbg !10653
  br label %for.cond9, !dbg !10654, !llvm.loop !10655

for.end:                                          ; preds = %for.cond9
  br label %for.inc34, !dbg !10656

for.inc34:                                        ; preds = %for.end
  %41 = load i32, i32* %i, align 4, !dbg !10657
  %inc = add i32 %41, 1, !dbg !10657
  store i32 %inc, i32* %i, align 4, !dbg !10657
  br label %for.cond6, !dbg !10658, !llvm.loop !10659

for.end35:                                        ; preds = %for.cond6
  br label %for.inc36, !dbg !10661

for.inc36:                                        ; preds = %for.end35, %if.then
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10609
  %next_bb37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 6, !dbg !10609
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb37, align 8, !dbg !10609
  store %struct.basic_block_def* %43, %struct.basic_block_def** %bb, align 8, !dbg !10609
  br label %for.cond, !dbg !10609, !llvm.loop !10662

for.end38:                                        ; preds = %for.cond
  ret void, !dbg !10664
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_code_hoist_vbeinout() #0 !dbg !10665 {
entry:
  %changed = alloca i32, align 4
  %passes = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %changed, metadata !10666, metadata !DIExpression()), !dbg !10667
  call void @llvm.dbg.declare(metadata i32* %passes, metadata !10668, metadata !DIExpression()), !dbg !10669
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10670, metadata !DIExpression()), !dbg !10671
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbeout, align 8, !dbg !10672
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10673
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !10673
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10673
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10673
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !10673
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !10673
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %0, i32 %3), !dbg !10674
  %4 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbein, align 8, !dbg !10675
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10676
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !10676
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !10676
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !10676
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 5, !dbg !10676
  %7 = load i32, i32* %x_last_basic_block3, align 8, !dbg !10676
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %4, i32 %7), !dbg !10677
  store i32 0, i32* %passes, align 4, !dbg !10678
  store i32 1, i32* %changed, align 4, !dbg !10679
  br label %while.cond, !dbg !10680

while.cond:                                       ; preds = %for.end, %entry
  %8 = load i32, i32* %changed, align 4, !dbg !10681
  %tobool = icmp ne i32 %8, 0, !dbg !10680
  br i1 %tobool, label %while.body, label %while.end, !dbg !10680

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4, !dbg !10682
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10684
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !10684
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !10684
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !10684
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !10684
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10684
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 5, !dbg !10684
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !10684
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !10684
  br label %for.cond, !dbg !10684

for.cond:                                         ; preds = %for.inc, %while.body
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10686
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10686
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !10686
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !10686
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !10686
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 0, !dbg !10686
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10686
  %cmp = icmp ne %struct.basic_block_def* %13, %16, !dbg !10686
  br i1 %cmp, label %for.body, label %for.end, !dbg !10684

for.body:                                         ; preds = %for.cond
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10688
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 6, !dbg !10691
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !10691
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10692
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !10692
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !10692
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !10692
  %x_exit_block_ptr10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 1, !dbg !10692
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr10, align 8, !dbg !10692
  %cmp11 = icmp ne %struct.basic_block_def* %18, %21, !dbg !10693
  br i1 %cmp11, label %if.then, label %if.end, !dbg !10694

if.then:                                          ; preds = %for.body
  %22 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbeout, align 8, !dbg !10695
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10696
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !10697
  %24 = load i32, i32* %index, align 8, !dbg !10697
  %idxprom = sext i32 %24 to i64, !dbg !10695
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %22, i64 %idxprom, !dbg !10695
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !10695
  %26 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbein, align 8, !dbg !10698
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10699
  %index12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 9, !dbg !10700
  %28 = load i32, i32* %index12, align 8, !dbg !10700
  call void @sbitmap_intersection_of_succs(%struct.simple_bitmap_def* %25, %struct.simple_bitmap_def** %26, i32 %28), !dbg !10701
  br label %if.end, !dbg !10701

if.end:                                           ; preds = %if.then, %for.body
  %29 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbein, align 8, !dbg !10702
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10703
  %index13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !10704
  %31 = load i32, i32* %index13, align 8, !dbg !10704
  %idxprom14 = sext i32 %31 to i64, !dbg !10702
  %arrayidx15 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %29, i64 %idxprom14, !dbg !10702
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx15, align 8, !dbg !10702
  %33 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @antloc, align 8, !dbg !10705
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10706
  %index16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 9, !dbg !10707
  %35 = load i32, i32* %index16, align 8, !dbg !10707
  %idxprom17 = sext i32 %35 to i64, !dbg !10705
  %arrayidx18 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %33, i64 %idxprom17, !dbg !10705
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx18, align 8, !dbg !10705
  %37 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @hoist_vbeout, align 8, !dbg !10708
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10709
  %index19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 9, !dbg !10710
  %39 = load i32, i32* %index19, align 8, !dbg !10710
  %idxprom20 = sext i32 %39 to i64, !dbg !10708
  %arrayidx21 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %37, i64 %idxprom20, !dbg !10708
  %40 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx21, align 8, !dbg !10708
  %41 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !10711
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10712
  %index22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 9, !dbg !10713
  %43 = load i32, i32* %index22, align 8, !dbg !10713
  %idxprom23 = sext i32 %43 to i64, !dbg !10711
  %arrayidx24 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %41, i64 %idxprom23, !dbg !10711
  %44 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx24, align 8, !dbg !10711
  %call = call zeroext i8 @sbitmap_a_or_b_and_c_cg(%struct.simple_bitmap_def* %32, %struct.simple_bitmap_def* %36, %struct.simple_bitmap_def* %40, %struct.simple_bitmap_def* %44), !dbg !10714
  %conv = zext i8 %call to i32, !dbg !10714
  %45 = load i32, i32* %changed, align 4, !dbg !10715
  %or = or i32 %45, %conv, !dbg !10715
  store i32 %or, i32* %changed, align 4, !dbg !10715
  br label %for.inc, !dbg !10716

for.inc:                                          ; preds = %if.end
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10686
  %prev_bb25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 5, !dbg !10686
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb25, align 8, !dbg !10686
  store %struct.basic_block_def* %47, %struct.basic_block_def** %bb, align 8, !dbg !10686
  br label %for.cond, !dbg !10686, !llvm.loop !10717

for.end:                                          ; preds = %for.cond
  %48 = load i32, i32* %passes, align 4, !dbg !10719
  %inc = add nsw i32 %48, 1, !dbg !10719
  store i32 %inc, i32* %passes, align 4, !dbg !10719
  br label %while.cond, !dbg !10680, !llvm.loop !10720

while.end:                                        ; preds = %while.cond
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10722
  %tobool26 = icmp ne %struct._IO_FILE* %49, null, !dbg !10722
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !10724

if.then27:                                        ; preds = %while.end
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10725
  %51 = load i32, i32* %passes, align 4, !dbg !10726
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.50, i64 0, i64 0), i32 %51), !dbg !10727
  br label %if.end29, !dbg !10727

if.end29:                                         ; preds = %if.then27, %while.end
  ret void, !dbg !10728
}

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local void @sbitmap_intersection_of_succs(%struct.simple_bitmap_def*, %struct.simple_bitmap_def**, i32) #2

declare dso_local zeroext i8 @sbitmap_a_or_b_and_c_cg(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare dso_local %struct.VEC_basic_block_heap* @get_dominated_by(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def** %ptr) #0 !dbg !10729 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !10735, metadata !DIExpression()), !dbg !10736
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10737, metadata !DIExpression()), !dbg !10736
  store %struct.basic_block_def** %ptr, %struct.basic_block_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %ptr.addr, metadata !10738, metadata !DIExpression()), !dbg !10736
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !10739
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !10739
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !10739

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !10739
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !10739
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !10739
  %3 = load i32, i32* %num, align 8, !dbg !10739
  %cmp = icmp ult i32 %1, %3, !dbg !10739
  br i1 %cmp, label %if.then, label %if.else, !dbg !10736

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !10741
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !10741
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !10741
  %idxprom = zext i32 %5 to i64, !dbg !10741
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !10741
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !10741
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !10741
  store %struct.basic_block_def* %6, %struct.basic_block_def** %7, align 8, !dbg !10741
  store i32 1, i32* %retval, align 4, !dbg !10741
  br label %return, !dbg !10741

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !10743
  store %struct.basic_block_def* null, %struct.basic_block_def** %8, align 8, !dbg !10743
  store i32 0, i32* %retval, align 4, !dbg !10743
  br label %return, !dbg !10743

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !10736
  ret i32 %9, !dbg !10736
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @hoist_expr_reaches_here_p(%struct.basic_block_def* %expr_bb, i32 %expr_index, %struct.basic_block_def* %bb, i8* %visited) #0 !dbg !10745 {
entry:
  %expr_bb.addr = alloca %struct.basic_block_def*, align 8
  %expr_index.addr = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %visited.addr = alloca i8*, align 8
  %pred = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %visited_allocated_locally = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %pred_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %expr_bb, %struct.basic_block_def** %expr_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %expr_bb.addr, metadata !10748, metadata !DIExpression()), !dbg !10749
  store i32 %expr_index, i32* %expr_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %expr_index.addr, metadata !10750, metadata !DIExpression()), !dbg !10751
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10752, metadata !DIExpression()), !dbg !10753
  store i8* %visited, i8** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %visited.addr, metadata !10754, metadata !DIExpression()), !dbg !10755
  call void @llvm.dbg.declare(metadata %struct.edge_def** %pred, metadata !10756, metadata !DIExpression()), !dbg !10757
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10758, metadata !DIExpression()), !dbg !10759
  call void @llvm.dbg.declare(metadata i32* %visited_allocated_locally, metadata !10760, metadata !DIExpression()), !dbg !10761
  store i32 0, i32* %visited_allocated_locally, align 4, !dbg !10761
  %0 = load i8*, i8** %visited.addr, align 8, !dbg !10762
  %cmp = icmp eq i8* %0, null, !dbg !10764
  br i1 %cmp, label %if.then, label %if.end, !dbg !10765

if.then:                                          ; preds = %entry
  store i32 1, i32* %visited_allocated_locally, align 4, !dbg !10766
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10768
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !10768
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10768
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10768
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !10768
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !10768
  %conv = sext i32 %3 to i64, !dbg !10768
  %call = call i8* @xcalloc(i64 %conv, i64 1), !dbg !10768
  store i8* %call, i8** %visited.addr, align 8, !dbg !10769
  br label %if.end, !dbg !10770

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10771
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 0, !dbg !10771
  %call1 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10771
  %5 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10771
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %5, i32 0, i32 0, !dbg !10771
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call1, 0, !dbg !10771
  store i32 %7, i32* %6, align 8, !dbg !10771
  %8 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %5, i32 0, i32 1, !dbg !10771
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call1, 1, !dbg !10771
  store %struct.VEC_edge_gc** %9, %struct.VEC_edge_gc*** %8, align 8, !dbg !10771
  %10 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10771
  %11 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10771
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !10771
  br label %for.cond, !dbg !10771

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10773
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 0, !dbg !10773
  %14 = load i32, i32* %13, align 8, !dbg !10773
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 1, !dbg !10773
  %16 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %15, align 8, !dbg !10773
  %call2 = call zeroext i8 @ei_cond(i32 %14, %struct.VEC_edge_gc** %16, %struct.edge_def** %pred), !dbg !10773
  %tobool = icmp ne i8 %call2, 0, !dbg !10771
  br i1 %tobool, label %for.body, label %for.end, !dbg !10771

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred_bb, metadata !10775, metadata !DIExpression()), !dbg !10777
  %17 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10778
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 0, !dbg !10779
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10779
  store %struct.basic_block_def* %18, %struct.basic_block_def** %pred_bb, align 8, !dbg !10777
  %19 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10780
  %src3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 0, !dbg !10782
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %src3, align 8, !dbg !10782
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10783
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !10783
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !10783
  %22 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !10783
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %22, i32 0, i32 0, !dbg !10783
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10783
  %cmp6 = icmp eq %struct.basic_block_def* %20, %23, !dbg !10784
  br i1 %cmp6, label %if.then8, label %if.else, !dbg !10785

if.then8:                                         ; preds = %for.body
  br label %for.end, !dbg !10786

if.else:                                          ; preds = %for.body
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10787
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %expr_bb.addr, align 8, !dbg !10789
  %cmp9 = icmp eq %struct.basic_block_def* %24, %25, !dbg !10790
  br i1 %cmp9, label %if.then11, label %if.else12, !dbg !10791

if.then11:                                        ; preds = %if.else
  br label %for.inc, !dbg !10792

if.else12:                                        ; preds = %if.else
  %26 = load i8*, i8** %visited.addr, align 8, !dbg !10793
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10795
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 9, !dbg !10796
  %28 = load i32, i32* %index, align 8, !dbg !10796
  %idxprom = sext i32 %28 to i64, !dbg !10793
  %arrayidx = getelementptr inbounds i8, i8* %26, i64 %idxprom, !dbg !10793
  %29 = load i8, i8* %arrayidx, align 1, !dbg !10793
  %tobool13 = icmp ne i8 %29, 0, !dbg !10793
  br i1 %tobool13, label %if.then14, label %if.else15, !dbg !10797

if.then14:                                        ; preds = %if.else12
  br label %for.inc, !dbg !10798

if.else15:                                        ; preds = %if.else12
  %30 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @comp, align 8, !dbg !10799
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10799
  %index16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 9, !dbg !10799
  %32 = load i32, i32* %index16, align 8, !dbg !10799
  %idxprom17 = sext i32 %32 to i64, !dbg !10799
  %arrayidx18 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %30, i64 %idxprom17, !dbg !10799
  %33 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx18, align 8, !dbg !10799
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %33, i32 0, i32 3, !dbg !10799
  %34 = load i32, i32* %expr_index.addr, align 4, !dbg !10799
  %div = udiv i32 %34, 64, !dbg !10799
  %idxprom19 = zext i32 %div to i64, !dbg !10799
  %arrayidx20 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom19, !dbg !10799
  %35 = load i64, i64* %arrayidx20, align 8, !dbg !10799
  %36 = load i32, i32* %expr_index.addr, align 4, !dbg !10799
  %rem = urem i32 %36, 64, !dbg !10799
  %sh_prom = zext i32 %rem to i64, !dbg !10799
  %shr = lshr i64 %35, %sh_prom, !dbg !10799
  %and = and i64 %shr, 1, !dbg !10799
  %tobool21 = icmp ne i64 %and, 0, !dbg !10799
  br i1 %tobool21, label %if.then22, label %if.else23, !dbg !10801

if.then22:                                        ; preds = %if.else15
  br label %for.end, !dbg !10802

if.else23:                                        ; preds = %if.else15
  %37 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @transp, align 8, !dbg !10803
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10803
  %index24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 9, !dbg !10803
  %39 = load i32, i32* %index24, align 8, !dbg !10803
  %idxprom25 = sext i32 %39 to i64, !dbg !10803
  %arrayidx26 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %37, i64 %idxprom25, !dbg !10803
  %40 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx26, align 8, !dbg !10803
  %elms27 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %40, i32 0, i32 3, !dbg !10803
  %41 = load i32, i32* %expr_index.addr, align 4, !dbg !10803
  %div28 = udiv i32 %41, 64, !dbg !10803
  %idxprom29 = zext i32 %div28 to i64, !dbg !10803
  %arrayidx30 = getelementptr inbounds [1 x i64], [1 x i64]* %elms27, i64 0, i64 %idxprom29, !dbg !10803
  %42 = load i64, i64* %arrayidx30, align 8, !dbg !10803
  %43 = load i32, i32* %expr_index.addr, align 4, !dbg !10803
  %rem31 = urem i32 %43, 64, !dbg !10803
  %sh_prom32 = zext i32 %rem31 to i64, !dbg !10803
  %shr33 = lshr i64 %42, %sh_prom32, !dbg !10803
  %and34 = and i64 %shr33, 1, !dbg !10803
  %tobool35 = icmp ne i64 %and34, 0, !dbg !10803
  br i1 %tobool35, label %if.else37, label %if.then36, !dbg !10805

if.then36:                                        ; preds = %if.else23
  br label %for.end, !dbg !10806

if.else37:                                        ; preds = %if.else23
  %44 = load i8*, i8** %visited.addr, align 8, !dbg !10807
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10809
  %index38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 9, !dbg !10810
  %46 = load i32, i32* %index38, align 8, !dbg !10810
  %idxprom39 = sext i32 %46 to i64, !dbg !10807
  %arrayidx40 = getelementptr inbounds i8, i8* %44, i64 %idxprom39, !dbg !10807
  store i8 1, i8* %arrayidx40, align 1, !dbg !10811
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %expr_bb.addr, align 8, !dbg !10812
  %48 = load i32, i32* %expr_index.addr, align 4, !dbg !10814
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !10815
  %50 = load i8*, i8** %visited.addr, align 8, !dbg !10816
  %call41 = call i32 @hoist_expr_reaches_here_p(%struct.basic_block_def* %47, i32 %48, %struct.basic_block_def* %49, i8* %50), !dbg !10817
  %tobool42 = icmp ne i32 %call41, 0, !dbg !10817
  br i1 %tobool42, label %if.end44, label %if.then43, !dbg !10818

if.then43:                                        ; preds = %if.else37
  br label %for.end, !dbg !10819

if.end44:                                         ; preds = %if.else37
  br label %if.end45

if.end45:                                         ; preds = %if.end44
  br label %if.end46

if.end46:                                         ; preds = %if.end45
  br label %if.end47

if.end47:                                         ; preds = %if.end46
  br label %if.end48

if.end48:                                         ; preds = %if.end47
  br label %if.end49

if.end49:                                         ; preds = %if.end48
  br label %for.inc, !dbg !10820

for.inc:                                          ; preds = %if.end49, %if.then14, %if.then11
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10773
  br label %for.cond, !dbg !10773, !llvm.loop !10821

for.end:                                          ; preds = %if.then43, %if.then36, %if.then22, %if.then8, %for.cond
  %51 = load i32, i32* %visited_allocated_locally, align 4, !dbg !10823
  %tobool50 = icmp ne i32 %51, 0, !dbg !10823
  br i1 %tobool50, label %if.then51, label %if.end52, !dbg !10825

if.then51:                                        ; preds = %for.end
  %52 = load i8*, i8** %visited.addr, align 8, !dbg !10826
  call void @free(i8* %52), !dbg !10827
  br label %if.end52, !dbg !10827

if.end52:                                         ; preds = %if.then51, %for.end
  %53 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10828
  %cmp53 = icmp eq %struct.edge_def* %53, null, !dbg !10829
  %conv54 = zext i1 %cmp53 to i32, !dbg !10829
  ret i32 %conv54, !dbg !10830
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !10831 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !10835, metadata !DIExpression()), !dbg !10836
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !10837
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !10837
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !10837
  br i1 %tobool, label %if.then, label %if.end, !dbg !10836

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !10837
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !10837
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !10837
  call void @free(i8* %4), !dbg !10837
  br label %if.end, !dbg !10837

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !10836
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !10836
  ret void, !dbg !10836
}

declare dso_local void @free_dominance_info(i32) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!136}
!llvm.module.flags = !{!3303, !3304, !3305}
!llvm.ident = !{!3306}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "can_copy_init_p", scope: !2, file: !3, line: 582, type: !6, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "can_copy_p", scope: !3, file: !3, line: 580, type: !4, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3 = !DIFile(filename: "gcse.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !7}
!6 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!7 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !8, line: 7, baseType: !9, size: 32, elements: !10)
!8 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!9 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135}
!11 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!12 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!13 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!14 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!15 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!16 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!17 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!18 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!19 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!20 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!21 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!22 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!23 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!24 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!25 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!26 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!27 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!28 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!29 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!30 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!31 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!32 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!33 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!34 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!35 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!36 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!37 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!38 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!39 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!40 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!41 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!42 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!43 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!44 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!45 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!46 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!47 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!48 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!49 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!50 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!51 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!52 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!53 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!54 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!55 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!56 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!57 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!58 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!59 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!60 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!61 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!62 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!63 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!64 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!65 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!66 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!67 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!68 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!69 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!70 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!71 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!72 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!73 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!74 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!75 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!76 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!77 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!78 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!79 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!80 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!81 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!82 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!83 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!84 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!85 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!86 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!87 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!88 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!89 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!90 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!91 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!92 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!93 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!94 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!95 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!96 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!97 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!134 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!135 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!136 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !137, retainedTypes: !1883, globals: !3127, splitDebugInlining: false, nameTableKind: None)
!137 = !{!7, !138, !145, !151, !156, !161, !180, !187, !194, !388, !531, !538, !714, !736, !778, !788, !1662, !1785, !1819, !1834, !1848, !1852, !1857, !1863, !1879}
!138 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !139, line: 30, baseType: !9, size: 32, elements: !140)
!139 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!140 = !{!141, !142, !143, !144}
!141 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!142 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!143 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!144 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !146, line: 363, baseType: !9, size: 32, elements: !147)
!146 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149, !150}
!148 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!150 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!151 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !146, line: 355, baseType: !9, size: 32, elements: !152)
!152 = !{!153, !154, !155}
!153 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!156 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !157, line: 474, baseType: !9, size: 32, elements: !158)
!157 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!158 = !{!159, !160}
!159 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!160 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!161 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !162, line: 280, baseType: !9, size: 32, elements: !163)
!162 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!163 = !{!164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179}
!164 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!180 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !162, line: 1817, baseType: !9, size: 32, elements: !181)
!181 = !{!182, !183, !184, !185, !186}
!182 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!183 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!184 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!187 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !162, line: 1805, baseType: !9, size: 32, elements: !188)
!188 = !{!189, !190, !191, !192, !193}
!189 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!190 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!191 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!194 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !162, line: 39, baseType: !9, size: 32, elements: !195)
!195 = !{!196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387}
!196 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!197 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!198 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!199 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!200 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!201 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!202 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!203 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!204 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!205 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!206 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!207 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!208 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!209 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!210 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!211 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!212 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!213 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!214 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!215 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!216 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!217 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!218 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!219 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!220 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!221 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!222 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!223 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!224 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!225 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!226 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!227 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!228 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!229 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!230 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!231 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!232 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!233 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!234 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!235 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!236 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!238 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!239 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!240 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!241 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!242 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!243 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!244 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!245 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!246 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!247 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!248 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!249 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!250 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!251 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!252 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!253 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!254 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!255 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!256 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!257 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!258 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!259 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!260 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!261 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!262 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!263 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!264 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!265 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!266 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!267 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!268 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!269 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!270 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!271 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!272 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!273 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!274 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!275 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!276 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!277 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!278 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!279 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!280 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!281 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!282 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!283 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!284 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!285 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!286 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!287 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!288 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!289 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!290 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!291 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!292 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!293 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!294 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!295 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!296 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!297 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!298 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!299 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!300 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!301 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!302 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!303 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!304 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!305 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!306 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!307 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!308 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!309 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!310 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!311 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!312 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!313 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!314 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!315 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!316 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!317 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!318 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!319 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!320 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!321 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!322 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!323 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!324 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!325 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!326 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!327 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!328 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!329 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!330 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!331 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!332 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!333 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!334 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!335 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!336 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!337 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!338 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!339 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!340 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!341 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!342 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!343 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!344 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!345 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!346 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!347 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!348 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!360 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!361 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!362 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!363 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!364 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!365 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!381 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!382 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!383 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!384 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!385 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!386 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!387 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!388 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !389, line: 45, baseType: !9, size: 32, elements: !390)
!389 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!390 = !{!391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530}
!391 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!392 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!393 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!394 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!395 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!396 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!397 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!398 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!399 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!400 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!401 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!402 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!403 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!404 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!405 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!406 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!407 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!408 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!409 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!410 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!411 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!412 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!413 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!414 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!415 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!416 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!417 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!418 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!419 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!420 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!421 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!422 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!423 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!424 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!425 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!426 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!427 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!428 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!429 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!430 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!431 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!432 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!433 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!434 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!435 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!436 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!437 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!438 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!439 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!440 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!441 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!442 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!443 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!444 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!445 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!446 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!447 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!448 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!449 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!450 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!451 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!452 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!453 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!454 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!455 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!456 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!457 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!458 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!459 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!460 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!461 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!462 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!463 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!464 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!465 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!466 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!467 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!468 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!469 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!470 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!471 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!472 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!473 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!474 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!475 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!476 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!477 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!478 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!479 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!480 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!481 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!482 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!483 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!484 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!485 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!486 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!487 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!488 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!489 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!490 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!491 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!492 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!493 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!494 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!495 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!496 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!497 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!498 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!499 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!500 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!501 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!502 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!503 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!504 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!505 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!506 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!507 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!508 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!509 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!510 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!511 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!512 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!513 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!514 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!515 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!516 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!517 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!518 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!519 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!520 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!521 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!522 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!523 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!524 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!525 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!526 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!527 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!528 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!529 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!530 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!531 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !532, line: 104, baseType: !9, size: 32, elements: !533)
!532 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!533 = !{!534, !535, !536, !537}
!534 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!535 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!536 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!537 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!538 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !539, line: 74, baseType: !9, size: 32, elements: !540)
!539 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!540 = !{!541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713}
!541 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!603 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!604 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!605 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!606 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!607 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!608 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!609 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!610 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!611 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!612 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!613 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!614 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!615 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!616 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!617 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!618 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!619 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!620 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!621 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!622 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!623 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!624 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!625 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!626 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!627 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!628 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!629 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!630 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!631 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!632 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!633 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!634 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!635 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!636 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!637 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!638 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!639 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!640 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!641 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!642 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!643 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!644 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!645 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!646 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!647 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!648 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!649 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!650 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!651 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!652 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!653 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!654 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!655 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!656 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!657 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!658 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!659 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!660 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!661 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!662 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!663 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!664 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!665 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!666 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!667 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!668 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!669 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!670 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!671 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!672 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!673 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!674 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!675 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!676 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!677 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!678 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!679 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!680 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!681 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!682 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!683 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!684 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!685 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!686 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!687 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!688 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!689 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!690 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!691 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!692 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!693 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!694 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!695 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!696 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!697 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!698 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!699 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!700 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!701 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!702 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!703 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!704 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!705 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!706 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!707 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!708 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!709 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!710 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!711 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!712 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!713 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!714 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !715, line: 36, baseType: !9, size: 32, elements: !716)
!715 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!716 = !{!717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735}
!717 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!718 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!719 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!720 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!721 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!722 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!723 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!724 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!725 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!726 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!727 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!728 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!729 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!730 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!731 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!732 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!733 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!734 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!735 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!736 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !737, line: 27, baseType: !9, size: 32, elements: !738)
!737 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!738 = !{!739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777}
!739 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!740 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!741 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!742 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!743 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!744 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!745 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!746 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!747 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!748 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!749 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!750 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!751 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!752 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!753 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!754 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!755 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!756 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!757 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!758 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!759 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!760 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!761 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!762 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!763 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!764 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!765 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!766 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!767 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!768 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!769 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!770 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!771 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!772 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!773 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!774 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!775 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!776 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!777 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!778 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_changeable_flags", file: !779, line: 463, baseType: !9, size: 32, elements: !780)
!779 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!780 = !{!781, !782, !783, !784, !785, !786, !787}
!781 = !DIEnumerator(name: "DF_LR_RUN_DCE", value: 1, isUnsigned: true)
!782 = !DIEnumerator(name: "DF_NO_HARD_REGS", value: 2, isUnsigned: true)
!783 = !DIEnumerator(name: "DF_EQ_NOTES", value: 4, isUnsigned: true)
!784 = !DIEnumerator(name: "DF_NO_REGS_EVER_LIVE", value: 8, isUnsigned: true)
!785 = !DIEnumerator(name: "DF_NO_INSN_RESCAN", value: 16, isUnsigned: true)
!786 = !DIEnumerator(name: "DF_DEFER_INSN_RESCAN", value: 32, isUnsigned: true)
!787 = !DIEnumerator(name: "DF_VERIFY_SCHEDULED", value: 64, isUnsigned: true)
!788 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !789, line: 723, baseType: !9, size: 32, elements: !790)
!789 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!790 = !{!791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661}
!791 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!792 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!793 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!794 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!795 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!796 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!797 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!798 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!799 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!800 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!801 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!802 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!803 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!804 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!805 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!806 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!807 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!808 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!809 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!810 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!811 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!812 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!813 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!814 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!815 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!816 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!817 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!818 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!819 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!820 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!821 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!822 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!823 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!824 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!825 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!826 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!827 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!828 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!829 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!830 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!831 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!832 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!833 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!834 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!835 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!836 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!837 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!838 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!839 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!840 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!841 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!842 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!843 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!844 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!845 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!846 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!847 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!848 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!849 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!850 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!851 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!852 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!853 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!854 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!855 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!856 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!857 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!858 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!859 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!860 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!861 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!862 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!863 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!864 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!865 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!866 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!867 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!868 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!869 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!870 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!871 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!872 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!873 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!874 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!875 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!876 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!877 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1465 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1466 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1467 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1468 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1469 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1470 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1471 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1472 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1473 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1474 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1475 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1476 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1477 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1478 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1479 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1480 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1481 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1482 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1483 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1484 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1485 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1486 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1487 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1488 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1489 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1490 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1491 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1492 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1493 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1494 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1495 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1496 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1497 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1498 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1499 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1500 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1501 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1502 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1503 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1504 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1505 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1506 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1507 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1508 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1509 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1510 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1511 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1512 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1513 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1514 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1515 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1516 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1517 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1518 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1519 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1520 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1521 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1522 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1523 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1524 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1525 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1526 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1527 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1528 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1529 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1530 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1531 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1532 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1533 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1534 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1535 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1536 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1537 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1538 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1539 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1540 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1541 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1542 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1543 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1544 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1545 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1546 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1547 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1548 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1549 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1550 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1551 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1552 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1553 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1554 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1555 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1556 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1557 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1558 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1559 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1560 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1561 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1562 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1563 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1564 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1565 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1566 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1567 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1568 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1569 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1570 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1571 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1572 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1573 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1574 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1575 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1576 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1577 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1578 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1579 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1580 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1581 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1582 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1583 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1584 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1585 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1586 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1587 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1588 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1589 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1590 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1591 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1592 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1593 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1594 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1595 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1596 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1597 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1598 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1599 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1600 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1601 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1602 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1603 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1604 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1605 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1606 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1607 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1608 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1609 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1610 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1611 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1612 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1613 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1614 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1615 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1616 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1617 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1618 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1619 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1620 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1621 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1622 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1623 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1624 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1625 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1626 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1627 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1628 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1629 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1630 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1631 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1632 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1633 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1634 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1635 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1636 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1637 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1638 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1639 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1640 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1641 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1642 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1643 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1644 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1645 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1646 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1647 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1648 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1649 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1650 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1651 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1652 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1653 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1654 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1655 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1656 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1657 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1658 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1659 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1660 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1661 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1662 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !1663, line: 82, baseType: !9, size: 32, elements: !1664)
!1663 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1664 = !{!1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784}
!1665 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!1666 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!1667 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!1668 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!1669 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!1670 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!1671 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!1672 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!1673 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!1674 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!1675 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!1676 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!1677 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!1678 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!1679 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!1680 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!1681 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!1682 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!1683 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!1684 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!1685 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!1686 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!1687 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!1688 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!1689 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!1690 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!1691 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!1692 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!1693 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!1694 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!1695 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!1696 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!1697 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!1698 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!1699 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!1700 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!1701 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!1702 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!1703 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!1704 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!1705 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!1706 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!1707 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!1708 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!1709 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!1710 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!1711 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!1712 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!1713 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!1714 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!1715 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!1716 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!1717 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!1718 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!1719 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!1720 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!1721 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!1722 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!1723 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!1724 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!1725 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!1726 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!1727 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!1728 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!1729 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!1730 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!1731 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!1732 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!1733 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!1734 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!1735 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!1736 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!1737 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!1738 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!1739 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!1740 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!1741 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!1742 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!1743 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!1744 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!1745 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!1746 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!1747 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!1748 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!1749 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!1750 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!1751 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!1752 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!1753 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!1754 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!1755 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!1756 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!1757 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!1758 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!1759 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!1760 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!1761 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!1762 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!1763 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!1764 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!1765 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!1766 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!1767 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!1768 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!1769 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!1770 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!1771 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!1772 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!1773 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!1774 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!1775 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!1776 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!1777 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!1778 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!1779 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!1780 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!1781 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!1782 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!1783 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!1784 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!1785 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !389, line: 836, baseType: !9, size: 32, elements: !1786)
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818}
!1787 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!1788 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!1789 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!1790 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!1791 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!1792 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!1793 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!1794 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!1795 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!1796 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!1797 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!1798 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!1799 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!1800 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!1801 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!1802 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!1803 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!1804 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!1805 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!1806 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!1807 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!1808 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!1809 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!1810 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!1811 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!1812 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!1813 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!1814 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!1815 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!1816 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!1817 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!1818 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!1819 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !389, line: 60, baseType: !9, size: 32, elements: !1820)
!1820 = !{!1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833}
!1821 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!1822 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!1823 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!1824 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!1825 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!1826 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!1827 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!1828 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!1829 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!1830 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!1831 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!1832 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!1833 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!1834 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !389, line: 1994, baseType: !9, size: 32, elements: !1835)
!1835 = !{!1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847}
!1836 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!1837 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!1838 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!1839 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!1840 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!1841 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!1842 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!1843 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!1844 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!1845 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!1846 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!1847 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!1848 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "fpmath_unit", file: !157, line: 2201, baseType: !9, size: 32, elements: !1849)
!1849 = !{!1850, !1851}
!1850 = !DIEnumerator(name: "FPMATH_387", value: 1, isUnsigned: true)
!1851 = !DIEnumerator(name: "FPMATH_SSE", value: 2, isUnsigned: true)
!1852 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !1853, line: 147, baseType: !9, size: 32, elements: !1854)
!1853 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1854 = !{!1855, !1856}
!1855 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!1856 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!1857 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_ref_class", file: !779, line: 76, baseType: !9, size: 32, elements: !1858)
!1858 = !{!1859, !1860, !1861, !1862}
!1859 = !DIEnumerator(name: "DF_REF_BASE", value: 0, isUnsigned: true)
!1860 = !DIEnumerator(name: "DF_REF_ARTIFICIAL", value: 1, isUnsigned: true)
!1861 = !DIEnumerator(name: "DF_REF_REGULAR", value: 2, isUnsigned: true)
!1862 = !DIEnumerator(name: "DF_REF_EXTRACT", value: 3, isUnsigned: true)
!1863 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !389, line: 956, baseType: !9, size: 32, elements: !1864)
!1864 = !{!1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878}
!1865 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!1866 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!1867 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!1868 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!1869 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!1870 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!1871 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!1872 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!1873 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!1874 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!1875 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!1876 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!1877 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!1878 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!1879 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !146, line: 912, baseType: !9, size: 32, elements: !1880)
!1880 = !{!1881, !1882}
!1881 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!1882 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!1883 = !{!7, !714, !1884, !1889, !1892, !388, !2010, !1887, !3081, !9, !2386, !1917, !3082, !1893, !1785, !3083, !3085, !3102, !3108, !3110, !3086, !3093, !3123, !1988, !3124, !3125, !2448}
!1884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1885, size: 64)
!1885 = !DISubroutineType(types: !1886)
!1886 = !{!1887, !1888}
!1887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1888 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1890, size: 64)
!1890 = !DISubroutineType(types: !1891)
!1891 = !{null, !1887}
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64)
!1893 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1894, line: 50, baseType: !1895)
!1894 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1896, size: 64)
!1896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !389, line: 240, size: 384, elements: !1897)
!1897 = !{!1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908}
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1896, file: !389, line: 242, baseType: !9, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1896, file: !389, line: 245, baseType: !9, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1896, file: !389, line: 252, baseType: !9, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1896, file: !389, line: 257, baseType: !9, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1896, file: !389, line: 265, baseType: !9, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1896, file: !389, line: 277, baseType: !9, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1896, file: !389, line: 291, baseType: !9, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1896, file: !389, line: 298, baseType: !9, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1896, file: !389, line: 305, baseType: !9, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1896, file: !389, line: 310, baseType: !9, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1896, file: !389, line: 321, baseType: !1909, size: 320, offset: 64)
!1909 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !389, line: 315, size: 320, elements: !1910)
!1910 = !{!1911, !3016, !3018, !3079, !3080}
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1909, file: !389, line: 316, baseType: !1912, size: 64)
!1912 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1913, size: 64, elements: !1932)
!1913 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !389, line: 183, baseType: !1914)
!1914 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !389, line: 166, size: 64, elements: !1915)
!1915 = !{!1916, !1918, !1919, !1923, !1924, !1934, !1935, !1947, !1971, !2033, !2994, !2995, !3006, !3013}
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1914, file: !389, line: 168, baseType: !1917, size: 32)
!1917 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1914, file: !389, line: 169, baseType: !9, size: 32)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1914, file: !389, line: 170, baseType: !1920, size: 64)
!1920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1921, size: 64)
!1921 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1922)
!1922 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1914, file: !389, line: 171, baseType: !1893, size: 64)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1914, file: !389, line: 172, baseType: !1925, size: 64)
!1925 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1894, line: 53, baseType: !1926)
!1926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1927, size: 64)
!1927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !389, line: 359, size: 128, elements: !1928)
!1928 = !{!1929, !1930}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1927, file: !389, line: 360, baseType: !1917, size: 32)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1927, file: !389, line: 361, baseType: !1931, size: 64, offset: 64)
!1931 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1893, size: 64, elements: !1932)
!1932 = !{!1933}
!1933 = !DISubrange(count: 1)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1914, file: !389, line: 173, baseType: !7, size: 32)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1914, file: !389, line: 174, baseType: !1936, size: 32)
!1936 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !389, line: 133, baseType: !1937)
!1937 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !389, line: 115, size: 32, elements: !1938)
!1938 = !{!1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946}
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1937, file: !389, line: 118, baseType: !9, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1937, file: !389, line: 120, baseType: !9, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1937, file: !389, line: 121, baseType: !9, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1937, file: !389, line: 123, baseType: !9, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1937, file: !389, line: 125, baseType: !9, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1937, file: !389, line: 127, baseType: !9, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1937, file: !389, line: 130, baseType: !9, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1937, file: !389, line: 132, baseType: !9, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1914, file: !389, line: 175, baseType: !1948, size: 64)
!1948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1949, size: 64)
!1949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1950, line: 23, size: 320, elements: !1951)
!1950 = !DIFile(filename: "./cselib.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1951 = !{!1952, !1953, !1954, !1955, !1962, !1970}
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1949, file: !1950, line: 25, baseType: !9, size: 32)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1949, file: !1950, line: 28, baseType: !1917, size: 32, offset: 32)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "val_rtx", scope: !1949, file: !1950, line: 31, baseType: !1893, size: 64, offset: 64)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "locs", scope: !1949, file: !1950, line: 35, baseType: !1956, size: 64, offset: 128)
!1956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1957, size: 64)
!1957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "elt_loc_list", file: !1950, line: 45, size: 192, elements: !1958)
!1958 = !{!1959, !1960, !1961}
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1957, file: !1950, line: 47, baseType: !1956, size: 64)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1957, file: !1950, line: 49, baseType: !1893, size: 64, offset: 64)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "setting_insn", scope: !1957, file: !1950, line: 51, baseType: !1893, size: 64, offset: 128)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "addr_list", scope: !1949, file: !1950, line: 39, baseType: !1963, size: 64, offset: 192)
!1963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1964, size: 64)
!1964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "elt_list", file: !1950, line: 55, size: 128, elements: !1965)
!1965 = !{!1966, !1967}
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1964, file: !1950, line: 56, baseType: !1963, size: 64)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "elt", scope: !1964, file: !1950, line: 57, baseType: !1968, size: 64, offset: 64)
!1968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1969, size: 64)
!1969 = !DIDerivedType(tag: DW_TAG_typedef, name: "cselib_val", file: !1950, line: 42, baseType: !1949)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "next_containing_mem", scope: !1949, file: !1950, line: 41, baseType: !1948, size: 64, offset: 256)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1914, file: !389, line: 176, baseType: !1972, size: 64)
!1972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1973, size: 64)
!1973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1974, line: 75, size: 256, elements: !1975)
!1974 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1975 = !{!1976, !1991, !1992, !1993}
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1973, file: !1974, line: 76, baseType: !1977, size: 64)
!1977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1978, size: 64)
!1978 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1974, line: 68, baseType: !1979)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1974, line: 63, size: 320, elements: !1980)
!1980 = !{!1981, !1983, !1984, !1985}
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1979, file: !1974, line: 64, baseType: !1982, size: 64)
!1982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1979, size: 64)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1979, file: !1974, line: 65, baseType: !1982, size: 64, offset: 64)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1979, file: !1974, line: 66, baseType: !9, size: 32, offset: 128)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1979, file: !1974, line: 67, baseType: !1986, size: 128, offset: 192)
!1986 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1987, size: 128, elements: !1989)
!1987 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1974, line: 29, baseType: !1988)
!1988 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1989 = !{!1990}
!1990 = !DISubrange(count: 2)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1973, file: !1974, line: 77, baseType: !1977, size: 64, offset: 64)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1973, file: !1974, line: 78, baseType: !9, size: 32, offset: 128)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1973, file: !1974, line: 79, baseType: !1994, size: 64, offset: 192)
!1994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1995, size: 64)
!1995 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1974, line: 49, baseType: !1996)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1974, line: 45, size: 832, elements: !1997)
!1997 = !{!1998, !1999, !2000}
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1996, file: !1974, line: 46, baseType: !1982, size: 64)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1996, file: !1974, line: 47, baseType: !1972, size: 64, offset: 64)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1996, file: !1974, line: 48, baseType: !2001, size: 704, offset: 128)
!2001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2002, line: 164, size: 704, elements: !2003)
!2002 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2003 = !{!2004, !2005, !2016, !2017, !2018, !2019, !2020, !2021, !2025, !2029, !2030, !2031, !2032}
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2001, file: !2002, line: 166, baseType: !1888, size: 64)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2001, file: !2002, line: 167, baseType: !2006, size: 64, offset: 64)
!2006 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2007, size: 64)
!2007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2002, line: 157, size: 192, elements: !2008)
!2008 = !{!2009, !2011, !2012}
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2007, file: !2002, line: 159, baseType: !2010, size: 64)
!2010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1922, size: 64)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2007, file: !2002, line: 160, baseType: !2006, size: 64, offset: 64)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2007, file: !2002, line: 161, baseType: !2013, size: 32, offset: 128)
!2013 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1922, size: 32, elements: !2014)
!2014 = !{!2015}
!2015 = !DISubrange(count: 4)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2001, file: !2002, line: 168, baseType: !2010, size: 64, offset: 128)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2001, file: !2002, line: 169, baseType: !2010, size: 64, offset: 192)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2001, file: !2002, line: 170, baseType: !2010, size: 64, offset: 256)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2001, file: !2002, line: 171, baseType: !1888, size: 64, offset: 320)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2001, file: !2002, line: 172, baseType: !1917, size: 32, offset: 384)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2001, file: !2002, line: 176, baseType: !2022, size: 64, offset: 448)
!2022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2023, size: 64)
!2023 = !DISubroutineType(types: !2024)
!2024 = !{!2006, !1887, !1888}
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2001, file: !2002, line: 177, baseType: !2026, size: 64, offset: 512)
!2026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2027, size: 64)
!2027 = !DISubroutineType(types: !2028)
!2028 = !{null, !1887, !2006}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2001, file: !2002, line: 178, baseType: !1887, size: 64, offset: 576)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2001, file: !2002, line: 179, baseType: !9, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2001, file: !2002, line: 180, baseType: !9, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2001, file: !2002, line: 184, baseType: !9, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1914, file: !389, line: 177, baseType: !2034, size: 64)
!2034 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1894, line: 56, baseType: !2035)
!2035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2036, size: 64)
!2036 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !162, line: 3371, size: 1792, elements: !2037)
!2037 = !{!2038, !2071, !2077, !2088, !2107, !2118, !2123, !2130, !2136, !2149, !2161, !2199, !2204, !2232, !2240, !2241, !2246, !2255, !2261, !2266, !2270, !2274, !2631, !2680, !2686, !2692, !2699, !2725, !2739, !2756, !2768, !2790, !2805, !2976}
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2036, file: !162, line: 3372, baseType: !2039, size: 64)
!2039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !162, line: 360, size: 64, elements: !2040)
!2040 = !{!2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2039, file: !162, line: 361, baseType: !9, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2039, file: !162, line: 363, baseType: !9, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2039, file: !162, line: 364, baseType: !9, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2039, file: !162, line: 365, baseType: !9, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2039, file: !162, line: 366, baseType: !9, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2039, file: !162, line: 367, baseType: !9, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2039, file: !162, line: 368, baseType: !9, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2039, file: !162, line: 369, baseType: !9, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2039, file: !162, line: 370, baseType: !9, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2039, file: !162, line: 372, baseType: !9, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2039, file: !162, line: 373, baseType: !9, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2039, file: !162, line: 374, baseType: !9, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2039, file: !162, line: 375, baseType: !9, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2039, file: !162, line: 376, baseType: !9, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2039, file: !162, line: 377, baseType: !9, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2039, file: !162, line: 378, baseType: !9, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2039, file: !162, line: 379, baseType: !9, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2039, file: !162, line: 381, baseType: !9, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2039, file: !162, line: 382, baseType: !9, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2039, file: !162, line: 383, baseType: !9, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2039, file: !162, line: 384, baseType: !9, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2039, file: !162, line: 385, baseType: !9, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2039, file: !162, line: 386, baseType: !9, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2039, file: !162, line: 387, baseType: !9, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2039, file: !162, line: 388, baseType: !9, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2039, file: !162, line: 390, baseType: !9, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2039, file: !162, line: 391, baseType: !9, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2039, file: !162, line: 392, baseType: !9, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2039, file: !162, line: 394, baseType: !9, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2039, file: !162, line: 399, baseType: !9, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2036, file: !162, line: 3373, baseType: !2072, size: 192)
!2072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !162, line: 402, size: 192, elements: !2073)
!2073 = !{!2074, !2075, !2076}
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2072, file: !162, line: 403, baseType: !2039, size: 64)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2072, file: !162, line: 404, baseType: !2034, size: 64, offset: 64)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2072, file: !162, line: 405, baseType: !2034, size: 64, offset: 128)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2036, file: !162, line: 3374, baseType: !2078, size: 320)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !162, line: 1384, size: 320, elements: !2079)
!2079 = !{!2080, !2081}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2078, file: !162, line: 1385, baseType: !2072, size: 192)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2078, file: !162, line: 1386, baseType: !2082, size: 128, offset: 192)
!2082 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2083, line: 58, baseType: !2084)
!2083 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2083, line: 54, size: 128, elements: !2085)
!2085 = !{!2086, !2087}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2084, file: !2083, line: 56, baseType: !1988, size: 64)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2084, file: !2083, line: 57, baseType: !1888, size: 64, offset: 64)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2036, file: !162, line: 3375, baseType: !2089, size: 256)
!2089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !162, line: 1397, size: 256, elements: !2090)
!2090 = !{!2091, !2092}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2089, file: !162, line: 1398, baseType: !2072, size: 192)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2089, file: !162, line: 1399, baseType: !2093, size: 64, offset: 192)
!2093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2094, size: 64)
!2094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2095, line: 52, size: 256, elements: !2096)
!2095 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2096 = !{!2097, !2098, !2099, !2100, !2101, !2102, !2103}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2094, file: !2095, line: 56, baseType: !9, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2094, file: !2095, line: 57, baseType: !9, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2094, file: !2095, line: 58, baseType: !9, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2094, file: !2095, line: 59, baseType: !9, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2094, file: !2095, line: 60, baseType: !9, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2094, file: !2095, line: 61, baseType: !9, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2094, file: !2095, line: 62, baseType: !2104, size: 192, offset: 64)
!2104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1988, size: 192, elements: !2105)
!2105 = !{!2106}
!2106 = !DISubrange(count: 3)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2036, file: !162, line: 3376, baseType: !2108, size: 256)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !162, line: 1408, size: 256, elements: !2109)
!2109 = !{!2110, !2111}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2108, file: !162, line: 1409, baseType: !2072, size: 192)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2108, file: !162, line: 1410, baseType: !2112, size: 64, offset: 192)
!2112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2113, size: 64)
!2113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2114, line: 27, size: 192, elements: !2115)
!2114 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2115 = !{!2116, !2117}
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2113, file: !2114, line: 29, baseType: !2082, size: 128)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2113, file: !2114, line: 30, baseType: !7, size: 32, offset: 128)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2036, file: !162, line: 3377, baseType: !2119, size: 256)
!2119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !162, line: 1437, size: 256, elements: !2120)
!2120 = !{!2121, !2122}
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2119, file: !162, line: 1438, baseType: !2072, size: 192)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2119, file: !162, line: 1439, baseType: !2034, size: 64, offset: 192)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2036, file: !162, line: 3378, baseType: !2124, size: 256)
!2124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !162, line: 1418, size: 256, elements: !2125)
!2125 = !{!2126, !2127, !2128}
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2124, file: !162, line: 1419, baseType: !2072, size: 192)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2124, file: !162, line: 1420, baseType: !1917, size: 32, offset: 192)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2124, file: !162, line: 1421, baseType: !2129, size: 8, offset: 224)
!2129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1922, size: 8, elements: !1932)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2036, file: !162, line: 3379, baseType: !2131, size: 320)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !162, line: 1428, size: 320, elements: !2132)
!2132 = !{!2133, !2134, !2135}
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2131, file: !162, line: 1429, baseType: !2072, size: 192)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2131, file: !162, line: 1430, baseType: !2034, size: 64, offset: 192)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2131, file: !162, line: 1431, baseType: !2034, size: 64, offset: 256)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2036, file: !162, line: 3380, baseType: !2137, size: 320)
!2137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !162, line: 1460, size: 320, elements: !2138)
!2138 = !{!2139, !2140}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2137, file: !162, line: 1461, baseType: !2072, size: 192)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2137, file: !162, line: 1462, baseType: !2141, size: 128, offset: 192)
!2141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2142, line: 31, size: 128, elements: !2143)
!2142 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2143 = !{!2144, !2147, !2148}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2141, file: !2142, line: 32, baseType: !2145, size: 64)
!2145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2146, size: 64)
!2146 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2141, file: !2142, line: 33, baseType: !9, size: 32, offset: 64)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2141, file: !2142, line: 34, baseType: !9, size: 32, offset: 96)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2036, file: !162, line: 3381, baseType: !2150, size: 384)
!2150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !162, line: 2507, size: 384, elements: !2151)
!2151 = !{!2152, !2153, !2158, !2159, !2160}
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2150, file: !162, line: 2508, baseType: !2072, size: 192)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2150, file: !162, line: 2509, baseType: !2154, size: 32, offset: 192)
!2154 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2155, line: 58, baseType: !2156)
!2155 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2156 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2157, line: 44, baseType: !9)
!2157 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2150, file: !162, line: 2510, baseType: !9, size: 32, offset: 224)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2150, file: !162, line: 2511, baseType: !2034, size: 64, offset: 256)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2150, file: !162, line: 2512, baseType: !2034, size: 64, offset: 320)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2036, file: !162, line: 3382, baseType: !2162, size: 896)
!2162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !162, line: 2652, size: 896, elements: !2163)
!2163 = !{!2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2162, file: !162, line: 2653, baseType: !2150, size: 384)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2162, file: !162, line: 2654, baseType: !2034, size: 64, offset: 384)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2162, file: !162, line: 2656, baseType: !9, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2162, file: !162, line: 2658, baseType: !9, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2162, file: !162, line: 2659, baseType: !9, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2162, file: !162, line: 2660, baseType: !9, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2162, file: !162, line: 2661, baseType: !9, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2162, file: !162, line: 2662, baseType: !9, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2162, file: !162, line: 2663, baseType: !9, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2162, file: !162, line: 2664, baseType: !9, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2162, file: !162, line: 2666, baseType: !9, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2162, file: !162, line: 2667, baseType: !9, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2162, file: !162, line: 2668, baseType: !9, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2162, file: !162, line: 2669, baseType: !9, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2162, file: !162, line: 2670, baseType: !9, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2162, file: !162, line: 2671, baseType: !9, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2162, file: !162, line: 2672, baseType: !9, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2162, file: !162, line: 2673, baseType: !9, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2162, file: !162, line: 2674, baseType: !9, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2162, file: !162, line: 2678, baseType: !9, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2162, file: !162, line: 2682, baseType: !9, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2162, file: !162, line: 2685, baseType: !9, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2162, file: !162, line: 2688, baseType: !9, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2162, file: !162, line: 2690, baseType: !9, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2162, file: !162, line: 2692, baseType: !9, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2162, file: !162, line: 2695, baseType: !9, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2162, file: !162, line: 2698, baseType: !9, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2162, file: !162, line: 2703, baseType: !9, size: 32, offset: 512)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2162, file: !162, line: 2705, baseType: !2034, size: 64, offset: 576)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2162, file: !162, line: 2706, baseType: !2034, size: 64, offset: 640)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2162, file: !162, line: 2707, baseType: !2034, size: 64, offset: 704)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2162, file: !162, line: 2708, baseType: !2034, size: 64, offset: 768)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2162, file: !162, line: 2711, baseType: !2197, size: 64, offset: 832)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2198 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !162, line: 2711, flags: DIFlagFwdDecl)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2036, file: !162, line: 3383, baseType: !2200, size: 960)
!2200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !162, line: 2756, size: 960, elements: !2201)
!2201 = !{!2202, !2203}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2200, file: !162, line: 2757, baseType: !2162, size: 896)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2200, file: !162, line: 2758, baseType: !1893, size: 64, offset: 896)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2036, file: !162, line: 3384, baseType: !2205, size: 1472)
!2205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !162, line: 3114, size: 1472, elements: !2206)
!2206 = !{!2207, !2228, !2229, !2230, !2231}
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2205, file: !162, line: 3115, baseType: !2208, size: 1216)
!2208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !162, line: 2984, size: 1216, elements: !2209)
!2209 = !{!2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227}
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2208, file: !162, line: 2985, baseType: !2200, size: 960)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2208, file: !162, line: 2986, baseType: !2034, size: 64, offset: 960)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2208, file: !162, line: 2987, baseType: !2034, size: 64, offset: 1024)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2208, file: !162, line: 2988, baseType: !2034, size: 64, offset: 1088)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2208, file: !162, line: 2991, baseType: !9, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2208, file: !162, line: 2992, baseType: !9, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2208, file: !162, line: 2993, baseType: !9, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2208, file: !162, line: 2994, baseType: !9, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2208, file: !162, line: 2995, baseType: !9, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2208, file: !162, line: 2996, baseType: !9, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2208, file: !162, line: 2998, baseType: !9, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2208, file: !162, line: 3000, baseType: !9, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2208, file: !162, line: 3002, baseType: !9, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2208, file: !162, line: 3003, baseType: !9, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2208, file: !162, line: 3004, baseType: !9, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2208, file: !162, line: 3005, baseType: !9, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2208, file: !162, line: 3007, baseType: !9, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2208, file: !162, line: 3010, baseType: !9, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2205, file: !162, line: 3117, baseType: !2034, size: 64, offset: 1216)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2205, file: !162, line: 3119, baseType: !2034, size: 64, offset: 1280)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2205, file: !162, line: 3121, baseType: !2034, size: 64, offset: 1344)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2205, file: !162, line: 3123, baseType: !2034, size: 64, offset: 1408)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2036, file: !162, line: 3385, baseType: !2233, size: 1088)
!2233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !162, line: 2874, size: 1088, elements: !2234)
!2234 = !{!2235, !2236, !2237}
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2233, file: !162, line: 2875, baseType: !2200, size: 960)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2233, file: !162, line: 2876, baseType: !1893, size: 64, offset: 960)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2233, file: !162, line: 2877, baseType: !2238, size: 64, offset: 1024)
!2238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2239, size: 64)
!2239 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !162, line: 2856, flags: DIFlagFwdDecl)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2036, file: !162, line: 3386, baseType: !2208, size: 1216)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2036, file: !162, line: 3387, baseType: !2242, size: 1280)
!2242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !162, line: 3093, size: 1280, elements: !2243)
!2243 = !{!2244, !2245}
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2242, file: !162, line: 3094, baseType: !2208, size: 1216)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2242, file: !162, line: 3095, baseType: !2238, size: 64, offset: 1216)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2036, file: !162, line: 3388, baseType: !2247, size: 1216)
!2247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !162, line: 2824, size: 1216, elements: !2248)
!2248 = !{!2249, !2250, !2251, !2252, !2253, !2254}
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2247, file: !162, line: 2825, baseType: !2162, size: 896)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2247, file: !162, line: 2827, baseType: !2034, size: 64, offset: 896)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2247, file: !162, line: 2828, baseType: !2034, size: 64, offset: 960)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2247, file: !162, line: 2829, baseType: !2034, size: 64, offset: 1024)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2247, file: !162, line: 2830, baseType: !2034, size: 64, offset: 1088)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2247, file: !162, line: 2831, baseType: !2034, size: 64, offset: 1152)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2036, file: !162, line: 3389, baseType: !2256, size: 1024)
!2256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !162, line: 2850, size: 1024, elements: !2257)
!2257 = !{!2258, !2259, !2260}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2256, file: !162, line: 2851, baseType: !2200, size: 960)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2256, file: !162, line: 2852, baseType: !1917, size: 32, offset: 960)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2256, file: !162, line: 2853, baseType: !1917, size: 32, offset: 992)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2036, file: !162, line: 3390, baseType: !2262, size: 1024)
!2262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !162, line: 2857, size: 1024, elements: !2263)
!2263 = !{!2264, !2265}
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2262, file: !162, line: 2858, baseType: !2200, size: 960)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2262, file: !162, line: 2859, baseType: !2238, size: 64, offset: 960)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2036, file: !162, line: 3391, baseType: !2267, size: 960)
!2267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !162, line: 2862, size: 960, elements: !2268)
!2268 = !{!2269}
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2267, file: !162, line: 2863, baseType: !2200, size: 960)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2036, file: !162, line: 3392, baseType: !2271, size: 1472)
!2271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !162, line: 3304, size: 1472, elements: !2272)
!2272 = !{!2273}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2271, file: !162, line: 3305, baseType: !2205, size: 1472)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2036, file: !162, line: 3393, baseType: !2275, size: 1792)
!2275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !162, line: 3248, size: 1792, elements: !2276)
!2276 = !{!2277, !2278, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630}
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2275, file: !162, line: 3249, baseType: !2205, size: 1472)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2275, file: !162, line: 3251, baseType: !2279, size: 64, offset: 1472)
!2279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2280, size: 64)
!2280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2281, line: 463, size: 1152, elements: !2282)
!2281 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2282 = !{!2283, !2443, !2547, !2548, !2551, !2554, !2555, !2556, !2557, !2558, !2559, !2583, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2280, file: !2281, line: 464, baseType: !2284, size: 64)
!2284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2285, size: 64)
!2285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !139, line: 194, size: 384, elements: !2286)
!2286 = !{!2287, !2336, !2349, !2363, !2411, !2424}
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !2285, file: !139, line: 197, baseType: !2288, size: 64)
!2288 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !139, line: 182, baseType: !2289)
!2289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2290, size: 64)
!2290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !139, line: 116, size: 704, elements: !2291)
!2291 = !{!2292, !2293, !2294, !2295, !2296, !2297, !2324, !2333, !2334, !2335}
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !2290, file: !139, line: 119, baseType: !2289, size: 64)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2290, file: !139, line: 122, baseType: !2289, size: 64, offset: 64)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !2290, file: !139, line: 123, baseType: !2289, size: 64, offset: 128)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2290, file: !139, line: 126, baseType: !1917, size: 32, offset: 192)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2290, file: !139, line: 129, baseType: !138, size: 32, offset: 224)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2290, file: !139, line: 165, baseType: !2298, size: 192, offset: 256)
!2298 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !139, line: 132, size: 192, elements: !2299)
!2299 = !{!2300, !2313, !2319}
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !2298, file: !139, line: 137, baseType: !2301, size: 128)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !139, line: 133, size: 128, elements: !2302)
!2302 = !{!2303, !2312}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !2301, file: !139, line: 135, baseType: !2304, size: 64)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2305, size: 64)
!2305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !139, line: 93, size: 320, elements: !2306)
!2306 = !{!2307, !2308, !2309, !2310, !2311}
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !2305, file: !139, line: 96, baseType: !2304, size: 64)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !2305, file: !139, line: 97, baseType: !2304, size: 64, offset: 64)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2305, file: !139, line: 101, baseType: !2034, size: 64, offset: 128)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !2305, file: !139, line: 106, baseType: !2034, size: 64, offset: 192)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2305, file: !139, line: 111, baseType: !2034, size: 64, offset: 256)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !2301, file: !139, line: 136, baseType: !2304, size: 64, offset: 64)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !2298, file: !139, line: 151, baseType: !2314, size: 192)
!2314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !139, line: 139, size: 192, elements: !2315)
!2315 = !{!2316, !2317, !2318}
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2314, file: !139, line: 141, baseType: !2034, size: 64)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2314, file: !139, line: 145, baseType: !2034, size: 64, offset: 64)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2314, file: !139, line: 150, baseType: !1917, size: 32, offset: 128)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !2298, file: !139, line: 164, baseType: !2320, size: 128)
!2320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !139, line: 153, size: 128, elements: !2321)
!2321 = !{!2322, !2323}
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2320, file: !139, line: 161, baseType: !2034, size: 64)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2320, file: !139, line: 163, baseType: !2154, size: 32, offset: 64)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !2290, file: !139, line: 168, baseType: !2325, size: 64, offset: 448)
!2325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2326, size: 64)
!2326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !139, line: 67, size: 320, elements: !2327)
!2327 = !{!2328, !2329, !2330, !2331, !2332}
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2326, file: !139, line: 70, baseType: !2325, size: 64)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2326, file: !139, line: 73, baseType: !2289, size: 64, offset: 64)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2326, file: !139, line: 78, baseType: !2034, size: 64, offset: 128)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2326, file: !139, line: 85, baseType: !1893, size: 64, offset: 192)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2326, file: !139, line: 88, baseType: !1917, size: 32, offset: 256)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !2290, file: !139, line: 173, baseType: !1893, size: 64, offset: 512)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !2290, file: !139, line: 173, baseType: !1893, size: 64, offset: 576)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !2290, file: !139, line: 177, baseType: !6, size: 8, offset: 640)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !2285, file: !139, line: 200, baseType: !2337, size: 64, offset: 64)
!2337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2338, size: 64)
!2338 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !139, line: 185, baseType: !2339)
!2339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !139, line: 185, size: 128, elements: !2340)
!2340 = !{!2341}
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2339, file: !139, line: 185, baseType: !2342, size: 128)
!2342 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !139, line: 184, baseType: !2343)
!2343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !139, line: 184, size: 128, elements: !2344)
!2344 = !{!2345, !2346, !2347}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2343, file: !139, line: 184, baseType: !9, size: 32)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2343, file: !139, line: 184, baseType: !9, size: 32, offset: 32)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2343, file: !139, line: 184, baseType: !2348, size: 64, offset: 64)
!2348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2288, size: 64, elements: !1932)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !2285, file: !139, line: 203, baseType: !2350, size: 64, offset: 128)
!2350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2351, size: 64)
!2351 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !139, line: 189, baseType: !2352)
!2352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !139, line: 189, size: 128, elements: !2353)
!2353 = !{!2354}
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2352, file: !139, line: 189, baseType: !2355, size: 128)
!2355 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !139, line: 188, baseType: !2356)
!2356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !139, line: 188, size: 128, elements: !2357)
!2357 = !{!2358, !2359, !2360}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2356, file: !139, line: 188, baseType: !9, size: 32)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2356, file: !139, line: 188, baseType: !9, size: 32, offset: 32)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2356, file: !139, line: 188, baseType: !2361, size: 64, offset: 64)
!2361 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2362, size: 64, elements: !1932)
!2362 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !139, line: 180, baseType: !2325)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !2285, file: !139, line: 207, baseType: !2364, size: 64, offset: 192)
!2364 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1853, line: 144, baseType: !2365)
!2365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2366, size: 64)
!2366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1853, line: 100, size: 896, elements: !2367)
!2367 = !{!2368, !2376, !2381, !2383, !2385, !2388, !2389, !2390, !2391, !2392, !2397, !2399, !2400, !2405, !2410}
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2366, file: !1853, line: 102, baseType: !2369, size: 64)
!2369 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1853, line: 52, baseType: !2370)
!2370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2371, size: 64)
!2371 = !DISubroutineType(types: !2372)
!2372 = !{!2373, !2374}
!2373 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1853, line: 47, baseType: !9)
!2374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2375, size: 64)
!2375 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2366, file: !1853, line: 105, baseType: !2377, size: 64, offset: 64)
!2377 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1853, line: 59, baseType: !2378)
!2378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2379, size: 64)
!2379 = !DISubroutineType(types: !2380)
!2380 = !{!1917, !2374, !2374}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2366, file: !1853, line: 108, baseType: !2382, size: 64, offset: 128)
!2382 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1853, line: 63, baseType: !1889)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2366, file: !1853, line: 111, baseType: !2384, size: 64, offset: 192)
!2384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1887, size: 64)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2366, file: !1853, line: 114, baseType: !2386, size: 64, offset: 256)
!2386 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2387, line: 46, baseType: !1988)
!2387 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2366, file: !1853, line: 117, baseType: !2386, size: 64, offset: 320)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2366, file: !1853, line: 120, baseType: !2386, size: 64, offset: 384)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2366, file: !1853, line: 124, baseType: !9, size: 32, offset: 448)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2366, file: !1853, line: 128, baseType: !9, size: 32, offset: 480)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2366, file: !1853, line: 131, baseType: !2393, size: 64, offset: 512)
!2393 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1853, line: 75, baseType: !2394)
!2394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2395, size: 64)
!2395 = !DISubroutineType(types: !2396)
!2396 = !{!1887, !2386, !2386}
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2366, file: !1853, line: 132, baseType: !2398, size: 64, offset: 576)
!2398 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1853, line: 78, baseType: !1889)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2366, file: !1853, line: 135, baseType: !1887, size: 64, offset: 640)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2366, file: !1853, line: 136, baseType: !2401, size: 64, offset: 704)
!2401 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1853, line: 82, baseType: !2402)
!2402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2403, size: 64)
!2403 = !DISubroutineType(types: !2404)
!2404 = !{!1887, !1887, !2386, !2386}
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2366, file: !1853, line: 137, baseType: !2406, size: 64, offset: 768)
!2406 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1853, line: 83, baseType: !2407)
!2407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2408, size: 64)
!2408 = !DISubroutineType(types: !2409)
!2409 = !{null, !1887, !1887}
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2366, file: !1853, line: 141, baseType: !9, size: 32, offset: 832)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !2285, file: !139, line: 211, baseType: !2412, size: 64, offset: 256)
!2412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2413, size: 64)
!2413 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !162, line: 183, baseType: !2414)
!2414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !162, line: 183, size: 128, elements: !2415)
!2415 = !{!2416}
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2414, file: !162, line: 183, baseType: !2417, size: 128)
!2417 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !162, line: 182, baseType: !2418)
!2418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !162, line: 182, size: 128, elements: !2419)
!2419 = !{!2420, !2421, !2422}
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2418, file: !162, line: 182, baseType: !9, size: 32)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2418, file: !162, line: 182, baseType: !9, size: 32, offset: 32)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2418, file: !162, line: 182, baseType: !2423, size: 64, offset: 64)
!2423 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2034, size: 64, elements: !1932)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !2285, file: !139, line: 220, baseType: !2425, size: 64, offset: 320)
!2425 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !139, line: 217, size: 64, elements: !2426)
!2426 = !{!2427, !2428}
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !2425, file: !139, line: 218, baseType: !2412, size: 64)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !2425, file: !139, line: 219, baseType: !2429, size: 64)
!2429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2430, size: 64)
!2430 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2431, line: 29, baseType: !2432)
!2431 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2431, line: 29, size: 96, elements: !2433)
!2433 = !{!2434}
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2432, file: !2431, line: 29, baseType: !2435, size: 96)
!2435 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2431, line: 27, baseType: !2436)
!2436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2431, line: 27, size: 96, elements: !2437)
!2437 = !{!2438, !2439, !2440}
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2436, file: !2431, line: 27, baseType: !9, size: 32)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2436, file: !2431, line: 27, baseType: !9, size: 32, offset: 32)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2436, file: !2431, line: 27, baseType: !2441, size: 8, offset: 64)
!2441 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2442, size: 8, elements: !1932)
!2442 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2431, line: 26, baseType: !6)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2280, file: !2281, line: 467, baseType: !2444, size: 64, offset: 64)
!2444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2445, size: 64)
!2445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !146, line: 374, size: 640, elements: !2446)
!2446 = !{!2447, !2522, !2523, !2536, !2537, !2538, !2539, !2540, !2541, !2543, !2545, !2546}
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2445, file: !146, line: 377, baseType: !2448, size: 64)
!2448 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1894, line: 111, baseType: !2449)
!2449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2450, size: 64)
!2450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !146, line: 217, size: 832, elements: !2451)
!2451 = !{!2452, !2487, !2488, !2489, !2492, !2496, !2497, !2498, !2516, !2517, !2518, !2519, !2520, !2521}
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2450, file: !146, line: 219, baseType: !2453, size: 64)
!2453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2454, size: 64)
!2454 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !146, line: 151, baseType: !2455)
!2455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !146, line: 151, size: 128, elements: !2456)
!2456 = !{!2457}
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2455, file: !146, line: 151, baseType: !2458, size: 128)
!2458 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !146, line: 150, baseType: !2459)
!2459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !146, line: 150, size: 128, elements: !2460)
!2460 = !{!2461, !2462, !2463}
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2459, file: !146, line: 150, baseType: !9, size: 32)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2459, file: !146, line: 150, baseType: !9, size: 32, offset: 32)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2459, file: !146, line: 150, baseType: !2464, size: 64, offset: 64)
!2464 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2465, size: 64, elements: !1932)
!2465 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1894, line: 108, baseType: !2466)
!2466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2467, size: 64)
!2467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !146, line: 122, size: 512, elements: !2468)
!2468 = !{!2469, !2470, !2471, !2479, !2480, !2481, !2482, !2483, !2484, !2485}
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2467, file: !146, line: 124, baseType: !2449, size: 64)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2467, file: !146, line: 125, baseType: !2449, size: 64, offset: 64)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2467, file: !146, line: 131, baseType: !2472, size: 64, offset: 128)
!2472 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !146, line: 128, size: 64, elements: !2473)
!2473 = !{!2474, !2478}
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2472, file: !146, line: 129, baseType: !2475, size: 64)
!2475 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1894, line: 66, baseType: !2476)
!2476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2477, size: 64)
!2477 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1894, line: 65, flags: DIFlagFwdDecl)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2472, file: !146, line: 130, baseType: !1893, size: 64)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2467, file: !146, line: 134, baseType: !1887, size: 64, offset: 192)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2467, file: !146, line: 137, baseType: !2034, size: 64, offset: 256)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2467, file: !146, line: 138, baseType: !2154, size: 32, offset: 320)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2467, file: !146, line: 142, baseType: !9, size: 32, offset: 352)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2467, file: !146, line: 144, baseType: !1917, size: 32, offset: 384)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2467, file: !146, line: 145, baseType: !1917, size: 32, offset: 416)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2467, file: !146, line: 146, baseType: !2486, size: 64, offset: 448)
!2486 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !146, line: 119, baseType: !1888)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2450, file: !146, line: 220, baseType: !2453, size: 64, offset: 64)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2450, file: !146, line: 223, baseType: !1887, size: 64, offset: 128)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2450, file: !146, line: 226, baseType: !2490, size: 64, offset: 192)
!2490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2491, size: 64)
!2491 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !146, line: 185, flags: DIFlagFwdDecl)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2450, file: !146, line: 229, baseType: !2493, size: 128, offset: 256)
!2493 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2494, size: 128, elements: !1989)
!2494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2495, size: 64)
!2495 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !146, line: 229, flags: DIFlagFwdDecl)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2450, file: !146, line: 232, baseType: !2449, size: 64, offset: 384)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2450, file: !146, line: 233, baseType: !2449, size: 64, offset: 448)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2450, file: !146, line: 238, baseType: !2499, size: 64, offset: 512)
!2499 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !146, line: 235, size: 64, elements: !2500)
!2500 = !{!2501, !2507}
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2499, file: !146, line: 236, baseType: !2502, size: 64)
!2502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2503, size: 64)
!2503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !146, line: 273, size: 128, elements: !2504)
!2504 = !{!2505, !2506}
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2503, file: !146, line: 275, baseType: !2475, size: 64)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2503, file: !146, line: 278, baseType: !2475, size: 64, offset: 64)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2499, file: !146, line: 237, baseType: !2508, size: 64)
!2508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2509, size: 64)
!2509 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !146, line: 259, size: 320, elements: !2510)
!2510 = !{!2511, !2512, !2513, !2514, !2515}
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2509, file: !146, line: 261, baseType: !1893, size: 64)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2509, file: !146, line: 262, baseType: !1893, size: 64, offset: 64)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2509, file: !146, line: 266, baseType: !1893, size: 64, offset: 128)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2509, file: !146, line: 267, baseType: !1893, size: 64, offset: 192)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2509, file: !146, line: 270, baseType: !1917, size: 32, offset: 256)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2450, file: !146, line: 241, baseType: !2486, size: 64, offset: 576)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2450, file: !146, line: 244, baseType: !1917, size: 32, offset: 640)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2450, file: !146, line: 247, baseType: !1917, size: 32, offset: 672)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2450, file: !146, line: 250, baseType: !1917, size: 32, offset: 704)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2450, file: !146, line: 253, baseType: !1917, size: 32, offset: 736)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2450, file: !146, line: 256, baseType: !1917, size: 32, offset: 768)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2445, file: !146, line: 378, baseType: !2448, size: 64, offset: 64)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2445, file: !146, line: 381, baseType: !2524, size: 64, offset: 128)
!2524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2525 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !146, line: 282, baseType: !2526)
!2526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !146, line: 282, size: 128, elements: !2527)
!2527 = !{!2528}
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2526, file: !146, line: 282, baseType: !2529, size: 128)
!2529 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !146, line: 281, baseType: !2530)
!2530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !146, line: 281, size: 128, elements: !2531)
!2531 = !{!2532, !2533, !2534}
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2530, file: !146, line: 281, baseType: !9, size: 32)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2530, file: !146, line: 281, baseType: !9, size: 32, offset: 32)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2530, file: !146, line: 281, baseType: !2535, size: 64, offset: 64)
!2535 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2448, size: 64, elements: !1932)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2445, file: !146, line: 384, baseType: !1917, size: 32, offset: 192)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2445, file: !146, line: 387, baseType: !1917, size: 32, offset: 224)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2445, file: !146, line: 390, baseType: !1917, size: 32, offset: 256)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2445, file: !146, line: 394, baseType: !2524, size: 64, offset: 320)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2445, file: !146, line: 396, baseType: !145, size: 32, offset: 384)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2445, file: !146, line: 399, baseType: !2542, size: 64, offset: 416)
!2542 = !DICompositeType(tag: DW_TAG_array_type, baseType: !151, size: 64, elements: !1989)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2445, file: !146, line: 402, baseType: !2544, size: 64, offset: 480)
!2544 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 64, elements: !1989)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2445, file: !146, line: 406, baseType: !1917, size: 32, offset: 544)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2445, file: !146, line: 409, baseType: !1917, size: 32, offset: 576)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2280, file: !2281, line: 470, baseType: !2476, size: 64, offset: 128)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2280, file: !2281, line: 473, baseType: !2549, size: 64, offset: 192)
!2549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2550, size: 64)
!2550 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2281, line: 166, flags: DIFlagFwdDecl)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2280, file: !2281, line: 476, baseType: !2552, size: 64, offset: 256)
!2552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2553, size: 64)
!2553 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2281, line: 476, flags: DIFlagFwdDecl)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2280, file: !2281, line: 479, baseType: !2364, size: 64, offset: 320)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2280, file: !2281, line: 484, baseType: !2034, size: 64, offset: 384)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2280, file: !2281, line: 488, baseType: !2034, size: 64, offset: 448)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2280, file: !2281, line: 493, baseType: !2034, size: 64, offset: 512)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2280, file: !2281, line: 496, baseType: !2034, size: 64, offset: 576)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2280, file: !2281, line: 501, baseType: !2560, size: 64, offset: 640)
!2560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2561, size: 64)
!2561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !157, line: 2355, size: 576, elements: !2562)
!2562 = !{!2563, !2566, !2567, !2568, !2569, !2571, !2572, !2577, !2578, !2579, !2580, !2581, !2582}
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2561, file: !157, line: 2356, baseType: !2564, size: 64)
!2564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2565, size: 64)
!2565 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !157, line: 2356, flags: DIFlagFwdDecl)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2561, file: !157, line: 2357, baseType: !1920, size: 64, offset: 64)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2561, file: !157, line: 2358, baseType: !1917, size: 32, offset: 128)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2561, file: !157, line: 2359, baseType: !1917, size: 32, offset: 160)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2561, file: !157, line: 2360, baseType: !2570, size: 128, offset: 192)
!2570 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1917, size: 128, elements: !2014)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2561, file: !157, line: 2364, baseType: !1917, size: 32, offset: 320)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2561, file: !157, line: 2367, baseType: !2573, size: 128, offset: 384)
!2573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !157, line: 2349, size: 128, elements: !2574)
!2574 = !{!2575, !2576}
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2573, file: !157, line: 2351, baseType: !1893, size: 64)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2573, file: !157, line: 2352, baseType: !1888, size: 64, offset: 64)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2561, file: !157, line: 2371, baseType: !156, size: 32, offset: 512)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2561, file: !157, line: 2374, baseType: !9, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2561, file: !157, line: 2377, baseType: !9, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2561, file: !157, line: 2381, baseType: !9, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2561, file: !157, line: 2392, baseType: !9, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2561, file: !157, line: 2396, baseType: !9, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2280, file: !2281, line: 504, baseType: !2584, size: 64, offset: 704)
!2584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2585, size: 64)
!2585 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2281, line: 504, flags: DIFlagFwdDecl)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2280, file: !2281, line: 507, baseType: !2364, size: 64, offset: 768)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2280, file: !2281, line: 510, baseType: !1917, size: 32, offset: 832)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2280, file: !2281, line: 513, baseType: !1917, size: 32, offset: 864)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2280, file: !2281, line: 516, baseType: !2154, size: 32, offset: 896)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2280, file: !2281, line: 519, baseType: !2154, size: 32, offset: 928)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2280, file: !2281, line: 522, baseType: !9, size: 32, offset: 960)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2280, file: !2281, line: 523, baseType: !9, size: 32, offset: 992)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2280, file: !2281, line: 528, baseType: !1920, size: 64, offset: 1024)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2280, file: !2281, line: 535, baseType: !9, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2280, file: !2281, line: 539, baseType: !9, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2280, file: !2281, line: 543, baseType: !9, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2280, file: !2281, line: 546, baseType: !9, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2280, file: !2281, line: 550, baseType: !9, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2280, file: !2281, line: 554, baseType: !9, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2280, file: !2281, line: 559, baseType: !9, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2280, file: !2281, line: 562, baseType: !9, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2280, file: !2281, line: 571, baseType: !9, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2280, file: !2281, line: 573, baseType: !9, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2280, file: !2281, line: 574, baseType: !9, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2280, file: !2281, line: 581, baseType: !9, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2280, file: !2281, line: 585, baseType: !9, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2280, file: !2281, line: 588, baseType: !9, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2280, file: !2281, line: 592, baseType: !9, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2280, file: !2281, line: 598, baseType: !9, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2275, file: !162, line: 3254, baseType: !2034, size: 64, offset: 1536)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2275, file: !162, line: 3257, baseType: !2034, size: 64, offset: 1600)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2275, file: !162, line: 3258, baseType: !2034, size: 64, offset: 1664)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2275, file: !162, line: 3264, baseType: !9, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2275, file: !162, line: 3265, baseType: !9, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2275, file: !162, line: 3267, baseType: !9, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2275, file: !162, line: 3268, baseType: !9, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2275, file: !162, line: 3269, baseType: !9, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2275, file: !162, line: 3271, baseType: !9, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2275, file: !162, line: 3272, baseType: !9, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2275, file: !162, line: 3273, baseType: !9, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2275, file: !162, line: 3274, baseType: !9, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2275, file: !162, line: 3275, baseType: !9, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2275, file: !162, line: 3276, baseType: !9, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2275, file: !162, line: 3277, baseType: !9, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2275, file: !162, line: 3279, baseType: !9, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2275, file: !162, line: 3280, baseType: !9, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2275, file: !162, line: 3281, baseType: !9, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2275, file: !162, line: 3282, baseType: !9, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2275, file: !162, line: 3283, baseType: !9, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2275, file: !162, line: 3284, baseType: !9, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2036, file: !162, line: 3394, baseType: !2632, size: 1344)
!2632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !162, line: 2279, size: 1344, elements: !2633)
!2633 = !{!2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2659, !2660, !2661, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677}
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2632, file: !162, line: 2280, baseType: !2072, size: 192)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2632, file: !162, line: 2281, baseType: !2034, size: 64, offset: 192)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2632, file: !162, line: 2282, baseType: !2034, size: 64, offset: 256)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2632, file: !162, line: 2283, baseType: !2034, size: 64, offset: 320)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2632, file: !162, line: 2284, baseType: !2034, size: 64, offset: 384)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2632, file: !162, line: 2285, baseType: !9, size: 32, offset: 448)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2632, file: !162, line: 2287, baseType: !9, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2632, file: !162, line: 2288, baseType: !9, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2632, file: !162, line: 2289, baseType: !9, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2632, file: !162, line: 2290, baseType: !9, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2632, file: !162, line: 2291, baseType: !9, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2632, file: !162, line: 2292, baseType: !9, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2632, file: !162, line: 2294, baseType: !9, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2632, file: !162, line: 2296, baseType: !9, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2632, file: !162, line: 2297, baseType: !9, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2632, file: !162, line: 2298, baseType: !9, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2632, file: !162, line: 2299, baseType: !9, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2632, file: !162, line: 2300, baseType: !9, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2632, file: !162, line: 2301, baseType: !9, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2632, file: !162, line: 2302, baseType: !9, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2632, file: !162, line: 2303, baseType: !9, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2632, file: !162, line: 2305, baseType: !9, size: 32, offset: 512)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2632, file: !162, line: 2306, baseType: !2657, size: 32, offset: 544)
!2657 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2658, line: 31, baseType: !1917)
!2658 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2632, file: !162, line: 2307, baseType: !2034, size: 64, offset: 576)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2632, file: !162, line: 2308, baseType: !2034, size: 64, offset: 640)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2632, file: !162, line: 2314, baseType: !2662, size: 64, offset: 704)
!2662 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !162, line: 2309, size: 64, elements: !2663)
!2663 = !{!2664, !2665, !2666}
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2662, file: !162, line: 2310, baseType: !1917, size: 32)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2662, file: !162, line: 2311, baseType: !1920, size: 64)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2662, file: !162, line: 2312, baseType: !2667, size: 64)
!2667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2668, size: 64)
!2668 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !162, line: 2277, flags: DIFlagFwdDecl)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2632, file: !162, line: 2315, baseType: !2034, size: 64, offset: 768)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2632, file: !162, line: 2316, baseType: !2034, size: 64, offset: 832)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2632, file: !162, line: 2317, baseType: !2034, size: 64, offset: 896)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2632, file: !162, line: 2318, baseType: !2034, size: 64, offset: 960)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2632, file: !162, line: 2319, baseType: !2034, size: 64, offset: 1024)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2632, file: !162, line: 2320, baseType: !2034, size: 64, offset: 1088)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2632, file: !162, line: 2321, baseType: !2034, size: 64, offset: 1152)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2632, file: !162, line: 2322, baseType: !2034, size: 64, offset: 1216)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2632, file: !162, line: 2324, baseType: !2678, size: 64, offset: 1280)
!2678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2679, size: 64)
!2679 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !162, line: 2324, flags: DIFlagFwdDecl)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2036, file: !162, line: 3395, baseType: !2681, size: 320)
!2681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !162, line: 1469, size: 320, elements: !2682)
!2682 = !{!2683, !2684, !2685}
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2681, file: !162, line: 1470, baseType: !2072, size: 192)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2681, file: !162, line: 1471, baseType: !2034, size: 64, offset: 192)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2681, file: !162, line: 1472, baseType: !2034, size: 64, offset: 256)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2036, file: !162, line: 3396, baseType: !2687, size: 320)
!2687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !162, line: 1482, size: 320, elements: !2688)
!2688 = !{!2689, !2690, !2691}
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2687, file: !162, line: 1483, baseType: !2072, size: 192)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2687, file: !162, line: 1484, baseType: !1917, size: 32, offset: 192)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2687, file: !162, line: 1485, baseType: !2423, size: 64, offset: 256)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2036, file: !162, line: 3397, baseType: !2693, size: 384)
!2693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !162, line: 1829, size: 384, elements: !2694)
!2694 = !{!2695, !2696, !2697, !2698}
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2693, file: !162, line: 1830, baseType: !2072, size: 192)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2693, file: !162, line: 1831, baseType: !2154, size: 32, offset: 192)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2693, file: !162, line: 1832, baseType: !2034, size: 64, offset: 256)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2693, file: !162, line: 1835, baseType: !2423, size: 64, offset: 320)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2036, file: !162, line: 3398, baseType: !2700, size: 704)
!2700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !162, line: 1898, size: 704, elements: !2701)
!2701 = !{!2702, !2703, !2704, !2708, !2709, !2712}
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2700, file: !162, line: 1899, baseType: !2072, size: 192)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2700, file: !162, line: 1902, baseType: !2034, size: 64, offset: 192)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2700, file: !162, line: 1905, baseType: !2705, size: 64, offset: 256)
!2705 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1894, line: 58, baseType: !2706)
!2706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2707, size: 64)
!2707 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1894, line: 57, flags: DIFlagFwdDecl)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2700, file: !162, line: 1908, baseType: !9, size: 32, offset: 320)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2700, file: !162, line: 1911, baseType: !2710, size: 64, offset: 384)
!2710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2711, size: 64)
!2711 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !162, line: 1876, flags: DIFlagFwdDecl)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2700, file: !162, line: 1914, baseType: !2713, size: 256, offset: 448)
!2713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !162, line: 1883, size: 256, elements: !2714)
!2714 = !{!2715, !2717, !2718, !2723}
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2713, file: !162, line: 1884, baseType: !2716, size: 64)
!2716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2713, size: 64)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2713, file: !162, line: 1885, baseType: !2716, size: 64, offset: 64)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2713, file: !162, line: 1891, baseType: !2719, size: 64, offset: 128)
!2719 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2713, file: !162, line: 1891, size: 64, elements: !2720)
!2720 = !{!2721, !2722}
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2719, file: !162, line: 1891, baseType: !2705, size: 64)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2719, file: !162, line: 1891, baseType: !2034, size: 64)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2713, file: !162, line: 1892, baseType: !2724, size: 64, offset: 192)
!2724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2034, size: 64)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2036, file: !162, line: 3399, baseType: !2726, size: 704)
!2726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !162, line: 2008, size: 704, elements: !2727)
!2727 = !{!2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738}
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2726, file: !162, line: 2009, baseType: !2072, size: 192)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2726, file: !162, line: 2011, baseType: !9, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2726, file: !162, line: 2012, baseType: !9, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2726, file: !162, line: 2014, baseType: !2154, size: 32, offset: 224)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2726, file: !162, line: 2016, baseType: !2034, size: 64, offset: 256)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2726, file: !162, line: 2017, baseType: !2412, size: 64, offset: 320)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2726, file: !162, line: 2019, baseType: !2034, size: 64, offset: 384)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2726, file: !162, line: 2020, baseType: !2034, size: 64, offset: 448)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2726, file: !162, line: 2021, baseType: !2034, size: 64, offset: 512)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2726, file: !162, line: 2022, baseType: !2034, size: 64, offset: 576)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2726, file: !162, line: 2023, baseType: !2034, size: 64, offset: 640)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2036, file: !162, line: 3400, baseType: !2740, size: 832)
!2740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !162, line: 2430, size: 832, elements: !2741)
!2741 = !{!2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751}
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2740, file: !162, line: 2431, baseType: !2072, size: 192)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2740, file: !162, line: 2433, baseType: !2034, size: 64, offset: 192)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2740, file: !162, line: 2434, baseType: !2034, size: 64, offset: 256)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2740, file: !162, line: 2435, baseType: !2034, size: 64, offset: 320)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2740, file: !162, line: 2436, baseType: !2034, size: 64, offset: 384)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2740, file: !162, line: 2437, baseType: !2412, size: 64, offset: 448)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2740, file: !162, line: 2438, baseType: !2034, size: 64, offset: 512)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2740, file: !162, line: 2440, baseType: !2034, size: 64, offset: 576)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2740, file: !162, line: 2441, baseType: !2034, size: 64, offset: 640)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2740, file: !162, line: 2443, baseType: !2752, size: 128, offset: 704)
!2752 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !162, line: 182, baseType: !2753)
!2753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !162, line: 182, size: 128, elements: !2754)
!2754 = !{!2755}
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2753, file: !162, line: 182, baseType: !2417, size: 128)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2036, file: !162, line: 3401, baseType: !2757, size: 320)
!2757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !162, line: 3327, size: 320, elements: !2758)
!2758 = !{!2759, !2760, !2767}
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2757, file: !162, line: 3329, baseType: !2072, size: 192)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2757, file: !162, line: 3330, baseType: !2761, size: 64, offset: 192)
!2761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2762, size: 64)
!2762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !162, line: 3320, size: 192, elements: !2763)
!2763 = !{!2764, !2765, !2766}
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2762, file: !162, line: 3322, baseType: !2761, size: 64)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2762, file: !162, line: 3323, baseType: !2761, size: 64, offset: 64)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2762, file: !162, line: 3324, baseType: !2034, size: 64, offset: 128)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2757, file: !162, line: 3331, baseType: !2761, size: 64, offset: 256)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2036, file: !162, line: 3402, baseType: !2769, size: 256)
!2769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !162, line: 1540, size: 256, elements: !2770)
!2770 = !{!2771, !2772}
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2769, file: !162, line: 1541, baseType: !2072, size: 192)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2769, file: !162, line: 1542, baseType: !2773, size: 64, offset: 192)
!2773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2774, size: 64)
!2774 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !162, line: 1538, baseType: !2775)
!2775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !162, line: 1538, size: 192, elements: !2776)
!2776 = !{!2777}
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2775, file: !162, line: 1538, baseType: !2778, size: 192)
!2778 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !162, line: 1537, baseType: !2779)
!2779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !162, line: 1537, size: 192, elements: !2780)
!2780 = !{!2781, !2782, !2783}
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2779, file: !162, line: 1537, baseType: !9, size: 32)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2779, file: !162, line: 1537, baseType: !9, size: 32, offset: 32)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2779, file: !162, line: 1537, baseType: !2784, size: 128, offset: 64)
!2784 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2785, size: 128, elements: !1932)
!2785 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !162, line: 1535, baseType: !2786)
!2786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !162, line: 1532, size: 128, elements: !2787)
!2787 = !{!2788, !2789}
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2786, file: !162, line: 1533, baseType: !2034, size: 64)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2786, file: !162, line: 1534, baseType: !2034, size: 64, offset: 64)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2036, file: !162, line: 3403, baseType: !2791, size: 512)
!2791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !162, line: 1938, size: 512, elements: !2792)
!2792 = !{!2793, !2794, !2795, !2796, !2802, !2803, !2804}
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2791, file: !162, line: 1939, baseType: !2072, size: 192)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2791, file: !162, line: 1940, baseType: !2154, size: 32, offset: 192)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2791, file: !162, line: 1941, baseType: !161, size: 32, offset: 224)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2791, file: !162, line: 1946, baseType: !2797, size: 32, offset: 256)
!2797 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !162, line: 1942, size: 32, elements: !2798)
!2798 = !{!2799, !2800, !2801}
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2797, file: !162, line: 1943, baseType: !180, size: 32)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2797, file: !162, line: 1944, baseType: !187, size: 32)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2797, file: !162, line: 1945, baseType: !194, size: 32)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2791, file: !162, line: 1950, baseType: !2475, size: 64, offset: 320)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2791, file: !162, line: 1951, baseType: !2475, size: 64, offset: 384)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2791, file: !162, line: 1953, baseType: !2423, size: 64, offset: 448)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2036, file: !162, line: 3404, baseType: !2806, size: 1664)
!2806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !162, line: 3337, size: 1664, elements: !2807)
!2807 = !{!2808, !2809}
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2806, file: !162, line: 3338, baseType: !2072, size: 192)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2806, file: !162, line: 3341, baseType: !2810, size: 1472, offset: 192)
!2810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !789, line: 410, size: 1472, elements: !2811)
!2811 = !{!2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975}
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2810, file: !789, line: 412, baseType: !1917, size: 32)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2810, file: !789, line: 413, baseType: !1917, size: 32, offset: 32)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2810, file: !789, line: 414, baseType: !1917, size: 32, offset: 64)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2810, file: !789, line: 415, baseType: !1917, size: 32, offset: 96)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2810, file: !789, line: 416, baseType: !1917, size: 32, offset: 128)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2810, file: !789, line: 417, baseType: !1917, size: 32, offset: 160)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2810, file: !789, line: 418, baseType: !6, size: 8, offset: 192)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2810, file: !789, line: 419, baseType: !6, size: 8, offset: 200)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2810, file: !789, line: 420, baseType: !2821, size: 8, offset: 208)
!2821 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2810, file: !789, line: 421, baseType: !2821, size: 8, offset: 216)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2810, file: !789, line: 422, baseType: !2821, size: 8, offset: 224)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2810, file: !789, line: 423, baseType: !2821, size: 8, offset: 232)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2810, file: !789, line: 424, baseType: !2821, size: 8, offset: 240)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2810, file: !789, line: 425, baseType: !2821, size: 8, offset: 248)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2810, file: !789, line: 426, baseType: !2821, size: 8, offset: 256)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2810, file: !789, line: 427, baseType: !2821, size: 8, offset: 264)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2810, file: !789, line: 428, baseType: !2821, size: 8, offset: 272)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2810, file: !789, line: 429, baseType: !2821, size: 8, offset: 280)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2810, file: !789, line: 430, baseType: !2821, size: 8, offset: 288)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2810, file: !789, line: 431, baseType: !2821, size: 8, offset: 296)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2810, file: !789, line: 432, baseType: !2821, size: 8, offset: 304)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2810, file: !789, line: 433, baseType: !2821, size: 8, offset: 312)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2810, file: !789, line: 434, baseType: !2821, size: 8, offset: 320)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2810, file: !789, line: 435, baseType: !2821, size: 8, offset: 328)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2810, file: !789, line: 436, baseType: !2821, size: 8, offset: 336)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2810, file: !789, line: 437, baseType: !2821, size: 8, offset: 344)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2810, file: !789, line: 438, baseType: !2821, size: 8, offset: 352)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2810, file: !789, line: 439, baseType: !2821, size: 8, offset: 360)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2810, file: !789, line: 440, baseType: !2821, size: 8, offset: 368)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2810, file: !789, line: 441, baseType: !2821, size: 8, offset: 376)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2810, file: !789, line: 442, baseType: !2821, size: 8, offset: 384)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2810, file: !789, line: 443, baseType: !2821, size: 8, offset: 392)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2810, file: !789, line: 444, baseType: !2821, size: 8, offset: 400)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2810, file: !789, line: 445, baseType: !2821, size: 8, offset: 408)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2810, file: !789, line: 446, baseType: !2821, size: 8, offset: 416)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2810, file: !789, line: 447, baseType: !2821, size: 8, offset: 424)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2810, file: !789, line: 448, baseType: !2821, size: 8, offset: 432)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2810, file: !789, line: 449, baseType: !2821, size: 8, offset: 440)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2810, file: !789, line: 450, baseType: !2821, size: 8, offset: 448)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2810, file: !789, line: 451, baseType: !2821, size: 8, offset: 456)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2810, file: !789, line: 452, baseType: !2821, size: 8, offset: 464)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2810, file: !789, line: 453, baseType: !2821, size: 8, offset: 472)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2810, file: !789, line: 454, baseType: !2821, size: 8, offset: 480)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2810, file: !789, line: 455, baseType: !2821, size: 8, offset: 488)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2810, file: !789, line: 456, baseType: !2821, size: 8, offset: 496)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2810, file: !789, line: 457, baseType: !2821, size: 8, offset: 504)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2810, file: !789, line: 458, baseType: !2821, size: 8, offset: 512)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2810, file: !789, line: 459, baseType: !2821, size: 8, offset: 520)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2810, file: !789, line: 460, baseType: !2821, size: 8, offset: 528)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2810, file: !789, line: 461, baseType: !2821, size: 8, offset: 536)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2810, file: !789, line: 462, baseType: !2821, size: 8, offset: 544)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2810, file: !789, line: 463, baseType: !2821, size: 8, offset: 552)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2810, file: !789, line: 464, baseType: !2821, size: 8, offset: 560)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2810, file: !789, line: 465, baseType: !2821, size: 8, offset: 568)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2810, file: !789, line: 466, baseType: !2821, size: 8, offset: 576)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2810, file: !789, line: 467, baseType: !2821, size: 8, offset: 584)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2810, file: !789, line: 468, baseType: !2821, size: 8, offset: 592)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2810, file: !789, line: 469, baseType: !2821, size: 8, offset: 600)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2810, file: !789, line: 470, baseType: !2821, size: 8, offset: 608)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2810, file: !789, line: 471, baseType: !2821, size: 8, offset: 616)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2810, file: !789, line: 472, baseType: !2821, size: 8, offset: 624)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2810, file: !789, line: 473, baseType: !2821, size: 8, offset: 632)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2810, file: !789, line: 474, baseType: !2821, size: 8, offset: 640)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2810, file: !789, line: 475, baseType: !2821, size: 8, offset: 648)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2810, file: !789, line: 476, baseType: !2821, size: 8, offset: 656)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2810, file: !789, line: 477, baseType: !2821, size: 8, offset: 664)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2810, file: !789, line: 478, baseType: !2821, size: 8, offset: 672)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2810, file: !789, line: 479, baseType: !2821, size: 8, offset: 680)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2810, file: !789, line: 480, baseType: !2821, size: 8, offset: 688)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2810, file: !789, line: 481, baseType: !2821, size: 8, offset: 696)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2810, file: !789, line: 482, baseType: !2821, size: 8, offset: 704)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2810, file: !789, line: 483, baseType: !2821, size: 8, offset: 712)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2810, file: !789, line: 484, baseType: !2821, size: 8, offset: 720)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2810, file: !789, line: 485, baseType: !2821, size: 8, offset: 728)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2810, file: !789, line: 486, baseType: !2821, size: 8, offset: 736)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2810, file: !789, line: 487, baseType: !2821, size: 8, offset: 744)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2810, file: !789, line: 488, baseType: !2821, size: 8, offset: 752)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2810, file: !789, line: 489, baseType: !2821, size: 8, offset: 760)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2810, file: !789, line: 490, baseType: !2821, size: 8, offset: 768)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2810, file: !789, line: 491, baseType: !2821, size: 8, offset: 776)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2810, file: !789, line: 492, baseType: !2821, size: 8, offset: 784)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2810, file: !789, line: 493, baseType: !2821, size: 8, offset: 792)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2810, file: !789, line: 494, baseType: !2821, size: 8, offset: 800)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2810, file: !789, line: 495, baseType: !2821, size: 8, offset: 808)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2810, file: !789, line: 496, baseType: !2821, size: 8, offset: 816)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2810, file: !789, line: 497, baseType: !2821, size: 8, offset: 824)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2810, file: !789, line: 498, baseType: !2821, size: 8, offset: 832)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2810, file: !789, line: 499, baseType: !2821, size: 8, offset: 840)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2810, file: !789, line: 500, baseType: !2821, size: 8, offset: 848)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2810, file: !789, line: 501, baseType: !2821, size: 8, offset: 856)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2810, file: !789, line: 502, baseType: !2821, size: 8, offset: 864)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2810, file: !789, line: 503, baseType: !2821, size: 8, offset: 872)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2810, file: !789, line: 504, baseType: !2821, size: 8, offset: 880)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2810, file: !789, line: 505, baseType: !2821, size: 8, offset: 888)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2810, file: !789, line: 506, baseType: !2821, size: 8, offset: 896)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2810, file: !789, line: 507, baseType: !2821, size: 8, offset: 904)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2810, file: !789, line: 508, baseType: !2821, size: 8, offset: 912)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2810, file: !789, line: 509, baseType: !2821, size: 8, offset: 920)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2810, file: !789, line: 510, baseType: !2821, size: 8, offset: 928)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2810, file: !789, line: 511, baseType: !2821, size: 8, offset: 936)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2810, file: !789, line: 512, baseType: !2821, size: 8, offset: 944)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2810, file: !789, line: 513, baseType: !2821, size: 8, offset: 952)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2810, file: !789, line: 514, baseType: !2821, size: 8, offset: 960)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2810, file: !789, line: 515, baseType: !2821, size: 8, offset: 968)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2810, file: !789, line: 516, baseType: !2821, size: 8, offset: 976)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2810, file: !789, line: 517, baseType: !2821, size: 8, offset: 984)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2810, file: !789, line: 518, baseType: !2821, size: 8, offset: 992)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2810, file: !789, line: 519, baseType: !2821, size: 8, offset: 1000)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2810, file: !789, line: 520, baseType: !2821, size: 8, offset: 1008)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2810, file: !789, line: 521, baseType: !2821, size: 8, offset: 1016)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2810, file: !789, line: 522, baseType: !2821, size: 8, offset: 1024)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2810, file: !789, line: 523, baseType: !2821, size: 8, offset: 1032)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2810, file: !789, line: 524, baseType: !2821, size: 8, offset: 1040)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2810, file: !789, line: 525, baseType: !2821, size: 8, offset: 1048)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2810, file: !789, line: 526, baseType: !2821, size: 8, offset: 1056)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2810, file: !789, line: 527, baseType: !2821, size: 8, offset: 1064)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2810, file: !789, line: 528, baseType: !2821, size: 8, offset: 1072)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2810, file: !789, line: 529, baseType: !2821, size: 8, offset: 1080)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2810, file: !789, line: 530, baseType: !2821, size: 8, offset: 1088)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2810, file: !789, line: 531, baseType: !2821, size: 8, offset: 1096)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2810, file: !789, line: 532, baseType: !2821, size: 8, offset: 1104)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2810, file: !789, line: 533, baseType: !2821, size: 8, offset: 1112)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2810, file: !789, line: 534, baseType: !2821, size: 8, offset: 1120)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2810, file: !789, line: 535, baseType: !2821, size: 8, offset: 1128)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2810, file: !789, line: 536, baseType: !2821, size: 8, offset: 1136)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2810, file: !789, line: 537, baseType: !2821, size: 8, offset: 1144)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2810, file: !789, line: 538, baseType: !2821, size: 8, offset: 1152)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2810, file: !789, line: 539, baseType: !2821, size: 8, offset: 1160)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2810, file: !789, line: 540, baseType: !2821, size: 8, offset: 1168)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2810, file: !789, line: 541, baseType: !2821, size: 8, offset: 1176)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2810, file: !789, line: 542, baseType: !2821, size: 8, offset: 1184)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2810, file: !789, line: 543, baseType: !2821, size: 8, offset: 1192)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2810, file: !789, line: 544, baseType: !2821, size: 8, offset: 1200)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2810, file: !789, line: 545, baseType: !2821, size: 8, offset: 1208)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2810, file: !789, line: 546, baseType: !2821, size: 8, offset: 1216)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2810, file: !789, line: 547, baseType: !2821, size: 8, offset: 1224)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2810, file: !789, line: 548, baseType: !2821, size: 8, offset: 1232)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2810, file: !789, line: 549, baseType: !2821, size: 8, offset: 1240)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2810, file: !789, line: 550, baseType: !2821, size: 8, offset: 1248)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2810, file: !789, line: 551, baseType: !2821, size: 8, offset: 1256)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2810, file: !789, line: 552, baseType: !2821, size: 8, offset: 1264)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2810, file: !789, line: 553, baseType: !2821, size: 8, offset: 1272)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2810, file: !789, line: 554, baseType: !2821, size: 8, offset: 1280)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2810, file: !789, line: 555, baseType: !2821, size: 8, offset: 1288)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2810, file: !789, line: 556, baseType: !2821, size: 8, offset: 1296)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2810, file: !789, line: 557, baseType: !2821, size: 8, offset: 1304)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2810, file: !789, line: 558, baseType: !2821, size: 8, offset: 1312)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2810, file: !789, line: 559, baseType: !2821, size: 8, offset: 1320)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2810, file: !789, line: 560, baseType: !2821, size: 8, offset: 1328)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2810, file: !789, line: 561, baseType: !2821, size: 8, offset: 1336)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2810, file: !789, line: 562, baseType: !2821, size: 8, offset: 1344)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2810, file: !789, line: 563, baseType: !2821, size: 8, offset: 1352)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2810, file: !789, line: 564, baseType: !2821, size: 8, offset: 1360)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2810, file: !789, line: 565, baseType: !2821, size: 8, offset: 1368)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2810, file: !789, line: 566, baseType: !2821, size: 8, offset: 1376)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2810, file: !789, line: 567, baseType: !2821, size: 8, offset: 1384)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2810, file: !789, line: 568, baseType: !2821, size: 8, offset: 1392)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2810, file: !789, line: 569, baseType: !2821, size: 8, offset: 1400)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2810, file: !789, line: 570, baseType: !2821, size: 8, offset: 1408)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2810, file: !789, line: 571, baseType: !2821, size: 8, offset: 1416)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2810, file: !789, line: 572, baseType: !2821, size: 8, offset: 1424)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2810, file: !789, line: 573, baseType: !2821, size: 8, offset: 1432)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2810, file: !789, line: 574, baseType: !2821, size: 8, offset: 1440)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2036, file: !162, line: 3405, baseType: !2977, size: 384)
!2977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !162, line: 3352, size: 384, elements: !2978)
!2978 = !{!2979, !2980}
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2977, file: !162, line: 3353, baseType: !2072, size: 192)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2977, file: !162, line: 3356, baseType: !2981, size: 192, offset: 192)
!2981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !789, line: 578, size: 192, elements: !2982)
!2982 = !{!2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993}
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2981, file: !789, line: 580, baseType: !1917, size: 32)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2981, file: !789, line: 581, baseType: !1917, size: 32, offset: 32)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2981, file: !789, line: 582, baseType: !1917, size: 32, offset: 64)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2981, file: !789, line: 583, baseType: !1917, size: 32, offset: 96)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2981, file: !789, line: 584, baseType: !6, size: 8, offset: 128)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2981, file: !789, line: 585, baseType: !6, size: 8, offset: 136)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2981, file: !789, line: 586, baseType: !6, size: 8, offset: 144)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2981, file: !789, line: 587, baseType: !6, size: 8, offset: 152)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2981, file: !789, line: 588, baseType: !6, size: 8, offset: 160)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2981, file: !789, line: 589, baseType: !6, size: 8, offset: 168)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2981, file: !789, line: 590, baseType: !6, size: 8, offset: 176)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1914, file: !389, line: 178, baseType: !2449, size: 64)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1914, file: !389, line: 179, baseType: !2996, size: 64)
!2996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2997, size: 64)
!2997 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !389, line: 150, baseType: !2998)
!2998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !389, line: 142, size: 320, elements: !2999)
!2999 = !{!3000, !3001, !3002, !3003, !3004, !3005}
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2998, file: !389, line: 144, baseType: !2034, size: 64)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2998, file: !389, line: 145, baseType: !1893, size: 64, offset: 64)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2998, file: !389, line: 146, baseType: !1893, size: 64, offset: 128)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2998, file: !389, line: 147, baseType: !2657, size: 32, offset: 192)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2998, file: !389, line: 148, baseType: !9, size: 32, offset: 224)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2998, file: !389, line: 149, baseType: !6, size: 8, offset: 256)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1914, file: !389, line: 180, baseType: !3007, size: 64)
!3007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3008, size: 64)
!3008 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !389, line: 162, baseType: !3009)
!3009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !389, line: 159, size: 128, elements: !3010)
!3010 = !{!3011, !3012}
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3009, file: !389, line: 160, baseType: !2034, size: 64)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3009, file: !389, line: 161, baseType: !1888, size: 64, offset: 64)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1914, file: !389, line: 181, baseType: !3014, size: 64)
!3014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3015, size: 64)
!3015 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !389, line: 181, flags: DIFlagFwdDecl)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1909, file: !389, line: 317, baseType: !3017, size: 64)
!3017 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1888, size: 64, elements: !1932)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1909, file: !389, line: 318, baseType: !3019, size: 320)
!3019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !389, line: 188, size: 320, elements: !3020)
!3020 = !{!3021, !3023, !3078}
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3019, file: !389, line: 190, baseType: !3022, size: 192)
!3022 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1913, size: 192, elements: !2105)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3019, file: !389, line: 193, baseType: !3024, size: 64, offset: 192)
!3024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3025, size: 64)
!3025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !389, line: 206, size: 320, elements: !3026)
!3026 = !{!3027, !3063, !3064, !3065, !3077}
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3025, file: !389, line: 208, baseType: !3028, size: 64)
!3028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3029, size: 64)
!3029 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1894, line: 62, baseType: !3030)
!3030 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !3031, line: 538, size: 256, elements: !3032)
!3031 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3032 = !{!3033, !3037, !3043, !3054}
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3030, file: !3031, line: 539, baseType: !3034, size: 32)
!3034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !3031, line: 482, size: 32, elements: !3035)
!3035 = !{!3036}
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3034, file: !3031, line: 484, baseType: !9, size: 32)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !3030, file: !3031, line: 540, baseType: !3038, size: 192)
!3038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !3031, line: 488, size: 192, elements: !3039)
!3039 = !{!3040, !3041, !3042}
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3038, file: !3031, line: 489, baseType: !3034, size: 32)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3038, file: !3031, line: 492, baseType: !1920, size: 64, offset: 64)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3038, file: !3031, line: 496, baseType: !2034, size: 64, offset: 128)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !3030, file: !3031, line: 541, baseType: !3044, size: 256)
!3044 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !3031, line: 504, size: 256, elements: !3045)
!3045 = !{!3046, !3047, !3052, !3053}
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3044, file: !3031, line: 505, baseType: !3034, size: 32)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3044, file: !3031, line: 509, baseType: !3048, size: 64, offset: 64)
!3048 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !3031, line: 501, baseType: !3049)
!3049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3050, size: 64)
!3050 = !DISubroutineType(types: !3051)
!3051 = !{null, !2374}
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3044, file: !3031, line: 510, baseType: !2374, size: 64, offset: 128)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3044, file: !3031, line: 513, baseType: !3028, size: 64, offset: 192)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !3030, file: !3031, line: 542, baseType: !3055, size: 128)
!3055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !3031, line: 530, size: 128, elements: !3056)
!3056 = !{!3057, !3058}
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3055, file: !3031, line: 531, baseType: !3034, size: 32)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3055, file: !3031, line: 534, baseType: !3059, size: 64, offset: 64)
!3059 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !3031, line: 525, baseType: !3060)
!3060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3061, size: 64)
!3061 = !DISubroutineType(types: !3062)
!3062 = !{!6, !2034, !1920, !1988, !1988}
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3025, file: !389, line: 211, baseType: !9, size: 32, offset: 64)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3025, file: !389, line: 214, baseType: !1888, size: 64, offset: 128)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3025, file: !389, line: 224, baseType: !3066, size: 64, offset: 192)
!3066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3067, size: 64)
!3067 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !389, line: 202, baseType: !3068)
!3068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !389, line: 202, size: 128, elements: !3069)
!3069 = !{!3070}
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3068, file: !389, line: 202, baseType: !3071, size: 128)
!3071 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !389, line: 200, baseType: !3072)
!3072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !389, line: 200, size: 128, elements: !3073)
!3073 = !{!3074, !3075, !3076}
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3072, file: !389, line: 200, baseType: !9, size: 32)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3072, file: !389, line: 200, baseType: !9, size: 32, offset: 32)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3072, file: !389, line: 200, baseType: !1931, size: 64, offset: 64)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3025, file: !389, line: 234, baseType: !3066, size: 64, offset: 256)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3019, file: !389, line: 197, baseType: !1888, size: 64, offset: 256)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1909, file: !389, line: 319, baseType: !2094, size: 256)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1909, file: !389, line: 320, baseType: !2113, size: 192)
!3081 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !2387, line: 35, baseType: !1888)
!3082 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3084, size: 64)
!3084 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2094)
!3085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3086, size: 64)
!3086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3087, size: 64)
!3087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "expr", file: !3, line: 276, size: 384, elements: !3088)
!3088 = !{!3089, !3090, !3091, !3092, !3100, !3101}
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3087, file: !3, line: 279, baseType: !1893, size: 64)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "bitmap_index", scope: !3087, file: !3, line: 281, baseType: !1917, size: 32, offset: 64)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "next_same_hash", scope: !3087, file: !3, line: 283, baseType: !3086, size: 64, offset: 128)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "antic_occr", scope: !3087, file: !3, line: 289, baseType: !3093, size: 64, offset: 192)
!3093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3094, size: 64)
!3094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "occr", file: !3, line: 305, size: 192, elements: !3095)
!3095 = !{!3096, !3097, !3098, !3099}
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3094, file: !3, line: 308, baseType: !3093, size: 64)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !3094, file: !3, line: 310, baseType: !1893, size: 64, offset: 64)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "deleted_p", scope: !3094, file: !3, line: 312, baseType: !1922, size: 8, offset: 128)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "copied_p", scope: !3094, file: !3, line: 317, baseType: !1922, size: 8, offset: 136)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "avail_occr", scope: !3087, file: !3, line: 294, baseType: !3093, size: 64, offset: 256)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "reaching_reg", scope: !3087, file: !3, line: 298, baseType: !1893, size: 64, offset: 320)
!3102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3103, size: 64)
!3103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_avail_info", file: !3, line: 743, size: 128, elements: !3104)
!3104 = !{!3105, !3106, !3107}
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "last_bb", scope: !3103, file: !3, line: 745, baseType: !2448, size: 64)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "first_set", scope: !3103, file: !3, line: 746, baseType: !1917, size: 32, offset: 64)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "last_set", scope: !3103, file: !3, line: 747, baseType: !1917, size: 32, offset: 96)
!3108 = !DIDerivedType(tag: DW_TAG_typedef, name: "HARD_REG_ELT_TYPE", file: !3109, line: 42, baseType: !1988)
!3109 = !DIFile(filename: "./hard-reg-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3111, size: 64)
!3111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ls_expr", file: !3, line: 362, size: 576, elements: !3112)
!3112 = !{!3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122}
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3111, file: !3, line: 364, baseType: !3086, size: 64)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "pattern", scope: !3111, file: !3, line: 365, baseType: !1893, size: 64, offset: 64)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_regs", scope: !3111, file: !3, line: 366, baseType: !1893, size: 64, offset: 128)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "loads", scope: !3111, file: !3, line: 367, baseType: !1893, size: 64, offset: 192)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "stores", scope: !3111, file: !3, line: 368, baseType: !1893, size: 64, offset: 256)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3111, file: !3, line: 369, baseType: !3110, size: 64, offset: 320)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "invalid", scope: !3111, file: !3, line: 370, baseType: !1917, size: 32, offset: 384)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3111, file: !3, line: 371, baseType: !1917, size: 32, offset: 416)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "hash_index", scope: !3111, file: !3, line: 372, baseType: !9, size: 32, offset: 448)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "reaching_reg", scope: !3111, file: !3, line: 373, baseType: !1893, size: 64, offset: 512)
!3123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!3124 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1894, line: 47, baseType: !1972)
!3125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3126, size: 64)
!3126 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3111)
!3127 = !{!0, !3128, !3156, !3158, !3160, !3174, !3176, !3181, !3183, !3185, !3187, !3189, !3191, !3193, !3195, !3198, !3200, !3202, !3204, !3206, !3208, !3216, !3218, !3226, !3228, !3230, !3235, !3237, !3239, !3241, !3255, !3257, !3259, !3261, !3263, !3265, !3267, !3269, !3271, !3273, !3275, !3277, !3279, !3281, !3283, !3285, !3294, !3296, !3298, !3300}
!3128 = !DIGlobalVariableExpression(var: !3129, expr: !DIExpression())
!3129 = distinct !DIGlobalVariable(name: "pass_rtl_cprop", scope: !136, file: !3, line: 5108, type: !3130, isLocal: false, isDefinition: true)
!3130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !532, line: 162, size: 640, elements: !3131)
!3131 = !{!3132}
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3130, file: !532, line: 164, baseType: !3133, size: 640)
!3133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !532, line: 114, size: 640, elements: !3134)
!3134 = !{!3135, !3136, !3137, !3141, !3145, !3147, !3148, !3149, !3151, !3152, !3153, !3154, !3155}
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3133, file: !532, line: 117, baseType: !531, size: 32)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3133, file: !532, line: 121, baseType: !1920, size: 64, offset: 64)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3133, file: !532, line: 125, baseType: !3138, size: 64, offset: 128)
!3138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3139, size: 64)
!3139 = !DISubroutineType(types: !3140)
!3140 = !{!6}
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3133, file: !532, line: 130, baseType: !3142, size: 64, offset: 192)
!3142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3143, size: 64)
!3143 = !DISubroutineType(types: !3144)
!3144 = !{!9}
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3133, file: !532, line: 133, baseType: !3146, size: 64, offset: 256)
!3146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3133, size: 64)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3133, file: !532, line: 136, baseType: !3146, size: 64, offset: 320)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3133, file: !532, line: 139, baseType: !1917, size: 32, offset: 384)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3133, file: !532, line: 143, baseType: !3150, size: 32, offset: 416)
!3150 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !539, line: 80, baseType: !538)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3133, file: !532, line: 146, baseType: !9, size: 32, offset: 448)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3133, file: !532, line: 147, baseType: !9, size: 32, offset: 480)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3133, file: !532, line: 148, baseType: !9, size: 32, offset: 512)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3133, file: !532, line: 151, baseType: !9, size: 32, offset: 544)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3133, file: !532, line: 152, baseType: !9, size: 32, offset: 576)
!3156 = !DIGlobalVariableExpression(var: !3157, expr: !DIExpression())
!3157 = distinct !DIGlobalVariable(name: "pass_rtl_pre", scope: !136, file: !3, line: 5129, type: !3130, isLocal: false, isDefinition: true)
!3158 = !DIGlobalVariableExpression(var: !3159, expr: !DIExpression())
!3159 = distinct !DIGlobalVariable(name: "pass_rtl_hoist", scope: !136, file: !3, line: 5150, type: !3130, isLocal: false, isDefinition: true)
!3160 = !DIGlobalVariableExpression(var: !3161, expr: !DIExpression())
!3161 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_gcse_h", scope: !136, file: !3162, line: 24, type: !3163, isLocal: false, isDefinition: true)
!3162 = !DIFile(filename: "./gt-gcse.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3163 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3164, size: 640, elements: !1989)
!3164 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3165)
!3165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !3166, line: 69, size: 320, elements: !3167)
!3166 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3167 = !{!3168, !3169, !3170, !3171, !3173}
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3165, file: !3166, line: 70, baseType: !1887, size: 64)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3165, file: !3166, line: 71, baseType: !2386, size: 64, offset: 64)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3165, file: !3166, line: 72, baseType: !2386, size: 64, offset: 128)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3165, file: !3166, line: 73, baseType: !3172, size: 64, offset: 192)
!3172 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !3166, line: 65, baseType: !1889)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3165, file: !3166, line: 74, baseType: !3172, size: 64, offset: 256)
!3174 = !DIGlobalVariableExpression(var: !3175, expr: !DIExpression())
!3175 = distinct !DIGlobalVariable(name: "flag_rerun_cse_after_global_opts", scope: !136, file: !3, line: 267, type: !1917, isLocal: false, isDefinition: true)
!3176 = !DIGlobalVariableExpression(var: !3177, expr: !DIExpression())
!3177 = distinct !DIGlobalVariable(name: "can_copy", scope: !136, file: !3, line: 545, type: !3178, isLocal: true, isDefinition: true)
!3178 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1922, size: 696, elements: !3179)
!3179 = !{!3180}
!3180 = !DISubrange(count: 87)
!3181 = !DIGlobalVariableExpression(var: !3182, expr: !DIExpression())
!3182 = distinct !DIGlobalVariable(name: "test_insn", scope: !136, file: !3, line: 786, type: !1893, isLocal: true, isDefinition: true)
!3183 = !DIGlobalVariableExpression(var: !3184, expr: !DIExpression())
!3184 = distinct !DIGlobalVariable(name: "local_const_prop_count", scope: !136, file: !3, line: 414, type: !1917, isLocal: true, isDefinition: true)
!3185 = !DIGlobalVariableExpression(var: !3186, expr: !DIExpression())
!3186 = distinct !DIGlobalVariable(name: "global_const_prop_count", scope: !136, file: !3, line: 418, type: !1917, isLocal: true, isDefinition: true)
!3187 = !DIGlobalVariableExpression(var: !3188, expr: !DIExpression())
!3188 = distinct !DIGlobalVariable(name: "local_copy_prop_count", scope: !136, file: !3, line: 416, type: !1917, isLocal: true, isDefinition: true)
!3189 = !DIGlobalVariableExpression(var: !3190, expr: !DIExpression())
!3190 = distinct !DIGlobalVariable(name: "global_copy_prop_count", scope: !136, file: !3, line: 420, type: !1917, isLocal: true, isDefinition: true)
!3191 = !DIGlobalVariableExpression(var: !3192, expr: !DIExpression())
!3192 = distinct !DIGlobalVariable(name: "bytes_used", scope: !136, file: !3, line: 407, type: !1917, isLocal: true, isDefinition: true)
!3193 = !DIGlobalVariableExpression(var: !3194, expr: !DIExpression())
!3194 = distinct !DIGlobalVariable(name: "gcse_obstack", scope: !136, file: !3, line: 270, type: !2001, isLocal: true, isDefinition: true)
!3195 = !DIGlobalVariableExpression(var: !3196, expr: !DIExpression())
!3196 = distinct !DIGlobalVariable(name: "reg_set_bitmap", scope: !136, file: !3, line: 388, type: !3197, isLocal: true, isDefinition: true)
!3197 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset", file: !146, line: 37, baseType: !3124)
!3198 = !DIGlobalVariableExpression(var: !3199, expr: !DIExpression())
!3199 = distinct !DIGlobalVariable(name: "modify_mem_list", scope: !136, file: !3, line: 392, type: !1892, isLocal: true, isDefinition: true)
!3200 = !DIGlobalVariableExpression(var: !3201, expr: !DIExpression())
!3201 = distinct !DIGlobalVariable(name: "canon_modify_mem_list", scope: !136, file: !3, line: 396, type: !1892, isLocal: true, isDefinition: true)
!3202 = !DIGlobalVariableExpression(var: !3203, expr: !DIExpression())
!3203 = distinct !DIGlobalVariable(name: "modify_mem_list_set", scope: !136, file: !3, line: 393, type: !3124, isLocal: true, isDefinition: true)
!3204 = !DIGlobalVariableExpression(var: !3205, expr: !DIExpression())
!3205 = distinct !DIGlobalVariable(name: "blocks_with_calls", scope: !136, file: !3, line: 400, type: !3124, isLocal: true, isDefinition: true)
!3206 = !DIGlobalVariableExpression(var: !3207, expr: !DIExpression())
!3207 = distinct !DIGlobalVariable(name: "reg_use_count", scope: !136, file: !3, line: 2175, type: !1917, isLocal: true, isDefinition: true)
!3208 = !DIGlobalVariableExpression(var: !3209, expr: !DIExpression())
!3209 = distinct !DIGlobalVariable(name: "reg_use_table", scope: !136, file: !3, line: 2172, type: !3210, isLocal: true, isDefinition: true)
!3210 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3211, size: 512, elements: !3214)
!3211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_use", file: !3, line: 272, size: 64, elements: !3212)
!3212 = !{!3213}
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "reg_rtx", scope: !3211, file: !3, line: 272, baseType: !1893, size: 64)
!3214 = !{!3215}
!3215 = !DISubrange(count: 8)
!3216 = !DIGlobalVariableExpression(var: !3217, expr: !DIExpression())
!3217 = distinct !DIGlobalVariable(name: "implicit_sets", scope: !136, file: !3, line: 377, type: !1892, isLocal: true, isDefinition: true)
!3218 = !DIGlobalVariableExpression(var: !3219, expr: !DIExpression())
!3219 = distinct !DIGlobalVariable(name: "set_hash_table", scope: !136, file: !3, line: 349, type: !3220, isLocal: true, isDefinition: true)
!3220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hash_table_d", file: !3, line: 329, size: 192, elements: !3221)
!3221 = !{!3222, !3223, !3224, !3225}
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "table", scope: !3220, file: !3, line: 333, baseType: !3085, size: 64)
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3220, file: !3, line: 336, baseType: !9, size: 32, offset: 64)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "n_elems", scope: !3220, file: !3, line: 339, baseType: !9, size: 32, offset: 96)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "set_p", scope: !3220, file: !3, line: 342, baseType: !1917, size: 32, offset: 128)
!3226 = !DIGlobalVariableExpression(var: !3227, expr: !DIExpression())
!3227 = distinct !DIGlobalVariable(name: "reg_avail_info", scope: !136, file: !3, line: 750, type: !3102, isLocal: true, isDefinition: true)
!3228 = !DIGlobalVariableExpression(var: !3229, expr: !DIExpression())
!3229 = distinct !DIGlobalVariable(name: "current_bb", scope: !136, file: !3, line: 751, type: !2448, isLocal: true, isDefinition: true)
!3230 = !DIGlobalVariableExpression(var: !3231, expr: !DIExpression())
!3231 = distinct !DIGlobalVariable(name: "gcse_mem_operand", scope: !136, file: !3, line: 934, type: !3232, isLocal: true, isDefinition: true)
!3232 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !1894, line: 51, baseType: !3233)
!3233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3234, size: 64)
!3234 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1896)
!3235 = !DIGlobalVariableExpression(var: !3236, expr: !DIExpression())
!3236 = distinct !DIGlobalVariable(name: "gcse_mems_conflict_p", scope: !136, file: !3, line: 928, type: !1917, isLocal: true, isDefinition: true)
!3237 = !DIGlobalVariableExpression(var: !3238, expr: !DIExpression())
!3238 = distinct !DIGlobalVariable(name: "pre_ldst_mems", scope: !136, file: !3, line: 380, type: !3110, isLocal: true, isDefinition: true)
!3239 = !DIGlobalVariableExpression(var: !3240, expr: !DIExpression())
!3240 = distinct !DIGlobalVariable(name: "pre_ldst_table", scope: !136, file: !3, line: 383, type: !2364, isLocal: true, isDefinition: true)
!3241 = !DIGlobalVariableExpression(var: !3242, expr: !DIExpression())
!3242 = distinct !DIGlobalVariable(name: "cprop_pavloc", scope: !136, file: !3, line: 1990, type: !3243, isLocal: true, isDefinition: true)
!3243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3244, size: 64)
!3244 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3245, line: 45, baseType: !3246)
!3245 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3247, size: 64)
!3247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3245, line: 39, size: 192, elements: !3248)
!3248 = !{!3249, !3251, !3252, !3253}
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3247, file: !3245, line: 41, baseType: !3250, size: 64)
!3250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3247, file: !3245, line: 42, baseType: !9, size: 32, offset: 64)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3247, file: !3245, line: 43, baseType: !9, size: 32, offset: 96)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3247, file: !3245, line: 44, baseType: !3254, size: 64, offset: 128)
!3254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1988, size: 64, elements: !1932)
!3255 = !DIGlobalVariableExpression(var: !3256, expr: !DIExpression())
!3256 = distinct !DIGlobalVariable(name: "cprop_absaltered", scope: !136, file: !3, line: 1991, type: !3243, isLocal: true, isDefinition: true)
!3257 = !DIGlobalVariableExpression(var: !3258, expr: !DIExpression())
!3258 = distinct !DIGlobalVariable(name: "cprop_avin", scope: !136, file: !3, line: 1994, type: !3243, isLocal: true, isDefinition: true)
!3259 = !DIGlobalVariableExpression(var: !3260, expr: !DIExpression())
!3260 = distinct !DIGlobalVariable(name: "cprop_avout", scope: !136, file: !3, line: 1995, type: !3243, isLocal: true, isDefinition: true)
!3261 = !DIGlobalVariableExpression(var: !3262, expr: !DIExpression())
!3262 = distinct !DIGlobalVariable(name: "bypass_last_basic_block", scope: !136, file: !3, line: 2882, type: !1917, isLocal: true, isDefinition: true)
!3263 = !DIGlobalVariableExpression(var: !3264, expr: !DIExpression())
!3264 = distinct !DIGlobalVariable(name: "gcse_subst_count", scope: !136, file: !3, line: 410, type: !1917, isLocal: true, isDefinition: true)
!3265 = !DIGlobalVariableExpression(var: !3266, expr: !DIExpression())
!3266 = distinct !DIGlobalVariable(name: "gcse_create_count", scope: !136, file: !3, line: 412, type: !1917, isLocal: true, isDefinition: true)
!3267 = !DIGlobalVariableExpression(var: !3268, expr: !DIExpression())
!3268 = distinct !DIGlobalVariable(name: "expr_hash_table", scope: !136, file: !3, line: 346, type: !3220, isLocal: true, isDefinition: true)
!3269 = !DIGlobalVariableExpression(var: !3270, expr: !DIExpression())
!3270 = distinct !DIGlobalVariable(name: "transp", scope: !136, file: !3, line: 3169, type: !3243, isLocal: true, isDefinition: true)
!3271 = !DIGlobalVariableExpression(var: !3272, expr: !DIExpression())
!3272 = distinct !DIGlobalVariable(name: "comp", scope: !136, file: !3, line: 3177, type: !3243, isLocal: true, isDefinition: true)
!3273 = !DIGlobalVariableExpression(var: !3274, expr: !DIExpression())
!3274 = distinct !DIGlobalVariable(name: "antloc", scope: !136, file: !3, line: 3180, type: !3243, isLocal: true, isDefinition: true)
!3275 = !DIGlobalVariableExpression(var: !3276, expr: !DIExpression())
!3276 = distinct !DIGlobalVariable(name: "pre_optimal", scope: !136, file: !3, line: 3184, type: !3243, isLocal: true, isDefinition: true)
!3277 = !DIGlobalVariableExpression(var: !3278, expr: !DIExpression())
!3278 = distinct !DIGlobalVariable(name: "pre_redundant", scope: !136, file: !3, line: 3187, type: !3243, isLocal: true, isDefinition: true)
!3279 = !DIGlobalVariableExpression(var: !3280, expr: !DIExpression())
!3280 = distinct !DIGlobalVariable(name: "pre_insert_map", scope: !136, file: !3, line: 3190, type: !3243, isLocal: true, isDefinition: true)
!3281 = !DIGlobalVariableExpression(var: !3282, expr: !DIExpression())
!3282 = distinct !DIGlobalVariable(name: "pre_delete_map", scope: !136, file: !3, line: 3193, type: !3243, isLocal: true, isDefinition: true)
!3283 = !DIGlobalVariableExpression(var: !3284, expr: !DIExpression())
!3284 = distinct !DIGlobalVariable(name: "ae_kill", scope: !136, file: !3, line: 423, type: !3243, isLocal: true, isDefinition: true)
!3285 = !DIGlobalVariableExpression(var: !3286, expr: !DIExpression())
!3286 = distinct !DIGlobalVariable(name: "edge_list", scope: !136, file: !3, line: 3196, type: !3287, isLocal: true, isDefinition: true)
!3287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3288, size: 64)
!3288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_list", file: !146, line: 572, size: 128, elements: !3289)
!3289 = !{!3290, !3291, !3292}
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "num_blocks", scope: !3288, file: !146, line: 574, baseType: !1917, size: 32)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "num_edges", scope: !3288, file: !146, line: 575, baseType: !1917, size: 32, offset: 32)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "index_to_edge", scope: !3288, file: !146, line: 576, baseType: !3293, size: 64, offset: 64)
!3293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2465, size: 64)
!3294 = !DIGlobalVariableExpression(var: !3295, expr: !DIExpression())
!3295 = distinct !DIGlobalVariable(name: "hoist_vbein", scope: !136, file: !3, line: 4098, type: !3243, isLocal: true, isDefinition: true)
!3296 = !DIGlobalVariableExpression(var: !3297, expr: !DIExpression())
!3297 = distinct !DIGlobalVariable(name: "hoist_vbeout", scope: !136, file: !3, line: 4099, type: !3243, isLocal: true, isDefinition: true)
!3298 = !DIGlobalVariableExpression(var: !3299, expr: !DIExpression())
!3299 = distinct !DIGlobalVariable(name: "hoist_exprs", scope: !136, file: !3, line: 4102, type: !3243, isLocal: true, isDefinition: true)
!3300 = !DIGlobalVariableExpression(var: !3301, expr: !DIExpression())
!3301 = distinct !DIGlobalVariable(name: "transpout", scope: !136, file: !3, line: 3174, type: !3243, isLocal: true, isDefinition: true)
!3302 = !{}
!3303 = !{i32 7, !"Dwarf Version", i32 4}
!3304 = !{i32 2, !"Debug Info Version", i32 3}
!3305 = !{i32 1, !"wchar_size", i32 4}
!3306 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3307 = !DILocalVariable(name: "mode", arg: 1, scope: !2, file: !3, line: 580, type: !7)
!3308 = !DILocation(line: 580, column: 31, scope: !2)
!3309 = !DILocation(line: 584, column: 9, scope: !3310)
!3310 = distinct !DILexicalBlock(scope: !2, file: !3, line: 584, column: 7)
!3311 = !DILocation(line: 584, column: 7, scope: !2)
!3312 = !DILocation(line: 586, column: 7, scope: !3313)
!3313 = distinct !DILexicalBlock(scope: !3310, file: !3, line: 585, column: 5)
!3314 = !DILocation(line: 587, column: 23, scope: !3313)
!3315 = !DILocation(line: 588, column: 5, scope: !3313)
!3316 = !DILocation(line: 590, column: 19, scope: !2)
!3317 = !DILocation(line: 590, column: 10, scope: !2)
!3318 = !DILocation(line: 590, column: 25, scope: !2)
!3319 = !DILocation(line: 590, column: 3, scope: !2)
!3320 = distinct !DISubprogram(name: "compute_can_copy", scope: !3, file: !3, line: 550, type: !3321, scopeLine: 551, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3321 = !DISubroutineType(types: !3322)
!3322 = !{null}
!3323 = !DILocalVariable(name: "i", scope: !3320, file: !3, line: 552, type: !1917)
!3324 = !DILocation(line: 552, column: 7, scope: !3320)
!3325 = !DILocation(line: 556, column: 3, scope: !3320)
!3326 = !DILocation(line: 558, column: 3, scope: !3320)
!3327 = !DILocation(line: 559, column: 10, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3320, file: !3, line: 559, column: 3)
!3329 = !DILocation(line: 559, column: 8, scope: !3328)
!3330 = !DILocation(line: 559, column: 15, scope: !3331)
!3331 = distinct !DILexicalBlock(scope: !3328, file: !3, line: 559, column: 3)
!3332 = !DILocation(line: 559, column: 17, scope: !3331)
!3333 = !DILocation(line: 559, column: 3, scope: !3328)
!3334 = !DILocation(line: 560, column: 9, scope: !3335)
!3335 = distinct !DILexicalBlock(scope: !3331, file: !3, line: 560, column: 9)
!3336 = !DILocation(line: 560, column: 28, scope: !3335)
!3337 = !DILocation(line: 560, column: 9, scope: !3331)
!3338 = !DILocation(line: 563, column: 11, scope: !3339)
!3339 = distinct !DILexicalBlock(scope: !3335, file: !3, line: 561, column: 7)
!3340 = !DILocation(line: 563, column: 2, scope: !3339)
!3341 = !DILocation(line: 563, column: 14, scope: !3339)
!3342 = !DILocation(line: 570, column: 7, scope: !3339)
!3343 = !DILocation(line: 572, column: 16, scope: !3335)
!3344 = !DILocation(line: 572, column: 7, scope: !3335)
!3345 = !DILocation(line: 572, column: 19, scope: !3335)
!3346 = !DILocation(line: 560, column: 31, scope: !3335)
!3347 = !DILocation(line: 559, column: 39, scope: !3331)
!3348 = !DILocation(line: 559, column: 3, scope: !3331)
!3349 = distinct !{!3349, !3333, !3350}
!3350 = !DILocation(line: 572, column: 21, scope: !3328)
!3351 = !DILocation(line: 574, column: 3, scope: !3320)
!3352 = !DILocation(line: 575, column: 1, scope: !3320)
!3353 = distinct !DISubprogram(name: "can_assign_to_reg_without_clobbers_p", scope: !3, file: !3, line: 801, type: !3354, scopeLine: 802, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3354 = !DISubroutineType(types: !3355)
!3355 = !{!6, !1893}
!3356 = !DILocalVariable(name: "x", arg: 1, scope: !3353, file: !3, line: 801, type: !1893)
!3357 = !DILocation(line: 801, column: 43, scope: !3353)
!3358 = !DILocalVariable(name: "num_clobbers", scope: !3353, file: !3, line: 803, type: !1917)
!3359 = !DILocation(line: 803, column: 7, scope: !3353)
!3360 = !DILocalVariable(name: "icode", scope: !3353, file: !3, line: 804, type: !1917)
!3361 = !DILocation(line: 804, column: 7, scope: !3353)
!3362 = !DILocation(line: 807, column: 24, scope: !3363)
!3363 = distinct !DILexicalBlock(scope: !3353, file: !3, line: 807, column: 7)
!3364 = !DILocation(line: 807, column: 27, scope: !3363)
!3365 = !DILocation(line: 807, column: 7, scope: !3363)
!3366 = !DILocation(line: 807, column: 7, scope: !3353)
!3367 = !DILocation(line: 808, column: 5, scope: !3363)
!3368 = !DILocation(line: 809, column: 12, scope: !3369)
!3369 = distinct !DILexicalBlock(scope: !3363, file: !3, line: 809, column: 12)
!3370 = !DILocation(line: 809, column: 25, scope: !3369)
!3371 = !DILocation(line: 809, column: 12, scope: !3363)
!3372 = !DILocation(line: 810, column: 5, scope: !3369)
!3373 = !DILocation(line: 814, column: 7, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3353, file: !3, line: 814, column: 7)
!3375 = !DILocation(line: 814, column: 17, scope: !3374)
!3376 = !DILocation(line: 814, column: 7, scope: !3353)
!3377 = !DILocation(line: 817, column: 19, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !3374, file: !3, line: 815, column: 5)
!3379 = !DILocation(line: 817, column: 4, scope: !3378)
!3380 = !DILocation(line: 817, column: 2, scope: !3378)
!3381 = !DILocation(line: 821, column: 31, scope: !3378)
!3382 = !DILocation(line: 821, column: 53, scope: !3378)
!3383 = !DILocation(line: 821, column: 7, scope: !3378)
!3384 = !DILocation(line: 821, column: 29, scope: !3378)
!3385 = !DILocation(line: 822, column: 5, scope: !3378)
!3386 = !DILocation(line: 826, column: 3, scope: !3353)
!3387 = !DILocation(line: 827, column: 35, scope: !3353)
!3388 = !DILocation(line: 827, column: 3, scope: !3353)
!3389 = !DILocation(line: 827, column: 33, scope: !3353)
!3390 = !DILocation(line: 829, column: 18, scope: !3353)
!3391 = !DILocation(line: 829, column: 39, scope: !3353)
!3392 = !DILocation(line: 829, column: 11, scope: !3353)
!3393 = !DILocation(line: 829, column: 9, scope: !3353)
!3394 = !DILocation(line: 830, column: 7, scope: !3395)
!3395 = distinct !DILexicalBlock(scope: !3353, file: !3, line: 830, column: 7)
!3396 = !DILocation(line: 830, column: 13, scope: !3395)
!3397 = !DILocation(line: 830, column: 7, scope: !3353)
!3398 = !DILocation(line: 831, column: 5, scope: !3395)
!3399 = !DILocation(line: 833, column: 7, scope: !3400)
!3400 = distinct !DILexicalBlock(scope: !3353, file: !3, line: 833, column: 7)
!3401 = !DILocation(line: 833, column: 20, scope: !3400)
!3402 = !DILocation(line: 833, column: 24, scope: !3400)
!3403 = !DILocation(line: 833, column: 54, scope: !3400)
!3404 = !DILocation(line: 833, column: 27, scope: !3400)
!3405 = !DILocation(line: 833, column: 7, scope: !3353)
!3406 = !DILocation(line: 834, column: 5, scope: !3400)
!3407 = !DILocation(line: 836, column: 15, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3353, file: !3, line: 836, column: 7)
!3409 = !DILocation(line: 836, column: 7, scope: !3408)
!3410 = !DILocation(line: 836, column: 34, scope: !3408)
!3411 = !DILocation(line: 836, column: 45, scope: !3408)
!3412 = !DILocation(line: 836, column: 65, scope: !3408)
!3413 = !DILocation(line: 836, column: 37, scope: !3408)
!3414 = !DILocation(line: 836, column: 7, scope: !3353)
!3415 = !DILocation(line: 837, column: 5, scope: !3408)
!3416 = !DILocation(line: 839, column: 3, scope: !3353)
!3417 = !DILocation(line: 840, column: 1, scope: !3353)
!3418 = distinct !DISubprogram(name: "fis_get_condition", scope: !3, file: !3, line: 2780, type: !3419, scopeLine: 2781, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3419 = !DISubroutineType(types: !3420)
!3420 = !{!1893, !1893}
!3421 = !DILocalVariable(name: "jump", arg: 1, scope: !3418, file: !3, line: 2780, type: !1893)
!3422 = !DILocation(line: 2780, column: 24, scope: !3418)
!3423 = !DILocation(line: 2782, column: 25, scope: !3418)
!3424 = !DILocation(line: 2782, column: 10, scope: !3418)
!3425 = !DILocation(line: 2782, column: 3, scope: !3418)
!3426 = distinct !DISubprogram(name: "gate_rtl_cprop", scope: !3, file: !3, line: 5052, type: !3139, scopeLine: 5053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3427 = !DILocation(line: 5054, column: 10, scope: !3426)
!3428 = !DILocation(line: 5054, column: 19, scope: !3426)
!3429 = !DILocation(line: 5054, column: 23, scope: !3426)
!3430 = !DILocation(line: 5054, column: 26, scope: !3426)
!3431 = !DILocation(line: 5055, column: 5, scope: !3426)
!3432 = !DILocation(line: 5055, column: 9, scope: !3426)
!3433 = !DILocation(line: 5055, column: 15, scope: !3426)
!3434 = !DILocation(line: 5056, column: 5, scope: !3426)
!3435 = !DILocation(line: 5056, column: 8, scope: !3426)
!3436 = !DILocation(line: 0, scope: !3426)
!3437 = !DILocation(line: 5054, column: 3, scope: !3426)
!3438 = distinct !DISubprogram(name: "execute_rtl_cprop", scope: !3, file: !3, line: 5060, type: !3143, scopeLine: 5061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3439 = !DILocation(line: 5062, column: 3, scope: !3438)
!3440 = !DILocation(line: 5063, column: 3, scope: !3438)
!3441 = !DILocation(line: 5064, column: 3, scope: !3438)
!3442 = !DILocation(line: 5065, column: 39, scope: !3438)
!3443 = !DILocation(line: 5065, column: 36, scope: !3438)
!3444 = !DILocation(line: 5066, column: 3, scope: !3438)
!3445 = distinct !DISubprogram(name: "gate_rtl_pre", scope: !3, file: !3, line: 5070, type: !3139, scopeLine: 5071, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3446 = !DILocation(line: 5072, column: 10, scope: !3445)
!3447 = !DILocation(line: 5072, column: 19, scope: !3445)
!3448 = !DILocation(line: 5072, column: 23, scope: !3445)
!3449 = !DILocation(line: 5072, column: 26, scope: !3445)
!3450 = !DILocation(line: 5073, column: 5, scope: !3445)
!3451 = !DILocation(line: 5073, column: 9, scope: !3445)
!3452 = !DILocation(line: 5073, column: 15, scope: !3445)
!3453 = !DILocation(line: 5074, column: 5, scope: !3445)
!3454 = !DILocation(line: 5074, column: 39, scope: !3445)
!3455 = !DILocation(line: 5074, column: 8, scope: !3445)
!3456 = !DILocation(line: 5075, column: 5, scope: !3445)
!3457 = !DILocation(line: 5075, column: 8, scope: !3445)
!3458 = !DILocation(line: 0, scope: !3445)
!3459 = !DILocation(line: 5072, column: 3, scope: !3445)
!3460 = distinct !DISubprogram(name: "execute_rtl_pre", scope: !3, file: !3, line: 5079, type: !3143, scopeLine: 5080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3461 = !DILocation(line: 5081, column: 3, scope: !3460)
!3462 = !DILocation(line: 5082, column: 3, scope: !3460)
!3463 = !DILocation(line: 5083, column: 39, scope: !3460)
!3464 = !DILocation(line: 5083, column: 36, scope: !3460)
!3465 = !DILocation(line: 5084, column: 3, scope: !3460)
!3466 = distinct !DISubprogram(name: "gate_rtl_hoist", scope: !3, file: !3, line: 5088, type: !3139, scopeLine: 5089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3467 = !DILocation(line: 5090, column: 10, scope: !3466)
!3468 = !DILocation(line: 5090, column: 19, scope: !3466)
!3469 = !DILocation(line: 5090, column: 23, scope: !3466)
!3470 = !DILocation(line: 5090, column: 26, scope: !3466)
!3471 = !DILocation(line: 5091, column: 5, scope: !3466)
!3472 = !DILocation(line: 5091, column: 9, scope: !3466)
!3473 = !DILocation(line: 5091, column: 15, scope: !3466)
!3474 = !DILocation(line: 5095, column: 5, scope: !3466)
!3475 = !DILocation(line: 5095, column: 38, scope: !3466)
!3476 = !DILocation(line: 5095, column: 8, scope: !3466)
!3477 = !DILocation(line: 5096, column: 5, scope: !3466)
!3478 = !DILocation(line: 5096, column: 8, scope: !3466)
!3479 = !DILocation(line: 0, scope: !3466)
!3480 = !DILocation(line: 5090, column: 3, scope: !3466)
!3481 = distinct !DISubprogram(name: "execute_rtl_hoist", scope: !3, file: !3, line: 5100, type: !3143, scopeLine: 5101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3482 = !DILocation(line: 5102, column: 3, scope: !3481)
!3483 = !DILocation(line: 5103, column: 3, scope: !3481)
!3484 = !DILocation(line: 5104, column: 39, scope: !3481)
!3485 = !DILocation(line: 5104, column: 36, scope: !3481)
!3486 = !DILocation(line: 5105, column: 3, scope: !3481)
!3487 = distinct !DISubprogram(name: "one_cprop_pass", scope: !3, file: !3, line: 4944, type: !3488, scopeLine: 4945, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3488 = !DISubroutineType(types: !3489)
!3489 = !{!1917}
!3490 = !DILocalVariable(name: "changed", scope: !3487, file: !3, line: 4946, type: !1917)
!3491 = !DILocation(line: 4946, column: 7, scope: !3487)
!3492 = !DILocation(line: 4949, column: 7, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 4949, column: 7)
!3494 = !DILocation(line: 4949, column: 22, scope: !3493)
!3495 = !DILocation(line: 4950, column: 7, scope: !3493)
!3496 = !DILocation(line: 4950, column: 10, scope: !3493)
!3497 = !DILocation(line: 4949, column: 7, scope: !3487)
!3498 = !DILocation(line: 4951, column: 5, scope: !3493)
!3499 = !DILocation(line: 4953, column: 52, scope: !3487)
!3500 = !DILocation(line: 4953, column: 27, scope: !3487)
!3501 = !DILocation(line: 4954, column: 50, scope: !3487)
!3502 = !DILocation(line: 4954, column: 26, scope: !3487)
!3503 = !DILocation(line: 4956, column: 14, scope: !3487)
!3504 = !DILocation(line: 4957, column: 3, scope: !3487)
!3505 = !DILocation(line: 4958, column: 3, scope: !3487)
!3506 = !DILocation(line: 4973, column: 7, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 4973, column: 7)
!3508 = !DILocation(line: 4973, column: 7, scope: !3487)
!3509 = !DILocation(line: 4975, column: 7, scope: !3510)
!3510 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 4974, column: 5)
!3511 = !DILocation(line: 4976, column: 7, scope: !3510)
!3512 = !DILocation(line: 4977, column: 5, scope: !3510)
!3513 = !DILocation(line: 4980, column: 19, scope: !3487)
!3514 = !DILocation(line: 4980, column: 17, scope: !3487)
!3515 = !DILocation(line: 4981, column: 3, scope: !3487)
!3516 = !DILocation(line: 4983, column: 3, scope: !3487)
!3517 = !DILocation(line: 4984, column: 3, scope: !3487)
!3518 = !DILocation(line: 4987, column: 9, scope: !3487)
!3519 = !DILocation(line: 4987, column: 3, scope: !3487)
!3520 = !DILocation(line: 4988, column: 17, scope: !3487)
!3521 = !DILocation(line: 4990, column: 7, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 4990, column: 7)
!3523 = !DILocation(line: 4990, column: 7, scope: !3487)
!3524 = !DILocation(line: 4991, column: 22, scope: !3522)
!3525 = !DILocation(line: 4991, column: 5, scope: !3522)
!3526 = !DILocation(line: 4992, column: 22, scope: !3527)
!3527 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 4992, column: 7)
!3528 = !DILocation(line: 4992, column: 30, scope: !3527)
!3529 = !DILocation(line: 4992, column: 7, scope: !3487)
!3530 = !DILocalVariable(name: "bb", scope: !3531, file: !3, line: 4994, type: !2448)
!3531 = distinct !DILexicalBlock(scope: !3527, file: !3, line: 4993, column: 5)
!3532 = !DILocation(line: 4994, column: 19, scope: !3531)
!3533 = !DILocalVariable(name: "insn", scope: !3531, file: !3, line: 4995, type: !1893)
!3534 = !DILocation(line: 4995, column: 11, scope: !3531)
!3535 = !DILocation(line: 4997, column: 24, scope: !3531)
!3536 = !DILocation(line: 4997, column: 57, scope: !3531)
!3537 = !DILocation(line: 4997, column: 7, scope: !3531)
!3538 = !DILocation(line: 4998, column: 7, scope: !3531)
!3539 = !DILocation(line: 5000, column: 7, scope: !3540)
!3540 = distinct !DILexicalBlock(scope: !3531, file: !3, line: 5000, column: 7)
!3541 = !DILocation(line: 5000, column: 7, scope: !3542)
!3542 = distinct !DILexicalBlock(scope: !3540, file: !3, line: 5000, column: 7)
!3543 = !DILocation(line: 5004, column: 4, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !3542, file: !3, line: 5001, column: 2)
!3545 = !DILocation(line: 5006, column: 4, scope: !3546)
!3546 = distinct !DILexicalBlock(scope: !3544, file: !3, line: 5006, column: 4)
!3547 = !DILocation(line: 5006, column: 4, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3546, file: !3, line: 5006, column: 4)
!3549 = !DILocation(line: 0, scope: !3548)
!3550 = !DILocation(line: 5007, column: 10, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 5007, column: 10)
!3552 = !DILocation(line: 5007, column: 10, scope: !3548)
!3553 = !DILocation(line: 5009, column: 26, scope: !3554)
!3554 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 5008, column: 8)
!3555 = !DILocation(line: 5009, column: 14, scope: !3554)
!3556 = !DILocation(line: 5009, column: 11, scope: !3554)
!3557 = !DILocation(line: 5015, column: 9, scope: !3558)
!3558 = distinct !DILexicalBlock(scope: !3554, file: !3, line: 5015, column: 7)
!3559 = !DILocation(line: 5015, column: 7, scope: !3554)
!3560 = !DILocation(line: 5016, column: 20, scope: !3558)
!3561 = !DILocation(line: 5016, column: 5, scope: !3558)
!3562 = !DILocation(line: 5017, column: 8, scope: !3554)
!3563 = distinct !{!3563, !3545, !3564}
!3564 = !DILocation(line: 5017, column: 8, scope: !3546)
!3565 = !DILocation(line: 5018, column: 2, scope: !3544)
!3566 = distinct !{!3566, !3539, !3567}
!3567 = !DILocation(line: 5018, column: 2, scope: !3540)
!3568 = !DILocation(line: 5020, column: 18, scope: !3531)
!3569 = !DILocation(line: 5020, column: 15, scope: !3531)
!3570 = !DILocation(line: 5021, column: 7, scope: !3531)
!3571 = !DILocation(line: 5022, column: 5, scope: !3531)
!3572 = !DILocation(line: 5024, column: 3, scope: !3487)
!3573 = !DILocation(line: 5025, column: 3, scope: !3487)
!3574 = !DILocation(line: 5026, column: 3, scope: !3487)
!3575 = !DILocation(line: 5028, column: 7, scope: !3576)
!3576 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 5028, column: 7)
!3577 = !DILocation(line: 5028, column: 7, scope: !3487)
!3578 = !DILocation(line: 5030, column: 16, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3576, file: !3, line: 5029, column: 5)
!3580 = !DILocation(line: 5031, column: 9, scope: !3579)
!3581 = !DILocation(line: 5031, column: 35, scope: !3579)
!3582 = !DILocation(line: 5031, column: 51, scope: !3579)
!3583 = !DILocation(line: 5030, column: 7, scope: !3579)
!3584 = !DILocation(line: 5032, column: 16, scope: !3579)
!3585 = !DILocation(line: 5033, column: 9, scope: !3579)
!3586 = !DILocation(line: 5033, column: 33, scope: !3579)
!3587 = !DILocation(line: 5032, column: 7, scope: !3579)
!3588 = !DILocation(line: 5034, column: 16, scope: !3579)
!3589 = !DILocation(line: 5035, column: 9, scope: !3579)
!3590 = !DILocation(line: 5035, column: 34, scope: !3579)
!3591 = !DILocation(line: 5034, column: 7, scope: !3579)
!3592 = !DILocation(line: 5036, column: 5, scope: !3579)
!3593 = !DILocation(line: 5038, column: 10, scope: !3487)
!3594 = !DILocation(line: 5038, column: 3, scope: !3487)
!3595 = !DILocation(line: 5039, column: 1, scope: !3487)
!3596 = distinct !DISubprogram(name: "is_too_expensive", scope: !3, file: !3, line: 4904, type: !3597, scopeLine: 4905, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3597 = !DISubroutineType(types: !3598)
!3598 = !{!6, !1920}
!3599 = !DILocalVariable(name: "pass", arg: 1, scope: !3596, file: !3, line: 4904, type: !1920)
!3600 = !DILocation(line: 4904, column: 31, scope: !3596)
!3601 = !DILocation(line: 4915, column: 7, scope: !3602)
!3602 = distinct !DILexicalBlock(scope: !3596, file: !3, line: 4915, column: 7)
!3603 = !DILocation(line: 4915, column: 25, scope: !3602)
!3604 = !DILocation(line: 4915, column: 40, scope: !3602)
!3605 = !DILocation(line: 4915, column: 23, scope: !3602)
!3606 = !DILocation(line: 4915, column: 15, scope: !3602)
!3607 = !DILocation(line: 4915, column: 7, scope: !3596)
!3608 = !DILocation(line: 4919, column: 9, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !3602, file: !3, line: 4916, column: 5)
!3610 = !DILocation(line: 4919, column: 15, scope: !3609)
!3611 = !DILocation(line: 4919, column: 31, scope: !3609)
!3612 = !DILocation(line: 4919, column: 41, scope: !3609)
!3613 = !DILocation(line: 4919, column: 39, scope: !3609)
!3614 = !DILocation(line: 4917, column: 7, scope: !3609)
!3615 = !DILocation(line: 4921, column: 7, scope: !3609)
!3616 = !DILocation(line: 4926, column: 8, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3596, file: !3, line: 4926, column: 7)
!3618 = !DILocation(line: 4927, column: 10, scope: !3617)
!3619 = !DILocation(line: 4927, column: 8, scope: !3617)
!3620 = !DILocation(line: 4928, column: 8, scope: !3617)
!3621 = !DILocation(line: 4928, column: 39, scope: !3617)
!3622 = !DILocation(line: 4928, column: 37, scope: !3617)
!3623 = !DILocation(line: 4926, column: 7, scope: !3596)
!3624 = !DILocation(line: 4932, column: 9, scope: !3625)
!3625 = distinct !DILexicalBlock(scope: !3617, file: !3, line: 4929, column: 5)
!3626 = !DILocation(line: 4932, column: 15, scope: !3625)
!3627 = !DILocation(line: 4932, column: 31, scope: !3625)
!3628 = !DILocation(line: 4930, column: 7, scope: !3625)
!3629 = !DILocation(line: 4934, column: 7, scope: !3625)
!3630 = !DILocation(line: 4937, column: 3, scope: !3596)
!3631 = !DILocation(line: 4938, column: 1, scope: !3596)
!3632 = distinct !DISubprogram(name: "alloc_gcse_mem", scope: !3, file: !3, line: 625, type: !3321, scopeLine: 626, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3633 = !DILocation(line: 628, column: 20, scope: !3632)
!3634 = !DILocation(line: 628, column: 18, scope: !3632)
!3635 = !DILocation(line: 632, column: 21, scope: !3632)
!3636 = !DILocation(line: 632, column: 19, scope: !3632)
!3637 = !DILocation(line: 633, column: 27, scope: !3632)
!3638 = !DILocation(line: 633, column: 25, scope: !3632)
!3639 = !DILocation(line: 634, column: 25, scope: !3632)
!3640 = !DILocation(line: 634, column: 23, scope: !3632)
!3641 = !DILocation(line: 635, column: 23, scope: !3632)
!3642 = !DILocation(line: 635, column: 21, scope: !3632)
!3643 = !DILocation(line: 636, column: 1, scope: !3632)
!3644 = distinct !DISubprogram(name: "local_cprop_pass", scope: !3, file: !3, line: 2720, type: !3488, scopeLine: 2721, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3645 = !DILocalVariable(name: "bb", scope: !3644, file: !3, line: 2722, type: !2448)
!3646 = !DILocation(line: 2722, column: 15, scope: !3644)
!3647 = !DILocalVariable(name: "insn", scope: !3644, file: !3, line: 2723, type: !1893)
!3648 = !DILocation(line: 2723, column: 7, scope: !3644)
!3649 = !DILocalVariable(name: "reg_used", scope: !3644, file: !3, line: 2724, type: !3650)
!3650 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3211, size: 64)
!3651 = !DILocation(line: 2724, column: 19, scope: !3644)
!3652 = !DILocalVariable(name: "changed", scope: !3644, file: !3, line: 2725, type: !6)
!3653 = !DILocation(line: 2725, column: 8, scope: !3644)
!3654 = !DILocation(line: 2727, column: 3, scope: !3644)
!3655 = !DILocation(line: 2728, column: 3, scope: !3656)
!3656 = distinct !DILexicalBlock(scope: !3644, file: !3, line: 2728, column: 3)
!3657 = !DILocation(line: 2728, column: 3, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3656, file: !3, line: 2728, column: 3)
!3659 = !DILocation(line: 2730, column: 7, scope: !3660)
!3660 = distinct !DILexicalBlock(scope: !3661, file: !3, line: 2730, column: 7)
!3661 = distinct !DILexicalBlock(scope: !3658, file: !3, line: 2729, column: 5)
!3662 = !DILocation(line: 2730, column: 7, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3660, file: !3, line: 2730, column: 7)
!3664 = !DILocation(line: 0, scope: !3663)
!3665 = !DILocation(line: 2732, column: 8, scope: !3666)
!3666 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 2732, column: 8)
!3667 = distinct !DILexicalBlock(scope: !3663, file: !3, line: 2731, column: 2)
!3668 = !DILocation(line: 2732, column: 8, scope: !3667)
!3669 = !DILocalVariable(name: "note", scope: !3670, file: !3, line: 2734, type: !1893)
!3670 = distinct !DILexicalBlock(scope: !3666, file: !3, line: 2733, column: 6)
!3671 = !DILocation(line: 2734, column: 12, scope: !3670)
!3672 = !DILocation(line: 2734, column: 46, scope: !3670)
!3673 = !DILocation(line: 2734, column: 19, scope: !3670)
!3674 = !DILocation(line: 2735, column: 8, scope: !3670)
!3675 = !DILocation(line: 2737, column: 19, scope: !3676)
!3676 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 2736, column: 3)
!3677 = !DILocation(line: 2738, column: 17, scope: !3676)
!3678 = !DILocation(line: 2738, column: 5, scope: !3676)
!3679 = !DILocation(line: 2740, column: 9, scope: !3680)
!3680 = distinct !DILexicalBlock(scope: !3676, file: !3, line: 2740, column: 9)
!3681 = !DILocation(line: 2740, column: 9, scope: !3676)
!3682 = !DILocation(line: 2741, column: 36, scope: !3680)
!3683 = !DILocation(line: 2741, column: 7, scope: !3680)
!3684 = !DILocation(line: 2743, column: 19, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !3676, file: !3, line: 2743, column: 5)
!3686 = !DILocation(line: 2743, column: 10, scope: !3685)
!3687 = !DILocation(line: 2743, column: 40, scope: !3688)
!3688 = distinct !DILexicalBlock(scope: !3685, file: !3, line: 2743, column: 5)
!3689 = !DILocation(line: 2743, column: 54, scope: !3688)
!3690 = !DILocation(line: 2743, column: 5, scope: !3685)
!3691 = !DILocation(line: 2746, column: 29, scope: !3692)
!3692 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 2746, column: 13)
!3693 = distinct !DILexicalBlock(scope: !3688, file: !3, line: 2745, column: 7)
!3694 = !DILocation(line: 2746, column: 39, scope: !3692)
!3695 = !DILocation(line: 2746, column: 48, scope: !3692)
!3696 = !DILocation(line: 2746, column: 13, scope: !3692)
!3697 = !DILocation(line: 2746, column: 13, scope: !3693)
!3698 = !DILocation(line: 2748, column: 14, scope: !3699)
!3699 = distinct !DILexicalBlock(scope: !3692, file: !3, line: 2747, column: 4)
!3700 = !DILocation(line: 2749, column: 6, scope: !3699)
!3701 = !DILocation(line: 2751, column: 7, scope: !3693)
!3702 = !DILocation(line: 2744, column: 18, scope: !3688)
!3703 = !DILocation(line: 2744, column: 35, scope: !3688)
!3704 = !DILocation(line: 2743, column: 5, scope: !3688)
!3705 = distinct !{!3705, !3690, !3706}
!3706 = !DILocation(line: 2751, column: 7, scope: !3685)
!3707 = !DILocation(line: 2752, column: 9, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3676, file: !3, line: 2752, column: 9)
!3709 = !DILocation(line: 2752, column: 9, scope: !3676)
!3710 = !DILocation(line: 2753, column: 7, scope: !3708)
!3711 = !DILocation(line: 2754, column: 3, scope: !3676)
!3712 = !DILocation(line: 2755, column: 15, scope: !3670)
!3713 = distinct !{!3713, !3674, !3714}
!3714 = !DILocation(line: 2755, column: 28, scope: !3670)
!3715 = !DILocation(line: 2756, column: 6, scope: !3670)
!3716 = !DILocation(line: 2757, column: 25, scope: !3667)
!3717 = !DILocation(line: 2757, column: 4, scope: !3667)
!3718 = !DILocation(line: 2758, column: 2, scope: !3667)
!3719 = distinct !{!3719, !3659, !3720}
!3720 = !DILocation(line: 2758, column: 2, scope: !3660)
!3721 = !DILocation(line: 2761, column: 7, scope: !3661)
!3722 = !DILocation(line: 2762, column: 5, scope: !3661)
!3723 = distinct !{!3723, !3655, !3724}
!3724 = !DILocation(line: 2762, column: 5, scope: !3656)
!3725 = !DILocation(line: 2764, column: 3, scope: !3644)
!3726 = !DILocation(line: 2766, column: 10, scope: !3644)
!3727 = !DILocation(line: 2766, column: 3, scope: !3644)
!3728 = distinct !DISubprogram(name: "find_implicit_sets", scope: !3, file: !3, line: 2830, type: !3321, scopeLine: 2831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3729 = !DILocalVariable(name: "bb", scope: !3728, file: !3, line: 2832, type: !2448)
!3730 = !DILocation(line: 2832, column: 15, scope: !3728)
!3731 = !DILocalVariable(name: "dest", scope: !3728, file: !3, line: 2832, type: !2448)
!3732 = !DILocation(line: 2832, column: 19, scope: !3728)
!3733 = !DILocalVariable(name: "count", scope: !3728, file: !3, line: 2833, type: !9)
!3734 = !DILocation(line: 2833, column: 16, scope: !3728)
!3735 = !DILocalVariable(name: "cond", scope: !3728, file: !3, line: 2834, type: !1893)
!3736 = !DILocation(line: 2834, column: 7, scope: !3728)
!3737 = !DILocalVariable(name: "new_rtx", scope: !3728, file: !3, line: 2834, type: !1893)
!3738 = !DILocation(line: 2834, column: 13, scope: !3728)
!3739 = !DILocation(line: 2836, column: 9, scope: !3728)
!3740 = !DILocation(line: 2837, column: 3, scope: !3741)
!3741 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 2837, column: 3)
!3742 = !DILocation(line: 2837, column: 3, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3741, file: !3, line: 2837, column: 3)
!3744 = !DILocation(line: 2839, column: 9, scope: !3745)
!3745 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 2839, column: 9)
!3746 = !DILocation(line: 2839, column: 32, scope: !3745)
!3747 = !DILocation(line: 2839, column: 9, scope: !3743)
!3748 = !DILocation(line: 2841, column: 28, scope: !3749)
!3749 = distinct !DILexicalBlock(scope: !3745, file: !3, line: 2840, column: 7)
!3750 = !DILocation(line: 2841, column: 9, scope: !3749)
!3751 = !DILocation(line: 2841, column: 7, scope: !3749)
!3752 = !DILocation(line: 2843, column: 6, scope: !3753)
!3753 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 2843, column: 6)
!3754 = !DILocation(line: 2844, column: 6, scope: !3753)
!3755 = !DILocation(line: 2844, column: 10, scope: !3753)
!3756 = !DILocation(line: 2844, column: 26, scope: !3753)
!3757 = !DILocation(line: 2844, column: 32, scope: !3753)
!3758 = !DILocation(line: 2844, column: 35, scope: !3753)
!3759 = !DILocation(line: 2844, column: 51, scope: !3753)
!3760 = !DILocation(line: 2845, column: 6, scope: !3753)
!3761 = !DILocation(line: 2845, column: 9, scope: !3753)
!3762 = !DILocation(line: 2846, column: 6, scope: !3753)
!3763 = !DILocation(line: 2846, column: 9, scope: !3753)
!3764 = !DILocation(line: 2846, column: 32, scope: !3753)
!3765 = !DILocation(line: 2847, column: 6, scope: !3753)
!3766 = !DILocation(line: 2847, column: 30, scope: !3753)
!3767 = !DILocation(line: 2847, column: 9, scope: !3753)
!3768 = !DILocation(line: 2843, column: 6, scope: !3749)
!3769 = !DILocation(line: 2849, column: 13, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3753, file: !3, line: 2848, column: 4)
!3771 = !DILocation(line: 2849, column: 29, scope: !3770)
!3772 = !DILocation(line: 2849, column: 37, scope: !3770)
!3773 = !DILocation(line: 2849, column: 55, scope: !3770)
!3774 = !DILocation(line: 2850, column: 9, scope: !3770)
!3775 = !DILocation(line: 2850, column: 29, scope: !3770)
!3776 = !DILocation(line: 2849, column: 11, scope: !3770)
!3777 = !DILocation(line: 2852, column: 10, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 2852, column: 10)
!3779 = !DILocation(line: 2854, column: 3, scope: !3778)
!3780 = !DILocation(line: 2854, column: 21, scope: !3778)
!3781 = !DILocation(line: 2854, column: 6, scope: !3778)
!3782 = !DILocation(line: 2855, column: 3, scope: !3778)
!3783 = !DILocation(line: 2855, column: 6, scope: !3778)
!3784 = !DILocation(line: 2855, column: 14, scope: !3778)
!3785 = !DILocation(line: 2855, column: 11, scope: !3778)
!3786 = !DILocation(line: 2852, column: 10, scope: !3770)
!3787 = !DILocation(line: 2857, column: 13, scope: !3788)
!3788 = distinct !DILexicalBlock(scope: !3778, file: !3, line: 2856, column: 8)
!3789 = !DILocation(line: 2857, column: 11, scope: !3788)
!3790 = !DILocation(line: 2859, column: 32, scope: !3788)
!3791 = !DILocation(line: 2859, column: 3, scope: !3788)
!3792 = !DILocation(line: 2859, column: 17, scope: !3788)
!3793 = !DILocation(line: 2859, column: 23, scope: !3788)
!3794 = !DILocation(line: 2859, column: 30, scope: !3788)
!3795 = !DILocation(line: 2860, column: 7, scope: !3796)
!3796 = distinct !DILexicalBlock(scope: !3788, file: !3, line: 2860, column: 7)
!3797 = !DILocation(line: 2860, column: 7, scope: !3788)
!3798 = !DILocation(line: 2862, column: 15, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 2861, column: 5)
!3800 = !DILocation(line: 2863, column: 8, scope: !3799)
!3801 = !DILocation(line: 2862, column: 7, scope: !3799)
!3802 = !DILocation(line: 2864, column: 15, scope: !3799)
!3803 = !DILocation(line: 2864, column: 46, scope: !3799)
!3804 = !DILocation(line: 2864, column: 52, scope: !3799)
!3805 = !DILocation(line: 2864, column: 7, scope: !3799)
!3806 = !DILocation(line: 2865, column: 5, scope: !3799)
!3807 = !DILocation(line: 2866, column: 8, scope: !3788)
!3808 = !DILocation(line: 2867, column: 8, scope: !3788)
!3809 = !DILocation(line: 2868, column: 4, scope: !3770)
!3810 = !DILocation(line: 2869, column: 7, scope: !3749)
!3811 = !DILocation(line: 2839, column: 34, scope: !3745)
!3812 = distinct !{!3812, !3740, !3813}
!3813 = !DILocation(line: 2869, column: 7, scope: !3741)
!3814 = !DILocation(line: 2871, column: 7, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 2871, column: 7)
!3816 = !DILocation(line: 2871, column: 7, scope: !3728)
!3817 = !DILocation(line: 2872, column: 14, scope: !3815)
!3818 = !DILocation(line: 2872, column: 53, scope: !3815)
!3819 = !DILocation(line: 2872, column: 5, scope: !3815)
!3820 = !DILocation(line: 2873, column: 1, scope: !3728)
!3821 = distinct !DISubprogram(name: "alloc_hash_table", scope: !3, file: !3, line: 1710, type: !3822, scopeLine: 1711, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3822 = !DISubroutineType(types: !3823)
!3823 = !{null, !3824, !1917}
!3824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3220, size: 64)
!3825 = !DILocalVariable(name: "table", arg: 1, scope: !3821, file: !3, line: 1710, type: !3824)
!3826 = !DILocation(line: 1710, column: 40, scope: !3821)
!3827 = !DILocalVariable(name: "set_p", arg: 2, scope: !3821, file: !3, line: 1710, type: !1917)
!3828 = !DILocation(line: 1710, column: 51, scope: !3821)
!3829 = !DILocalVariable(name: "n", scope: !3821, file: !3, line: 1712, type: !1917)
!3830 = !DILocation(line: 1712, column: 7, scope: !3821)
!3831 = !DILocation(line: 1714, column: 7, scope: !3821)
!3832 = !DILocation(line: 1714, column: 5, scope: !3821)
!3833 = !DILocation(line: 1716, column: 17, scope: !3821)
!3834 = !DILocation(line: 1716, column: 19, scope: !3821)
!3835 = !DILocation(line: 1716, column: 3, scope: !3821)
!3836 = !DILocation(line: 1716, column: 10, scope: !3821)
!3837 = !DILocation(line: 1716, column: 15, scope: !3821)
!3838 = !DILocation(line: 1717, column: 7, scope: !3839)
!3839 = distinct !DILexicalBlock(scope: !3821, file: !3, line: 1717, column: 7)
!3840 = !DILocation(line: 1717, column: 14, scope: !3839)
!3841 = !DILocation(line: 1717, column: 19, scope: !3839)
!3842 = !DILocation(line: 1717, column: 7, scope: !3821)
!3843 = !DILocation(line: 1718, column: 5, scope: !3839)
!3844 = !DILocation(line: 1718, column: 12, scope: !3839)
!3845 = !DILocation(line: 1718, column: 17, scope: !3839)
!3846 = !DILocation(line: 1723, column: 3, scope: !3821)
!3847 = !DILocation(line: 1723, column: 10, scope: !3821)
!3848 = !DILocation(line: 1723, column: 15, scope: !3821)
!3849 = !DILocation(line: 1724, column: 7, scope: !3821)
!3850 = !DILocation(line: 1724, column: 14, scope: !3821)
!3851 = !DILocation(line: 1724, column: 19, scope: !3821)
!3852 = !DILocation(line: 1724, column: 5, scope: !3821)
!3853 = !DILocation(line: 1725, column: 18, scope: !3821)
!3854 = !DILocation(line: 1725, column: 3, scope: !3821)
!3855 = !DILocation(line: 1725, column: 10, scope: !3821)
!3856 = !DILocation(line: 1725, column: 16, scope: !3821)
!3857 = !DILocation(line: 1726, column: 18, scope: !3821)
!3858 = !DILocation(line: 1726, column: 3, scope: !3821)
!3859 = !DILocation(line: 1726, column: 10, scope: !3821)
!3860 = !DILocation(line: 1726, column: 16, scope: !3821)
!3861 = !DILocation(line: 1727, column: 1, scope: !3821)
!3862 = distinct !DISubprogram(name: "compute_hash_table", scope: !3, file: !3, line: 1741, type: !3863, scopeLine: 1742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3863 = !DISubroutineType(types: !3864)
!3864 = !{null, !3824}
!3865 = !DILocalVariable(name: "table", arg: 1, scope: !3862, file: !3, line: 1741, type: !3824)
!3866 = !DILocation(line: 1741, column: 42, scope: !3862)
!3867 = !DILocation(line: 1744, column: 3, scope: !3862)
!3868 = !DILocation(line: 1744, column: 10, scope: !3862)
!3869 = !DILocation(line: 1744, column: 18, scope: !3862)
!3870 = !DILocation(line: 1745, column: 11, scope: !3862)
!3871 = !DILocation(line: 1745, column: 18, scope: !3862)
!3872 = !DILocation(line: 1745, column: 3, scope: !3862)
!3873 = !DILocation(line: 1745, column: 28, scope: !3862)
!3874 = !DILocation(line: 1745, column: 35, scope: !3862)
!3875 = !DILocation(line: 1745, column: 40, scope: !3862)
!3876 = !DILocation(line: 1747, column: 28, scope: !3862)
!3877 = !DILocation(line: 1747, column: 3, scope: !3862)
!3878 = !DILocation(line: 1748, column: 1, scope: !3862)
!3879 = distinct !DISubprogram(name: "dump_hash_table", scope: !3, file: !3, line: 1491, type: !3880, scopeLine: 1492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!3880 = !DISubroutineType(types: !3881)
!3881 = !{null, !3882, !1920, !3824}
!3882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3883, size: 64)
!3883 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3884, line: 7, baseType: !3885)
!3884 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3886, line: 49, size: 1728, elements: !3887)
!3886 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3887 = !{!3888, !3889, !3890, !3891, !3892, !3893, !3894, !3895, !3896, !3897, !3898, !3899, !3900, !3903, !3905, !3906, !3907, !3910, !3911, !3912, !3913, !3916, !3918, !3921, !3924, !3925, !3926, !3927, !3928}
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3885, file: !3886, line: 51, baseType: !1917, size: 32)
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3885, file: !3886, line: 54, baseType: !2010, size: 64, offset: 64)
!3890 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3885, file: !3886, line: 55, baseType: !2010, size: 64, offset: 128)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3885, file: !3886, line: 56, baseType: !2010, size: 64, offset: 192)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3885, file: !3886, line: 57, baseType: !2010, size: 64, offset: 256)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3885, file: !3886, line: 58, baseType: !2010, size: 64, offset: 320)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3885, file: !3886, line: 59, baseType: !2010, size: 64, offset: 384)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3885, file: !3886, line: 60, baseType: !2010, size: 64, offset: 448)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3885, file: !3886, line: 61, baseType: !2010, size: 64, offset: 512)
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3885, file: !3886, line: 64, baseType: !2010, size: 64, offset: 576)
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3885, file: !3886, line: 65, baseType: !2010, size: 64, offset: 640)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3885, file: !3886, line: 66, baseType: !2010, size: 64, offset: 704)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3885, file: !3886, line: 68, baseType: !3901, size: 64, offset: 768)
!3901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3902, size: 64)
!3902 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3886, line: 36, flags: DIFlagFwdDecl)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3885, file: !3886, line: 70, baseType: !3904, size: 64, offset: 832)
!3904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3885, size: 64)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3885, file: !3886, line: 72, baseType: !1917, size: 32, offset: 896)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3885, file: !3886, line: 73, baseType: !1917, size: 32, offset: 928)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3885, file: !3886, line: 74, baseType: !3908, size: 64, offset: 960)
!3908 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3909, line: 152, baseType: !1888)
!3909 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3885, file: !3886, line: 77, baseType: !3082, size: 16, offset: 1024)
!3911 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3885, file: !3886, line: 78, baseType: !2821, size: 8, offset: 1040)
!3912 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3885, file: !3886, line: 79, baseType: !2129, size: 8, offset: 1048)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3885, file: !3886, line: 81, baseType: !3914, size: 64, offset: 1088)
!3914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3915, size: 64)
!3915 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3886, line: 43, baseType: null)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3885, file: !3886, line: 89, baseType: !3917, size: 64, offset: 1152)
!3917 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3909, line: 153, baseType: !1888)
!3918 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3885, file: !3886, line: 91, baseType: !3919, size: 64, offset: 1216)
!3919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3920, size: 64)
!3920 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3886, line: 37, flags: DIFlagFwdDecl)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3885, file: !3886, line: 92, baseType: !3922, size: 64, offset: 1280)
!3922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3923, size: 64)
!3923 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3886, line: 38, flags: DIFlagFwdDecl)
!3924 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3885, file: !3886, line: 93, baseType: !3904, size: 64, offset: 1344)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3885, file: !3886, line: 94, baseType: !1887, size: 64, offset: 1408)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3885, file: !3886, line: 95, baseType: !2386, size: 64, offset: 1472)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3885, file: !3886, line: 96, baseType: !1917, size: 32, offset: 1536)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3885, file: !3886, line: 98, baseType: !3929, size: 160, offset: 1568)
!3929 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1922, size: 160, elements: !3930)
!3930 = !{!3931}
!3931 = !DISubrange(count: 20)
!3932 = !DILocalVariable(name: "file", arg: 1, scope: !3879, file: !3, line: 1491, type: !3882)
!3933 = !DILocation(line: 1491, column: 24, scope: !3879)
!3934 = !DILocalVariable(name: "name", arg: 2, scope: !3879, file: !3, line: 1491, type: !1920)
!3935 = !DILocation(line: 1491, column: 42, scope: !3879)
!3936 = !DILocalVariable(name: "table", arg: 3, scope: !3879, file: !3, line: 1491, type: !3824)
!3937 = !DILocation(line: 1491, column: 69, scope: !3879)
!3938 = !DILocalVariable(name: "i", scope: !3879, file: !3, line: 1493, type: !1917)
!3939 = !DILocation(line: 1493, column: 7, scope: !3879)
!3940 = !DILocalVariable(name: "flat_table", scope: !3879, file: !3, line: 1495, type: !3085)
!3941 = !DILocation(line: 1495, column: 17, scope: !3879)
!3942 = !DILocalVariable(name: "hash_val", scope: !3879, file: !3, line: 1496, type: !3123)
!3943 = !DILocation(line: 1496, column: 17, scope: !3879)
!3944 = !DILocalVariable(name: "expr", scope: !3879, file: !3, line: 1497, type: !3086)
!3945 = !DILocation(line: 1497, column: 16, scope: !3879)
!3946 = !DILocation(line: 1499, column: 16, scope: !3879)
!3947 = !DILocation(line: 1499, column: 14, scope: !3879)
!3948 = !DILocation(line: 1500, column: 14, scope: !3879)
!3949 = !DILocation(line: 1500, column: 12, scope: !3879)
!3950 = !DILocation(line: 1502, column: 10, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3879, file: !3, line: 1502, column: 3)
!3952 = !DILocation(line: 1502, column: 8, scope: !3951)
!3953 = !DILocation(line: 1502, column: 15, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 1502, column: 3)
!3955 = !DILocation(line: 1502, column: 25, scope: !3954)
!3956 = !DILocation(line: 1502, column: 32, scope: !3954)
!3957 = !DILocation(line: 1502, column: 17, scope: !3954)
!3958 = !DILocation(line: 1502, column: 3, scope: !3951)
!3959 = !DILocation(line: 1503, column: 17, scope: !3960)
!3960 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 1503, column: 5)
!3961 = !DILocation(line: 1503, column: 24, scope: !3960)
!3962 = !DILocation(line: 1503, column: 30, scope: !3960)
!3963 = !DILocation(line: 1503, column: 15, scope: !3960)
!3964 = !DILocation(line: 1503, column: 10, scope: !3960)
!3965 = !DILocation(line: 1503, column: 34, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 1503, column: 5)
!3967 = !DILocation(line: 1503, column: 39, scope: !3966)
!3968 = !DILocation(line: 1503, column: 5, scope: !3960)
!3969 = !DILocation(line: 1505, column: 35, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3966, file: !3, line: 1504, column: 7)
!3971 = !DILocation(line: 1505, column: 2, scope: !3970)
!3972 = !DILocation(line: 1505, column: 13, scope: !3970)
!3973 = !DILocation(line: 1505, column: 19, scope: !3970)
!3974 = !DILocation(line: 1505, column: 33, scope: !3970)
!3975 = !DILocation(line: 1506, column: 33, scope: !3970)
!3976 = !DILocation(line: 1506, column: 2, scope: !3970)
!3977 = !DILocation(line: 1506, column: 11, scope: !3970)
!3978 = !DILocation(line: 1506, column: 17, scope: !3970)
!3979 = !DILocation(line: 1506, column: 31, scope: !3970)
!3980 = !DILocation(line: 1507, column: 7, scope: !3970)
!3981 = !DILocation(line: 1503, column: 55, scope: !3966)
!3982 = !DILocation(line: 1503, column: 61, scope: !3966)
!3983 = !DILocation(line: 1503, column: 53, scope: !3966)
!3984 = !DILocation(line: 1503, column: 5, scope: !3966)
!3985 = distinct !{!3985, !3968, !3986}
!3986 = !DILocation(line: 1507, column: 7, scope: !3960)
!3987 = !DILocation(line: 1502, column: 39, scope: !3954)
!3988 = !DILocation(line: 1502, column: 3, scope: !3954)
!3989 = distinct !{!3989, !3958, !3990}
!3990 = !DILocation(line: 1507, column: 7, scope: !3951)
!3991 = !DILocation(line: 1509, column: 12, scope: !3879)
!3992 = !DILocation(line: 1510, column: 5, scope: !3879)
!3993 = !DILocation(line: 1510, column: 11, scope: !3879)
!3994 = !DILocation(line: 1510, column: 18, scope: !3879)
!3995 = !DILocation(line: 1510, column: 24, scope: !3879)
!3996 = !DILocation(line: 1510, column: 31, scope: !3879)
!3997 = !DILocation(line: 1509, column: 3, scope: !3879)
!3998 = !DILocation(line: 1512, column: 10, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3879, file: !3, line: 1512, column: 3)
!4000 = !DILocation(line: 1512, column: 8, scope: !3999)
!4001 = !DILocation(line: 1512, column: 15, scope: !4002)
!4002 = distinct !DILexicalBlock(scope: !3999, file: !3, line: 1512, column: 3)
!4003 = !DILocation(line: 1512, column: 25, scope: !4002)
!4004 = !DILocation(line: 1512, column: 32, scope: !4002)
!4005 = !DILocation(line: 1512, column: 17, scope: !4002)
!4006 = !DILocation(line: 1512, column: 3, scope: !3999)
!4007 = !DILocation(line: 1513, column: 9, scope: !4008)
!4008 = distinct !DILexicalBlock(scope: !4002, file: !3, line: 1513, column: 9)
!4009 = !DILocation(line: 1513, column: 20, scope: !4008)
!4010 = !DILocation(line: 1513, column: 23, scope: !4008)
!4011 = !DILocation(line: 1513, column: 9, scope: !4002)
!4012 = !DILocation(line: 1515, column: 9, scope: !4013)
!4013 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1514, column: 7)
!4014 = !DILocation(line: 1515, column: 20, scope: !4013)
!4015 = !DILocation(line: 1515, column: 7, scope: !4013)
!4016 = !DILocation(line: 1516, column: 11, scope: !4013)
!4017 = !DILocation(line: 1517, column: 4, scope: !4013)
!4018 = !DILocation(line: 1517, column: 10, scope: !4013)
!4019 = !DILocation(line: 1517, column: 24, scope: !4013)
!4020 = !DILocation(line: 1517, column: 33, scope: !4013)
!4021 = !DILocation(line: 1516, column: 2, scope: !4013)
!4022 = !DILocation(line: 1518, column: 13, scope: !4013)
!4023 = !DILocation(line: 1518, column: 19, scope: !4013)
!4024 = !DILocation(line: 1518, column: 25, scope: !4013)
!4025 = !DILocation(line: 1518, column: 2, scope: !4013)
!4026 = !DILocation(line: 1519, column: 11, scope: !4013)
!4027 = !DILocation(line: 1519, column: 2, scope: !4013)
!4028 = !DILocation(line: 1520, column: 7, scope: !4013)
!4029 = !DILocation(line: 1513, column: 26, scope: !4008)
!4030 = !DILocation(line: 1512, column: 42, scope: !4002)
!4031 = !DILocation(line: 1512, column: 3, scope: !4002)
!4032 = distinct !{!4032, !4006, !4033}
!4033 = !DILocation(line: 1520, column: 7, scope: !3999)
!4034 = !DILocation(line: 1522, column: 12, scope: !3879)
!4035 = !DILocation(line: 1522, column: 3, scope: !3879)
!4036 = !DILocation(line: 1524, column: 9, scope: !3879)
!4037 = !DILocation(line: 1524, column: 3, scope: !3879)
!4038 = !DILocation(line: 1525, column: 9, scope: !3879)
!4039 = !DILocation(line: 1525, column: 3, scope: !3879)
!4040 = !DILocation(line: 1526, column: 1, scope: !3879)
!4041 = distinct !DISubprogram(name: "alloc_cprop_mem", scope: !3, file: !3, line: 2001, type: !4042, scopeLine: 2002, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4042 = !DISubroutineType(types: !4043)
!4043 = !{null, !1917, !1917}
!4044 = !DILocalVariable(name: "n_blocks", arg: 1, scope: !4041, file: !3, line: 2001, type: !1917)
!4045 = !DILocation(line: 2001, column: 22, scope: !4041)
!4046 = !DILocalVariable(name: "n_sets", arg: 2, scope: !4041, file: !3, line: 2001, type: !1917)
!4047 = !DILocation(line: 2001, column: 36, scope: !4041)
!4048 = !DILocation(line: 2003, column: 40, scope: !4041)
!4049 = !DILocation(line: 2003, column: 50, scope: !4041)
!4050 = !DILocation(line: 2003, column: 18, scope: !4041)
!4051 = !DILocation(line: 2003, column: 16, scope: !4041)
!4052 = !DILocation(line: 2004, column: 44, scope: !4041)
!4053 = !DILocation(line: 2004, column: 54, scope: !4041)
!4054 = !DILocation(line: 2004, column: 22, scope: !4041)
!4055 = !DILocation(line: 2004, column: 20, scope: !4041)
!4056 = !DILocation(line: 2006, column: 38, scope: !4041)
!4057 = !DILocation(line: 2006, column: 48, scope: !4041)
!4058 = !DILocation(line: 2006, column: 16, scope: !4041)
!4059 = !DILocation(line: 2006, column: 14, scope: !4041)
!4060 = !DILocation(line: 2007, column: 39, scope: !4041)
!4061 = !DILocation(line: 2007, column: 49, scope: !4041)
!4062 = !DILocation(line: 2007, column: 17, scope: !4041)
!4063 = !DILocation(line: 2007, column: 15, scope: !4041)
!4064 = !DILocation(line: 2008, column: 1, scope: !4041)
!4065 = distinct !DISubprogram(name: "compute_cprop_data", scope: !3, file: !3, line: 2158, type: !3321, scopeLine: 2159, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4066 = !DILocation(line: 2160, column: 29, scope: !4065)
!4067 = !DILocation(line: 2160, column: 47, scope: !4065)
!4068 = !DILocation(line: 2160, column: 3, scope: !4065)
!4069 = !DILocation(line: 2161, column: 22, scope: !4065)
!4070 = !DILocation(line: 2161, column: 36, scope: !4065)
!4071 = !DILocation(line: 2162, column: 8, scope: !4065)
!4072 = !DILocation(line: 2162, column: 21, scope: !4065)
!4073 = !DILocation(line: 2161, column: 3, scope: !4065)
!4074 = !DILocation(line: 2163, column: 1, scope: !4065)
!4075 = distinct !DISubprogram(name: "reset_opr_set_tables", scope: !3, file: !3, line: 1833, type: !3321, scopeLine: 1834, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4076 = !DILocation(line: 1837, column: 3, scope: !4075)
!4077 = !DILocation(line: 1842, column: 3, scope: !4075)
!4078 = !DILocation(line: 1843, column: 1, scope: !4075)
!4079 = distinct !DISubprogram(name: "cprop_insn", scope: !3, file: !3, line: 2516, type: !4080, scopeLine: 2517, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4080 = !DISubroutineType(types: !4081)
!4081 = !{!1917, !1893}
!4082 = !DILocalVariable(name: "insn", arg: 1, scope: !4079, file: !3, line: 2516, type: !1893)
!4083 = !DILocation(line: 2516, column: 17, scope: !4079)
!4084 = !DILocalVariable(name: "reg_used", scope: !4079, file: !3, line: 2518, type: !3650)
!4085 = !DILocation(line: 2518, column: 19, scope: !4079)
!4086 = !DILocalVariable(name: "changed", scope: !4079, file: !3, line: 2519, type: !1917)
!4087 = !DILocation(line: 2519, column: 7, scope: !4079)
!4088 = !DILocalVariable(name: "note", scope: !4079, file: !3, line: 2520, type: !1893)
!4089 = !DILocation(line: 2520, column: 7, scope: !4079)
!4090 = !DILocation(line: 2522, column: 8, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !4079, file: !3, line: 2522, column: 7)
!4092 = !DILocation(line: 2522, column: 7, scope: !4079)
!4093 = !DILocation(line: 2523, column: 5, scope: !4091)
!4094 = !DILocation(line: 2525, column: 17, scope: !4079)
!4095 = !DILocation(line: 2526, column: 15, scope: !4079)
!4096 = !DILocation(line: 2526, column: 3, scope: !4079)
!4097 = !DILocation(line: 2528, column: 37, scope: !4079)
!4098 = !DILocation(line: 2528, column: 10, scope: !4079)
!4099 = !DILocation(line: 2528, column: 8, scope: !4079)
!4100 = !DILocation(line: 2531, column: 7, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4079, file: !3, line: 2531, column: 7)
!4102 = !DILocation(line: 2531, column: 7, scope: !4079)
!4103 = !DILocation(line: 2532, column: 22, scope: !4101)
!4104 = !DILocation(line: 2532, column: 5, scope: !4101)
!4105 = !DILocation(line: 2534, column: 17, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !4079, file: !3, line: 2534, column: 3)
!4107 = !DILocation(line: 2534, column: 8, scope: !4106)
!4108 = !DILocation(line: 2534, column: 38, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4106, file: !3, line: 2534, column: 3)
!4110 = !DILocation(line: 2534, column: 52, scope: !4109)
!4111 = !DILocation(line: 2534, column: 3, scope: !4106)
!4112 = !DILocalVariable(name: "regno", scope: !4113, file: !3, line: 2537, type: !9)
!4113 = distinct !DILexicalBlock(scope: !4109, file: !3, line: 2536, column: 5)
!4114 = !DILocation(line: 2537, column: 20, scope: !4113)
!4115 = !DILocation(line: 2537, column: 28, scope: !4113)
!4116 = !DILocalVariable(name: "pat", scope: !4113, file: !3, line: 2538, type: !1893)
!4117 = !DILocation(line: 2538, column: 11, scope: !4113)
!4118 = !DILocalVariable(name: "src", scope: !4113, file: !3, line: 2538, type: !1893)
!4119 = !DILocation(line: 2538, column: 16, scope: !4113)
!4120 = !DILocalVariable(name: "set", scope: !4113, file: !3, line: 2539, type: !3086)
!4121 = !DILocation(line: 2539, column: 20, scope: !4113)
!4122 = !DILocation(line: 2543, column: 29, scope: !4123)
!4123 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 2543, column: 11)
!4124 = !DILocation(line: 2543, column: 39, scope: !4123)
!4125 = !DILocation(line: 2543, column: 48, scope: !4123)
!4126 = !DILocation(line: 2543, column: 13, scope: !4123)
!4127 = !DILocation(line: 2543, column: 11, scope: !4113)
!4128 = !DILocation(line: 2544, column: 2, scope: !4123)
!4129 = !DILocation(line: 2548, column: 29, scope: !4113)
!4130 = !DILocation(line: 2548, column: 36, scope: !4113)
!4131 = !DILocation(line: 2548, column: 13, scope: !4113)
!4132 = !DILocation(line: 2548, column: 11, scope: !4113)
!4133 = !DILocation(line: 2549, column: 13, scope: !4134)
!4134 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 2549, column: 11)
!4135 = !DILocation(line: 2549, column: 11, scope: !4113)
!4136 = !DILocation(line: 2550, column: 2, scope: !4134)
!4137 = !DILocation(line: 2552, column: 13, scope: !4113)
!4138 = !DILocation(line: 2552, column: 18, scope: !4113)
!4139 = !DILocation(line: 2552, column: 11, scope: !4113)
!4140 = !DILocation(line: 2554, column: 7, scope: !4113)
!4141 = !DILocation(line: 2556, column: 13, scope: !4113)
!4142 = !DILocation(line: 2556, column: 11, scope: !4113)
!4143 = !DILocation(line: 2559, column: 28, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 2559, column: 11)
!4145 = !DILocation(line: 2559, column: 11, scope: !4144)
!4146 = !DILocation(line: 2559, column: 11, scope: !4113)
!4147 = !DILocation(line: 2561, column: 35, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4149, file: !3, line: 2561, column: 15)
!4149 = distinct !DILexicalBlock(scope: !4144, file: !3, line: 2560, column: 2)
!4150 = !DILocation(line: 2561, column: 41, scope: !4148)
!4151 = !DILocation(line: 2561, column: 51, scope: !4148)
!4152 = !DILocation(line: 2561, column: 60, scope: !4148)
!4153 = !DILocation(line: 2561, column: 15, scope: !4148)
!4154 = !DILocation(line: 2561, column: 15, scope: !4149)
!4155 = !DILocation(line: 2563, column: 16, scope: !4156)
!4156 = distinct !DILexicalBlock(scope: !4148, file: !3, line: 2562, column: 6)
!4157 = !DILocation(line: 2564, column: 31, scope: !4156)
!4158 = !DILocation(line: 2565, column: 12, scope: !4159)
!4159 = distinct !DILexicalBlock(scope: !4156, file: !3, line: 2565, column: 12)
!4160 = !DILocation(line: 2565, column: 22, scope: !4159)
!4161 = !DILocation(line: 2565, column: 12, scope: !4156)
!4162 = !DILocation(line: 2567, column: 14, scope: !4163)
!4163 = distinct !DILexicalBlock(scope: !4159, file: !3, line: 2566, column: 3)
!4164 = !DILocation(line: 2567, column: 68, scope: !4163)
!4165 = !DILocation(line: 2567, column: 5, scope: !4163)
!4166 = !DILocation(line: 2568, column: 14, scope: !4163)
!4167 = !DILocation(line: 2568, column: 51, scope: !4163)
!4168 = !DILocation(line: 2568, column: 5, scope: !4163)
!4169 = !DILocation(line: 2569, column: 16, scope: !4163)
!4170 = !DILocation(line: 2569, column: 27, scope: !4163)
!4171 = !DILocation(line: 2569, column: 5, scope: !4163)
!4172 = !DILocation(line: 2570, column: 14, scope: !4163)
!4173 = !DILocation(line: 2570, column: 5, scope: !4163)
!4174 = !DILocation(line: 2571, column: 3, scope: !4163)
!4175 = !DILocation(line: 2572, column: 12, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4156, file: !3, line: 2572, column: 12)
!4177 = !DILocation(line: 2572, column: 12, scope: !4156)
!4178 = !DILocation(line: 2573, column: 3, scope: !4176)
!4179 = !DILocation(line: 2574, column: 6, scope: !4156)
!4180 = !DILocation(line: 2575, column: 2, scope: !4149)
!4181 = !DILocation(line: 2576, column: 16, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !4144, file: !3, line: 2576, column: 16)
!4183 = !DILocation(line: 2577, column: 9, scope: !4182)
!4184 = !DILocation(line: 2577, column: 12, scope: !4182)
!4185 = !DILocation(line: 2577, column: 24, scope: !4182)
!4186 = !DILocation(line: 2578, column: 9, scope: !4182)
!4187 = !DILocation(line: 2578, column: 12, scope: !4182)
!4188 = !DILocation(line: 2578, column: 27, scope: !4182)
!4189 = !DILocation(line: 2578, column: 24, scope: !4182)
!4190 = !DILocation(line: 2576, column: 16, scope: !4144)
!4191 = !DILocation(line: 2580, column: 25, scope: !4192)
!4192 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 2580, column: 8)
!4193 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 2579, column: 2)
!4194 = !DILocation(line: 2580, column: 35, scope: !4192)
!4195 = !DILocation(line: 2580, column: 44, scope: !4192)
!4196 = !DILocation(line: 2580, column: 49, scope: !4192)
!4197 = !DILocation(line: 2580, column: 8, scope: !4192)
!4198 = !DILocation(line: 2580, column: 8, scope: !4193)
!4199 = !DILocation(line: 2582, column: 16, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2581, column: 6)
!4201 = !DILocation(line: 2583, column: 30, scope: !4200)
!4202 = !DILocation(line: 2584, column: 12, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4200, file: !3, line: 2584, column: 12)
!4204 = !DILocation(line: 2584, column: 22, scope: !4203)
!4205 = !DILocation(line: 2584, column: 12, scope: !4200)
!4206 = !DILocation(line: 2586, column: 14, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4203, file: !3, line: 2585, column: 3)
!4208 = !DILocation(line: 2587, column: 7, scope: !4207)
!4209 = !DILocation(line: 2587, column: 14, scope: !4207)
!4210 = !DILocation(line: 2586, column: 5, scope: !4207)
!4211 = !DILocation(line: 2588, column: 14, scope: !4207)
!4212 = !DILocation(line: 2588, column: 43, scope: !4207)
!4213 = !DILocation(line: 2588, column: 5, scope: !4207)
!4214 = !DILocation(line: 2589, column: 3, scope: !4207)
!4215 = !DILocation(line: 2596, column: 6, scope: !4200)
!4216 = !DILocation(line: 2597, column: 2, scope: !4193)
!4217 = !DILocation(line: 2598, column: 5, scope: !4113)
!4218 = !DILocation(line: 2535, column: 16, scope: !4109)
!4219 = !DILocation(line: 2535, column: 33, scope: !4109)
!4220 = !DILocation(line: 2534, column: 3, scope: !4109)
!4221 = distinct !{!4221, !4111, !4222}
!4222 = !DILocation(line: 2598, column: 5, scope: !4106)
!4223 = !DILocation(line: 2600, column: 7, scope: !4224)
!4224 = distinct !DILexicalBlock(scope: !4079, file: !3, line: 2600, column: 7)
!4225 = !DILocation(line: 2600, column: 15, scope: !4224)
!4226 = !DILocation(line: 2600, column: 18, scope: !4224)
!4227 = !DILocation(line: 2600, column: 7, scope: !4079)
!4228 = !DILocation(line: 2601, column: 5, scope: !4224)
!4229 = !DILocation(line: 2603, column: 10, scope: !4079)
!4230 = !DILocation(line: 2603, column: 3, scope: !4079)
!4231 = !DILocation(line: 2604, column: 1, scope: !4079)
!4232 = distinct !DISubprogram(name: "mark_oprs_set", scope: !3, file: !3, line: 1960, type: !4233, scopeLine: 1961, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4233 = !DISubroutineType(types: !4234)
!4234 = !{null, !1893}
!4235 = !DILocalVariable(name: "insn", arg: 1, scope: !4232, file: !3, line: 1960, type: !1893)
!4236 = !DILocation(line: 1960, column: 20, scope: !4232)
!4237 = !DILocalVariable(name: "pat", scope: !4232, file: !3, line: 1962, type: !1893)
!4238 = !DILocation(line: 1962, column: 7, scope: !4232)
!4239 = !DILocation(line: 1962, column: 13, scope: !4232)
!4240 = !DILocalVariable(name: "i", scope: !4232, file: !3, line: 1963, type: !1917)
!4241 = !DILocation(line: 1963, column: 7, scope: !4232)
!4242 = !DILocation(line: 1965, column: 7, scope: !4243)
!4243 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 1965, column: 7)
!4244 = !DILocation(line: 1965, column: 22, scope: !4243)
!4245 = !DILocation(line: 1965, column: 7, scope: !4232)
!4246 = !DILocation(line: 1966, column: 15, scope: !4243)
!4247 = !DILocation(line: 1966, column: 20, scope: !4243)
!4248 = !DILocation(line: 1966, column: 5, scope: !4243)
!4249 = !DILocation(line: 1967, column: 12, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4243, file: !3, line: 1967, column: 12)
!4251 = !DILocation(line: 1967, column: 27, scope: !4250)
!4252 = !DILocation(line: 1967, column: 12, scope: !4243)
!4253 = !DILocation(line: 1968, column: 12, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4250, file: !3, line: 1968, column: 5)
!4255 = !DILocation(line: 1968, column: 10, scope: !4254)
!4256 = !DILocation(line: 1968, column: 17, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 1968, column: 5)
!4258 = !DILocation(line: 1968, column: 21, scope: !4257)
!4259 = !DILocation(line: 1968, column: 19, scope: !4257)
!4260 = !DILocation(line: 1968, column: 5, scope: !4254)
!4261 = !DILocalVariable(name: "x", scope: !4262, file: !3, line: 1970, type: !1893)
!4262 = distinct !DILexicalBlock(scope: !4257, file: !3, line: 1969, column: 7)
!4263 = !DILocation(line: 1970, column: 6, scope: !4262)
!4264 = !DILocation(line: 1970, column: 10, scope: !4262)
!4265 = !DILocation(line: 1972, column: 6, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 1972, column: 6)
!4267 = !DILocation(line: 1972, column: 19, scope: !4266)
!4268 = !DILocation(line: 1972, column: 6, scope: !4262)
!4269 = !DILocation(line: 1973, column: 14, scope: !4266)
!4270 = !DILocation(line: 1973, column: 17, scope: !4266)
!4271 = !DILocation(line: 1973, column: 4, scope: !4266)
!4272 = !DILocation(line: 1974, column: 11, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 1974, column: 11)
!4274 = !DILocation(line: 1974, column: 24, scope: !4273)
!4275 = !DILocation(line: 1974, column: 11, scope: !4266)
!4276 = !DILocation(line: 1975, column: 18, scope: !4273)
!4277 = !DILocation(line: 1975, column: 21, scope: !4273)
!4278 = !DILocation(line: 1975, column: 4, scope: !4273)
!4279 = !DILocation(line: 1976, column: 11, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 1976, column: 11)
!4281 = !DILocation(line: 1976, column: 24, scope: !4280)
!4282 = !DILocation(line: 1976, column: 11, scope: !4273)
!4283 = !DILocation(line: 1977, column: 15, scope: !4280)
!4284 = !DILocation(line: 1977, column: 4, scope: !4280)
!4285 = !DILocation(line: 1978, column: 7, scope: !4262)
!4286 = !DILocation(line: 1968, column: 40, scope: !4257)
!4287 = !DILocation(line: 1968, column: 5, scope: !4257)
!4288 = distinct !{!4288, !4260, !4289}
!4289 = !DILocation(line: 1978, column: 7, scope: !4254)
!4290 = !DILocation(line: 1980, column: 12, scope: !4291)
!4291 = distinct !DILexicalBlock(scope: !4250, file: !3, line: 1980, column: 12)
!4292 = !DILocation(line: 1980, column: 27, scope: !4291)
!4293 = !DILocation(line: 1980, column: 12, scope: !4250)
!4294 = !DILocation(line: 1981, column: 19, scope: !4291)
!4295 = !DILocation(line: 1981, column: 24, scope: !4291)
!4296 = !DILocation(line: 1981, column: 5, scope: !4291)
!4297 = !DILocation(line: 1982, column: 12, scope: !4298)
!4298 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 1982, column: 12)
!4299 = !DILocation(line: 1982, column: 27, scope: !4298)
!4300 = !DILocation(line: 1982, column: 12, scope: !4291)
!4301 = !DILocation(line: 1983, column: 16, scope: !4298)
!4302 = !DILocation(line: 1983, column: 5, scope: !4298)
!4303 = !DILocation(line: 1984, column: 1, scope: !4232)
!4304 = distinct !DISubprogram(name: "bypass_conditional_jumps", scope: !3, file: !3, line: 3106, type: !3488, scopeLine: 3107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4305 = !DILocalVariable(name: "bb", scope: !4304, file: !3, line: 3108, type: !2448)
!4306 = !DILocation(line: 3108, column: 15, scope: !4304)
!4307 = !DILocalVariable(name: "changed", scope: !4304, file: !3, line: 3109, type: !1917)
!4308 = !DILocation(line: 3109, column: 7, scope: !4304)
!4309 = !DILocalVariable(name: "setcc", scope: !4304, file: !3, line: 3110, type: !1893)
!4310 = !DILocation(line: 3110, column: 7, scope: !4304)
!4311 = !DILocalVariable(name: "insn", scope: !4304, file: !3, line: 3111, type: !1893)
!4312 = !DILocation(line: 3111, column: 7, scope: !4304)
!4313 = !DILocalVariable(name: "dest", scope: !4304, file: !3, line: 3112, type: !1893)
!4314 = !DILocation(line: 3112, column: 7, scope: !4304)
!4315 = !DILocation(line: 3115, column: 7, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 3115, column: 7)
!4317 = !DILocation(line: 3115, column: 24, scope: !4316)
!4318 = !DILocation(line: 3115, column: 35, scope: !4316)
!4319 = !DILocation(line: 3115, column: 32, scope: !4316)
!4320 = !DILocation(line: 3115, column: 7, scope: !4304)
!4321 = !DILocation(line: 3116, column: 5, scope: !4316)
!4322 = !DILocation(line: 3118, column: 29, scope: !4304)
!4323 = !DILocation(line: 3118, column: 27, scope: !4304)
!4324 = !DILocation(line: 3119, column: 3, scope: !4304)
!4325 = !DILocation(line: 3121, column: 11, scope: !4304)
!4326 = !DILocation(line: 3122, column: 3, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 3122, column: 3)
!4328 = !DILocation(line: 3122, column: 3, scope: !4329)
!4329 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 3122, column: 3)
!4330 = !DILocation(line: 3126, column: 27, scope: !4331)
!4331 = distinct !DILexicalBlock(scope: !4332, file: !3, line: 3126, column: 11)
!4332 = distinct !DILexicalBlock(scope: !4329, file: !3, line: 3124, column: 5)
!4333 = !DILocation(line: 3126, column: 12, scope: !4331)
!4334 = !DILocation(line: 3126, column: 11, scope: !4332)
!4335 = !DILocation(line: 3128, column: 10, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4331, file: !3, line: 3127, column: 2)
!4337 = !DILocation(line: 3129, column: 4, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 3129, column: 4)
!4339 = !DILocation(line: 3129, column: 4, scope: !4340)
!4340 = distinct !DILexicalBlock(scope: !4338, file: !3, line: 3129, column: 4)
!4341 = !DILocation(line: 0, scope: !4340)
!4342 = !DILocation(line: 3130, column: 10, scope: !4343)
!4343 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 3130, column: 10)
!4344 = !DILocation(line: 3130, column: 10, scope: !4340)
!4345 = !DILocation(line: 3131, column: 8, scope: !4343)
!4346 = !DILocation(line: 3132, column: 15, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4343, file: !3, line: 3132, column: 15)
!4348 = !DILocation(line: 3132, column: 15, scope: !4343)
!4349 = !DILocation(line: 3134, column: 7, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 3134, column: 7)
!4351 = distinct !DILexicalBlock(scope: !4347, file: !3, line: 3133, column: 8)
!4352 = !DILocation(line: 3134, column: 7, scope: !4351)
!4353 = !DILocation(line: 3135, column: 5, scope: !4350)
!4354 = !DILocation(line: 3136, column: 7, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 3136, column: 7)
!4356 = !DILocation(line: 3136, column: 33, scope: !4355)
!4357 = !DILocation(line: 3136, column: 7, scope: !4351)
!4358 = !DILocation(line: 3137, column: 5, scope: !4355)
!4359 = !DILocation(line: 3139, column: 10, scope: !4351)
!4360 = !DILocation(line: 3139, column: 8, scope: !4351)
!4361 = !DILocation(line: 3140, column: 7, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 3140, column: 7)
!4363 = !DILocation(line: 3140, column: 20, scope: !4362)
!4364 = !DILocation(line: 3140, column: 23, scope: !4362)
!4365 = !DILocation(line: 3140, column: 7, scope: !4351)
!4366 = !DILocation(line: 3141, column: 13, scope: !4362)
!4367 = !DILocation(line: 3141, column: 11, scope: !4362)
!4368 = !DILocation(line: 3141, column: 5, scope: !4362)
!4369 = !DILocation(line: 3143, column: 5, scope: !4362)
!4370 = !DILocation(line: 3144, column: 8, scope: !4351)
!4371 = !DILocation(line: 3145, column: 15, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4347, file: !3, line: 3145, column: 15)
!4373 = !DILocation(line: 3145, column: 15, scope: !4347)
!4374 = !DILocation(line: 3147, column: 24, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 3147, column: 7)
!4376 = distinct !DILexicalBlock(scope: !4372, file: !3, line: 3146, column: 8)
!4377 = !DILocation(line: 3147, column: 8, scope: !4375)
!4378 = !DILocation(line: 3147, column: 30, scope: !4375)
!4379 = !DILocation(line: 3147, column: 50, scope: !4375)
!4380 = !DILocation(line: 3147, column: 33, scope: !4375)
!4381 = !DILocation(line: 3148, column: 7, scope: !4375)
!4382 = !DILocation(line: 3148, column: 22, scope: !4375)
!4383 = !DILocation(line: 3148, column: 10, scope: !4375)
!4384 = !DILocation(line: 3147, column: 7, scope: !4376)
!4385 = !DILocation(line: 3149, column: 30, scope: !4375)
!4386 = !DILocation(line: 3149, column: 34, scope: !4375)
!4387 = !DILocation(line: 3149, column: 41, scope: !4375)
!4388 = !DILocation(line: 3149, column: 16, scope: !4375)
!4389 = !DILocation(line: 3149, column: 13, scope: !4375)
!4390 = !DILocation(line: 3149, column: 5, scope: !4375)
!4391 = !DILocation(line: 3150, column: 3, scope: !4376)
!4392 = !DILocation(line: 3152, column: 15, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4372, file: !3, line: 3152, column: 15)
!4394 = !DILocation(line: 3152, column: 15, scope: !4372)
!4395 = !DILocation(line: 3153, column: 8, scope: !4393)
!4396 = distinct !{!4396, !4337, !4397}
!4397 = !DILocation(line: 3153, column: 8, scope: !4338)
!4398 = !DILocation(line: 3154, column: 2, scope: !4336)
!4399 = !DILocation(line: 3155, column: 5, scope: !4332)
!4400 = distinct !{!4400, !4326, !4401}
!4401 = !DILocation(line: 3155, column: 5, scope: !4327)
!4402 = !DILocation(line: 3159, column: 7, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 3159, column: 7)
!4404 = !DILocation(line: 3159, column: 7, scope: !4304)
!4405 = !DILocation(line: 3160, column: 5, scope: !4403)
!4406 = !DILocation(line: 3162, column: 10, scope: !4304)
!4407 = !DILocation(line: 3162, column: 3, scope: !4304)
!4408 = !DILocation(line: 3163, column: 1, scope: !4304)
!4409 = distinct !DISubprogram(name: "free_cprop_mem", scope: !3, file: !3, line: 2013, type: !3321, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4410 = !DILocation(line: 2015, column: 3, scope: !4409)
!4411 = !DILocation(line: 2016, column: 3, scope: !4409)
!4412 = !DILocation(line: 2017, column: 3, scope: !4409)
!4413 = !DILocation(line: 2018, column: 3, scope: !4409)
!4414 = !DILocation(line: 2019, column: 1, scope: !4409)
!4415 = distinct !DISubprogram(name: "free_hash_table", scope: !3, file: !3, line: 1732, type: !3863, scopeLine: 1733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4416 = !DILocalVariable(name: "table", arg: 1, scope: !4415, file: !3, line: 1732, type: !3824)
!4417 = !DILocation(line: 1732, column: 39, scope: !4415)
!4418 = !DILocation(line: 1734, column: 9, scope: !4415)
!4419 = !DILocation(line: 1734, column: 16, scope: !4415)
!4420 = !DILocation(line: 1734, column: 3, scope: !4415)
!4421 = !DILocation(line: 1735, column: 1, scope: !4415)
!4422 = distinct !DISubprogram(name: "free_gcse_mem", scope: !3, file: !3, line: 641, type: !3321, scopeLine: 642, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4423 = !DILocation(line: 643, column: 3, scope: !4422)
!4424 = !DILocation(line: 644, column: 3, scope: !4422)
!4425 = !DILocation(line: 645, column: 3, scope: !4422)
!4426 = !DILocation(line: 646, column: 1, scope: !4422)
!4427 = distinct !DISubprogram(name: "gcalloc", scope: !3, file: !3, line: 606, type: !2395, scopeLine: 607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4428 = !DILocalVariable(name: "nelem", arg: 1, scope: !4427, file: !3, line: 606, type: !2386)
!4429 = !DILocation(line: 606, column: 17, scope: !4427)
!4430 = !DILocalVariable(name: "elsize", arg: 2, scope: !4427, file: !3, line: 606, type: !2386)
!4431 = !DILocation(line: 606, column: 31, scope: !4427)
!4432 = !DILocation(line: 608, column: 17, scope: !4427)
!4433 = !DILocation(line: 608, column: 25, scope: !4427)
!4434 = !DILocation(line: 608, column: 23, scope: !4427)
!4435 = !DILocation(line: 608, column: 14, scope: !4427)
!4436 = !DILocation(line: 609, column: 19, scope: !4427)
!4437 = !DILocation(line: 609, column: 26, scope: !4427)
!4438 = !DILocation(line: 609, column: 10, scope: !4427)
!4439 = !DILocation(line: 609, column: 3, scope: !4427)
!4440 = distinct !DISubprogram(name: "local_cprop_find_used_regs", scope: !3, file: !3, line: 2612, type: !4441, scopeLine: 2613, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4441 = !DISubroutineType(types: !4442)
!4442 = !{null, !1892, !1887}
!4443 = !DILocalVariable(name: "xptr", arg: 1, scope: !4440, file: !3, line: 2612, type: !1892)
!4444 = !DILocation(line: 2612, column: 34, scope: !4440)
!4445 = !DILocalVariable(name: "data", arg: 2, scope: !4440, file: !3, line: 2612, type: !1887)
!4446 = !DILocation(line: 2612, column: 46, scope: !4440)
!4447 = !DILocalVariable(name: "x", scope: !4440, file: !3, line: 2614, type: !1893)
!4448 = !DILocation(line: 2614, column: 7, scope: !4440)
!4449 = !DILocation(line: 2614, column: 12, scope: !4440)
!4450 = !DILocation(line: 2614, column: 11, scope: !4440)
!4451 = !DILocation(line: 2616, column: 7, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4440, file: !3, line: 2616, column: 7)
!4453 = !DILocation(line: 2616, column: 9, scope: !4452)
!4454 = !DILocation(line: 2616, column: 7, scope: !4440)
!4455 = !DILocation(line: 2617, column: 5, scope: !4452)
!4456 = !DILocation(line: 2619, column: 11, scope: !4440)
!4457 = !DILocation(line: 2619, column: 3, scope: !4440)
!4458 = !DILocation(line: 2624, column: 7, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4440, file: !3, line: 2620, column: 5)
!4460 = !DILocation(line: 2635, column: 7, scope: !4459)
!4461 = !DILocation(line: 2640, column: 11, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 2640, column: 11)
!4463 = !DILocation(line: 2640, column: 56, scope: !4462)
!4464 = !DILocation(line: 2640, column: 11, scope: !4459)
!4465 = !DILocation(line: 2641, column: 2, scope: !4462)
!4466 = !DILocation(line: 2642, column: 7, scope: !4459)
!4467 = !DILocation(line: 2645, column: 7, scope: !4459)
!4468 = !DILocation(line: 2648, column: 19, scope: !4440)
!4469 = !DILocation(line: 2648, column: 25, scope: !4440)
!4470 = !DILocation(line: 2648, column: 3, scope: !4440)
!4471 = !DILocation(line: 2649, column: 1, scope: !4440)
!4472 = distinct !DISubprogram(name: "do_local_cprop", scope: !3, file: !3, line: 2654, type: !4473, scopeLine: 2655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4473 = !DISubroutineType(types: !4474)
!4474 = !{!6, !1893, !1893}
!4475 = !DILocalVariable(name: "x", arg: 1, scope: !4472, file: !3, line: 2654, type: !1893)
!4476 = !DILocation(line: 2654, column: 21, scope: !4472)
!4477 = !DILocalVariable(name: "insn", arg: 2, scope: !4472, file: !3, line: 2654, type: !1893)
!4478 = !DILocation(line: 2654, column: 28, scope: !4472)
!4479 = !DILocalVariable(name: "newreg", scope: !4472, file: !3, line: 2656, type: !1893)
!4480 = !DILocation(line: 2656, column: 7, scope: !4472)
!4481 = !DILocalVariable(name: "newcnst", scope: !4472, file: !3, line: 2656, type: !1893)
!4482 = !DILocation(line: 2656, column: 22, scope: !4472)
!4483 = !DILocation(line: 2660, column: 7, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 2660, column: 7)
!4485 = !DILocation(line: 2661, column: 7, scope: !4484)
!4486 = !DILocation(line: 2661, column: 11, scope: !4484)
!4487 = !DILocation(line: 2661, column: 21, scope: !4484)
!4488 = !DILocation(line: 2662, column: 11, scope: !4484)
!4489 = !DILocation(line: 2662, column: 15, scope: !4484)
!4490 = !DILocation(line: 2662, column: 41, scope: !4484)
!4491 = !DILocation(line: 2663, column: 8, scope: !4484)
!4492 = !DILocation(line: 2663, column: 26, scope: !4484)
!4493 = !DILocation(line: 2663, column: 11, scope: !4484)
!4494 = !DILocation(line: 2663, column: 42, scope: !4484)
!4495 = !DILocation(line: 2660, column: 7, scope: !4472)
!4496 = !DILocalVariable(name: "val", scope: !4497, file: !3, line: 2665, type: !1968)
!4497 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 2664, column: 5)
!4498 = !DILocation(line: 2665, column: 19, scope: !4497)
!4499 = !DILocation(line: 2665, column: 40, scope: !4497)
!4500 = !DILocation(line: 2665, column: 43, scope: !4497)
!4501 = !DILocation(line: 2665, column: 25, scope: !4497)
!4502 = !DILocalVariable(name: "l", scope: !4497, file: !3, line: 2666, type: !1956)
!4503 = !DILocation(line: 2666, column: 28, scope: !4497)
!4504 = !DILocation(line: 2668, column: 12, scope: !4505)
!4505 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 2668, column: 11)
!4506 = !DILocation(line: 2668, column: 11, scope: !4497)
!4507 = !DILocation(line: 2669, column: 2, scope: !4505)
!4508 = !DILocation(line: 2670, column: 16, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 2670, column: 7)
!4510 = !DILocation(line: 2670, column: 21, scope: !4509)
!4511 = !DILocation(line: 2670, column: 14, scope: !4509)
!4512 = !DILocation(line: 2670, column: 12, scope: !4509)
!4513 = !DILocation(line: 2670, column: 27, scope: !4514)
!4514 = distinct !DILexicalBlock(scope: !4509, file: !3, line: 2670, column: 7)
!4515 = !DILocation(line: 2670, column: 7, scope: !4509)
!4516 = !DILocalVariable(name: "this_rtx", scope: !4517, file: !3, line: 2672, type: !1893)
!4517 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 2671, column: 2)
!4518 = !DILocation(line: 2672, column: 8, scope: !4517)
!4519 = !DILocation(line: 2672, column: 19, scope: !4517)
!4520 = !DILocation(line: 2672, column: 22, scope: !4517)
!4521 = !DILocalVariable(name: "note", scope: !4517, file: !3, line: 2673, type: !1893)
!4522 = !DILocation(line: 2673, column: 8, scope: !4517)
!4523 = !DILocation(line: 2675, column: 25, scope: !4524)
!4524 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 2675, column: 8)
!4525 = !DILocation(line: 2675, column: 8, scope: !4524)
!4526 = !DILocation(line: 2675, column: 8, scope: !4517)
!4527 = !DILocation(line: 2676, column: 16, scope: !4524)
!4528 = !DILocation(line: 2676, column: 14, scope: !4524)
!4529 = !DILocation(line: 2676, column: 6, scope: !4524)
!4530 = !DILocation(line: 2677, column: 8, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 2677, column: 8)
!4532 = !DILocation(line: 2677, column: 25, scope: !4531)
!4533 = !DILocation(line: 2677, column: 28, scope: !4531)
!4534 = !DILocation(line: 2677, column: 45, scope: !4531)
!4535 = !DILocation(line: 2683, column: 8, scope: !4531)
!4536 = !DILocation(line: 2683, column: 36, scope: !4531)
!4537 = !DILocation(line: 2683, column: 39, scope: !4531)
!4538 = !DILocation(line: 2683, column: 21, scope: !4531)
!4539 = !DILocation(line: 2683, column: 19, scope: !4531)
!4540 = !DILocation(line: 2684, column: 5, scope: !4531)
!4541 = !DILocation(line: 2684, column: 10, scope: !4531)
!4542 = !DILocation(line: 2677, column: 8, scope: !4517)
!4543 = !DILocation(line: 2685, column: 15, scope: !4531)
!4544 = !DILocation(line: 2685, column: 13, scope: !4531)
!4545 = !DILocation(line: 2685, column: 6, scope: !4531)
!4546 = !DILocation(line: 2686, column: 2, scope: !4517)
!4547 = !DILocation(line: 2670, column: 34, scope: !4514)
!4548 = !DILocation(line: 2670, column: 37, scope: !4514)
!4549 = !DILocation(line: 2670, column: 32, scope: !4514)
!4550 = !DILocation(line: 2670, column: 7, scope: !4514)
!4551 = distinct !{!4551, !4515, !4552}
!4552 = !DILocation(line: 2686, column: 2, scope: !4509)
!4553 = !DILocation(line: 2687, column: 11, scope: !4554)
!4554 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 2687, column: 11)
!4555 = !DILocation(line: 2687, column: 19, scope: !4554)
!4556 = !DILocation(line: 2687, column: 42, scope: !4554)
!4557 = !DILocation(line: 2687, column: 48, scope: !4554)
!4558 = !DILocation(line: 2687, column: 51, scope: !4554)
!4559 = !DILocation(line: 2687, column: 22, scope: !4554)
!4560 = !DILocation(line: 2687, column: 11, scope: !4497)
!4561 = !DILocation(line: 2689, column: 8, scope: !4562)
!4562 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 2689, column: 8)
!4563 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 2688, column: 2)
!4564 = !DILocation(line: 2689, column: 18, scope: !4562)
!4565 = !DILocation(line: 2689, column: 8, scope: !4563)
!4566 = !DILocation(line: 2691, column: 17, scope: !4567)
!4567 = distinct !DILexicalBlock(scope: !4562, file: !3, line: 2690, column: 6)
!4568 = !DILocation(line: 2692, column: 10, scope: !4567)
!4569 = !DILocation(line: 2691, column: 8, scope: !4567)
!4570 = !DILocation(line: 2693, column: 17, scope: !4567)
!4571 = !DILocation(line: 2694, column: 10, scope: !4567)
!4572 = !DILocation(line: 2693, column: 8, scope: !4567)
!4573 = !DILocation(line: 2695, column: 19, scope: !4567)
!4574 = !DILocation(line: 2695, column: 30, scope: !4567)
!4575 = !DILocation(line: 2695, column: 8, scope: !4567)
!4576 = !DILocation(line: 2696, column: 17, scope: !4567)
!4577 = !DILocation(line: 2696, column: 8, scope: !4567)
!4578 = !DILocation(line: 2697, column: 6, scope: !4567)
!4579 = !DILocation(line: 2698, column: 26, scope: !4563)
!4580 = !DILocation(line: 2699, column: 4, scope: !4563)
!4581 = !DILocation(line: 2701, column: 16, scope: !4582)
!4582 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 2701, column: 16)
!4583 = !DILocation(line: 2701, column: 23, scope: !4582)
!4584 = !DILocation(line: 2701, column: 26, scope: !4582)
!4585 = !DILocation(line: 2701, column: 36, scope: !4582)
!4586 = !DILocation(line: 2701, column: 33, scope: !4582)
!4587 = !DILocation(line: 2701, column: 38, scope: !4582)
!4588 = !DILocation(line: 2701, column: 58, scope: !4582)
!4589 = !DILocation(line: 2701, column: 61, scope: !4582)
!4590 = !DILocation(line: 2701, column: 69, scope: !4582)
!4591 = !DILocation(line: 2701, column: 41, scope: !4582)
!4592 = !DILocation(line: 2701, column: 16, scope: !4554)
!4593 = !DILocation(line: 2703, column: 8, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 2703, column: 8)
!4595 = distinct !DILexicalBlock(scope: !4582, file: !3, line: 2702, column: 2)
!4596 = !DILocation(line: 2703, column: 18, scope: !4594)
!4597 = !DILocation(line: 2703, column: 8, scope: !4595)
!4598 = !DILocation(line: 2705, column: 17, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 2704, column: 6)
!4600 = !DILocation(line: 2707, column: 10, scope: !4599)
!4601 = !DILocation(line: 2707, column: 21, scope: !4599)
!4602 = !DILocation(line: 2705, column: 8, scope: !4599)
!4603 = !DILocation(line: 2708, column: 17, scope: !4599)
!4604 = !DILocation(line: 2708, column: 46, scope: !4599)
!4605 = !DILocation(line: 2708, column: 8, scope: !4599)
!4606 = !DILocation(line: 2709, column: 6, scope: !4599)
!4607 = !DILocation(line: 2710, column: 25, scope: !4595)
!4608 = !DILocation(line: 2711, column: 4, scope: !4595)
!4609 = !DILocation(line: 2713, column: 5, scope: !4497)
!4610 = !DILocation(line: 2714, column: 3, scope: !4472)
!4611 = !DILocation(line: 2715, column: 1, scope: !4472)
!4612 = distinct !DISubprogram(name: "find_used_regs", scope: !3, file: !3, line: 2185, type: !4441, scopeLine: 2186, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4613 = !DILocalVariable(name: "xptr", arg: 1, scope: !4612, file: !3, line: 2185, type: !1892)
!4614 = !DILocation(line: 2185, column: 22, scope: !4612)
!4615 = !DILocalVariable(name: "data", arg: 2, scope: !4612, file: !3, line: 2185, type: !1887)
!4616 = !DILocation(line: 2185, column: 34, scope: !4612)
!4617 = !DILocalVariable(name: "i", scope: !4612, file: !3, line: 2187, type: !1917)
!4618 = !DILocation(line: 2187, column: 7, scope: !4612)
!4619 = !DILocalVariable(name: "j", scope: !4612, file: !3, line: 2187, type: !1917)
!4620 = !DILocation(line: 2187, column: 10, scope: !4612)
!4621 = !DILocalVariable(name: "code", scope: !4612, file: !3, line: 2188, type: !388)
!4622 = !DILocation(line: 2188, column: 17, scope: !4612)
!4623 = !DILocalVariable(name: "fmt", scope: !4612, file: !3, line: 2189, type: !1920)
!4624 = !DILocation(line: 2189, column: 15, scope: !4612)
!4625 = !DILocalVariable(name: "x", scope: !4612, file: !3, line: 2190, type: !1893)
!4626 = !DILocation(line: 2190, column: 7, scope: !4612)
!4627 = !DILocation(line: 2190, column: 12, scope: !4612)
!4628 = !DILocation(line: 2190, column: 11, scope: !4612)
!4629 = !DILocation(line: 2190, column: 3, scope: !4612)
!4630 = !DILabel(scope: !4612, name: "repeat", file: !3, line: 2194)
!4631 = !DILocation(line: 2194, column: 2, scope: !4612)
!4632 = !DILocation(line: 2195, column: 7, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 2195, column: 7)
!4634 = !DILocation(line: 2195, column: 9, scope: !4633)
!4635 = !DILocation(line: 2195, column: 7, scope: !4612)
!4636 = !DILocation(line: 2196, column: 5, scope: !4633)
!4637 = !DILocation(line: 2198, column: 10, scope: !4612)
!4638 = !DILocation(line: 2198, column: 8, scope: !4612)
!4639 = !DILocation(line: 2199, column: 7, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 2199, column: 7)
!4641 = !DILocation(line: 2199, column: 7, scope: !4612)
!4642 = !DILocation(line: 2201, column: 11, scope: !4643)
!4643 = distinct !DILexicalBlock(scope: !4644, file: !3, line: 2201, column: 11)
!4644 = distinct !DILexicalBlock(scope: !4640, file: !3, line: 2200, column: 5)
!4645 = !DILocation(line: 2201, column: 25, scope: !4643)
!4646 = !DILocation(line: 2201, column: 11, scope: !4644)
!4647 = !DILocation(line: 2202, column: 2, scope: !4643)
!4648 = !DILocation(line: 2204, column: 46, scope: !4644)
!4649 = !DILocation(line: 2204, column: 21, scope: !4644)
!4650 = !DILocation(line: 2204, column: 7, scope: !4644)
!4651 = !DILocation(line: 2204, column: 36, scope: !4644)
!4652 = !DILocation(line: 2204, column: 44, scope: !4644)
!4653 = !DILocation(line: 2205, column: 20, scope: !4644)
!4654 = !DILocation(line: 2206, column: 5, scope: !4644)
!4655 = !DILocation(line: 2210, column: 12, scope: !4656)
!4656 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 2210, column: 3)
!4657 = !DILocation(line: 2210, column: 34, scope: !4656)
!4658 = !DILocation(line: 2210, column: 10, scope: !4656)
!4659 = !DILocation(line: 2210, column: 45, scope: !4656)
!4660 = !DILocation(line: 2210, column: 43, scope: !4656)
!4661 = !DILocation(line: 2210, column: 8, scope: !4656)
!4662 = !DILocation(line: 2210, column: 68, scope: !4663)
!4663 = distinct !DILexicalBlock(scope: !4656, file: !3, line: 2210, column: 3)
!4664 = !DILocation(line: 2210, column: 70, scope: !4663)
!4665 = !DILocation(line: 2210, column: 3, scope: !4656)
!4666 = !DILocation(line: 2212, column: 11, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4668, file: !3, line: 2212, column: 11)
!4668 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 2211, column: 5)
!4669 = !DILocation(line: 2212, column: 15, scope: !4667)
!4670 = !DILocation(line: 2212, column: 18, scope: !4667)
!4671 = !DILocation(line: 2212, column: 11, scope: !4668)
!4672 = !DILocation(line: 2217, column: 8, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4674, file: !3, line: 2217, column: 8)
!4674 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 2213, column: 2)
!4675 = !DILocation(line: 2217, column: 10, scope: !4673)
!4676 = !DILocation(line: 2217, column: 8, scope: !4674)
!4677 = !DILocation(line: 2219, column: 12, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4673, file: !3, line: 2218, column: 6)
!4679 = !DILocation(line: 2219, column: 10, scope: !4678)
!4680 = !DILocation(line: 2220, column: 8, scope: !4678)
!4681 = !DILocation(line: 2223, column: 21, scope: !4674)
!4682 = !DILocation(line: 2223, column: 34, scope: !4674)
!4683 = !DILocation(line: 2223, column: 4, scope: !4674)
!4684 = !DILocation(line: 2224, column: 2, scope: !4674)
!4685 = !DILocation(line: 2225, column: 16, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 2225, column: 16)
!4687 = !DILocation(line: 2225, column: 20, scope: !4686)
!4688 = !DILocation(line: 2225, column: 23, scope: !4686)
!4689 = !DILocation(line: 2225, column: 16, scope: !4667)
!4690 = !DILocation(line: 2226, column: 9, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 2226, column: 2)
!4692 = !DILocation(line: 2226, column: 7, scope: !4691)
!4693 = !DILocation(line: 2226, column: 14, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 2226, column: 2)
!4695 = !DILocation(line: 2226, column: 18, scope: !4694)
!4696 = !DILocation(line: 2226, column: 16, scope: !4694)
!4697 = !DILocation(line: 2226, column: 2, scope: !4691)
!4698 = !DILocation(line: 2227, column: 21, scope: !4694)
!4699 = !DILocation(line: 2227, column: 40, scope: !4694)
!4700 = !DILocation(line: 2227, column: 4, scope: !4694)
!4701 = !DILocation(line: 2226, column: 35, scope: !4694)
!4702 = !DILocation(line: 2226, column: 2, scope: !4694)
!4703 = distinct !{!4703, !4697, !4704}
!4704 = !DILocation(line: 2227, column: 44, scope: !4691)
!4705 = !DILocation(line: 2228, column: 5, scope: !4668)
!4706 = !DILocation(line: 2210, column: 77, scope: !4663)
!4707 = !DILocation(line: 2210, column: 3, scope: !4663)
!4708 = distinct !{!4708, !4665, !4709}
!4709 = !DILocation(line: 2228, column: 5, scope: !4656)
!4710 = !DILocation(line: 2229, column: 1, scope: !4612)
!4711 = distinct !DISubprogram(name: "rhs_regno", scope: !389, file: !389, line: 1051, type: !4712, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4712 = !DISubroutineType(types: !4713)
!4713 = !{!9, !3232}
!4714 = !DILocalVariable(name: "x", arg: 1, scope: !4711, file: !389, line: 1051, type: !3232)
!4715 = !DILocation(line: 1051, column: 22, scope: !4711)
!4716 = !DILocation(line: 1053, column: 10, scope: !4711)
!4717 = !DILocation(line: 1053, column: 3, scope: !4711)
!4718 = distinct !DISubprogram(name: "gcse_constant_p", scope: !3, file: !3, line: 1271, type: !4719, scopeLine: 1272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4719 = !DISubroutineType(types: !4720)
!4720 = !{!6, !3232}
!4721 = !DILocalVariable(name: "x", arg: 1, scope: !4718, file: !3, line: 1271, type: !3232)
!4722 = !DILocation(line: 1271, column: 28, scope: !4718)
!4723 = !DILocation(line: 1274, column: 7, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 1274, column: 7)
!4725 = !DILocation(line: 1274, column: 20, scope: !4724)
!4726 = !DILocation(line: 1275, column: 7, scope: !4724)
!4727 = !DILocation(line: 1275, column: 10, scope: !4724)
!4728 = !DILocation(line: 1276, column: 7, scope: !4724)
!4729 = !DILocation(line: 1276, column: 10, scope: !4724)
!4730 = !DILocation(line: 1274, column: 7, scope: !4718)
!4731 = !DILocation(line: 1277, column: 5, scope: !4724)
!4732 = !DILocation(line: 1281, column: 7, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 1281, column: 7)
!4734 = !DILocation(line: 1281, column: 19, scope: !4733)
!4735 = !DILocation(line: 1282, column: 7, scope: !4733)
!4736 = !DILocation(line: 1282, column: 10, scope: !4733)
!4737 = !DILocation(line: 1282, column: 30, scope: !4733)
!4738 = !DILocation(line: 1282, column: 33, scope: !4733)
!4739 = !DILocation(line: 1283, column: 7, scope: !4733)
!4740 = !DILocation(line: 1283, column: 10, scope: !4733)
!4741 = !DILocation(line: 1283, column: 33, scope: !4733)
!4742 = !DILocation(line: 1283, column: 30, scope: !4733)
!4743 = !DILocation(line: 1284, column: 7, scope: !4733)
!4744 = !DILocation(line: 1284, column: 12, scope: !4733)
!4745 = !DILocation(line: 1285, column: 7, scope: !4733)
!4746 = !DILocation(line: 1285, column: 12, scope: !4733)
!4747 = !DILocation(line: 1281, column: 7, scope: !4718)
!4748 = !DILocation(line: 1286, column: 5, scope: !4733)
!4749 = !DILocation(line: 1290, column: 10, scope: !4718)
!4750 = !DILocation(line: 1290, column: 25, scope: !4718)
!4751 = !DILocation(line: 1290, column: 29, scope: !4718)
!4752 = !DILocation(line: 1290, column: 42, scope: !4718)
!4753 = !DILocation(line: 1290, column: 51, scope: !4718)
!4754 = !DILocation(line: 1290, column: 70, scope: !4718)
!4755 = !DILocation(line: 1290, column: 54, scope: !4718)
!4756 = !DILocation(line: 0, scope: !4718)
!4757 = !DILocation(line: 1290, column: 3, scope: !4718)
!4758 = !DILocation(line: 1291, column: 1, scope: !4718)
!4759 = distinct !DISubprogram(name: "constprop_register", scope: !3, file: !3, line: 2480, type: !4760, scopeLine: 2481, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4760 = !DISubroutineType(types: !4761)
!4761 = !{!6, !1893, !1893, !1893}
!4762 = !DILocalVariable(name: "insn", arg: 1, scope: !4759, file: !3, line: 2480, type: !1893)
!4763 = !DILocation(line: 2480, column: 25, scope: !4759)
!4764 = !DILocalVariable(name: "from", arg: 2, scope: !4759, file: !3, line: 2480, type: !1893)
!4765 = !DILocation(line: 2480, column: 35, scope: !4759)
!4766 = !DILocalVariable(name: "to", arg: 3, scope: !4759, file: !3, line: 2480, type: !1893)
!4767 = !DILocation(line: 2480, column: 45, scope: !4759)
!4768 = !DILocalVariable(name: "sset", scope: !4759, file: !3, line: 2482, type: !1893)
!4769 = !DILocation(line: 2482, column: 7, scope: !4759)
!4770 = !DILocation(line: 2486, column: 15, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2486, column: 7)
!4772 = !DILocation(line: 2486, column: 13, scope: !4771)
!4773 = !DILocation(line: 2486, column: 34, scope: !4771)
!4774 = !DILocation(line: 2487, column: 7, scope: !4771)
!4775 = !DILocation(line: 2487, column: 10, scope: !4771)
!4776 = !DILocation(line: 2488, column: 7, scope: !4771)
!4777 = !DILocation(line: 2488, column: 26, scope: !4771)
!4778 = !DILocation(line: 2488, column: 10, scope: !4771)
!4779 = !DILocation(line: 2488, column: 44, scope: !4771)
!4780 = !DILocation(line: 2488, column: 59, scope: !4771)
!4781 = !DILocation(line: 2488, column: 47, scope: !4771)
!4782 = !DILocation(line: 2486, column: 7, scope: !4759)
!4783 = !DILocalVariable(name: "dest", scope: !4784, file: !3, line: 2490, type: !1893)
!4784 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 2489, column: 5)
!4785 = !DILocation(line: 2490, column: 11, scope: !4784)
!4786 = !DILocation(line: 2490, column: 18, scope: !4784)
!4787 = !DILocation(line: 2491, column: 12, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 2491, column: 11)
!4789 = !DILocation(line: 2491, column: 25, scope: !4788)
!4790 = !DILocation(line: 2491, column: 28, scope: !4788)
!4791 = !DILocation(line: 2492, column: 4, scope: !4788)
!4792 = !DILocation(line: 2492, column: 19, scope: !4788)
!4793 = !DILocation(line: 2492, column: 42, scope: !4788)
!4794 = !DILocation(line: 2492, column: 48, scope: !4788)
!4795 = !DILocation(line: 2492, column: 66, scope: !4788)
!4796 = !DILocation(line: 2492, column: 72, scope: !4788)
!4797 = !DILocation(line: 2492, column: 7, scope: !4788)
!4798 = !DILocation(line: 2491, column: 11, scope: !4784)
!4799 = !DILocation(line: 2493, column: 2, scope: !4788)
!4800 = !DILocation(line: 2494, column: 5, scope: !4784)
!4801 = !DILocation(line: 2497, column: 7, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2497, column: 7)
!4803 = !DILocation(line: 2498, column: 7, scope: !4802)
!4804 = !DILocation(line: 2498, column: 27, scope: !4802)
!4805 = !DILocation(line: 2498, column: 33, scope: !4802)
!4806 = !DILocation(line: 2498, column: 37, scope: !4802)
!4807 = !DILocation(line: 2498, column: 10, scope: !4802)
!4808 = !DILocation(line: 2497, column: 7, scope: !4759)
!4809 = !DILocation(line: 2499, column: 5, scope: !4802)
!4810 = !DILocation(line: 2507, column: 28, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 2507, column: 12)
!4812 = !DILocation(line: 2507, column: 12, scope: !4811)
!4813 = !DILocation(line: 2507, column: 34, scope: !4811)
!4814 = !DILocation(line: 2507, column: 49, scope: !4811)
!4815 = !DILocation(line: 2507, column: 37, scope: !4811)
!4816 = !DILocation(line: 2507, column: 12, scope: !4802)
!4817 = !DILocation(line: 2508, column: 24, scope: !4811)
!4818 = !DILocation(line: 2508, column: 53, scope: !4811)
!4819 = !DILocation(line: 2508, column: 59, scope: !4811)
!4820 = !DILocation(line: 2508, column: 65, scope: !4811)
!4821 = !DILocation(line: 2508, column: 12, scope: !4811)
!4822 = !DILocation(line: 2508, column: 5, scope: !4811)
!4823 = !DILocation(line: 2509, column: 3, scope: !4759)
!4824 = !DILocation(line: 2510, column: 1, scope: !4759)
!4825 = distinct !DISubprogram(name: "try_replace_reg", scope: !3, file: !3, line: 2235, type: !4826, scopeLine: 2236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4826 = !DISubroutineType(types: !4827)
!4827 = !{!1917, !1893, !1893, !1893}
!4828 = !DILocalVariable(name: "from", arg: 1, scope: !4825, file: !3, line: 2235, type: !1893)
!4829 = !DILocation(line: 2235, column: 22, scope: !4825)
!4830 = !DILocalVariable(name: "to", arg: 2, scope: !4825, file: !3, line: 2235, type: !1893)
!4831 = !DILocation(line: 2235, column: 32, scope: !4825)
!4832 = !DILocalVariable(name: "insn", arg: 3, scope: !4825, file: !3, line: 2235, type: !1893)
!4833 = !DILocation(line: 2235, column: 40, scope: !4825)
!4834 = !DILocalVariable(name: "note", scope: !4825, file: !3, line: 2237, type: !1893)
!4835 = !DILocation(line: 2237, column: 7, scope: !4825)
!4836 = !DILocation(line: 2237, column: 41, scope: !4825)
!4837 = !DILocation(line: 2237, column: 14, scope: !4825)
!4838 = !DILocalVariable(name: "src", scope: !4825, file: !3, line: 2238, type: !1893)
!4839 = !DILocation(line: 2238, column: 7, scope: !4825)
!4840 = !DILocalVariable(name: "success", scope: !4825, file: !3, line: 2239, type: !1917)
!4841 = !DILocation(line: 2239, column: 7, scope: !4825)
!4842 = !DILocalVariable(name: "set", scope: !4825, file: !3, line: 2240, type: !1893)
!4843 = !DILocation(line: 2240, column: 7, scope: !4825)
!4844 = !DILocation(line: 2240, column: 13, scope: !4825)
!4845 = !DILocation(line: 2245, column: 18, scope: !4825)
!4846 = !DILocation(line: 2245, column: 8, scope: !4825)
!4847 = !DILocation(line: 2245, column: 6, scope: !4825)
!4848 = !DILocation(line: 2247, column: 31, scope: !4825)
!4849 = !DILocation(line: 2247, column: 37, scope: !4825)
!4850 = !DILocation(line: 2247, column: 41, scope: !4825)
!4851 = !DILocation(line: 2247, column: 3, scope: !4825)
!4852 = !DILocation(line: 2248, column: 7, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 2248, column: 7)
!4854 = !DILocation(line: 2248, column: 30, scope: !4853)
!4855 = !DILocation(line: 2248, column: 33, scope: !4853)
!4856 = !DILocation(line: 2248, column: 7, scope: !4825)
!4857 = !DILocation(line: 2249, column: 13, scope: !4853)
!4858 = !DILocation(line: 2249, column: 5, scope: !4853)
!4859 = !DILocation(line: 2252, column: 7, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 2252, column: 7)
!4861 = !DILocation(line: 2252, column: 15, scope: !4860)
!4862 = !DILocation(line: 2252, column: 18, scope: !4860)
!4863 = !DILocation(line: 2252, column: 22, scope: !4860)
!4864 = !DILocation(line: 2252, column: 25, scope: !4860)
!4865 = !DILocation(line: 2252, column: 7, scope: !4825)
!4866 = !DILocation(line: 2254, column: 27, scope: !4867)
!4867 = distinct !DILexicalBlock(scope: !4860, file: !3, line: 2253, column: 5)
!4868 = !DILocation(line: 2254, column: 13, scope: !4867)
!4869 = !DILocation(line: 2254, column: 11, scope: !4867)
!4870 = !DILocation(line: 2256, column: 11, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4867, file: !3, line: 2256, column: 11)
!4872 = !DILocation(line: 2256, column: 11, scope: !4867)
!4873 = !DILocation(line: 2257, column: 19, scope: !4871)
!4874 = !DILocation(line: 2257, column: 26, scope: !4871)
!4875 = !DILocation(line: 2257, column: 41, scope: !4871)
!4876 = !DILocation(line: 2257, column: 2, scope: !4871)
!4877 = !DILocation(line: 2258, column: 5, scope: !4867)
!4878 = !DILocation(line: 2262, column: 7, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 2262, column: 7)
!4880 = !DILocation(line: 2262, column: 12, scope: !4879)
!4881 = !DILocation(line: 2262, column: 17, scope: !4879)
!4882 = !DILocation(line: 2262, column: 20, scope: !4879)
!4883 = !DILocation(line: 2262, column: 41, scope: !4879)
!4884 = !DILocation(line: 2262, column: 7, scope: !4825)
!4885 = !DILocation(line: 2263, column: 26, scope: !4879)
!4886 = !DILocation(line: 2264, column: 27, scope: !4879)
!4887 = !DILocation(line: 2264, column: 43, scope: !4879)
!4888 = !DILocation(line: 2264, column: 49, scope: !4879)
!4889 = !DILocation(line: 2264, column: 5, scope: !4879)
!4890 = !DILocation(line: 2263, column: 5, scope: !4879)
!4891 = !DILocation(line: 2265, column: 8, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 2265, column: 7)
!4893 = !DILocation(line: 2265, column: 16, scope: !4892)
!4894 = !DILocation(line: 2265, column: 19, scope: !4892)
!4895 = !DILocation(line: 2265, column: 23, scope: !4892)
!4896 = !DILocation(line: 2265, column: 43, scope: !4892)
!4897 = !DILocation(line: 2265, column: 49, scope: !4892)
!4898 = !DILocation(line: 2265, column: 26, scope: !4892)
!4899 = !DILocation(line: 2265, column: 7, scope: !4825)
!4900 = !DILocation(line: 2270, column: 35, scope: !4901)
!4901 = distinct !DILexicalBlock(scope: !4892, file: !3, line: 2266, column: 5)
!4902 = !DILocation(line: 2270, column: 50, scope: !4901)
!4903 = !DILocation(line: 2270, column: 56, scope: !4901)
!4904 = !DILocation(line: 2270, column: 13, scope: !4901)
!4905 = !DILocation(line: 2270, column: 11, scope: !4901)
!4906 = !DILocation(line: 2272, column: 25, scope: !4907)
!4907 = distinct !DILexicalBlock(scope: !4901, file: !3, line: 2272, column: 11)
!4908 = !DILocation(line: 2272, column: 30, scope: !4907)
!4909 = !DILocation(line: 2272, column: 12, scope: !4907)
!4910 = !DILocation(line: 2273, column: 4, scope: !4907)
!4911 = !DILocation(line: 2273, column: 24, scope: !4907)
!4912 = !DILocation(line: 2273, column: 31, scope: !4907)
!4913 = !DILocation(line: 2273, column: 46, scope: !4907)
!4914 = !DILocation(line: 2273, column: 7, scope: !4907)
!4915 = !DILocation(line: 2272, column: 11, scope: !4901)
!4916 = !DILocation(line: 2274, column: 10, scope: !4907)
!4917 = !DILocation(line: 2274, column: 2, scope: !4907)
!4918 = !DILocation(line: 2279, column: 12, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4901, file: !3, line: 2279, column: 11)
!4920 = !DILocation(line: 2279, column: 20, scope: !4919)
!4921 = !DILocation(line: 2279, column: 23, scope: !4919)
!4922 = !DILocation(line: 2279, column: 28, scope: !4919)
!4923 = !DILocation(line: 2279, column: 33, scope: !4919)
!4924 = !DILocation(line: 2279, column: 36, scope: !4919)
!4925 = !DILocation(line: 2279, column: 40, scope: !4919)
!4926 = !DILocation(line: 2280, column: 4, scope: !4919)
!4927 = !DILocation(line: 2280, column: 7, scope: !4919)
!4928 = !DILocation(line: 2280, column: 33, scope: !4919)
!4929 = !DILocation(line: 2281, column: 4, scope: !4919)
!4930 = !DILocation(line: 2281, column: 7, scope: !4919)
!4931 = !DILocation(line: 2281, column: 33, scope: !4919)
!4932 = !DILocation(line: 2279, column: 11, scope: !4901)
!4933 = !DILocation(line: 2282, column: 30, scope: !4919)
!4934 = !DILocation(line: 2282, column: 57, scope: !4919)
!4935 = !DILocation(line: 2282, column: 47, scope: !4919)
!4936 = !DILocation(line: 2282, column: 9, scope: !4919)
!4937 = !DILocation(line: 2282, column: 7, scope: !4919)
!4938 = !DILocation(line: 2282, column: 2, scope: !4919)
!4939 = !DILocation(line: 2283, column: 5, scope: !4901)
!4940 = !DILocation(line: 2289, column: 7, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 2289, column: 7)
!4942 = !DILocation(line: 2289, column: 12, scope: !4941)
!4943 = !DILocation(line: 2289, column: 15, scope: !4941)
!4944 = !DILocation(line: 2289, column: 36, scope: !4941)
!4945 = !DILocation(line: 2289, column: 49, scope: !4941)
!4946 = !DILocation(line: 2289, column: 52, scope: !4941)
!4947 = !DILocation(line: 2289, column: 7, scope: !4825)
!4948 = !DILocation(line: 2290, column: 18, scope: !4941)
!4949 = !DILocation(line: 2290, column: 24, scope: !4941)
!4950 = !DILocation(line: 2290, column: 5, scope: !4941)
!4951 = !DILocation(line: 2292, column: 10, scope: !4825)
!4952 = !DILocation(line: 2292, column: 3, scope: !4825)
!4953 = distinct !DISubprogram(name: "cprop_jump", scope: !3, file: !3, line: 2371, type: !4954, scopeLine: 2372, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!4954 = !DISubroutineType(types: !4955)
!4955 = !{!1917, !2448, !1893, !1893, !1893, !1893}
!4956 = !DILocalVariable(name: "bb", arg: 1, scope: !4953, file: !3, line: 2371, type: !2448)
!4957 = !DILocation(line: 2371, column: 25, scope: !4953)
!4958 = !DILocalVariable(name: "setcc", arg: 2, scope: !4953, file: !3, line: 2371, type: !1893)
!4959 = !DILocation(line: 2371, column: 33, scope: !4953)
!4960 = !DILocalVariable(name: "jump", arg: 3, scope: !4953, file: !3, line: 2371, type: !1893)
!4961 = !DILocation(line: 2371, column: 44, scope: !4953)
!4962 = !DILocalVariable(name: "from", arg: 4, scope: !4953, file: !3, line: 2371, type: !1893)
!4963 = !DILocation(line: 2371, column: 54, scope: !4953)
!4964 = !DILocalVariable(name: "src", arg: 5, scope: !4953, file: !3, line: 2371, type: !1893)
!4965 = !DILocation(line: 2371, column: 64, scope: !4953)
!4966 = !DILocalVariable(name: "new_rtx", scope: !4953, file: !3, line: 2373, type: !1893)
!4967 = !DILocation(line: 2373, column: 7, scope: !4953)
!4968 = !DILocalVariable(name: "set_src", scope: !4953, file: !3, line: 2373, type: !1893)
!4969 = !DILocation(line: 2373, column: 16, scope: !4953)
!4970 = !DILocalVariable(name: "note_src", scope: !4953, file: !3, line: 2373, type: !1893)
!4971 = !DILocation(line: 2373, column: 25, scope: !4953)
!4972 = !DILocalVariable(name: "set", scope: !4953, file: !3, line: 2374, type: !1893)
!4973 = !DILocation(line: 2374, column: 7, scope: !4953)
!4974 = !DILocation(line: 2374, column: 21, scope: !4953)
!4975 = !DILocation(line: 2374, column: 13, scope: !4953)
!4976 = !DILocalVariable(name: "note", scope: !4953, file: !3, line: 2375, type: !1893)
!4977 = !DILocation(line: 2375, column: 7, scope: !4953)
!4978 = !DILocation(line: 2375, column: 41, scope: !4953)
!4979 = !DILocation(line: 2375, column: 14, scope: !4953)
!4980 = !DILocation(line: 2377, column: 7, scope: !4981)
!4981 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 2377, column: 7)
!4982 = !DILocation(line: 2377, column: 7, scope: !4953)
!4983 = !DILocation(line: 2379, column: 18, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 2378, column: 5)
!4985 = !DILocation(line: 2379, column: 16, scope: !4984)
!4986 = !DILocation(line: 2380, column: 11, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 2380, column: 11)
!4988 = !DILocation(line: 2380, column: 31, scope: !4987)
!4989 = !DILocation(line: 2380, column: 11, scope: !4984)
!4990 = !DILocation(line: 2381, column: 11, scope: !4987)
!4991 = !DILocation(line: 2381, column: 2, scope: !4987)
!4992 = !DILocation(line: 2382, column: 5, scope: !4984)
!4993 = !DILocation(line: 2383, column: 17, scope: !4981)
!4994 = !DILocation(line: 2386, column: 13, scope: !4953)
!4995 = !DILocation(line: 2386, column: 24, scope: !4953)
!4996 = !DILocation(line: 2386, column: 35, scope: !4953)
!4997 = !DILocation(line: 2386, column: 11, scope: !4953)
!4998 = !DILocation(line: 2390, column: 7, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 2390, column: 7)
!5000 = !DILocation(line: 2390, column: 13, scope: !4999)
!5001 = !DILocation(line: 2391, column: 7, scope: !4999)
!5002 = !DILocation(line: 2391, column: 31, scope: !4999)
!5003 = !DILocation(line: 2391, column: 37, scope: !4999)
!5004 = !DILocation(line: 2391, column: 44, scope: !4999)
!5005 = !DILocation(line: 2391, column: 11, scope: !4999)
!5006 = !DILocation(line: 2392, column: 7, scope: !4999)
!5007 = !DILocation(line: 2392, column: 31, scope: !4999)
!5008 = !DILocation(line: 2392, column: 36, scope: !4999)
!5009 = !DILocation(line: 2392, column: 43, scope: !4999)
!5010 = !DILocation(line: 2392, column: 11, scope: !4999)
!5011 = !DILocation(line: 2390, column: 7, scope: !4953)
!5012 = !DILocalVariable(name: "setcc_src", scope: !5013, file: !3, line: 2394, type: !1893)
!5013 = distinct !DILexicalBlock(scope: !4999, file: !3, line: 2393, column: 5)
!5014 = !DILocation(line: 2394, column: 11, scope: !5013)
!5015 = !DILocalVariable(name: "setcc_set", scope: !5013, file: !3, line: 2395, type: !1893)
!5016 = !DILocation(line: 2395, column: 11, scope: !5013)
!5017 = !DILocation(line: 2395, column: 23, scope: !5013)
!5018 = !DILocalVariable(name: "setcc_note", scope: !5013, file: !3, line: 2396, type: !1893)
!5019 = !DILocation(line: 2396, column: 11, scope: !5013)
!5020 = !DILocation(line: 2396, column: 51, scope: !5013)
!5021 = !DILocation(line: 2396, column: 24, scope: !5013)
!5022 = !DILocation(line: 2397, column: 20, scope: !5013)
!5023 = !DILocation(line: 2397, column: 31, scope: !5013)
!5024 = !DILocation(line: 2397, column: 34, scope: !5013)
!5025 = !DILocation(line: 2397, column: 66, scope: !5013)
!5026 = !DILocation(line: 2397, column: 19, scope: !5013)
!5027 = !DILocation(line: 2398, column: 5, scope: !5013)
!5028 = !DILocation(line: 2398, column: 28, scope: !5013)
!5029 = !DILocation(line: 2397, column: 17, scope: !5013)
!5030 = !DILocation(line: 2399, column: 39, scope: !5013)
!5031 = !DILocation(line: 2399, column: 48, scope: !5013)
!5032 = !DILocation(line: 2400, column: 11, scope: !5013)
!5033 = !DILocation(line: 2399, column: 17, scope: !5013)
!5034 = !DILocation(line: 2399, column: 15, scope: !5013)
!5035 = !DILocation(line: 2401, column: 5, scope: !5013)
!5036 = !DILocation(line: 2403, column: 11, scope: !4999)
!5037 = !DILocation(line: 2405, column: 35, scope: !4953)
!5038 = !DILocation(line: 2405, column: 44, scope: !4953)
!5039 = !DILocation(line: 2405, column: 50, scope: !4953)
!5040 = !DILocation(line: 2405, column: 13, scope: !4953)
!5041 = !DILocation(line: 2405, column: 11, scope: !4953)
!5042 = !DILocation(line: 2408, column: 20, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 2408, column: 7)
!5044 = !DILocation(line: 2408, column: 29, scope: !5043)
!5045 = !DILocation(line: 2408, column: 7, scope: !5043)
!5046 = !DILocation(line: 2408, column: 7, scope: !4953)
!5047 = !DILocation(line: 2409, column: 5, scope: !5043)
!5048 = !DILocation(line: 2412, column: 7, scope: !5049)
!5049 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 2412, column: 7)
!5050 = !DILocation(line: 2412, column: 18, scope: !5049)
!5051 = !DILocation(line: 2412, column: 15, scope: !5049)
!5052 = !DILocation(line: 2412, column: 7, scope: !4953)
!5053 = !DILocation(line: 2413, column: 18, scope: !5049)
!5054 = !DILocation(line: 2413, column: 5, scope: !5049)
!5055 = !DILocation(line: 2418, column: 11, scope: !5056)
!5056 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 2418, column: 11)
!5057 = distinct !DILexicalBlock(scope: !5049, file: !3, line: 2415, column: 5)
!5058 = !DILocation(line: 2418, column: 17, scope: !5056)
!5059 = !DILocation(line: 2418, column: 35, scope: !5056)
!5060 = !DILocation(line: 2418, column: 44, scope: !5056)
!5061 = !DILocation(line: 2418, column: 20, scope: !5056)
!5062 = !DILocation(line: 2418, column: 11, scope: !5057)
!5063 = !DILocation(line: 2419, column: 2, scope: !5056)
!5064 = !DILocation(line: 2420, column: 38, scope: !5065)
!5065 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 2420, column: 11)
!5066 = !DILocation(line: 2420, column: 45, scope: !5065)
!5067 = !DILocation(line: 2420, column: 60, scope: !5065)
!5068 = !DILocation(line: 2420, column: 13, scope: !5065)
!5069 = !DILocation(line: 2420, column: 11, scope: !5057)
!5070 = !DILocation(line: 2431, column: 22, scope: !5071)
!5071 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 2431, column: 8)
!5072 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 2421, column: 2)
!5073 = !DILocation(line: 2431, column: 31, scope: !5071)
!5074 = !DILocation(line: 2431, column: 9, scope: !5071)
!5075 = !DILocation(line: 2431, column: 8, scope: !5072)
!5076 = !DILocation(line: 2432, column: 27, scope: !5071)
!5077 = !DILocation(line: 2432, column: 54, scope: !5071)
!5078 = !DILocation(line: 2432, column: 44, scope: !5071)
!5079 = !DILocation(line: 2432, column: 6, scope: !5071)
!5080 = !DILocation(line: 2433, column: 4, scope: !5072)
!5081 = !DILocation(line: 2437, column: 11, scope: !5082)
!5082 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 2437, column: 11)
!5083 = !DILocation(line: 2437, column: 11, scope: !5057)
!5084 = !DILocation(line: 2438, column: 15, scope: !5082)
!5085 = !DILocation(line: 2438, column: 21, scope: !5082)
!5086 = !DILocation(line: 2438, column: 2, scope: !5082)
!5087 = !DILocation(line: 2447, column: 26, scope: !4953)
!5088 = !DILocation(line: 2448, column: 7, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 2448, column: 7)
!5090 = !DILocation(line: 2448, column: 17, scope: !5089)
!5091 = !DILocation(line: 2448, column: 7, scope: !4953)
!5092 = !DILocation(line: 2450, column: 16, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5089, file: !3, line: 2449, column: 5)
!5094 = !DILocation(line: 2452, column: 9, scope: !5093)
!5095 = !DILocation(line: 2452, column: 23, scope: !5093)
!5096 = !DILocation(line: 2450, column: 7, scope: !5093)
!5097 = !DILocation(line: 2453, column: 18, scope: !5093)
!5098 = !DILocation(line: 2453, column: 29, scope: !5093)
!5099 = !DILocation(line: 2453, column: 7, scope: !5093)
!5100 = !DILocation(line: 2454, column: 16, scope: !5093)
!5101 = !DILocation(line: 2454, column: 7, scope: !5093)
!5102 = !DILocation(line: 2455, column: 5, scope: !5093)
!5103 = !DILocation(line: 2456, column: 21, scope: !4953)
!5104 = !DILocation(line: 2456, column: 3, scope: !4953)
!5105 = !DILocation(line: 2461, column: 7, scope: !5106)
!5106 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 2461, column: 7)
!5107 = !DILocation(line: 2461, column: 18, scope: !5106)
!5108 = !DILocation(line: 2461, column: 15, scope: !5106)
!5109 = !DILocation(line: 2461, column: 25, scope: !5106)
!5110 = !DILocation(line: 2461, column: 42, scope: !5106)
!5111 = !DILocation(line: 2461, column: 28, scope: !5106)
!5112 = !DILocation(line: 2461, column: 7, scope: !4953)
!5113 = !DILocalVariable(name: "e", scope: !5114, file: !3, line: 2463, type: !2465)
!5114 = distinct !DILexicalBlock(scope: !5106, file: !3, line: 2462, column: 5)
!5115 = !DILocation(line: 2463, column: 12, scope: !5114)
!5116 = !DILocalVariable(name: "ei", scope: !5114, file: !3, line: 2464, type: !5117)
!5117 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !146, line: 682, baseType: !5118)
!5118 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !146, line: 679, size: 128, elements: !5119)
!5119 = !{!5120, !5121}
!5120 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5118, file: !146, line: 680, baseType: !9, size: 32)
!5121 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !5118, file: !146, line: 681, baseType: !5122, size: 64, offset: 64)
!5122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2453, size: 64)
!5123 = !DILocation(line: 2464, column: 21, scope: !5114)
!5124 = !DILocation(line: 2466, column: 17, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5114, file: !3, line: 2466, column: 7)
!5126 = !DILocation(line: 2466, column: 12, scope: !5125)
!5127 = !DILocation(line: 2466, column: 44, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5125, file: !3, line: 2466, column: 7)
!5129 = !DILocation(line: 2466, column: 42, scope: !5128)
!5130 = !DILocation(line: 2466, column: 7, scope: !5125)
!5131 = !DILocation(line: 2467, column: 6, scope: !5132)
!5132 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 2467, column: 6)
!5133 = !DILocation(line: 2467, column: 9, scope: !5132)
!5134 = !DILocation(line: 2467, column: 17, scope: !5132)
!5135 = !DILocation(line: 2467, column: 14, scope: !5132)
!5136 = !DILocation(line: 2468, column: 6, scope: !5132)
!5137 = !DILocation(line: 2468, column: 9, scope: !5132)
!5138 = !DILocation(line: 2468, column: 30, scope: !5132)
!5139 = !DILocation(line: 2468, column: 27, scope: !5132)
!5140 = !DILocation(line: 2467, column: 6, scope: !5128)
!5141 = !DILocation(line: 2470, column: 6, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5132, file: !3, line: 2469, column: 4)
!5143 = !DILocation(line: 2470, column: 9, scope: !5142)
!5144 = !DILocation(line: 2470, column: 15, scope: !5142)
!5145 = !DILocation(line: 2471, column: 6, scope: !5142)
!5146 = !DILocation(line: 2466, column: 64, scope: !5128)
!5147 = !DILocation(line: 2466, column: 7, scope: !5128)
!5148 = distinct !{!5148, !5130, !5149}
!5149 = !DILocation(line: 2472, column: 4, scope: !5125)
!5150 = !DILocation(line: 2473, column: 20, scope: !5114)
!5151 = !DILocation(line: 2473, column: 7, scope: !5114)
!5152 = !DILocation(line: 2474, column: 5, scope: !5114)
!5153 = !DILocation(line: 2476, column: 3, scope: !4953)
!5154 = !DILocation(line: 2477, column: 1, scope: !4953)
!5155 = distinct !DISubprogram(name: "ei_start_1", scope: !146, file: !146, line: 696, type: !5156, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5156 = !DISubroutineType(types: !5157)
!5157 = !{!5117, !5122}
!5158 = !DILocalVariable(name: "ev", arg: 1, scope: !5155, file: !146, line: 696, type: !5122)
!5159 = !DILocation(line: 696, column: 28, scope: !5155)
!5160 = !DILocalVariable(name: "i", scope: !5155, file: !146, line: 698, type: !5117)
!5161 = !DILocation(line: 698, column: 17, scope: !5155)
!5162 = !DILocation(line: 700, column: 5, scope: !5155)
!5163 = !DILocation(line: 700, column: 11, scope: !5155)
!5164 = !DILocation(line: 701, column: 17, scope: !5155)
!5165 = !DILocation(line: 701, column: 5, scope: !5155)
!5166 = !DILocation(line: 701, column: 15, scope: !5155)
!5167 = !DILocation(line: 703, column: 3, scope: !5155)
!5168 = distinct !DISubprogram(name: "ei_safe_edge", scope: !146, file: !146, line: 761, type: !5169, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5169 = !DISubroutineType(types: !5170)
!5170 = !{!2465, !5117}
!5171 = !DILocalVariable(name: "i", arg: 1, scope: !5168, file: !146, line: 761, type: !5117)
!5172 = !DILocation(line: 761, column: 29, scope: !5168)
!5173 = !DILocation(line: 763, column: 11, scope: !5168)
!5174 = !DILocation(line: 763, column: 10, scope: !5168)
!5175 = !DILocation(line: 763, column: 26, scope: !5168)
!5176 = !DILocation(line: 763, column: 3, scope: !5168)
!5177 = distinct !DISubprogram(name: "ei_next", scope: !146, file: !146, line: 736, type: !5178, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5178 = !DISubroutineType(types: !5179)
!5179 = !{null, !5180}
!5180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5117, size: 64)
!5181 = !DILocalVariable(name: "i", arg: 1, scope: !5177, file: !146, line: 736, type: !5180)
!5182 = !DILocation(line: 736, column: 25, scope: !5177)
!5183 = !DILocation(line: 738, column: 3, scope: !5177)
!5184 = !DILocation(line: 739, column: 3, scope: !5177)
!5185 = !DILocation(line: 739, column: 6, scope: !5177)
!5186 = !DILocation(line: 739, column: 11, scope: !5177)
!5187 = !DILocation(line: 740, column: 1, scope: !5177)
!5188 = distinct !DISubprogram(name: "ei_end_p", scope: !146, file: !146, line: 721, type: !5189, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5189 = !DISubroutineType(types: !5190)
!5190 = !{!6, !5117}
!5191 = !DILocalVariable(name: "i", arg: 1, scope: !5188, file: !146, line: 721, type: !5117)
!5192 = !DILocation(line: 721, column: 25, scope: !5188)
!5193 = !DILocation(line: 723, column: 13, scope: !5188)
!5194 = !DILocation(line: 723, column: 22, scope: !5188)
!5195 = !DILocation(line: 723, column: 19, scope: !5188)
!5196 = !DILocation(line: 723, column: 10, scope: !5188)
!5197 = !DILocation(line: 723, column: 3, scope: !5188)
!5198 = distinct !DISubprogram(name: "ei_edge", scope: !146, file: !146, line: 752, type: !5169, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5199 = !DILocalVariable(name: "i", arg: 1, scope: !5198, file: !146, line: 752, type: !5117)
!5200 = !DILocation(line: 752, column: 24, scope: !5198)
!5201 = !DILocation(line: 754, column: 10, scope: !5198)
!5202 = !DILocation(line: 754, column: 3, scope: !5198)
!5203 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !146, file: !146, line: 150, type: !5204, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5204 = !DISubroutineType(types: !5205)
!5205 = !{!9, !5206}
!5206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5207, size: 64)
!5207 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2458)
!5208 = !DILocalVariable(name: "vec_", arg: 1, scope: !5203, file: !146, line: 150, type: !5206)
!5209 = !DILocation(line: 150, column: 1, scope: !5203)
!5210 = distinct !DISubprogram(name: "ei_container", scope: !146, file: !146, line: 685, type: !5211, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5211 = !DISubroutineType(types: !5212)
!5212 = !{!2453, !5117}
!5213 = !DILocalVariable(name: "i", arg: 1, scope: !5210, file: !146, line: 685, type: !5117)
!5214 = !DILocation(line: 685, column: 29, scope: !5210)
!5215 = !DILocation(line: 687, column: 3, scope: !5210)
!5216 = !DILocation(line: 688, column: 13, scope: !5210)
!5217 = !DILocation(line: 688, column: 10, scope: !5210)
!5218 = !DILocation(line: 688, column: 3, scope: !5210)
!5219 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !146, file: !146, line: 150, type: !5220, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5220 = !DISubroutineType(types: !5221)
!5221 = !{!2465, !5206, !9}
!5222 = !DILocalVariable(name: "vec_", arg: 1, scope: !5219, file: !146, line: 150, type: !5206)
!5223 = !DILocation(line: 150, column: 1, scope: !5219)
!5224 = !DILocalVariable(name: "ix_", arg: 2, scope: !5219, file: !146, line: 150, type: !9)
!5225 = !DILocation(line: 0, scope: !5219)
!5226 = distinct !DISubprogram(name: "implicit_set_cond_p", scope: !3, file: !3, line: 2789, type: !4719, scopeLine: 2790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5227 = !DILocalVariable(name: "cond", arg: 1, scope: !5226, file: !3, line: 2789, type: !3232)
!5228 = !DILocation(line: 2789, column: 32, scope: !5226)
!5229 = !DILocalVariable(name: "mode", scope: !5226, file: !3, line: 2791, type: !5230)
!5230 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!5231 = !DILocation(line: 2791, column: 27, scope: !5226)
!5232 = !DILocation(line: 2791, column: 34, scope: !5226)
!5233 = !DILocalVariable(name: "cst", scope: !5226, file: !3, line: 2792, type: !3232)
!5234 = !DILocation(line: 2792, column: 13, scope: !5226)
!5235 = !DILocation(line: 2792, column: 19, scope: !5226)
!5236 = !DILocation(line: 2796, column: 7, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 2796, column: 7)
!5238 = !DILocation(line: 2796, column: 7, scope: !5226)
!5239 = !DILocation(line: 2803, column: 11, scope: !5240)
!5240 = distinct !DILexicalBlock(scope: !5241, file: !3, line: 2803, column: 11)
!5241 = distinct !DILexicalBlock(scope: !5237, file: !3, line: 2797, column: 5)
!5242 = !DILocation(line: 2803, column: 26, scope: !5240)
!5243 = !DILocation(line: 2803, column: 11, scope: !5241)
!5244 = !DILocalVariable(name: "d", scope: !5245, file: !3, line: 2805, type: !2094)
!5245 = distinct !DILexicalBlock(scope: !5240, file: !3, line: 2804, column: 2)
!5246 = !DILocation(line: 2805, column: 20, scope: !5245)
!5247 = !DILocation(line: 2806, column: 4, scope: !5245)
!5248 = !DILocation(line: 2807, column: 8, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 2807, column: 8)
!5250 = !DILocation(line: 2807, column: 8, scope: !5245)
!5251 = !DILocation(line: 2808, column: 6, scope: !5249)
!5252 = !DILocation(line: 2809, column: 2, scope: !5245)
!5253 = !DILocation(line: 2811, column: 2, scope: !5240)
!5254 = !DILocation(line: 2812, column: 5, scope: !5241)
!5255 = !DILocation(line: 2814, column: 27, scope: !5226)
!5256 = !DILocation(line: 2814, column: 10, scope: !5226)
!5257 = !DILocation(line: 2814, column: 3, scope: !5226)
!5258 = !DILocation(line: 2815, column: 1, scope: !5226)
!5259 = distinct !DISubprogram(name: "single_pred_p", scope: !146, file: !146, line: 634, type: !5260, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5260 = !DISubroutineType(types: !5261)
!5261 = !{!6, !5262}
!5262 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1894, line: 112, baseType: !5263)
!5263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5264, size: 64)
!5264 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2450)
!5265 = !DILocalVariable(name: "bb", arg: 1, scope: !5259, file: !146, line: 634, type: !5262)
!5266 = !DILocation(line: 634, column: 34, scope: !5259)
!5267 = !DILocation(line: 636, column: 10, scope: !5259)
!5268 = !DILocation(line: 636, column: 33, scope: !5259)
!5269 = !DILocation(line: 636, column: 3, scope: !5259)
!5270 = distinct !DISubprogram(name: "gmalloc", scope: !3, file: !3, line: 597, type: !5271, scopeLine: 598, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5271 = !DISubroutineType(types: !5272)
!5272 = !{!1887, !2386}
!5273 = !DILocalVariable(name: "size", arg: 1, scope: !5270, file: !3, line: 597, type: !2386)
!5274 = !DILocation(line: 597, column: 17, scope: !5270)
!5275 = !DILocation(line: 599, column: 17, scope: !5270)
!5276 = !DILocation(line: 599, column: 14, scope: !5270)
!5277 = !DILocation(line: 600, column: 19, scope: !5270)
!5278 = !DILocation(line: 600, column: 10, scope: !5270)
!5279 = !DILocation(line: 600, column: 3, scope: !5270)
!5280 = distinct !DISubprogram(name: "compute_hash_table_work", scope: !3, file: !3, line: 1652, type: !3863, scopeLine: 1653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5281 = !DILocalVariable(name: "table", arg: 1, scope: !5280, file: !3, line: 1652, type: !3824)
!5282 = !DILocation(line: 1652, column: 47, scope: !5280)
!5283 = !DILocalVariable(name: "i", scope: !5280, file: !3, line: 1654, type: !1917)
!5284 = !DILocation(line: 1654, column: 7, scope: !5280)
!5285 = !DILocation(line: 1657, column: 3, scope: !5280)
!5286 = !DILocation(line: 1659, column: 20, scope: !5280)
!5287 = !DILocation(line: 1659, column: 18, scope: !5280)
!5288 = !DILocation(line: 1661, column: 10, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 1661, column: 3)
!5290 = !DILocation(line: 1661, column: 8, scope: !5289)
!5291 = !DILocation(line: 1661, column: 15, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 1661, column: 3)
!5293 = !DILocation(line: 1661, column: 19, scope: !5292)
!5294 = !DILocation(line: 1661, column: 17, scope: !5292)
!5295 = !DILocation(line: 1661, column: 3, scope: !5289)
!5296 = !DILocation(line: 1662, column: 5, scope: !5292)
!5297 = !DILocation(line: 1662, column: 20, scope: !5292)
!5298 = !DILocation(line: 1662, column: 23, scope: !5292)
!5299 = !DILocation(line: 1662, column: 31, scope: !5292)
!5300 = !DILocation(line: 1661, column: 35, scope: !5292)
!5301 = !DILocation(line: 1661, column: 3, scope: !5292)
!5302 = distinct !{!5302, !5295, !5303}
!5303 = !DILocation(line: 1662, column: 33, scope: !5289)
!5304 = !DILocation(line: 1664, column: 3, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 1664, column: 3)
!5306 = !DILocation(line: 1664, column: 3, scope: !5307)
!5307 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1664, column: 3)
!5308 = !DILocalVariable(name: "insn", scope: !5309, file: !3, line: 1666, type: !1893)
!5309 = distinct !DILexicalBlock(scope: !5307, file: !3, line: 1665, column: 5)
!5310 = !DILocation(line: 1666, column: 11, scope: !5309)
!5311 = !DILocalVariable(name: "regno", scope: !5309, file: !3, line: 1667, type: !9)
!5312 = !DILocation(line: 1667, column: 20, scope: !5309)
!5313 = !DILocation(line: 1671, column: 7, scope: !5314)
!5314 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 1671, column: 7)
!5315 = !DILocation(line: 1671, column: 7, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5314, file: !3, line: 1671, column: 7)
!5317 = !DILocation(line: 0, scope: !5316)
!5318 = !DILocation(line: 1673, column: 10, scope: !5319)
!5319 = distinct !DILexicalBlock(scope: !5320, file: !3, line: 1673, column: 8)
!5320 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 1672, column: 2)
!5321 = !DILocation(line: 1673, column: 8, scope: !5320)
!5322 = !DILocation(line: 1674, column: 6, scope: !5319)
!5323 = !DILocation(line: 1676, column: 8, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5320, file: !3, line: 1676, column: 8)
!5325 = !DILocation(line: 1676, column: 8, scope: !5320)
!5326 = !DILocation(line: 1678, column: 19, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5328, file: !3, line: 1678, column: 8)
!5328 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 1677, column: 6)
!5329 = !DILocation(line: 1678, column: 13, scope: !5327)
!5330 = !DILocation(line: 1678, column: 24, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5327, file: !3, line: 1678, column: 8)
!5332 = !DILocation(line: 1678, column: 30, scope: !5331)
!5333 = !DILocation(line: 1678, column: 8, scope: !5327)
!5334 = !DILocation(line: 1679, column: 7, scope: !5335)
!5335 = distinct !DILexicalBlock(scope: !5331, file: !3, line: 1679, column: 7)
!5336 = !DILocation(line: 1679, column: 7, scope: !5331)
!5337 = !DILocation(line: 1680, column: 31, scope: !5335)
!5338 = !DILocation(line: 1680, column: 37, scope: !5335)
!5339 = !DILocation(line: 1680, column: 5, scope: !5335)
!5340 = !DILocation(line: 1678, column: 60, scope: !5331)
!5341 = !DILocation(line: 1678, column: 8, scope: !5331)
!5342 = distinct !{!5342, !5333, !5343}
!5343 = !DILocation(line: 1680, column: 42, scope: !5327)
!5344 = !DILocation(line: 1682, column: 19, scope: !5328)
!5345 = !DILocation(line: 1682, column: 8, scope: !5328)
!5346 = !DILocation(line: 1683, column: 6, scope: !5328)
!5347 = !DILocation(line: 1685, column: 17, scope: !5320)
!5348 = !DILocation(line: 1685, column: 55, scope: !5320)
!5349 = !DILocation(line: 1685, column: 4, scope: !5320)
!5350 = !DILocation(line: 1686, column: 2, scope: !5320)
!5351 = distinct !{!5351, !5313, !5352}
!5352 = !DILocation(line: 1686, column: 2, scope: !5314)
!5353 = !DILocation(line: 1689, column: 11, scope: !5354)
!5354 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 1689, column: 11)
!5355 = !DILocation(line: 1689, column: 18, scope: !5354)
!5356 = !DILocation(line: 1690, column: 4, scope: !5354)
!5357 = !DILocation(line: 1690, column: 7, scope: !5354)
!5358 = !DILocation(line: 1690, column: 21, scope: !5354)
!5359 = !DILocation(line: 1690, column: 33, scope: !5354)
!5360 = !DILocation(line: 1690, column: 40, scope: !5354)
!5361 = !DILocation(line: 1689, column: 11, scope: !5309)
!5362 = !DILocation(line: 1691, column: 17, scope: !5354)
!5363 = !DILocation(line: 1691, column: 31, scope: !5354)
!5364 = !DILocation(line: 1691, column: 43, scope: !5354)
!5365 = !DILocation(line: 1692, column: 10, scope: !5354)
!5366 = !DILocation(line: 1692, column: 32, scope: !5354)
!5367 = !DILocation(line: 1691, column: 2, scope: !5354)
!5368 = !DILocation(line: 1695, column: 7, scope: !5369)
!5369 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 1695, column: 7)
!5370 = !DILocation(line: 1695, column: 7, scope: !5371)
!5371 = distinct !DILexicalBlock(scope: !5369, file: !3, line: 1695, column: 7)
!5372 = !DILocation(line: 0, scope: !5371)
!5373 = !DILocation(line: 1696, column: 6, scope: !5374)
!5374 = distinct !DILexicalBlock(scope: !5371, file: !3, line: 1696, column: 6)
!5375 = !DILocation(line: 1696, column: 6, scope: !5371)
!5376 = !DILocation(line: 1697, column: 20, scope: !5374)
!5377 = !DILocation(line: 1697, column: 26, scope: !5374)
!5378 = !DILocation(line: 1697, column: 4, scope: !5374)
!5379 = distinct !{!5379, !5368, !5380}
!5380 = !DILocation(line: 1697, column: 31, scope: !5369)
!5381 = !DILocation(line: 1698, column: 5, scope: !5309)
!5382 = distinct !{!5382, !5304, !5383}
!5383 = !DILocation(line: 1698, column: 5, scope: !5305)
!5384 = !DILocation(line: 1700, column: 9, scope: !5280)
!5385 = !DILocation(line: 1700, column: 3, scope: !5280)
!5386 = !DILocation(line: 1701, column: 18, scope: !5280)
!5387 = !DILocation(line: 1702, column: 1, scope: !5280)
!5388 = distinct !DISubprogram(name: "clear_modify_mem_tables", scope: !3, file: !3, line: 1803, type: !3321, scopeLine: 1804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5389 = !DILocalVariable(name: "i", scope: !5388, file: !3, line: 1805, type: !9)
!5390 = !DILocation(line: 1805, column: 12, scope: !5388)
!5391 = !DILocalVariable(name: "bi", scope: !5388, file: !3, line: 1806, type: !5392)
!5392 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1974, line: 218, baseType: !5393)
!5393 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1974, line: 203, size: 256, elements: !5394)
!5394 = !{!5395, !5396, !5397, !5398}
!5395 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !5393, file: !1974, line: 206, baseType: !1977, size: 64)
!5396 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !5393, file: !1974, line: 209, baseType: !1977, size: 64, offset: 64)
!5397 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !5393, file: !1974, line: 212, baseType: !9, size: 32, offset: 128)
!5398 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !5393, file: !1974, line: 217, baseType: !1987, size: 64, offset: 192)
!5399 = !DILocation(line: 1806, column: 19, scope: !5388)
!5400 = !DILocation(line: 1808, column: 3, scope: !5401)
!5401 = distinct !DILexicalBlock(scope: !5388, file: !3, line: 1808, column: 3)
!5402 = !DILocation(line: 1808, column: 3, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5401, file: !3, line: 1808, column: 3)
!5404 = !DILocation(line: 1810, column: 28, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5403, file: !3, line: 1809, column: 5)
!5406 = !DILocation(line: 1810, column: 46, scope: !5405)
!5407 = !DILocation(line: 1810, column: 44, scope: !5405)
!5408 = !DILocation(line: 1810, column: 7, scope: !5405)
!5409 = !DILocation(line: 1811, column: 33, scope: !5405)
!5410 = !DILocation(line: 1811, column: 57, scope: !5405)
!5411 = !DILocation(line: 1811, column: 55, scope: !5405)
!5412 = !DILocation(line: 1811, column: 7, scope: !5405)
!5413 = !DILocation(line: 1812, column: 5, scope: !5405)
!5414 = distinct !{!5414, !5400, !5415}
!5415 = !DILocation(line: 1812, column: 5, scope: !5401)
!5416 = !DILocation(line: 1813, column: 17, scope: !5388)
!5417 = !DILocation(line: 1813, column: 3, scope: !5388)
!5418 = !DILocation(line: 1814, column: 17, scope: !5388)
!5419 = !DILocation(line: 1814, column: 3, scope: !5388)
!5420 = !DILocation(line: 1815, column: 1, scope: !5388)
!5421 = distinct !DISubprogram(name: "record_last_reg_set_info", scope: !3, file: !3, line: 1540, type: !5422, scopeLine: 1541, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5422 = !DISubroutineType(types: !5423)
!5423 = !{null, !1893, !1917}
!5424 = !DILocalVariable(name: "insn", arg: 1, scope: !5421, file: !3, line: 1540, type: !1893)
!5425 = !DILocation(line: 1540, column: 31, scope: !5421)
!5426 = !DILocalVariable(name: "regno", arg: 2, scope: !5421, file: !3, line: 1540, type: !1917)
!5427 = !DILocation(line: 1540, column: 41, scope: !5421)
!5428 = !DILocalVariable(name: "info", scope: !5421, file: !3, line: 1542, type: !3102)
!5429 = !DILocation(line: 1542, column: 26, scope: !5421)
!5430 = !DILocation(line: 1542, column: 34, scope: !5421)
!5431 = !DILocation(line: 1542, column: 49, scope: !5421)
!5432 = !DILocalVariable(name: "luid", scope: !5421, file: !3, line: 1543, type: !1917)
!5433 = !DILocation(line: 1543, column: 7, scope: !5421)
!5434 = !DILocation(line: 1543, column: 14, scope: !5421)
!5435 = !DILocation(line: 1545, column: 20, scope: !5421)
!5436 = !DILocation(line: 1545, column: 3, scope: !5421)
!5437 = !DILocation(line: 1545, column: 9, scope: !5421)
!5438 = !DILocation(line: 1545, column: 18, scope: !5421)
!5439 = !DILocation(line: 1546, column: 7, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 1546, column: 7)
!5441 = !DILocation(line: 1546, column: 13, scope: !5440)
!5442 = !DILocation(line: 1546, column: 24, scope: !5440)
!5443 = !DILocation(line: 1546, column: 21, scope: !5440)
!5444 = !DILocation(line: 1546, column: 7, scope: !5421)
!5445 = !DILocation(line: 1548, column: 23, scope: !5446)
!5446 = distinct !DILexicalBlock(scope: !5440, file: !3, line: 1547, column: 5)
!5447 = !DILocation(line: 1548, column: 7, scope: !5446)
!5448 = !DILocation(line: 1548, column: 13, scope: !5446)
!5449 = !DILocation(line: 1548, column: 21, scope: !5446)
!5450 = !DILocation(line: 1549, column: 25, scope: !5446)
!5451 = !DILocation(line: 1549, column: 7, scope: !5446)
!5452 = !DILocation(line: 1549, column: 13, scope: !5446)
!5453 = !DILocation(line: 1549, column: 23, scope: !5446)
!5454 = !DILocation(line: 1550, column: 5, scope: !5446)
!5455 = !DILocation(line: 1551, column: 1, scope: !5421)
!5456 = distinct !DISubprogram(name: "mark_call", scope: !3, file: !3, line: 1913, type: !4233, scopeLine: 1914, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5457 = !DILocalVariable(name: "insn", arg: 1, scope: !5456, file: !3, line: 1913, type: !1893)
!5458 = !DILocation(line: 1913, column: 16, scope: !5456)
!5459 = !DILocation(line: 1915, column: 9, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5456, file: !3, line: 1915, column: 7)
!5461 = !DILocation(line: 1915, column: 7, scope: !5456)
!5462 = !DILocation(line: 1916, column: 31, scope: !5460)
!5463 = !DILocation(line: 1916, column: 5, scope: !5460)
!5464 = !DILocation(line: 1917, column: 1, scope: !5456)
!5465 = distinct !DISubprogram(name: "record_last_set_info", scope: !3, file: !3, line: 1620, type: !5466, scopeLine: 1621, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5466 = !DISubroutineType(types: !5467)
!5467 = !{null, !1893, !3232, !1887}
!5468 = !DILocalVariable(name: "dest", arg: 1, scope: !5465, file: !3, line: 1620, type: !1893)
!5469 = !DILocation(line: 1620, column: 27, scope: !5465)
!5470 = !DILocalVariable(name: "setter", arg: 2, scope: !5465, file: !3, line: 1620, type: !3232)
!5471 = !DILocation(line: 1620, column: 43, scope: !5465)
!5472 = !DILocalVariable(name: "data", arg: 3, scope: !5465, file: !3, line: 1620, type: !1887)
!5473 = !DILocation(line: 1620, column: 74, scope: !5465)
!5474 = !DILocalVariable(name: "last_set_insn", scope: !5465, file: !3, line: 1622, type: !1893)
!5475 = !DILocation(line: 1622, column: 7, scope: !5465)
!5476 = !DILocation(line: 1622, column: 29, scope: !5465)
!5477 = !DILocation(line: 1622, column: 23, scope: !5465)
!5478 = !DILocation(line: 1624, column: 7, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1624, column: 7)
!5480 = !DILocation(line: 1624, column: 23, scope: !5479)
!5481 = !DILocation(line: 1624, column: 7, scope: !5465)
!5482 = !DILocation(line: 1625, column: 12, scope: !5479)
!5483 = !DILocation(line: 1625, column: 10, scope: !5479)
!5484 = !DILocation(line: 1625, column: 5, scope: !5479)
!5485 = !DILocation(line: 1627, column: 7, scope: !5486)
!5486 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1627, column: 7)
!5487 = !DILocation(line: 1627, column: 7, scope: !5465)
!5488 = !DILocation(line: 1628, column: 31, scope: !5486)
!5489 = !DILocation(line: 1628, column: 46, scope: !5486)
!5490 = !DILocation(line: 1628, column: 5, scope: !5486)
!5491 = !DILocation(line: 1629, column: 12, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5486, file: !3, line: 1629, column: 12)
!5493 = !DILocation(line: 1631, column: 5, scope: !5492)
!5494 = !DILocation(line: 1631, column: 24, scope: !5492)
!5495 = !DILocation(line: 1631, column: 30, scope: !5492)
!5496 = !DILocation(line: 1631, column: 10, scope: !5492)
!5497 = !DILocation(line: 1629, column: 12, scope: !5486)
!5498 = !DILocation(line: 1632, column: 31, scope: !5492)
!5499 = !DILocation(line: 1632, column: 5, scope: !5492)
!5500 = !DILocation(line: 1633, column: 1, scope: !5465)
!5501 = distinct !DISubprogram(name: "hash_scan_set", scope: !3, file: !3, line: 1297, type: !5502, scopeLine: 1298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5502 = !DISubroutineType(types: !5503)
!5503 = !{null, !1893, !1893, !3824}
!5504 = !DILocalVariable(name: "pat", arg: 1, scope: !5501, file: !3, line: 1297, type: !1893)
!5505 = !DILocation(line: 1297, column: 20, scope: !5501)
!5506 = !DILocalVariable(name: "insn", arg: 2, scope: !5501, file: !3, line: 1297, type: !1893)
!5507 = !DILocation(line: 1297, column: 29, scope: !5501)
!5508 = !DILocalVariable(name: "table", arg: 3, scope: !5501, file: !3, line: 1297, type: !3824)
!5509 = !DILocation(line: 1297, column: 56, scope: !5501)
!5510 = !DILocalVariable(name: "src", scope: !5501, file: !3, line: 1299, type: !1893)
!5511 = !DILocation(line: 1299, column: 7, scope: !5501)
!5512 = !DILocation(line: 1299, column: 13, scope: !5501)
!5513 = !DILocalVariable(name: "dest", scope: !5501, file: !3, line: 1300, type: !1893)
!5514 = !DILocation(line: 1300, column: 7, scope: !5501)
!5515 = !DILocation(line: 1300, column: 14, scope: !5501)
!5516 = !DILocalVariable(name: "note", scope: !5501, file: !3, line: 1301, type: !1893)
!5517 = !DILocation(line: 1301, column: 7, scope: !5501)
!5518 = !DILocation(line: 1303, column: 7, scope: !5519)
!5519 = distinct !DILexicalBlock(scope: !5501, file: !3, line: 1303, column: 7)
!5520 = !DILocation(line: 1303, column: 22, scope: !5519)
!5521 = !DILocation(line: 1303, column: 7, scope: !5501)
!5522 = !DILocation(line: 1304, column: 21, scope: !5519)
!5523 = !DILocation(line: 1304, column: 26, scope: !5519)
!5524 = !DILocation(line: 1304, column: 32, scope: !5519)
!5525 = !DILocation(line: 1304, column: 5, scope: !5519)
!5526 = !DILocation(line: 1306, column: 12, scope: !5527)
!5527 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 1306, column: 12)
!5528 = !DILocation(line: 1306, column: 12, scope: !5519)
!5529 = !DILocalVariable(name: "regno", scope: !5530, file: !3, line: 1308, type: !9)
!5530 = distinct !DILexicalBlock(scope: !5527, file: !3, line: 1307, column: 5)
!5531 = !DILocation(line: 1308, column: 20, scope: !5530)
!5532 = !DILocation(line: 1308, column: 28, scope: !5530)
!5533 = !DILocalVariable(name: "tmp", scope: !5530, file: !3, line: 1309, type: !1893)
!5534 = !DILocation(line: 1309, column: 11, scope: !5530)
!5535 = !DILocation(line: 1326, column: 41, scope: !5530)
!5536 = !DILocation(line: 1326, column: 14, scope: !5530)
!5537 = !DILocation(line: 1326, column: 12, scope: !5530)
!5538 = !DILocation(line: 1327, column: 11, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1327, column: 11)
!5540 = !DILocation(line: 1327, column: 16, scope: !5539)
!5541 = !DILocation(line: 1328, column: 4, scope: !5539)
!5542 = !DILocation(line: 1328, column: 7, scope: !5539)
!5543 = !DILocation(line: 1328, column: 28, scope: !5539)
!5544 = !DILocation(line: 1329, column: 4, scope: !5539)
!5545 = !DILocation(line: 1329, column: 8, scope: !5539)
!5546 = !DILocation(line: 1330, column: 4, scope: !5539)
!5547 = !DILocation(line: 1330, column: 8, scope: !5539)
!5548 = !DILocation(line: 1330, column: 15, scope: !5539)
!5549 = !DILocation(line: 1327, column: 11, scope: !5530)
!5550 = !DILocation(line: 1331, column: 27, scope: !5539)
!5551 = !DILocation(line: 1331, column: 10, scope: !5539)
!5552 = !DILocation(line: 1332, column: 26, scope: !5539)
!5553 = !DILocation(line: 1332, column: 10, scope: !5539)
!5554 = !DILocation(line: 1333, column: 8, scope: !5539)
!5555 = !DILocation(line: 1333, column: 6, scope: !5539)
!5556 = !DILocation(line: 1333, column: 30, scope: !5539)
!5557 = !DILocation(line: 1333, column: 28, scope: !5539)
!5558 = !DILocation(line: 1333, column: 2, scope: !5539)
!5559 = !DILocation(line: 1336, column: 13, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1336, column: 11)
!5561 = !DILocation(line: 1336, column: 20, scope: !5560)
!5562 = !DILocation(line: 1337, column: 4, scope: !5560)
!5563 = !DILocation(line: 1337, column: 7, scope: !5560)
!5564 = !DILocation(line: 1337, column: 13, scope: !5560)
!5565 = !DILocation(line: 1339, column: 4, scope: !5560)
!5566 = !DILocation(line: 1339, column: 19, scope: !5560)
!5567 = !DILocation(line: 1339, column: 7, scope: !5560)
!5568 = !DILocation(line: 1345, column: 4, scope: !5560)
!5569 = !DILocation(line: 1345, column: 28, scope: !5560)
!5570 = !DILocation(line: 1345, column: 8, scope: !5560)
!5571 = !DILocation(line: 1347, column: 4, scope: !5560)
!5572 = !DILocation(line: 1347, column: 23, scope: !5560)
!5573 = !DILocation(line: 1347, column: 7, scope: !5560)
!5574 = !DILocation(line: 1349, column: 4, scope: !5560)
!5575 = !DILocation(line: 1349, column: 21, scope: !5560)
!5576 = !DILocation(line: 1349, column: 9, scope: !5560)
!5577 = !DILocation(line: 1355, column: 4, scope: !5560)
!5578 = !DILocation(line: 1355, column: 8, scope: !5560)
!5579 = !DILocation(line: 1355, column: 13, scope: !5560)
!5580 = !DILocation(line: 1355, column: 25, scope: !5560)
!5581 = !DILocation(line: 1355, column: 30, scope: !5560)
!5582 = !DILocation(line: 1336, column: 11, scope: !5530)
!5583 = !DILocalVariable(name: "antic_p", scope: !5584, file: !3, line: 1362, type: !1917)
!5584 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 1356, column: 2)
!5585 = !DILocation(line: 1362, column: 8, scope: !5584)
!5586 = !DILocation(line: 1362, column: 40, scope: !5584)
!5587 = !DILocation(line: 1362, column: 45, scope: !5584)
!5588 = !DILocation(line: 1362, column: 18, scope: !5584)
!5589 = !DILocation(line: 1363, column: 4, scope: !5584)
!5590 = !DILocation(line: 1363, column: 23, scope: !5584)
!5591 = !DILocation(line: 1363, column: 8, scope: !5584)
!5592 = !DILocation(line: 1363, column: 7, scope: !5584)
!5593 = !DILocation(line: 0, scope: !5584)
!5594 = !DILocalVariable(name: "avail_p", scope: !5584, file: !3, line: 1368, type: !1917)
!5595 = !DILocation(line: 1368, column: 8, scope: !5584)
!5596 = !DILocation(line: 1368, column: 37, scope: !5584)
!5597 = !DILocation(line: 1368, column: 42, scope: !5584)
!5598 = !DILocation(line: 1368, column: 19, scope: !5584)
!5599 = !DILocation(line: 1369, column: 5, scope: !5584)
!5600 = !DILocation(line: 1369, column: 10, scope: !5584)
!5601 = !DILocation(line: 1369, column: 8, scope: !5584)
!5602 = !DILocation(line: 1371, column: 26, scope: !5584)
!5603 = !DILocation(line: 1371, column: 31, scope: !5584)
!5604 = !DILocation(line: 1371, column: 48, scope: !5584)
!5605 = !DILocation(line: 1371, column: 54, scope: !5584)
!5606 = !DILocation(line: 1371, column: 63, scope: !5584)
!5607 = !DILocation(line: 1371, column: 72, scope: !5584)
!5608 = !DILocation(line: 1371, column: 4, scope: !5584)
!5609 = !DILocation(line: 1372, column: 2, scope: !5584)
!5610 = !DILocation(line: 1375, column: 16, scope: !5611)
!5611 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 1375, column: 16)
!5612 = !DILocation(line: 1375, column: 23, scope: !5611)
!5613 = !DILocation(line: 1376, column: 9, scope: !5611)
!5614 = !DILocation(line: 1376, column: 12, scope: !5611)
!5615 = !DILocation(line: 1376, column: 18, scope: !5611)
!5616 = !DILocation(line: 1377, column: 9, scope: !5611)
!5617 = !DILocation(line: 1377, column: 14, scope: !5611)
!5618 = !DILocation(line: 1378, column: 7, scope: !5611)
!5619 = !DILocation(line: 1378, column: 10, scope: !5611)
!5620 = !DILocation(line: 1378, column: 22, scope: !5611)
!5621 = !DILocation(line: 1379, column: 7, scope: !5611)
!5622 = !DILocation(line: 1379, column: 22, scope: !5611)
!5623 = !DILocation(line: 1379, column: 10, scope: !5611)
!5624 = !DILocation(line: 1380, column: 7, scope: !5611)
!5625 = !DILocation(line: 1380, column: 10, scope: !5611)
!5626 = !DILocation(line: 1380, column: 25, scope: !5611)
!5627 = !DILocation(line: 1380, column: 22, scope: !5611)
!5628 = !DILocation(line: 1381, column: 6, scope: !5611)
!5629 = !DILocation(line: 1381, column: 26, scope: !5611)
!5630 = !DILocation(line: 1381, column: 9, scope: !5611)
!5631 = !DILocation(line: 1385, column: 9, scope: !5611)
!5632 = !DILocation(line: 1385, column: 13, scope: !5611)
!5633 = !DILocation(line: 1385, column: 21, scope: !5611)
!5634 = !DILocation(line: 1385, column: 18, scope: !5611)
!5635 = !DILocation(line: 1386, column: 6, scope: !5611)
!5636 = !DILocation(line: 1386, column: 35, scope: !5611)
!5637 = !DILocation(line: 1386, column: 16, scope: !5611)
!5638 = !DILocation(line: 1386, column: 14, scope: !5611)
!5639 = !DILocation(line: 1386, column: 42, scope: !5611)
!5640 = !DILocation(line: 1387, column: 6, scope: !5611)
!5641 = !DILocation(line: 1387, column: 9, scope: !5611)
!5642 = !DILocation(line: 1387, column: 33, scope: !5611)
!5643 = !DILocation(line: 1387, column: 30, scope: !5611)
!5644 = !DILocation(line: 1388, column: 6, scope: !5611)
!5645 = !DILocation(line: 1388, column: 27, scope: !5611)
!5646 = !DILocation(line: 1388, column: 32, scope: !5611)
!5647 = !DILocation(line: 1388, column: 9, scope: !5611)
!5648 = !DILocation(line: 1375, column: 16, scope: !5560)
!5649 = !DILocation(line: 1389, column: 23, scope: !5611)
!5650 = !DILocation(line: 1389, column: 28, scope: !5611)
!5651 = !DILocation(line: 1389, column: 34, scope: !5611)
!5652 = !DILocation(line: 1389, column: 2, scope: !5611)
!5653 = !DILocation(line: 1390, column: 5, scope: !5530)
!5654 = !DILocation(line: 1394, column: 12, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5527, file: !3, line: 1394, column: 12)
!5656 = !DILocation(line: 1394, column: 26, scope: !5655)
!5657 = !DILocation(line: 1394, column: 29, scope: !5655)
!5658 = !DILocation(line: 1394, column: 41, scope: !5655)
!5659 = !DILocation(line: 1394, column: 44, scope: !5655)
!5660 = !DILocation(line: 1394, column: 12, scope: !5527)
!5661 = !DILocalVariable(name: "regno", scope: !5662, file: !3, line: 1396, type: !9)
!5662 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 1395, column: 7)
!5663 = !DILocation(line: 1396, column: 22, scope: !5662)
!5664 = !DILocation(line: 1396, column: 30, scope: !5662)
!5665 = !DILocation(line: 1399, column: 15, scope: !5666)
!5666 = distinct !DILexicalBlock(scope: !5662, file: !3, line: 1399, column: 13)
!5667 = !DILocation(line: 1399, column: 22, scope: !5666)
!5668 = !DILocation(line: 1401, column: 6, scope: !5666)
!5669 = !DILocation(line: 1401, column: 9, scope: !5666)
!5670 = !DILocation(line: 1401, column: 15, scope: !5666)
!5671 = !DILocation(line: 1403, column: 5, scope: !5666)
!5672 = !DILocation(line: 1403, column: 20, scope: !5666)
!5673 = !DILocation(line: 1403, column: 8, scope: !5666)
!5674 = !DILocation(line: 1406, column: 5, scope: !5666)
!5675 = !DILocation(line: 1406, column: 29, scope: !5666)
!5676 = !DILocation(line: 1406, column: 9, scope: !5666)
!5677 = !DILocation(line: 1408, column: 5, scope: !5666)
!5678 = !DILocation(line: 1408, column: 24, scope: !5666)
!5679 = !DILocation(line: 1408, column: 8, scope: !5666)
!5680 = !DILocation(line: 1410, column: 5, scope: !5666)
!5681 = !DILocation(line: 1410, column: 22, scope: !5666)
!5682 = !DILocation(line: 1410, column: 10, scope: !5666)
!5683 = !DILocation(line: 1416, column: 5, scope: !5666)
!5684 = !DILocation(line: 1416, column: 32, scope: !5666)
!5685 = !DILocation(line: 1416, column: 17, scope: !5666)
!5686 = !DILocation(line: 1416, column: 15, scope: !5666)
!5687 = !DILocation(line: 1416, column: 60, scope: !5666)
!5688 = !DILocation(line: 1417, column: 9, scope: !5666)
!5689 = !DILocation(line: 1417, column: 14, scope: !5666)
!5690 = !DILocation(line: 1399, column: 13, scope: !5662)
!5691 = !DILocalVariable(name: "antic_p", scope: !5692, file: !3, line: 1420, type: !1917)
!5692 = distinct !DILexicalBlock(scope: !5666, file: !3, line: 1418, column: 14)
!5693 = !DILocation(line: 1420, column: 20, scope: !5692)
!5694 = !DILocalVariable(name: "avail_p", scope: !5692, file: !3, line: 1425, type: !1917)
!5695 = !DILocation(line: 1425, column: 20, scope: !5692)
!5696 = !DILocation(line: 1425, column: 48, scope: !5692)
!5697 = !DILocation(line: 1425, column: 54, scope: !5692)
!5698 = !DILocation(line: 1425, column: 30, scope: !5692)
!5699 = !DILocation(line: 1426, column: 9, scope: !5692)
!5700 = !DILocation(line: 1426, column: 14, scope: !5692)
!5701 = !DILocation(line: 1426, column: 12, scope: !5692)
!5702 = !DILocation(line: 0, scope: !5692)
!5703 = !DILocation(line: 1429, column: 31, scope: !5692)
!5704 = !DILocation(line: 1429, column: 37, scope: !5692)
!5705 = !DILocation(line: 1429, column: 54, scope: !5692)
!5706 = !DILocation(line: 1430, column: 10, scope: !5692)
!5707 = !DILocation(line: 1430, column: 19, scope: !5692)
!5708 = !DILocation(line: 1430, column: 28, scope: !5692)
!5709 = !DILocation(line: 1429, column: 9, scope: !5692)
!5710 = !DILocation(line: 1431, column: 14, scope: !5692)
!5711 = !DILocation(line: 1432, column: 7, scope: !5662)
!5712 = !DILocation(line: 1433, column: 1, scope: !5501)
!5713 = distinct !DISubprogram(name: "hash_scan_insn", scope: !3, file: !3, line: 1461, type: !5714, scopeLine: 1462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5714 = !DISubroutineType(types: !5715)
!5715 = !{null, !1893, !3824}
!5716 = !DILocalVariable(name: "insn", arg: 1, scope: !5713, file: !3, line: 1461, type: !1893)
!5717 = !DILocation(line: 1461, column: 21, scope: !5713)
!5718 = !DILocalVariable(name: "table", arg: 2, scope: !5713, file: !3, line: 1461, type: !3824)
!5719 = !DILocation(line: 1461, column: 48, scope: !5713)
!5720 = !DILocalVariable(name: "pat", scope: !5713, file: !3, line: 1463, type: !1893)
!5721 = !DILocation(line: 1463, column: 7, scope: !5713)
!5722 = !DILocation(line: 1463, column: 13, scope: !5713)
!5723 = !DILocalVariable(name: "i", scope: !5713, file: !3, line: 1464, type: !1917)
!5724 = !DILocation(line: 1464, column: 7, scope: !5713)
!5725 = !DILocation(line: 1469, column: 7, scope: !5726)
!5726 = distinct !DILexicalBlock(scope: !5713, file: !3, line: 1469, column: 7)
!5727 = !DILocation(line: 1469, column: 22, scope: !5726)
!5728 = !DILocation(line: 1469, column: 7, scope: !5713)
!5729 = !DILocation(line: 1470, column: 20, scope: !5726)
!5730 = !DILocation(line: 1470, column: 25, scope: !5726)
!5731 = !DILocation(line: 1470, column: 31, scope: !5726)
!5732 = !DILocation(line: 1470, column: 5, scope: !5726)
!5733 = !DILocation(line: 1471, column: 12, scope: !5734)
!5734 = distinct !DILexicalBlock(scope: !5726, file: !3, line: 1471, column: 12)
!5735 = !DILocation(line: 1471, column: 27, scope: !5734)
!5736 = !DILocation(line: 1471, column: 12, scope: !5726)
!5737 = !DILocation(line: 1472, column: 12, scope: !5738)
!5738 = distinct !DILexicalBlock(scope: !5734, file: !3, line: 1472, column: 5)
!5739 = !DILocation(line: 1472, column: 10, scope: !5738)
!5740 = !DILocation(line: 1472, column: 17, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5738, file: !3, line: 1472, column: 5)
!5742 = !DILocation(line: 1472, column: 21, scope: !5741)
!5743 = !DILocation(line: 1472, column: 19, scope: !5741)
!5744 = !DILocation(line: 1472, column: 5, scope: !5738)
!5745 = !DILocalVariable(name: "x", scope: !5746, file: !3, line: 1474, type: !1893)
!5746 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 1473, column: 7)
!5747 = !DILocation(line: 1474, column: 6, scope: !5746)
!5748 = !DILocation(line: 1474, column: 10, scope: !5746)
!5749 = !DILocation(line: 1476, column: 6, scope: !5750)
!5750 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 1476, column: 6)
!5751 = !DILocation(line: 1476, column: 19, scope: !5750)
!5752 = !DILocation(line: 1476, column: 6, scope: !5746)
!5753 = !DILocation(line: 1477, column: 19, scope: !5750)
!5754 = !DILocation(line: 1477, column: 22, scope: !5750)
!5755 = !DILocation(line: 1477, column: 28, scope: !5750)
!5756 = !DILocation(line: 1477, column: 4, scope: !5750)
!5757 = !DILocation(line: 1478, column: 11, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !5750, file: !3, line: 1478, column: 11)
!5759 = !DILocation(line: 1478, column: 24, scope: !5758)
!5760 = !DILocation(line: 1478, column: 11, scope: !5750)
!5761 = !DILocation(line: 1479, column: 23, scope: !5758)
!5762 = !DILocation(line: 1479, column: 26, scope: !5758)
!5763 = !DILocation(line: 1479, column: 32, scope: !5758)
!5764 = !DILocation(line: 1479, column: 4, scope: !5758)
!5765 = !DILocation(line: 1480, column: 11, scope: !5766)
!5766 = distinct !DILexicalBlock(scope: !5758, file: !3, line: 1480, column: 11)
!5767 = !DILocation(line: 1480, column: 24, scope: !5766)
!5768 = !DILocation(line: 1480, column: 11, scope: !5758)
!5769 = !DILocation(line: 1481, column: 20, scope: !5766)
!5770 = !DILocation(line: 1481, column: 23, scope: !5766)
!5771 = !DILocation(line: 1481, column: 29, scope: !5766)
!5772 = !DILocation(line: 1481, column: 4, scope: !5766)
!5773 = !DILocation(line: 1482, column: 7, scope: !5746)
!5774 = !DILocation(line: 1472, column: 40, scope: !5741)
!5775 = !DILocation(line: 1472, column: 5, scope: !5741)
!5776 = distinct !{!5776, !5744, !5777}
!5777 = !DILocation(line: 1482, column: 7, scope: !5738)
!5778 = !DILocation(line: 1484, column: 12, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5734, file: !3, line: 1484, column: 12)
!5780 = !DILocation(line: 1484, column: 27, scope: !5779)
!5781 = !DILocation(line: 1484, column: 12, scope: !5734)
!5782 = !DILocation(line: 1485, column: 24, scope: !5779)
!5783 = !DILocation(line: 1485, column: 29, scope: !5779)
!5784 = !DILocation(line: 1485, column: 35, scope: !5779)
!5785 = !DILocation(line: 1485, column: 5, scope: !5779)
!5786 = !DILocation(line: 1486, column: 12, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5779, file: !3, line: 1486, column: 12)
!5788 = !DILocation(line: 1486, column: 27, scope: !5787)
!5789 = !DILocation(line: 1486, column: 12, scope: !5779)
!5790 = !DILocation(line: 1487, column: 21, scope: !5787)
!5791 = !DILocation(line: 1487, column: 26, scope: !5787)
!5792 = !DILocation(line: 1487, column: 32, scope: !5787)
!5793 = !DILocation(line: 1487, column: 5, scope: !5787)
!5794 = !DILocation(line: 1488, column: 1, scope: !5713)
!5795 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1974, file: !1974, line: 224, type: !5796, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5796 = !DISubroutineType(types: !5797)
!5797 = !{null, !5798, !5799, !9, !3123}
!5798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5392, size: 64)
!5799 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1894, line: 48, baseType: !5800)
!5800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5801, size: 64)
!5801 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1973)
!5802 = !DILocalVariable(name: "bi", arg: 1, scope: !5795, file: !1974, line: 224, type: !5798)
!5803 = !DILocation(line: 224, column: 37, scope: !5795)
!5804 = !DILocalVariable(name: "map", arg: 2, scope: !5795, file: !1974, line: 224, type: !5799)
!5805 = !DILocation(line: 224, column: 54, scope: !5795)
!5806 = !DILocalVariable(name: "start_bit", arg: 3, scope: !5795, file: !1974, line: 225, type: !9)
!5807 = !DILocation(line: 225, column: 15, scope: !5795)
!5808 = !DILocalVariable(name: "bit_no", arg: 4, scope: !5795, file: !1974, line: 225, type: !3123)
!5809 = !DILocation(line: 225, column: 36, scope: !5795)
!5810 = !DILocation(line: 227, column: 14, scope: !5795)
!5811 = !DILocation(line: 227, column: 19, scope: !5795)
!5812 = !DILocation(line: 227, column: 3, scope: !5795)
!5813 = !DILocation(line: 227, column: 7, scope: !5795)
!5814 = !DILocation(line: 227, column: 12, scope: !5795)
!5815 = !DILocation(line: 228, column: 3, scope: !5795)
!5816 = !DILocation(line: 228, column: 7, scope: !5795)
!5817 = !DILocation(line: 228, column: 12, scope: !5795)
!5818 = !DILocation(line: 231, column: 3, scope: !5795)
!5819 = !DILocation(line: 233, column: 12, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5821, file: !1974, line: 233, column: 11)
!5821 = distinct !DILexicalBlock(scope: !5795, file: !1974, line: 232, column: 5)
!5822 = !DILocation(line: 233, column: 16, scope: !5820)
!5823 = !DILocation(line: 233, column: 11, scope: !5821)
!5824 = !DILocation(line: 235, column: 4, scope: !5825)
!5825 = distinct !DILexicalBlock(scope: !5820, file: !1974, line: 234, column: 2)
!5826 = !DILocation(line: 235, column: 8, scope: !5825)
!5827 = !DILocation(line: 235, column: 13, scope: !5825)
!5828 = !DILocation(line: 236, column: 4, scope: !5825)
!5829 = !DILocation(line: 239, column: 11, scope: !5830)
!5830 = distinct !DILexicalBlock(scope: !5821, file: !1974, line: 239, column: 11)
!5831 = !DILocation(line: 239, column: 15, scope: !5830)
!5832 = !DILocation(line: 239, column: 21, scope: !5830)
!5833 = !DILocation(line: 239, column: 29, scope: !5830)
!5834 = !DILocation(line: 239, column: 39, scope: !5830)
!5835 = !DILocation(line: 239, column: 26, scope: !5830)
!5836 = !DILocation(line: 239, column: 11, scope: !5821)
!5837 = !DILocation(line: 240, column: 2, scope: !5830)
!5838 = !DILocation(line: 241, column: 18, scope: !5821)
!5839 = !DILocation(line: 241, column: 22, scope: !5821)
!5840 = !DILocation(line: 241, column: 28, scope: !5821)
!5841 = !DILocation(line: 241, column: 7, scope: !5821)
!5842 = !DILocation(line: 241, column: 11, scope: !5821)
!5843 = !DILocation(line: 241, column: 16, scope: !5821)
!5844 = distinct !{!5844, !5818, !5845}
!5845 = !DILocation(line: 242, column: 5, scope: !5795)
!5846 = !DILocation(line: 245, column: 7, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5795, file: !1974, line: 245, column: 7)
!5848 = !DILocation(line: 245, column: 11, scope: !5847)
!5849 = !DILocation(line: 245, column: 17, scope: !5847)
!5850 = !DILocation(line: 245, column: 25, scope: !5847)
!5851 = !DILocation(line: 245, column: 35, scope: !5847)
!5852 = !DILocation(line: 245, column: 22, scope: !5847)
!5853 = !DILocation(line: 245, column: 7, scope: !5795)
!5854 = !DILocation(line: 246, column: 17, scope: !5847)
!5855 = !DILocation(line: 246, column: 21, scope: !5847)
!5856 = !DILocation(line: 246, column: 27, scope: !5847)
!5857 = !DILocation(line: 246, column: 32, scope: !5847)
!5858 = !DILocation(line: 246, column: 15, scope: !5847)
!5859 = !DILocation(line: 246, column: 5, scope: !5847)
!5860 = !DILocation(line: 249, column: 17, scope: !5795)
!5861 = !DILocation(line: 249, column: 27, scope: !5795)
!5862 = !DILocation(line: 249, column: 46, scope: !5795)
!5863 = !DILocation(line: 249, column: 3, scope: !5795)
!5864 = !DILocation(line: 249, column: 7, scope: !5795)
!5865 = !DILocation(line: 249, column: 15, scope: !5795)
!5866 = !DILocation(line: 250, column: 14, scope: !5795)
!5867 = !DILocation(line: 250, column: 18, scope: !5795)
!5868 = !DILocation(line: 250, column: 24, scope: !5795)
!5869 = !DILocation(line: 250, column: 29, scope: !5795)
!5870 = !DILocation(line: 250, column: 33, scope: !5795)
!5871 = !DILocation(line: 250, column: 3, scope: !5795)
!5872 = !DILocation(line: 250, column: 7, scope: !5795)
!5873 = !DILocation(line: 250, column: 12, scope: !5795)
!5874 = !DILocation(line: 251, column: 16, scope: !5795)
!5875 = !DILocation(line: 251, column: 26, scope: !5795)
!5876 = !DILocation(line: 251, column: 3, scope: !5795)
!5877 = !DILocation(line: 251, column: 7, scope: !5795)
!5878 = !DILocation(line: 251, column: 12, scope: !5795)
!5879 = !DILocation(line: 257, column: 17, scope: !5795)
!5880 = !DILocation(line: 257, column: 21, scope: !5795)
!5881 = !DILocation(line: 257, column: 16, scope: !5795)
!5882 = !DILocation(line: 257, column: 13, scope: !5795)
!5883 = !DILocation(line: 259, column: 13, scope: !5795)
!5884 = !DILocation(line: 259, column: 4, scope: !5795)
!5885 = !DILocation(line: 259, column: 11, scope: !5795)
!5886 = !DILocation(line: 260, column: 1, scope: !5795)
!5887 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1974, file: !1974, line: 393, type: !5888, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5888 = !DISubroutineType(types: !5889)
!5889 = !{!6, !5798, !3123}
!5890 = !DILocalVariable(name: "bi", arg: 1, scope: !5887, file: !1974, line: 393, type: !5798)
!5891 = !DILocation(line: 393, column: 32, scope: !5887)
!5892 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5887, file: !1974, line: 393, type: !3123)
!5893 = !DILocation(line: 393, column: 46, scope: !5887)
!5894 = !DILocation(line: 396, column: 7, scope: !5895)
!5895 = distinct !DILexicalBlock(scope: !5887, file: !1974, line: 396, column: 7)
!5896 = !DILocation(line: 396, column: 11, scope: !5895)
!5897 = !DILocation(line: 396, column: 7, scope: !5887)
!5898 = !DILocation(line: 397, column: 5, scope: !5895)
!5899 = !DILabel(scope: !5900, name: "next_bit", file: !1974, line: 398)
!5900 = distinct !DILexicalBlock(scope: !5895, file: !1974, line: 397, column: 5)
!5901 = !DILocation(line: 398, column: 5, scope: !5900)
!5902 = !DILocation(line: 399, column: 7, scope: !5900)
!5903 = !DILocation(line: 399, column: 16, scope: !5900)
!5904 = !DILocation(line: 399, column: 20, scope: !5900)
!5905 = !DILocation(line: 399, column: 25, scope: !5900)
!5906 = !DILocation(line: 399, column: 14, scope: !5900)
!5907 = !DILocation(line: 401, column: 4, scope: !5908)
!5908 = distinct !DILexicalBlock(scope: !5900, file: !1974, line: 400, column: 2)
!5909 = !DILocation(line: 401, column: 8, scope: !5908)
!5910 = !DILocation(line: 401, column: 13, scope: !5908)
!5911 = !DILocation(line: 402, column: 5, scope: !5908)
!5912 = !DILocation(line: 402, column: 12, scope: !5908)
!5913 = distinct !{!5913, !5902, !5914}
!5914 = !DILocation(line: 403, column: 2, scope: !5900)
!5915 = !DILocation(line: 404, column: 7, scope: !5900)
!5916 = !DILocation(line: 410, column: 16, scope: !5887)
!5917 = !DILocation(line: 410, column: 15, scope: !5887)
!5918 = !DILocation(line: 410, column: 23, scope: !5887)
!5919 = !DILocation(line: 410, column: 42, scope: !5887)
!5920 = !DILocation(line: 411, column: 7, scope: !5887)
!5921 = !DILocation(line: 411, column: 26, scope: !5887)
!5922 = !DILocation(line: 410, column: 4, scope: !5887)
!5923 = !DILocation(line: 410, column: 11, scope: !5887)
!5924 = !DILocation(line: 412, column: 3, scope: !5887)
!5925 = !DILocation(line: 412, column: 7, scope: !5887)
!5926 = !DILocation(line: 412, column: 14, scope: !5887)
!5927 = !DILocation(line: 414, column: 3, scope: !5887)
!5928 = !DILocation(line: 417, column: 7, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5887, file: !1974, line: 415, column: 5)
!5930 = !DILocation(line: 417, column: 14, scope: !5929)
!5931 = !DILocation(line: 417, column: 18, scope: !5929)
!5932 = !DILocation(line: 417, column: 26, scope: !5929)
!5933 = !DILocation(line: 419, column: 15, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5929, file: !1974, line: 418, column: 2)
!5935 = !DILocation(line: 419, column: 19, scope: !5934)
!5936 = !DILocation(line: 419, column: 25, scope: !5934)
!5937 = !DILocation(line: 419, column: 30, scope: !5934)
!5938 = !DILocation(line: 419, column: 34, scope: !5934)
!5939 = !DILocation(line: 419, column: 4, scope: !5934)
!5940 = !DILocation(line: 419, column: 8, scope: !5934)
!5941 = !DILocation(line: 419, column: 13, scope: !5934)
!5942 = !DILocation(line: 420, column: 8, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5934, file: !1974, line: 420, column: 8)
!5944 = !DILocation(line: 420, column: 12, scope: !5943)
!5945 = !DILocation(line: 420, column: 8, scope: !5934)
!5946 = !DILocation(line: 421, column: 6, scope: !5943)
!5947 = !DILocation(line: 422, column: 5, scope: !5934)
!5948 = !DILocation(line: 422, column: 12, scope: !5934)
!5949 = !DILocation(line: 423, column: 4, scope: !5934)
!5950 = !DILocation(line: 423, column: 8, scope: !5934)
!5951 = !DILocation(line: 423, column: 15, scope: !5934)
!5952 = distinct !{!5952, !5928, !5953}
!5953 = !DILocation(line: 424, column: 2, scope: !5929)
!5954 = !DILocation(line: 427, column: 18, scope: !5929)
!5955 = !DILocation(line: 427, column: 22, scope: !5929)
!5956 = !DILocation(line: 427, column: 28, scope: !5929)
!5957 = !DILocation(line: 427, column: 7, scope: !5929)
!5958 = !DILocation(line: 427, column: 11, scope: !5929)
!5959 = !DILocation(line: 427, column: 16, scope: !5929)
!5960 = !DILocation(line: 428, column: 12, scope: !5961)
!5961 = distinct !DILexicalBlock(scope: !5929, file: !1974, line: 428, column: 11)
!5962 = !DILocation(line: 428, column: 16, scope: !5961)
!5963 = !DILocation(line: 428, column: 11, scope: !5929)
!5964 = !DILocation(line: 429, column: 2, scope: !5961)
!5965 = !DILocation(line: 430, column: 17, scope: !5929)
!5966 = !DILocation(line: 430, column: 21, scope: !5929)
!5967 = !DILocation(line: 430, column: 27, scope: !5929)
!5968 = !DILocation(line: 430, column: 32, scope: !5929)
!5969 = !DILocation(line: 430, column: 8, scope: !5929)
!5970 = !DILocation(line: 430, column: 15, scope: !5929)
!5971 = !DILocation(line: 431, column: 7, scope: !5929)
!5972 = !DILocation(line: 431, column: 11, scope: !5929)
!5973 = !DILocation(line: 431, column: 19, scope: !5929)
!5974 = distinct !{!5974, !5927, !5975}
!5975 = !DILocation(line: 432, column: 5, scope: !5887)
!5976 = !DILocation(line: 433, column: 1, scope: !5887)
!5977 = distinct !DISubprogram(name: "free_insn_expr_list_list", scope: !3, file: !3, line: 1785, type: !5978, scopeLine: 1786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!5978 = !DISubroutineType(types: !5979)
!5979 = !{null, !1892}
!5980 = !DILocalVariable(name: "listp", arg: 1, scope: !5977, file: !3, line: 1785, type: !1892)
!5981 = !DILocation(line: 1785, column: 32, scope: !5977)
!5982 = !DILocalVariable(name: "list", scope: !5977, file: !3, line: 1787, type: !1893)
!5983 = !DILocation(line: 1787, column: 7, scope: !5977)
!5984 = !DILocalVariable(name: "next", scope: !5977, file: !3, line: 1787, type: !1893)
!5985 = !DILocation(line: 1787, column: 13, scope: !5977)
!5986 = !DILocation(line: 1789, column: 16, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5977, file: !3, line: 1789, column: 3)
!5988 = !DILocation(line: 1789, column: 15, scope: !5987)
!5989 = !DILocation(line: 1789, column: 13, scope: !5987)
!5990 = !DILocation(line: 1789, column: 8, scope: !5987)
!5991 = !DILocation(line: 1789, column: 23, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5987, file: !3, line: 1789, column: 3)
!5993 = !DILocation(line: 1789, column: 3, scope: !5987)
!5994 = !DILocation(line: 1791, column: 14, scope: !5995)
!5995 = distinct !DILexicalBlock(scope: !5992, file: !3, line: 1790, column: 5)
!5996 = !DILocation(line: 1791, column: 12, scope: !5995)
!5997 = !DILocation(line: 1792, column: 11, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5995, file: !3, line: 1792, column: 11)
!5999 = !DILocation(line: 1792, column: 27, scope: !5998)
!6000 = !DILocation(line: 1792, column: 11, scope: !5995)
!6001 = !DILocation(line: 1793, column: 23, scope: !5998)
!6002 = !DILocation(line: 1793, column: 2, scope: !5998)
!6003 = !DILocation(line: 1795, column: 23, scope: !5998)
!6004 = !DILocation(line: 1795, column: 2, scope: !5998)
!6005 = !DILocation(line: 1796, column: 5, scope: !5995)
!6006 = !DILocation(line: 1789, column: 37, scope: !5992)
!6007 = !DILocation(line: 1789, column: 35, scope: !5992)
!6008 = !DILocation(line: 1789, column: 3, scope: !5992)
!6009 = distinct !{!6009, !5993, !6010}
!6010 = !DILocation(line: 1796, column: 5, scope: !5987)
!6011 = !DILocation(line: 1798, column: 4, scope: !5977)
!6012 = !DILocation(line: 1798, column: 10, scope: !5977)
!6013 = !DILocation(line: 1799, column: 1, scope: !5977)
!6014 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1974, file: !1974, line: 382, type: !6015, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6015 = !DISubroutineType(types: !6016)
!6016 = !{null, !5798, !3123}
!6017 = !DILocalVariable(name: "bi", arg: 1, scope: !6014, file: !1974, line: 382, type: !5798)
!6018 = !DILocation(line: 382, column: 33, scope: !6014)
!6019 = !DILocalVariable(name: "bit_no", arg: 2, scope: !6014, file: !1974, line: 382, type: !3123)
!6020 = !DILocation(line: 382, column: 47, scope: !6014)
!6021 = !DILocation(line: 384, column: 3, scope: !6014)
!6022 = !DILocation(line: 384, column: 7, scope: !6014)
!6023 = !DILocation(line: 384, column: 12, scope: !6014)
!6024 = !DILocation(line: 385, column: 4, scope: !6014)
!6025 = !DILocation(line: 385, column: 11, scope: !6014)
!6026 = !DILocation(line: 386, column: 1, scope: !6014)
!6027 = distinct !DISubprogram(name: "record_last_mem_set_info", scope: !3, file: !3, line: 1593, type: !4233, scopeLine: 1594, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6028 = !DILocalVariable(name: "insn", arg: 1, scope: !6027, file: !3, line: 1593, type: !1893)
!6029 = !DILocation(line: 1593, column: 31, scope: !6027)
!6030 = !DILocalVariable(name: "bb", scope: !6027, file: !3, line: 1595, type: !1917)
!6031 = !DILocation(line: 1595, column: 7, scope: !6027)
!6032 = !DILocation(line: 1595, column: 12, scope: !6027)
!6033 = !DILocation(line: 1595, column: 35, scope: !6027)
!6034 = !DILocation(line: 1599, column: 42, scope: !6027)
!6035 = !DILocation(line: 1599, column: 48, scope: !6027)
!6036 = !DILocation(line: 1599, column: 64, scope: !6027)
!6037 = !DILocation(line: 1599, column: 25, scope: !6027)
!6038 = !DILocation(line: 1599, column: 3, scope: !6027)
!6039 = !DILocation(line: 1599, column: 19, scope: !6027)
!6040 = !DILocation(line: 1599, column: 23, scope: !6027)
!6041 = !DILocation(line: 1600, column: 19, scope: !6027)
!6042 = !DILocation(line: 1600, column: 40, scope: !6027)
!6043 = !DILocation(line: 1600, column: 3, scope: !6027)
!6044 = !DILocation(line: 1602, column: 7, scope: !6045)
!6045 = distinct !DILexicalBlock(scope: !6027, file: !3, line: 1602, column: 7)
!6046 = !DILocation(line: 1602, column: 7, scope: !6027)
!6047 = !DILocation(line: 1608, column: 19, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 1603, column: 5)
!6049 = !DILocation(line: 1608, column: 25, scope: !6048)
!6050 = !DILocation(line: 1608, column: 47, scope: !6048)
!6051 = !DILocation(line: 1608, column: 2, scope: !6048)
!6052 = !DILocation(line: 1607, column: 7, scope: !6048)
!6053 = !DILocation(line: 1607, column: 29, scope: !6048)
!6054 = !DILocation(line: 1607, column: 33, scope: !6048)
!6055 = !DILocation(line: 1609, column: 23, scope: !6048)
!6056 = !DILocation(line: 1609, column: 42, scope: !6048)
!6057 = !DILocation(line: 1609, column: 7, scope: !6048)
!6058 = !DILocation(line: 1610, column: 5, scope: !6048)
!6059 = !DILocation(line: 1612, column: 18, scope: !6045)
!6060 = !DILocation(line: 1612, column: 61, scope: !6045)
!6061 = !DILocation(line: 1612, column: 53, scope: !6045)
!6062 = !DILocation(line: 1612, column: 5, scope: !6045)
!6063 = !DILocation(line: 1613, column: 1, scope: !6027)
!6064 = distinct !DISubprogram(name: "canon_list_insert", scope: !3, file: !3, line: 1559, type: !5466, scopeLine: 1561, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6065 = !DILocalVariable(name: "dest", arg: 1, scope: !6064, file: !3, line: 1559, type: !1893)
!6066 = !DILocation(line: 1559, column: 24, scope: !6064)
!6067 = !DILocalVariable(name: "unused1", arg: 2, scope: !6064, file: !3, line: 1559, type: !3232)
!6068 = !DILocation(line: 1559, column: 57, scope: !6064)
!6069 = !DILocalVariable(name: "v_insn", arg: 3, scope: !6064, file: !3, line: 1560, type: !1887)
!6070 = !DILocation(line: 1560, column: 13, scope: !6064)
!6071 = !DILocalVariable(name: "dest_addr", scope: !6064, file: !3, line: 1562, type: !1893)
!6072 = !DILocation(line: 1562, column: 7, scope: !6064)
!6073 = !DILocalVariable(name: "insn", scope: !6064, file: !3, line: 1562, type: !1893)
!6074 = !DILocation(line: 1562, column: 18, scope: !6064)
!6075 = !DILocalVariable(name: "bb", scope: !6064, file: !3, line: 1563, type: !1917)
!6076 = !DILocation(line: 1563, column: 7, scope: !6064)
!6077 = !DILocation(line: 1565, column: 3, scope: !6064)
!6078 = !DILocation(line: 1565, column: 10, scope: !6064)
!6079 = !DILocation(line: 1565, column: 26, scope: !6064)
!6080 = !DILocation(line: 1566, column: 7, scope: !6064)
!6081 = !DILocation(line: 1566, column: 10, scope: !6064)
!6082 = !DILocation(line: 1566, column: 26, scope: !6064)
!6083 = !DILocation(line: 1567, column: 7, scope: !6064)
!6084 = !DILocation(line: 1567, column: 10, scope: !6064)
!6085 = !DILocation(line: 1567, column: 26, scope: !6064)
!6086 = !DILocation(line: 1568, column: 12, scope: !6064)
!6087 = !DILocation(line: 1568, column: 10, scope: !6064)
!6088 = distinct !{!6088, !6077, !6086}
!6089 = !DILocation(line: 1574, column: 9, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 1574, column: 7)
!6091 = !DILocation(line: 1574, column: 7, scope: !6064)
!6092 = !DILocation(line: 1575, column: 5, scope: !6090)
!6093 = !DILocation(line: 1577, column: 25, scope: !6064)
!6094 = !DILocation(line: 1577, column: 15, scope: !6064)
!6095 = !DILocation(line: 1577, column: 13, scope: !6064)
!6096 = !DILocation(line: 1578, column: 26, scope: !6064)
!6097 = !DILocation(line: 1578, column: 15, scope: !6064)
!6098 = !DILocation(line: 1578, column: 13, scope: !6064)
!6099 = !DILocation(line: 1579, column: 16, scope: !6064)
!6100 = !DILocation(line: 1579, column: 10, scope: !6064)
!6101 = !DILocation(line: 1579, column: 8, scope: !6064)
!6102 = !DILocation(line: 1580, column: 8, scope: !6064)
!6103 = !DILocation(line: 1580, column: 31, scope: !6064)
!6104 = !DILocation(line: 1580, column: 6, scope: !6064)
!6105 = !DILocation(line: 1583, column: 32, scope: !6064)
!6106 = !DILocation(line: 1583, column: 43, scope: !6064)
!6107 = !DILocation(line: 1583, column: 65, scope: !6064)
!6108 = !DILocation(line: 1583, column: 5, scope: !6064)
!6109 = !DILocation(line: 1582, column: 3, scope: !6064)
!6110 = !DILocation(line: 1582, column: 25, scope: !6064)
!6111 = !DILocation(line: 1582, column: 29, scope: !6064)
!6112 = !DILocation(line: 1585, column: 32, scope: !6064)
!6113 = !DILocation(line: 1585, column: 38, scope: !6064)
!6114 = !DILocation(line: 1585, column: 60, scope: !6064)
!6115 = !DILocation(line: 1585, column: 5, scope: !6064)
!6116 = !DILocation(line: 1584, column: 3, scope: !6064)
!6117 = !DILocation(line: 1584, column: 25, scope: !6064)
!6118 = !DILocation(line: 1584, column: 29, scope: !6064)
!6119 = !DILocation(line: 1586, column: 1, scope: !6064)
!6120 = distinct !DISubprogram(name: "hash_scan_call", scope: !3, file: !3, line: 1443, type: !5502, scopeLine: 1445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6121 = !DILocalVariable(name: "x", arg: 1, scope: !6120, file: !3, line: 1443, type: !1893)
!6122 = !DILocation(line: 1443, column: 21, scope: !6120)
!6123 = !DILocalVariable(name: "insn", arg: 2, scope: !6120, file: !3, line: 1443, type: !1893)
!6124 = !DILocation(line: 1443, column: 45, scope: !6120)
!6125 = !DILocalVariable(name: "table", arg: 3, scope: !6120, file: !3, line: 1444, type: !3824)
!6126 = !DILocation(line: 1444, column: 24, scope: !6120)
!6127 = !DILocation(line: 1447, column: 1, scope: !6120)
!6128 = distinct !DISubprogram(name: "want_to_gcse_p", scope: !3, file: !3, line: 758, type: !4080, scopeLine: 759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6129 = !DILocalVariable(name: "x", arg: 1, scope: !6128, file: !3, line: 758, type: !1893)
!6130 = !DILocation(line: 758, column: 21, scope: !6128)
!6131 = !DILocation(line: 764, column: 7, scope: !6132)
!6132 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 764, column: 7)
!6133 = !DILocation(line: 764, column: 7, scope: !6128)
!6134 = !DILocation(line: 765, column: 40, scope: !6132)
!6135 = !DILocation(line: 765, column: 9, scope: !6132)
!6136 = !DILocation(line: 765, column: 7, scope: !6132)
!6137 = !DILocation(line: 765, column: 5, scope: !6132)
!6138 = !DILocation(line: 768, column: 11, scope: !6128)
!6139 = !DILocation(line: 768, column: 3, scope: !6128)
!6140 = !DILocation(line: 777, column: 7, scope: !6141)
!6141 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 769, column: 5)
!6142 = !DILocation(line: 780, column: 52, scope: !6141)
!6143 = !DILocation(line: 780, column: 14, scope: !6141)
!6144 = !DILocation(line: 780, column: 7, scope: !6141)
!6145 = !DILocation(line: 782, column: 1, scope: !6128)
!6146 = distinct !DISubprogram(name: "oprs_anticipatable_p", scope: !3, file: !3, line: 1027, type: !6147, scopeLine: 1028, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6147 = !DISubroutineType(types: !6148)
!6148 = !{!1917, !3232, !3232}
!6149 = !DILocalVariable(name: "x", arg: 1, scope: !6146, file: !3, line: 1027, type: !3232)
!6150 = !DILocation(line: 1027, column: 33, scope: !6146)
!6151 = !DILocalVariable(name: "insn", arg: 2, scope: !6146, file: !3, line: 1027, type: !3232)
!6152 = !DILocation(line: 1027, column: 46, scope: !6146)
!6153 = !DILocation(line: 1029, column: 28, scope: !6146)
!6154 = !DILocation(line: 1029, column: 31, scope: !6146)
!6155 = !DILocation(line: 1029, column: 10, scope: !6146)
!6156 = !DILocation(line: 1029, column: 3, scope: !6146)
!6157 = distinct !DISubprogram(name: "oprs_available_p", scope: !3, file: !3, line: 1036, type: !6147, scopeLine: 1037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6158 = !DILocalVariable(name: "x", arg: 1, scope: !6157, file: !3, line: 1036, type: !3232)
!6159 = !DILocation(line: 1036, column: 29, scope: !6157)
!6160 = !DILocalVariable(name: "insn", arg: 2, scope: !6157, file: !3, line: 1036, type: !3232)
!6161 = !DILocation(line: 1036, column: 42, scope: !6157)
!6162 = !DILocation(line: 1038, column: 28, scope: !6157)
!6163 = !DILocation(line: 1038, column: 31, scope: !6157)
!6164 = !DILocation(line: 1038, column: 10, scope: !6157)
!6165 = !DILocation(line: 1038, column: 3, scope: !6157)
!6166 = distinct !DISubprogram(name: "insert_expr_in_table", scope: !3, file: !3, line: 1096, type: !6167, scopeLine: 1098, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6167 = !DISubroutineType(types: !6168)
!6168 = !{null, !1893, !7, !1893, !1917, !1917, !3824}
!6169 = !DILocalVariable(name: "x", arg: 1, scope: !6166, file: !3, line: 1096, type: !1893)
!6170 = !DILocation(line: 1096, column: 27, scope: !6166)
!6171 = !DILocalVariable(name: "mode", arg: 2, scope: !6166, file: !3, line: 1096, type: !7)
!6172 = !DILocation(line: 1096, column: 48, scope: !6166)
!6173 = !DILocalVariable(name: "insn", arg: 3, scope: !6166, file: !3, line: 1096, type: !1893)
!6174 = !DILocation(line: 1096, column: 58, scope: !6166)
!6175 = !DILocalVariable(name: "antic_p", arg: 4, scope: !6166, file: !3, line: 1096, type: !1917)
!6176 = !DILocation(line: 1096, column: 68, scope: !6166)
!6177 = !DILocalVariable(name: "avail_p", arg: 5, scope: !6166, file: !3, line: 1097, type: !1917)
!6178 = !DILocation(line: 1097, column: 13, scope: !6166)
!6179 = !DILocalVariable(name: "table", arg: 6, scope: !6166, file: !3, line: 1097, type: !3824)
!6180 = !DILocation(line: 1097, column: 43, scope: !6166)
!6181 = !DILocalVariable(name: "found", scope: !6166, file: !3, line: 1099, type: !1917)
!6182 = !DILocation(line: 1099, column: 7, scope: !6166)
!6183 = !DILocalVariable(name: "do_not_record_p", scope: !6166, file: !3, line: 1099, type: !1917)
!6184 = !DILocation(line: 1099, column: 14, scope: !6166)
!6185 = !DILocalVariable(name: "hash", scope: !6166, file: !3, line: 1100, type: !9)
!6186 = !DILocation(line: 1100, column: 16, scope: !6166)
!6187 = !DILocalVariable(name: "cur_expr", scope: !6166, file: !3, line: 1101, type: !3086)
!6188 = !DILocation(line: 1101, column: 16, scope: !6166)
!6189 = !DILocalVariable(name: "last_expr", scope: !6166, file: !3, line: 1101, type: !3086)
!6190 = !DILocation(line: 1101, column: 27, scope: !6166)
!6191 = !DILocalVariable(name: "antic_occr", scope: !6166, file: !3, line: 1102, type: !3093)
!6192 = !DILocation(line: 1102, column: 16, scope: !6166)
!6193 = !DILocalVariable(name: "avail_occr", scope: !6166, file: !3, line: 1102, type: !3093)
!6194 = !DILocation(line: 1102, column: 29, scope: !6166)
!6195 = !DILocation(line: 1104, column: 21, scope: !6166)
!6196 = !DILocation(line: 1104, column: 24, scope: !6166)
!6197 = !DILocation(line: 1104, column: 48, scope: !6166)
!6198 = !DILocation(line: 1104, column: 55, scope: !6166)
!6199 = !DILocation(line: 1104, column: 10, scope: !6166)
!6200 = !DILocation(line: 1104, column: 8, scope: !6166)
!6201 = !DILocation(line: 1109, column: 7, scope: !6202)
!6202 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 1109, column: 7)
!6203 = !DILocation(line: 1109, column: 7, scope: !6166)
!6204 = !DILocation(line: 1110, column: 5, scope: !6202)
!6205 = !DILocation(line: 1112, column: 14, scope: !6166)
!6206 = !DILocation(line: 1112, column: 21, scope: !6166)
!6207 = !DILocation(line: 1112, column: 27, scope: !6166)
!6208 = !DILocation(line: 1112, column: 12, scope: !6166)
!6209 = !DILocation(line: 1113, column: 9, scope: !6166)
!6210 = !DILocation(line: 1115, column: 3, scope: !6166)
!6211 = !DILocation(line: 1115, column: 10, scope: !6166)
!6212 = !DILocation(line: 1115, column: 19, scope: !6166)
!6213 = !DILocation(line: 1115, column: 50, scope: !6166)
!6214 = !DILocation(line: 1115, column: 60, scope: !6166)
!6215 = !DILocation(line: 1115, column: 66, scope: !6166)
!6216 = !DILocation(line: 1115, column: 36, scope: !6166)
!6217 = !DILocation(line: 1115, column: 34, scope: !6166)
!6218 = !DILocation(line: 1115, column: 24, scope: !6166)
!6219 = !DILocation(line: 0, scope: !6166)
!6220 = !DILocation(line: 1119, column: 19, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 1116, column: 5)
!6222 = !DILocation(line: 1119, column: 17, scope: !6221)
!6223 = !DILocation(line: 1120, column: 18, scope: !6221)
!6224 = !DILocation(line: 1120, column: 28, scope: !6221)
!6225 = !DILocation(line: 1120, column: 16, scope: !6221)
!6226 = distinct !{!6226, !6210, !6227}
!6227 = !DILocation(line: 1121, column: 5, scope: !6166)
!6228 = !DILocation(line: 1123, column: 9, scope: !6229)
!6229 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 1123, column: 7)
!6230 = !DILocation(line: 1123, column: 7, scope: !6166)
!6231 = !DILocation(line: 1125, column: 18, scope: !6232)
!6232 = distinct !DILexicalBlock(scope: !6229, file: !3, line: 1124, column: 5)
!6233 = !DILocation(line: 1125, column: 16, scope: !6232)
!6234 = !DILocation(line: 1126, column: 18, scope: !6232)
!6235 = !DILocation(line: 1127, column: 11, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6232, file: !3, line: 1127, column: 11)
!6237 = !DILocation(line: 1127, column: 18, scope: !6236)
!6238 = !DILocation(line: 1127, column: 24, scope: !6236)
!6239 = !DILocation(line: 1127, column: 30, scope: !6236)
!6240 = !DILocation(line: 1127, column: 11, scope: !6232)
!6241 = !DILocation(line: 1129, column: 23, scope: !6236)
!6242 = !DILocation(line: 1129, column: 2, scope: !6236)
!6243 = !DILocation(line: 1129, column: 9, scope: !6236)
!6244 = !DILocation(line: 1129, column: 15, scope: !6236)
!6245 = !DILocation(line: 1129, column: 21, scope: !6236)
!6246 = !DILocation(line: 1132, column: 30, scope: !6236)
!6247 = !DILocation(line: 1132, column: 2, scope: !6236)
!6248 = !DILocation(line: 1132, column: 13, scope: !6236)
!6249 = !DILocation(line: 1132, column: 28, scope: !6236)
!6250 = !DILocation(line: 1135, column: 24, scope: !6232)
!6251 = !DILocation(line: 1135, column: 7, scope: !6232)
!6252 = !DILocation(line: 1135, column: 17, scope: !6232)
!6253 = !DILocation(line: 1135, column: 22, scope: !6232)
!6254 = !DILocation(line: 1136, column: 32, scope: !6232)
!6255 = !DILocation(line: 1136, column: 39, scope: !6232)
!6256 = !DILocation(line: 1136, column: 46, scope: !6232)
!6257 = !DILocation(line: 1136, column: 7, scope: !6232)
!6258 = !DILocation(line: 1136, column: 17, scope: !6232)
!6259 = !DILocation(line: 1136, column: 30, scope: !6232)
!6260 = !DILocation(line: 1137, column: 7, scope: !6232)
!6261 = !DILocation(line: 1137, column: 17, scope: !6232)
!6262 = !DILocation(line: 1137, column: 32, scope: !6232)
!6263 = !DILocation(line: 1138, column: 7, scope: !6232)
!6264 = !DILocation(line: 1138, column: 17, scope: !6232)
!6265 = !DILocation(line: 1138, column: 28, scope: !6232)
!6266 = !DILocation(line: 1139, column: 7, scope: !6232)
!6267 = !DILocation(line: 1139, column: 17, scope: !6232)
!6268 = !DILocation(line: 1139, column: 28, scope: !6232)
!6269 = !DILocation(line: 1140, column: 5, scope: !6232)
!6270 = !DILocation(line: 1143, column: 7, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 1143, column: 7)
!6272 = !DILocation(line: 1143, column: 7, scope: !6166)
!6273 = !DILocation(line: 1145, column: 20, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 1144, column: 5)
!6275 = !DILocation(line: 1145, column: 30, scope: !6274)
!6276 = !DILocation(line: 1145, column: 18, scope: !6274)
!6277 = !DILocation(line: 1147, column: 11, scope: !6278)
!6278 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 1147, column: 11)
!6279 = !DILocation(line: 1148, column: 4, scope: !6278)
!6280 = !DILocation(line: 1148, column: 7, scope: !6278)
!6281 = !DILocation(line: 1148, column: 44, scope: !6278)
!6282 = !DILocation(line: 1148, column: 41, scope: !6278)
!6283 = !DILocation(line: 1147, column: 11, scope: !6274)
!6284 = !DILocation(line: 1149, column: 13, scope: !6278)
!6285 = !DILocation(line: 1149, column: 2, scope: !6278)
!6286 = !DILocation(line: 1151, column: 11, scope: !6287)
!6287 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 1151, column: 11)
!6288 = !DILocation(line: 1151, column: 11, scope: !6274)
!6289 = !DILocation(line: 1159, column: 17, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6287, file: !3, line: 1157, column: 2)
!6291 = !DILocation(line: 1159, column: 15, scope: !6290)
!6292 = !DILocation(line: 1160, column: 15, scope: !6290)
!6293 = !DILocation(line: 1161, column: 23, scope: !6290)
!6294 = !DILocation(line: 1161, column: 4, scope: !6290)
!6295 = !DILocation(line: 1161, column: 16, scope: !6290)
!6296 = !DILocation(line: 1161, column: 21, scope: !6290)
!6297 = !DILocation(line: 1162, column: 23, scope: !6290)
!6298 = !DILocation(line: 1162, column: 33, scope: !6290)
!6299 = !DILocation(line: 1162, column: 4, scope: !6290)
!6300 = !DILocation(line: 1162, column: 16, scope: !6290)
!6301 = !DILocation(line: 1162, column: 21, scope: !6290)
!6302 = !DILocation(line: 1163, column: 4, scope: !6290)
!6303 = !DILocation(line: 1163, column: 16, scope: !6290)
!6304 = !DILocation(line: 1163, column: 26, scope: !6290)
!6305 = !DILocation(line: 1164, column: 27, scope: !6290)
!6306 = !DILocation(line: 1164, column: 4, scope: !6290)
!6307 = !DILocation(line: 1164, column: 14, scope: !6290)
!6308 = !DILocation(line: 1164, column: 25, scope: !6290)
!6309 = !DILocation(line: 1166, column: 5, scope: !6274)
!6310 = !DILocation(line: 1168, column: 7, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 1168, column: 7)
!6312 = !DILocation(line: 1168, column: 7, scope: !6166)
!6313 = !DILocation(line: 1170, column: 20, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 1169, column: 5)
!6315 = !DILocation(line: 1170, column: 30, scope: !6314)
!6316 = !DILocation(line: 1170, column: 18, scope: !6314)
!6317 = !DILocation(line: 1172, column: 11, scope: !6318)
!6318 = distinct !DILexicalBlock(scope: !6314, file: !3, line: 1172, column: 11)
!6319 = !DILocation(line: 1173, column: 4, scope: !6318)
!6320 = !DILocation(line: 1173, column: 7, scope: !6318)
!6321 = !DILocation(line: 1173, column: 44, scope: !6318)
!6322 = !DILocation(line: 1173, column: 41, scope: !6318)
!6323 = !DILocation(line: 1172, column: 11, scope: !6314)
!6324 = !DILocation(line: 1179, column: 23, scope: !6325)
!6325 = distinct !DILexicalBlock(scope: !6318, file: !3, line: 1174, column: 2)
!6326 = !DILocation(line: 1179, column: 4, scope: !6325)
!6327 = !DILocation(line: 1179, column: 16, scope: !6325)
!6328 = !DILocation(line: 1179, column: 21, scope: !6325)
!6329 = !DILocation(line: 1180, column: 2, scope: !6325)
!6330 = !DILocation(line: 1184, column: 17, scope: !6331)
!6331 = distinct !DILexicalBlock(scope: !6318, file: !3, line: 1182, column: 2)
!6332 = !DILocation(line: 1184, column: 15, scope: !6331)
!6333 = !DILocation(line: 1185, column: 15, scope: !6331)
!6334 = !DILocation(line: 1186, column: 23, scope: !6331)
!6335 = !DILocation(line: 1186, column: 4, scope: !6331)
!6336 = !DILocation(line: 1186, column: 16, scope: !6331)
!6337 = !DILocation(line: 1186, column: 21, scope: !6331)
!6338 = !DILocation(line: 1187, column: 23, scope: !6331)
!6339 = !DILocation(line: 1187, column: 33, scope: !6331)
!6340 = !DILocation(line: 1187, column: 4, scope: !6331)
!6341 = !DILocation(line: 1187, column: 16, scope: !6331)
!6342 = !DILocation(line: 1187, column: 21, scope: !6331)
!6343 = !DILocation(line: 1188, column: 4, scope: !6331)
!6344 = !DILocation(line: 1188, column: 16, scope: !6331)
!6345 = !DILocation(line: 1188, column: 26, scope: !6331)
!6346 = !DILocation(line: 1189, column: 27, scope: !6331)
!6347 = !DILocation(line: 1189, column: 4, scope: !6331)
!6348 = !DILocation(line: 1189, column: 14, scope: !6331)
!6349 = !DILocation(line: 1189, column: 25, scope: !6331)
!6350 = !DILocation(line: 1191, column: 5, scope: !6314)
!6351 = !DILocation(line: 1192, column: 1, scope: !6166)
!6352 = distinct !DISubprogram(name: "insert_set_in_table", scope: !3, file: !3, line: 1200, type: !5502, scopeLine: 1201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6353 = !DILocalVariable(name: "x", arg: 1, scope: !6352, file: !3, line: 1200, type: !1893)
!6354 = !DILocation(line: 1200, column: 26, scope: !6352)
!6355 = !DILocalVariable(name: "insn", arg: 2, scope: !6352, file: !3, line: 1200, type: !1893)
!6356 = !DILocation(line: 1200, column: 33, scope: !6352)
!6357 = !DILocalVariable(name: "table", arg: 3, scope: !6352, file: !3, line: 1200, type: !3824)
!6358 = !DILocation(line: 1200, column: 60, scope: !6352)
!6359 = !DILocalVariable(name: "found", scope: !6352, file: !3, line: 1202, type: !1917)
!6360 = !DILocation(line: 1202, column: 7, scope: !6352)
!6361 = !DILocalVariable(name: "hash", scope: !6352, file: !3, line: 1203, type: !9)
!6362 = !DILocation(line: 1203, column: 16, scope: !6352)
!6363 = !DILocalVariable(name: "cur_expr", scope: !6352, file: !3, line: 1204, type: !3086)
!6364 = !DILocation(line: 1204, column: 16, scope: !6352)
!6365 = !DILocalVariable(name: "last_expr", scope: !6352, file: !3, line: 1204, type: !3086)
!6366 = !DILocation(line: 1204, column: 27, scope: !6352)
!6367 = !DILocalVariable(name: "cur_occr", scope: !6352, file: !3, line: 1205, type: !3093)
!6368 = !DILocation(line: 1205, column: 16, scope: !6352)
!6369 = !DILocation(line: 1207, column: 3, scope: !6352)
!6370 = !DILocation(line: 1209, column: 20, scope: !6352)
!6371 = !DILocation(line: 1209, column: 42, scope: !6352)
!6372 = !DILocation(line: 1209, column: 49, scope: !6352)
!6373 = !DILocation(line: 1209, column: 10, scope: !6352)
!6374 = !DILocation(line: 1209, column: 8, scope: !6352)
!6375 = !DILocation(line: 1211, column: 14, scope: !6352)
!6376 = !DILocation(line: 1211, column: 21, scope: !6352)
!6377 = !DILocation(line: 1211, column: 27, scope: !6352)
!6378 = !DILocation(line: 1211, column: 12, scope: !6352)
!6379 = !DILocation(line: 1212, column: 9, scope: !6352)
!6380 = !DILocation(line: 1214, column: 3, scope: !6352)
!6381 = !DILocation(line: 1214, column: 10, scope: !6352)
!6382 = !DILocation(line: 1214, column: 19, scope: !6352)
!6383 = !DILocation(line: 1214, column: 50, scope: !6352)
!6384 = !DILocation(line: 1214, column: 60, scope: !6352)
!6385 = !DILocation(line: 1214, column: 66, scope: !6352)
!6386 = !DILocation(line: 1214, column: 36, scope: !6352)
!6387 = !DILocation(line: 1214, column: 34, scope: !6352)
!6388 = !DILocation(line: 1214, column: 24, scope: !6352)
!6389 = !DILocation(line: 0, scope: !6352)
!6390 = !DILocation(line: 1218, column: 19, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 1215, column: 5)
!6392 = !DILocation(line: 1218, column: 17, scope: !6391)
!6393 = !DILocation(line: 1219, column: 18, scope: !6391)
!6394 = !DILocation(line: 1219, column: 28, scope: !6391)
!6395 = !DILocation(line: 1219, column: 16, scope: !6391)
!6396 = distinct !{!6396, !6380, !6397}
!6397 = !DILocation(line: 1220, column: 5, scope: !6352)
!6398 = !DILocation(line: 1222, column: 9, scope: !6399)
!6399 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 1222, column: 7)
!6400 = !DILocation(line: 1222, column: 7, scope: !6352)
!6401 = !DILocation(line: 1224, column: 18, scope: !6402)
!6402 = distinct !DILexicalBlock(scope: !6399, file: !3, line: 1223, column: 5)
!6403 = !DILocation(line: 1224, column: 16, scope: !6402)
!6404 = !DILocation(line: 1225, column: 18, scope: !6402)
!6405 = !DILocation(line: 1226, column: 11, scope: !6406)
!6406 = distinct !DILexicalBlock(scope: !6402, file: !3, line: 1226, column: 11)
!6407 = !DILocation(line: 1226, column: 18, scope: !6406)
!6408 = !DILocation(line: 1226, column: 24, scope: !6406)
!6409 = !DILocation(line: 1226, column: 30, scope: !6406)
!6410 = !DILocation(line: 1226, column: 11, scope: !6402)
!6411 = !DILocation(line: 1228, column: 23, scope: !6406)
!6412 = !DILocation(line: 1228, column: 2, scope: !6406)
!6413 = !DILocation(line: 1228, column: 9, scope: !6406)
!6414 = !DILocation(line: 1228, column: 15, scope: !6406)
!6415 = !DILocation(line: 1228, column: 21, scope: !6406)
!6416 = !DILocation(line: 1231, column: 30, scope: !6406)
!6417 = !DILocation(line: 1231, column: 2, scope: !6406)
!6418 = !DILocation(line: 1231, column: 13, scope: !6406)
!6419 = !DILocation(line: 1231, column: 28, scope: !6406)
!6420 = !DILocation(line: 1236, column: 34, scope: !6402)
!6421 = !DILocation(line: 1236, column: 24, scope: !6402)
!6422 = !DILocation(line: 1236, column: 7, scope: !6402)
!6423 = !DILocation(line: 1236, column: 17, scope: !6402)
!6424 = !DILocation(line: 1236, column: 22, scope: !6402)
!6425 = !DILocation(line: 1237, column: 32, scope: !6402)
!6426 = !DILocation(line: 1237, column: 39, scope: !6402)
!6427 = !DILocation(line: 1237, column: 46, scope: !6402)
!6428 = !DILocation(line: 1237, column: 7, scope: !6402)
!6429 = !DILocation(line: 1237, column: 17, scope: !6402)
!6430 = !DILocation(line: 1237, column: 30, scope: !6402)
!6431 = !DILocation(line: 1238, column: 7, scope: !6402)
!6432 = !DILocation(line: 1238, column: 17, scope: !6402)
!6433 = !DILocation(line: 1238, column: 32, scope: !6402)
!6434 = !DILocation(line: 1239, column: 7, scope: !6402)
!6435 = !DILocation(line: 1239, column: 17, scope: !6402)
!6436 = !DILocation(line: 1239, column: 28, scope: !6402)
!6437 = !DILocation(line: 1240, column: 7, scope: !6402)
!6438 = !DILocation(line: 1240, column: 17, scope: !6402)
!6439 = !DILocation(line: 1240, column: 28, scope: !6402)
!6440 = !DILocation(line: 1241, column: 5, scope: !6402)
!6441 = !DILocation(line: 1244, column: 14, scope: !6352)
!6442 = !DILocation(line: 1244, column: 24, scope: !6352)
!6443 = !DILocation(line: 1244, column: 12, scope: !6352)
!6444 = !DILocation(line: 1246, column: 7, scope: !6445)
!6445 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 1246, column: 7)
!6446 = !DILocation(line: 1247, column: 7, scope: !6445)
!6447 = !DILocation(line: 1247, column: 10, scope: !6445)
!6448 = !DILocation(line: 1247, column: 45, scope: !6445)
!6449 = !DILocation(line: 1247, column: 42, scope: !6445)
!6450 = !DILocation(line: 1246, column: 7, scope: !6352)
!6451 = !DILocation(line: 1253, column: 24, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 1248, column: 5)
!6453 = !DILocation(line: 1253, column: 7, scope: !6452)
!6454 = !DILocation(line: 1253, column: 17, scope: !6452)
!6455 = !DILocation(line: 1253, column: 22, scope: !6452)
!6456 = !DILocation(line: 1254, column: 5, scope: !6452)
!6457 = !DILocation(line: 1258, column: 18, scope: !6458)
!6458 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 1256, column: 5)
!6459 = !DILocation(line: 1258, column: 16, scope: !6458)
!6460 = !DILocation(line: 1259, column: 18, scope: !6458)
!6461 = !DILocation(line: 1260, column: 24, scope: !6458)
!6462 = !DILocation(line: 1260, column: 7, scope: !6458)
!6463 = !DILocation(line: 1260, column: 17, scope: !6458)
!6464 = !DILocation(line: 1260, column: 22, scope: !6458)
!6465 = !DILocation(line: 1261, column: 24, scope: !6458)
!6466 = !DILocation(line: 1261, column: 34, scope: !6458)
!6467 = !DILocation(line: 1261, column: 7, scope: !6458)
!6468 = !DILocation(line: 1261, column: 17, scope: !6458)
!6469 = !DILocation(line: 1261, column: 22, scope: !6458)
!6470 = !DILocation(line: 1262, column: 7, scope: !6458)
!6471 = !DILocation(line: 1262, column: 17, scope: !6458)
!6472 = !DILocation(line: 1262, column: 27, scope: !6458)
!6473 = !DILocation(line: 1263, column: 30, scope: !6458)
!6474 = !DILocation(line: 1263, column: 7, scope: !6458)
!6475 = !DILocation(line: 1263, column: 17, scope: !6458)
!6476 = !DILocation(line: 1263, column: 28, scope: !6458)
!6477 = !DILocation(line: 1265, column: 1, scope: !6352)
!6478 = distinct !DISubprogram(name: "oprs_unchanged_p", scope: !3, file: !3, line: 847, type: !6479, scopeLine: 848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6479 = !DISubroutineType(types: !6480)
!6480 = !{!1917, !3232, !3232, !1917}
!6481 = !DILocalVariable(name: "x", arg: 1, scope: !6478, file: !3, line: 847, type: !3232)
!6482 = !DILocation(line: 847, column: 29, scope: !6478)
!6483 = !DILocalVariable(name: "insn", arg: 2, scope: !6478, file: !3, line: 847, type: !3232)
!6484 = !DILocation(line: 847, column: 42, scope: !6478)
!6485 = !DILocalVariable(name: "avail_p", arg: 3, scope: !6478, file: !3, line: 847, type: !1917)
!6486 = !DILocation(line: 847, column: 52, scope: !6478)
!6487 = !DILocalVariable(name: "i", scope: !6478, file: !3, line: 849, type: !1917)
!6488 = !DILocation(line: 849, column: 7, scope: !6478)
!6489 = !DILocalVariable(name: "j", scope: !6478, file: !3, line: 849, type: !1917)
!6490 = !DILocation(line: 849, column: 10, scope: !6478)
!6491 = !DILocalVariable(name: "code", scope: !6478, file: !3, line: 850, type: !388)
!6492 = !DILocation(line: 850, column: 17, scope: !6478)
!6493 = !DILocalVariable(name: "fmt", scope: !6478, file: !3, line: 851, type: !1920)
!6494 = !DILocation(line: 851, column: 15, scope: !6478)
!6495 = !DILocation(line: 853, column: 7, scope: !6496)
!6496 = distinct !DILexicalBlock(scope: !6478, file: !3, line: 853, column: 7)
!6497 = !DILocation(line: 853, column: 9, scope: !6496)
!6498 = !DILocation(line: 853, column: 7, scope: !6478)
!6499 = !DILocation(line: 854, column: 5, scope: !6496)
!6500 = !DILocation(line: 856, column: 10, scope: !6478)
!6501 = !DILocation(line: 856, column: 8, scope: !6478)
!6502 = !DILocation(line: 857, column: 11, scope: !6478)
!6503 = !DILocation(line: 857, column: 3, scope: !6478)
!6504 = !DILocalVariable(name: "info", scope: !6505, file: !3, line: 861, type: !3102)
!6505 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 860, column: 7)
!6506 = distinct !DILexicalBlock(scope: !6478, file: !3, line: 858, column: 5)
!6507 = !DILocation(line: 861, column: 25, scope: !6505)
!6508 = !DILocation(line: 861, column: 33, scope: !6505)
!6509 = !DILocation(line: 861, column: 48, scope: !6505)
!6510 = !DILocation(line: 863, column: 6, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6505, file: !3, line: 863, column: 6)
!6512 = !DILocation(line: 863, column: 12, scope: !6511)
!6513 = !DILocation(line: 863, column: 23, scope: !6511)
!6514 = !DILocation(line: 863, column: 20, scope: !6511)
!6515 = !DILocation(line: 863, column: 6, scope: !6505)
!6516 = !DILocation(line: 864, column: 4, scope: !6511)
!6517 = !DILocation(line: 865, column: 6, scope: !6518)
!6518 = distinct !DILexicalBlock(scope: !6505, file: !3, line: 865, column: 6)
!6519 = !DILocation(line: 865, column: 6, scope: !6505)
!6520 = !DILocation(line: 866, column: 11, scope: !6518)
!6521 = !DILocation(line: 866, column: 17, scope: !6518)
!6522 = !DILocation(line: 866, column: 28, scope: !6518)
!6523 = !DILocation(line: 866, column: 26, scope: !6518)
!6524 = !DILocation(line: 866, column: 4, scope: !6518)
!6525 = !DILocation(line: 868, column: 11, scope: !6518)
!6526 = !DILocation(line: 868, column: 17, scope: !6518)
!6527 = !DILocation(line: 868, column: 30, scope: !6518)
!6528 = !DILocation(line: 868, column: 27, scope: !6518)
!6529 = !DILocation(line: 868, column: 4, scope: !6518)
!6530 = !DILocation(line: 872, column: 35, scope: !6531)
!6531 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 872, column: 11)
!6532 = !DILocation(line: 872, column: 47, scope: !6531)
!6533 = !DILocation(line: 873, column: 7, scope: !6531)
!6534 = !DILocation(line: 873, column: 10, scope: !6531)
!6535 = !DILocation(line: 872, column: 11, scope: !6531)
!6536 = !DILocation(line: 872, column: 11, scope: !6506)
!6537 = !DILocation(line: 874, column: 2, scope: !6531)
!6538 = !DILocation(line: 876, column: 27, scope: !6531)
!6539 = !DILocation(line: 876, column: 40, scope: !6531)
!6540 = !DILocation(line: 876, column: 46, scope: !6531)
!6541 = !DILocation(line: 876, column: 9, scope: !6531)
!6542 = !DILocation(line: 876, column: 2, scope: !6531)
!6543 = !DILocation(line: 884, column: 7, scope: !6506)
!6544 = !DILocation(line: 897, column: 7, scope: !6506)
!6545 = !DILocation(line: 900, column: 7, scope: !6506)
!6546 = !DILocation(line: 903, column: 12, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6478, file: !3, line: 903, column: 3)
!6548 = !DILocation(line: 903, column: 34, scope: !6547)
!6549 = !DILocation(line: 903, column: 10, scope: !6547)
!6550 = !DILocation(line: 903, column: 45, scope: !6547)
!6551 = !DILocation(line: 903, column: 43, scope: !6547)
!6552 = !DILocation(line: 903, column: 8, scope: !6547)
!6553 = !DILocation(line: 903, column: 68, scope: !6554)
!6554 = distinct !DILexicalBlock(scope: !6547, file: !3, line: 903, column: 3)
!6555 = !DILocation(line: 903, column: 70, scope: !6554)
!6556 = !DILocation(line: 903, column: 3, scope: !6547)
!6557 = !DILocation(line: 905, column: 11, scope: !6558)
!6558 = distinct !DILexicalBlock(scope: !6559, file: !3, line: 905, column: 11)
!6559 = distinct !DILexicalBlock(scope: !6554, file: !3, line: 904, column: 5)
!6560 = !DILocation(line: 905, column: 15, scope: !6558)
!6561 = !DILocation(line: 905, column: 18, scope: !6558)
!6562 = !DILocation(line: 905, column: 11, scope: !6559)
!6563 = !DILocation(line: 910, column: 8, scope: !6564)
!6564 = distinct !DILexicalBlock(scope: !6565, file: !3, line: 910, column: 8)
!6565 = distinct !DILexicalBlock(scope: !6558, file: !3, line: 906, column: 2)
!6566 = !DILocation(line: 910, column: 10, scope: !6564)
!6567 = !DILocation(line: 910, column: 8, scope: !6565)
!6568 = !DILocation(line: 911, column: 31, scope: !6564)
!6569 = !DILocation(line: 911, column: 44, scope: !6564)
!6570 = !DILocation(line: 911, column: 50, scope: !6564)
!6571 = !DILocation(line: 911, column: 13, scope: !6564)
!6572 = !DILocation(line: 911, column: 6, scope: !6564)
!6573 = !DILocation(line: 913, column: 33, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6564, file: !3, line: 913, column: 13)
!6575 = !DILocation(line: 913, column: 46, scope: !6574)
!6576 = !DILocation(line: 913, column: 52, scope: !6574)
!6577 = !DILocation(line: 913, column: 15, scope: !6574)
!6578 = !DILocation(line: 913, column: 13, scope: !6564)
!6579 = !DILocation(line: 914, column: 6, scope: !6574)
!6580 = !DILocation(line: 915, column: 2, scope: !6565)
!6581 = !DILocation(line: 916, column: 16, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6558, file: !3, line: 916, column: 16)
!6583 = !DILocation(line: 916, column: 20, scope: !6582)
!6584 = !DILocation(line: 916, column: 23, scope: !6582)
!6585 = !DILocation(line: 916, column: 16, scope: !6558)
!6586 = !DILocation(line: 917, column: 9, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6582, file: !3, line: 917, column: 2)
!6588 = !DILocation(line: 917, column: 7, scope: !6587)
!6589 = !DILocation(line: 917, column: 14, scope: !6590)
!6590 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 917, column: 2)
!6591 = !DILocation(line: 917, column: 18, scope: !6590)
!6592 = !DILocation(line: 917, column: 16, scope: !6590)
!6593 = !DILocation(line: 917, column: 2, scope: !6587)
!6594 = !DILocation(line: 918, column: 28, scope: !6595)
!6595 = distinct !DILexicalBlock(scope: !6590, file: !3, line: 918, column: 8)
!6596 = !DILocation(line: 918, column: 47, scope: !6595)
!6597 = !DILocation(line: 918, column: 53, scope: !6595)
!6598 = !DILocation(line: 918, column: 10, scope: !6595)
!6599 = !DILocation(line: 918, column: 8, scope: !6590)
!6600 = !DILocation(line: 919, column: 6, scope: !6595)
!6601 = !DILocation(line: 918, column: 60, scope: !6595)
!6602 = !DILocation(line: 917, column: 35, scope: !6590)
!6603 = !DILocation(line: 917, column: 2, scope: !6590)
!6604 = distinct !{!6604, !6593, !6605}
!6605 = !DILocation(line: 919, column: 13, scope: !6587)
!6606 = !DILocation(line: 920, column: 5, scope: !6559)
!6607 = !DILocation(line: 903, column: 77, scope: !6554)
!6608 = !DILocation(line: 903, column: 3, scope: !6554)
!6609 = distinct !{!6609, !6556, !6610}
!6610 = !DILocation(line: 920, column: 5, scope: !6547)
!6611 = !DILocation(line: 922, column: 3, scope: !6478)
!6612 = !DILocation(line: 923, column: 1, scope: !6478)
!6613 = distinct !DISubprogram(name: "load_killed_in_block_p", scope: !3, file: !3, line: 979, type: !6614, scopeLine: 980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6614 = !DISubroutineType(types: !6615)
!6615 = !{!1917, !5262, !1917, !3232, !1917}
!6616 = !DILocalVariable(name: "bb", arg: 1, scope: !6613, file: !3, line: 979, type: !5262)
!6617 = !DILocation(line: 979, column: 43, scope: !6613)
!6618 = !DILocalVariable(name: "uid_limit", arg: 2, scope: !6613, file: !3, line: 979, type: !1917)
!6619 = !DILocation(line: 979, column: 51, scope: !6613)
!6620 = !DILocalVariable(name: "x", arg: 3, scope: !6613, file: !3, line: 979, type: !3232)
!6621 = !DILocation(line: 979, column: 72, scope: !6613)
!6622 = !DILocalVariable(name: "avail_p", arg: 4, scope: !6613, file: !3, line: 979, type: !1917)
!6623 = !DILocation(line: 979, column: 79, scope: !6613)
!6624 = !DILocalVariable(name: "list_entry", scope: !6613, file: !3, line: 981, type: !1893)
!6625 = !DILocation(line: 981, column: 7, scope: !6613)
!6626 = !DILocation(line: 981, column: 20, scope: !6613)
!6627 = !DILocation(line: 981, column: 36, scope: !6613)
!6628 = !DILocation(line: 981, column: 40, scope: !6613)
!6629 = !DILocation(line: 984, column: 7, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6613, file: !3, line: 984, column: 7)
!6631 = !DILocation(line: 984, column: 7, scope: !6613)
!6632 = !DILocation(line: 985, column: 5, scope: !6630)
!6633 = !DILocation(line: 987, column: 3, scope: !6613)
!6634 = !DILocation(line: 987, column: 10, scope: !6613)
!6635 = !DILocalVariable(name: "setter", scope: !6636, file: !3, line: 989, type: !1893)
!6636 = distinct !DILexicalBlock(scope: !6613, file: !3, line: 988, column: 5)
!6637 = !DILocation(line: 989, column: 11, scope: !6636)
!6638 = !DILocation(line: 991, column: 12, scope: !6639)
!6639 = distinct !DILexicalBlock(scope: !6636, file: !3, line: 991, column: 11)
!6640 = !DILocation(line: 992, column: 5, scope: !6639)
!6641 = !DILocation(line: 992, column: 8, scope: !6639)
!6642 = !DILocation(line: 992, column: 46, scope: !6639)
!6643 = !DILocation(line: 992, column: 44, scope: !6639)
!6644 = !DILocation(line: 993, column: 4, scope: !6639)
!6645 = !DILocation(line: 993, column: 10, scope: !6639)
!6646 = !DILocation(line: 994, column: 8, scope: !6639)
!6647 = !DILocation(line: 994, column: 11, scope: !6639)
!6648 = !DILocation(line: 994, column: 49, scope: !6639)
!6649 = !DILocation(line: 994, column: 47, scope: !6639)
!6650 = !DILocation(line: 991, column: 11, scope: !6636)
!6651 = !DILocation(line: 996, column: 17, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6639, file: !3, line: 995, column: 2)
!6653 = !DILocation(line: 996, column: 15, scope: !6652)
!6654 = !DILocation(line: 997, column: 4, scope: !6652)
!6655 = distinct !{!6655, !6633, !6656}
!6656 = !DILocation(line: 1019, column: 5, scope: !6613)
!6657 = !DILocation(line: 1000, column: 16, scope: !6636)
!6658 = !DILocation(line: 1000, column: 14, scope: !6636)
!6659 = !DILocation(line: 1005, column: 11, scope: !6660)
!6660 = distinct !DILexicalBlock(scope: !6636, file: !3, line: 1005, column: 11)
!6661 = !DILocation(line: 1005, column: 11, scope: !6636)
!6662 = !DILocation(line: 1006, column: 2, scope: !6660)
!6663 = !DILocation(line: 1013, column: 26, scope: !6636)
!6664 = !DILocation(line: 1013, column: 24, scope: !6636)
!6665 = !DILocation(line: 1014, column: 28, scope: !6636)
!6666 = !DILocation(line: 1015, column: 20, scope: !6636)
!6667 = !DILocation(line: 1015, column: 7, scope: !6636)
!6668 = !DILocation(line: 1016, column: 11, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6636, file: !3, line: 1016, column: 11)
!6670 = !DILocation(line: 1016, column: 11, scope: !6636)
!6671 = !DILocation(line: 1017, column: 2, scope: !6669)
!6672 = !DILocation(line: 1018, column: 20, scope: !6636)
!6673 = !DILocation(line: 1018, column: 18, scope: !6636)
!6674 = !DILocation(line: 1020, column: 3, scope: !6613)
!6675 = !DILocation(line: 1021, column: 1, scope: !6613)
!6676 = distinct !DISubprogram(name: "mems_conflict_for_gcse_p", scope: !3, file: !3, line: 941, type: !5466, scopeLine: 943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6677 = !DILocalVariable(name: "dest", arg: 1, scope: !6676, file: !3, line: 941, type: !1893)
!6678 = !DILocation(line: 941, column: 31, scope: !6676)
!6679 = !DILocalVariable(name: "setter", arg: 2, scope: !6676, file: !3, line: 941, type: !3232)
!6680 = !DILocation(line: 941, column: 47, scope: !6676)
!6681 = !DILocalVariable(name: "data", arg: 3, scope: !6676, file: !3, line: 942, type: !1887)
!6682 = !DILocation(line: 942, column: 12, scope: !6676)
!6683 = !DILocation(line: 944, column: 3, scope: !6676)
!6684 = !DILocation(line: 944, column: 10, scope: !6676)
!6685 = !DILocation(line: 944, column: 26, scope: !6676)
!6686 = !DILocation(line: 945, column: 3, scope: !6676)
!6687 = !DILocation(line: 945, column: 6, scope: !6676)
!6688 = !DILocation(line: 945, column: 22, scope: !6676)
!6689 = !DILocation(line: 946, column: 3, scope: !6676)
!6690 = !DILocation(line: 946, column: 6, scope: !6676)
!6691 = !DILocation(line: 946, column: 22, scope: !6676)
!6692 = !DILocation(line: 947, column: 12, scope: !6676)
!6693 = !DILocation(line: 947, column: 10, scope: !6676)
!6694 = distinct !{!6694, !6683, !6692}
!6695 = !DILocation(line: 952, column: 9, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 952, column: 7)
!6697 = !DILocation(line: 952, column: 7, scope: !6676)
!6698 = !DILocation(line: 953, column: 5, scope: !6696)
!6699 = !DILocation(line: 958, column: 21, scope: !6700)
!6700 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 958, column: 7)
!6701 = !DILocation(line: 958, column: 27, scope: !6700)
!6702 = !DILocation(line: 958, column: 7, scope: !6700)
!6703 = !DILocation(line: 958, column: 45, scope: !6700)
!6704 = !DILocation(line: 958, column: 48, scope: !6700)
!6705 = !DILocation(line: 958, column: 62, scope: !6700)
!6706 = !DILocation(line: 958, column: 7, scope: !6676)
!6707 = !DILocation(line: 960, column: 30, scope: !6708)
!6708 = distinct !DILexicalBlock(scope: !6709, file: !3, line: 960, column: 11)
!6709 = distinct !DILexicalBlock(scope: !6700, file: !3, line: 959, column: 5)
!6710 = !DILocation(line: 960, column: 12, scope: !6708)
!6711 = !DILocation(line: 960, column: 11, scope: !6709)
!6712 = !DILocation(line: 961, column: 23, scope: !6708)
!6713 = !DILocation(line: 961, column: 2, scope: !6708)
!6714 = !DILocation(line: 962, column: 7, scope: !6709)
!6715 = !DILocation(line: 965, column: 24, scope: !6716)
!6716 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 965, column: 7)
!6717 = !DILocation(line: 965, column: 30, scope: !6716)
!6718 = !DILocation(line: 965, column: 47, scope: !6716)
!6719 = !DILocation(line: 965, column: 7, scope: !6716)
!6720 = !DILocation(line: 965, column: 7, scope: !6676)
!6721 = !DILocation(line: 967, column: 26, scope: !6716)
!6722 = !DILocation(line: 967, column: 5, scope: !6716)
!6723 = !DILocation(line: 968, column: 1, scope: !6676)
!6724 = distinct !DISubprogram(name: "expr_equiv_p", scope: !3, file: !3, line: 1080, type: !6147, scopeLine: 1081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6725 = !DILocalVariable(name: "x", arg: 1, scope: !6724, file: !3, line: 1080, type: !3232)
!6726 = !DILocation(line: 1080, column: 25, scope: !6724)
!6727 = !DILocalVariable(name: "y", arg: 2, scope: !6724, file: !3, line: 1080, type: !3232)
!6728 = !DILocation(line: 1080, column: 38, scope: !6724)
!6729 = !DILocation(line: 1082, column: 23, scope: !6724)
!6730 = !DILocation(line: 1082, column: 26, scope: !6724)
!6731 = !DILocation(line: 1082, column: 10, scope: !6724)
!6732 = !DILocation(line: 1082, column: 3, scope: !6724)
!6733 = distinct !DISubprogram(name: "find_rtx_in_ldst", scope: !3, file: !3, line: 4623, type: !6734, scopeLine: 4624, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6734 = !DISubroutineType(types: !6735)
!6735 = !{!3110, !1893}
!6736 = !DILocalVariable(name: "x", arg: 1, scope: !6733, file: !3, line: 4623, type: !1893)
!6737 = !DILocation(line: 4623, column: 23, scope: !6733)
!6738 = !DILocalVariable(name: "e", scope: !6733, file: !3, line: 4625, type: !3111)
!6739 = !DILocation(line: 4625, column: 18, scope: !6733)
!6740 = !DILocalVariable(name: "slot", scope: !6733, file: !3, line: 4626, type: !2384)
!6741 = !DILocation(line: 4626, column: 10, scope: !6733)
!6742 = !DILocation(line: 4627, column: 8, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6733, file: !3, line: 4627, column: 7)
!6744 = !DILocation(line: 4627, column: 7, scope: !6733)
!6745 = !DILocation(line: 4628, column: 5, scope: !6743)
!6746 = !DILocation(line: 4629, column: 15, scope: !6733)
!6747 = !DILocation(line: 4629, column: 5, scope: !6733)
!6748 = !DILocation(line: 4629, column: 13, scope: !6733)
!6749 = !DILocation(line: 4630, column: 26, scope: !6733)
!6750 = !DILocation(line: 4630, column: 42, scope: !6733)
!6751 = !DILocation(line: 4630, column: 10, scope: !6733)
!6752 = !DILocation(line: 4630, column: 8, scope: !6733)
!6753 = !DILocation(line: 4631, column: 8, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6733, file: !3, line: 4631, column: 7)
!6755 = !DILocation(line: 4631, column: 13, scope: !6754)
!6756 = !DILocation(line: 4631, column: 36, scope: !6754)
!6757 = !DILocation(line: 4631, column: 35, scope: !6754)
!6758 = !DILocation(line: 4631, column: 17, scope: !6754)
!6759 = !DILocation(line: 4631, column: 43, scope: !6754)
!6760 = !DILocation(line: 4631, column: 16, scope: !6754)
!6761 = !DILocation(line: 4631, column: 7, scope: !6733)
!6762 = !DILocation(line: 4632, column: 5, scope: !6754)
!6763 = !DILocation(line: 4633, column: 30, scope: !6733)
!6764 = !DILocation(line: 4633, column: 29, scope: !6733)
!6765 = !DILocation(line: 4633, column: 10, scope: !6733)
!6766 = !DILocation(line: 4633, column: 3, scope: !6733)
!6767 = !DILocation(line: 4634, column: 1, scope: !6733)
!6768 = distinct !DISubprogram(name: "hash_expr", scope: !3, file: !3, line: 1049, type: !6769, scopeLine: 1051, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6769 = !DISubroutineType(types: !6770)
!6770 = !{!9, !3232, !7, !6771, !1917}
!6771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1917, size: 64)
!6772 = !DILocalVariable(name: "x", arg: 1, scope: !6768, file: !3, line: 1049, type: !3232)
!6773 = !DILocation(line: 1049, column: 22, scope: !6768)
!6774 = !DILocalVariable(name: "mode", arg: 2, scope: !6768, file: !3, line: 1049, type: !7)
!6775 = !DILocation(line: 1049, column: 43, scope: !6768)
!6776 = !DILocalVariable(name: "do_not_record_p", arg: 3, scope: !6768, file: !3, line: 1049, type: !6771)
!6777 = !DILocation(line: 1049, column: 54, scope: !6768)
!6778 = !DILocalVariable(name: "hash_table_size", arg: 4, scope: !6768, file: !3, line: 1050, type: !1917)
!6779 = !DILocation(line: 1050, column: 9, scope: !6768)
!6780 = !DILocalVariable(name: "hash", scope: !6768, file: !3, line: 1052, type: !9)
!6781 = !DILocation(line: 1052, column: 16, scope: !6768)
!6782 = !DILocation(line: 1054, column: 4, scope: !6768)
!6783 = !DILocation(line: 1054, column: 20, scope: !6768)
!6784 = !DILocation(line: 1056, column: 20, scope: !6768)
!6785 = !DILocation(line: 1056, column: 23, scope: !6768)
!6786 = !DILocation(line: 1056, column: 29, scope: !6768)
!6787 = !DILocation(line: 1056, column: 10, scope: !6768)
!6788 = !DILocation(line: 1056, column: 8, scope: !6768)
!6789 = !DILocation(line: 1058, column: 10, scope: !6768)
!6790 = !DILocation(line: 1058, column: 17, scope: !6768)
!6791 = !DILocation(line: 1058, column: 15, scope: !6768)
!6792 = !DILocation(line: 1058, column: 3, scope: !6768)
!6793 = distinct !DISubprogram(name: "gcse_alloc", scope: !3, file: !3, line: 615, type: !6794, scopeLine: 616, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6794 = !DISubroutineType(types: !6795)
!6795 = !{!1887, !1988}
!6796 = !DILocalVariable(name: "size", arg: 1, scope: !6793, file: !3, line: 615, type: !1988)
!6797 = !DILocation(line: 615, column: 27, scope: !6793)
!6798 = !DILocation(line: 617, column: 17, scope: !6793)
!6799 = !DILocation(line: 617, column: 14, scope: !6793)
!6800 = !DILocation(line: 618, column: 10, scope: !6793)
!6801 = !DILocation(line: 618, column: 3, scope: !6793)
!6802 = distinct !DISubprogram(name: "hash_set", scope: !3, file: !3, line: 1069, type: !6803, scopeLine: 1070, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6803 = !DISubroutineType(types: !6804)
!6804 = !{!9, !1917, !1917}
!6805 = !DILocalVariable(name: "regno", arg: 1, scope: !6802, file: !3, line: 1069, type: !1917)
!6806 = !DILocation(line: 1069, column: 15, scope: !6802)
!6807 = !DILocalVariable(name: "hash_table_size", arg: 2, scope: !6802, file: !3, line: 1069, type: !1917)
!6808 = !DILocation(line: 1069, column: 26, scope: !6802)
!6809 = !DILocalVariable(name: "hash", scope: !6802, file: !3, line: 1071, type: !9)
!6810 = !DILocation(line: 1071, column: 16, scope: !6802)
!6811 = !DILocation(line: 1073, column: 10, scope: !6802)
!6812 = !DILocation(line: 1073, column: 8, scope: !6802)
!6813 = !DILocation(line: 1074, column: 10, scope: !6802)
!6814 = !DILocation(line: 1074, column: 17, scope: !6802)
!6815 = !DILocation(line: 1074, column: 15, scope: !6802)
!6816 = !DILocation(line: 1074, column: 3, scope: !6802)
!6817 = distinct !DISubprogram(name: "hash_scan_clobber", scope: !3, file: !3, line: 1436, type: !5502, scopeLine: 1438, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6818 = !DILocalVariable(name: "x", arg: 1, scope: !6817, file: !3, line: 1436, type: !1893)
!6819 = !DILocation(line: 1436, column: 24, scope: !6817)
!6820 = !DILocalVariable(name: "insn", arg: 2, scope: !6817, file: !3, line: 1436, type: !1893)
!6821 = !DILocation(line: 1436, column: 48, scope: !6817)
!6822 = !DILocalVariable(name: "table", arg: 3, scope: !6817, file: !3, line: 1437, type: !3824)
!6823 = !DILocation(line: 1437, column: 27, scope: !6817)
!6824 = !DILocation(line: 1440, column: 1, scope: !6817)
!6825 = distinct !DISubprogram(name: "compute_local_properties", scope: !3, file: !3, line: 676, type: !6826, scopeLine: 678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6826 = !DISubroutineType(types: !6827)
!6827 = !{null, !3243, !3243, !3243, !3824}
!6828 = !DILocalVariable(name: "transp", arg: 1, scope: !6825, file: !3, line: 676, type: !3243)
!6829 = !DILocation(line: 676, column: 36, scope: !6825)
!6830 = !DILocalVariable(name: "comp", arg: 2, scope: !6825, file: !3, line: 676, type: !3243)
!6831 = !DILocation(line: 676, column: 53, scope: !6825)
!6832 = !DILocalVariable(name: "antloc", arg: 3, scope: !6825, file: !3, line: 676, type: !3243)
!6833 = !DILocation(line: 676, column: 68, scope: !6825)
!6834 = !DILocalVariable(name: "table", arg: 4, scope: !6825, file: !3, line: 677, type: !3824)
!6835 = !DILocation(line: 677, column: 27, scope: !6825)
!6836 = !DILocalVariable(name: "i", scope: !6825, file: !3, line: 679, type: !9)
!6837 = !DILocation(line: 679, column: 16, scope: !6825)
!6838 = !DILocation(line: 682, column: 7, scope: !6839)
!6839 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 682, column: 7)
!6840 = !DILocation(line: 682, column: 7, scope: !6825)
!6841 = !DILocation(line: 684, column: 11, scope: !6842)
!6842 = distinct !DILexicalBlock(scope: !6843, file: !3, line: 684, column: 11)
!6843 = distinct !DILexicalBlock(scope: !6839, file: !3, line: 683, column: 5)
!6844 = !DILocation(line: 684, column: 18, scope: !6842)
!6845 = !DILocation(line: 684, column: 11, scope: !6843)
!6846 = !DILocation(line: 685, column: 23, scope: !6842)
!6847 = !DILocation(line: 685, column: 31, scope: !6842)
!6848 = !DILocation(line: 685, column: 2, scope: !6842)
!6849 = !DILocation(line: 687, column: 23, scope: !6842)
!6850 = !DILocation(line: 687, column: 31, scope: !6842)
!6851 = !DILocation(line: 687, column: 2, scope: !6842)
!6852 = !DILocation(line: 688, column: 5, scope: !6843)
!6853 = !DILocation(line: 690, column: 7, scope: !6854)
!6854 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 690, column: 7)
!6855 = !DILocation(line: 690, column: 7, scope: !6825)
!6856 = !DILocation(line: 691, column: 26, scope: !6854)
!6857 = !DILocation(line: 691, column: 32, scope: !6854)
!6858 = !DILocation(line: 691, column: 5, scope: !6854)
!6859 = !DILocation(line: 692, column: 7, scope: !6860)
!6860 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 692, column: 7)
!6861 = !DILocation(line: 692, column: 7, scope: !6825)
!6862 = !DILocation(line: 693, column: 26, scope: !6860)
!6863 = !DILocation(line: 693, column: 34, scope: !6860)
!6864 = !DILocation(line: 693, column: 5, scope: !6860)
!6865 = !DILocation(line: 695, column: 10, scope: !6866)
!6866 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 695, column: 3)
!6867 = !DILocation(line: 695, column: 8, scope: !6866)
!6868 = !DILocation(line: 695, column: 15, scope: !6869)
!6869 = distinct !DILexicalBlock(scope: !6866, file: !3, line: 695, column: 3)
!6870 = !DILocation(line: 695, column: 19, scope: !6869)
!6871 = !DILocation(line: 695, column: 26, scope: !6869)
!6872 = !DILocation(line: 695, column: 17, scope: !6869)
!6873 = !DILocation(line: 695, column: 3, scope: !6866)
!6874 = !DILocalVariable(name: "expr", scope: !6875, file: !3, line: 697, type: !3086)
!6875 = distinct !DILexicalBlock(scope: !6869, file: !3, line: 696, column: 5)
!6876 = !DILocation(line: 697, column: 20, scope: !6875)
!6877 = !DILocation(line: 699, column: 19, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6875, file: !3, line: 699, column: 7)
!6879 = !DILocation(line: 699, column: 26, scope: !6878)
!6880 = !DILocation(line: 699, column: 32, scope: !6878)
!6881 = !DILocation(line: 699, column: 17, scope: !6878)
!6882 = !DILocation(line: 699, column: 12, scope: !6878)
!6883 = !DILocation(line: 699, column: 36, scope: !6884)
!6884 = distinct !DILexicalBlock(scope: !6878, file: !3, line: 699, column: 7)
!6885 = !DILocation(line: 699, column: 41, scope: !6884)
!6886 = !DILocation(line: 699, column: 7, scope: !6878)
!6887 = !DILocalVariable(name: "indx", scope: !6888, file: !3, line: 701, type: !1917)
!6888 = distinct !DILexicalBlock(scope: !6884, file: !3, line: 700, column: 2)
!6889 = !DILocation(line: 701, column: 8, scope: !6888)
!6890 = !DILocation(line: 701, column: 15, scope: !6888)
!6891 = !DILocation(line: 701, column: 21, scope: !6888)
!6892 = !DILocalVariable(name: "occr", scope: !6888, file: !3, line: 702, type: !3093)
!6893 = !DILocation(line: 702, column: 17, scope: !6888)
!6894 = !DILocation(line: 707, column: 8, scope: !6895)
!6895 = distinct !DILexicalBlock(scope: !6888, file: !3, line: 707, column: 8)
!6896 = !DILocation(line: 707, column: 8, scope: !6888)
!6897 = !DILocation(line: 708, column: 22, scope: !6895)
!6898 = !DILocation(line: 708, column: 28, scope: !6895)
!6899 = !DILocation(line: 708, column: 34, scope: !6895)
!6900 = !DILocation(line: 708, column: 40, scope: !6895)
!6901 = !DILocation(line: 708, column: 48, scope: !6895)
!6902 = !DILocation(line: 708, column: 55, scope: !6895)
!6903 = !DILocation(line: 708, column: 6, scope: !6895)
!6904 = !DILocation(line: 712, column: 8, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6888, file: !3, line: 712, column: 8)
!6906 = !DILocation(line: 712, column: 8, scope: !6888)
!6907 = !DILocation(line: 713, column: 18, scope: !6908)
!6908 = distinct !DILexicalBlock(scope: !6905, file: !3, line: 713, column: 6)
!6909 = !DILocation(line: 713, column: 24, scope: !6908)
!6910 = !DILocation(line: 713, column: 16, scope: !6908)
!6911 = !DILocation(line: 713, column: 11, scope: !6908)
!6912 = !DILocation(line: 713, column: 36, scope: !6913)
!6913 = distinct !DILexicalBlock(scope: !6908, file: !3, line: 713, column: 6)
!6914 = !DILocation(line: 713, column: 41, scope: !6913)
!6915 = !DILocation(line: 713, column: 6, scope: !6908)
!6916 = !DILocation(line: 715, column: 12, scope: !6917)
!6917 = distinct !DILexicalBlock(scope: !6913, file: !3, line: 714, column: 8)
!6918 = !DILocation(line: 715, column: 19, scope: !6917)
!6919 = !DILocation(line: 715, column: 48, scope: !6917)
!6920 = !DILocation(line: 715, column: 56, scope: !6917)
!6921 = !DILocation(line: 715, column: 3, scope: !6917)
!6922 = !DILocation(line: 719, column: 3, scope: !6917)
!6923 = !DILocation(line: 719, column: 9, scope: !6917)
!6924 = !DILocation(line: 719, column: 19, scope: !6917)
!6925 = !DILocation(line: 720, column: 8, scope: !6917)
!6926 = !DILocation(line: 713, column: 57, scope: !6913)
!6927 = !DILocation(line: 713, column: 63, scope: !6913)
!6928 = !DILocation(line: 713, column: 55, scope: !6913)
!6929 = !DILocation(line: 713, column: 6, scope: !6913)
!6930 = distinct !{!6930, !6915, !6931}
!6931 = !DILocation(line: 720, column: 8, scope: !6908)
!6932 = !DILocation(line: 724, column: 8, scope: !6933)
!6933 = distinct !DILexicalBlock(scope: !6888, file: !3, line: 724, column: 8)
!6934 = !DILocation(line: 724, column: 8, scope: !6888)
!6935 = !DILocation(line: 725, column: 18, scope: !6936)
!6936 = distinct !DILexicalBlock(scope: !6933, file: !3, line: 725, column: 6)
!6937 = !DILocation(line: 725, column: 24, scope: !6936)
!6938 = !DILocation(line: 725, column: 16, scope: !6936)
!6939 = !DILocation(line: 725, column: 11, scope: !6936)
!6940 = !DILocation(line: 725, column: 36, scope: !6941)
!6941 = distinct !DILexicalBlock(scope: !6936, file: !3, line: 725, column: 6)
!6942 = !DILocation(line: 725, column: 41, scope: !6941)
!6943 = !DILocation(line: 725, column: 6, scope: !6936)
!6944 = !DILocation(line: 727, column: 12, scope: !6945)
!6945 = distinct !DILexicalBlock(scope: !6941, file: !3, line: 726, column: 8)
!6946 = !DILocation(line: 727, column: 17, scope: !6945)
!6947 = !DILocation(line: 727, column: 46, scope: !6945)
!6948 = !DILocation(line: 727, column: 54, scope: !6945)
!6949 = !DILocation(line: 727, column: 3, scope: !6945)
!6950 = !DILocation(line: 731, column: 3, scope: !6945)
!6951 = !DILocation(line: 731, column: 9, scope: !6945)
!6952 = !DILocation(line: 731, column: 18, scope: !6945)
!6953 = !DILocation(line: 732, column: 8, scope: !6945)
!6954 = !DILocation(line: 725, column: 57, scope: !6941)
!6955 = !DILocation(line: 725, column: 63, scope: !6941)
!6956 = !DILocation(line: 725, column: 55, scope: !6941)
!6957 = !DILocation(line: 725, column: 6, scope: !6941)
!6958 = distinct !{!6958, !6943, !6959}
!6959 = !DILocation(line: 732, column: 8, scope: !6936)
!6960 = !DILocation(line: 736, column: 4, scope: !6888)
!6961 = !DILocation(line: 736, column: 10, scope: !6888)
!6962 = !DILocation(line: 736, column: 23, scope: !6888)
!6963 = !DILocation(line: 737, column: 2, scope: !6888)
!6964 = !DILocation(line: 699, column: 57, scope: !6884)
!6965 = !DILocation(line: 699, column: 63, scope: !6884)
!6966 = !DILocation(line: 699, column: 55, scope: !6884)
!6967 = !DILocation(line: 699, column: 7, scope: !6884)
!6968 = distinct !{!6968, !6886, !6969}
!6969 = !DILocation(line: 737, column: 2, scope: !6878)
!6970 = !DILocation(line: 738, column: 5, scope: !6875)
!6971 = !DILocation(line: 695, column: 33, scope: !6869)
!6972 = !DILocation(line: 695, column: 3, scope: !6869)
!6973 = distinct !{!6973, !6873, !6974}
!6974 = !DILocation(line: 738, column: 5, scope: !6866)
!6975 = !DILocation(line: 739, column: 1, scope: !6825)
!6976 = distinct !DISubprogram(name: "compute_transp", scope: !3, file: !3, line: 2028, type: !6977, scopeLine: 2029, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!6977 = !DISubroutineType(types: !6978)
!6978 = !{null, !3232, !1917, !3243, !1917}
!6979 = !DILocalVariable(name: "x", arg: 1, scope: !6976, file: !3, line: 2028, type: !3232)
!6980 = !DILocation(line: 2028, column: 27, scope: !6976)
!6981 = !DILocalVariable(name: "indx", arg: 2, scope: !6976, file: !3, line: 2028, type: !1917)
!6982 = !DILocation(line: 2028, column: 34, scope: !6976)
!6983 = !DILocalVariable(name: "bmap", arg: 3, scope: !6976, file: !3, line: 2028, type: !3243)
!6984 = !DILocation(line: 2028, column: 49, scope: !6976)
!6985 = !DILocalVariable(name: "set_p", arg: 4, scope: !6976, file: !3, line: 2028, type: !1917)
!6986 = !DILocation(line: 2028, column: 59, scope: !6976)
!6987 = !DILocalVariable(name: "i", scope: !6976, file: !3, line: 2030, type: !1917)
!6988 = !DILocation(line: 2030, column: 7, scope: !6976)
!6989 = !DILocalVariable(name: "j", scope: !6976, file: !3, line: 2030, type: !1917)
!6990 = !DILocation(line: 2030, column: 10, scope: !6976)
!6991 = !DILocalVariable(name: "code", scope: !6976, file: !3, line: 2031, type: !388)
!6992 = !DILocation(line: 2031, column: 17, scope: !6976)
!6993 = !DILocalVariable(name: "fmt", scope: !6976, file: !3, line: 2032, type: !1920)
!6994 = !DILocation(line: 2032, column: 15, scope: !6976)
!6995 = !DILocation(line: 2032, column: 3, scope: !6976)
!6996 = !DILabel(scope: !6976, name: "repeat", file: !3, line: 2036)
!6997 = !DILocation(line: 2036, column: 2, scope: !6976)
!6998 = !DILocation(line: 2038, column: 7, scope: !6999)
!6999 = distinct !DILexicalBlock(scope: !6976, file: !3, line: 2038, column: 7)
!7000 = !DILocation(line: 2038, column: 9, scope: !6999)
!7001 = !DILocation(line: 2038, column: 7, scope: !6976)
!7002 = !DILocation(line: 2039, column: 5, scope: !6999)
!7003 = !DILocation(line: 2041, column: 10, scope: !6976)
!7004 = !DILocation(line: 2041, column: 8, scope: !6976)
!7005 = !DILocation(line: 2042, column: 11, scope: !6976)
!7006 = !DILocation(line: 2042, column: 3, scope: !6976)
!7007 = !DILocation(line: 2045, column: 11, scope: !7008)
!7008 = distinct !DILexicalBlock(scope: !7009, file: !3, line: 2045, column: 11)
!7009 = distinct !DILexicalBlock(scope: !6976, file: !3, line: 2043, column: 5)
!7010 = !DILocation(line: 2045, column: 11, scope: !7009)
!7011 = !DILocalVariable(name: "def", scope: !7012, file: !3, line: 2047, type: !7013)
!7012 = distinct !DILexicalBlock(scope: !7008, file: !3, line: 2046, column: 2)
!7013 = !DIDerivedType(tag: DW_TAG_typedef, name: "df_ref", file: !779, line: 429, baseType: !7014)
!7014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7015, size: 64)
!7015 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "df_ref_d", file: !779, line: 422, size: 704, elements: !7016)
!7016 = !{!7017, !7056, !7061, !7066}
!7017 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7015, file: !779, line: 424, baseType: !7018, size: 512)
!7018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_base_ref", file: !779, line: 356, size: 512, elements: !7019)
!7019 = !{!7020, !7021, !7022, !7023, !7024, !7030, !7051, !7052, !7053, !7054, !7055}
!7020 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !7018, file: !779, line: 360, baseType: !9, size: 8, flags: DIFlagBitField, extraData: i64 0)
!7021 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !7018, file: !779, line: 362, baseType: !9, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!7022 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !7018, file: !779, line: 364, baseType: !1917, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!7023 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !7018, file: !779, line: 365, baseType: !1893, size: 64, offset: 64)
!7024 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !7018, file: !779, line: 366, baseType: !7025, size: 64, offset: 128)
!7025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7026, size: 64)
!7026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_link", file: !779, line: 449, size: 128, elements: !7027)
!7027 = !{!7028, !7029}
!7028 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !7026, file: !779, line: 451, baseType: !7013, size: 64)
!7029 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7026, file: !779, line: 452, baseType: !7025, size: 64, offset: 64)
!7030 = !DIDerivedType(tag: DW_TAG_member, name: "insn_info", scope: !7018, file: !779, line: 370, baseType: !7031, size: 64, offset: 192)
!7031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7032, size: 64)
!7032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_insn_info", file: !779, line: 433, size: 384, elements: !7033)
!7033 = !{!7034, !7035, !7037, !7038, !7039, !7050}
!7034 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !7032, file: !779, line: 435, baseType: !1893, size: 64)
!7035 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !7032, file: !779, line: 436, baseType: !7036, size: 64, offset: 64)
!7036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7013, size: 64)
!7037 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !7032, file: !779, line: 437, baseType: !7036, size: 64, offset: 128)
!7038 = !DIDerivedType(tag: DW_TAG_member, name: "eq_uses", scope: !7032, file: !779, line: 439, baseType: !7036, size: 64, offset: 192)
!7039 = !DIDerivedType(tag: DW_TAG_member, name: "mw_hardregs", scope: !7032, file: !779, line: 440, baseType: !7040, size: 64, offset: 256)
!7040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7041, size: 64)
!7041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7042, size: 64)
!7042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_mw_hardreg", file: !779, line: 339, size: 192, elements: !7043)
!7043 = !{!7044, !7045, !7046, !7047, !7048, !7049}
!7044 = !DIDerivedType(tag: DW_TAG_member, name: "mw_reg", scope: !7042, file: !779, line: 341, baseType: !1893, size: 64)
!7045 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !7042, file: !779, line: 344, baseType: !9, size: 16, offset: 64, flags: DIFlagBitField, extraData: i64 64)
!7046 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !7042, file: !779, line: 346, baseType: !1917, size: 16, offset: 80, flags: DIFlagBitField, extraData: i64 64)
!7047 = !DIDerivedType(tag: DW_TAG_member, name: "start_regno", scope: !7042, file: !779, line: 347, baseType: !9, size: 32, offset: 96)
!7048 = !DIDerivedType(tag: DW_TAG_member, name: "end_regno", scope: !7042, file: !779, line: 348, baseType: !9, size: 32, offset: 128)
!7049 = !DIDerivedType(tag: DW_TAG_member, name: "mw_order", scope: !7042, file: !779, line: 349, baseType: !9, size: 32, offset: 160)
!7050 = !DIDerivedType(tag: DW_TAG_member, name: "luid", scope: !7032, file: !779, line: 444, baseType: !1917, size: 32, offset: 320)
!7051 = !DIDerivedType(tag: DW_TAG_member, name: "next_reg", scope: !7018, file: !779, line: 374, baseType: !7014, size: 64, offset: 256)
!7052 = !DIDerivedType(tag: DW_TAG_member, name: "prev_reg", scope: !7018, file: !779, line: 375, baseType: !7014, size: 64, offset: 320)
!7053 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !7018, file: !779, line: 376, baseType: !9, size: 32, offset: 384)
!7054 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !7018, file: !779, line: 379, baseType: !1917, size: 32, offset: 416)
!7055 = !DIDerivedType(tag: DW_TAG_member, name: "ref_order", scope: !7018, file: !779, line: 382, baseType: !9, size: 32, offset: 448)
!7056 = !DIDerivedType(tag: DW_TAG_member, name: "regular_ref", scope: !7015, file: !779, line: 425, baseType: !7057, size: 576)
!7057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_regular_ref", file: !779, line: 398, size: 576, elements: !7058)
!7058 = !{!7059, !7060}
!7059 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7057, file: !779, line: 400, baseType: !7018, size: 512)
!7060 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !7057, file: !779, line: 405, baseType: !1892, size: 64, offset: 512)
!7061 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_ref", scope: !7015, file: !779, line: 426, baseType: !7062, size: 576)
!7062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_artificial_ref", file: !779, line: 388, size: 576, elements: !7063)
!7063 = !{!7064, !7065}
!7064 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7062, file: !779, line: 390, baseType: !7018, size: 512)
!7065 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !7062, file: !779, line: 394, baseType: !2448, size: 64, offset: 512)
!7066 = !DIDerivedType(tag: DW_TAG_member, name: "extract_ref", scope: !7015, file: !779, line: 427, baseType: !7067, size: 704)
!7067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_extract_ref", file: !779, line: 413, size: 704, elements: !7068)
!7068 = !{!7069, !7070, !7071, !7072}
!7069 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7067, file: !779, line: 415, baseType: !7057, size: 576)
!7070 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !7067, file: !779, line: 416, baseType: !1917, size: 32, offset: 576)
!7071 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !7067, file: !779, line: 417, baseType: !1917, size: 32, offset: 608)
!7072 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !7067, file: !779, line: 418, baseType: !7, size: 32, offset: 640)
!7073 = !DILocation(line: 2047, column: 11, scope: !7012)
!7074 = !DILocation(line: 2048, column: 15, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !7012, file: !3, line: 2048, column: 4)
!7076 = !DILocation(line: 2048, column: 13, scope: !7075)
!7077 = !DILocation(line: 2048, column: 9, scope: !7075)
!7078 = !DILocation(line: 2049, column: 9, scope: !7079)
!7079 = distinct !DILexicalBlock(scope: !7075, file: !3, line: 2048, column: 4)
!7080 = !DILocation(line: 2048, column: 4, scope: !7075)
!7081 = !DILocation(line: 2051, column: 15, scope: !7079)
!7082 = !DILocation(line: 2051, column: 20, scope: !7079)
!7083 = !DILocation(line: 2051, column: 37, scope: !7079)
!7084 = !DILocation(line: 2051, column: 45, scope: !7079)
!7085 = !DILocation(line: 2051, column: 6, scope: !7079)
!7086 = !DILocation(line: 2050, column: 15, scope: !7079)
!7087 = !DILocation(line: 2050, column: 13, scope: !7079)
!7088 = !DILocation(line: 2048, column: 4, scope: !7079)
!7089 = distinct !{!7089, !7080, !7090}
!7090 = !DILocation(line: 2051, column: 49, scope: !7075)
!7091 = !DILocation(line: 2052, column: 2, scope: !7012)
!7092 = !DILocalVariable(name: "def", scope: !7093, file: !3, line: 2055, type: !7013)
!7093 = distinct !DILexicalBlock(scope: !7008, file: !3, line: 2054, column: 2)
!7094 = !DILocation(line: 2055, column: 11, scope: !7093)
!7095 = !DILocation(line: 2056, column: 15, scope: !7096)
!7096 = distinct !DILexicalBlock(scope: !7093, file: !3, line: 2056, column: 4)
!7097 = !DILocation(line: 2056, column: 13, scope: !7096)
!7098 = !DILocation(line: 2056, column: 9, scope: !7096)
!7099 = !DILocation(line: 2057, column: 9, scope: !7100)
!7100 = distinct !DILexicalBlock(scope: !7096, file: !3, line: 2056, column: 4)
!7101 = !DILocation(line: 2056, column: 4, scope: !7096)
!7102 = !DILocation(line: 2059, column: 17, scope: !7100)
!7103 = !DILocation(line: 2059, column: 22, scope: !7100)
!7104 = !DILocation(line: 2059, column: 39, scope: !7100)
!7105 = !DILocation(line: 2059, column: 47, scope: !7100)
!7106 = !DILocation(line: 2059, column: 6, scope: !7100)
!7107 = !DILocation(line: 2058, column: 15, scope: !7100)
!7108 = !DILocation(line: 2058, column: 13, scope: !7100)
!7109 = !DILocation(line: 2056, column: 4, scope: !7100)
!7110 = distinct !{!7110, !7101, !7111}
!7111 = !DILocation(line: 2059, column: 51, scope: !7096)
!7112 = !DILocation(line: 2062, column: 7, scope: !7009)
!7113 = !DILocation(line: 2065, column: 13, scope: !7114)
!7114 = distinct !DILexicalBlock(scope: !7009, file: !3, line: 2065, column: 11)
!7115 = !DILocation(line: 2065, column: 11, scope: !7009)
!7116 = !DILocalVariable(name: "bi", scope: !7117, file: !3, line: 2067, type: !5392)
!7117 = distinct !DILexicalBlock(scope: !7114, file: !3, line: 2066, column: 2)
!7118 = !DILocation(line: 2067, column: 20, scope: !7117)
!7119 = !DILocalVariable(name: "bb_index", scope: !7117, file: !3, line: 2068, type: !9)
!7120 = !DILocation(line: 2068, column: 13, scope: !7117)
!7121 = !DILocation(line: 2072, column: 4, scope: !7122)
!7122 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 2072, column: 4)
!7123 = !DILocation(line: 2072, column: 4, scope: !7124)
!7124 = distinct !DILexicalBlock(scope: !7122, file: !3, line: 2072, column: 4)
!7125 = !DILocation(line: 2074, column: 12, scope: !7126)
!7126 = distinct !DILexicalBlock(scope: !7127, file: !3, line: 2074, column: 12)
!7127 = distinct !DILexicalBlock(scope: !7124, file: !3, line: 2073, column: 6)
!7128 = !DILocation(line: 2074, column: 12, scope: !7127)
!7129 = !DILocation(line: 2075, column: 12, scope: !7126)
!7130 = !DILocation(line: 2075, column: 17, scope: !7126)
!7131 = !DILocation(line: 2075, column: 28, scope: !7126)
!7132 = !DILocation(line: 2075, column: 3, scope: !7126)
!7133 = !DILocation(line: 2077, column: 14, scope: !7126)
!7134 = !DILocation(line: 2077, column: 19, scope: !7126)
!7135 = !DILocation(line: 2077, column: 30, scope: !7126)
!7136 = !DILocation(line: 2077, column: 3, scope: !7126)
!7137 = !DILocation(line: 2078, column: 6, scope: !7127)
!7138 = distinct !{!7138, !7121, !7139}
!7139 = !DILocation(line: 2078, column: 6, scope: !7122)
!7140 = !DILocation(line: 2082, column: 6, scope: !7141)
!7141 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 2082, column: 6)
!7142 = !DILocation(line: 2082, column: 6, scope: !7143)
!7143 = distinct !DILexicalBlock(scope: !7141, file: !3, line: 2082, column: 6)
!7144 = !DILocalVariable(name: "list_entry", scope: !7145, file: !3, line: 2086, type: !1893)
!7145 = distinct !DILexicalBlock(scope: !7143, file: !3, line: 2085, column: 8)
!7146 = !DILocation(line: 2086, column: 7, scope: !7145)
!7147 = !DILocation(line: 2086, column: 20, scope: !7145)
!7148 = !DILocation(line: 2086, column: 42, scope: !7145)
!7149 = !DILocation(line: 2088, column: 3, scope: !7145)
!7150 = !DILocation(line: 2088, column: 10, scope: !7145)
!7151 = !DILocalVariable(name: "dest", scope: !7152, file: !3, line: 2090, type: !1893)
!7152 = distinct !DILexicalBlock(scope: !7145, file: !3, line: 2089, column: 5)
!7153 = !DILocation(line: 2090, column: 11, scope: !7152)
!7154 = !DILocalVariable(name: "dest_addr", scope: !7152, file: !3, line: 2090, type: !1893)
!7155 = !DILocation(line: 2090, column: 17, scope: !7152)
!7156 = !DILocation(line: 2095, column: 14, scope: !7152)
!7157 = !DILocation(line: 2095, column: 12, scope: !7152)
!7158 = !DILocation(line: 2096, column: 20, scope: !7152)
!7159 = !DILocation(line: 2096, column: 18, scope: !7152)
!7160 = !DILocation(line: 2097, column: 19, scope: !7152)
!7161 = !DILocation(line: 2097, column: 17, scope: !7152)
!7162 = !DILocation(line: 2099, column: 34, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7152, file: !3, line: 2099, column: 11)
!7164 = !DILocation(line: 2099, column: 40, scope: !7163)
!7165 = !DILocation(line: 2099, column: 57, scope: !7163)
!7166 = !DILocation(line: 2100, column: 13, scope: !7163)
!7167 = !DILocation(line: 2099, column: 11, scope: !7163)
!7168 = !DILocation(line: 2099, column: 11, scope: !7152)
!7169 = !DILocation(line: 2102, column: 8, scope: !7170)
!7170 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 2102, column: 8)
!7171 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 2101, column: 9)
!7172 = !DILocation(line: 2102, column: 8, scope: !7171)
!7173 = !DILocation(line: 2103, column: 15, scope: !7170)
!7174 = !DILocation(line: 2103, column: 20, scope: !7170)
!7175 = !DILocation(line: 2103, column: 31, scope: !7170)
!7176 = !DILocation(line: 2103, column: 6, scope: !7170)
!7177 = !DILocation(line: 2105, column: 17, scope: !7170)
!7178 = !DILocation(line: 2105, column: 22, scope: !7170)
!7179 = !DILocation(line: 2105, column: 33, scope: !7170)
!7180 = !DILocation(line: 2105, column: 6, scope: !7170)
!7181 = !DILocation(line: 2106, column: 4, scope: !7171)
!7182 = !DILocation(line: 2108, column: 20, scope: !7152)
!7183 = !DILocation(line: 2108, column: 18, scope: !7152)
!7184 = distinct !{!7184, !7149, !7185}
!7185 = !DILocation(line: 2109, column: 12, scope: !7145)
!7186 = !DILocation(line: 2110, column: 8, scope: !7145)
!7187 = distinct !{!7187, !7140, !7188}
!7188 = !DILocation(line: 2110, column: 8, scope: !7141)
!7189 = !DILocation(line: 2111, column: 2, scope: !7117)
!7190 = !DILocation(line: 2113, column: 11, scope: !7009)
!7191 = !DILocation(line: 2113, column: 9, scope: !7009)
!7192 = !DILocation(line: 2114, column: 7, scope: !7009)
!7193 = !DILocation(line: 2127, column: 7, scope: !7009)
!7194 = !DILocation(line: 2130, column: 7, scope: !7009)
!7195 = !DILocation(line: 2133, column: 12, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !6976, file: !3, line: 2133, column: 3)
!7197 = !DILocation(line: 2133, column: 34, scope: !7196)
!7198 = !DILocation(line: 2133, column: 10, scope: !7196)
!7199 = !DILocation(line: 2133, column: 45, scope: !7196)
!7200 = !DILocation(line: 2133, column: 43, scope: !7196)
!7201 = !DILocation(line: 2133, column: 8, scope: !7196)
!7202 = !DILocation(line: 2133, column: 68, scope: !7203)
!7203 = distinct !DILexicalBlock(scope: !7196, file: !3, line: 2133, column: 3)
!7204 = !DILocation(line: 2133, column: 70, scope: !7203)
!7205 = !DILocation(line: 2133, column: 3, scope: !7196)
!7206 = !DILocation(line: 2135, column: 11, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7208, file: !3, line: 2135, column: 11)
!7208 = distinct !DILexicalBlock(scope: !7203, file: !3, line: 2134, column: 5)
!7209 = !DILocation(line: 2135, column: 15, scope: !7207)
!7210 = !DILocation(line: 2135, column: 18, scope: !7207)
!7211 = !DILocation(line: 2135, column: 11, scope: !7208)
!7212 = !DILocation(line: 2140, column: 8, scope: !7213)
!7213 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 2140, column: 8)
!7214 = distinct !DILexicalBlock(scope: !7207, file: !3, line: 2136, column: 2)
!7215 = !DILocation(line: 2140, column: 10, scope: !7213)
!7216 = !DILocation(line: 2140, column: 8, scope: !7214)
!7217 = !DILocation(line: 2142, column: 12, scope: !7218)
!7218 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 2141, column: 6)
!7219 = !DILocation(line: 2142, column: 10, scope: !7218)
!7220 = !DILocation(line: 2143, column: 8, scope: !7218)
!7221 = !DILocation(line: 2146, column: 20, scope: !7214)
!7222 = !DILocation(line: 2146, column: 33, scope: !7214)
!7223 = !DILocation(line: 2146, column: 39, scope: !7214)
!7224 = !DILocation(line: 2146, column: 45, scope: !7214)
!7225 = !DILocation(line: 2146, column: 4, scope: !7214)
!7226 = !DILocation(line: 2147, column: 2, scope: !7214)
!7227 = !DILocation(line: 2148, column: 16, scope: !7228)
!7228 = distinct !DILexicalBlock(scope: !7207, file: !3, line: 2148, column: 16)
!7229 = !DILocation(line: 2148, column: 20, scope: !7228)
!7230 = !DILocation(line: 2148, column: 23, scope: !7228)
!7231 = !DILocation(line: 2148, column: 16, scope: !7207)
!7232 = !DILocation(line: 2149, column: 9, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !7228, file: !3, line: 2149, column: 2)
!7234 = !DILocation(line: 2149, column: 7, scope: !7233)
!7235 = !DILocation(line: 2149, column: 14, scope: !7236)
!7236 = distinct !DILexicalBlock(scope: !7233, file: !3, line: 2149, column: 2)
!7237 = !DILocation(line: 2149, column: 18, scope: !7236)
!7238 = !DILocation(line: 2149, column: 16, scope: !7236)
!7239 = !DILocation(line: 2149, column: 2, scope: !7233)
!7240 = !DILocation(line: 2150, column: 20, scope: !7236)
!7241 = !DILocation(line: 2150, column: 39, scope: !7236)
!7242 = !DILocation(line: 2150, column: 45, scope: !7236)
!7243 = !DILocation(line: 2150, column: 51, scope: !7236)
!7244 = !DILocation(line: 2150, column: 4, scope: !7236)
!7245 = !DILocation(line: 2149, column: 35, scope: !7236)
!7246 = !DILocation(line: 2149, column: 2, scope: !7236)
!7247 = distinct !{!7247, !7239, !7248}
!7248 = !DILocation(line: 2150, column: 56, scope: !7233)
!7249 = !DILocation(line: 2151, column: 5, scope: !7208)
!7250 = !DILocation(line: 2133, column: 77, scope: !7203)
!7251 = !DILocation(line: 2133, column: 3, scope: !7203)
!7252 = distinct !{!7252, !7205, !7253}
!7253 = !DILocation(line: 2151, column: 5, scope: !7196)
!7254 = !DILocation(line: 2152, column: 1, scope: !6976)
!7255 = distinct !DISubprogram(name: "SET_BIT", scope: !3245, file: !3245, line: 63, type: !7256, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7256 = !DISubroutineType(types: !7257)
!7257 = !{null, !3244, !9}
!7258 = !DILocalVariable(name: "map", arg: 1, scope: !7255, file: !3245, line: 63, type: !3244)
!7259 = !DILocation(line: 63, column: 18, scope: !7255)
!7260 = !DILocalVariable(name: "bitno", arg: 2, scope: !7255, file: !3245, line: 63, type: !9)
!7261 = !DILocation(line: 63, column: 36, scope: !7255)
!7262 = !DILocation(line: 65, column: 7, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7255, file: !3245, line: 65, column: 7)
!7264 = !DILocation(line: 65, column: 12, scope: !7263)
!7265 = !DILocation(line: 65, column: 7, scope: !7255)
!7266 = !DILocalVariable(name: "oldbit", scope: !7267, file: !3245, line: 67, type: !6)
!7267 = distinct !DILexicalBlock(scope: !7263, file: !3245, line: 66, column: 5)
!7268 = !DILocation(line: 67, column: 12, scope: !7267)
!7269 = !DILocation(line: 68, column: 16, scope: !7267)
!7270 = !DILocation(line: 68, column: 14, scope: !7267)
!7271 = !DILocation(line: 69, column: 12, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7267, file: !3245, line: 69, column: 11)
!7273 = !DILocation(line: 69, column: 11, scope: !7267)
!7274 = !DILocation(line: 70, column: 2, scope: !7272)
!7275 = !DILocation(line: 70, column: 7, scope: !7272)
!7276 = !DILocation(line: 70, column: 16, scope: !7272)
!7277 = !DILocation(line: 70, column: 22, scope: !7272)
!7278 = !DILocation(line: 70, column: 41, scope: !7272)
!7279 = !DILocation(line: 71, column: 5, scope: !7267)
!7280 = !DILocation(line: 73, column: 33, scope: !7255)
!7281 = !DILocation(line: 73, column: 40, scope: !7255)
!7282 = !DILocation(line: 73, column: 29, scope: !7255)
!7283 = !DILocation(line: 72, column: 3, scope: !7255)
!7284 = !DILocation(line: 72, column: 8, scope: !7255)
!7285 = !DILocation(line: 72, column: 13, scope: !7255)
!7286 = !DILocation(line: 72, column: 19, scope: !7255)
!7287 = !DILocation(line: 73, column: 5, scope: !7255)
!7288 = !DILocation(line: 74, column: 1, scope: !7255)
!7289 = distinct !DISubprogram(name: "RESET_BIT", scope: !3245, file: !3245, line: 82, type: !7256, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7290 = !DILocalVariable(name: "map", arg: 1, scope: !7289, file: !3245, line: 82, type: !3244)
!7291 = !DILocation(line: 82, column: 20, scope: !7289)
!7292 = !DILocalVariable(name: "bitno", arg: 2, scope: !7289, file: !3245, line: 82, type: !9)
!7293 = !DILocation(line: 82, column: 39, scope: !7289)
!7294 = !DILocation(line: 84, column: 7, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !7289, file: !3245, line: 84, column: 7)
!7296 = !DILocation(line: 84, column: 12, scope: !7295)
!7297 = !DILocation(line: 84, column: 7, scope: !7289)
!7298 = !DILocalVariable(name: "oldbit", scope: !7299, file: !3245, line: 86, type: !6)
!7299 = distinct !DILexicalBlock(scope: !7295, file: !3245, line: 85, column: 5)
!7300 = !DILocation(line: 86, column: 12, scope: !7299)
!7301 = !DILocation(line: 87, column: 16, scope: !7299)
!7302 = !DILocation(line: 87, column: 14, scope: !7299)
!7303 = !DILocation(line: 88, column: 11, scope: !7304)
!7304 = distinct !DILexicalBlock(scope: !7299, file: !3245, line: 88, column: 11)
!7305 = !DILocation(line: 88, column: 11, scope: !7299)
!7306 = !DILocation(line: 89, column: 2, scope: !7304)
!7307 = !DILocation(line: 89, column: 7, scope: !7304)
!7308 = !DILocation(line: 89, column: 16, scope: !7304)
!7309 = !DILocation(line: 89, column: 22, scope: !7304)
!7310 = !DILocation(line: 89, column: 41, scope: !7304)
!7311 = !DILocation(line: 90, column: 5, scope: !7299)
!7312 = !DILocation(line: 92, column: 35, scope: !7289)
!7313 = !DILocation(line: 92, column: 42, scope: !7289)
!7314 = !DILocation(line: 92, column: 31, scope: !7289)
!7315 = !DILocation(line: 92, column: 8, scope: !7289)
!7316 = !DILocation(line: 91, column: 3, scope: !7289)
!7317 = !DILocation(line: 91, column: 8, scope: !7289)
!7318 = !DILocation(line: 91, column: 13, scope: !7289)
!7319 = !DILocation(line: 91, column: 19, scope: !7289)
!7320 = !DILocation(line: 92, column: 5, scope: !7289)
!7321 = !DILocation(line: 93, column: 1, scope: !7289)
!7322 = distinct !DISubprogram(name: "bmp_iter_and_compl_init", scope: !1974, file: !1974, line: 334, type: !7323, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7323 = !DISubroutineType(types: !7324)
!7324 = !{null, !5798, !5799, !5799, !9, !3123}
!7325 = !DILocalVariable(name: "bi", arg: 1, scope: !7322, file: !1974, line: 334, type: !5798)
!7326 = !DILocation(line: 334, column: 43, scope: !7322)
!7327 = !DILocalVariable(name: "map1", arg: 2, scope: !7322, file: !1974, line: 334, type: !5799)
!7328 = !DILocation(line: 334, column: 60, scope: !7322)
!7329 = !DILocalVariable(name: "map2", arg: 3, scope: !7322, file: !1974, line: 334, type: !5799)
!7330 = !DILocation(line: 334, column: 79, scope: !7322)
!7331 = !DILocalVariable(name: "start_bit", arg: 4, scope: !7322, file: !1974, line: 335, type: !9)
!7332 = !DILocation(line: 335, column: 14, scope: !7322)
!7333 = !DILocalVariable(name: "bit_no", arg: 5, scope: !7322, file: !1974, line: 335, type: !3123)
!7334 = !DILocation(line: 335, column: 35, scope: !7322)
!7335 = !DILocation(line: 337, column: 14, scope: !7322)
!7336 = !DILocation(line: 337, column: 20, scope: !7322)
!7337 = !DILocation(line: 337, column: 3, scope: !7322)
!7338 = !DILocation(line: 337, column: 7, scope: !7322)
!7339 = !DILocation(line: 337, column: 12, scope: !7322)
!7340 = !DILocation(line: 338, column: 14, scope: !7322)
!7341 = !DILocation(line: 338, column: 20, scope: !7322)
!7342 = !DILocation(line: 338, column: 3, scope: !7322)
!7343 = !DILocation(line: 338, column: 7, scope: !7322)
!7344 = !DILocation(line: 338, column: 12, scope: !7322)
!7345 = !DILocation(line: 341, column: 3, scope: !7322)
!7346 = !DILocation(line: 343, column: 12, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7348, file: !1974, line: 343, column: 11)
!7348 = distinct !DILexicalBlock(scope: !7322, file: !1974, line: 342, column: 5)
!7349 = !DILocation(line: 343, column: 16, scope: !7347)
!7350 = !DILocation(line: 343, column: 11, scope: !7348)
!7351 = !DILocation(line: 345, column: 4, scope: !7352)
!7352 = distinct !DILexicalBlock(scope: !7347, file: !1974, line: 344, column: 2)
!7353 = !DILocation(line: 345, column: 8, scope: !7352)
!7354 = !DILocation(line: 345, column: 13, scope: !7352)
!7355 = !DILocation(line: 346, column: 4, scope: !7352)
!7356 = !DILocation(line: 349, column: 11, scope: !7357)
!7357 = distinct !DILexicalBlock(scope: !7348, file: !1974, line: 349, column: 11)
!7358 = !DILocation(line: 349, column: 15, scope: !7357)
!7359 = !DILocation(line: 349, column: 21, scope: !7357)
!7360 = !DILocation(line: 349, column: 29, scope: !7357)
!7361 = !DILocation(line: 349, column: 39, scope: !7357)
!7362 = !DILocation(line: 349, column: 26, scope: !7357)
!7363 = !DILocation(line: 349, column: 11, scope: !7348)
!7364 = !DILocation(line: 350, column: 2, scope: !7357)
!7365 = !DILocation(line: 351, column: 18, scope: !7348)
!7366 = !DILocation(line: 351, column: 22, scope: !7348)
!7367 = !DILocation(line: 351, column: 28, scope: !7348)
!7368 = !DILocation(line: 351, column: 7, scope: !7348)
!7369 = !DILocation(line: 351, column: 11, scope: !7348)
!7370 = !DILocation(line: 351, column: 16, scope: !7348)
!7371 = distinct !{!7371, !7345, !7372}
!7372 = !DILocation(line: 352, column: 5, scope: !7322)
!7373 = !DILocation(line: 355, column: 3, scope: !7322)
!7374 = !DILocation(line: 355, column: 10, scope: !7322)
!7375 = !DILocation(line: 355, column: 14, scope: !7322)
!7376 = !DILocation(line: 355, column: 19, scope: !7322)
!7377 = !DILocation(line: 355, column: 22, scope: !7322)
!7378 = !DILocation(line: 355, column: 26, scope: !7322)
!7379 = !DILocation(line: 355, column: 32, scope: !7322)
!7380 = !DILocation(line: 355, column: 39, scope: !7322)
!7381 = !DILocation(line: 355, column: 43, scope: !7322)
!7382 = !DILocation(line: 355, column: 49, scope: !7322)
!7383 = !DILocation(line: 355, column: 37, scope: !7322)
!7384 = !DILocation(line: 0, scope: !7322)
!7385 = !DILocation(line: 356, column: 16, scope: !7322)
!7386 = !DILocation(line: 356, column: 20, scope: !7322)
!7387 = !DILocation(line: 356, column: 26, scope: !7322)
!7388 = !DILocation(line: 356, column: 5, scope: !7322)
!7389 = !DILocation(line: 356, column: 9, scope: !7322)
!7390 = !DILocation(line: 356, column: 14, scope: !7322)
!7391 = distinct !{!7391, !7373, !7387}
!7392 = !DILocation(line: 360, column: 7, scope: !7393)
!7393 = distinct !DILexicalBlock(scope: !7322, file: !1974, line: 360, column: 7)
!7394 = !DILocation(line: 360, column: 11, scope: !7393)
!7395 = !DILocation(line: 360, column: 17, scope: !7393)
!7396 = !DILocation(line: 360, column: 25, scope: !7393)
!7397 = !DILocation(line: 360, column: 35, scope: !7393)
!7398 = !DILocation(line: 360, column: 22, scope: !7393)
!7399 = !DILocation(line: 360, column: 7, scope: !7322)
!7400 = !DILocation(line: 361, column: 17, scope: !7393)
!7401 = !DILocation(line: 361, column: 21, scope: !7393)
!7402 = !DILocation(line: 361, column: 27, scope: !7393)
!7403 = !DILocation(line: 361, column: 32, scope: !7393)
!7404 = !DILocation(line: 361, column: 15, scope: !7393)
!7405 = !DILocation(line: 361, column: 5, scope: !7393)
!7406 = !DILocation(line: 363, column: 17, scope: !7322)
!7407 = !DILocation(line: 363, column: 27, scope: !7322)
!7408 = !DILocation(line: 363, column: 46, scope: !7322)
!7409 = !DILocation(line: 363, column: 3, scope: !7322)
!7410 = !DILocation(line: 363, column: 7, scope: !7322)
!7411 = !DILocation(line: 363, column: 15, scope: !7322)
!7412 = !DILocation(line: 364, column: 14, scope: !7322)
!7413 = !DILocation(line: 364, column: 18, scope: !7322)
!7414 = !DILocation(line: 364, column: 24, scope: !7322)
!7415 = !DILocation(line: 364, column: 29, scope: !7322)
!7416 = !DILocation(line: 364, column: 33, scope: !7322)
!7417 = !DILocation(line: 364, column: 3, scope: !7322)
!7418 = !DILocation(line: 364, column: 7, scope: !7322)
!7419 = !DILocation(line: 364, column: 12, scope: !7322)
!7420 = !DILocation(line: 365, column: 7, scope: !7421)
!7421 = distinct !DILexicalBlock(scope: !7322, file: !1974, line: 365, column: 7)
!7422 = !DILocation(line: 365, column: 11, scope: !7421)
!7423 = !DILocation(line: 365, column: 16, scope: !7421)
!7424 = !DILocation(line: 365, column: 19, scope: !7421)
!7425 = !DILocation(line: 365, column: 23, scope: !7421)
!7426 = !DILocation(line: 365, column: 29, scope: !7421)
!7427 = !DILocation(line: 365, column: 37, scope: !7421)
!7428 = !DILocation(line: 365, column: 41, scope: !7421)
!7429 = !DILocation(line: 365, column: 47, scope: !7421)
!7430 = !DILocation(line: 365, column: 34, scope: !7421)
!7431 = !DILocation(line: 365, column: 7, scope: !7322)
!7432 = !DILocation(line: 366, column: 18, scope: !7421)
!7433 = !DILocation(line: 366, column: 22, scope: !7421)
!7434 = !DILocation(line: 366, column: 28, scope: !7421)
!7435 = !DILocation(line: 366, column: 33, scope: !7421)
!7436 = !DILocation(line: 366, column: 37, scope: !7421)
!7437 = !DILocation(line: 366, column: 17, scope: !7421)
!7438 = !DILocation(line: 366, column: 5, scope: !7421)
!7439 = !DILocation(line: 366, column: 9, scope: !7421)
!7440 = !DILocation(line: 366, column: 14, scope: !7421)
!7441 = !DILocation(line: 367, column: 16, scope: !7322)
!7442 = !DILocation(line: 367, column: 26, scope: !7322)
!7443 = !DILocation(line: 367, column: 3, scope: !7322)
!7444 = !DILocation(line: 367, column: 7, scope: !7322)
!7445 = !DILocation(line: 367, column: 12, scope: !7322)
!7446 = !DILocation(line: 373, column: 17, scope: !7322)
!7447 = !DILocation(line: 373, column: 21, scope: !7322)
!7448 = !DILocation(line: 373, column: 16, scope: !7322)
!7449 = !DILocation(line: 373, column: 13, scope: !7322)
!7450 = !DILocation(line: 375, column: 13, scope: !7322)
!7451 = !DILocation(line: 375, column: 4, scope: !7322)
!7452 = !DILocation(line: 375, column: 11, scope: !7322)
!7453 = !DILocation(line: 376, column: 1, scope: !7322)
!7454 = distinct !DISubprogram(name: "bmp_iter_and_compl", scope: !1974, file: !1974, line: 507, type: !5888, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7455 = !DILocalVariable(name: "bi", arg: 1, scope: !7454, file: !1974, line: 507, type: !5798)
!7456 = !DILocation(line: 507, column: 38, scope: !7454)
!7457 = !DILocalVariable(name: "bit_no", arg: 2, scope: !7454, file: !1974, line: 507, type: !3123)
!7458 = !DILocation(line: 507, column: 52, scope: !7454)
!7459 = !DILocation(line: 510, column: 7, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !7454, file: !1974, line: 510, column: 7)
!7461 = !DILocation(line: 510, column: 11, scope: !7460)
!7462 = !DILocation(line: 510, column: 7, scope: !7454)
!7463 = !DILocation(line: 511, column: 5, scope: !7460)
!7464 = !DILabel(scope: !7465, name: "next_bit", file: !1974, line: 512)
!7465 = distinct !DILexicalBlock(scope: !7460, file: !1974, line: 511, column: 5)
!7466 = !DILocation(line: 512, column: 5, scope: !7465)
!7467 = !DILocation(line: 513, column: 7, scope: !7465)
!7468 = !DILocation(line: 513, column: 16, scope: !7465)
!7469 = !DILocation(line: 513, column: 20, scope: !7465)
!7470 = !DILocation(line: 513, column: 25, scope: !7465)
!7471 = !DILocation(line: 513, column: 14, scope: !7465)
!7472 = !DILocation(line: 515, column: 4, scope: !7473)
!7473 = distinct !DILexicalBlock(scope: !7465, file: !1974, line: 514, column: 2)
!7474 = !DILocation(line: 515, column: 8, scope: !7473)
!7475 = !DILocation(line: 515, column: 13, scope: !7473)
!7476 = !DILocation(line: 516, column: 5, scope: !7473)
!7477 = !DILocation(line: 516, column: 12, scope: !7473)
!7478 = distinct !{!7478, !7467, !7479}
!7479 = !DILocation(line: 517, column: 2, scope: !7465)
!7480 = !DILocation(line: 518, column: 7, scope: !7465)
!7481 = !DILocation(line: 524, column: 16, scope: !7454)
!7482 = !DILocation(line: 524, column: 15, scope: !7454)
!7483 = !DILocation(line: 524, column: 23, scope: !7454)
!7484 = !DILocation(line: 524, column: 42, scope: !7454)
!7485 = !DILocation(line: 525, column: 7, scope: !7454)
!7486 = !DILocation(line: 525, column: 26, scope: !7454)
!7487 = !DILocation(line: 524, column: 4, scope: !7454)
!7488 = !DILocation(line: 524, column: 11, scope: !7454)
!7489 = !DILocation(line: 526, column: 3, scope: !7454)
!7490 = !DILocation(line: 526, column: 7, scope: !7454)
!7491 = !DILocation(line: 526, column: 14, scope: !7454)
!7492 = !DILocation(line: 528, column: 3, scope: !7454)
!7493 = !DILocation(line: 531, column: 7, scope: !7494)
!7494 = distinct !DILexicalBlock(scope: !7454, file: !1974, line: 529, column: 5)
!7495 = !DILocation(line: 531, column: 14, scope: !7494)
!7496 = !DILocation(line: 531, column: 18, scope: !7494)
!7497 = !DILocation(line: 531, column: 26, scope: !7494)
!7498 = !DILocation(line: 533, column: 15, scope: !7499)
!7499 = distinct !DILexicalBlock(scope: !7494, file: !1974, line: 532, column: 2)
!7500 = !DILocation(line: 533, column: 19, scope: !7499)
!7501 = !DILocation(line: 533, column: 25, scope: !7499)
!7502 = !DILocation(line: 533, column: 30, scope: !7499)
!7503 = !DILocation(line: 533, column: 34, scope: !7499)
!7504 = !DILocation(line: 533, column: 4, scope: !7499)
!7505 = !DILocation(line: 533, column: 8, scope: !7499)
!7506 = !DILocation(line: 533, column: 13, scope: !7499)
!7507 = !DILocation(line: 534, column: 8, scope: !7508)
!7508 = distinct !DILexicalBlock(scope: !7499, file: !1974, line: 534, column: 8)
!7509 = !DILocation(line: 534, column: 12, scope: !7508)
!7510 = !DILocation(line: 534, column: 17, scope: !7508)
!7511 = !DILocation(line: 534, column: 20, scope: !7508)
!7512 = !DILocation(line: 534, column: 24, scope: !7508)
!7513 = !DILocation(line: 534, column: 30, scope: !7508)
!7514 = !DILocation(line: 534, column: 38, scope: !7508)
!7515 = !DILocation(line: 534, column: 42, scope: !7508)
!7516 = !DILocation(line: 534, column: 48, scope: !7508)
!7517 = !DILocation(line: 534, column: 35, scope: !7508)
!7518 = !DILocation(line: 534, column: 8, scope: !7499)
!7519 = !DILocation(line: 535, column: 19, scope: !7508)
!7520 = !DILocation(line: 535, column: 23, scope: !7508)
!7521 = !DILocation(line: 535, column: 29, scope: !7508)
!7522 = !DILocation(line: 535, column: 34, scope: !7508)
!7523 = !DILocation(line: 535, column: 38, scope: !7508)
!7524 = !DILocation(line: 535, column: 18, scope: !7508)
!7525 = !DILocation(line: 535, column: 6, scope: !7508)
!7526 = !DILocation(line: 535, column: 10, scope: !7508)
!7527 = !DILocation(line: 535, column: 15, scope: !7508)
!7528 = !DILocation(line: 536, column: 8, scope: !7529)
!7529 = distinct !DILexicalBlock(scope: !7499, file: !1974, line: 536, column: 8)
!7530 = !DILocation(line: 536, column: 12, scope: !7529)
!7531 = !DILocation(line: 536, column: 8, scope: !7499)
!7532 = !DILocation(line: 537, column: 6, scope: !7529)
!7533 = !DILocation(line: 538, column: 5, scope: !7499)
!7534 = !DILocation(line: 538, column: 12, scope: !7499)
!7535 = !DILocation(line: 539, column: 4, scope: !7499)
!7536 = !DILocation(line: 539, column: 8, scope: !7499)
!7537 = !DILocation(line: 539, column: 15, scope: !7499)
!7538 = distinct !{!7538, !7493, !7539}
!7539 = !DILocation(line: 540, column: 2, scope: !7494)
!7540 = !DILocation(line: 543, column: 18, scope: !7494)
!7541 = !DILocation(line: 543, column: 22, scope: !7494)
!7542 = !DILocation(line: 543, column: 28, scope: !7494)
!7543 = !DILocation(line: 543, column: 7, scope: !7494)
!7544 = !DILocation(line: 543, column: 11, scope: !7494)
!7545 = !DILocation(line: 543, column: 16, scope: !7494)
!7546 = !DILocation(line: 544, column: 12, scope: !7547)
!7547 = distinct !DILexicalBlock(scope: !7494, file: !1974, line: 544, column: 11)
!7548 = !DILocation(line: 544, column: 16, scope: !7547)
!7549 = !DILocation(line: 544, column: 11, scope: !7494)
!7550 = !DILocation(line: 545, column: 2, scope: !7547)
!7551 = !DILocation(line: 548, column: 7, scope: !7494)
!7552 = !DILocation(line: 548, column: 14, scope: !7494)
!7553 = !DILocation(line: 548, column: 18, scope: !7494)
!7554 = !DILocation(line: 548, column: 23, scope: !7494)
!7555 = !DILocation(line: 548, column: 26, scope: !7494)
!7556 = !DILocation(line: 548, column: 30, scope: !7494)
!7557 = !DILocation(line: 548, column: 36, scope: !7494)
!7558 = !DILocation(line: 548, column: 43, scope: !7494)
!7559 = !DILocation(line: 548, column: 47, scope: !7494)
!7560 = !DILocation(line: 548, column: 53, scope: !7494)
!7561 = !DILocation(line: 548, column: 41, scope: !7494)
!7562 = !DILocation(line: 0, scope: !7494)
!7563 = !DILocation(line: 549, column: 13, scope: !7494)
!7564 = !DILocation(line: 549, column: 17, scope: !7494)
!7565 = !DILocation(line: 549, column: 23, scope: !7494)
!7566 = !DILocation(line: 549, column: 2, scope: !7494)
!7567 = !DILocation(line: 549, column: 6, scope: !7494)
!7568 = !DILocation(line: 549, column: 11, scope: !7494)
!7569 = distinct !{!7569, !7551, !7565}
!7570 = !DILocation(line: 551, column: 17, scope: !7494)
!7571 = !DILocation(line: 551, column: 21, scope: !7494)
!7572 = !DILocation(line: 551, column: 27, scope: !7494)
!7573 = !DILocation(line: 551, column: 32, scope: !7494)
!7574 = !DILocation(line: 551, column: 8, scope: !7494)
!7575 = !DILocation(line: 551, column: 15, scope: !7494)
!7576 = !DILocation(line: 552, column: 7, scope: !7494)
!7577 = !DILocation(line: 552, column: 11, scope: !7494)
!7578 = !DILocation(line: 552, column: 19, scope: !7494)
!7579 = distinct !{!7579, !7492, !7580}
!7580 = !DILocation(line: 553, column: 5, scope: !7454)
!7581 = !DILocation(line: 554, column: 1, scope: !7454)
!7582 = distinct !DISubprogram(name: "oprs_not_set_p", scope: !3, file: !3, line: 1849, type: !6147, scopeLine: 1850, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7583 = !DILocalVariable(name: "x", arg: 1, scope: !7582, file: !3, line: 1849, type: !3232)
!7584 = !DILocation(line: 1849, column: 27, scope: !7582)
!7585 = !DILocalVariable(name: "insn", arg: 2, scope: !7582, file: !3, line: 1849, type: !3232)
!7586 = !DILocation(line: 1849, column: 40, scope: !7582)
!7587 = !DILocalVariable(name: "i", scope: !7582, file: !3, line: 1851, type: !1917)
!7588 = !DILocation(line: 1851, column: 7, scope: !7582)
!7589 = !DILocalVariable(name: "j", scope: !7582, file: !3, line: 1851, type: !1917)
!7590 = !DILocation(line: 1851, column: 10, scope: !7582)
!7591 = !DILocalVariable(name: "code", scope: !7582, file: !3, line: 1852, type: !388)
!7592 = !DILocation(line: 1852, column: 17, scope: !7582)
!7593 = !DILocalVariable(name: "fmt", scope: !7582, file: !3, line: 1853, type: !1920)
!7594 = !DILocation(line: 1853, column: 15, scope: !7582)
!7595 = !DILocation(line: 1855, column: 7, scope: !7596)
!7596 = distinct !DILexicalBlock(scope: !7582, file: !3, line: 1855, column: 7)
!7597 = !DILocation(line: 1855, column: 9, scope: !7596)
!7598 = !DILocation(line: 1855, column: 7, scope: !7582)
!7599 = !DILocation(line: 1856, column: 5, scope: !7596)
!7600 = !DILocation(line: 1858, column: 10, scope: !7582)
!7601 = !DILocation(line: 1858, column: 8, scope: !7582)
!7602 = !DILocation(line: 1859, column: 11, scope: !7582)
!7603 = !DILocation(line: 1859, column: 3, scope: !7582)
!7604 = !DILocation(line: 1872, column: 7, scope: !7605)
!7605 = distinct !DILexicalBlock(scope: !7582, file: !3, line: 1860, column: 5)
!7606 = !DILocation(line: 1875, column: 35, scope: !7607)
!7607 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 1875, column: 11)
!7608 = !DILocation(line: 1876, column: 7, scope: !7607)
!7609 = !DILocation(line: 1876, column: 28, scope: !7607)
!7610 = !DILocation(line: 1875, column: 11, scope: !7607)
!7611 = !DILocation(line: 1875, column: 11, scope: !7605)
!7612 = !DILocation(line: 1877, column: 2, scope: !7607)
!7613 = !DILocation(line: 1879, column: 25, scope: !7607)
!7614 = !DILocation(line: 1879, column: 38, scope: !7607)
!7615 = !DILocation(line: 1879, column: 9, scope: !7607)
!7616 = !DILocation(line: 1879, column: 2, scope: !7607)
!7617 = !DILocation(line: 1882, column: 16, scope: !7605)
!7618 = !DILocation(line: 1882, column: 14, scope: !7605)
!7619 = !DILocation(line: 1882, column: 7, scope: !7605)
!7620 = !DILocation(line: 1885, column: 7, scope: !7605)
!7621 = !DILocation(line: 1888, column: 12, scope: !7622)
!7622 = distinct !DILexicalBlock(scope: !7582, file: !3, line: 1888, column: 3)
!7623 = !DILocation(line: 1888, column: 34, scope: !7622)
!7624 = !DILocation(line: 1888, column: 10, scope: !7622)
!7625 = !DILocation(line: 1888, column: 45, scope: !7622)
!7626 = !DILocation(line: 1888, column: 43, scope: !7622)
!7627 = !DILocation(line: 1888, column: 8, scope: !7622)
!7628 = !DILocation(line: 1888, column: 68, scope: !7629)
!7629 = distinct !DILexicalBlock(scope: !7622, file: !3, line: 1888, column: 3)
!7630 = !DILocation(line: 1888, column: 70, scope: !7629)
!7631 = !DILocation(line: 1888, column: 3, scope: !7622)
!7632 = !DILocation(line: 1890, column: 11, scope: !7633)
!7633 = distinct !DILexicalBlock(scope: !7634, file: !3, line: 1890, column: 11)
!7634 = distinct !DILexicalBlock(scope: !7629, file: !3, line: 1889, column: 5)
!7635 = !DILocation(line: 1890, column: 15, scope: !7633)
!7636 = !DILocation(line: 1890, column: 18, scope: !7633)
!7637 = !DILocation(line: 1890, column: 11, scope: !7634)
!7638 = !DILocation(line: 1895, column: 8, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 1895, column: 8)
!7640 = distinct !DILexicalBlock(scope: !7633, file: !3, line: 1891, column: 2)
!7641 = !DILocation(line: 1895, column: 10, scope: !7639)
!7642 = !DILocation(line: 1895, column: 8, scope: !7640)
!7643 = !DILocation(line: 1896, column: 29, scope: !7639)
!7644 = !DILocation(line: 1896, column: 42, scope: !7639)
!7645 = !DILocation(line: 1896, column: 13, scope: !7639)
!7646 = !DILocation(line: 1896, column: 6, scope: !7639)
!7647 = !DILocation(line: 1898, column: 26, scope: !7648)
!7648 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 1898, column: 8)
!7649 = !DILocation(line: 1898, column: 39, scope: !7648)
!7650 = !DILocation(line: 1898, column: 10, scope: !7648)
!7651 = !DILocation(line: 1898, column: 8, scope: !7640)
!7652 = !DILocation(line: 1899, column: 6, scope: !7648)
!7653 = !DILocation(line: 1900, column: 2, scope: !7640)
!7654 = !DILocation(line: 1901, column: 16, scope: !7655)
!7655 = distinct !DILexicalBlock(scope: !7633, file: !3, line: 1901, column: 16)
!7656 = !DILocation(line: 1901, column: 20, scope: !7655)
!7657 = !DILocation(line: 1901, column: 23, scope: !7655)
!7658 = !DILocation(line: 1901, column: 16, scope: !7633)
!7659 = !DILocation(line: 1902, column: 9, scope: !7660)
!7660 = distinct !DILexicalBlock(scope: !7655, file: !3, line: 1902, column: 2)
!7661 = !DILocation(line: 1902, column: 7, scope: !7660)
!7662 = !DILocation(line: 1902, column: 14, scope: !7663)
!7663 = distinct !DILexicalBlock(scope: !7660, file: !3, line: 1902, column: 2)
!7664 = !DILocation(line: 1902, column: 18, scope: !7663)
!7665 = !DILocation(line: 1902, column: 16, scope: !7663)
!7666 = !DILocation(line: 1902, column: 2, scope: !7660)
!7667 = !DILocation(line: 1903, column: 26, scope: !7668)
!7668 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 1903, column: 8)
!7669 = !DILocation(line: 1903, column: 45, scope: !7668)
!7670 = !DILocation(line: 1903, column: 10, scope: !7668)
!7671 = !DILocation(line: 1903, column: 8, scope: !7663)
!7672 = !DILocation(line: 1904, column: 6, scope: !7668)
!7673 = !DILocation(line: 1903, column: 49, scope: !7668)
!7674 = !DILocation(line: 1902, column: 35, scope: !7663)
!7675 = !DILocation(line: 1902, column: 2, scope: !7663)
!7676 = distinct !{!7676, !7666, !7677}
!7677 = !DILocation(line: 1904, column: 13, scope: !7660)
!7678 = !DILocation(line: 1905, column: 5, scope: !7634)
!7679 = !DILocation(line: 1888, column: 77, scope: !7629)
!7680 = !DILocation(line: 1888, column: 3, scope: !7629)
!7681 = distinct !{!7681, !7631, !7682}
!7682 = !DILocation(line: 1905, column: 5, scope: !7622)
!7683 = !DILocation(line: 1907, column: 3, scope: !7582)
!7684 = !DILocation(line: 1908, column: 1, scope: !7582)
!7685 = distinct !DISubprogram(name: "find_avail_set", scope: !3, file: !3, line: 2299, type: !7686, scopeLine: 2300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7686 = !DISubroutineType(types: !7687)
!7687 = !{!3086, !1917, !1893}
!7688 = !DILocalVariable(name: "regno", arg: 1, scope: !7685, file: !3, line: 2299, type: !1917)
!7689 = !DILocation(line: 2299, column: 21, scope: !7685)
!7690 = !DILocalVariable(name: "insn", arg: 2, scope: !7685, file: !3, line: 2299, type: !1893)
!7691 = !DILocation(line: 2299, column: 32, scope: !7685)
!7692 = !DILocalVariable(name: "set1", scope: !7685, file: !3, line: 2303, type: !3086)
!7693 = !DILocation(line: 2303, column: 16, scope: !7685)
!7694 = !DILocation(line: 2314, column: 3, scope: !7685)
!7695 = !DILocalVariable(name: "src", scope: !7696, file: !3, line: 2316, type: !1893)
!7696 = distinct !DILexicalBlock(scope: !7685, file: !3, line: 2315, column: 5)
!7697 = !DILocation(line: 2316, column: 11, scope: !7696)
!7698 = !DILocalVariable(name: "set", scope: !7696, file: !3, line: 2317, type: !3086)
!7699 = !DILocation(line: 2317, column: 20, scope: !7696)
!7700 = !DILocation(line: 2317, column: 38, scope: !7696)
!7701 = !DILocation(line: 2317, column: 26, scope: !7696)
!7702 = !DILocation(line: 2321, column: 7, scope: !7696)
!7703 = !DILocation(line: 2321, column: 14, scope: !7696)
!7704 = !DILocation(line: 2323, column: 8, scope: !7705)
!7705 = distinct !DILexicalBlock(scope: !7706, file: !3, line: 2323, column: 8)
!7706 = distinct !DILexicalBlock(scope: !7696, file: !3, line: 2322, column: 2)
!7707 = !DILocation(line: 2323, column: 8, scope: !7706)
!7708 = !DILocation(line: 2325, column: 6, scope: !7705)
!7709 = !DILocation(line: 2326, column: 20, scope: !7706)
!7710 = !DILocation(line: 2326, column: 27, scope: !7706)
!7711 = !DILocation(line: 2326, column: 10, scope: !7706)
!7712 = !DILocation(line: 2326, column: 8, scope: !7706)
!7713 = distinct !{!7713, !7702, !7714}
!7714 = !DILocation(line: 2327, column: 2, scope: !7696)
!7715 = !DILocation(line: 2331, column: 11, scope: !7716)
!7716 = distinct !DILexicalBlock(scope: !7696, file: !3, line: 2331, column: 11)
!7717 = !DILocation(line: 2331, column: 15, scope: !7716)
!7718 = !DILocation(line: 2331, column: 11, scope: !7696)
!7719 = !DILocation(line: 2332, column: 2, scope: !7716)
!7720 = !DILocation(line: 2334, column: 7, scope: !7696)
!7721 = !DILocation(line: 2336, column: 13, scope: !7696)
!7722 = !DILocation(line: 2336, column: 11, scope: !7696)
!7723 = !DILocation(line: 2345, column: 28, scope: !7724)
!7724 = distinct !DILexicalBlock(scope: !7696, file: !3, line: 2345, column: 11)
!7725 = !DILocation(line: 2345, column: 11, scope: !7724)
!7726 = !DILocation(line: 2345, column: 33, scope: !7724)
!7727 = !DILocation(line: 2345, column: 52, scope: !7724)
!7728 = !DILocation(line: 2345, column: 57, scope: !7724)
!7729 = !DILocation(line: 2345, column: 36, scope: !7724)
!7730 = !DILocation(line: 2345, column: 11, scope: !7696)
!7731 = !DILocation(line: 2346, column: 9, scope: !7724)
!7732 = !DILocation(line: 2346, column: 7, scope: !7724)
!7733 = !DILocation(line: 2346, column: 2, scope: !7724)
!7734 = !DILocation(line: 2350, column: 13, scope: !7735)
!7735 = distinct !DILexicalBlock(scope: !7696, file: !3, line: 2350, column: 11)
!7736 = !DILocation(line: 2350, column: 11, scope: !7696)
!7737 = !DILocation(line: 2351, column: 2, scope: !7735)
!7738 = !DILocation(line: 2355, column: 15, scope: !7696)
!7739 = !DILocation(line: 2355, column: 13, scope: !7696)
!7740 = distinct !{!7740, !7694, !7741}
!7741 = !DILocation(line: 2356, column: 5, scope: !7685)
!7742 = !DILocation(line: 2360, column: 10, scope: !7685)
!7743 = !DILocation(line: 2360, column: 3, scope: !7685)
!7744 = distinct !DISubprogram(name: "lookup_set", scope: !3, file: !3, line: 1756, type: !7745, scopeLine: 1757, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7745 = !DISubroutineType(types: !7746)
!7746 = !{!3086, !9, !3824}
!7747 = !DILocalVariable(name: "regno", arg: 1, scope: !7744, file: !3, line: 1756, type: !9)
!7748 = !DILocation(line: 1756, column: 26, scope: !7744)
!7749 = !DILocalVariable(name: "table", arg: 2, scope: !7744, file: !3, line: 1756, type: !3824)
!7750 = !DILocation(line: 1756, column: 54, scope: !7744)
!7751 = !DILocalVariable(name: "hash", scope: !7744, file: !3, line: 1758, type: !9)
!7752 = !DILocation(line: 1758, column: 16, scope: !7744)
!7753 = !DILocation(line: 1758, column: 33, scope: !7744)
!7754 = !DILocation(line: 1758, column: 40, scope: !7744)
!7755 = !DILocation(line: 1758, column: 47, scope: !7744)
!7756 = !DILocation(line: 1758, column: 23, scope: !7744)
!7757 = !DILocalVariable(name: "expr", scope: !7744, file: !3, line: 1759, type: !3086)
!7758 = !DILocation(line: 1759, column: 16, scope: !7744)
!7759 = !DILocation(line: 1761, column: 10, scope: !7744)
!7760 = !DILocation(line: 1761, column: 17, scope: !7744)
!7761 = !DILocation(line: 1761, column: 23, scope: !7744)
!7762 = !DILocation(line: 1761, column: 8, scope: !7744)
!7763 = !DILocation(line: 1763, column: 3, scope: !7744)
!7764 = !DILocation(line: 1763, column: 10, scope: !7744)
!7765 = !DILocation(line: 1763, column: 15, scope: !7744)
!7766 = !DILocation(line: 1763, column: 18, scope: !7744)
!7767 = !DILocation(line: 1763, column: 51, scope: !7744)
!7768 = !DILocation(line: 1763, column: 48, scope: !7744)
!7769 = !DILocation(line: 0, scope: !7744)
!7770 = !DILocation(line: 1764, column: 12, scope: !7744)
!7771 = !DILocation(line: 1764, column: 18, scope: !7744)
!7772 = !DILocation(line: 1764, column: 10, scope: !7744)
!7773 = distinct !{!7773, !7763, !7771}
!7774 = !DILocation(line: 1766, column: 10, scope: !7744)
!7775 = !DILocation(line: 1766, column: 3, scope: !7744)
!7776 = distinct !DISubprogram(name: "next_set", scope: !3, file: !3, line: 1772, type: !7777, scopeLine: 1773, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7777 = !DISubroutineType(types: !7778)
!7778 = !{!3086, !9, !3086}
!7779 = !DILocalVariable(name: "regno", arg: 1, scope: !7776, file: !3, line: 1772, type: !9)
!7780 = !DILocation(line: 1772, column: 24, scope: !7776)
!7781 = !DILocalVariable(name: "expr", arg: 2, scope: !7776, file: !3, line: 1772, type: !3086)
!7782 = !DILocation(line: 1772, column: 44, scope: !7776)
!7783 = !DILocation(line: 1774, column: 3, scope: !7776)
!7784 = !DILocation(line: 1775, column: 12, scope: !7776)
!7785 = !DILocation(line: 1775, column: 18, scope: !7776)
!7786 = !DILocation(line: 1775, column: 10, scope: !7776)
!7787 = !DILocation(line: 1775, column: 5, scope: !7776)
!7788 = !DILocation(line: 1776, column: 10, scope: !7776)
!7789 = !DILocation(line: 1776, column: 15, scope: !7776)
!7790 = !DILocation(line: 1776, column: 18, scope: !7776)
!7791 = !DILocation(line: 1776, column: 51, scope: !7776)
!7792 = !DILocation(line: 1776, column: 48, scope: !7776)
!7793 = !DILocation(line: 0, scope: !7776)
!7794 = distinct !{!7794, !7783, !7795}
!7795 = !DILocation(line: 1776, column: 56, scope: !7776)
!7796 = !DILocation(line: 1778, column: 10, scope: !7776)
!7797 = !DILocation(line: 1778, column: 3, scope: !7776)
!7798 = distinct !DISubprogram(name: "mark_set", scope: !3, file: !3, line: 1922, type: !7799, scopeLine: 1923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7799 = !DISubroutineType(types: !7800)
!7800 = !{null, !1893, !1893}
!7801 = !DILocalVariable(name: "pat", arg: 1, scope: !7798, file: !3, line: 1922, type: !1893)
!7802 = !DILocation(line: 1922, column: 15, scope: !7798)
!7803 = !DILocalVariable(name: "insn", arg: 2, scope: !7798, file: !3, line: 1922, type: !1893)
!7804 = !DILocation(line: 1922, column: 24, scope: !7798)
!7805 = !DILocalVariable(name: "dest", scope: !7798, file: !3, line: 1924, type: !1893)
!7806 = !DILocation(line: 1924, column: 7, scope: !7798)
!7807 = !DILocation(line: 1924, column: 14, scope: !7798)
!7808 = !DILocation(line: 1926, column: 3, scope: !7798)
!7809 = !DILocation(line: 1926, column: 10, scope: !7798)
!7810 = !DILocation(line: 1926, column: 26, scope: !7798)
!7811 = !DILocation(line: 1927, column: 3, scope: !7798)
!7812 = !DILocation(line: 1927, column: 6, scope: !7798)
!7813 = !DILocation(line: 1927, column: 22, scope: !7798)
!7814 = !DILocation(line: 1928, column: 3, scope: !7798)
!7815 = !DILocation(line: 1928, column: 6, scope: !7798)
!7816 = !DILocation(line: 1928, column: 22, scope: !7798)
!7817 = !DILocation(line: 1929, column: 12, scope: !7798)
!7818 = !DILocation(line: 1929, column: 10, scope: !7798)
!7819 = distinct !{!7819, !7808, !7817}
!7820 = !DILocation(line: 1931, column: 7, scope: !7821)
!7821 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 1931, column: 7)
!7822 = !DILocation(line: 1931, column: 7, scope: !7798)
!7823 = !DILocation(line: 1932, column: 5, scope: !7821)
!7824 = !DILocation(line: 1933, column: 12, scope: !7825)
!7825 = distinct !DILexicalBlock(scope: !7821, file: !3, line: 1933, column: 12)
!7826 = !DILocation(line: 1933, column: 12, scope: !7821)
!7827 = !DILocation(line: 1934, column: 31, scope: !7825)
!7828 = !DILocation(line: 1934, column: 5, scope: !7825)
!7829 = !DILocation(line: 1936, column: 7, scope: !7830)
!7830 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 1936, column: 7)
!7831 = !DILocation(line: 1936, column: 32, scope: !7830)
!7832 = !DILocation(line: 1936, column: 7, scope: !7798)
!7833 = !DILocation(line: 1937, column: 16, scope: !7830)
!7834 = !DILocation(line: 1937, column: 5, scope: !7830)
!7835 = !DILocation(line: 1938, column: 1, scope: !7798)
!7836 = distinct !DISubprogram(name: "mark_clobber", scope: !3, file: !3, line: 1943, type: !7799, scopeLine: 1944, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7837 = !DILocalVariable(name: "pat", arg: 1, scope: !7836, file: !3, line: 1943, type: !1893)
!7838 = !DILocation(line: 1943, column: 19, scope: !7836)
!7839 = !DILocalVariable(name: "insn", arg: 2, scope: !7836, file: !3, line: 1943, type: !1893)
!7840 = !DILocation(line: 1943, column: 28, scope: !7836)
!7841 = !DILocalVariable(name: "clob", scope: !7836, file: !3, line: 1945, type: !1893)
!7842 = !DILocation(line: 1945, column: 7, scope: !7836)
!7843 = !DILocation(line: 1945, column: 14, scope: !7836)
!7844 = !DILocation(line: 1947, column: 3, scope: !7836)
!7845 = !DILocation(line: 1947, column: 10, scope: !7836)
!7846 = !DILocation(line: 1947, column: 26, scope: !7836)
!7847 = !DILocation(line: 1947, column: 36, scope: !7836)
!7848 = !DILocation(line: 1947, column: 39, scope: !7836)
!7849 = !DILocation(line: 1947, column: 55, scope: !7836)
!7850 = !DILocation(line: 1948, column: 12, scope: !7836)
!7851 = !DILocation(line: 1948, column: 10, scope: !7836)
!7852 = distinct !{!7852, !7844, !7850}
!7853 = !DILocation(line: 1950, column: 7, scope: !7854)
!7854 = distinct !DILexicalBlock(scope: !7836, file: !3, line: 1950, column: 7)
!7855 = !DILocation(line: 1950, column: 7, scope: !7836)
!7856 = !DILocation(line: 1951, column: 5, scope: !7854)
!7857 = !DILocation(line: 1953, column: 31, scope: !7854)
!7858 = !DILocation(line: 1953, column: 5, scope: !7854)
!7859 = !DILocation(line: 1954, column: 1, scope: !7836)
!7860 = distinct !DISubprogram(name: "bypass_block", scope: !3, file: !3, line: 2952, type: !7861, scopeLine: 2953, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!7861 = !DISubroutineType(types: !7862)
!7862 = !{!1917, !2448, !1893, !1893}
!7863 = !DILocalVariable(name: "bb", arg: 1, scope: !7860, file: !3, line: 2952, type: !2448)
!7864 = !DILocation(line: 2952, column: 27, scope: !7860)
!7865 = !DILocalVariable(name: "setcc", arg: 2, scope: !7860, file: !3, line: 2952, type: !1893)
!7866 = !DILocation(line: 2952, column: 35, scope: !7860)
!7867 = !DILocalVariable(name: "jump", arg: 3, scope: !7860, file: !3, line: 2952, type: !1893)
!7868 = !DILocation(line: 2952, column: 46, scope: !7860)
!7869 = !DILocalVariable(name: "insn", scope: !7860, file: !3, line: 2954, type: !1893)
!7870 = !DILocation(line: 2954, column: 7, scope: !7860)
!7871 = !DILocalVariable(name: "note", scope: !7860, file: !3, line: 2954, type: !1893)
!7872 = !DILocation(line: 2954, column: 13, scope: !7860)
!7873 = !DILocalVariable(name: "e", scope: !7860, file: !3, line: 2955, type: !2465)
!7874 = !DILocation(line: 2955, column: 8, scope: !7860)
!7875 = !DILocalVariable(name: "edest", scope: !7860, file: !3, line: 2955, type: !2465)
!7876 = !DILocation(line: 2955, column: 11, scope: !7860)
!7877 = !DILocalVariable(name: "i", scope: !7860, file: !3, line: 2956, type: !1917)
!7878 = !DILocation(line: 2956, column: 7, scope: !7860)
!7879 = !DILocalVariable(name: "change", scope: !7860, file: !3, line: 2956, type: !1917)
!7880 = !DILocation(line: 2956, column: 10, scope: !7860)
!7881 = !DILocalVariable(name: "may_be_loop_header", scope: !7860, file: !3, line: 2957, type: !1917)
!7882 = !DILocation(line: 2957, column: 7, scope: !7860)
!7883 = !DILocalVariable(name: "removed_p", scope: !7860, file: !3, line: 2958, type: !9)
!7884 = !DILocation(line: 2958, column: 12, scope: !7860)
!7885 = !DILocalVariable(name: "ei", scope: !7860, file: !3, line: 2959, type: !5117)
!7886 = !DILocation(line: 2959, column: 17, scope: !7860)
!7887 = !DILocation(line: 2961, column: 11, scope: !7860)
!7888 = !DILocation(line: 2961, column: 17, scope: !7860)
!7889 = !DILocation(line: 2961, column: 10, scope: !7860)
!7890 = !DILocation(line: 2961, column: 28, scope: !7860)
!7891 = !DILocation(line: 2961, column: 36, scope: !7860)
!7892 = !DILocation(line: 2961, column: 8, scope: !7860)
!7893 = !DILocation(line: 2964, column: 17, scope: !7860)
!7894 = !DILocation(line: 2965, column: 15, scope: !7860)
!7895 = !DILocation(line: 2965, column: 3, scope: !7860)
!7896 = !DILocation(line: 2966, column: 37, scope: !7860)
!7897 = !DILocation(line: 2966, column: 10, scope: !7860)
!7898 = !DILocation(line: 2966, column: 8, scope: !7860)
!7899 = !DILocation(line: 2967, column: 7, scope: !7900)
!7900 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 2967, column: 7)
!7901 = !DILocation(line: 2967, column: 7, scope: !7860)
!7902 = !DILocation(line: 2968, column: 22, scope: !7900)
!7903 = !DILocation(line: 2968, column: 5, scope: !7900)
!7904 = !DILocation(line: 2970, column: 22, scope: !7860)
!7905 = !DILocation(line: 2971, column: 3, scope: !7906)
!7906 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 2971, column: 3)
!7907 = !DILocation(line: 2971, column: 3, scope: !7908)
!7908 = distinct !DILexicalBlock(scope: !7906, file: !3, line: 2971, column: 3)
!7909 = !DILocation(line: 2972, column: 9, scope: !7910)
!7910 = distinct !DILexicalBlock(scope: !7908, file: !3, line: 2972, column: 9)
!7911 = !DILocation(line: 2972, column: 12, scope: !7910)
!7912 = !DILocation(line: 2972, column: 18, scope: !7910)
!7913 = !DILocation(line: 2972, column: 9, scope: !7908)
!7914 = !DILocation(line: 2974, column: 21, scope: !7915)
!7915 = distinct !DILexicalBlock(scope: !7910, file: !3, line: 2973, column: 7)
!7916 = !DILocation(line: 2975, column: 2, scope: !7915)
!7917 = !DILocation(line: 2972, column: 20, scope: !7910)
!7918 = distinct !{!7918, !7905, !7919}
!7919 = !DILocation(line: 2976, column: 7, scope: !7906)
!7920 = !DILocation(line: 2978, column: 10, scope: !7860)
!7921 = !DILocation(line: 2979, column: 13, scope: !7922)
!7922 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 2979, column: 3)
!7923 = !DILocation(line: 2979, column: 8, scope: !7922)
!7924 = !DILocation(line: 2979, column: 40, scope: !7925)
!7925 = distinct !DILexicalBlock(scope: !7922, file: !3, line: 2979, column: 3)
!7926 = !DILocation(line: 2979, column: 38, scope: !7925)
!7927 = !DILocation(line: 2979, column: 3, scope: !7922)
!7928 = !DILocation(line: 2981, column: 17, scope: !7929)
!7929 = distinct !DILexicalBlock(scope: !7925, file: !3, line: 2980, column: 5)
!7930 = !DILocation(line: 2983, column: 11, scope: !7931)
!7931 = distinct !DILexicalBlock(scope: !7929, file: !3, line: 2983, column: 11)
!7932 = !DILocation(line: 2983, column: 14, scope: !7931)
!7933 = !DILocation(line: 2983, column: 20, scope: !7931)
!7934 = !DILocation(line: 2983, column: 11, scope: !7929)
!7935 = !DILocation(line: 2985, column: 4, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7931, file: !3, line: 2984, column: 2)
!7937 = !DILocation(line: 2986, column: 4, scope: !7936)
!7938 = distinct !{!7938, !7927, !7939}
!7939 = !DILocation(line: 3094, column: 5, scope: !7922)
!7940 = !DILocation(line: 2990, column: 11, scope: !7941)
!7941 = distinct !DILexicalBlock(scope: !7929, file: !3, line: 2990, column: 11)
!7942 = !DILocation(line: 2990, column: 14, scope: !7941)
!7943 = !DILocation(line: 2990, column: 19, scope: !7941)
!7944 = !DILocation(line: 2990, column: 28, scope: !7941)
!7945 = !DILocation(line: 2990, column: 25, scope: !7941)
!7946 = !DILocation(line: 2990, column: 11, scope: !7929)
!7947 = !DILocation(line: 2992, column: 4, scope: !7948)
!7948 = distinct !DILexicalBlock(scope: !7941, file: !3, line: 2991, column: 2)
!7949 = !DILocation(line: 2993, column: 4, scope: !7948)
!7950 = !DILocation(line: 2999, column: 11, scope: !7951)
!7951 = distinct !DILexicalBlock(scope: !7929, file: !3, line: 2999, column: 11)
!7952 = !DILocation(line: 3000, column: 4, scope: !7951)
!7953 = !DILocation(line: 3000, column: 9, scope: !7951)
!7954 = !DILocation(line: 3000, column: 12, scope: !7951)
!7955 = !DILocation(line: 3000, column: 18, scope: !7951)
!7956 = !DILocation(line: 2999, column: 11, scope: !7929)
!7957 = !DILocation(line: 3002, column: 4, scope: !7958)
!7958 = distinct !DILexicalBlock(scope: !7951, file: !3, line: 3001, column: 2)
!7959 = !DILocation(line: 3003, column: 4, scope: !7958)
!7960 = !DILocation(line: 3006, column: 14, scope: !7961)
!7961 = distinct !DILexicalBlock(scope: !7929, file: !3, line: 3006, column: 7)
!7962 = !DILocation(line: 3006, column: 12, scope: !7961)
!7963 = !DILocation(line: 3006, column: 19, scope: !7964)
!7964 = distinct !DILexicalBlock(scope: !7961, file: !3, line: 3006, column: 7)
!7965 = !DILocation(line: 3006, column: 23, scope: !7964)
!7966 = !DILocation(line: 3006, column: 21, scope: !7964)
!7967 = !DILocation(line: 3006, column: 7, scope: !7961)
!7968 = !DILocalVariable(name: "reg_used", scope: !7969, file: !3, line: 3008, type: !3650)
!7969 = distinct !DILexicalBlock(scope: !7964, file: !3, line: 3007, column: 2)
!7970 = !DILocation(line: 3008, column: 20, scope: !7969)
!7971 = !DILocation(line: 3008, column: 46, scope: !7969)
!7972 = !DILocation(line: 3008, column: 32, scope: !7969)
!7973 = !DILocalVariable(name: "regno", scope: !7969, file: !3, line: 3009, type: !9)
!7974 = !DILocation(line: 3009, column: 17, scope: !7969)
!7975 = !DILocation(line: 3009, column: 25, scope: !7969)
!7976 = !DILocalVariable(name: "dest", scope: !7969, file: !3, line: 3010, type: !2448)
!7977 = !DILocation(line: 3010, column: 16, scope: !7969)
!7978 = !DILocalVariable(name: "old_dest", scope: !7969, file: !3, line: 3010, type: !2448)
!7979 = !DILocation(line: 3010, column: 22, scope: !7969)
!7980 = !DILocalVariable(name: "set", scope: !7969, file: !3, line: 3011, type: !3086)
!7981 = !DILocation(line: 3011, column: 17, scope: !7969)
!7982 = !DILocalVariable(name: "src", scope: !7969, file: !3, line: 3012, type: !1893)
!7983 = !DILocation(line: 3012, column: 8, scope: !7969)
!7984 = !DILocalVariable(name: "new_rtx", scope: !7969, file: !3, line: 3012, type: !1893)
!7985 = !DILocation(line: 3012, column: 13, scope: !7969)
!7986 = !DILocation(line: 3014, column: 27, scope: !7969)
!7987 = !DILocation(line: 3014, column: 34, scope: !7969)
!7988 = !DILocation(line: 3014, column: 37, scope: !7969)
!7989 = !DILocation(line: 3014, column: 42, scope: !7969)
!7990 = !DILocation(line: 3014, column: 10, scope: !7969)
!7991 = !DILocation(line: 3014, column: 8, scope: !7969)
!7992 = !DILocation(line: 3016, column: 10, scope: !7993)
!7993 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 3016, column: 8)
!7994 = !DILocation(line: 3016, column: 8, scope: !7969)
!7995 = !DILocation(line: 3017, column: 6, scope: !7993)
!7996 = !DILocation(line: 3020, column: 8, scope: !7997)
!7997 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 3020, column: 8)
!7998 = !DILocation(line: 3020, column: 11, scope: !7997)
!7999 = !DILocation(line: 3020, column: 17, scope: !7997)
!8000 = !DILocation(line: 3020, column: 19, scope: !7997)
!8001 = !DILocation(line: 3020, column: 42, scope: !7997)
!8002 = !DILocation(line: 3020, column: 52, scope: !7997)
!8003 = !DILocation(line: 3020, column: 61, scope: !7997)
!8004 = !DILocation(line: 3020, column: 22, scope: !7997)
!8005 = !DILocation(line: 3020, column: 8, scope: !7969)
!8006 = !DILocation(line: 3021, column: 6, scope: !7997)
!8007 = !DILocation(line: 3023, column: 10, scope: !7969)
!8008 = !DILocation(line: 3023, column: 8, scope: !7969)
!8009 = !DILocation(line: 3025, column: 8, scope: !8010)
!8010 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 3025, column: 8)
!8011 = !DILocation(line: 3025, column: 14, scope: !8010)
!8012 = !DILocation(line: 3025, column: 8, scope: !7969)
!8013 = !DILocation(line: 3026, column: 34, scope: !8010)
!8014 = !DILocation(line: 3027, column: 6, scope: !8010)
!8015 = !DILocation(line: 3028, column: 6, scope: !8010)
!8016 = !DILocation(line: 3026, column: 12, scope: !8010)
!8017 = !DILocation(line: 3026, column: 10, scope: !8010)
!8018 = !DILocation(line: 3026, column: 6, scope: !8010)
!8019 = !DILocation(line: 3030, column: 36, scope: !7969)
!8020 = !DILocation(line: 3030, column: 41, scope: !7969)
!8021 = !DILocation(line: 3030, column: 51, scope: !7969)
!8022 = !DILocation(line: 3031, column: 8, scope: !7969)
!8023 = !DILocation(line: 3030, column: 14, scope: !7969)
!8024 = !DILocation(line: 3030, column: 12, scope: !7969)
!8025 = !DILocation(line: 3038, column: 8, scope: !8026)
!8026 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 3038, column: 8)
!8027 = !DILocation(line: 3038, column: 19, scope: !8026)
!8028 = !DILocation(line: 3038, column: 16, scope: !8026)
!8029 = !DILocation(line: 3038, column: 8, scope: !7969)
!8030 = !DILocation(line: 3040, column: 16, scope: !8031)
!8031 = distinct !DILexicalBlock(scope: !8026, file: !3, line: 3039, column: 6)
!8032 = !DILocation(line: 3040, column: 14, scope: !8031)
!8033 = !DILocation(line: 3041, column: 15, scope: !8031)
!8034 = !DILocation(line: 3041, column: 22, scope: !8031)
!8035 = !DILocation(line: 3041, column: 28, scope: !8031)
!8036 = !DILocation(line: 3041, column: 39, scope: !8031)
!8037 = !DILocation(line: 3041, column: 46, scope: !8031)
!8038 = !DILocation(line: 3041, column: 13, scope: !8031)
!8039 = !DILocation(line: 3042, column: 6, scope: !8031)
!8040 = !DILocation(line: 3043, column: 13, scope: !8041)
!8041 = distinct !DILexicalBlock(scope: !8026, file: !3, line: 3043, column: 13)
!8042 = !DILocation(line: 3043, column: 32, scope: !8041)
!8043 = !DILocation(line: 3043, column: 13, scope: !8026)
!8044 = !DILocation(line: 3045, column: 15, scope: !8045)
!8045 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 3044, column: 6)
!8046 = !DILocation(line: 3045, column: 13, scope: !8045)
!8047 = !DILocation(line: 3047, column: 27, scope: !8045)
!8048 = !DILocation(line: 3047, column: 31, scope: !8045)
!8049 = !DILocation(line: 3047, column: 16, scope: !8045)
!8050 = !DILocation(line: 3047, column: 14, scope: !8045)
!8051 = !DILocation(line: 3048, column: 12, scope: !8052)
!8052 = distinct !DILexicalBlock(scope: !8045, file: !3, line: 3048, column: 12)
!8053 = !DILocation(line: 3048, column: 18, scope: !8052)
!8054 = !DILocation(line: 3048, column: 21, scope: !8052)
!8055 = !DILocation(line: 3048, column: 28, scope: !8052)
!8056 = !DILocation(line: 3048, column: 34, scope: !8052)
!8057 = !DILocation(line: 3048, column: 12, scope: !8045)
!8058 = !DILocation(line: 3049, column: 8, scope: !8052)
!8059 = !DILocation(line: 3049, column: 3, scope: !8052)
!8060 = !DILocation(line: 3050, column: 6, scope: !8045)
!8061 = !DILocation(line: 3052, column: 11, scope: !8041)
!8062 = !DILocation(line: 3058, column: 8, scope: !8063)
!8063 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 3058, column: 8)
!8064 = !DILocation(line: 3058, column: 13, scope: !8063)
!8065 = !DILocation(line: 3058, column: 16, scope: !8063)
!8066 = !DILocation(line: 3058, column: 22, scope: !8063)
!8067 = !DILocation(line: 3058, column: 26, scope: !8063)
!8068 = !DILocation(line: 3059, column: 8, scope: !8063)
!8069 = !DILocation(line: 3059, column: 22, scope: !8063)
!8070 = !DILocation(line: 3059, column: 25, scope: !8063)
!8071 = !DILocation(line: 3059, column: 30, scope: !8063)
!8072 = !DILocation(line: 3059, column: 11, scope: !8063)
!8073 = !DILocation(line: 3058, column: 8, scope: !7969)
!8074 = !DILocation(line: 3060, column: 11, scope: !8063)
!8075 = !DILocation(line: 3060, column: 6, scope: !8063)
!8076 = !DILocation(line: 3062, column: 15, scope: !7969)
!8077 = !DILocation(line: 3062, column: 18, scope: !7969)
!8078 = !DILocation(line: 3062, column: 13, scope: !7969)
!8079 = !DILocation(line: 3063, column: 8, scope: !8080)
!8080 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 3063, column: 8)
!8081 = !DILocation(line: 3063, column: 13, scope: !8080)
!8082 = !DILocation(line: 3064, column: 8, scope: !8080)
!8083 = !DILocation(line: 3064, column: 11, scope: !8080)
!8084 = !DILocation(line: 3064, column: 19, scope: !8080)
!8085 = !DILocation(line: 3064, column: 16, scope: !8080)
!8086 = !DILocation(line: 3065, column: 8, scope: !8080)
!8087 = !DILocation(line: 3065, column: 11, scope: !8080)
!8088 = !DILocation(line: 3065, column: 19, scope: !8080)
!8089 = !DILocation(line: 3065, column: 16, scope: !8080)
!8090 = !DILocation(line: 3063, column: 8, scope: !7969)
!8091 = !DILocation(line: 3067, column: 40, scope: !8092)
!8092 = distinct !DILexicalBlock(scope: !8080, file: !3, line: 3066, column: 13)
!8093 = !DILocation(line: 3067, column: 43, scope: !8092)
!8094 = !DILocation(line: 3067, column: 8, scope: !8092)
!8095 = !DILocation(line: 3071, column: 12, scope: !8096)
!8096 = distinct !DILexicalBlock(scope: !8092, file: !3, line: 3071, column: 12)
!8097 = !DILocation(line: 3071, column: 12, scope: !8092)
!8098 = !DILocalVariable(name: "pat", scope: !8099, file: !3, line: 3073, type: !1893)
!8099 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 3072, column: 3)
!8100 = !DILocation(line: 3073, column: 9, scope: !8099)
!8101 = !DILocation(line: 3073, column: 15, scope: !8099)
!8102 = !DILocation(line: 3074, column: 10, scope: !8103)
!8103 = distinct !DILexicalBlock(scope: !8099, file: !3, line: 3074, column: 9)
!8104 = !DILocation(line: 3074, column: 9, scope: !8099)
!8105 = !DILocation(line: 3075, column: 39, scope: !8103)
!8106 = !DILocation(line: 3075, column: 28, scope: !8103)
!8107 = !DILocation(line: 3075, column: 45, scope: !8103)
!8108 = !DILocation(line: 3075, column: 7, scope: !8103)
!8109 = !DILocation(line: 3076, column: 3, scope: !8099)
!8110 = !DILocation(line: 3078, column: 12, scope: !8111)
!8111 = distinct !DILexicalBlock(scope: !8092, file: !3, line: 3078, column: 12)
!8112 = !DILocation(line: 3078, column: 22, scope: !8111)
!8113 = !DILocation(line: 3078, column: 12, scope: !8092)
!8114 = !DILocation(line: 3080, column: 14, scope: !8115)
!8115 = distinct !DILexicalBlock(scope: !8111, file: !3, line: 3079, column: 3)
!8116 = !DILocation(line: 3082, column: 7, scope: !8115)
!8117 = !DILocation(line: 3082, column: 14, scope: !8115)
!8118 = !DILocation(line: 3080, column: 5, scope: !8115)
!8119 = !DILocation(line: 3083, column: 16, scope: !8115)
!8120 = !DILocation(line: 3083, column: 27, scope: !8115)
!8121 = !DILocation(line: 3083, column: 5, scope: !8115)
!8122 = !DILocation(line: 3084, column: 14, scope: !8115)
!8123 = !DILocation(line: 3085, column: 7, scope: !8115)
!8124 = !DILocation(line: 3085, column: 10, scope: !8115)
!8125 = !DILocation(line: 3085, column: 15, scope: !8115)
!8126 = !DILocation(line: 3085, column: 22, scope: !8115)
!8127 = !DILocation(line: 3085, column: 32, scope: !8115)
!8128 = !DILocation(line: 3085, column: 39, scope: !8115)
!8129 = !DILocation(line: 3085, column: 45, scope: !8115)
!8130 = !DILocation(line: 3084, column: 5, scope: !8115)
!8131 = !DILocation(line: 3086, column: 3, scope: !8115)
!8132 = !DILocation(line: 3087, column: 15, scope: !8092)
!8133 = !DILocation(line: 3088, column: 18, scope: !8092)
!8134 = !DILocation(line: 3089, column: 8, scope: !8092)
!8135 = !DILocation(line: 3091, column: 2, scope: !7969)
!8136 = !DILocation(line: 3006, column: 39, scope: !7964)
!8137 = !DILocation(line: 3006, column: 7, scope: !7964)
!8138 = distinct !{!8138, !7967, !8139}
!8139 = !DILocation(line: 3091, column: 2, scope: !7961)
!8140 = !DILocation(line: 3092, column: 12, scope: !8141)
!8141 = distinct !DILexicalBlock(scope: !7929, file: !3, line: 3092, column: 11)
!8142 = !DILocation(line: 3092, column: 11, scope: !7929)
!8143 = !DILocation(line: 3093, column: 2, scope: !8141)
!8144 = !DILocation(line: 2979, column: 3, scope: !7925)
!8145 = !DILocation(line: 3095, column: 10, scope: !7860)
!8146 = !DILocation(line: 3095, column: 3, scope: !7860)
!8147 = distinct !DISubprogram(name: "ei_cond", scope: !146, file: !146, line: 771, type: !8148, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8148 = !DISubroutineType(types: !8149)
!8149 = !{!6, !5117, !3293}
!8150 = !DILocalVariable(name: "ei", arg: 1, scope: !8147, file: !146, line: 771, type: !5117)
!8151 = !DILocation(line: 771, column: 24, scope: !8147)
!8152 = !DILocalVariable(name: "p", arg: 2, scope: !8147, file: !146, line: 771, type: !3293)
!8153 = !DILocation(line: 771, column: 34, scope: !8147)
!8154 = !DILocation(line: 773, column: 8, scope: !8155)
!8155 = distinct !DILexicalBlock(scope: !8147, file: !146, line: 773, column: 7)
!8156 = !DILocation(line: 773, column: 7, scope: !8147)
!8157 = !DILocation(line: 775, column: 12, scope: !8158)
!8158 = distinct !DILexicalBlock(scope: !8155, file: !146, line: 774, column: 5)
!8159 = !DILocation(line: 775, column: 8, scope: !8158)
!8160 = !DILocation(line: 775, column: 10, scope: !8158)
!8161 = !DILocation(line: 776, column: 7, scope: !8158)
!8162 = !DILocation(line: 780, column: 8, scope: !8163)
!8163 = distinct !DILexicalBlock(scope: !8155, file: !146, line: 779, column: 5)
!8164 = !DILocation(line: 780, column: 10, scope: !8163)
!8165 = !DILocation(line: 781, column: 7, scope: !8163)
!8166 = !DILocation(line: 783, column: 1, scope: !8147)
!8167 = distinct !DISubprogram(name: "find_bypass_set", scope: !3, file: !3, line: 2889, type: !8168, scopeLine: 2890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8168 = !DISubroutineType(types: !8169)
!8169 = !{!3086, !1917, !1917}
!8170 = !DILocalVariable(name: "regno", arg: 1, scope: !8167, file: !3, line: 2889, type: !1917)
!8171 = !DILocation(line: 2889, column: 22, scope: !8167)
!8172 = !DILocalVariable(name: "bb", arg: 2, scope: !8167, file: !3, line: 2889, type: !1917)
!8173 = !DILocation(line: 2889, column: 33, scope: !8167)
!8174 = !DILocalVariable(name: "result", scope: !8167, file: !3, line: 2891, type: !3086)
!8175 = !DILocation(line: 2891, column: 16, scope: !8167)
!8176 = !DILocation(line: 2893, column: 3, scope: !8167)
!8177 = !DILocalVariable(name: "src", scope: !8178, file: !3, line: 2895, type: !1893)
!8178 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 2894, column: 5)
!8179 = distinct !DILexicalBlock(scope: !8180, file: !3, line: 2893, column: 3)
!8180 = distinct !DILexicalBlock(scope: !8167, file: !3, line: 2893, column: 3)
!8181 = !DILocation(line: 2895, column: 11, scope: !8178)
!8182 = !DILocalVariable(name: "set", scope: !8178, file: !3, line: 2896, type: !3086)
!8183 = !DILocation(line: 2896, column: 20, scope: !8178)
!8184 = !DILocation(line: 2896, column: 38, scope: !8178)
!8185 = !DILocation(line: 2896, column: 26, scope: !8178)
!8186 = !DILocation(line: 2898, column: 7, scope: !8178)
!8187 = !DILocation(line: 2898, column: 14, scope: !8178)
!8188 = !DILocation(line: 2900, column: 8, scope: !8189)
!8189 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 2900, column: 8)
!8190 = distinct !DILexicalBlock(scope: !8178, file: !3, line: 2899, column: 2)
!8191 = !DILocation(line: 2900, column: 8, scope: !8190)
!8192 = !DILocation(line: 2901, column: 6, scope: !8189)
!8193 = !DILocation(line: 2902, column: 20, scope: !8190)
!8194 = !DILocation(line: 2902, column: 27, scope: !8190)
!8195 = !DILocation(line: 2902, column: 10, scope: !8190)
!8196 = !DILocation(line: 2902, column: 8, scope: !8190)
!8197 = distinct !{!8197, !8186, !8198}
!8198 = !DILocation(line: 2903, column: 2, scope: !8178)
!8199 = !DILocation(line: 2905, column: 11, scope: !8200)
!8200 = distinct !DILexicalBlock(scope: !8178, file: !3, line: 2905, column: 11)
!8201 = !DILocation(line: 2905, column: 15, scope: !8200)
!8202 = !DILocation(line: 2905, column: 11, scope: !8178)
!8203 = !DILocation(line: 2906, column: 2, scope: !8200)
!8204 = !DILocation(line: 2908, column: 7, scope: !8178)
!8205 = !DILocation(line: 2910, column: 13, scope: !8178)
!8206 = !DILocation(line: 2910, column: 11, scope: !8178)
!8207 = !DILocation(line: 2911, column: 28, scope: !8208)
!8208 = distinct !DILexicalBlock(scope: !8178, file: !3, line: 2911, column: 11)
!8209 = !DILocation(line: 2911, column: 11, scope: !8208)
!8210 = !DILocation(line: 2911, column: 11, scope: !8178)
!8211 = !DILocation(line: 2912, column: 11, scope: !8208)
!8212 = !DILocation(line: 2912, column: 9, scope: !8208)
!8213 = !DILocation(line: 2912, column: 2, scope: !8208)
!8214 = !DILocation(line: 2914, column: 13, scope: !8215)
!8215 = distinct !DILexicalBlock(scope: !8178, file: !3, line: 2914, column: 11)
!8216 = !DILocation(line: 2914, column: 11, scope: !8178)
!8217 = !DILocation(line: 2915, column: 2, scope: !8215)
!8218 = !DILocation(line: 2917, column: 15, scope: !8178)
!8219 = !DILocation(line: 2917, column: 13, scope: !8178)
!8220 = !DILocation(line: 2893, column: 3, scope: !8179)
!8221 = distinct !{!8221, !8222, !8223}
!8222 = !DILocation(line: 2893, column: 3, scope: !8180)
!8223 = !DILocation(line: 2918, column: 5, scope: !8180)
!8224 = !DILocation(line: 2919, column: 10, scope: !8167)
!8225 = !DILocation(line: 2919, column: 3, scope: !8167)
!8226 = distinct !DISubprogram(name: "reg_killed_on_edge", scope: !3, file: !3, line: 2930, type: !8227, scopeLine: 2931, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8227 = !DISubroutineType(types: !8228)
!8228 = !{!6, !3232, !8229}
!8229 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !1894, line: 109, baseType: !8230)
!8230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8231, size: 64)
!8231 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2467)
!8232 = !DILocalVariable(name: "reg", arg: 1, scope: !8226, file: !3, line: 2930, type: !3232)
!8233 = !DILocation(line: 2930, column: 31, scope: !8226)
!8234 = !DILocalVariable(name: "e", arg: 2, scope: !8226, file: !3, line: 2930, type: !8229)
!8235 = !DILocation(line: 2930, column: 47, scope: !8226)
!8236 = !DILocalVariable(name: "insn", scope: !8226, file: !3, line: 2932, type: !1893)
!8237 = !DILocation(line: 2932, column: 7, scope: !8226)
!8238 = !DILocation(line: 2934, column: 15, scope: !8239)
!8239 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 2934, column: 3)
!8240 = !DILocation(line: 2934, column: 18, scope: !8239)
!8241 = !DILocation(line: 2934, column: 24, scope: !8239)
!8242 = !DILocation(line: 2934, column: 13, scope: !8239)
!8243 = !DILocation(line: 2934, column: 8, scope: !8239)
!8244 = !DILocation(line: 2934, column: 27, scope: !8245)
!8245 = distinct !DILexicalBlock(scope: !8239, file: !3, line: 2934, column: 3)
!8246 = !DILocation(line: 2934, column: 3, scope: !8239)
!8247 = !DILocation(line: 2935, column: 9, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8245, file: !3, line: 2935, column: 9)
!8249 = !DILocation(line: 2935, column: 23, scope: !8248)
!8250 = !DILocation(line: 2935, column: 37, scope: !8248)
!8251 = !DILocation(line: 2935, column: 42, scope: !8248)
!8252 = !DILocation(line: 2935, column: 26, scope: !8248)
!8253 = !DILocation(line: 2935, column: 9, scope: !8245)
!8254 = !DILocation(line: 2936, column: 7, scope: !8248)
!8255 = !DILocation(line: 2935, column: 46, scope: !8248)
!8256 = !DILocation(line: 2934, column: 40, scope: !8245)
!8257 = !DILocation(line: 2934, column: 38, scope: !8245)
!8258 = !DILocation(line: 2934, column: 3, scope: !8245)
!8259 = distinct !{!8259, !8246, !8260}
!8260 = !DILocation(line: 2936, column: 14, scope: !8239)
!8261 = !DILocation(line: 2938, column: 3, scope: !8226)
!8262 = !DILocation(line: 2939, column: 1, scope: !8226)
!8263 = distinct !DISubprogram(name: "free_modify_mem_tables", scope: !3, file: !3, line: 1820, type: !3321, scopeLine: 1821, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8264 = !DILocation(line: 1822, column: 3, scope: !8263)
!8265 = !DILocation(line: 1823, column: 9, scope: !8263)
!8266 = !DILocation(line: 1823, column: 3, scope: !8263)
!8267 = !DILocation(line: 1824, column: 9, scope: !8263)
!8268 = !DILocation(line: 1824, column: 3, scope: !8263)
!8269 = !DILocation(line: 1825, column: 19, scope: !8263)
!8270 = !DILocation(line: 1826, column: 25, scope: !8263)
!8271 = !DILocation(line: 1827, column: 1, scope: !8263)
!8272 = distinct !DISubprogram(name: "one_pre_gcse_pass", scope: !3, file: !3, line: 3943, type: !3488, scopeLine: 3944, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8273 = !DILocalVariable(name: "changed", scope: !8272, file: !3, line: 3945, type: !1917)
!8274 = !DILocation(line: 3945, column: 7, scope: !8272)
!8275 = !DILocation(line: 3947, column: 20, scope: !8272)
!8276 = !DILocation(line: 3948, column: 21, scope: !8272)
!8277 = !DILocation(line: 3951, column: 7, scope: !8278)
!8278 = distinct !DILexicalBlock(scope: !8272, file: !3, line: 3951, column: 7)
!8279 = !DILocation(line: 3951, column: 22, scope: !8278)
!8280 = !DILocation(line: 3952, column: 7, scope: !8278)
!8281 = !DILocation(line: 3952, column: 10, scope: !8278)
!8282 = !DILocation(line: 3951, column: 7, scope: !8272)
!8283 = !DILocation(line: 3953, column: 5, scope: !8278)
!8284 = !DILocation(line: 3956, column: 3, scope: !8272)
!8285 = !DILocation(line: 3958, column: 14, scope: !8272)
!8286 = !DILocation(line: 3959, column: 3, scope: !8272)
!8287 = !DILocation(line: 3960, column: 3, scope: !8272)
!8288 = !DILocation(line: 3962, column: 3, scope: !8272)
!8289 = !DILocation(line: 3963, column: 3, scope: !8272)
!8290 = !DILocation(line: 3964, column: 7, scope: !8291)
!8291 = distinct !DILexicalBlock(scope: !8272, file: !3, line: 3964, column: 7)
!8292 = !DILocation(line: 3964, column: 7, scope: !8272)
!8293 = !DILocation(line: 3965, column: 5, scope: !8291)
!8294 = !DILocation(line: 3967, column: 3, scope: !8272)
!8295 = !DILocation(line: 3968, column: 3, scope: !8272)
!8296 = !DILocation(line: 3969, column: 7, scope: !8297)
!8297 = distinct !DILexicalBlock(scope: !8272, file: !3, line: 3969, column: 7)
!8298 = !DILocation(line: 3969, column: 7, scope: !8272)
!8299 = !DILocation(line: 3970, column: 22, scope: !8297)
!8300 = !DILocation(line: 3970, column: 5, scope: !8297)
!8301 = !DILocation(line: 3972, column: 23, scope: !8302)
!8302 = distinct !DILexicalBlock(scope: !8272, file: !3, line: 3972, column: 7)
!8303 = !DILocation(line: 3972, column: 31, scope: !8302)
!8304 = !DILocation(line: 3972, column: 7, scope: !8272)
!8305 = !DILocation(line: 3974, column: 22, scope: !8306)
!8306 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 3973, column: 5)
!8307 = !DILocation(line: 3974, column: 56, scope: !8306)
!8308 = !DILocation(line: 3974, column: 7, scope: !8306)
!8309 = !DILocation(line: 3975, column: 7, scope: !8306)
!8310 = !DILocation(line: 3976, column: 18, scope: !8306)
!8311 = !DILocation(line: 3976, column: 15, scope: !8306)
!8312 = !DILocation(line: 3977, column: 23, scope: !8306)
!8313 = !DILocation(line: 3977, column: 7, scope: !8306)
!8314 = !DILocation(line: 3978, column: 7, scope: !8306)
!8315 = !DILocation(line: 3979, column: 5, scope: !8306)
!8316 = !DILocation(line: 3981, column: 3, scope: !8272)
!8317 = !DILocation(line: 3982, column: 3, scope: !8272)
!8318 = !DILocation(line: 3983, column: 3, scope: !8272)
!8319 = !DILocation(line: 3985, column: 3, scope: !8272)
!8320 = !DILocation(line: 3986, column: 3, scope: !8272)
!8321 = !DILocation(line: 3989, column: 3, scope: !8272)
!8322 = !DILocation(line: 3991, column: 7, scope: !8323)
!8323 = distinct !DILexicalBlock(scope: !8272, file: !3, line: 3991, column: 7)
!8324 = !DILocation(line: 3991, column: 7, scope: !8272)
!8325 = !DILocation(line: 3993, column: 16, scope: !8326)
!8326 = distinct !DILexicalBlock(scope: !8323, file: !3, line: 3992, column: 5)
!8327 = !DILocation(line: 3994, column: 9, scope: !8326)
!8328 = !DILocation(line: 3994, column: 35, scope: !8326)
!8329 = !DILocation(line: 3994, column: 51, scope: !8326)
!8330 = !DILocation(line: 3993, column: 7, scope: !8326)
!8331 = !DILocation(line: 3995, column: 16, scope: !8326)
!8332 = !DILocation(line: 3996, column: 9, scope: !8326)
!8333 = !DILocation(line: 3996, column: 27, scope: !8326)
!8334 = !DILocation(line: 3995, column: 7, scope: !8326)
!8335 = !DILocation(line: 3997, column: 5, scope: !8326)
!8336 = !DILocation(line: 3999, column: 10, scope: !8272)
!8337 = !DILocation(line: 3999, column: 3, scope: !8272)
!8338 = !DILocation(line: 4000, column: 1, scope: !8272)
!8339 = distinct !DISubprogram(name: "compute_ld_motion_mems", scope: !3, file: !3, line: 4733, type: !3321, scopeLine: 4734, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8340 = !DILocalVariable(name: "ptr", scope: !8339, file: !3, line: 4735, type: !3110)
!8341 = !DILocation(line: 4735, column: 20, scope: !8339)
!8342 = !DILocalVariable(name: "bb", scope: !8339, file: !3, line: 4736, type: !2448)
!8343 = !DILocation(line: 4736, column: 15, scope: !8339)
!8344 = !DILocalVariable(name: "insn", scope: !8339, file: !3, line: 4737, type: !1893)
!8345 = !DILocation(line: 4737, column: 7, scope: !8339)
!8346 = !DILocation(line: 4739, column: 17, scope: !8339)
!8347 = !DILocation(line: 4740, column: 20, scope: !8339)
!8348 = !DILocation(line: 4740, column: 18, scope: !8339)
!8349 = !DILocation(line: 4743, column: 3, scope: !8350)
!8350 = distinct !DILexicalBlock(scope: !8339, file: !3, line: 4743, column: 3)
!8351 = !DILocation(line: 4743, column: 3, scope: !8352)
!8352 = distinct !DILexicalBlock(scope: !8350, file: !3, line: 4743, column: 3)
!8353 = !DILocation(line: 4745, column: 7, scope: !8354)
!8354 = distinct !DILexicalBlock(scope: !8355, file: !3, line: 4745, column: 7)
!8355 = distinct !DILexicalBlock(scope: !8352, file: !3, line: 4744, column: 5)
!8356 = !DILocation(line: 4745, column: 7, scope: !8357)
!8357 = distinct !DILexicalBlock(scope: !8354, file: !3, line: 4745, column: 7)
!8358 = !DILocation(line: 0, scope: !8357)
!8359 = !DILocation(line: 4747, column: 8, scope: !8360)
!8360 = distinct !DILexicalBlock(scope: !8361, file: !3, line: 4747, column: 8)
!8361 = distinct !DILexicalBlock(scope: !8357, file: !3, line: 4746, column: 2)
!8362 = !DILocation(line: 4747, column: 8, scope: !8361)
!8363 = !DILocation(line: 4749, column: 12, scope: !8364)
!8364 = distinct !DILexicalBlock(scope: !8365, file: !3, line: 4749, column: 12)
!8365 = distinct !DILexicalBlock(scope: !8360, file: !3, line: 4748, column: 6)
!8366 = !DILocation(line: 4749, column: 38, scope: !8364)
!8367 = !DILocation(line: 4749, column: 12, scope: !8365)
!8368 = !DILocalVariable(name: "src", scope: !8369, file: !3, line: 4751, type: !1893)
!8369 = distinct !DILexicalBlock(scope: !8364, file: !3, line: 4750, column: 3)
!8370 = !DILocation(line: 4751, column: 9, scope: !8369)
!8371 = !DILocation(line: 4751, column: 15, scope: !8369)
!8372 = !DILocalVariable(name: "dest", scope: !8369, file: !3, line: 4752, type: !1893)
!8373 = !DILocation(line: 4752, column: 9, scope: !8369)
!8374 = !DILocation(line: 4752, column: 16, scope: !8369)
!8375 = !DILocation(line: 4755, column: 9, scope: !8376)
!8376 = distinct !DILexicalBlock(scope: !8369, file: !3, line: 4755, column: 9)
!8377 = !DILocation(line: 4755, column: 21, scope: !8376)
!8378 = !DILocation(line: 4755, column: 36, scope: !8376)
!8379 = !DILocation(line: 4755, column: 24, scope: !8376)
!8380 = !DILocation(line: 4755, column: 9, scope: !8369)
!8381 = !DILocation(line: 4757, column: 27, scope: !8382)
!8382 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 4756, column: 7)
!8383 = !DILocation(line: 4757, column: 15, scope: !8382)
!8384 = !DILocation(line: 4757, column: 13, scope: !8382)
!8385 = !DILocation(line: 4758, column: 13, scope: !8386)
!8386 = distinct !DILexicalBlock(scope: !8382, file: !3, line: 4758, column: 13)
!8387 = !DILocation(line: 4758, column: 13, scope: !8382)
!8388 = !DILocation(line: 4759, column: 34, scope: !8386)
!8389 = !DILocation(line: 4759, column: 40, scope: !8386)
!8390 = !DILocation(line: 4759, column: 45, scope: !8386)
!8391 = !DILocation(line: 4759, column: 17, scope: !8386)
!8392 = !DILocation(line: 4759, column: 4, scope: !8386)
!8393 = !DILocation(line: 4759, column: 9, scope: !8386)
!8394 = !DILocation(line: 4759, column: 15, scope: !8386)
!8395 = !DILocation(line: 4761, column: 4, scope: !8386)
!8396 = !DILocation(line: 4761, column: 9, scope: !8386)
!8397 = !DILocation(line: 4761, column: 17, scope: !8386)
!8398 = !DILocation(line: 4762, column: 7, scope: !8382)
!8399 = !DILocation(line: 4766, column: 37, scope: !8400)
!8400 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 4764, column: 7)
!8401 = !DILocation(line: 4766, column: 9, scope: !8400)
!8402 = !DILocation(line: 4773, column: 9, scope: !8403)
!8403 = distinct !DILexicalBlock(scope: !8369, file: !3, line: 4773, column: 9)
!8404 = !DILocation(line: 4773, column: 22, scope: !8403)
!8405 = !DILocation(line: 4773, column: 37, scope: !8403)
!8406 = !DILocation(line: 4773, column: 25, scope: !8403)
!8407 = !DILocation(line: 4773, column: 9, scope: !8369)
!8408 = !DILocation(line: 4775, column: 27, scope: !8409)
!8409 = distinct !DILexicalBlock(scope: !8403, file: !3, line: 4774, column: 7)
!8410 = !DILocation(line: 4775, column: 15, scope: !8409)
!8411 = !DILocation(line: 4775, column: 13, scope: !8409)
!8412 = !DILocation(line: 4777, column: 15, scope: !8413)
!8413 = distinct !DILexicalBlock(scope: !8409, file: !3, line: 4777, column: 13)
!8414 = !DILocation(line: 4778, column: 6, scope: !8413)
!8415 = !DILocation(line: 4778, column: 9, scope: !8413)
!8416 = !DILocation(line: 4778, column: 24, scope: !8413)
!8417 = !DILocation(line: 4781, column: 6, scope: !8413)
!8418 = !DILocation(line: 4781, column: 47, scope: !8413)
!8419 = !DILocation(line: 4781, column: 9, scope: !8413)
!8420 = !DILocation(line: 4777, column: 13, scope: !8409)
!8421 = !DILocation(line: 4782, column: 35, scope: !8413)
!8422 = !DILocation(line: 4782, column: 41, scope: !8413)
!8423 = !DILocation(line: 4782, column: 46, scope: !8413)
!8424 = !DILocation(line: 4782, column: 18, scope: !8413)
!8425 = !DILocation(line: 4782, column: 4, scope: !8413)
!8426 = !DILocation(line: 4782, column: 9, scope: !8413)
!8427 = !DILocation(line: 4782, column: 16, scope: !8413)
!8428 = !DILocation(line: 4784, column: 4, scope: !8413)
!8429 = !DILocation(line: 4784, column: 9, scope: !8413)
!8430 = !DILocation(line: 4784, column: 17, scope: !8413)
!8431 = !DILocation(line: 4785, column: 7, scope: !8409)
!8432 = !DILocation(line: 4786, column: 3, scope: !8369)
!8433 = !DILocation(line: 4788, column: 31, scope: !8364)
!8434 = !DILocation(line: 4788, column: 3, scope: !8364)
!8435 = !DILocation(line: 4789, column: 6, scope: !8365)
!8436 = !DILocation(line: 4790, column: 2, scope: !8361)
!8437 = distinct !{!8437, !8353, !8438}
!8438 = !DILocation(line: 4790, column: 2, scope: !8354)
!8439 = !DILocation(line: 4791, column: 5, scope: !8355)
!8440 = distinct !{!8440, !8349, !8441}
!8441 = !DILocation(line: 4791, column: 5, scope: !8350)
!8442 = !DILocation(line: 4792, column: 1, scope: !8339)
!8443 = distinct !DISubprogram(name: "trim_ld_motion_mems", scope: !3, file: !3, line: 4798, type: !3321, scopeLine: 4799, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8444 = !DILocalVariable(name: "last", scope: !8443, file: !3, line: 4800, type: !8445)
!8445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3110, size: 64)
!8446 = !DILocation(line: 4800, column: 22, scope: !8443)
!8447 = !DILocalVariable(name: "ptr", scope: !8443, file: !3, line: 4801, type: !3110)
!8448 = !DILocation(line: 4801, column: 20, scope: !8443)
!8449 = !DILocation(line: 4801, column: 26, scope: !8443)
!8450 = !DILocation(line: 4803, column: 3, scope: !8443)
!8451 = !DILocation(line: 4803, column: 10, scope: !8443)
!8452 = !DILocation(line: 4803, column: 14, scope: !8443)
!8453 = !DILocalVariable(name: "expr", scope: !8454, file: !3, line: 4805, type: !3086)
!8454 = distinct !DILexicalBlock(scope: !8443, file: !3, line: 4804, column: 5)
!8455 = !DILocation(line: 4805, column: 21, scope: !8454)
!8456 = !DILocation(line: 4808, column: 13, scope: !8457)
!8457 = distinct !DILexicalBlock(scope: !8454, file: !3, line: 4808, column: 11)
!8458 = !DILocation(line: 4808, column: 18, scope: !8457)
!8459 = !DILocation(line: 4808, column: 11, scope: !8454)
!8460 = !DILocalVariable(name: "hash", scope: !8461, file: !3, line: 4811, type: !9)
!8461 = distinct !DILexicalBlock(scope: !8457, file: !3, line: 4809, column: 2)
!8462 = !DILocation(line: 4811, column: 17, scope: !8461)
!8463 = !DILocation(line: 4811, column: 24, scope: !8461)
!8464 = !DILocation(line: 4811, column: 29, scope: !8461)
!8465 = !DILocation(line: 4811, column: 58, scope: !8461)
!8466 = !DILocation(line: 4811, column: 40, scope: !8461)
!8467 = !DILocation(line: 4813, column: 32, scope: !8468)
!8468 = distinct !DILexicalBlock(scope: !8461, file: !3, line: 4813, column: 4)
!8469 = !DILocation(line: 4813, column: 38, scope: !8468)
!8470 = !DILocation(line: 4813, column: 16, scope: !8468)
!8471 = !DILocation(line: 4813, column: 14, scope: !8468)
!8472 = !DILocation(line: 4813, column: 9, scope: !8468)
!8473 = !DILocation(line: 4814, column: 9, scope: !8474)
!8474 = distinct !DILexicalBlock(scope: !8468, file: !3, line: 4813, column: 4)
!8475 = !DILocation(line: 4814, column: 14, scope: !8474)
!8476 = !DILocation(line: 4813, column: 4, scope: !8468)
!8477 = !DILocation(line: 4816, column: 24, scope: !8478)
!8478 = distinct !DILexicalBlock(scope: !8474, file: !3, line: 4816, column: 10)
!8479 = !DILocation(line: 4816, column: 30, scope: !8478)
!8480 = !DILocation(line: 4816, column: 36, scope: !8478)
!8481 = !DILocation(line: 4816, column: 41, scope: !8478)
!8482 = !DILocation(line: 4816, column: 10, scope: !8478)
!8483 = !DILocation(line: 4816, column: 10, scope: !8474)
!8484 = !DILocation(line: 4817, column: 8, scope: !8478)
!8485 = !DILocation(line: 4816, column: 48, scope: !8478)
!8486 = !DILocation(line: 4815, column: 16, scope: !8474)
!8487 = !DILocation(line: 4815, column: 22, scope: !8474)
!8488 = !DILocation(line: 4815, column: 14, scope: !8474)
!8489 = !DILocation(line: 4813, column: 4, scope: !8474)
!8490 = distinct !{!8490, !8476, !8491}
!8491 = !DILocation(line: 4817, column: 8, scope: !8468)
!8492 = !DILocation(line: 4818, column: 2, scope: !8461)
!8493 = !DILocation(line: 4820, column: 7, scope: !8457)
!8494 = !DILocation(line: 4822, column: 11, scope: !8495)
!8495 = distinct !DILexicalBlock(scope: !8454, file: !3, line: 4822, column: 11)
!8496 = !DILocation(line: 4822, column: 11, scope: !8454)
!8497 = !DILocation(line: 4825, column: 16, scope: !8498)
!8498 = distinct !DILexicalBlock(scope: !8495, file: !3, line: 4823, column: 2)
!8499 = !DILocation(line: 4825, column: 4, scope: !8498)
!8500 = !DILocation(line: 4825, column: 9, scope: !8498)
!8501 = !DILocation(line: 4825, column: 14, scope: !8498)
!8502 = !DILocation(line: 4826, column: 13, scope: !8498)
!8503 = !DILocation(line: 4826, column: 18, scope: !8498)
!8504 = !DILocation(line: 4826, column: 9, scope: !8498)
!8505 = !DILocation(line: 4827, column: 10, scope: !8498)
!8506 = !DILocation(line: 4827, column: 15, scope: !8498)
!8507 = !DILocation(line: 4827, column: 8, scope: !8498)
!8508 = !DILocation(line: 4828, column: 2, scope: !8498)
!8509 = !DILocation(line: 4831, column: 12, scope: !8510)
!8510 = distinct !DILexicalBlock(scope: !8495, file: !3, line: 4830, column: 2)
!8511 = !DILocation(line: 4831, column: 17, scope: !8510)
!8512 = !DILocation(line: 4831, column: 5, scope: !8510)
!8513 = !DILocation(line: 4831, column: 10, scope: !8510)
!8514 = !DILocation(line: 4832, column: 31, scope: !8510)
!8515 = !DILocation(line: 4832, column: 47, scope: !8510)
!8516 = !DILocation(line: 4832, column: 52, scope: !8510)
!8517 = !DILocation(line: 4832, column: 57, scope: !8510)
!8518 = !DILocation(line: 4832, column: 4, scope: !8510)
!8519 = !DILocation(line: 4833, column: 21, scope: !8510)
!8520 = !DILocation(line: 4833, column: 4, scope: !8510)
!8521 = !DILocation(line: 4834, column: 12, scope: !8510)
!8522 = !DILocation(line: 4834, column: 10, scope: !8510)
!8523 = !DILocation(line: 4834, column: 8, scope: !8510)
!8524 = distinct !{!8524, !8450, !8525}
!8525 = !DILocation(line: 4836, column: 5, scope: !8443)
!8526 = !DILocation(line: 4839, column: 7, scope: !8527)
!8527 = distinct !DILexicalBlock(scope: !8443, file: !3, line: 4839, column: 7)
!8528 = !DILocation(line: 4839, column: 17, scope: !8527)
!8529 = !DILocation(line: 4839, column: 20, scope: !8527)
!8530 = !DILocation(line: 4839, column: 34, scope: !8527)
!8531 = !DILocation(line: 4839, column: 7, scope: !8443)
!8532 = !DILocation(line: 4840, column: 22, scope: !8527)
!8533 = !DILocation(line: 4840, column: 5, scope: !8527)
!8534 = !DILocation(line: 4841, column: 1, scope: !8443)
!8535 = distinct !DISubprogram(name: "alloc_pre_mem", scope: !3, file: !3, line: 3201, type: !4042, scopeLine: 3202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8536 = !DILocalVariable(name: "n_blocks", arg: 1, scope: !8535, file: !3, line: 3201, type: !1917)
!8537 = !DILocation(line: 3201, column: 20, scope: !8535)
!8538 = !DILocalVariable(name: "n_exprs", arg: 2, scope: !8535, file: !3, line: 3201, type: !1917)
!8539 = !DILocation(line: 3201, column: 34, scope: !8535)
!8540 = !DILocation(line: 3203, column: 34, scope: !8535)
!8541 = !DILocation(line: 3203, column: 44, scope: !8535)
!8542 = !DILocation(line: 3203, column: 12, scope: !8535)
!8543 = !DILocation(line: 3203, column: 10, scope: !8535)
!8544 = !DILocation(line: 3204, column: 32, scope: !8535)
!8545 = !DILocation(line: 3204, column: 42, scope: !8535)
!8546 = !DILocation(line: 3204, column: 10, scope: !8535)
!8547 = !DILocation(line: 3204, column: 8, scope: !8535)
!8548 = !DILocation(line: 3205, column: 34, scope: !8535)
!8549 = !DILocation(line: 3205, column: 44, scope: !8535)
!8550 = !DILocation(line: 3205, column: 12, scope: !8535)
!8551 = !DILocation(line: 3205, column: 10, scope: !8535)
!8552 = !DILocation(line: 3207, column: 15, scope: !8535)
!8553 = !DILocation(line: 3208, column: 17, scope: !8535)
!8554 = !DILocation(line: 3209, column: 18, scope: !8535)
!8555 = !DILocation(line: 3210, column: 18, scope: !8535)
!8556 = !DILocation(line: 3211, column: 35, scope: !8535)
!8557 = !DILocation(line: 3211, column: 45, scope: !8535)
!8558 = !DILocation(line: 3211, column: 13, scope: !8535)
!8559 = !DILocation(line: 3211, column: 11, scope: !8535)
!8560 = !DILocation(line: 3214, column: 1, scope: !8535)
!8561 = distinct !DISubprogram(name: "compute_pre_data", scope: !3, file: !3, line: 3242, type: !3321, scopeLine: 3243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8562 = !DILocalVariable(name: "trapping_expr", scope: !8561, file: !3, line: 3244, type: !3244)
!8563 = !DILocation(line: 3244, column: 11, scope: !8561)
!8564 = !DILocalVariable(name: "bb", scope: !8561, file: !3, line: 3245, type: !2448)
!8565 = !DILocation(line: 3245, column: 15, scope: !8561)
!8566 = !DILocalVariable(name: "ui", scope: !8561, file: !3, line: 3246, type: !9)
!8567 = !DILocation(line: 3246, column: 16, scope: !8561)
!8568 = !DILocation(line: 3248, column: 29, scope: !8561)
!8569 = !DILocation(line: 3248, column: 37, scope: !8561)
!8570 = !DILocation(line: 3248, column: 43, scope: !8561)
!8571 = !DILocation(line: 3248, column: 3, scope: !8561)
!8572 = !DILocation(line: 3249, column: 24, scope: !8561)
!8573 = !DILocation(line: 3249, column: 33, scope: !8561)
!8574 = !DILocation(line: 3249, column: 3, scope: !8561)
!8575 = !DILocation(line: 3252, column: 50, scope: !8561)
!8576 = !DILocation(line: 3252, column: 19, scope: !8561)
!8577 = !DILocation(line: 3252, column: 17, scope: !8561)
!8578 = !DILocation(line: 3253, column: 17, scope: !8561)
!8579 = !DILocation(line: 3253, column: 3, scope: !8561)
!8580 = !DILocation(line: 3254, column: 11, scope: !8581)
!8581 = distinct !DILexicalBlock(scope: !8561, file: !3, line: 3254, column: 3)
!8582 = !DILocation(line: 3254, column: 8, scope: !8581)
!8583 = !DILocation(line: 3254, column: 16, scope: !8584)
!8584 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 3254, column: 3)
!8585 = !DILocation(line: 3254, column: 37, scope: !8584)
!8586 = !DILocation(line: 3254, column: 19, scope: !8584)
!8587 = !DILocation(line: 3254, column: 3, scope: !8581)
!8588 = !DILocalVariable(name: "e", scope: !8589, file: !3, line: 3256, type: !3086)
!8589 = distinct !DILexicalBlock(scope: !8584, file: !3, line: 3255, column: 5)
!8590 = !DILocation(line: 3256, column: 20, scope: !8589)
!8591 = !DILocation(line: 3257, column: 32, scope: !8592)
!8592 = distinct !DILexicalBlock(scope: !8589, file: !3, line: 3257, column: 7)
!8593 = !DILocation(line: 3257, column: 38, scope: !8592)
!8594 = !DILocation(line: 3257, column: 16, scope: !8592)
!8595 = !DILocation(line: 3257, column: 14, scope: !8592)
!8596 = !DILocation(line: 3257, column: 12, scope: !8592)
!8597 = !DILocation(line: 3257, column: 43, scope: !8598)
!8598 = distinct !DILexicalBlock(scope: !8592, file: !3, line: 3257, column: 7)
!8599 = !DILocation(line: 3257, column: 45, scope: !8598)
!8600 = !DILocation(line: 3257, column: 7, scope: !8592)
!8601 = !DILocation(line: 3258, column: 18, scope: !8602)
!8602 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 3258, column: 6)
!8603 = !DILocation(line: 3258, column: 21, scope: !8602)
!8604 = !DILocation(line: 3258, column: 6, scope: !8602)
!8605 = !DILocation(line: 3258, column: 6, scope: !8598)
!8606 = !DILocation(line: 3259, column: 13, scope: !8602)
!8607 = !DILocation(line: 3259, column: 28, scope: !8602)
!8608 = !DILocation(line: 3259, column: 31, scope: !8602)
!8609 = !DILocation(line: 3259, column: 4, scope: !8602)
!8610 = !DILocation(line: 3258, column: 25, scope: !8602)
!8611 = !DILocation(line: 3257, column: 58, scope: !8598)
!8612 = !DILocation(line: 3257, column: 61, scope: !8598)
!8613 = !DILocation(line: 3257, column: 56, scope: !8598)
!8614 = !DILocation(line: 3257, column: 7, scope: !8598)
!8615 = distinct !{!8615, !8600, !8616}
!8616 = !DILocation(line: 3259, column: 43, scope: !8592)
!8617 = !DILocation(line: 3260, column: 5, scope: !8589)
!8618 = !DILocation(line: 3254, column: 45, scope: !8584)
!8619 = !DILocation(line: 3254, column: 3, scope: !8584)
!8620 = distinct !{!8620, !8587, !8621}
!8621 = !DILocation(line: 3260, column: 5, scope: !8581)
!8622 = !DILocation(line: 3267, column: 3, scope: !8623)
!8623 = distinct !DILexicalBlock(scope: !8561, file: !3, line: 3267, column: 3)
!8624 = !DILocation(line: 3267, column: 3, scope: !8625)
!8625 = distinct !DILexicalBlock(scope: !8623, file: !3, line: 3267, column: 3)
!8626 = !DILocalVariable(name: "e", scope: !8627, file: !3, line: 3269, type: !2465)
!8627 = distinct !DILexicalBlock(scope: !8625, file: !3, line: 3268, column: 5)
!8628 = !DILocation(line: 3269, column: 12, scope: !8627)
!8629 = !DILocalVariable(name: "ei", scope: !8627, file: !3, line: 3270, type: !5117)
!8630 = !DILocation(line: 3270, column: 21, scope: !8627)
!8631 = !DILocation(line: 3276, column: 7, scope: !8632)
!8632 = distinct !DILexicalBlock(scope: !8627, file: !3, line: 3276, column: 7)
!8633 = !DILocation(line: 3276, column: 7, scope: !8634)
!8634 = distinct !DILexicalBlock(scope: !8632, file: !3, line: 3276, column: 7)
!8635 = !DILocation(line: 3277, column: 6, scope: !8636)
!8636 = distinct !DILexicalBlock(scope: !8634, file: !3, line: 3277, column: 6)
!8637 = !DILocation(line: 3277, column: 9, scope: !8636)
!8638 = !DILocation(line: 3277, column: 15, scope: !8636)
!8639 = !DILocation(line: 3277, column: 6, scope: !8634)
!8640 = !DILocation(line: 3279, column: 26, scope: !8641)
!8641 = distinct !DILexicalBlock(scope: !8636, file: !3, line: 3278, column: 4)
!8642 = !DILocation(line: 3279, column: 33, scope: !8641)
!8643 = !DILocation(line: 3279, column: 37, scope: !8641)
!8644 = !DILocation(line: 3279, column: 45, scope: !8641)
!8645 = !DILocation(line: 3279, column: 52, scope: !8641)
!8646 = !DILocation(line: 3279, column: 56, scope: !8641)
!8647 = !DILocation(line: 3279, column: 64, scope: !8641)
!8648 = !DILocation(line: 3279, column: 6, scope: !8641)
!8649 = !DILocation(line: 3280, column: 26, scope: !8641)
!8650 = !DILocation(line: 3280, column: 33, scope: !8641)
!8651 = !DILocation(line: 3280, column: 37, scope: !8641)
!8652 = !DILocation(line: 3280, column: 45, scope: !8641)
!8653 = !DILocation(line: 3280, column: 52, scope: !8641)
!8654 = !DILocation(line: 3280, column: 56, scope: !8641)
!8655 = !DILocation(line: 3280, column: 64, scope: !8641)
!8656 = !DILocation(line: 3280, column: 6, scope: !8641)
!8657 = !DILocation(line: 3281, column: 6, scope: !8641)
!8658 = !DILocation(line: 3277, column: 17, scope: !8636)
!8659 = distinct !{!8659, !8631, !8660}
!8660 = !DILocation(line: 3282, column: 4, scope: !8632)
!8661 = !DILocation(line: 3284, column: 23, scope: !8627)
!8662 = !DILocation(line: 3284, column: 31, scope: !8627)
!8663 = !DILocation(line: 3284, column: 35, scope: !8627)
!8664 = !DILocation(line: 3284, column: 43, scope: !8627)
!8665 = !DILocation(line: 3284, column: 50, scope: !8627)
!8666 = !DILocation(line: 3284, column: 54, scope: !8627)
!8667 = !DILocation(line: 3284, column: 62, scope: !8627)
!8668 = !DILocation(line: 3284, column: 67, scope: !8627)
!8669 = !DILocation(line: 3284, column: 71, scope: !8627)
!8670 = !DILocation(line: 3284, column: 7, scope: !8627)
!8671 = !DILocation(line: 3285, column: 20, scope: !8627)
!8672 = !DILocation(line: 3285, column: 28, scope: !8627)
!8673 = !DILocation(line: 3285, column: 32, scope: !8627)
!8674 = !DILocation(line: 3285, column: 40, scope: !8627)
!8675 = !DILocation(line: 3285, column: 48, scope: !8627)
!8676 = !DILocation(line: 3285, column: 52, scope: !8627)
!8677 = !DILocation(line: 3285, column: 7, scope: !8627)
!8678 = !DILocation(line: 3286, column: 5, scope: !8627)
!8679 = distinct !{!8679, !8622, !8680}
!8680 = !DILocation(line: 3286, column: 5, scope: !8623)
!8681 = !DILocation(line: 3288, column: 45, scope: !8561)
!8682 = !DILocation(line: 3288, column: 54, scope: !8561)
!8683 = !DILocation(line: 3288, column: 62, scope: !8561)
!8684 = !DILocation(line: 3288, column: 68, scope: !8561)
!8685 = !DILocation(line: 3289, column: 8, scope: !8561)
!8686 = !DILocation(line: 3288, column: 15, scope: !8561)
!8687 = !DILocation(line: 3288, column: 13, scope: !8561)
!8688 = !DILocation(line: 3290, column: 3, scope: !8561)
!8689 = !DILocation(line: 3291, column: 10, scope: !8561)
!8690 = !DILocation(line: 3292, column: 3, scope: !8561)
!8691 = !DILocation(line: 3293, column: 11, scope: !8561)
!8692 = !DILocation(line: 3294, column: 3, scope: !8561)
!8693 = !DILocation(line: 3295, column: 1, scope: !8561)
!8694 = distinct !DISubprogram(name: "pre_gcse", scope: !3, file: !3, line: 3902, type: !3488, scopeLine: 3903, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8695 = !DILocalVariable(name: "i", scope: !8694, file: !3, line: 3904, type: !9)
!8696 = !DILocation(line: 3904, column: 16, scope: !8694)
!8697 = !DILocalVariable(name: "did_insert", scope: !8694, file: !3, line: 3905, type: !1917)
!8698 = !DILocation(line: 3905, column: 7, scope: !8694)
!8699 = !DILocalVariable(name: "changed", scope: !8694, file: !3, line: 3905, type: !1917)
!8700 = !DILocation(line: 3905, column: 19, scope: !8694)
!8701 = !DILocalVariable(name: "index_map", scope: !8694, file: !3, line: 3906, type: !3085)
!8702 = !DILocation(line: 3906, column: 17, scope: !8694)
!8703 = !DILocalVariable(name: "expr", scope: !8694, file: !3, line: 3907, type: !3086)
!8704 = !DILocation(line: 3907, column: 16, scope: !8694)
!8705 = !DILocation(line: 3912, column: 15, scope: !8694)
!8706 = !DILocation(line: 3912, column: 13, scope: !8694)
!8707 = !DILocation(line: 3913, column: 10, scope: !8708)
!8708 = distinct !DILexicalBlock(scope: !8694, file: !3, line: 3913, column: 3)
!8709 = !DILocation(line: 3913, column: 8, scope: !8708)
!8710 = !DILocation(line: 3913, column: 15, scope: !8711)
!8711 = distinct !DILexicalBlock(scope: !8708, file: !3, line: 3913, column: 3)
!8712 = !DILocation(line: 3913, column: 35, scope: !8711)
!8713 = !DILocation(line: 3913, column: 17, scope: !8711)
!8714 = !DILocation(line: 3913, column: 3, scope: !8708)
!8715 = !DILocation(line: 3914, column: 33, scope: !8716)
!8716 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 3914, column: 5)
!8717 = !DILocation(line: 3914, column: 39, scope: !8716)
!8718 = !DILocation(line: 3914, column: 17, scope: !8716)
!8719 = !DILocation(line: 3914, column: 15, scope: !8716)
!8720 = !DILocation(line: 3914, column: 10, scope: !8716)
!8721 = !DILocation(line: 3914, column: 43, scope: !8722)
!8722 = distinct !DILexicalBlock(scope: !8716, file: !3, line: 3914, column: 5)
!8723 = !DILocation(line: 3914, column: 48, scope: !8722)
!8724 = !DILocation(line: 3914, column: 5, scope: !8716)
!8725 = !DILocation(line: 3915, column: 39, scope: !8722)
!8726 = !DILocation(line: 3915, column: 7, scope: !8722)
!8727 = !DILocation(line: 3915, column: 17, scope: !8722)
!8728 = !DILocation(line: 3915, column: 23, scope: !8722)
!8729 = !DILocation(line: 3915, column: 37, scope: !8722)
!8730 = !DILocation(line: 3914, column: 64, scope: !8722)
!8731 = !DILocation(line: 3914, column: 70, scope: !8722)
!8732 = !DILocation(line: 3914, column: 62, scope: !8722)
!8733 = !DILocation(line: 3914, column: 5, scope: !8722)
!8734 = distinct !{!8734, !8724, !8735}
!8735 = !DILocation(line: 3915, column: 39, scope: !8716)
!8736 = !DILocation(line: 3913, column: 42, scope: !8711)
!8737 = !DILocation(line: 3913, column: 3, scope: !8711)
!8738 = distinct !{!8738, !8714, !8739}
!8739 = !DILocation(line: 3915, column: 39, scope: !8708)
!8740 = !DILocation(line: 3922, column: 13, scope: !8694)
!8741 = !DILocation(line: 3922, column: 11, scope: !8694)
!8742 = !DILocation(line: 3923, column: 33, scope: !8694)
!8743 = !DILocation(line: 3923, column: 44, scope: !8694)
!8744 = !DILocation(line: 3923, column: 16, scope: !8694)
!8745 = !DILocation(line: 3923, column: 14, scope: !8694)
!8746 = !DILocation(line: 3927, column: 3, scope: !8694)
!8747 = !DILocation(line: 3928, column: 7, scope: !8748)
!8748 = distinct !DILexicalBlock(scope: !8694, file: !3, line: 3928, column: 7)
!8749 = !DILocation(line: 3928, column: 7, scope: !8694)
!8750 = !DILocation(line: 3930, column: 7, scope: !8751)
!8751 = distinct !DILexicalBlock(scope: !8748, file: !3, line: 3929, column: 5)
!8752 = !DILocation(line: 3931, column: 15, scope: !8751)
!8753 = !DILocation(line: 3932, column: 5, scope: !8751)
!8754 = !DILocation(line: 3934, column: 9, scope: !8694)
!8755 = !DILocation(line: 3934, column: 3, scope: !8694)
!8756 = !DILocation(line: 3935, column: 10, scope: !8694)
!8757 = !DILocation(line: 3935, column: 3, scope: !8694)
!8758 = distinct !DISubprogram(name: "free_pre_mem", scope: !3, file: !3, line: 3219, type: !3321, scopeLine: 3220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8759 = !DILocation(line: 3221, column: 3, scope: !8758)
!8760 = !DILocation(line: 3222, column: 3, scope: !8758)
!8761 = !DILocation(line: 3226, column: 7, scope: !8762)
!8762 = distinct !DILexicalBlock(scope: !8758, file: !3, line: 3226, column: 7)
!8763 = !DILocation(line: 3226, column: 7, scope: !8758)
!8764 = !DILocation(line: 3227, column: 5, scope: !8762)
!8765 = !DILocation(line: 3228, column: 7, scope: !8766)
!8766 = distinct !DILexicalBlock(scope: !8758, file: !3, line: 3228, column: 7)
!8767 = !DILocation(line: 3228, column: 7, scope: !8758)
!8768 = !DILocation(line: 3229, column: 5, scope: !8766)
!8769 = !DILocation(line: 3230, column: 7, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !8758, file: !3, line: 3230, column: 7)
!8771 = !DILocation(line: 3230, column: 7, scope: !8758)
!8772 = !DILocation(line: 3231, column: 5, scope: !8770)
!8773 = !DILocation(line: 3232, column: 7, scope: !8774)
!8774 = distinct !DILexicalBlock(scope: !8758, file: !3, line: 3232, column: 7)
!8775 = !DILocation(line: 3232, column: 7, scope: !8758)
!8776 = !DILocation(line: 3233, column: 5, scope: !8774)
!8777 = !DILocation(line: 3235, column: 17, scope: !8758)
!8778 = !DILocation(line: 3235, column: 10, scope: !8758)
!8779 = !DILocation(line: 3236, column: 65, scope: !8758)
!8780 = !DILocation(line: 3236, column: 48, scope: !8758)
!8781 = !DILocation(line: 3236, column: 31, scope: !8758)
!8782 = !DILocation(line: 3236, column: 15, scope: !8758)
!8783 = !DILocation(line: 3237, column: 1, scope: !8758)
!8784 = distinct !DISubprogram(name: "free_ldst_mems", scope: !3, file: !3, line: 4567, type: !3321, scopeLine: 4568, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8785 = !DILocation(line: 4569, column: 7, scope: !8786)
!8786 = distinct !DILexicalBlock(scope: !8784, file: !3, line: 4569, column: 7)
!8787 = !DILocation(line: 4569, column: 7, scope: !8784)
!8788 = !DILocation(line: 4570, column: 18, scope: !8786)
!8789 = !DILocation(line: 4570, column: 5, scope: !8786)
!8790 = !DILocation(line: 4571, column: 18, scope: !8784)
!8791 = !DILocation(line: 4573, column: 3, scope: !8784)
!8792 = !DILocation(line: 4573, column: 10, scope: !8784)
!8793 = !DILocalVariable(name: "tmp", scope: !8794, file: !3, line: 4575, type: !3110)
!8794 = distinct !DILexicalBlock(scope: !8784, file: !3, line: 4574, column: 5)
!8795 = !DILocation(line: 4575, column: 24, scope: !8794)
!8796 = !DILocation(line: 4575, column: 30, scope: !8794)
!8797 = !DILocation(line: 4577, column: 23, scope: !8794)
!8798 = !DILocation(line: 4577, column: 38, scope: !8794)
!8799 = !DILocation(line: 4577, column: 21, scope: !8794)
!8800 = !DILocation(line: 4579, column: 24, scope: !8794)
!8801 = !DILocation(line: 4579, column: 7, scope: !8794)
!8802 = distinct !{!8802, !8791, !8803}
!8803 = !DILocation(line: 4580, column: 5, scope: !8784)
!8804 = !DILocation(line: 4582, column: 17, scope: !8784)
!8805 = !DILocation(line: 4583, column: 1, scope: !8784)
!8806 = distinct !DISubprogram(name: "pre_ldst_expr_hash", scope: !3, file: !3, line: 4500, type: !2371, scopeLine: 4501, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8807 = !DILocalVariable(name: "p", arg: 1, scope: !8806, file: !3, line: 4500, type: !2374)
!8808 = !DILocation(line: 4500, column: 33, scope: !8806)
!8809 = !DILocalVariable(name: "do_not_record_p", scope: !8806, file: !3, line: 4502, type: !1917)
!8810 = !DILocation(line: 4502, column: 7, scope: !8806)
!8811 = !DILocalVariable(name: "x", scope: !8806, file: !3, line: 4503, type: !8812)
!8812 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3125)
!8813 = !DILocation(line: 4503, column: 31, scope: !8806)
!8814 = !DILocation(line: 4503, column: 60, scope: !8806)
!8815 = !DILocation(line: 4503, column: 35, scope: !8806)
!8816 = !DILocation(line: 4504, column: 20, scope: !8806)
!8817 = !DILocation(line: 4504, column: 23, scope: !8806)
!8818 = !DILocation(line: 4504, column: 32, scope: !8806)
!8819 = !DILocation(line: 4504, column: 10, scope: !8806)
!8820 = !DILocation(line: 4504, column: 3, scope: !8806)
!8821 = distinct !DISubprogram(name: "pre_ldst_expr_eq", scope: !3, file: !3, line: 4508, type: !2379, scopeLine: 4509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8822 = !DILocalVariable(name: "p1", arg: 1, scope: !8821, file: !3, line: 4508, type: !2374)
!8823 = !DILocation(line: 4508, column: 31, scope: !8821)
!8824 = !DILocalVariable(name: "p2", arg: 2, scope: !8821, file: !3, line: 4508, type: !2374)
!8825 = !DILocation(line: 4508, column: 47, scope: !8821)
!8826 = !DILocalVariable(name: "ptr1", scope: !8821, file: !3, line: 4510, type: !8812)
!8827 = !DILocation(line: 4510, column: 31, scope: !8821)
!8828 = !DILocation(line: 4510, column: 63, scope: !8821)
!8829 = !DILocation(line: 4510, column: 38, scope: !8821)
!8830 = !DILocalVariable(name: "ptr2", scope: !8821, file: !3, line: 4511, type: !8812)
!8831 = !DILocation(line: 4511, column: 12, scope: !8821)
!8832 = !DILocation(line: 4511, column: 44, scope: !8821)
!8833 = !DILocation(line: 4511, column: 19, scope: !8821)
!8834 = !DILocation(line: 4512, column: 24, scope: !8821)
!8835 = !DILocation(line: 4512, column: 30, scope: !8821)
!8836 = !DILocation(line: 4512, column: 39, scope: !8821)
!8837 = !DILocation(line: 4512, column: 45, scope: !8821)
!8838 = !DILocation(line: 4512, column: 10, scope: !8821)
!8839 = !DILocation(line: 4512, column: 3, scope: !8821)
!8840 = distinct !DISubprogram(name: "simple_mem", scope: !3, file: !3, line: 4659, type: !8841, scopeLine: 4660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8841 = !DISubroutineType(types: !8842)
!8842 = !{!1917, !3232}
!8843 = !DILocalVariable(name: "x", arg: 1, scope: !8840, file: !3, line: 4659, type: !3232)
!8844 = !DILocation(line: 4659, column: 23, scope: !8840)
!8845 = !DILocation(line: 4661, column: 9, scope: !8846)
!8846 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 4661, column: 7)
!8847 = !DILocation(line: 4661, column: 7, scope: !8840)
!8848 = !DILocation(line: 4662, column: 5, scope: !8846)
!8849 = !DILocation(line: 4664, column: 7, scope: !8850)
!8850 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 4664, column: 7)
!8851 = !DILocation(line: 4664, column: 7, scope: !8840)
!8852 = !DILocation(line: 4665, column: 5, scope: !8850)
!8853 = !DILocation(line: 4667, column: 7, scope: !8854)
!8854 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 4667, column: 7)
!8855 = !DILocation(line: 4667, column: 20, scope: !8854)
!8856 = !DILocation(line: 4667, column: 7, scope: !8840)
!8857 = !DILocation(line: 4668, column: 5, scope: !8854)
!8858 = !DILocation(line: 4673, column: 7, scope: !8859)
!8859 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 4673, column: 7)
!8860 = !DILocation(line: 4673, column: 32, scope: !8859)
!8861 = !DILocation(line: 4673, column: 47, scope: !8859)
!8862 = !DILocation(line: 4673, column: 35, scope: !8859)
!8863 = !DILocation(line: 4673, column: 7, scope: !8840)
!8864 = !DILocation(line: 4674, column: 5, scope: !8859)
!8865 = !DILocation(line: 4676, column: 23, scope: !8866)
!8866 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 4676, column: 7)
!8867 = !DILocation(line: 4676, column: 7, scope: !8866)
!8868 = !DILocation(line: 4676, column: 7, scope: !8840)
!8869 = !DILocation(line: 4677, column: 5, scope: !8866)
!8870 = !DILocation(line: 4680, column: 24, scope: !8871)
!8871 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 4680, column: 7)
!8872 = !DILocation(line: 4680, column: 43, scope: !8871)
!8873 = !DILocation(line: 4680, column: 7, scope: !8871)
!8874 = !DILocation(line: 4680, column: 7, scope: !8840)
!8875 = !DILocation(line: 4681, column: 5, scope: !8871)
!8876 = !DILocation(line: 4683, column: 7, scope: !8877)
!8877 = distinct !DILexicalBlock(scope: !8840, file: !3, line: 4683, column: 7)
!8878 = !DILocation(line: 4683, column: 24, scope: !8877)
!8879 = !DILocation(line: 4683, column: 27, scope: !8877)
!8880 = !DILocation(line: 4683, column: 7, scope: !8840)
!8881 = !DILocation(line: 4684, column: 5, scope: !8877)
!8882 = !DILocation(line: 4686, column: 3, scope: !8840)
!8883 = !DILocation(line: 4687, column: 1, scope: !8840)
!8884 = distinct !DISubprogram(name: "ldst_entry", scope: !3, file: !3, line: 4519, type: !6734, scopeLine: 4520, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8885 = !DILocalVariable(name: "x", arg: 1, scope: !8884, file: !3, line: 4519, type: !1893)
!8886 = !DILocation(line: 4519, column: 17, scope: !8884)
!8887 = !DILocalVariable(name: "do_not_record_p", scope: !8884, file: !3, line: 4521, type: !1917)
!8888 = !DILocation(line: 4521, column: 7, scope: !8884)
!8889 = !DILocalVariable(name: "ptr", scope: !8884, file: !3, line: 4522, type: !3110)
!8890 = !DILocation(line: 4522, column: 20, scope: !8884)
!8891 = !DILocalVariable(name: "hash", scope: !8884, file: !3, line: 4523, type: !9)
!8892 = !DILocation(line: 4523, column: 16, scope: !8884)
!8893 = !DILocalVariable(name: "slot", scope: !8884, file: !3, line: 4524, type: !2384)
!8894 = !DILocation(line: 4524, column: 10, scope: !8884)
!8895 = !DILocalVariable(name: "e", scope: !8884, file: !3, line: 4525, type: !3111)
!8896 = !DILocation(line: 4525, column: 18, scope: !8884)
!8897 = !DILocation(line: 4527, column: 20, scope: !8884)
!8898 = !DILocation(line: 4527, column: 23, scope: !8884)
!8899 = !DILocation(line: 4527, column: 10, scope: !8884)
!8900 = !DILocation(line: 4527, column: 8, scope: !8884)
!8901 = !DILocation(line: 4530, column: 15, scope: !8884)
!8902 = !DILocation(line: 4530, column: 5, scope: !8884)
!8903 = !DILocation(line: 4530, column: 13, scope: !8884)
!8904 = !DILocation(line: 4531, column: 36, scope: !8884)
!8905 = !DILocation(line: 4531, column: 52, scope: !8884)
!8906 = !DILocation(line: 4531, column: 56, scope: !8884)
!8907 = !DILocation(line: 4531, column: 10, scope: !8884)
!8908 = !DILocation(line: 4531, column: 8, scope: !8884)
!8909 = !DILocation(line: 4532, column: 8, scope: !8910)
!8910 = distinct !DILexicalBlock(scope: !8884, file: !3, line: 4532, column: 7)
!8911 = !DILocation(line: 4532, column: 7, scope: !8910)
!8912 = !DILocation(line: 4532, column: 7, scope: !8884)
!8913 = !DILocation(line: 4533, column: 31, scope: !8910)
!8914 = !DILocation(line: 4533, column: 30, scope: !8910)
!8915 = !DILocation(line: 4533, column: 12, scope: !8910)
!8916 = !DILocation(line: 4533, column: 5, scope: !8910)
!8917 = !DILocation(line: 4535, column: 9, scope: !8884)
!8918 = !DILocation(line: 4535, column: 7, scope: !8884)
!8919 = !DILocation(line: 4537, column: 23, scope: !8884)
!8920 = !DILocation(line: 4537, column: 3, scope: !8884)
!8921 = !DILocation(line: 4537, column: 8, scope: !8884)
!8922 = !DILocation(line: 4537, column: 21, scope: !8884)
!8923 = !DILocation(line: 4538, column: 3, scope: !8884)
!8924 = !DILocation(line: 4538, column: 8, scope: !8884)
!8925 = !DILocation(line: 4538, column: 21, scope: !8884)
!8926 = !DILocation(line: 4539, column: 23, scope: !8884)
!8927 = !DILocation(line: 4539, column: 3, scope: !8884)
!8928 = !DILocation(line: 4539, column: 8, scope: !8884)
!8929 = !DILocation(line: 4539, column: 21, scope: !8884)
!8930 = !DILocation(line: 4540, column: 3, scope: !8884)
!8931 = !DILocation(line: 4540, column: 8, scope: !8884)
!8932 = !DILocation(line: 4540, column: 21, scope: !8884)
!8933 = !DILocation(line: 4541, column: 3, scope: !8884)
!8934 = !DILocation(line: 4541, column: 8, scope: !8884)
!8935 = !DILocation(line: 4541, column: 21, scope: !8884)
!8936 = !DILocation(line: 4542, column: 3, scope: !8884)
!8937 = !DILocation(line: 4542, column: 8, scope: !8884)
!8938 = !DILocation(line: 4542, column: 21, scope: !8884)
!8939 = !DILocation(line: 4543, column: 3, scope: !8884)
!8940 = !DILocation(line: 4543, column: 8, scope: !8884)
!8941 = !DILocation(line: 4543, column: 21, scope: !8884)
!8942 = !DILocation(line: 4544, column: 3, scope: !8884)
!8943 = !DILocation(line: 4544, column: 8, scope: !8884)
!8944 = !DILocation(line: 4544, column: 21, scope: !8884)
!8945 = !DILocation(line: 4545, column: 3, scope: !8884)
!8946 = !DILocation(line: 4545, column: 8, scope: !8884)
!8947 = !DILocation(line: 4545, column: 21, scope: !8884)
!8948 = !DILocation(line: 4546, column: 23, scope: !8884)
!8949 = !DILocation(line: 4546, column: 3, scope: !8884)
!8950 = !DILocation(line: 4546, column: 8, scope: !8884)
!8951 = !DILocation(line: 4546, column: 21, scope: !8884)
!8952 = !DILocation(line: 4547, column: 23, scope: !8884)
!8953 = !DILocation(line: 4547, column: 21, scope: !8884)
!8954 = !DILocation(line: 4548, column: 11, scope: !8884)
!8955 = !DILocation(line: 4548, column: 4, scope: !8884)
!8956 = !DILocation(line: 4548, column: 9, scope: !8884)
!8957 = !DILocation(line: 4550, column: 10, scope: !8884)
!8958 = !DILocation(line: 4550, column: 3, scope: !8884)
!8959 = !DILocation(line: 4551, column: 1, scope: !8884)
!8960 = distinct !DISubprogram(name: "invalidate_any_buried_refs", scope: !3, file: !3, line: 4698, type: !4233, scopeLine: 4699, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!8961 = !DILocalVariable(name: "x", arg: 1, scope: !8960, file: !3, line: 4698, type: !1893)
!8962 = !DILocation(line: 4698, column: 33, scope: !8960)
!8963 = !DILocalVariable(name: "fmt", scope: !8960, file: !3, line: 4700, type: !1920)
!8964 = !DILocation(line: 4700, column: 16, scope: !8960)
!8965 = !DILocalVariable(name: "i", scope: !8960, file: !3, line: 4701, type: !1917)
!8966 = !DILocation(line: 4701, column: 7, scope: !8960)
!8967 = !DILocalVariable(name: "j", scope: !8960, file: !3, line: 4701, type: !1917)
!8968 = !DILocation(line: 4701, column: 10, scope: !8960)
!8969 = !DILocalVariable(name: "ptr", scope: !8960, file: !3, line: 4702, type: !3110)
!8970 = !DILocation(line: 4702, column: 20, scope: !8960)
!8971 = !DILocation(line: 4705, column: 7, scope: !8972)
!8972 = distinct !DILexicalBlock(scope: !8960, file: !3, line: 4705, column: 7)
!8973 = !DILocation(line: 4705, column: 17, scope: !8972)
!8974 = !DILocation(line: 4705, column: 32, scope: !8972)
!8975 = !DILocation(line: 4705, column: 20, scope: !8972)
!8976 = !DILocation(line: 4705, column: 7, scope: !8960)
!8977 = !DILocation(line: 4707, column: 25, scope: !8978)
!8978 = distinct !DILexicalBlock(scope: !8972, file: !3, line: 4706, column: 5)
!8979 = !DILocation(line: 4707, column: 13, scope: !8978)
!8980 = !DILocation(line: 4707, column: 11, scope: !8978)
!8981 = !DILocation(line: 4708, column: 7, scope: !8978)
!8982 = !DILocation(line: 4708, column: 12, scope: !8978)
!8983 = !DILocation(line: 4708, column: 20, scope: !8978)
!8984 = !DILocation(line: 4709, column: 5, scope: !8978)
!8985 = !DILocation(line: 4712, column: 9, scope: !8960)
!8986 = !DILocation(line: 4712, column: 7, scope: !8960)
!8987 = !DILocation(line: 4714, column: 12, scope: !8988)
!8988 = distinct !DILexicalBlock(scope: !8960, file: !3, line: 4714, column: 3)
!8989 = !DILocation(line: 4714, column: 42, scope: !8988)
!8990 = !DILocation(line: 4714, column: 10, scope: !8988)
!8991 = !DILocation(line: 4714, column: 8, scope: !8988)
!8992 = !DILocation(line: 4714, column: 47, scope: !8993)
!8993 = distinct !DILexicalBlock(scope: !8988, file: !3, line: 4714, column: 3)
!8994 = !DILocation(line: 4714, column: 49, scope: !8993)
!8995 = !DILocation(line: 4714, column: 3, scope: !8988)
!8996 = !DILocation(line: 4716, column: 11, scope: !8997)
!8997 = distinct !DILexicalBlock(scope: !8998, file: !3, line: 4716, column: 11)
!8998 = distinct !DILexicalBlock(scope: !8993, file: !3, line: 4715, column: 5)
!8999 = !DILocation(line: 4716, column: 15, scope: !8997)
!9000 = !DILocation(line: 4716, column: 18, scope: !8997)
!9001 = !DILocation(line: 4716, column: 11, scope: !8998)
!9002 = !DILocation(line: 4717, column: 30, scope: !8997)
!9003 = !DILocation(line: 4717, column: 2, scope: !8997)
!9004 = !DILocation(line: 4718, column: 16, scope: !9005)
!9005 = distinct !DILexicalBlock(scope: !8997, file: !3, line: 4718, column: 16)
!9006 = !DILocation(line: 4718, column: 20, scope: !9005)
!9007 = !DILocation(line: 4718, column: 23, scope: !9005)
!9008 = !DILocation(line: 4718, column: 16, scope: !8997)
!9009 = !DILocation(line: 4719, column: 11, scope: !9010)
!9010 = distinct !DILexicalBlock(scope: !9005, file: !3, line: 4719, column: 2)
!9011 = !DILocation(line: 4719, column: 26, scope: !9010)
!9012 = !DILocation(line: 4719, column: 9, scope: !9010)
!9013 = !DILocation(line: 4719, column: 7, scope: !9010)
!9014 = !DILocation(line: 4719, column: 31, scope: !9015)
!9015 = distinct !DILexicalBlock(scope: !9010, file: !3, line: 4719, column: 2)
!9016 = !DILocation(line: 4719, column: 33, scope: !9015)
!9017 = !DILocation(line: 4719, column: 2, scope: !9010)
!9018 = !DILocation(line: 4720, column: 32, scope: !9015)
!9019 = !DILocation(line: 4720, column: 4, scope: !9015)
!9020 = !DILocation(line: 4719, column: 40, scope: !9015)
!9021 = !DILocation(line: 4719, column: 2, scope: !9015)
!9022 = distinct !{!9022, !9017, !9023}
!9023 = !DILocation(line: 4720, column: 49, scope: !9010)
!9024 = !DILocation(line: 4721, column: 5, scope: !8998)
!9025 = !DILocation(line: 4714, column: 56, scope: !8993)
!9026 = !DILocation(line: 4714, column: 3, scope: !8993)
!9027 = distinct !{!9027, !8995, !9028}
!9028 = !DILocation(line: 4721, column: 5, scope: !8988)
!9029 = !DILocation(line: 4722, column: 1, scope: !8960)
!9030 = distinct !DISubprogram(name: "free_ldst_entry", scope: !3, file: !3, line: 4556, type: !9031, scopeLine: 4557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9031 = !DISubroutineType(types: !9032)
!9032 = !{null, !3110}
!9033 = !DILocalVariable(name: "ptr", arg: 1, scope: !9030, file: !3, line: 4556, type: !3110)
!9034 = !DILocation(line: 4556, column: 35, scope: !9030)
!9035 = !DILocation(line: 4558, column: 26, scope: !9030)
!9036 = !DILocation(line: 4558, column: 31, scope: !9030)
!9037 = !DILocation(line: 4558, column: 3, scope: !9030)
!9038 = !DILocation(line: 4559, column: 26, scope: !9030)
!9039 = !DILocation(line: 4559, column: 31, scope: !9030)
!9040 = !DILocation(line: 4559, column: 3, scope: !9030)
!9041 = !DILocation(line: 4561, column: 9, scope: !9030)
!9042 = !DILocation(line: 4561, column: 3, scope: !9030)
!9043 = !DILocation(line: 4562, column: 1, scope: !9030)
!9044 = distinct !DISubprogram(name: "print_ldst_list", scope: !3, file: !3, line: 4588, type: !9045, scopeLine: 4589, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9045 = !DISubroutineType(types: !9046)
!9046 = !{null, !3882}
!9047 = !DILocalVariable(name: "file", arg: 1, scope: !9044, file: !3, line: 4588, type: !3882)
!9048 = !DILocation(line: 4588, column: 25, scope: !9044)
!9049 = !DILocalVariable(name: "ptr", scope: !9044, file: !3, line: 4590, type: !3110)
!9050 = !DILocation(line: 4590, column: 20, scope: !9044)
!9051 = !DILocation(line: 4592, column: 12, scope: !9044)
!9052 = !DILocation(line: 4592, column: 3, scope: !9044)
!9053 = !DILocation(line: 4594, column: 14, scope: !9054)
!9054 = distinct !DILexicalBlock(scope: !9044, file: !3, line: 4594, column: 3)
!9055 = !DILocation(line: 4594, column: 12, scope: !9054)
!9056 = !DILocation(line: 4594, column: 8, scope: !9054)
!9057 = !DILocation(line: 4594, column: 32, scope: !9058)
!9058 = distinct !DILexicalBlock(scope: !9054, file: !3, line: 4594, column: 3)
!9059 = !DILocation(line: 4594, column: 36, scope: !9058)
!9060 = !DILocation(line: 4594, column: 3, scope: !9054)
!9061 = !DILocation(line: 4596, column: 16, scope: !9062)
!9062 = distinct !DILexicalBlock(scope: !9058, file: !3, line: 4595, column: 5)
!9063 = !DILocation(line: 4596, column: 43, scope: !9062)
!9064 = !DILocation(line: 4596, column: 48, scope: !9062)
!9065 = !DILocation(line: 4596, column: 7, scope: !9062)
!9066 = !DILocation(line: 4598, column: 18, scope: !9062)
!9067 = !DILocation(line: 4598, column: 24, scope: !9062)
!9068 = !DILocation(line: 4598, column: 29, scope: !9062)
!9069 = !DILocation(line: 4598, column: 7, scope: !9062)
!9070 = !DILocation(line: 4600, column: 16, scope: !9062)
!9071 = !DILocation(line: 4600, column: 7, scope: !9062)
!9072 = !DILocation(line: 4602, column: 11, scope: !9073)
!9073 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 4602, column: 11)
!9074 = !DILocation(line: 4602, column: 16, scope: !9073)
!9075 = !DILocation(line: 4602, column: 11, scope: !9062)
!9076 = !DILocation(line: 4603, column: 13, scope: !9073)
!9077 = !DILocation(line: 4603, column: 19, scope: !9073)
!9078 = !DILocation(line: 4603, column: 24, scope: !9073)
!9079 = !DILocation(line: 4603, column: 2, scope: !9073)
!9080 = !DILocation(line: 4605, column: 11, scope: !9073)
!9081 = !DILocation(line: 4605, column: 2, scope: !9073)
!9082 = !DILocation(line: 4607, column: 16, scope: !9062)
!9083 = !DILocation(line: 4607, column: 7, scope: !9062)
!9084 = !DILocation(line: 4609, column: 11, scope: !9085)
!9085 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 4609, column: 11)
!9086 = !DILocation(line: 4609, column: 16, scope: !9085)
!9087 = !DILocation(line: 4609, column: 11, scope: !9062)
!9088 = !DILocation(line: 4610, column: 13, scope: !9085)
!9089 = !DILocation(line: 4610, column: 19, scope: !9085)
!9090 = !DILocation(line: 4610, column: 24, scope: !9085)
!9091 = !DILocation(line: 4610, column: 2, scope: !9085)
!9092 = !DILocation(line: 4612, column: 11, scope: !9085)
!9093 = !DILocation(line: 4612, column: 2, scope: !9085)
!9094 = !DILocation(line: 4614, column: 16, scope: !9062)
!9095 = !DILocation(line: 4614, column: 7, scope: !9062)
!9096 = !DILocation(line: 4615, column: 5, scope: !9062)
!9097 = !DILocation(line: 4594, column: 65, scope: !9058)
!9098 = !DILocation(line: 4594, column: 51, scope: !9058)
!9099 = !DILocation(line: 4594, column: 49, scope: !9058)
!9100 = !DILocation(line: 4594, column: 3, scope: !9058)
!9101 = distinct !{!9101, !9060, !9102}
!9102 = !DILocation(line: 4615, column: 5, scope: !9054)
!9103 = !DILocation(line: 4617, column: 12, scope: !9044)
!9104 = !DILocation(line: 4617, column: 3, scope: !9044)
!9105 = !DILocation(line: 4618, column: 1, scope: !9044)
!9106 = distinct !DISubprogram(name: "first_ls_expr", scope: !3, file: !3, line: 4639, type: !9107, scopeLine: 4640, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9107 = !DISubroutineType(types: !9108)
!9108 = !{!3110}
!9109 = !DILocation(line: 4641, column: 10, scope: !9106)
!9110 = !DILocation(line: 4641, column: 3, scope: !9106)
!9111 = distinct !DISubprogram(name: "next_ls_expr", scope: !3, file: !3, line: 4647, type: !9112, scopeLine: 4648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9112 = !DISubroutineType(types: !9113)
!9113 = !{!3110, !3110}
!9114 = !DILocalVariable(name: "ptr", arg: 1, scope: !9111, file: !3, line: 4647, type: !3110)
!9115 = !DILocation(line: 4647, column: 32, scope: !9111)
!9116 = !DILocation(line: 4649, column: 10, scope: !9111)
!9117 = !DILocation(line: 4649, column: 15, scope: !9111)
!9118 = !DILocation(line: 4649, column: 3, scope: !9111)
!9119 = distinct !DISubprogram(name: "pre_delete", scope: !3, file: !3, line: 3825, type: !3488, scopeLine: 3826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9120 = !DILocalVariable(name: "i", scope: !9119, file: !3, line: 3827, type: !9)
!9121 = !DILocation(line: 3827, column: 16, scope: !9119)
!9122 = !DILocalVariable(name: "changed", scope: !9119, file: !3, line: 3828, type: !1917)
!9123 = !DILocation(line: 3828, column: 7, scope: !9119)
!9124 = !DILocalVariable(name: "expr", scope: !9119, file: !3, line: 3829, type: !3086)
!9125 = !DILocation(line: 3829, column: 16, scope: !9119)
!9126 = !DILocalVariable(name: "occr", scope: !9119, file: !3, line: 3830, type: !3093)
!9127 = !DILocation(line: 3830, column: 16, scope: !9119)
!9128 = !DILocation(line: 3832, column: 11, scope: !9119)
!9129 = !DILocation(line: 3833, column: 10, scope: !9130)
!9130 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 3833, column: 3)
!9131 = !DILocation(line: 3833, column: 8, scope: !9130)
!9132 = !DILocation(line: 3833, column: 15, scope: !9133)
!9133 = distinct !DILexicalBlock(scope: !9130, file: !3, line: 3833, column: 3)
!9134 = !DILocation(line: 3833, column: 35, scope: !9133)
!9135 = !DILocation(line: 3833, column: 17, scope: !9133)
!9136 = !DILocation(line: 3833, column: 3, scope: !9130)
!9137 = !DILocation(line: 3834, column: 33, scope: !9138)
!9138 = distinct !DILexicalBlock(scope: !9133, file: !3, line: 3834, column: 5)
!9139 = !DILocation(line: 3834, column: 39, scope: !9138)
!9140 = !DILocation(line: 3834, column: 17, scope: !9138)
!9141 = !DILocation(line: 3834, column: 15, scope: !9138)
!9142 = !DILocation(line: 3834, column: 10, scope: !9138)
!9143 = !DILocation(line: 3835, column: 3, scope: !9144)
!9144 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 3834, column: 5)
!9145 = !DILocation(line: 3835, column: 8, scope: !9144)
!9146 = !DILocation(line: 3834, column: 5, scope: !9138)
!9147 = !DILocalVariable(name: "indx", scope: !9148, file: !3, line: 3838, type: !1917)
!9148 = distinct !DILexicalBlock(scope: !9144, file: !3, line: 3837, column: 7)
!9149 = !DILocation(line: 3838, column: 6, scope: !9148)
!9150 = !DILocation(line: 3838, column: 13, scope: !9148)
!9151 = !DILocation(line: 3838, column: 19, scope: !9148)
!9152 = !DILocation(line: 3843, column: 14, scope: !9153)
!9153 = distinct !DILexicalBlock(scope: !9148, file: !3, line: 3843, column: 2)
!9154 = !DILocation(line: 3843, column: 20, scope: !9153)
!9155 = !DILocation(line: 3843, column: 12, scope: !9153)
!9156 = !DILocation(line: 3843, column: 7, scope: !9153)
!9157 = !DILocation(line: 3843, column: 32, scope: !9158)
!9158 = distinct !DILexicalBlock(scope: !9153, file: !3, line: 3843, column: 2)
!9159 = !DILocation(line: 3843, column: 37, scope: !9158)
!9160 = !DILocation(line: 3843, column: 2, scope: !9153)
!9161 = !DILocalVariable(name: "insn", scope: !9162, file: !3, line: 3845, type: !1893)
!9162 = distinct !DILexicalBlock(scope: !9158, file: !3, line: 3844, column: 4)
!9163 = !DILocation(line: 3845, column: 10, scope: !9162)
!9164 = !DILocation(line: 3845, column: 17, scope: !9162)
!9165 = !DILocation(line: 3845, column: 23, scope: !9162)
!9166 = !DILocalVariable(name: "set", scope: !9162, file: !3, line: 3846, type: !1893)
!9167 = !DILocation(line: 3846, column: 10, scope: !9162)
!9168 = !DILocalVariable(name: "bb", scope: !9162, file: !3, line: 3847, type: !2448)
!9169 = !DILocation(line: 3847, column: 18, scope: !9162)
!9170 = !DILocation(line: 3847, column: 23, scope: !9162)
!9171 = !DILocation(line: 3850, column: 10, scope: !9172)
!9172 = distinct !DILexicalBlock(scope: !9162, file: !3, line: 3850, column: 10)
!9173 = !DILocation(line: 3851, column: 3, scope: !9172)
!9174 = !DILocation(line: 3851, column: 13, scope: !9172)
!9175 = !DILocation(line: 3851, column: 11, scope: !9172)
!9176 = !DILocation(line: 3851, column: 32, scope: !9172)
!9177 = !DILocation(line: 3852, column: 17, scope: !9172)
!9178 = !DILocation(line: 3852, column: 20, scope: !9172)
!9179 = !DILocation(line: 3850, column: 10, scope: !9162)
!9180 = !DILocation(line: 3857, column: 7, scope: !9181)
!9181 = distinct !DILexicalBlock(scope: !9182, file: !3, line: 3857, column: 7)
!9182 = distinct !DILexicalBlock(scope: !9172, file: !3, line: 3853, column: 8)
!9183 = !DILocation(line: 3857, column: 13, scope: !9181)
!9184 = !DILocation(line: 3857, column: 26, scope: !9181)
!9185 = !DILocation(line: 3857, column: 7, scope: !9182)
!9186 = !DILocation(line: 3858, column: 49, scope: !9181)
!9187 = !DILocation(line: 3858, column: 26, scope: !9181)
!9188 = !DILocation(line: 3858, column: 5, scope: !9181)
!9189 = !DILocation(line: 3858, column: 11, scope: !9181)
!9190 = !DILocation(line: 3858, column: 24, scope: !9181)
!9191 = !DILocation(line: 3860, column: 25, scope: !9182)
!9192 = !DILocation(line: 3860, column: 31, scope: !9182)
!9193 = !DILocation(line: 3860, column: 45, scope: !9182)
!9194 = !DILocation(line: 3860, column: 61, scope: !9182)
!9195 = !DILocation(line: 3860, column: 3, scope: !9182)
!9196 = !DILocation(line: 3861, column: 16, scope: !9182)
!9197 = !DILocation(line: 3861, column: 3, scope: !9182)
!9198 = !DILocation(line: 3862, column: 3, scope: !9182)
!9199 = !DILocation(line: 3862, column: 9, scope: !9182)
!9200 = !DILocation(line: 3862, column: 19, scope: !9182)
!9201 = !DILocation(line: 3863, column: 11, scope: !9182)
!9202 = !DILocation(line: 3864, column: 19, scope: !9182)
!9203 = !DILocation(line: 3866, column: 7, scope: !9204)
!9204 = distinct !DILexicalBlock(scope: !9182, file: !3, line: 3866, column: 7)
!9205 = !DILocation(line: 3866, column: 7, scope: !9182)
!9206 = !DILocation(line: 3868, column: 16, scope: !9207)
!9207 = distinct !DILexicalBlock(scope: !9204, file: !3, line: 3867, column: 5)
!9208 = !DILocation(line: 3870, column: 11, scope: !9207)
!9209 = !DILocation(line: 3870, column: 28, scope: !9207)
!9210 = !DILocation(line: 3868, column: 7, scope: !9207)
!9211 = !DILocation(line: 3871, column: 16, scope: !9207)
!9212 = !DILocation(line: 3872, column: 9, scope: !9207)
!9213 = !DILocation(line: 3872, column: 13, scope: !9207)
!9214 = !DILocation(line: 3872, column: 20, scope: !9207)
!9215 = !DILocation(line: 3871, column: 7, scope: !9207)
!9216 = !DILocation(line: 3873, column: 5, scope: !9207)
!9217 = !DILocation(line: 3874, column: 8, scope: !9182)
!9218 = !DILocation(line: 3875, column: 4, scope: !9162)
!9219 = !DILocation(line: 3843, column: 53, scope: !9158)
!9220 = !DILocation(line: 3843, column: 59, scope: !9158)
!9221 = !DILocation(line: 3843, column: 51, scope: !9158)
!9222 = !DILocation(line: 3843, column: 2, scope: !9158)
!9223 = distinct !{!9223, !9160, !9224}
!9224 = !DILocation(line: 3875, column: 4, scope: !9153)
!9225 = !DILocation(line: 3876, column: 7, scope: !9148)
!9226 = !DILocation(line: 3836, column: 10, scope: !9144)
!9227 = !DILocation(line: 3836, column: 16, scope: !9144)
!9228 = !DILocation(line: 3836, column: 8, scope: !9144)
!9229 = !DILocation(line: 3834, column: 5, scope: !9144)
!9230 = distinct !{!9230, !9146, !9231}
!9231 = !DILocation(line: 3876, column: 7, scope: !9138)
!9232 = !DILocation(line: 3833, column: 42, scope: !9133)
!9233 = !DILocation(line: 3833, column: 3, scope: !9133)
!9234 = distinct !{!9234, !9136, !9235}
!9235 = !DILocation(line: 3876, column: 7, scope: !9130)
!9236 = !DILocation(line: 3878, column: 10, scope: !9119)
!9237 = !DILocation(line: 3878, column: 3, scope: !9119)
!9238 = distinct !DISubprogram(name: "pre_edge_insert", scope: !3, file: !3, line: 3541, type: !9239, scopeLine: 3542, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9239 = !DISubroutineType(types: !9240)
!9240 = !{!1917, !3287, !3085}
!9241 = !DILocalVariable(name: "edge_list", arg: 1, scope: !9238, file: !3, line: 3541, type: !3287)
!9242 = !DILocation(line: 3541, column: 36, scope: !9238)
!9243 = !DILocalVariable(name: "index_map", arg: 2, scope: !9238, file: !3, line: 3541, type: !3085)
!9244 = !DILocation(line: 3541, column: 61, scope: !9238)
!9245 = !DILocalVariable(name: "e", scope: !9238, file: !3, line: 3543, type: !1917)
!9246 = !DILocation(line: 3543, column: 7, scope: !9238)
!9247 = !DILocalVariable(name: "i", scope: !9238, file: !3, line: 3543, type: !1917)
!9248 = !DILocation(line: 3543, column: 10, scope: !9238)
!9249 = !DILocalVariable(name: "j", scope: !9238, file: !3, line: 3543, type: !1917)
!9250 = !DILocation(line: 3543, column: 13, scope: !9238)
!9251 = !DILocalVariable(name: "num_edges", scope: !9238, file: !3, line: 3543, type: !1917)
!9252 = !DILocation(line: 3543, column: 16, scope: !9238)
!9253 = !DILocalVariable(name: "set_size", scope: !9238, file: !3, line: 3543, type: !1917)
!9254 = !DILocation(line: 3543, column: 27, scope: !9238)
!9255 = !DILocalVariable(name: "did_insert", scope: !9238, file: !3, line: 3543, type: !1917)
!9256 = !DILocation(line: 3543, column: 37, scope: !9238)
!9257 = !DILocalVariable(name: "inserted", scope: !9238, file: !3, line: 3544, type: !3243)
!9258 = !DILocation(line: 3544, column: 12, scope: !9238)
!9259 = !DILocation(line: 3549, column: 14, scope: !9238)
!9260 = !DILocation(line: 3549, column: 33, scope: !9238)
!9261 = !DILocation(line: 3549, column: 12, scope: !9238)
!9262 = !DILocation(line: 3550, column: 15, scope: !9238)
!9263 = !DILocation(line: 3550, column: 13, scope: !9238)
!9264 = !DILocation(line: 3551, column: 36, scope: !9238)
!9265 = !DILocation(line: 3551, column: 63, scope: !9238)
!9266 = !DILocation(line: 3551, column: 14, scope: !9238)
!9267 = !DILocation(line: 3551, column: 12, scope: !9238)
!9268 = !DILocation(line: 3552, column: 24, scope: !9238)
!9269 = !DILocation(line: 3552, column: 34, scope: !9238)
!9270 = !DILocation(line: 3552, column: 3, scope: !9238)
!9271 = !DILocation(line: 3554, column: 10, scope: !9272)
!9272 = distinct !DILexicalBlock(scope: !9238, file: !3, line: 3554, column: 3)
!9273 = !DILocation(line: 3554, column: 8, scope: !9272)
!9274 = !DILocation(line: 3554, column: 15, scope: !9275)
!9275 = distinct !DILexicalBlock(scope: !9272, file: !3, line: 3554, column: 3)
!9276 = !DILocation(line: 3554, column: 19, scope: !9275)
!9277 = !DILocation(line: 3554, column: 17, scope: !9275)
!9278 = !DILocation(line: 3554, column: 3, scope: !9272)
!9279 = !DILocalVariable(name: "indx", scope: !9280, file: !3, line: 3556, type: !1917)
!9280 = distinct !DILexicalBlock(scope: !9275, file: !3, line: 3555, column: 5)
!9281 = !DILocation(line: 3556, column: 11, scope: !9280)
!9282 = !DILocalVariable(name: "bb", scope: !9280, file: !3, line: 3557, type: !2448)
!9283 = !DILocation(line: 3557, column: 19, scope: !9280)
!9284 = !DILocation(line: 3557, column: 24, scope: !9280)
!9285 = !DILocation(line: 3559, column: 21, scope: !9286)
!9286 = distinct !DILexicalBlock(scope: !9280, file: !3, line: 3559, column: 7)
!9287 = !DILocation(line: 3559, column: 14, scope: !9286)
!9288 = !DILocation(line: 3559, column: 12, scope: !9286)
!9289 = !DILocation(line: 3559, column: 26, scope: !9290)
!9290 = distinct !DILexicalBlock(scope: !9286, file: !3, line: 3559, column: 7)
!9291 = !DILocation(line: 3559, column: 30, scope: !9290)
!9292 = !DILocation(line: 3559, column: 28, scope: !9290)
!9293 = !DILocation(line: 3559, column: 7, scope: !9286)
!9294 = !DILocalVariable(name: "insert", scope: !9295, file: !3, line: 3561, type: !1988)
!9295 = distinct !DILexicalBlock(scope: !9290, file: !3, line: 3560, column: 2)
!9296 = !DILocation(line: 3561, column: 21, scope: !9295)
!9297 = !DILocation(line: 3561, column: 30, scope: !9295)
!9298 = !DILocation(line: 3561, column: 45, scope: !9295)
!9299 = !DILocation(line: 3561, column: 49, scope: !9295)
!9300 = !DILocation(line: 3561, column: 54, scope: !9295)
!9301 = !DILocation(line: 3563, column: 13, scope: !9302)
!9302 = distinct !DILexicalBlock(scope: !9295, file: !3, line: 3563, column: 4)
!9303 = !DILocation(line: 3563, column: 11, scope: !9302)
!9304 = !DILocation(line: 3563, column: 9, scope: !9302)
!9305 = !DILocation(line: 3563, column: 19, scope: !9306)
!9306 = distinct !DILexicalBlock(scope: !9302, file: !3, line: 3563, column: 4)
!9307 = !DILocation(line: 3563, column: 26, scope: !9306)
!9308 = !DILocation(line: 3563, column: 29, scope: !9306)
!9309 = !DILocation(line: 3563, column: 55, scope: !9306)
!9310 = !DILocation(line: 3563, column: 31, scope: !9306)
!9311 = !DILocation(line: 0, scope: !9306)
!9312 = !DILocation(line: 3563, column: 4, scope: !9302)
!9313 = !DILocation(line: 3564, column: 11, scope: !9314)
!9314 = distinct !DILexicalBlock(scope: !9306, file: !3, line: 3564, column: 10)
!9315 = !DILocation(line: 3564, column: 18, scope: !9314)
!9316 = !DILocation(line: 3564, column: 23, scope: !9314)
!9317 = !DILocation(line: 3564, column: 28, scope: !9314)
!9318 = !DILocation(line: 3564, column: 31, scope: !9314)
!9319 = !DILocation(line: 3564, column: 41, scope: !9314)
!9320 = !DILocation(line: 3564, column: 45, scope: !9314)
!9321 = !DILocation(line: 3564, column: 58, scope: !9314)
!9322 = !DILocation(line: 3564, column: 10, scope: !9306)
!9323 = !DILocalVariable(name: "expr", scope: !9324, file: !3, line: 3566, type: !3086)
!9324 = distinct !DILexicalBlock(scope: !9314, file: !3, line: 3565, column: 8)
!9325 = !DILocation(line: 3566, column: 16, scope: !9324)
!9326 = !DILocation(line: 3566, column: 23, scope: !9324)
!9327 = !DILocation(line: 3566, column: 33, scope: !9324)
!9328 = !DILocalVariable(name: "occr", scope: !9324, file: !3, line: 3567, type: !3093)
!9329 = !DILocation(line: 3567, column: 16, scope: !9324)
!9330 = !DILocation(line: 3570, column: 15, scope: !9331)
!9331 = distinct !DILexicalBlock(scope: !9324, file: !3, line: 3570, column: 3)
!9332 = !DILocation(line: 3570, column: 21, scope: !9331)
!9333 = !DILocation(line: 3570, column: 13, scope: !9331)
!9334 = !DILocation(line: 3570, column: 8, scope: !9331)
!9335 = !DILocation(line: 3570, column: 33, scope: !9336)
!9336 = distinct !DILexicalBlock(scope: !9331, file: !3, line: 3570, column: 3)
!9337 = !DILocation(line: 3570, column: 38, scope: !9336)
!9338 = !DILocation(line: 3570, column: 3, scope: !9331)
!9339 = !DILocation(line: 3572, column: 13, scope: !9340)
!9340 = distinct !DILexicalBlock(scope: !9341, file: !3, line: 3572, column: 11)
!9341 = distinct !DILexicalBlock(scope: !9336, file: !3, line: 3571, column: 5)
!9342 = !DILocation(line: 3572, column: 19, scope: !9340)
!9343 = !DILocation(line: 3572, column: 11, scope: !9341)
!9344 = !DILocation(line: 3573, column: 9, scope: !9340)
!9345 = !DILocation(line: 3577, column: 12, scope: !9346)
!9346 = distinct !DILexicalBlock(scope: !9341, file: !3, line: 3577, column: 11)
!9347 = !DILocation(line: 3577, column: 11, scope: !9341)
!9348 = !DILocalVariable(name: "insn", scope: !9349, file: !3, line: 3579, type: !1893)
!9349 = distinct !DILexicalBlock(scope: !9346, file: !3, line: 3578, column: 9)
!9350 = !DILocation(line: 3579, column: 8, scope: !9349)
!9351 = !DILocalVariable(name: "eg", scope: !9349, file: !3, line: 3580, type: !2465)
!9352 = !DILocation(line: 3580, column: 9, scope: !9349)
!9353 = !DILocation(line: 3580, column: 14, scope: !9349)
!9354 = !DILocation(line: 3589, column: 8, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9349, file: !3, line: 3589, column: 8)
!9356 = !DILocation(line: 3589, column: 12, scope: !9355)
!9357 = !DILocation(line: 3589, column: 18, scope: !9355)
!9358 = !DILocation(line: 3589, column: 8, scope: !9349)
!9359 = !DILocation(line: 3590, column: 35, scope: !9355)
!9360 = !DILocation(line: 3590, column: 45, scope: !9355)
!9361 = !DILocation(line: 3590, column: 49, scope: !9355)
!9362 = !DILocation(line: 3590, column: 6, scope: !9355)
!9363 = !DILocation(line: 3593, column: 36, scope: !9364)
!9364 = distinct !DILexicalBlock(scope: !9355, file: !3, line: 3592, column: 6)
!9365 = !DILocation(line: 3593, column: 46, scope: !9364)
!9366 = !DILocation(line: 3593, column: 15, scope: !9364)
!9367 = !DILocation(line: 3593, column: 13, scope: !9364)
!9368 = !DILocation(line: 3594, column: 29, scope: !9364)
!9369 = !DILocation(line: 3594, column: 35, scope: !9364)
!9370 = !DILocation(line: 3594, column: 8, scope: !9364)
!9371 = !DILocation(line: 3597, column: 8, scope: !9372)
!9372 = distinct !DILexicalBlock(scope: !9349, file: !3, line: 3597, column: 8)
!9373 = !DILocation(line: 3597, column: 8, scope: !9349)
!9374 = !DILocation(line: 3599, column: 17, scope: !9375)
!9375 = distinct !DILexicalBlock(scope: !9372, file: !3, line: 3598, column: 6)
!9376 = !DILocation(line: 3600, column: 10, scope: !9375)
!9377 = !DILocation(line: 3600, column: 14, scope: !9375)
!9378 = !DILocation(line: 3601, column: 10, scope: !9375)
!9379 = !DILocation(line: 3601, column: 45, scope: !9375)
!9380 = !DILocation(line: 3599, column: 8, scope: !9375)
!9381 = !DILocation(line: 3602, column: 17, scope: !9375)
!9382 = !DILocation(line: 3603, column: 10, scope: !9375)
!9383 = !DILocation(line: 3603, column: 16, scope: !9375)
!9384 = !DILocation(line: 3602, column: 8, scope: !9375)
!9385 = !DILocation(line: 3604, column: 6, scope: !9375)
!9386 = !DILocation(line: 3606, column: 29, scope: !9349)
!9387 = !DILocation(line: 3606, column: 4, scope: !9349)
!9388 = !DILocation(line: 3607, column: 13, scope: !9349)
!9389 = !DILocation(line: 3607, column: 22, scope: !9349)
!9390 = !DILocation(line: 3607, column: 26, scope: !9349)
!9391 = !DILocation(line: 3607, column: 4, scope: !9349)
!9392 = !DILocation(line: 3608, column: 15, scope: !9349)
!9393 = !DILocation(line: 3609, column: 21, scope: !9349)
!9394 = !DILocation(line: 3610, column: 9, scope: !9349)
!9395 = !DILocation(line: 3611, column: 5, scope: !9341)
!9396 = !DILocation(line: 3570, column: 54, scope: !9336)
!9397 = !DILocation(line: 3570, column: 60, scope: !9336)
!9398 = !DILocation(line: 3570, column: 52, scope: !9336)
!9399 = !DILocation(line: 3570, column: 3, scope: !9336)
!9400 = distinct !{!9400, !9338, !9401}
!9401 = !DILocation(line: 3611, column: 5, scope: !9331)
!9402 = !DILocation(line: 3612, column: 8, scope: !9324)
!9403 = !DILocation(line: 3564, column: 61, scope: !9314)
!9404 = !DILocation(line: 3563, column: 65, scope: !9306)
!9405 = !DILocation(line: 3563, column: 76, scope: !9306)
!9406 = !DILocation(line: 3563, column: 4, scope: !9306)
!9407 = distinct !{!9407, !9312, !9408}
!9408 = !DILocation(line: 3612, column: 8, scope: !9302)
!9409 = !DILocation(line: 3613, column: 2, scope: !9295)
!9410 = !DILocation(line: 3559, column: 41, scope: !9290)
!9411 = !DILocation(line: 3559, column: 50, scope: !9290)
!9412 = !DILocation(line: 3559, column: 7, scope: !9290)
!9413 = distinct !{!9413, !9293, !9414}
!9414 = !DILocation(line: 3613, column: 2, scope: !9286)
!9415 = !DILocation(line: 3614, column: 5, scope: !9280)
!9416 = !DILocation(line: 3554, column: 31, scope: !9275)
!9417 = !DILocation(line: 3554, column: 3, scope: !9275)
!9418 = distinct !{!9418, !9278, !9419}
!9419 = !DILocation(line: 3614, column: 5, scope: !9272)
!9420 = !DILocation(line: 3616, column: 3, scope: !9238)
!9421 = !DILocation(line: 3617, column: 10, scope: !9238)
!9422 = !DILocation(line: 3617, column: 3, scope: !9238)
!9423 = distinct !DISubprogram(name: "pre_insert_copies", scope: !3, file: !3, line: 3725, type: !3321, scopeLine: 3726, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9424 = !DILocalVariable(name: "i", scope: !9423, file: !3, line: 3727, type: !9)
!9425 = !DILocation(line: 3727, column: 16, scope: !9423)
!9426 = !DILocalVariable(name: "added_copy", scope: !9423, file: !3, line: 3727, type: !9)
!9427 = !DILocation(line: 3727, column: 19, scope: !9423)
!9428 = !DILocalVariable(name: "expr", scope: !9423, file: !3, line: 3728, type: !3086)
!9429 = !DILocation(line: 3728, column: 16, scope: !9423)
!9430 = !DILocalVariable(name: "occr", scope: !9423, file: !3, line: 3729, type: !3093)
!9431 = !DILocation(line: 3729, column: 16, scope: !9423)
!9432 = !DILocalVariable(name: "avail", scope: !9423, file: !3, line: 3730, type: !3093)
!9433 = !DILocation(line: 3730, column: 16, scope: !9423)
!9434 = !DILocation(line: 3738, column: 10, scope: !9435)
!9435 = distinct !DILexicalBlock(scope: !9423, file: !3, line: 3738, column: 3)
!9436 = !DILocation(line: 3738, column: 8, scope: !9435)
!9437 = !DILocation(line: 3738, column: 15, scope: !9438)
!9438 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 3738, column: 3)
!9439 = !DILocation(line: 3738, column: 35, scope: !9438)
!9440 = !DILocation(line: 3738, column: 17, scope: !9438)
!9441 = !DILocation(line: 3738, column: 3, scope: !9435)
!9442 = !DILocation(line: 3739, column: 33, scope: !9443)
!9443 = distinct !DILexicalBlock(scope: !9438, file: !3, line: 3739, column: 5)
!9444 = !DILocation(line: 3739, column: 39, scope: !9443)
!9445 = !DILocation(line: 3739, column: 17, scope: !9443)
!9446 = !DILocation(line: 3739, column: 15, scope: !9443)
!9447 = !DILocation(line: 3739, column: 10, scope: !9443)
!9448 = !DILocation(line: 3739, column: 43, scope: !9449)
!9449 = distinct !DILexicalBlock(scope: !9443, file: !3, line: 3739, column: 5)
!9450 = !DILocation(line: 3739, column: 48, scope: !9449)
!9451 = !DILocation(line: 3739, column: 5, scope: !9443)
!9452 = !DILocation(line: 3746, column: 6, scope: !9453)
!9453 = distinct !DILexicalBlock(scope: !9454, file: !3, line: 3746, column: 6)
!9454 = distinct !DILexicalBlock(scope: !9449, file: !3, line: 3740, column: 7)
!9455 = !DILocation(line: 3746, column: 12, scope: !9453)
!9456 = !DILocation(line: 3746, column: 25, scope: !9453)
!9457 = !DILocation(line: 3746, column: 6, scope: !9454)
!9458 = !DILocation(line: 3747, column: 4, scope: !9453)
!9459 = !DILocation(line: 3750, column: 13, scope: !9454)
!9460 = !DILocation(line: 3752, column: 14, scope: !9461)
!9461 = distinct !DILexicalBlock(scope: !9454, file: !3, line: 3752, column: 2)
!9462 = !DILocation(line: 3752, column: 20, scope: !9461)
!9463 = !DILocation(line: 3752, column: 12, scope: !9461)
!9464 = !DILocation(line: 3752, column: 7, scope: !9461)
!9465 = !DILocation(line: 3752, column: 32, scope: !9466)
!9466 = distinct !DILexicalBlock(scope: !9461, file: !3, line: 3752, column: 2)
!9467 = !DILocation(line: 3752, column: 37, scope: !9466)
!9468 = !DILocation(line: 3752, column: 2, scope: !9461)
!9469 = !DILocation(line: 3754, column: 12, scope: !9470)
!9470 = distinct !DILexicalBlock(scope: !9471, file: !3, line: 3754, column: 10)
!9471 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 3753, column: 4)
!9472 = !DILocation(line: 3754, column: 18, scope: !9470)
!9473 = !DILocation(line: 3754, column: 10, scope: !9471)
!9474 = !DILocation(line: 3755, column: 8, scope: !9470)
!9475 = !DILocation(line: 3757, column: 19, scope: !9476)
!9476 = distinct !DILexicalBlock(scope: !9471, file: !3, line: 3757, column: 6)
!9477 = !DILocation(line: 3757, column: 25, scope: !9476)
!9478 = !DILocation(line: 3757, column: 17, scope: !9476)
!9479 = !DILocation(line: 3757, column: 11, scope: !9476)
!9480 = !DILocation(line: 3757, column: 37, scope: !9481)
!9481 = distinct !DILexicalBlock(scope: !9476, file: !3, line: 3757, column: 6)
!9482 = !DILocation(line: 3757, column: 43, scope: !9481)
!9483 = !DILocation(line: 3757, column: 6, scope: !9476)
!9484 = !DILocalVariable(name: "insn", scope: !9485, file: !3, line: 3759, type: !1893)
!9485 = distinct !DILexicalBlock(scope: !9481, file: !3, line: 3758, column: 8)
!9486 = !DILocation(line: 3759, column: 7, scope: !9485)
!9487 = !DILocation(line: 3759, column: 14, scope: !9485)
!9488 = !DILocation(line: 3759, column: 21, scope: !9485)
!9489 = !DILocation(line: 3762, column: 7, scope: !9490)
!9490 = distinct !DILexicalBlock(scope: !9485, file: !3, line: 3762, column: 7)
!9491 = !DILocation(line: 3762, column: 14, scope: !9490)
!9492 = !DILocation(line: 3762, column: 7, scope: !9485)
!9493 = !DILocation(line: 3763, column: 5, scope: !9490)
!9494 = !DILocation(line: 3766, column: 7, scope: !9495)
!9495 = distinct !DILexicalBlock(scope: !9485, file: !3, line: 3766, column: 7)
!9496 = !DILocation(line: 3766, column: 7, scope: !9485)
!9497 = !DILocation(line: 3767, column: 5, scope: !9495)
!9498 = !DILocation(line: 3770, column: 34, scope: !9499)
!9499 = distinct !DILexicalBlock(scope: !9485, file: !3, line: 3770, column: 7)
!9500 = !DILocation(line: 3771, column: 13, scope: !9499)
!9501 = !DILocation(line: 3772, column: 13, scope: !9499)
!9502 = !DILocation(line: 3770, column: 9, scope: !9499)
!9503 = !DILocation(line: 3770, column: 7, scope: !9485)
!9504 = !DILocation(line: 3773, column: 5, scope: !9499)
!9505 = !DILocation(line: 3775, column: 28, scope: !9485)
!9506 = !DILocation(line: 3778, column: 25, scope: !9485)
!9507 = !DILocation(line: 3778, column: 31, scope: !9485)
!9508 = !DILocation(line: 3778, column: 3, scope: !9485)
!9509 = !DILocation(line: 3779, column: 3, scope: !9485)
!9510 = !DILocation(line: 3779, column: 10, scope: !9485)
!9511 = !DILocation(line: 3779, column: 19, scope: !9485)
!9512 = !DILocation(line: 3780, column: 8, scope: !9485)
!9513 = !DILocation(line: 3757, column: 60, scope: !9481)
!9514 = !DILocation(line: 3757, column: 67, scope: !9481)
!9515 = !DILocation(line: 3757, column: 58, scope: !9481)
!9516 = !DILocation(line: 3757, column: 6, scope: !9481)
!9517 = distinct !{!9517, !9483, !9518}
!9518 = !DILocation(line: 3780, column: 8, scope: !9476)
!9519 = !DILocation(line: 3781, column: 4, scope: !9471)
!9520 = !DILocation(line: 3752, column: 53, scope: !9466)
!9521 = !DILocation(line: 3752, column: 59, scope: !9466)
!9522 = !DILocation(line: 3752, column: 51, scope: !9466)
!9523 = !DILocation(line: 3752, column: 2, scope: !9466)
!9524 = distinct !{!9524, !9468, !9525}
!9525 = !DILocation(line: 3781, column: 4, scope: !9461)
!9526 = !DILocation(line: 3783, column: 8, scope: !9527)
!9527 = distinct !DILexicalBlock(scope: !9454, file: !3, line: 3783, column: 8)
!9528 = !DILocation(line: 3783, column: 8, scope: !9454)
!9529 = !DILocation(line: 3784, column: 38, scope: !9527)
!9530 = !DILocation(line: 3784, column: 13, scope: !9527)
!9531 = !DILocation(line: 3785, column: 7, scope: !9454)
!9532 = !DILocation(line: 3739, column: 64, scope: !9449)
!9533 = !DILocation(line: 3739, column: 70, scope: !9449)
!9534 = !DILocation(line: 3739, column: 62, scope: !9449)
!9535 = !DILocation(line: 3739, column: 5, scope: !9449)
!9536 = distinct !{!9536, !9451, !9537}
!9537 = !DILocation(line: 3785, column: 7, scope: !9443)
!9538 = !DILocation(line: 3738, column: 42, scope: !9438)
!9539 = !DILocation(line: 3738, column: 3, scope: !9438)
!9540 = distinct !{!9540, !9441, !9541}
!9541 = !DILocation(line: 3785, column: 7, scope: !9435)
!9542 = !DILocation(line: 3786, column: 1, scope: !9423)
!9543 = distinct !DISubprogram(name: "gcse_emit_move_after", scope: !3, file: !3, line: 3791, type: !9544, scopeLine: 3792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9544 = !DISubroutineType(types: !9545)
!9545 = !{!1893, !1893, !1893, !1893}
!9546 = !DILocalVariable(name: "src", arg: 1, scope: !9543, file: !3, line: 3791, type: !1893)
!9547 = !DILocation(line: 3791, column: 27, scope: !9543)
!9548 = !DILocalVariable(name: "dest", arg: 2, scope: !9543, file: !3, line: 3791, type: !1893)
!9549 = !DILocation(line: 3791, column: 36, scope: !9543)
!9550 = !DILocalVariable(name: "insn", arg: 3, scope: !9543, file: !3, line: 3791, type: !1893)
!9551 = !DILocation(line: 3791, column: 46, scope: !9543)
!9552 = !DILocalVariable(name: "new_rtx", scope: !9543, file: !3, line: 3793, type: !1893)
!9553 = !DILocation(line: 3793, column: 7, scope: !9543)
!9554 = !DILocalVariable(name: "set", scope: !9543, file: !3, line: 3794, type: !1893)
!9555 = !DILocation(line: 3794, column: 7, scope: !9543)
!9556 = !DILocation(line: 3794, column: 13, scope: !9543)
!9557 = !DILocalVariable(name: "set2", scope: !9543, file: !3, line: 3794, type: !1893)
!9558 = !DILocation(line: 3794, column: 32, scope: !9543)
!9559 = !DILocalVariable(name: "note", scope: !9543, file: !3, line: 3795, type: !1893)
!9560 = !DILocation(line: 3795, column: 7, scope: !9543)
!9561 = !DILocalVariable(name: "eqv", scope: !9543, file: !3, line: 3796, type: !1893)
!9562 = !DILocation(line: 3796, column: 7, scope: !9543)
!9563 = !DILocation(line: 3801, column: 45, scope: !9543)
!9564 = !DILocation(line: 3801, column: 51, scope: !9543)
!9565 = !DILocation(line: 3801, column: 30, scope: !9543)
!9566 = !DILocation(line: 3801, column: 57, scope: !9543)
!9567 = !DILocation(line: 3801, column: 13, scope: !9543)
!9568 = !DILocation(line: 3801, column: 11, scope: !9543)
!9569 = !DILocation(line: 3804, column: 10, scope: !9543)
!9570 = !DILocation(line: 3804, column: 8, scope: !9543)
!9571 = !DILocation(line: 3805, column: 8, scope: !9572)
!9572 = distinct !DILexicalBlock(scope: !9543, file: !3, line: 3805, column: 7)
!9573 = !DILocation(line: 3805, column: 13, scope: !9572)
!9574 = !DILocation(line: 3805, column: 30, scope: !9572)
!9575 = !DILocation(line: 3805, column: 47, scope: !9572)
!9576 = !DILocation(line: 3805, column: 17, scope: !9572)
!9577 = !DILocation(line: 3805, column: 7, scope: !9543)
!9578 = !DILocation(line: 3806, column: 12, scope: !9572)
!9579 = !DILocation(line: 3806, column: 5, scope: !9572)
!9580 = !DILocation(line: 3807, column: 42, scope: !9581)
!9581 = distinct !DILexicalBlock(scope: !9543, file: !3, line: 3807, column: 7)
!9582 = !DILocation(line: 3807, column: 15, scope: !9581)
!9583 = !DILocation(line: 3807, column: 13, scope: !9581)
!9584 = !DILocation(line: 3807, column: 7, scope: !9543)
!9585 = !DILocation(line: 3808, column: 11, scope: !9581)
!9586 = !DILocation(line: 3808, column: 9, scope: !9581)
!9587 = !DILocation(line: 3808, column: 5, scope: !9581)
!9588 = !DILocation(line: 3810, column: 11, scope: !9581)
!9589 = !DILocation(line: 3810, column: 9, scope: !9581)
!9590 = !DILocation(line: 3812, column: 24, scope: !9543)
!9591 = !DILocation(line: 3812, column: 57, scope: !9543)
!9592 = !DILocation(line: 3812, column: 44, scope: !9543)
!9593 = !DILocation(line: 3812, column: 3, scope: !9543)
!9594 = !DILocation(line: 3814, column: 10, scope: !9543)
!9595 = !DILocation(line: 3814, column: 3, scope: !9543)
!9596 = !DILocation(line: 3815, column: 1, scope: !9543)
!9597 = distinct !DISubprogram(name: "insert_insn_end_basic_block", scope: !3, file: !3, line: 3416, type: !9598, scopeLine: 3417, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9598 = !DISubroutineType(types: !9599)
!9599 = !{null, !3086, !2448, !1917}
!9600 = !DILocalVariable(name: "expr", arg: 1, scope: !9597, file: !3, line: 3416, type: !3086)
!9601 = !DILocation(line: 3416, column: 43, scope: !9597)
!9602 = !DILocalVariable(name: "bb", arg: 2, scope: !9597, file: !3, line: 3416, type: !2448)
!9603 = !DILocation(line: 3416, column: 61, scope: !9597)
!9604 = !DILocalVariable(name: "pre", arg: 3, scope: !9597, file: !3, line: 3416, type: !1917)
!9605 = !DILocation(line: 3416, column: 69, scope: !9597)
!9606 = !DILocalVariable(name: "insn", scope: !9597, file: !3, line: 3418, type: !1893)
!9607 = !DILocation(line: 3418, column: 7, scope: !9597)
!9608 = !DILocation(line: 3418, column: 14, scope: !9597)
!9609 = !DILocalVariable(name: "new_insn", scope: !9597, file: !3, line: 3419, type: !1893)
!9610 = !DILocation(line: 3419, column: 7, scope: !9597)
!9611 = !DILocalVariable(name: "reg", scope: !9597, file: !3, line: 3420, type: !1893)
!9612 = !DILocation(line: 3420, column: 7, scope: !9597)
!9613 = !DILocation(line: 3420, column: 13, scope: !9597)
!9614 = !DILocation(line: 3420, column: 19, scope: !9597)
!9615 = !DILocalVariable(name: "regno", scope: !9597, file: !3, line: 3421, type: !1917)
!9616 = !DILocation(line: 3421, column: 7, scope: !9597)
!9617 = !DILocation(line: 3421, column: 15, scope: !9597)
!9618 = !DILocalVariable(name: "pat", scope: !9597, file: !3, line: 3422, type: !1893)
!9619 = !DILocation(line: 3422, column: 7, scope: !9597)
!9620 = !DILocalVariable(name: "pat_end", scope: !9597, file: !3, line: 3422, type: !1893)
!9621 = !DILocation(line: 3422, column: 12, scope: !9597)
!9622 = !DILocation(line: 3424, column: 30, scope: !9597)
!9623 = !DILocation(line: 3424, column: 9, scope: !9597)
!9624 = !DILocation(line: 3424, column: 7, scope: !9597)
!9625 = !DILocation(line: 3425, column: 3, scope: !9597)
!9626 = !DILocation(line: 3427, column: 13, scope: !9597)
!9627 = !DILocation(line: 3427, column: 11, scope: !9597)
!9628 = !DILocation(line: 3428, column: 3, scope: !9597)
!9629 = !DILocation(line: 3428, column: 10, scope: !9597)
!9630 = !DILocation(line: 3428, column: 30, scope: !9597)
!9631 = !DILocation(line: 3429, column: 15, scope: !9597)
!9632 = !DILocation(line: 3429, column: 13, scope: !9597)
!9633 = distinct !{!9633, !9628, !9631}
!9634 = !DILocation(line: 3435, column: 7, scope: !9635)
!9635 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 3435, column: 7)
!9636 = !DILocation(line: 3436, column: 7, scope: !9635)
!9637 = !DILocation(line: 3436, column: 11, scope: !9635)
!9638 = !DILocation(line: 3437, column: 4, scope: !9635)
!9639 = !DILocation(line: 3437, column: 24, scope: !9635)
!9640 = !DILocation(line: 3437, column: 9, scope: !9635)
!9641 = !DILocation(line: 3438, column: 8, scope: !9635)
!9642 = !DILocation(line: 3438, column: 29, scope: !9635)
!9643 = !DILocation(line: 3438, column: 11, scope: !9635)
!9644 = !DILocation(line: 3438, column: 34, scope: !9635)
!9645 = !DILocation(line: 3438, column: 40, scope: !9635)
!9646 = !DILocation(line: 3435, column: 7, scope: !9597)
!9647 = !DILocation(line: 3446, column: 7, scope: !9648)
!9648 = distinct !DILexicalBlock(scope: !9635, file: !3, line: 3439, column: 5)
!9649 = !DILocation(line: 3453, column: 11, scope: !9650)
!9650 = distinct !DILexicalBlock(scope: !9648, file: !3, line: 3453, column: 11)
!9651 = !DILocation(line: 3453, column: 37, scope: !9650)
!9652 = !DILocation(line: 3454, column: 4, scope: !9650)
!9653 = !DILocation(line: 3454, column: 7, scope: !9650)
!9654 = !DILocation(line: 3454, column: 33, scope: !9650)
!9655 = !DILocation(line: 3453, column: 11, scope: !9648)
!9656 = !DILocation(line: 3455, column: 25, scope: !9650)
!9657 = !DILocation(line: 3455, column: 9, scope: !9650)
!9658 = !DILocation(line: 3455, column: 7, scope: !9650)
!9659 = !DILocation(line: 3455, column: 2, scope: !9650)
!9660 = !DILocation(line: 3473, column: 42, scope: !9648)
!9661 = !DILocation(line: 3473, column: 47, scope: !9648)
!9662 = !DILocation(line: 3473, column: 53, scope: !9648)
!9663 = !DILocation(line: 3473, column: 18, scope: !9648)
!9664 = !DILocation(line: 3473, column: 16, scope: !9648)
!9665 = !DILocation(line: 3474, column: 5, scope: !9648)
!9666 = !DILocation(line: 3478, column: 12, scope: !9667)
!9667 = distinct !DILexicalBlock(scope: !9635, file: !3, line: 3478, column: 12)
!9668 = !DILocation(line: 3479, column: 5, scope: !9667)
!9669 = !DILocation(line: 3479, column: 25, scope: !9667)
!9670 = !DILocation(line: 3479, column: 10, scope: !9667)
!9671 = !DILocation(line: 3480, column: 9, scope: !9667)
!9672 = !DILocation(line: 3480, column: 30, scope: !9667)
!9673 = !DILocation(line: 3480, column: 12, scope: !9667)
!9674 = !DILocation(line: 3480, column: 35, scope: !9667)
!9675 = !DILocation(line: 3480, column: 41, scope: !9667)
!9676 = !DILocation(line: 3478, column: 12, scope: !9635)
!9677 = !DILocation(line: 3491, column: 7, scope: !9678)
!9678 = distinct !DILexicalBlock(scope: !9667, file: !3, line: 3481, column: 5)
!9679 = !DILocation(line: 3498, column: 41, scope: !9678)
!9680 = !DILocation(line: 3498, column: 47, scope: !9678)
!9681 = !DILocation(line: 3498, column: 14, scope: !9678)
!9682 = !DILocation(line: 3498, column: 12, scope: !9678)
!9683 = !DILocation(line: 3508, column: 7, scope: !9678)
!9684 = !DILocation(line: 3508, column: 14, scope: !9678)
!9685 = !DILocation(line: 3509, column: 7, scope: !9678)
!9686 = !DILocation(line: 3509, column: 10, scope: !9678)
!9687 = !DILocation(line: 0, scope: !9678)
!9688 = !DILocation(line: 3510, column: 9, scope: !9678)
!9689 = !DILocation(line: 3510, column: 7, scope: !9678)
!9690 = distinct !{!9690, !9683, !9688}
!9691 = !DILocation(line: 3512, column: 42, scope: !9678)
!9692 = !DILocation(line: 3512, column: 47, scope: !9678)
!9693 = !DILocation(line: 3512, column: 53, scope: !9678)
!9694 = !DILocation(line: 3512, column: 18, scope: !9678)
!9695 = !DILocation(line: 3512, column: 16, scope: !9678)
!9696 = !DILocation(line: 3513, column: 5, scope: !9678)
!9697 = !DILocation(line: 3515, column: 39, scope: !9667)
!9698 = !DILocation(line: 3515, column: 44, scope: !9667)
!9699 = !DILocation(line: 3515, column: 50, scope: !9667)
!9700 = !DILocation(line: 3515, column: 16, scope: !9667)
!9701 = !DILocation(line: 3515, column: 14, scope: !9667)
!9702 = !DILocation(line: 3517, column: 3, scope: !9597)
!9703 = !DILocation(line: 3519, column: 11, scope: !9704)
!9704 = distinct !DILexicalBlock(scope: !9705, file: !3, line: 3519, column: 11)
!9705 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 3518, column: 5)
!9706 = !DILocation(line: 3519, column: 11, scope: !9705)
!9707 = !DILocation(line: 3520, column: 19, scope: !9704)
!9708 = !DILocation(line: 3520, column: 34, scope: !9704)
!9709 = !DILocation(line: 3520, column: 2, scope: !9704)
!9710 = !DILocation(line: 3521, column: 11, scope: !9711)
!9711 = distinct !DILexicalBlock(scope: !9705, file: !3, line: 3521, column: 11)
!9712 = !DILocation(line: 3521, column: 18, scope: !9711)
!9713 = !DILocation(line: 3521, column: 15, scope: !9711)
!9714 = !DILocation(line: 3521, column: 11, scope: !9705)
!9715 = !DILocation(line: 3522, column: 2, scope: !9711)
!9716 = !DILocation(line: 3523, column: 13, scope: !9705)
!9717 = !DILocation(line: 3523, column: 11, scope: !9705)
!9718 = distinct !{!9718, !9702, !9719}
!9719 = !DILocation(line: 3524, column: 5, scope: !9597)
!9720 = !DILocation(line: 3526, column: 20, scope: !9597)
!9721 = !DILocation(line: 3528, column: 7, scope: !9722)
!9722 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 3528, column: 7)
!9723 = !DILocation(line: 3528, column: 7, scope: !9597)
!9724 = !DILocation(line: 3530, column: 16, scope: !9725)
!9725 = distinct !DILexicalBlock(scope: !9722, file: !3, line: 3529, column: 5)
!9726 = !DILocation(line: 3531, column: 9, scope: !9725)
!9727 = !DILocation(line: 3531, column: 13, scope: !9725)
!9728 = !DILocation(line: 3531, column: 20, scope: !9725)
!9729 = !DILocation(line: 3530, column: 7, scope: !9725)
!9730 = !DILocation(line: 3532, column: 16, scope: !9725)
!9731 = !DILocation(line: 3533, column: 9, scope: !9725)
!9732 = !DILocation(line: 3533, column: 15, scope: !9725)
!9733 = !DILocation(line: 3533, column: 29, scope: !9725)
!9734 = !DILocation(line: 3532, column: 7, scope: !9725)
!9735 = !DILocation(line: 3534, column: 5, scope: !9725)
!9736 = !DILocation(line: 3535, column: 1, scope: !9597)
!9737 = distinct !DISubprogram(name: "process_insert_insn", scope: !3, file: !3, line: 3376, type: !9738, scopeLine: 3377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9738 = !DISubroutineType(types: !9739)
!9739 = !{!1893, !3086}
!9740 = !DILocalVariable(name: "expr", arg: 1, scope: !9737, file: !3, line: 3376, type: !3086)
!9741 = !DILocation(line: 3376, column: 35, scope: !9737)
!9742 = !DILocalVariable(name: "reg", scope: !9737, file: !3, line: 3378, type: !1893)
!9743 = !DILocation(line: 3378, column: 7, scope: !9737)
!9744 = !DILocation(line: 3378, column: 13, scope: !9737)
!9745 = !DILocation(line: 3378, column: 19, scope: !9737)
!9746 = !DILocalVariable(name: "exp", scope: !9737, file: !3, line: 3379, type: !1893)
!9747 = !DILocation(line: 3379, column: 7, scope: !9737)
!9748 = !DILocation(line: 3379, column: 23, scope: !9737)
!9749 = !DILocation(line: 3379, column: 29, scope: !9737)
!9750 = !DILocation(line: 3379, column: 13, scope: !9737)
!9751 = !DILocalVariable(name: "pat", scope: !9737, file: !3, line: 3380, type: !1893)
!9752 = !DILocation(line: 3380, column: 7, scope: !9737)
!9753 = !DILocation(line: 3382, column: 3, scope: !9737)
!9754 = !DILocation(line: 3386, column: 24, scope: !9755)
!9755 = distinct !DILexicalBlock(scope: !9737, file: !3, line: 3386, column: 7)
!9756 = !DILocation(line: 3386, column: 29, scope: !9755)
!9757 = !DILocation(line: 3386, column: 7, scope: !9755)
!9758 = !DILocation(line: 3386, column: 7, scope: !9737)
!9759 = !DILocation(line: 3387, column: 21, scope: !9755)
!9760 = !DILocation(line: 3387, column: 26, scope: !9755)
!9761 = !DILocation(line: 3387, column: 5, scope: !9755)
!9762 = !DILocalVariable(name: "insn", scope: !9763, file: !3, line: 3394, type: !1893)
!9763 = distinct !DILexicalBlock(scope: !9755, file: !3, line: 3393, column: 5)
!9764 = !DILocation(line: 3394, column: 11, scope: !9763)
!9765 = !DILocation(line: 3394, column: 29, scope: !9763)
!9766 = !DILocation(line: 3394, column: 18, scope: !9763)
!9767 = !DILocation(line: 3396, column: 27, scope: !9768)
!9768 = distinct !DILexicalBlock(scope: !9763, file: !3, line: 3396, column: 11)
!9769 = !DILocation(line: 3396, column: 11, scope: !9768)
!9770 = !DILocation(line: 3396, column: 11, scope: !9763)
!9771 = !DILocation(line: 3397, column: 2, scope: !9768)
!9772 = !DILocation(line: 3401, column: 9, scope: !9737)
!9773 = !DILocation(line: 3401, column: 7, scope: !9737)
!9774 = !DILocation(line: 3402, column: 3, scope: !9737)
!9775 = !DILocation(line: 3404, column: 10, scope: !9737)
!9776 = !DILocation(line: 3404, column: 3, scope: !9737)
!9777 = distinct !DISubprogram(name: "update_ld_motion_stores", scope: !3, file: !3, line: 4851, type: !9778, scopeLine: 4852, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9778 = !DISubroutineType(types: !9779)
!9779 = !{null, !3086}
!9780 = !DILocalVariable(name: "expr", arg: 1, scope: !9777, file: !3, line: 4851, type: !3086)
!9781 = !DILocation(line: 4851, column: 40, scope: !9777)
!9782 = !DILocalVariable(name: "mem_ptr", scope: !9777, file: !3, line: 4853, type: !3110)
!9783 = !DILocation(line: 4853, column: 20, scope: !9777)
!9784 = !DILocation(line: 4855, column: 36, scope: !9785)
!9785 = distinct !DILexicalBlock(scope: !9777, file: !3, line: 4855, column: 7)
!9786 = !DILocation(line: 4855, column: 42, scope: !9785)
!9787 = !DILocation(line: 4855, column: 18, scope: !9785)
!9788 = !DILocation(line: 4855, column: 16, scope: !9785)
!9789 = !DILocation(line: 4855, column: 7, scope: !9777)
!9790 = !DILocalVariable(name: "list", scope: !9791, file: !3, line: 4865, type: !1893)
!9791 = distinct !DILexicalBlock(scope: !9785, file: !3, line: 4856, column: 5)
!9792 = !DILocation(line: 4865, column: 11, scope: !9791)
!9793 = !DILocation(line: 4865, column: 18, scope: !9791)
!9794 = !DILocation(line: 4865, column: 27, scope: !9791)
!9795 = !DILocation(line: 4867, column: 7, scope: !9791)
!9796 = !DILocation(line: 4867, column: 15, scope: !9797)
!9797 = distinct !DILexicalBlock(scope: !9798, file: !3, line: 4867, column: 7)
!9798 = distinct !DILexicalBlock(scope: !9791, file: !3, line: 4867, column: 7)
!9799 = !DILocation(line: 4867, column: 20, scope: !9797)
!9800 = !DILocation(line: 4867, column: 7, scope: !9798)
!9801 = !DILocalVariable(name: "insn", scope: !9802, file: !3, line: 4869, type: !1893)
!9802 = distinct !DILexicalBlock(scope: !9797, file: !3, line: 4868, column: 2)
!9803 = !DILocation(line: 4869, column: 8, scope: !9802)
!9804 = !DILocation(line: 4869, column: 15, scope: !9802)
!9805 = !DILocalVariable(name: "pat", scope: !9802, file: !3, line: 4870, type: !1893)
!9806 = !DILocation(line: 4870, column: 8, scope: !9802)
!9807 = !DILocation(line: 4870, column: 14, scope: !9802)
!9808 = !DILocalVariable(name: "src", scope: !9802, file: !3, line: 4871, type: !1893)
!9809 = !DILocation(line: 4871, column: 8, scope: !9802)
!9810 = !DILocation(line: 4871, column: 14, scope: !9802)
!9811 = !DILocalVariable(name: "reg", scope: !9802, file: !3, line: 4872, type: !1893)
!9812 = !DILocation(line: 4872, column: 8, scope: !9802)
!9813 = !DILocation(line: 4872, column: 14, scope: !9802)
!9814 = !DILocation(line: 4872, column: 20, scope: !9802)
!9815 = !DILocalVariable(name: "copy", scope: !9802, file: !3, line: 4873, type: !1893)
!9816 = !DILocation(line: 4873, column: 8, scope: !9802)
!9817 = !DILocation(line: 4876, column: 8, scope: !9818)
!9818 = distinct !DILexicalBlock(scope: !9802, file: !3, line: 4876, column: 8)
!9819 = !DILocation(line: 4876, column: 14, scope: !9818)
!9820 = !DILocation(line: 4876, column: 30, scope: !9818)
!9821 = !DILocation(line: 4876, column: 27, scope: !9818)
!9822 = !DILocation(line: 4876, column: 8, scope: !9802)
!9823 = !DILocation(line: 4877, column: 6, scope: !9818)
!9824 = !DILocation(line: 4879, column: 8, scope: !9825)
!9825 = distinct !DILexicalBlock(scope: !9802, file: !3, line: 4879, column: 8)
!9826 = !DILocation(line: 4879, column: 8, scope: !9802)
!9827 = !DILocation(line: 4881, column: 17, scope: !9828)
!9828 = distinct !DILexicalBlock(scope: !9825, file: !3, line: 4880, column: 6)
!9829 = !DILocation(line: 4881, column: 8, scope: !9828)
!9830 = !DILocation(line: 4882, column: 19, scope: !9828)
!9831 = !DILocation(line: 4882, column: 30, scope: !9828)
!9832 = !DILocation(line: 4882, column: 36, scope: !9828)
!9833 = !DILocation(line: 4882, column: 8, scope: !9828)
!9834 = !DILocation(line: 4883, column: 17, scope: !9828)
!9835 = !DILocation(line: 4883, column: 8, scope: !9828)
!9836 = !DILocation(line: 4884, column: 26, scope: !9828)
!9837 = !DILocation(line: 4884, column: 37, scope: !9828)
!9838 = !DILocation(line: 4884, column: 8, scope: !9828)
!9839 = !DILocation(line: 4885, column: 17, scope: !9828)
!9840 = !DILocation(line: 4885, column: 8, scope: !9828)
!9841 = !DILocation(line: 4886, column: 6, scope: !9828)
!9842 = !DILocation(line: 4888, column: 26, scope: !9802)
!9843 = !DILocation(line: 4888, column: 41, scope: !9802)
!9844 = !DILocation(line: 4888, column: 31, scope: !9802)
!9845 = !DILocation(line: 4888, column: 11, scope: !9802)
!9846 = !DILocation(line: 4888, column: 9, scope: !9802)
!9847 = !DILocation(line: 4889, column: 22, scope: !9802)
!9848 = !DILocation(line: 4889, column: 28, scope: !9802)
!9849 = !DILocation(line: 4889, column: 4, scope: !9802)
!9850 = !DILocation(line: 4890, column: 20, scope: !9802)
!9851 = !DILocation(line: 4890, column: 4, scope: !9802)
!9852 = !DILocation(line: 4890, column: 18, scope: !9802)
!9853 = !DILocation(line: 4891, column: 20, scope: !9802)
!9854 = !DILocation(line: 4891, column: 4, scope: !9802)
!9855 = !DILocation(line: 4894, column: 4, scope: !9802)
!9856 = !DILocation(line: 4894, column: 21, scope: !9802)
!9857 = !DILocation(line: 4895, column: 21, scope: !9802)
!9858 = !DILocation(line: 4896, column: 2, scope: !9802)
!9859 = !DILocation(line: 4867, column: 40, scope: !9797)
!9860 = !DILocation(line: 4867, column: 38, scope: !9797)
!9861 = !DILocation(line: 4867, column: 7, scope: !9797)
!9862 = distinct !{!9862, !9800, !9863}
!9863 = !DILocation(line: 4896, column: 2, scope: !9798)
!9864 = !DILocation(line: 4897, column: 5, scope: !9791)
!9865 = !DILocation(line: 4898, column: 1, scope: !9777)
!9866 = distinct !DISubprogram(name: "single_succ_p", scope: !146, file: !146, line: 626, type: !5260, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9867 = !DILocalVariable(name: "bb", arg: 1, scope: !9866, file: !146, line: 626, type: !5262)
!9868 = !DILocation(line: 626, column: 34, scope: !9866)
!9869 = !DILocation(line: 628, column: 10, scope: !9866)
!9870 = !DILocation(line: 628, column: 33, scope: !9866)
!9871 = !DILocation(line: 628, column: 3, scope: !9866)
!9872 = distinct !DISubprogram(name: "single_succ_edge", scope: !146, file: !146, line: 643, type: !9873, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9873 = !DISubroutineType(types: !9874)
!9874 = !{!2465, !5262}
!9875 = !DILocalVariable(name: "bb", arg: 1, scope: !9872, file: !146, line: 643, type: !5262)
!9876 = !DILocation(line: 643, column: 37, scope: !9872)
!9877 = !DILocation(line: 645, column: 3, scope: !9872)
!9878 = !DILocation(line: 646, column: 10, scope: !9872)
!9879 = !DILocation(line: 646, column: 3, scope: !9872)
!9880 = distinct !DISubprogram(name: "add_label_notes", scope: !3, file: !3, line: 4013, type: !7799, scopeLine: 4014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9881 = !DILocalVariable(name: "x", arg: 1, scope: !9880, file: !3, line: 4013, type: !1893)
!9882 = !DILocation(line: 4013, column: 22, scope: !9880)
!9883 = !DILocalVariable(name: "insn", arg: 2, scope: !9880, file: !3, line: 4013, type: !1893)
!9884 = !DILocation(line: 4013, column: 29, scope: !9880)
!9885 = !DILocalVariable(name: "code", scope: !9880, file: !3, line: 4015, type: !388)
!9886 = !DILocation(line: 4015, column: 17, scope: !9880)
!9887 = !DILocation(line: 4015, column: 24, scope: !9880)
!9888 = !DILocalVariable(name: "i", scope: !9880, file: !3, line: 4016, type: !1917)
!9889 = !DILocation(line: 4016, column: 7, scope: !9880)
!9890 = !DILocalVariable(name: "j", scope: !9880, file: !3, line: 4016, type: !1917)
!9891 = !DILocation(line: 4016, column: 10, scope: !9880)
!9892 = !DILocalVariable(name: "fmt", scope: !9880, file: !3, line: 4017, type: !1920)
!9893 = !DILocation(line: 4017, column: 15, scope: !9880)
!9894 = !DILocation(line: 4019, column: 7, scope: !9895)
!9895 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 4019, column: 7)
!9896 = !DILocation(line: 4019, column: 12, scope: !9895)
!9897 = !DILocation(line: 4019, column: 25, scope: !9895)
!9898 = !DILocation(line: 4019, column: 29, scope: !9895)
!9899 = !DILocation(line: 4019, column: 7, scope: !9880)
!9900 = !DILocation(line: 4030, column: 7, scope: !9901)
!9901 = distinct !DILexicalBlock(scope: !9895, file: !3, line: 4020, column: 5)
!9902 = !DILocation(line: 4031, column: 21, scope: !9901)
!9903 = !DILocation(line: 4031, column: 46, scope: !9901)
!9904 = !DILocation(line: 4031, column: 7, scope: !9901)
!9905 = !DILocation(line: 4033, column: 11, scope: !9906)
!9906 = distinct !DILexicalBlock(scope: !9901, file: !3, line: 4033, column: 11)
!9907 = !DILocation(line: 4033, column: 11, scope: !9901)
!9908 = !DILocation(line: 4034, column: 2, scope: !9906)
!9909 = !DILocation(line: 4034, column: 27, scope: !9906)
!9910 = !DILocation(line: 4036, column: 7, scope: !9901)
!9911 = !DILocation(line: 4039, column: 12, scope: !9912)
!9912 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 4039, column: 3)
!9913 = !DILocation(line: 4039, column: 34, scope: !9912)
!9914 = !DILocation(line: 4039, column: 10, scope: !9912)
!9915 = !DILocation(line: 4039, column: 45, scope: !9912)
!9916 = !DILocation(line: 4039, column: 43, scope: !9912)
!9917 = !DILocation(line: 4039, column: 8, scope: !9912)
!9918 = !DILocation(line: 4039, column: 68, scope: !9919)
!9919 = distinct !DILexicalBlock(scope: !9912, file: !3, line: 4039, column: 3)
!9920 = !DILocation(line: 4039, column: 70, scope: !9919)
!9921 = !DILocation(line: 4039, column: 3, scope: !9912)
!9922 = !DILocation(line: 4041, column: 11, scope: !9923)
!9923 = distinct !DILexicalBlock(scope: !9924, file: !3, line: 4041, column: 11)
!9924 = distinct !DILexicalBlock(scope: !9919, file: !3, line: 4040, column: 5)
!9925 = !DILocation(line: 4041, column: 15, scope: !9923)
!9926 = !DILocation(line: 4041, column: 18, scope: !9923)
!9927 = !DILocation(line: 4041, column: 11, scope: !9924)
!9928 = !DILocation(line: 4042, column: 19, scope: !9923)
!9929 = !DILocation(line: 4042, column: 32, scope: !9923)
!9930 = !DILocation(line: 4042, column: 2, scope: !9923)
!9931 = !DILocation(line: 4043, column: 16, scope: !9932)
!9932 = distinct !DILexicalBlock(scope: !9923, file: !3, line: 4043, column: 16)
!9933 = !DILocation(line: 4043, column: 20, scope: !9932)
!9934 = !DILocation(line: 4043, column: 23, scope: !9932)
!9935 = !DILocation(line: 4043, column: 16, scope: !9923)
!9936 = !DILocation(line: 4044, column: 11, scope: !9937)
!9937 = distinct !DILexicalBlock(scope: !9932, file: !3, line: 4044, column: 2)
!9938 = !DILocation(line: 4044, column: 26, scope: !9937)
!9939 = !DILocation(line: 4044, column: 9, scope: !9937)
!9940 = !DILocation(line: 4044, column: 7, scope: !9937)
!9941 = !DILocation(line: 4044, column: 31, scope: !9942)
!9942 = distinct !DILexicalBlock(scope: !9937, file: !3, line: 4044, column: 2)
!9943 = !DILocation(line: 4044, column: 33, scope: !9942)
!9944 = !DILocation(line: 4044, column: 2, scope: !9937)
!9945 = !DILocation(line: 4045, column: 21, scope: !9942)
!9946 = !DILocation(line: 4045, column: 40, scope: !9942)
!9947 = !DILocation(line: 4045, column: 4, scope: !9942)
!9948 = !DILocation(line: 4044, column: 40, scope: !9942)
!9949 = !DILocation(line: 4044, column: 2, scope: !9942)
!9950 = distinct !{!9950, !9944, !9951}
!9951 = !DILocation(line: 4045, column: 44, scope: !9937)
!9952 = !DILocation(line: 4046, column: 5, scope: !9924)
!9953 = !DILocation(line: 4039, column: 77, scope: !9919)
!9954 = !DILocation(line: 4039, column: 3, scope: !9919)
!9955 = distinct !{!9955, !9921, !9956}
!9956 = !DILocation(line: 4046, column: 5, scope: !9912)
!9957 = !DILocation(line: 4047, column: 1, scope: !9880)
!9958 = distinct !DISubprogram(name: "pre_expr_reaches_here_p", scope: !3, file: !3, line: 3359, type: !9959, scopeLine: 3360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9959 = !DISubroutineType(types: !9960)
!9960 = !{!1917, !2448, !3086, !2448}
!9961 = !DILocalVariable(name: "occr_bb", arg: 1, scope: !9958, file: !3, line: 3359, type: !2448)
!9962 = !DILocation(line: 3359, column: 38, scope: !9958)
!9963 = !DILocalVariable(name: "expr", arg: 2, scope: !9958, file: !3, line: 3359, type: !3086)
!9964 = !DILocation(line: 3359, column: 60, scope: !9958)
!9965 = !DILocalVariable(name: "bb", arg: 3, scope: !9958, file: !3, line: 3359, type: !2448)
!9966 = !DILocation(line: 3359, column: 78, scope: !9958)
!9967 = !DILocalVariable(name: "rval", scope: !9958, file: !3, line: 3361, type: !1917)
!9968 = !DILocation(line: 3361, column: 7, scope: !9958)
!9969 = !DILocalVariable(name: "visited", scope: !9958, file: !3, line: 3362, type: !2010)
!9970 = !DILocation(line: 3362, column: 9, scope: !9958)
!9971 = !DILocation(line: 3362, column: 19, scope: !9958)
!9972 = !DILocation(line: 3364, column: 40, scope: !9958)
!9973 = !DILocation(line: 3364, column: 49, scope: !9958)
!9974 = !DILocation(line: 3364, column: 55, scope: !9958)
!9975 = !DILocation(line: 3364, column: 59, scope: !9958)
!9976 = !DILocation(line: 3364, column: 10, scope: !9958)
!9977 = !DILocation(line: 3364, column: 8, scope: !9958)
!9978 = !DILocation(line: 3366, column: 9, scope: !9958)
!9979 = !DILocation(line: 3366, column: 3, scope: !9958)
!9980 = !DILocation(line: 3367, column: 10, scope: !9958)
!9981 = !DILocation(line: 3367, column: 3, scope: !9958)
!9982 = distinct !DISubprogram(name: "pre_insert_copy_insn", scope: !3, file: !3, line: 3636, type: !9983, scopeLine: 3637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!9983 = !DISubroutineType(types: !9984)
!9984 = !{null, !3086, !1893}
!9985 = !DILocalVariable(name: "expr", arg: 1, scope: !9982, file: !3, line: 3636, type: !3086)
!9986 = !DILocation(line: 3636, column: 36, scope: !9982)
!9987 = !DILocalVariable(name: "insn", arg: 2, scope: !9982, file: !3, line: 3636, type: !1893)
!9988 = !DILocation(line: 3636, column: 46, scope: !9982)
!9989 = !DILocalVariable(name: "reg", scope: !9982, file: !3, line: 3638, type: !1893)
!9990 = !DILocation(line: 3638, column: 7, scope: !9982)
!9991 = !DILocation(line: 3638, column: 13, scope: !9982)
!9992 = !DILocation(line: 3638, column: 19, scope: !9982)
!9993 = !DILocalVariable(name: "regno", scope: !9982, file: !3, line: 3639, type: !1917)
!9994 = !DILocation(line: 3639, column: 7, scope: !9982)
!9995 = !DILocation(line: 3639, column: 15, scope: !9982)
!9996 = !DILocalVariable(name: "indx", scope: !9982, file: !3, line: 3640, type: !1917)
!9997 = !DILocation(line: 3640, column: 7, scope: !9982)
!9998 = !DILocation(line: 3640, column: 14, scope: !9982)
!9999 = !DILocation(line: 3640, column: 20, scope: !9982)
!10000 = !DILocalVariable(name: "pat", scope: !9982, file: !3, line: 3641, type: !1893)
!10001 = !DILocation(line: 3641, column: 7, scope: !9982)
!10002 = !DILocation(line: 3641, column: 13, scope: !9982)
!10003 = !DILocalVariable(name: "set", scope: !9982, file: !3, line: 3642, type: !1893)
!10004 = !DILocation(line: 3642, column: 7, scope: !9982)
!10005 = !DILocalVariable(name: "first_set", scope: !9982, file: !3, line: 3642, type: !1893)
!10006 = !DILocation(line: 3642, column: 12, scope: !9982)
!10007 = !DILocalVariable(name: "new_insn", scope: !9982, file: !3, line: 3642, type: !1893)
!10008 = !DILocation(line: 3642, column: 23, scope: !9982)
!10009 = !DILocalVariable(name: "old_reg", scope: !9982, file: !3, line: 3643, type: !1893)
!10010 = !DILocation(line: 3643, column: 7, scope: !9982)
!10011 = !DILocalVariable(name: "i", scope: !9982, file: !3, line: 3644, type: !1917)
!10012 = !DILocation(line: 3644, column: 7, scope: !9982)
!10013 = !DILocation(line: 3647, column: 11, scope: !9982)
!10014 = !DILocation(line: 3647, column: 3, scope: !9982)
!10015 = !DILocation(line: 3650, column: 13, scope: !10016)
!10016 = distinct !DILexicalBlock(scope: !9982, file: !3, line: 3648, column: 5)
!10017 = !DILocation(line: 3650, column: 11, scope: !10016)
!10018 = !DILocation(line: 3651, column: 7, scope: !10016)
!10019 = !DILocation(line: 3656, column: 17, scope: !10016)
!10020 = !DILocation(line: 3657, column: 11, scope: !10016)
!10021 = !DILocation(line: 3658, column: 14, scope: !10022)
!10022 = distinct !DILexicalBlock(scope: !10016, file: !3, line: 3658, column: 7)
!10023 = !DILocation(line: 3658, column: 12, scope: !10022)
!10024 = !DILocation(line: 3658, column: 19, scope: !10025)
!10025 = distinct !DILexicalBlock(scope: !10022, file: !3, line: 3658, column: 7)
!10026 = !DILocation(line: 3658, column: 23, scope: !10025)
!10027 = !DILocation(line: 3658, column: 21, scope: !10025)
!10028 = !DILocation(line: 3658, column: 7, scope: !10022)
!10029 = !DILocalVariable(name: "x", scope: !10030, file: !3, line: 3660, type: !1893)
!10030 = distinct !DILexicalBlock(scope: !10025, file: !3, line: 3659, column: 2)
!10031 = !DILocation(line: 3660, column: 8, scope: !10030)
!10032 = !DILocation(line: 3660, column: 12, scope: !10030)
!10033 = !DILocation(line: 3661, column: 8, scope: !10034)
!10034 = distinct !DILexicalBlock(scope: !10030, file: !3, line: 3661, column: 8)
!10035 = !DILocation(line: 3661, column: 21, scope: !10034)
!10036 = !DILocation(line: 3661, column: 8, scope: !10030)
!10037 = !DILocation(line: 3666, column: 12, scope: !10038)
!10038 = distinct !DILexicalBlock(scope: !10039, file: !3, line: 3666, column: 12)
!10039 = distinct !DILexicalBlock(scope: !10034, file: !3, line: 3662, column: 6)
!10040 = !DILocation(line: 3666, column: 22, scope: !10038)
!10041 = !DILocation(line: 3666, column: 12, scope: !10039)
!10042 = !DILocation(line: 3667, column: 15, scope: !10038)
!10043 = !DILocation(line: 3667, column: 13, scope: !10038)
!10044 = !DILocation(line: 3667, column: 3, scope: !10038)
!10045 = !DILocation(line: 3668, column: 26, scope: !10046)
!10046 = distinct !DILexicalBlock(scope: !10039, file: !3, line: 3668, column: 12)
!10047 = !DILocation(line: 3668, column: 39, scope: !10046)
!10048 = !DILocation(line: 3668, column: 45, scope: !10046)
!10049 = !DILocation(line: 3668, column: 12, scope: !10046)
!10050 = !DILocation(line: 3668, column: 12, scope: !10039)
!10051 = !DILocation(line: 3670, column: 18, scope: !10052)
!10052 = distinct !DILexicalBlock(scope: !10046, file: !3, line: 3669, column: 10)
!10053 = !DILocation(line: 3670, column: 16, scope: !10052)
!10054 = !DILocation(line: 3671, column: 12, scope: !10052)
!10055 = !DILocation(line: 3673, column: 6, scope: !10039)
!10056 = !DILocation(line: 3674, column: 2, scope: !10030)
!10057 = !DILocation(line: 3658, column: 42, scope: !10025)
!10058 = !DILocation(line: 3658, column: 7, scope: !10025)
!10059 = distinct !{!10059, !10028, !10060}
!10060 = !DILocation(line: 3674, column: 2, scope: !10022)
!10061 = !DILocation(line: 3676, column: 7, scope: !10016)
!10062 = !DILocation(line: 3677, column: 11, scope: !10063)
!10063 = distinct !DILexicalBlock(scope: !10016, file: !3, line: 3677, column: 11)
!10064 = !DILocation(line: 3677, column: 15, scope: !10063)
!10065 = !DILocation(line: 3677, column: 11, scope: !10016)
!10066 = !DILocation(line: 3678, column: 15, scope: !10063)
!10067 = !DILocation(line: 3678, column: 13, scope: !10063)
!10068 = !DILocation(line: 3678, column: 9, scope: !10063)
!10069 = !DILocation(line: 3679, column: 7, scope: !10016)
!10070 = !DILocation(line: 3682, column: 7, scope: !10016)
!10071 = !DILocation(line: 3683, column: 5, scope: !10016)
!10072 = !DILocation(line: 3685, column: 7, scope: !10073)
!10073 = distinct !DILexicalBlock(scope: !9982, file: !3, line: 3685, column: 7)
!10074 = !DILocation(line: 3685, column: 7, scope: !9982)
!10075 = !DILocation(line: 3687, column: 17, scope: !10076)
!10076 = distinct !DILexicalBlock(scope: !10073, file: !3, line: 3686, column: 5)
!10077 = !DILocation(line: 3687, column: 15, scope: !10076)
!10078 = !DILocation(line: 3689, column: 28, scope: !10079)
!10079 = distinct !DILexicalBlock(scope: !10076, file: !3, line: 3689, column: 11)
!10080 = !DILocation(line: 3689, column: 35, scope: !10079)
!10081 = !DILocation(line: 3689, column: 51, scope: !10079)
!10082 = !DILocation(line: 3689, column: 11, scope: !10079)
!10083 = !DILocation(line: 3689, column: 11, scope: !10076)
!10084 = !DILocation(line: 3691, column: 37, scope: !10085)
!10085 = distinct !DILexicalBlock(scope: !10079, file: !3, line: 3690, column: 9)
!10086 = !DILocation(line: 3691, column: 46, scope: !10085)
!10087 = !DILocation(line: 3691, column: 22, scope: !10085)
!10088 = !DILocation(line: 3691, column: 20, scope: !10085)
!10089 = !DILocation(line: 3692, column: 39, scope: !10085)
!10090 = !DILocation(line: 3692, column: 49, scope: !10085)
!10091 = !DILocation(line: 3692, column: 22, scope: !10085)
!10092 = !DILocation(line: 3692, column: 20, scope: !10085)
!10093 = !DILocation(line: 3693, column: 9, scope: !10085)
!10094 = !DILocation(line: 3696, column: 37, scope: !10095)
!10095 = distinct !DILexicalBlock(scope: !10079, file: !3, line: 3695, column: 9)
!10096 = !DILocation(line: 3696, column: 42, scope: !10095)
!10097 = !DILocation(line: 3696, column: 22, scope: !10095)
!10098 = !DILocation(line: 3696, column: 20, scope: !10095)
!10099 = !DILocation(line: 3697, column: 39, scope: !10095)
!10100 = !DILocation(line: 3697, column: 49, scope: !10095)
!10101 = !DILocation(line: 3697, column: 22, scope: !10095)
!10102 = !DILocation(line: 3697, column: 20, scope: !10095)
!10103 = !DILocation(line: 3699, column: 5, scope: !10076)
!10104 = !DILocation(line: 3702, column: 17, scope: !10105)
!10105 = distinct !DILexicalBlock(scope: !10073, file: !3, line: 3701, column: 5)
!10106 = !DILocation(line: 3702, column: 15, scope: !10105)
!10107 = !DILocation(line: 3703, column: 33, scope: !10105)
!10108 = !DILocation(line: 3703, column: 38, scope: !10105)
!10109 = !DILocation(line: 3703, column: 18, scope: !10105)
!10110 = !DILocation(line: 3703, column: 16, scope: !10105)
!10111 = !DILocation(line: 3706, column: 28, scope: !10112)
!10112 = distinct !DILexicalBlock(scope: !10105, file: !3, line: 3706, column: 11)
!10113 = !DILocation(line: 3706, column: 35, scope: !10112)
!10114 = !DILocation(line: 3706, column: 50, scope: !10112)
!10115 = !DILocation(line: 3706, column: 11, scope: !10112)
!10116 = !DILocation(line: 3706, column: 11, scope: !10105)
!10117 = !DILocation(line: 3707, column: 38, scope: !10112)
!10118 = !DILocation(line: 3707, column: 48, scope: !10112)
!10119 = !DILocation(line: 3707, column: 20, scope: !10112)
!10120 = !DILocation(line: 3707, column: 18, scope: !10112)
!10121 = !DILocation(line: 3707, column: 9, scope: !10112)
!10122 = !DILocation(line: 3709, column: 37, scope: !10112)
!10123 = !DILocation(line: 3709, column: 47, scope: !10112)
!10124 = !DILocation(line: 3709, column: 20, scope: !10112)
!10125 = !DILocation(line: 3709, column: 18, scope: !10112)
!10126 = !DILocation(line: 3712, column: 20, scope: !9982)
!10127 = !DILocation(line: 3714, column: 7, scope: !10128)
!10128 = distinct !DILexicalBlock(scope: !9982, file: !3, line: 3714, column: 7)
!10129 = !DILocation(line: 3714, column: 7, scope: !9982)
!10130 = !DILocation(line: 3715, column: 14, scope: !10128)
!10131 = !DILocation(line: 3717, column: 8, scope: !10128)
!10132 = !DILocation(line: 3717, column: 31, scope: !10128)
!10133 = !DILocation(line: 3717, column: 38, scope: !10128)
!10134 = !DILocation(line: 3717, column: 59, scope: !10128)
!10135 = !DILocation(line: 3718, column: 8, scope: !10128)
!10136 = !DILocation(line: 3718, column: 25, scope: !10128)
!10137 = !DILocation(line: 3715, column: 5, scope: !10128)
!10138 = !DILocation(line: 3719, column: 1, scope: !9982)
!10139 = distinct !DISubprogram(name: "pre_expr_reaches_here_p_work", scope: !3, file: !3, line: 3313, type: !10140, scopeLine: 3314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10140 = !DISubroutineType(types: !10141)
!10141 = !{!1917, !2448, !3086, !2448, !2010}
!10142 = !DILocalVariable(name: "occr_bb", arg: 1, scope: !10139, file: !3, line: 3313, type: !2448)
!10143 = !DILocation(line: 3313, column: 43, scope: !10139)
!10144 = !DILocalVariable(name: "expr", arg: 2, scope: !10139, file: !3, line: 3313, type: !3086)
!10145 = !DILocation(line: 3313, column: 65, scope: !10139)
!10146 = !DILocalVariable(name: "bb", arg: 3, scope: !10139, file: !3, line: 3313, type: !2448)
!10147 = !DILocation(line: 3313, column: 83, scope: !10139)
!10148 = !DILocalVariable(name: "visited", arg: 4, scope: !10139, file: !3, line: 3313, type: !2010)
!10149 = !DILocation(line: 3313, column: 93, scope: !10139)
!10150 = !DILocalVariable(name: "pred", scope: !10139, file: !3, line: 3315, type: !2465)
!10151 = !DILocation(line: 3315, column: 8, scope: !10139)
!10152 = !DILocalVariable(name: "ei", scope: !10139, file: !3, line: 3316, type: !5117)
!10153 = !DILocation(line: 3316, column: 17, scope: !10139)
!10154 = !DILocation(line: 3318, column: 3, scope: !10155)
!10155 = distinct !DILexicalBlock(scope: !10139, file: !3, line: 3318, column: 3)
!10156 = !DILocation(line: 3318, column: 3, scope: !10157)
!10157 = distinct !DILexicalBlock(scope: !10155, file: !3, line: 3318, column: 3)
!10158 = !DILocalVariable(name: "pred_bb", scope: !10159, file: !3, line: 3320, type: !2448)
!10159 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 3319, column: 5)
!10160 = !DILocation(line: 3320, column: 19, scope: !10159)
!10161 = !DILocation(line: 3320, column: 29, scope: !10159)
!10162 = !DILocation(line: 3320, column: 35, scope: !10159)
!10163 = !DILocation(line: 3322, column: 11, scope: !10164)
!10164 = distinct !DILexicalBlock(scope: !10159, file: !3, line: 3322, column: 11)
!10165 = !DILocation(line: 3322, column: 17, scope: !10164)
!10166 = !DILocation(line: 3322, column: 24, scope: !10164)
!10167 = !DILocation(line: 3322, column: 21, scope: !10164)
!10168 = !DILocation(line: 3324, column: 4, scope: !10164)
!10169 = !DILocation(line: 3324, column: 7, scope: !10164)
!10170 = !DILocation(line: 3324, column: 15, scope: !10164)
!10171 = !DILocation(line: 3324, column: 24, scope: !10164)
!10172 = !DILocation(line: 3322, column: 11, scope: !10159)
!10173 = !DILocation(line: 3328, column: 16, scope: !10174)
!10174 = distinct !DILexicalBlock(scope: !10164, file: !3, line: 3328, column: 16)
!10175 = !DILocation(line: 3328, column: 16, scope: !10164)
!10176 = !DILocation(line: 3333, column: 8, scope: !10177)
!10177 = distinct !DILexicalBlock(scope: !10178, file: !3, line: 3333, column: 8)
!10178 = distinct !DILexicalBlock(scope: !10174, file: !3, line: 3329, column: 2)
!10179 = !DILocation(line: 3333, column: 19, scope: !10177)
!10180 = !DILocation(line: 3333, column: 16, scope: !10177)
!10181 = !DILocation(line: 3333, column: 8, scope: !10178)
!10182 = !DILocation(line: 3334, column: 6, scope: !10177)
!10183 = !DILocation(line: 3336, column: 4, scope: !10178)
!10184 = !DILocation(line: 3336, column: 12, scope: !10178)
!10185 = !DILocation(line: 3336, column: 21, scope: !10178)
!10186 = !DILocation(line: 3336, column: 28, scope: !10178)
!10187 = !DILocation(line: 3337, column: 2, scope: !10178)
!10188 = !DILocation(line: 3339, column: 18, scope: !10189)
!10189 = distinct !DILexicalBlock(scope: !10174, file: !3, line: 3339, column: 16)
!10190 = !DILocation(line: 3339, column: 16, scope: !10174)
!10191 = !DILocation(line: 3340, column: 2, scope: !10189)
!10192 = !DILocation(line: 3340, column: 10, scope: !10189)
!10193 = !DILocation(line: 3340, column: 19, scope: !10189)
!10194 = !DILocation(line: 3340, column: 26, scope: !10189)
!10195 = !DILocation(line: 3345, column: 4, scope: !10196)
!10196 = distinct !DILexicalBlock(scope: !10189, file: !3, line: 3344, column: 2)
!10197 = !DILocation(line: 3345, column: 12, scope: !10196)
!10198 = !DILocation(line: 3345, column: 21, scope: !10196)
!10199 = !DILocation(line: 3345, column: 28, scope: !10196)
!10200 = !DILocation(line: 3346, column: 38, scope: !10201)
!10201 = distinct !DILexicalBlock(scope: !10196, file: !3, line: 3346, column: 8)
!10202 = !DILocation(line: 3346, column: 47, scope: !10201)
!10203 = !DILocation(line: 3346, column: 53, scope: !10201)
!10204 = !DILocation(line: 3346, column: 62, scope: !10201)
!10205 = !DILocation(line: 3346, column: 8, scope: !10201)
!10206 = !DILocation(line: 3346, column: 8, scope: !10196)
!10207 = !DILocation(line: 3347, column: 6, scope: !10201)
!10208 = !DILocation(line: 3349, column: 5, scope: !10159)
!10209 = distinct !{!10209, !10154, !10210}
!10210 = !DILocation(line: 3349, column: 5, scope: !10155)
!10211 = !DILocation(line: 3352, column: 3, scope: !10139)
!10212 = !DILocation(line: 3353, column: 1, scope: !10139)
!10213 = distinct !DISubprogram(name: "one_code_hoisting_pass", scope: !3, file: !3, line: 4424, type: !3488, scopeLine: 4425, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10214 = !DILocalVariable(name: "changed", scope: !10213, file: !3, line: 4426, type: !1917)
!10215 = !DILocation(line: 4426, column: 7, scope: !10213)
!10216 = !DILocation(line: 4428, column: 20, scope: !10213)
!10217 = !DILocation(line: 4429, column: 21, scope: !10213)
!10218 = !DILocation(line: 4432, column: 7, scope: !10219)
!10219 = distinct !DILexicalBlock(scope: !10213, file: !3, line: 4432, column: 7)
!10220 = !DILocation(line: 4432, column: 22, scope: !10219)
!10221 = !DILocation(line: 4433, column: 7, scope: !10219)
!10222 = !DILocation(line: 4433, column: 10, scope: !10219)
!10223 = !DILocation(line: 4432, column: 7, scope: !10213)
!10224 = !DILocation(line: 4434, column: 5, scope: !10219)
!10225 = !DILocation(line: 4437, column: 3, scope: !10213)
!10226 = !DILocation(line: 4439, column: 14, scope: !10213)
!10227 = !DILocation(line: 4440, column: 3, scope: !10213)
!10228 = !DILocation(line: 4441, column: 3, scope: !10213)
!10229 = !DILocation(line: 4443, column: 3, scope: !10213)
!10230 = !DILocation(line: 4444, column: 3, scope: !10213)
!10231 = !DILocation(line: 4445, column: 7, scope: !10232)
!10232 = distinct !DILexicalBlock(scope: !10213, file: !3, line: 4445, column: 7)
!10233 = !DILocation(line: 4445, column: 7, scope: !10213)
!10234 = !DILocation(line: 4446, column: 22, scope: !10232)
!10235 = !DILocation(line: 4446, column: 5, scope: !10232)
!10236 = !DILocation(line: 4448, column: 23, scope: !10237)
!10237 = distinct !DILexicalBlock(scope: !10213, file: !3, line: 4448, column: 7)
!10238 = !DILocation(line: 4448, column: 31, scope: !10237)
!10239 = !DILocation(line: 4448, column: 7, scope: !10213)
!10240 = !DILocation(line: 4450, column: 29, scope: !10241)
!10241 = distinct !DILexicalBlock(scope: !10237, file: !3, line: 4449, column: 5)
!10242 = !DILocation(line: 4450, column: 63, scope: !10241)
!10243 = !DILocation(line: 4450, column: 7, scope: !10241)
!10244 = !DILocation(line: 4451, column: 7, scope: !10241)
!10245 = !DILocation(line: 4452, column: 17, scope: !10241)
!10246 = !DILocation(line: 4452, column: 15, scope: !10241)
!10247 = !DILocation(line: 4453, column: 7, scope: !10241)
!10248 = !DILocation(line: 4454, column: 5, scope: !10241)
!10249 = !DILocation(line: 4456, column: 3, scope: !10213)
!10250 = !DILocation(line: 4457, column: 3, scope: !10213)
!10251 = !DILocation(line: 4458, column: 3, scope: !10213)
!10252 = !DILocation(line: 4461, column: 3, scope: !10213)
!10253 = !DILocation(line: 4463, column: 7, scope: !10254)
!10254 = distinct !DILexicalBlock(scope: !10213, file: !3, line: 4463, column: 7)
!10255 = !DILocation(line: 4463, column: 7, scope: !10213)
!10256 = !DILocation(line: 4465, column: 16, scope: !10257)
!10257 = distinct !DILexicalBlock(scope: !10254, file: !3, line: 4464, column: 5)
!10258 = !DILocation(line: 4466, column: 9, scope: !10257)
!10259 = !DILocation(line: 4466, column: 35, scope: !10257)
!10260 = !DILocation(line: 4466, column: 51, scope: !10257)
!10261 = !DILocation(line: 4465, column: 7, scope: !10257)
!10262 = !DILocation(line: 4467, column: 16, scope: !10257)
!10263 = !DILocation(line: 4468, column: 9, scope: !10257)
!10264 = !DILocation(line: 4468, column: 27, scope: !10257)
!10265 = !DILocation(line: 4467, column: 7, scope: !10257)
!10266 = !DILocation(line: 4469, column: 5, scope: !10257)
!10267 = !DILocation(line: 4471, column: 10, scope: !10213)
!10268 = !DILocation(line: 4471, column: 3, scope: !10213)
!10269 = !DILocation(line: 4472, column: 1, scope: !10213)
!10270 = distinct !DISubprogram(name: "alloc_code_hoist_mem", scope: !3, file: !3, line: 4114, type: !4042, scopeLine: 4115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10271 = !DILocalVariable(name: "n_blocks", arg: 1, scope: !10270, file: !3, line: 4114, type: !1917)
!10272 = !DILocation(line: 4114, column: 27, scope: !10270)
!10273 = !DILocalVariable(name: "n_exprs", arg: 2, scope: !10270, file: !3, line: 4114, type: !1917)
!10274 = !DILocation(line: 4114, column: 41, scope: !10270)
!10275 = !DILocation(line: 4116, column: 34, scope: !10270)
!10276 = !DILocation(line: 4116, column: 44, scope: !10270)
!10277 = !DILocation(line: 4116, column: 12, scope: !10270)
!10278 = !DILocation(line: 4116, column: 10, scope: !10270)
!10279 = !DILocation(line: 4117, column: 34, scope: !10270)
!10280 = !DILocation(line: 4117, column: 44, scope: !10270)
!10281 = !DILocation(line: 4117, column: 12, scope: !10270)
!10282 = !DILocation(line: 4117, column: 10, scope: !10270)
!10283 = !DILocation(line: 4118, column: 32, scope: !10270)
!10284 = !DILocation(line: 4118, column: 42, scope: !10270)
!10285 = !DILocation(line: 4118, column: 10, scope: !10270)
!10286 = !DILocation(line: 4118, column: 8, scope: !10270)
!10287 = !DILocation(line: 4120, column: 39, scope: !10270)
!10288 = !DILocation(line: 4120, column: 49, scope: !10270)
!10289 = !DILocation(line: 4120, column: 17, scope: !10270)
!10290 = !DILocation(line: 4120, column: 15, scope: !10270)
!10291 = !DILocation(line: 4121, column: 40, scope: !10270)
!10292 = !DILocation(line: 4121, column: 50, scope: !10270)
!10293 = !DILocation(line: 4121, column: 18, scope: !10270)
!10294 = !DILocation(line: 4121, column: 16, scope: !10270)
!10295 = !DILocation(line: 4122, column: 39, scope: !10270)
!10296 = !DILocation(line: 4122, column: 49, scope: !10270)
!10297 = !DILocation(line: 4122, column: 17, scope: !10270)
!10298 = !DILocation(line: 4122, column: 15, scope: !10270)
!10299 = !DILocation(line: 4123, column: 37, scope: !10270)
!10300 = !DILocation(line: 4123, column: 47, scope: !10270)
!10301 = !DILocation(line: 4123, column: 15, scope: !10270)
!10302 = !DILocation(line: 4123, column: 13, scope: !10270)
!10303 = !DILocation(line: 4124, column: 1, scope: !10270)
!10304 = distinct !DISubprogram(name: "compute_code_hoist_data", scope: !3, file: !3, line: 4188, type: !3321, scopeLine: 4189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10305 = !DILocation(line: 4190, column: 29, scope: !10304)
!10306 = !DILocation(line: 4190, column: 37, scope: !10304)
!10307 = !DILocation(line: 4190, column: 43, scope: !10304)
!10308 = !DILocation(line: 4190, column: 3, scope: !10304)
!10309 = !DILocation(line: 4191, column: 3, scope: !10304)
!10310 = !DILocation(line: 4192, column: 3, scope: !10304)
!10311 = !DILocation(line: 4193, column: 3, scope: !10304)
!10312 = !DILocation(line: 4194, column: 7, scope: !10313)
!10313 = distinct !DILexicalBlock(scope: !10304, file: !3, line: 4194, column: 7)
!10314 = !DILocation(line: 4194, column: 7, scope: !10304)
!10315 = !DILocation(line: 4195, column: 14, scope: !10313)
!10316 = !DILocation(line: 4195, column: 5, scope: !10313)
!10317 = !DILocation(line: 4196, column: 1, scope: !10304)
!10318 = distinct !DISubprogram(name: "hoist_code", scope: !3, file: !3, line: 4260, type: !3488, scopeLine: 4261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10319 = !DILocalVariable(name: "bb", scope: !10318, file: !3, line: 4262, type: !2448)
!10320 = !DILocation(line: 4262, column: 15, scope: !10318)
!10321 = !DILocalVariable(name: "dominated", scope: !10318, file: !3, line: 4262, type: !2448)
!10322 = !DILocation(line: 4262, column: 19, scope: !10318)
!10323 = !DILocalVariable(name: "domby", scope: !10318, file: !3, line: 4263, type: !10324)
!10324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10325, size: 64)
!10325 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !146, line: 283, baseType: !10326)
!10326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !146, line: 283, size: 128, elements: !10327)
!10327 = !{!10328}
!10328 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10326, file: !146, line: 283, baseType: !2529, size: 128)
!10329 = !DILocation(line: 4263, column: 28, scope: !10318)
!10330 = !DILocalVariable(name: "i", scope: !10318, file: !3, line: 4264, type: !9)
!10331 = !DILocation(line: 4264, column: 16, scope: !10318)
!10332 = !DILocalVariable(name: "j", scope: !10318, file: !3, line: 4264, type: !9)
!10333 = !DILocation(line: 4264, column: 18, scope: !10318)
!10334 = !DILocalVariable(name: "index_map", scope: !10318, file: !3, line: 4265, type: !3085)
!10335 = !DILocation(line: 4265, column: 17, scope: !10318)
!10336 = !DILocalVariable(name: "expr", scope: !10318, file: !3, line: 4266, type: !3086)
!10337 = !DILocation(line: 4266, column: 16, scope: !10318)
!10338 = !DILocalVariable(name: "changed", scope: !10318, file: !3, line: 4267, type: !1917)
!10339 = !DILocation(line: 4267, column: 7, scope: !10318)
!10340 = !DILocation(line: 4269, column: 24, scope: !10318)
!10341 = !DILocation(line: 4269, column: 37, scope: !10318)
!10342 = !DILocation(line: 4269, column: 3, scope: !10318)
!10343 = !DILocation(line: 4274, column: 15, scope: !10318)
!10344 = !DILocation(line: 4274, column: 13, scope: !10318)
!10345 = !DILocation(line: 4275, column: 10, scope: !10346)
!10346 = distinct !DILexicalBlock(scope: !10318, file: !3, line: 4275, column: 3)
!10347 = !DILocation(line: 4275, column: 8, scope: !10346)
!10348 = !DILocation(line: 4275, column: 15, scope: !10349)
!10349 = distinct !DILexicalBlock(scope: !10346, file: !3, line: 4275, column: 3)
!10350 = !DILocation(line: 4275, column: 35, scope: !10349)
!10351 = !DILocation(line: 4275, column: 17, scope: !10349)
!10352 = !DILocation(line: 4275, column: 3, scope: !10346)
!10353 = !DILocation(line: 4276, column: 33, scope: !10354)
!10354 = distinct !DILexicalBlock(scope: !10349, file: !3, line: 4276, column: 5)
!10355 = !DILocation(line: 4276, column: 39, scope: !10354)
!10356 = !DILocation(line: 4276, column: 17, scope: !10354)
!10357 = !DILocation(line: 4276, column: 15, scope: !10354)
!10358 = !DILocation(line: 4276, column: 10, scope: !10354)
!10359 = !DILocation(line: 4276, column: 43, scope: !10360)
!10360 = distinct !DILexicalBlock(scope: !10354, file: !3, line: 4276, column: 5)
!10361 = !DILocation(line: 4276, column: 48, scope: !10360)
!10362 = !DILocation(line: 4276, column: 5, scope: !10354)
!10363 = !DILocation(line: 4277, column: 39, scope: !10360)
!10364 = !DILocation(line: 4277, column: 7, scope: !10360)
!10365 = !DILocation(line: 4277, column: 17, scope: !10360)
!10366 = !DILocation(line: 4277, column: 23, scope: !10360)
!10367 = !DILocation(line: 4277, column: 37, scope: !10360)
!10368 = !DILocation(line: 4276, column: 64, scope: !10360)
!10369 = !DILocation(line: 4276, column: 70, scope: !10360)
!10370 = !DILocation(line: 4276, column: 62, scope: !10360)
!10371 = !DILocation(line: 4276, column: 5, scope: !10360)
!10372 = distinct !{!10372, !10362, !10373}
!10373 = !DILocation(line: 4277, column: 39, scope: !10354)
!10374 = !DILocation(line: 4275, column: 42, scope: !10349)
!10375 = !DILocation(line: 4275, column: 3, scope: !10349)
!10376 = distinct !{!10376, !10352, !10377}
!10377 = !DILocation(line: 4277, column: 39, scope: !10346)
!10378 = !DILocation(line: 4281, column: 3, scope: !10379)
!10379 = distinct !DILexicalBlock(scope: !10318, file: !3, line: 4281, column: 3)
!10380 = !DILocation(line: 4281, column: 3, scope: !10381)
!10381 = distinct !DILexicalBlock(scope: !10379, file: !3, line: 4281, column: 3)
!10382 = !DILocalVariable(name: "found", scope: !10383, file: !3, line: 4283, type: !1917)
!10383 = distinct !DILexicalBlock(scope: !10381, file: !3, line: 4282, column: 5)
!10384 = !DILocation(line: 4283, column: 11, scope: !10383)
!10385 = !DILocalVariable(name: "insn_inserted_p", scope: !10383, file: !3, line: 4284, type: !1917)
!10386 = !DILocation(line: 4284, column: 11, scope: !10383)
!10387 = !DILocation(line: 4286, column: 49, scope: !10383)
!10388 = !DILocation(line: 4286, column: 15, scope: !10383)
!10389 = !DILocation(line: 4286, column: 13, scope: !10383)
!10390 = !DILocation(line: 4289, column: 14, scope: !10391)
!10391 = distinct !DILexicalBlock(scope: !10383, file: !3, line: 4289, column: 7)
!10392 = !DILocation(line: 4289, column: 12, scope: !10391)
!10393 = !DILocation(line: 4289, column: 19, scope: !10394)
!10394 = distinct !DILexicalBlock(scope: !10391, file: !3, line: 4289, column: 7)
!10395 = !DILocation(line: 4289, column: 23, scope: !10394)
!10396 = !DILocation(line: 4289, column: 36, scope: !10394)
!10397 = !DILocation(line: 4289, column: 40, scope: !10394)
!10398 = !DILocation(line: 4289, column: 48, scope: !10394)
!10399 = !DILocation(line: 4289, column: 21, scope: !10394)
!10400 = !DILocation(line: 4289, column: 7, scope: !10391)
!10401 = !DILocalVariable(name: "hoistable", scope: !10402, file: !3, line: 4291, type: !1917)
!10402 = distinct !DILexicalBlock(scope: !10394, file: !3, line: 4290, column: 2)
!10403 = !DILocation(line: 4291, column: 8, scope: !10402)
!10404 = !DILocation(line: 4293, column: 8, scope: !10405)
!10405 = distinct !DILexicalBlock(scope: !10402, file: !3, line: 4293, column: 8)
!10406 = !DILocation(line: 4294, column: 8, scope: !10405)
!10407 = !DILocation(line: 4294, column: 11, scope: !10405)
!10408 = !DILocation(line: 4293, column: 8, scope: !10402)
!10409 = !DILocation(line: 4299, column: 15, scope: !10410)
!10410 = distinct !DILexicalBlock(scope: !10411, file: !3, line: 4299, column: 8)
!10411 = distinct !DILexicalBlock(scope: !10405, file: !3, line: 4295, column: 6)
!10412 = !DILocation(line: 4299, column: 13, scope: !10410)
!10413 = !DILocation(line: 4299, column: 20, scope: !10414)
!10414 = distinct !DILexicalBlock(scope: !10410, file: !3, line: 4299, column: 8)
!10415 = !DILocation(line: 4299, column: 8, scope: !10410)
!10416 = !DILocation(line: 4302, column: 9, scope: !10417)
!10417 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 4302, column: 9)
!10418 = distinct !DILexicalBlock(scope: !10414, file: !3, line: 4300, column: 3)
!10419 = !DILocation(line: 4302, column: 15, scope: !10417)
!10420 = !DILocation(line: 4302, column: 12, scope: !10417)
!10421 = !DILocation(line: 4302, column: 9, scope: !10418)
!10422 = !DILocation(line: 4303, column: 7, scope: !10417)
!10423 = !DILocation(line: 4307, column: 10, scope: !10424)
!10424 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 4307, column: 9)
!10425 = !DILocation(line: 4307, column: 9, scope: !10418)
!10426 = !DILocation(line: 4308, column: 7, scope: !10424)
!10427 = !DILocation(line: 4315, column: 36, scope: !10428)
!10428 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 4315, column: 9)
!10429 = !DILocation(line: 4315, column: 40, scope: !10428)
!10430 = !DILocation(line: 4315, column: 43, scope: !10428)
!10431 = !DILocation(line: 4315, column: 9, scope: !10428)
!10432 = !DILocation(line: 4315, column: 9, scope: !10418)
!10433 = !DILocation(line: 4316, column: 16, scope: !10428)
!10434 = !DILocation(line: 4316, column: 7, scope: !10428)
!10435 = !DILocation(line: 4317, column: 3, scope: !10418)
!10436 = !DILocation(line: 4299, column: 69, scope: !10414)
!10437 = !DILocation(line: 4299, column: 8, scope: !10414)
!10438 = distinct !{!10438, !10415, !10439}
!10439 = !DILocation(line: 4317, column: 3, scope: !10410)
!10440 = !DILocation(line: 4329, column: 12, scope: !10441)
!10441 = distinct !DILexicalBlock(scope: !10411, file: !3, line: 4329, column: 12)
!10442 = !DILocation(line: 4329, column: 22, scope: !10441)
!10443 = !DILocation(line: 4329, column: 12, scope: !10411)
!10444 = !DILocation(line: 4331, column: 14, scope: !10445)
!10445 = distinct !DILexicalBlock(scope: !10441, file: !3, line: 4330, column: 3)
!10446 = !DILocation(line: 4331, column: 26, scope: !10445)
!10447 = !DILocation(line: 4331, column: 30, scope: !10445)
!10448 = !DILocation(line: 4331, column: 38, scope: !10445)
!10449 = !DILocation(line: 4331, column: 5, scope: !10445)
!10450 = !DILocation(line: 4332, column: 11, scope: !10445)
!10451 = !DILocation(line: 4333, column: 3, scope: !10445)
!10452 = !DILocation(line: 4334, column: 6, scope: !10411)
!10453 = !DILocation(line: 4335, column: 2, scope: !10402)
!10454 = !DILocation(line: 4289, column: 57, scope: !10394)
!10455 = !DILocation(line: 4289, column: 7, scope: !10394)
!10456 = distinct !{!10456, !10400, !10457}
!10457 = !DILocation(line: 4335, column: 2, scope: !10391)
!10458 = !DILocation(line: 4337, column: 13, scope: !10459)
!10459 = distinct !DILexicalBlock(scope: !10383, file: !3, line: 4337, column: 11)
!10460 = !DILocation(line: 4337, column: 11, scope: !10383)
!10461 = !DILocation(line: 4339, column: 4, scope: !10462)
!10462 = distinct !DILexicalBlock(scope: !10459, file: !3, line: 4338, column: 9)
!10463 = !DILocation(line: 4340, column: 4, scope: !10462)
!10464 = !DILocation(line: 4344, column: 14, scope: !10465)
!10465 = distinct !DILexicalBlock(scope: !10383, file: !3, line: 4344, column: 7)
!10466 = !DILocation(line: 4344, column: 12, scope: !10465)
!10467 = !DILocation(line: 4344, column: 19, scope: !10468)
!10468 = distinct !DILexicalBlock(scope: !10465, file: !3, line: 4344, column: 7)
!10469 = !DILocation(line: 4344, column: 23, scope: !10468)
!10470 = !DILocation(line: 4344, column: 35, scope: !10468)
!10471 = !DILocation(line: 4344, column: 39, scope: !10468)
!10472 = !DILocation(line: 4344, column: 47, scope: !10468)
!10473 = !DILocation(line: 4344, column: 21, scope: !10468)
!10474 = !DILocation(line: 4344, column: 7, scope: !10465)
!10475 = !DILocation(line: 4348, column: 20, scope: !10476)
!10476 = distinct !DILexicalBlock(scope: !10468, file: !3, line: 4345, column: 2)
!10477 = !DILocation(line: 4351, column: 8, scope: !10478)
!10478 = distinct !DILexicalBlock(scope: !10476, file: !3, line: 4351, column: 8)
!10479 = !DILocation(line: 4351, column: 8, scope: !10476)
!10480 = !DILocation(line: 4356, column: 15, scope: !10481)
!10481 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 4356, column: 8)
!10482 = distinct !DILexicalBlock(scope: !10478, file: !3, line: 4352, column: 6)
!10483 = !DILocation(line: 4356, column: 13, scope: !10481)
!10484 = !DILocation(line: 4356, column: 20, scope: !10485)
!10485 = distinct !DILexicalBlock(scope: !10481, file: !3, line: 4356, column: 8)
!10486 = !DILocation(line: 4356, column: 8, scope: !10481)
!10487 = !DILocation(line: 4359, column: 9, scope: !10488)
!10488 = distinct !DILexicalBlock(scope: !10489, file: !3, line: 4359, column: 9)
!10489 = distinct !DILexicalBlock(scope: !10485, file: !3, line: 4357, column: 3)
!10490 = !DILocation(line: 4359, column: 15, scope: !10488)
!10491 = !DILocation(line: 4359, column: 12, scope: !10488)
!10492 = !DILocation(line: 4359, column: 9, scope: !10489)
!10493 = !DILocation(line: 4360, column: 7, scope: !10488)
!10494 = !DILocation(line: 4365, column: 10, scope: !10495)
!10495 = distinct !DILexicalBlock(scope: !10489, file: !3, line: 4365, column: 9)
!10496 = !DILocation(line: 4365, column: 9, scope: !10489)
!10497 = !DILocation(line: 4366, column: 7, scope: !10495)
!10498 = !DILocation(line: 4373, column: 36, scope: !10499)
!10499 = distinct !DILexicalBlock(scope: !10489, file: !3, line: 4373, column: 9)
!10500 = !DILocation(line: 4373, column: 40, scope: !10499)
!10501 = !DILocation(line: 4373, column: 43, scope: !10499)
!10502 = !DILocation(line: 4373, column: 9, scope: !10499)
!10503 = !DILocation(line: 4373, column: 9, scope: !10489)
!10504 = !DILocalVariable(name: "expr", scope: !10505, file: !3, line: 4375, type: !3086)
!10505 = distinct !DILexicalBlock(scope: !10499, file: !3, line: 4374, column: 7)
!10506 = !DILocation(line: 4375, column: 22, scope: !10505)
!10507 = !DILocation(line: 4375, column: 29, scope: !10505)
!10508 = !DILocation(line: 4375, column: 39, scope: !10505)
!10509 = !DILocalVariable(name: "occr", scope: !10505, file: !3, line: 4376, type: !3093)
!10510 = !DILocation(line: 4376, column: 22, scope: !10505)
!10511 = !DILocation(line: 4376, column: 29, scope: !10505)
!10512 = !DILocation(line: 4376, column: 35, scope: !10505)
!10513 = !DILocalVariable(name: "insn", scope: !10505, file: !3, line: 4377, type: !1893)
!10514 = !DILocation(line: 4377, column: 13, scope: !10505)
!10515 = !DILocalVariable(name: "set", scope: !10505, file: !3, line: 4378, type: !1893)
!10516 = !DILocation(line: 4378, column: 13, scope: !10505)
!10517 = !DILocation(line: 4381, column: 9, scope: !10505)
!10518 = !DILocation(line: 4381, column: 16, scope: !10505)
!10519 = !DILocation(line: 4381, column: 47, scope: !10505)
!10520 = !DILocation(line: 4381, column: 44, scope: !10505)
!10521 = !DILocation(line: 4381, column: 57, scope: !10505)
!10522 = !DILocation(line: 4381, column: 60, scope: !10505)
!10523 = !DILocation(line: 0, scope: !10505)
!10524 = !DILocation(line: 4382, column: 11, scope: !10505)
!10525 = !DILocation(line: 4382, column: 17, scope: !10505)
!10526 = !DILocation(line: 4382, column: 9, scope: !10505)
!10527 = distinct !{!10527, !10517, !10525}
!10528 = !DILocation(line: 4384, column: 9, scope: !10505)
!10529 = !DILocation(line: 4385, column: 16, scope: !10505)
!10530 = !DILocation(line: 4385, column: 22, scope: !10505)
!10531 = !DILocation(line: 4385, column: 14, scope: !10505)
!10532 = !DILocation(line: 4386, column: 15, scope: !10505)
!10533 = !DILocation(line: 4386, column: 13, scope: !10505)
!10534 = !DILocation(line: 4387, column: 9, scope: !10505)
!10535 = !DILocation(line: 4392, column: 13, scope: !10536)
!10536 = distinct !DILexicalBlock(scope: !10505, file: !3, line: 4392, column: 13)
!10537 = !DILocation(line: 4392, column: 19, scope: !10536)
!10538 = !DILocation(line: 4392, column: 32, scope: !10536)
!10539 = !DILocation(line: 4392, column: 13, scope: !10505)
!10540 = !DILocation(line: 4394, column: 31, scope: !10536)
!10541 = !DILocation(line: 4394, column: 8, scope: !10536)
!10542 = !DILocation(line: 4393, column: 4, scope: !10536)
!10543 = !DILocation(line: 4393, column: 10, scope: !10536)
!10544 = !DILocation(line: 4394, column: 6, scope: !10536)
!10545 = !DILocation(line: 4396, column: 31, scope: !10505)
!10546 = !DILocation(line: 4396, column: 37, scope: !10505)
!10547 = !DILocation(line: 4396, column: 51, scope: !10505)
!10548 = !DILocation(line: 4396, column: 67, scope: !10505)
!10549 = !DILocation(line: 4396, column: 9, scope: !10505)
!10550 = !DILocation(line: 4397, column: 22, scope: !10505)
!10551 = !DILocation(line: 4397, column: 9, scope: !10505)
!10552 = !DILocation(line: 4398, column: 9, scope: !10505)
!10553 = !DILocation(line: 4398, column: 15, scope: !10505)
!10554 = !DILocation(line: 4398, column: 25, scope: !10505)
!10555 = !DILocation(line: 4399, column: 17, scope: !10505)
!10556 = !DILocation(line: 4400, column: 25, scope: !10505)
!10557 = !DILocation(line: 4402, column: 14, scope: !10558)
!10558 = distinct !DILexicalBlock(scope: !10505, file: !3, line: 4402, column: 13)
!10559 = !DILocation(line: 4402, column: 13, scope: !10505)
!10560 = !DILocation(line: 4404, column: 35, scope: !10561)
!10561 = distinct !DILexicalBlock(scope: !10558, file: !3, line: 4403, column: 4)
!10562 = !DILocation(line: 4404, column: 45, scope: !10561)
!10563 = !DILocation(line: 4404, column: 49, scope: !10561)
!10564 = !DILocation(line: 4404, column: 6, scope: !10561)
!10565 = !DILocation(line: 4405, column: 22, scope: !10561)
!10566 = !DILocation(line: 4406, column: 4, scope: !10561)
!10567 = !DILocation(line: 4407, column: 7, scope: !10505)
!10568 = !DILocation(line: 4408, column: 3, scope: !10489)
!10569 = !DILocation(line: 4356, column: 69, scope: !10485)
!10570 = !DILocation(line: 4356, column: 8, scope: !10485)
!10571 = distinct !{!10571, !10486, !10572}
!10572 = !DILocation(line: 4408, column: 3, scope: !10481)
!10573 = !DILocation(line: 4409, column: 6, scope: !10482)
!10574 = !DILocation(line: 4410, column: 2, scope: !10476)
!10575 = !DILocation(line: 4344, column: 56, scope: !10468)
!10576 = !DILocation(line: 4344, column: 7, scope: !10468)
!10577 = distinct !{!10577, !10474, !10578}
!10578 = !DILocation(line: 4410, column: 2, scope: !10465)
!10579 = !DILocation(line: 4411, column: 7, scope: !10383)
!10580 = !DILocation(line: 4412, column: 5, scope: !10383)
!10581 = distinct !{!10581, !10378, !10582}
!10582 = !DILocation(line: 4412, column: 5, scope: !10379)
!10583 = !DILocation(line: 4414, column: 9, scope: !10318)
!10584 = !DILocation(line: 4414, column: 3, scope: !10318)
!10585 = !DILocation(line: 4416, column: 10, scope: !10318)
!10586 = !DILocation(line: 4416, column: 3, scope: !10318)
!10587 = distinct !DISubprogram(name: "free_code_hoist_mem", scope: !3, file: !3, line: 4129, type: !3321, scopeLine: 4130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10588 = !DILocation(line: 4131, column: 3, scope: !10587)
!10589 = !DILocation(line: 4132, column: 3, scope: !10587)
!10590 = !DILocation(line: 4133, column: 3, scope: !10587)
!10591 = !DILocation(line: 4135, column: 3, scope: !10587)
!10592 = !DILocation(line: 4136, column: 3, scope: !10587)
!10593 = !DILocation(line: 4137, column: 3, scope: !10587)
!10594 = !DILocation(line: 4138, column: 3, scope: !10587)
!10595 = !DILocation(line: 4140, column: 3, scope: !10587)
!10596 = !DILocation(line: 4141, column: 1, scope: !10587)
!10597 = distinct !DISubprogram(name: "compute_transpout", scope: !3, file: !3, line: 4063, type: !3321, scopeLine: 4064, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10598 = !DILocalVariable(name: "bb", scope: !10597, file: !3, line: 4065, type: !2448)
!10599 = !DILocation(line: 4065, column: 15, scope: !10597)
!10600 = !DILocalVariable(name: "i", scope: !10597, file: !3, line: 4066, type: !9)
!10601 = !DILocation(line: 4066, column: 16, scope: !10597)
!10602 = !DILocalVariable(name: "expr", scope: !10597, file: !3, line: 4067, type: !3086)
!10603 = !DILocation(line: 4067, column: 16, scope: !10597)
!10604 = !DILocation(line: 4069, column: 24, scope: !10597)
!10605 = !DILocation(line: 4069, column: 35, scope: !10597)
!10606 = !DILocation(line: 4069, column: 3, scope: !10597)
!10607 = !DILocation(line: 4071, column: 3, scope: !10608)
!10608 = distinct !DILexicalBlock(scope: !10597, file: !3, line: 4071, column: 3)
!10609 = !DILocation(line: 4071, column: 3, scope: !10610)
!10610 = distinct !DILexicalBlock(scope: !10608, file: !3, line: 4071, column: 3)
!10611 = !DILocation(line: 4076, column: 13, scope: !10612)
!10612 = distinct !DILexicalBlock(scope: !10613, file: !3, line: 4076, column: 11)
!10613 = distinct !DILexicalBlock(scope: !10610, file: !3, line: 4072, column: 5)
!10614 = !DILocation(line: 4076, column: 11, scope: !10613)
!10615 = !DILocation(line: 4077, column: 2, scope: !10612)
!10616 = !DILocation(line: 4079, column: 14, scope: !10617)
!10617 = distinct !DILexicalBlock(scope: !10613, file: !3, line: 4079, column: 7)
!10618 = !DILocation(line: 4079, column: 12, scope: !10617)
!10619 = !DILocation(line: 4079, column: 19, scope: !10620)
!10620 = distinct !DILexicalBlock(scope: !10617, file: !3, line: 4079, column: 7)
!10621 = !DILocation(line: 4079, column: 39, scope: !10620)
!10622 = !DILocation(line: 4079, column: 21, scope: !10620)
!10623 = !DILocation(line: 4079, column: 7, scope: !10617)
!10624 = !DILocation(line: 4080, column: 30, scope: !10625)
!10625 = distinct !DILexicalBlock(scope: !10620, file: !3, line: 4080, column: 2)
!10626 = !DILocation(line: 4080, column: 36, scope: !10625)
!10627 = !DILocation(line: 4080, column: 14, scope: !10625)
!10628 = !DILocation(line: 4080, column: 12, scope: !10625)
!10629 = !DILocation(line: 4080, column: 7, scope: !10625)
!10630 = !DILocation(line: 4080, column: 40, scope: !10631)
!10631 = distinct !DILexicalBlock(scope: !10625, file: !3, line: 4080, column: 2)
!10632 = !DILocation(line: 4080, column: 2, scope: !10625)
!10633 = !DILocation(line: 4081, column: 8, scope: !10634)
!10634 = distinct !DILexicalBlock(scope: !10631, file: !3, line: 4081, column: 8)
!10635 = !DILocation(line: 4081, column: 8, scope: !10631)
!10636 = !DILocation(line: 4083, column: 12, scope: !10637)
!10637 = distinct !DILexicalBlock(scope: !10638, file: !3, line: 4083, column: 12)
!10638 = distinct !DILexicalBlock(scope: !10634, file: !3, line: 4082, column: 6)
!10639 = !DILocation(line: 4083, column: 44, scope: !10637)
!10640 = !DILocation(line: 4084, column: 5, scope: !10637)
!10641 = !DILocation(line: 4084, column: 8, scope: !10637)
!10642 = !DILocation(line: 4083, column: 12, scope: !10638)
!10643 = !DILocation(line: 4085, column: 3, scope: !10637)
!10644 = !DILocation(line: 4090, column: 19, scope: !10638)
!10645 = !DILocation(line: 4090, column: 29, scope: !10638)
!10646 = !DILocation(line: 4090, column: 33, scope: !10638)
!10647 = !DILocation(line: 4090, column: 41, scope: !10638)
!10648 = !DILocation(line: 4090, column: 47, scope: !10638)
!10649 = !DILocation(line: 4090, column: 8, scope: !10638)
!10650 = !DILocation(line: 4091, column: 6, scope: !10638)
!10651 = !DILocation(line: 4080, column: 54, scope: !10631)
!10652 = !DILocation(line: 4080, column: 60, scope: !10631)
!10653 = !DILocation(line: 4080, column: 52, scope: !10631)
!10654 = !DILocation(line: 4080, column: 2, scope: !10631)
!10655 = distinct !{!10655, !10632, !10656}
!10656 = !DILocation(line: 4091, column: 6, scope: !10625)
!10657 = !DILocation(line: 4079, column: 46, scope: !10620)
!10658 = !DILocation(line: 4079, column: 7, scope: !10620)
!10659 = distinct !{!10659, !10623, !10660}
!10660 = !DILocation(line: 4091, column: 6, scope: !10617)
!10661 = !DILocation(line: 4092, column: 5, scope: !10613)
!10662 = distinct !{!10662, !10607, !10663}
!10663 = !DILocation(line: 4092, column: 5, scope: !10608)
!10664 = !DILocation(line: 4093, column: 1, scope: !10597)
!10665 = distinct !DISubprogram(name: "compute_code_hoist_vbeinout", scope: !3, file: !3, line: 4149, type: !3321, scopeLine: 4150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10666 = !DILocalVariable(name: "changed", scope: !10665, file: !3, line: 4151, type: !1917)
!10667 = !DILocation(line: 4151, column: 7, scope: !10665)
!10668 = !DILocalVariable(name: "passes", scope: !10665, file: !3, line: 4151, type: !1917)
!10669 = !DILocation(line: 4151, column: 16, scope: !10665)
!10670 = !DILocalVariable(name: "bb", scope: !10665, file: !3, line: 4152, type: !2448)
!10671 = !DILocation(line: 4152, column: 15, scope: !10665)
!10672 = !DILocation(line: 4154, column: 24, scope: !10665)
!10673 = !DILocation(line: 4154, column: 38, scope: !10665)
!10674 = !DILocation(line: 4154, column: 3, scope: !10665)
!10675 = !DILocation(line: 4155, column: 24, scope: !10665)
!10676 = !DILocation(line: 4155, column: 37, scope: !10665)
!10677 = !DILocation(line: 4155, column: 3, scope: !10665)
!10678 = !DILocation(line: 4157, column: 10, scope: !10665)
!10679 = !DILocation(line: 4158, column: 11, scope: !10665)
!10680 = !DILocation(line: 4160, column: 3, scope: !10665)
!10681 = !DILocation(line: 4160, column: 10, scope: !10665)
!10682 = !DILocation(line: 4162, column: 15, scope: !10683)
!10683 = distinct !DILexicalBlock(scope: !10665, file: !3, line: 4161, column: 5)
!10684 = !DILocation(line: 4166, column: 7, scope: !10685)
!10685 = distinct !DILexicalBlock(scope: !10683, file: !3, line: 4166, column: 7)
!10686 = !DILocation(line: 4166, column: 7, scope: !10687)
!10687 = distinct !DILexicalBlock(scope: !10685, file: !3, line: 4166, column: 7)
!10688 = !DILocation(line: 4168, column: 8, scope: !10689)
!10689 = distinct !DILexicalBlock(scope: !10690, file: !3, line: 4168, column: 8)
!10690 = distinct !DILexicalBlock(scope: !10687, file: !3, line: 4167, column: 2)
!10691 = !DILocation(line: 4168, column: 12, scope: !10689)
!10692 = !DILocation(line: 4168, column: 23, scope: !10689)
!10693 = !DILocation(line: 4168, column: 20, scope: !10689)
!10694 = !DILocation(line: 4168, column: 8, scope: !10690)
!10695 = !DILocation(line: 4169, column: 37, scope: !10689)
!10696 = !DILocation(line: 4169, column: 50, scope: !10689)
!10697 = !DILocation(line: 4169, column: 54, scope: !10689)
!10698 = !DILocation(line: 4170, column: 9, scope: !10689)
!10699 = !DILocation(line: 4170, column: 22, scope: !10689)
!10700 = !DILocation(line: 4170, column: 26, scope: !10689)
!10701 = !DILocation(line: 4169, column: 6, scope: !10689)
!10702 = !DILocation(line: 4172, column: 40, scope: !10690)
!10703 = !DILocation(line: 4172, column: 52, scope: !10690)
!10704 = !DILocation(line: 4172, column: 56, scope: !10690)
!10705 = !DILocation(line: 4173, column: 12, scope: !10690)
!10706 = !DILocation(line: 4173, column: 19, scope: !10690)
!10707 = !DILocation(line: 4173, column: 23, scope: !10690)
!10708 = !DILocation(line: 4174, column: 12, scope: !10690)
!10709 = !DILocation(line: 4174, column: 25, scope: !10690)
!10710 = !DILocation(line: 4174, column: 29, scope: !10690)
!10711 = !DILocation(line: 4175, column: 12, scope: !10690)
!10712 = !DILocation(line: 4175, column: 19, scope: !10690)
!10713 = !DILocation(line: 4175, column: 23, scope: !10690)
!10714 = !DILocation(line: 4172, column: 15, scope: !10690)
!10715 = !DILocation(line: 4172, column: 12, scope: !10690)
!10716 = !DILocation(line: 4176, column: 2, scope: !10690)
!10717 = distinct !{!10717, !10684, !10718}
!10718 = !DILocation(line: 4176, column: 2, scope: !10685)
!10719 = !DILocation(line: 4178, column: 13, scope: !10683)
!10720 = distinct !{!10720, !10680, !10721}
!10721 = !DILocation(line: 4179, column: 5, scope: !10665)
!10722 = !DILocation(line: 4181, column: 7, scope: !10723)
!10723 = distinct !DILexicalBlock(scope: !10665, file: !3, line: 4181, column: 7)
!10724 = !DILocation(line: 4181, column: 7, scope: !10665)
!10725 = !DILocation(line: 4182, column: 14, scope: !10723)
!10726 = !DILocation(line: 4182, column: 71, scope: !10723)
!10727 = !DILocation(line: 4182, column: 5, scope: !10723)
!10728 = !DILocation(line: 4183, column: 1, scope: !10665)
!10729 = distinct !DISubprogram(name: "VEC_basic_block_base_iterate", scope: !146, file: !146, line: 281, type: !10730, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10730 = !DISubroutineType(types: !10731)
!10731 = !{!1917, !10732, !9, !10734}
!10732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10733, size: 64)
!10733 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2529)
!10734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2448, size: 64)
!10735 = !DILocalVariable(name: "vec_", arg: 1, scope: !10729, file: !146, line: 281, type: !10732)
!10736 = !DILocation(line: 281, column: 1, scope: !10729)
!10737 = !DILocalVariable(name: "ix_", arg: 2, scope: !10729, file: !146, line: 281, type: !9)
!10738 = !DILocalVariable(name: "ptr", arg: 3, scope: !10729, file: !146, line: 281, type: !10734)
!10739 = !DILocation(line: 281, column: 1, scope: !10740)
!10740 = distinct !DILexicalBlock(scope: !10729, file: !146, line: 281, column: 1)
!10741 = !DILocation(line: 281, column: 1, scope: !10742)
!10742 = distinct !DILexicalBlock(scope: !10740, file: !146, line: 281, column: 1)
!10743 = !DILocation(line: 281, column: 1, scope: !10744)
!10744 = distinct !DILexicalBlock(scope: !10740, file: !146, line: 281, column: 1)
!10745 = distinct !DISubprogram(name: "hoist_expr_reaches_here_p", scope: !3, file: !3, line: 4212, type: !10746, scopeLine: 4213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10746 = !DISubroutineType(types: !10747)
!10747 = !{!1917, !2448, !1917, !2448, !2010}
!10748 = !DILocalVariable(name: "expr_bb", arg: 1, scope: !10745, file: !3, line: 4212, type: !2448)
!10749 = !DILocation(line: 4212, column: 40, scope: !10745)
!10750 = !DILocalVariable(name: "expr_index", arg: 2, scope: !10745, file: !3, line: 4212, type: !1917)
!10751 = !DILocation(line: 4212, column: 53, scope: !10745)
!10752 = !DILocalVariable(name: "bb", arg: 3, scope: !10745, file: !3, line: 4212, type: !2448)
!10753 = !DILocation(line: 4212, column: 77, scope: !10745)
!10754 = !DILocalVariable(name: "visited", arg: 4, scope: !10745, file: !3, line: 4212, type: !2010)
!10755 = !DILocation(line: 4212, column: 87, scope: !10745)
!10756 = !DILocalVariable(name: "pred", scope: !10745, file: !3, line: 4214, type: !2465)
!10757 = !DILocation(line: 4214, column: 8, scope: !10745)
!10758 = !DILocalVariable(name: "ei", scope: !10745, file: !3, line: 4215, type: !5117)
!10759 = !DILocation(line: 4215, column: 17, scope: !10745)
!10760 = !DILocalVariable(name: "visited_allocated_locally", scope: !10745, file: !3, line: 4216, type: !1917)
!10761 = !DILocation(line: 4216, column: 7, scope: !10745)
!10762 = !DILocation(line: 4219, column: 7, scope: !10763)
!10763 = distinct !DILexicalBlock(scope: !10745, file: !3, line: 4219, column: 7)
!10764 = !DILocation(line: 4219, column: 15, scope: !10763)
!10765 = !DILocation(line: 4219, column: 7, scope: !10745)
!10766 = !DILocation(line: 4221, column: 33, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 4220, column: 5)
!10768 = !DILocation(line: 4222, column: 17, scope: !10767)
!10769 = !DILocation(line: 4222, column: 15, scope: !10767)
!10770 = !DILocation(line: 4223, column: 5, scope: !10767)
!10771 = !DILocation(line: 4225, column: 3, scope: !10772)
!10772 = distinct !DILexicalBlock(scope: !10745, file: !3, line: 4225, column: 3)
!10773 = !DILocation(line: 4225, column: 3, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10772, file: !3, line: 4225, column: 3)
!10775 = !DILocalVariable(name: "pred_bb", scope: !10776, file: !3, line: 4227, type: !2448)
!10776 = distinct !DILexicalBlock(scope: !10774, file: !3, line: 4226, column: 5)
!10777 = !DILocation(line: 4227, column: 19, scope: !10776)
!10778 = !DILocation(line: 4227, column: 29, scope: !10776)
!10779 = !DILocation(line: 4227, column: 35, scope: !10776)
!10780 = !DILocation(line: 4229, column: 11, scope: !10781)
!10781 = distinct !DILexicalBlock(scope: !10776, file: !3, line: 4229, column: 11)
!10782 = !DILocation(line: 4229, column: 17, scope: !10781)
!10783 = !DILocation(line: 4229, column: 24, scope: !10781)
!10784 = !DILocation(line: 4229, column: 21, scope: !10781)
!10785 = !DILocation(line: 4229, column: 11, scope: !10776)
!10786 = !DILocation(line: 4230, column: 2, scope: !10781)
!10787 = !DILocation(line: 4231, column: 16, scope: !10788)
!10788 = distinct !DILexicalBlock(scope: !10781, file: !3, line: 4231, column: 16)
!10789 = !DILocation(line: 4231, column: 27, scope: !10788)
!10790 = !DILocation(line: 4231, column: 24, scope: !10788)
!10791 = !DILocation(line: 4231, column: 16, scope: !10781)
!10792 = !DILocation(line: 4232, column: 2, scope: !10788)
!10793 = !DILocation(line: 4233, column: 16, scope: !10794)
!10794 = distinct !DILexicalBlock(scope: !10788, file: !3, line: 4233, column: 16)
!10795 = !DILocation(line: 4233, column: 24, scope: !10794)
!10796 = !DILocation(line: 4233, column: 33, scope: !10794)
!10797 = !DILocation(line: 4233, column: 16, scope: !10788)
!10798 = !DILocation(line: 4234, column: 2, scope: !10794)
!10799 = !DILocation(line: 4237, column: 16, scope: !10800)
!10800 = distinct !DILexicalBlock(scope: !10794, file: !3, line: 4237, column: 16)
!10801 = !DILocation(line: 4237, column: 16, scope: !10794)
!10802 = !DILocation(line: 4238, column: 2, scope: !10800)
!10803 = !DILocation(line: 4239, column: 18, scope: !10804)
!10804 = distinct !DILexicalBlock(scope: !10800, file: !3, line: 4239, column: 16)
!10805 = !DILocation(line: 4239, column: 16, scope: !10800)
!10806 = !DILocation(line: 4240, column: 2, scope: !10804)
!10807 = !DILocation(line: 4245, column: 4, scope: !10808)
!10808 = distinct !DILexicalBlock(scope: !10804, file: !3, line: 4244, column: 2)
!10809 = !DILocation(line: 4245, column: 12, scope: !10808)
!10810 = !DILocation(line: 4245, column: 21, scope: !10808)
!10811 = !DILocation(line: 4245, column: 28, scope: !10808)
!10812 = !DILocation(line: 4246, column: 37, scope: !10813)
!10813 = distinct !DILexicalBlock(scope: !10808, file: !3, line: 4246, column: 8)
!10814 = !DILocation(line: 4246, column: 46, scope: !10813)
!10815 = !DILocation(line: 4247, column: 9, scope: !10813)
!10816 = !DILocation(line: 4247, column: 18, scope: !10813)
!10817 = !DILocation(line: 4246, column: 10, scope: !10813)
!10818 = !DILocation(line: 4246, column: 8, scope: !10808)
!10819 = !DILocation(line: 4248, column: 6, scope: !10813)
!10820 = !DILocation(line: 4250, column: 5, scope: !10776)
!10821 = distinct !{!10821, !10771, !10822}
!10822 = !DILocation(line: 4250, column: 5, scope: !10772)
!10823 = !DILocation(line: 4251, column: 7, scope: !10824)
!10824 = distinct !DILexicalBlock(scope: !10745, file: !3, line: 4251, column: 7)
!10825 = !DILocation(line: 4251, column: 7, scope: !10745)
!10826 = !DILocation(line: 4252, column: 11, scope: !10824)
!10827 = !DILocation(line: 4252, column: 5, scope: !10824)
!10828 = !DILocation(line: 4254, column: 11, scope: !10745)
!10829 = !DILocation(line: 4254, column: 16, scope: !10745)
!10830 = !DILocation(line: 4254, column: 3, scope: !10745)
!10831 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !146, file: !146, line: 283, type: !10832, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !136, retainedNodes: !3302)
!10832 = !DISubroutineType(types: !10833)
!10833 = !{null, !10834}
!10834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10324, size: 64)
!10835 = !DILocalVariable(name: "vec_", arg: 1, scope: !10831, file: !146, line: 283, type: !10834)
!10836 = !DILocation(line: 283, column: 1, scope: !10831)
!10837 = !DILocation(line: 283, column: 1, scope: !10838)
!10838 = distinct !DILexicalBlock(scope: !10831, file: !146, line: 283, column: 1)
