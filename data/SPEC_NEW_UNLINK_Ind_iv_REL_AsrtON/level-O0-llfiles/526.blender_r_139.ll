; ModuleID = 'blender/source/blender/blenkernel/intern/customdata.c'
source_filename = "blender/source/blender/blenkernel/intern/customdata.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.BMAllocTemplate = type { i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.LayerTypeInfo = type { i32, i8*, i32, i8*, void (i8*, i8*, i32)*, void (i8*, i32, i32)*, void (i8**, float*, float*, i32, i8*)*, void (i8*, i32*)*, void (i8*, i32)*, i8 (i8*, i8*)*, void (i8*, float)*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*, i8*)*, void (i8*, i8*)*, i32 (%struct.CDataFile*, i8*, i32)*, i32 (%struct.CDataFile*, i8*, i32)*, i64 (%struct.CDataFile*, i8*, i32)*, i32 ()* }
%struct.CDataFile = type opaque
%struct.MTFace = type { [4 x [2 x float]], %struct.Image*, i8, i8, i16, i16, i16 }
%struct.Image = type opaque
%struct.MCol = type { i8, i8, i8, i8 }
%struct.OrigSpaceFace = type { [4 x [2 x float]] }
%struct.MLoopCol = type { i8, i8, i8, i8 }
%struct.Global = type { %struct.Main*, [1024 x i8], [1024 x i8], i8, i8, i8, %struct.ListBase, i8, i8, i8, i16, i16, i16, i8, i16, i32, i32, i8, i32, i32, [200 x i8] }
%struct.Main = type { %struct.Main*, %struct.Main*, [1024 x i8], i16, i16, i16, i16, i64, [16 x i8], i16, %struct.Library*, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, [256 x i8], %struct.EvaluationContext*, %struct.MainLock* }
%struct.Library = type { %struct.ID, %struct.ID*, %struct.FileData*, [1024 x i8], [1024 x i8], %struct.Library*, %struct.PackedFile* }
%struct.ID = type { i8*, i8*, %struct.ID*, %struct.Library*, [66 x i8], i16, i32, i32, i32, %struct.IDProperty* }
%struct.IDProperty = type { %struct.IDProperty*, %struct.IDProperty*, i8, i8, i16, [64 x i8], i32, %struct.IDPropertyData, i32, i32 }
%struct.IDPropertyData = type { i8*, %struct.ListBase, i32, i32 }
%struct.FileData = type opaque
%struct.PackedFile = type opaque
%struct.EvaluationContext = type opaque
%struct.MainLock = type opaque
%struct.ListBase = type { i8*, i8* }
%struct.BPy_BMGeneric = type opaque
%struct.CustomData = type { %struct.CustomDataLayer*, [41 x i32], i32, i32, i32, %struct.BLI_mempool*, %struct.CustomDataExternal* }
%struct.CustomDataLayer = type { i32, i32, i32, i32, i32, i32, i32, i32, [64 x i8], i8* }
%struct.BLI_mempool = type opaque
%struct.CustomDataExternal = type { [1024 x i8] }
%struct.BMesh = type { i32, i32, i32, i32, i32, i32, i32, i8, i8, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BMVert**, %struct.BMEdge**, %struct.BMFace**, i32, i32, i32, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, i32, %struct.BMOperator*, %struct.CustomData, %struct.CustomData, %struct.CustomData, %struct.CustomData, i16, i32, i32, i32, %struct.ListBase, %struct.BMFace*, %struct.ListBase, i8* }
%struct.BMVert = type { %struct.BMHeader, %struct.BMFlagLayer*, [3 x float], [3 x float], %struct.BMEdge* }
%struct.BMHeader = type { i8*, i32, i8, i8, i8 }
%struct.BMFlagLayer = type { i16 }
%struct.BMEdge = type { %struct.BMHeader, %struct.BMFlagLayer*, %struct.BMVert*, %struct.BMVert*, %struct.BMLoop*, %struct.BMDiskLink, %struct.BMDiskLink }
%struct.BMLoop = type { %struct.BMHeader, %struct.BMVert*, %struct.BMEdge*, %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMDiskLink = type { %struct.BMEdge*, %struct.BMEdge* }
%struct.BMOperator = type { [16 x %struct.BMOpSlot], [16 x %struct.BMOpSlot], void (%struct.BMesh*, %struct.BMOperator*)*, %struct.MemArena*, i32, i32, i32 }
%struct.BMOpSlot = type { i8*, i32, %union.eBMOpSlotSubType_Union, i32, %union.anon }
%union.eBMOpSlotSubType_Union = type { i32 }
%union.anon = type { i8*, [8 x i8] }
%struct.MemArena = type opaque
%struct.BMFace = type { %struct.BMHeader, %struct.BMFlagLayer*, %struct.BMLoop*, i32, [3 x float], i16 }
%struct.BMIter = type { %union.anon.0, void (i8*)*, i8* (i8*)*, i32, i8 }
%union.anon.0 = type { %struct.BMIter__face_of_vert }
%struct.BMIter__face_of_vert = type { %struct.BMVert*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMEdge*, %struct.BMEdge* }
%struct.anon = type { %struct.CustomData*, i32, i32 }
%struct.anon.3 = type { %struct.CustomData*, i32, i32 }
%struct.CDataFileLayer = type opaque
%struct.MDeformVert = type { %struct.MDeformWeight*, i32, i32 }
%struct.MDeformWeight = type { i32, float }
%struct.MDeformWeight_Link = type { %struct.MDeformWeight_Link*, %struct.MDeformWeight }
%struct.anon.1 = type { float, float, float, float }
%struct.MLoopUV = type { [2 x float], i32 }
%struct.anon.2 = type { float, float, float, float }
%struct.MDisps = type { i32, i32, [3 x float]*, i32* }
%struct.OrigSpaceLoop = type { [2 x float] }
%struct.GridPaintMask = type { float*, i32, i32 }
%struct.MVertSkin = type { [3 x float], i32 }
%struct.BMIter__elem_of_mesh = type { %struct.BLI_mempool_iter }
%struct.BLI_mempool_iter = type { %struct.BLI_mempool*, %struct.BLI_mempool_chunk*, i32 }
%struct.BLI_mempool_chunk = type opaque
%struct.BMIter__edge_of_vert = type { %struct.BMVert*, %struct.BMEdge*, %struct.BMEdge* }
%struct.BMIter__loop_of_vert = type { %struct.BMVert*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMEdge*, %struct.BMEdge* }
%struct.BMIter__vert_of_edge = type { %struct.BMEdge* }
%struct.BMIter__face_of_edge = type { %struct.BMEdge*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__vert_of_face = type { %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__edge_of_face = type { %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__loop_of_face = type { %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__loop_of_loop = type { %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__loop_of_edge = type { %struct.BMEdge*, %struct.BMLoop*, %struct.BMLoop* }

@CD_MASK_BAREMESH = dso_local constant i64 637534233, align 8, !dbg !0
@CD_MASK_MESH = dso_local constant i64 532694146175, align 8, !dbg !300
@CD_MASK_EDITMESH = dso_local constant i64 120679275622, align 8, !dbg !303
@CD_MASK_DERIVEDMESH = dso_local constant i64 487773961446, align 8, !dbg !305
@CD_MASK_BMESH = dso_local constant i64 534606748678, align 8, !dbg !307
@CD_MASK_FACECORNERS = dso_local constant i64 549756043616, align 8, !dbg !309
@CD_MASK_EVERYTHING = dso_local constant i64 2199016963583, align 8, !dbg !311
@.str = private unnamed_addr constant [13 x i8] c"mask=0x%lx:\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@MEM_dupallocN = external dso_local global i8* (i8*)*, align 8
@MEM_freeN = external dso_local global void (i8*)*, align 8
@MEM_mallocN = external dso_local global i8* (i64, i8*)*, align 8
@.str.2 = private unnamed_addr constant [23 x i8] c"CD duplicate ref layer\00", align 1
@MEM_callocN = external dso_local global i8* (i64, i8*)*, align 8
@.str.3 = private unnamed_addr constant [26 x i8] c"CustomData_interp sources\00", align 1
@bm_mesh_chunksize_default = external dso_local constant %struct.BMAllocTemplate, align 4
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [34 x i8] c"Failed to read %s layer from %s.\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"Failed to open %s for writing.\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"Failed to write data to %s.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"CustomDataExternal\00", align 1
@LAYERTYPENAMES = internal global [41 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.48, i32 0, i32 0)], align 16, !dbg !313
@.str.8 = private unnamed_addr constant [8 x i8] c"CDMVert\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"CDMSticky\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"CDMDeformVert\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"CDMEdge\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"CDMFace\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"CDMTFace\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"CDMCol\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"CDOrigIndex\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"CDNormal\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"CDFlags\00", align 1
@.str.18 = private unnamed_addr constant [17 x i8] c"CDMFloatProperty\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"CDMIntProperty\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"CDMStringProperty\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"CDOrigSpace\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"CDOrco\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"CDMTexPoly\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"CDMLoopUV\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"CDMloopCol\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"CDTangent\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"CDMDisps\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"CDPreviewMCol\00", align 1
@.str.29 = private unnamed_addr constant [9 x i8] c"CDIDMCol\00", align 1
@.str.30 = private unnamed_addr constant [14 x i8] c"CDTextureMCol\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"CDClothOrco\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"CDMRecast\00", align 1
@.str.33 = private unnamed_addr constant [8 x i8] c"CDMPoly\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"CDMLoop\00", align 1
@.str.35 = private unnamed_addr constant [16 x i8] c"CDShapeKeyIndex\00", align 1
@.str.36 = private unnamed_addr constant [11 x i8] c"CDShapeKey\00", align 1
@.str.37 = private unnamed_addr constant [14 x i8] c"CDBevelWeight\00", align 1
@.str.38 = private unnamed_addr constant [16 x i8] c"CDSubSurfCrease\00", align 1
@.str.39 = private unnamed_addr constant [16 x i8] c"CDOrigSpaceLoop\00", align 1
@.str.40 = private unnamed_addr constant [17 x i8] c"CDPreviewLoopCol\00", align 1
@.str.41 = private unnamed_addr constant [14 x i8] c"CDBMElemPyPtr\00", align 1
@.str.42 = private unnamed_addr constant [12 x i8] c"CDPaintMask\00", align 1
@.str.43 = private unnamed_addr constant [16 x i8] c"CDGridPaintMask\00", align 1
@.str.44 = private unnamed_addr constant [12 x i8] c"CDMVertSkin\00", align 1
@.str.45 = private unnamed_addr constant [16 x i8] c"CDFreestyleEdge\00", align 1
@.str.46 = private unnamed_addr constant [16 x i8] c"CDFreestyleFace\00", align 1
@.str.47 = private unnamed_addr constant [15 x i8] c"CDMLoopTangent\00", align 1
@.str.48 = private unnamed_addr constant [17 x i8] c"CDTessLoopNormal\00", align 1
@LAYERTYPEINFO = internal constant [41 x %struct.LayerTypeInfo] [%struct.LayerTypeInfo { i32 20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* @layerCopy_mdeformvert, void (i8*, i32, i32)* @layerFree_mdeformvert, void (i8**, float*, float*, i32, i8*)* @layerInterp_mdeformvert, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.54, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), void (i8*, i8*, i32)* @layerCopy_tface, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_tface, void (i8*, i32*)* @layerSwap_tface, void (i8*, i32)* @layerDefault_tface, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* @layerMaxNum_tface }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mcol, void (i8*, i32*)* @layerSwap_mcol, void (i8*, i32)* @layerDefault_mcol, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* @layerMaxNum_mloopcol }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* @layerDefault_origindex, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.59, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.60, i32 0, i32 0), void (i8*, i8*, i32)* @layerCopy_propFloat, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.61, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.62, i32 0, i32 0), void (i8*, i8*, i32)* @layerCopy_propInt, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 256, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.63, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.64, i32 0, i32 0), void (i8*, i8*, i32)* @layerCopy_propString, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 32, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), void (i8*, i8*, i32)* @layerCopy_origspace_face, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_origspace_face, void (i8*, i32*)* @layerSwap_origspace_face, void (i8*, i32)* @layerDefault_origspace_face, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 12, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.66, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* @layerMaxNum_tface }, %struct.LayerTypeInfo { i32 12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mloopuv, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* @layerEqual_mloopuv, void (i8*, float)* @layerMultiply_mloopuv, void (i8*, i8*)* @layerInitMinMax_mloopuv, void (i8*, i8*)* @layerAdd_mloopuv, void (i8*, i8*, i8*)* @layerDoMinMax_mloopuv, void (i8*, i8*)* @layerCopyValue_mloopuv, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* @layerMaxNum_tface }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mloopcol, void (i8*, i32*)* null, void (i8*, i32)* @layerDefault_mloopcol, i8 (i8*, i8*)* @layerEqual_mloopcol, void (i8*, float)* @layerMultiply_mloopcol, void (i8*, i8*)* @layerInitMinMax_mloopcol, void (i8*, i8*)* @layerAdd_mloopcol, void (i8*, i8*, i8*)* @layerDoMinMax_mloopcol, void (i8*, i8*)* @layerCopyValue_mloopcol, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* @layerMaxNum_mloopcol }, %struct.LayerTypeInfo { i32 64, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* @layerCopy_mdisps, void (i8*, i32, i32)* @layerFree_mdisps, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* @layerSwap_mdisps, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* @layerRead_mdisps, i32 (%struct.CDataFile*, i8*, i32)* @layerWrite_mdisps, i64 (%struct.CDataFile*, i8*, i32)* @layerFilesize_mdisps, i32 ()* null }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mcol, void (i8*, i32*)* @layerSwap_mcol, void (i8*, i32)* @layerDefault_mcol, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mcol, void (i8*, i32*)* @layerSwap_mcol, void (i8*, i32)* @layerDefault_mcol, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.72, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mcol, void (i8*, i32*)* @layerSwap_mcol, void (i8*, i32)* @layerDefault_mcol, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 12, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.74, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.75, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.77, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.78, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 12, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.79, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_shapekey, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.80, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_bweight, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_bweight, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.82, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mloop_origspace, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* @layerEqual_mloop_origspace, void (i8*, float)* @layerMultiply_mloop_origspace, void (i8*, i8*)* @layerInitMinMax_mloop_origspace, void (i8*, i8*)* @layerAdd_mloop_origspace, void (i8*, i8*, i8*)* @layerDoMinMax_mloop_origspace, void (i8*, i8*)* @layerCopyValue_mloop_origspace, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.84, i32 0, i32 0), void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mloopcol, void (i8*, i32*)* null, void (i8*, i32)* @layerDefault_mloopcol, i8 (i8*, i8*)* @layerEqual_mloopcol, void (i8*, float)* @layerMultiply_mloopcol, void (i8*, i8*)* @layerInitMinMax_mloopcol, void (i8*, i8*)* @layerAdd_mloopcol, void (i8*, i8*, i8*)* @layerDoMinMax_mloopcol, void (i8*, i8*)* @layerCopyValue_mloopcol, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* @layerCopy_bmesh_elem_py_ptr, void (i8*, i32, i32)* @layerFree_bmesh_elem_py_ptr, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.85, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* @layerCopy_grid_paint_mask, void (i8*, i32, i32)* @layerFree_grid_paint_mask, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.86, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* @layerInterp_mvert_skin, void (i8*, i32*)* null, void (i8*, i32)* @layerDefault_mvert_skin, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.87, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.88, i32 0, i32 0), i32 1, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* null, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }, %struct.LayerTypeInfo { i32 24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i32 0, i32 0), i32 0, i8* null, void (i8*, i8*, i32)* null, void (i8*, i32, i32)* null, void (i8**, float*, float*, i32, i8*)* null, void (i8*, i32*)* @layerSwap_flnor, void (i8*, i32)* null, i8 (i8*, i8*)* null, void (i8*, float)* null, void (i8*, i8*)* null, void (i8*, i8*)* null, void (i8*, i8*, i8*)* null, void (i8*, i8*)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i32 (%struct.CDataFile*, i8*, i32)* null, i64 (%struct.CDataFile*, i8*, i32)* null, i32 ()* null }], align 16, !dbg !320
@.str.49 = private unnamed_addr constant [6 x i8] c"MVert\00", align 1
@.str.50 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"MDeformVert\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"MEdge\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"MFace\00", align 1
@.str.54 = private unnamed_addr constant [7 x i8] c"MTFace\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"UVMap\00", align 1
@.str.56 = private unnamed_addr constant [5 x i8] c"MCol\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"Col\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"vec3f\00", align 1
@.str.59 = private unnamed_addr constant [15 x i8] c"MFloatProperty\00", align 1
@.str.60 = private unnamed_addr constant [6 x i8] c"Float\00", align 1
@.str.61 = private unnamed_addr constant [13 x i8] c"MIntProperty\00", align 1
@.str.62 = private unnamed_addr constant [4 x i8] c"Int\00", align 1
@.str.63 = private unnamed_addr constant [16 x i8] c"MStringProperty\00", align 1
@.str.64 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@.str.65 = private unnamed_addr constant [14 x i8] c"OrigSpaceFace\00", align 1
@.str.66 = private unnamed_addr constant [9 x i8] c"MTexPoly\00", align 1
@.str.67 = private unnamed_addr constant [8 x i8] c"MLoopUV\00", align 1
@.str.68 = private unnamed_addr constant [9 x i8] c"MLoopCol\00", align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"MDisps\00", align 1
@.str.70 = private unnamed_addr constant [11 x i8] c"PreviewCol\00", align 1
@.str.71 = private unnamed_addr constant [6 x i8] c"IDCol\00", align 1
@.str.72 = private unnamed_addr constant [12 x i8] c"TexturedCol\00", align 1
@.str.73 = private unnamed_addr constant [8 x i8] c"MRecast\00", align 1
@.str.74 = private unnamed_addr constant [7 x i8] c"Recast\00", align 1
@.str.75 = private unnamed_addr constant [6 x i8] c"MPoly\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"NGon Face\00", align 1
@.str.77 = private unnamed_addr constant [6 x i8] c"MLoop\00", align 1
@.str.78 = private unnamed_addr constant [17 x i8] c"NGon Face-Vertex\00", align 1
@.str.79 = private unnamed_addr constant [9 x i8] c"ShapeKey\00", align 1
@.str.80 = private unnamed_addr constant [12 x i8] c"BevelWeight\00", align 1
@.str.81 = private unnamed_addr constant [14 x i8] c"SubSurfCrease\00", align 1
@.str.82 = private unnamed_addr constant [14 x i8] c"OrigSpaceLoop\00", align 1
@.str.83 = private unnamed_addr constant [8 x i8] c"OS Loop\00", align 1
@.str.84 = private unnamed_addr constant [15 x i8] c"PreviewLoopCol\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"GridPaintMask\00", align 1
@.str.86 = private unnamed_addr constant [10 x i8] c"MVertSkin\00", align 1
@.str.87 = private unnamed_addr constant [14 x i8] c"FreestyleEdge\00", align 1
@.str.88 = private unnamed_addr constant [14 x i8] c"FreestyleFace\00", align 1
@.str.89 = private unnamed_addr constant [25 x i8] c"layerCopy_mdeformvert dw\00", align 1
@__func__.layerInterp_mdeformvert = private unnamed_addr constant [24 x i8] c"layerInterp_mdeformvert\00", align 1
@layerSwap_tface.pin_flags = internal constant [4 x i16] [i16 16, i16 32, i16 64, i16 128], align 2, !dbg !404
@layerSwap_tface.sel_flags = internal constant [4 x i8] c"\04\08\10 ", align 1, !dbg !411
@layerDefault_tface.default_tf = internal global %struct.MTFace { [4 x [2 x float]] [[2 x float] zeroinitializer, [2 x float] [float 1.000000e+00, float 0.000000e+00], [2 x float] [float 1.000000e+00, float 1.000000e+00], [2 x float] [float 0.000000e+00, float 1.000000e+00]], %struct.Image* null, i8 0, i8 0, i16 33, i16 0, i16 0 }, align 8, !dbg !414
@layerDefault_mcol.default_mcol = internal global %struct.MCol { i8 -1, i8 -1, i8 -1, i8 -1 }, align 1, !dbg !417
@layerDefault_origspace_face.default_osf = internal global %struct.OrigSpaceFace { [4 x [2 x float]] [[2 x float] zeroinitializer, [2 x float] [float 1.000000e+00, float 0.000000e+00], [2 x float] [float 1.000000e+00, float 1.000000e+00], [2 x float] [float 0.000000e+00, float 1.000000e+00]] }, align 4, !dbg !420
@__const.layerDefault_mloopcol.default_mloopcol = private unnamed_addr constant %struct.MLoopCol { i8 -1, i8 -1, i8 -1, i8 -1 }, align 1
@.str.90 = private unnamed_addr constant [11 x i8] c"mdisp swap\00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"mdisps swap\00", align 1
@.str.92 = private unnamed_addr constant [12 x i8] c"mdisps read\00", align 1
@.str.93 = private unnamed_addr constant [47 x i8] c"failed to read multires displacement %d/%d %d\0A\00", align 1
@.str.94 = private unnamed_addr constant [48 x i8] c"failed to write multires displacement %d/%d %d\0A\00", align 1
@.str.95 = private unnamed_addr constant [19 x i8] c"CustomData->layers\00", align 1
@.str.96 = private unnamed_addr constant [57 x i8] c"%s: warning null data for %s type (%p --> %p), skipping\0A\00", align 1
@__func__.CustomData_copy_data_layer = private unnamed_addr constant [27 x i8] c"CustomData_copy_data_layer\00", align 1
@G = external dso_local global %struct.Global, align 8

; Function Attrs: noinline nounwind uwtable
define dso_local void @bpy_bm_generic_invalidate(%struct.BPy_BMGeneric* %UNUSED_self) #0 !dbg !427 {
entry:
  %UNUSED_self.addr = alloca %struct.BPy_BMGeneric*, align 8
  store %struct.BPy_BMGeneric* %UNUSED_self, %struct.BPy_BMGeneric** %UNUSED_self.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BPy_BMGeneric** %UNUSED_self.addr, metadata !432, metadata !DIExpression()), !dbg !433
  ret void, !dbg !434
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @customData_mask_layers__print(i64 %mask) #0 !dbg !435 {
entry:
  %mask.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !438, metadata !DIExpression()), !dbg !439
  call void @llvm.dbg.declare(metadata i32* %i, metadata !440, metadata !DIExpression()), !dbg !441
  %0 = load i64, i64* %mask.addr, align 8, !dbg !442
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 %0), !dbg !443
  store i32 0, i32* %i, align 4, !dbg !444
  br label %for.cond, !dbg !446

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !447
  %cmp = icmp slt i32 %1, 41, !dbg !449
  br i1 %cmp, label %for.body, label %for.end, !dbg !450

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %mask.addr, align 8, !dbg !451
  %3 = load i32, i32* %i, align 4, !dbg !454
  %conv = sext i32 %3 to i64, !dbg !454
  %shl = shl i64 1, %conv, !dbg !454
  %and = and i64 %2, %shl, !dbg !455
  %tobool = icmp ne i64 %and, 0, !dbg !455
  br i1 %tobool, label %if.then, label %if.end, !dbg !456

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !457
  %call1 = call i8* @layerType_getName(i32 %4), !dbg !459
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* %call1), !dbg !460
  br label %if.end, !dbg !461

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !462

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !463
  %inc = add nsw i32 %5, 1, !dbg !463
  store i32 %inc, i32* %i, align 4, !dbg !463
  br label %for.cond, !dbg !464, !llvm.loop !465

for.end:                                          ; preds = %for.cond
  ret void, !dbg !467
}

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @layerType_getName(i32 %type) #0 !dbg !468 {
entry:
  %retval = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !471, metadata !DIExpression()), !dbg !472
  %0 = load i32, i32* %type.addr, align 4, !dbg !473
  %cmp = icmp slt i32 %0, 0, !dbg !475
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !476

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4, !dbg !477
  %cmp1 = icmp sge i32 %1, 41, !dbg !478
  br i1 %cmp1, label %if.then, label %if.end, !dbg !479

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* null, i8** %retval, align 8, !dbg !480
  br label %return, !dbg !480

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %type.addr, align 4, !dbg !481
  %idxprom = sext i32 %2 to i64, !dbg !482
  %arrayidx = getelementptr inbounds [41 x i8*], [41 x i8*]* @LAYERTYPENAMES, i64 0, i64 %idxprom, !dbg !482
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !482
  store i8* %3, i8** %retval, align 8, !dbg !483
  br label %return, !dbg !483

return:                                           ; preds = %if.end, %if.then
  %4 = load i8*, i8** %retval, align 8, !dbg !484
  ret i8* %4, !dbg !484
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_update_typemap(%struct.CustomData* %data) #0 !dbg !485 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %i = alloca i32, align 4
  %lasttype = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !527, metadata !DIExpression()), !dbg !528
  call void @llvm.dbg.declare(metadata i32* %i, metadata !529, metadata !DIExpression()), !dbg !530
  call void @llvm.dbg.declare(metadata i32* %lasttype, metadata !531, metadata !DIExpression()), !dbg !532
  store i32 -1, i32* %lasttype, align 4, !dbg !532
  store i32 0, i32* %i, align 4, !dbg !533
  br label %for.cond, !dbg !535

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !536
  %cmp = icmp slt i32 %0, 41, !dbg !538
  br i1 %cmp, label %for.body, label %for.end, !dbg !539

for.body:                                         ; preds = %for.cond
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !540
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 1, !dbg !542
  %2 = load i32, i32* %i, align 4, !dbg !543
  %idxprom = sext i32 %2 to i64, !dbg !540
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !540
  store i32 -1, i32* %arrayidx, align 4, !dbg !544
  br label %for.inc, !dbg !545

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4, !dbg !546
  %inc = add nsw i32 %3, 1, !dbg !546
  store i32 %inc, i32* %i, align 4, !dbg !546
  br label %for.cond, !dbg !547, !llvm.loop !548

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !550
  br label %for.cond1, !dbg !552

for.cond1:                                        ; preds = %for.inc18, %for.end
  %4 = load i32, i32* %i, align 4, !dbg !553
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !555
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 2, !dbg !556
  %6 = load i32, i32* %totlayer, align 4, !dbg !556
  %cmp2 = icmp slt i32 %4, %6, !dbg !557
  br i1 %cmp2, label %for.body3, label %for.end20, !dbg !558

for.body3:                                        ; preds = %for.cond1
  %7 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !559
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %7, i32 0, i32 0, !dbg !562
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !562
  %9 = load i32, i32* %i, align 4, !dbg !563
  %idxprom4 = sext i32 %9 to i64, !dbg !559
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i64 %idxprom4, !dbg !559
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 0, !dbg !564
  %10 = load i32, i32* %type, align 8, !dbg !564
  %11 = load i32, i32* %lasttype, align 4, !dbg !565
  %cmp6 = icmp ne i32 %10, %11, !dbg !566
  br i1 %cmp6, label %if.then, label %if.end, !dbg !567

if.then:                                          ; preds = %for.body3
  %12 = load i32, i32* %i, align 4, !dbg !568
  %13 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !570
  %typemap7 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %13, i32 0, i32 1, !dbg !571
  %14 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !572
  %layers8 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 0, !dbg !573
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers8, align 8, !dbg !573
  %16 = load i32, i32* %i, align 4, !dbg !574
  %idxprom9 = sext i32 %16 to i64, !dbg !572
  %arrayidx10 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i64 %idxprom9, !dbg !572
  %type11 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx10, i32 0, i32 0, !dbg !575
  %17 = load i32, i32* %type11, align 8, !dbg !575
  %idxprom12 = sext i32 %17 to i64, !dbg !570
  %arrayidx13 = getelementptr inbounds [41 x i32], [41 x i32]* %typemap7, i64 0, i64 %idxprom12, !dbg !570
  store i32 %12, i32* %arrayidx13, align 4, !dbg !576
  br label %if.end, !dbg !577

if.end:                                           ; preds = %if.then, %for.body3
  %18 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !578
  %layers14 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %18, i32 0, i32 0, !dbg !579
  %19 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers14, align 8, !dbg !579
  %20 = load i32, i32* %i, align 4, !dbg !580
  %idxprom15 = sext i32 %20 to i64, !dbg !578
  %arrayidx16 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %19, i64 %idxprom15, !dbg !578
  %type17 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx16, i32 0, i32 0, !dbg !581
  %21 = load i32, i32* %type17, align 8, !dbg !581
  store i32 %21, i32* %lasttype, align 4, !dbg !582
  br label %for.inc18, !dbg !583

for.inc18:                                        ; preds = %if.end
  %22 = load i32, i32* %i, align 4, !dbg !584
  %inc19 = add nsw i32 %22, 1, !dbg !584
  store i32 %inc19, i32* %i, align 4, !dbg !584
  br label %for.cond1, !dbg !585, !llvm.loop !586

for.end20:                                        ; preds = %for.cond1
  ret void, !dbg !588
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_merge(%struct.CustomData* %source, %struct.CustomData* %dest, i64 %mask, i32 %alloctype, i32 %totelem) #0 !dbg !589 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %mask.addr = alloca i64, align 8
  %alloctype.addr = alloca i32, align 4
  %totelem.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %newlayer = alloca %struct.CustomDataLayer*, align 8
  %data = alloca i8*, align 8
  %i = alloca i32, align 4
  %type = alloca i32, align 4
  %lasttype = alloca i32, align 4
  %lastactive = alloca i32, align 4
  %lastrender = alloca i32, align 4
  %lastclone = alloca i32, align 4
  %lastmask = alloca i32, align 4
  %lastflag = alloca i32, align 4
  %number = alloca i32, align 4
  %maxnumber = alloca i32, align 4
  %changed = alloca i8, align 1
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !595, metadata !DIExpression()), !dbg !596
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !597, metadata !DIExpression()), !dbg !598
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !599, metadata !DIExpression()), !dbg !600
  store i32 %alloctype, i32* %alloctype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloctype.addr, metadata !601, metadata !DIExpression()), !dbg !602
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !603, metadata !DIExpression()), !dbg !604
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !605, metadata !DIExpression()), !dbg !606
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %newlayer, metadata !607, metadata !DIExpression()), !dbg !608
  call void @llvm.dbg.declare(metadata i8** %data, metadata !609, metadata !DIExpression()), !dbg !610
  call void @llvm.dbg.declare(metadata i32* %i, metadata !611, metadata !DIExpression()), !dbg !612
  call void @llvm.dbg.declare(metadata i32* %type, metadata !613, metadata !DIExpression()), !dbg !614
  call void @llvm.dbg.declare(metadata i32* %lasttype, metadata !615, metadata !DIExpression()), !dbg !616
  store i32 -1, i32* %lasttype, align 4, !dbg !616
  call void @llvm.dbg.declare(metadata i32* %lastactive, metadata !617, metadata !DIExpression()), !dbg !618
  store i32 0, i32* %lastactive, align 4, !dbg !618
  call void @llvm.dbg.declare(metadata i32* %lastrender, metadata !619, metadata !DIExpression()), !dbg !620
  store i32 0, i32* %lastrender, align 4, !dbg !620
  call void @llvm.dbg.declare(metadata i32* %lastclone, metadata !621, metadata !DIExpression()), !dbg !622
  store i32 0, i32* %lastclone, align 4, !dbg !622
  call void @llvm.dbg.declare(metadata i32* %lastmask, metadata !623, metadata !DIExpression()), !dbg !624
  store i32 0, i32* %lastmask, align 4, !dbg !624
  call void @llvm.dbg.declare(metadata i32* %lastflag, metadata !625, metadata !DIExpression()), !dbg !626
  store i32 0, i32* %lastflag, align 4, !dbg !626
  call void @llvm.dbg.declare(metadata i32* %number, metadata !627, metadata !DIExpression()), !dbg !628
  store i32 0, i32* %number, align 4, !dbg !628
  call void @llvm.dbg.declare(metadata i32* %maxnumber, metadata !629, metadata !DIExpression()), !dbg !630
  store i32 -1, i32* %maxnumber, align 4, !dbg !630
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !631, metadata !DIExpression()), !dbg !632
  store i8 0, i8* %changed, align 1, !dbg !632
  store i32 0, i32* %i, align 4, !dbg !633
  br label %for.cond, !dbg !635

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !636
  %1 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !638
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !639
  %2 = load i32, i32* %totlayer, align 4, !dbg !639
  %cmp = icmp slt i32 %0, %2, !dbg !640
  br i1 %cmp, label %for.body, label %for.end, !dbg !641

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !642
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !644
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !644
  %5 = load i32, i32* %i, align 4, !dbg !645
  %idxprom = sext i32 %5 to i64, !dbg !642
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !642
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !646
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !647
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i32 0, i32 0, !dbg !648
  %7 = load i32, i32* %type1, align 8, !dbg !648
  store i32 %7, i32* %type, align 4, !dbg !649
  %8 = load i32, i32* %type, align 4, !dbg !650
  %9 = load i32, i32* %lasttype, align 4, !dbg !652
  %cmp2 = icmp ne i32 %8, %9, !dbg !653
  br i1 %cmp2, label %if.then, label %if.else, !dbg !654

if.then:                                          ; preds = %for.body
  store i32 0, i32* %number, align 4, !dbg !655
  %10 = load i32, i32* %type, align 4, !dbg !657
  %call = call i32 @CustomData_layertype_layers_max(i32 %10), !dbg !658
  store i32 %call, i32* %maxnumber, align 4, !dbg !659
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !660
  %active = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i32 0, i32 3, !dbg !661
  %12 = load i32, i32* %active, align 4, !dbg !661
  store i32 %12, i32* %lastactive, align 4, !dbg !662
  %13 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !663
  %active_rnd = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %13, i32 0, i32 4, !dbg !664
  %14 = load i32, i32* %active_rnd, align 8, !dbg !664
  store i32 %14, i32* %lastrender, align 4, !dbg !665
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !666
  %active_clone = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i32 0, i32 5, !dbg !667
  %16 = load i32, i32* %active_clone, align 4, !dbg !667
  store i32 %16, i32* %lastclone, align 4, !dbg !668
  %17 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !669
  %active_mask = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %17, i32 0, i32 6, !dbg !670
  %18 = load i32, i32* %active_mask, align 8, !dbg !670
  store i32 %18, i32* %lastmask, align 4, !dbg !671
  %19 = load i32, i32* %type, align 4, !dbg !672
  store i32 %19, i32* %lasttype, align 4, !dbg !673
  %20 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !674
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %20, i32 0, i32 2, !dbg !675
  %21 = load i32, i32* %flag, align 8, !dbg !675
  store i32 %21, i32* %lastflag, align 4, !dbg !676
  br label %if.end, !dbg !677

if.else:                                          ; preds = %for.body
  %22 = load i32, i32* %number, align 4, !dbg !678
  %inc = add nsw i32 %22, 1, !dbg !678
  store i32 %inc, i32* %number, align 4, !dbg !678
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %23 = load i32, i32* %lastflag, align 4, !dbg !679
  %and = and i32 %23, 1, !dbg !681
  %tobool = icmp ne i32 %and, 0, !dbg !681
  br i1 %tobool, label %if.then3, label %if.else4, !dbg !682

if.then3:                                         ; preds = %if.end
  br label %for.inc, !dbg !683

if.else4:                                         ; preds = %if.end
  %24 = load i64, i64* %mask.addr, align 8, !dbg !684
  %25 = load i32, i32* %type, align 4, !dbg !686
  %conv = sext i32 %25 to i64, !dbg !686
  %shl = shl i64 1, %conv, !dbg !686
  %and5 = and i64 %24, %shl, !dbg !687
  %tobool6 = icmp ne i64 %and5, 0, !dbg !687
  br i1 %tobool6, label %if.else8, label %if.then7, !dbg !688

if.then7:                                         ; preds = %if.else4
  br label %for.inc, !dbg !689

if.else8:                                         ; preds = %if.else4
  %26 = load i32, i32* %maxnumber, align 4, !dbg !690
  %cmp9 = icmp ne i32 %26, -1, !dbg !692
  br i1 %cmp9, label %land.lhs.true, label %if.else14, !dbg !693

land.lhs.true:                                    ; preds = %if.else8
  %27 = load i32, i32* %number, align 4, !dbg !694
  %28 = load i32, i32* %maxnumber, align 4, !dbg !695
  %cmp11 = icmp sge i32 %27, %28, !dbg !696
  br i1 %cmp11, label %if.then13, label %if.else14, !dbg !697

if.then13:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !698

if.else14:                                        ; preds = %land.lhs.true, %if.else8
  %29 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !699
  %30 = load i32, i32* %type, align 4, !dbg !701
  %31 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !702
  %name = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %31, i32 0, i32 8, !dbg !703
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !702
  %call15 = call i8* @CustomData_get_layer_named(%struct.CustomData* %29, i32 %30, i8* %arraydecay), !dbg !704
  %tobool16 = icmp ne i8* %call15, null, !dbg !704
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !705

if.then17:                                        ; preds = %if.else14
  br label %for.inc, !dbg !706

if.end18:                                         ; preds = %if.else14
  br label %if.end19

if.end19:                                         ; preds = %if.end18
  br label %if.end20

if.end20:                                         ; preds = %if.end19
  br label %if.end21

if.end21:                                         ; preds = %if.end20
  %32 = load i32, i32* %alloctype.addr, align 4, !dbg !707
  switch i32 %32, label %sw.default [
    i32 0, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ], !dbg !708

sw.bb:                                            ; preds = %if.end21, %if.end21, %if.end21
  %33 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !709
  %data22 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %33, i32 0, i32 9, !dbg !711
  %34 = load i8*, i8** %data22, align 8, !dbg !711
  store i8* %34, i8** %data, align 8, !dbg !712
  br label %sw.epilog, !dbg !713

sw.default:                                       ; preds = %if.end21
  store i8* null, i8** %data, align 8, !dbg !714
  br label %sw.epilog, !dbg !715

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %35 = load i32, i32* %alloctype.addr, align 4, !dbg !716
  %cmp23 = icmp eq i32 %35, 0, !dbg !718
  br i1 %cmp23, label %land.lhs.true25, label %if.else32, !dbg !719

land.lhs.true25:                                  ; preds = %sw.epilog
  %36 = load i32, i32* %lastflag, align 4, !dbg !720
  %and26 = and i32 %36, 2, !dbg !721
  %tobool27 = icmp ne i32 %and26, 0, !dbg !721
  br i1 %tobool27, label %if.then28, label %if.else32, !dbg !722

if.then28:                                        ; preds = %land.lhs.true25
  %37 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !723
  %38 = load i32, i32* %type, align 4, !dbg !724
  %39 = load i8*, i8** %data, align 8, !dbg !725
  %40 = load i32, i32* %totelem.addr, align 4, !dbg !726
  %41 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !727
  %name29 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %41, i32 0, i32 8, !dbg !728
  %arraydecay30 = getelementptr inbounds [64 x i8], [64 x i8]* %name29, i64 0, i64 0, !dbg !727
  %call31 = call %struct.CustomDataLayer* @customData_add_layer__internal(%struct.CustomData* %37, i32 %38, i32 3, i8* %39, i32 %40, i8* %arraydecay30), !dbg !729
  store %struct.CustomDataLayer* %call31, %struct.CustomDataLayer** %newlayer, align 8, !dbg !730
  br label %if.end36, !dbg !731

if.else32:                                        ; preds = %land.lhs.true25, %sw.epilog
  %42 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !732
  %43 = load i32, i32* %type, align 4, !dbg !733
  %44 = load i32, i32* %alloctype.addr, align 4, !dbg !734
  %45 = load i8*, i8** %data, align 8, !dbg !735
  %46 = load i32, i32* %totelem.addr, align 4, !dbg !736
  %47 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !737
  %name33 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %47, i32 0, i32 8, !dbg !738
  %arraydecay34 = getelementptr inbounds [64 x i8], [64 x i8]* %name33, i64 0, i64 0, !dbg !737
  %call35 = call %struct.CustomDataLayer* @customData_add_layer__internal(%struct.CustomData* %42, i32 %43, i32 %44, i8* %45, i32 %46, i8* %arraydecay34), !dbg !739
  store %struct.CustomDataLayer* %call35, %struct.CustomDataLayer** %newlayer, align 8, !dbg !740
  br label %if.end36

if.end36:                                         ; preds = %if.else32, %if.then28
  %48 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %newlayer, align 8, !dbg !741
  %tobool37 = icmp ne %struct.CustomDataLayer* %48, null, !dbg !741
  br i1 %tobool37, label %if.then38, label %if.end46, !dbg !743

if.then38:                                        ; preds = %if.end36
  %49 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !744
  %uid = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %49, i32 0, i32 7, !dbg !746
  %50 = load i32, i32* %uid, align 4, !dbg !746
  %51 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %newlayer, align 8, !dbg !747
  %uid39 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %51, i32 0, i32 7, !dbg !748
  store i32 %50, i32* %uid39, align 4, !dbg !749
  %52 = load i32, i32* %lastactive, align 4, !dbg !750
  %53 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %newlayer, align 8, !dbg !751
  %active40 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %53, i32 0, i32 3, !dbg !752
  store i32 %52, i32* %active40, align 4, !dbg !753
  %54 = load i32, i32* %lastrender, align 4, !dbg !754
  %55 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %newlayer, align 8, !dbg !755
  %active_rnd41 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %55, i32 0, i32 4, !dbg !756
  store i32 %54, i32* %active_rnd41, align 8, !dbg !757
  %56 = load i32, i32* %lastclone, align 4, !dbg !758
  %57 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %newlayer, align 8, !dbg !759
  %active_clone42 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %57, i32 0, i32 5, !dbg !760
  store i32 %56, i32* %active_clone42, align 4, !dbg !761
  %58 = load i32, i32* %lastmask, align 4, !dbg !762
  %59 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %newlayer, align 8, !dbg !763
  %active_mask43 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %59, i32 0, i32 6, !dbg !764
  store i32 %58, i32* %active_mask43, align 8, !dbg !765
  %60 = load i32, i32* %lastflag, align 4, !dbg !766
  %and44 = and i32 %60, 24, !dbg !767
  %61 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %newlayer, align 8, !dbg !768
  %flag45 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %61, i32 0, i32 2, !dbg !769
  %62 = load i32, i32* %flag45, align 8, !dbg !770
  %or = or i32 %62, %and44, !dbg !770
  store i32 %or, i32* %flag45, align 8, !dbg !770
  store i8 1, i8* %changed, align 1, !dbg !771
  br label %if.end46, !dbg !772

if.end46:                                         ; preds = %if.then38, %if.end36
  br label %for.inc, !dbg !773

for.inc:                                          ; preds = %if.end46, %if.then17, %if.then13, %if.then7, %if.then3
  %63 = load i32, i32* %i, align 4, !dbg !774
  %inc47 = add nsw i32 %63, 1, !dbg !774
  store i32 %inc47, i32* %i, align 4, !dbg !774
  br label %for.cond, !dbg !775, !llvm.loop !776

for.end:                                          ; preds = %for.cond
  %64 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !778
  call void @CustomData_update_typemap(%struct.CustomData* %64), !dbg !779
  %65 = load i8, i8* %changed, align 1, !dbg !780
  ret i8 %65, !dbg !781
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_layertype_layers_max(i32 %type) #0 !dbg !782 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !785, metadata !DIExpression()), !dbg !786
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !787, metadata !DIExpression()), !dbg !789
  %0 = load i32, i32* %type.addr, align 4, !dbg !790
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !791
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !789
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !792
  %defaultname = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 3, !dbg !794
  %2 = load i8*, i8** %defaultname, align 8, !dbg !794
  %cmp = icmp eq i8* %2, null, !dbg !795
  br i1 %cmp, label %if.then, label %if.else, !dbg !796

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !797
  br label %return, !dbg !797

if.else:                                          ; preds = %entry
  %3 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !799
  %layers_max = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %3, i32 0, i32 18, !dbg !801
  %4 = load i32 ()*, i32 ()** %layers_max, align 8, !dbg !801
  %cmp1 = icmp eq i32 ()* %4, null, !dbg !802
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !803

if.then2:                                         ; preds = %if.else
  store i32 -1, i32* %retval, align 4, !dbg !804
  br label %return, !dbg !804

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end
  %5 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !806
  %layers_max4 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %5, i32 0, i32 18, !dbg !807
  %6 = load i32 ()*, i32 ()** %layers_max4, align 8, !dbg !807
  %call5 = call i32 %6(), !dbg !806
  store i32 %call5, i32* %retval, align 4, !dbg !808
  br label %return, !dbg !808

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !809
  ret i32 %7, !dbg !809
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_get_layer_named(%struct.CustomData* %data, i32 %type, i8* %name) #0 !dbg !810 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !813, metadata !DIExpression()), !dbg !814
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !815, metadata !DIExpression()), !dbg !816
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !817, metadata !DIExpression()), !dbg !818
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !819, metadata !DIExpression()), !dbg !820
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !821
  %1 = load i32, i32* %type.addr, align 4, !dbg !822
  %2 = load i8*, i8** %name.addr, align 8, !dbg !823
  %call = call i32 @CustomData_get_named_layer_index(%struct.CustomData* %0, i32 %1, i8* %2), !dbg !824
  store i32 %call, i32* %layer_index, align 4, !dbg !820
  %3 = load i32, i32* %layer_index, align 4, !dbg !825
  %cmp = icmp eq i32 %3, -1, !dbg !827
  br i1 %cmp, label %if.then, label %if.end, !dbg !828

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !829
  br label %return, !dbg !829

if.end:                                           ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !830
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !831
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !831
  %6 = load i32, i32* %layer_index, align 4, !dbg !832
  %idxprom = sext i32 %6 to i64, !dbg !830
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !830
  %data1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 9, !dbg !833
  %7 = load i8*, i8** %data1, align 8, !dbg !833
  store i8* %7, i8** %retval, align 8, !dbg !834
  br label %return, !dbg !834

return:                                           ; preds = %if.end, %if.then
  %8 = load i8*, i8** %retval, align 8, !dbg !835
  ret i8* %8, !dbg !835
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.CustomDataLayer* @customData_add_layer__internal(%struct.CustomData* %data, i32 %type, i32 %alloctype, i8* %layerdata, i32 %totelem, i8* %name) #0 !dbg !836 {
entry:
  %retval = alloca %struct.CustomDataLayer*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %alloctype.addr = alloca i32, align 4
  %layerdata.addr = alloca i8*, align 8
  %totelem.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %size = alloca i32, align 4
  %flag = alloca i32, align 4
  %index = alloca i32, align 4
  %newlayerdata = alloca i8*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !839, metadata !DIExpression()), !dbg !840
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !841, metadata !DIExpression()), !dbg !842
  store i32 %alloctype, i32* %alloctype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloctype.addr, metadata !843, metadata !DIExpression()), !dbg !844
  store i8* %layerdata, i8** %layerdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %layerdata.addr, metadata !845, metadata !DIExpression()), !dbg !846
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !847, metadata !DIExpression()), !dbg !848
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !849, metadata !DIExpression()), !dbg !850
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !851, metadata !DIExpression()), !dbg !852
  %0 = load i32, i32* %type.addr, align 4, !dbg !853
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !854
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !852
  call void @llvm.dbg.declare(metadata i32* %size, metadata !855, metadata !DIExpression()), !dbg !856
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !857
  %size1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 0, !dbg !858
  %2 = load i32, i32* %size1, align 8, !dbg !858
  %3 = load i32, i32* %totelem.addr, align 4, !dbg !859
  %mul = mul nsw i32 %2, %3, !dbg !860
  store i32 %mul, i32* %size, align 4, !dbg !856
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !861, metadata !DIExpression()), !dbg !862
  store i32 0, i32* %flag, align 4, !dbg !862
  call void @llvm.dbg.declare(metadata i32* %index, metadata !863, metadata !DIExpression()), !dbg !864
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !865
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 2, !dbg !866
  %5 = load i32, i32* %totlayer, align 4, !dbg !866
  store i32 %5, i32* %index, align 4, !dbg !864
  call void @llvm.dbg.declare(metadata i8** %newlayerdata, metadata !867, metadata !DIExpression()), !dbg !868
  store i8* null, i8** %newlayerdata, align 8, !dbg !868
  %6 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !869
  %defaultname = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %6, i32 0, i32 3, !dbg !871
  %7 = load i8*, i8** %defaultname, align 8, !dbg !871
  %tobool = icmp ne i8* %7, null, !dbg !869
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !872

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !873
  %9 = load i32, i32* %type.addr, align 4, !dbg !874
  %call2 = call zeroext i8 @CustomData_has_layer(%struct.CustomData* %8, i32 %9), !dbg !875
  %conv = zext i8 %call2 to i32, !dbg !875
  %tobool3 = icmp ne i32 %conv, 0, !dbg !875
  br i1 %tobool3, label %if.then, label %if.end, !dbg !876

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !877
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !878
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !878
  %12 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !879
  %13 = load i32, i32* %type.addr, align 4, !dbg !880
  %call4 = call i32 @CustomData_get_layer_index(%struct.CustomData* %12, i32 %13), !dbg !881
  %idxprom = sext i32 %call4 to i64, !dbg !877
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom, !dbg !877
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %retval, align 8, !dbg !882
  br label %return, !dbg !882

if.end:                                           ; preds = %land.lhs.true, %entry
  %14 = load i32, i32* %alloctype.addr, align 4, !dbg !883
  %cmp = icmp eq i32 %14, 0, !dbg !885
  br i1 %cmp, label %if.then8, label %lor.lhs.false, !dbg !886

lor.lhs.false:                                    ; preds = %if.end
  %15 = load i32, i32* %alloctype.addr, align 4, !dbg !887
  %cmp6 = icmp eq i32 %15, 3, !dbg !888
  br i1 %cmp6, label %if.then8, label %if.else, !dbg !889

if.then8:                                         ; preds = %lor.lhs.false, %if.end
  %16 = load i8*, i8** %layerdata.addr, align 8, !dbg !890
  store i8* %16, i8** %newlayerdata, align 8, !dbg !892
  br label %if.end19, !dbg !893

if.else:                                          ; preds = %lor.lhs.false
  %17 = load i32, i32* %size, align 4, !dbg !894
  %cmp9 = icmp sgt i32 %17, 0, !dbg !896
  br i1 %cmp9, label %if.then11, label %if.end18, !dbg !897

if.then11:                                        ; preds = %if.else
  %18 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !898
  %19 = load i32, i32* %size, align 4, !dbg !900
  %conv12 = sext i32 %19 to i64, !dbg !900
  %20 = load i32, i32* %type.addr, align 4, !dbg !901
  %call13 = call i8* @layerType_getName(i32 %20), !dbg !902
  %call14 = call i8* %18(i64 %conv12, i8* %call13), !dbg !898
  store i8* %call14, i8** %newlayerdata, align 8, !dbg !903
  %21 = load i8*, i8** %newlayerdata, align 8, !dbg !904
  %tobool15 = icmp ne i8* %21, null, !dbg !904
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !906

if.then16:                                        ; preds = %if.then11
  store %struct.CustomDataLayer* null, %struct.CustomDataLayer** %retval, align 8, !dbg !907
  br label %return, !dbg !907

if.end17:                                         ; preds = %if.then11
  br label %if.end18, !dbg !908

if.end18:                                         ; preds = %if.end17, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then8
  %22 = load i32, i32* %alloctype.addr, align 4, !dbg !909
  %cmp20 = icmp eq i32 %22, 4, !dbg !911
  br i1 %cmp20, label %land.lhs.true22, label %if.else31, !dbg !912

land.lhs.true22:                                  ; preds = %if.end19
  %23 = load i8*, i8** %layerdata.addr, align 8, !dbg !913
  %tobool23 = icmp ne i8* %23, null, !dbg !913
  br i1 %tobool23, label %if.then24, label %if.else31, !dbg !914

if.then24:                                        ; preds = %land.lhs.true22
  %24 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !915
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %24, i32 0, i32 4, !dbg !918
  %25 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !918
  %tobool25 = icmp ne void (i8*, i8*, i32)* %25, null, !dbg !915
  br i1 %tobool25, label %if.then26, label %if.else28, !dbg !919

if.then26:                                        ; preds = %if.then24
  %26 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !920
  %copy27 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %26, i32 0, i32 4, !dbg !921
  %27 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy27, align 8, !dbg !921
  %28 = load i8*, i8** %layerdata.addr, align 8, !dbg !922
  %29 = load i8*, i8** %newlayerdata, align 8, !dbg !923
  %30 = load i32, i32* %totelem.addr, align 4, !dbg !924
  call void %27(i8* %28, i8* %29, i32 %30), !dbg !920
  br label %if.end30, !dbg !920

if.else28:                                        ; preds = %if.then24
  %31 = load i8*, i8** %newlayerdata, align 8, !dbg !925
  %32 = load i8*, i8** %layerdata.addr, align 8, !dbg !926
  %33 = load i32, i32* %size, align 4, !dbg !927
  %conv29 = sext i32 %33 to i64, !dbg !927
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %32, i64 %conv29, i1 false), !dbg !928
  br label %if.end30

if.end30:                                         ; preds = %if.else28, %if.then26
  br label %if.end45, !dbg !929

if.else31:                                        ; preds = %land.lhs.true22, %if.end19
  %34 = load i32, i32* %alloctype.addr, align 4, !dbg !930
  %cmp32 = icmp eq i32 %34, 2, !dbg !932
  br i1 %cmp32, label %if.then34, label %if.else39, !dbg !933

if.then34:                                        ; preds = %if.else31
  %35 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !934
  %set_default = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %35, i32 0, i32 8, !dbg !937
  %36 = load void (i8*, i32)*, void (i8*, i32)** %set_default, align 8, !dbg !937
  %tobool35 = icmp ne void (i8*, i32)* %36, null, !dbg !934
  br i1 %tobool35, label %if.then36, label %if.end38, !dbg !938

if.then36:                                        ; preds = %if.then34
  %37 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !939
  %set_default37 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %37, i32 0, i32 8, !dbg !940
  %38 = load void (i8*, i32)*, void (i8*, i32)** %set_default37, align 8, !dbg !940
  %39 = load i8*, i8** %newlayerdata, align 8, !dbg !941
  %40 = load i32, i32* %totelem.addr, align 4, !dbg !942
  call void %38(i8* %39, i32 %40), !dbg !939
  br label %if.end38, !dbg !939

if.end38:                                         ; preds = %if.then36, %if.then34
  br label %if.end44, !dbg !943

if.else39:                                        ; preds = %if.else31
  %41 = load i32, i32* %alloctype.addr, align 4, !dbg !944
  %cmp40 = icmp eq i32 %41, 3, !dbg !946
  br i1 %cmp40, label %if.then42, label %if.end43, !dbg !947

if.then42:                                        ; preds = %if.else39
  %42 = load i32, i32* %flag, align 4, !dbg !948
  %or = or i32 %42, 2, !dbg !948
  store i32 %or, i32* %flag, align 4, !dbg !948
  br label %if.end43, !dbg !949

if.end43:                                         ; preds = %if.then42, %if.else39
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end38
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end30
  %43 = load i32, i32* %index, align 4, !dbg !950
  %44 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !952
  %maxlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %44, i32 0, i32 3, !dbg !953
  %45 = load i32, i32* %maxlayer, align 8, !dbg !953
  %cmp46 = icmp sge i32 %43, %45, !dbg !954
  br i1 %cmp46, label %if.then48, label %if.end57, !dbg !955

if.then48:                                        ; preds = %if.end45
  %46 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !956
  %call49 = call i32 @customData_resize(%struct.CustomData* %46, i32 5), !dbg !959
  %tobool50 = icmp ne i32 %call49, 0, !dbg !959
  br i1 %tobool50, label %if.end56, label %if.then51, !dbg !960

if.then51:                                        ; preds = %if.then48
  %47 = load i8*, i8** %newlayerdata, align 8, !dbg !961
  %48 = load i8*, i8** %layerdata.addr, align 8, !dbg !964
  %cmp52 = icmp ne i8* %47, %48, !dbg !965
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !966

if.then54:                                        ; preds = %if.then51
  %49 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !967
  %50 = load i8*, i8** %newlayerdata, align 8, !dbg !968
  call void %49(i8* %50), !dbg !967
  br label %if.end55, !dbg !967

if.end55:                                         ; preds = %if.then54, %if.then51
  store %struct.CustomDataLayer* null, %struct.CustomDataLayer** %retval, align 8, !dbg !969
  br label %return, !dbg !969

if.end56:                                         ; preds = %if.then48
  br label %if.end57, !dbg !970

if.end57:                                         ; preds = %if.end56, %if.end45
  %51 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !971
  %totlayer58 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %51, i32 0, i32 2, !dbg !972
  %52 = load i32, i32* %totlayer58, align 4, !dbg !973
  %inc = add nsw i32 %52, 1, !dbg !973
  store i32 %inc, i32* %totlayer58, align 4, !dbg !973
  br label %for.cond, !dbg !974

for.cond:                                         ; preds = %for.inc, %if.end57
  %53 = load i32, i32* %index, align 4, !dbg !975
  %cmp59 = icmp sgt i32 %53, 0, !dbg !978
  br i1 %cmp59, label %land.rhs, label %land.end, !dbg !979

land.rhs:                                         ; preds = %for.cond
  %54 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !980
  %layers61 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %54, i32 0, i32 0, !dbg !981
  %55 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers61, align 8, !dbg !981
  %56 = load i32, i32* %index, align 4, !dbg !982
  %sub = sub nsw i32 %56, 1, !dbg !983
  %idxprom62 = sext i32 %sub to i64, !dbg !980
  %arrayidx63 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %55, i64 %idxprom62, !dbg !980
  %type64 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx63, i32 0, i32 0, !dbg !984
  %57 = load i32, i32* %type64, align 8, !dbg !984
  %58 = load i32, i32* %type.addr, align 4, !dbg !985
  %cmp65 = icmp sgt i32 %57, %58, !dbg !986
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %59 = phi i1 [ false, %for.cond ], [ %cmp65, %land.rhs ], !dbg !987
  br i1 %59, label %for.body, label %for.end, !dbg !988

for.body:                                         ; preds = %land.end
  %60 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !989
  %layers67 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %60, i32 0, i32 0, !dbg !990
  %61 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers67, align 8, !dbg !990
  %62 = load i32, i32* %index, align 4, !dbg !991
  %idxprom68 = sext i32 %62 to i64, !dbg !989
  %arrayidx69 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %61, i64 %idxprom68, !dbg !989
  %63 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !992
  %layers70 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %63, i32 0, i32 0, !dbg !993
  %64 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers70, align 8, !dbg !993
  %65 = load i32, i32* %index, align 4, !dbg !994
  %sub71 = sub nsw i32 %65, 1, !dbg !995
  %idxprom72 = sext i32 %sub71 to i64, !dbg !992
  %arrayidx73 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %64, i64 %idxprom72, !dbg !992
  %66 = bitcast %struct.CustomDataLayer* %arrayidx69 to i8*, !dbg !992
  %67 = bitcast %struct.CustomDataLayer* %arrayidx73 to i8*, !dbg !992
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 104, i1 false), !dbg !992
  br label %for.inc, !dbg !989

for.inc:                                          ; preds = %for.body
  %68 = load i32, i32* %index, align 4, !dbg !996
  %dec = add nsw i32 %68, -1, !dbg !996
  store i32 %dec, i32* %index, align 4, !dbg !996
  br label %for.cond, !dbg !997, !llvm.loop !998

for.end:                                          ; preds = %land.end
  %69 = load i32, i32* %type.addr, align 4, !dbg !1000
  %70 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1001
  %layers74 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %70, i32 0, i32 0, !dbg !1002
  %71 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers74, align 8, !dbg !1002
  %72 = load i32, i32* %index, align 4, !dbg !1003
  %idxprom75 = sext i32 %72 to i64, !dbg !1001
  %arrayidx76 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %71, i64 %idxprom75, !dbg !1001
  %type77 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx76, i32 0, i32 0, !dbg !1004
  store i32 %69, i32* %type77, align 8, !dbg !1005
  %73 = load i32, i32* %flag, align 4, !dbg !1006
  %74 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1007
  %layers78 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %74, i32 0, i32 0, !dbg !1008
  %75 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers78, align 8, !dbg !1008
  %76 = load i32, i32* %index, align 4, !dbg !1009
  %idxprom79 = sext i32 %76 to i64, !dbg !1007
  %arrayidx80 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %75, i64 %idxprom79, !dbg !1007
  %flag81 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx80, i32 0, i32 2, !dbg !1010
  store i32 %73, i32* %flag81, align 8, !dbg !1011
  %77 = load i8*, i8** %newlayerdata, align 8, !dbg !1012
  %78 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1013
  %layers82 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %78, i32 0, i32 0, !dbg !1014
  %79 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers82, align 8, !dbg !1014
  %80 = load i32, i32* %index, align 4, !dbg !1015
  %idxprom83 = sext i32 %80 to i64, !dbg !1013
  %arrayidx84 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %79, i64 %idxprom83, !dbg !1013
  %data85 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx84, i32 0, i32 9, !dbg !1016
  store i8* %77, i8** %data85, align 8, !dbg !1017
  %81 = load i8*, i8** %name.addr, align 8, !dbg !1018
  %tobool86 = icmp ne i8* %81, null, !dbg !1018
  br i1 %tobool86, label %if.then90, label %lor.lhs.false87, !dbg !1020

lor.lhs.false87:                                  ; preds = %for.end
  %82 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !1021
  %defaultname88 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %82, i32 0, i32 3, !dbg !1021
  %83 = load i8*, i8** %defaultname88, align 8, !dbg !1021
  store i8* %83, i8** %name.addr, align 8, !dbg !1022
  %tobool89 = icmp ne i8* %83, null, !dbg !1022
  br i1 %tobool89, label %if.then90, label %if.else96, !dbg !1023

if.then90:                                        ; preds = %lor.lhs.false87, %for.end
  %84 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1024
  %layers91 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %84, i32 0, i32 0, !dbg !1026
  %85 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers91, align 8, !dbg !1026
  %86 = load i32, i32* %index, align 4, !dbg !1027
  %idxprom92 = sext i32 %86 to i64, !dbg !1024
  %arrayidx93 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %85, i64 %idxprom92, !dbg !1024
  %name94 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx93, i32 0, i32 8, !dbg !1028
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name94, i64 0, i64 0, !dbg !1024
  %87 = load i8*, i8** %name.addr, align 8, !dbg !1029
  %call95 = call i8* @BLI_strncpy(i8* %arraydecay, i8* %87, i64 64), !dbg !1030
  %88 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1031
  %89 = load i32, i32* %index, align 4, !dbg !1032
  call void @CustomData_set_layer_unique_name(%struct.CustomData* %88, i32 %89), !dbg !1033
  br label %if.end102, !dbg !1034

if.else96:                                        ; preds = %lor.lhs.false87
  %90 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1035
  %layers97 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %90, i32 0, i32 0, !dbg !1036
  %91 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers97, align 8, !dbg !1036
  %92 = load i32, i32* %index, align 4, !dbg !1037
  %idxprom98 = sext i32 %92 to i64, !dbg !1035
  %arrayidx99 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %91, i64 %idxprom98, !dbg !1035
  %name100 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx99, i32 0, i32 8, !dbg !1038
  %arrayidx101 = getelementptr inbounds [64 x i8], [64 x i8]* %name100, i64 0, i64 0, !dbg !1035
  store i8 0, i8* %arrayidx101, align 8, !dbg !1039
  br label %if.end102

if.end102:                                        ; preds = %if.else96, %if.then90
  %93 = load i32, i32* %index, align 4, !dbg !1040
  %cmp103 = icmp sgt i32 %93, 0, !dbg !1042
  br i1 %cmp103, label %land.lhs.true105, label %if.else146, !dbg !1043

land.lhs.true105:                                 ; preds = %if.end102
  %94 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1044
  %layers106 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %94, i32 0, i32 0, !dbg !1045
  %95 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers106, align 8, !dbg !1045
  %96 = load i32, i32* %index, align 4, !dbg !1046
  %sub107 = sub nsw i32 %96, 1, !dbg !1047
  %idxprom108 = sext i32 %sub107 to i64, !dbg !1044
  %arrayidx109 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %95, i64 %idxprom108, !dbg !1044
  %type110 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx109, i32 0, i32 0, !dbg !1048
  %97 = load i32, i32* %type110, align 8, !dbg !1048
  %98 = load i32, i32* %type.addr, align 4, !dbg !1049
  %cmp111 = icmp eq i32 %97, %98, !dbg !1050
  br i1 %cmp111, label %if.then113, label %if.else146, !dbg !1051

if.then113:                                       ; preds = %land.lhs.true105
  %99 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1052
  %layers114 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %99, i32 0, i32 0, !dbg !1054
  %100 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers114, align 8, !dbg !1054
  %101 = load i32, i32* %index, align 4, !dbg !1055
  %sub115 = sub nsw i32 %101, 1, !dbg !1056
  %idxprom116 = sext i32 %sub115 to i64, !dbg !1052
  %arrayidx117 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %100, i64 %idxprom116, !dbg !1052
  %active = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx117, i32 0, i32 3, !dbg !1057
  %102 = load i32, i32* %active, align 4, !dbg !1057
  %103 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1058
  %layers118 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %103, i32 0, i32 0, !dbg !1059
  %104 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers118, align 8, !dbg !1059
  %105 = load i32, i32* %index, align 4, !dbg !1060
  %idxprom119 = sext i32 %105 to i64, !dbg !1058
  %arrayidx120 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %104, i64 %idxprom119, !dbg !1058
  %active121 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx120, i32 0, i32 3, !dbg !1061
  store i32 %102, i32* %active121, align 4, !dbg !1062
  %106 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1063
  %layers122 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %106, i32 0, i32 0, !dbg !1064
  %107 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers122, align 8, !dbg !1064
  %108 = load i32, i32* %index, align 4, !dbg !1065
  %sub123 = sub nsw i32 %108, 1, !dbg !1066
  %idxprom124 = sext i32 %sub123 to i64, !dbg !1063
  %arrayidx125 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %107, i64 %idxprom124, !dbg !1063
  %active_rnd = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx125, i32 0, i32 4, !dbg !1067
  %109 = load i32, i32* %active_rnd, align 8, !dbg !1067
  %110 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1068
  %layers126 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %110, i32 0, i32 0, !dbg !1069
  %111 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers126, align 8, !dbg !1069
  %112 = load i32, i32* %index, align 4, !dbg !1070
  %idxprom127 = sext i32 %112 to i64, !dbg !1068
  %arrayidx128 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %111, i64 %idxprom127, !dbg !1068
  %active_rnd129 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx128, i32 0, i32 4, !dbg !1071
  store i32 %109, i32* %active_rnd129, align 8, !dbg !1072
  %113 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1073
  %layers130 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %113, i32 0, i32 0, !dbg !1074
  %114 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers130, align 8, !dbg !1074
  %115 = load i32, i32* %index, align 4, !dbg !1075
  %sub131 = sub nsw i32 %115, 1, !dbg !1076
  %idxprom132 = sext i32 %sub131 to i64, !dbg !1073
  %arrayidx133 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %114, i64 %idxprom132, !dbg !1073
  %active_clone = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx133, i32 0, i32 5, !dbg !1077
  %116 = load i32, i32* %active_clone, align 4, !dbg !1077
  %117 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1078
  %layers134 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %117, i32 0, i32 0, !dbg !1079
  %118 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers134, align 8, !dbg !1079
  %119 = load i32, i32* %index, align 4, !dbg !1080
  %idxprom135 = sext i32 %119 to i64, !dbg !1078
  %arrayidx136 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %118, i64 %idxprom135, !dbg !1078
  %active_clone137 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx136, i32 0, i32 5, !dbg !1081
  store i32 %116, i32* %active_clone137, align 4, !dbg !1082
  %120 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1083
  %layers138 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %120, i32 0, i32 0, !dbg !1084
  %121 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers138, align 8, !dbg !1084
  %122 = load i32, i32* %index, align 4, !dbg !1085
  %sub139 = sub nsw i32 %122, 1, !dbg !1086
  %idxprom140 = sext i32 %sub139 to i64, !dbg !1083
  %arrayidx141 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %121, i64 %idxprom140, !dbg !1083
  %active_mask = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx141, i32 0, i32 6, !dbg !1087
  %123 = load i32, i32* %active_mask, align 8, !dbg !1087
  %124 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1088
  %layers142 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %124, i32 0, i32 0, !dbg !1089
  %125 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers142, align 8, !dbg !1089
  %126 = load i32, i32* %index, align 4, !dbg !1090
  %idxprom143 = sext i32 %126 to i64, !dbg !1088
  %arrayidx144 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %125, i64 %idxprom143, !dbg !1088
  %active_mask145 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx144, i32 0, i32 6, !dbg !1091
  store i32 %123, i32* %active_mask145, align 8, !dbg !1092
  br label %if.end163, !dbg !1093

if.else146:                                       ; preds = %land.lhs.true105, %if.end102
  %127 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1094
  %layers147 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %127, i32 0, i32 0, !dbg !1096
  %128 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers147, align 8, !dbg !1096
  %129 = load i32, i32* %index, align 4, !dbg !1097
  %idxprom148 = sext i32 %129 to i64, !dbg !1094
  %arrayidx149 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %128, i64 %idxprom148, !dbg !1094
  %active150 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx149, i32 0, i32 3, !dbg !1098
  store i32 0, i32* %active150, align 4, !dbg !1099
  %130 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1100
  %layers151 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %130, i32 0, i32 0, !dbg !1101
  %131 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers151, align 8, !dbg !1101
  %132 = load i32, i32* %index, align 4, !dbg !1102
  %idxprom152 = sext i32 %132 to i64, !dbg !1100
  %arrayidx153 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %131, i64 %idxprom152, !dbg !1100
  %active_rnd154 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx153, i32 0, i32 4, !dbg !1103
  store i32 0, i32* %active_rnd154, align 8, !dbg !1104
  %133 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1105
  %layers155 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %133, i32 0, i32 0, !dbg !1106
  %134 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers155, align 8, !dbg !1106
  %135 = load i32, i32* %index, align 4, !dbg !1107
  %idxprom156 = sext i32 %135 to i64, !dbg !1105
  %arrayidx157 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %134, i64 %idxprom156, !dbg !1105
  %active_clone158 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx157, i32 0, i32 5, !dbg !1108
  store i32 0, i32* %active_clone158, align 4, !dbg !1109
  %136 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1110
  %layers159 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %136, i32 0, i32 0, !dbg !1111
  %137 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers159, align 8, !dbg !1111
  %138 = load i32, i32* %index, align 4, !dbg !1112
  %idxprom160 = sext i32 %138 to i64, !dbg !1110
  %arrayidx161 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %137, i64 %idxprom160, !dbg !1110
  %active_mask162 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx161, i32 0, i32 6, !dbg !1113
  store i32 0, i32* %active_mask162, align 8, !dbg !1114
  br label %if.end163

if.end163:                                        ; preds = %if.else146, %if.then113
  %139 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1115
  call void @customData_update_offsets(%struct.CustomData* %139), !dbg !1116
  %140 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1117
  %layers164 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %140, i32 0, i32 0, !dbg !1118
  %141 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers164, align 8, !dbg !1118
  %142 = load i32, i32* %index, align 4, !dbg !1119
  %idxprom165 = sext i32 %142 to i64, !dbg !1117
  %arrayidx166 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %141, i64 %idxprom165, !dbg !1117
  store %struct.CustomDataLayer* %arrayidx166, %struct.CustomDataLayer** %retval, align 8, !dbg !1120
  br label %return, !dbg !1120

return:                                           ; preds = %if.end163, %if.end55, %if.then16, %if.then
  %143 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %retval, align 8, !dbg !1121
  ret %struct.CustomDataLayer* %143, !dbg !1121
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_copy(%struct.CustomData* %source, %struct.CustomData* %dest, i64 %mask, i32 %alloctype, i32 %totelem) #0 !dbg !1122 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %mask.addr = alloca i64, align 8
  %alloctype.addr = alloca i32, align 4
  %totelem.addr = alloca i32, align 4
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !1125, metadata !DIExpression()), !dbg !1126
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !1127, metadata !DIExpression()), !dbg !1128
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !1129, metadata !DIExpression()), !dbg !1130
  store i32 %alloctype, i32* %alloctype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloctype.addr, metadata !1131, metadata !DIExpression()), !dbg !1132
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !1133, metadata !DIExpression()), !dbg !1134
  %0 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !1135
  call void @CustomData_reset(%struct.CustomData* %0), !dbg !1136
  %1 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !1137
  %external = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 6, !dbg !1139
  %2 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !1139
  %tobool = icmp ne %struct.CustomDataExternal* %2, null, !dbg !1137
  br i1 %tobool, label %if.then, label %if.end, !dbg !1140

if.then:                                          ; preds = %entry
  %3 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !1141
  %4 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !1142
  %external1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 6, !dbg !1143
  %5 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external1, align 8, !dbg !1143
  %6 = bitcast %struct.CustomDataExternal* %5 to i8*, !dbg !1142
  %call = call i8* %3(i8* %6), !dbg !1141
  %7 = bitcast i8* %call to %struct.CustomDataExternal*, !dbg !1141
  %8 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !1144
  %external2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 6, !dbg !1145
  store %struct.CustomDataExternal* %7, %struct.CustomDataExternal** %external2, align 8, !dbg !1146
  br label %if.end, !dbg !1144

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !1147
  %10 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !1148
  %11 = load i64, i64* %mask.addr, align 8, !dbg !1149
  %12 = load i32, i32* %alloctype.addr, align 4, !dbg !1150
  %13 = load i32, i32* %totelem.addr, align 4, !dbg !1151
  %call3 = call zeroext i8 @CustomData_merge(%struct.CustomData* %9, %struct.CustomData* %10, i64 %11, i32 %12, i32 %13), !dbg !1152
  ret void, !dbg !1153
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_reset(%struct.CustomData* %data) #0 !dbg !1154 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1155, metadata !DIExpression()), !dbg !1156
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1157
  %1 = bitcast %struct.CustomData* %0 to i8*, !dbg !1158
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 200, i1 false), !dbg !1158
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1159
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %2, i32 0, i32 1, !dbg !1160
  %arraydecay = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 0, !dbg !1159
  call void @fill_vn_i(i32* %arraydecay, i32 41, i32 -1), !dbg !1161
  ret void, !dbg !1162
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local void @fill_vn_i(i32*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_free(%struct.CustomData* %data, i32 %totelem) #0 !dbg !1163 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %totelem.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1166, metadata !DIExpression()), !dbg !1167
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !1168, metadata !DIExpression()), !dbg !1169
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1170, metadata !DIExpression()), !dbg !1171
  store i32 0, i32* %i, align 4, !dbg !1172
  br label %for.cond, !dbg !1174

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1175
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1177
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1178
  %2 = load i32, i32* %totlayer, align 4, !dbg !1178
  %cmp = icmp slt i32 %0, %2, !dbg !1179
  br i1 %cmp, label %for.body, label %for.end, !dbg !1180

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1181
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1182
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1182
  %5 = load i32, i32* %i, align 4, !dbg !1183
  %idxprom = sext i32 %5 to i64, !dbg !1181
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1181
  %6 = load i32, i32* %totelem.addr, align 4, !dbg !1184
  call void @customData_free_layer__internal(%struct.CustomDataLayer* %arrayidx, i32 %6), !dbg !1185
  br label %for.inc, !dbg !1185

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !1186
  %inc = add nsw i32 %7, 1, !dbg !1186
  store i32 %inc, i32* %i, align 4, !dbg !1186
  br label %for.cond, !dbg !1187, !llvm.loop !1188

for.end:                                          ; preds = %for.cond
  %8 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1190
  %layers1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 0, !dbg !1192
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers1, align 8, !dbg !1192
  %tobool = icmp ne %struct.CustomDataLayer* %9, null, !dbg !1190
  br i1 %tobool, label %if.then, label %if.end, !dbg !1193

if.then:                                          ; preds = %for.end
  %10 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1194
  %11 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1195
  %layers2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %11, i32 0, i32 0, !dbg !1196
  %12 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers2, align 8, !dbg !1196
  %13 = bitcast %struct.CustomDataLayer* %12 to i8*, !dbg !1195
  call void %10(i8* %13), !dbg !1194
  br label %if.end, !dbg !1194

if.end:                                           ; preds = %if.then, %for.end
  %14 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1197
  call void @CustomData_external_free(%struct.CustomData* %14), !dbg !1198
  %15 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1199
  call void @CustomData_reset(%struct.CustomData* %15), !dbg !1200
  ret void, !dbg !1201
}

; Function Attrs: noinline nounwind uwtable
define internal void @customData_free_layer__internal(%struct.CustomDataLayer* %layer, i32 %totelem) #0 !dbg !1202 {
entry:
  %layer.addr = alloca %struct.CustomDataLayer*, align 8
  %totelem.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomDataLayer* %layer, %struct.CustomDataLayer** %layer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer.addr, metadata !1205, metadata !DIExpression()), !dbg !1206
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !1207, metadata !DIExpression()), !dbg !1208
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !1209, metadata !DIExpression()), !dbg !1210
  %0 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer.addr, align 8, !dbg !1211
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %0, i32 0, i32 2, !dbg !1213
  %1 = load i32, i32* %flag, align 8, !dbg !1213
  %and = and i32 %1, 2, !dbg !1214
  %tobool = icmp ne i32 %and, 0, !dbg !1214
  br i1 %tobool, label %if.end11, label %land.lhs.true, !dbg !1215

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer.addr, align 8, !dbg !1216
  %data = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %2, i32 0, i32 9, !dbg !1217
  %3 = load i8*, i8** %data, align 8, !dbg !1217
  %tobool1 = icmp ne i8* %3, null, !dbg !1216
  br i1 %tobool1, label %if.then, label %if.end11, !dbg !1218

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer.addr, align 8, !dbg !1219
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i32 0, i32 0, !dbg !1221
  %5 = load i32, i32* %type, align 8, !dbg !1221
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %5), !dbg !1222
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !1223
  %6 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !1224
  %free = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %6, i32 0, i32 5, !dbg !1226
  %7 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free, align 8, !dbg !1226
  %tobool2 = icmp ne void (i8*, i32, i32)* %7, null, !dbg !1224
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !1227

if.then3:                                         ; preds = %if.then
  %8 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !1228
  %free4 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %8, i32 0, i32 5, !dbg !1229
  %9 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free4, align 8, !dbg !1229
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer.addr, align 8, !dbg !1230
  %data5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i32 0, i32 9, !dbg !1231
  %11 = load i8*, i8** %data5, align 8, !dbg !1231
  %12 = load i32, i32* %totelem.addr, align 4, !dbg !1232
  %13 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !1233
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %13, i32 0, i32 0, !dbg !1234
  %14 = load i32, i32* %size, align 8, !dbg !1234
  call void %9(i8* %11, i32 %12, i32 %14), !dbg !1228
  br label %if.end, !dbg !1228

if.end:                                           ; preds = %if.then3, %if.then
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer.addr, align 8, !dbg !1235
  %data6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i32 0, i32 9, !dbg !1237
  %16 = load i8*, i8** %data6, align 8, !dbg !1237
  %tobool7 = icmp ne i8* %16, null, !dbg !1235
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !1238

if.then8:                                         ; preds = %if.end
  %17 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1239
  %18 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer.addr, align 8, !dbg !1240
  %data9 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %18, i32 0, i32 9, !dbg !1241
  %19 = load i8*, i8** %data9, align 8, !dbg !1241
  call void %17(i8* %19), !dbg !1239
  br label %if.end10, !dbg !1239

if.end10:                                         ; preds = %if.then8, %if.end
  br label %if.end11, !dbg !1242

if.end11:                                         ; preds = %if.end10, %land.lhs.true, %entry
  ret void, !dbg !1243
}

; Function Attrs: noinline nounwind uwtable
define internal void @CustomData_external_free(%struct.CustomData* %data) #0 !dbg !1244 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1245, metadata !DIExpression()), !dbg !1246
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1247
  %external = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 6, !dbg !1249
  %1 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !1249
  %tobool = icmp ne %struct.CustomDataExternal* %1, null, !dbg !1247
  br i1 %tobool, label %if.then, label %if.end, !dbg !1250

if.then:                                          ; preds = %entry
  %2 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1251
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1253
  %external1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 6, !dbg !1254
  %4 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external1, align 8, !dbg !1254
  %5 = bitcast %struct.CustomDataExternal* %4 to i8*, !dbg !1253
  call void %2(i8* %5), !dbg !1251
  %6 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1255
  %external2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %6, i32 0, i32 6, !dbg !1256
  store %struct.CustomDataExternal* null, %struct.CustomDataExternal** %external2, align 8, !dbg !1257
  br label %if.end, !dbg !1258

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !1259
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_layer_index(%struct.CustomData* %data, i32 %type) #0 !dbg !1260 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1265, metadata !DIExpression()), !dbg !1266
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1267, metadata !DIExpression()), !dbg !1268
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1269
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1270
  %1 = load i32, i32* %type.addr, align 4, !dbg !1271
  %idxprom = sext i32 %1 to i64, !dbg !1269
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1269
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1269
  ret i32 %2, !dbg !1272
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_layer_index_n(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1273 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1276, metadata !DIExpression()), !dbg !1277
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1278, metadata !DIExpression()), !dbg !1279
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1280, metadata !DIExpression()), !dbg !1281
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1282, metadata !DIExpression()), !dbg !1283
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1284
  %1 = load i32, i32* %type.addr, align 4, !dbg !1285
  %call = call i32 @CustomData_get_layer_index(%struct.CustomData* %0, i32 %1), !dbg !1286
  store i32 %call, i32* %i, align 4, !dbg !1283
  %2 = load i32, i32* %i, align 4, !dbg !1287
  %cmp = icmp ne i32 %2, -1, !dbg !1289
  br i1 %cmp, label %if.then, label %if.end, !dbg !1290

if.then:                                          ; preds = %entry
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1291
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1293
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1293
  %5 = load i32, i32* %i, align 4, !dbg !1294
  %6 = load i32, i32* %n.addr, align 4, !dbg !1295
  %add = add nsw i32 %5, %6, !dbg !1296
  %idxprom = sext i32 %add to i64, !dbg !1291
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1291
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1297
  %7 = load i32, i32* %type1, align 8, !dbg !1297
  %8 = load i32, i32* %type.addr, align 4, !dbg !1298
  %cmp2 = icmp eq i32 %7, %8, !dbg !1299
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !1300

cond.true:                                        ; preds = %if.then
  %9 = load i32, i32* %i, align 4, !dbg !1301
  %10 = load i32, i32* %n.addr, align 4, !dbg !1302
  %add3 = add nsw i32 %9, %10, !dbg !1303
  br label %cond.end, !dbg !1300

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !1300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add3, %cond.true ], [ -1, %cond.false ], !dbg !1300
  store i32 %cond, i32* %i, align 4, !dbg !1304
  br label %if.end, !dbg !1305

if.end:                                           ; preds = %cond.end, %entry
  %11 = load i32, i32* %i, align 4, !dbg !1306
  ret i32 %11, !dbg !1307
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_named_layer_index(%struct.CustomData* %data, i32 %type, i8* %name) #0 !dbg !1308 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1311, metadata !DIExpression()), !dbg !1312
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1313, metadata !DIExpression()), !dbg !1314
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1315, metadata !DIExpression()), !dbg !1316
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1317, metadata !DIExpression()), !dbg !1318
  store i32 0, i32* %i, align 4, !dbg !1319
  br label %for.cond, !dbg !1321

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1322
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1324
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1325
  %2 = load i32, i32* %totlayer, align 4, !dbg !1325
  %cmp = icmp slt i32 %0, %2, !dbg !1326
  br i1 %cmp, label %for.body, label %for.end, !dbg !1327

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1328
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1330
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1330
  %5 = load i32, i32* %i, align 4, !dbg !1331
  %idxprom = sext i32 %5 to i64, !dbg !1328
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1328
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1332
  %6 = load i32, i32* %type1, align 8, !dbg !1332
  %7 = load i32, i32* %type.addr, align 4, !dbg !1333
  %cmp2 = icmp eq i32 %6, %7, !dbg !1334
  br i1 %cmp2, label %if.then, label %if.end9, !dbg !1335

if.then:                                          ; preds = %for.body
  %8 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1336
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 0, !dbg !1338
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1338
  %10 = load i32, i32* %i, align 4, !dbg !1339
  %idxprom4 = sext i32 %10 to i64, !dbg !1336
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i64 %idxprom4, !dbg !1336
  %name6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 8, !dbg !1340
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name6, i64 0, i64 0, !dbg !1336
  %11 = load i8*, i8** %name.addr, align 8, !dbg !1341
  %call = call i32 @strcmp(i8* %arraydecay, i8* %11) #5, !dbg !1342
  %cmp7 = icmp eq i32 %call, 0, !dbg !1343
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !1344

if.then8:                                         ; preds = %if.then
  %12 = load i32, i32* %i, align 4, !dbg !1345
  store i32 %12, i32* %retval, align 4, !dbg !1346
  br label %return, !dbg !1346

if.end:                                           ; preds = %if.then
  br label %if.end9, !dbg !1347

if.end9:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !1333

for.inc:                                          ; preds = %if.end9
  %13 = load i32, i32* %i, align 4, !dbg !1348
  %inc = add nsw i32 %13, 1, !dbg !1348
  store i32 %inc, i32* %i, align 4, !dbg !1348
  br label %for.cond, !dbg !1349, !llvm.loop !1350

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval, align 4, !dbg !1352
  br label %return, !dbg !1352

return:                                           ; preds = %for.end, %if.then8
  %14 = load i32, i32* %retval, align 4, !dbg !1353
  ret i32 %14, !dbg !1353
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_active_layer_index(%struct.CustomData* %data, i32 %type) #0 !dbg !1354 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1355, metadata !DIExpression()), !dbg !1356
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1357, metadata !DIExpression()), !dbg !1358
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1359, metadata !DIExpression()), !dbg !1360
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1361
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1362
  %1 = load i32, i32* %type.addr, align 4, !dbg !1363
  %idxprom = sext i32 %1 to i64, !dbg !1361
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1361
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1361
  store i32 %2, i32* %layer_index, align 4, !dbg !1360
  %3 = load i32, i32* %layer_index, align 4, !dbg !1364
  %cmp = icmp ne i32 %3, -1, !dbg !1365
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1366

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %layer_index, align 4, !dbg !1367
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1368
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !1369
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1369
  %7 = load i32, i32* %layer_index, align 4, !dbg !1370
  %idxprom1 = sext i32 %7 to i64, !dbg !1368
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom1, !dbg !1368
  %active = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 3, !dbg !1371
  %8 = load i32, i32* %active, align 4, !dbg !1371
  %add = add nsw i32 %4, %8, !dbg !1372
  br label %cond.end, !dbg !1366

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1366

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ -1, %cond.false ], !dbg !1366
  ret i32 %cond, !dbg !1373
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_render_layer_index(%struct.CustomData* %data, i32 %type) #0 !dbg !1374 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1375, metadata !DIExpression()), !dbg !1376
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1377, metadata !DIExpression()), !dbg !1378
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1379, metadata !DIExpression()), !dbg !1380
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1381
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1382
  %1 = load i32, i32* %type.addr, align 4, !dbg !1383
  %idxprom = sext i32 %1 to i64, !dbg !1381
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1381
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1381
  store i32 %2, i32* %layer_index, align 4, !dbg !1380
  %3 = load i32, i32* %layer_index, align 4, !dbg !1384
  %cmp = icmp ne i32 %3, -1, !dbg !1385
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1386

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %layer_index, align 4, !dbg !1387
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1388
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !1389
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1389
  %7 = load i32, i32* %layer_index, align 4, !dbg !1390
  %idxprom1 = sext i32 %7 to i64, !dbg !1388
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom1, !dbg !1388
  %active_rnd = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 4, !dbg !1391
  %8 = load i32, i32* %active_rnd, align 8, !dbg !1391
  %add = add nsw i32 %4, %8, !dbg !1392
  br label %cond.end, !dbg !1386

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1386

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ -1, %cond.false ], !dbg !1386
  ret i32 %cond, !dbg !1393
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_clone_layer_index(%struct.CustomData* %data, i32 %type) #0 !dbg !1394 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1395, metadata !DIExpression()), !dbg !1396
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1397, metadata !DIExpression()), !dbg !1398
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1399, metadata !DIExpression()), !dbg !1400
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1401
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1402
  %1 = load i32, i32* %type.addr, align 4, !dbg !1403
  %idxprom = sext i32 %1 to i64, !dbg !1401
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1401
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1401
  store i32 %2, i32* %layer_index, align 4, !dbg !1400
  %3 = load i32, i32* %layer_index, align 4, !dbg !1404
  %cmp = icmp ne i32 %3, -1, !dbg !1405
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1406

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %layer_index, align 4, !dbg !1407
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1408
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !1409
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1409
  %7 = load i32, i32* %layer_index, align 4, !dbg !1410
  %idxprom1 = sext i32 %7 to i64, !dbg !1408
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom1, !dbg !1408
  %active_clone = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 5, !dbg !1411
  %8 = load i32, i32* %active_clone, align 4, !dbg !1411
  %add = add nsw i32 %4, %8, !dbg !1412
  br label %cond.end, !dbg !1406

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1406

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ -1, %cond.false ], !dbg !1406
  ret i32 %cond, !dbg !1413
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_stencil_layer_index(%struct.CustomData* %data, i32 %type) #0 !dbg !1414 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1415, metadata !DIExpression()), !dbg !1416
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1417, metadata !DIExpression()), !dbg !1418
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1419, metadata !DIExpression()), !dbg !1420
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1421
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1422
  %1 = load i32, i32* %type.addr, align 4, !dbg !1423
  %idxprom = sext i32 %1 to i64, !dbg !1421
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1421
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1421
  store i32 %2, i32* %layer_index, align 4, !dbg !1420
  %3 = load i32, i32* %layer_index, align 4, !dbg !1424
  %cmp = icmp ne i32 %3, -1, !dbg !1425
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1426

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %layer_index, align 4, !dbg !1427
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1428
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !1429
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1429
  %7 = load i32, i32* %layer_index, align 4, !dbg !1430
  %idxprom1 = sext i32 %7 to i64, !dbg !1428
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom1, !dbg !1428
  %active_mask = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 6, !dbg !1431
  %8 = load i32, i32* %active_mask, align 8, !dbg !1431
  %add = add nsw i32 %4, %8, !dbg !1432
  br label %cond.end, !dbg !1426

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1426

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ -1, %cond.false ], !dbg !1426
  ret i32 %cond, !dbg !1433
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_named_layer(%struct.CustomData* %data, i32 %type, i8* %name) #0 !dbg !1434 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %named_index = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1437, metadata !DIExpression()), !dbg !1438
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1439, metadata !DIExpression()), !dbg !1440
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1441, metadata !DIExpression()), !dbg !1442
  call void @llvm.dbg.declare(metadata i32* %named_index, metadata !1443, metadata !DIExpression()), !dbg !1444
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1445
  %1 = load i32, i32* %type.addr, align 4, !dbg !1446
  %2 = load i8*, i8** %name.addr, align 8, !dbg !1447
  %call = call i32 @CustomData_get_named_layer_index(%struct.CustomData* %0, i32 %1, i8* %2), !dbg !1448
  store i32 %call, i32* %named_index, align 4, !dbg !1444
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1449, metadata !DIExpression()), !dbg !1450
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1451
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 1, !dbg !1452
  %4 = load i32, i32* %type.addr, align 4, !dbg !1453
  %idxprom = sext i32 %4 to i64, !dbg !1451
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1451
  %5 = load i32, i32* %arrayidx, align 4, !dbg !1451
  store i32 %5, i32* %layer_index, align 4, !dbg !1450
  %6 = load i32, i32* %named_index, align 4, !dbg !1454
  %cmp = icmp ne i32 %6, -1, !dbg !1455
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1456

cond.true:                                        ; preds = %entry
  %7 = load i32, i32* %named_index, align 4, !dbg !1457
  %8 = load i32, i32* %layer_index, align 4, !dbg !1458
  %sub = sub nsw i32 %7, %8, !dbg !1459
  br label %cond.end, !dbg !1456

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1456

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ -1, %cond.false ], !dbg !1456
  ret i32 %cond, !dbg !1460
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_active_layer(%struct.CustomData* %data, i32 %type) #0 !dbg !1461 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1462, metadata !DIExpression()), !dbg !1463
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1464, metadata !DIExpression()), !dbg !1465
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1466, metadata !DIExpression()), !dbg !1467
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1468
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1469
  %1 = load i32, i32* %type.addr, align 4, !dbg !1470
  %idxprom = sext i32 %1 to i64, !dbg !1468
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1468
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1468
  store i32 %2, i32* %layer_index, align 4, !dbg !1467
  %3 = load i32, i32* %layer_index, align 4, !dbg !1471
  %cmp = icmp ne i32 %3, -1, !dbg !1472
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1473

cond.true:                                        ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1474
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !1475
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1475
  %6 = load i32, i32* %layer_index, align 4, !dbg !1476
  %idxprom1 = sext i32 %6 to i64, !dbg !1474
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom1, !dbg !1474
  %active = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 3, !dbg !1477
  %7 = load i32, i32* %active, align 4, !dbg !1477
  br label %cond.end, !dbg !1473

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1473

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ -1, %cond.false ], !dbg !1473
  ret i32 %cond, !dbg !1478
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_render_layer(%struct.CustomData* %data, i32 %type) #0 !dbg !1479 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1480, metadata !DIExpression()), !dbg !1481
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1482, metadata !DIExpression()), !dbg !1483
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1484, metadata !DIExpression()), !dbg !1485
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1486
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1487
  %1 = load i32, i32* %type.addr, align 4, !dbg !1488
  %idxprom = sext i32 %1 to i64, !dbg !1486
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1486
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1486
  store i32 %2, i32* %layer_index, align 4, !dbg !1485
  %3 = load i32, i32* %layer_index, align 4, !dbg !1489
  %cmp = icmp ne i32 %3, -1, !dbg !1490
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1491

cond.true:                                        ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1492
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !1493
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1493
  %6 = load i32, i32* %layer_index, align 4, !dbg !1494
  %idxprom1 = sext i32 %6 to i64, !dbg !1492
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom1, !dbg !1492
  %active_rnd = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 4, !dbg !1495
  %7 = load i32, i32* %active_rnd, align 8, !dbg !1495
  br label %cond.end, !dbg !1491

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1491

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ -1, %cond.false ], !dbg !1491
  ret i32 %cond, !dbg !1496
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_clone_layer(%struct.CustomData* %data, i32 %type) #0 !dbg !1497 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1498, metadata !DIExpression()), !dbg !1499
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1500, metadata !DIExpression()), !dbg !1501
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1502, metadata !DIExpression()), !dbg !1503
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1504
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1505
  %1 = load i32, i32* %type.addr, align 4, !dbg !1506
  %idxprom = sext i32 %1 to i64, !dbg !1504
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1504
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1504
  store i32 %2, i32* %layer_index, align 4, !dbg !1503
  %3 = load i32, i32* %layer_index, align 4, !dbg !1507
  %cmp = icmp ne i32 %3, -1, !dbg !1508
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1509

cond.true:                                        ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1510
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !1511
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1511
  %6 = load i32, i32* %layer_index, align 4, !dbg !1512
  %idxprom1 = sext i32 %6 to i64, !dbg !1510
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom1, !dbg !1510
  %active_clone = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 5, !dbg !1513
  %7 = load i32, i32* %active_clone, align 4, !dbg !1513
  br label %cond.end, !dbg !1509

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1509

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ -1, %cond.false ], !dbg !1509
  ret i32 %cond, !dbg !1514
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_stencil_layer(%struct.CustomData* %data, i32 %type) #0 !dbg !1515 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1516, metadata !DIExpression()), !dbg !1517
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1518, metadata !DIExpression()), !dbg !1519
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !1520, metadata !DIExpression()), !dbg !1521
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1522
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !1523
  %1 = load i32, i32* %type.addr, align 4, !dbg !1524
  %idxprom = sext i32 %1 to i64, !dbg !1522
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !1522
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1522
  store i32 %2, i32* %layer_index, align 4, !dbg !1521
  %3 = load i32, i32* %layer_index, align 4, !dbg !1525
  %cmp = icmp ne i32 %3, -1, !dbg !1526
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1527

cond.true:                                        ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1528
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !1529
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1529
  %6 = load i32, i32* %layer_index, align 4, !dbg !1530
  %idxprom1 = sext i32 %6 to i64, !dbg !1528
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom1, !dbg !1528
  %active_mask = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 6, !dbg !1531
  %7 = load i32, i32* %active_mask, align 8, !dbg !1531
  br label %cond.end, !dbg !1527

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1527

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ -1, %cond.false ], !dbg !1527
  ret i32 %cond, !dbg !1532
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_active(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1533 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1536, metadata !DIExpression()), !dbg !1537
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1538, metadata !DIExpression()), !dbg !1539
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1540, metadata !DIExpression()), !dbg !1541
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1542, metadata !DIExpression()), !dbg !1543
  store i32 0, i32* %i, align 4, !dbg !1544
  br label %for.cond, !dbg !1546

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1547
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1549
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1550
  %2 = load i32, i32* %totlayer, align 4, !dbg !1550
  %cmp = icmp slt i32 %0, %2, !dbg !1551
  br i1 %cmp, label %for.body, label %for.end, !dbg !1552

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1553
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1555
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1555
  %5 = load i32, i32* %i, align 4, !dbg !1556
  %idxprom = sext i32 %5 to i64, !dbg !1553
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1553
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1557
  %6 = load i32, i32* %type1, align 8, !dbg !1557
  %7 = load i32, i32* %type.addr, align 4, !dbg !1558
  %cmp2 = icmp eq i32 %6, %7, !dbg !1559
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1560

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !1561
  %9 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1562
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !1563
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1563
  %11 = load i32, i32* %i, align 4, !dbg !1564
  %idxprom4 = sext i32 %11 to i64, !dbg !1562
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom4, !dbg !1562
  %active = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 3, !dbg !1565
  store i32 %8, i32* %active, align 4, !dbg !1566
  br label %if.end, !dbg !1562

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1558

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !1567
  %inc = add nsw i32 %12, 1, !dbg !1567
  store i32 %inc, i32* %i, align 4, !dbg !1567
  br label %for.cond, !dbg !1568, !llvm.loop !1569

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1571
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_render(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1572 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1573, metadata !DIExpression()), !dbg !1574
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1575, metadata !DIExpression()), !dbg !1576
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1577, metadata !DIExpression()), !dbg !1578
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1579, metadata !DIExpression()), !dbg !1580
  store i32 0, i32* %i, align 4, !dbg !1581
  br label %for.cond, !dbg !1583

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1584
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1586
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1587
  %2 = load i32, i32* %totlayer, align 4, !dbg !1587
  %cmp = icmp slt i32 %0, %2, !dbg !1588
  br i1 %cmp, label %for.body, label %for.end, !dbg !1589

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1590
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1592
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1592
  %5 = load i32, i32* %i, align 4, !dbg !1593
  %idxprom = sext i32 %5 to i64, !dbg !1590
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1590
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1594
  %6 = load i32, i32* %type1, align 8, !dbg !1594
  %7 = load i32, i32* %type.addr, align 4, !dbg !1595
  %cmp2 = icmp eq i32 %6, %7, !dbg !1596
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1597

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !1598
  %9 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1599
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !1600
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1600
  %11 = load i32, i32* %i, align 4, !dbg !1601
  %idxprom4 = sext i32 %11 to i64, !dbg !1599
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom4, !dbg !1599
  %active_rnd = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 4, !dbg !1602
  store i32 %8, i32* %active_rnd, align 8, !dbg !1603
  br label %if.end, !dbg !1599

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1595

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !1604
  %inc = add nsw i32 %12, 1, !dbg !1604
  store i32 %inc, i32* %i, align 4, !dbg !1604
  br label %for.cond, !dbg !1605, !llvm.loop !1606

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1608
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_clone(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1609 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1610, metadata !DIExpression()), !dbg !1611
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1612, metadata !DIExpression()), !dbg !1613
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1614, metadata !DIExpression()), !dbg !1615
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1616, metadata !DIExpression()), !dbg !1617
  store i32 0, i32* %i, align 4, !dbg !1618
  br label %for.cond, !dbg !1620

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1621
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1623
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1624
  %2 = load i32, i32* %totlayer, align 4, !dbg !1624
  %cmp = icmp slt i32 %0, %2, !dbg !1625
  br i1 %cmp, label %for.body, label %for.end, !dbg !1626

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1627
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1629
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1629
  %5 = load i32, i32* %i, align 4, !dbg !1630
  %idxprom = sext i32 %5 to i64, !dbg !1627
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1627
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1631
  %6 = load i32, i32* %type1, align 8, !dbg !1631
  %7 = load i32, i32* %type.addr, align 4, !dbg !1632
  %cmp2 = icmp eq i32 %6, %7, !dbg !1633
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1634

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !1635
  %9 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1636
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !1637
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1637
  %11 = load i32, i32* %i, align 4, !dbg !1638
  %idxprom4 = sext i32 %11 to i64, !dbg !1636
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom4, !dbg !1636
  %active_clone = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 5, !dbg !1639
  store i32 %8, i32* %active_clone, align 4, !dbg !1640
  br label %if.end, !dbg !1636

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1632

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !1641
  %inc = add nsw i32 %12, 1, !dbg !1641
  store i32 %inc, i32* %i, align 4, !dbg !1641
  br label %for.cond, !dbg !1642, !llvm.loop !1643

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1645
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_stencil(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1646 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1647, metadata !DIExpression()), !dbg !1648
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1649, metadata !DIExpression()), !dbg !1650
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1651, metadata !DIExpression()), !dbg !1652
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1653, metadata !DIExpression()), !dbg !1654
  store i32 0, i32* %i, align 4, !dbg !1655
  br label %for.cond, !dbg !1657

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1658
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1660
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1661
  %2 = load i32, i32* %totlayer, align 4, !dbg !1661
  %cmp = icmp slt i32 %0, %2, !dbg !1662
  br i1 %cmp, label %for.body, label %for.end, !dbg !1663

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1664
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1666
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1666
  %5 = load i32, i32* %i, align 4, !dbg !1667
  %idxprom = sext i32 %5 to i64, !dbg !1664
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1664
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1668
  %6 = load i32, i32* %type1, align 8, !dbg !1668
  %7 = load i32, i32* %type.addr, align 4, !dbg !1669
  %cmp2 = icmp eq i32 %6, %7, !dbg !1670
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1671

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !1672
  %9 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1673
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !1674
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1674
  %11 = load i32, i32* %i, align 4, !dbg !1675
  %idxprom4 = sext i32 %11 to i64, !dbg !1673
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom4, !dbg !1673
  %active_mask = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 6, !dbg !1676
  store i32 %8, i32* %active_mask, align 8, !dbg !1677
  br label %if.end, !dbg !1673

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1669

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !1678
  %inc = add nsw i32 %12, 1, !dbg !1678
  store i32 %inc, i32* %i, align 4, !dbg !1678
  br label %for.cond, !dbg !1679, !llvm.loop !1680

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1682
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_active_index(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1683 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1684, metadata !DIExpression()), !dbg !1685
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1686, metadata !DIExpression()), !dbg !1687
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1688, metadata !DIExpression()), !dbg !1689
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1690, metadata !DIExpression()), !dbg !1691
  store i32 0, i32* %i, align 4, !dbg !1692
  br label %for.cond, !dbg !1694

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1695
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1697
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1698
  %2 = load i32, i32* %totlayer, align 4, !dbg !1698
  %cmp = icmp slt i32 %0, %2, !dbg !1699
  br i1 %cmp, label %for.body, label %for.end, !dbg !1700

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1701
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1703
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1703
  %5 = load i32, i32* %i, align 4, !dbg !1704
  %idxprom = sext i32 %5 to i64, !dbg !1701
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1701
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1705
  %6 = load i32, i32* %type1, align 8, !dbg !1705
  %7 = load i32, i32* %type.addr, align 4, !dbg !1706
  %cmp2 = icmp eq i32 %6, %7, !dbg !1707
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1708

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !1709
  %9 = load i32, i32* %i, align 4, !dbg !1710
  %sub = sub nsw i32 %8, %9, !dbg !1711
  %10 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1712
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !1713
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1713
  %12 = load i32, i32* %i, align 4, !dbg !1714
  %idxprom4 = sext i32 %12 to i64, !dbg !1712
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom4, !dbg !1712
  %active = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 3, !dbg !1715
  store i32 %sub, i32* %active, align 4, !dbg !1716
  br label %if.end, !dbg !1712

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1706

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !1717
  %inc = add nsw i32 %13, 1, !dbg !1717
  store i32 %inc, i32* %i, align 4, !dbg !1717
  br label %for.cond, !dbg !1718, !llvm.loop !1719

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1721
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_render_index(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1722 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1723, metadata !DIExpression()), !dbg !1724
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1725, metadata !DIExpression()), !dbg !1726
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1727, metadata !DIExpression()), !dbg !1728
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1729, metadata !DIExpression()), !dbg !1730
  store i32 0, i32* %i, align 4, !dbg !1731
  br label %for.cond, !dbg !1733

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1734
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1736
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1737
  %2 = load i32, i32* %totlayer, align 4, !dbg !1737
  %cmp = icmp slt i32 %0, %2, !dbg !1738
  br i1 %cmp, label %for.body, label %for.end, !dbg !1739

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1740
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1742
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1742
  %5 = load i32, i32* %i, align 4, !dbg !1743
  %idxprom = sext i32 %5 to i64, !dbg !1740
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1740
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1744
  %6 = load i32, i32* %type1, align 8, !dbg !1744
  %7 = load i32, i32* %type.addr, align 4, !dbg !1745
  %cmp2 = icmp eq i32 %6, %7, !dbg !1746
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1747

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !1748
  %9 = load i32, i32* %i, align 4, !dbg !1749
  %sub = sub nsw i32 %8, %9, !dbg !1750
  %10 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1751
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !1752
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1752
  %12 = load i32, i32* %i, align 4, !dbg !1753
  %idxprom4 = sext i32 %12 to i64, !dbg !1751
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom4, !dbg !1751
  %active_rnd = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 4, !dbg !1754
  store i32 %sub, i32* %active_rnd, align 8, !dbg !1755
  br label %if.end, !dbg !1751

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1745

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !1756
  %inc = add nsw i32 %13, 1, !dbg !1756
  store i32 %inc, i32* %i, align 4, !dbg !1756
  br label %for.cond, !dbg !1757, !llvm.loop !1758

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1760
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_clone_index(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1761 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1762, metadata !DIExpression()), !dbg !1763
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1764, metadata !DIExpression()), !dbg !1765
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1766, metadata !DIExpression()), !dbg !1767
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1768, metadata !DIExpression()), !dbg !1769
  store i32 0, i32* %i, align 4, !dbg !1770
  br label %for.cond, !dbg !1772

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1773
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1775
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1776
  %2 = load i32, i32* %totlayer, align 4, !dbg !1776
  %cmp = icmp slt i32 %0, %2, !dbg !1777
  br i1 %cmp, label %for.body, label %for.end, !dbg !1778

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1779
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1781
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1781
  %5 = load i32, i32* %i, align 4, !dbg !1782
  %idxprom = sext i32 %5 to i64, !dbg !1779
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1779
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1783
  %6 = load i32, i32* %type1, align 8, !dbg !1783
  %7 = load i32, i32* %type.addr, align 4, !dbg !1784
  %cmp2 = icmp eq i32 %6, %7, !dbg !1785
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1786

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !1787
  %9 = load i32, i32* %i, align 4, !dbg !1788
  %sub = sub nsw i32 %8, %9, !dbg !1789
  %10 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1790
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !1791
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1791
  %12 = load i32, i32* %i, align 4, !dbg !1792
  %idxprom4 = sext i32 %12 to i64, !dbg !1790
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom4, !dbg !1790
  %active_clone = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 5, !dbg !1793
  store i32 %sub, i32* %active_clone, align 4, !dbg !1794
  br label %if.end, !dbg !1790

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1784

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !1795
  %inc = add nsw i32 %13, 1, !dbg !1795
  store i32 %inc, i32* %i, align 4, !dbg !1795
  br label %for.cond, !dbg !1796, !llvm.loop !1797

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1799
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_stencil_index(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !1800 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1801, metadata !DIExpression()), !dbg !1802
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1803, metadata !DIExpression()), !dbg !1804
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !1805, metadata !DIExpression()), !dbg !1806
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1807, metadata !DIExpression()), !dbg !1808
  store i32 0, i32* %i, align 4, !dbg !1809
  br label %for.cond, !dbg !1811

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1812
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1814
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1815
  %2 = load i32, i32* %totlayer, align 4, !dbg !1815
  %cmp = icmp slt i32 %0, %2, !dbg !1816
  br i1 %cmp, label %for.body, label %for.end, !dbg !1817

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1818
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1820
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1820
  %5 = load i32, i32* %i, align 4, !dbg !1821
  %idxprom = sext i32 %5 to i64, !dbg !1818
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1818
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1822
  %6 = load i32, i32* %type1, align 8, !dbg !1822
  %7 = load i32, i32* %type.addr, align 4, !dbg !1823
  %cmp2 = icmp eq i32 %6, %7, !dbg !1824
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1825

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !1826
  %9 = load i32, i32* %i, align 4, !dbg !1827
  %sub = sub nsw i32 %8, %9, !dbg !1828
  %10 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1829
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !1830
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1830
  %12 = load i32, i32* %i, align 4, !dbg !1831
  %idxprom4 = sext i32 %12 to i64, !dbg !1829
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom4, !dbg !1829
  %active_mask = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 6, !dbg !1832
  store i32 %sub, i32* %active_mask, align 8, !dbg !1833
  br label %if.end, !dbg !1829

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1823

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !1834
  %inc = add nsw i32 %13, 1, !dbg !1834
  store i32 %inc, i32* %i, align 4, !dbg !1834
  br label %for.cond, !dbg !1835, !llvm.loop !1836

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1838
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_flag(%struct.CustomData* %data, i32 %type, i32 %flag) #0 !dbg !1839 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1842, metadata !DIExpression()), !dbg !1843
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1844, metadata !DIExpression()), !dbg !1845
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !1846, metadata !DIExpression()), !dbg !1847
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1848, metadata !DIExpression()), !dbg !1849
  store i32 0, i32* %i, align 4, !dbg !1850
  br label %for.cond, !dbg !1852

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1853
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1855
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !1856
  %2 = load i32, i32* %totlayer, align 4, !dbg !1856
  %cmp = icmp slt i32 %0, %2, !dbg !1857
  br i1 %cmp, label %for.body, label %for.end, !dbg !1858

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1859
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !1861
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1861
  %5 = load i32, i32* %i, align 4, !dbg !1862
  %idxprom = sext i32 %5 to i64, !dbg !1859
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !1859
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !1863
  %6 = load i32, i32* %type1, align 8, !dbg !1863
  %7 = load i32, i32* %type.addr, align 4, !dbg !1864
  %cmp2 = icmp eq i32 %6, %7, !dbg !1865
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1866

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %flag.addr, align 4, !dbg !1867
  %9 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1868
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !1869
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !1869
  %11 = load i32, i32* %i, align 4, !dbg !1870
  %idxprom4 = sext i32 %11 to i64, !dbg !1868
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom4, !dbg !1868
  %flag6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 2, !dbg !1871
  %12 = load i32, i32* %flag6, align 8, !dbg !1872
  %or = or i32 %12, %8, !dbg !1872
  store i32 %or, i32* %flag6, align 8, !dbg !1872
  br label %if.end, !dbg !1868

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !1864

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !1873
  %inc = add nsw i32 %13, 1, !dbg !1873
  store i32 %inc, i32* %i, align 4, !dbg !1873
  br label %for.cond, !dbg !1874, !llvm.loop !1875

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1877
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_add_layer(%struct.CustomData* %data, i32 %type, i32 %alloctype, i8* %layerdata, i32 %totelem) #0 !dbg !1878 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %alloctype.addr = alloca i32, align 4
  %layerdata.addr = alloca i8*, align 8
  %totelem.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1881, metadata !DIExpression()), !dbg !1882
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1883, metadata !DIExpression()), !dbg !1884
  store i32 %alloctype, i32* %alloctype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloctype.addr, metadata !1885, metadata !DIExpression()), !dbg !1886
  store i8* %layerdata, i8** %layerdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %layerdata.addr, metadata !1887, metadata !DIExpression()), !dbg !1888
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !1889, metadata !DIExpression()), !dbg !1890
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !1891, metadata !DIExpression()), !dbg !1892
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !1893, metadata !DIExpression()), !dbg !1894
  %0 = load i32, i32* %type.addr, align 4, !dbg !1895
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !1896
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !1894
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1897
  %2 = load i32, i32* %type.addr, align 4, !dbg !1898
  %3 = load i32, i32* %alloctype.addr, align 4, !dbg !1899
  %4 = load i8*, i8** %layerdata.addr, align 8, !dbg !1900
  %5 = load i32, i32* %totelem.addr, align 4, !dbg !1901
  %6 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !1902
  %defaultname = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %6, i32 0, i32 3, !dbg !1903
  %7 = load i8*, i8** %defaultname, align 8, !dbg !1903
  %call1 = call %struct.CustomDataLayer* @customData_add_layer__internal(%struct.CustomData* %1, i32 %2, i32 %3, i8* %4, i32 %5, i8* %7), !dbg !1904
  store %struct.CustomDataLayer* %call1, %struct.CustomDataLayer** %layer, align 8, !dbg !1905
  %8 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1906
  call void @CustomData_update_typemap(%struct.CustomData* %8), !dbg !1907
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !1908
  %tobool = icmp ne %struct.CustomDataLayer* %9, null, !dbg !1908
  br i1 %tobool, label %if.then, label %if.end, !dbg !1910

if.then:                                          ; preds = %entry
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !1911
  %data2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i32 0, i32 9, !dbg !1912
  %11 = load i8*, i8** %data2, align 8, !dbg !1912
  store i8* %11, i8** %retval, align 8, !dbg !1913
  br label %return, !dbg !1913

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !1914
  br label %return, !dbg !1914

return:                                           ; preds = %if.end, %if.then
  %12 = load i8*, i8** %retval, align 8, !dbg !1915
  ret i8* %12, !dbg !1915
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.LayerTypeInfo* @layerType_getInfo(i32 %type) #0 !dbg !1916 {
entry:
  %retval = alloca %struct.LayerTypeInfo*, align 8
  %type.addr = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1919, metadata !DIExpression()), !dbg !1920
  %0 = load i32, i32* %type.addr, align 4, !dbg !1921
  %cmp = icmp slt i32 %0, 0, !dbg !1923
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !1924

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4, !dbg !1925
  %cmp1 = icmp sge i32 %1, 41, !dbg !1926
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1927

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.LayerTypeInfo* null, %struct.LayerTypeInfo** %retval, align 8, !dbg !1928
  br label %return, !dbg !1928

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %type.addr, align 4, !dbg !1929
  %idxprom = sext i32 %2 to i64, !dbg !1930
  %arrayidx = getelementptr inbounds [41 x %struct.LayerTypeInfo], [41 x %struct.LayerTypeInfo]* @LAYERTYPEINFO, i64 0, i64 %idxprom, !dbg !1930
  store %struct.LayerTypeInfo* %arrayidx, %struct.LayerTypeInfo** %retval, align 8, !dbg !1931
  br label %return, !dbg !1931

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %retval, align 8, !dbg !1932
  ret %struct.LayerTypeInfo* %3, !dbg !1932
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_add_layer_named(%struct.CustomData* %data, i32 %type, i32 %alloctype, i8* %layerdata, i32 %totelem, i8* %name) #0 !dbg !1933 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %alloctype.addr = alloca i32, align 4
  %layerdata.addr = alloca i8*, align 8
  %totelem.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %layer = alloca %struct.CustomDataLayer*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1936, metadata !DIExpression()), !dbg !1937
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1938, metadata !DIExpression()), !dbg !1939
  store i32 %alloctype, i32* %alloctype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloctype.addr, metadata !1940, metadata !DIExpression()), !dbg !1941
  store i8* %layerdata, i8** %layerdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %layerdata.addr, metadata !1942, metadata !DIExpression()), !dbg !1943
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !1944, metadata !DIExpression()), !dbg !1945
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1946, metadata !DIExpression()), !dbg !1947
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !1948, metadata !DIExpression()), !dbg !1949
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1950
  %1 = load i32, i32* %type.addr, align 4, !dbg !1951
  %2 = load i32, i32* %alloctype.addr, align 4, !dbg !1952
  %3 = load i8*, i8** %layerdata.addr, align 8, !dbg !1953
  %4 = load i32, i32* %totelem.addr, align 4, !dbg !1954
  %5 = load i8*, i8** %name.addr, align 8, !dbg !1955
  %call = call %struct.CustomDataLayer* @customData_add_layer__internal(%struct.CustomData* %0, i32 %1, i32 %2, i8* %3, i32 %4, i8* %5), !dbg !1956
  store %struct.CustomDataLayer* %call, %struct.CustomDataLayer** %layer, align 8, !dbg !1957
  %6 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1958
  call void @CustomData_update_typemap(%struct.CustomData* %6), !dbg !1959
  %7 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !1960
  %tobool = icmp ne %struct.CustomDataLayer* %7, null, !dbg !1960
  br i1 %tobool, label %if.then, label %if.end, !dbg !1962

if.then:                                          ; preds = %entry
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !1963
  %data1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i32 0, i32 9, !dbg !1964
  %9 = load i8*, i8** %data1, align 8, !dbg !1964
  store i8* %9, i8** %retval, align 8, !dbg !1965
  br label %return, !dbg !1965

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !1966
  br label %return, !dbg !1966

return:                                           ; preds = %if.end, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !1967
  ret i8* %10, !dbg !1967
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_free_layer(%struct.CustomData* %data, i32 %type, i32 %totelem, i32 %index) #0 !dbg !1968 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %totelem.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %index_nonzero = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !1971, metadata !DIExpression()), !dbg !1972
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1973, metadata !DIExpression()), !dbg !1974
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !1975, metadata !DIExpression()), !dbg !1976
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !1977, metadata !DIExpression()), !dbg !1978
  call void @llvm.dbg.declare(metadata i32* %n, metadata !1979, metadata !DIExpression()), !dbg !1980
  %0 = load i32, i32* %index.addr, align 4, !dbg !1981
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1982
  %2 = load i32, i32* %type.addr, align 4, !dbg !1983
  %call = call i32 @CustomData_get_layer_index(%struct.CustomData* %1, i32 %2), !dbg !1984
  %sub = sub nsw i32 %0, %call, !dbg !1985
  store i32 %sub, i32* %n, align 4, !dbg !1980
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1986, metadata !DIExpression()), !dbg !1987
  %3 = load i32, i32* %index.addr, align 4, !dbg !1988
  %cmp = icmp slt i32 %3, 0, !dbg !1990
  br i1 %cmp, label %if.then, label %if.end, !dbg !1991

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !1992
  br label %return, !dbg !1992

if.end:                                           ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !1993
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !1994
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !1994
  %6 = load i32, i32* %index.addr, align 4, !dbg !1995
  %idxprom = sext i32 %6 to i64, !dbg !1993
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !1993
  %7 = load i32, i32* %totelem.addr, align 4, !dbg !1996
  call void @customData_free_layer__internal(%struct.CustomDataLayer* %arrayidx, i32 %7), !dbg !1997
  %8 = load i32, i32* %index.addr, align 4, !dbg !1998
  %add = add nsw i32 %8, 1, !dbg !2000
  store i32 %add, i32* %i, align 4, !dbg !2001
  br label %for.cond, !dbg !2002

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4, !dbg !2003
  %10 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2005
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 2, !dbg !2006
  %11 = load i32, i32* %totlayer, align 4, !dbg !2006
  %cmp1 = icmp slt i32 %9, %11, !dbg !2007
  br i1 %cmp1, label %for.body, label %for.end, !dbg !2008

for.body:                                         ; preds = %for.cond
  %12 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2009
  %layers2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %12, i32 0, i32 0, !dbg !2010
  %13 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers2, align 8, !dbg !2010
  %14 = load i32, i32* %i, align 4, !dbg !2011
  %sub3 = sub nsw i32 %14, 1, !dbg !2012
  %idxprom4 = sext i32 %sub3 to i64, !dbg !2009
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %13, i64 %idxprom4, !dbg !2009
  %15 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2013
  %layers6 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %15, i32 0, i32 0, !dbg !2014
  %16 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers6, align 8, !dbg !2014
  %17 = load i32, i32* %i, align 4, !dbg !2015
  %idxprom7 = sext i32 %17 to i64, !dbg !2013
  %arrayidx8 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %16, i64 %idxprom7, !dbg !2013
  %18 = bitcast %struct.CustomDataLayer* %arrayidx5 to i8*, !dbg !2013
  %19 = bitcast %struct.CustomDataLayer* %arrayidx8 to i8*, !dbg !2013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 104, i1 false), !dbg !2013
  br label %for.inc, !dbg !2009

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4, !dbg !2016
  %inc = add nsw i32 %20, 1, !dbg !2016
  store i32 %inc, i32* %i, align 4, !dbg !2016
  br label %for.cond, !dbg !2017, !llvm.loop !2018

for.end:                                          ; preds = %for.cond
  %21 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2020
  %totlayer9 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %21, i32 0, i32 2, !dbg !2021
  %22 = load i32, i32* %totlayer9, align 4, !dbg !2022
  %dec = add nsw i32 %22, -1, !dbg !2022
  store i32 %dec, i32* %totlayer9, align 4, !dbg !2022
  %23 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2023
  %24 = load i32, i32* %type.addr, align 4, !dbg !2024
  %call10 = call i32 @CustomData_get_layer_index__notypemap(%struct.CustomData* %23, i32 %24), !dbg !2025
  store i32 %call10, i32* %i, align 4, !dbg !2026
  %25 = load i32, i32* %i, align 4, !dbg !2027
  %cmp11 = icmp ne i32 %25, -1, !dbg !2029
  br i1 %cmp11, label %if.then12, label %if.end45, !dbg !2030

if.then12:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %index_nonzero, metadata !2031, metadata !DIExpression()), !dbg !2033
  %26 = load i32, i32* %n, align 4, !dbg !2034
  %tobool = icmp ne i32 %26, 0, !dbg !2034
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2034

cond.true:                                        ; preds = %if.then12
  %27 = load i32, i32* %n, align 4, !dbg !2035
  br label %cond.end, !dbg !2034

cond.false:                                       ; preds = %if.then12
  br label %cond.end, !dbg !2034

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %27, %cond.true ], [ 1, %cond.false ], !dbg !2034
  store i32 %cond, i32* %index_nonzero, align 4, !dbg !2033
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !2036, metadata !DIExpression()), !dbg !2037
  %28 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2038
  %layers13 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %28, i32 0, i32 0, !dbg !2040
  %29 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers13, align 8, !dbg !2040
  %30 = load i32, i32* %i, align 4, !dbg !2041
  %idxprom14 = sext i32 %30 to i64, !dbg !2038
  %arrayidx15 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %29, i64 %idxprom14, !dbg !2038
  store %struct.CustomDataLayer* %arrayidx15, %struct.CustomDataLayer** %layer, align 8, !dbg !2042
  br label %for.cond16, !dbg !2043

for.cond16:                                       ; preds = %for.inc42, %cond.end
  %31 = load i32, i32* %i, align 4, !dbg !2044
  %32 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2046
  %totlayer17 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %32, i32 0, i32 2, !dbg !2047
  %33 = load i32, i32* %totlayer17, align 4, !dbg !2047
  %cmp18 = icmp slt i32 %31, %33, !dbg !2048
  br i1 %cmp18, label %land.rhs, label %land.end, !dbg !2049

land.rhs:                                         ; preds = %for.cond16
  %34 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2050
  %type19 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %34, i32 0, i32 0, !dbg !2051
  %35 = load i32, i32* %type19, align 8, !dbg !2051
  %36 = load i32, i32* %type.addr, align 4, !dbg !2052
  %cmp20 = icmp eq i32 %35, %36, !dbg !2053
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond16
  %37 = phi i1 [ false, %for.cond16 ], [ %cmp20, %land.rhs ], !dbg !2054
  br i1 %37, label %for.body21, label %for.end44, !dbg !2055

for.body21:                                       ; preds = %land.end
  %38 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2056
  %active = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %38, i32 0, i32 3, !dbg !2059
  %39 = load i32, i32* %active, align 4, !dbg !2059
  %40 = load i32, i32* %index_nonzero, align 4, !dbg !2060
  %cmp22 = icmp sge i32 %39, %40, !dbg !2061
  br i1 %cmp22, label %if.then23, label %if.end26, !dbg !2062

if.then23:                                        ; preds = %for.body21
  %41 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2063
  %active24 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %41, i32 0, i32 3, !dbg !2064
  %42 = load i32, i32* %active24, align 4, !dbg !2065
  %dec25 = add nsw i32 %42, -1, !dbg !2065
  store i32 %dec25, i32* %active24, align 4, !dbg !2065
  br label %if.end26, !dbg !2063

if.end26:                                         ; preds = %if.then23, %for.body21
  %43 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2066
  %active_rnd = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %43, i32 0, i32 4, !dbg !2068
  %44 = load i32, i32* %active_rnd, align 8, !dbg !2068
  %45 = load i32, i32* %index_nonzero, align 4, !dbg !2069
  %cmp27 = icmp sge i32 %44, %45, !dbg !2070
  br i1 %cmp27, label %if.then28, label %if.end31, !dbg !2071

if.then28:                                        ; preds = %if.end26
  %46 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2072
  %active_rnd29 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %46, i32 0, i32 4, !dbg !2073
  %47 = load i32, i32* %active_rnd29, align 8, !dbg !2074
  %dec30 = add nsw i32 %47, -1, !dbg !2074
  store i32 %dec30, i32* %active_rnd29, align 8, !dbg !2074
  br label %if.end31, !dbg !2072

if.end31:                                         ; preds = %if.then28, %if.end26
  %48 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2075
  %active_clone = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %48, i32 0, i32 5, !dbg !2077
  %49 = load i32, i32* %active_clone, align 4, !dbg !2077
  %50 = load i32, i32* %index_nonzero, align 4, !dbg !2078
  %cmp32 = icmp sge i32 %49, %50, !dbg !2079
  br i1 %cmp32, label %if.then33, label %if.end36, !dbg !2080

if.then33:                                        ; preds = %if.end31
  %51 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2081
  %active_clone34 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %51, i32 0, i32 5, !dbg !2082
  %52 = load i32, i32* %active_clone34, align 4, !dbg !2083
  %dec35 = add nsw i32 %52, -1, !dbg !2083
  store i32 %dec35, i32* %active_clone34, align 4, !dbg !2083
  br label %if.end36, !dbg !2081

if.end36:                                         ; preds = %if.then33, %if.end31
  %53 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2084
  %active_mask = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %53, i32 0, i32 6, !dbg !2086
  %54 = load i32, i32* %active_mask, align 8, !dbg !2086
  %55 = load i32, i32* %index_nonzero, align 4, !dbg !2087
  %cmp37 = icmp sge i32 %54, %55, !dbg !2088
  br i1 %cmp37, label %if.then38, label %if.end41, !dbg !2089

if.then38:                                        ; preds = %if.end36
  %56 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2090
  %active_mask39 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %56, i32 0, i32 6, !dbg !2091
  %57 = load i32, i32* %active_mask39, align 8, !dbg !2092
  %dec40 = add nsw i32 %57, -1, !dbg !2092
  store i32 %dec40, i32* %active_mask39, align 8, !dbg !2092
  br label %if.end41, !dbg !2090

if.end41:                                         ; preds = %if.then38, %if.end36
  br label %for.inc42, !dbg !2093

for.inc42:                                        ; preds = %if.end41
  %58 = load i32, i32* %i, align 4, !dbg !2094
  %inc43 = add nsw i32 %58, 1, !dbg !2094
  store i32 %inc43, i32* %i, align 4, !dbg !2094
  %59 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2095
  %incdec.ptr = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %59, i32 1, !dbg !2095
  store %struct.CustomDataLayer* %incdec.ptr, %struct.CustomDataLayer** %layer, align 8, !dbg !2095
  br label %for.cond16, !dbg !2096, !llvm.loop !2097

for.end44:                                        ; preds = %land.end
  br label %if.end45, !dbg !2099

if.end45:                                         ; preds = %for.end44, %for.end
  %60 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2100
  %totlayer46 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %60, i32 0, i32 2, !dbg !2102
  %61 = load i32, i32* %totlayer46, align 4, !dbg !2102
  %62 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2103
  %maxlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %62, i32 0, i32 3, !dbg !2104
  %63 = load i32, i32* %maxlayer, align 8, !dbg !2104
  %sub47 = sub nsw i32 %63, 5, !dbg !2105
  %cmp48 = icmp sle i32 %61, %sub47, !dbg !2106
  br i1 %cmp48, label %if.then49, label %if.end51, !dbg !2107

if.then49:                                        ; preds = %if.end45
  %64 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2108
  %call50 = call i32 @customData_resize(%struct.CustomData* %64, i32 -5), !dbg !2109
  br label %if.end51, !dbg !2109

if.end51:                                         ; preds = %if.then49, %if.end45
  %65 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2110
  call void @customData_update_offsets(%struct.CustomData* %65), !dbg !2111
  store i8 1, i8* %retval, align 1, !dbg !2112
  br label %return, !dbg !2112

return:                                           ; preds = %if.end51, %if.then
  %66 = load i8, i8* %retval, align 1, !dbg !2113
  ret i8 %66, !dbg !2113
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @CustomData_get_layer_index__notypemap(%struct.CustomData* %data, i32 %type) #0 !dbg !2114 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2115, metadata !DIExpression()), !dbg !2116
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2117, metadata !DIExpression()), !dbg !2118
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2119, metadata !DIExpression()), !dbg !2120
  store i32 0, i32* %i, align 4, !dbg !2121
  br label %for.cond, !dbg !2123

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2124
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2126
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2127
  %2 = load i32, i32* %totlayer, align 4, !dbg !2127
  %cmp = icmp slt i32 %0, %2, !dbg !2128
  br i1 %cmp, label %for.body, label %for.end, !dbg !2129

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2130
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !2132
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2132
  %5 = load i32, i32* %i, align 4, !dbg !2133
  %idxprom = sext i32 %5 to i64, !dbg !2130
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !2130
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !2134
  %6 = load i32, i32* %type1, align 8, !dbg !2134
  %7 = load i32, i32* %type.addr, align 4, !dbg !2135
  %cmp2 = icmp eq i32 %6, %7, !dbg !2136
  br i1 %cmp2, label %if.then, label %if.end, !dbg !2137

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !2138
  store i32 %8, i32* %retval, align 4, !dbg !2139
  br label %return, !dbg !2139

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2135

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !2140
  %inc = add nsw i32 %9, 1, !dbg !2140
  store i32 %inc, i32* %i, align 4, !dbg !2140
  br label %for.cond, !dbg !2141, !llvm.loop !2142

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval, align 4, !dbg !2144
  br label %return, !dbg !2144

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !2145
  ret i32 %10, !dbg !2145
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @customData_resize(%struct.CustomData* %data, i32 %amount) #0 !dbg !2146 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca %struct.CustomData*, align 8
  %amount.addr = alloca i32, align 4
  %tmp = alloca %struct.CustomDataLayer*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2149, metadata !DIExpression()), !dbg !2150
  store i32 %amount, i32* %amount.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %amount.addr, metadata !2151, metadata !DIExpression()), !dbg !2152
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %tmp, metadata !2153, metadata !DIExpression()), !dbg !2154
  %0 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !2155
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2156
  %maxlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 3, !dbg !2157
  %2 = load i32, i32* %maxlayer, align 8, !dbg !2157
  %3 = load i32, i32* %amount.addr, align 4, !dbg !2158
  %add = add nsw i32 %2, %3, !dbg !2159
  %conv = sext i32 %add to i64, !dbg !2160
  %mul = mul i64 104, %conv, !dbg !2161
  %call = call i8* %0(i64 %mul, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.95, i64 0, i64 0)), !dbg !2155
  %4 = bitcast i8* %call to %struct.CustomDataLayer*, !dbg !2155
  store %struct.CustomDataLayer* %4, %struct.CustomDataLayer** %tmp, align 8, !dbg !2154
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %tmp, align 8, !dbg !2162
  %tobool = icmp ne %struct.CustomDataLayer* %5, null, !dbg !2162
  br i1 %tobool, label %if.end, label %if.then, !dbg !2164

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2165
  br label %return, !dbg !2165

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %amount.addr, align 4, !dbg !2166
  %7 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2167
  %maxlayer1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %7, i32 0, i32 3, !dbg !2168
  %8 = load i32, i32* %maxlayer1, align 8, !dbg !2169
  %add2 = add nsw i32 %8, %6, !dbg !2169
  store i32 %add2, i32* %maxlayer1, align 8, !dbg !2169
  %9 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2170
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !2172
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2172
  %tobool3 = icmp ne %struct.CustomDataLayer* %10, null, !dbg !2170
  br i1 %tobool3, label %if.then4, label %if.end9, !dbg !2173

if.then4:                                         ; preds = %if.end
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %tmp, align 8, !dbg !2174
  %12 = bitcast %struct.CustomDataLayer* %11 to i8*, !dbg !2176
  %13 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2177
  %layers5 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %13, i32 0, i32 0, !dbg !2178
  %14 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers5, align 8, !dbg !2178
  %15 = bitcast %struct.CustomDataLayer* %14 to i8*, !dbg !2176
  %16 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2179
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %16, i32 0, i32 2, !dbg !2180
  %17 = load i32, i32* %totlayer, align 4, !dbg !2180
  %conv6 = sext i32 %17 to i64, !dbg !2179
  %mul7 = mul i64 104, %conv6, !dbg !2181
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %15, i64 %mul7, i1 false), !dbg !2176
  %18 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !2182
  %19 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2183
  %layers8 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %19, i32 0, i32 0, !dbg !2184
  %20 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers8, align 8, !dbg !2184
  %21 = bitcast %struct.CustomDataLayer* %20 to i8*, !dbg !2183
  call void %18(i8* %21), !dbg !2182
  br label %if.end9, !dbg !2185

if.end9:                                          ; preds = %if.then4, %if.end
  %22 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %tmp, align 8, !dbg !2186
  %23 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2187
  %layers10 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %23, i32 0, i32 0, !dbg !2188
  store %struct.CustomDataLayer* %22, %struct.CustomDataLayer** %layers10, align 8, !dbg !2189
  store i32 1, i32* %retval, align 4, !dbg !2190
  br label %return, !dbg !2190

return:                                           ; preds = %if.end9, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !2191
  ret i32 %24, !dbg !2191
}

; Function Attrs: noinline nounwind uwtable
define internal void @customData_update_offsets(%struct.CustomData* %data) #0 !dbg !2192 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2193, metadata !DIExpression()), !dbg !2194
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !2195, metadata !DIExpression()), !dbg !2196
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2197, metadata !DIExpression()), !dbg !2198
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !2199, metadata !DIExpression()), !dbg !2200
  store i32 0, i32* %offset, align 4, !dbg !2200
  store i32 0, i32* %i, align 4, !dbg !2201
  br label %for.cond, !dbg !2203

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2204
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2206
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2207
  %2 = load i32, i32* %totlayer, align 4, !dbg !2207
  %cmp = icmp slt i32 %0, %2, !dbg !2208
  br i1 %cmp, label %for.body, label %for.end, !dbg !2209

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2210
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !2212
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2212
  %5 = load i32, i32* %i, align 4, !dbg !2213
  %idxprom = sext i32 %5 to i64, !dbg !2210
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !2210
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !2214
  %6 = load i32, i32* %type, align 8, !dbg !2214
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %6), !dbg !2215
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2216
  %7 = load i32, i32* %offset, align 4, !dbg !2217
  %8 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2218
  %layers1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 0, !dbg !2219
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers1, align 8, !dbg !2219
  %10 = load i32, i32* %i, align 4, !dbg !2220
  %idxprom2 = sext i32 %10 to i64, !dbg !2218
  %arrayidx3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i64 %idxprom2, !dbg !2218
  %offset4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx3, i32 0, i32 1, !dbg !2221
  store i32 %7, i32* %offset4, align 4, !dbg !2222
  %11 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2223
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %11, i32 0, i32 0, !dbg !2224
  %12 = load i32, i32* %size, align 8, !dbg !2224
  %13 = load i32, i32* %offset, align 4, !dbg !2225
  %add = add nsw i32 %13, %12, !dbg !2225
  store i32 %add, i32* %offset, align 4, !dbg !2225
  br label %for.inc, !dbg !2226

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !2227
  %inc = add nsw i32 %14, 1, !dbg !2227
  store i32 %inc, i32* %i, align 4, !dbg !2227
  br label %for.cond, !dbg !2228, !llvm.loop !2229

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %offset, align 4, !dbg !2231
  %16 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2232
  %totsize = getelementptr inbounds %struct.CustomData, %struct.CustomData* %16, i32 0, i32 4, !dbg !2233
  store i32 %15, i32* %totsize, align 4, !dbg !2234
  %17 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2235
  call void @CustomData_update_typemap(%struct.CustomData* %17), !dbg !2236
  ret void, !dbg !2237
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_free_layer_active(%struct.CustomData* %data, i32 %type, i32 %totelem) #0 !dbg !2238 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %totelem.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2241, metadata !DIExpression()), !dbg !2242
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2243, metadata !DIExpression()), !dbg !2244
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !2245, metadata !DIExpression()), !dbg !2246
  call void @llvm.dbg.declare(metadata i32* %index, metadata !2247, metadata !DIExpression()), !dbg !2248
  store i32 0, i32* %index, align 4, !dbg !2248
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2249
  %1 = load i32, i32* %type.addr, align 4, !dbg !2250
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !2251
  store i32 %call, i32* %index, align 4, !dbg !2252
  %2 = load i32, i32* %index, align 4, !dbg !2253
  %cmp = icmp eq i32 %2, -1, !dbg !2255
  br i1 %cmp, label %if.then, label %if.end, !dbg !2256

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2257
  br label %return, !dbg !2257

if.end:                                           ; preds = %entry
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2258
  %4 = load i32, i32* %type.addr, align 4, !dbg !2259
  %5 = load i32, i32* %totelem.addr, align 4, !dbg !2260
  %6 = load i32, i32* %index, align 4, !dbg !2261
  %call1 = call zeroext i8 @CustomData_free_layer(%struct.CustomData* %3, i32 %4, i32 %5, i32 %6), !dbg !2262
  store i8 %call1, i8* %retval, align 1, !dbg !2263
  br label %return, !dbg !2263

return:                                           ; preds = %if.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !2264
  ret i8 %7, !dbg !2264
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_free_layers(%struct.CustomData* %data, i32 %type, i32 %totelem) #0 !dbg !2265 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %totelem.addr = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2266, metadata !DIExpression()), !dbg !2267
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2268, metadata !DIExpression()), !dbg !2269
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !2270, metadata !DIExpression()), !dbg !2271
  br label %while.cond, !dbg !2272

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2273
  %1 = load i32, i32* %type.addr, align 4, !dbg !2274
  %call = call zeroext i8 @CustomData_has_layer(%struct.CustomData* %0, i32 %1), !dbg !2275
  %tobool = icmp ne i8 %call, 0, !dbg !2272
  br i1 %tobool, label %while.body, label %while.end, !dbg !2272

while.body:                                       ; preds = %while.cond
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2276
  %3 = load i32, i32* %type.addr, align 4, !dbg !2277
  %4 = load i32, i32* %totelem.addr, align 4, !dbg !2278
  %call1 = call zeroext i8 @CustomData_free_layer_active(%struct.CustomData* %2, i32 %3, i32 %4), !dbg !2279
  br label %while.cond, !dbg !2272, !llvm.loop !2280

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2282
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_has_layer(%struct.CustomData* %data, i32 %type) #0 !dbg !2283 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2286, metadata !DIExpression()), !dbg !2287
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2288, metadata !DIExpression()), !dbg !2289
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2290
  %1 = load i32, i32* %type.addr, align 4, !dbg !2291
  %call = call i32 @CustomData_get_layer_index(%struct.CustomData* %0, i32 %1), !dbg !2292
  %cmp = icmp ne i32 %call, -1, !dbg !2293
  %conv = zext i1 %cmp to i32, !dbg !2293
  %conv1 = trunc i32 %conv to i8, !dbg !2294
  ret i8 %conv1, !dbg !2295
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_number_of_layers(%struct.CustomData* %data, i32 %type) #0 !dbg !2296 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %number = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2297, metadata !DIExpression()), !dbg !2298
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2299, metadata !DIExpression()), !dbg !2300
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2301, metadata !DIExpression()), !dbg !2302
  call void @llvm.dbg.declare(metadata i32* %number, metadata !2303, metadata !DIExpression()), !dbg !2304
  store i32 0, i32* %number, align 4, !dbg !2304
  store i32 0, i32* %i, align 4, !dbg !2305
  br label %for.cond, !dbg !2307

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2308
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2310
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2311
  %2 = load i32, i32* %totlayer, align 4, !dbg !2311
  %cmp = icmp slt i32 %0, %2, !dbg !2312
  br i1 %cmp, label %for.body, label %for.end, !dbg !2313

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2314
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !2316
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2316
  %5 = load i32, i32* %i, align 4, !dbg !2317
  %idxprom = sext i32 %5 to i64, !dbg !2314
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !2314
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !2318
  %6 = load i32, i32* %type1, align 8, !dbg !2318
  %7 = load i32, i32* %type.addr, align 4, !dbg !2319
  %cmp2 = icmp eq i32 %6, %7, !dbg !2320
  br i1 %cmp2, label %if.then, label %if.end, !dbg !2321

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %number, align 4, !dbg !2322
  %inc = add nsw i32 %8, 1, !dbg !2322
  store i32 %inc, i32* %number, align 4, !dbg !2322
  br label %if.end, !dbg !2323

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2319

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !2324
  %inc3 = add nsw i32 %9, 1, !dbg !2324
  store i32 %inc3, i32* %i, align 4, !dbg !2324
  br label %for.cond, !dbg !2325, !llvm.loop !2326

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %number, align 4, !dbg !2328
  ret i32 %10, !dbg !2329
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_number_of_layers_typemask(%struct.CustomData* %data, i64 %mask) #0 !dbg !2330 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %mask.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %number = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2333, metadata !DIExpression()), !dbg !2334
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !2335, metadata !DIExpression()), !dbg !2336
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2337, metadata !DIExpression()), !dbg !2338
  call void @llvm.dbg.declare(metadata i32* %number, metadata !2339, metadata !DIExpression()), !dbg !2340
  store i32 0, i32* %number, align 4, !dbg !2340
  store i32 0, i32* %i, align 4, !dbg !2341
  br label %for.cond, !dbg !2343

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2344
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2346
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2347
  %2 = load i32, i32* %totlayer, align 4, !dbg !2347
  %cmp = icmp slt i32 %0, %2, !dbg !2348
  br i1 %cmp, label %for.body, label %for.end, !dbg !2349

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %mask.addr, align 8, !dbg !2350
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2352
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !2352
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2352
  %6 = load i32, i32* %i, align 4, !dbg !2352
  %idxprom = sext i32 %6 to i64, !dbg !2352
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !2352
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !2352
  %7 = load i32, i32* %type, align 8, !dbg !2352
  %conv = sext i32 %7 to i64, !dbg !2352
  %shl = shl i64 1, %conv, !dbg !2352
  %and = and i64 %3, %shl, !dbg !2353
  %tobool = icmp ne i64 %and, 0, !dbg !2353
  br i1 %tobool, label %if.then, label %if.end, !dbg !2354

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %number, align 4, !dbg !2355
  %inc = add nsw i32 %8, 1, !dbg !2355
  store i32 %inc, i32* %number, align 4, !dbg !2355
  br label %if.end, !dbg !2356

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2352

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !2357
  %inc1 = add nsw i32 %9, 1, !dbg !2357
  store i32 %inc1, i32* %i, align 4, !dbg !2357
  br label %for.cond, !dbg !2358, !llvm.loop !2359

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %number, align 4, !dbg !2361
  ret i32 %10, !dbg !2362
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_duplicate_referenced_layer(%struct.CustomData* %data, i32 %type, i32 %totelem) #0 !dbg !2363 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %totelem.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %layer_index = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %dest_data = alloca i8*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2366, metadata !DIExpression()), !dbg !2367
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2368, metadata !DIExpression()), !dbg !2369
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !2370, metadata !DIExpression()), !dbg !2371
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !2372, metadata !DIExpression()), !dbg !2373
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !2374, metadata !DIExpression()), !dbg !2375
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2376
  %1 = load i32, i32* %type.addr, align 4, !dbg !2377
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !2378
  store i32 %call, i32* %layer_index, align 4, !dbg !2379
  %2 = load i32, i32* %layer_index, align 4, !dbg !2380
  %cmp = icmp eq i32 %2, -1, !dbg !2382
  br i1 %cmp, label %if.then, label %if.end, !dbg !2383

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !2384
  br label %return, !dbg !2384

if.end:                                           ; preds = %entry
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2385
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !2386
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2386
  %5 = load i32, i32* %layer_index, align 4, !dbg !2387
  %idxprom = sext i32 %5 to i64, !dbg !2385
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !2385
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !2388
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2389
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i32 0, i32 2, !dbg !2391
  %7 = load i32, i32* %flag, align 8, !dbg !2391
  %and = and i32 %7, 2, !dbg !2392
  %tobool = icmp ne i32 %and, 0, !dbg !2392
  br i1 %tobool, label %if.then1, label %if.end16, !dbg !2393

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !2394, metadata !DIExpression()), !dbg !2396
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2397
  %type2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i32 0, i32 0, !dbg !2398
  %9 = load i32, i32* %type2, align 8, !dbg !2398
  %call3 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %9), !dbg !2399
  store %struct.LayerTypeInfo* %call3, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2396
  %10 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2400
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %10, i32 0, i32 4, !dbg !2402
  %11 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !2402
  %tobool4 = icmp ne void (i8*, i8*, i32)* %11, null, !dbg !2400
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !2403

if.then5:                                         ; preds = %if.then1
  call void @llvm.dbg.declare(metadata i8** %dest_data, metadata !2404, metadata !DIExpression()), !dbg !2406
  %12 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !2407
  %13 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2408
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %13, i32 0, i32 0, !dbg !2409
  %14 = load i32, i32* %size, align 8, !dbg !2409
  %15 = load i32, i32* %totelem.addr, align 4, !dbg !2410
  %mul = mul nsw i32 %14, %15, !dbg !2411
  %conv = sext i32 %mul to i64, !dbg !2408
  %call6 = call i8* %12(i64 %conv, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0)), !dbg !2407
  store i8* %call6, i8** %dest_data, align 8, !dbg !2406
  %16 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2412
  %copy7 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %16, i32 0, i32 4, !dbg !2413
  %17 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy7, align 8, !dbg !2413
  %18 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2414
  %data8 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %18, i32 0, i32 9, !dbg !2415
  %19 = load i8*, i8** %data8, align 8, !dbg !2415
  %20 = load i8*, i8** %dest_data, align 8, !dbg !2416
  %21 = load i32, i32* %totelem.addr, align 4, !dbg !2417
  call void %17(i8* %19, i8* %20, i32 %21), !dbg !2412
  %22 = load i8*, i8** %dest_data, align 8, !dbg !2418
  %23 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2419
  %data9 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %23, i32 0, i32 9, !dbg !2420
  store i8* %22, i8** %data9, align 8, !dbg !2421
  br label %if.end13, !dbg !2422

if.else:                                          ; preds = %if.then1
  %24 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !2423
  %25 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2424
  %data10 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %25, i32 0, i32 9, !dbg !2425
  %26 = load i8*, i8** %data10, align 8, !dbg !2425
  %call11 = call i8* %24(i8* %26), !dbg !2423
  %27 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2426
  %data12 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %27, i32 0, i32 9, !dbg !2427
  store i8* %call11, i8** %data12, align 8, !dbg !2428
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then5
  %28 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2429
  %flag14 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %28, i32 0, i32 2, !dbg !2430
  %29 = load i32, i32* %flag14, align 8, !dbg !2431
  %and15 = and i32 %29, -3, !dbg !2431
  store i32 %and15, i32* %flag14, align 8, !dbg !2431
  br label %if.end16, !dbg !2432

if.end16:                                         ; preds = %if.end13, %if.end
  %30 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2433
  %data17 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %30, i32 0, i32 9, !dbg !2434
  %31 = load i8*, i8** %data17, align 8, !dbg !2434
  store i8* %31, i8** %retval, align 8, !dbg !2435
  br label %return, !dbg !2435

return:                                           ; preds = %if.end16, %if.then
  %32 = load i8*, i8** %retval, align 8, !dbg !2436
  ret i8* %32, !dbg !2436
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_duplicate_referenced_layer_named(%struct.CustomData* %data, i32 %type, i8* %name, i32 %totelem) #0 !dbg !2437 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %totelem.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %layer_index = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %dest_data = alloca i8*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2440, metadata !DIExpression()), !dbg !2441
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2442, metadata !DIExpression()), !dbg !2443
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !2444, metadata !DIExpression()), !dbg !2445
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !2446, metadata !DIExpression()), !dbg !2447
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !2448, metadata !DIExpression()), !dbg !2449
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !2450, metadata !DIExpression()), !dbg !2451
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2452
  %1 = load i32, i32* %type.addr, align 4, !dbg !2453
  %2 = load i8*, i8** %name.addr, align 8, !dbg !2454
  %call = call i32 @CustomData_get_named_layer_index(%struct.CustomData* %0, i32 %1, i8* %2), !dbg !2455
  store i32 %call, i32* %layer_index, align 4, !dbg !2456
  %3 = load i32, i32* %layer_index, align 4, !dbg !2457
  %cmp = icmp eq i32 %3, -1, !dbg !2459
  br i1 %cmp, label %if.then, label %if.end, !dbg !2460

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !2461
  br label %return, !dbg !2461

if.end:                                           ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2462
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !2463
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2463
  %6 = load i32, i32* %layer_index, align 4, !dbg !2464
  %idxprom = sext i32 %6 to i64, !dbg !2462
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !2462
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !2465
  %7 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2466
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %7, i32 0, i32 2, !dbg !2468
  %8 = load i32, i32* %flag, align 8, !dbg !2468
  %and = and i32 %8, 2, !dbg !2469
  %tobool = icmp ne i32 %and, 0, !dbg !2469
  br i1 %tobool, label %if.then1, label %if.end16, !dbg !2470

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !2471, metadata !DIExpression()), !dbg !2473
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2474
  %type2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i32 0, i32 0, !dbg !2475
  %10 = load i32, i32* %type2, align 8, !dbg !2475
  %call3 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %10), !dbg !2476
  store %struct.LayerTypeInfo* %call3, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2473
  %11 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2477
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %11, i32 0, i32 4, !dbg !2479
  %12 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !2479
  %tobool4 = icmp ne void (i8*, i8*, i32)* %12, null, !dbg !2477
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !2480

if.then5:                                         ; preds = %if.then1
  call void @llvm.dbg.declare(metadata i8** %dest_data, metadata !2481, metadata !DIExpression()), !dbg !2483
  %13 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !2484
  %14 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2485
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %14, i32 0, i32 0, !dbg !2486
  %15 = load i32, i32* %size, align 8, !dbg !2486
  %16 = load i32, i32* %totelem.addr, align 4, !dbg !2487
  %mul = mul nsw i32 %15, %16, !dbg !2488
  %conv = sext i32 %mul to i64, !dbg !2485
  %call6 = call i8* %13(i64 %conv, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0)), !dbg !2484
  store i8* %call6, i8** %dest_data, align 8, !dbg !2483
  %17 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2489
  %copy7 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %17, i32 0, i32 4, !dbg !2490
  %18 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy7, align 8, !dbg !2490
  %19 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2491
  %data8 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %19, i32 0, i32 9, !dbg !2492
  %20 = load i8*, i8** %data8, align 8, !dbg !2492
  %21 = load i8*, i8** %dest_data, align 8, !dbg !2493
  %22 = load i32, i32* %totelem.addr, align 4, !dbg !2494
  call void %18(i8* %20, i8* %21, i32 %22), !dbg !2489
  %23 = load i8*, i8** %dest_data, align 8, !dbg !2495
  %24 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2496
  %data9 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %24, i32 0, i32 9, !dbg !2497
  store i8* %23, i8** %data9, align 8, !dbg !2498
  br label %if.end13, !dbg !2499

if.else:                                          ; preds = %if.then1
  %25 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !2500
  %26 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2501
  %data10 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %26, i32 0, i32 9, !dbg !2502
  %27 = load i8*, i8** %data10, align 8, !dbg !2502
  %call11 = call i8* %25(i8* %27), !dbg !2500
  %28 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2503
  %data12 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %28, i32 0, i32 9, !dbg !2504
  store i8* %call11, i8** %data12, align 8, !dbg !2505
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then5
  %29 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2506
  %flag14 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %29, i32 0, i32 2, !dbg !2507
  %30 = load i32, i32* %flag14, align 8, !dbg !2508
  %and15 = and i32 %30, -3, !dbg !2508
  store i32 %and15, i32* %flag14, align 8, !dbg !2508
  br label %if.end16, !dbg !2509

if.end16:                                         ; preds = %if.end13, %if.end
  %31 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2510
  %data17 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %31, i32 0, i32 9, !dbg !2511
  %32 = load i8*, i8** %data17, align 8, !dbg !2511
  store i8* %32, i8** %retval, align 8, !dbg !2512
  br label %return, !dbg !2512

return:                                           ; preds = %if.end16, %if.then
  %33 = load i8*, i8** %retval, align 8, !dbg !2513
  ret i8* %33, !dbg !2513
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_is_referenced_layer(%struct.CustomData* %data, i32 %type) #0 !dbg !2514 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2517, metadata !DIExpression()), !dbg !2518
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2519, metadata !DIExpression()), !dbg !2520
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !2521, metadata !DIExpression()), !dbg !2522
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !2523, metadata !DIExpression()), !dbg !2524
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2525
  %1 = load i32, i32* %type.addr, align 4, !dbg !2526
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !2527
  store i32 %call, i32* %layer_index, align 4, !dbg !2528
  %2 = load i32, i32* %layer_index, align 4, !dbg !2529
  %cmp = icmp eq i32 %2, -1, !dbg !2531
  br i1 %cmp, label %if.then, label %if.end, !dbg !2532

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2533
  br label %return, !dbg !2533

if.end:                                           ; preds = %entry
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2534
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !2535
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2535
  %5 = load i32, i32* %layer_index, align 4, !dbg !2536
  %idxprom = sext i32 %5 to i64, !dbg !2534
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !2534
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !2537
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2538
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i32 0, i32 2, !dbg !2539
  %7 = load i32, i32* %flag, align 8, !dbg !2539
  %and = and i32 %7, 2, !dbg !2540
  %cmp1 = icmp ne i32 %and, 0, !dbg !2541
  %conv = zext i1 %cmp1 to i32, !dbg !2541
  %conv2 = trunc i32 %conv to i8, !dbg !2542
  store i8 %conv2, i8* %retval, align 1, !dbg !2543
  br label %return, !dbg !2543

return:                                           ; preds = %if.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !2544
  ret i8 %8, !dbg !2544
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_free_temporary(%struct.CustomData* %data, i32 %totelem) #0 !dbg !2545 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %totelem.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %changed = alloca i8, align 1
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2546, metadata !DIExpression()), !dbg !2547
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !2548, metadata !DIExpression()), !dbg !2549
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !2550, metadata !DIExpression()), !dbg !2551
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2552, metadata !DIExpression()), !dbg !2553
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2554, metadata !DIExpression()), !dbg !2555
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !2556, metadata !DIExpression()), !dbg !2557
  store i8 0, i8* %changed, align 1, !dbg !2557
  store i32 0, i32* %i, align 4, !dbg !2558
  store i32 0, i32* %j, align 4, !dbg !2560
  br label %for.cond, !dbg !2561

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2562
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2564
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2565
  %2 = load i32, i32* %totlayer, align 4, !dbg !2565
  %cmp = icmp slt i32 %0, %2, !dbg !2566
  br i1 %cmp, label %for.body, label %for.end, !dbg !2567

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2568
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !2570
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2570
  %5 = load i32, i32* %i, align 4, !dbg !2571
  %idxprom = sext i32 %5 to i64, !dbg !2568
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !2568
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !2572
  %6 = load i32, i32* %i, align 4, !dbg !2573
  %7 = load i32, i32* %j, align 4, !dbg !2575
  %cmp1 = icmp ne i32 %6, %7, !dbg !2576
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2577

if.then:                                          ; preds = %for.body
  %8 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2578
  %layers2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 0, !dbg !2579
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers2, align 8, !dbg !2579
  %10 = load i32, i32* %j, align 4, !dbg !2580
  %idxprom3 = sext i32 %10 to i64, !dbg !2578
  %arrayidx4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i64 %idxprom3, !dbg !2578
  %11 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2581
  %layers5 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %11, i32 0, i32 0, !dbg !2582
  %12 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers5, align 8, !dbg !2582
  %13 = load i32, i32* %i, align 4, !dbg !2583
  %idxprom6 = sext i32 %13 to i64, !dbg !2581
  %arrayidx7 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %12, i64 %idxprom6, !dbg !2581
  %14 = bitcast %struct.CustomDataLayer* %arrayidx4 to i8*, !dbg !2581
  %15 = bitcast %struct.CustomDataLayer* %arrayidx7 to i8*, !dbg !2581
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 104, i1 false), !dbg !2581
  br label %if.end, !dbg !2578

if.end:                                           ; preds = %if.then, %for.body
  %16 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2584
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %16, i32 0, i32 2, !dbg !2586
  %17 = load i32, i32* %flag, align 8, !dbg !2586
  %and = and i32 %17, 5, !dbg !2587
  %cmp8 = icmp eq i32 %and, 5, !dbg !2588
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !2589

if.then9:                                         ; preds = %if.end
  %18 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !2590
  %19 = load i32, i32* %totelem.addr, align 4, !dbg !2592
  call void @customData_free_layer__internal(%struct.CustomDataLayer* %18, i32 %19), !dbg !2593
  store i8 1, i8* %changed, align 1, !dbg !2594
  br label %if.end10, !dbg !2595

if.else:                                          ; preds = %if.end
  %20 = load i32, i32* %j, align 4, !dbg !2596
  %inc = add nsw i32 %20, 1, !dbg !2596
  store i32 %inc, i32* %j, align 4, !dbg !2596
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then9
  br label %for.inc, !dbg !2597

for.inc:                                          ; preds = %if.end10
  %21 = load i32, i32* %i, align 4, !dbg !2598
  %inc11 = add nsw i32 %21, 1, !dbg !2598
  store i32 %inc11, i32* %i, align 4, !dbg !2598
  br label %for.cond, !dbg !2599, !llvm.loop !2600

for.end:                                          ; preds = %for.cond
  %22 = load i32, i32* %j, align 4, !dbg !2602
  %23 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2603
  %totlayer12 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %23, i32 0, i32 2, !dbg !2604
  store i32 %22, i32* %totlayer12, align 4, !dbg !2605
  %24 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2606
  %totlayer13 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %24, i32 0, i32 2, !dbg !2608
  %25 = load i32, i32* %totlayer13, align 4, !dbg !2608
  %26 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2609
  %maxlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %26, i32 0, i32 3, !dbg !2610
  %27 = load i32, i32* %maxlayer, align 8, !dbg !2610
  %sub = sub nsw i32 %27, 5, !dbg !2611
  %cmp14 = icmp sle i32 %25, %sub, !dbg !2612
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !2613

if.then15:                                        ; preds = %for.end
  %28 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2614
  %call = call i32 @customData_resize(%struct.CustomData* %28, i32 -5), !dbg !2616
  store i8 1, i8* %changed, align 1, !dbg !2617
  br label %if.end16, !dbg !2618

if.end16:                                         ; preds = %if.then15, %for.end
  %29 = load i8, i8* %changed, align 1, !dbg !2619
  %tobool = icmp ne i8 %29, 0, !dbg !2619
  br i1 %tobool, label %if.then17, label %if.end18, !dbg !2621

if.then17:                                        ; preds = %if.end16
  %30 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2622
  call void @customData_update_offsets(%struct.CustomData* %30), !dbg !2624
  br label %if.end18, !dbg !2625

if.end18:                                         ; preds = %if.then17, %if.end16
  ret void, !dbg !2626
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_only_copy(%struct.CustomData* %data, i64 %mask) #0 !dbg !2627 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %mask.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2630, metadata !DIExpression()), !dbg !2631
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !2632, metadata !DIExpression()), !dbg !2633
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2634, metadata !DIExpression()), !dbg !2635
  store i32 0, i32* %i, align 4, !dbg !2636
  br label %for.cond, !dbg !2638

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2639
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2641
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2642
  %2 = load i32, i32* %totlayer, align 4, !dbg !2642
  %cmp = icmp slt i32 %0, %2, !dbg !2643
  br i1 %cmp, label %for.body, label %for.end, !dbg !2644

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %mask.addr, align 8, !dbg !2645
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2647
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !2647
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2647
  %6 = load i32, i32* %i, align 4, !dbg !2647
  %idxprom = sext i32 %6 to i64, !dbg !2647
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !2647
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !2647
  %7 = load i32, i32* %type, align 8, !dbg !2647
  %conv = sext i32 %7 to i64, !dbg !2647
  %shl = shl i64 1, %conv, !dbg !2647
  %and = and i64 %3, %shl, !dbg !2648
  %tobool = icmp ne i64 %and, 0, !dbg !2648
  br i1 %tobool, label %if.end, label %if.then, !dbg !2649

if.then:                                          ; preds = %for.body
  %8 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2650
  %layers1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 0, !dbg !2651
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers1, align 8, !dbg !2651
  %10 = load i32, i32* %i, align 4, !dbg !2652
  %idxprom2 = sext i32 %10 to i64, !dbg !2650
  %arrayidx3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i64 %idxprom2, !dbg !2650
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx3, i32 0, i32 2, !dbg !2653
  %11 = load i32, i32* %flag, align 8, !dbg !2654
  %or = or i32 %11, 1, !dbg !2654
  store i32 %or, i32* %flag, align 8, !dbg !2654
  br label %if.end, !dbg !2650

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2655

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !2656
  %inc = add nsw i32 %12, 1, !dbg !2656
  store i32 %inc, i32* %i, align 4, !dbg !2656
  br label %for.cond, !dbg !2657, !llvm.loop !2658

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2660
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_copy_elements(i32 %type, i8* %source, i8* %dest, i32 %count) #0 !dbg !2661 {
entry:
  %type.addr = alloca i32, align 4
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2664, metadata !DIExpression()), !dbg !2665
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !2666, metadata !DIExpression()), !dbg !2667
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !2668, metadata !DIExpression()), !dbg !2669
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2670, metadata !DIExpression()), !dbg !2671
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !2672, metadata !DIExpression()), !dbg !2673
  %0 = load i32, i32* %type.addr, align 4, !dbg !2674
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !2675
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2673
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2676
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 4, !dbg !2678
  %2 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !2678
  %tobool = icmp ne void (i8*, i8*, i32)* %2, null, !dbg !2676
  br i1 %tobool, label %if.then, label %if.else, !dbg !2679

if.then:                                          ; preds = %entry
  %3 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2680
  %copy1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %3, i32 0, i32 4, !dbg !2681
  %4 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy1, align 8, !dbg !2681
  %5 = load i8*, i8** %source.addr, align 8, !dbg !2682
  %6 = load i8*, i8** %dest.addr, align 8, !dbg !2683
  %7 = load i32, i32* %count.addr, align 4, !dbg !2684
  call void %4(i8* %5, i8* %6, i32 %7), !dbg !2680
  br label %if.end, !dbg !2680

if.else:                                          ; preds = %entry
  %8 = load i8*, i8** %dest.addr, align 8, !dbg !2685
  %9 = load i8*, i8** %source.addr, align 8, !dbg !2686
  %10 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2687
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %10, i32 0, i32 0, !dbg !2688
  %11 = load i32, i32* %size, align 8, !dbg !2688
  %12 = load i32, i32* %count.addr, align 4, !dbg !2689
  %mul = mul nsw i32 %11, %12, !dbg !2690
  %conv = sext i32 %mul to i64, !dbg !2687
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %9, i64 %conv, i1 false), !dbg !2691
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2692
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_copy_data_named(%struct.CustomData* %source, %struct.CustomData* %dest, i32 %source_index, i32 %dest_index, i32 %count) #0 !dbg !2693 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %source_index.addr = alloca i32, align 4
  %dest_index.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %src_i = alloca i32, align 4
  %dest_i = alloca i32, align 4
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !2696, metadata !DIExpression()), !dbg !2697
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !2698, metadata !DIExpression()), !dbg !2699
  store i32 %source_index, i32* %source_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %source_index.addr, metadata !2700, metadata !DIExpression()), !dbg !2701
  store i32 %dest_index, i32* %dest_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dest_index.addr, metadata !2702, metadata !DIExpression()), !dbg !2703
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2704, metadata !DIExpression()), !dbg !2705
  call void @llvm.dbg.declare(metadata i32* %src_i, metadata !2706, metadata !DIExpression()), !dbg !2707
  call void @llvm.dbg.declare(metadata i32* %dest_i, metadata !2708, metadata !DIExpression()), !dbg !2709
  store i32 0, i32* %src_i, align 4, !dbg !2710
  br label %for.cond, !dbg !2712

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %src_i, align 4, !dbg !2713
  %1 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2715
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2716
  %2 = load i32, i32* %totlayer, align 4, !dbg !2716
  %cmp = icmp slt i32 %0, %2, !dbg !2717
  br i1 %cmp, label %for.body, label %for.end, !dbg !2718

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !2719
  %4 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2721
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !2722
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2722
  %6 = load i32, i32* %src_i, align 4, !dbg !2723
  %idxprom = sext i32 %6 to i64, !dbg !2721
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !2721
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !2724
  %7 = load i32, i32* %type, align 8, !dbg !2724
  %8 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2725
  %layers1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 0, !dbg !2726
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers1, align 8, !dbg !2726
  %10 = load i32, i32* %src_i, align 4, !dbg !2727
  %idxprom2 = sext i32 %10 to i64, !dbg !2725
  %arrayidx3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i64 %idxprom2, !dbg !2725
  %name = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx3, i32 0, i32 8, !dbg !2728
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !2725
  %call = call i32 @CustomData_get_named_layer_index(%struct.CustomData* %3, i32 %7, i8* %arraydecay), !dbg !2729
  store i32 %call, i32* %dest_i, align 4, !dbg !2730
  %11 = load i32, i32* %dest_i, align 4, !dbg !2731
  %cmp4 = icmp ne i32 %11, -1, !dbg !2733
  br i1 %cmp4, label %if.then, label %if.end, !dbg !2734

if.then:                                          ; preds = %for.body
  %12 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2735
  %13 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !2737
  %14 = load i32, i32* %src_i, align 4, !dbg !2738
  %15 = load i32, i32* %dest_i, align 4, !dbg !2739
  %16 = load i32, i32* %source_index.addr, align 4, !dbg !2740
  %17 = load i32, i32* %dest_index.addr, align 4, !dbg !2741
  %18 = load i32, i32* %count.addr, align 4, !dbg !2742
  call void @CustomData_copy_data_layer(%struct.CustomData* %12, %struct.CustomData* %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18), !dbg !2743
  br label %if.end, !dbg !2744

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2745

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %src_i, align 4, !dbg !2746
  %inc = add nsw i32 %19, 1, !dbg !2746
  store i32 %inc, i32* %src_i, align 4, !dbg !2746
  br label %for.cond, !dbg !2747, !llvm.loop !2748

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2750
}

; Function Attrs: noinline nounwind uwtable
define internal void @CustomData_copy_data_layer(%struct.CustomData* %source, %struct.CustomData* %dest, i32 %src_i, i32 %dest_i, i32 %source_index, i32 %dest_index, i32 %count) #0 !dbg !2751 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %src_i.addr = alloca i32, align 4
  %dest_i.addr = alloca i32, align 4
  %source_index.addr = alloca i32, align 4
  %dest_index.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %src_offset = alloca i32, align 4
  %dest_offset = alloca i32, align 4
  %src_data = alloca i8*, align 8
  %dest_data = alloca i8*, align 8
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !2754, metadata !DIExpression()), !dbg !2755
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !2756, metadata !DIExpression()), !dbg !2757
  store i32 %src_i, i32* %src_i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_i.addr, metadata !2758, metadata !DIExpression()), !dbg !2759
  store i32 %dest_i, i32* %dest_i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dest_i.addr, metadata !2760, metadata !DIExpression()), !dbg !2761
  store i32 %source_index, i32* %source_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %source_index.addr, metadata !2762, metadata !DIExpression()), !dbg !2763
  store i32 %dest_index, i32* %dest_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dest_index.addr, metadata !2764, metadata !DIExpression()), !dbg !2765
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2766, metadata !DIExpression()), !dbg !2767
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !2768, metadata !DIExpression()), !dbg !2769
  call void @llvm.dbg.declare(metadata i32* %src_offset, metadata !2770, metadata !DIExpression()), !dbg !2771
  call void @llvm.dbg.declare(metadata i32* %dest_offset, metadata !2772, metadata !DIExpression()), !dbg !2773
  call void @llvm.dbg.declare(metadata i8** %src_data, metadata !2774, metadata !DIExpression()), !dbg !2775
  %0 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2776
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 0, !dbg !2777
  %1 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2777
  %2 = load i32, i32* %src_i.addr, align 4, !dbg !2778
  %idxprom = sext i32 %2 to i64, !dbg !2776
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %1, i64 %idxprom, !dbg !2776
  %data = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 9, !dbg !2779
  %3 = load i8*, i8** %data, align 8, !dbg !2779
  store i8* %3, i8** %src_data, align 8, !dbg !2775
  call void @llvm.dbg.declare(metadata i8** %dest_data, metadata !2780, metadata !DIExpression()), !dbg !2781
  %4 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !2782
  %layers1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !2783
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers1, align 8, !dbg !2783
  %6 = load i32, i32* %dest_i.addr, align 4, !dbg !2784
  %idxprom2 = sext i32 %6 to i64, !dbg !2782
  %arrayidx3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom2, !dbg !2782
  %data4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx3, i32 0, i32 9, !dbg !2785
  %7 = load i8*, i8** %data4, align 8, !dbg !2785
  store i8* %7, i8** %dest_data, align 8, !dbg !2781
  %8 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2786
  %layers5 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 0, !dbg !2787
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers5, align 8, !dbg !2787
  %10 = load i32, i32* %src_i.addr, align 4, !dbg !2788
  %idxprom6 = sext i32 %10 to i64, !dbg !2786
  %arrayidx7 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i64 %idxprom6, !dbg !2786
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx7, i32 0, i32 0, !dbg !2789
  %11 = load i32, i32* %type, align 8, !dbg !2789
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %11), !dbg !2790
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2791
  %12 = load i32, i32* %source_index.addr, align 4, !dbg !2792
  %13 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2793
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %13, i32 0, i32 0, !dbg !2794
  %14 = load i32, i32* %size, align 8, !dbg !2794
  %mul = mul nsw i32 %12, %14, !dbg !2795
  store i32 %mul, i32* %src_offset, align 4, !dbg !2796
  %15 = load i32, i32* %dest_index.addr, align 4, !dbg !2797
  %16 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2798
  %size8 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %16, i32 0, i32 0, !dbg !2799
  %17 = load i32, i32* %size8, align 8, !dbg !2799
  %mul9 = mul nsw i32 %15, %17, !dbg !2800
  store i32 %mul9, i32* %dest_offset, align 4, !dbg !2801
  %18 = load i8*, i8** %src_data, align 8, !dbg !2802
  %tobool = icmp ne i8* %18, null, !dbg !2802
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2804

lor.lhs.false:                                    ; preds = %entry
  %19 = load i8*, i8** %dest_data, align 8, !dbg !2805
  %tobool10 = icmp ne i8* %19, null, !dbg !2805
  br i1 %tobool10, label %if.end19, label %if.then, !dbg !2806

if.then:                                          ; preds = %lor.lhs.false, %entry
  %20 = load i8*, i8** %src_data, align 8, !dbg !2807
  %cmp = icmp eq i8* %20, null, !dbg !2810
  br i1 %cmp, label %land.lhs.true, label %if.then12, !dbg !2811

land.lhs.true:                                    ; preds = %if.then
  %21 = load i8*, i8** %dest_data, align 8, !dbg !2812
  %cmp11 = icmp eq i8* %21, null, !dbg !2813
  br i1 %cmp11, label %if.end, label %if.then12, !dbg !2814

if.then12:                                        ; preds = %land.lhs.true, %if.then
  %22 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2815
  %layers13 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %22, i32 0, i32 0, !dbg !2817
  %23 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers13, align 8, !dbg !2817
  %24 = load i32, i32* %src_i.addr, align 4, !dbg !2818
  %idxprom14 = sext i32 %24 to i64, !dbg !2815
  %arrayidx15 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %23, i64 %idxprom14, !dbg !2815
  %type16 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx15, i32 0, i32 0, !dbg !2819
  %25 = load i32, i32* %type16, align 8, !dbg !2819
  %call17 = call i8* @layerType_getName(i32 %25), !dbg !2820
  %26 = load i8*, i8** %src_data, align 8, !dbg !2821
  %27 = load i8*, i8** %dest_data, align 8, !dbg !2822
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__func__.CustomData_copy_data_layer, i64 0, i64 0), i8* %call17, i8* %26, i8* %27), !dbg !2823
  br label %if.end, !dbg !2824

if.end:                                           ; preds = %if.then12, %land.lhs.true
  br label %if.end31, !dbg !2825

if.end19:                                         ; preds = %lor.lhs.false
  %28 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2826
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %28, i32 0, i32 4, !dbg !2828
  %29 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !2828
  %tobool20 = icmp ne void (i8*, i8*, i32)* %29, null, !dbg !2826
  br i1 %tobool20, label %if.then21, label %if.else, !dbg !2829

if.then21:                                        ; preds = %if.end19
  %30 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2830
  %copy22 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %30, i32 0, i32 4, !dbg !2831
  %31 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy22, align 8, !dbg !2831
  %32 = load i8*, i8** %src_data, align 8, !dbg !2832
  %33 = load i32, i32* %src_offset, align 4, !dbg !2833
  %idx.ext = sext i32 %33 to i64, !dbg !2834
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 %idx.ext, !dbg !2834
  %34 = load i8*, i8** %dest_data, align 8, !dbg !2835
  %35 = load i32, i32* %dest_offset, align 4, !dbg !2836
  %idx.ext23 = sext i32 %35 to i64, !dbg !2837
  %add.ptr24 = getelementptr inbounds i8, i8* %34, i64 %idx.ext23, !dbg !2837
  %36 = load i32, i32* %count.addr, align 4, !dbg !2838
  call void %31(i8* %add.ptr, i8* %add.ptr24, i32 %36), !dbg !2830
  br label %if.end31, !dbg !2830

if.else:                                          ; preds = %if.end19
  %37 = load i8*, i8** %dest_data, align 8, !dbg !2839
  %38 = load i32, i32* %dest_offset, align 4, !dbg !2840
  %idx.ext25 = sext i32 %38 to i64, !dbg !2841
  %add.ptr26 = getelementptr inbounds i8, i8* %37, i64 %idx.ext25, !dbg !2841
  %39 = load i8*, i8** %src_data, align 8, !dbg !2842
  %40 = load i32, i32* %src_offset, align 4, !dbg !2843
  %idx.ext27 = sext i32 %40 to i64, !dbg !2844
  %add.ptr28 = getelementptr inbounds i8, i8* %39, i64 %idx.ext27, !dbg !2844
  %41 = load i32, i32* %count.addr, align 4, !dbg !2845
  %42 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2846
  %size29 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %42, i32 0, i32 0, !dbg !2847
  %43 = load i32, i32* %size29, align 8, !dbg !2847
  %mul30 = mul nsw i32 %41, %43, !dbg !2848
  %conv = sext i32 %mul30 to i64, !dbg !2845
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr26, i8* align 1 %add.ptr28, i64 %conv, i1 false), !dbg !2849
  br label %if.end31

if.end31:                                         ; preds = %if.end, %if.else, %if.then21
  ret void, !dbg !2850
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_copy_data(%struct.CustomData* %source, %struct.CustomData* %dest, i32 %source_index, i32 %dest_index, i32 %count) #0 !dbg !2851 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %source_index.addr = alloca i32, align 4
  %dest_index.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %src_i = alloca i32, align 4
  %dest_i = alloca i32, align 4
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !2852, metadata !DIExpression()), !dbg !2853
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !2854, metadata !DIExpression()), !dbg !2855
  store i32 %source_index, i32* %source_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %source_index.addr, metadata !2856, metadata !DIExpression()), !dbg !2857
  store i32 %dest_index, i32* %dest_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dest_index.addr, metadata !2858, metadata !DIExpression()), !dbg !2859
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2860, metadata !DIExpression()), !dbg !2861
  call void @llvm.dbg.declare(metadata i32* %src_i, metadata !2862, metadata !DIExpression()), !dbg !2863
  call void @llvm.dbg.declare(metadata i32* %dest_i, metadata !2864, metadata !DIExpression()), !dbg !2865
  store i32 0, i32* %dest_i, align 4, !dbg !2866
  store i32 0, i32* %src_i, align 4, !dbg !2867
  br label %for.cond, !dbg !2869

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %src_i, align 4, !dbg !2870
  %1 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2872
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2873
  %2 = load i32, i32* %totlayer, align 4, !dbg !2873
  %cmp = icmp slt i32 %0, %2, !dbg !2874
  br i1 %cmp, label %for.body, label %for.end, !dbg !2875

for.body:                                         ; preds = %for.cond
  br label %while.cond, !dbg !2876

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32, i32* %dest_i, align 4, !dbg !2878
  %4 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !2879
  %totlayer1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 2, !dbg !2880
  %5 = load i32, i32* %totlayer1, align 4, !dbg !2880
  %cmp2 = icmp slt i32 %3, %5, !dbg !2881
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !2882

land.rhs:                                         ; preds = %while.cond
  %6 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !2883
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %6, i32 0, i32 0, !dbg !2884
  %7 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2884
  %8 = load i32, i32* %dest_i, align 4, !dbg !2885
  %idxprom = sext i32 %8 to i64, !dbg !2883
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %7, i64 %idxprom, !dbg !2883
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !2886
  %9 = load i32, i32* %type, align 8, !dbg !2886
  %10 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2887
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !2888
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !2888
  %12 = load i32, i32* %src_i, align 4, !dbg !2889
  %idxprom4 = sext i32 %12 to i64, !dbg !2887
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom4, !dbg !2887
  %type6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 0, !dbg !2890
  %13 = load i32, i32* %type6, align 8, !dbg !2890
  %cmp7 = icmp slt i32 %9, %13, !dbg !2891
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp7, %land.rhs ], !dbg !2892
  br i1 %14, label %while.body, label %while.end, !dbg !2876

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %dest_i, align 4, !dbg !2893
  %inc = add nsw i32 %15, 1, !dbg !2893
  store i32 %inc, i32* %dest_i, align 4, !dbg !2893
  br label %while.cond, !dbg !2876, !llvm.loop !2895

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %dest_i, align 4, !dbg !2897
  %17 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !2899
  %totlayer8 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %17, i32 0, i32 2, !dbg !2900
  %18 = load i32, i32* %totlayer8, align 4, !dbg !2900
  %cmp9 = icmp sge i32 %16, %18, !dbg !2901
  br i1 %cmp9, label %if.then, label %if.end, !dbg !2902

if.then:                                          ; preds = %while.end
  br label %for.end, !dbg !2903

if.end:                                           ; preds = %while.end
  %19 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !2904
  %layers10 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %19, i32 0, i32 0, !dbg !2906
  %20 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers10, align 8, !dbg !2906
  %21 = load i32, i32* %dest_i, align 4, !dbg !2907
  %idxprom11 = sext i32 %21 to i64, !dbg !2904
  %arrayidx12 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %20, i64 %idxprom11, !dbg !2904
  %type13 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx12, i32 0, i32 0, !dbg !2908
  %22 = load i32, i32* %type13, align 8, !dbg !2908
  %23 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2909
  %layers14 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %23, i32 0, i32 0, !dbg !2910
  %24 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers14, align 8, !dbg !2910
  %25 = load i32, i32* %src_i, align 4, !dbg !2911
  %idxprom15 = sext i32 %25 to i64, !dbg !2909
  %arrayidx16 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %24, i64 %idxprom15, !dbg !2909
  %type17 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx16, i32 0, i32 0, !dbg !2912
  %26 = load i32, i32* %type17, align 8, !dbg !2912
  %cmp18 = icmp eq i32 %22, %26, !dbg !2913
  br i1 %cmp18, label %if.then19, label %if.end21, !dbg !2914

if.then19:                                        ; preds = %if.end
  %27 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !2915
  %28 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !2917
  %29 = load i32, i32* %src_i, align 4, !dbg !2918
  %30 = load i32, i32* %dest_i, align 4, !dbg !2919
  %31 = load i32, i32* %source_index.addr, align 4, !dbg !2920
  %32 = load i32, i32* %dest_index.addr, align 4, !dbg !2921
  %33 = load i32, i32* %count.addr, align 4, !dbg !2922
  call void @CustomData_copy_data_layer(%struct.CustomData* %27, %struct.CustomData* %28, i32 %29, i32 %30, i32 %31, i32 %32, i32 %33), !dbg !2923
  %34 = load i32, i32* %dest_i, align 4, !dbg !2924
  %inc20 = add nsw i32 %34, 1, !dbg !2924
  store i32 %inc20, i32* %dest_i, align 4, !dbg !2924
  br label %if.end21, !dbg !2925

if.end21:                                         ; preds = %if.then19, %if.end
  br label %for.inc, !dbg !2926

for.inc:                                          ; preds = %if.end21
  %35 = load i32, i32* %src_i, align 4, !dbg !2927
  %inc22 = add nsw i32 %35, 1, !dbg !2927
  store i32 %inc22, i32* %src_i, align 4, !dbg !2927
  br label %for.cond, !dbg !2928, !llvm.loop !2929

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !2931
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_free_elem(%struct.CustomData* %data, i32 %index, i32 %count) #0 !dbg !2932 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %index.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %offset = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !2933, metadata !DIExpression()), !dbg !2934
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !2935, metadata !DIExpression()), !dbg !2936
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2937, metadata !DIExpression()), !dbg !2938
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2939, metadata !DIExpression()), !dbg !2940
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !2941, metadata !DIExpression()), !dbg !2942
  store i32 0, i32* %i, align 4, !dbg !2943
  br label %for.cond, !dbg !2945

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2946
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2948
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !2949
  %2 = load i32, i32* %totlayer, align 4, !dbg !2949
  %cmp = icmp slt i32 %0, %2, !dbg !2950
  br i1 %cmp, label %for.body, label %for.end, !dbg !2951

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2952
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !2955
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !2955
  %5 = load i32, i32* %i, align 4, !dbg !2956
  %idxprom = sext i32 %5 to i64, !dbg !2952
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !2952
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 2, !dbg !2957
  %6 = load i32, i32* %flag, align 8, !dbg !2957
  %and = and i32 %6, 2, !dbg !2958
  %tobool = icmp ne i32 %and, 0, !dbg !2958
  br i1 %tobool, label %if.end12, label %if.then, !dbg !2959

if.then:                                          ; preds = %for.body
  %7 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2960
  %layers1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %7, i32 0, i32 0, !dbg !2962
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers1, align 8, !dbg !2962
  %9 = load i32, i32* %i, align 4, !dbg !2963
  %idxprom2 = sext i32 %9 to i64, !dbg !2960
  %arrayidx3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i64 %idxprom2, !dbg !2960
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx3, i32 0, i32 0, !dbg !2964
  %10 = load i32, i32* %type, align 8, !dbg !2964
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %10), !dbg !2965
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2966
  %11 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2967
  %free = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %11, i32 0, i32 5, !dbg !2969
  %12 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free, align 8, !dbg !2969
  %tobool4 = icmp ne void (i8*, i32, i32)* %12, null, !dbg !2967
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !2970

if.then5:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !2971, metadata !DIExpression()), !dbg !2973
  %13 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2974
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %13, i32 0, i32 0, !dbg !2975
  %14 = load i32, i32* %size, align 8, !dbg !2975
  %15 = load i32, i32* %index.addr, align 4, !dbg !2976
  %mul = mul nsw i32 %14, %15, !dbg !2977
  store i32 %mul, i32* %offset, align 4, !dbg !2973
  %16 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2978
  %free6 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %16, i32 0, i32 5, !dbg !2979
  %17 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free6, align 8, !dbg !2979
  %18 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !2980
  %layers7 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %18, i32 0, i32 0, !dbg !2981
  %19 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers7, align 8, !dbg !2981
  %20 = load i32, i32* %i, align 4, !dbg !2982
  %idxprom8 = sext i32 %20 to i64, !dbg !2980
  %arrayidx9 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %19, i64 %idxprom8, !dbg !2980
  %data10 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx9, i32 0, i32 9, !dbg !2983
  %21 = load i8*, i8** %data10, align 8, !dbg !2983
  %22 = load i32, i32* %offset, align 4, !dbg !2984
  %idx.ext = sext i32 %22 to i64, !dbg !2985
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %idx.ext, !dbg !2985
  %23 = load i32, i32* %count.addr, align 4, !dbg !2986
  %24 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !2987
  %size11 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %24, i32 0, i32 0, !dbg !2988
  %25 = load i32, i32* %size11, align 8, !dbg !2988
  call void %17(i8* %add.ptr, i32 %23, i32 %25), !dbg !2978
  br label %if.end, !dbg !2989

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end12, !dbg !2990

if.end12:                                         ; preds = %if.end, %for.body
  br label %for.inc, !dbg !2991

for.inc:                                          ; preds = %if.end12
  %26 = load i32, i32* %i, align 4, !dbg !2992
  %inc = add nsw i32 %26, 1, !dbg !2992
  store i32 %inc, i32* %i, align 4, !dbg !2992
  br label %for.cond, !dbg !2993, !llvm.loop !2994

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2996
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_interp(%struct.CustomData* %source, %struct.CustomData* %dest, i32* %src_indices, float* %weights, float* %sub_weights, i32 %count, i32 %dest_index) #0 !dbg !2997 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %src_indices.addr = alloca i32*, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest_index.addr = alloca i32, align 4
  %src_i = alloca i32, align 4
  %dest_i = alloca i32, align 4
  %dest_offset = alloca i32, align 4
  %j = alloca i32, align 4
  %source_buf = alloca [100 x i8*], align 16
  %sources = alloca i8**, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %src_data = alloca i8*, align 8
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !3000, metadata !DIExpression()), !dbg !3001
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !3002, metadata !DIExpression()), !dbg !3003
  store i32* %src_indices, i32** %src_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %src_indices.addr, metadata !3004, metadata !DIExpression()), !dbg !3005
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !3006, metadata !DIExpression()), !dbg !3007
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !3008, metadata !DIExpression()), !dbg !3009
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !3010, metadata !DIExpression()), !dbg !3011
  store i32 %dest_index, i32* %dest_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dest_index.addr, metadata !3012, metadata !DIExpression()), !dbg !3013
  call void @llvm.dbg.declare(metadata i32* %src_i, metadata !3014, metadata !DIExpression()), !dbg !3015
  call void @llvm.dbg.declare(metadata i32* %dest_i, metadata !3016, metadata !DIExpression()), !dbg !3017
  call void @llvm.dbg.declare(metadata i32* %dest_offset, metadata !3018, metadata !DIExpression()), !dbg !3019
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3020, metadata !DIExpression()), !dbg !3021
  call void @llvm.dbg.declare(metadata [100 x i8*]* %source_buf, metadata !3022, metadata !DIExpression()), !dbg !3026
  call void @llvm.dbg.declare(metadata i8*** %sources, metadata !3027, metadata !DIExpression()), !dbg !3028
  %arraydecay = getelementptr inbounds [100 x i8*], [100 x i8*]* %source_buf, i64 0, i64 0, !dbg !3029
  store i8** %arraydecay, i8*** %sources, align 8, !dbg !3028
  %0 = load i32, i32* %count.addr, align 4, !dbg !3030
  %cmp = icmp sgt i32 %0, 100, !dbg !3032
  br i1 %cmp, label %if.then, label %if.end, !dbg !3033

if.then:                                          ; preds = %entry
  %1 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !3034
  %2 = load i32, i32* %count.addr, align 4, !dbg !3035
  %conv = sext i32 %2 to i64, !dbg !3035
  %mul = mul i64 8, %conv, !dbg !3036
  %call = call i8* %1(i64 %mul, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0)), !dbg !3034
  %3 = bitcast i8* %call to i8**, !dbg !3034
  store i8** %3, i8*** %sources, align 8, !dbg !3037
  br label %if.end, !dbg !3038

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %dest_i, align 4, !dbg !3039
  store i32 0, i32* %src_i, align 4, !dbg !3040
  br label %for.cond, !dbg !3042

for.cond:                                         ; preds = %for.inc59, %if.end
  %4 = load i32, i32* %src_i, align 4, !dbg !3043
  %5 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !3045
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 2, !dbg !3046
  %6 = load i32, i32* %totlayer, align 4, !dbg !3046
  %cmp1 = icmp slt i32 %4, %6, !dbg !3047
  br i1 %cmp1, label %for.body, label %for.end61, !dbg !3048

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !3049, metadata !DIExpression()), !dbg !3051
  %7 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !3052
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %7, i32 0, i32 0, !dbg !3053
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3053
  %9 = load i32, i32* %src_i, align 4, !dbg !3054
  %idxprom = sext i32 %9 to i64, !dbg !3052
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i64 %idxprom, !dbg !3052
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !3055
  %10 = load i32, i32* %type, align 8, !dbg !3055
  %call3 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %10), !dbg !3056
  store %struct.LayerTypeInfo* %call3, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3051
  %11 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3057
  %interp = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %11, i32 0, i32 6, !dbg !3059
  %12 = load void (i8**, float*, float*, i32, i8*)*, void (i8**, float*, float*, i32, i8*)** %interp, align 8, !dbg !3059
  %tobool = icmp ne void (i8**, float*, float*, i32, i8*)* %12, null, !dbg !3057
  br i1 %tobool, label %if.end5, label %if.then4, !dbg !3060

if.then4:                                         ; preds = %for.body
  br label %for.inc59, !dbg !3061

if.end5:                                          ; preds = %for.body
  br label %while.cond, !dbg !3062

while.cond:                                       ; preds = %while.body, %if.end5
  %13 = load i32, i32* %dest_i, align 4, !dbg !3063
  %14 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !3064
  %totlayer6 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 2, !dbg !3065
  %15 = load i32, i32* %totlayer6, align 4, !dbg !3065
  %cmp7 = icmp slt i32 %13, %15, !dbg !3066
  br i1 %cmp7, label %land.rhs, label %land.end, !dbg !3067

land.rhs:                                         ; preds = %while.cond
  %16 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !3068
  %layers9 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %16, i32 0, i32 0, !dbg !3069
  %17 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers9, align 8, !dbg !3069
  %18 = load i32, i32* %dest_i, align 4, !dbg !3070
  %idxprom10 = sext i32 %18 to i64, !dbg !3068
  %arrayidx11 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %17, i64 %idxprom10, !dbg !3068
  %type12 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx11, i32 0, i32 0, !dbg !3071
  %19 = load i32, i32* %type12, align 8, !dbg !3071
  %20 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !3072
  %layers13 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %20, i32 0, i32 0, !dbg !3073
  %21 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers13, align 8, !dbg !3073
  %22 = load i32, i32* %src_i, align 4, !dbg !3074
  %idxprom14 = sext i32 %22 to i64, !dbg !3072
  %arrayidx15 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %21, i64 %idxprom14, !dbg !3072
  %type16 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx15, i32 0, i32 0, !dbg !3075
  %23 = load i32, i32* %type16, align 8, !dbg !3075
  %cmp17 = icmp slt i32 %19, %23, !dbg !3076
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %24 = phi i1 [ false, %while.cond ], [ %cmp17, %land.rhs ], !dbg !3077
  br i1 %24, label %while.body, label %while.end, !dbg !3062

while.body:                                       ; preds = %land.end
  %25 = load i32, i32* %dest_i, align 4, !dbg !3078
  %inc = add nsw i32 %25, 1, !dbg !3078
  store i32 %inc, i32* %dest_i, align 4, !dbg !3078
  br label %while.cond, !dbg !3062, !llvm.loop !3080

while.end:                                        ; preds = %land.end
  %26 = load i32, i32* %dest_i, align 4, !dbg !3082
  %27 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !3084
  %totlayer19 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %27, i32 0, i32 2, !dbg !3085
  %28 = load i32, i32* %totlayer19, align 4, !dbg !3085
  %cmp20 = icmp sge i32 %26, %28, !dbg !3086
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !3087

if.then22:                                        ; preds = %while.end
  br label %for.end61, !dbg !3088

if.end23:                                         ; preds = %while.end
  %29 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !3089
  %layers24 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %29, i32 0, i32 0, !dbg !3091
  %30 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers24, align 8, !dbg !3091
  %31 = load i32, i32* %dest_i, align 4, !dbg !3092
  %idxprom25 = sext i32 %31 to i64, !dbg !3089
  %arrayidx26 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %30, i64 %idxprom25, !dbg !3089
  %type27 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx26, i32 0, i32 0, !dbg !3093
  %32 = load i32, i32* %type27, align 8, !dbg !3093
  %33 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !3094
  %layers28 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %33, i32 0, i32 0, !dbg !3095
  %34 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers28, align 8, !dbg !3095
  %35 = load i32, i32* %src_i, align 4, !dbg !3096
  %idxprom29 = sext i32 %35 to i64, !dbg !3094
  %arrayidx30 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %34, i64 %idxprom29, !dbg !3094
  %type31 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx30, i32 0, i32 0, !dbg !3097
  %36 = load i32, i32* %type31, align 8, !dbg !3097
  %cmp32 = icmp eq i32 %32, %36, !dbg !3098
  br i1 %cmp32, label %if.then34, label %if.end58, !dbg !3099

if.then34:                                        ; preds = %if.end23
  call void @llvm.dbg.declare(metadata i8** %src_data, metadata !3100, metadata !DIExpression()), !dbg !3102
  %37 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !3103
  %layers35 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %37, i32 0, i32 0, !dbg !3104
  %38 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers35, align 8, !dbg !3104
  %39 = load i32, i32* %src_i, align 4, !dbg !3105
  %idxprom36 = sext i32 %39 to i64, !dbg !3103
  %arrayidx37 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %38, i64 %idxprom36, !dbg !3103
  %data = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx37, i32 0, i32 9, !dbg !3106
  %40 = load i8*, i8** %data, align 8, !dbg !3106
  store i8* %40, i8** %src_data, align 8, !dbg !3102
  store i32 0, i32* %j, align 4, !dbg !3107
  br label %for.cond38, !dbg !3109

for.cond38:                                       ; preds = %for.inc, %if.then34
  %41 = load i32, i32* %j, align 4, !dbg !3110
  %42 = load i32, i32* %count.addr, align 4, !dbg !3112
  %cmp39 = icmp slt i32 %41, %42, !dbg !3113
  br i1 %cmp39, label %for.body41, label %for.end, !dbg !3114

for.body41:                                       ; preds = %for.cond38
  %43 = load i8*, i8** %src_data, align 8, !dbg !3115
  %44 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3117
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %44, i32 0, i32 0, !dbg !3118
  %45 = load i32, i32* %size, align 8, !dbg !3118
  %46 = load i32*, i32** %src_indices.addr, align 8, !dbg !3119
  %47 = load i32, i32* %j, align 4, !dbg !3120
  %idxprom42 = sext i32 %47 to i64, !dbg !3119
  %arrayidx43 = getelementptr inbounds i32, i32* %46, i64 %idxprom42, !dbg !3119
  %48 = load i32, i32* %arrayidx43, align 4, !dbg !3119
  %mul44 = mul nsw i32 %45, %48, !dbg !3121
  %idx.ext = sext i32 %mul44 to i64, !dbg !3122
  %add.ptr = getelementptr inbounds i8, i8* %43, i64 %idx.ext, !dbg !3122
  %49 = load i8**, i8*** %sources, align 8, !dbg !3123
  %50 = load i32, i32* %j, align 4, !dbg !3124
  %idxprom45 = sext i32 %50 to i64, !dbg !3123
  %arrayidx46 = getelementptr inbounds i8*, i8** %49, i64 %idxprom45, !dbg !3123
  store i8* %add.ptr, i8** %arrayidx46, align 8, !dbg !3125
  br label %for.inc, !dbg !3126

for.inc:                                          ; preds = %for.body41
  %51 = load i32, i32* %j, align 4, !dbg !3127
  %inc47 = add nsw i32 %51, 1, !dbg !3127
  store i32 %inc47, i32* %j, align 4, !dbg !3127
  br label %for.cond38, !dbg !3128, !llvm.loop !3129

for.end:                                          ; preds = %for.cond38
  %52 = load i32, i32* %dest_index.addr, align 4, !dbg !3131
  %53 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3132
  %size48 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %53, i32 0, i32 0, !dbg !3133
  %54 = load i32, i32* %size48, align 8, !dbg !3133
  %mul49 = mul nsw i32 %52, %54, !dbg !3134
  store i32 %mul49, i32* %dest_offset, align 4, !dbg !3135
  %55 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3136
  %interp50 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %55, i32 0, i32 6, !dbg !3137
  %56 = load void (i8**, float*, float*, i32, i8*)*, void (i8**, float*, float*, i32, i8*)** %interp50, align 8, !dbg !3137
  %57 = load i8**, i8*** %sources, align 8, !dbg !3138
  %58 = load float*, float** %weights.addr, align 8, !dbg !3139
  %59 = load float*, float** %sub_weights.addr, align 8, !dbg !3140
  %60 = load i32, i32* %count.addr, align 4, !dbg !3141
  %61 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !3142
  %layers51 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %61, i32 0, i32 0, !dbg !3143
  %62 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers51, align 8, !dbg !3143
  %63 = load i32, i32* %dest_i, align 4, !dbg !3144
  %idxprom52 = sext i32 %63 to i64, !dbg !3142
  %arrayidx53 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %62, i64 %idxprom52, !dbg !3142
  %data54 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx53, i32 0, i32 9, !dbg !3145
  %64 = load i8*, i8** %data54, align 8, !dbg !3145
  %65 = load i32, i32* %dest_offset, align 4, !dbg !3146
  %idx.ext55 = sext i32 %65 to i64, !dbg !3147
  %add.ptr56 = getelementptr inbounds i8, i8* %64, i64 %idx.ext55, !dbg !3147
  call void %56(i8** %57, float* %58, float* %59, i32 %60, i8* %add.ptr56), !dbg !3136
  %66 = load i32, i32* %dest_i, align 4, !dbg !3148
  %inc57 = add nsw i32 %66, 1, !dbg !3148
  store i32 %inc57, i32* %dest_i, align 4, !dbg !3148
  br label %if.end58, !dbg !3149

if.end58:                                         ; preds = %for.end, %if.end23
  br label %for.inc59, !dbg !3150

for.inc59:                                        ; preds = %if.end58, %if.then4
  %67 = load i32, i32* %src_i, align 4, !dbg !3151
  %inc60 = add nsw i32 %67, 1, !dbg !3151
  store i32 %inc60, i32* %src_i, align 4, !dbg !3151
  br label %for.cond, !dbg !3152, !llvm.loop !3153

for.end61:                                        ; preds = %if.then22, %for.cond
  %68 = load i32, i32* %count.addr, align 4, !dbg !3155
  %cmp62 = icmp sgt i32 %68, 100, !dbg !3157
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !3158

if.then64:                                        ; preds = %for.end61
  %69 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3159
  %70 = load i8**, i8*** %sources, align 8, !dbg !3160
  %71 = bitcast i8** %70 to i8*, !dbg !3160
  call void %69(i8* %71), !dbg !3159
  br label %if.end65, !dbg !3159

if.end65:                                         ; preds = %if.then64, %for.end61
  ret void, !dbg !3161
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_swap(%struct.CustomData* %data, i32 %index, i32* %corner_indices) #0 !dbg !3162 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %index.addr = alloca i32, align 4
  %corner_indices.addr = alloca i32*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3165, metadata !DIExpression()), !dbg !3166
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3167, metadata !DIExpression()), !dbg !3168
  store i32* %corner_indices, i32** %corner_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %corner_indices.addr, metadata !3169, metadata !DIExpression()), !dbg !3170
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !3171, metadata !DIExpression()), !dbg !3172
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3173, metadata !DIExpression()), !dbg !3174
  store i32 0, i32* %i, align 4, !dbg !3175
  br label %for.cond, !dbg !3177

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3178
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3180
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !3181
  %2 = load i32, i32* %totlayer, align 4, !dbg !3181
  %cmp = icmp slt i32 %0, %2, !dbg !3182
  br i1 %cmp, label %for.body, label %for.end, !dbg !3183

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3184
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !3186
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3186
  %5 = load i32, i32* %i, align 4, !dbg !3187
  %idxprom = sext i32 %5 to i64, !dbg !3184
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !3184
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !3188
  %6 = load i32, i32* %type, align 8, !dbg !3188
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %6), !dbg !3189
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3190
  %7 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3191
  %swap = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %7, i32 0, i32 7, !dbg !3193
  %8 = load void (i8*, i32*)*, void (i8*, i32*)** %swap, align 8, !dbg !3193
  %tobool = icmp ne void (i8*, i32*)* %8, null, !dbg !3191
  br i1 %tobool, label %if.then, label %if.end, !dbg !3194

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3195, metadata !DIExpression()), !dbg !3197
  %9 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3198
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %9, i32 0, i32 0, !dbg !3199
  %10 = load i32, i32* %size, align 8, !dbg !3199
  %11 = load i32, i32* %index.addr, align 4, !dbg !3200
  %mul = mul nsw i32 %10, %11, !dbg !3201
  store i32 %mul, i32* %offset, align 4, !dbg !3197
  %12 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3202
  %swap1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %12, i32 0, i32 7, !dbg !3203
  %13 = load void (i8*, i32*)*, void (i8*, i32*)** %swap1, align 8, !dbg !3203
  %14 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3204
  %layers2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 0, !dbg !3205
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers2, align 8, !dbg !3205
  %16 = load i32, i32* %i, align 4, !dbg !3206
  %idxprom3 = sext i32 %16 to i64, !dbg !3204
  %arrayidx4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i64 %idxprom3, !dbg !3204
  %data5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx4, i32 0, i32 9, !dbg !3207
  %17 = load i8*, i8** %data5, align 8, !dbg !3207
  %18 = load i32, i32* %offset, align 4, !dbg !3208
  %idx.ext = sext i32 %18 to i64, !dbg !3209
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %idx.ext, !dbg !3209
  %19 = load i32*, i32** %corner_indices.addr, align 8, !dbg !3210
  call void %13(i8* %add.ptr, i32* %19), !dbg !3202
  br label %if.end, !dbg !3211

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3212

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %i, align 4, !dbg !3213
  %inc = add nsw i32 %20, 1, !dbg !3213
  store i32 %inc, i32* %i, align 4, !dbg !3213
  br label %for.cond, !dbg !3214, !llvm.loop !3215

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3217
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_get(%struct.CustomData* %data, i32 %index, i32 %type) #0 !dbg !3218 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %index.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %offset = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3221, metadata !DIExpression()), !dbg !3222
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3223, metadata !DIExpression()), !dbg !3224
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3225, metadata !DIExpression()), !dbg !3226
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3227, metadata !DIExpression()), !dbg !3228
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3229, metadata !DIExpression()), !dbg !3230
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3231
  %1 = load i32, i32* %type.addr, align 4, !dbg !3232
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !3233
  store i32 %call, i32* %layer_index, align 4, !dbg !3234
  %2 = load i32, i32* %layer_index, align 4, !dbg !3235
  %cmp = icmp eq i32 %2, -1, !dbg !3237
  br i1 %cmp, label %if.then, label %if.end, !dbg !3238

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !3239
  br label %return, !dbg !3239

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %type.addr, align 4, !dbg !3240
  %call1 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %3), !dbg !3241
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %call1, i32 0, i32 0, !dbg !3242
  %4 = load i32, i32* %size, align 8, !dbg !3242
  %5 = load i32, i32* %index.addr, align 4, !dbg !3243
  %mul = mul nsw i32 %4, %5, !dbg !3244
  store i32 %mul, i32* %offset, align 4, !dbg !3245
  %6 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3246
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %6, i32 0, i32 0, !dbg !3247
  %7 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3247
  %8 = load i32, i32* %layer_index, align 4, !dbg !3248
  %idxprom = sext i32 %8 to i64, !dbg !3246
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %7, i64 %idxprom, !dbg !3246
  %data2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 9, !dbg !3249
  %9 = load i8*, i8** %data2, align 8, !dbg !3249
  %10 = load i32, i32* %offset, align 4, !dbg !3250
  %idx.ext = sext i32 %10 to i64, !dbg !3251
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %idx.ext, !dbg !3251
  store i8* %add.ptr, i8** %retval, align 8, !dbg !3252
  br label %return, !dbg !3252

return:                                           ; preds = %if.end, %if.then
  %11 = load i8*, i8** %retval, align 8, !dbg !3253
  ret i8* %11, !dbg !3253
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_get_n(%struct.CustomData* %data, i32 %type, i32 %index, i32 %n) #0 !dbg !3254 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3257, metadata !DIExpression()), !dbg !3258
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3259, metadata !DIExpression()), !dbg !3260
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3261, metadata !DIExpression()), !dbg !3262
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3263, metadata !DIExpression()), !dbg !3264
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3265, metadata !DIExpression()), !dbg !3266
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3267, metadata !DIExpression()), !dbg !3268
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3269
  %typemap = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 1, !dbg !3270
  %1 = load i32, i32* %type.addr, align 4, !dbg !3271
  %idxprom = sext i32 %1 to i64, !dbg !3269
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %typemap, i64 0, i64 %idxprom, !dbg !3269
  %2 = load i32, i32* %arrayidx, align 4, !dbg !3269
  store i32 %2, i32* %layer_index, align 4, !dbg !3272
  %3 = load i32, i32* %layer_index, align 4, !dbg !3273
  %cmp = icmp eq i32 %3, -1, !dbg !3275
  br i1 %cmp, label %if.then, label %if.end, !dbg !3276

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !3277
  br label %return, !dbg !3277

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %type.addr, align 4, !dbg !3278
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %4), !dbg !3279
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %call, i32 0, i32 0, !dbg !3280
  %5 = load i32, i32* %size, align 8, !dbg !3280
  %6 = load i32, i32* %index.addr, align 4, !dbg !3281
  %mul = mul nsw i32 %5, %6, !dbg !3282
  store i32 %mul, i32* %offset, align 4, !dbg !3283
  %7 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3284
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %7, i32 0, i32 0, !dbg !3285
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3285
  %9 = load i32, i32* %layer_index, align 4, !dbg !3286
  %10 = load i32, i32* %n.addr, align 4, !dbg !3287
  %add = add nsw i32 %9, %10, !dbg !3288
  %idxprom1 = sext i32 %add to i64, !dbg !3284
  %arrayidx2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i64 %idxprom1, !dbg !3284
  %data3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx2, i32 0, i32 9, !dbg !3289
  %11 = load i8*, i8** %data3, align 8, !dbg !3289
  %12 = load i32, i32* %offset, align 4, !dbg !3290
  %idx.ext = sext i32 %12 to i64, !dbg !3291
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext, !dbg !3291
  store i8* %add.ptr, i8** %retval, align 8, !dbg !3292
  br label %return, !dbg !3292

return:                                           ; preds = %if.end, %if.then
  %13 = load i8*, i8** %retval, align 8, !dbg !3293
  ret i8* %13, !dbg !3293
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_get_layer(%struct.CustomData* %data, i32 %type) #0 !dbg !3294 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3297, metadata !DIExpression()), !dbg !3298
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3299, metadata !DIExpression()), !dbg !3300
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3301, metadata !DIExpression()), !dbg !3302
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3303
  %1 = load i32, i32* %type.addr, align 4, !dbg !3304
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !3305
  store i32 %call, i32* %layer_index, align 4, !dbg !3302
  %2 = load i32, i32* %layer_index, align 4, !dbg !3306
  %cmp = icmp eq i32 %2, -1, !dbg !3308
  br i1 %cmp, label %if.then, label %if.end, !dbg !3309

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !3310
  br label %return, !dbg !3310

if.end:                                           ; preds = %entry
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3311
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !3312
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3312
  %5 = load i32, i32* %layer_index, align 4, !dbg !3313
  %idxprom = sext i32 %5 to i64, !dbg !3311
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !3311
  %data1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 9, !dbg !3314
  %6 = load i8*, i8** %data1, align 8, !dbg !3314
  store i8* %6, i8** %retval, align 8, !dbg !3315
  br label %return, !dbg !3315

return:                                           ; preds = %if.end, %if.then
  %7 = load i8*, i8** %retval, align 8, !dbg !3316
  ret i8* %7, !dbg !3316
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_get_layer_n(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !3317 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3318, metadata !DIExpression()), !dbg !3319
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3320, metadata !DIExpression()), !dbg !3321
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3322, metadata !DIExpression()), !dbg !3323
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3324, metadata !DIExpression()), !dbg !3325
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3326
  %1 = load i32, i32* %type.addr, align 4, !dbg !3327
  %2 = load i32, i32* %n.addr, align 4, !dbg !3328
  %call = call i32 @CustomData_get_layer_index_n(%struct.CustomData* %0, i32 %1, i32 %2), !dbg !3329
  store i32 %call, i32* %layer_index, align 4, !dbg !3325
  %3 = load i32, i32* %layer_index, align 4, !dbg !3330
  %cmp = icmp eq i32 %3, -1, !dbg !3332
  br i1 %cmp, label %if.then, label %if.end, !dbg !3333

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !3334
  br label %return, !dbg !3334

if.end:                                           ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3335
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !3336
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3336
  %6 = load i32, i32* %layer_index, align 4, !dbg !3337
  %idxprom = sext i32 %6 to i64, !dbg !3335
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !3335
  %data1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 9, !dbg !3338
  %7 = load i8*, i8** %data1, align 8, !dbg !3338
  store i8* %7, i8** %retval, align 8, !dbg !3339
  br label %return, !dbg !3339

return:                                           ; preds = %if.end, %if.then
  %8 = load i8*, i8** %retval, align 8, !dbg !3340
  ret i8* %8, !dbg !3340
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_offset(%struct.CustomData* %data, i32 %type) #0 !dbg !3341 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3342, metadata !DIExpression()), !dbg !3343
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3344, metadata !DIExpression()), !dbg !3345
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3346, metadata !DIExpression()), !dbg !3347
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3348
  %1 = load i32, i32* %type.addr, align 4, !dbg !3349
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !3350
  store i32 %call, i32* %layer_index, align 4, !dbg !3347
  %2 = load i32, i32* %layer_index, align 4, !dbg !3351
  %cmp = icmp eq i32 %2, -1, !dbg !3353
  br i1 %cmp, label %if.then, label %if.end, !dbg !3354

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !3355
  br label %return, !dbg !3355

if.end:                                           ; preds = %entry
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3356
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !3357
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3357
  %5 = load i32, i32* %layer_index, align 4, !dbg !3358
  %idxprom = sext i32 %5 to i64, !dbg !3356
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !3356
  %offset = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 1, !dbg !3359
  %6 = load i32, i32* %offset, align 4, !dbg !3359
  store i32 %6, i32* %retval, align 4, !dbg !3360
  br label %return, !dbg !3360

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !3361
  ret i32 %7, !dbg !3361
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_get_n_offset(%struct.CustomData* %data, i32 %type, i32 %n) #0 !dbg !3362 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3365, metadata !DIExpression()), !dbg !3366
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3367, metadata !DIExpression()), !dbg !3368
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3369, metadata !DIExpression()), !dbg !3370
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3371, metadata !DIExpression()), !dbg !3372
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3373
  %1 = load i32, i32* %type.addr, align 4, !dbg !3374
  %2 = load i32, i32* %n.addr, align 4, !dbg !3375
  %call = call i32 @CustomData_get_layer_index_n(%struct.CustomData* %0, i32 %1, i32 %2), !dbg !3376
  store i32 %call, i32* %layer_index, align 4, !dbg !3372
  %3 = load i32, i32* %layer_index, align 4, !dbg !3377
  %cmp = icmp eq i32 %3, -1, !dbg !3379
  br i1 %cmp, label %if.then, label %if.end, !dbg !3380

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !3381
  br label %return, !dbg !3381

if.end:                                           ; preds = %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3382
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !3383
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3383
  %6 = load i32, i32* %layer_index, align 4, !dbg !3384
  %idxprom = sext i32 %6 to i64, !dbg !3382
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !3382
  %offset = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 1, !dbg !3385
  %7 = load i32, i32* %offset, align 4, !dbg !3385
  store i32 %7, i32* %retval, align 4, !dbg !3386
  br label %return, !dbg !3386

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3387
  ret i32 %8, !dbg !3387
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_set_layer_name(%struct.CustomData* %data, i32 %type, i32 %n, i8* %name) #0 !dbg !3388 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3391, metadata !DIExpression()), !dbg !3392
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3393, metadata !DIExpression()), !dbg !3394
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3395, metadata !DIExpression()), !dbg !3396
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !3397, metadata !DIExpression()), !dbg !3398
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3399, metadata !DIExpression()), !dbg !3400
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3401
  %1 = load i32, i32* %type.addr, align 4, !dbg !3402
  %2 = load i32, i32* %n.addr, align 4, !dbg !3403
  %call = call i32 @CustomData_get_layer_index_n(%struct.CustomData* %0, i32 %1, i32 %2), !dbg !3404
  store i32 %call, i32* %layer_index, align 4, !dbg !3400
  %3 = load i32, i32* %layer_index, align 4, !dbg !3405
  %cmp = icmp eq i32 %3, -1, !dbg !3407
  br i1 %cmp, label %if.then, label %if.end, !dbg !3408

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3409
  br label %return, !dbg !3409

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %name.addr, align 8, !dbg !3410
  %tobool = icmp ne i8* %4, null, !dbg !3410
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !3412

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3413
  br label %return, !dbg !3413

if.end2:                                          ; preds = %if.end
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3414
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !3415
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3415
  %7 = load i32, i32* %layer_index, align 4, !dbg !3416
  %idxprom = sext i32 %7 to i64, !dbg !3414
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom, !dbg !3414
  %name3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 8, !dbg !3417
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name3, i64 0, i64 0, !dbg !3414
  %8 = load i8*, i8** %name.addr, align 8, !dbg !3418
  %call4 = call i8* @BLI_strncpy(i8* %arraydecay, i8* %8, i64 64), !dbg !3419
  store i8 1, i8* %retval, align 1, !dbg !3420
  br label %return, !dbg !3420

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !3421
  ret i8 %9, !dbg !3421
}

declare dso_local i8* @BLI_strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_set_layer(%struct.CustomData* %data, i32 %type, i8* %ptr) #0 !dbg !3422 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %ptr.addr = alloca i8*, align 8
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3425, metadata !DIExpression()), !dbg !3426
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3427, metadata !DIExpression()), !dbg !3428
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !3429, metadata !DIExpression()), !dbg !3430
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3431, metadata !DIExpression()), !dbg !3432
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3433
  %1 = load i32, i32* %type.addr, align 4, !dbg !3434
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !3435
  store i32 %call, i32* %layer_index, align 4, !dbg !3432
  %2 = load i32, i32* %layer_index, align 4, !dbg !3436
  %cmp = icmp eq i32 %2, -1, !dbg !3438
  br i1 %cmp, label %if.then, label %if.end, !dbg !3439

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !3440
  br label %return, !dbg !3440

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8, !dbg !3441
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3442
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !3443
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3443
  %6 = load i32, i32* %layer_index, align 4, !dbg !3444
  %idxprom = sext i32 %6 to i64, !dbg !3442
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !3442
  %data1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 9, !dbg !3445
  store i8* %3, i8** %data1, align 8, !dbg !3446
  %7 = load i8*, i8** %ptr.addr, align 8, !dbg !3447
  store i8* %7, i8** %retval, align 8, !dbg !3448
  br label %return, !dbg !3448

return:                                           ; preds = %if.end, %if.then
  %8 = load i8*, i8** %retval, align 8, !dbg !3449
  ret i8* %8, !dbg !3449
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_set_layer_n(%struct.CustomData* %data, i32 %type, i32 %n, i8* %ptr) #0 !dbg !3450 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %ptr.addr = alloca i8*, align 8
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3453, metadata !DIExpression()), !dbg !3454
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3455, metadata !DIExpression()), !dbg !3456
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3457, metadata !DIExpression()), !dbg !3458
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !3459, metadata !DIExpression()), !dbg !3460
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !3461, metadata !DIExpression()), !dbg !3462
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3463
  %1 = load i32, i32* %type.addr, align 4, !dbg !3464
  %2 = load i32, i32* %n.addr, align 4, !dbg !3465
  %call = call i32 @CustomData_get_layer_index_n(%struct.CustomData* %0, i32 %1, i32 %2), !dbg !3466
  store i32 %call, i32* %layer_index, align 4, !dbg !3462
  %3 = load i32, i32* %layer_index, align 4, !dbg !3467
  %cmp = icmp eq i32 %3, -1, !dbg !3469
  br i1 %cmp, label %if.then, label %if.end, !dbg !3470

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !3471
  br label %return, !dbg !3471

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %ptr.addr, align 8, !dbg !3472
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3473
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !3474
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3474
  %7 = load i32, i32* %layer_index, align 4, !dbg !3475
  %idxprom = sext i32 %7 to i64, !dbg !3473
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom, !dbg !3473
  %data1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 9, !dbg !3476
  store i8* %4, i8** %data1, align 8, !dbg !3477
  %8 = load i8*, i8** %ptr.addr, align 8, !dbg !3478
  store i8* %8, i8** %retval, align 8, !dbg !3479
  br label %return, !dbg !3479

return:                                           ; preds = %if.end, %if.then
  %9 = load i8*, i8** %retval, align 8, !dbg !3480
  ret i8* %9, !dbg !3480
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set(%struct.CustomData* %data, i32 %index, i32 %type, i8* %source) #0 !dbg !3481 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %index.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %source.addr = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3484, metadata !DIExpression()), !dbg !3485
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3486, metadata !DIExpression()), !dbg !3487
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3488, metadata !DIExpression()), !dbg !3489
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !3490, metadata !DIExpression()), !dbg !3491
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !3492, metadata !DIExpression()), !dbg !3493
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3494
  %1 = load i32, i32* %index.addr, align 4, !dbg !3495
  %2 = load i32, i32* %type.addr, align 4, !dbg !3496
  %call = call i8* @CustomData_get(%struct.CustomData* %0, i32 %1, i32 %2), !dbg !3497
  store i8* %call, i8** %dest, align 8, !dbg !3493
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !3498, metadata !DIExpression()), !dbg !3499
  %3 = load i32, i32* %type.addr, align 4, !dbg !3500
  %call1 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %3), !dbg !3501
  store %struct.LayerTypeInfo* %call1, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3499
  %4 = load i8*, i8** %dest, align 8, !dbg !3502
  %tobool = icmp ne i8* %4, null, !dbg !3502
  br i1 %tobool, label %if.end, label %if.then, !dbg !3504

if.then:                                          ; preds = %entry
  br label %if.end5, !dbg !3505

if.end:                                           ; preds = %entry
  %5 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3506
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %5, i32 0, i32 4, !dbg !3508
  %6 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !3508
  %tobool2 = icmp ne void (i8*, i8*, i32)* %6, null, !dbg !3506
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !3509

if.then3:                                         ; preds = %if.end
  %7 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3510
  %copy4 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %7, i32 0, i32 4, !dbg !3511
  %8 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy4, align 8, !dbg !3511
  %9 = load i8*, i8** %source.addr, align 8, !dbg !3512
  %10 = load i8*, i8** %dest, align 8, !dbg !3513
  call void %8(i8* %9, i8* %10, i32 1), !dbg !3510
  br label %if.end5, !dbg !3510

if.else:                                          ; preds = %if.end
  %11 = load i8*, i8** %dest, align 8, !dbg !3514
  %12 = load i8*, i8** %source.addr, align 8, !dbg !3515
  %13 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !3516
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %13, i32 0, i32 0, !dbg !3517
  %14 = load i32, i32* %size, align 8, !dbg !3517
  %conv = sext i32 %14 to i64, !dbg !3516
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %12, i64 %conv, i1 false), !dbg !3518
  br label %if.end5

if.end5:                                          ; preds = %if.then, %if.else, %if.then3
  ret void, !dbg !3519
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_to_bmeshpoly(%struct.CustomData* %fdata, %struct.CustomData* %pdata, %struct.CustomData* %ldata, i32 %totloop, i32 %totpoly) #0 !dbg !3520 {
entry:
  %fdata.addr = alloca %struct.CustomData*, align 8
  %pdata.addr = alloca %struct.CustomData*, align 8
  %ldata.addr = alloca %struct.CustomData*, align 8
  %totloop.addr = alloca i32, align 4
  %totpoly.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %fdata, %struct.CustomData** %fdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %fdata.addr, metadata !3523, metadata !DIExpression()), !dbg !3524
  store %struct.CustomData* %pdata, %struct.CustomData** %pdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %pdata.addr, metadata !3525, metadata !DIExpression()), !dbg !3526
  store %struct.CustomData* %ldata, %struct.CustomData** %ldata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %ldata.addr, metadata !3527, metadata !DIExpression()), !dbg !3528
  store i32 %totloop, i32* %totloop.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totloop.addr, metadata !3529, metadata !DIExpression()), !dbg !3530
  store i32 %totpoly, i32* %totpoly.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totpoly.addr, metadata !3531, metadata !DIExpression()), !dbg !3532
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3533, metadata !DIExpression()), !dbg !3534
  store i32 0, i32* %i, align 4, !dbg !3535
  br label %for.cond, !dbg !3537

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3538
  %1 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3540
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !3541
  %2 = load i32, i32* %totlayer, align 4, !dbg !3541
  %cmp = icmp slt i32 %0, %2, !dbg !3542
  br i1 %cmp, label %for.body, label %for.end, !dbg !3543

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3544
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !3547
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3547
  %5 = load i32, i32* %i, align 4, !dbg !3548
  %idxprom = sext i32 %5 to i64, !dbg !3544
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !3544
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !3549
  %6 = load i32, i32* %type, align 8, !dbg !3549
  %cmp1 = icmp eq i32 %6, 5, !dbg !3550
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3551

if.then:                                          ; preds = %for.body
  %7 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3552
  %8 = load i32, i32* %totpoly.addr, align 4, !dbg !3554
  %9 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3555
  %layers2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !3556
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers2, align 8, !dbg !3556
  %11 = load i32, i32* %i, align 4, !dbg !3557
  %idxprom3 = sext i32 %11 to i64, !dbg !3555
  %arrayidx4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom3, !dbg !3555
  %name = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx4, i32 0, i32 8, !dbg !3558
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !3555
  %call = call i8* @CustomData_add_layer_named(%struct.CustomData* %7, i32 15, i32 1, i8* null, i32 %8, i8* %arraydecay), !dbg !3559
  %12 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3560
  %13 = load i32, i32* %totloop.addr, align 4, !dbg !3561
  %14 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3562
  %layers5 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 0, !dbg !3563
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers5, align 8, !dbg !3563
  %16 = load i32, i32* %i, align 4, !dbg !3564
  %idxprom6 = sext i32 %16 to i64, !dbg !3562
  %arrayidx7 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i64 %idxprom6, !dbg !3562
  %name8 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx7, i32 0, i32 8, !dbg !3565
  %arraydecay9 = getelementptr inbounds [64 x i8], [64 x i8]* %name8, i64 0, i64 0, !dbg !3562
  %call10 = call i8* @CustomData_add_layer_named(%struct.CustomData* %12, i32 16, i32 1, i8* null, i32 %13, i8* %arraydecay9), !dbg !3566
  br label %if.end51, !dbg !3567

if.else:                                          ; preds = %for.body
  %17 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3568
  %layers11 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %17, i32 0, i32 0, !dbg !3570
  %18 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers11, align 8, !dbg !3570
  %19 = load i32, i32* %i, align 4, !dbg !3571
  %idxprom12 = sext i32 %19 to i64, !dbg !3568
  %arrayidx13 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %18, i64 %idxprom12, !dbg !3568
  %type14 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx13, i32 0, i32 0, !dbg !3572
  %20 = load i32, i32* %type14, align 8, !dbg !3572
  %cmp15 = icmp eq i32 %20, 6, !dbg !3573
  br i1 %cmp15, label %if.then16, label %if.else23, !dbg !3574

if.then16:                                        ; preds = %if.else
  %21 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3575
  %22 = load i32, i32* %totloop.addr, align 4, !dbg !3577
  %23 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3578
  %layers17 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %23, i32 0, i32 0, !dbg !3579
  %24 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers17, align 8, !dbg !3579
  %25 = load i32, i32* %i, align 4, !dbg !3580
  %idxprom18 = sext i32 %25 to i64, !dbg !3578
  %arrayidx19 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %24, i64 %idxprom18, !dbg !3578
  %name20 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx19, i32 0, i32 8, !dbg !3581
  %arraydecay21 = getelementptr inbounds [64 x i8], [64 x i8]* %name20, i64 0, i64 0, !dbg !3578
  %call22 = call i8* @CustomData_add_layer_named(%struct.CustomData* %21, i32 17, i32 1, i8* null, i32 %22, i8* %arraydecay21), !dbg !3582
  br label %if.end50, !dbg !3583

if.else23:                                        ; preds = %if.else
  %26 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3584
  %layers24 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %26, i32 0, i32 0, !dbg !3586
  %27 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers24, align 8, !dbg !3586
  %28 = load i32, i32* %i, align 4, !dbg !3587
  %idxprom25 = sext i32 %28 to i64, !dbg !3584
  %arrayidx26 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %27, i64 %idxprom25, !dbg !3584
  %type27 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx26, i32 0, i32 0, !dbg !3588
  %29 = load i32, i32* %type27, align 8, !dbg !3588
  %cmp28 = icmp eq i32 %29, 19, !dbg !3589
  br i1 %cmp28, label %if.then29, label %if.else36, !dbg !3590

if.then29:                                        ; preds = %if.else23
  %30 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3591
  %31 = load i32, i32* %totloop.addr, align 4, !dbg !3593
  %32 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3594
  %layers30 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %32, i32 0, i32 0, !dbg !3595
  %33 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers30, align 8, !dbg !3595
  %34 = load i32, i32* %i, align 4, !dbg !3596
  %idxprom31 = sext i32 %34 to i64, !dbg !3594
  %arrayidx32 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %33, i64 %idxprom31, !dbg !3594
  %name33 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx32, i32 0, i32 8, !dbg !3597
  %arraydecay34 = getelementptr inbounds [64 x i8], [64 x i8]* %name33, i64 0, i64 0, !dbg !3594
  %call35 = call i8* @CustomData_add_layer_named(%struct.CustomData* %30, i32 19, i32 1, i8* null, i32 %31, i8* %arraydecay34), !dbg !3598
  br label %if.end49, !dbg !3599

if.else36:                                        ; preds = %if.else23
  %35 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3600
  %layers37 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %35, i32 0, i32 0, !dbg !3602
  %36 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers37, align 8, !dbg !3602
  %37 = load i32, i32* %i, align 4, !dbg !3603
  %idxprom38 = sext i32 %37 to i64, !dbg !3600
  %arrayidx39 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %36, i64 %idxprom38, !dbg !3600
  %type40 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx39, i32 0, i32 0, !dbg !3604
  %38 = load i32, i32* %type40, align 8, !dbg !3604
  %cmp41 = icmp eq i32 %38, 40, !dbg !3605
  br i1 %cmp41, label %if.then42, label %if.end, !dbg !3606

if.then42:                                        ; preds = %if.else36
  %39 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3607
  %40 = load i32, i32* %totloop.addr, align 4, !dbg !3609
  %41 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3610
  %layers43 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %41, i32 0, i32 0, !dbg !3611
  %42 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers43, align 8, !dbg !3611
  %43 = load i32, i32* %i, align 4, !dbg !3612
  %idxprom44 = sext i32 %43 to i64, !dbg !3610
  %arrayidx45 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %42, i64 %idxprom44, !dbg !3610
  %name46 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx45, i32 0, i32 8, !dbg !3613
  %arraydecay47 = getelementptr inbounds [64 x i8], [64 x i8]* %name46, i64 0, i64 0, !dbg !3610
  %call48 = call i8* @CustomData_add_layer_named(%struct.CustomData* %39, i32 8, i32 1, i8* null, i32 %40, i8* %arraydecay47), !dbg !3614
  br label %if.end, !dbg !3615

if.end:                                           ; preds = %if.then42, %if.else36
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then29
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then16
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  br label %for.inc, !dbg !3616

for.inc:                                          ; preds = %if.end51
  %44 = load i32, i32* %i, align 4, !dbg !3617
  %inc = add nsw i32 %44, 1, !dbg !3617
  store i32 %inc, i32* %i, align 4, !dbg !3617
  br label %for.cond, !dbg !3618, !llvm.loop !3619

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3621
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_from_bmeshpoly(%struct.CustomData* %fdata, %struct.CustomData* %pdata, %struct.CustomData* %ldata, i32 %total) #0 !dbg !3622 {
entry:
  %fdata.addr = alloca %struct.CustomData*, align 8
  %pdata.addr = alloca %struct.CustomData*, align 8
  %ldata.addr = alloca %struct.CustomData*, align 8
  %total.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.CustomData* %fdata, %struct.CustomData** %fdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %fdata.addr, metadata !3625, metadata !DIExpression()), !dbg !3626
  store %struct.CustomData* %pdata, %struct.CustomData** %pdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %pdata.addr, metadata !3627, metadata !DIExpression()), !dbg !3628
  store %struct.CustomData* %ldata, %struct.CustomData** %ldata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %ldata.addr, metadata !3629, metadata !DIExpression()), !dbg !3630
  store i32 %total, i32* %total.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %total.addr, metadata !3631, metadata !DIExpression()), !dbg !3632
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3633, metadata !DIExpression()), !dbg !3634
  store i32 0, i32* %i, align 4, !dbg !3635
  br label %for.cond, !dbg !3637

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3638
  %1 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3640
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !3641
  %2 = load i32, i32* %totlayer, align 4, !dbg !3641
  %cmp = icmp slt i32 %0, %2, !dbg !3642
  br i1 %cmp, label %for.body, label %for.end, !dbg !3643

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3644
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !3647
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !3647
  %5 = load i32, i32* %i, align 4, !dbg !3648
  %idxprom = sext i32 %5 to i64, !dbg !3644
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !3644
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !3649
  %6 = load i32, i32* %type, align 8, !dbg !3649
  %cmp1 = icmp eq i32 %6, 15, !dbg !3650
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3651

if.then:                                          ; preds = %for.body
  %7 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3652
  %8 = load i32, i32* %total.addr, align 4, !dbg !3654
  %9 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3655
  %layers2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !3656
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers2, align 8, !dbg !3656
  %11 = load i32, i32* %i, align 4, !dbg !3657
  %idxprom3 = sext i32 %11 to i64, !dbg !3655
  %arrayidx4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom3, !dbg !3655
  %name = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx4, i32 0, i32 8, !dbg !3658
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !3655
  %call = call i8* @CustomData_add_layer_named(%struct.CustomData* %7, i32 5, i32 1, i8* null, i32 %8, i8* %arraydecay), !dbg !3659
  br label %if.end, !dbg !3660

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3661

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !3662
  %inc = add nsw i32 %12, 1, !dbg !3662
  store i32 %inc, i32* %i, align 4, !dbg !3662
  br label %for.cond, !dbg !3663, !llvm.loop !3664

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !3666
  br label %for.cond5, !dbg !3668

for.cond5:                                        ; preds = %for.inc63, %for.end
  %13 = load i32, i32* %i, align 4, !dbg !3669
  %14 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3671
  %totlayer6 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 2, !dbg !3672
  %15 = load i32, i32* %totlayer6, align 4, !dbg !3672
  %cmp7 = icmp slt i32 %13, %15, !dbg !3673
  br i1 %cmp7, label %for.body8, label %for.end65, !dbg !3674

for.body8:                                        ; preds = %for.cond5
  %16 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3675
  %layers9 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %16, i32 0, i32 0, !dbg !3678
  %17 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers9, align 8, !dbg !3678
  %18 = load i32, i32* %i, align 4, !dbg !3679
  %idxprom10 = sext i32 %18 to i64, !dbg !3675
  %arrayidx11 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %17, i64 %idxprom10, !dbg !3675
  %type12 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx11, i32 0, i32 0, !dbg !3680
  %19 = load i32, i32* %type12, align 8, !dbg !3680
  %cmp13 = icmp eq i32 %19, 17, !dbg !3681
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !3682

if.then14:                                        ; preds = %for.body8
  %20 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3683
  %21 = load i32, i32* %total.addr, align 4, !dbg !3685
  %22 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3686
  %layers15 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %22, i32 0, i32 0, !dbg !3687
  %23 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers15, align 8, !dbg !3687
  %24 = load i32, i32* %i, align 4, !dbg !3688
  %idxprom16 = sext i32 %24 to i64, !dbg !3686
  %arrayidx17 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %23, i64 %idxprom16, !dbg !3686
  %name18 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx17, i32 0, i32 8, !dbg !3689
  %arraydecay19 = getelementptr inbounds [64 x i8], [64 x i8]* %name18, i64 0, i64 0, !dbg !3686
  %call20 = call i8* @CustomData_add_layer_named(%struct.CustomData* %20, i32 6, i32 1, i8* null, i32 %21, i8* %arraydecay19), !dbg !3690
  br label %if.end62, !dbg !3691

if.else:                                          ; preds = %for.body8
  %25 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3692
  %layers21 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %25, i32 0, i32 0, !dbg !3694
  %26 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers21, align 8, !dbg !3694
  %27 = load i32, i32* %i, align 4, !dbg !3695
  %idxprom22 = sext i32 %27 to i64, !dbg !3692
  %arrayidx23 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %26, i64 %idxprom22, !dbg !3692
  %type24 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx23, i32 0, i32 0, !dbg !3696
  %28 = load i32, i32* %type24, align 8, !dbg !3696
  %cmp25 = icmp eq i32 %28, 32, !dbg !3697
  br i1 %cmp25, label %if.then26, label %if.else33, !dbg !3698

if.then26:                                        ; preds = %if.else
  %29 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3699
  %30 = load i32, i32* %total.addr, align 4, !dbg !3701
  %31 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3702
  %layers27 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %31, i32 0, i32 0, !dbg !3703
  %32 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers27, align 8, !dbg !3703
  %33 = load i32, i32* %i, align 4, !dbg !3704
  %idxprom28 = sext i32 %33 to i64, !dbg !3702
  %arrayidx29 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %32, i64 %idxprom28, !dbg !3702
  %name30 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx29, i32 0, i32 8, !dbg !3705
  %arraydecay31 = getelementptr inbounds [64 x i8], [64 x i8]* %name30, i64 0, i64 0, !dbg !3702
  %call32 = call i8* @CustomData_add_layer_named(%struct.CustomData* %29, i32 20, i32 1, i8* null, i32 %30, i8* %arraydecay31), !dbg !3706
  br label %if.end61, !dbg !3707

if.else33:                                        ; preds = %if.else
  %34 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3708
  %layers34 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %34, i32 0, i32 0, !dbg !3710
  %35 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers34, align 8, !dbg !3710
  %36 = load i32, i32* %i, align 4, !dbg !3711
  %idxprom35 = sext i32 %36 to i64, !dbg !3708
  %arrayidx36 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %35, i64 %idxprom35, !dbg !3708
  %type37 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx36, i32 0, i32 0, !dbg !3712
  %37 = load i32, i32* %type37, align 8, !dbg !3712
  %cmp38 = icmp eq i32 %37, 31, !dbg !3713
  br i1 %cmp38, label %if.then39, label %if.else46, !dbg !3714

if.then39:                                        ; preds = %if.else33
  %38 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3715
  %39 = load i32, i32* %total.addr, align 4, !dbg !3717
  %40 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3718
  %layers40 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %40, i32 0, i32 0, !dbg !3719
  %41 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers40, align 8, !dbg !3719
  %42 = load i32, i32* %i, align 4, !dbg !3720
  %idxprom41 = sext i32 %42 to i64, !dbg !3718
  %arrayidx42 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %41, i64 %idxprom41, !dbg !3718
  %name43 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx42, i32 0, i32 8, !dbg !3721
  %arraydecay44 = getelementptr inbounds [64 x i8], [64 x i8]* %name43, i64 0, i64 0, !dbg !3718
  %call45 = call i8* @CustomData_add_layer_named(%struct.CustomData* %38, i32 13, i32 1, i8* null, i32 %39, i8* %arraydecay44), !dbg !3722
  br label %if.end60, !dbg !3723

if.else46:                                        ; preds = %if.else33
  %43 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3724
  %layers47 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %43, i32 0, i32 0, !dbg !3726
  %44 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers47, align 8, !dbg !3726
  %45 = load i32, i32* %i, align 4, !dbg !3727
  %idxprom48 = sext i32 %45 to i64, !dbg !3724
  %arrayidx49 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %44, i64 %idxprom48, !dbg !3724
  %type50 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx49, i32 0, i32 0, !dbg !3728
  %46 = load i32, i32* %type50, align 8, !dbg !3728
  %cmp51 = icmp eq i32 %46, 8, !dbg !3729
  br i1 %cmp51, label %if.then52, label %if.end59, !dbg !3730

if.then52:                                        ; preds = %if.else46
  %47 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3731
  %48 = load i32, i32* %total.addr, align 4, !dbg !3733
  %49 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3734
  %layers53 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %49, i32 0, i32 0, !dbg !3735
  %50 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers53, align 8, !dbg !3735
  %51 = load i32, i32* %i, align 4, !dbg !3736
  %idxprom54 = sext i32 %51 to i64, !dbg !3734
  %arrayidx55 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %50, i64 %idxprom54, !dbg !3734
  %name56 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx55, i32 0, i32 8, !dbg !3737
  %arraydecay57 = getelementptr inbounds [64 x i8], [64 x i8]* %name56, i64 0, i64 0, !dbg !3734
  %call58 = call i8* @CustomData_add_layer_named(%struct.CustomData* %47, i32 40, i32 1, i8* null, i32 %48, i8* %arraydecay57), !dbg !3738
  br label %if.end59, !dbg !3739

if.end59:                                         ; preds = %if.then52, %if.else46
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then39
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then26
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then14
  br label %for.inc63, !dbg !3740

for.inc63:                                        ; preds = %if.end62
  %52 = load i32, i32* %i, align 4, !dbg !3741
  %inc64 = add nsw i32 %52, 1, !dbg !3741
  store i32 %inc64, i32* %i, align 4, !dbg !3741
  br label %for.cond5, !dbg !3742, !llvm.loop !3743

for.end65:                                        ; preds = %for.cond5
  %53 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3745
  %54 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3746
  %55 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3747
  call void @CustomData_bmesh_update_active_layers(%struct.CustomData* %53, %struct.CustomData* %54, %struct.CustomData* %55), !dbg !3748
  ret void, !dbg !3749
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_update_active_layers(%struct.CustomData* %fdata, %struct.CustomData* %pdata, %struct.CustomData* %ldata) #0 !dbg !3750 {
entry:
  %fdata.addr = alloca %struct.CustomData*, align 8
  %pdata.addr = alloca %struct.CustomData*, align 8
  %ldata.addr = alloca %struct.CustomData*, align 8
  %act = alloca i32, align 4
  store %struct.CustomData* %fdata, %struct.CustomData** %fdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %fdata.addr, metadata !3753, metadata !DIExpression()), !dbg !3754
  store %struct.CustomData* %pdata, %struct.CustomData** %pdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %pdata.addr, metadata !3755, metadata !DIExpression()), !dbg !3756
  store %struct.CustomData* %ldata, %struct.CustomData** %ldata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %ldata.addr, metadata !3757, metadata !DIExpression()), !dbg !3758
  call void @llvm.dbg.declare(metadata i32* %act, metadata !3759, metadata !DIExpression()), !dbg !3760
  %0 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3761
  %call = call zeroext i8 @CustomData_has_layer(%struct.CustomData* %0, i32 15), !dbg !3763
  %tobool = icmp ne i8 %call, 0, !dbg !3763
  br i1 %tobool, label %if.then, label %if.end, !dbg !3764

if.then:                                          ; preds = %entry
  %1 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3765
  %call1 = call i32 @CustomData_get_active_layer(%struct.CustomData* %1, i32 15), !dbg !3767
  store i32 %call1, i32* %act, align 4, !dbg !3768
  %2 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3769
  %3 = load i32, i32* %act, align 4, !dbg !3770
  call void @CustomData_set_layer_active(%struct.CustomData* %2, i32 16, i32 %3), !dbg !3771
  %4 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3772
  %5 = load i32, i32* %act, align 4, !dbg !3773
  call void @CustomData_set_layer_active(%struct.CustomData* %4, i32 5, i32 %5), !dbg !3774
  %6 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3775
  %call2 = call i32 @CustomData_get_render_layer(%struct.CustomData* %6, i32 15), !dbg !3776
  store i32 %call2, i32* %act, align 4, !dbg !3777
  %7 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3778
  %8 = load i32, i32* %act, align 4, !dbg !3779
  call void @CustomData_set_layer_render(%struct.CustomData* %7, i32 16, i32 %8), !dbg !3780
  %9 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3781
  %10 = load i32, i32* %act, align 4, !dbg !3782
  call void @CustomData_set_layer_render(%struct.CustomData* %9, i32 5, i32 %10), !dbg !3783
  %11 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3784
  %call3 = call i32 @CustomData_get_clone_layer(%struct.CustomData* %11, i32 15), !dbg !3785
  store i32 %call3, i32* %act, align 4, !dbg !3786
  %12 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3787
  %13 = load i32, i32* %act, align 4, !dbg !3788
  call void @CustomData_set_layer_clone(%struct.CustomData* %12, i32 16, i32 %13), !dbg !3789
  %14 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3790
  %15 = load i32, i32* %act, align 4, !dbg !3791
  call void @CustomData_set_layer_clone(%struct.CustomData* %14, i32 5, i32 %15), !dbg !3792
  %16 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3793
  %call4 = call i32 @CustomData_get_stencil_layer(%struct.CustomData* %16, i32 15), !dbg !3794
  store i32 %call4, i32* %act, align 4, !dbg !3795
  %17 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3796
  %18 = load i32, i32* %act, align 4, !dbg !3797
  call void @CustomData_set_layer_stencil(%struct.CustomData* %17, i32 16, i32 %18), !dbg !3798
  %19 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3799
  %20 = load i32, i32* %act, align 4, !dbg !3800
  call void @CustomData_set_layer_stencil(%struct.CustomData* %19, i32 5, i32 %20), !dbg !3801
  br label %if.end, !dbg !3802

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3803
  %call5 = call zeroext i8 @CustomData_has_layer(%struct.CustomData* %21, i32 17), !dbg !3805
  %tobool6 = icmp ne i8 %call5, 0, !dbg !3805
  br i1 %tobool6, label %if.then7, label %if.end12, !dbg !3806

if.then7:                                         ; preds = %if.end
  %22 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3807
  %call8 = call i32 @CustomData_get_active_layer(%struct.CustomData* %22, i32 17), !dbg !3809
  store i32 %call8, i32* %act, align 4, !dbg !3810
  %23 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3811
  %24 = load i32, i32* %act, align 4, !dbg !3812
  call void @CustomData_set_layer_active(%struct.CustomData* %23, i32 6, i32 %24), !dbg !3813
  %25 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3814
  %call9 = call i32 @CustomData_get_render_layer(%struct.CustomData* %25, i32 17), !dbg !3815
  store i32 %call9, i32* %act, align 4, !dbg !3816
  %26 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3817
  %27 = load i32, i32* %act, align 4, !dbg !3818
  call void @CustomData_set_layer_render(%struct.CustomData* %26, i32 6, i32 %27), !dbg !3819
  %28 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3820
  %call10 = call i32 @CustomData_get_clone_layer(%struct.CustomData* %28, i32 17), !dbg !3821
  store i32 %call10, i32* %act, align 4, !dbg !3822
  %29 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3823
  %30 = load i32, i32* %act, align 4, !dbg !3824
  call void @CustomData_set_layer_clone(%struct.CustomData* %29, i32 6, i32 %30), !dbg !3825
  %31 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3826
  %call11 = call i32 @CustomData_get_stencil_layer(%struct.CustomData* %31, i32 17), !dbg !3827
  store i32 %call11, i32* %act, align 4, !dbg !3828
  %32 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3829
  %33 = load i32, i32* %act, align 4, !dbg !3830
  call void @CustomData_set_layer_stencil(%struct.CustomData* %32, i32 6, i32 %33), !dbg !3831
  br label %if.end12, !dbg !3832

if.end12:                                         ; preds = %if.then7, %if.end
  ret void, !dbg !3833
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_do_versions_update_active_layers(%struct.CustomData* %fdata, %struct.CustomData* %pdata, %struct.CustomData* %ldata) #0 !dbg !3834 {
entry:
  %fdata.addr = alloca %struct.CustomData*, align 8
  %pdata.addr = alloca %struct.CustomData*, align 8
  %ldata.addr = alloca %struct.CustomData*, align 8
  %act = alloca i32, align 4
  store %struct.CustomData* %fdata, %struct.CustomData** %fdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %fdata.addr, metadata !3835, metadata !DIExpression()), !dbg !3836
  store %struct.CustomData* %pdata, %struct.CustomData** %pdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %pdata.addr, metadata !3837, metadata !DIExpression()), !dbg !3838
  store %struct.CustomData* %ldata, %struct.CustomData** %ldata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %ldata.addr, metadata !3839, metadata !DIExpression()), !dbg !3840
  call void @llvm.dbg.declare(metadata i32* %act, metadata !3841, metadata !DIExpression()), !dbg !3842
  %0 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3843
  %call = call zeroext i8 @CustomData_has_layer(%struct.CustomData* %0, i32 5), !dbg !3845
  %tobool = icmp ne i8 %call, 0, !dbg !3845
  br i1 %tobool, label %if.then, label %if.end, !dbg !3846

if.then:                                          ; preds = %entry
  %1 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3847
  %call1 = call i32 @CustomData_get_active_layer(%struct.CustomData* %1, i32 5), !dbg !3849
  store i32 %call1, i32* %act, align 4, !dbg !3850
  %2 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3851
  %3 = load i32, i32* %act, align 4, !dbg !3852
  call void @CustomData_set_layer_active(%struct.CustomData* %2, i32 15, i32 %3), !dbg !3853
  %4 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3854
  %5 = load i32, i32* %act, align 4, !dbg !3855
  call void @CustomData_set_layer_active(%struct.CustomData* %4, i32 16, i32 %5), !dbg !3856
  %6 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3857
  %call2 = call i32 @CustomData_get_render_layer(%struct.CustomData* %6, i32 5), !dbg !3858
  store i32 %call2, i32* %act, align 4, !dbg !3859
  %7 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3860
  %8 = load i32, i32* %act, align 4, !dbg !3861
  call void @CustomData_set_layer_render(%struct.CustomData* %7, i32 15, i32 %8), !dbg !3862
  %9 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3863
  %10 = load i32, i32* %act, align 4, !dbg !3864
  call void @CustomData_set_layer_render(%struct.CustomData* %9, i32 16, i32 %10), !dbg !3865
  %11 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3866
  %call3 = call i32 @CustomData_get_clone_layer(%struct.CustomData* %11, i32 5), !dbg !3867
  store i32 %call3, i32* %act, align 4, !dbg !3868
  %12 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3869
  %13 = load i32, i32* %act, align 4, !dbg !3870
  call void @CustomData_set_layer_clone(%struct.CustomData* %12, i32 15, i32 %13), !dbg !3871
  %14 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3872
  %15 = load i32, i32* %act, align 4, !dbg !3873
  call void @CustomData_set_layer_clone(%struct.CustomData* %14, i32 16, i32 %15), !dbg !3874
  %16 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3875
  %call4 = call i32 @CustomData_get_stencil_layer(%struct.CustomData* %16, i32 5), !dbg !3876
  store i32 %call4, i32* %act, align 4, !dbg !3877
  %17 = load %struct.CustomData*, %struct.CustomData** %pdata.addr, align 8, !dbg !3878
  %18 = load i32, i32* %act, align 4, !dbg !3879
  call void @CustomData_set_layer_stencil(%struct.CustomData* %17, i32 15, i32 %18), !dbg !3880
  %19 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3881
  %20 = load i32, i32* %act, align 4, !dbg !3882
  call void @CustomData_set_layer_stencil(%struct.CustomData* %19, i32 16, i32 %20), !dbg !3883
  br label %if.end, !dbg !3884

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3885
  %call5 = call zeroext i8 @CustomData_has_layer(%struct.CustomData* %21, i32 6), !dbg !3887
  %tobool6 = icmp ne i8 %call5, 0, !dbg !3887
  br i1 %tobool6, label %if.then7, label %if.end12, !dbg !3888

if.then7:                                         ; preds = %if.end
  %22 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3889
  %call8 = call i32 @CustomData_get_active_layer(%struct.CustomData* %22, i32 6), !dbg !3891
  store i32 %call8, i32* %act, align 4, !dbg !3892
  %23 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3893
  %24 = load i32, i32* %act, align 4, !dbg !3894
  call void @CustomData_set_layer_active(%struct.CustomData* %23, i32 17, i32 %24), !dbg !3895
  %25 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3896
  %call9 = call i32 @CustomData_get_render_layer(%struct.CustomData* %25, i32 6), !dbg !3897
  store i32 %call9, i32* %act, align 4, !dbg !3898
  %26 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3899
  %27 = load i32, i32* %act, align 4, !dbg !3900
  call void @CustomData_set_layer_render(%struct.CustomData* %26, i32 17, i32 %27), !dbg !3901
  %28 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3902
  %call10 = call i32 @CustomData_get_clone_layer(%struct.CustomData* %28, i32 6), !dbg !3903
  store i32 %call10, i32* %act, align 4, !dbg !3904
  %29 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3905
  %30 = load i32, i32* %act, align 4, !dbg !3906
  call void @CustomData_set_layer_clone(%struct.CustomData* %29, i32 17, i32 %30), !dbg !3907
  %31 = load %struct.CustomData*, %struct.CustomData** %fdata.addr, align 8, !dbg !3908
  %call11 = call i32 @CustomData_get_stencil_layer(%struct.CustomData* %31, i32 6), !dbg !3909
  store i32 %call11, i32* %act, align 4, !dbg !3910
  %32 = load %struct.CustomData*, %struct.CustomData** %ldata.addr, align 8, !dbg !3911
  %33 = load i32, i32* %act, align 4, !dbg !3912
  call void @CustomData_set_layer_stencil(%struct.CustomData* %32, i32 17, i32 %33), !dbg !3913
  br label %if.end12, !dbg !3914

if.end12:                                         ; preds = %if.then7, %if.end
  ret void, !dbg !3915
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_init_pool(%struct.CustomData* %data, i32 %totelem, i8 zeroext %htype) #0 !dbg !3916 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %totelem.addr = alloca i32, align 4
  %htype.addr = alloca i8, align 1
  %chunksize = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !3919, metadata !DIExpression()), !dbg !3920
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !3921, metadata !DIExpression()), !dbg !3922
  store i8 %htype, i8* %htype.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %htype.addr, metadata !3923, metadata !DIExpression()), !dbg !3924
  call void @llvm.dbg.declare(metadata i32* %chunksize, metadata !3925, metadata !DIExpression()), !dbg !3926
  %0 = load i8, i8* %htype.addr, align 1, !dbg !3927
  %conv = zext i8 %0 to i32, !dbg !3927
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb1
    i32 4, label %sw.bb2
    i32 8, label %sw.bb3
  ], !dbg !3928

sw.bb:                                            ; preds = %entry
  %1 = load i32, i32* getelementptr inbounds (%struct.BMAllocTemplate, %struct.BMAllocTemplate* @bm_mesh_chunksize_default, i32 0, i32 0), align 4, !dbg !3929
  store i32 %1, i32* %chunksize, align 4, !dbg !3931
  br label %sw.epilog, !dbg !3932

sw.bb1:                                           ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds (%struct.BMAllocTemplate, %struct.BMAllocTemplate* @bm_mesh_chunksize_default, i32 0, i32 1), align 4, !dbg !3933
  store i32 %2, i32* %chunksize, align 4, !dbg !3934
  br label %sw.epilog, !dbg !3935

sw.bb2:                                           ; preds = %entry
  %3 = load i32, i32* getelementptr inbounds (%struct.BMAllocTemplate, %struct.BMAllocTemplate* @bm_mesh_chunksize_default, i32 0, i32 2), align 4, !dbg !3936
  store i32 %3, i32* %chunksize, align 4, !dbg !3937
  br label %sw.epilog, !dbg !3938

sw.bb3:                                           ; preds = %entry
  %4 = load i32, i32* getelementptr inbounds (%struct.BMAllocTemplate, %struct.BMAllocTemplate* @bm_mesh_chunksize_default, i32 0, i32 3), align 4, !dbg !3939
  store i32 %4, i32* %chunksize, align 4, !dbg !3940
  br label %sw.epilog, !dbg !3941

sw.default:                                       ; preds = %entry
  store i32 512, i32* %chunksize, align 4, !dbg !3942
  br label %sw.epilog, !dbg !3943

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3944
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 2, !dbg !3946
  %6 = load i32, i32* %totlayer, align 4, !dbg !3946
  %tobool = icmp ne i32 %6, 0, !dbg !3944
  br i1 %tobool, label %if.then, label %if.end, !dbg !3947

if.then:                                          ; preds = %sw.epilog
  %7 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3948
  %totsize = getelementptr inbounds %struct.CustomData, %struct.CustomData* %7, i32 0, i32 4, !dbg !3950
  %8 = load i32, i32* %totsize, align 4, !dbg !3950
  %9 = load i32, i32* %totelem.addr, align 4, !dbg !3951
  %10 = load i32, i32* %chunksize, align 4, !dbg !3952
  %call = call %struct.BLI_mempool* @BLI_mempool_create(i32 %8, i32 %9, i32 %10, i32 0), !dbg !3953
  %11 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !3954
  %pool = getelementptr inbounds %struct.CustomData, %struct.CustomData* %11, i32 0, i32 5, !dbg !3955
  store %struct.BLI_mempool* %call, %struct.BLI_mempool** %pool, align 8, !dbg !3956
  br label %if.end, !dbg !3957

if.end:                                           ; preds = %if.then, %sw.epilog
  ret void, !dbg !3958
}

declare dso_local %struct.BLI_mempool* @BLI_mempool_create(i32, i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_bmesh_merge(%struct.CustomData* %source, %struct.CustomData* %dest, i64 %mask, i32 %alloctype, %struct.BMesh* %bm, i8 zeroext %htype) #0 !dbg !3959 {
entry:
  %retval = alloca i8, align 1
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %mask.addr = alloca i64, align 8
  %alloctype.addr = alloca i32, align 4
  %bm.addr = alloca %struct.BMesh*, align 8
  %htype.addr = alloca i8, align 1
  %h = alloca %struct.BMHeader*, align 8
  %iter = alloca %struct.BMIter, align 8
  %destold = alloca %struct.CustomData, align 8
  %tmp = alloca i8*, align 8
  %iter_type = alloca i32, align 4
  %totelem = alloca i32, align 4
  %f = alloca %struct.BMFace*, align 8
  %l = alloca %struct.BMLoop*, align 8
  %liter = alloca %struct.BMIter, align 8
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !4059, metadata !DIExpression()), !dbg !4060
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !4061, metadata !DIExpression()), !dbg !4062
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !4063, metadata !DIExpression()), !dbg !4064
  store i32 %alloctype, i32* %alloctype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloctype.addr, metadata !4065, metadata !DIExpression()), !dbg !4066
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !4067, metadata !DIExpression()), !dbg !4068
  store i8 %htype, i8* %htype.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %htype.addr, metadata !4069, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.declare(metadata %struct.BMHeader** %h, metadata !4071, metadata !DIExpression()), !dbg !4073
  call void @llvm.dbg.declare(metadata %struct.BMIter* %iter, metadata !4074, metadata !DIExpression()), !dbg !4161
  call void @llvm.dbg.declare(metadata %struct.CustomData* %destold, metadata !4162, metadata !DIExpression()), !dbg !4163
  call void @llvm.dbg.declare(metadata i8** %tmp, metadata !4164, metadata !DIExpression()), !dbg !4165
  call void @llvm.dbg.declare(metadata i32* %iter_type, metadata !4166, metadata !DIExpression()), !dbg !4167
  call void @llvm.dbg.declare(metadata i32* %totelem, metadata !4168, metadata !DIExpression()), !dbg !4169
  %0 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !4170
  %1 = load i64, i64* %mask.addr, align 8, !dbg !4172
  %call = call i32 @CustomData_number_of_layers_typemask(%struct.CustomData* %0, i64 %1), !dbg !4173
  %cmp = icmp eq i32 %call, 0, !dbg !4174
  br i1 %cmp, label %if.then, label %if.end, !dbg !4175

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4176
  br label %return, !dbg !4176

if.end:                                           ; preds = %entry
  %2 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4178
  %3 = bitcast %struct.CustomData* %destold to i8*, !dbg !4179
  %4 = bitcast %struct.CustomData* %2 to i8*, !dbg !4179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 200, i1 false), !dbg !4179
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 0, !dbg !4180
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4180
  %tobool = icmp ne %struct.CustomDataLayer* %5, null, !dbg !4182
  br i1 %tobool, label %if.then1, label %if.end5, !dbg !4183

if.then1:                                         ; preds = %if.end
  %6 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !4184
  %layers2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 0, !dbg !4186
  %7 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers2, align 8, !dbg !4186
  %8 = bitcast %struct.CustomDataLayer* %7 to i8*, !dbg !4187
  %call3 = call i8* %6(i8* %8), !dbg !4184
  %9 = bitcast i8* %call3 to %struct.CustomDataLayer*, !dbg !4184
  %layers4 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 0, !dbg !4188
  store %struct.CustomDataLayer* %9, %struct.CustomDataLayer** %layers4, align 8, !dbg !4189
  br label %if.end5, !dbg !4190

if.end5:                                          ; preds = %if.then1, %if.end
  %10 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !4191
  %11 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4193
  %12 = load i64, i64* %mask.addr, align 8, !dbg !4194
  %13 = load i32, i32* %alloctype.addr, align 4, !dbg !4195
  %call6 = call zeroext i8 @CustomData_merge(%struct.CustomData* %10, %struct.CustomData* %11, i64 %12, i32 %13, i32 0), !dbg !4196
  %conv = zext i8 %call6 to i32, !dbg !4196
  %cmp7 = icmp eq i32 %conv, 0, !dbg !4197
  br i1 %cmp7, label %if.then9, label %if.end15, !dbg !4198

if.then9:                                         ; preds = %if.end5
  %layers10 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 0, !dbg !4199
  %14 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers10, align 8, !dbg !4199
  %tobool11 = icmp ne %struct.CustomDataLayer* %14, null, !dbg !4202
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !4203

if.then12:                                        ; preds = %if.then9
  %15 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !4204
  %layers13 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 0, !dbg !4205
  %16 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers13, align 8, !dbg !4205
  %17 = bitcast %struct.CustomDataLayer* %16 to i8*, !dbg !4206
  call void %15(i8* %17), !dbg !4204
  br label %if.end14, !dbg !4204

if.end14:                                         ; preds = %if.then12, %if.then9
  store i8 0, i8* %retval, align 1, !dbg !4207
  br label %return, !dbg !4207

if.end15:                                         ; preds = %if.end5
  %18 = load i8, i8* %htype.addr, align 1, !dbg !4208
  %conv16 = zext i8 %18 to i32, !dbg !4208
  switch i32 %conv16, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb17
    i32 4, label %sw.bb18
    i32 8, label %sw.bb19
  ], !dbg !4209

sw.bb:                                            ; preds = %if.end15
  store i32 1, i32* %iter_type, align 4, !dbg !4210
  %19 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4212
  %totvert = getelementptr inbounds %struct.BMesh, %struct.BMesh* %19, i32 0, i32 0, !dbg !4213
  %20 = load i32, i32* %totvert, align 8, !dbg !4213
  store i32 %20, i32* %totelem, align 4, !dbg !4214
  br label %sw.epilog, !dbg !4215

sw.bb17:                                          ; preds = %if.end15
  store i32 2, i32* %iter_type, align 4, !dbg !4216
  %21 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4217
  %totedge = getelementptr inbounds %struct.BMesh, %struct.BMesh* %21, i32 0, i32 1, !dbg !4218
  %22 = load i32, i32* %totedge, align 4, !dbg !4218
  store i32 %22, i32* %totelem, align 4, !dbg !4219
  br label %sw.epilog, !dbg !4220

sw.bb18:                                          ; preds = %if.end15
  store i32 11, i32* %iter_type, align 4, !dbg !4221
  %23 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4222
  %totloop = getelementptr inbounds %struct.BMesh, %struct.BMesh* %23, i32 0, i32 2, !dbg !4223
  %24 = load i32, i32* %totloop, align 8, !dbg !4223
  store i32 %24, i32* %totelem, align 4, !dbg !4224
  br label %sw.epilog, !dbg !4225

sw.bb19:                                          ; preds = %if.end15
  store i32 3, i32* %iter_type, align 4, !dbg !4226
  %25 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4227
  %totface = getelementptr inbounds %struct.BMesh, %struct.BMesh* %25, i32 0, i32 3, !dbg !4228
  %26 = load i32, i32* %totface, align 4, !dbg !4228
  store i32 %26, i32* %totelem, align 4, !dbg !4229
  br label %sw.epilog, !dbg !4230

sw.default:                                       ; preds = %if.end15
  store i32 1, i32* %iter_type, align 4, !dbg !4231
  %27 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4232
  %totvert20 = getelementptr inbounds %struct.BMesh, %struct.BMesh* %27, i32 0, i32 0, !dbg !4233
  %28 = load i32, i32* %totvert20, align 8, !dbg !4233
  store i32 %28, i32* %totelem, align 4, !dbg !4234
  br label %sw.epilog, !dbg !4235

sw.epilog:                                        ; preds = %sw.default, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb
  %29 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4236
  %pool = getelementptr inbounds %struct.CustomData, %struct.CustomData* %29, i32 0, i32 5, !dbg !4237
  store %struct.BLI_mempool* null, %struct.BLI_mempool** %pool, align 8, !dbg !4238
  %30 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4239
  %31 = load i32, i32* %totelem, align 4, !dbg !4240
  %32 = load i8, i8* %htype.addr, align 1, !dbg !4241
  call void @CustomData_bmesh_init_pool(%struct.CustomData* %30, i32 %31, i8 zeroext %32), !dbg !4242
  %33 = load i32, i32* %iter_type, align 4, !dbg !4243
  %cmp21 = icmp ne i32 %33, 11, !dbg !4245
  br i1 %cmp21, label %if.then23, label %if.else, !dbg !4246

if.then23:                                        ; preds = %sw.epilog
  %34 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4247
  %35 = load i32, i32* %iter_type, align 4, !dbg !4247
  %conv24 = trunc i32 %35 to i8, !dbg !4247
  %call25 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %34, i8 zeroext %conv24, i8* null), !dbg !4247
  %36 = bitcast i8* %call25 to %struct.BMHeader*, !dbg !4247
  store %struct.BMHeader* %36, %struct.BMHeader** %h, align 8, !dbg !4247
  br label %for.cond, !dbg !4247

for.cond:                                         ; preds = %for.inc, %if.then23
  %37 = load %struct.BMHeader*, %struct.BMHeader** %h, align 8, !dbg !4250
  %tobool26 = icmp ne %struct.BMHeader* %37, null, !dbg !4247
  br i1 %tobool26, label %for.body, label %for.end, !dbg !4247

for.body:                                         ; preds = %for.cond
  store i8* null, i8** %tmp, align 8, !dbg !4252
  %38 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4254
  %39 = load %struct.BMHeader*, %struct.BMHeader** %h, align 8, !dbg !4255
  %data = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %39, i32 0, i32 0, !dbg !4256
  %40 = load i8*, i8** %data, align 8, !dbg !4256
  call void @CustomData_bmesh_copy_data(%struct.CustomData* %destold, %struct.CustomData* %38, i8* %40, i8** %tmp), !dbg !4257
  %41 = load %struct.BMHeader*, %struct.BMHeader** %h, align 8, !dbg !4258
  %data27 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %41, i32 0, i32 0, !dbg !4259
  call void @CustomData_bmesh_free_block(%struct.CustomData* %destold, i8** %data27), !dbg !4260
  %42 = load i8*, i8** %tmp, align 8, !dbg !4261
  %43 = load %struct.BMHeader*, %struct.BMHeader** %h, align 8, !dbg !4262
  %data28 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %43, i32 0, i32 0, !dbg !4263
  store i8* %42, i8** %data28, align 8, !dbg !4264
  br label %for.inc, !dbg !4265

for.inc:                                          ; preds = %for.body
  %call29 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !4250
  %44 = bitcast i8* %call29 to %struct.BMHeader*, !dbg !4250
  store %struct.BMHeader* %44, %struct.BMHeader** %h, align 8, !dbg !4250
  br label %for.cond, !dbg !4250, !llvm.loop !4266

for.end:                                          ; preds = %for.cond
  br label %if.end49, !dbg !4268

if.else:                                          ; preds = %sw.epilog
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !4269, metadata !DIExpression()), !dbg !4271
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l, metadata !4272, metadata !DIExpression()), !dbg !4273
  call void @llvm.dbg.declare(metadata %struct.BMIter* %liter, metadata !4274, metadata !DIExpression()), !dbg !4275
  %45 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4276
  %call30 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %45, i8 zeroext 3, i8* null), !dbg !4276
  %46 = bitcast i8* %call30 to %struct.BMFace*, !dbg !4276
  store %struct.BMFace* %46, %struct.BMFace** %f, align 8, !dbg !4276
  br label %for.cond31, !dbg !4276

for.cond31:                                       ; preds = %for.inc46, %if.else
  %47 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !4278
  %tobool32 = icmp ne %struct.BMFace* %47, null, !dbg !4276
  br i1 %tobool32, label %for.body33, label %for.end48, !dbg !4276

for.body33:                                       ; preds = %for.cond31
  %48 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !4280
  %49 = bitcast %struct.BMFace* %48 to i8*, !dbg !4280
  %call34 = call i8* @BM_iter_new(%struct.BMIter* %liter, %struct.BMesh* null, i8 zeroext 11, i8* %49), !dbg !4280
  %50 = bitcast i8* %call34 to %struct.BMLoop*, !dbg !4280
  store %struct.BMLoop* %50, %struct.BMLoop** %l, align 8, !dbg !4280
  br label %for.cond35, !dbg !4280

for.cond35:                                       ; preds = %for.inc43, %for.body33
  %51 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !4283
  %tobool36 = icmp ne %struct.BMLoop* %51, null, !dbg !4280
  br i1 %tobool36, label %for.body37, label %for.end45, !dbg !4280

for.body37:                                       ; preds = %for.cond35
  store i8* null, i8** %tmp, align 8, !dbg !4285
  %52 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4287
  %53 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !4288
  %head = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %53, i32 0, i32 0, !dbg !4289
  %data38 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head, i32 0, i32 0, !dbg !4290
  %54 = load i8*, i8** %data38, align 8, !dbg !4290
  call void @CustomData_bmesh_copy_data(%struct.CustomData* %destold, %struct.CustomData* %52, i8* %54, i8** %tmp), !dbg !4291
  %55 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !4292
  %head39 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %55, i32 0, i32 0, !dbg !4293
  %data40 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head39, i32 0, i32 0, !dbg !4294
  call void @CustomData_bmesh_free_block(%struct.CustomData* %destold, i8** %data40), !dbg !4295
  %56 = load i8*, i8** %tmp, align 8, !dbg !4296
  %57 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !4297
  %head41 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %57, i32 0, i32 0, !dbg !4298
  %data42 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head41, i32 0, i32 0, !dbg !4299
  store i8* %56, i8** %data42, align 8, !dbg !4300
  br label %for.inc43, !dbg !4301

for.inc43:                                        ; preds = %for.body37
  %call44 = call i8* @BM_iter_step(%struct.BMIter* %liter), !dbg !4283
  %58 = bitcast i8* %call44 to %struct.BMLoop*, !dbg !4283
  store %struct.BMLoop* %58, %struct.BMLoop** %l, align 8, !dbg !4283
  br label %for.cond35, !dbg !4283, !llvm.loop !4302

for.end45:                                        ; preds = %for.cond35
  br label %for.inc46, !dbg !4304

for.inc46:                                        ; preds = %for.end45
  %call47 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !4278
  %59 = bitcast i8* %call47 to %struct.BMFace*, !dbg !4278
  store %struct.BMFace* %59, %struct.BMFace** %f, align 8, !dbg !4278
  br label %for.cond31, !dbg !4278, !llvm.loop !4305

for.end48:                                        ; preds = %for.cond31
  br label %if.end49

if.end49:                                         ; preds = %for.end48, %for.end
  %pool50 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 5, !dbg !4307
  %60 = load %struct.BLI_mempool*, %struct.BLI_mempool** %pool50, align 8, !dbg !4307
  %tobool51 = icmp ne %struct.BLI_mempool* %60, null, !dbg !4309
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !4310

if.then52:                                        ; preds = %if.end49
  %pool53 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 5, !dbg !4311
  %61 = load %struct.BLI_mempool*, %struct.BLI_mempool** %pool53, align 8, !dbg !4311
  call void @BLI_mempool_destroy(%struct.BLI_mempool* %61), !dbg !4312
  br label %if.end54, !dbg !4312

if.end54:                                         ; preds = %if.then52, %if.end49
  %layers55 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 0, !dbg !4313
  %62 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers55, align 8, !dbg !4313
  %tobool56 = icmp ne %struct.CustomDataLayer* %62, null, !dbg !4315
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !4316

if.then57:                                        ; preds = %if.end54
  %63 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !4317
  %layers58 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %destold, i32 0, i32 0, !dbg !4318
  %64 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers58, align 8, !dbg !4318
  %65 = bitcast %struct.CustomDataLayer* %64 to i8*, !dbg !4319
  call void %63(i8* %65), !dbg !4317
  br label %if.end59, !dbg !4317

if.end59:                                         ; preds = %if.then57, %if.end54
  store i8 1, i8* %retval, align 1, !dbg !4320
  br label %return, !dbg !4320

return:                                           ; preds = %if.end59, %if.end14, %if.then
  %66 = load i8, i8* %retval, align 1, !dbg !4321
  ret i8 %66, !dbg !4321
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %bm, i8 zeroext %itype, i8* %data) #0 !dbg !4322 {
entry:
  %retval = alloca i8*, align 8
  %iter.addr = alloca %struct.BMIter*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %itype.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  store %struct.BMIter* %iter, %struct.BMIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMIter** %iter.addr, metadata !4327, metadata !DIExpression()), !dbg !4328
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !4329, metadata !DIExpression()), !dbg !4330
  store i8 %itype, i8* %itype.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %itype.addr, metadata !4331, metadata !DIExpression()), !dbg !4332
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4333, metadata !DIExpression()), !dbg !4334
  %0 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4335
  %1 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4335
  %2 = load i8, i8* %itype.addr, align 1, !dbg !4335
  %3 = load i8*, i8** %data.addr, align 8, !dbg !4335
  %call = call zeroext i8 @BM_iter_init(%struct.BMIter* %0, %struct.BMesh* %1, i8 zeroext %2, i8* %3), !dbg !4335
  %tobool = icmp ne i8 %call, 0, !dbg !4335
  br i1 %tobool, label %if.then, label %if.else, !dbg !4337

if.then:                                          ; preds = %entry
  %4 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4338
  %call1 = call i8* @BM_iter_step(%struct.BMIter* %4), !dbg !4340
  store i8* %call1, i8** %retval, align 8, !dbg !4341
  br label %return, !dbg !4341

if.else:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !4342
  br label %return, !dbg !4342

return:                                           ; preds = %if.else, %if.then
  %5 = load i8*, i8** %retval, align 8, !dbg !4344
  ret i8* %5, !dbg !4344
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_copy_data(%struct.CustomData* %source, %struct.CustomData* %dest, i8* %src_block, i8** %dest_block) #0 !dbg !4345 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %src_block.addr = alloca i8*, align 8
  %dest_block.addr = alloca i8**, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %dest_i = alloca i32, align 4
  %src_i = alloca i32, align 4
  %src_data = alloca i8*, align 8
  %dest_data = alloca i8*, align 8
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !4348, metadata !DIExpression()), !dbg !4349
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !4350, metadata !DIExpression()), !dbg !4351
  store i8* %src_block, i8** %src_block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src_block.addr, metadata !4352, metadata !DIExpression()), !dbg !4353
  store i8** %dest_block, i8*** %dest_block.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %dest_block.addr, metadata !4354, metadata !DIExpression()), !dbg !4355
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4356, metadata !DIExpression()), !dbg !4357
  call void @llvm.dbg.declare(metadata i32* %dest_i, metadata !4358, metadata !DIExpression()), !dbg !4359
  call void @llvm.dbg.declare(metadata i32* %src_i, metadata !4360, metadata !DIExpression()), !dbg !4361
  %0 = load i8**, i8*** %dest_block.addr, align 8, !dbg !4362
  %1 = load i8*, i8** %0, align 8, !dbg !4364
  %cmp = icmp eq i8* %1, null, !dbg !4365
  br i1 %cmp, label %if.then, label %if.end2, !dbg !4366

if.then:                                          ; preds = %entry
  %2 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4367
  %3 = load i8**, i8*** %dest_block.addr, align 8, !dbg !4369
  call void @CustomData_bmesh_alloc_block(%struct.CustomData* %2, i8** %3), !dbg !4370
  %4 = load i8**, i8*** %dest_block.addr, align 8, !dbg !4371
  %5 = load i8*, i8** %4, align 8, !dbg !4373
  %tobool = icmp ne i8* %5, null, !dbg !4373
  br i1 %tobool, label %if.then1, label %if.end, !dbg !4374

if.then1:                                         ; preds = %if.then
  %6 = load i8**, i8*** %dest_block.addr, align 8, !dbg !4375
  %7 = load i8*, i8** %6, align 8, !dbg !4376
  %8 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4377
  %totsize = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 4, !dbg !4378
  %9 = load i32, i32* %totsize, align 4, !dbg !4378
  %conv = sext i32 %9 to i64, !dbg !4377
  call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 %conv, i1 false), !dbg !4379
  br label %if.end, !dbg !4379

if.end:                                           ; preds = %if.then1, %if.then
  br label %if.end2, !dbg !4380

if.end2:                                          ; preds = %if.end, %entry
  store i32 0, i32* %dest_i, align 4, !dbg !4381
  store i32 0, i32* %src_i, align 4, !dbg !4382
  br label %for.cond, !dbg !4384

for.cond:                                         ; preds = %for.inc, %if.end2
  %10 = load i32, i32* %src_i, align 4, !dbg !4385
  %11 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !4387
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %11, i32 0, i32 2, !dbg !4388
  %12 = load i32, i32* %totlayer, align 4, !dbg !4388
  %cmp3 = icmp slt i32 %10, %12, !dbg !4389
  br i1 %cmp3, label %for.body, label %for.end, !dbg !4390

for.body:                                         ; preds = %for.cond
  br label %while.cond, !dbg !4391

while.cond:                                       ; preds = %while.body, %for.body
  %13 = load i32, i32* %dest_i, align 4, !dbg !4393
  %14 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4394
  %totlayer5 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 2, !dbg !4395
  %15 = load i32, i32* %totlayer5, align 4, !dbg !4395
  %cmp6 = icmp slt i32 %13, %15, !dbg !4396
  br i1 %cmp6, label %land.rhs, label %land.end, !dbg !4397

land.rhs:                                         ; preds = %while.cond
  %16 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4398
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %16, i32 0, i32 0, !dbg !4399
  %17 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4399
  %18 = load i32, i32* %dest_i, align 4, !dbg !4400
  %idxprom = sext i32 %18 to i64, !dbg !4398
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %17, i64 %idxprom, !dbg !4398
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !4401
  %19 = load i32, i32* %type, align 8, !dbg !4401
  %20 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !4402
  %layers8 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %20, i32 0, i32 0, !dbg !4403
  %21 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers8, align 8, !dbg !4403
  %22 = load i32, i32* %src_i, align 4, !dbg !4404
  %idxprom9 = sext i32 %22 to i64, !dbg !4402
  %arrayidx10 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %21, i64 %idxprom9, !dbg !4402
  %type11 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx10, i32 0, i32 0, !dbg !4405
  %23 = load i32, i32* %type11, align 8, !dbg !4405
  %cmp12 = icmp slt i32 %19, %23, !dbg !4406
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %24 = phi i1 [ false, %while.cond ], [ %cmp12, %land.rhs ], !dbg !4407
  br i1 %24, label %while.body, label %while.end, !dbg !4391

while.body:                                       ; preds = %land.end
  %25 = load i32, i32* %dest_i, align 4, !dbg !4408
  %inc = add nsw i32 %25, 1, !dbg !4408
  store i32 %inc, i32* %dest_i, align 4, !dbg !4408
  br label %while.cond, !dbg !4391, !llvm.loop !4410

while.end:                                        ; preds = %land.end
  %26 = load i32, i32* %dest_i, align 4, !dbg !4412
  %27 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4414
  %totlayer14 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %27, i32 0, i32 2, !dbg !4415
  %28 = load i32, i32* %totlayer14, align 4, !dbg !4415
  %cmp15 = icmp sge i32 %26, %28, !dbg !4416
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !4417

if.then17:                                        ; preds = %while.end
  br label %for.end, !dbg !4418

if.end18:                                         ; preds = %while.end
  %29 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4419
  %layers19 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %29, i32 0, i32 0, !dbg !4421
  %30 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers19, align 8, !dbg !4421
  %31 = load i32, i32* %dest_i, align 4, !dbg !4422
  %idxprom20 = sext i32 %31 to i64, !dbg !4419
  %arrayidx21 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %30, i64 %idxprom20, !dbg !4419
  %type22 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx21, i32 0, i32 0, !dbg !4423
  %32 = load i32, i32* %type22, align 8, !dbg !4423
  %33 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !4424
  %layers23 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %33, i32 0, i32 0, !dbg !4425
  %34 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers23, align 8, !dbg !4425
  %35 = load i32, i32* %src_i, align 4, !dbg !4426
  %idxprom24 = sext i32 %35 to i64, !dbg !4424
  %arrayidx25 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %34, i64 %idxprom24, !dbg !4424
  %type26 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx25, i32 0, i32 0, !dbg !4427
  %36 = load i32, i32* %type26, align 8, !dbg !4427
  %cmp27 = icmp eq i32 %32, %36, !dbg !4428
  br i1 %cmp27, label %land.lhs.true, label %if.end60, !dbg !4429

land.lhs.true:                                    ; preds = %if.end18
  %37 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4430
  %layers29 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %37, i32 0, i32 0, !dbg !4431
  %38 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers29, align 8, !dbg !4431
  %39 = load i32, i32* %dest_i, align 4, !dbg !4432
  %idxprom30 = sext i32 %39 to i64, !dbg !4430
  %arrayidx31 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %38, i64 %idxprom30, !dbg !4430
  %name = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx31, i32 0, i32 8, !dbg !4433
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !4430
  %40 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !4434
  %layers32 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %40, i32 0, i32 0, !dbg !4435
  %41 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers32, align 8, !dbg !4435
  %42 = load i32, i32* %src_i, align 4, !dbg !4436
  %idxprom33 = sext i32 %42 to i64, !dbg !4434
  %arrayidx34 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %41, i64 %idxprom33, !dbg !4434
  %name35 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx34, i32 0, i32 8, !dbg !4437
  %arraydecay36 = getelementptr inbounds [64 x i8], [64 x i8]* %name35, i64 0, i64 0, !dbg !4434
  %call = call i32 @strcmp(i8* %arraydecay, i8* %arraydecay36) #5, !dbg !4438
  %cmp37 = icmp eq i32 %call, 0, !dbg !4439
  br i1 %cmp37, label %if.then39, label %if.end60, !dbg !4440

if.then39:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %src_data, metadata !4441, metadata !DIExpression()), !dbg !4443
  %43 = load i8*, i8** %src_block.addr, align 8, !dbg !4444
  %44 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !4445
  %layers40 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %44, i32 0, i32 0, !dbg !4446
  %45 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers40, align 8, !dbg !4446
  %46 = load i32, i32* %src_i, align 4, !dbg !4447
  %idxprom41 = sext i32 %46 to i64, !dbg !4445
  %arrayidx42 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %45, i64 %idxprom41, !dbg !4445
  %offset = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx42, i32 0, i32 1, !dbg !4448
  %47 = load i32, i32* %offset, align 4, !dbg !4448
  %idx.ext = sext i32 %47 to i64, !dbg !4449
  %add.ptr = getelementptr inbounds i8, i8* %43, i64 %idx.ext, !dbg !4449
  store i8* %add.ptr, i8** %src_data, align 8, !dbg !4443
  call void @llvm.dbg.declare(metadata i8** %dest_data, metadata !4450, metadata !DIExpression()), !dbg !4451
  %48 = load i8**, i8*** %dest_block.addr, align 8, !dbg !4452
  %49 = load i8*, i8** %48, align 8, !dbg !4453
  %50 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !4454
  %layers43 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %50, i32 0, i32 0, !dbg !4455
  %51 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers43, align 8, !dbg !4455
  %52 = load i32, i32* %dest_i, align 4, !dbg !4456
  %idxprom44 = sext i32 %52 to i64, !dbg !4454
  %arrayidx45 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %51, i64 %idxprom44, !dbg !4454
  %offset46 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx45, i32 0, i32 1, !dbg !4457
  %53 = load i32, i32* %offset46, align 4, !dbg !4457
  %idx.ext47 = sext i32 %53 to i64, !dbg !4458
  %add.ptr48 = getelementptr inbounds i8, i8* %49, i64 %idx.ext47, !dbg !4458
  store i8* %add.ptr48, i8** %dest_data, align 8, !dbg !4451
  %54 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !4459
  %layers49 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %54, i32 0, i32 0, !dbg !4460
  %55 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers49, align 8, !dbg !4460
  %56 = load i32, i32* %src_i, align 4, !dbg !4461
  %idxprom50 = sext i32 %56 to i64, !dbg !4459
  %arrayidx51 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %55, i64 %idxprom50, !dbg !4459
  %type52 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx51, i32 0, i32 0, !dbg !4462
  %57 = load i32, i32* %type52, align 8, !dbg !4462
  %call53 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %57), !dbg !4463
  store %struct.LayerTypeInfo* %call53, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4464
  %58 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4465
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %58, i32 0, i32 4, !dbg !4467
  %59 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !4467
  %tobool54 = icmp ne void (i8*, i8*, i32)* %59, null, !dbg !4465
  br i1 %tobool54, label %if.then55, label %if.else, !dbg !4468

if.then55:                                        ; preds = %if.then39
  %60 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4469
  %copy56 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %60, i32 0, i32 4, !dbg !4470
  %61 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy56, align 8, !dbg !4470
  %62 = load i8*, i8** %src_data, align 8, !dbg !4471
  %63 = load i8*, i8** %dest_data, align 8, !dbg !4472
  call void %61(i8* %62, i8* %63, i32 1), !dbg !4469
  br label %if.end58, !dbg !4469

if.else:                                          ; preds = %if.then39
  %64 = load i8*, i8** %dest_data, align 8, !dbg !4473
  %65 = load i8*, i8** %src_data, align 8, !dbg !4474
  %66 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4475
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %66, i32 0, i32 0, !dbg !4476
  %67 = load i32, i32* %size, align 8, !dbg !4476
  %conv57 = sext i32 %67 to i64, !dbg !4475
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %65, i64 %conv57, i1 false), !dbg !4477
  br label %if.end58

if.end58:                                         ; preds = %if.else, %if.then55
  %68 = load i32, i32* %dest_i, align 4, !dbg !4478
  %inc59 = add nsw i32 %68, 1, !dbg !4478
  store i32 %inc59, i32* %dest_i, align 4, !dbg !4478
  br label %if.end60, !dbg !4479

if.end60:                                         ; preds = %if.end58, %land.lhs.true, %if.end18
  br label %for.inc, !dbg !4480

for.inc:                                          ; preds = %if.end60
  %69 = load i32, i32* %src_i, align 4, !dbg !4481
  %inc61 = add nsw i32 %69, 1, !dbg !4481
  store i32 %inc61, i32* %src_i, align 4, !dbg !4481
  br label %for.cond, !dbg !4482, !llvm.loop !4483

for.end:                                          ; preds = %if.then17, %for.cond
  ret void, !dbg !4485
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_free_block(%struct.CustomData* %data, i8** %block) #0 !dbg !4486 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8**, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4489, metadata !DIExpression()), !dbg !4490
  store i8** %block, i8*** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %block.addr, metadata !4491, metadata !DIExpression()), !dbg !4492
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4493, metadata !DIExpression()), !dbg !4494
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4495, metadata !DIExpression()), !dbg !4496
  %0 = load i8**, i8*** %block.addr, align 8, !dbg !4497
  %1 = load i8*, i8** %0, align 8, !dbg !4499
  %cmp = icmp eq i8* %1, null, !dbg !4500
  br i1 %cmp, label %if.then, label %if.end, !dbg !4501

if.then:                                          ; preds = %entry
  br label %return, !dbg !4502

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4503
  br label %for.cond, !dbg !4505

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4, !dbg !4506
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4508
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 2, !dbg !4509
  %4 = load i32, i32* %totlayer, align 4, !dbg !4509
  %cmp1 = icmp slt i32 %2, %4, !dbg !4510
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4511

for.body:                                         ; preds = %for.cond
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4512
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !4515
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4515
  %7 = load i32, i32* %i, align 4, !dbg !4516
  %idxprom = sext i32 %7 to i64, !dbg !4512
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom, !dbg !4512
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 2, !dbg !4517
  %8 = load i32, i32* %flag, align 8, !dbg !4517
  %and = and i32 %8, 2, !dbg !4518
  %tobool = icmp ne i32 %and, 0, !dbg !4518
  br i1 %tobool, label %if.end14, label %if.then2, !dbg !4519

if.then2:                                         ; preds = %for.body
  %9 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4520
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !4522
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !4522
  %11 = load i32, i32* %i, align 4, !dbg !4523
  %idxprom4 = sext i32 %11 to i64, !dbg !4520
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom4, !dbg !4520
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 0, !dbg !4524
  %12 = load i32, i32* %type, align 8, !dbg !4524
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %12), !dbg !4525
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4526
  %13 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4527
  %free = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %13, i32 0, i32 5, !dbg !4529
  %14 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free, align 8, !dbg !4529
  %tobool6 = icmp ne void (i8*, i32, i32)* %14, null, !dbg !4527
  br i1 %tobool6, label %if.then7, label %if.end13, !dbg !4530

if.then7:                                         ; preds = %if.then2
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !4531, metadata !DIExpression()), !dbg !4533
  %15 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4534
  %layers8 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %15, i32 0, i32 0, !dbg !4535
  %16 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers8, align 8, !dbg !4535
  %17 = load i32, i32* %i, align 4, !dbg !4536
  %idxprom9 = sext i32 %17 to i64, !dbg !4534
  %arrayidx10 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %16, i64 %idxprom9, !dbg !4534
  %offset11 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx10, i32 0, i32 1, !dbg !4537
  %18 = load i32, i32* %offset11, align 4, !dbg !4537
  store i32 %18, i32* %offset, align 4, !dbg !4533
  %19 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4538
  %free12 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %19, i32 0, i32 5, !dbg !4539
  %20 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free12, align 8, !dbg !4539
  %21 = load i8**, i8*** %block.addr, align 8, !dbg !4540
  %22 = load i8*, i8** %21, align 8, !dbg !4541
  %23 = load i32, i32* %offset, align 4, !dbg !4542
  %idx.ext = sext i32 %23 to i64, !dbg !4543
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 %idx.ext, !dbg !4543
  %24 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4544
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %24, i32 0, i32 0, !dbg !4545
  %25 = load i32, i32* %size, align 8, !dbg !4545
  call void %20(i8* %add.ptr, i32 1, i32 %25), !dbg !4538
  br label %if.end13, !dbg !4546

if.end13:                                         ; preds = %if.then7, %if.then2
  br label %if.end14, !dbg !4547

if.end14:                                         ; preds = %if.end13, %for.body
  br label %for.inc, !dbg !4548

for.inc:                                          ; preds = %if.end14
  %26 = load i32, i32* %i, align 4, !dbg !4549
  %inc = add nsw i32 %26, 1, !dbg !4549
  store i32 %inc, i32* %i, align 4, !dbg !4549
  br label %for.cond, !dbg !4550, !llvm.loop !4551

for.end:                                          ; preds = %for.cond
  %27 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4553
  %totsize = getelementptr inbounds %struct.CustomData, %struct.CustomData* %27, i32 0, i32 4, !dbg !4555
  %28 = load i32, i32* %totsize, align 4, !dbg !4555
  %tobool15 = icmp ne i32 %28, 0, !dbg !4553
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !4556

if.then16:                                        ; preds = %for.end
  %29 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4557
  %pool = getelementptr inbounds %struct.CustomData, %struct.CustomData* %29, i32 0, i32 5, !dbg !4558
  %30 = load %struct.BLI_mempool*, %struct.BLI_mempool** %pool, align 8, !dbg !4558
  %31 = load i8**, i8*** %block.addr, align 8, !dbg !4559
  %32 = load i8*, i8** %31, align 8, !dbg !4560
  call void @BLI_mempool_free(%struct.BLI_mempool* %30, i8* %32), !dbg !4561
  br label %if.end17, !dbg !4561

if.end17:                                         ; preds = %if.then16, %for.end
  %33 = load i8**, i8*** %block.addr, align 8, !dbg !4562
  store i8* null, i8** %33, align 8, !dbg !4563
  br label %return, !dbg !4564

return:                                           ; preds = %if.end17, %if.then
  ret void, !dbg !4564
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @BM_iter_step(%struct.BMIter* %iter) #0 !dbg !4565 {
entry:
  %iter.addr = alloca %struct.BMIter*, align 8
  store %struct.BMIter* %iter, %struct.BMIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMIter** %iter.addr, metadata !4568, metadata !DIExpression()), !dbg !4569
  %0 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4570
  %step = getelementptr inbounds %struct.BMIter, %struct.BMIter* %0, i32 0, i32 2, !dbg !4571
  %1 = load i8* (i8*)*, i8* (i8*)** %step, align 8, !dbg !4571
  %2 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4572
  %3 = bitcast %struct.BMIter* %2 to i8*, !dbg !4572
  %call = call i8* %1(i8* %3), !dbg !4570
  ret i8* %call, !dbg !4573
}

declare dso_local void @BLI_mempool_destroy(%struct.BLI_mempool*) #2

declare dso_local void @BLI_mempool_free(%struct.BLI_mempool*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_free_block_data(%struct.CustomData* %data, i8* %block) #0 !dbg !4574 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4577, metadata !DIExpression()), !dbg !4578
  store i8* %block, i8** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %block.addr, metadata !4579, metadata !DIExpression()), !dbg !4580
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4581, metadata !DIExpression()), !dbg !4582
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4583, metadata !DIExpression()), !dbg !4584
  %0 = load i8*, i8** %block.addr, align 8, !dbg !4585
  %cmp = icmp eq i8* %0, null, !dbg !4587
  br i1 %cmp, label %if.then, label %if.end, !dbg !4588

if.then:                                          ; preds = %entry
  br label %if.end18, !dbg !4589

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4590
  br label %for.cond, !dbg !4592

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4, !dbg !4593
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4595
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %2, i32 0, i32 2, !dbg !4596
  %3 = load i32, i32* %totlayer, align 4, !dbg !4596
  %cmp1 = icmp slt i32 %1, %3, !dbg !4597
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4598

for.body:                                         ; preds = %for.cond
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4599
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !4602
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4602
  %6 = load i32, i32* %i, align 4, !dbg !4603
  %idxprom = sext i32 %6 to i64, !dbg !4599
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !4599
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 2, !dbg !4604
  %7 = load i32, i32* %flag, align 8, !dbg !4604
  %and = and i32 %7, 2, !dbg !4605
  %tobool = icmp ne i32 %and, 0, !dbg !4605
  br i1 %tobool, label %if.end14, label %if.then2, !dbg !4606

if.then2:                                         ; preds = %for.body
  %8 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4607
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 0, !dbg !4609
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !4609
  %10 = load i32, i32* %i, align 4, !dbg !4610
  %idxprom4 = sext i32 %10 to i64, !dbg !4607
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i64 %idxprom4, !dbg !4607
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 0, !dbg !4611
  %11 = load i32, i32* %type, align 8, !dbg !4611
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %11), !dbg !4612
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4613
  %12 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4614
  %free = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %12, i32 0, i32 5, !dbg !4616
  %13 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free, align 8, !dbg !4616
  %tobool6 = icmp ne void (i8*, i32, i32)* %13, null, !dbg !4614
  br i1 %tobool6, label %if.then7, label %if.end13, !dbg !4617

if.then7:                                         ; preds = %if.then2
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !4618, metadata !DIExpression()), !dbg !4620
  %14 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4621
  %layers8 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 0, !dbg !4622
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers8, align 8, !dbg !4622
  %16 = load i32, i32* %i, align 4, !dbg !4623
  %idxprom9 = sext i32 %16 to i64, !dbg !4621
  %arrayidx10 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i64 %idxprom9, !dbg !4621
  %offset11 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx10, i32 0, i32 1, !dbg !4624
  %17 = load i32, i32* %offset11, align 4, !dbg !4624
  store i32 %17, i32* %offset, align 4, !dbg !4620
  %18 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4625
  %free12 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %18, i32 0, i32 5, !dbg !4626
  %19 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free12, align 8, !dbg !4626
  %20 = load i8*, i8** %block.addr, align 8, !dbg !4627
  %21 = load i32, i32* %offset, align 4, !dbg !4628
  %idx.ext = sext i32 %21 to i64, !dbg !4629
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %idx.ext, !dbg !4629
  %22 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4630
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %22, i32 0, i32 0, !dbg !4631
  %23 = load i32, i32* %size, align 8, !dbg !4631
  call void %19(i8* %add.ptr, i32 1, i32 %23), !dbg !4625
  br label %if.end13, !dbg !4632

if.end13:                                         ; preds = %if.then7, %if.then2
  br label %if.end14, !dbg !4633

if.end14:                                         ; preds = %if.end13, %for.body
  br label %for.inc, !dbg !4634

for.inc:                                          ; preds = %if.end14
  %24 = load i32, i32* %i, align 4, !dbg !4635
  %inc = add nsw i32 %24, 1, !dbg !4635
  store i32 %inc, i32* %i, align 4, !dbg !4635
  br label %for.cond, !dbg !4636, !llvm.loop !4637

for.end:                                          ; preds = %for.cond
  %25 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4639
  %totsize = getelementptr inbounds %struct.CustomData, %struct.CustomData* %25, i32 0, i32 4, !dbg !4641
  %26 = load i32, i32* %totsize, align 4, !dbg !4641
  %tobool15 = icmp ne i32 %26, 0, !dbg !4639
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !4642

if.then16:                                        ; preds = %for.end
  %27 = load i8*, i8** %block.addr, align 8, !dbg !4643
  %28 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4644
  %totsize17 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %28, i32 0, i32 4, !dbg !4645
  %29 = load i32, i32* %totsize17, align 4, !dbg !4645
  %conv = sext i32 %29 to i64, !dbg !4644
  call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 0, i64 %conv, i1 false), !dbg !4646
  br label %if.end18, !dbg !4646

if.end18:                                         ; preds = %if.then, %if.then16, %for.end
  ret void, !dbg !4647
}

; Function Attrs: noinline nounwind uwtable
define internal void @CustomData_bmesh_alloc_block(%struct.CustomData* %data, i8** %block) #0 !dbg !4648 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8**, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4649, metadata !DIExpression()), !dbg !4650
  store i8** %block, i8*** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %block.addr, metadata !4651, metadata !DIExpression()), !dbg !4652
  %0 = load i8**, i8*** %block.addr, align 8, !dbg !4653
  %1 = load i8*, i8** %0, align 8, !dbg !4655
  %tobool = icmp ne i8* %1, null, !dbg !4655
  br i1 %tobool, label %if.then, label %if.end, !dbg !4656

if.then:                                          ; preds = %entry
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4657
  %3 = load i8**, i8*** %block.addr, align 8, !dbg !4658
  call void @CustomData_bmesh_free_block(%struct.CustomData* %2, i8** %3), !dbg !4659
  br label %if.end, !dbg !4659

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4660
  %totsize = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 4, !dbg !4662
  %5 = load i32, i32* %totsize, align 4, !dbg !4662
  %cmp = icmp sgt i32 %5, 0, !dbg !4663
  br i1 %cmp, label %if.then1, label %if.else, !dbg !4664

if.then1:                                         ; preds = %if.end
  %6 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4665
  %pool = getelementptr inbounds %struct.CustomData, %struct.CustomData* %6, i32 0, i32 5, !dbg !4666
  %7 = load %struct.BLI_mempool*, %struct.BLI_mempool** %pool, align 8, !dbg !4666
  %call = call i8* @BLI_mempool_alloc(%struct.BLI_mempool* %7), !dbg !4667
  %8 = load i8**, i8*** %block.addr, align 8, !dbg !4668
  store i8* %call, i8** %8, align 8, !dbg !4669
  br label %if.end2, !dbg !4670

if.else:                                          ; preds = %if.end
  %9 = load i8**, i8*** %block.addr, align 8, !dbg !4671
  store i8* null, i8** %9, align 8, !dbg !4672
  br label %if.end2

if.end2:                                          ; preds = %if.else, %if.then1
  ret void, !dbg !4673
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_bmesh_get(%struct.CustomData* %data, i8* %block, i32 %type) #0 !dbg !4674 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4677, metadata !DIExpression()), !dbg !4678
  store i8* %block, i8** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %block.addr, metadata !4679, metadata !DIExpression()), !dbg !4680
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !4681, metadata !DIExpression()), !dbg !4682
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !4683, metadata !DIExpression()), !dbg !4684
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4685
  %1 = load i32, i32* %type.addr, align 4, !dbg !4686
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !4687
  store i32 %call, i32* %layer_index, align 4, !dbg !4688
  %2 = load i32, i32* %layer_index, align 4, !dbg !4689
  %cmp = icmp eq i32 %2, -1, !dbg !4691
  br i1 %cmp, label %if.then, label %if.end, !dbg !4692

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !4693
  br label %return, !dbg !4693

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %block.addr, align 8, !dbg !4694
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4695
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !4696
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4696
  %6 = load i32, i32* %layer_index, align 4, !dbg !4697
  %idxprom = sext i32 %6 to i64, !dbg !4695
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !4695
  %offset = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 1, !dbg !4698
  %7 = load i32, i32* %offset, align 4, !dbg !4698
  %idx.ext = sext i32 %7 to i64, !dbg !4699
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !4699
  store i8* %add.ptr, i8** %retval, align 8, !dbg !4700
  br label %return, !dbg !4700

return:                                           ; preds = %if.end, %if.then
  %8 = load i8*, i8** %retval, align 8, !dbg !4701
  ret i8* %8, !dbg !4701
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_bmesh_get_n(%struct.CustomData* %data, i8* %block, i32 %type, i32 %n) #0 !dbg !4702 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4705, metadata !DIExpression()), !dbg !4706
  store i8* %block, i8** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %block.addr, metadata !4707, metadata !DIExpression()), !dbg !4708
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !4709, metadata !DIExpression()), !dbg !4710
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4711, metadata !DIExpression()), !dbg !4712
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !4713, metadata !DIExpression()), !dbg !4714
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4715
  %1 = load i32, i32* %type.addr, align 4, !dbg !4716
  %call = call i32 @CustomData_get_layer_index(%struct.CustomData* %0, i32 %1), !dbg !4717
  store i32 %call, i32* %layer_index, align 4, !dbg !4718
  %2 = load i32, i32* %layer_index, align 4, !dbg !4719
  %cmp = icmp eq i32 %2, -1, !dbg !4721
  br i1 %cmp, label %if.then, label %if.end, !dbg !4722

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !4723
  br label %return, !dbg !4723

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %block.addr, align 8, !dbg !4724
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4725
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !4726
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4726
  %6 = load i32, i32* %layer_index, align 4, !dbg !4727
  %7 = load i32, i32* %n.addr, align 4, !dbg !4728
  %add = add nsw i32 %6, %7, !dbg !4729
  %idxprom = sext i32 %add to i64, !dbg !4725
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom, !dbg !4725
  %offset = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 1, !dbg !4730
  %8 = load i32, i32* %offset, align 4, !dbg !4730
  %idx.ext = sext i32 %8 to i64, !dbg !4731
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !4731
  store i8* %add.ptr, i8** %retval, align 8, !dbg !4732
  br label %return, !dbg !4732

return:                                           ; preds = %if.end, %if.then
  %9 = load i8*, i8** %retval, align 8, !dbg !4733
  ret i8* %9, !dbg !4733
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_bmesh_get_layer_n(%struct.CustomData* %data, i8* %block, i32 %n) #0 !dbg !4734 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4735, metadata !DIExpression()), !dbg !4736
  store i8* %block, i8** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %block.addr, metadata !4737, metadata !DIExpression()), !dbg !4738
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4739, metadata !DIExpression()), !dbg !4740
  %0 = load i32, i32* %n.addr, align 4, !dbg !4741
  %cmp = icmp slt i32 %0, 0, !dbg !4743
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4744

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4, !dbg !4745
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4746
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %2, i32 0, i32 2, !dbg !4747
  %3 = load i32, i32* %totlayer, align 4, !dbg !4747
  %cmp1 = icmp sge i32 %1, %3, !dbg !4748
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4749

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* null, i8** %retval, align 8, !dbg !4750
  br label %return, !dbg !4750

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %block.addr, align 8, !dbg !4751
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4752
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !4753
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4753
  %7 = load i32, i32* %n.addr, align 4, !dbg !4754
  %idxprom = sext i32 %7 to i64, !dbg !4752
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom, !dbg !4752
  %offset = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 1, !dbg !4755
  %8 = load i32, i32* %offset, align 4, !dbg !4755
  %idx.ext = sext i32 %8 to i64, !dbg !4756
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %idx.ext, !dbg !4756
  store i8* %add.ptr, i8** %retval, align 8, !dbg !4757
  br label %return, !dbg !4757

return:                                           ; preds = %if.end, %if.then
  %9 = load i8*, i8** %retval, align 8, !dbg !4758
  ret i8* %9, !dbg !4758
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_layer_has_math(%struct.CustomData* %data, i32 %layer_n) #0 !dbg !4759 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %layer_n.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4762, metadata !DIExpression()), !dbg !4763
  store i32 %layer_n, i32* %layer_n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %layer_n.addr, metadata !4764, metadata !DIExpression()), !dbg !4765
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4766, metadata !DIExpression()), !dbg !4767
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4768
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 0, !dbg !4769
  %1 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4769
  %2 = load i32, i32* %layer_n.addr, align 4, !dbg !4770
  %idxprom = sext i32 %2 to i64, !dbg !4768
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %1, i64 %idxprom, !dbg !4768
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !4771
  %3 = load i32, i32* %type, align 8, !dbg !4771
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %3), !dbg !4772
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4767
  %4 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4773
  %equal = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %4, i32 0, i32 9, !dbg !4775
  %5 = load i8 (i8*, i8*)*, i8 (i8*, i8*)** %equal, align 8, !dbg !4775
  %tobool = icmp ne i8 (i8*, i8*)* %5, null, !dbg !4773
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4776

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4777
  %add = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %6, i32 0, i32 12, !dbg !4778
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %add, align 8, !dbg !4778
  %tobool1 = icmp ne void (i8*, i8*)* %7, null, !dbg !4777
  br i1 %tobool1, label %land.lhs.true2, label %if.end, !dbg !4779

land.lhs.true2:                                   ; preds = %land.lhs.true
  %8 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4780
  %multiply = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %8, i32 0, i32 10, !dbg !4781
  %9 = load void (i8*, float)*, void (i8*, float)** %multiply, align 8, !dbg !4781
  %tobool3 = icmp ne void (i8*, float)* %9, null, !dbg !4780
  br i1 %tobool3, label %land.lhs.true4, label %if.end, !dbg !4782

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %10 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4783
  %initminmax = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %10, i32 0, i32 11, !dbg !4784
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %initminmax, align 8, !dbg !4784
  %tobool5 = icmp ne void (i8*, i8*)* %11, null, !dbg !4783
  br i1 %tobool5, label %land.lhs.true6, label %if.end, !dbg !4785

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %12 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4786
  %dominmax = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %12, i32 0, i32 13, !dbg !4787
  %13 = load void (i8*, i8*, i8*)*, void (i8*, i8*, i8*)** %dominmax, align 8, !dbg !4787
  %tobool7 = icmp ne void (i8*, i8*, i8*)* %13, null, !dbg !4786
  br i1 %tobool7, label %if.then, label %if.end, !dbg !4788

if.then:                                          ; preds = %land.lhs.true6
  store i8 1, i8* %retval, align 1, !dbg !4789
  br label %return, !dbg !4789

if.end:                                           ; preds = %land.lhs.true6, %land.lhs.true4, %land.lhs.true2, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !4791
  br label %return, !dbg !4791

return:                                           ; preds = %if.end, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !4792
  ret i8 %14, !dbg !4792
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_layer_has_interp(%struct.CustomData* %data, i32 %layer_n) #0 !dbg !4793 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %layer_n.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4794, metadata !DIExpression()), !dbg !4795
  store i32 %layer_n, i32* %layer_n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %layer_n.addr, metadata !4796, metadata !DIExpression()), !dbg !4797
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4798, metadata !DIExpression()), !dbg !4799
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4800
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 0, !dbg !4801
  %1 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4801
  %2 = load i32, i32* %layer_n.addr, align 4, !dbg !4802
  %idxprom = sext i32 %2 to i64, !dbg !4800
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %1, i64 %idxprom, !dbg !4800
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !4803
  %3 = load i32, i32* %type, align 8, !dbg !4803
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %3), !dbg !4804
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4799
  %4 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4805
  %interp = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %4, i32 0, i32 6, !dbg !4807
  %5 = load void (i8**, float*, float*, i32, i8*)*, void (i8**, float*, float*, i32, i8*)** %interp, align 8, !dbg !4807
  %tobool = icmp ne void (i8**, float*, float*, i32, i8*)* %5, null, !dbg !4805
  br i1 %tobool, label %if.then, label %if.end, !dbg !4808

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4809
  br label %return, !dbg !4809

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4811
  br label %return, !dbg !4811

return:                                           ; preds = %if.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !4812
  ret i8 %6, !dbg !4812
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_has_math(%struct.CustomData* %data) #0 !dbg !4813 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4816, metadata !DIExpression()), !dbg !4817
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4818, metadata !DIExpression()), !dbg !4819
  store i32 0, i32* %i, align 4, !dbg !4820
  br label %for.cond, !dbg !4822

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4823
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4825
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !4826
  %2 = load i32, i32* %totlayer, align 4, !dbg !4826
  %cmp = icmp slt i32 %0, %2, !dbg !4827
  br i1 %cmp, label %for.body, label %for.end, !dbg !4828

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4829
  %4 = load i32, i32* %i, align 4, !dbg !4832
  %call = call zeroext i8 @CustomData_layer_has_math(%struct.CustomData* %3, i32 %4), !dbg !4833
  %tobool = icmp ne i8 %call, 0, !dbg !4833
  br i1 %tobool, label %if.then, label %if.end, !dbg !4834

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !4835
  br label %return, !dbg !4835

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4837

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !4838
  %inc = add nsw i32 %5, 1, !dbg !4838
  store i32 %inc, i32* %i, align 4, !dbg !4838
  br label %for.cond, !dbg !4839, !llvm.loop !4840

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4842
  br label %return, !dbg !4842

return:                                           ; preds = %for.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !4843
  ret i8 %6, !dbg !4843
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_bmesh_has_free(%struct.CustomData* %data) #0 !dbg !4844 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4845, metadata !DIExpression()), !dbg !4846
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4847, metadata !DIExpression()), !dbg !4848
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4849, metadata !DIExpression()), !dbg !4850
  store i32 0, i32* %i, align 4, !dbg !4851
  br label %for.cond, !dbg !4853

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4854
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4856
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !4857
  %2 = load i32, i32* %totlayer, align 4, !dbg !4857
  %cmp = icmp slt i32 %0, %2, !dbg !4858
  br i1 %cmp, label %for.body, label %for.end, !dbg !4859

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4860
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !4863
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4863
  %5 = load i32, i32* %i, align 4, !dbg !4864
  %idxprom = sext i32 %5 to i64, !dbg !4860
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !4860
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 2, !dbg !4865
  %6 = load i32, i32* %flag, align 8, !dbg !4865
  %and = and i32 %6, 2, !dbg !4866
  %tobool = icmp ne i32 %and, 0, !dbg !4866
  br i1 %tobool, label %if.end6, label %if.then, !dbg !4867

if.then:                                          ; preds = %for.body
  %7 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4868
  %layers1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %7, i32 0, i32 0, !dbg !4870
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers1, align 8, !dbg !4870
  %9 = load i32, i32* %i, align 4, !dbg !4871
  %idxprom2 = sext i32 %9 to i64, !dbg !4868
  %arrayidx3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i64 %idxprom2, !dbg !4868
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx3, i32 0, i32 0, !dbg !4872
  %10 = load i32, i32* %type, align 8, !dbg !4872
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %10), !dbg !4873
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4874
  %11 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4875
  %free = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %11, i32 0, i32 5, !dbg !4877
  %12 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free, align 8, !dbg !4877
  %tobool4 = icmp ne void (i8*, i32, i32)* %12, null, !dbg !4875
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !4878

if.then5:                                         ; preds = %if.then
  store i8 1, i8* %retval, align 1, !dbg !4879
  br label %return, !dbg !4879

if.end:                                           ; preds = %if.then
  br label %if.end6, !dbg !4881

if.end6:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !4882

for.inc:                                          ; preds = %if.end6
  %13 = load i32, i32* %i, align 4, !dbg !4883
  %inc = add nsw i32 %13, 1, !dbg !4883
  store i32 %inc, i32* %i, align 4, !dbg !4883
  br label %for.cond, !dbg !4884, !llvm.loop !4885

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4887
  br label %return, !dbg !4887

return:                                           ; preds = %for.end, %if.then5
  %14 = load i8, i8* %retval, align 1, !dbg !4888
  ret i8 %14, !dbg !4888
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_has_interp(%struct.CustomData* %data) #0 !dbg !4889 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !4890, metadata !DIExpression()), !dbg !4891
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4892, metadata !DIExpression()), !dbg !4893
  store i32 0, i32* %i, align 4, !dbg !4894
  br label %for.cond, !dbg !4896

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4897
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4899
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !4900
  %2 = load i32, i32* %totlayer, align 4, !dbg !4900
  %cmp = icmp slt i32 %0, %2, !dbg !4901
  br i1 %cmp, label %for.body, label %for.end, !dbg !4902

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !4903
  %4 = load i32, i32* %i, align 4, !dbg !4906
  %call = call zeroext i8 @CustomData_layer_has_interp(%struct.CustomData* %3, i32 %4), !dbg !4907
  %tobool = icmp ne i8 %call, 0, !dbg !4907
  br i1 %tobool, label %if.then, label %if.end, !dbg !4908

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !4909
  br label %return, !dbg !4909

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4911

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !4912
  %inc = add nsw i32 %5, 1, !dbg !4912
  store i32 %inc, i32* %i, align 4, !dbg !4912
  br label %for.cond, !dbg !4913, !llvm.loop !4914

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4916
  br label %return, !dbg !4916

return:                                           ; preds = %for.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !4917
  ret i8 %6, !dbg !4917
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_data_copy_value(i32 %type, i8* %source, i8* %dest) #0 !dbg !4918 {
entry:
  %type.addr = alloca i32, align 4
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !4921, metadata !DIExpression()), !dbg !4922
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !4923, metadata !DIExpression()), !dbg !4924
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !4925, metadata !DIExpression()), !dbg !4926
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4927, metadata !DIExpression()), !dbg !4928
  %0 = load i32, i32* %type.addr, align 4, !dbg !4929
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !4930
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4928
  %1 = load i8*, i8** %dest.addr, align 8, !dbg !4931
  %tobool = icmp ne i8* %1, null, !dbg !4931
  br i1 %tobool, label %if.end, label %if.then, !dbg !4933

if.then:                                          ; preds = %entry
  br label %if.end4, !dbg !4934

if.end:                                           ; preds = %entry
  %2 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4935
  %copyvalue = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %2, i32 0, i32 14, !dbg !4937
  %3 = load void (i8*, i8*)*, void (i8*, i8*)** %copyvalue, align 8, !dbg !4937
  %tobool1 = icmp ne void (i8*, i8*)* %3, null, !dbg !4935
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !4938

if.then2:                                         ; preds = %if.end
  %4 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4939
  %copyvalue3 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %4, i32 0, i32 14, !dbg !4940
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %copyvalue3, align 8, !dbg !4940
  %6 = load i8*, i8** %source.addr, align 8, !dbg !4941
  %7 = load i8*, i8** %dest.addr, align 8, !dbg !4942
  call void %5(i8* %6, i8* %7), !dbg !4939
  br label %if.end4, !dbg !4939

if.else:                                          ; preds = %if.end
  %8 = load i8*, i8** %dest.addr, align 8, !dbg !4943
  %9 = load i8*, i8** %source.addr, align 8, !dbg !4944
  %10 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4945
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %10, i32 0, i32 0, !dbg !4946
  %11 = load i32, i32* %size, align 8, !dbg !4946
  %conv = sext i32 %11 to i64, !dbg !4945
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %9, i64 %conv, i1 false), !dbg !4947
  br label %if.end4

if.end4:                                          ; preds = %if.then, %if.else, %if.then2
  ret void, !dbg !4948
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_data_equals(i32 %type, i8* %data1, i8* %data2) #0 !dbg !4949 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca i32, align 4
  %data1.addr = alloca i8*, align 8
  %data2.addr = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !4952, metadata !DIExpression()), !dbg !4953
  store i8* %data1, i8** %data1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data1.addr, metadata !4954, metadata !DIExpression()), !dbg !4955
  store i8* %data2, i8** %data2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data2.addr, metadata !4956, metadata !DIExpression()), !dbg !4957
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4958, metadata !DIExpression()), !dbg !4959
  %0 = load i32, i32* %type.addr, align 4, !dbg !4960
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !4961
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4959
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4962
  %equal = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 9, !dbg !4964
  %2 = load i8 (i8*, i8*)*, i8 (i8*, i8*)** %equal, align 8, !dbg !4964
  %tobool = icmp ne i8 (i8*, i8*)* %2, null, !dbg !4962
  br i1 %tobool, label %if.then, label %if.else, !dbg !4965

if.then:                                          ; preds = %entry
  %3 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4966
  %equal1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %3, i32 0, i32 9, !dbg !4967
  %4 = load i8 (i8*, i8*)*, i8 (i8*, i8*)** %equal1, align 8, !dbg !4967
  %5 = load i8*, i8** %data1.addr, align 8, !dbg !4968
  %6 = load i8*, i8** %data2.addr, align 8, !dbg !4969
  %call2 = call zeroext i8 %4(i8* %5, i8* %6), !dbg !4966
  store i8 %call2, i8* %retval, align 1, !dbg !4970
  br label %return, !dbg !4970

if.else:                                          ; preds = %entry
  %7 = load i8*, i8** %data1.addr, align 8, !dbg !4971
  %8 = load i8*, i8** %data2.addr, align 8, !dbg !4972
  %9 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4973
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %9, i32 0, i32 0, !dbg !4974
  %10 = load i32, i32* %size, align 8, !dbg !4974
  %conv = sext i32 %10 to i64, !dbg !4973
  %call3 = call i32 @memcmp(i8* %7, i8* %8, i64 %conv) #5, !dbg !4975
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4976
  %lnot = xor i1 %tobool4, true, !dbg !4976
  %lnot.ext = zext i1 %lnot to i32, !dbg !4976
  %conv5 = trunc i32 %lnot.ext to i8, !dbg !4976
  store i8 %conv5, i8* %retval, align 1, !dbg !4977
  br label %return, !dbg !4977

return:                                           ; preds = %if.else, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !4978
  ret i8 %11, !dbg !4978
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_data_initminmax(i32 %type, i8* %min, i8* %max) #0 !dbg !4979 {
entry:
  %type.addr = alloca i32, align 4
  %min.addr = alloca i8*, align 8
  %max.addr = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !4982, metadata !DIExpression()), !dbg !4983
  store i8* %min, i8** %min.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %min.addr, metadata !4984, metadata !DIExpression()), !dbg !4985
  store i8* %max, i8** %max.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %max.addr, metadata !4986, metadata !DIExpression()), !dbg !4987
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !4988, metadata !DIExpression()), !dbg !4989
  %0 = load i32, i32* %type.addr, align 4, !dbg !4990
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !4991
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4989
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4992
  %initminmax = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 11, !dbg !4994
  %2 = load void (i8*, i8*)*, void (i8*, i8*)** %initminmax, align 8, !dbg !4994
  %tobool = icmp ne void (i8*, i8*)* %2, null, !dbg !4992
  br i1 %tobool, label %if.then, label %if.end, !dbg !4995

if.then:                                          ; preds = %entry
  %3 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !4996
  %initminmax1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %3, i32 0, i32 11, !dbg !4997
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %initminmax1, align 8, !dbg !4997
  %5 = load i8*, i8** %min.addr, align 8, !dbg !4998
  %6 = load i8*, i8** %max.addr, align 8, !dbg !4999
  call void %4(i8* %5, i8* %6), !dbg !4996
  br label %if.end, !dbg !4996

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5000
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_data_dominmax(i32 %type, i8* %data, i8* %min, i8* %max) #0 !dbg !5001 {
entry:
  %type.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %min.addr = alloca i8*, align 8
  %max.addr = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5004, metadata !DIExpression()), !dbg !5005
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5006, metadata !DIExpression()), !dbg !5007
  store i8* %min, i8** %min.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %min.addr, metadata !5008, metadata !DIExpression()), !dbg !5009
  store i8* %max, i8** %max.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %max.addr, metadata !5010, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5012, metadata !DIExpression()), !dbg !5013
  %0 = load i32, i32* %type.addr, align 4, !dbg !5014
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !5015
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5013
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5016
  %dominmax = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 13, !dbg !5018
  %2 = load void (i8*, i8*, i8*)*, void (i8*, i8*, i8*)** %dominmax, align 8, !dbg !5018
  %tobool = icmp ne void (i8*, i8*, i8*)* %2, null, !dbg !5016
  br i1 %tobool, label %if.then, label %if.end, !dbg !5019

if.then:                                          ; preds = %entry
  %3 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5020
  %dominmax1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %3, i32 0, i32 13, !dbg !5021
  %4 = load void (i8*, i8*, i8*)*, void (i8*, i8*, i8*)** %dominmax1, align 8, !dbg !5021
  %5 = load i8*, i8** %data.addr, align 8, !dbg !5022
  %6 = load i8*, i8** %min.addr, align 8, !dbg !5023
  %7 = load i8*, i8** %max.addr, align 8, !dbg !5024
  call void %4(i8* %5, i8* %6, i8* %7), !dbg !5020
  br label %if.end, !dbg !5020

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5025
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_data_multiply(i32 %type, i8* %data, float %fac) #0 !dbg !5026 {
entry:
  %type.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %fac.addr = alloca float, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5029, metadata !DIExpression()), !dbg !5030
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5031, metadata !DIExpression()), !dbg !5032
  store float %fac, float* %fac.addr, align 4
  call void @llvm.dbg.declare(metadata float* %fac.addr, metadata !5033, metadata !DIExpression()), !dbg !5034
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5035, metadata !DIExpression()), !dbg !5036
  %0 = load i32, i32* %type.addr, align 4, !dbg !5037
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !5038
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5036
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5039
  %multiply = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 10, !dbg !5041
  %2 = load void (i8*, float)*, void (i8*, float)** %multiply, align 8, !dbg !5041
  %tobool = icmp ne void (i8*, float)* %2, null, !dbg !5039
  br i1 %tobool, label %if.then, label %if.end, !dbg !5042

if.then:                                          ; preds = %entry
  %3 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5043
  %multiply1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %3, i32 0, i32 10, !dbg !5044
  %4 = load void (i8*, float)*, void (i8*, float)** %multiply1, align 8, !dbg !5044
  %5 = load i8*, i8** %data.addr, align 8, !dbg !5045
  %6 = load float, float* %fac.addr, align 4, !dbg !5046
  call void %4(i8* %5, float %6), !dbg !5043
  br label %if.end, !dbg !5043

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5047
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_data_add(i32 %type, i8* %data1, i8* %data2) #0 !dbg !5048 {
entry:
  %type.addr = alloca i32, align 4
  %data1.addr = alloca i8*, align 8
  %data2.addr = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5051, metadata !DIExpression()), !dbg !5052
  store i8* %data1, i8** %data1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data1.addr, metadata !5053, metadata !DIExpression()), !dbg !5054
  store i8* %data2, i8** %data2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data2.addr, metadata !5055, metadata !DIExpression()), !dbg !5056
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5057, metadata !DIExpression()), !dbg !5058
  %0 = load i32, i32* %type.addr, align 4, !dbg !5059
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !5060
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5058
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5061
  %add = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 12, !dbg !5063
  %2 = load void (i8*, i8*)*, void (i8*, i8*)** %add, align 8, !dbg !5063
  %tobool = icmp ne void (i8*, i8*)* %2, null, !dbg !5061
  br i1 %tobool, label %if.then, label %if.end, !dbg !5064

if.then:                                          ; preds = %entry
  %3 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5065
  %add1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %3, i32 0, i32 12, !dbg !5066
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %add1, align 8, !dbg !5066
  %5 = load i8*, i8** %data1.addr, align 8, !dbg !5067
  %6 = load i8*, i8** %data2.addr, align 8, !dbg !5068
  call void %4(i8* %5, i8* %6), !dbg !5065
  br label %if.end, !dbg !5065

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5069
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_set(%struct.CustomData* %data, i8* %block, i32 %type, i8* %source) #0 !dbg !5070 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %source.addr = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5073, metadata !DIExpression()), !dbg !5074
  store i8* %block, i8** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %block.addr, metadata !5075, metadata !DIExpression()), !dbg !5076
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5077, metadata !DIExpression()), !dbg !5078
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !5079, metadata !DIExpression()), !dbg !5080
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !5081, metadata !DIExpression()), !dbg !5082
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5083
  %1 = load i8*, i8** %block.addr, align 8, !dbg !5084
  %2 = load i32, i32* %type.addr, align 4, !dbg !5085
  %call = call i8* @CustomData_bmesh_get(%struct.CustomData* %0, i8* %1, i32 %2), !dbg !5086
  store i8* %call, i8** %dest, align 8, !dbg !5082
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5087, metadata !DIExpression()), !dbg !5088
  %3 = load i32, i32* %type.addr, align 4, !dbg !5089
  %call1 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %3), !dbg !5090
  store %struct.LayerTypeInfo* %call1, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5088
  %4 = load i8*, i8** %dest, align 8, !dbg !5091
  %tobool = icmp ne i8* %4, null, !dbg !5091
  br i1 %tobool, label %if.end, label %if.then, !dbg !5093

if.then:                                          ; preds = %entry
  br label %if.end5, !dbg !5094

if.end:                                           ; preds = %entry
  %5 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5095
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %5, i32 0, i32 4, !dbg !5097
  %6 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !5097
  %tobool2 = icmp ne void (i8*, i8*, i32)* %6, null, !dbg !5095
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !5098

if.then3:                                         ; preds = %if.end
  %7 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5099
  %copy4 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %7, i32 0, i32 4, !dbg !5100
  %8 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy4, align 8, !dbg !5100
  %9 = load i8*, i8** %source.addr, align 8, !dbg !5101
  %10 = load i8*, i8** %dest, align 8, !dbg !5102
  call void %8(i8* %9, i8* %10, i32 1), !dbg !5099
  br label %if.end5, !dbg !5099

if.else:                                          ; preds = %if.end
  %11 = load i8*, i8** %dest, align 8, !dbg !5103
  %12 = load i8*, i8** %source.addr, align 8, !dbg !5104
  %13 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5105
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %13, i32 0, i32 0, !dbg !5106
  %14 = load i32, i32* %size, align 8, !dbg !5106
  %conv = sext i32 %14 to i64, !dbg !5105
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %12, i64 %conv, i1 false), !dbg !5107
  br label %if.end5

if.end5:                                          ; preds = %if.then, %if.else, %if.then3
  ret void, !dbg !5108
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_set_n(%struct.CustomData* %data, i8* %block, i32 %type, i32 %n, i8* %source) #0 !dbg !5109 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %source.addr = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5112, metadata !DIExpression()), !dbg !5113
  store i8* %block, i8** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %block.addr, metadata !5114, metadata !DIExpression()), !dbg !5115
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5116, metadata !DIExpression()), !dbg !5117
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !5118, metadata !DIExpression()), !dbg !5119
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !5120, metadata !DIExpression()), !dbg !5121
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !5122, metadata !DIExpression()), !dbg !5123
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5124
  %1 = load i8*, i8** %block.addr, align 8, !dbg !5125
  %2 = load i32, i32* %type.addr, align 4, !dbg !5126
  %3 = load i32, i32* %n.addr, align 4, !dbg !5127
  %call = call i8* @CustomData_bmesh_get_n(%struct.CustomData* %0, i8* %1, i32 %2, i32 %3), !dbg !5128
  store i8* %call, i8** %dest, align 8, !dbg !5123
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5129, metadata !DIExpression()), !dbg !5130
  %4 = load i32, i32* %type.addr, align 4, !dbg !5131
  %call1 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %4), !dbg !5132
  store %struct.LayerTypeInfo* %call1, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5130
  %5 = load i8*, i8** %dest, align 8, !dbg !5133
  %tobool = icmp ne i8* %5, null, !dbg !5133
  br i1 %tobool, label %if.end, label %if.then, !dbg !5135

if.then:                                          ; preds = %entry
  br label %if.end5, !dbg !5136

if.end:                                           ; preds = %entry
  %6 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5137
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %6, i32 0, i32 4, !dbg !5139
  %7 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !5139
  %tobool2 = icmp ne void (i8*, i8*, i32)* %7, null, !dbg !5137
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !5140

if.then3:                                         ; preds = %if.end
  %8 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5141
  %copy4 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %8, i32 0, i32 4, !dbg !5142
  %9 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy4, align 8, !dbg !5142
  %10 = load i8*, i8** %source.addr, align 8, !dbg !5143
  %11 = load i8*, i8** %dest, align 8, !dbg !5144
  call void %9(i8* %10, i8* %11, i32 1), !dbg !5141
  br label %if.end5, !dbg !5141

if.else:                                          ; preds = %if.end
  %12 = load i8*, i8** %dest, align 8, !dbg !5145
  %13 = load i8*, i8** %source.addr, align 8, !dbg !5146
  %14 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5147
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %14, i32 0, i32 0, !dbg !5148
  %15 = load i32, i32* %size, align 8, !dbg !5148
  %conv = sext i32 %15 to i64, !dbg !5147
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 %conv, i1 false), !dbg !5149
  br label %if.end5

if.end5:                                          ; preds = %if.then, %if.else, %if.then3
  ret void, !dbg !5150
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_set_layer_n(%struct.CustomData* %data, i8* %block, i32 %n, i8* %source) #0 !dbg !5151 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %source.addr = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5154, metadata !DIExpression()), !dbg !5155
  store i8* %block, i8** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %block.addr, metadata !5156, metadata !DIExpression()), !dbg !5157
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !5158, metadata !DIExpression()), !dbg !5159
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !5160, metadata !DIExpression()), !dbg !5161
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !5162, metadata !DIExpression()), !dbg !5163
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5164
  %1 = load i8*, i8** %block.addr, align 8, !dbg !5165
  %2 = load i32, i32* %n.addr, align 4, !dbg !5166
  %call = call i8* @CustomData_bmesh_get_layer_n(%struct.CustomData* %0, i8* %1, i32 %2), !dbg !5167
  store i8* %call, i8** %dest, align 8, !dbg !5163
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5168, metadata !DIExpression()), !dbg !5169
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5170
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !5171
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5171
  %5 = load i32, i32* %n.addr, align 4, !dbg !5172
  %idxprom = sext i32 %5 to i64, !dbg !5170
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !5170
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !5173
  %6 = load i32, i32* %type, align 8, !dbg !5173
  %call1 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %6), !dbg !5174
  store %struct.LayerTypeInfo* %call1, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5169
  %7 = load i8*, i8** %dest, align 8, !dbg !5175
  %tobool = icmp ne i8* %7, null, !dbg !5175
  br i1 %tobool, label %if.end, label %if.then, !dbg !5177

if.then:                                          ; preds = %entry
  br label %if.end5, !dbg !5178

if.end:                                           ; preds = %entry
  %8 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5179
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %8, i32 0, i32 4, !dbg !5181
  %9 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !5181
  %tobool2 = icmp ne void (i8*, i8*, i32)* %9, null, !dbg !5179
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !5182

if.then3:                                         ; preds = %if.end
  %10 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5183
  %copy4 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %10, i32 0, i32 4, !dbg !5184
  %11 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy4, align 8, !dbg !5184
  %12 = load i8*, i8** %source.addr, align 8, !dbg !5185
  %13 = load i8*, i8** %dest, align 8, !dbg !5186
  call void %11(i8* %12, i8* %13, i32 1), !dbg !5183
  br label %if.end5, !dbg !5183

if.else:                                          ; preds = %if.end
  %14 = load i8*, i8** %dest, align 8, !dbg !5187
  %15 = load i8*, i8** %source.addr, align 8, !dbg !5188
  %16 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5189
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %16, i32 0, i32 0, !dbg !5190
  %17 = load i32, i32* %size, align 8, !dbg !5190
  %conv = sext i32 %17 to i64, !dbg !5189
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 %conv, i1 false), !dbg !5191
  br label %if.end5

if.end5:                                          ; preds = %if.then, %if.else, %if.then3
  ret void, !dbg !5192
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_interp_n(%struct.CustomData* %data, i8** %src_blocks, float* %weights, float* %sub_weights, i32 %count, i8* %dest_block, i32 %n) #0 !dbg !5193 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %src_blocks.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest_block.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5196, metadata !DIExpression()), !dbg !5197
  store i8** %src_blocks, i8*** %src_blocks.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %src_blocks.addr, metadata !5198, metadata !DIExpression()), !dbg !5199
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !5200, metadata !DIExpression()), !dbg !5201
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !5202, metadata !DIExpression()), !dbg !5203
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !5204, metadata !DIExpression()), !dbg !5205
  store i8* %dest_block, i8** %dest_block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest_block.addr, metadata !5206, metadata !DIExpression()), !dbg !5207
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !5210, metadata !DIExpression()), !dbg !5211
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5212
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 0, !dbg !5213
  %1 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5213
  %2 = load i32, i32* %n.addr, align 4, !dbg !5214
  %idxprom = sext i32 %2 to i64, !dbg !5212
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %1, i64 %idxprom, !dbg !5212
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !5211
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5215, metadata !DIExpression()), !dbg !5216
  %3 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !5217
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %3, i32 0, i32 0, !dbg !5218
  %4 = load i32, i32* %type, align 8, !dbg !5218
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %4), !dbg !5219
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5216
  %5 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5220
  %interp = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %5, i32 0, i32 6, !dbg !5221
  %6 = load void (i8**, float*, float*, i32, i8*)*, void (i8**, float*, float*, i32, i8*)** %interp, align 8, !dbg !5221
  %7 = load i8**, i8*** %src_blocks.addr, align 8, !dbg !5222
  %8 = load float*, float** %weights.addr, align 8, !dbg !5223
  %9 = load float*, float** %sub_weights.addr, align 8, !dbg !5224
  %10 = load i32, i32* %count.addr, align 4, !dbg !5225
  %11 = load i8*, i8** %dest_block.addr, align 8, !dbg !5226
  %12 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !5227
  %offset = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %12, i32 0, i32 1, !dbg !5228
  %13 = load i32, i32* %offset, align 4, !dbg !5228
  %idx.ext = sext i32 %13 to i64, !dbg !5229
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext, !dbg !5229
  call void %6(i8** %7, float* %8, float* %9, i32 %10, i8* %add.ptr), !dbg !5220
  ret void, !dbg !5230
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_interp(%struct.CustomData* %data, i8** %src_blocks, float* %weights, float* %sub_weights, i32 %count, i8* %dest_block) #0 !dbg !5231 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %src_blocks.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest_block.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %source_buf = alloca [100 x i8*], align 16
  %sources = alloca i8**, align 8
  %layer = alloca %struct.CustomDataLayer*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5234, metadata !DIExpression()), !dbg !5235
  store i8** %src_blocks, i8*** %src_blocks.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %src_blocks.addr, metadata !5236, metadata !DIExpression()), !dbg !5237
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !5238, metadata !DIExpression()), !dbg !5239
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !5240, metadata !DIExpression()), !dbg !5241
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !5242, metadata !DIExpression()), !dbg !5243
  store i8* %dest_block, i8** %dest_block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest_block.addr, metadata !5244, metadata !DIExpression()), !dbg !5245
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5246, metadata !DIExpression()), !dbg !5247
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5248, metadata !DIExpression()), !dbg !5249
  call void @llvm.dbg.declare(metadata [100 x i8*]* %source_buf, metadata !5250, metadata !DIExpression()), !dbg !5251
  call void @llvm.dbg.declare(metadata i8*** %sources, metadata !5252, metadata !DIExpression()), !dbg !5253
  %arraydecay = getelementptr inbounds [100 x i8*], [100 x i8*]* %source_buf, i64 0, i64 0, !dbg !5254
  store i8** %arraydecay, i8*** %sources, align 8, !dbg !5253
  %0 = load i32, i32* %count.addr, align 4, !dbg !5255
  %cmp = icmp sgt i32 %0, 100, !dbg !5257
  br i1 %cmp, label %if.then, label %if.end, !dbg !5258

if.then:                                          ; preds = %entry
  %1 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !5259
  %2 = load i32, i32* %count.addr, align 4, !dbg !5260
  %conv = sext i32 %2 to i64, !dbg !5260
  %mul = mul i64 8, %conv, !dbg !5261
  %call = call i8* %1(i64 %mul, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0)), !dbg !5259
  %3 = bitcast i8* %call to i8**, !dbg !5259
  store i8** %3, i8*** %sources, align 8, !dbg !5262
  br label %if.end, !dbg !5263

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !5264
  br label %for.cond, !dbg !5266

for.cond:                                         ; preds = %for.inc14, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !5267
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5269
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 2, !dbg !5270
  %6 = load i32, i32* %totlayer, align 4, !dbg !5270
  %cmp1 = icmp slt i32 %4, %6, !dbg !5271
  br i1 %cmp1, label %for.body, label %for.end16, !dbg !5272

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !5273, metadata !DIExpression()), !dbg !5275
  %7 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5276
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %7, i32 0, i32 0, !dbg !5277
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5277
  %9 = load i32, i32* %i, align 4, !dbg !5278
  %idxprom = sext i32 %9 to i64, !dbg !5276
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i64 %idxprom, !dbg !5276
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !5275
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5279, metadata !DIExpression()), !dbg !5280
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !5281
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i32 0, i32 0, !dbg !5282
  %11 = load i32, i32* %type, align 8, !dbg !5282
  %call3 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %11), !dbg !5283
  store %struct.LayerTypeInfo* %call3, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5280
  %12 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5284
  %interp = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %12, i32 0, i32 6, !dbg !5286
  %13 = load void (i8**, float*, float*, i32, i8*)*, void (i8**, float*, float*, i32, i8*)** %interp, align 8, !dbg !5286
  %tobool = icmp ne void (i8**, float*, float*, i32, i8*)* %13, null, !dbg !5284
  br i1 %tobool, label %if.then4, label %if.end13, !dbg !5287

if.then4:                                         ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !5288
  br label %for.cond5, !dbg !5291

for.cond5:                                        ; preds = %for.inc, %if.then4
  %14 = load i32, i32* %j, align 4, !dbg !5292
  %15 = load i32, i32* %count.addr, align 4, !dbg !5294
  %cmp6 = icmp slt i32 %14, %15, !dbg !5295
  br i1 %cmp6, label %for.body8, label %for.end, !dbg !5296

for.body8:                                        ; preds = %for.cond5
  %16 = load i8**, i8*** %src_blocks.addr, align 8, !dbg !5297
  %17 = load i32, i32* %j, align 4, !dbg !5299
  %idxprom9 = sext i32 %17 to i64, !dbg !5297
  %arrayidx10 = getelementptr inbounds i8*, i8** %16, i64 %idxprom9, !dbg !5297
  %18 = load i8*, i8** %arrayidx10, align 8, !dbg !5297
  %19 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !5300
  %offset = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %19, i32 0, i32 1, !dbg !5301
  %20 = load i32, i32* %offset, align 4, !dbg !5301
  %idx.ext = sext i32 %20 to i64, !dbg !5302
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %idx.ext, !dbg !5302
  %21 = load i8**, i8*** %sources, align 8, !dbg !5303
  %22 = load i32, i32* %j, align 4, !dbg !5304
  %idxprom11 = sext i32 %22 to i64, !dbg !5303
  %arrayidx12 = getelementptr inbounds i8*, i8** %21, i64 %idxprom11, !dbg !5303
  store i8* %add.ptr, i8** %arrayidx12, align 8, !dbg !5305
  br label %for.inc, !dbg !5306

for.inc:                                          ; preds = %for.body8
  %23 = load i32, i32* %j, align 4, !dbg !5307
  %inc = add nsw i32 %23, 1, !dbg !5307
  store i32 %inc, i32* %j, align 4, !dbg !5307
  br label %for.cond5, !dbg !5308, !llvm.loop !5309

for.end:                                          ; preds = %for.cond5
  %24 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5311
  %25 = load i8**, i8*** %sources, align 8, !dbg !5312
  %26 = load float*, float** %weights.addr, align 8, !dbg !5313
  %27 = load float*, float** %sub_weights.addr, align 8, !dbg !5314
  %28 = load i32, i32* %count.addr, align 4, !dbg !5315
  %29 = load i8*, i8** %dest_block.addr, align 8, !dbg !5316
  %30 = load i32, i32* %i, align 4, !dbg !5317
  call void @CustomData_bmesh_interp_n(%struct.CustomData* %24, i8** %25, float* %26, float* %27, i32 %28, i8* %29, i32 %30), !dbg !5318
  br label %if.end13, !dbg !5319

if.end13:                                         ; preds = %for.end, %for.body
  br label %for.inc14, !dbg !5320

for.inc14:                                        ; preds = %if.end13
  %31 = load i32, i32* %i, align 4, !dbg !5321
  %inc15 = add nsw i32 %31, 1, !dbg !5321
  store i32 %inc15, i32* %i, align 4, !dbg !5321
  br label %for.cond, !dbg !5322, !llvm.loop !5323

for.end16:                                        ; preds = %for.cond
  %32 = load i32, i32* %count.addr, align 4, !dbg !5325
  %cmp17 = icmp sgt i32 %32, 100, !dbg !5327
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !5328

if.then19:                                        ; preds = %for.end16
  %33 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !5329
  %34 = load i8**, i8*** %sources, align 8, !dbg !5330
  %35 = bitcast i8** %34 to i8*, !dbg !5330
  call void %33(i8* %35), !dbg !5329
  br label %if.end20, !dbg !5329

if.end20:                                         ; preds = %if.then19, %for.end16
  ret void, !dbg !5331
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_bmesh_set_default(%struct.CustomData* %data, i8** %block) #0 !dbg !5332 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5333, metadata !DIExpression()), !dbg !5334
  store i8** %block, i8*** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %block.addr, metadata !5335, metadata !DIExpression()), !dbg !5336
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5337, metadata !DIExpression()), !dbg !5338
  %0 = load i8**, i8*** %block.addr, align 8, !dbg !5339
  %1 = load i8*, i8** %0, align 8, !dbg !5341
  %cmp = icmp eq i8* %1, null, !dbg !5342
  br i1 %cmp, label %if.then, label %if.end, !dbg !5343

if.then:                                          ; preds = %entry
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5344
  %3 = load i8**, i8*** %block.addr, align 8, !dbg !5345
  call void @CustomData_bmesh_alloc_block(%struct.CustomData* %2, i8** %3), !dbg !5346
  br label %if.end, !dbg !5346

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !5347
  br label %for.cond, !dbg !5349

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !5350
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5352
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 2, !dbg !5353
  %6 = load i32, i32* %totlayer, align 4, !dbg !5353
  %cmp1 = icmp slt i32 %4, %6, !dbg !5354
  br i1 %cmp1, label %for.body, label %for.end, !dbg !5355

for.body:                                         ; preds = %for.cond
  %7 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5356
  %8 = load i8**, i8*** %block.addr, align 8, !dbg !5358
  %9 = load i32, i32* %i, align 4, !dbg !5359
  call void @CustomData_bmesh_set_default_n(%struct.CustomData* %7, i8** %8, i32 %9), !dbg !5360
  br label %for.inc, !dbg !5361

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !5362
  %inc = add nsw i32 %10, 1, !dbg !5362
  store i32 %inc, i32* %i, align 4, !dbg !5362
  br label %for.cond, !dbg !5363, !llvm.loop !5364

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5366
}

; Function Attrs: noinline nounwind uwtable
define internal void @CustomData_bmesh_set_default_n(%struct.CustomData* %data, i8** %block, i32 %n) #0 !dbg !5367 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %block.addr = alloca i8**, align 8
  %n.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %offset = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5370, metadata !DIExpression()), !dbg !5371
  store i8** %block, i8*** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %block.addr, metadata !5372, metadata !DIExpression()), !dbg !5373
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !5374, metadata !DIExpression()), !dbg !5375
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5376, metadata !DIExpression()), !dbg !5377
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !5378, metadata !DIExpression()), !dbg !5379
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5380
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 0, !dbg !5381
  %1 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5381
  %2 = load i32, i32* %n.addr, align 4, !dbg !5382
  %idxprom = sext i32 %2 to i64, !dbg !5380
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %1, i64 %idxprom, !dbg !5380
  %offset1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 1, !dbg !5383
  %3 = load i32, i32* %offset1, align 4, !dbg !5383
  store i32 %3, i32* %offset, align 4, !dbg !5379
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5384
  %layers2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 0, !dbg !5385
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers2, align 8, !dbg !5385
  %6 = load i32, i32* %n.addr, align 4, !dbg !5386
  %idxprom3 = sext i32 %6 to i64, !dbg !5384
  %arrayidx4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom3, !dbg !5384
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx4, i32 0, i32 0, !dbg !5387
  %7 = load i32, i32* %type, align 8, !dbg !5387
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %7), !dbg !5388
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5389
  %8 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5390
  %set_default = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %8, i32 0, i32 8, !dbg !5392
  %9 = load void (i8*, i32)*, void (i8*, i32)** %set_default, align 8, !dbg !5392
  %tobool = icmp ne void (i8*, i32)* %9, null, !dbg !5390
  br i1 %tobool, label %if.then, label %if.else, !dbg !5393

if.then:                                          ; preds = %entry
  %10 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5394
  %set_default5 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %10, i32 0, i32 8, !dbg !5396
  %11 = load void (i8*, i32)*, void (i8*, i32)** %set_default5, align 8, !dbg !5396
  %12 = load i8**, i8*** %block.addr, align 8, !dbg !5397
  %13 = load i8*, i8** %12, align 8, !dbg !5398
  %14 = load i32, i32* %offset, align 4, !dbg !5399
  %idx.ext = sext i32 %14 to i64, !dbg !5400
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext, !dbg !5400
  call void %11(i8* %add.ptr, i32 1), !dbg !5394
  br label %if.end, !dbg !5401

if.else:                                          ; preds = %entry
  %15 = load i8**, i8*** %block.addr, align 8, !dbg !5402
  %16 = load i8*, i8** %15, align 8, !dbg !5404
  %17 = load i32, i32* %offset, align 4, !dbg !5405
  %idx.ext6 = sext i32 %17 to i64, !dbg !5406
  %add.ptr7 = getelementptr inbounds i8, i8* %16, i64 %idx.ext6, !dbg !5406
  %18 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5407
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %18, i32 0, i32 0, !dbg !5408
  %19 = load i32, i32* %size, align 8, !dbg !5408
  %conv = sext i32 %19 to i64, !dbg !5407
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr7, i8 0, i64 %conv, i1 false), !dbg !5409
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5410
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_to_bmesh_block(%struct.CustomData* %source, %struct.CustomData* %dest, i32 %src_index, i8** %dest_block, i8 zeroext %use_default_init) #0 !dbg !5411 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %src_index.addr = alloca i32, align 4
  %dest_block.addr = alloca i8**, align 8
  %use_default_init.addr = alloca i8, align 1
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %dest_i = alloca i32, align 4
  %src_i = alloca i32, align 4
  %src_offset = alloca i32, align 4
  %offset = alloca i32, align 4
  %src_data = alloca i8*, align 8
  %dest_data = alloca i8*, align 8
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !5414, metadata !DIExpression()), !dbg !5415
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !5416, metadata !DIExpression()), !dbg !5417
  store i32 %src_index, i32* %src_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_index.addr, metadata !5418, metadata !DIExpression()), !dbg !5419
  store i8** %dest_block, i8*** %dest_block.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %dest_block.addr, metadata !5420, metadata !DIExpression()), !dbg !5421
  store i8 %use_default_init, i8* %use_default_init.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_default_init.addr, metadata !5422, metadata !DIExpression()), !dbg !5423
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5424, metadata !DIExpression()), !dbg !5425
  call void @llvm.dbg.declare(metadata i32* %dest_i, metadata !5426, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.declare(metadata i32* %src_i, metadata !5428, metadata !DIExpression()), !dbg !5429
  call void @llvm.dbg.declare(metadata i32* %src_offset, metadata !5430, metadata !DIExpression()), !dbg !5431
  %0 = load i8**, i8*** %dest_block.addr, align 8, !dbg !5432
  %1 = load i8*, i8** %0, align 8, !dbg !5434
  %cmp = icmp eq i8* %1, null, !dbg !5435
  br i1 %cmp, label %if.then, label %if.end, !dbg !5436

if.then:                                          ; preds = %entry
  %2 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5437
  %3 = load i8**, i8*** %dest_block.addr, align 8, !dbg !5438
  call void @CustomData_bmesh_alloc_block(%struct.CustomData* %2, i8** %3), !dbg !5439
  br label %if.end, !dbg !5439

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %dest_i, align 4, !dbg !5440
  store i32 0, i32* %src_i, align 4, !dbg !5441
  br label %for.cond, !dbg !5443

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %src_i, align 4, !dbg !5444
  %5 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !5446
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 2, !dbg !5447
  %6 = load i32, i32* %totlayer, align 4, !dbg !5447
  %cmp1 = icmp slt i32 %4, %6, !dbg !5448
  br i1 %cmp1, label %for.body, label %for.end, !dbg !5449

for.body:                                         ; preds = %for.cond
  br label %while.cond, !dbg !5450

while.cond:                                       ; preds = %if.end10, %for.body
  %7 = load i32, i32* %dest_i, align 4, !dbg !5452
  %8 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5453
  %totlayer2 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %8, i32 0, i32 2, !dbg !5454
  %9 = load i32, i32* %totlayer2, align 4, !dbg !5454
  %cmp3 = icmp slt i32 %7, %9, !dbg !5455
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !5456

land.rhs:                                         ; preds = %while.cond
  %10 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5457
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !5458
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5458
  %12 = load i32, i32* %dest_i, align 4, !dbg !5459
  %idxprom = sext i32 %12 to i64, !dbg !5457
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom, !dbg !5457
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !5460
  %13 = load i32, i32* %type, align 8, !dbg !5460
  %14 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !5461
  %layers4 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 0, !dbg !5462
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers4, align 8, !dbg !5462
  %16 = load i32, i32* %src_i, align 4, !dbg !5463
  %idxprom5 = sext i32 %16 to i64, !dbg !5461
  %arrayidx6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i64 %idxprom5, !dbg !5461
  %type7 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx6, i32 0, i32 0, !dbg !5464
  %17 = load i32, i32* %type7, align 8, !dbg !5464
  %cmp8 = icmp slt i32 %13, %17, !dbg !5465
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %18 = phi i1 [ false, %while.cond ], [ %cmp8, %land.rhs ], !dbg !5466
  br i1 %18, label %while.body, label %while.end, !dbg !5450

while.body:                                       ; preds = %land.end
  %19 = load i8, i8* %use_default_init.addr, align 1, !dbg !5467
  %tobool = icmp ne i8 %19, 0, !dbg !5467
  br i1 %tobool, label %if.then9, label %if.end10, !dbg !5470

if.then9:                                         ; preds = %while.body
  %20 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5471
  %21 = load i8**, i8*** %dest_block.addr, align 8, !dbg !5473
  %22 = load i32, i32* %dest_i, align 4, !dbg !5474
  call void @CustomData_bmesh_set_default_n(%struct.CustomData* %20, i8** %21, i32 %22), !dbg !5475
  br label %if.end10, !dbg !5476

if.end10:                                         ; preds = %if.then9, %while.body
  %23 = load i32, i32* %dest_i, align 4, !dbg !5477
  %inc = add nsw i32 %23, 1, !dbg !5477
  store i32 %inc, i32* %dest_i, align 4, !dbg !5477
  br label %while.cond, !dbg !5450, !llvm.loop !5478

while.end:                                        ; preds = %land.end
  %24 = load i32, i32* %dest_i, align 4, !dbg !5480
  %25 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5482
  %totlayer11 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %25, i32 0, i32 2, !dbg !5483
  %26 = load i32, i32* %totlayer11, align 4, !dbg !5483
  %cmp12 = icmp sge i32 %24, %26, !dbg !5484
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !5485

if.then13:                                        ; preds = %while.end
  br label %for.end, !dbg !5486

if.end14:                                         ; preds = %while.end
  %27 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5487
  %layers15 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %27, i32 0, i32 0, !dbg !5489
  %28 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers15, align 8, !dbg !5489
  %29 = load i32, i32* %dest_i, align 4, !dbg !5490
  %idxprom16 = sext i32 %29 to i64, !dbg !5487
  %arrayidx17 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %28, i64 %idxprom16, !dbg !5487
  %type18 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx17, i32 0, i32 0, !dbg !5491
  %30 = load i32, i32* %type18, align 8, !dbg !5491
  %31 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !5492
  %layers19 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %31, i32 0, i32 0, !dbg !5493
  %32 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers19, align 8, !dbg !5493
  %33 = load i32, i32* %src_i, align 4, !dbg !5494
  %idxprom20 = sext i32 %33 to i64, !dbg !5492
  %arrayidx21 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %32, i64 %idxprom20, !dbg !5492
  %type22 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx21, i32 0, i32 0, !dbg !5495
  %34 = load i32, i32* %type22, align 8, !dbg !5495
  %cmp23 = icmp eq i32 %30, %34, !dbg !5496
  br i1 %cmp23, label %if.then24, label %if.end46, !dbg !5497

if.then24:                                        ; preds = %if.end14
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !5498, metadata !DIExpression()), !dbg !5500
  %35 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5501
  %layers25 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %35, i32 0, i32 0, !dbg !5502
  %36 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers25, align 8, !dbg !5502
  %37 = load i32, i32* %dest_i, align 4, !dbg !5503
  %idxprom26 = sext i32 %37 to i64, !dbg !5501
  %arrayidx27 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %36, i64 %idxprom26, !dbg !5501
  %offset28 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx27, i32 0, i32 1, !dbg !5504
  %38 = load i32, i32* %offset28, align 4, !dbg !5504
  store i32 %38, i32* %offset, align 4, !dbg !5500
  call void @llvm.dbg.declare(metadata i8** %src_data, metadata !5505, metadata !DIExpression()), !dbg !5506
  %39 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !5507
  %layers29 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %39, i32 0, i32 0, !dbg !5508
  %40 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers29, align 8, !dbg !5508
  %41 = load i32, i32* %src_i, align 4, !dbg !5509
  %idxprom30 = sext i32 %41 to i64, !dbg !5507
  %arrayidx31 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %40, i64 %idxprom30, !dbg !5507
  %data = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx31, i32 0, i32 9, !dbg !5510
  %42 = load i8*, i8** %data, align 8, !dbg !5510
  store i8* %42, i8** %src_data, align 8, !dbg !5506
  call void @llvm.dbg.declare(metadata i8** %dest_data, metadata !5511, metadata !DIExpression()), !dbg !5512
  %43 = load i8**, i8*** %dest_block.addr, align 8, !dbg !5513
  %44 = load i8*, i8** %43, align 8, !dbg !5514
  %45 = load i32, i32* %offset, align 4, !dbg !5515
  %idx.ext = sext i32 %45 to i64, !dbg !5516
  %add.ptr = getelementptr inbounds i8, i8* %44, i64 %idx.ext, !dbg !5516
  store i8* %add.ptr, i8** %dest_data, align 8, !dbg !5512
  %46 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5517
  %layers32 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %46, i32 0, i32 0, !dbg !5518
  %47 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers32, align 8, !dbg !5518
  %48 = load i32, i32* %dest_i, align 4, !dbg !5519
  %idxprom33 = sext i32 %48 to i64, !dbg !5517
  %arrayidx34 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %47, i64 %idxprom33, !dbg !5517
  %type35 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx34, i32 0, i32 0, !dbg !5520
  %49 = load i32, i32* %type35, align 8, !dbg !5520
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %49), !dbg !5521
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5522
  %50 = load i32, i32* %src_index.addr, align 4, !dbg !5523
  %51 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5524
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %51, i32 0, i32 0, !dbg !5525
  %52 = load i32, i32* %size, align 8, !dbg !5525
  %mul = mul nsw i32 %50, %52, !dbg !5526
  store i32 %mul, i32* %src_offset, align 4, !dbg !5527
  %53 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5528
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %53, i32 0, i32 4, !dbg !5530
  %54 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !5530
  %tobool36 = icmp ne void (i8*, i8*, i32)* %54, null, !dbg !5528
  br i1 %tobool36, label %if.then37, label %if.else, !dbg !5531

if.then37:                                        ; preds = %if.then24
  %55 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5532
  %copy38 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %55, i32 0, i32 4, !dbg !5533
  %56 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy38, align 8, !dbg !5533
  %57 = load i8*, i8** %src_data, align 8, !dbg !5534
  %58 = load i32, i32* %src_offset, align 4, !dbg !5535
  %idx.ext39 = sext i32 %58 to i64, !dbg !5536
  %add.ptr40 = getelementptr inbounds i8, i8* %57, i64 %idx.ext39, !dbg !5536
  %59 = load i8*, i8** %dest_data, align 8, !dbg !5537
  call void %56(i8* %add.ptr40, i8* %59, i32 1), !dbg !5532
  br label %if.end44, !dbg !5532

if.else:                                          ; preds = %if.then24
  %60 = load i8*, i8** %dest_data, align 8, !dbg !5538
  %61 = load i8*, i8** %src_data, align 8, !dbg !5539
  %62 = load i32, i32* %src_offset, align 4, !dbg !5540
  %idx.ext41 = sext i32 %62 to i64, !dbg !5541
  %add.ptr42 = getelementptr inbounds i8, i8* %61, i64 %idx.ext41, !dbg !5541
  %63 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5542
  %size43 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %63, i32 0, i32 0, !dbg !5543
  %64 = load i32, i32* %size43, align 8, !dbg !5543
  %conv = sext i32 %64 to i64, !dbg !5542
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %add.ptr42, i64 %conv, i1 false), !dbg !5544
  br label %if.end44

if.end44:                                         ; preds = %if.else, %if.then37
  %65 = load i32, i32* %dest_i, align 4, !dbg !5545
  %inc45 = add nsw i32 %65, 1, !dbg !5545
  store i32 %inc45, i32* %dest_i, align 4, !dbg !5545
  br label %if.end46, !dbg !5546

if.end46:                                         ; preds = %if.end44, %if.end14
  br label %for.inc, !dbg !5547

for.inc:                                          ; preds = %if.end46
  %66 = load i32, i32* %src_i, align 4, !dbg !5548
  %inc47 = add nsw i32 %66, 1, !dbg !5548
  store i32 %inc47, i32* %src_i, align 4, !dbg !5548
  br label %for.cond, !dbg !5549, !llvm.loop !5550

for.end:                                          ; preds = %if.then13, %for.cond
  %67 = load i8, i8* %use_default_init.addr, align 1, !dbg !5552
  %tobool48 = icmp ne i8 %67, 0, !dbg !5552
  br i1 %tobool48, label %if.then49, label %if.end57, !dbg !5554

if.then49:                                        ; preds = %for.end
  br label %while.cond50, !dbg !5555

while.cond50:                                     ; preds = %while.body54, %if.then49
  %68 = load i32, i32* %dest_i, align 4, !dbg !5557
  %69 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5558
  %totlayer51 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %69, i32 0, i32 2, !dbg !5559
  %70 = load i32, i32* %totlayer51, align 4, !dbg !5559
  %cmp52 = icmp slt i32 %68, %70, !dbg !5560
  br i1 %cmp52, label %while.body54, label %while.end56, !dbg !5555

while.body54:                                     ; preds = %while.cond50
  %71 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5561
  %72 = load i8**, i8*** %dest_block.addr, align 8, !dbg !5563
  %73 = load i32, i32* %dest_i, align 4, !dbg !5564
  call void @CustomData_bmesh_set_default_n(%struct.CustomData* %71, i8** %72, i32 %73), !dbg !5565
  %74 = load i32, i32* %dest_i, align 4, !dbg !5566
  %inc55 = add nsw i32 %74, 1, !dbg !5566
  store i32 %inc55, i32* %dest_i, align 4, !dbg !5566
  br label %while.cond50, !dbg !5555, !llvm.loop !5567

while.end56:                                      ; preds = %while.cond50
  br label %if.end57, !dbg !5569

if.end57:                                         ; preds = %while.end56, %for.end
  ret void, !dbg !5570
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_from_bmesh_block(%struct.CustomData* %source, %struct.CustomData* %dest, i8* %src_block, i32 %dest_index) #0 !dbg !5571 {
entry:
  %source.addr = alloca %struct.CustomData*, align 8
  %dest.addr = alloca %struct.CustomData*, align 8
  %src_block.addr = alloca i8*, align 8
  %dest_index.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %dest_i = alloca i32, align 4
  %src_i = alloca i32, align 4
  %dest_offset = alloca i32, align 4
  %offset = alloca i32, align 4
  %src_data = alloca i8*, align 8
  %dest_data = alloca i8*, align 8
  store %struct.CustomData* %source, %struct.CustomData** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %source.addr, metadata !5574, metadata !DIExpression()), !dbg !5575
  store %struct.CustomData* %dest, %struct.CustomData** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %dest.addr, metadata !5576, metadata !DIExpression()), !dbg !5577
  store i8* %src_block, i8** %src_block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src_block.addr, metadata !5578, metadata !DIExpression()), !dbg !5579
  store i32 %dest_index, i32* %dest_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dest_index.addr, metadata !5580, metadata !DIExpression()), !dbg !5581
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5582, metadata !DIExpression()), !dbg !5583
  call void @llvm.dbg.declare(metadata i32* %dest_i, metadata !5584, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.declare(metadata i32* %src_i, metadata !5586, metadata !DIExpression()), !dbg !5587
  call void @llvm.dbg.declare(metadata i32* %dest_offset, metadata !5588, metadata !DIExpression()), !dbg !5589
  store i32 0, i32* %dest_i, align 4, !dbg !5590
  store i32 0, i32* %src_i, align 4, !dbg !5591
  br label %for.cond, !dbg !5593

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %src_i, align 4, !dbg !5594
  %1 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !5596
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !5597
  %2 = load i32, i32* %totlayer, align 4, !dbg !5597
  %cmp = icmp slt i32 %0, %2, !dbg !5598
  br i1 %cmp, label %for.body, label %for.end, !dbg !5599

for.body:                                         ; preds = %for.cond
  br label %while.cond, !dbg !5600

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32, i32* %dest_i, align 4, !dbg !5602
  %4 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5603
  %totlayer1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 2, !dbg !5604
  %5 = load i32, i32* %totlayer1, align 4, !dbg !5604
  %cmp2 = icmp slt i32 %3, %5, !dbg !5605
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !5606

land.rhs:                                         ; preds = %while.cond
  %6 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5607
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %6, i32 0, i32 0, !dbg !5608
  %7 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5608
  %8 = load i32, i32* %dest_i, align 4, !dbg !5609
  %idxprom = sext i32 %8 to i64, !dbg !5607
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %7, i64 %idxprom, !dbg !5607
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 0, !dbg !5610
  %9 = load i32, i32* %type, align 8, !dbg !5610
  %10 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !5611
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !5612
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !5612
  %12 = load i32, i32* %src_i, align 4, !dbg !5613
  %idxprom4 = sext i32 %12 to i64, !dbg !5611
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom4, !dbg !5611
  %type6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 0, !dbg !5614
  %13 = load i32, i32* %type6, align 8, !dbg !5614
  %cmp7 = icmp slt i32 %9, %13, !dbg !5615
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp7, %land.rhs ], !dbg !5616
  br i1 %14, label %while.body, label %while.end, !dbg !5600

while.body:                                       ; preds = %land.end
  %15 = load i32, i32* %dest_i, align 4, !dbg !5617
  %inc = add nsw i32 %15, 1, !dbg !5617
  store i32 %inc, i32* %dest_i, align 4, !dbg !5617
  br label %while.cond, !dbg !5600, !llvm.loop !5619

while.end:                                        ; preds = %land.end
  %16 = load i32, i32* %dest_i, align 4, !dbg !5621
  %17 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5623
  %totlayer8 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %17, i32 0, i32 2, !dbg !5624
  %18 = load i32, i32* %totlayer8, align 4, !dbg !5624
  %cmp9 = icmp sge i32 %16, %18, !dbg !5625
  br i1 %cmp9, label %if.then, label %if.end, !dbg !5626

if.then:                                          ; preds = %while.end
  br label %for.end, !dbg !5627

if.end:                                           ; preds = %while.end
  %19 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5628
  %layers10 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %19, i32 0, i32 0, !dbg !5630
  %20 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers10, align 8, !dbg !5630
  %21 = load i32, i32* %dest_i, align 4, !dbg !5631
  %idxprom11 = sext i32 %21 to i64, !dbg !5628
  %arrayidx12 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %20, i64 %idxprom11, !dbg !5628
  %type13 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx12, i32 0, i32 0, !dbg !5632
  %22 = load i32, i32* %type13, align 8, !dbg !5632
  %23 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !5633
  %layers14 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %23, i32 0, i32 0, !dbg !5634
  %24 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers14, align 8, !dbg !5634
  %25 = load i32, i32* %src_i, align 4, !dbg !5635
  %idxprom15 = sext i32 %25 to i64, !dbg !5633
  %arrayidx16 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %24, i64 %idxprom15, !dbg !5633
  %type17 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx16, i32 0, i32 0, !dbg !5636
  %26 = load i32, i32* %type17, align 8, !dbg !5636
  %cmp18 = icmp eq i32 %22, %26, !dbg !5637
  br i1 %cmp18, label %if.then19, label %if.end40, !dbg !5638

if.then19:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !5639, metadata !DIExpression()), !dbg !5641
  %27 = load %struct.CustomData*, %struct.CustomData** %source.addr, align 8, !dbg !5642
  %layers20 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %27, i32 0, i32 0, !dbg !5643
  %28 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers20, align 8, !dbg !5643
  %29 = load i32, i32* %src_i, align 4, !dbg !5644
  %idxprom21 = sext i32 %29 to i64, !dbg !5642
  %arrayidx22 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %28, i64 %idxprom21, !dbg !5642
  %offset23 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx22, i32 0, i32 1, !dbg !5645
  %30 = load i32, i32* %offset23, align 4, !dbg !5645
  store i32 %30, i32* %offset, align 4, !dbg !5641
  call void @llvm.dbg.declare(metadata i8** %src_data, metadata !5646, metadata !DIExpression()), !dbg !5647
  %31 = load i8*, i8** %src_block.addr, align 8, !dbg !5648
  %32 = load i32, i32* %offset, align 4, !dbg !5649
  %idx.ext = sext i32 %32 to i64, !dbg !5650
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %idx.ext, !dbg !5650
  store i8* %add.ptr, i8** %src_data, align 8, !dbg !5647
  call void @llvm.dbg.declare(metadata i8** %dest_data, metadata !5651, metadata !DIExpression()), !dbg !5652
  %33 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5653
  %layers24 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %33, i32 0, i32 0, !dbg !5654
  %34 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers24, align 8, !dbg !5654
  %35 = load i32, i32* %dest_i, align 4, !dbg !5655
  %idxprom25 = sext i32 %35 to i64, !dbg !5653
  %arrayidx26 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %34, i64 %idxprom25, !dbg !5653
  %data = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx26, i32 0, i32 9, !dbg !5656
  %36 = load i8*, i8** %data, align 8, !dbg !5656
  store i8* %36, i8** %dest_data, align 8, !dbg !5652
  %37 = load %struct.CustomData*, %struct.CustomData** %dest.addr, align 8, !dbg !5657
  %layers27 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %37, i32 0, i32 0, !dbg !5658
  %38 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers27, align 8, !dbg !5658
  %39 = load i32, i32* %dest_i, align 4, !dbg !5659
  %idxprom28 = sext i32 %39 to i64, !dbg !5657
  %arrayidx29 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %38, i64 %idxprom28, !dbg !5657
  %type30 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx29, i32 0, i32 0, !dbg !5660
  %40 = load i32, i32* %type30, align 8, !dbg !5660
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %40), !dbg !5661
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5662
  %41 = load i32, i32* %dest_index.addr, align 4, !dbg !5663
  %42 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5664
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %42, i32 0, i32 0, !dbg !5665
  %43 = load i32, i32* %size, align 8, !dbg !5665
  %mul = mul nsw i32 %41, %43, !dbg !5666
  store i32 %mul, i32* %dest_offset, align 4, !dbg !5667
  %44 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5668
  %copy = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %44, i32 0, i32 4, !dbg !5670
  %45 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy, align 8, !dbg !5670
  %tobool = icmp ne void (i8*, i8*, i32)* %45, null, !dbg !5668
  br i1 %tobool, label %if.then31, label %if.else, !dbg !5671

if.then31:                                        ; preds = %if.then19
  %46 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5672
  %copy32 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %46, i32 0, i32 4, !dbg !5673
  %47 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %copy32, align 8, !dbg !5673
  %48 = load i8*, i8** %src_data, align 8, !dbg !5674
  %49 = load i8*, i8** %dest_data, align 8, !dbg !5675
  %50 = load i32, i32* %dest_offset, align 4, !dbg !5676
  %idx.ext33 = sext i32 %50 to i64, !dbg !5677
  %add.ptr34 = getelementptr inbounds i8, i8* %49, i64 %idx.ext33, !dbg !5677
  call void %47(i8* %48, i8* %add.ptr34, i32 1), !dbg !5672
  br label %if.end38, !dbg !5672

if.else:                                          ; preds = %if.then19
  %51 = load i8*, i8** %dest_data, align 8, !dbg !5678
  %52 = load i32, i32* %dest_offset, align 4, !dbg !5679
  %idx.ext35 = sext i32 %52 to i64, !dbg !5680
  %add.ptr36 = getelementptr inbounds i8, i8* %51, i64 %idx.ext35, !dbg !5680
  %53 = load i8*, i8** %src_data, align 8, !dbg !5681
  %54 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5682
  %size37 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %54, i32 0, i32 0, !dbg !5683
  %55 = load i32, i32* %size37, align 8, !dbg !5683
  %conv = sext i32 %55 to i64, !dbg !5682
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr36, i8* align 1 %53, i64 %conv, i1 false), !dbg !5684
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then31
  %56 = load i32, i32* %dest_i, align 4, !dbg !5685
  %inc39 = add nsw i32 %56, 1, !dbg !5685
  store i32 %inc39, i32* %dest_i, align 4, !dbg !5685
  br label %if.end40, !dbg !5686

if.end40:                                         ; preds = %if.end38, %if.end
  br label %for.inc, !dbg !5687

for.inc:                                          ; preds = %if.end40
  %57 = load i32, i32* %src_i, align 4, !dbg !5688
  %inc41 = add nsw i32 %57, 1, !dbg !5688
  store i32 %inc41, i32* %src_i, align 4, !dbg !5688
  br label %for.cond, !dbg !5689, !llvm.loop !5690

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !5692
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_file_write_info(i32 %type, i8** %structname, i32* %structnum) #0 !dbg !5693 {
entry:
  %type.addr = alloca i32, align 4
  %structname.addr = alloca i8**, align 8
  %structnum.addr = alloca i32*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5697, metadata !DIExpression()), !dbg !5698
  store i8** %structname, i8*** %structname.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %structname.addr, metadata !5699, metadata !DIExpression()), !dbg !5700
  store i32* %structnum, i32** %structnum.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %structnum.addr, metadata !5701, metadata !DIExpression()), !dbg !5702
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5703, metadata !DIExpression()), !dbg !5704
  %0 = load i32, i32* %type.addr, align 4, !dbg !5705
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !5706
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5704
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5707
  %structname1 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 1, !dbg !5708
  %2 = load i8*, i8** %structname1, align 8, !dbg !5708
  %3 = load i8**, i8*** %structname.addr, align 8, !dbg !5709
  store i8* %2, i8** %3, align 8, !dbg !5710
  %4 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5711
  %structnum2 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %4, i32 0, i32 2, !dbg !5712
  %5 = load i32, i32* %structnum2, align 8, !dbg !5712
  %6 = load i32*, i32** %structnum.addr, align 8, !dbg !5713
  store i32 %5, i32* %6, align 4, !dbg !5714
  ret void, !dbg !5715
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CustomData_sizeof(i32 %type) #0 !dbg !5716 {
entry:
  %type.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5719, metadata !DIExpression()), !dbg !5720
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5721, metadata !DIExpression()), !dbg !5722
  %0 = load i32, i32* %type.addr, align 4, !dbg !5723
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !5724
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5722
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5725
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 0, !dbg !5726
  %2 = load i32, i32* %size, align 8, !dbg !5726
  ret i32 %2, !dbg !5727
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @CustomData_layertype_name(i32 %type) #0 !dbg !5728 {
entry:
  %type.addr = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5729, metadata !DIExpression()), !dbg !5730
  %0 = load i32, i32* %type.addr, align 4, !dbg !5731
  %call = call i8* @layerType_getName(i32 %0), !dbg !5732
  ret i8* %call, !dbg !5733
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_layertype_is_singleton(i32 %type) #0 !dbg !5734 {
entry:
  %type.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5737, metadata !DIExpression()), !dbg !5738
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5739, metadata !DIExpression()), !dbg !5740
  %0 = load i32, i32* %type.addr, align 4, !dbg !5741
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %0), !dbg !5742
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5740
  %1 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5743
  %defaultname = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %1, i32 0, i32 3, !dbg !5744
  %2 = load i8*, i8** %defaultname, align 8, !dbg !5744
  %cmp = icmp eq i8* %2, null, !dbg !5745
  %conv = zext i1 %cmp to i32, !dbg !5745
  %conv1 = trunc i32 %conv to i8, !dbg !5743
  ret i8 %conv1, !dbg !5746
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_set_layer_unique_name(%struct.CustomData* %data, i32 %index) #0 !dbg !5747 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %index.addr = alloca i32, align 4
  %nlayer = alloca %struct.CustomDataLayer*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %data_arg = alloca %struct.anon, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5748, metadata !DIExpression()), !dbg !5749
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5750, metadata !DIExpression()), !dbg !5751
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %nlayer, metadata !5752, metadata !DIExpression()), !dbg !5753
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5754
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 0, !dbg !5755
  %1 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5755
  %2 = load i32, i32* %index.addr, align 4, !dbg !5756
  %idxprom = sext i32 %2 to i64, !dbg !5754
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %1, i64 %idxprom, !dbg !5754
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %nlayer, align 8, !dbg !5753
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5757, metadata !DIExpression()), !dbg !5758
  %3 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %nlayer, align 8, !dbg !5759
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %3, i32 0, i32 0, !dbg !5760
  %4 = load i32, i32* %type, align 8, !dbg !5760
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %4), !dbg !5761
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5758
  call void @llvm.dbg.declare(metadata %struct.anon* %data_arg, metadata !5762, metadata !DIExpression()), !dbg !5768
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5769
  %data1 = getelementptr inbounds %struct.anon, %struct.anon* %data_arg, i32 0, i32 0, !dbg !5770
  store %struct.CustomData* %5, %struct.CustomData** %data1, align 8, !dbg !5771
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %nlayer, align 8, !dbg !5772
  %type2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i32 0, i32 0, !dbg !5773
  %7 = load i32, i32* %type2, align 8, !dbg !5773
  %type3 = getelementptr inbounds %struct.anon, %struct.anon* %data_arg, i32 0, i32 1, !dbg !5774
  store i32 %7, i32* %type3, align 8, !dbg !5775
  %8 = load i32, i32* %index.addr, align 4, !dbg !5776
  %index4 = getelementptr inbounds %struct.anon, %struct.anon* %data_arg, i32 0, i32 2, !dbg !5777
  store i32 %8, i32* %index4, align 4, !dbg !5778
  %9 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5779
  %defaultname = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %9, i32 0, i32 3, !dbg !5781
  %10 = load i8*, i8** %defaultname, align 8, !dbg !5781
  %tobool = icmp ne i8* %10, null, !dbg !5779
  br i1 %tobool, label %if.end, label %if.then, !dbg !5782

if.then:                                          ; preds = %entry
  br label %return, !dbg !5783

if.end:                                           ; preds = %entry
  %11 = bitcast %struct.anon* %data_arg to i8*, !dbg !5784
  %12 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5785
  %defaultname5 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %12, i32 0, i32 3, !dbg !5785
  %13 = load i8*, i8** %defaultname5, align 8, !dbg !5785
  %14 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %nlayer, align 8, !dbg !5786
  %name = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %14, i32 0, i32 8, !dbg !5787
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !5786
  %call6 = call zeroext i8 @BLI_uniquename_cb(i8 (i8*, i8*)* @customdata_unique_check, i8* %11, i8* %13, i8 zeroext 46, i8* %arraydecay, i32 64), !dbg !5788
  br label %return, !dbg !5789

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !5789
}

declare dso_local zeroext i8 @BLI_uniquename_cb(i8 (i8*, i8*)*, i8*, i8*, i8 zeroext, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @customdata_unique_check(i8* %arg, i8* %name) #0 !dbg !5790 {
entry:
  %arg.addr = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %data_arg = alloca %struct.anon.3*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !5793, metadata !DIExpression()), !dbg !5794
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !5795, metadata !DIExpression()), !dbg !5796
  call void @llvm.dbg.declare(metadata %struct.anon.3** %data_arg, metadata !5797, metadata !DIExpression()), !dbg !5804
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !5805
  %1 = bitcast i8* %0 to %struct.anon.3*, !dbg !5805
  store %struct.anon.3* %1, %struct.anon.3** %data_arg, align 8, !dbg !5804
  %2 = load %struct.anon.3*, %struct.anon.3** %data_arg, align 8, !dbg !5806
  %data = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2, i32 0, i32 0, !dbg !5807
  %3 = load %struct.CustomData*, %struct.CustomData** %data, align 8, !dbg !5807
  %4 = load i8*, i8** %name.addr, align 8, !dbg !5808
  %5 = load %struct.anon.3*, %struct.anon.3** %data_arg, align 8, !dbg !5809
  %type = getelementptr inbounds %struct.anon.3, %struct.anon.3* %5, i32 0, i32 1, !dbg !5810
  %6 = load i32, i32* %type, align 8, !dbg !5810
  %7 = load %struct.anon.3*, %struct.anon.3** %data_arg, align 8, !dbg !5811
  %index = getelementptr inbounds %struct.anon.3, %struct.anon.3* %7, i32 0, i32 2, !dbg !5812
  %8 = load i32, i32* %index, align 4, !dbg !5812
  %call = call zeroext i8 @cd_layer_find_dupe(%struct.CustomData* %3, i8* %4, i32 %6, i32 %8), !dbg !5813
  ret i8 %call, !dbg !5814
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_validate_layer_name(%struct.CustomData* %data, i32 %type, i8* %name, i8* %outname) #0 !dbg !5815 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %outname.addr = alloca i8*, align 8
  %index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5818, metadata !DIExpression()), !dbg !5819
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5820, metadata !DIExpression()), !dbg !5821
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !5822, metadata !DIExpression()), !dbg !5823
  store i8* %outname, i8** %outname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %outname.addr, metadata !5824, metadata !DIExpression()), !dbg !5825
  call void @llvm.dbg.declare(metadata i32* %index, metadata !5826, metadata !DIExpression()), !dbg !5827
  store i32 -1, i32* %index, align 4, !dbg !5827
  %0 = load i8*, i8** %name.addr, align 8, !dbg !5828
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !5828
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5828
  %tobool = icmp ne i8 %1, 0, !dbg !5828
  br i1 %tobool, label %if.then, label %if.end, !dbg !5830

if.then:                                          ; preds = %entry
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5831
  %3 = load i32, i32* %type.addr, align 4, !dbg !5832
  %4 = load i8*, i8** %name.addr, align 8, !dbg !5833
  %call = call i32 @CustomData_get_named_layer_index(%struct.CustomData* %2, i32 %3, i8* %4), !dbg !5834
  store i32 %call, i32* %index, align 4, !dbg !5835
  br label %if.end, !dbg !5836

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %index, align 4, !dbg !5837
  %cmp = icmp eq i32 %5, -1, !dbg !5839
  br i1 %cmp, label %if.then1, label %if.else, !dbg !5840

if.then1:                                         ; preds = %if.end
  %6 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5841
  %7 = load i32, i32* %type.addr, align 4, !dbg !5843
  %call2 = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %6, i32 %7), !dbg !5844
  store i32 %call2, i32* %index, align 4, !dbg !5845
  %8 = load i8*, i8** %outname.addr, align 8, !dbg !5846
  %9 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5847
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %9, i32 0, i32 0, !dbg !5848
  %10 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5848
  %11 = load i32, i32* %index, align 4, !dbg !5849
  %idxprom = sext i32 %11 to i64, !dbg !5847
  %arrayidx3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %10, i64 %idxprom, !dbg !5847
  %name4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx3, i32 0, i32 8, !dbg !5850
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name4, i64 0, i64 0, !dbg !5847
  %call5 = call i8* @BLI_strncpy(i8* %8, i8* %arraydecay, i64 64), !dbg !5851
  br label %if.end7, !dbg !5852

if.else:                                          ; preds = %if.end
  %12 = load i8*, i8** %outname.addr, align 8, !dbg !5853
  %13 = load i8*, i8** %name.addr, align 8, !dbg !5855
  %call6 = call i8* @BLI_strncpy(i8* %12, i8* %13, i64 64), !dbg !5856
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then1
  ret void, !dbg !5857
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_verify_versions(%struct.CustomData* %data, i32 %index) #0 !dbg !5858 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %index.addr = alloca i32, align 4
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %layer = alloca %struct.CustomDataLayer*, align 8
  %keeplayer = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5859, metadata !DIExpression()), !dbg !5860
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5861, metadata !DIExpression()), !dbg !5862
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !5863, metadata !DIExpression()), !dbg !5864
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !5865, metadata !DIExpression()), !dbg !5866
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5867
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 0, !dbg !5868
  %1 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !5868
  %2 = load i32, i32* %index.addr, align 4, !dbg !5869
  %idxprom = sext i32 %2 to i64, !dbg !5867
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %1, i64 %idxprom, !dbg !5867
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !5866
  call void @llvm.dbg.declare(metadata i8* %keeplayer, metadata !5870, metadata !DIExpression()), !dbg !5871
  store i8 1, i8* %keeplayer, align 1, !dbg !5871
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5872, metadata !DIExpression()), !dbg !5873
  %3 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !5874
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %3, i32 0, i32 0, !dbg !5876
  %4 = load i32, i32* %type, align 8, !dbg !5876
  %cmp = icmp sge i32 %4, 41, !dbg !5877
  br i1 %cmp, label %if.then, label %if.else, !dbg !5878

if.then:                                          ; preds = %entry
  store i8 0, i8* %keeplayer, align 1, !dbg !5879
  br label %if.end11, !dbg !5881

if.else:                                          ; preds = %entry
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !5882
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i32 0, i32 0, !dbg !5884
  %6 = load i32, i32* %type1, align 8, !dbg !5884
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %6), !dbg !5885
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5886
  %7 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !5887
  %defaultname = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %7, i32 0, i32 3, !dbg !5889
  %8 = load i8*, i8** %defaultname, align 8, !dbg !5889
  %tobool = icmp ne i8* %8, null, !dbg !5887
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5890

land.lhs.true:                                    ; preds = %if.else
  %9 = load i32, i32* %index.addr, align 4, !dbg !5891
  %cmp2 = icmp sgt i32 %9, 0, !dbg !5892
  br i1 %cmp2, label %land.lhs.true3, label %if.end, !dbg !5893

land.lhs.true3:                                   ; preds = %land.lhs.true
  %10 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5894
  %layers4 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %10, i32 0, i32 0, !dbg !5895
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers4, align 8, !dbg !5895
  %12 = load i32, i32* %index.addr, align 4, !dbg !5896
  %sub = sub nsw i32 %12, 1, !dbg !5897
  %idxprom5 = sext i32 %sub to i64, !dbg !5894
  %arrayidx6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i64 %idxprom5, !dbg !5894
  %type7 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx6, i32 0, i32 0, !dbg !5898
  %13 = load i32, i32* %type7, align 8, !dbg !5898
  %14 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !5899
  %type8 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %14, i32 0, i32 0, !dbg !5900
  %15 = load i32, i32* %type8, align 8, !dbg !5900
  %cmp9 = icmp eq i32 %13, %15, !dbg !5901
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !5902

if.then10:                                        ; preds = %land.lhs.true3
  store i8 0, i8* %keeplayer, align 1, !dbg !5903
  br label %if.end, !dbg !5905

if.end:                                           ; preds = %if.then10, %land.lhs.true3, %land.lhs.true, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then
  %16 = load i8, i8* %keeplayer, align 1, !dbg !5906
  %tobool12 = icmp ne i8 %16, 0, !dbg !5906
  br i1 %tobool12, label %if.end23, label %if.then13, !dbg !5908

if.then13:                                        ; preds = %if.end11
  %17 = load i32, i32* %index.addr, align 4, !dbg !5909
  %add = add nsw i32 %17, 1, !dbg !5912
  store i32 %add, i32* %i, align 4, !dbg !5913
  br label %for.cond, !dbg !5914

for.cond:                                         ; preds = %for.inc, %if.then13
  %18 = load i32, i32* %i, align 4, !dbg !5915
  %19 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5917
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %19, i32 0, i32 2, !dbg !5918
  %20 = load i32, i32* %totlayer, align 4, !dbg !5918
  %cmp14 = icmp slt i32 %18, %20, !dbg !5919
  br i1 %cmp14, label %for.body, label %for.end, !dbg !5920

for.body:                                         ; preds = %for.cond
  %21 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5921
  %layers15 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %21, i32 0, i32 0, !dbg !5922
  %22 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers15, align 8, !dbg !5922
  %23 = load i32, i32* %i, align 4, !dbg !5923
  %sub16 = sub nsw i32 %23, 1, !dbg !5924
  %idxprom17 = sext i32 %sub16 to i64, !dbg !5921
  %arrayidx18 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %22, i64 %idxprom17, !dbg !5921
  %24 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5925
  %layers19 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %24, i32 0, i32 0, !dbg !5926
  %25 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers19, align 8, !dbg !5926
  %26 = load i32, i32* %i, align 4, !dbg !5927
  %idxprom20 = sext i32 %26 to i64, !dbg !5925
  %arrayidx21 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %25, i64 %idxprom20, !dbg !5925
  %27 = bitcast %struct.CustomDataLayer* %arrayidx18 to i8*, !dbg !5925
  %28 = bitcast %struct.CustomDataLayer* %arrayidx21 to i8*, !dbg !5925
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 104, i1 false), !dbg !5925
  br label %for.inc, !dbg !5921

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !dbg !5928
  %inc = add nsw i32 %29, 1, !dbg !5928
  store i32 %inc, i32* %i, align 4, !dbg !5928
  br label %for.cond, !dbg !5929, !llvm.loop !5930

for.end:                                          ; preds = %for.cond
  %30 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !5932
  %totlayer22 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %30, i32 0, i32 2, !dbg !5933
  %31 = load i32, i32* %totlayer22, align 4, !dbg !5934
  %dec = add nsw i32 %31, -1, !dbg !5934
  store i32 %dec, i32* %totlayer22, align 4, !dbg !5934
  br label %if.end23, !dbg !5935

if.end23:                                         ; preds = %for.end, %if.end11
  %32 = load i8, i8* %keeplayer, align 1, !dbg !5936
  ret i8 %32, !dbg !5937
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_external_reload(%struct.CustomData* %data, %struct.ID* %UNUSED_id, i64 %mask, i32 %totelem) #0 !dbg !5938 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %UNUSED_id.addr = alloca %struct.ID*, align 8
  %mask.addr = alloca i64, align 8
  %totelem.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %i = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !5996, metadata !DIExpression()), !dbg !5997
  store %struct.ID* %UNUSED_id, %struct.ID** %UNUSED_id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID** %UNUSED_id.addr, metadata !5998, metadata !DIExpression()), !dbg !5999
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !6000, metadata !DIExpression()), !dbg !6001
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !6002, metadata !DIExpression()), !dbg !6003
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !6004, metadata !DIExpression()), !dbg !6005
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !6006, metadata !DIExpression()), !dbg !6007
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6008, metadata !DIExpression()), !dbg !6009
  store i32 0, i32* %i, align 4, !dbg !6010
  br label %for.cond, !dbg !6012

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6013
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6015
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !6016
  %2 = load i32, i32* %totlayer, align 4, !dbg !6016
  %cmp = icmp slt i32 %0, %2, !dbg !6017
  br i1 %cmp, label %for.body, label %for.end, !dbg !6018

for.body:                                         ; preds = %for.cond
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6019
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !6021
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !6021
  %5 = load i32, i32* %i, align 4, !dbg !6022
  %idxprom = sext i32 %5 to i64, !dbg !6019
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !6019
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !6023
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6024
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i32 0, i32 0, !dbg !6025
  %7 = load i32, i32* %type, align 8, !dbg !6025
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %7), !dbg !6026
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6027
  %8 = load i64, i64* %mask.addr, align 8, !dbg !6028
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6030
  %type1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i32 0, i32 0, !dbg !6030
  %10 = load i32, i32* %type1, align 8, !dbg !6030
  %conv = sext i32 %10 to i64, !dbg !6030
  %shl = shl i64 1, %conv, !dbg !6030
  %and = and i64 %8, %shl, !dbg !6031
  %tobool = icmp ne i64 %and, 0, !dbg !6031
  br i1 %tobool, label %if.else, label %if.then, !dbg !6032

if.then:                                          ; preds = %for.body
  br label %if.end15, !dbg !6033

if.else:                                          ; preds = %for.body
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6035
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i32 0, i32 2, !dbg !6037
  %12 = load i32, i32* %flag, align 8, !dbg !6037
  %and2 = and i32 %12, 8, !dbg !6038
  %tobool3 = icmp ne i32 %and2, 0, !dbg !6038
  br i1 %tobool3, label %land.lhs.true, label %if.end14, !dbg !6039

land.lhs.true:                                    ; preds = %if.else
  %13 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6040
  %flag4 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %13, i32 0, i32 2, !dbg !6041
  %14 = load i32, i32* %flag4, align 8, !dbg !6041
  %and5 = and i32 %14, 16, !dbg !6042
  %tobool6 = icmp ne i32 %and5, 0, !dbg !6042
  br i1 %tobool6, label %if.then7, label %if.end14, !dbg !6043

if.then7:                                         ; preds = %land.lhs.true
  %15 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6044
  %free = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %15, i32 0, i32 5, !dbg !6047
  %16 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free, align 8, !dbg !6047
  %tobool8 = icmp ne void (i8*, i32, i32)* %16, null, !dbg !6044
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !6048

if.then9:                                         ; preds = %if.then7
  %17 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6049
  %free10 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %17, i32 0, i32 5, !dbg !6050
  %18 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free10, align 8, !dbg !6050
  %19 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6051
  %data11 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %19, i32 0, i32 9, !dbg !6052
  %20 = load i8*, i8** %data11, align 8, !dbg !6052
  %21 = load i32, i32* %totelem.addr, align 4, !dbg !6053
  %22 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6054
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %22, i32 0, i32 0, !dbg !6055
  %23 = load i32, i32* %size, align 8, !dbg !6055
  call void %18(i8* %20, i32 %21, i32 %23), !dbg !6049
  br label %if.end, !dbg !6049

if.end:                                           ; preds = %if.then9, %if.then7
  %24 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6056
  %flag12 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %24, i32 0, i32 2, !dbg !6057
  %25 = load i32, i32* %flag12, align 8, !dbg !6058
  %and13 = and i32 %25, -17, !dbg !6058
  store i32 %and13, i32* %flag12, align 8, !dbg !6058
  br label %if.end14, !dbg !6059

if.end14:                                         ; preds = %if.end, %land.lhs.true, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then
  br label %for.inc, !dbg !6060

for.inc:                                          ; preds = %if.end15
  %26 = load i32, i32* %i, align 4, !dbg !6061
  %inc = add nsw i32 %26, 1, !dbg !6061
  store i32 %inc, i32* %i, align 4, !dbg !6061
  br label %for.cond, !dbg !6062, !llvm.loop !6063

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6065
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_external_read(%struct.CustomData* %data, %struct.ID* %id, i64 %mask, i32 %totelem) #0 !dbg !6066 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %id.addr = alloca %struct.ID*, align 8
  %mask.addr = alloca i64, align 8
  %totelem.addr = alloca i32, align 4
  %external = alloca %struct.CustomDataExternal*, align 8
  %layer = alloca %struct.CustomDataLayer*, align 8
  %cdf = alloca %struct.CDataFile*, align 8
  %blay = alloca %struct.CDataFileLayer*, align 8
  %filename = alloca [1024 x i8], align 16
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %i = alloca i32, align 4
  %update = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !6067, metadata !DIExpression()), !dbg !6068
  store %struct.ID* %id, %struct.ID** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID** %id.addr, metadata !6069, metadata !DIExpression()), !dbg !6070
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !6071, metadata !DIExpression()), !dbg !6072
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !6073, metadata !DIExpression()), !dbg !6074
  call void @llvm.dbg.declare(metadata %struct.CustomDataExternal** %external, metadata !6075, metadata !DIExpression()), !dbg !6076
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6077
  %external1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 6, !dbg !6078
  %1 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external1, align 8, !dbg !6078
  store %struct.CustomDataExternal* %1, %struct.CustomDataExternal** %external, align 8, !dbg !6076
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !6079, metadata !DIExpression()), !dbg !6080
  call void @llvm.dbg.declare(metadata %struct.CDataFile** %cdf, metadata !6081, metadata !DIExpression()), !dbg !6082
  call void @llvm.dbg.declare(metadata %struct.CDataFileLayer** %blay, metadata !6083, metadata !DIExpression()), !dbg !6087
  call void @llvm.dbg.declare(metadata [1024 x i8]* %filename, metadata !6088, metadata !DIExpression()), !dbg !6089
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !6090, metadata !DIExpression()), !dbg !6091
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6092, metadata !DIExpression()), !dbg !6093
  call void @llvm.dbg.declare(metadata i32* %update, metadata !6094, metadata !DIExpression()), !dbg !6095
  store i32 0, i32* %update, align 4, !dbg !6095
  %2 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !6096
  %tobool = icmp ne %struct.CustomDataExternal* %2, null, !dbg !6096
  br i1 %tobool, label %if.end, label %if.then, !dbg !6098

if.then:                                          ; preds = %entry
  br label %return, !dbg !6099

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !6100
  br label %for.cond, !dbg !6102

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4, !dbg !6103
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6105
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 2, !dbg !6106
  %5 = load i32, i32* %totlayer, align 4, !dbg !6106
  %cmp = icmp slt i32 %3, %5, !dbg !6107
  br i1 %cmp, label %for.body, label %for.end, !dbg !6108

for.body:                                         ; preds = %for.cond
  %6 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6109
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %6, i32 0, i32 0, !dbg !6111
  %7 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !6111
  %8 = load i32, i32* %i, align 4, !dbg !6112
  %idxprom = sext i32 %8 to i64, !dbg !6109
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %7, i64 %idxprom, !dbg !6109
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !6113
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6114
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i32 0, i32 0, !dbg !6115
  %10 = load i32, i32* %type, align 8, !dbg !6115
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %10), !dbg !6116
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6117
  %11 = load i64, i64* %mask.addr, align 8, !dbg !6118
  %12 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6120
  %type2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %12, i32 0, i32 0, !dbg !6120
  %13 = load i32, i32* %type2, align 8, !dbg !6120
  %conv = sext i32 %13 to i64, !dbg !6120
  %shl = shl i64 1, %conv, !dbg !6120
  %and = and i64 %11, %shl, !dbg !6121
  %tobool3 = icmp ne i64 %and, 0, !dbg !6121
  br i1 %tobool3, label %if.else, label %if.then4, !dbg !6122

if.then4:                                         ; preds = %for.body
  br label %if.end16, !dbg !6123

if.else:                                          ; preds = %for.body
  %14 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6125
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %14, i32 0, i32 2, !dbg !6127
  %15 = load i32, i32* %flag, align 8, !dbg !6127
  %and5 = and i32 %15, 16, !dbg !6128
  %tobool6 = icmp ne i32 %and5, 0, !dbg !6128
  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !6129

if.then7:                                         ; preds = %if.else
  br label %if.end15, !dbg !6130

if.else8:                                         ; preds = %if.else
  %16 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6132
  %flag9 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %16, i32 0, i32 2, !dbg !6134
  %17 = load i32, i32* %flag9, align 8, !dbg !6134
  %and10 = and i32 %17, 8, !dbg !6135
  %tobool11 = icmp ne i32 %and10, 0, !dbg !6135
  br i1 %tobool11, label %land.lhs.true, label %if.end14, !dbg !6136

land.lhs.true:                                    ; preds = %if.else8
  %18 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6137
  %read = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %18, i32 0, i32 15, !dbg !6138
  %19 = load i32 (%struct.CDataFile*, i8*, i32)*, i32 (%struct.CDataFile*, i8*, i32)** %read, align 8, !dbg !6138
  %tobool12 = icmp ne i32 (%struct.CDataFile*, i8*, i32)* %19, null, !dbg !6137
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !6139

if.then13:                                        ; preds = %land.lhs.true
  store i32 1, i32* %update, align 4, !dbg !6140
  br label %if.end14, !dbg !6142

if.end14:                                         ; preds = %if.then13, %land.lhs.true, %if.else8
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then7
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then4
  br label %for.inc, !dbg !6143

for.inc:                                          ; preds = %if.end16
  %20 = load i32, i32* %i, align 4, !dbg !6144
  %inc = add nsw i32 %20, 1, !dbg !6144
  store i32 %inc, i32* %i, align 4, !dbg !6144
  br label %for.cond, !dbg !6145, !llvm.loop !6146

for.end:                                          ; preds = %for.cond
  %21 = load i32, i32* %update, align 4, !dbg !6148
  %tobool17 = icmp ne i32 %21, 0, !dbg !6148
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !6150

if.then18:                                        ; preds = %for.end
  br label %return, !dbg !6151

if.end19:                                         ; preds = %for.end
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename, i64 0, i64 0, !dbg !6152
  %22 = load %struct.ID*, %struct.ID** %id.addr, align 8, !dbg !6153
  %23 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !6154
  call void @customdata_external_filename(i8* %arraydecay, %struct.ID* %22, %struct.CustomDataExternal* %23), !dbg !6155
  %call20 = call %struct.CDataFile* @cdf_create(i32 1), !dbg !6156
  store %struct.CDataFile* %call20, %struct.CDataFile** %cdf, align 8, !dbg !6157
  %24 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6158
  %arraydecay21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename, i64 0, i64 0, !dbg !6160
  %call22 = call i32 @cdf_read_open(%struct.CDataFile* %24, i8* %arraydecay21), !dbg !6161
  %tobool23 = icmp ne i32 %call22, 0, !dbg !6161
  br i1 %tobool23, label %if.end29, label %if.then24, !dbg !6162

if.then24:                                        ; preds = %if.end19
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6163
  %26 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6165
  %type25 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %26, i32 0, i32 0, !dbg !6166
  %27 = load i32, i32* %type25, align 8, !dbg !6166
  %call26 = call i8* @layerType_getName(i32 %27), !dbg !6167
  %arraydecay27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename, i64 0, i64 0, !dbg !6168
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i8* %call26, i8* %arraydecay27), !dbg !6169
  br label %return, !dbg !6170

if.end29:                                         ; preds = %if.end19
  store i32 0, i32* %i, align 4, !dbg !6171
  br label %for.cond30, !dbg !6173

for.cond30:                                       ; preds = %for.inc81, %if.end29
  %28 = load i32, i32* %i, align 4, !dbg !6174
  %29 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6176
  %totlayer31 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %29, i32 0, i32 2, !dbg !6177
  %30 = load i32, i32* %totlayer31, align 4, !dbg !6177
  %cmp32 = icmp slt i32 %28, %30, !dbg !6178
  br i1 %cmp32, label %for.body34, label %for.end83, !dbg !6179

for.body34:                                       ; preds = %for.cond30
  %31 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6180
  %layers35 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %31, i32 0, i32 0, !dbg !6182
  %32 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers35, align 8, !dbg !6182
  %33 = load i32, i32* %i, align 4, !dbg !6183
  %idxprom36 = sext i32 %33 to i64, !dbg !6180
  %arrayidx37 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %32, i64 %idxprom36, !dbg !6180
  store %struct.CustomDataLayer* %arrayidx37, %struct.CustomDataLayer** %layer, align 8, !dbg !6184
  %34 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6185
  %type38 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %34, i32 0, i32 0, !dbg !6186
  %35 = load i32, i32* %type38, align 8, !dbg !6186
  %call39 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %35), !dbg !6187
  store %struct.LayerTypeInfo* %call39, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6188
  %36 = load i64, i64* %mask.addr, align 8, !dbg !6189
  %37 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6191
  %type40 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %37, i32 0, i32 0, !dbg !6191
  %38 = load i32, i32* %type40, align 8, !dbg !6191
  %conv41 = sext i32 %38 to i64, !dbg !6191
  %shl42 = shl i64 1, %conv41, !dbg !6191
  %and43 = and i64 %36, %shl42, !dbg !6192
  %tobool44 = icmp ne i64 %and43, 0, !dbg !6192
  br i1 %tobool44, label %if.else46, label %if.then45, !dbg !6193

if.then45:                                        ; preds = %for.body34
  br label %if.end80, !dbg !6194

if.else46:                                        ; preds = %for.body34
  %39 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6196
  %flag47 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %39, i32 0, i32 2, !dbg !6198
  %40 = load i32, i32* %flag47, align 8, !dbg !6198
  %and48 = and i32 %40, 16, !dbg !6199
  %tobool49 = icmp ne i32 %and48, 0, !dbg !6199
  br i1 %tobool49, label %if.then50, label %if.else51, !dbg !6200

if.then50:                                        ; preds = %if.else46
  br label %if.end79, !dbg !6201

if.else51:                                        ; preds = %if.else46
  %41 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6203
  %flag52 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %41, i32 0, i32 2, !dbg !6205
  %42 = load i32, i32* %flag52, align 8, !dbg !6205
  %and53 = and i32 %42, 8, !dbg !6206
  %tobool54 = icmp ne i32 %and53, 0, !dbg !6206
  br i1 %tobool54, label %land.lhs.true55, label %if.end78, !dbg !6207

land.lhs.true55:                                  ; preds = %if.else51
  %43 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6208
  %read56 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %43, i32 0, i32 15, !dbg !6209
  %44 = load i32 (%struct.CDataFile*, i8*, i32)*, i32 (%struct.CDataFile*, i8*, i32)** %read56, align 8, !dbg !6209
  %tobool57 = icmp ne i32 (%struct.CDataFile*, i8*, i32)* %44, null, !dbg !6208
  br i1 %tobool57, label %if.then58, label %if.end78, !dbg !6210

if.then58:                                        ; preds = %land.lhs.true55
  %45 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6211
  %46 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6213
  %type59 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %46, i32 0, i32 0, !dbg !6214
  %47 = load i32, i32* %type59, align 8, !dbg !6214
  %48 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6215
  %name = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %48, i32 0, i32 8, !dbg !6216
  %arraydecay60 = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !6215
  %call61 = call %struct.CDataFileLayer* @cdf_layer_find(%struct.CDataFile* %45, i32 %47, i8* %arraydecay60), !dbg !6217
  store %struct.CDataFileLayer* %call61, %struct.CDataFileLayer** %blay, align 8, !dbg !6218
  %49 = load %struct.CDataFileLayer*, %struct.CDataFileLayer** %blay, align 8, !dbg !6219
  %tobool62 = icmp ne %struct.CDataFileLayer* %49, null, !dbg !6219
  br i1 %tobool62, label %if.then63, label %if.end77, !dbg !6221

if.then63:                                        ; preds = %if.then58
  %50 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6222
  %51 = load %struct.CDataFileLayer*, %struct.CDataFileLayer** %blay, align 8, !dbg !6225
  %call64 = call i32 @cdf_read_layer(%struct.CDataFile* %50, %struct.CDataFileLayer* %51), !dbg !6226
  %tobool65 = icmp ne i32 %call64, 0, !dbg !6226
  br i1 %tobool65, label %if.then66, label %if.else75, !dbg !6227

if.then66:                                        ; preds = %if.then63
  %52 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6228
  %read67 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %52, i32 0, i32 15, !dbg !6231
  %53 = load i32 (%struct.CDataFile*, i8*, i32)*, i32 (%struct.CDataFile*, i8*, i32)** %read67, align 8, !dbg !6231
  %54 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6232
  %55 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6233
  %data68 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %55, i32 0, i32 9, !dbg !6234
  %56 = load i8*, i8** %data68, align 8, !dbg !6234
  %57 = load i32, i32* %totelem.addr, align 4, !dbg !6235
  %call69 = call i32 %53(%struct.CDataFile* %54, i8* %56, i32 %57), !dbg !6228
  %tobool70 = icmp ne i32 %call69, 0, !dbg !6228
  br i1 %tobool70, label %if.then71, label %if.else72, !dbg !6236

if.then71:                                        ; preds = %if.then66
  br label %if.end73, !dbg !6237

if.else72:                                        ; preds = %if.then66
  br label %for.end83, !dbg !6239

if.end73:                                         ; preds = %if.then71
  %58 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6241
  %flag74 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %58, i32 0, i32 2, !dbg !6242
  %59 = load i32, i32* %flag74, align 8, !dbg !6243
  %or = or i32 %59, 16, !dbg !6243
  store i32 %or, i32* %flag74, align 8, !dbg !6243
  br label %if.end76, !dbg !6244

if.else75:                                        ; preds = %if.then63
  br label %for.end83, !dbg !6245

if.end76:                                         ; preds = %if.end73
  br label %if.end77, !dbg !6246

if.end77:                                         ; preds = %if.end76, %if.then58
  br label %if.end78, !dbg !6247

if.end78:                                         ; preds = %if.end77, %land.lhs.true55, %if.else51
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.then50
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then45
  br label %for.inc81, !dbg !6248

for.inc81:                                        ; preds = %if.end80
  %60 = load i32, i32* %i, align 4, !dbg !6249
  %inc82 = add nsw i32 %60, 1, !dbg !6249
  store i32 %inc82, i32* %i, align 4, !dbg !6249
  br label %for.cond30, !dbg !6250, !llvm.loop !6251

for.end83:                                        ; preds = %if.else75, %if.else72, %for.cond30
  %61 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6253
  call void @cdf_read_close(%struct.CDataFile* %61), !dbg !6254
  %62 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6255
  call void @cdf_free(%struct.CDataFile* %62), !dbg !6256
  br label %return, !dbg !6257

return:                                           ; preds = %for.end83, %if.then24, %if.then18, %if.then
  ret void, !dbg !6257
}

; Function Attrs: noinline nounwind uwtable
define internal void @customdata_external_filename(i8* %filename, %struct.ID* %id, %struct.CustomDataExternal* %external) #0 !dbg !6258 {
entry:
  %filename.addr = alloca i8*, align 8
  %id.addr = alloca %struct.ID*, align 8
  %external.addr = alloca %struct.CustomDataExternal*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !6261, metadata !DIExpression()), !dbg !6262
  store %struct.ID* %id, %struct.ID** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID** %id.addr, metadata !6263, metadata !DIExpression()), !dbg !6264
  store %struct.CustomDataExternal* %external, %struct.CustomDataExternal** %external.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomDataExternal** %external.addr, metadata !6265, metadata !DIExpression()), !dbg !6266
  %0 = load i8*, i8** %filename.addr, align 8, !dbg !6267
  %1 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external.addr, align 8, !dbg !6268
  %filename1 = getelementptr inbounds %struct.CustomDataExternal, %struct.CustomDataExternal* %1, i32 0, i32 0, !dbg !6269
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename1, i64 0, i64 0, !dbg !6268
  %call = call i8* @BLI_strncpy(i8* %0, i8* %arraydecay, i64 1024), !dbg !6270
  %2 = load i8*, i8** %filename.addr, align 8, !dbg !6271
  %3 = load %struct.ID*, %struct.ID** %id.addr, align 8, !dbg !6272
  %lib = getelementptr inbounds %struct.ID, %struct.ID* %3, i32 0, i32 3, !dbg !6272
  %4 = load %struct.Library*, %struct.Library** %lib, align 8, !dbg !6272
  %tobool = icmp ne %struct.Library* %4, null, !dbg !6272
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6272

cond.true:                                        ; preds = %entry
  %5 = load %struct.ID*, %struct.ID** %id.addr, align 8, !dbg !6272
  %lib2 = getelementptr inbounds %struct.ID, %struct.ID* %5, i32 0, i32 3, !dbg !6272
  %6 = load %struct.Library*, %struct.Library** %lib2, align 8, !dbg !6272
  %filepath = getelementptr inbounds %struct.Library, %struct.Library* %6, i32 0, i32 4, !dbg !6272
  %arraydecay3 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filepath, i64 0, i64 0, !dbg !6272
  br label %cond.end, !dbg !6272

cond.false:                                       ; preds = %entry
  %7 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !6272
  %name = getelementptr inbounds %struct.Main, %struct.Main* %7, i32 0, i32 2, !dbg !6272
  %arraydecay4 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !6272
  br label %cond.end, !dbg !6272

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %arraydecay3, %cond.true ], [ %arraydecay4, %cond.false ], !dbg !6272
  %call5 = call zeroext i8 @BLI_path_abs(i8* %2, i8* %cond), !dbg !6273
  ret void, !dbg !6274
}

declare dso_local %struct.CDataFile* @cdf_create(i32) #2

declare dso_local i32 @cdf_read_open(%struct.CDataFile*, i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local %struct.CDataFileLayer* @cdf_layer_find(%struct.CDataFile*, i32, i8*) #2

declare dso_local i32 @cdf_read_layer(%struct.CDataFile*, %struct.CDataFileLayer*) #2

declare dso_local void @cdf_read_close(%struct.CDataFile*) #2

declare dso_local void @cdf_free(%struct.CDataFile*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_external_write(%struct.CustomData* %data, %struct.ID* %id, i64 %mask, i32 %totelem, i32 %free) #0 !dbg !6275 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %id.addr = alloca %struct.ID*, align 8
  %mask.addr = alloca i64, align 8
  %totelem.addr = alloca i32, align 4
  %free.addr = alloca i32, align 4
  %external = alloca %struct.CustomDataExternal*, align 8
  %layer = alloca %struct.CustomDataLayer*, align 8
  %cdf = alloca %struct.CDataFile*, align 8
  %blay = alloca %struct.CDataFileLayer*, align 8
  %typeInfo = alloca %struct.LayerTypeInfo*, align 8
  %i = alloca i32, align 4
  %update = alloca i32, align 4
  %filename = alloca [1024 x i8], align 16
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !6278, metadata !DIExpression()), !dbg !6279
  store %struct.ID* %id, %struct.ID** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID** %id.addr, metadata !6280, metadata !DIExpression()), !dbg !6281
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !6282, metadata !DIExpression()), !dbg !6283
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !6284, metadata !DIExpression()), !dbg !6285
  store i32 %free, i32* %free.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %free.addr, metadata !6286, metadata !DIExpression()), !dbg !6287
  call void @llvm.dbg.declare(metadata %struct.CustomDataExternal** %external, metadata !6288, metadata !DIExpression()), !dbg !6289
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6290
  %external1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 6, !dbg !6291
  %1 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external1, align 8, !dbg !6291
  store %struct.CustomDataExternal* %1, %struct.CustomDataExternal** %external, align 8, !dbg !6289
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !6292, metadata !DIExpression()), !dbg !6293
  call void @llvm.dbg.declare(metadata %struct.CDataFile** %cdf, metadata !6294, metadata !DIExpression()), !dbg !6295
  call void @llvm.dbg.declare(metadata %struct.CDataFileLayer** %blay, metadata !6296, metadata !DIExpression()), !dbg !6297
  call void @llvm.dbg.declare(metadata %struct.LayerTypeInfo** %typeInfo, metadata !6298, metadata !DIExpression()), !dbg !6299
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6300, metadata !DIExpression()), !dbg !6301
  call void @llvm.dbg.declare(metadata i32* %update, metadata !6302, metadata !DIExpression()), !dbg !6303
  store i32 0, i32* %update, align 4, !dbg !6303
  call void @llvm.dbg.declare(metadata [1024 x i8]* %filename, metadata !6304, metadata !DIExpression()), !dbg !6305
  %2 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !6306
  %tobool = icmp ne %struct.CustomDataExternal* %2, null, !dbg !6306
  br i1 %tobool, label %if.end, label %if.then, !dbg !6308

if.then:                                          ; preds = %entry
  br label %return, !dbg !6309

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !6310
  br label %for.cond, !dbg !6312

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4, !dbg !6313
  %4 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6315
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %4, i32 0, i32 2, !dbg !6316
  %5 = load i32, i32* %totlayer, align 4, !dbg !6316
  %cmp = icmp slt i32 %3, %5, !dbg !6317
  br i1 %cmp, label %for.body, label %for.end, !dbg !6318

for.body:                                         ; preds = %for.cond
  %6 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6319
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %6, i32 0, i32 0, !dbg !6321
  %7 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !6321
  %8 = load i32, i32* %i, align 4, !dbg !6322
  %idxprom = sext i32 %8 to i64, !dbg !6319
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %7, i64 %idxprom, !dbg !6319
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !6323
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6324
  %type = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i32 0, i32 0, !dbg !6325
  %10 = load i32, i32* %type, align 8, !dbg !6325
  %call = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %10), !dbg !6326
  store %struct.LayerTypeInfo* %call, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6327
  %11 = load i64, i64* %mask.addr, align 8, !dbg !6328
  %12 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6330
  %type2 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %12, i32 0, i32 0, !dbg !6330
  %13 = load i32, i32* %type2, align 8, !dbg !6330
  %conv = sext i32 %13 to i64, !dbg !6330
  %shl = shl i64 1, %conv, !dbg !6330
  %and = and i64 %11, %shl, !dbg !6331
  %tobool3 = icmp ne i64 %and, 0, !dbg !6331
  br i1 %tobool3, label %if.else, label %if.then4, !dbg !6332

if.then4:                                         ; preds = %for.body
  br label %if.end10, !dbg !6333

if.else:                                          ; preds = %for.body
  %14 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6335
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %14, i32 0, i32 2, !dbg !6337
  %15 = load i32, i32* %flag, align 8, !dbg !6337
  %and5 = and i32 %15, 8, !dbg !6338
  %tobool6 = icmp ne i32 %and5, 0, !dbg !6338
  br i1 %tobool6, label %land.lhs.true, label %if.end9, !dbg !6339

land.lhs.true:                                    ; preds = %if.else
  %16 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6340
  %write = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %16, i32 0, i32 16, !dbg !6341
  %17 = load i32 (%struct.CDataFile*, i8*, i32)*, i32 (%struct.CDataFile*, i8*, i32)** %write, align 8, !dbg !6341
  %tobool7 = icmp ne i32 (%struct.CDataFile*, i8*, i32)* %17, null, !dbg !6340
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !6342

if.then8:                                         ; preds = %land.lhs.true
  store i32 1, i32* %update, align 4, !dbg !6343
  br label %if.end9, !dbg !6345

if.end9:                                          ; preds = %if.then8, %land.lhs.true, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then4
  br label %for.inc, !dbg !6346

for.inc:                                          ; preds = %if.end10
  %18 = load i32, i32* %i, align 4, !dbg !6347
  %inc = add nsw i32 %18, 1, !dbg !6347
  store i32 %inc, i32* %i, align 4, !dbg !6347
  br label %for.cond, !dbg !6348, !llvm.loop !6349

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %update, align 4, !dbg !6351
  %tobool11 = icmp ne i32 %19, 0, !dbg !6351
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !6353

if.then12:                                        ; preds = %for.end
  br label %return, !dbg !6354

if.end13:                                         ; preds = %for.end
  %20 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6355
  %21 = load %struct.ID*, %struct.ID** %id.addr, align 8, !dbg !6356
  %22 = load i64, i64* %mask.addr, align 8, !dbg !6357
  %23 = load i32, i32* %totelem.addr, align 4, !dbg !6358
  call void @CustomData_external_read(%struct.CustomData* %20, %struct.ID* %21, i64 %22, i32 %23), !dbg !6359
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename, i64 0, i64 0, !dbg !6360
  %24 = load %struct.ID*, %struct.ID** %id.addr, align 8, !dbg !6361
  %25 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !6362
  call void @customdata_external_filename(i8* %arraydecay, %struct.ID* %24, %struct.CustomDataExternal* %25), !dbg !6363
  %call14 = call %struct.CDataFile* @cdf_create(i32 1), !dbg !6364
  store %struct.CDataFile* %call14, %struct.CDataFile** %cdf, align 8, !dbg !6365
  store i32 0, i32* %i, align 4, !dbg !6366
  br label %for.cond15, !dbg !6368

for.cond15:                                       ; preds = %for.inc44, %if.end13
  %26 = load i32, i32* %i, align 4, !dbg !6369
  %27 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6371
  %totlayer16 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %27, i32 0, i32 2, !dbg !6372
  %28 = load i32, i32* %totlayer16, align 4, !dbg !6372
  %cmp17 = icmp slt i32 %26, %28, !dbg !6373
  br i1 %cmp17, label %for.body19, label %for.end46, !dbg !6374

for.body19:                                       ; preds = %for.cond15
  %29 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6375
  %layers20 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %29, i32 0, i32 0, !dbg !6377
  %30 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers20, align 8, !dbg !6377
  %31 = load i32, i32* %i, align 4, !dbg !6378
  %idxprom21 = sext i32 %31 to i64, !dbg !6375
  %arrayidx22 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %30, i64 %idxprom21, !dbg !6375
  store %struct.CustomDataLayer* %arrayidx22, %struct.CustomDataLayer** %layer, align 8, !dbg !6379
  %32 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6380
  %type23 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %32, i32 0, i32 0, !dbg !6381
  %33 = load i32, i32* %type23, align 8, !dbg !6381
  %call24 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %33), !dbg !6382
  store %struct.LayerTypeInfo* %call24, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6383
  %34 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6384
  %flag25 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %34, i32 0, i32 2, !dbg !6386
  %35 = load i32, i32* %flag25, align 8, !dbg !6386
  %and26 = and i32 %35, 8, !dbg !6387
  %tobool27 = icmp ne i32 %and26, 0, !dbg !6387
  br i1 %tobool27, label %land.lhs.true28, label %if.end43, !dbg !6388

land.lhs.true28:                                  ; preds = %for.body19
  %36 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6389
  %filesize = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %36, i32 0, i32 17, !dbg !6390
  %37 = load i64 (%struct.CDataFile*, i8*, i32)*, i64 (%struct.CDataFile*, i8*, i32)** %filesize, align 8, !dbg !6390
  %tobool29 = icmp ne i64 (%struct.CDataFile*, i8*, i32)* %37, null, !dbg !6389
  br i1 %tobool29, label %if.then30, label %if.end43, !dbg !6391

if.then30:                                        ; preds = %land.lhs.true28
  %38 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6392
  %flag31 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %38, i32 0, i32 2, !dbg !6395
  %39 = load i32, i32* %flag31, align 8, !dbg !6395
  %and32 = and i32 %39, 16, !dbg !6396
  %tobool33 = icmp ne i32 %and32, 0, !dbg !6396
  br i1 %tobool33, label %if.then34, label %if.else41, !dbg !6397

if.then34:                                        ; preds = %if.then30
  %40 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6398
  %41 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6400
  %type35 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %41, i32 0, i32 0, !dbg !6401
  %42 = load i32, i32* %type35, align 8, !dbg !6401
  %43 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6402
  %name = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %43, i32 0, i32 8, !dbg !6403
  %arraydecay36 = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !6402
  %44 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6404
  %filesize37 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %44, i32 0, i32 17, !dbg !6405
  %45 = load i64 (%struct.CDataFile*, i8*, i32)*, i64 (%struct.CDataFile*, i8*, i32)** %filesize37, align 8, !dbg !6405
  %46 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6406
  %47 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6407
  %data38 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %47, i32 0, i32 9, !dbg !6408
  %48 = load i8*, i8** %data38, align 8, !dbg !6408
  %49 = load i32, i32* %totelem.addr, align 4, !dbg !6409
  %call39 = call i64 %45(%struct.CDataFile* %46, i8* %48, i32 %49), !dbg !6404
  %call40 = call %struct.CDataFileLayer* @cdf_layer_add(%struct.CDataFile* %40, i32 %42, i8* %arraydecay36, i64 %call39), !dbg !6410
  br label %if.end42, !dbg !6411

if.else41:                                        ; preds = %if.then30
  %50 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6412
  call void @cdf_free(%struct.CDataFile* %50), !dbg !6414
  br label %return, !dbg !6415

if.end42:                                         ; preds = %if.then34
  br label %if.end43, !dbg !6416

if.end43:                                         ; preds = %if.end42, %land.lhs.true28, %for.body19
  br label %for.inc44, !dbg !6417

for.inc44:                                        ; preds = %if.end43
  %51 = load i32, i32* %i, align 4, !dbg !6418
  %inc45 = add nsw i32 %51, 1, !dbg !6418
  store i32 %inc45, i32* %i, align 4, !dbg !6418
  br label %for.cond15, !dbg !6419, !llvm.loop !6420

for.end46:                                        ; preds = %for.cond15
  %52 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6422
  %arraydecay47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename, i64 0, i64 0, !dbg !6424
  %call48 = call i32 @cdf_write_open(%struct.CDataFile* %52, i8* %arraydecay47), !dbg !6425
  %tobool49 = icmp ne i32 %call48, 0, !dbg !6425
  br i1 %tobool49, label %if.end53, label %if.then50, !dbg !6426

if.then50:                                        ; preds = %for.end46
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6427
  %arraydecay51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename, i64 0, i64 0, !dbg !6429
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i8* %arraydecay51), !dbg !6430
  br label %return, !dbg !6431

if.end53:                                         ; preds = %for.end46
  store i32 0, i32* %i, align 4, !dbg !6432
  br label %for.cond54, !dbg !6434

for.cond54:                                       ; preds = %for.inc88, %if.end53
  %54 = load i32, i32* %i, align 4, !dbg !6435
  %55 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6437
  %totlayer55 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %55, i32 0, i32 2, !dbg !6438
  %56 = load i32, i32* %totlayer55, align 4, !dbg !6438
  %cmp56 = icmp slt i32 %54, %56, !dbg !6439
  br i1 %cmp56, label %for.body58, label %for.end90, !dbg !6440

for.body58:                                       ; preds = %for.cond54
  %57 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6441
  %layers59 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %57, i32 0, i32 0, !dbg !6443
  %58 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers59, align 8, !dbg !6443
  %59 = load i32, i32* %i, align 4, !dbg !6444
  %idxprom60 = sext i32 %59 to i64, !dbg !6441
  %arrayidx61 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %58, i64 %idxprom60, !dbg !6441
  store %struct.CustomDataLayer* %arrayidx61, %struct.CustomDataLayer** %layer, align 8, !dbg !6445
  %60 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6446
  %type62 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %60, i32 0, i32 0, !dbg !6447
  %61 = load i32, i32* %type62, align 8, !dbg !6447
  %call63 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %61), !dbg !6448
  store %struct.LayerTypeInfo* %call63, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6449
  %62 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6450
  %flag64 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %62, i32 0, i32 2, !dbg !6452
  %63 = load i32, i32* %flag64, align 8, !dbg !6452
  %and65 = and i32 %63, 8, !dbg !6453
  %tobool66 = icmp ne i32 %and65, 0, !dbg !6453
  br i1 %tobool66, label %land.lhs.true67, label %if.end87, !dbg !6454

land.lhs.true67:                                  ; preds = %for.body58
  %64 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6455
  %write68 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %64, i32 0, i32 16, !dbg !6456
  %65 = load i32 (%struct.CDataFile*, i8*, i32)*, i32 (%struct.CDataFile*, i8*, i32)** %write68, align 8, !dbg !6456
  %tobool69 = icmp ne i32 (%struct.CDataFile*, i8*, i32)* %65, null, !dbg !6455
  br i1 %tobool69, label %if.then70, label %if.end87, !dbg !6457

if.then70:                                        ; preds = %land.lhs.true67
  %66 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6458
  %67 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6460
  %type71 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %67, i32 0, i32 0, !dbg !6461
  %68 = load i32, i32* %type71, align 8, !dbg !6461
  %69 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6462
  %name72 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %69, i32 0, i32 8, !dbg !6463
  %arraydecay73 = getelementptr inbounds [64 x i8], [64 x i8]* %name72, i64 0, i64 0, !dbg !6462
  %call74 = call %struct.CDataFileLayer* @cdf_layer_find(%struct.CDataFile* %66, i32 %68, i8* %arraydecay73), !dbg !6464
  store %struct.CDataFileLayer* %call74, %struct.CDataFileLayer** %blay, align 8, !dbg !6465
  %70 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6466
  %71 = load %struct.CDataFileLayer*, %struct.CDataFileLayer** %blay, align 8, !dbg !6468
  %call75 = call i32 @cdf_write_layer(%struct.CDataFile* %70, %struct.CDataFileLayer* %71), !dbg !6469
  %tobool76 = icmp ne i32 %call75, 0, !dbg !6469
  br i1 %tobool76, label %if.then77, label %if.else85, !dbg !6470

if.then77:                                        ; preds = %if.then70
  %72 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6471
  %write78 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %72, i32 0, i32 16, !dbg !6474
  %73 = load i32 (%struct.CDataFile*, i8*, i32)*, i32 (%struct.CDataFile*, i8*, i32)** %write78, align 8, !dbg !6474
  %74 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6475
  %75 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6476
  %data79 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %75, i32 0, i32 9, !dbg !6477
  %76 = load i8*, i8** %data79, align 8, !dbg !6477
  %77 = load i32, i32* %totelem.addr, align 4, !dbg !6478
  %call80 = call i32 %73(%struct.CDataFile* %74, i8* %76, i32 %77), !dbg !6471
  %tobool81 = icmp ne i32 %call80, 0, !dbg !6471
  br i1 %tobool81, label %if.then82, label %if.else83, !dbg !6479

if.then82:                                        ; preds = %if.then77
  br label %if.end84, !dbg !6480

if.else83:                                        ; preds = %if.then77
  br label %for.end90, !dbg !6482

if.end84:                                         ; preds = %if.then82
  br label %if.end86, !dbg !6484

if.else85:                                        ; preds = %if.then70
  br label %for.end90, !dbg !6485

if.end86:                                         ; preds = %if.end84
  br label %if.end87, !dbg !6487

if.end87:                                         ; preds = %if.end86, %land.lhs.true67, %for.body58
  br label %for.inc88, !dbg !6488

for.inc88:                                        ; preds = %if.end87
  %78 = load i32, i32* %i, align 4, !dbg !6489
  %inc89 = add nsw i32 %78, 1, !dbg !6489
  store i32 %inc89, i32* %i, align 4, !dbg !6489
  br label %for.cond54, !dbg !6490, !llvm.loop !6491

for.end90:                                        ; preds = %if.else85, %if.else83, %for.cond54
  %79 = load i32, i32* %i, align 4, !dbg !6493
  %80 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6495
  %totlayer91 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %80, i32 0, i32 2, !dbg !6496
  %81 = load i32, i32* %totlayer91, align 4, !dbg !6496
  %cmp92 = icmp ne i32 %79, %81, !dbg !6497
  br i1 %cmp92, label %if.then94, label %if.end97, !dbg !6498

if.then94:                                        ; preds = %for.end90
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6499
  %arraydecay95 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename, i64 0, i64 0, !dbg !6501
  %call96 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i8* %arraydecay95), !dbg !6502
  %83 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6503
  call void @cdf_free(%struct.CDataFile* %83), !dbg !6504
  br label %return, !dbg !6505

if.end97:                                         ; preds = %for.end90
  store i32 0, i32* %i, align 4, !dbg !6506
  br label %for.cond98, !dbg !6508

for.cond98:                                       ; preds = %for.inc127, %if.end97
  %84 = load i32, i32* %i, align 4, !dbg !6509
  %85 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6511
  %totlayer99 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %85, i32 0, i32 2, !dbg !6512
  %86 = load i32, i32* %totlayer99, align 4, !dbg !6512
  %cmp100 = icmp slt i32 %84, %86, !dbg !6513
  br i1 %cmp100, label %for.body102, label %for.end129, !dbg !6514

for.body102:                                      ; preds = %for.cond98
  %87 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6515
  %layers103 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %87, i32 0, i32 0, !dbg !6517
  %88 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers103, align 8, !dbg !6517
  %89 = load i32, i32* %i, align 4, !dbg !6518
  %idxprom104 = sext i32 %89 to i64, !dbg !6515
  %arrayidx105 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %88, i64 %idxprom104, !dbg !6515
  store %struct.CustomDataLayer* %arrayidx105, %struct.CustomDataLayer** %layer, align 8, !dbg !6519
  %90 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6520
  %type106 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %90, i32 0, i32 0, !dbg !6521
  %91 = load i32, i32* %type106, align 8, !dbg !6521
  %call107 = call %struct.LayerTypeInfo* @layerType_getInfo(i32 %91), !dbg !6522
  store %struct.LayerTypeInfo* %call107, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6523
  %92 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6524
  %flag108 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %92, i32 0, i32 2, !dbg !6526
  %93 = load i32, i32* %flag108, align 8, !dbg !6526
  %and109 = and i32 %93, 8, !dbg !6527
  %tobool110 = icmp ne i32 %and109, 0, !dbg !6527
  br i1 %tobool110, label %land.lhs.true111, label %if.end126, !dbg !6528

land.lhs.true111:                                 ; preds = %for.body102
  %94 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6529
  %write112 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %94, i32 0, i32 16, !dbg !6530
  %95 = load i32 (%struct.CDataFile*, i8*, i32)*, i32 (%struct.CDataFile*, i8*, i32)** %write112, align 8, !dbg !6530
  %tobool113 = icmp ne i32 (%struct.CDataFile*, i8*, i32)* %95, null, !dbg !6529
  br i1 %tobool113, label %if.then114, label %if.end126, !dbg !6531

if.then114:                                       ; preds = %land.lhs.true111
  %96 = load i32, i32* %free.addr, align 4, !dbg !6532
  %tobool115 = icmp ne i32 %96, 0, !dbg !6532
  br i1 %tobool115, label %if.then116, label %if.end125, !dbg !6535

if.then116:                                       ; preds = %if.then114
  %97 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6536
  %free117 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %97, i32 0, i32 5, !dbg !6539
  %98 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free117, align 8, !dbg !6539
  %tobool118 = icmp ne void (i8*, i32, i32)* %98, null, !dbg !6536
  br i1 %tobool118, label %if.then119, label %if.end122, !dbg !6540

if.then119:                                       ; preds = %if.then116
  %99 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6541
  %free120 = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %99, i32 0, i32 5, !dbg !6542
  %100 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %free120, align 8, !dbg !6542
  %101 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6543
  %data121 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %101, i32 0, i32 9, !dbg !6544
  %102 = load i8*, i8** %data121, align 8, !dbg !6544
  %103 = load i32, i32* %totelem.addr, align 4, !dbg !6545
  %104 = load %struct.LayerTypeInfo*, %struct.LayerTypeInfo** %typeInfo, align 8, !dbg !6546
  %size = getelementptr inbounds %struct.LayerTypeInfo, %struct.LayerTypeInfo* %104, i32 0, i32 0, !dbg !6547
  %105 = load i32, i32* %size, align 8, !dbg !6547
  call void %100(i8* %102, i32 %103, i32 %105), !dbg !6541
  br label %if.end122, !dbg !6541

if.end122:                                        ; preds = %if.then119, %if.then116
  %106 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6548
  %flag123 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %106, i32 0, i32 2, !dbg !6549
  %107 = load i32, i32* %flag123, align 8, !dbg !6550
  %and124 = and i32 %107, -17, !dbg !6550
  store i32 %and124, i32* %flag123, align 8, !dbg !6550
  br label %if.end125, !dbg !6551

if.end125:                                        ; preds = %if.end122, %if.then114
  br label %if.end126, !dbg !6552

if.end126:                                        ; preds = %if.end125, %land.lhs.true111, %for.body102
  br label %for.inc127, !dbg !6553

for.inc127:                                       ; preds = %if.end126
  %108 = load i32, i32* %i, align 4, !dbg !6554
  %inc128 = add nsw i32 %108, 1, !dbg !6554
  store i32 %inc128, i32* %i, align 4, !dbg !6554
  br label %for.cond98, !dbg !6555, !llvm.loop !6556

for.end129:                                       ; preds = %for.cond98
  %109 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6558
  call void @cdf_write_close(%struct.CDataFile* %109), !dbg !6559
  %110 = load %struct.CDataFile*, %struct.CDataFile** %cdf, align 8, !dbg !6560
  call void @cdf_free(%struct.CDataFile* %110), !dbg !6561
  br label %return, !dbg !6562

return:                                           ; preds = %for.end129, %if.then94, %if.then50, %if.else41, %if.then12, %if.then
  ret void, !dbg !6562
}

declare dso_local %struct.CDataFileLayer* @cdf_layer_add(%struct.CDataFile*, i32, i8*, i64) #2

declare dso_local i32 @cdf_write_open(%struct.CDataFile*, i8*) #2

declare dso_local i32 @cdf_write_layer(%struct.CDataFile*, %struct.CDataFileLayer*) #2

declare dso_local void @cdf_write_close(%struct.CDataFile*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_external_add(%struct.CustomData* %data, %struct.ID* %UNUSED_id, i32 %type, i32 %UNUSED_totelem, i8* %filename) #0 !dbg !6563 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %UNUSED_id.addr = alloca %struct.ID*, align 8
  %type.addr = alloca i32, align 4
  %UNUSED_totelem.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %external = alloca %struct.CustomDataExternal*, align 8
  %layer = alloca %struct.CustomDataLayer*, align 8
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !6566, metadata !DIExpression()), !dbg !6567
  store %struct.ID* %UNUSED_id, %struct.ID** %UNUSED_id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID** %UNUSED_id.addr, metadata !6568, metadata !DIExpression()), !dbg !6569
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !6570, metadata !DIExpression()), !dbg !6571
  store i32 %UNUSED_totelem, i32* %UNUSED_totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %UNUSED_totelem.addr, metadata !6572, metadata !DIExpression()), !dbg !6573
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !6574, metadata !DIExpression()), !dbg !6575
  call void @llvm.dbg.declare(metadata %struct.CustomDataExternal** %external, metadata !6576, metadata !DIExpression()), !dbg !6577
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6578
  %external1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 6, !dbg !6579
  %1 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external1, align 8, !dbg !6579
  store %struct.CustomDataExternal* %1, %struct.CustomDataExternal** %external, align 8, !dbg !6577
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !6580, metadata !DIExpression()), !dbg !6581
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !6582, metadata !DIExpression()), !dbg !6583
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6584
  %3 = load i32, i32* %type.addr, align 4, !dbg !6585
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %2, i32 %3), !dbg !6586
  store i32 %call, i32* %layer_index, align 4, !dbg !6587
  %4 = load i32, i32* %layer_index, align 4, !dbg !6588
  %cmp = icmp eq i32 %4, -1, !dbg !6590
  br i1 %cmp, label %if.then, label %if.end, !dbg !6591

if.then:                                          ; preds = %entry
  br label %return, !dbg !6592

if.end:                                           ; preds = %entry
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6593
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !6594
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !6594
  %7 = load i32, i32* %layer_index, align 4, !dbg !6595
  %idxprom = sext i32 %7 to i64, !dbg !6593
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom, !dbg !6593
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !6596
  %8 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6597
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %8, i32 0, i32 2, !dbg !6599
  %9 = load i32, i32* %flag, align 8, !dbg !6599
  %and = and i32 %9, 8, !dbg !6600
  %tobool = icmp ne i32 %and, 0, !dbg !6600
  br i1 %tobool, label %if.then2, label %if.end3, !dbg !6601

if.then2:                                         ; preds = %if.end
  br label %return, !dbg !6602

if.end3:                                          ; preds = %if.end
  %10 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !6603
  %tobool4 = icmp ne %struct.CustomDataExternal* %10, null, !dbg !6603
  br i1 %tobool4, label %if.end8, label %if.then5, !dbg !6605

if.then5:                                         ; preds = %if.end3
  %11 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !6606
  %call6 = call i8* %11(i64 1024, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)), !dbg !6606
  %12 = bitcast i8* %call6 to %struct.CustomDataExternal*, !dbg !6606
  store %struct.CustomDataExternal* %12, %struct.CustomDataExternal** %external, align 8, !dbg !6608
  %13 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !6609
  %14 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6610
  %external7 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %14, i32 0, i32 6, !dbg !6611
  store %struct.CustomDataExternal* %13, %struct.CustomDataExternal** %external7, align 8, !dbg !6612
  br label %if.end8, !dbg !6613

if.end8:                                          ; preds = %if.then5, %if.end3
  %15 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !6614
  %filename9 = getelementptr inbounds %struct.CustomDataExternal, %struct.CustomDataExternal* %15, i32 0, i32 0, !dbg !6615
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %filename9, i64 0, i64 0, !dbg !6614
  %16 = load i8*, i8** %filename.addr, align 8, !dbg !6616
  %call10 = call i8* @BLI_strncpy(i8* %arraydecay, i8* %16, i64 1024), !dbg !6617
  %17 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6618
  %flag11 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %17, i32 0, i32 2, !dbg !6619
  %18 = load i32, i32* %flag11, align 8, !dbg !6620
  %or = or i32 %18, 24, !dbg !6620
  store i32 %or, i32* %flag11, align 8, !dbg !6620
  br label %return, !dbg !6621

return:                                           ; preds = %if.end8, %if.then2, %if.then
  ret void, !dbg !6621
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CustomData_external_remove(%struct.CustomData* %data, %struct.ID* %id, i32 %type, i32 %totelem) #0 !dbg !6622 {
entry:
  %data.addr = alloca %struct.CustomData*, align 8
  %id.addr = alloca %struct.ID*, align 8
  %type.addr = alloca i32, align 4
  %totelem.addr = alloca i32, align 4
  %external = alloca %struct.CustomDataExternal*, align 8
  %layer = alloca %struct.CustomDataLayer*, align 8
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !6625, metadata !DIExpression()), !dbg !6626
  store %struct.ID* %id, %struct.ID** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID** %id.addr, metadata !6627, metadata !DIExpression()), !dbg !6628
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !6629, metadata !DIExpression()), !dbg !6630
  store i32 %totelem, i32* %totelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totelem.addr, metadata !6631, metadata !DIExpression()), !dbg !6632
  call void @llvm.dbg.declare(metadata %struct.CustomDataExternal** %external, metadata !6633, metadata !DIExpression()), !dbg !6634
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6635
  %external1 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %0, i32 0, i32 6, !dbg !6636
  %1 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external1, align 8, !dbg !6636
  store %struct.CustomDataExternal* %1, %struct.CustomDataExternal** %external, align 8, !dbg !6634
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !6637, metadata !DIExpression()), !dbg !6638
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !6639, metadata !DIExpression()), !dbg !6640
  %2 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6641
  %3 = load i32, i32* %type.addr, align 4, !dbg !6642
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %2, i32 %3), !dbg !6643
  store i32 %call, i32* %layer_index, align 4, !dbg !6644
  %4 = load i32, i32* %layer_index, align 4, !dbg !6645
  %cmp = icmp eq i32 %4, -1, !dbg !6647
  br i1 %cmp, label %if.then, label %if.end, !dbg !6648

if.then:                                          ; preds = %entry
  br label %if.end14, !dbg !6649

if.end:                                           ; preds = %entry
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6650
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !6651
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !6651
  %7 = load i32, i32* %layer_index, align 4, !dbg !6652
  %idxprom = sext i32 %7 to i64, !dbg !6650
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom, !dbg !6650
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !6653
  %8 = load %struct.CustomDataExternal*, %struct.CustomDataExternal** %external, align 8, !dbg !6654
  %tobool = icmp ne %struct.CustomDataExternal* %8, null, !dbg !6654
  br i1 %tobool, label %if.end3, label %if.then2, !dbg !6656

if.then2:                                         ; preds = %if.end
  br label %if.end14, !dbg !6657

if.end3:                                          ; preds = %if.end
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6658
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i32 0, i32 2, !dbg !6660
  %10 = load i32, i32* %flag, align 8, !dbg !6660
  %and = and i32 %10, 8, !dbg !6661
  %tobool4 = icmp ne i32 %and, 0, !dbg !6661
  br i1 %tobool4, label %if.then5, label %if.end14, !dbg !6662

if.then5:                                         ; preds = %if.end3
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6663
  %flag6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i32 0, i32 2, !dbg !6666
  %12 = load i32, i32* %flag6, align 8, !dbg !6666
  %and7 = and i32 %12, 16, !dbg !6667
  %tobool8 = icmp ne i32 %and7, 0, !dbg !6667
  br i1 %tobool8, label %if.end11, label %if.then9, !dbg !6668

if.then9:                                         ; preds = %if.then5
  %13 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6669
  %14 = load %struct.ID*, %struct.ID** %id.addr, align 8, !dbg !6670
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6671
  %type10 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i32 0, i32 0, !dbg !6671
  %16 = load i32, i32* %type10, align 8, !dbg !6671
  %conv = sext i32 %16 to i64, !dbg !6671
  %shl = shl i64 1, %conv, !dbg !6671
  %17 = load i32, i32* %totelem.addr, align 4, !dbg !6672
  call void @CustomData_external_read(%struct.CustomData* %13, %struct.ID* %14, i64 %shl, i32 %17), !dbg !6673
  br label %if.end11, !dbg !6673

if.end11:                                         ; preds = %if.then9, %if.then5
  %18 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6674
  %flag12 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %18, i32 0, i32 2, !dbg !6675
  %19 = load i32, i32* %flag12, align 8, !dbg !6676
  %and13 = and i32 %19, -9, !dbg !6676
  store i32 %and13, i32* %flag12, align 8, !dbg !6676
  br label %if.end14, !dbg !6677

if.end14:                                         ; preds = %if.then, %if.then2, %if.end11, %if.end3
  ret void, !dbg !6678
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @CustomData_external_test(%struct.CustomData* %data, i32 %type) #0 !dbg !6679 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %type.addr = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  %layer_index = alloca i32, align 4
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !6682, metadata !DIExpression()), !dbg !6683
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !6684, metadata !DIExpression()), !dbg !6685
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !6686, metadata !DIExpression()), !dbg !6687
  call void @llvm.dbg.declare(metadata i32* %layer_index, metadata !6688, metadata !DIExpression()), !dbg !6689
  %0 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6690
  %1 = load i32, i32* %type.addr, align 4, !dbg !6691
  %call = call i32 @CustomData_get_active_layer_index(%struct.CustomData* %0, i32 %1), !dbg !6692
  store i32 %call, i32* %layer_index, align 4, !dbg !6693
  %2 = load i32, i32* %layer_index, align 4, !dbg !6694
  %cmp = icmp eq i32 %2, -1, !dbg !6696
  br i1 %cmp, label %if.then, label %if.end, !dbg !6697

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6698
  br label %return, !dbg !6698

if.end:                                           ; preds = %entry
  %3 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !6699
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %3, i32 0, i32 0, !dbg !6700
  %4 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !6700
  %5 = load i32, i32* %layer_index, align 4, !dbg !6701
  %idxprom = sext i32 %5 to i64, !dbg !6699
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %4, i64 %idxprom, !dbg !6699
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !6702
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !6703
  %flag = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i32 0, i32 2, !dbg !6704
  %7 = load i32, i32* %flag, align 8, !dbg !6704
  %and = and i32 %7, 8, !dbg !6705
  %cmp1 = icmp ne i32 %and, 0, !dbg !6706
  %conv = zext i1 %cmp1 to i32, !dbg !6706
  %conv2 = trunc i32 %conv to i8, !dbg !6707
  store i8 %conv2, i8* %retval, align 1, !dbg !6708
  br label %return, !dbg !6708

return:                                           ; preds = %if.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !6709
  ret i8 %8, !dbg !6709
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_mdeformvert(i8* %source, i8* %dest, i32 %count) #0 !dbg !6710 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %dvert = alloca %struct.MDeformVert*, align 8
  %dw = alloca %struct.MDeformWeight*, align 8
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !6711, metadata !DIExpression()), !dbg !6712
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !6713, metadata !DIExpression()), !dbg !6714
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !6715, metadata !DIExpression()), !dbg !6716
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6717, metadata !DIExpression()), !dbg !6718
  call void @llvm.dbg.declare(metadata i32* %size, metadata !6719, metadata !DIExpression()), !dbg !6720
  store i32 16, i32* %size, align 4, !dbg !6720
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !6721
  %1 = load i8*, i8** %source.addr, align 8, !dbg !6722
  %2 = load i32, i32* %count.addr, align 4, !dbg !6723
  %3 = load i32, i32* %size, align 4, !dbg !6724
  %mul = mul nsw i32 %2, %3, !dbg !6725
  %conv = sext i32 %mul to i64, !dbg !6723
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %conv, i1 false), !dbg !6726
  store i32 0, i32* %i, align 4, !dbg !6727
  br label %for.cond, !dbg !6729

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !6730
  %5 = load i32, i32* %count.addr, align 4, !dbg !6732
  %cmp = icmp slt i32 %4, %5, !dbg !6733
  br i1 %cmp, label %for.body, label %for.end, !dbg !6734

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.MDeformVert** %dvert, metadata !6735, metadata !DIExpression()), !dbg !6737
  %6 = load i8*, i8** %dest.addr, align 8, !dbg !6738
  %7 = load i32, i32* %i, align 4, !dbg !6739
  %8 = load i32, i32* %size, align 4, !dbg !6740
  %mul2 = mul nsw i32 %7, %8, !dbg !6741
  %idx.ext = sext i32 %mul2 to i64, !dbg !6742
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %idx.ext, !dbg !6742
  %9 = bitcast i8* %add.ptr to %struct.MDeformVert*, !dbg !6743
  store %struct.MDeformVert* %9, %struct.MDeformVert** %dvert, align 8, !dbg !6737
  %10 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6744
  %totweight = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %10, i32 0, i32 1, !dbg !6746
  %11 = load i32, i32* %totweight, align 8, !dbg !6746
  %tobool = icmp ne i32 %11, 0, !dbg !6744
  br i1 %tobool, label %if.then, label %if.else, !dbg !6747

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.MDeformWeight** %dw, metadata !6748, metadata !DIExpression()), !dbg !6752
  %12 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !6753
  %13 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6754
  %totweight3 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %13, i32 0, i32 1, !dbg !6755
  %14 = load i32, i32* %totweight3, align 8, !dbg !6755
  %conv4 = sext i32 %14 to i64, !dbg !6754
  %mul5 = mul i64 %conv4, 8, !dbg !6756
  %call = call i8* %12(i64 %mul5, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.89, i64 0, i64 0)), !dbg !6753
  %15 = bitcast i8* %call to %struct.MDeformWeight*, !dbg !6753
  store %struct.MDeformWeight* %15, %struct.MDeformWeight** %dw, align 8, !dbg !6752
  %16 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw, align 8, !dbg !6757
  %17 = bitcast %struct.MDeformWeight* %16 to i8*, !dbg !6758
  %18 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6759
  %dw6 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %18, i32 0, i32 0, !dbg !6760
  %19 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw6, align 8, !dbg !6760
  %20 = bitcast %struct.MDeformWeight* %19 to i8*, !dbg !6758
  %21 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6761
  %totweight7 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %21, i32 0, i32 1, !dbg !6762
  %22 = load i32, i32* %totweight7, align 8, !dbg !6762
  %conv8 = sext i32 %22 to i64, !dbg !6761
  %mul9 = mul i64 %conv8, 8, !dbg !6763
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %20, i64 %mul9, i1 false), !dbg !6758
  %23 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw, align 8, !dbg !6764
  %24 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6765
  %dw10 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %24, i32 0, i32 0, !dbg !6766
  store %struct.MDeformWeight* %23, %struct.MDeformWeight** %dw10, align 8, !dbg !6767
  br label %if.end, !dbg !6768

if.else:                                          ; preds = %for.body
  %25 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6769
  %dw11 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %25, i32 0, i32 0, !dbg !6770
  store %struct.MDeformWeight* null, %struct.MDeformWeight** %dw11, align 8, !dbg !6771
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !6772

for.inc:                                          ; preds = %if.end
  %26 = load i32, i32* %i, align 4, !dbg !6773
  %inc = add nsw i32 %26, 1, !dbg !6773
  store i32 %inc, i32* %i, align 4, !dbg !6773
  br label %for.cond, !dbg !6774, !llvm.loop !6775

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6777
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerFree_mdeformvert(i8* %data, i32 %count, i32 %size) #0 !dbg !6778 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %dvert = alloca %struct.MDeformVert*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6779, metadata !DIExpression()), !dbg !6780
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !6781, metadata !DIExpression()), !dbg !6782
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !6783, metadata !DIExpression()), !dbg !6784
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6785, metadata !DIExpression()), !dbg !6786
  store i32 0, i32* %i, align 4, !dbg !6787
  br label %for.cond, !dbg !6789

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6790
  %1 = load i32, i32* %count.addr, align 4, !dbg !6792
  %cmp = icmp slt i32 %0, %1, !dbg !6793
  br i1 %cmp, label %for.body, label %for.end, !dbg !6794

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.MDeformVert** %dvert, metadata !6795, metadata !DIExpression()), !dbg !6797
  %2 = load i8*, i8** %data.addr, align 8, !dbg !6798
  %3 = load i32, i32* %i, align 4, !dbg !6799
  %4 = load i32, i32* %size.addr, align 4, !dbg !6800
  %mul = mul nsw i32 %3, %4, !dbg !6801
  %idx.ext = sext i32 %mul to i64, !dbg !6802
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !6802
  %5 = bitcast i8* %add.ptr to %struct.MDeformVert*, !dbg !6803
  store %struct.MDeformVert* %5, %struct.MDeformVert** %dvert, align 8, !dbg !6797
  %6 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6804
  %dw = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %6, i32 0, i32 0, !dbg !6806
  %7 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw, align 8, !dbg !6806
  %tobool = icmp ne %struct.MDeformWeight* %7, null, !dbg !6804
  br i1 %tobool, label %if.then, label %if.end, !dbg !6807

if.then:                                          ; preds = %for.body
  %8 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !6808
  %9 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6810
  %dw1 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %9, i32 0, i32 0, !dbg !6811
  %10 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw1, align 8, !dbg !6811
  %11 = bitcast %struct.MDeformWeight* %10 to i8*, !dbg !6810
  call void %8(i8* %11), !dbg !6808
  %12 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6812
  %dw2 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %12, i32 0, i32 0, !dbg !6813
  store %struct.MDeformWeight* null, %struct.MDeformWeight** %dw2, align 8, !dbg !6814
  %13 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6815
  %totweight = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %13, i32 0, i32 1, !dbg !6816
  store i32 0, i32* %totweight, align 8, !dbg !6817
  br label %if.end, !dbg !6818

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6819

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4, !dbg !6820
  %inc = add nsw i32 %14, 1, !dbg !6820
  store i32 %inc, i32* %i, align 4, !dbg !6820
  br label %for.cond, !dbg !6821, !llvm.loop !6822

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6824
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_mdeformvert(i8** %sources, float* %weights, float* %UNUSED_sub_weights, i32 %count, i8* %dest) #0 !dbg !6825 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %UNUSED_sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %dvert = alloca %struct.MDeformVert*, align 8
  %dest_dwlink = alloca %struct.MDeformWeight_Link*, align 8
  %node = alloca %struct.MDeformWeight_Link*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %totweight = alloca i32, align 4
  %source = alloca %struct.MDeformVert*, align 8
  %interp_weight = alloca float, align 4
  %dw = alloca %struct.MDeformWeight*, align 8
  %weight = alloca float, align 4
  %tmp_dw = alloca %struct.MDeformWeight*, align 8
  %tmp_dwlink = alloca %struct.MDeformWeight_Link*, align 8
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !6826, metadata !DIExpression()), !dbg !6827
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !6828, metadata !DIExpression()), !dbg !6829
  store float* %UNUSED_sub_weights, float** %UNUSED_sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %UNUSED_sub_weights.addr, metadata !6830, metadata !DIExpression()), !dbg !6831
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !6832, metadata !DIExpression()), !dbg !6833
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !6834, metadata !DIExpression()), !dbg !6835
  call void @llvm.dbg.declare(metadata %struct.MDeformVert** %dvert, metadata !6836, metadata !DIExpression()), !dbg !6837
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !6838
  %1 = bitcast i8* %0 to %struct.MDeformVert*, !dbg !6838
  store %struct.MDeformVert* %1, %struct.MDeformVert** %dvert, align 8, !dbg !6837
  call void @llvm.dbg.declare(metadata %struct.MDeformWeight_Link** %dest_dwlink, metadata !6839, metadata !DIExpression()), !dbg !6845
  store %struct.MDeformWeight_Link* null, %struct.MDeformWeight_Link** %dest_dwlink, align 8, !dbg !6845
  call void @llvm.dbg.declare(metadata %struct.MDeformWeight_Link** %node, metadata !6846, metadata !DIExpression()), !dbg !6847
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6848, metadata !DIExpression()), !dbg !6849
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6850, metadata !DIExpression()), !dbg !6851
  call void @llvm.dbg.declare(metadata i32* %totweight, metadata !6852, metadata !DIExpression()), !dbg !6853
  %2 = load i32, i32* %count.addr, align 4, !dbg !6854
  %cmp = icmp sle i32 %2, 0, !dbg !6856
  br i1 %cmp, label %if.then, label %if.end, !dbg !6857

if.then:                                          ; preds = %entry
  br label %if.end70, !dbg !6858

if.end:                                           ; preds = %entry
  store i32 0, i32* %totweight, align 4, !dbg !6859
  store i32 0, i32* %i, align 4, !dbg !6860
  br label %for.cond, !dbg !6862

for.cond:                                         ; preds = %for.inc36, %if.end
  %3 = load i32, i32* %i, align 4, !dbg !6863
  %4 = load i32, i32* %count.addr, align 4, !dbg !6865
  %cmp1 = icmp slt i32 %3, %4, !dbg !6866
  br i1 %cmp1, label %for.body, label %for.end38, !dbg !6867

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.MDeformVert** %source, metadata !6868, metadata !DIExpression()), !dbg !6870
  %5 = load i8**, i8*** %sources.addr, align 8, !dbg !6871
  %6 = load i32, i32* %i, align 4, !dbg !6872
  %idxprom = sext i32 %6 to i64, !dbg !6871
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 %idxprom, !dbg !6871
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !6871
  %8 = bitcast i8* %7 to %struct.MDeformVert*, !dbg !6871
  store %struct.MDeformVert* %8, %struct.MDeformVert** %source, align 8, !dbg !6870
  call void @llvm.dbg.declare(metadata float* %interp_weight, metadata !6873, metadata !DIExpression()), !dbg !6874
  %9 = load float*, float** %weights.addr, align 8, !dbg !6875
  %tobool = icmp ne float* %9, null, !dbg !6875
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6875

cond.true:                                        ; preds = %for.body
  %10 = load float*, float** %weights.addr, align 8, !dbg !6876
  %11 = load i32, i32* %i, align 4, !dbg !6877
  %idxprom2 = sext i32 %11 to i64, !dbg !6876
  %arrayidx3 = getelementptr inbounds float, float* %10, i64 %idxprom2, !dbg !6876
  %12 = load float, float* %arrayidx3, align 4, !dbg !6876
  br label %cond.end, !dbg !6875

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !6875

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %12, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !6875
  store float %cond, float* %interp_weight, align 4, !dbg !6874
  store i32 0, i32* %j, align 4, !dbg !6878
  br label %for.cond4, !dbg !6880

for.cond4:                                        ; preds = %for.inc33, %cond.end
  %13 = load i32, i32* %j, align 4, !dbg !6881
  %14 = load %struct.MDeformVert*, %struct.MDeformVert** %source, align 8, !dbg !6883
  %totweight5 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %14, i32 0, i32 1, !dbg !6884
  %15 = load i32, i32* %totweight5, align 8, !dbg !6884
  %cmp6 = icmp slt i32 %13, %15, !dbg !6885
  br i1 %cmp6, label %for.body7, label %for.end35, !dbg !6886

for.body7:                                        ; preds = %for.cond4
  call void @llvm.dbg.declare(metadata %struct.MDeformWeight** %dw, metadata !6887, metadata !DIExpression()), !dbg !6889
  %16 = load %struct.MDeformVert*, %struct.MDeformVert** %source, align 8, !dbg !6890
  %dw8 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %16, i32 0, i32 0, !dbg !6891
  %17 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw8, align 8, !dbg !6891
  %18 = load i32, i32* %j, align 4, !dbg !6892
  %idxprom9 = sext i32 %18 to i64, !dbg !6890
  %arrayidx10 = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %17, i64 %idxprom9, !dbg !6890
  store %struct.MDeformWeight* %arrayidx10, %struct.MDeformWeight** %dw, align 8, !dbg !6889
  call void @llvm.dbg.declare(metadata float* %weight, metadata !6893, metadata !DIExpression()), !dbg !6894
  %19 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw, align 8, !dbg !6895
  %weight11 = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %19, i32 0, i32 1, !dbg !6896
  %20 = load float, float* %weight11, align 4, !dbg !6896
  %21 = load float, float* %interp_weight, align 4, !dbg !6897
  %mul = fmul float %20, %21, !dbg !6898
  store float %mul, float* %weight, align 4, !dbg !6894
  %22 = load float, float* %weight, align 4, !dbg !6899
  %cmp12 = fcmp oeq float %22, 0.000000e+00, !dbg !6901
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !6902

if.then13:                                        ; preds = %for.body7
  br label %for.inc33, !dbg !6903

if.end14:                                         ; preds = %for.body7
  %23 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %dest_dwlink, align 8, !dbg !6904
  store %struct.MDeformWeight_Link* %23, %struct.MDeformWeight_Link** %node, align 8, !dbg !6906
  br label %for.cond15, !dbg !6907

for.cond15:                                       ; preds = %for.inc, %if.end14
  %24 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %node, align 8, !dbg !6908
  %tobool16 = icmp ne %struct.MDeformWeight_Link* %24, null, !dbg !6910
  br i1 %tobool16, label %for.body17, label %for.end, !dbg !6910

for.body17:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata %struct.MDeformWeight** %tmp_dw, metadata !6911, metadata !DIExpression()), !dbg !6913
  %25 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %node, align 8, !dbg !6914
  %dw18 = getelementptr inbounds %struct.MDeformWeight_Link, %struct.MDeformWeight_Link* %25, i32 0, i32 1, !dbg !6915
  store %struct.MDeformWeight* %dw18, %struct.MDeformWeight** %tmp_dw, align 8, !dbg !6913
  %26 = load %struct.MDeformWeight*, %struct.MDeformWeight** %tmp_dw, align 8, !dbg !6916
  %def_nr = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %26, i32 0, i32 0, !dbg !6918
  %27 = load i32, i32* %def_nr, align 4, !dbg !6918
  %28 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw, align 8, !dbg !6919
  %def_nr19 = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %28, i32 0, i32 0, !dbg !6920
  %29 = load i32, i32* %def_nr19, align 4, !dbg !6920
  %cmp20 = icmp eq i32 %27, %29, !dbg !6921
  br i1 %cmp20, label %if.then21, label %if.end23, !dbg !6922

if.then21:                                        ; preds = %for.body17
  %30 = load float, float* %weight, align 4, !dbg !6923
  %31 = load %struct.MDeformWeight*, %struct.MDeformWeight** %tmp_dw, align 8, !dbg !6925
  %weight22 = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %31, i32 0, i32 1, !dbg !6926
  %32 = load float, float* %weight22, align 4, !dbg !6927
  %add = fadd float %32, %30, !dbg !6927
  store float %add, float* %weight22, align 4, !dbg !6927
  br label %for.end, !dbg !6928

if.end23:                                         ; preds = %for.body17
  br label %for.inc, !dbg !6929

for.inc:                                          ; preds = %if.end23
  %33 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %node, align 8, !dbg !6930
  %next = getelementptr inbounds %struct.MDeformWeight_Link, %struct.MDeformWeight_Link* %33, i32 0, i32 0, !dbg !6931
  %34 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %next, align 8, !dbg !6931
  store %struct.MDeformWeight_Link* %34, %struct.MDeformWeight_Link** %node, align 8, !dbg !6932
  br label %for.cond15, !dbg !6933, !llvm.loop !6934

for.end:                                          ; preds = %if.then21, %for.cond15
  %35 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %node, align 8, !dbg !6936
  %tobool24 = icmp ne %struct.MDeformWeight_Link* %35, null, !dbg !6936
  br i1 %tobool24, label %if.end32, label %if.then25, !dbg !6938

if.then25:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.MDeformWeight_Link** %tmp_dwlink, metadata !6939, metadata !DIExpression()), !dbg !6941
  %36 = alloca i8, i64 16, align 16, !dbg !6942
  %37 = bitcast i8* %36 to %struct.MDeformWeight_Link*, !dbg !6942
  store %struct.MDeformWeight_Link* %37, %struct.MDeformWeight_Link** %tmp_dwlink, align 8, !dbg !6941
  %38 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw, align 8, !dbg !6943
  %def_nr26 = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %38, i32 0, i32 0, !dbg !6944
  %39 = load i32, i32* %def_nr26, align 4, !dbg !6944
  %40 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %tmp_dwlink, align 8, !dbg !6945
  %dw27 = getelementptr inbounds %struct.MDeformWeight_Link, %struct.MDeformWeight_Link* %40, i32 0, i32 1, !dbg !6946
  %def_nr28 = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %dw27, i32 0, i32 0, !dbg !6947
  store i32 %39, i32* %def_nr28, align 8, !dbg !6948
  %41 = load float, float* %weight, align 4, !dbg !6949
  %42 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %tmp_dwlink, align 8, !dbg !6950
  %dw29 = getelementptr inbounds %struct.MDeformWeight_Link, %struct.MDeformWeight_Link* %42, i32 0, i32 1, !dbg !6951
  %weight30 = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %dw29, i32 0, i32 1, !dbg !6952
  store float %41, float* %weight30, align 4, !dbg !6953
  %43 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %dest_dwlink, align 8, !dbg !6954
  %44 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %tmp_dwlink, align 8, !dbg !6955
  %next31 = getelementptr inbounds %struct.MDeformWeight_Link, %struct.MDeformWeight_Link* %44, i32 0, i32 0, !dbg !6956
  store %struct.MDeformWeight_Link* %43, %struct.MDeformWeight_Link** %next31, align 8, !dbg !6957
  %45 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %tmp_dwlink, align 8, !dbg !6958
  store %struct.MDeformWeight_Link* %45, %struct.MDeformWeight_Link** %dest_dwlink, align 8, !dbg !6959
  %46 = load i32, i32* %totweight, align 4, !dbg !6960
  %inc = add nsw i32 %46, 1, !dbg !6960
  store i32 %inc, i32* %totweight, align 4, !dbg !6960
  br label %if.end32, !dbg !6961

if.end32:                                         ; preds = %if.then25, %for.end
  br label %for.inc33, !dbg !6962

for.inc33:                                        ; preds = %if.end32, %if.then13
  %47 = load i32, i32* %j, align 4, !dbg !6963
  %inc34 = add nsw i32 %47, 1, !dbg !6963
  store i32 %inc34, i32* %j, align 4, !dbg !6963
  br label %for.cond4, !dbg !6964, !llvm.loop !6965

for.end35:                                        ; preds = %for.cond4
  br label %for.inc36, !dbg !6967

for.inc36:                                        ; preds = %for.end35
  %48 = load i32, i32* %i, align 4, !dbg !6968
  %inc37 = add nsw i32 %48, 1, !dbg !6968
  store i32 %inc37, i32* %i, align 4, !dbg !6968
  br label %for.cond, !dbg !6969, !llvm.loop !6970

for.end38:                                        ; preds = %for.cond
  %49 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6972
  %dw39 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %49, i32 0, i32 0, !dbg !6974
  %50 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw39, align 8, !dbg !6974
  %tobool40 = icmp ne %struct.MDeformWeight* %50, null, !dbg !6972
  br i1 %tobool40, label %land.lhs.true, label %if.else, !dbg !6975

land.lhs.true:                                    ; preds = %for.end38
  %51 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6976
  %totweight41 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %51, i32 0, i32 1, !dbg !6977
  %52 = load i32, i32* %totweight41, align 8, !dbg !6977
  %53 = load i32, i32* %totweight, align 4, !dbg !6978
  %cmp42 = icmp eq i32 %52, %53, !dbg !6979
  br i1 %cmp42, label %if.then43, label %if.else, !dbg !6980

if.then43:                                        ; preds = %land.lhs.true
  br label %if.end54, !dbg !6981

if.else:                                          ; preds = %land.lhs.true, %for.end38
  %54 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6983
  %dw44 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %54, i32 0, i32 0, !dbg !6986
  %55 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw44, align 8, !dbg !6986
  %tobool45 = icmp ne %struct.MDeformWeight* %55, null, !dbg !6983
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !6987

if.then46:                                        ; preds = %if.else
  %56 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !6988
  %57 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !6990
  %dw47 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %57, i32 0, i32 0, !dbg !6991
  %58 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw47, align 8, !dbg !6991
  %59 = bitcast %struct.MDeformWeight* %58 to i8*, !dbg !6990
  call void %56(i8* %59), !dbg !6988
  br label %if.end48, !dbg !6992

if.end48:                                         ; preds = %if.then46, %if.else
  %60 = load i32, i32* %totweight, align 4, !dbg !6993
  %tobool49 = icmp ne i32 %60, 0, !dbg !6993
  br i1 %tobool49, label %if.then50, label %if.end53, !dbg !6995

if.then50:                                        ; preds = %if.end48
  %61 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !6996
  %62 = load i32, i32* %totweight, align 4, !dbg !6998
  %conv = sext i32 %62 to i64, !dbg !6998
  %mul51 = mul i64 8, %conv, !dbg !6999
  %call = call i8* %61(i64 %mul51, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.layerInterp_mdeformvert, i64 0, i64 0)), !dbg !6996
  %63 = bitcast i8* %call to %struct.MDeformWeight*, !dbg !6996
  %64 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !7000
  %dw52 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %64, i32 0, i32 0, !dbg !7001
  store %struct.MDeformWeight* %63, %struct.MDeformWeight** %dw52, align 8, !dbg !7002
  br label %if.end53, !dbg !7003

if.end53:                                         ; preds = %if.then50, %if.end48
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then43
  %65 = load i32, i32* %totweight, align 4, !dbg !7004
  %tobool55 = icmp ne i32 %65, 0, !dbg !7004
  br i1 %tobool55, label %if.then56, label %if.else69, !dbg !7006

if.then56:                                        ; preds = %if.end54
  %66 = load i32, i32* %totweight, align 4, !dbg !7007
  %67 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !7009
  %totweight57 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %67, i32 0, i32 1, !dbg !7010
  store i32 %66, i32* %totweight57, align 8, !dbg !7011
  store i32 0, i32* %i, align 4, !dbg !7012
  %68 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %dest_dwlink, align 8, !dbg !7014
  store %struct.MDeformWeight_Link* %68, %struct.MDeformWeight_Link** %node, align 8, !dbg !7015
  br label %for.cond58, !dbg !7016

for.cond58:                                       ; preds = %for.inc65, %if.then56
  %69 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %node, align 8, !dbg !7017
  %tobool59 = icmp ne %struct.MDeformWeight_Link* %69, null, !dbg !7019
  br i1 %tobool59, label %for.body60, label %for.end68, !dbg !7019

for.body60:                                       ; preds = %for.cond58
  %70 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !7020
  %dw61 = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %70, i32 0, i32 0, !dbg !7022
  %71 = load %struct.MDeformWeight*, %struct.MDeformWeight** %dw61, align 8, !dbg !7022
  %72 = load i32, i32* %i, align 4, !dbg !7023
  %idxprom62 = sext i32 %72 to i64, !dbg !7020
  %arrayidx63 = getelementptr inbounds %struct.MDeformWeight, %struct.MDeformWeight* %71, i64 %idxprom62, !dbg !7020
  %73 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %node, align 8, !dbg !7024
  %dw64 = getelementptr inbounds %struct.MDeformWeight_Link, %struct.MDeformWeight_Link* %73, i32 0, i32 1, !dbg !7025
  %74 = bitcast %struct.MDeformWeight* %arrayidx63 to i8*, !dbg !7025
  %75 = bitcast %struct.MDeformWeight* %dw64 to i8*, !dbg !7025
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 8 %75, i64 8, i1 false), !dbg !7025
  br label %for.inc65, !dbg !7026

for.inc65:                                        ; preds = %for.body60
  %76 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %node, align 8, !dbg !7027
  %next66 = getelementptr inbounds %struct.MDeformWeight_Link, %struct.MDeformWeight_Link* %76, i32 0, i32 0, !dbg !7028
  %77 = load %struct.MDeformWeight_Link*, %struct.MDeformWeight_Link** %next66, align 8, !dbg !7028
  store %struct.MDeformWeight_Link* %77, %struct.MDeformWeight_Link** %node, align 8, !dbg !7029
  %78 = load i32, i32* %i, align 4, !dbg !7030
  %inc67 = add nsw i32 %78, 1, !dbg !7030
  store i32 %inc67, i32* %i, align 4, !dbg !7030
  br label %for.cond58, !dbg !7031, !llvm.loop !7032

for.end68:                                        ; preds = %for.cond58
  br label %if.end70, !dbg !7034

if.else69:                                        ; preds = %if.end54
  %79 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !7035
  %80 = bitcast %struct.MDeformVert* %79 to i8*, !dbg !7037
  call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 16, i1 false), !dbg !7037
  br label %if.end70

if.end70:                                         ; preds = %if.then, %if.else69, %for.end68
  ret void, !dbg !7038
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_tface(i8* %source, i8* %dest, i32 %count) #0 !dbg !7039 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %source_tf = alloca %struct.MTFace*, align 8
  %dest_tf = alloca %struct.MTFace*, align 8
  %i = alloca i32, align 4
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !7040, metadata !DIExpression()), !dbg !7041
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7042, metadata !DIExpression()), !dbg !7043
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7044, metadata !DIExpression()), !dbg !7045
  call void @llvm.dbg.declare(metadata %struct.MTFace** %source_tf, metadata !7046, metadata !DIExpression()), !dbg !7047
  %0 = load i8*, i8** %source.addr, align 8, !dbg !7048
  %1 = bitcast i8* %0 to %struct.MTFace*, !dbg !7049
  store %struct.MTFace* %1, %struct.MTFace** %source_tf, align 8, !dbg !7047
  call void @llvm.dbg.declare(metadata %struct.MTFace** %dest_tf, metadata !7050, metadata !DIExpression()), !dbg !7051
  %2 = load i8*, i8** %dest.addr, align 8, !dbg !7052
  %3 = bitcast i8* %2 to %struct.MTFace*, !dbg !7053
  store %struct.MTFace* %3, %struct.MTFace** %dest_tf, align 8, !dbg !7051
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7054, metadata !DIExpression()), !dbg !7055
  store i32 0, i32* %i, align 4, !dbg !7056
  br label %for.cond, !dbg !7058

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !7059
  %5 = load i32, i32* %count.addr, align 4, !dbg !7061
  %cmp = icmp slt i32 %4, %5, !dbg !7062
  br i1 %cmp, label %for.body, label %for.end, !dbg !7063

for.body:                                         ; preds = %for.cond
  %6 = load %struct.MTFace*, %struct.MTFace** %dest_tf, align 8, !dbg !7064
  %7 = load i32, i32* %i, align 4, !dbg !7065
  %idxprom = sext i32 %7 to i64, !dbg !7064
  %arrayidx = getelementptr inbounds %struct.MTFace, %struct.MTFace* %6, i64 %idxprom, !dbg !7064
  %8 = load %struct.MTFace*, %struct.MTFace** %source_tf, align 8, !dbg !7066
  %9 = load i32, i32* %i, align 4, !dbg !7067
  %idxprom1 = sext i32 %9 to i64, !dbg !7066
  %arrayidx2 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %8, i64 %idxprom1, !dbg !7066
  %10 = bitcast %struct.MTFace* %arrayidx to i8*, !dbg !7066
  %11 = bitcast %struct.MTFace* %arrayidx2 to i8*, !dbg !7066
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 48, i1 false), !dbg !7066
  br label %for.inc, !dbg !7064

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !7068
  %inc = add nsw i32 %12, 1, !dbg !7068
  store i32 %inc, i32* %i, align 4, !dbg !7068
  br label %for.cond, !dbg !7069, !llvm.loop !7070

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7072
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_tface(i8** %sources, float* %weights, float* %sub_weights, i32 %count, i8* %dest) #0 !dbg !7073 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %tf = alloca %struct.MTFace*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %uv = alloca [4 x [2 x float]], align 16
  %sub_weight = alloca float*, align 8
  %weight = alloca float, align 4
  %src = alloca %struct.MTFace*, align 8
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !7074, metadata !DIExpression()), !dbg !7075
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !7076, metadata !DIExpression()), !dbg !7077
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !7078, metadata !DIExpression()), !dbg !7079
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7080, metadata !DIExpression()), !dbg !7081
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7082, metadata !DIExpression()), !dbg !7083
  call void @llvm.dbg.declare(metadata %struct.MTFace** %tf, metadata !7084, metadata !DIExpression()), !dbg !7085
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !7086
  %1 = bitcast i8* %0 to %struct.MTFace*, !dbg !7086
  store %struct.MTFace* %1, %struct.MTFace** %tf, align 8, !dbg !7085
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7087, metadata !DIExpression()), !dbg !7088
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7089, metadata !DIExpression()), !dbg !7090
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7091, metadata !DIExpression()), !dbg !7092
  call void @llvm.dbg.declare(metadata [4 x [2 x float]]* %uv, metadata !7093, metadata !DIExpression()), !dbg !7094
  %2 = bitcast [4 x [2 x float]]* %uv to i8*, !dbg !7094
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 32, i1 false), !dbg !7094
  call void @llvm.dbg.declare(metadata float** %sub_weight, metadata !7095, metadata !DIExpression()), !dbg !7096
  %3 = load i32, i32* %count.addr, align 4, !dbg !7097
  %cmp = icmp sle i32 %3, 0, !dbg !7099
  br i1 %cmp, label %if.then, label %if.end, !dbg !7100

if.then:                                          ; preds = %entry
  br label %return, !dbg !7101

if.end:                                           ; preds = %entry
  %4 = load float*, float** %sub_weights.addr, align 8, !dbg !7102
  store float* %4, float** %sub_weight, align 8, !dbg !7103
  store i32 0, i32* %i, align 4, !dbg !7104
  br label %for.cond, !dbg !7106

for.cond:                                         ; preds = %for.inc29, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !7107
  %6 = load i32, i32* %count.addr, align 4, !dbg !7109
  %cmp1 = icmp slt i32 %5, %6, !dbg !7110
  br i1 %cmp1, label %for.body, label %for.end31, !dbg !7111

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %weight, metadata !7112, metadata !DIExpression()), !dbg !7114
  %7 = load float*, float** %weights.addr, align 8, !dbg !7115
  %tobool = icmp ne float* %7, null, !dbg !7115
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7115

cond.true:                                        ; preds = %for.body
  %8 = load float*, float** %weights.addr, align 8, !dbg !7116
  %9 = load i32, i32* %i, align 4, !dbg !7117
  %idxprom = sext i32 %9 to i64, !dbg !7116
  %arrayidx = getelementptr inbounds float, float* %8, i64 %idxprom, !dbg !7116
  %10 = load float, float* %arrayidx, align 4, !dbg !7116
  br label %cond.end, !dbg !7115

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %10, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !7115
  store float %cond, float* %weight, align 4, !dbg !7114
  call void @llvm.dbg.declare(metadata %struct.MTFace** %src, metadata !7118, metadata !DIExpression()), !dbg !7119
  %11 = load i8**, i8*** %sources.addr, align 8, !dbg !7120
  %12 = load i32, i32* %i, align 4, !dbg !7121
  %idxprom2 = sext i32 %12 to i64, !dbg !7120
  %arrayidx3 = getelementptr inbounds i8*, i8** %11, i64 %idxprom2, !dbg !7120
  %13 = load i8*, i8** %arrayidx3, align 8, !dbg !7120
  %14 = bitcast i8* %13 to %struct.MTFace*, !dbg !7120
  store %struct.MTFace* %14, %struct.MTFace** %src, align 8, !dbg !7119
  store i32 0, i32* %j, align 4, !dbg !7122
  br label %for.cond4, !dbg !7124

for.cond4:                                        ; preds = %for.inc26, %cond.end
  %15 = load i32, i32* %j, align 4, !dbg !7125
  %cmp5 = icmp slt i32 %15, 4, !dbg !7127
  br i1 %cmp5, label %for.body6, label %for.end28, !dbg !7128

for.body6:                                        ; preds = %for.cond4
  %16 = load float*, float** %sub_weights.addr, align 8, !dbg !7129
  %tobool7 = icmp ne float* %16, null, !dbg !7129
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !7132

if.then8:                                         ; preds = %for.body6
  store i32 0, i32* %k, align 4, !dbg !7133
  br label %for.cond9, !dbg !7136

for.cond9:                                        ; preds = %for.inc, %if.then8
  %17 = load i32, i32* %k, align 4, !dbg !7137
  %cmp10 = icmp slt i32 %17, 4, !dbg !7139
  br i1 %cmp10, label %for.body11, label %for.end, !dbg !7140

for.body11:                                       ; preds = %for.cond9
  %18 = load i32, i32* %j, align 4, !dbg !7141
  %idxprom12 = sext i32 %18 to i64, !dbg !7143
  %arrayidx13 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 %idxprom12, !dbg !7143
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %arrayidx13, i64 0, i64 0, !dbg !7143
  %19 = load %struct.MTFace*, %struct.MTFace** %src, align 8, !dbg !7144
  %uv14 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %19, i32 0, i32 0, !dbg !7145
  %20 = load i32, i32* %k, align 4, !dbg !7146
  %idxprom15 = sext i32 %20 to i64, !dbg !7144
  %arrayidx16 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv14, i64 0, i64 %idxprom15, !dbg !7144
  %arraydecay17 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx16, i64 0, i64 0, !dbg !7144
  %21 = load float*, float** %sub_weight, align 8, !dbg !7147
  %22 = load float, float* %21, align 4, !dbg !7148
  %23 = load float, float* %weight, align 4, !dbg !7149
  %mul = fmul float %22, %23, !dbg !7150
  call void @madd_v2_v2fl(float* %arraydecay, float* %arraydecay17, float %mul), !dbg !7151
  br label %for.inc, !dbg !7152

for.inc:                                          ; preds = %for.body11
  %24 = load i32, i32* %k, align 4, !dbg !7153
  %inc = add nsw i32 %24, 1, !dbg !7153
  store i32 %inc, i32* %k, align 4, !dbg !7153
  %25 = load float*, float** %sub_weight, align 8, !dbg !7154
  %incdec.ptr = getelementptr inbounds float, float* %25, i32 1, !dbg !7154
  store float* %incdec.ptr, float** %sub_weight, align 8, !dbg !7154
  br label %for.cond9, !dbg !7155, !llvm.loop !7156

for.end:                                          ; preds = %for.cond9
  br label %if.end25, !dbg !7158

if.else:                                          ; preds = %for.body6
  %26 = load i32, i32* %j, align 4, !dbg !7159
  %idxprom18 = sext i32 %26 to i64, !dbg !7161
  %arrayidx19 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 %idxprom18, !dbg !7161
  %arraydecay20 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx19, i64 0, i64 0, !dbg !7161
  %27 = load %struct.MTFace*, %struct.MTFace** %src, align 8, !dbg !7162
  %uv21 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %27, i32 0, i32 0, !dbg !7163
  %28 = load i32, i32* %j, align 4, !dbg !7164
  %idxprom22 = sext i32 %28 to i64, !dbg !7162
  %arrayidx23 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv21, i64 0, i64 %idxprom22, !dbg !7162
  %arraydecay24 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx23, i64 0, i64 0, !dbg !7162
  %29 = load float, float* %weight, align 4, !dbg !7165
  call void @madd_v2_v2fl(float* %arraydecay20, float* %arraydecay24, float %29), !dbg !7166
  br label %if.end25

if.end25:                                         ; preds = %if.else, %for.end
  br label %for.inc26, !dbg !7167

for.inc26:                                        ; preds = %if.end25
  %30 = load i32, i32* %j, align 4, !dbg !7168
  %inc27 = add nsw i32 %30, 1, !dbg !7168
  store i32 %inc27, i32* %j, align 4, !dbg !7168
  br label %for.cond4, !dbg !7169, !llvm.loop !7170

for.end28:                                        ; preds = %for.cond4
  br label %for.inc29, !dbg !7172

for.inc29:                                        ; preds = %for.end28
  %31 = load i32, i32* %i, align 4, !dbg !7173
  %inc30 = add nsw i32 %31, 1, !dbg !7173
  store i32 %inc30, i32* %i, align 4, !dbg !7173
  br label %for.cond, !dbg !7174, !llvm.loop !7175

for.end31:                                        ; preds = %for.cond
  %32 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7177
  %33 = load i8**, i8*** %sources.addr, align 8, !dbg !7178
  %34 = load i8*, i8** %33, align 8, !dbg !7179
  %35 = bitcast i8* %34 to %struct.MTFace*, !dbg !7180
  %36 = bitcast %struct.MTFace* %32 to i8*, !dbg !7181
  %37 = bitcast %struct.MTFace* %35 to i8*, !dbg !7181
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 48, i1 false), !dbg !7181
  %38 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7182
  %uv32 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %38, i32 0, i32 0, !dbg !7183
  %arraydecay33 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv32, i64 0, i64 0, !dbg !7184
  %39 = bitcast [2 x float]* %arraydecay33 to i8*, !dbg !7184
  %arraydecay34 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 0, !dbg !7184
  %40 = bitcast [2 x float]* %arraydecay34 to i8*, !dbg !7184
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 16 %40, i64 32, i1 false), !dbg !7184
  br label %return, !dbg !7185

return:                                           ; preds = %for.end31, %if.then
  ret void, !dbg !7185
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerSwap_tface(i8* %data, i32* %corner_indices) #0 !dbg !406 {
entry:
  %data.addr = alloca i8*, align 8
  %corner_indices.addr = alloca i32*, align 8
  %tf = alloca %struct.MTFace*, align 8
  %uv = alloca [4 x [2 x float]], align 16
  %unwrap = alloca i16, align 2
  %flag = alloca i8, align 1
  %j = alloca i32, align 4
  %source_index = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7186, metadata !DIExpression()), !dbg !7187
  store i32* %corner_indices, i32** %corner_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %corner_indices.addr, metadata !7188, metadata !DIExpression()), !dbg !7189
  call void @llvm.dbg.declare(metadata %struct.MTFace** %tf, metadata !7190, metadata !DIExpression()), !dbg !7191
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7192
  %1 = bitcast i8* %0 to %struct.MTFace*, !dbg !7192
  store %struct.MTFace* %1, %struct.MTFace** %tf, align 8, !dbg !7191
  call void @llvm.dbg.declare(metadata [4 x [2 x float]]* %uv, metadata !7193, metadata !DIExpression()), !dbg !7194
  call void @llvm.dbg.declare(metadata i16* %unwrap, metadata !7195, metadata !DIExpression()), !dbg !7196
  %2 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7197
  %unwrap1 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %2, i32 0, i32 6, !dbg !7198
  %3 = load i16, i16* %unwrap1, align 2, !dbg !7198
  %conv = sext i16 %3 to i32, !dbg !7197
  %and = and i32 %conv, -241, !dbg !7199
  %conv2 = trunc i32 %and to i16, !dbg !7197
  store i16 %conv2, i16* %unwrap, align 2, !dbg !7196
  call void @llvm.dbg.declare(metadata i8* %flag, metadata !7200, metadata !DIExpression()), !dbg !7201
  %4 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7202
  %flag3 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %4, i32 0, i32 2, !dbg !7203
  %5 = load i8, i8* %flag3, align 8, !dbg !7203
  %conv4 = zext i8 %5 to i32, !dbg !7202
  %and5 = and i32 %conv4, -61, !dbg !7204
  %conv6 = trunc i32 %and5 to i8, !dbg !7202
  store i8 %conv6, i8* %flag, align 1, !dbg !7201
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7205, metadata !DIExpression()), !dbg !7206
  store i32 0, i32* %j, align 4, !dbg !7207
  br label %for.cond, !dbg !7209

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %j, align 4, !dbg !7210
  %cmp = icmp slt i32 %6, 4, !dbg !7212
  br i1 %cmp, label %for.body, label %for.end, !dbg !7213

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %source_index, metadata !7214, metadata !DIExpression()), !dbg !7216
  %7 = load i32*, i32** %corner_indices.addr, align 8, !dbg !7217
  %8 = load i32, i32* %j, align 4, !dbg !7218
  %idxprom = sext i32 %8 to i64, !dbg !7217
  %arrayidx = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !7217
  %9 = load i32, i32* %arrayidx, align 4, !dbg !7217
  store i32 %9, i32* %source_index, align 4, !dbg !7216
  %10 = load i32, i32* %j, align 4, !dbg !7219
  %idxprom8 = sext i32 %10 to i64, !dbg !7220
  %arrayidx9 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 %idxprom8, !dbg !7220
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %arrayidx9, i64 0, i64 0, !dbg !7220
  %11 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7221
  %uv10 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %11, i32 0, i32 0, !dbg !7222
  %12 = load i32, i32* %source_index, align 4, !dbg !7223
  %idxprom11 = sext i32 %12 to i64, !dbg !7221
  %arrayidx12 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv10, i64 0, i64 %idxprom11, !dbg !7221
  %arraydecay13 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx12, i64 0, i64 0, !dbg !7221
  call void @copy_v2_v2(float* %arraydecay, float* %arraydecay13), !dbg !7224
  %13 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7225
  %unwrap14 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %13, i32 0, i32 6, !dbg !7227
  %14 = load i16, i16* %unwrap14, align 2, !dbg !7227
  %conv15 = sext i16 %14 to i32, !dbg !7225
  %15 = load i32, i32* %source_index, align 4, !dbg !7228
  %idxprom16 = sext i32 %15 to i64, !dbg !7229
  %arrayidx17 = getelementptr inbounds [4 x i16], [4 x i16]* @layerSwap_tface.pin_flags, i64 0, i64 %idxprom16, !dbg !7229
  %16 = load i16, i16* %arrayidx17, align 2, !dbg !7229
  %conv18 = sext i16 %16 to i32, !dbg !7229
  %and19 = and i32 %conv15, %conv18, !dbg !7230
  %tobool = icmp ne i32 %and19, 0, !dbg !7230
  br i1 %tobool, label %if.then, label %if.end, !dbg !7231

if.then:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4, !dbg !7232
  %idxprom20 = sext i32 %17 to i64, !dbg !7234
  %arrayidx21 = getelementptr inbounds [4 x i16], [4 x i16]* @layerSwap_tface.pin_flags, i64 0, i64 %idxprom20, !dbg !7234
  %18 = load i16, i16* %arrayidx21, align 2, !dbg !7234
  %conv22 = sext i16 %18 to i32, !dbg !7234
  %19 = load i16, i16* %unwrap, align 2, !dbg !7235
  %conv23 = sext i16 %19 to i32, !dbg !7235
  %or = or i32 %conv23, %conv22, !dbg !7235
  %conv24 = trunc i32 %or to i16, !dbg !7235
  store i16 %conv24, i16* %unwrap, align 2, !dbg !7235
  br label %if.end, !dbg !7236

if.end:                                           ; preds = %if.then, %for.body
  %20 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7237
  %flag25 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %20, i32 0, i32 2, !dbg !7239
  %21 = load i8, i8* %flag25, align 8, !dbg !7239
  %conv26 = zext i8 %21 to i32, !dbg !7237
  %22 = load i32, i32* %source_index, align 4, !dbg !7240
  %idxprom27 = sext i32 %22 to i64, !dbg !7241
  %arrayidx28 = getelementptr inbounds [4 x i8], [4 x i8]* @layerSwap_tface.sel_flags, i64 0, i64 %idxprom27, !dbg !7241
  %23 = load i8, i8* %arrayidx28, align 1, !dbg !7241
  %conv29 = zext i8 %23 to i32, !dbg !7241
  %and30 = and i32 %conv26, %conv29, !dbg !7242
  %tobool31 = icmp ne i32 %and30, 0, !dbg !7242
  br i1 %tobool31, label %if.then32, label %if.end39, !dbg !7243

if.then32:                                        ; preds = %if.end
  %24 = load i32, i32* %j, align 4, !dbg !7244
  %idxprom33 = sext i32 %24 to i64, !dbg !7246
  %arrayidx34 = getelementptr inbounds [4 x i8], [4 x i8]* @layerSwap_tface.sel_flags, i64 0, i64 %idxprom33, !dbg !7246
  %25 = load i8, i8* %arrayidx34, align 1, !dbg !7246
  %conv35 = zext i8 %25 to i32, !dbg !7246
  %26 = load i8, i8* %flag, align 1, !dbg !7247
  %conv36 = zext i8 %26 to i32, !dbg !7247
  %or37 = or i32 %conv36, %conv35, !dbg !7247
  %conv38 = trunc i32 %or37 to i8, !dbg !7247
  store i8 %conv38, i8* %flag, align 1, !dbg !7247
  br label %if.end39, !dbg !7248

if.end39:                                         ; preds = %if.then32, %if.end
  br label %for.inc, !dbg !7249

for.inc:                                          ; preds = %if.end39
  %27 = load i32, i32* %j, align 4, !dbg !7250
  %inc = add nsw i32 %27, 1, !dbg !7250
  store i32 %inc, i32* %j, align 4, !dbg !7250
  br label %for.cond, !dbg !7251, !llvm.loop !7252

for.end:                                          ; preds = %for.cond
  %28 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7254
  %uv40 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %28, i32 0, i32 0, !dbg !7255
  %arraydecay41 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv40, i64 0, i64 0, !dbg !7256
  %29 = bitcast [2 x float]* %arraydecay41 to i8*, !dbg !7256
  %arraydecay42 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 0, !dbg !7256
  %30 = bitcast [2 x float]* %arraydecay42 to i8*, !dbg !7256
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 16 %30, i64 32, i1 false), !dbg !7256
  %31 = load i16, i16* %unwrap, align 2, !dbg !7257
  %32 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7258
  %unwrap43 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %32, i32 0, i32 6, !dbg !7259
  store i16 %31, i16* %unwrap43, align 2, !dbg !7260
  %33 = load i8, i8* %flag, align 1, !dbg !7261
  %34 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7262
  %flag44 = getelementptr inbounds %struct.MTFace, %struct.MTFace* %34, i32 0, i32 2, !dbg !7263
  store i8 %33, i8* %flag44, align 8, !dbg !7264
  ret void, !dbg !7265
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDefault_tface(i8* %data, i32 %count) #0 !dbg !416 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %tf = alloca %struct.MTFace*, align 8
  %i = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7266, metadata !DIExpression()), !dbg !7267
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7268, metadata !DIExpression()), !dbg !7269
  call void @llvm.dbg.declare(metadata %struct.MTFace** %tf, metadata !7270, metadata !DIExpression()), !dbg !7271
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7272
  %1 = bitcast i8* %0 to %struct.MTFace*, !dbg !7273
  store %struct.MTFace* %1, %struct.MTFace** %tf, align 8, !dbg !7271
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7274, metadata !DIExpression()), !dbg !7275
  store i32 0, i32* %i, align 4, !dbg !7276
  br label %for.cond, !dbg !7278

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !7279
  %3 = load i32, i32* %count.addr, align 4, !dbg !7281
  %cmp = icmp slt i32 %2, %3, !dbg !7282
  br i1 %cmp, label %for.body, label %for.end, !dbg !7283

for.body:                                         ; preds = %for.cond
  %4 = load %struct.MTFace*, %struct.MTFace** %tf, align 8, !dbg !7284
  %5 = load i32, i32* %i, align 4, !dbg !7285
  %idxprom = sext i32 %5 to i64, !dbg !7284
  %arrayidx = getelementptr inbounds %struct.MTFace, %struct.MTFace* %4, i64 %idxprom, !dbg !7284
  %6 = bitcast %struct.MTFace* %arrayidx to i8*, !dbg !7286
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 bitcast (%struct.MTFace* @layerDefault_tface.default_tf to i8*), i64 48, i1 false), !dbg !7286
  br label %for.inc, !dbg !7284

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !7287
  %inc = add nsw i32 %7, 1, !dbg !7287
  store i32 %inc, i32* %i, align 4, !dbg !7287
  br label %for.cond, !dbg !7288, !llvm.loop !7289

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7291
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @layerMaxNum_tface() #0 !dbg !7292 {
entry:
  ret i32 8, !dbg !7293
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_mcol(i8** %sources, float* %weights, float* %sub_weights, i32 %count, i8* %dest) #0 !dbg !7294 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %mc = alloca %struct.MCol*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %col = alloca [4 x %struct.anon.1], align 16
  %sub_weight = alloca float*, align 8
  %weight = alloca float, align 4
  %src = alloca %struct.MCol*, align 8
  %w = alloca float, align 4
  %src39 = alloca %struct.MCol*, align 8
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !7295, metadata !DIExpression()), !dbg !7296
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !7297, metadata !DIExpression()), !dbg !7298
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !7299, metadata !DIExpression()), !dbg !7300
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7303, metadata !DIExpression()), !dbg !7304
  call void @llvm.dbg.declare(metadata %struct.MCol** %mc, metadata !7305, metadata !DIExpression()), !dbg !7306
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !7307
  %1 = bitcast i8* %0 to %struct.MCol*, !dbg !7307
  store %struct.MCol* %1, %struct.MCol** %mc, align 8, !dbg !7306
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7308, metadata !DIExpression()), !dbg !7309
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7310, metadata !DIExpression()), !dbg !7311
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7312, metadata !DIExpression()), !dbg !7313
  call void @llvm.dbg.declare(metadata [4 x %struct.anon.1]* %col, metadata !7314, metadata !DIExpression()), !dbg !7322
  %2 = bitcast [4 x %struct.anon.1]* %col to i8*, !dbg !7322
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 64, i1 false), !dbg !7322
  call void @llvm.dbg.declare(metadata float** %sub_weight, metadata !7323, metadata !DIExpression()), !dbg !7324
  %3 = load i32, i32* %count.addr, align 4, !dbg !7325
  %cmp = icmp sle i32 %3, 0, !dbg !7327
  br i1 %cmp, label %if.then, label %if.end, !dbg !7328

if.then:                                          ; preds = %entry
  br label %for.end211, !dbg !7329

if.end:                                           ; preds = %entry
  %4 = load float*, float** %sub_weights.addr, align 8, !dbg !7330
  store float* %4, float** %sub_weight, align 8, !dbg !7331
  store i32 0, i32* %i, align 4, !dbg !7332
  br label %for.cond, !dbg !7334

for.cond:                                         ; preds = %for.inc86, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !7335
  %6 = load i32, i32* %count.addr, align 4, !dbg !7337
  %cmp1 = icmp slt i32 %5, %6, !dbg !7338
  br i1 %cmp1, label %for.body, label %for.end88, !dbg !7339

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %weight, metadata !7340, metadata !DIExpression()), !dbg !7342
  %7 = load float*, float** %weights.addr, align 8, !dbg !7343
  %tobool = icmp ne float* %7, null, !dbg !7343
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7343

cond.true:                                        ; preds = %for.body
  %8 = load float*, float** %weights.addr, align 8, !dbg !7344
  %9 = load i32, i32* %i, align 4, !dbg !7345
  %idxprom = sext i32 %9 to i64, !dbg !7344
  %arrayidx = getelementptr inbounds float, float* %8, i64 %idxprom, !dbg !7344
  %10 = load float, float* %arrayidx, align 4, !dbg !7344
  br label %cond.end, !dbg !7343

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7343

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %10, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !7343
  store float %cond, float* %weight, align 4, !dbg !7342
  store i32 0, i32* %j, align 4, !dbg !7346
  br label %for.cond2, !dbg !7348

for.cond2:                                        ; preds = %for.inc83, %cond.end
  %11 = load i32, i32* %j, align 4, !dbg !7349
  %cmp3 = icmp slt i32 %11, 4, !dbg !7351
  br i1 %cmp3, label %for.body4, label %for.end85, !dbg !7352

for.body4:                                        ; preds = %for.cond2
  %12 = load float*, float** %sub_weights.addr, align 8, !dbg !7353
  %tobool5 = icmp ne float* %12, null, !dbg !7353
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !7356

if.then6:                                         ; preds = %for.body4
  call void @llvm.dbg.declare(metadata %struct.MCol** %src, metadata !7357, metadata !DIExpression()), !dbg !7359
  %13 = load i8**, i8*** %sources.addr, align 8, !dbg !7360
  %14 = load i32, i32* %i, align 4, !dbg !7361
  %idxprom7 = sext i32 %14 to i64, !dbg !7360
  %arrayidx8 = getelementptr inbounds i8*, i8** %13, i64 %idxprom7, !dbg !7360
  %15 = load i8*, i8** %arrayidx8, align 8, !dbg !7360
  %16 = bitcast i8* %15 to %struct.MCol*, !dbg !7360
  store %struct.MCol* %16, %struct.MCol** %src, align 8, !dbg !7359
  store i32 0, i32* %k, align 4, !dbg !7362
  br label %for.cond9, !dbg !7364

for.cond9:                                        ; preds = %for.inc, %if.then6
  %17 = load i32, i32* %k, align 4, !dbg !7365
  %cmp10 = icmp slt i32 %17, 4, !dbg !7367
  br i1 %cmp10, label %for.body11, label %for.end, !dbg !7368

for.body11:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata float* %w, metadata !7369, metadata !DIExpression()), !dbg !7371
  %18 = load float*, float** %sub_weight, align 8, !dbg !7372
  %19 = load float, float* %18, align 4, !dbg !7373
  %20 = load float, float* %weight, align 4, !dbg !7374
  %mul = fmul float %19, %20, !dbg !7375
  store float %mul, float* %w, align 4, !dbg !7371
  %21 = load %struct.MCol*, %struct.MCol** %src, align 8, !dbg !7376
  %a = getelementptr inbounds %struct.MCol, %struct.MCol* %21, i32 0, i32 0, !dbg !7377
  %22 = load i8, i8* %a, align 1, !dbg !7377
  %conv = zext i8 %22 to i32, !dbg !7376
  %conv12 = sitofp i32 %conv to float, !dbg !7376
  %23 = load float, float* %w, align 4, !dbg !7378
  %mul13 = fmul float %conv12, %23, !dbg !7379
  %24 = load i32, i32* %j, align 4, !dbg !7380
  %idxprom14 = sext i32 %24 to i64, !dbg !7381
  %arrayidx15 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom14, !dbg !7381
  %a16 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx15, i32 0, i32 0, !dbg !7382
  %25 = load float, float* %a16, align 16, !dbg !7383
  %add = fadd float %25, %mul13, !dbg !7383
  store float %add, float* %a16, align 16, !dbg !7383
  %26 = load %struct.MCol*, %struct.MCol** %src, align 8, !dbg !7384
  %r = getelementptr inbounds %struct.MCol, %struct.MCol* %26, i32 0, i32 1, !dbg !7385
  %27 = load i8, i8* %r, align 1, !dbg !7385
  %conv17 = zext i8 %27 to i32, !dbg !7384
  %conv18 = sitofp i32 %conv17 to float, !dbg !7384
  %28 = load float, float* %w, align 4, !dbg !7386
  %mul19 = fmul float %conv18, %28, !dbg !7387
  %29 = load i32, i32* %j, align 4, !dbg !7388
  %idxprom20 = sext i32 %29 to i64, !dbg !7389
  %arrayidx21 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom20, !dbg !7389
  %r22 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx21, i32 0, i32 1, !dbg !7390
  %30 = load float, float* %r22, align 4, !dbg !7391
  %add23 = fadd float %30, %mul19, !dbg !7391
  store float %add23, float* %r22, align 4, !dbg !7391
  %31 = load %struct.MCol*, %struct.MCol** %src, align 8, !dbg !7392
  %g = getelementptr inbounds %struct.MCol, %struct.MCol* %31, i32 0, i32 2, !dbg !7393
  %32 = load i8, i8* %g, align 1, !dbg !7393
  %conv24 = zext i8 %32 to i32, !dbg !7392
  %conv25 = sitofp i32 %conv24 to float, !dbg !7392
  %33 = load float, float* %w, align 4, !dbg !7394
  %mul26 = fmul float %conv25, %33, !dbg !7395
  %34 = load i32, i32* %j, align 4, !dbg !7396
  %idxprom27 = sext i32 %34 to i64, !dbg !7397
  %arrayidx28 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom27, !dbg !7397
  %g29 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx28, i32 0, i32 2, !dbg !7398
  %35 = load float, float* %g29, align 8, !dbg !7399
  %add30 = fadd float %35, %mul26, !dbg !7399
  store float %add30, float* %g29, align 8, !dbg !7399
  %36 = load %struct.MCol*, %struct.MCol** %src, align 8, !dbg !7400
  %b = getelementptr inbounds %struct.MCol, %struct.MCol* %36, i32 0, i32 3, !dbg !7401
  %37 = load i8, i8* %b, align 1, !dbg !7401
  %conv31 = zext i8 %37 to i32, !dbg !7400
  %conv32 = sitofp i32 %conv31 to float, !dbg !7400
  %38 = load float, float* %w, align 4, !dbg !7402
  %mul33 = fmul float %conv32, %38, !dbg !7403
  %39 = load i32, i32* %j, align 4, !dbg !7404
  %idxprom34 = sext i32 %39 to i64, !dbg !7405
  %arrayidx35 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom34, !dbg !7405
  %b36 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx35, i32 0, i32 3, !dbg !7406
  %40 = load float, float* %b36, align 4, !dbg !7407
  %add37 = fadd float %40, %mul33, !dbg !7407
  store float %add37, float* %b36, align 4, !dbg !7407
  br label %for.inc, !dbg !7408

for.inc:                                          ; preds = %for.body11
  %41 = load i32, i32* %k, align 4, !dbg !7409
  %inc = add nsw i32 %41, 1, !dbg !7409
  store i32 %inc, i32* %k, align 4, !dbg !7409
  %42 = load float*, float** %sub_weight, align 8, !dbg !7410
  %incdec.ptr = getelementptr inbounds float, float* %42, i32 1, !dbg !7410
  store float* %incdec.ptr, float** %sub_weight, align 8, !dbg !7410
  %43 = load %struct.MCol*, %struct.MCol** %src, align 8, !dbg !7411
  %incdec.ptr38 = getelementptr inbounds %struct.MCol, %struct.MCol* %43, i32 1, !dbg !7411
  store %struct.MCol* %incdec.ptr38, %struct.MCol** %src, align 8, !dbg !7411
  br label %for.cond9, !dbg !7412, !llvm.loop !7413

for.end:                                          ; preds = %for.cond9
  br label %if.end82, !dbg !7415

if.else:                                          ; preds = %for.body4
  call void @llvm.dbg.declare(metadata %struct.MCol** %src39, metadata !7416, metadata !DIExpression()), !dbg !7418
  %44 = load i8**, i8*** %sources.addr, align 8, !dbg !7419
  %45 = load i32, i32* %i, align 4, !dbg !7420
  %idxprom40 = sext i32 %45 to i64, !dbg !7419
  %arrayidx41 = getelementptr inbounds i8*, i8** %44, i64 %idxprom40, !dbg !7419
  %46 = load i8*, i8** %arrayidx41, align 8, !dbg !7419
  %47 = bitcast i8* %46 to %struct.MCol*, !dbg !7419
  store %struct.MCol* %47, %struct.MCol** %src39, align 8, !dbg !7418
  %48 = load %struct.MCol*, %struct.MCol** %src39, align 8, !dbg !7421
  %49 = load i32, i32* %j, align 4, !dbg !7422
  %idxprom42 = sext i32 %49 to i64, !dbg !7421
  %arrayidx43 = getelementptr inbounds %struct.MCol, %struct.MCol* %48, i64 %idxprom42, !dbg !7421
  %a44 = getelementptr inbounds %struct.MCol, %struct.MCol* %arrayidx43, i32 0, i32 0, !dbg !7423
  %50 = load i8, i8* %a44, align 1, !dbg !7423
  %conv45 = zext i8 %50 to i32, !dbg !7421
  %conv46 = sitofp i32 %conv45 to float, !dbg !7421
  %51 = load float, float* %weight, align 4, !dbg !7424
  %mul47 = fmul float %conv46, %51, !dbg !7425
  %52 = load i32, i32* %j, align 4, !dbg !7426
  %idxprom48 = sext i32 %52 to i64, !dbg !7427
  %arrayidx49 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom48, !dbg !7427
  %a50 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx49, i32 0, i32 0, !dbg !7428
  %53 = load float, float* %a50, align 16, !dbg !7429
  %add51 = fadd float %53, %mul47, !dbg !7429
  store float %add51, float* %a50, align 16, !dbg !7429
  %54 = load %struct.MCol*, %struct.MCol** %src39, align 8, !dbg !7430
  %55 = load i32, i32* %j, align 4, !dbg !7431
  %idxprom52 = sext i32 %55 to i64, !dbg !7430
  %arrayidx53 = getelementptr inbounds %struct.MCol, %struct.MCol* %54, i64 %idxprom52, !dbg !7430
  %r54 = getelementptr inbounds %struct.MCol, %struct.MCol* %arrayidx53, i32 0, i32 1, !dbg !7432
  %56 = load i8, i8* %r54, align 1, !dbg !7432
  %conv55 = zext i8 %56 to i32, !dbg !7430
  %conv56 = sitofp i32 %conv55 to float, !dbg !7430
  %57 = load float, float* %weight, align 4, !dbg !7433
  %mul57 = fmul float %conv56, %57, !dbg !7434
  %58 = load i32, i32* %j, align 4, !dbg !7435
  %idxprom58 = sext i32 %58 to i64, !dbg !7436
  %arrayidx59 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom58, !dbg !7436
  %r60 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx59, i32 0, i32 1, !dbg !7437
  %59 = load float, float* %r60, align 4, !dbg !7438
  %add61 = fadd float %59, %mul57, !dbg !7438
  store float %add61, float* %r60, align 4, !dbg !7438
  %60 = load %struct.MCol*, %struct.MCol** %src39, align 8, !dbg !7439
  %61 = load i32, i32* %j, align 4, !dbg !7440
  %idxprom62 = sext i32 %61 to i64, !dbg !7439
  %arrayidx63 = getelementptr inbounds %struct.MCol, %struct.MCol* %60, i64 %idxprom62, !dbg !7439
  %g64 = getelementptr inbounds %struct.MCol, %struct.MCol* %arrayidx63, i32 0, i32 2, !dbg !7441
  %62 = load i8, i8* %g64, align 1, !dbg !7441
  %conv65 = zext i8 %62 to i32, !dbg !7439
  %conv66 = sitofp i32 %conv65 to float, !dbg !7439
  %63 = load float, float* %weight, align 4, !dbg !7442
  %mul67 = fmul float %conv66, %63, !dbg !7443
  %64 = load i32, i32* %j, align 4, !dbg !7444
  %idxprom68 = sext i32 %64 to i64, !dbg !7445
  %arrayidx69 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom68, !dbg !7445
  %g70 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx69, i32 0, i32 2, !dbg !7446
  %65 = load float, float* %g70, align 8, !dbg !7447
  %add71 = fadd float %65, %mul67, !dbg !7447
  store float %add71, float* %g70, align 8, !dbg !7447
  %66 = load %struct.MCol*, %struct.MCol** %src39, align 8, !dbg !7448
  %67 = load i32, i32* %j, align 4, !dbg !7449
  %idxprom72 = sext i32 %67 to i64, !dbg !7448
  %arrayidx73 = getelementptr inbounds %struct.MCol, %struct.MCol* %66, i64 %idxprom72, !dbg !7448
  %b74 = getelementptr inbounds %struct.MCol, %struct.MCol* %arrayidx73, i32 0, i32 3, !dbg !7450
  %68 = load i8, i8* %b74, align 1, !dbg !7450
  %conv75 = zext i8 %68 to i32, !dbg !7448
  %conv76 = sitofp i32 %conv75 to float, !dbg !7448
  %69 = load float, float* %weight, align 4, !dbg !7451
  %mul77 = fmul float %conv76, %69, !dbg !7452
  %70 = load i32, i32* %j, align 4, !dbg !7453
  %idxprom78 = sext i32 %70 to i64, !dbg !7454
  %arrayidx79 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom78, !dbg !7454
  %b80 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx79, i32 0, i32 3, !dbg !7455
  %71 = load float, float* %b80, align 4, !dbg !7456
  %add81 = fadd float %71, %mul77, !dbg !7456
  store float %add81, float* %b80, align 4, !dbg !7456
  br label %if.end82

if.end82:                                         ; preds = %if.else, %for.end
  br label %for.inc83, !dbg !7457

for.inc83:                                        ; preds = %if.end82
  %72 = load i32, i32* %j, align 4, !dbg !7458
  %inc84 = add nsw i32 %72, 1, !dbg !7458
  store i32 %inc84, i32* %j, align 4, !dbg !7458
  br label %for.cond2, !dbg !7459, !llvm.loop !7460

for.end85:                                        ; preds = %for.cond2
  br label %for.inc86, !dbg !7462

for.inc86:                                        ; preds = %for.end85
  %73 = load i32, i32* %i, align 4, !dbg !7463
  %inc87 = add nsw i32 %73, 1, !dbg !7463
  store i32 %inc87, i32* %i, align 4, !dbg !7463
  br label %for.cond, !dbg !7464, !llvm.loop !7465

for.end88:                                        ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !7467
  br label %for.cond89, !dbg !7469

for.cond89:                                       ; preds = %for.inc209, %for.end88
  %74 = load i32, i32* %j, align 4, !dbg !7470
  %cmp90 = icmp slt i32 %74, 4, !dbg !7472
  br i1 %cmp90, label %for.body92, label %for.end211, !dbg !7473

for.body92:                                       ; preds = %for.cond89
  %75 = load i32, i32* %j, align 4, !dbg !7474
  %idxprom93 = sext i32 %75 to i64, !dbg !7474
  %arrayidx94 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom93, !dbg !7474
  %a95 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx94, i32 0, i32 0, !dbg !7474
  %76 = load float, float* %a95, align 16, !dbg !7474
  %cmp96 = fcmp olt float %76, 0.000000e+00, !dbg !7474
  br i1 %cmp96, label %if.then98, label %if.else102, !dbg !7478

if.then98:                                        ; preds = %for.body92
  %77 = load i32, i32* %j, align 4, !dbg !7474
  %idxprom99 = sext i32 %77 to i64, !dbg !7474
  %arrayidx100 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom99, !dbg !7474
  %a101 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx100, i32 0, i32 0, !dbg !7474
  store float 0.000000e+00, float* %a101, align 16, !dbg !7474
  br label %if.end113, !dbg !7474

if.else102:                                       ; preds = %for.body92
  %78 = load i32, i32* %j, align 4, !dbg !7479
  %idxprom103 = sext i32 %78 to i64, !dbg !7479
  %arrayidx104 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom103, !dbg !7479
  %a105 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx104, i32 0, i32 0, !dbg !7479
  %79 = load float, float* %a105, align 16, !dbg !7479
  %cmp106 = fcmp ogt float %79, 2.550000e+02, !dbg !7479
  br i1 %cmp106, label %if.then108, label %if.end112, !dbg !7474

if.then108:                                       ; preds = %if.else102
  %80 = load i32, i32* %j, align 4, !dbg !7479
  %idxprom109 = sext i32 %80 to i64, !dbg !7479
  %arrayidx110 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom109, !dbg !7479
  %a111 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx110, i32 0, i32 0, !dbg !7479
  store float 2.550000e+02, float* %a111, align 16, !dbg !7479
  br label %if.end112, !dbg !7479

if.end112:                                        ; preds = %if.then108, %if.else102
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.then98
  %81 = load i32, i32* %j, align 4, !dbg !7481
  %idxprom114 = sext i32 %81 to i64, !dbg !7481
  %arrayidx115 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom114, !dbg !7481
  %r116 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx115, i32 0, i32 1, !dbg !7481
  %82 = load float, float* %r116, align 4, !dbg !7481
  %cmp117 = fcmp olt float %82, 0.000000e+00, !dbg !7481
  br i1 %cmp117, label %if.then119, label %if.else123, !dbg !7484

if.then119:                                       ; preds = %if.end113
  %83 = load i32, i32* %j, align 4, !dbg !7481
  %idxprom120 = sext i32 %83 to i64, !dbg !7481
  %arrayidx121 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom120, !dbg !7481
  %r122 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx121, i32 0, i32 1, !dbg !7481
  store float 0.000000e+00, float* %r122, align 4, !dbg !7481
  br label %if.end134, !dbg !7481

if.else123:                                       ; preds = %if.end113
  %84 = load i32, i32* %j, align 4, !dbg !7485
  %idxprom124 = sext i32 %84 to i64, !dbg !7485
  %arrayidx125 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom124, !dbg !7485
  %r126 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx125, i32 0, i32 1, !dbg !7485
  %85 = load float, float* %r126, align 4, !dbg !7485
  %cmp127 = fcmp ogt float %85, 2.550000e+02, !dbg !7485
  br i1 %cmp127, label %if.then129, label %if.end133, !dbg !7481

if.then129:                                       ; preds = %if.else123
  %86 = load i32, i32* %j, align 4, !dbg !7485
  %idxprom130 = sext i32 %86 to i64, !dbg !7485
  %arrayidx131 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom130, !dbg !7485
  %r132 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx131, i32 0, i32 1, !dbg !7485
  store float 2.550000e+02, float* %r132, align 4, !dbg !7485
  br label %if.end133, !dbg !7485

if.end133:                                        ; preds = %if.then129, %if.else123
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.then119
  %87 = load i32, i32* %j, align 4, !dbg !7487
  %idxprom135 = sext i32 %87 to i64, !dbg !7487
  %arrayidx136 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom135, !dbg !7487
  %g137 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx136, i32 0, i32 2, !dbg !7487
  %88 = load float, float* %g137, align 8, !dbg !7487
  %cmp138 = fcmp olt float %88, 0.000000e+00, !dbg !7487
  br i1 %cmp138, label %if.then140, label %if.else144, !dbg !7490

if.then140:                                       ; preds = %if.end134
  %89 = load i32, i32* %j, align 4, !dbg !7487
  %idxprom141 = sext i32 %89 to i64, !dbg !7487
  %arrayidx142 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom141, !dbg !7487
  %g143 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx142, i32 0, i32 2, !dbg !7487
  store float 0.000000e+00, float* %g143, align 8, !dbg !7487
  br label %if.end155, !dbg !7487

if.else144:                                       ; preds = %if.end134
  %90 = load i32, i32* %j, align 4, !dbg !7491
  %idxprom145 = sext i32 %90 to i64, !dbg !7491
  %arrayidx146 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom145, !dbg !7491
  %g147 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx146, i32 0, i32 2, !dbg !7491
  %91 = load float, float* %g147, align 8, !dbg !7491
  %cmp148 = fcmp ogt float %91, 2.550000e+02, !dbg !7491
  br i1 %cmp148, label %if.then150, label %if.end154, !dbg !7487

if.then150:                                       ; preds = %if.else144
  %92 = load i32, i32* %j, align 4, !dbg !7491
  %idxprom151 = sext i32 %92 to i64, !dbg !7491
  %arrayidx152 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom151, !dbg !7491
  %g153 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx152, i32 0, i32 2, !dbg !7491
  store float 2.550000e+02, float* %g153, align 8, !dbg !7491
  br label %if.end154, !dbg !7491

if.end154:                                        ; preds = %if.then150, %if.else144
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.then140
  %93 = load i32, i32* %j, align 4, !dbg !7493
  %idxprom156 = sext i32 %93 to i64, !dbg !7493
  %arrayidx157 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom156, !dbg !7493
  %b158 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx157, i32 0, i32 3, !dbg !7493
  %94 = load float, float* %b158, align 4, !dbg !7493
  %cmp159 = fcmp olt float %94, 0.000000e+00, !dbg !7493
  br i1 %cmp159, label %if.then161, label %if.else165, !dbg !7496

if.then161:                                       ; preds = %if.end155
  %95 = load i32, i32* %j, align 4, !dbg !7493
  %idxprom162 = sext i32 %95 to i64, !dbg !7493
  %arrayidx163 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom162, !dbg !7493
  %b164 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx163, i32 0, i32 3, !dbg !7493
  store float 0.000000e+00, float* %b164, align 4, !dbg !7493
  br label %if.end176, !dbg !7493

if.else165:                                       ; preds = %if.end155
  %96 = load i32, i32* %j, align 4, !dbg !7497
  %idxprom166 = sext i32 %96 to i64, !dbg !7497
  %arrayidx167 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom166, !dbg !7497
  %b168 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx167, i32 0, i32 3, !dbg !7497
  %97 = load float, float* %b168, align 4, !dbg !7497
  %cmp169 = fcmp ogt float %97, 2.550000e+02, !dbg !7497
  br i1 %cmp169, label %if.then171, label %if.end175, !dbg !7493

if.then171:                                       ; preds = %if.else165
  %98 = load i32, i32* %j, align 4, !dbg !7497
  %idxprom172 = sext i32 %98 to i64, !dbg !7497
  %arrayidx173 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom172, !dbg !7497
  %b174 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx173, i32 0, i32 3, !dbg !7497
  store float 2.550000e+02, float* %b174, align 4, !dbg !7497
  br label %if.end175, !dbg !7497

if.end175:                                        ; preds = %if.then171, %if.else165
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.then161
  %99 = load i32, i32* %j, align 4, !dbg !7499
  %idxprom177 = sext i32 %99 to i64, !dbg !7500
  %arrayidx178 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom177, !dbg !7500
  %a179 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx178, i32 0, i32 0, !dbg !7501
  %100 = load float, float* %a179, align 16, !dbg !7501
  %conv180 = fptosi float %100 to i32, !dbg !7502
  %conv181 = trunc i32 %conv180 to i8, !dbg !7502
  %101 = load %struct.MCol*, %struct.MCol** %mc, align 8, !dbg !7503
  %102 = load i32, i32* %j, align 4, !dbg !7504
  %idxprom182 = sext i32 %102 to i64, !dbg !7503
  %arrayidx183 = getelementptr inbounds %struct.MCol, %struct.MCol* %101, i64 %idxprom182, !dbg !7503
  %a184 = getelementptr inbounds %struct.MCol, %struct.MCol* %arrayidx183, i32 0, i32 0, !dbg !7505
  store i8 %conv181, i8* %a184, align 1, !dbg !7506
  %103 = load i32, i32* %j, align 4, !dbg !7507
  %idxprom185 = sext i32 %103 to i64, !dbg !7508
  %arrayidx186 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom185, !dbg !7508
  %r187 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx186, i32 0, i32 1, !dbg !7509
  %104 = load float, float* %r187, align 4, !dbg !7509
  %conv188 = fptosi float %104 to i32, !dbg !7510
  %conv189 = trunc i32 %conv188 to i8, !dbg !7510
  %105 = load %struct.MCol*, %struct.MCol** %mc, align 8, !dbg !7511
  %106 = load i32, i32* %j, align 4, !dbg !7512
  %idxprom190 = sext i32 %106 to i64, !dbg !7511
  %arrayidx191 = getelementptr inbounds %struct.MCol, %struct.MCol* %105, i64 %idxprom190, !dbg !7511
  %r192 = getelementptr inbounds %struct.MCol, %struct.MCol* %arrayidx191, i32 0, i32 1, !dbg !7513
  store i8 %conv189, i8* %r192, align 1, !dbg !7514
  %107 = load i32, i32* %j, align 4, !dbg !7515
  %idxprom193 = sext i32 %107 to i64, !dbg !7516
  %arrayidx194 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom193, !dbg !7516
  %g195 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx194, i32 0, i32 2, !dbg !7517
  %108 = load float, float* %g195, align 8, !dbg !7517
  %conv196 = fptosi float %108 to i32, !dbg !7518
  %conv197 = trunc i32 %conv196 to i8, !dbg !7518
  %109 = load %struct.MCol*, %struct.MCol** %mc, align 8, !dbg !7519
  %110 = load i32, i32* %j, align 4, !dbg !7520
  %idxprom198 = sext i32 %110 to i64, !dbg !7519
  %arrayidx199 = getelementptr inbounds %struct.MCol, %struct.MCol* %109, i64 %idxprom198, !dbg !7519
  %g200 = getelementptr inbounds %struct.MCol, %struct.MCol* %arrayidx199, i32 0, i32 2, !dbg !7521
  store i8 %conv197, i8* %g200, align 1, !dbg !7522
  %111 = load i32, i32* %j, align 4, !dbg !7523
  %idxprom201 = sext i32 %111 to i64, !dbg !7524
  %arrayidx202 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* %col, i64 0, i64 %idxprom201, !dbg !7524
  %b203 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %arrayidx202, i32 0, i32 3, !dbg !7525
  %112 = load float, float* %b203, align 4, !dbg !7525
  %conv204 = fptosi float %112 to i32, !dbg !7526
  %conv205 = trunc i32 %conv204 to i8, !dbg !7526
  %113 = load %struct.MCol*, %struct.MCol** %mc, align 8, !dbg !7527
  %114 = load i32, i32* %j, align 4, !dbg !7528
  %idxprom206 = sext i32 %114 to i64, !dbg !7527
  %arrayidx207 = getelementptr inbounds %struct.MCol, %struct.MCol* %113, i64 %idxprom206, !dbg !7527
  %b208 = getelementptr inbounds %struct.MCol, %struct.MCol* %arrayidx207, i32 0, i32 3, !dbg !7529
  store i8 %conv205, i8* %b208, align 1, !dbg !7530
  br label %for.inc209, !dbg !7531

for.inc209:                                       ; preds = %if.end176
  %115 = load i32, i32* %j, align 4, !dbg !7532
  %inc210 = add nsw i32 %115, 1, !dbg !7532
  store i32 %inc210, i32* %j, align 4, !dbg !7532
  br label %for.cond89, !dbg !7533, !llvm.loop !7534

for.end211:                                       ; preds = %if.then, %for.cond89
  ret void, !dbg !7536
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerSwap_mcol(i8* %data, i32* %corner_indices) #0 !dbg !7537 {
entry:
  %data.addr = alloca i8*, align 8
  %corner_indices.addr = alloca i32*, align 8
  %mcol = alloca %struct.MCol*, align 8
  %col = alloca [4 x %struct.MCol], align 16
  %j = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7538, metadata !DIExpression()), !dbg !7539
  store i32* %corner_indices, i32** %corner_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %corner_indices.addr, metadata !7540, metadata !DIExpression()), !dbg !7541
  call void @llvm.dbg.declare(metadata %struct.MCol** %mcol, metadata !7542, metadata !DIExpression()), !dbg !7543
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7544
  %1 = bitcast i8* %0 to %struct.MCol*, !dbg !7544
  store %struct.MCol* %1, %struct.MCol** %mcol, align 8, !dbg !7543
  call void @llvm.dbg.declare(metadata [4 x %struct.MCol]* %col, metadata !7545, metadata !DIExpression()), !dbg !7547
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7548, metadata !DIExpression()), !dbg !7549
  store i32 0, i32* %j, align 4, !dbg !7550
  br label %for.cond, !dbg !7552

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4, !dbg !7553
  %cmp = icmp slt i32 %2, 4, !dbg !7555
  br i1 %cmp, label %for.body, label %for.end, !dbg !7556

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4, !dbg !7557
  %idxprom = sext i32 %3 to i64, !dbg !7558
  %arrayidx = getelementptr inbounds [4 x %struct.MCol], [4 x %struct.MCol]* %col, i64 0, i64 %idxprom, !dbg !7558
  %4 = load %struct.MCol*, %struct.MCol** %mcol, align 8, !dbg !7559
  %5 = load i32*, i32** %corner_indices.addr, align 8, !dbg !7560
  %6 = load i32, i32* %j, align 4, !dbg !7561
  %idxprom1 = sext i32 %6 to i64, !dbg !7560
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i64 %idxprom1, !dbg !7560
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !7560
  %idxprom3 = sext i32 %7 to i64, !dbg !7559
  %arrayidx4 = getelementptr inbounds %struct.MCol, %struct.MCol* %4, i64 %idxprom3, !dbg !7559
  %8 = bitcast %struct.MCol* %arrayidx to i8*, !dbg !7559
  %9 = bitcast %struct.MCol* %arrayidx4 to i8*, !dbg !7559
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 1 %9, i64 4, i1 false), !dbg !7559
  br label %for.inc, !dbg !7558

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %j, align 4, !dbg !7562
  %inc = add nsw i32 %10, 1, !dbg !7562
  store i32 %inc, i32* %j, align 4, !dbg !7562
  br label %for.cond, !dbg !7563, !llvm.loop !7564

for.end:                                          ; preds = %for.cond
  %11 = load %struct.MCol*, %struct.MCol** %mcol, align 8, !dbg !7566
  %12 = bitcast %struct.MCol* %11 to i8*, !dbg !7567
  %arraydecay = getelementptr inbounds [4 x %struct.MCol], [4 x %struct.MCol]* %col, i64 0, i64 0, !dbg !7567
  %13 = bitcast %struct.MCol* %arraydecay to i8*, !dbg !7567
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 16 %13, i64 16, i1 false), !dbg !7567
  ret void, !dbg !7568
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDefault_mcol(i8* %data, i32 %count) #0 !dbg !419 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %mcol = alloca %struct.MCol*, align 8
  %i = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7569, metadata !DIExpression()), !dbg !7570
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7571, metadata !DIExpression()), !dbg !7572
  call void @llvm.dbg.declare(metadata %struct.MCol** %mcol, metadata !7573, metadata !DIExpression()), !dbg !7574
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7575
  %1 = bitcast i8* %0 to %struct.MCol*, !dbg !7576
  store %struct.MCol* %1, %struct.MCol** %mcol, align 8, !dbg !7574
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7577, metadata !DIExpression()), !dbg !7578
  store i32 0, i32* %i, align 4, !dbg !7579
  br label %for.cond, !dbg !7581

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !7582
  %3 = load i32, i32* %count.addr, align 4, !dbg !7584
  %mul = mul nsw i32 4, %3, !dbg !7585
  %cmp = icmp slt i32 %2, %mul, !dbg !7586
  br i1 %cmp, label %for.body, label %for.end, !dbg !7587

for.body:                                         ; preds = %for.cond
  %4 = load %struct.MCol*, %struct.MCol** %mcol, align 8, !dbg !7588
  %5 = load i32, i32* %i, align 4, !dbg !7590
  %idxprom = sext i32 %5 to i64, !dbg !7588
  %arrayidx = getelementptr inbounds %struct.MCol, %struct.MCol* %4, i64 %idxprom, !dbg !7588
  %6 = bitcast %struct.MCol* %arrayidx to i8*, !dbg !7591
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 getelementptr inbounds (%struct.MCol, %struct.MCol* @layerDefault_mcol.default_mcol, i32 0, i32 0), i64 4, i1 false), !dbg !7591
  br label %for.inc, !dbg !7592

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !7593
  %inc = add nsw i32 %7, 1, !dbg !7593
  store i32 %inc, i32* %i, align 4, !dbg !7593
  br label %for.cond, !dbg !7594, !llvm.loop !7595

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7597
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @layerMaxNum_mloopcol() #0 !dbg !7598 {
entry:
  ret i32 8, !dbg !7599
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDefault_origindex(i8* %data, i32 %count) #0 !dbg !7600 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7601, metadata !DIExpression()), !dbg !7602
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7603, metadata !DIExpression()), !dbg !7604
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7605
  %1 = bitcast i8* %0 to i32*, !dbg !7606
  %2 = load i32, i32* %count.addr, align 4, !dbg !7607
  call void @fill_vn_i(i32* %1, i32 %2, i32 -1), !dbg !7608
  ret void, !dbg !7609
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_propFloat(i8* %source, i8* %dest, i32 %count) #0 !dbg !7610 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !7611, metadata !DIExpression()), !dbg !7612
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7613, metadata !DIExpression()), !dbg !7614
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7615, metadata !DIExpression()), !dbg !7616
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !7617
  %1 = load i8*, i8** %source.addr, align 8, !dbg !7618
  %2 = load i32, i32* %count.addr, align 4, !dbg !7619
  %conv = sext i32 %2 to i64, !dbg !7619
  %mul = mul i64 4, %conv, !dbg !7620
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %mul, i1 false), !dbg !7621
  ret void, !dbg !7622
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_propInt(i8* %source, i8* %dest, i32 %count) #0 !dbg !7623 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !7624, metadata !DIExpression()), !dbg !7625
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7626, metadata !DIExpression()), !dbg !7627
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7628, metadata !DIExpression()), !dbg !7629
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !7630
  %1 = load i8*, i8** %source.addr, align 8, !dbg !7631
  %2 = load i32, i32* %count.addr, align 4, !dbg !7632
  %conv = sext i32 %2 to i64, !dbg !7632
  %mul = mul i64 4, %conv, !dbg !7633
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %mul, i1 false), !dbg !7634
  ret void, !dbg !7635
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_propString(i8* %source, i8* %dest, i32 %count) #0 !dbg !7636 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !7637, metadata !DIExpression()), !dbg !7638
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7639, metadata !DIExpression()), !dbg !7640
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7641, metadata !DIExpression()), !dbg !7642
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !7643
  %1 = load i8*, i8** %source.addr, align 8, !dbg !7644
  %2 = load i32, i32* %count.addr, align 4, !dbg !7645
  %conv = sext i32 %2 to i64, !dbg !7645
  %mul = mul i64 256, %conv, !dbg !7646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %mul, i1 false), !dbg !7647
  ret void, !dbg !7648
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_origspace_face(i8* %source, i8* %dest, i32 %count) #0 !dbg !7649 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %source_tf = alloca %struct.OrigSpaceFace*, align 8
  %dest_tf = alloca %struct.OrigSpaceFace*, align 8
  %i = alloca i32, align 4
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !7650, metadata !DIExpression()), !dbg !7651
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7652, metadata !DIExpression()), !dbg !7653
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7654, metadata !DIExpression()), !dbg !7655
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceFace** %source_tf, metadata !7656, metadata !DIExpression()), !dbg !7657
  %0 = load i8*, i8** %source.addr, align 8, !dbg !7658
  %1 = bitcast i8* %0 to %struct.OrigSpaceFace*, !dbg !7659
  store %struct.OrigSpaceFace* %1, %struct.OrigSpaceFace** %source_tf, align 8, !dbg !7657
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceFace** %dest_tf, metadata !7660, metadata !DIExpression()), !dbg !7661
  %2 = load i8*, i8** %dest.addr, align 8, !dbg !7662
  %3 = bitcast i8* %2 to %struct.OrigSpaceFace*, !dbg !7663
  store %struct.OrigSpaceFace* %3, %struct.OrigSpaceFace** %dest_tf, align 8, !dbg !7661
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7664, metadata !DIExpression()), !dbg !7665
  store i32 0, i32* %i, align 4, !dbg !7666
  br label %for.cond, !dbg !7668

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !7669
  %5 = load i32, i32* %count.addr, align 4, !dbg !7671
  %cmp = icmp slt i32 %4, %5, !dbg !7672
  br i1 %cmp, label %for.body, label %for.end, !dbg !7673

for.body:                                         ; preds = %for.cond
  %6 = load %struct.OrigSpaceFace*, %struct.OrigSpaceFace** %dest_tf, align 8, !dbg !7674
  %7 = load i32, i32* %i, align 4, !dbg !7675
  %idxprom = sext i32 %7 to i64, !dbg !7674
  %arrayidx = getelementptr inbounds %struct.OrigSpaceFace, %struct.OrigSpaceFace* %6, i64 %idxprom, !dbg !7674
  %8 = load %struct.OrigSpaceFace*, %struct.OrigSpaceFace** %source_tf, align 8, !dbg !7676
  %9 = load i32, i32* %i, align 4, !dbg !7677
  %idxprom1 = sext i32 %9 to i64, !dbg !7676
  %arrayidx2 = getelementptr inbounds %struct.OrigSpaceFace, %struct.OrigSpaceFace* %8, i64 %idxprom1, !dbg !7676
  %10 = bitcast %struct.OrigSpaceFace* %arrayidx to i8*, !dbg !7676
  %11 = bitcast %struct.OrigSpaceFace* %arrayidx2 to i8*, !dbg !7676
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 32, i1 false), !dbg !7676
  br label %for.inc, !dbg !7674

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !7678
  %inc = add nsw i32 %12, 1, !dbg !7678
  store i32 %inc, i32* %i, align 4, !dbg !7678
  br label %for.cond, !dbg !7679, !llvm.loop !7680

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7682
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_origspace_face(i8** %sources, float* %weights, float* %sub_weights, i32 %count, i8* %dest) #0 !dbg !7683 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %osf = alloca %struct.OrigSpaceFace*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %uv = alloca [4 x [2 x float]], align 16
  %sub_weight = alloca float*, align 8
  %weight = alloca float, align 4
  %src = alloca %struct.OrigSpaceFace*, align 8
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !7684, metadata !DIExpression()), !dbg !7685
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !7686, metadata !DIExpression()), !dbg !7687
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !7688, metadata !DIExpression()), !dbg !7689
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7690, metadata !DIExpression()), !dbg !7691
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7692, metadata !DIExpression()), !dbg !7693
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceFace** %osf, metadata !7694, metadata !DIExpression()), !dbg !7695
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !7696
  %1 = bitcast i8* %0 to %struct.OrigSpaceFace*, !dbg !7696
  store %struct.OrigSpaceFace* %1, %struct.OrigSpaceFace** %osf, align 8, !dbg !7695
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7697, metadata !DIExpression()), !dbg !7698
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7699, metadata !DIExpression()), !dbg !7700
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7701, metadata !DIExpression()), !dbg !7702
  call void @llvm.dbg.declare(metadata [4 x [2 x float]]* %uv, metadata !7703, metadata !DIExpression()), !dbg !7704
  %2 = bitcast [4 x [2 x float]]* %uv to i8*, !dbg !7704
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 32, i1 false), !dbg !7704
  call void @llvm.dbg.declare(metadata float** %sub_weight, metadata !7705, metadata !DIExpression()), !dbg !7706
  %3 = load i32, i32* %count.addr, align 4, !dbg !7707
  %cmp = icmp sle i32 %3, 0, !dbg !7709
  br i1 %cmp, label %if.then, label %if.end, !dbg !7710

if.then:                                          ; preds = %entry
  br label %return, !dbg !7711

if.end:                                           ; preds = %entry
  %4 = load float*, float** %sub_weights.addr, align 8, !dbg !7712
  store float* %4, float** %sub_weight, align 8, !dbg !7713
  store i32 0, i32* %i, align 4, !dbg !7714
  br label %for.cond, !dbg !7716

for.cond:                                         ; preds = %for.inc29, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !7717
  %6 = load i32, i32* %count.addr, align 4, !dbg !7719
  %cmp1 = icmp slt i32 %5, %6, !dbg !7720
  br i1 %cmp1, label %for.body, label %for.end31, !dbg !7721

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %weight, metadata !7722, metadata !DIExpression()), !dbg !7724
  %7 = load float*, float** %weights.addr, align 8, !dbg !7725
  %tobool = icmp ne float* %7, null, !dbg !7725
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7725

cond.true:                                        ; preds = %for.body
  %8 = load float*, float** %weights.addr, align 8, !dbg !7726
  %9 = load i32, i32* %i, align 4, !dbg !7727
  %idxprom = sext i32 %9 to i64, !dbg !7726
  %arrayidx = getelementptr inbounds float, float* %8, i64 %idxprom, !dbg !7726
  %10 = load float, float* %arrayidx, align 4, !dbg !7726
  br label %cond.end, !dbg !7725

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7725

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %10, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !7725
  store float %cond, float* %weight, align 4, !dbg !7724
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceFace** %src, metadata !7728, metadata !DIExpression()), !dbg !7729
  %11 = load i8**, i8*** %sources.addr, align 8, !dbg !7730
  %12 = load i32, i32* %i, align 4, !dbg !7731
  %idxprom2 = sext i32 %12 to i64, !dbg !7730
  %arrayidx3 = getelementptr inbounds i8*, i8** %11, i64 %idxprom2, !dbg !7730
  %13 = load i8*, i8** %arrayidx3, align 8, !dbg !7730
  %14 = bitcast i8* %13 to %struct.OrigSpaceFace*, !dbg !7730
  store %struct.OrigSpaceFace* %14, %struct.OrigSpaceFace** %src, align 8, !dbg !7729
  store i32 0, i32* %j, align 4, !dbg !7732
  br label %for.cond4, !dbg !7734

for.cond4:                                        ; preds = %for.inc26, %cond.end
  %15 = load i32, i32* %j, align 4, !dbg !7735
  %cmp5 = icmp slt i32 %15, 4, !dbg !7737
  br i1 %cmp5, label %for.body6, label %for.end28, !dbg !7738

for.body6:                                        ; preds = %for.cond4
  %16 = load float*, float** %sub_weights.addr, align 8, !dbg !7739
  %tobool7 = icmp ne float* %16, null, !dbg !7739
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !7742

if.then8:                                         ; preds = %for.body6
  store i32 0, i32* %k, align 4, !dbg !7743
  br label %for.cond9, !dbg !7746

for.cond9:                                        ; preds = %for.inc, %if.then8
  %17 = load i32, i32* %k, align 4, !dbg !7747
  %cmp10 = icmp slt i32 %17, 4, !dbg !7749
  br i1 %cmp10, label %for.body11, label %for.end, !dbg !7750

for.body11:                                       ; preds = %for.cond9
  %18 = load i32, i32* %j, align 4, !dbg !7751
  %idxprom12 = sext i32 %18 to i64, !dbg !7753
  %arrayidx13 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 %idxprom12, !dbg !7753
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %arrayidx13, i64 0, i64 0, !dbg !7753
  %19 = load %struct.OrigSpaceFace*, %struct.OrigSpaceFace** %src, align 8, !dbg !7754
  %uv14 = getelementptr inbounds %struct.OrigSpaceFace, %struct.OrigSpaceFace* %19, i32 0, i32 0, !dbg !7755
  %20 = load i32, i32* %k, align 4, !dbg !7756
  %idxprom15 = sext i32 %20 to i64, !dbg !7754
  %arrayidx16 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv14, i64 0, i64 %idxprom15, !dbg !7754
  %arraydecay17 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx16, i64 0, i64 0, !dbg !7754
  %21 = load float*, float** %sub_weight, align 8, !dbg !7757
  %22 = load float, float* %21, align 4, !dbg !7758
  %23 = load float, float* %weight, align 4, !dbg !7759
  %mul = fmul float %22, %23, !dbg !7760
  call void @madd_v2_v2fl(float* %arraydecay, float* %arraydecay17, float %mul), !dbg !7761
  br label %for.inc, !dbg !7762

for.inc:                                          ; preds = %for.body11
  %24 = load i32, i32* %k, align 4, !dbg !7763
  %inc = add nsw i32 %24, 1, !dbg !7763
  store i32 %inc, i32* %k, align 4, !dbg !7763
  %25 = load float*, float** %sub_weight, align 8, !dbg !7764
  %incdec.ptr = getelementptr inbounds float, float* %25, i32 1, !dbg !7764
  store float* %incdec.ptr, float** %sub_weight, align 8, !dbg !7764
  br label %for.cond9, !dbg !7765, !llvm.loop !7766

for.end:                                          ; preds = %for.cond9
  br label %if.end25, !dbg !7768

if.else:                                          ; preds = %for.body6
  %26 = load i32, i32* %j, align 4, !dbg !7769
  %idxprom18 = sext i32 %26 to i64, !dbg !7771
  %arrayidx19 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 %idxprom18, !dbg !7771
  %arraydecay20 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx19, i64 0, i64 0, !dbg !7771
  %27 = load %struct.OrigSpaceFace*, %struct.OrigSpaceFace** %src, align 8, !dbg !7772
  %uv21 = getelementptr inbounds %struct.OrigSpaceFace, %struct.OrigSpaceFace* %27, i32 0, i32 0, !dbg !7773
  %28 = load i32, i32* %j, align 4, !dbg !7774
  %idxprom22 = sext i32 %28 to i64, !dbg !7772
  %arrayidx23 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv21, i64 0, i64 %idxprom22, !dbg !7772
  %arraydecay24 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx23, i64 0, i64 0, !dbg !7772
  %29 = load float, float* %weight, align 4, !dbg !7775
  call void @madd_v2_v2fl(float* %arraydecay20, float* %arraydecay24, float %29), !dbg !7776
  br label %if.end25

if.end25:                                         ; preds = %if.else, %for.end
  br label %for.inc26, !dbg !7777

for.inc26:                                        ; preds = %if.end25
  %30 = load i32, i32* %j, align 4, !dbg !7778
  %inc27 = add nsw i32 %30, 1, !dbg !7778
  store i32 %inc27, i32* %j, align 4, !dbg !7778
  br label %for.cond4, !dbg !7779, !llvm.loop !7780

for.end28:                                        ; preds = %for.cond4
  br label %for.inc29, !dbg !7782

for.inc29:                                        ; preds = %for.end28
  %31 = load i32, i32* %i, align 4, !dbg !7783
  %inc30 = add nsw i32 %31, 1, !dbg !7783
  store i32 %inc30, i32* %i, align 4, !dbg !7783
  br label %for.cond, !dbg !7784, !llvm.loop !7785

for.end31:                                        ; preds = %for.cond
  %32 = load %struct.OrigSpaceFace*, %struct.OrigSpaceFace** %osf, align 8, !dbg !7787
  %uv32 = getelementptr inbounds %struct.OrigSpaceFace, %struct.OrigSpaceFace* %32, i32 0, i32 0, !dbg !7788
  %arraydecay33 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv32, i64 0, i64 0, !dbg !7789
  %33 = bitcast [2 x float]* %arraydecay33 to i8*, !dbg !7789
  %arraydecay34 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 0, !dbg !7789
  %34 = bitcast [2 x float]* %arraydecay34 to i8*, !dbg !7789
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 16 %34, i64 32, i1 false), !dbg !7789
  br label %return, !dbg !7790

return:                                           ; preds = %for.end31, %if.then
  ret void, !dbg !7790
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerSwap_origspace_face(i8* %data, i32* %corner_indices) #0 !dbg !7791 {
entry:
  %data.addr = alloca i8*, align 8
  %corner_indices.addr = alloca i32*, align 8
  %osf = alloca %struct.OrigSpaceFace*, align 8
  %uv = alloca [4 x [2 x float]], align 16
  %j = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7792, metadata !DIExpression()), !dbg !7793
  store i32* %corner_indices, i32** %corner_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %corner_indices.addr, metadata !7794, metadata !DIExpression()), !dbg !7795
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceFace** %osf, metadata !7796, metadata !DIExpression()), !dbg !7797
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7798
  %1 = bitcast i8* %0 to %struct.OrigSpaceFace*, !dbg !7798
  store %struct.OrigSpaceFace* %1, %struct.OrigSpaceFace** %osf, align 8, !dbg !7797
  call void @llvm.dbg.declare(metadata [4 x [2 x float]]* %uv, metadata !7799, metadata !DIExpression()), !dbg !7800
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7801, metadata !DIExpression()), !dbg !7802
  store i32 0, i32* %j, align 4, !dbg !7803
  br label %for.cond, !dbg !7805

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %j, align 4, !dbg !7806
  %cmp = icmp slt i32 %2, 4, !dbg !7808
  br i1 %cmp, label %for.body, label %for.end, !dbg !7809

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4, !dbg !7810
  %idxprom = sext i32 %3 to i64, !dbg !7812
  %arrayidx = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 %idxprom, !dbg !7812
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %arrayidx, i64 0, i64 0, !dbg !7812
  %4 = load %struct.OrigSpaceFace*, %struct.OrigSpaceFace** %osf, align 8, !dbg !7813
  %uv1 = getelementptr inbounds %struct.OrigSpaceFace, %struct.OrigSpaceFace* %4, i32 0, i32 0, !dbg !7814
  %5 = load i32*, i32** %corner_indices.addr, align 8, !dbg !7815
  %6 = load i32, i32* %j, align 4, !dbg !7816
  %idxprom2 = sext i32 %6 to i64, !dbg !7815
  %arrayidx3 = getelementptr inbounds i32, i32* %5, i64 %idxprom2, !dbg !7815
  %7 = load i32, i32* %arrayidx3, align 4, !dbg !7815
  %idxprom4 = sext i32 %7 to i64, !dbg !7813
  %arrayidx5 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv1, i64 0, i64 %idxprom4, !dbg !7813
  %arraydecay6 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx5, i64 0, i64 0, !dbg !7813
  call void @copy_v2_v2(float* %arraydecay, float* %arraydecay6), !dbg !7817
  br label %for.inc, !dbg !7818

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %j, align 4, !dbg !7819
  %inc = add nsw i32 %8, 1, !dbg !7819
  store i32 %inc, i32* %j, align 4, !dbg !7819
  br label %for.cond, !dbg !7820, !llvm.loop !7821

for.end:                                          ; preds = %for.cond
  %9 = load %struct.OrigSpaceFace*, %struct.OrigSpaceFace** %osf, align 8, !dbg !7823
  %uv7 = getelementptr inbounds %struct.OrigSpaceFace, %struct.OrigSpaceFace* %9, i32 0, i32 0, !dbg !7824
  %arraydecay8 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv7, i64 0, i64 0, !dbg !7825
  %10 = bitcast [2 x float]* %arraydecay8 to i8*, !dbg !7825
  %arraydecay9 = getelementptr inbounds [4 x [2 x float]], [4 x [2 x float]]* %uv, i64 0, i64 0, !dbg !7825
  %11 = bitcast [2 x float]* %arraydecay9 to i8*, !dbg !7825
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 16 %11, i64 32, i1 false), !dbg !7825
  ret void, !dbg !7826
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDefault_origspace_face(i8* %data, i32 %count) #0 !dbg !422 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %osf = alloca %struct.OrigSpaceFace*, align 8
  %i = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7827, metadata !DIExpression()), !dbg !7828
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7829, metadata !DIExpression()), !dbg !7830
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceFace** %osf, metadata !7831, metadata !DIExpression()), !dbg !7832
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7833
  %1 = bitcast i8* %0 to %struct.OrigSpaceFace*, !dbg !7834
  store %struct.OrigSpaceFace* %1, %struct.OrigSpaceFace** %osf, align 8, !dbg !7832
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7835, metadata !DIExpression()), !dbg !7836
  store i32 0, i32* %i, align 4, !dbg !7837
  br label %for.cond, !dbg !7839

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !7840
  %3 = load i32, i32* %count.addr, align 4, !dbg !7842
  %cmp = icmp slt i32 %2, %3, !dbg !7843
  br i1 %cmp, label %for.body, label %for.end, !dbg !7844

for.body:                                         ; preds = %for.cond
  %4 = load %struct.OrigSpaceFace*, %struct.OrigSpaceFace** %osf, align 8, !dbg !7845
  %5 = load i32, i32* %i, align 4, !dbg !7846
  %idxprom = sext i32 %5 to i64, !dbg !7845
  %arrayidx = getelementptr inbounds %struct.OrigSpaceFace, %struct.OrigSpaceFace* %4, i64 %idxprom, !dbg !7845
  %6 = bitcast %struct.OrigSpaceFace* %arrayidx to i8*, !dbg !7847
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast (%struct.OrigSpaceFace* @layerDefault_origspace_face.default_osf to i8*), i64 32, i1 false), !dbg !7847
  br label %for.inc, !dbg !7845

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !7848
  %inc = add nsw i32 %7, 1, !dbg !7848
  store i32 %inc, i32* %i, align 4, !dbg !7848
  br label %for.cond, !dbg !7849, !llvm.loop !7850

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7852
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_mloopuv(i8** %sources, float* %weights, float* %sub_weights, i32 %count, i8* %dest) #0 !dbg !7853 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %uv = alloca [2 x float], align 4
  %i = alloca i32, align 4
  %sub_weight = alloca float*, align 8
  %weight = alloca float, align 4
  %src = alloca %struct.MLoopUV*, align 8
  %weight10 = alloca float, align 4
  %src18 = alloca %struct.MLoopUV*, align 8
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !7854, metadata !DIExpression()), !dbg !7855
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !7856, metadata !DIExpression()), !dbg !7857
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !7858, metadata !DIExpression()), !dbg !7859
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7860, metadata !DIExpression()), !dbg !7861
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7862, metadata !DIExpression()), !dbg !7863
  call void @llvm.dbg.declare(metadata [2 x float]* %uv, metadata !7864, metadata !DIExpression()), !dbg !7865
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7866, metadata !DIExpression()), !dbg !7867
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !7868
  call void @zero_v2(float* %arraydecay), !dbg !7869
  %0 = load float*, float** %sub_weights.addr, align 8, !dbg !7870
  %tobool = icmp ne float* %0, null, !dbg !7870
  br i1 %tobool, label %if.then, label %if.else, !dbg !7872

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata float** %sub_weight, metadata !7873, metadata !DIExpression()), !dbg !7875
  %1 = load float*, float** %sub_weights.addr, align 8, !dbg !7876
  store float* %1, float** %sub_weight, align 8, !dbg !7875
  store i32 0, i32* %i, align 4, !dbg !7877
  br label %for.cond, !dbg !7879

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !7880
  %3 = load i32, i32* %count.addr, align 4, !dbg !7882
  %cmp = icmp slt i32 %2, %3, !dbg !7883
  br i1 %cmp, label %for.body, label %for.end, !dbg !7884

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %weight, metadata !7885, metadata !DIExpression()), !dbg !7887
  %4 = load float*, float** %weights.addr, align 8, !dbg !7888
  %tobool1 = icmp ne float* %4, null, !dbg !7888
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7888

cond.true:                                        ; preds = %for.body
  %5 = load float*, float** %weights.addr, align 8, !dbg !7889
  %6 = load i32, i32* %i, align 4, !dbg !7890
  %idxprom = sext i32 %6 to i64, !dbg !7889
  %arrayidx = getelementptr inbounds float, float* %5, i64 %idxprom, !dbg !7889
  %7 = load float, float* %arrayidx, align 4, !dbg !7889
  br label %cond.end, !dbg !7888

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %7, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !7888
  store float %cond, float* %weight, align 4, !dbg !7887
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %src, metadata !7891, metadata !DIExpression()), !dbg !7892
  %8 = load i8**, i8*** %sources.addr, align 8, !dbg !7893
  %9 = load i32, i32* %i, align 4, !dbg !7894
  %idxprom2 = sext i32 %9 to i64, !dbg !7893
  %arrayidx3 = getelementptr inbounds i8*, i8** %8, i64 %idxprom2, !dbg !7893
  %10 = load i8*, i8** %arrayidx3, align 8, !dbg !7893
  %11 = bitcast i8* %10 to %struct.MLoopUV*, !dbg !7893
  store %struct.MLoopUV* %11, %struct.MLoopUV** %src, align 8, !dbg !7892
  %arraydecay4 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !7895
  %12 = load %struct.MLoopUV*, %struct.MLoopUV** %src, align 8, !dbg !7896
  %uv5 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %12, i32 0, i32 0, !dbg !7897
  %arraydecay6 = getelementptr inbounds [2 x float], [2 x float]* %uv5, i64 0, i64 0, !dbg !7896
  %13 = load float*, float** %sub_weight, align 8, !dbg !7898
  %14 = load float, float* %13, align 4, !dbg !7899
  %15 = load float, float* %weight, align 4, !dbg !7900
  %mul = fmul float %14, %15, !dbg !7901
  call void @madd_v2_v2fl(float* %arraydecay4, float* %arraydecay6, float %mul), !dbg !7902
  %16 = load float*, float** %sub_weight, align 8, !dbg !7903
  %incdec.ptr = getelementptr inbounds float, float* %16, i32 1, !dbg !7903
  store float* %incdec.ptr, float** %sub_weight, align 8, !dbg !7903
  br label %for.inc, !dbg !7904

for.inc:                                          ; preds = %cond.end
  %17 = load i32, i32* %i, align 4, !dbg !7905
  %inc = add nsw i32 %17, 1, !dbg !7905
  store i32 %inc, i32* %i, align 4, !dbg !7905
  br label %for.cond, !dbg !7906, !llvm.loop !7907

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !7909

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7910
  br label %for.cond7, !dbg !7913

for.cond7:                                        ; preds = %for.inc24, %if.else
  %18 = load i32, i32* %i, align 4, !dbg !7914
  %19 = load i32, i32* %count.addr, align 4, !dbg !7916
  %cmp8 = icmp slt i32 %18, %19, !dbg !7917
  br i1 %cmp8, label %for.body9, label %for.end26, !dbg !7918

for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata float* %weight10, metadata !7919, metadata !DIExpression()), !dbg !7921
  %20 = load float*, float** %weights.addr, align 8, !dbg !7922
  %tobool11 = icmp ne float* %20, null, !dbg !7922
  br i1 %tobool11, label %cond.true12, label %cond.false15, !dbg !7922

cond.true12:                                      ; preds = %for.body9
  %21 = load float*, float** %weights.addr, align 8, !dbg !7923
  %22 = load i32, i32* %i, align 4, !dbg !7924
  %idxprom13 = sext i32 %22 to i64, !dbg !7923
  %arrayidx14 = getelementptr inbounds float, float* %21, i64 %idxprom13, !dbg !7923
  %23 = load float, float* %arrayidx14, align 4, !dbg !7923
  br label %cond.end16, !dbg !7922

cond.false15:                                     ; preds = %for.body9
  br label %cond.end16, !dbg !7922

cond.end16:                                       ; preds = %cond.false15, %cond.true12
  %cond17 = phi float [ %23, %cond.true12 ], [ 1.000000e+00, %cond.false15 ], !dbg !7922
  store float %cond17, float* %weight10, align 4, !dbg !7921
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %src18, metadata !7925, metadata !DIExpression()), !dbg !7926
  %24 = load i8**, i8*** %sources.addr, align 8, !dbg !7927
  %25 = load i32, i32* %i, align 4, !dbg !7928
  %idxprom19 = sext i32 %25 to i64, !dbg !7927
  %arrayidx20 = getelementptr inbounds i8*, i8** %24, i64 %idxprom19, !dbg !7927
  %26 = load i8*, i8** %arrayidx20, align 8, !dbg !7927
  %27 = bitcast i8* %26 to %struct.MLoopUV*, !dbg !7927
  store %struct.MLoopUV* %27, %struct.MLoopUV** %src18, align 8, !dbg !7926
  %arraydecay21 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !7929
  %28 = load %struct.MLoopUV*, %struct.MLoopUV** %src18, align 8, !dbg !7930
  %uv22 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %28, i32 0, i32 0, !dbg !7931
  %arraydecay23 = getelementptr inbounds [2 x float], [2 x float]* %uv22, i64 0, i64 0, !dbg !7930
  %29 = load float, float* %weight10, align 4, !dbg !7932
  call void @madd_v2_v2fl(float* %arraydecay21, float* %arraydecay23, float %29), !dbg !7933
  br label %for.inc24, !dbg !7934

for.inc24:                                        ; preds = %cond.end16
  %30 = load i32, i32* %i, align 4, !dbg !7935
  %inc25 = add nsw i32 %30, 1, !dbg !7935
  store i32 %inc25, i32* %i, align 4, !dbg !7935
  br label %for.cond7, !dbg !7936, !llvm.loop !7937

for.end26:                                        ; preds = %for.cond7
  br label %if.end

if.end:                                           ; preds = %for.end26, %for.end
  %31 = load i8*, i8** %dest.addr, align 8, !dbg !7939
  %32 = bitcast i8* %31 to %struct.MLoopUV*, !dbg !7940
  %uv27 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %32, i32 0, i32 0, !dbg !7941
  %arraydecay28 = getelementptr inbounds [2 x float], [2 x float]* %uv27, i64 0, i64 0, !dbg !7942
  %arraydecay29 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !7943
  call void @copy_v2_v2(float* %arraydecay28, float* %arraydecay29), !dbg !7944
  ret void, !dbg !7945
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @layerEqual_mloopuv(i8* %data1, i8* %data2) #0 !dbg !7946 {
entry:
  %data1.addr = alloca i8*, align 8
  %data2.addr = alloca i8*, align 8
  %luv1 = alloca %struct.MLoopUV*, align 8
  %luv2 = alloca %struct.MLoopUV*, align 8
  store i8* %data1, i8** %data1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data1.addr, metadata !7947, metadata !DIExpression()), !dbg !7948
  store i8* %data2, i8** %data2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data2.addr, metadata !7949, metadata !DIExpression()), !dbg !7950
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %luv1, metadata !7951, metadata !DIExpression()), !dbg !7954
  %0 = load i8*, i8** %data1.addr, align 8, !dbg !7955
  %1 = bitcast i8* %0 to %struct.MLoopUV*, !dbg !7955
  store %struct.MLoopUV* %1, %struct.MLoopUV** %luv1, align 8, !dbg !7954
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %luv2, metadata !7956, metadata !DIExpression()), !dbg !7957
  %2 = load i8*, i8** %data2.addr, align 8, !dbg !7958
  %3 = bitcast i8* %2 to %struct.MLoopUV*, !dbg !7958
  store %struct.MLoopUV* %3, %struct.MLoopUV** %luv2, align 8, !dbg !7957
  %4 = load %struct.MLoopUV*, %struct.MLoopUV** %luv1, align 8, !dbg !7959
  %uv = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %4, i32 0, i32 0, !dbg !7960
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !7959
  %5 = load %struct.MLoopUV*, %struct.MLoopUV** %luv2, align 8, !dbg !7961
  %uv1 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %5, i32 0, i32 0, !dbg !7962
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !7961
  %call = call float @len_squared_v2v2(float* %arraydecay, float* %arraydecay2), !dbg !7963
  %cmp = fcmp olt float %call, 0x3EE4F8B580000000, !dbg !7964
  %conv = zext i1 %cmp to i32, !dbg !7964
  %conv3 = trunc i32 %conv to i8, !dbg !7963
  ret i8 %conv3, !dbg !7965
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerMultiply_mloopuv(i8* %data, float %fac) #0 !dbg !7966 {
entry:
  %data.addr = alloca i8*, align 8
  %fac.addr = alloca float, align 4
  %luv = alloca %struct.MLoopUV*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7967, metadata !DIExpression()), !dbg !7968
  store float %fac, float* %fac.addr, align 4
  call void @llvm.dbg.declare(metadata float* %fac.addr, metadata !7969, metadata !DIExpression()), !dbg !7970
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %luv, metadata !7971, metadata !DIExpression()), !dbg !7972
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7973
  %1 = bitcast i8* %0 to %struct.MLoopUV*, !dbg !7973
  store %struct.MLoopUV* %1, %struct.MLoopUV** %luv, align 8, !dbg !7972
  %2 = load %struct.MLoopUV*, %struct.MLoopUV** %luv, align 8, !dbg !7974
  %uv = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %2, i32 0, i32 0, !dbg !7975
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !7974
  %3 = load float, float* %fac.addr, align 4, !dbg !7976
  call void @mul_v2_fl(float* %arraydecay, float %3), !dbg !7977
  ret void, !dbg !7978
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInitMinMax_mloopuv(i8* %vmin, i8* %vmax) #0 !dbg !7979 {
entry:
  %vmin.addr = alloca i8*, align 8
  %vmax.addr = alloca i8*, align 8
  %min = alloca %struct.MLoopUV*, align 8
  %max = alloca %struct.MLoopUV*, align 8
  store i8* %vmin, i8** %vmin.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmin.addr, metadata !7980, metadata !DIExpression()), !dbg !7981
  store i8* %vmax, i8** %vmax.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmax.addr, metadata !7982, metadata !DIExpression()), !dbg !7983
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %min, metadata !7984, metadata !DIExpression()), !dbg !7985
  %0 = load i8*, i8** %vmin.addr, align 8, !dbg !7986
  %1 = bitcast i8* %0 to %struct.MLoopUV*, !dbg !7986
  store %struct.MLoopUV* %1, %struct.MLoopUV** %min, align 8, !dbg !7985
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %max, metadata !7987, metadata !DIExpression()), !dbg !7988
  %2 = load i8*, i8** %vmax.addr, align 8, !dbg !7989
  %3 = bitcast i8* %2 to %struct.MLoopUV*, !dbg !7989
  store %struct.MLoopUV* %3, %struct.MLoopUV** %max, align 8, !dbg !7988
  %4 = load %struct.MLoopUV*, %struct.MLoopUV** %min, align 8, !dbg !7990
  %uv = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %4, i32 0, i32 0, !dbg !7990
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 1, !dbg !7990
  store float 0x46293E5940000000, float* %arrayidx, align 4, !dbg !7990
  %5 = load %struct.MLoopUV*, %struct.MLoopUV** %min, align 8, !dbg !7990
  %uv1 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %5, i32 0, i32 0, !dbg !7990
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !7990
  store float 0x46293E5940000000, float* %arrayidx2, align 4, !dbg !7990
  %6 = load %struct.MLoopUV*, %struct.MLoopUV** %max, align 8, !dbg !7990
  %uv3 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %6, i32 0, i32 0, !dbg !7990
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %uv3, i64 0, i64 1, !dbg !7990
  store float 0xC6293E5940000000, float* %arrayidx4, align 4, !dbg !7990
  %7 = load %struct.MLoopUV*, %struct.MLoopUV** %max, align 8, !dbg !7990
  %uv5 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %7, i32 0, i32 0, !dbg !7990
  %arrayidx6 = getelementptr inbounds [2 x float], [2 x float]* %uv5, i64 0, i64 0, !dbg !7990
  store float 0xC6293E5940000000, float* %arrayidx6, align 4, !dbg !7990
  ret void, !dbg !7992
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerAdd_mloopuv(i8* %data1, i8* %data2) #0 !dbg !7993 {
entry:
  %data1.addr = alloca i8*, align 8
  %data2.addr = alloca i8*, align 8
  %l1 = alloca %struct.MLoopUV*, align 8
  %l2 = alloca %struct.MLoopUV*, align 8
  store i8* %data1, i8** %data1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data1.addr, metadata !7994, metadata !DIExpression()), !dbg !7995
  store i8* %data2, i8** %data2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data2.addr, metadata !7996, metadata !DIExpression()), !dbg !7997
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %l1, metadata !7998, metadata !DIExpression()), !dbg !7999
  %0 = load i8*, i8** %data1.addr, align 8, !dbg !8000
  %1 = bitcast i8* %0 to %struct.MLoopUV*, !dbg !8000
  store %struct.MLoopUV* %1, %struct.MLoopUV** %l1, align 8, !dbg !7999
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %l2, metadata !8001, metadata !DIExpression()), !dbg !8002
  %2 = load i8*, i8** %data2.addr, align 8, !dbg !8003
  %3 = bitcast i8* %2 to %struct.MLoopUV*, !dbg !8003
  store %struct.MLoopUV* %3, %struct.MLoopUV** %l2, align 8, !dbg !8002
  %4 = load %struct.MLoopUV*, %struct.MLoopUV** %l1, align 8, !dbg !8004
  %uv = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %4, i32 0, i32 0, !dbg !8005
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !8004
  %5 = load %struct.MLoopUV*, %struct.MLoopUV** %l2, align 8, !dbg !8006
  %uv1 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %5, i32 0, i32 0, !dbg !8007
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !8006
  call void @add_v2_v2(float* %arraydecay, float* %arraydecay2), !dbg !8008
  ret void, !dbg !8009
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDoMinMax_mloopuv(i8* %data, i8* %vmin, i8* %vmax) #0 !dbg !8010 {
entry:
  %data.addr = alloca i8*, align 8
  %vmin.addr = alloca i8*, align 8
  %vmax.addr = alloca i8*, align 8
  %luv = alloca %struct.MLoopUV*, align 8
  %min = alloca %struct.MLoopUV*, align 8
  %max = alloca %struct.MLoopUV*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8011, metadata !DIExpression()), !dbg !8012
  store i8* %vmin, i8** %vmin.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmin.addr, metadata !8013, metadata !DIExpression()), !dbg !8014
  store i8* %vmax, i8** %vmax.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmax.addr, metadata !8015, metadata !DIExpression()), !dbg !8016
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %luv, metadata !8017, metadata !DIExpression()), !dbg !8018
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8019
  %1 = bitcast i8* %0 to %struct.MLoopUV*, !dbg !8019
  store %struct.MLoopUV* %1, %struct.MLoopUV** %luv, align 8, !dbg !8018
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %min, metadata !8020, metadata !DIExpression()), !dbg !8021
  %2 = load i8*, i8** %vmin.addr, align 8, !dbg !8022
  %3 = bitcast i8* %2 to %struct.MLoopUV*, !dbg !8022
  store %struct.MLoopUV* %3, %struct.MLoopUV** %min, align 8, !dbg !8021
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %max, metadata !8023, metadata !DIExpression()), !dbg !8024
  %4 = load i8*, i8** %vmax.addr, align 8, !dbg !8025
  %5 = bitcast i8* %4 to %struct.MLoopUV*, !dbg !8025
  store %struct.MLoopUV* %5, %struct.MLoopUV** %max, align 8, !dbg !8024
  %6 = load %struct.MLoopUV*, %struct.MLoopUV** %min, align 8, !dbg !8026
  %uv = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %6, i32 0, i32 0, !dbg !8027
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !8026
  %7 = load %struct.MLoopUV*, %struct.MLoopUV** %max, align 8, !dbg !8028
  %uv1 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %7, i32 0, i32 0, !dbg !8029
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !8028
  %8 = load %struct.MLoopUV*, %struct.MLoopUV** %luv, align 8, !dbg !8030
  %uv3 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %8, i32 0, i32 0, !dbg !8031
  %arraydecay4 = getelementptr inbounds [2 x float], [2 x float]* %uv3, i64 0, i64 0, !dbg !8030
  call void @minmax_v2v2_v2(float* %arraydecay, float* %arraydecay2, float* %arraydecay4), !dbg !8032
  ret void, !dbg !8033
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopyValue_mloopuv(i8* %source, i8* %dest) #0 !dbg !8034 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %luv1 = alloca %struct.MLoopUV*, align 8
  %luv2 = alloca %struct.MLoopUV*, align 8
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !8035, metadata !DIExpression()), !dbg !8036
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !8037, metadata !DIExpression()), !dbg !8038
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %luv1, metadata !8039, metadata !DIExpression()), !dbg !8040
  %0 = load i8*, i8** %source.addr, align 8, !dbg !8041
  %1 = bitcast i8* %0 to %struct.MLoopUV*, !dbg !8041
  store %struct.MLoopUV* %1, %struct.MLoopUV** %luv1, align 8, !dbg !8040
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %luv2, metadata !8042, metadata !DIExpression()), !dbg !8043
  %2 = load i8*, i8** %dest.addr, align 8, !dbg !8044
  %3 = bitcast i8* %2 to %struct.MLoopUV*, !dbg !8044
  store %struct.MLoopUV* %3, %struct.MLoopUV** %luv2, align 8, !dbg !8043
  %4 = load %struct.MLoopUV*, %struct.MLoopUV** %luv2, align 8, !dbg !8045
  %uv = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %4, i32 0, i32 0, !dbg !8046
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !8045
  %5 = load %struct.MLoopUV*, %struct.MLoopUV** %luv1, align 8, !dbg !8047
  %uv1 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %5, i32 0, i32 0, !dbg !8048
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !8047
  call void @copy_v2_v2(float* %arraydecay, float* %arraydecay2), !dbg !8049
  ret void, !dbg !8050
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_mloopcol(i8** %sources, float* %weights, float* %sub_weights, i32 %count, i8* %dest) #0 !dbg !8051 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %mc = alloca %struct.MLoopCol*, align 8
  %i = alloca i32, align 4
  %sub_weight = alloca float*, align 8
  %col = alloca %struct.anon.2, align 4
  %weight = alloca float, align 4
  %src = alloca %struct.MLoopCol*, align 8
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !8052, metadata !DIExpression()), !dbg !8053
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !8054, metadata !DIExpression()), !dbg !8055
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !8056, metadata !DIExpression()), !dbg !8057
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !8058, metadata !DIExpression()), !dbg !8059
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !8060, metadata !DIExpression()), !dbg !8061
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %mc, metadata !8062, metadata !DIExpression()), !dbg !8063
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !8064
  %1 = bitcast i8* %0 to %struct.MLoopCol*, !dbg !8064
  store %struct.MLoopCol* %1, %struct.MLoopCol** %mc, align 8, !dbg !8063
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8065, metadata !DIExpression()), !dbg !8066
  call void @llvm.dbg.declare(metadata float** %sub_weight, metadata !8067, metadata !DIExpression()), !dbg !8068
  call void @llvm.dbg.declare(metadata %struct.anon.2* %col, metadata !8069, metadata !DIExpression()), !dbg !8076
  %b = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 3, !dbg !8077
  store float 0.000000e+00, float* %b, align 4, !dbg !8078
  %g = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 2, !dbg !8079
  store float 0.000000e+00, float* %g, align 4, !dbg !8080
  %r = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 1, !dbg !8081
  store float 0.000000e+00, float* %r, align 4, !dbg !8082
  %a = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 0, !dbg !8083
  store float 0.000000e+00, float* %a, align 4, !dbg !8084
  %2 = load float*, float** %sub_weights.addr, align 8, !dbg !8085
  store float* %2, float** %sub_weight, align 8, !dbg !8086
  store i32 0, i32* %i, align 4, !dbg !8087
  br label %for.cond, !dbg !8089

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !8090
  %4 = load i32, i32* %count.addr, align 4, !dbg !8092
  %cmp = icmp slt i32 %3, %4, !dbg !8093
  br i1 %cmp, label %for.body, label %for.end, !dbg !8094

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %weight, metadata !8095, metadata !DIExpression()), !dbg !8097
  %5 = load float*, float** %weights.addr, align 8, !dbg !8098
  %tobool = icmp ne float* %5, null, !dbg !8098
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8098

cond.true:                                        ; preds = %for.body
  %6 = load float*, float** %weights.addr, align 8, !dbg !8099
  %7 = load i32, i32* %i, align 4, !dbg !8100
  %idxprom = sext i32 %7 to i64, !dbg !8099
  %arrayidx = getelementptr inbounds float, float* %6, i64 %idxprom, !dbg !8099
  %8 = load float, float* %arrayidx, align 4, !dbg !8099
  br label %cond.end, !dbg !8098

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !8098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %8, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !8098
  store float %cond, float* %weight, align 4, !dbg !8097
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %src, metadata !8101, metadata !DIExpression()), !dbg !8102
  %9 = load i8**, i8*** %sources.addr, align 8, !dbg !8103
  %10 = load i32, i32* %i, align 4, !dbg !8104
  %idxprom1 = sext i32 %10 to i64, !dbg !8103
  %arrayidx2 = getelementptr inbounds i8*, i8** %9, i64 %idxprom1, !dbg !8103
  %11 = load i8*, i8** %arrayidx2, align 8, !dbg !8103
  %12 = bitcast i8* %11 to %struct.MLoopCol*, !dbg !8103
  store %struct.MLoopCol* %12, %struct.MLoopCol** %src, align 8, !dbg !8102
  %13 = load float*, float** %sub_weights.addr, align 8, !dbg !8105
  %tobool3 = icmp ne float* %13, null, !dbg !8105
  br i1 %tobool3, label %if.then, label %if.else, !dbg !8107

if.then:                                          ; preds = %cond.end
  %14 = load %struct.MLoopCol*, %struct.MLoopCol** %src, align 8, !dbg !8108
  %r4 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %14, i32 0, i32 0, !dbg !8110
  %15 = load i8, i8* %r4, align 1, !dbg !8110
  %conv = zext i8 %15 to i32, !dbg !8108
  %conv5 = sitofp i32 %conv to float, !dbg !8108
  %16 = load float*, float** %sub_weight, align 8, !dbg !8111
  %17 = load float, float* %16, align 4, !dbg !8112
  %mul = fmul float %conv5, %17, !dbg !8113
  %18 = load float, float* %weight, align 4, !dbg !8114
  %mul6 = fmul float %mul, %18, !dbg !8115
  %r7 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 1, !dbg !8116
  %19 = load float, float* %r7, align 4, !dbg !8117
  %add = fadd float %19, %mul6, !dbg !8117
  store float %add, float* %r7, align 4, !dbg !8117
  %20 = load %struct.MLoopCol*, %struct.MLoopCol** %src, align 8, !dbg !8118
  %g8 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %20, i32 0, i32 1, !dbg !8119
  %21 = load i8, i8* %g8, align 1, !dbg !8119
  %conv9 = zext i8 %21 to i32, !dbg !8118
  %conv10 = sitofp i32 %conv9 to float, !dbg !8118
  %22 = load float*, float** %sub_weight, align 8, !dbg !8120
  %23 = load float, float* %22, align 4, !dbg !8121
  %mul11 = fmul float %conv10, %23, !dbg !8122
  %24 = load float, float* %weight, align 4, !dbg !8123
  %mul12 = fmul float %mul11, %24, !dbg !8124
  %g13 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 2, !dbg !8125
  %25 = load float, float* %g13, align 4, !dbg !8126
  %add14 = fadd float %25, %mul12, !dbg !8126
  store float %add14, float* %g13, align 4, !dbg !8126
  %26 = load %struct.MLoopCol*, %struct.MLoopCol** %src, align 8, !dbg !8127
  %b15 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %26, i32 0, i32 2, !dbg !8128
  %27 = load i8, i8* %b15, align 1, !dbg !8128
  %conv16 = zext i8 %27 to i32, !dbg !8127
  %conv17 = sitofp i32 %conv16 to float, !dbg !8127
  %28 = load float*, float** %sub_weight, align 8, !dbg !8129
  %29 = load float, float* %28, align 4, !dbg !8130
  %mul18 = fmul float %conv17, %29, !dbg !8131
  %30 = load float, float* %weight, align 4, !dbg !8132
  %mul19 = fmul float %mul18, %30, !dbg !8133
  %b20 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 3, !dbg !8134
  %31 = load float, float* %b20, align 4, !dbg !8135
  %add21 = fadd float %31, %mul19, !dbg !8135
  store float %add21, float* %b20, align 4, !dbg !8135
  %32 = load %struct.MLoopCol*, %struct.MLoopCol** %src, align 8, !dbg !8136
  %a22 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %32, i32 0, i32 3, !dbg !8137
  %33 = load i8, i8* %a22, align 1, !dbg !8137
  %conv23 = zext i8 %33 to i32, !dbg !8136
  %conv24 = sitofp i32 %conv23 to float, !dbg !8136
  %34 = load float*, float** %sub_weight, align 8, !dbg !8138
  %35 = load float, float* %34, align 4, !dbg !8139
  %mul25 = fmul float %conv24, %35, !dbg !8140
  %36 = load float, float* %weight, align 4, !dbg !8141
  %mul26 = fmul float %mul25, %36, !dbg !8142
  %a27 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 0, !dbg !8143
  %37 = load float, float* %a27, align 4, !dbg !8144
  %add28 = fadd float %37, %mul26, !dbg !8144
  store float %add28, float* %a27, align 4, !dbg !8144
  %38 = load float*, float** %sub_weight, align 8, !dbg !8145
  %incdec.ptr = getelementptr inbounds float, float* %38, i32 1, !dbg !8145
  store float* %incdec.ptr, float** %sub_weight, align 8, !dbg !8145
  br label %if.end, !dbg !8146

if.else:                                          ; preds = %cond.end
  %39 = load %struct.MLoopCol*, %struct.MLoopCol** %src, align 8, !dbg !8147
  %r29 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %39, i32 0, i32 0, !dbg !8149
  %40 = load i8, i8* %r29, align 1, !dbg !8149
  %conv30 = zext i8 %40 to i32, !dbg !8147
  %conv31 = sitofp i32 %conv30 to float, !dbg !8147
  %41 = load float, float* %weight, align 4, !dbg !8150
  %mul32 = fmul float %conv31, %41, !dbg !8151
  %r33 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 1, !dbg !8152
  %42 = load float, float* %r33, align 4, !dbg !8153
  %add34 = fadd float %42, %mul32, !dbg !8153
  store float %add34, float* %r33, align 4, !dbg !8153
  %43 = load %struct.MLoopCol*, %struct.MLoopCol** %src, align 8, !dbg !8154
  %g35 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %43, i32 0, i32 1, !dbg !8155
  %44 = load i8, i8* %g35, align 1, !dbg !8155
  %conv36 = zext i8 %44 to i32, !dbg !8154
  %conv37 = sitofp i32 %conv36 to float, !dbg !8154
  %45 = load float, float* %weight, align 4, !dbg !8156
  %mul38 = fmul float %conv37, %45, !dbg !8157
  %g39 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 2, !dbg !8158
  %46 = load float, float* %g39, align 4, !dbg !8159
  %add40 = fadd float %46, %mul38, !dbg !8159
  store float %add40, float* %g39, align 4, !dbg !8159
  %47 = load %struct.MLoopCol*, %struct.MLoopCol** %src, align 8, !dbg !8160
  %b41 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %47, i32 0, i32 2, !dbg !8161
  %48 = load i8, i8* %b41, align 1, !dbg !8161
  %conv42 = zext i8 %48 to i32, !dbg !8160
  %conv43 = sitofp i32 %conv42 to float, !dbg !8160
  %49 = load float, float* %weight, align 4, !dbg !8162
  %mul44 = fmul float %conv43, %49, !dbg !8163
  %b45 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 3, !dbg !8164
  %50 = load float, float* %b45, align 4, !dbg !8165
  %add46 = fadd float %50, %mul44, !dbg !8165
  store float %add46, float* %b45, align 4, !dbg !8165
  %51 = load %struct.MLoopCol*, %struct.MLoopCol** %src, align 8, !dbg !8166
  %a47 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %51, i32 0, i32 3, !dbg !8167
  %52 = load i8, i8* %a47, align 1, !dbg !8167
  %conv48 = zext i8 %52 to i32, !dbg !8166
  %conv49 = sitofp i32 %conv48 to float, !dbg !8166
  %53 = load float, float* %weight, align 4, !dbg !8168
  %mul50 = fmul float %conv49, %53, !dbg !8169
  %a51 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 0, !dbg !8170
  %54 = load float, float* %a51, align 4, !dbg !8171
  %add52 = fadd float %54, %mul50, !dbg !8171
  store float %add52, float* %a51, align 4, !dbg !8171
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !8172

for.inc:                                          ; preds = %if.end
  %55 = load i32, i32* %i, align 4, !dbg !8173
  %inc = add nsw i32 %55, 1, !dbg !8173
  store i32 %inc, i32* %i, align 4, !dbg !8173
  br label %for.cond, !dbg !8174, !llvm.loop !8175

for.end:                                          ; preds = %for.cond
  %a53 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 0, !dbg !8177
  %56 = load float, float* %a53, align 4, !dbg !8177
  %cmp54 = fcmp olt float %56, 0.000000e+00, !dbg !8177
  br i1 %cmp54, label %if.then56, label %if.else58, !dbg !8180

if.then56:                                        ; preds = %for.end
  %a57 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 0, !dbg !8177
  store float 0.000000e+00, float* %a57, align 4, !dbg !8177
  br label %if.end65, !dbg !8177

if.else58:                                        ; preds = %for.end
  %a59 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 0, !dbg !8181
  %57 = load float, float* %a59, align 4, !dbg !8181
  %cmp60 = fcmp ogt float %57, 2.550000e+02, !dbg !8181
  br i1 %cmp60, label %if.then62, label %if.end64, !dbg !8177

if.then62:                                        ; preds = %if.else58
  %a63 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 0, !dbg !8181
  store float 2.550000e+02, float* %a63, align 4, !dbg !8181
  br label %if.end64, !dbg !8181

if.end64:                                         ; preds = %if.then62, %if.else58
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then56
  %r66 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 1, !dbg !8183
  %58 = load float, float* %r66, align 4, !dbg !8183
  %cmp67 = fcmp olt float %58, 0.000000e+00, !dbg !8183
  br i1 %cmp67, label %if.then69, label %if.else71, !dbg !8186

if.then69:                                        ; preds = %if.end65
  %r70 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 1, !dbg !8183
  store float 0.000000e+00, float* %r70, align 4, !dbg !8183
  br label %if.end78, !dbg !8183

if.else71:                                        ; preds = %if.end65
  %r72 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 1, !dbg !8187
  %59 = load float, float* %r72, align 4, !dbg !8187
  %cmp73 = fcmp ogt float %59, 2.550000e+02, !dbg !8187
  br i1 %cmp73, label %if.then75, label %if.end77, !dbg !8183

if.then75:                                        ; preds = %if.else71
  %r76 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 1, !dbg !8187
  store float 2.550000e+02, float* %r76, align 4, !dbg !8187
  br label %if.end77, !dbg !8187

if.end77:                                         ; preds = %if.then75, %if.else71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then69
  %g79 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 2, !dbg !8189
  %60 = load float, float* %g79, align 4, !dbg !8189
  %cmp80 = fcmp olt float %60, 0.000000e+00, !dbg !8189
  br i1 %cmp80, label %if.then82, label %if.else84, !dbg !8192

if.then82:                                        ; preds = %if.end78
  %g83 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 2, !dbg !8189
  store float 0.000000e+00, float* %g83, align 4, !dbg !8189
  br label %if.end91, !dbg !8189

if.else84:                                        ; preds = %if.end78
  %g85 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 2, !dbg !8193
  %61 = load float, float* %g85, align 4, !dbg !8193
  %cmp86 = fcmp ogt float %61, 2.550000e+02, !dbg !8193
  br i1 %cmp86, label %if.then88, label %if.end90, !dbg !8189

if.then88:                                        ; preds = %if.else84
  %g89 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 2, !dbg !8193
  store float 2.550000e+02, float* %g89, align 4, !dbg !8193
  br label %if.end90, !dbg !8193

if.end90:                                         ; preds = %if.then88, %if.else84
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.then82
  %b92 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 3, !dbg !8195
  %62 = load float, float* %b92, align 4, !dbg !8195
  %cmp93 = fcmp olt float %62, 0.000000e+00, !dbg !8195
  br i1 %cmp93, label %if.then95, label %if.else97, !dbg !8198

if.then95:                                        ; preds = %if.end91
  %b96 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 3, !dbg !8195
  store float 0.000000e+00, float* %b96, align 4, !dbg !8195
  br label %if.end104, !dbg !8195

if.else97:                                        ; preds = %if.end91
  %b98 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 3, !dbg !8199
  %63 = load float, float* %b98, align 4, !dbg !8199
  %cmp99 = fcmp ogt float %63, 2.550000e+02, !dbg !8199
  br i1 %cmp99, label %if.then101, label %if.end103, !dbg !8195

if.then101:                                       ; preds = %if.else97
  %b102 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 3, !dbg !8199
  store float 2.550000e+02, float* %b102, align 4, !dbg !8199
  br label %if.end103, !dbg !8199

if.end103:                                        ; preds = %if.then101, %if.else97
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then95
  %r105 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 1, !dbg !8201
  %64 = load float, float* %r105, align 4, !dbg !8201
  %conv106 = fptosi float %64 to i32, !dbg !8202
  %conv107 = trunc i32 %conv106 to i8, !dbg !8202
  %65 = load %struct.MLoopCol*, %struct.MLoopCol** %mc, align 8, !dbg !8203
  %r108 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %65, i32 0, i32 0, !dbg !8204
  store i8 %conv107, i8* %r108, align 1, !dbg !8205
  %g109 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 2, !dbg !8206
  %66 = load float, float* %g109, align 4, !dbg !8206
  %conv110 = fptosi float %66 to i32, !dbg !8207
  %conv111 = trunc i32 %conv110 to i8, !dbg !8207
  %67 = load %struct.MLoopCol*, %struct.MLoopCol** %mc, align 8, !dbg !8208
  %g112 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %67, i32 0, i32 1, !dbg !8209
  store i8 %conv111, i8* %g112, align 1, !dbg !8210
  %b113 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 3, !dbg !8211
  %68 = load float, float* %b113, align 4, !dbg !8211
  %conv114 = fptosi float %68 to i32, !dbg !8212
  %conv115 = trunc i32 %conv114 to i8, !dbg !8212
  %69 = load %struct.MLoopCol*, %struct.MLoopCol** %mc, align 8, !dbg !8213
  %b116 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %69, i32 0, i32 2, !dbg !8214
  store i8 %conv115, i8* %b116, align 1, !dbg !8215
  %a117 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %col, i32 0, i32 0, !dbg !8216
  %70 = load float, float* %a117, align 4, !dbg !8216
  %conv118 = fptosi float %70 to i32, !dbg !8217
  %conv119 = trunc i32 %conv118 to i8, !dbg !8217
  %71 = load %struct.MLoopCol*, %struct.MLoopCol** %mc, align 8, !dbg !8218
  %a120 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %71, i32 0, i32 3, !dbg !8219
  store i8 %conv119, i8* %a120, align 1, !dbg !8220
  ret void, !dbg !8221
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDefault_mloopcol(i8* %data, i32 %count) #0 !dbg !8222 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %default_mloopcol = alloca %struct.MLoopCol, align 1
  %mlcol = alloca %struct.MLoopCol*, align 8
  %i = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8223, metadata !DIExpression()), !dbg !8224
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !8225, metadata !DIExpression()), !dbg !8226
  call void @llvm.dbg.declare(metadata %struct.MLoopCol* %default_mloopcol, metadata !8227, metadata !DIExpression()), !dbg !8228
  %0 = bitcast %struct.MLoopCol* %default_mloopcol to i8*, !dbg !8228
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds (%struct.MLoopCol, %struct.MLoopCol* @__const.layerDefault_mloopcol.default_mloopcol, i32 0, i32 0), i64 4, i1 false), !dbg !8228
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %mlcol, metadata !8229, metadata !DIExpression()), !dbg !8230
  %1 = load i8*, i8** %data.addr, align 8, !dbg !8231
  %2 = bitcast i8* %1 to %struct.MLoopCol*, !dbg !8232
  store %struct.MLoopCol* %2, %struct.MLoopCol** %mlcol, align 8, !dbg !8230
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8233, metadata !DIExpression()), !dbg !8234
  store i32 0, i32* %i, align 4, !dbg !8235
  br label %for.cond, !dbg !8237

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !8238
  %4 = load i32, i32* %count.addr, align 4, !dbg !8240
  %cmp = icmp slt i32 %3, %4, !dbg !8241
  br i1 %cmp, label %for.body, label %for.end, !dbg !8242

for.body:                                         ; preds = %for.cond
  %5 = load %struct.MLoopCol*, %struct.MLoopCol** %mlcol, align 8, !dbg !8243
  %6 = load i32, i32* %i, align 4, !dbg !8244
  %idxprom = sext i32 %6 to i64, !dbg !8243
  %arrayidx = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %5, i64 %idxprom, !dbg !8243
  %7 = bitcast %struct.MLoopCol* %arrayidx to i8*, !dbg !8245
  %8 = bitcast %struct.MLoopCol* %default_mloopcol to i8*, !dbg !8245
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %8, i64 4, i1 false), !dbg !8245
  br label %for.inc, !dbg !8243

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !8246
  %inc = add nsw i32 %9, 1, !dbg !8246
  store i32 %inc, i32* %i, align 4, !dbg !8246
  br label %for.cond, !dbg !8247, !llvm.loop !8248

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8250
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @layerEqual_mloopcol(i8* %data1, i8* %data2) #0 !dbg !8251 {
entry:
  %data1.addr = alloca i8*, align 8
  %data2.addr = alloca i8*, align 8
  %m1 = alloca %struct.MLoopCol*, align 8
  %m2 = alloca %struct.MLoopCol*, align 8
  %r = alloca float, align 4
  %g = alloca float, align 4
  %b = alloca float, align 4
  %a = alloca float, align 4
  store i8* %data1, i8** %data1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data1.addr, metadata !8252, metadata !DIExpression()), !dbg !8253
  store i8* %data2, i8** %data2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data2.addr, metadata !8254, metadata !DIExpression()), !dbg !8255
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %m1, metadata !8256, metadata !DIExpression()), !dbg !8259
  %0 = load i8*, i8** %data1.addr, align 8, !dbg !8260
  %1 = bitcast i8* %0 to %struct.MLoopCol*, !dbg !8260
  store %struct.MLoopCol* %1, %struct.MLoopCol** %m1, align 8, !dbg !8259
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %m2, metadata !8261, metadata !DIExpression()), !dbg !8262
  %2 = load i8*, i8** %data2.addr, align 8, !dbg !8263
  %3 = bitcast i8* %2 to %struct.MLoopCol*, !dbg !8263
  store %struct.MLoopCol* %3, %struct.MLoopCol** %m2, align 8, !dbg !8262
  call void @llvm.dbg.declare(metadata float* %r, metadata !8264, metadata !DIExpression()), !dbg !8265
  call void @llvm.dbg.declare(metadata float* %g, metadata !8266, metadata !DIExpression()), !dbg !8267
  call void @llvm.dbg.declare(metadata float* %b, metadata !8268, metadata !DIExpression()), !dbg !8269
  call void @llvm.dbg.declare(metadata float* %a, metadata !8270, metadata !DIExpression()), !dbg !8271
  %4 = load %struct.MLoopCol*, %struct.MLoopCol** %m1, align 8, !dbg !8272
  %r1 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %4, i32 0, i32 0, !dbg !8273
  %5 = load i8, i8* %r1, align 1, !dbg !8273
  %conv = zext i8 %5 to i32, !dbg !8272
  %6 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8274
  %r2 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %6, i32 0, i32 0, !dbg !8275
  %7 = load i8, i8* %r2, align 1, !dbg !8275
  %conv3 = zext i8 %7 to i32, !dbg !8274
  %sub = sub nsw i32 %conv, %conv3, !dbg !8276
  %conv4 = sitofp i32 %sub to float, !dbg !8272
  store float %conv4, float* %r, align 4, !dbg !8277
  %8 = load %struct.MLoopCol*, %struct.MLoopCol** %m1, align 8, !dbg !8278
  %g5 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %8, i32 0, i32 1, !dbg !8279
  %9 = load i8, i8* %g5, align 1, !dbg !8279
  %conv6 = zext i8 %9 to i32, !dbg !8278
  %10 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8280
  %g7 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %10, i32 0, i32 1, !dbg !8281
  %11 = load i8, i8* %g7, align 1, !dbg !8281
  %conv8 = zext i8 %11 to i32, !dbg !8280
  %sub9 = sub nsw i32 %conv6, %conv8, !dbg !8282
  %conv10 = sitofp i32 %sub9 to float, !dbg !8278
  store float %conv10, float* %g, align 4, !dbg !8283
  %12 = load %struct.MLoopCol*, %struct.MLoopCol** %m1, align 8, !dbg !8284
  %b11 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %12, i32 0, i32 2, !dbg !8285
  %13 = load i8, i8* %b11, align 1, !dbg !8285
  %conv12 = zext i8 %13 to i32, !dbg !8284
  %14 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8286
  %b13 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %14, i32 0, i32 2, !dbg !8287
  %15 = load i8, i8* %b13, align 1, !dbg !8287
  %conv14 = zext i8 %15 to i32, !dbg !8286
  %sub15 = sub nsw i32 %conv12, %conv14, !dbg !8288
  %conv16 = sitofp i32 %sub15 to float, !dbg !8284
  store float %conv16, float* %b, align 4, !dbg !8289
  %16 = load %struct.MLoopCol*, %struct.MLoopCol** %m1, align 8, !dbg !8290
  %a17 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %16, i32 0, i32 3, !dbg !8291
  %17 = load i8, i8* %a17, align 1, !dbg !8291
  %conv18 = zext i8 %17 to i32, !dbg !8290
  %18 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8292
  %a19 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %18, i32 0, i32 3, !dbg !8293
  %19 = load i8, i8* %a19, align 1, !dbg !8293
  %conv20 = zext i8 %19 to i32, !dbg !8292
  %sub21 = sub nsw i32 %conv18, %conv20, !dbg !8294
  %conv22 = sitofp i32 %sub21 to float, !dbg !8290
  store float %conv22, float* %a, align 4, !dbg !8295
  %20 = load float, float* %r, align 4, !dbg !8296
  %21 = load float, float* %r, align 4, !dbg !8297
  %mul = fmul float %20, %21, !dbg !8298
  %22 = load float, float* %g, align 4, !dbg !8299
  %23 = load float, float* %g, align 4, !dbg !8300
  %mul23 = fmul float %22, %23, !dbg !8301
  %add = fadd float %mul, %mul23, !dbg !8302
  %24 = load float, float* %b, align 4, !dbg !8303
  %25 = load float, float* %b, align 4, !dbg !8304
  %mul24 = fmul float %24, %25, !dbg !8305
  %add25 = fadd float %add, %mul24, !dbg !8306
  %26 = load float, float* %a, align 4, !dbg !8307
  %27 = load float, float* %a, align 4, !dbg !8308
  %mul26 = fmul float %26, %27, !dbg !8309
  %add27 = fadd float %add25, %mul26, !dbg !8310
  %cmp = fcmp olt float %add27, 0x3F50624DE0000000, !dbg !8311
  %conv28 = zext i1 %cmp to i32, !dbg !8311
  %conv29 = trunc i32 %conv28 to i8, !dbg !8296
  ret i8 %conv29, !dbg !8312
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerMultiply_mloopcol(i8* %data, float %fac) #0 !dbg !8313 {
entry:
  %data.addr = alloca i8*, align 8
  %fac.addr = alloca float, align 4
  %m = alloca %struct.MLoopCol*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8314, metadata !DIExpression()), !dbg !8315
  store float %fac, float* %fac.addr, align 4
  call void @llvm.dbg.declare(metadata float* %fac.addr, metadata !8316, metadata !DIExpression()), !dbg !8317
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %m, metadata !8318, metadata !DIExpression()), !dbg !8319
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8320
  %1 = bitcast i8* %0 to %struct.MLoopCol*, !dbg !8320
  store %struct.MLoopCol* %1, %struct.MLoopCol** %m, align 8, !dbg !8319
  %2 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8321
  %r = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %2, i32 0, i32 0, !dbg !8322
  %3 = load i8, i8* %r, align 1, !dbg !8322
  %conv = uitofp i8 %3 to float, !dbg !8323
  %4 = load float, float* %fac.addr, align 4, !dbg !8324
  %mul = fmul float %conv, %4, !dbg !8325
  %conv1 = fptoui float %mul to i8, !dbg !8323
  %5 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8326
  %r2 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %5, i32 0, i32 0, !dbg !8327
  store i8 %conv1, i8* %r2, align 1, !dbg !8328
  %6 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8329
  %g = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %6, i32 0, i32 1, !dbg !8330
  %7 = load i8, i8* %g, align 1, !dbg !8330
  %conv3 = uitofp i8 %7 to float, !dbg !8331
  %8 = load float, float* %fac.addr, align 4, !dbg !8332
  %mul4 = fmul float %conv3, %8, !dbg !8333
  %conv5 = fptoui float %mul4 to i8, !dbg !8331
  %9 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8334
  %g6 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %9, i32 0, i32 1, !dbg !8335
  store i8 %conv5, i8* %g6, align 1, !dbg !8336
  %10 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8337
  %b = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %10, i32 0, i32 2, !dbg !8338
  %11 = load i8, i8* %b, align 1, !dbg !8338
  %conv7 = uitofp i8 %11 to float, !dbg !8339
  %12 = load float, float* %fac.addr, align 4, !dbg !8340
  %mul8 = fmul float %conv7, %12, !dbg !8341
  %conv9 = fptoui float %mul8 to i8, !dbg !8339
  %13 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8342
  %b10 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %13, i32 0, i32 2, !dbg !8343
  store i8 %conv9, i8* %b10, align 1, !dbg !8344
  %14 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8345
  %a = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %14, i32 0, i32 3, !dbg !8346
  %15 = load i8, i8* %a, align 1, !dbg !8346
  %conv11 = uitofp i8 %15 to float, !dbg !8347
  %16 = load float, float* %fac.addr, align 4, !dbg !8348
  %mul12 = fmul float %conv11, %16, !dbg !8349
  %conv13 = fptoui float %mul12 to i8, !dbg !8347
  %17 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8350
  %a14 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %17, i32 0, i32 3, !dbg !8351
  store i8 %conv13, i8* %a14, align 1, !dbg !8352
  ret void, !dbg !8353
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInitMinMax_mloopcol(i8* %vmin, i8* %vmax) #0 !dbg !8354 {
entry:
  %vmin.addr = alloca i8*, align 8
  %vmax.addr = alloca i8*, align 8
  %min = alloca %struct.MLoopCol*, align 8
  %max = alloca %struct.MLoopCol*, align 8
  store i8* %vmin, i8** %vmin.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmin.addr, metadata !8355, metadata !DIExpression()), !dbg !8356
  store i8* %vmax, i8** %vmax.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmax.addr, metadata !8357, metadata !DIExpression()), !dbg !8358
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %min, metadata !8359, metadata !DIExpression()), !dbg !8360
  %0 = load i8*, i8** %vmin.addr, align 8, !dbg !8361
  %1 = bitcast i8* %0 to %struct.MLoopCol*, !dbg !8361
  store %struct.MLoopCol* %1, %struct.MLoopCol** %min, align 8, !dbg !8360
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %max, metadata !8362, metadata !DIExpression()), !dbg !8363
  %2 = load i8*, i8** %vmax.addr, align 8, !dbg !8364
  %3 = bitcast i8* %2 to %struct.MLoopCol*, !dbg !8364
  store %struct.MLoopCol* %3, %struct.MLoopCol** %max, align 8, !dbg !8363
  %4 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8365
  %r = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %4, i32 0, i32 0, !dbg !8366
  store i8 -1, i8* %r, align 1, !dbg !8367
  %5 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8368
  %g = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %5, i32 0, i32 1, !dbg !8369
  store i8 -1, i8* %g, align 1, !dbg !8370
  %6 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8371
  %b = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %6, i32 0, i32 2, !dbg !8372
  store i8 -1, i8* %b, align 1, !dbg !8373
  %7 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8374
  %a = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %7, i32 0, i32 3, !dbg !8375
  store i8 -1, i8* %a, align 1, !dbg !8376
  %8 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8377
  %r1 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %8, i32 0, i32 0, !dbg !8378
  store i8 0, i8* %r1, align 1, !dbg !8379
  %9 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8380
  %g2 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %9, i32 0, i32 1, !dbg !8381
  store i8 0, i8* %g2, align 1, !dbg !8382
  %10 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8383
  %b3 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %10, i32 0, i32 2, !dbg !8384
  store i8 0, i8* %b3, align 1, !dbg !8385
  %11 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8386
  %a4 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %11, i32 0, i32 3, !dbg !8387
  store i8 0, i8* %a4, align 1, !dbg !8388
  ret void, !dbg !8389
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerAdd_mloopcol(i8* %data1, i8* %data2) #0 !dbg !8390 {
entry:
  %data1.addr = alloca i8*, align 8
  %data2.addr = alloca i8*, align 8
  %m = alloca %struct.MLoopCol*, align 8
  %m2 = alloca %struct.MLoopCol*, align 8
  store i8* %data1, i8** %data1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data1.addr, metadata !8391, metadata !DIExpression()), !dbg !8392
  store i8* %data2, i8** %data2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data2.addr, metadata !8393, metadata !DIExpression()), !dbg !8394
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %m, metadata !8395, metadata !DIExpression()), !dbg !8396
  %0 = load i8*, i8** %data1.addr, align 8, !dbg !8397
  %1 = bitcast i8* %0 to %struct.MLoopCol*, !dbg !8397
  store %struct.MLoopCol* %1, %struct.MLoopCol** %m, align 8, !dbg !8396
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %m2, metadata !8398, metadata !DIExpression()), !dbg !8399
  %2 = load i8*, i8** %data2.addr, align 8, !dbg !8400
  %3 = bitcast i8* %2 to %struct.MLoopCol*, !dbg !8400
  store %struct.MLoopCol* %3, %struct.MLoopCol** %m2, align 8, !dbg !8399
  %4 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8401
  %r = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %4, i32 0, i32 0, !dbg !8402
  %5 = load i8, i8* %r, align 1, !dbg !8402
  %conv = zext i8 %5 to i32, !dbg !8401
  %6 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8403
  %r1 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %6, i32 0, i32 0, !dbg !8404
  %7 = load i8, i8* %r1, align 1, !dbg !8405
  %conv2 = zext i8 %7 to i32, !dbg !8405
  %add = add nsw i32 %conv2, %conv, !dbg !8405
  %conv3 = trunc i32 %add to i8, !dbg !8405
  store i8 %conv3, i8* %r1, align 1, !dbg !8405
  %8 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8406
  %g = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %8, i32 0, i32 1, !dbg !8407
  %9 = load i8, i8* %g, align 1, !dbg !8407
  %conv4 = zext i8 %9 to i32, !dbg !8406
  %10 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8408
  %g5 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %10, i32 0, i32 1, !dbg !8409
  %11 = load i8, i8* %g5, align 1, !dbg !8410
  %conv6 = zext i8 %11 to i32, !dbg !8410
  %add7 = add nsw i32 %conv6, %conv4, !dbg !8410
  %conv8 = trunc i32 %add7 to i8, !dbg !8410
  store i8 %conv8, i8* %g5, align 1, !dbg !8410
  %12 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8411
  %b = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %12, i32 0, i32 2, !dbg !8412
  %13 = load i8, i8* %b, align 1, !dbg !8412
  %conv9 = zext i8 %13 to i32, !dbg !8411
  %14 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8413
  %b10 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %14, i32 0, i32 2, !dbg !8414
  %15 = load i8, i8* %b10, align 1, !dbg !8415
  %conv11 = zext i8 %15 to i32, !dbg !8415
  %add12 = add nsw i32 %conv11, %conv9, !dbg !8415
  %conv13 = trunc i32 %add12 to i8, !dbg !8415
  store i8 %conv13, i8* %b10, align 1, !dbg !8415
  %16 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8416
  %a = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %16, i32 0, i32 3, !dbg !8417
  %17 = load i8, i8* %a, align 1, !dbg !8417
  %conv14 = zext i8 %17 to i32, !dbg !8416
  %18 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8418
  %a15 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %18, i32 0, i32 3, !dbg !8419
  %19 = load i8, i8* %a15, align 1, !dbg !8420
  %conv16 = zext i8 %19 to i32, !dbg !8420
  %add17 = add nsw i32 %conv16, %conv14, !dbg !8420
  %conv18 = trunc i32 %add17 to i8, !dbg !8420
  store i8 %conv18, i8* %a15, align 1, !dbg !8420
  ret void, !dbg !8421
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDoMinMax_mloopcol(i8* %data, i8* %vmin, i8* %vmax) #0 !dbg !8422 {
entry:
  %data.addr = alloca i8*, align 8
  %vmin.addr = alloca i8*, align 8
  %vmax.addr = alloca i8*, align 8
  %m = alloca %struct.MLoopCol*, align 8
  %min = alloca %struct.MLoopCol*, align 8
  %max = alloca %struct.MLoopCol*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8423, metadata !DIExpression()), !dbg !8424
  store i8* %vmin, i8** %vmin.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmin.addr, metadata !8425, metadata !DIExpression()), !dbg !8426
  store i8* %vmax, i8** %vmax.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmax.addr, metadata !8427, metadata !DIExpression()), !dbg !8428
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %m, metadata !8429, metadata !DIExpression()), !dbg !8430
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8431
  %1 = bitcast i8* %0 to %struct.MLoopCol*, !dbg !8431
  store %struct.MLoopCol* %1, %struct.MLoopCol** %m, align 8, !dbg !8430
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %min, metadata !8432, metadata !DIExpression()), !dbg !8433
  %2 = load i8*, i8** %vmin.addr, align 8, !dbg !8434
  %3 = bitcast i8* %2 to %struct.MLoopCol*, !dbg !8434
  store %struct.MLoopCol* %3, %struct.MLoopCol** %min, align 8, !dbg !8433
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %max, metadata !8435, metadata !DIExpression()), !dbg !8436
  %4 = load i8*, i8** %vmax.addr, align 8, !dbg !8437
  %5 = bitcast i8* %4 to %struct.MLoopCol*, !dbg !8437
  store %struct.MLoopCol* %5, %struct.MLoopCol** %max, align 8, !dbg !8436
  %6 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8438
  %r = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %6, i32 0, i32 0, !dbg !8440
  %7 = load i8, i8* %r, align 1, !dbg !8440
  %conv = zext i8 %7 to i32, !dbg !8438
  %8 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8441
  %r1 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %8, i32 0, i32 0, !dbg !8442
  %9 = load i8, i8* %r1, align 1, !dbg !8442
  %conv2 = zext i8 %9 to i32, !dbg !8441
  %cmp = icmp slt i32 %conv, %conv2, !dbg !8443
  br i1 %cmp, label %if.then, label %if.end, !dbg !8444

if.then:                                          ; preds = %entry
  %10 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8445
  %r4 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %10, i32 0, i32 0, !dbg !8446
  %11 = load i8, i8* %r4, align 1, !dbg !8446
  %12 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8447
  %r5 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %12, i32 0, i32 0, !dbg !8448
  store i8 %11, i8* %r5, align 1, !dbg !8449
  br label %if.end, !dbg !8447

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8450
  %g = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %13, i32 0, i32 1, !dbg !8452
  %14 = load i8, i8* %g, align 1, !dbg !8452
  %conv6 = zext i8 %14 to i32, !dbg !8450
  %15 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8453
  %g7 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %15, i32 0, i32 1, !dbg !8454
  %16 = load i8, i8* %g7, align 1, !dbg !8454
  %conv8 = zext i8 %16 to i32, !dbg !8453
  %cmp9 = icmp slt i32 %conv6, %conv8, !dbg !8455
  br i1 %cmp9, label %if.then11, label %if.end14, !dbg !8456

if.then11:                                        ; preds = %if.end
  %17 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8457
  %g12 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %17, i32 0, i32 1, !dbg !8458
  %18 = load i8, i8* %g12, align 1, !dbg !8458
  %19 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8459
  %g13 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %19, i32 0, i32 1, !dbg !8460
  store i8 %18, i8* %g13, align 1, !dbg !8461
  br label %if.end14, !dbg !8459

if.end14:                                         ; preds = %if.then11, %if.end
  %20 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8462
  %b = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %20, i32 0, i32 2, !dbg !8464
  %21 = load i8, i8* %b, align 1, !dbg !8464
  %conv15 = zext i8 %21 to i32, !dbg !8462
  %22 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8465
  %b16 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %22, i32 0, i32 2, !dbg !8466
  %23 = load i8, i8* %b16, align 1, !dbg !8466
  %conv17 = zext i8 %23 to i32, !dbg !8465
  %cmp18 = icmp slt i32 %conv15, %conv17, !dbg !8467
  br i1 %cmp18, label %if.then20, label %if.end23, !dbg !8468

if.then20:                                        ; preds = %if.end14
  %24 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8469
  %b21 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %24, i32 0, i32 2, !dbg !8470
  %25 = load i8, i8* %b21, align 1, !dbg !8470
  %26 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8471
  %b22 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %26, i32 0, i32 2, !dbg !8472
  store i8 %25, i8* %b22, align 1, !dbg !8473
  br label %if.end23, !dbg !8471

if.end23:                                         ; preds = %if.then20, %if.end14
  %27 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8474
  %a = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %27, i32 0, i32 3, !dbg !8476
  %28 = load i8, i8* %a, align 1, !dbg !8476
  %conv24 = zext i8 %28 to i32, !dbg !8474
  %29 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8477
  %a25 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %29, i32 0, i32 3, !dbg !8478
  %30 = load i8, i8* %a25, align 1, !dbg !8478
  %conv26 = zext i8 %30 to i32, !dbg !8477
  %cmp27 = icmp slt i32 %conv24, %conv26, !dbg !8479
  br i1 %cmp27, label %if.then29, label %if.end32, !dbg !8480

if.then29:                                        ; preds = %if.end23
  %31 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8481
  %a30 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %31, i32 0, i32 3, !dbg !8482
  %32 = load i8, i8* %a30, align 1, !dbg !8482
  %33 = load %struct.MLoopCol*, %struct.MLoopCol** %min, align 8, !dbg !8483
  %a31 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %33, i32 0, i32 3, !dbg !8484
  store i8 %32, i8* %a31, align 1, !dbg !8485
  br label %if.end32, !dbg !8483

if.end32:                                         ; preds = %if.then29, %if.end23
  %34 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8486
  %r33 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %34, i32 0, i32 0, !dbg !8488
  %35 = load i8, i8* %r33, align 1, !dbg !8488
  %conv34 = zext i8 %35 to i32, !dbg !8486
  %36 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8489
  %r35 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %36, i32 0, i32 0, !dbg !8490
  %37 = load i8, i8* %r35, align 1, !dbg !8490
  %conv36 = zext i8 %37 to i32, !dbg !8489
  %cmp37 = icmp sgt i32 %conv34, %conv36, !dbg !8491
  br i1 %cmp37, label %if.then39, label %if.end42, !dbg !8492

if.then39:                                        ; preds = %if.end32
  %38 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8493
  %r40 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %38, i32 0, i32 0, !dbg !8494
  %39 = load i8, i8* %r40, align 1, !dbg !8494
  %40 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8495
  %r41 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %40, i32 0, i32 0, !dbg !8496
  store i8 %39, i8* %r41, align 1, !dbg !8497
  br label %if.end42, !dbg !8495

if.end42:                                         ; preds = %if.then39, %if.end32
  %41 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8498
  %g43 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %41, i32 0, i32 1, !dbg !8500
  %42 = load i8, i8* %g43, align 1, !dbg !8500
  %conv44 = zext i8 %42 to i32, !dbg !8498
  %43 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8501
  %g45 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %43, i32 0, i32 1, !dbg !8502
  %44 = load i8, i8* %g45, align 1, !dbg !8502
  %conv46 = zext i8 %44 to i32, !dbg !8501
  %cmp47 = icmp sgt i32 %conv44, %conv46, !dbg !8503
  br i1 %cmp47, label %if.then49, label %if.end52, !dbg !8504

if.then49:                                        ; preds = %if.end42
  %45 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8505
  %g50 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %45, i32 0, i32 1, !dbg !8506
  %46 = load i8, i8* %g50, align 1, !dbg !8506
  %47 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8507
  %g51 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %47, i32 0, i32 1, !dbg !8508
  store i8 %46, i8* %g51, align 1, !dbg !8509
  br label %if.end52, !dbg !8507

if.end52:                                         ; preds = %if.then49, %if.end42
  %48 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8510
  %b53 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %48, i32 0, i32 2, !dbg !8512
  %49 = load i8, i8* %b53, align 1, !dbg !8512
  %conv54 = zext i8 %49 to i32, !dbg !8510
  %50 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8513
  %b55 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %50, i32 0, i32 2, !dbg !8514
  %51 = load i8, i8* %b55, align 1, !dbg !8514
  %conv56 = zext i8 %51 to i32, !dbg !8513
  %cmp57 = icmp sgt i32 %conv54, %conv56, !dbg !8515
  br i1 %cmp57, label %if.then59, label %if.end62, !dbg !8516

if.then59:                                        ; preds = %if.end52
  %52 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8517
  %b60 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %52, i32 0, i32 2, !dbg !8518
  %53 = load i8, i8* %b60, align 1, !dbg !8518
  %54 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8519
  %b61 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %54, i32 0, i32 2, !dbg !8520
  store i8 %53, i8* %b61, align 1, !dbg !8521
  br label %if.end62, !dbg !8519

if.end62:                                         ; preds = %if.then59, %if.end52
  %55 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8522
  %a63 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %55, i32 0, i32 3, !dbg !8524
  %56 = load i8, i8* %a63, align 1, !dbg !8524
  %conv64 = zext i8 %56 to i32, !dbg !8522
  %57 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8525
  %a65 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %57, i32 0, i32 3, !dbg !8526
  %58 = load i8, i8* %a65, align 1, !dbg !8526
  %conv66 = zext i8 %58 to i32, !dbg !8525
  %cmp67 = icmp sgt i32 %conv64, %conv66, !dbg !8527
  br i1 %cmp67, label %if.then69, label %if.end72, !dbg !8528

if.then69:                                        ; preds = %if.end62
  %59 = load %struct.MLoopCol*, %struct.MLoopCol** %m, align 8, !dbg !8529
  %a70 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %59, i32 0, i32 3, !dbg !8530
  %60 = load i8, i8* %a70, align 1, !dbg !8530
  %61 = load %struct.MLoopCol*, %struct.MLoopCol** %max, align 8, !dbg !8531
  %a71 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %61, i32 0, i32 3, !dbg !8532
  store i8 %60, i8* %a71, align 1, !dbg !8533
  br label %if.end72, !dbg !8531

if.end72:                                         ; preds = %if.then69, %if.end62
  ret void, !dbg !8534
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopyValue_mloopcol(i8* %source, i8* %dest) #0 !dbg !8535 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %m1 = alloca %struct.MLoopCol*, align 8
  %m2 = alloca %struct.MLoopCol*, align 8
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !8536, metadata !DIExpression()), !dbg !8537
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !8538, metadata !DIExpression()), !dbg !8539
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %m1, metadata !8540, metadata !DIExpression()), !dbg !8541
  %0 = load i8*, i8** %source.addr, align 8, !dbg !8542
  %1 = bitcast i8* %0 to %struct.MLoopCol*, !dbg !8542
  store %struct.MLoopCol* %1, %struct.MLoopCol** %m1, align 8, !dbg !8541
  call void @llvm.dbg.declare(metadata %struct.MLoopCol** %m2, metadata !8543, metadata !DIExpression()), !dbg !8544
  %2 = load i8*, i8** %dest.addr, align 8, !dbg !8545
  %3 = bitcast i8* %2 to %struct.MLoopCol*, !dbg !8545
  store %struct.MLoopCol* %3, %struct.MLoopCol** %m2, align 8, !dbg !8544
  %4 = load %struct.MLoopCol*, %struct.MLoopCol** %m1, align 8, !dbg !8546
  %r = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %4, i32 0, i32 0, !dbg !8547
  %5 = load i8, i8* %r, align 1, !dbg !8547
  %6 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8548
  %r1 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %6, i32 0, i32 0, !dbg !8549
  store i8 %5, i8* %r1, align 1, !dbg !8550
  %7 = load %struct.MLoopCol*, %struct.MLoopCol** %m1, align 8, !dbg !8551
  %g = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %7, i32 0, i32 1, !dbg !8552
  %8 = load i8, i8* %g, align 1, !dbg !8552
  %9 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8553
  %g2 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %9, i32 0, i32 1, !dbg !8554
  store i8 %8, i8* %g2, align 1, !dbg !8555
  %10 = load %struct.MLoopCol*, %struct.MLoopCol** %m1, align 8, !dbg !8556
  %b = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %10, i32 0, i32 2, !dbg !8557
  %11 = load i8, i8* %b, align 1, !dbg !8557
  %12 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8558
  %b3 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %12, i32 0, i32 2, !dbg !8559
  store i8 %11, i8* %b3, align 1, !dbg !8560
  %13 = load %struct.MLoopCol*, %struct.MLoopCol** %m1, align 8, !dbg !8561
  %a = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %13, i32 0, i32 3, !dbg !8562
  %14 = load i8, i8* %a, align 1, !dbg !8562
  %15 = load %struct.MLoopCol*, %struct.MLoopCol** %m2, align 8, !dbg !8563
  %a4 = getelementptr inbounds %struct.MLoopCol, %struct.MLoopCol* %15, i32 0, i32 3, !dbg !8564
  store i8 %14, i8* %a4, align 1, !dbg !8565
  ret void, !dbg !8566
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_mdisps(i8* %source, i8* %dest, i32 %count) #0 !dbg !8567 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca %struct.MDisps*, align 8
  %d = alloca %struct.MDisps*, align 8
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !8568, metadata !DIExpression()), !dbg !8569
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !8570, metadata !DIExpression()), !dbg !8571
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !8572, metadata !DIExpression()), !dbg !8573
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8574, metadata !DIExpression()), !dbg !8575
  call void @llvm.dbg.declare(metadata %struct.MDisps** %s, metadata !8576, metadata !DIExpression()), !dbg !8588
  %0 = load i8*, i8** %source.addr, align 8, !dbg !8589
  %1 = bitcast i8* %0 to %struct.MDisps*, !dbg !8589
  store %struct.MDisps* %1, %struct.MDisps** %s, align 8, !dbg !8588
  call void @llvm.dbg.declare(metadata %struct.MDisps** %d, metadata !8590, metadata !DIExpression()), !dbg !8592
  %2 = load i8*, i8** %dest.addr, align 8, !dbg !8593
  %3 = bitcast i8* %2 to %struct.MDisps*, !dbg !8593
  store %struct.MDisps* %3, %struct.MDisps** %d, align 8, !dbg !8592
  store i32 0, i32* %i, align 4, !dbg !8594
  br label %for.cond, !dbg !8596

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !8597
  %5 = load i32, i32* %count.addr, align 4, !dbg !8599
  %cmp = icmp slt i32 %4, %5, !dbg !8600
  br i1 %cmp, label %for.body, label %for.end, !dbg !8601

for.body:                                         ; preds = %for.cond
  %6 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8602
  %7 = load i32, i32* %i, align 4, !dbg !8605
  %idxprom = sext i32 %7 to i64, !dbg !8602
  %arrayidx = getelementptr inbounds %struct.MDisps, %struct.MDisps* %6, i64 %idxprom, !dbg !8602
  %disps = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx, i32 0, i32 2, !dbg !8606
  %8 = load [3 x float]*, [3 x float]** %disps, align 8, !dbg !8606
  %tobool = icmp ne [3 x float]* %8, null, !dbg !8602
  br i1 %tobool, label %if.then, label %if.else, !dbg !8607

if.then:                                          ; preds = %for.body
  %9 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !8608
  %10 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8610
  %11 = load i32, i32* %i, align 4, !dbg !8611
  %idxprom1 = sext i32 %11 to i64, !dbg !8610
  %arrayidx2 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %10, i64 %idxprom1, !dbg !8610
  %disps3 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx2, i32 0, i32 2, !dbg !8612
  %12 = load [3 x float]*, [3 x float]** %disps3, align 8, !dbg !8612
  %13 = bitcast [3 x float]* %12 to i8*, !dbg !8610
  %call = call i8* %9(i8* %13), !dbg !8608
  %14 = bitcast i8* %call to [3 x float]*, !dbg !8608
  %15 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8613
  %16 = load i32, i32* %i, align 4, !dbg !8614
  %idxprom4 = sext i32 %16 to i64, !dbg !8613
  %arrayidx5 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %15, i64 %idxprom4, !dbg !8613
  %disps6 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx5, i32 0, i32 2, !dbg !8615
  store [3 x float]* %14, [3 x float]** %disps6, align 8, !dbg !8616
  %17 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !8617
  %18 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8618
  %19 = load i32, i32* %i, align 4, !dbg !8619
  %idxprom7 = sext i32 %19 to i64, !dbg !8618
  %arrayidx8 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %18, i64 %idxprom7, !dbg !8618
  %hidden = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx8, i32 0, i32 3, !dbg !8620
  %20 = load i32*, i32** %hidden, align 8, !dbg !8620
  %21 = bitcast i32* %20 to i8*, !dbg !8618
  %call9 = call i8* %17(i8* %21), !dbg !8617
  %22 = bitcast i8* %call9 to i32*, !dbg !8617
  %23 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8621
  %24 = load i32, i32* %i, align 4, !dbg !8622
  %idxprom10 = sext i32 %24 to i64, !dbg !8621
  %arrayidx11 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %23, i64 %idxprom10, !dbg !8621
  %hidden12 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx11, i32 0, i32 3, !dbg !8623
  store i32* %22, i32** %hidden12, align 8, !dbg !8624
  br label %if.end, !dbg !8625

if.else:                                          ; preds = %for.body
  %25 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8626
  %26 = load i32, i32* %i, align 4, !dbg !8628
  %idxprom13 = sext i32 %26 to i64, !dbg !8626
  %arrayidx14 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %25, i64 %idxprom13, !dbg !8626
  %disps15 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx14, i32 0, i32 2, !dbg !8629
  store [3 x float]* null, [3 x float]** %disps15, align 8, !dbg !8630
  %27 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8631
  %28 = load i32, i32* %i, align 4, !dbg !8632
  %idxprom16 = sext i32 %28 to i64, !dbg !8631
  %arrayidx17 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %27, i64 %idxprom16, !dbg !8631
  %hidden18 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx17, i32 0, i32 3, !dbg !8633
  store i32* null, i32** %hidden18, align 8, !dbg !8634
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %29 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8635
  %30 = load i32, i32* %i, align 4, !dbg !8636
  %idxprom19 = sext i32 %30 to i64, !dbg !8635
  %arrayidx20 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %29, i64 %idxprom19, !dbg !8635
  %totdisp = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx20, i32 0, i32 0, !dbg !8637
  %31 = load i32, i32* %totdisp, align 8, !dbg !8637
  %32 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8638
  %33 = load i32, i32* %i, align 4, !dbg !8639
  %idxprom21 = sext i32 %33 to i64, !dbg !8638
  %arrayidx22 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %32, i64 %idxprom21, !dbg !8638
  %totdisp23 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx22, i32 0, i32 0, !dbg !8640
  store i32 %31, i32* %totdisp23, align 8, !dbg !8641
  %34 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8642
  %35 = load i32, i32* %i, align 4, !dbg !8643
  %idxprom24 = sext i32 %35 to i64, !dbg !8642
  %arrayidx25 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %34, i64 %idxprom24, !dbg !8642
  %level = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx25, i32 0, i32 1, !dbg !8644
  %36 = load i32, i32* %level, align 4, !dbg !8644
  %37 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8645
  %38 = load i32, i32* %i, align 4, !dbg !8646
  %idxprom26 = sext i32 %38 to i64, !dbg !8645
  %arrayidx27 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %37, i64 %idxprom26, !dbg !8645
  %level28 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx27, i32 0, i32 1, !dbg !8647
  store i32 %36, i32* %level28, align 4, !dbg !8648
  br label %for.inc, !dbg !8649

for.inc:                                          ; preds = %if.end
  %39 = load i32, i32* %i, align 4, !dbg !8650
  %inc = add nsw i32 %39, 1, !dbg !8650
  store i32 %inc, i32* %i, align 4, !dbg !8650
  br label %for.cond, !dbg !8651, !llvm.loop !8652

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8654
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerFree_mdisps(i8* %data, i32 %count, i32 %UNUSED_size) #0 !dbg !8655 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %UNUSED_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %d = alloca %struct.MDisps*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8656, metadata !DIExpression()), !dbg !8657
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !8658, metadata !DIExpression()), !dbg !8659
  store i32 %UNUSED_size, i32* %UNUSED_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %UNUSED_size.addr, metadata !8660, metadata !DIExpression()), !dbg !8661
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8662, metadata !DIExpression()), !dbg !8663
  call void @llvm.dbg.declare(metadata %struct.MDisps** %d, metadata !8664, metadata !DIExpression()), !dbg !8665
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8666
  %1 = bitcast i8* %0 to %struct.MDisps*, !dbg !8666
  store %struct.MDisps* %1, %struct.MDisps** %d, align 8, !dbg !8665
  store i32 0, i32* %i, align 4, !dbg !8667
  br label %for.cond, !dbg !8669

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !8670
  %3 = load i32, i32* %count.addr, align 4, !dbg !8672
  %cmp = icmp slt i32 %2, %3, !dbg !8673
  br i1 %cmp, label %for.body, label %for.end, !dbg !8674

for.body:                                         ; preds = %for.cond
  %4 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8675
  %5 = load i32, i32* %i, align 4, !dbg !8678
  %idxprom = sext i32 %5 to i64, !dbg !8675
  %arrayidx = getelementptr inbounds %struct.MDisps, %struct.MDisps* %4, i64 %idxprom, !dbg !8675
  %disps = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx, i32 0, i32 2, !dbg !8679
  %6 = load [3 x float]*, [3 x float]** %disps, align 8, !dbg !8679
  %tobool = icmp ne [3 x float]* %6, null, !dbg !8675
  br i1 %tobool, label %if.then, label %if.end, !dbg !8680

if.then:                                          ; preds = %for.body
  %7 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !8681
  %8 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8682
  %9 = load i32, i32* %i, align 4, !dbg !8683
  %idxprom1 = sext i32 %9 to i64, !dbg !8682
  %arrayidx2 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %8, i64 %idxprom1, !dbg !8682
  %disps3 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx2, i32 0, i32 2, !dbg !8684
  %10 = load [3 x float]*, [3 x float]** %disps3, align 8, !dbg !8684
  %11 = bitcast [3 x float]* %10 to i8*, !dbg !8682
  call void %7(i8* %11), !dbg !8681
  br label %if.end, !dbg !8681

if.end:                                           ; preds = %if.then, %for.body
  %12 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8685
  %13 = load i32, i32* %i, align 4, !dbg !8687
  %idxprom4 = sext i32 %13 to i64, !dbg !8685
  %arrayidx5 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %12, i64 %idxprom4, !dbg !8685
  %hidden = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx5, i32 0, i32 3, !dbg !8688
  %14 = load i32*, i32** %hidden, align 8, !dbg !8688
  %tobool6 = icmp ne i32* %14, null, !dbg !8685
  br i1 %tobool6, label %if.then7, label %if.end11, !dbg !8689

if.then7:                                         ; preds = %if.end
  %15 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !8690
  %16 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8691
  %17 = load i32, i32* %i, align 4, !dbg !8692
  %idxprom8 = sext i32 %17 to i64, !dbg !8691
  %arrayidx9 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %16, i64 %idxprom8, !dbg !8691
  %hidden10 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx9, i32 0, i32 3, !dbg !8693
  %18 = load i32*, i32** %hidden10, align 8, !dbg !8693
  %19 = bitcast i32* %18 to i8*, !dbg !8691
  call void %15(i8* %19), !dbg !8690
  br label %if.end11, !dbg !8690

if.end11:                                         ; preds = %if.then7, %if.end
  %20 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8694
  %21 = load i32, i32* %i, align 4, !dbg !8695
  %idxprom12 = sext i32 %21 to i64, !dbg !8694
  %arrayidx13 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %20, i64 %idxprom12, !dbg !8694
  %disps14 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx13, i32 0, i32 2, !dbg !8696
  store [3 x float]* null, [3 x float]** %disps14, align 8, !dbg !8697
  %22 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8698
  %23 = load i32, i32* %i, align 4, !dbg !8699
  %idxprom15 = sext i32 %23 to i64, !dbg !8698
  %arrayidx16 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %22, i64 %idxprom15, !dbg !8698
  %hidden17 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx16, i32 0, i32 3, !dbg !8700
  store i32* null, i32** %hidden17, align 8, !dbg !8701
  %24 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8702
  %25 = load i32, i32* %i, align 4, !dbg !8703
  %idxprom18 = sext i32 %25 to i64, !dbg !8702
  %arrayidx19 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %24, i64 %idxprom18, !dbg !8702
  %totdisp = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx19, i32 0, i32 0, !dbg !8704
  store i32 0, i32* %totdisp, align 8, !dbg !8705
  %26 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8706
  %27 = load i32, i32* %i, align 4, !dbg !8707
  %idxprom20 = sext i32 %27 to i64, !dbg !8706
  %arrayidx21 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %26, i64 %idxprom20, !dbg !8706
  %level = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx21, i32 0, i32 1, !dbg !8708
  store i32 0, i32* %level, align 4, !dbg !8709
  br label %for.inc, !dbg !8710

for.inc:                                          ; preds = %if.end11
  %28 = load i32, i32* %i, align 4, !dbg !8711
  %inc = add nsw i32 %28, 1, !dbg !8711
  store i32 %inc, i32* %i, align 4, !dbg !8711
  br label %for.cond, !dbg !8712, !llvm.loop !8713

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8715
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerSwap_mdisps(i8* %data, i32* %ci) #0 !dbg !8716 {
entry:
  %data.addr = alloca i8*, align 8
  %ci.addr = alloca i32*, align 8
  %s = alloca %struct.MDisps*, align 8
  %d = alloca [3 x float]*, align 8
  %corners = alloca i32, align 4
  %cornersize = alloca i32, align 4
  %S = alloca i32, align 4
  %nverts = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8717, metadata !DIExpression()), !dbg !8718
  store i32* %ci, i32** %ci.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ci.addr, metadata !8719, metadata !DIExpression()), !dbg !8720
  call void @llvm.dbg.declare(metadata %struct.MDisps** %s, metadata !8721, metadata !DIExpression()), !dbg !8722
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8723
  %1 = bitcast i8* %0 to %struct.MDisps*, !dbg !8723
  store %struct.MDisps* %1, %struct.MDisps** %s, align 8, !dbg !8722
  call void @llvm.dbg.declare(metadata [3 x float]** %d, metadata !8724, metadata !DIExpression()), !dbg !8725
  store [3 x float]* null, [3 x float]** %d, align 8, !dbg !8725
  call void @llvm.dbg.declare(metadata i32* %corners, metadata !8726, metadata !DIExpression()), !dbg !8727
  call void @llvm.dbg.declare(metadata i32* %cornersize, metadata !8728, metadata !DIExpression()), !dbg !8729
  call void @llvm.dbg.declare(metadata i32* %S, metadata !8730, metadata !DIExpression()), !dbg !8731
  %2 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8732
  %disps = getelementptr inbounds %struct.MDisps, %struct.MDisps* %2, i32 0, i32 2, !dbg !8734
  %3 = load [3 x float]*, [3 x float]** %disps, align 8, !dbg !8734
  %tobool = icmp ne [3 x float]* %3, null, !dbg !8732
  br i1 %tobool, label %if.then, label %if.end29, !dbg !8735

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %nverts, metadata !8736, metadata !DIExpression()), !dbg !8738
  %4 = load i32*, i32** %ci.addr, align 8, !dbg !8739
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 1, !dbg !8739
  %5 = load i32, i32* %arrayidx, align 4, !dbg !8739
  %cmp = icmp eq i32 %5, 3, !dbg !8740
  %6 = zext i1 %cmp to i64, !dbg !8741
  %cond = select i1 %cmp, i32 4, i32 3, !dbg !8741
  store i32 %cond, i32* %nverts, align 4, !dbg !8738
  %7 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8742
  %call = call i32 @multires_mdisp_corners(%struct.MDisps* %7), !dbg !8743
  store i32 %call, i32* %corners, align 4, !dbg !8744
  %8 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8745
  %totdisp = getelementptr inbounds %struct.MDisps, %struct.MDisps* %8, i32 0, i32 0, !dbg !8746
  %9 = load i32, i32* %totdisp, align 8, !dbg !8746
  %10 = load i32, i32* %corners, align 4, !dbg !8747
  %div = sdiv i32 %9, %10, !dbg !8748
  store i32 %div, i32* %cornersize, align 4, !dbg !8749
  %11 = load i32, i32* %corners, align 4, !dbg !8750
  %12 = load i32, i32* %nverts, align 4, !dbg !8752
  %cmp1 = icmp ne i32 %11, %12, !dbg !8753
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !8754

if.then2:                                         ; preds = %if.then
  %13 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !8755
  %14 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8757
  %disps3 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %14, i32 0, i32 2, !dbg !8758
  %15 = load [3 x float]*, [3 x float]** %disps3, align 8, !dbg !8758
  %16 = bitcast [3 x float]* %15 to i8*, !dbg !8757
  call void %13(i8* %16), !dbg !8755
  %17 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8759
  %totdisp4 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %17, i32 0, i32 0, !dbg !8760
  %18 = load i32, i32* %totdisp4, align 8, !dbg !8760
  %19 = load i32, i32* %corners, align 4, !dbg !8761
  %div5 = sdiv i32 %18, %19, !dbg !8762
  %20 = load i32, i32* %nverts, align 4, !dbg !8763
  %mul = mul nsw i32 %div5, %20, !dbg !8764
  %21 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8765
  %totdisp6 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %21, i32 0, i32 0, !dbg !8766
  store i32 %mul, i32* %totdisp6, align 8, !dbg !8767
  %22 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !8768
  %23 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8769
  %totdisp7 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %23, i32 0, i32 0, !dbg !8770
  %24 = load i32, i32* %totdisp7, align 8, !dbg !8770
  %conv = sext i32 %24 to i64, !dbg !8769
  %mul8 = mul i64 %conv, 4, !dbg !8771
  %mul9 = mul i64 %mul8, 3, !dbg !8772
  %call10 = call i8* %22(i64 %mul9, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.90, i64 0, i64 0)), !dbg !8768
  %25 = bitcast i8* %call10 to [3 x float]*, !dbg !8768
  %26 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8773
  %disps11 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %26, i32 0, i32 2, !dbg !8774
  store [3 x float]* %25, [3 x float]** %disps11, align 8, !dbg !8775
  br label %if.end29, !dbg !8776

if.end:                                           ; preds = %if.then
  %27 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !8777
  %28 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8778
  %totdisp12 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %28, i32 0, i32 0, !dbg !8779
  %29 = load i32, i32* %totdisp12, align 8, !dbg !8779
  %conv13 = sext i32 %29 to i64, !dbg !8778
  %mul14 = mul i64 12, %conv13, !dbg !8780
  %call15 = call i8* %27(i64 %mul14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91, i64 0, i64 0)), !dbg !8777
  %30 = bitcast i8* %call15 to [3 x float]*, !dbg !8777
  store [3 x float]* %30, [3 x float]** %d, align 8, !dbg !8781
  store i32 0, i32* %S, align 4, !dbg !8782
  br label %for.cond, !dbg !8784

for.cond:                                         ; preds = %for.inc, %if.end
  %31 = load i32, i32* %S, align 4, !dbg !8785
  %32 = load i32, i32* %corners, align 4, !dbg !8787
  %cmp16 = icmp slt i32 %31, %32, !dbg !8788
  br i1 %cmp16, label %for.body, label %for.end, !dbg !8789

for.body:                                         ; preds = %for.cond
  %33 = load [3 x float]*, [3 x float]** %d, align 8, !dbg !8790
  %34 = load i32, i32* %cornersize, align 4, !dbg !8791
  %35 = load i32, i32* %S, align 4, !dbg !8792
  %mul18 = mul nsw i32 %34, %35, !dbg !8793
  %idx.ext = sext i32 %mul18 to i64, !dbg !8794
  %add.ptr = getelementptr inbounds [3 x float], [3 x float]* %33, i64 %idx.ext, !dbg !8794
  %36 = bitcast [3 x float]* %add.ptr to i8*, !dbg !8795
  %37 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8796
  %disps19 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %37, i32 0, i32 2, !dbg !8797
  %38 = load [3 x float]*, [3 x float]** %disps19, align 8, !dbg !8797
  %39 = load i32, i32* %cornersize, align 4, !dbg !8798
  %40 = load i32*, i32** %ci.addr, align 8, !dbg !8799
  %41 = load i32, i32* %S, align 4, !dbg !8800
  %idxprom = sext i32 %41 to i64, !dbg !8799
  %arrayidx20 = getelementptr inbounds i32, i32* %40, i64 %idxprom, !dbg !8799
  %42 = load i32, i32* %arrayidx20, align 4, !dbg !8799
  %mul21 = mul nsw i32 %39, %42, !dbg !8801
  %idx.ext22 = sext i32 %mul21 to i64, !dbg !8802
  %add.ptr23 = getelementptr inbounds [3 x float], [3 x float]* %38, i64 %idx.ext22, !dbg !8802
  %43 = bitcast [3 x float]* %add.ptr23 to i8*, !dbg !8795
  %44 = load i32, i32* %cornersize, align 4, !dbg !8803
  %mul24 = mul nsw i32 %44, 3, !dbg !8804
  %conv25 = sext i32 %mul24 to i64, !dbg !8803
  %mul26 = mul i64 %conv25, 4, !dbg !8805
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %43, i64 %mul26, i1 false), !dbg !8795
  br label %for.inc, !dbg !8795

for.inc:                                          ; preds = %for.body
  %45 = load i32, i32* %S, align 4, !dbg !8806
  %inc = add nsw i32 %45, 1, !dbg !8806
  store i32 %inc, i32* %S, align 4, !dbg !8806
  br label %for.cond, !dbg !8807, !llvm.loop !8808

for.end:                                          ; preds = %for.cond
  %46 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !8810
  %47 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8811
  %disps27 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %47, i32 0, i32 2, !dbg !8812
  %48 = load [3 x float]*, [3 x float]** %disps27, align 8, !dbg !8812
  %49 = bitcast [3 x float]* %48 to i8*, !dbg !8811
  call void %46(i8* %49), !dbg !8810
  %50 = load [3 x float]*, [3 x float]** %d, align 8, !dbg !8813
  %51 = load %struct.MDisps*, %struct.MDisps** %s, align 8, !dbg !8814
  %disps28 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %51, i32 0, i32 2, !dbg !8815
  store [3 x float]* %50, [3 x float]** %disps28, align 8, !dbg !8816
  br label %if.end29, !dbg !8817

if.end29:                                         ; preds = %if.then2, %for.end, %entry
  ret void, !dbg !8818
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @layerRead_mdisps(%struct.CDataFile* %cdf, i8* %data, i32 %count) #0 !dbg !8819 {
entry:
  %retval = alloca i32, align 4
  %cdf.addr = alloca %struct.CDataFile*, align 8
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %d = alloca %struct.MDisps*, align 8
  %i = alloca i32, align 4
  store %struct.CDataFile* %cdf, %struct.CDataFile** %cdf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CDataFile** %cdf.addr, metadata !8820, metadata !DIExpression()), !dbg !8821
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8822, metadata !DIExpression()), !dbg !8823
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !8824, metadata !DIExpression()), !dbg !8825
  call void @llvm.dbg.declare(metadata %struct.MDisps** %d, metadata !8826, metadata !DIExpression()), !dbg !8827
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8828
  %1 = bitcast i8* %0 to %struct.MDisps*, !dbg !8828
  store %struct.MDisps* %1, %struct.MDisps** %d, align 8, !dbg !8827
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8829, metadata !DIExpression()), !dbg !8830
  store i32 0, i32* %i, align 4, !dbg !8831
  br label %for.cond, !dbg !8833

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !8834
  %3 = load i32, i32* %count.addr, align 4, !dbg !8836
  %cmp = icmp slt i32 %2, %3, !dbg !8837
  br i1 %cmp, label %for.body, label %for.end, !dbg !8838

for.body:                                         ; preds = %for.cond
  %4 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8839
  %5 = load i32, i32* %i, align 4, !dbg !8842
  %idxprom = sext i32 %5 to i64, !dbg !8839
  %arrayidx = getelementptr inbounds %struct.MDisps, %struct.MDisps* %4, i64 %idxprom, !dbg !8839
  %disps = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx, i32 0, i32 2, !dbg !8843
  %6 = load [3 x float]*, [3 x float]** %disps, align 8, !dbg !8843
  %tobool = icmp ne [3 x float]* %6, null, !dbg !8839
  br i1 %tobool, label %if.end, label %if.then, !dbg !8844

if.then:                                          ; preds = %for.body
  %7 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !8845
  %8 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8846
  %9 = load i32, i32* %i, align 4, !dbg !8847
  %idxprom1 = sext i32 %9 to i64, !dbg !8846
  %arrayidx2 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %8, i64 %idxprom1, !dbg !8846
  %totdisp = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx2, i32 0, i32 0, !dbg !8848
  %10 = load i32, i32* %totdisp, align 8, !dbg !8848
  %conv = sext i32 %10 to i64, !dbg !8846
  %mul = mul i64 12, %conv, !dbg !8849
  %call = call i8* %7(i64 %mul, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.92, i64 0, i64 0)), !dbg !8845
  %11 = bitcast i8* %call to [3 x float]*, !dbg !8845
  %12 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8850
  %13 = load i32, i32* %i, align 4, !dbg !8851
  %idxprom3 = sext i32 %13 to i64, !dbg !8850
  %arrayidx4 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %12, i64 %idxprom3, !dbg !8850
  %disps5 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx4, i32 0, i32 2, !dbg !8852
  store [3 x float]* %11, [3 x float]** %disps5, align 8, !dbg !8853
  br label %if.end, !dbg !8850

if.end:                                           ; preds = %if.then, %for.body
  %14 = load %struct.CDataFile*, %struct.CDataFile** %cdf.addr, align 8, !dbg !8854
  %15 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8856
  %16 = load i32, i32* %i, align 4, !dbg !8857
  %idxprom6 = sext i32 %16 to i64, !dbg !8856
  %arrayidx7 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %15, i64 %idxprom6, !dbg !8856
  %totdisp8 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx7, i32 0, i32 0, !dbg !8858
  %17 = load i32, i32* %totdisp8, align 8, !dbg !8858
  %mul9 = mul nsw i32 %17, 3, !dbg !8859
  %conv10 = sext i32 %mul9 to i64, !dbg !8856
  %mul11 = mul i64 %conv10, 4, !dbg !8860
  %conv12 = trunc i64 %mul11 to i32, !dbg !8856
  %18 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8861
  %19 = load i32, i32* %i, align 4, !dbg !8862
  %idxprom13 = sext i32 %19 to i64, !dbg !8861
  %arrayidx14 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %18, i64 %idxprom13, !dbg !8861
  %disps15 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx14, i32 0, i32 2, !dbg !8863
  %20 = load [3 x float]*, [3 x float]** %disps15, align 8, !dbg !8863
  %21 = bitcast [3 x float]* %20 to i8*, !dbg !8861
  %call16 = call i32 @cdf_read_data(%struct.CDataFile* %14, i32 %conv12, i8* %21), !dbg !8864
  %tobool17 = icmp ne i32 %call16, 0, !dbg !8864
  br i1 %tobool17, label %if.end23, label %if.then18, !dbg !8865

if.then18:                                        ; preds = %if.end
  %22 = load i32, i32* %i, align 4, !dbg !8866
  %23 = load i32, i32* %count.addr, align 4, !dbg !8868
  %24 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8869
  %25 = load i32, i32* %i, align 4, !dbg !8870
  %idxprom19 = sext i32 %25 to i64, !dbg !8869
  %arrayidx20 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %24, i64 %idxprom19, !dbg !8869
  %totdisp21 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx20, i32 0, i32 0, !dbg !8871
  %26 = load i32, i32* %totdisp21, align 8, !dbg !8871
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.93, i64 0, i64 0), i32 %22, i32 %23, i32 %26), !dbg !8872
  store i32 0, i32* %retval, align 4, !dbg !8873
  br label %return, !dbg !8873

if.end23:                                         ; preds = %if.end
  br label %for.inc, !dbg !8874

for.inc:                                          ; preds = %if.end23
  %27 = load i32, i32* %i, align 4, !dbg !8875
  %inc = add nsw i32 %27, 1, !dbg !8875
  store i32 %inc, i32* %i, align 4, !dbg !8875
  br label %for.cond, !dbg !8876, !llvm.loop !8877

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !8879
  br label %return, !dbg !8879

return:                                           ; preds = %for.end, %if.then18
  %28 = load i32, i32* %retval, align 4, !dbg !8880
  ret i32 %28, !dbg !8880
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @layerWrite_mdisps(%struct.CDataFile* %cdf, i8* %data, i32 %count) #0 !dbg !8881 {
entry:
  %retval = alloca i32, align 4
  %cdf.addr = alloca %struct.CDataFile*, align 8
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %d = alloca %struct.MDisps*, align 8
  %i = alloca i32, align 4
  store %struct.CDataFile* %cdf, %struct.CDataFile** %cdf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CDataFile** %cdf.addr, metadata !8882, metadata !DIExpression()), !dbg !8883
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8884, metadata !DIExpression()), !dbg !8885
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !8886, metadata !DIExpression()), !dbg !8887
  call void @llvm.dbg.declare(metadata %struct.MDisps** %d, metadata !8888, metadata !DIExpression()), !dbg !8889
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8890
  %1 = bitcast i8* %0 to %struct.MDisps*, !dbg !8890
  store %struct.MDisps* %1, %struct.MDisps** %d, align 8, !dbg !8889
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8891, metadata !DIExpression()), !dbg !8892
  store i32 0, i32* %i, align 4, !dbg !8893
  br label %for.cond, !dbg !8895

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !8896
  %3 = load i32, i32* %count.addr, align 4, !dbg !8898
  %cmp = icmp slt i32 %2, %3, !dbg !8899
  br i1 %cmp, label %for.body, label %for.end, !dbg !8900

for.body:                                         ; preds = %for.cond
  %4 = load %struct.CDataFile*, %struct.CDataFile** %cdf.addr, align 8, !dbg !8901
  %5 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8904
  %6 = load i32, i32* %i, align 4, !dbg !8905
  %idxprom = sext i32 %6 to i64, !dbg !8904
  %arrayidx = getelementptr inbounds %struct.MDisps, %struct.MDisps* %5, i64 %idxprom, !dbg !8904
  %totdisp = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx, i32 0, i32 0, !dbg !8906
  %7 = load i32, i32* %totdisp, align 8, !dbg !8906
  %mul = mul nsw i32 %7, 3, !dbg !8907
  %conv = sext i32 %mul to i64, !dbg !8904
  %mul1 = mul i64 %conv, 4, !dbg !8908
  %conv2 = trunc i64 %mul1 to i32, !dbg !8904
  %8 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8909
  %9 = load i32, i32* %i, align 4, !dbg !8910
  %idxprom3 = sext i32 %9 to i64, !dbg !8909
  %arrayidx4 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %8, i64 %idxprom3, !dbg !8909
  %disps = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx4, i32 0, i32 2, !dbg !8911
  %10 = load [3 x float]*, [3 x float]** %disps, align 8, !dbg !8911
  %11 = bitcast [3 x float]* %10 to i8*, !dbg !8909
  %call = call i32 @cdf_write_data(%struct.CDataFile* %4, i32 %conv2, i8* %11), !dbg !8912
  %tobool = icmp ne i32 %call, 0, !dbg !8912
  br i1 %tobool, label %if.end, label %if.then, !dbg !8913

if.then:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !8914
  %13 = load i32, i32* %count.addr, align 4, !dbg !8916
  %14 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8917
  %15 = load i32, i32* %i, align 4, !dbg !8918
  %idxprom5 = sext i32 %15 to i64, !dbg !8917
  %arrayidx6 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %14, i64 %idxprom5, !dbg !8917
  %totdisp7 = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx6, i32 0, i32 0, !dbg !8919
  %16 = load i32, i32* %totdisp7, align 8, !dbg !8919
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.94, i64 0, i64 0), i32 %12, i32 %13, i32 %16), !dbg !8920
  store i32 0, i32* %retval, align 4, !dbg !8921
  br label %return, !dbg !8921

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !8922

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4, !dbg !8923
  %inc = add nsw i32 %17, 1, !dbg !8923
  store i32 %inc, i32* %i, align 4, !dbg !8923
  br label %for.cond, !dbg !8924, !llvm.loop !8925

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !8927
  br label %return, !dbg !8927

return:                                           ; preds = %for.end, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !8928
  ret i32 %18, !dbg !8928
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @layerFilesize_mdisps(%struct.CDataFile* %UNUSED_cdf, i8* %data, i32 %count) #0 !dbg !8929 {
entry:
  %UNUSED_cdf.addr = alloca %struct.CDataFile*, align 8
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %d = alloca %struct.MDisps*, align 8
  %size = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.CDataFile* %UNUSED_cdf, %struct.CDataFile** %UNUSED_cdf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CDataFile** %UNUSED_cdf.addr, metadata !8930, metadata !DIExpression()), !dbg !8931
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8932, metadata !DIExpression()), !dbg !8933
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !8934, metadata !DIExpression()), !dbg !8935
  call void @llvm.dbg.declare(metadata %struct.MDisps** %d, metadata !8936, metadata !DIExpression()), !dbg !8937
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8938
  %1 = bitcast i8* %0 to %struct.MDisps*, !dbg !8938
  store %struct.MDisps* %1, %struct.MDisps** %d, align 8, !dbg !8937
  call void @llvm.dbg.declare(metadata i64* %size, metadata !8939, metadata !DIExpression()), !dbg !8940
  store i64 0, i64* %size, align 8, !dbg !8940
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8941, metadata !DIExpression()), !dbg !8942
  store i32 0, i32* %i, align 4, !dbg !8943
  br label %for.cond, !dbg !8945

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !8946
  %3 = load i32, i32* %count.addr, align 4, !dbg !8948
  %cmp = icmp slt i32 %2, %3, !dbg !8949
  br i1 %cmp, label %for.body, label %for.end, !dbg !8950

for.body:                                         ; preds = %for.cond
  %4 = load %struct.MDisps*, %struct.MDisps** %d, align 8, !dbg !8951
  %5 = load i32, i32* %i, align 4, !dbg !8952
  %idxprom = sext i32 %5 to i64, !dbg !8951
  %arrayidx = getelementptr inbounds %struct.MDisps, %struct.MDisps* %4, i64 %idxprom, !dbg !8951
  %totdisp = getelementptr inbounds %struct.MDisps, %struct.MDisps* %arrayidx, i32 0, i32 0, !dbg !8953
  %6 = load i32, i32* %totdisp, align 8, !dbg !8953
  %mul = mul nsw i32 %6, 3, !dbg !8954
  %conv = sext i32 %mul to i64, !dbg !8951
  %mul1 = mul i64 %conv, 4, !dbg !8955
  %7 = load i64, i64* %size, align 8, !dbg !8956
  %add = add i64 %7, %mul1, !dbg !8956
  store i64 %add, i64* %size, align 8, !dbg !8956
  br label %for.inc, !dbg !8957

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !8958
  %inc = add nsw i32 %8, 1, !dbg !8958
  store i32 %inc, i32* %i, align 4, !dbg !8958
  br label %for.cond, !dbg !8959, !llvm.loop !8960

for.end:                                          ; preds = %for.cond
  %9 = load i64, i64* %size, align 8, !dbg !8962
  ret i64 %9, !dbg !8963
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_shapekey(i8** %sources, float* %weights, float* %UNUSED_sub_weights, i32 %count, i8* %dest) #0 !dbg !8964 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %UNUSED_sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %co = alloca [3 x float], align 4
  %in = alloca float**, align 8
  %i = alloca i32, align 4
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !8965, metadata !DIExpression()), !dbg !8966
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !8967, metadata !DIExpression()), !dbg !8968
  store float* %UNUSED_sub_weights, float** %UNUSED_sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %UNUSED_sub_weights.addr, metadata !8969, metadata !DIExpression()), !dbg !8970
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !8971, metadata !DIExpression()), !dbg !8972
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !8973, metadata !DIExpression()), !dbg !8974
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !8975, metadata !DIExpression()), !dbg !8976
  call void @llvm.dbg.declare(metadata float*** %in, metadata !8977, metadata !DIExpression()), !dbg !8978
  %0 = load i8**, i8*** %sources.addr, align 8, !dbg !8979
  %1 = bitcast i8** %0 to float**, !dbg !8980
  store float** %1, float*** %in, align 8, !dbg !8978
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8981, metadata !DIExpression()), !dbg !8982
  %2 = load i32, i32* %count.addr, align 4, !dbg !8983
  %cmp = icmp sle i32 %2, 0, !dbg !8985
  br i1 %cmp, label %if.then, label %if.end, !dbg !8986

if.then:                                          ; preds = %entry
  br label %return, !dbg !8987

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8988
  call void @zero_v3(float* %arraydecay), !dbg !8989
  %3 = load float*, float** %weights.addr, align 8, !dbg !8990
  %tobool = icmp ne float* %3, null, !dbg !8990
  br i1 %tobool, label %if.then1, label %if.else, !dbg !8992

if.then1:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !8993
  br label %for.cond, !dbg !8996

for.cond:                                         ; preds = %for.inc, %if.then1
  %4 = load i32, i32* %i, align 4, !dbg !8997
  %5 = load i32, i32* %count.addr, align 4, !dbg !8999
  %cmp2 = icmp slt i32 %4, %5, !dbg !9000
  br i1 %cmp2, label %for.body, label %for.end, !dbg !9001

for.body:                                         ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9002
  %6 = load float**, float*** %in, align 8, !dbg !9004
  %7 = load i32, i32* %i, align 4, !dbg !9005
  %idxprom = sext i32 %7 to i64, !dbg !9004
  %arrayidx = getelementptr inbounds float*, float** %6, i64 %idxprom, !dbg !9004
  %8 = load float*, float** %arrayidx, align 8, !dbg !9004
  %9 = load float*, float** %weights.addr, align 8, !dbg !9006
  %10 = load i32, i32* %i, align 4, !dbg !9007
  %idxprom4 = sext i32 %10 to i64, !dbg !9006
  %arrayidx5 = getelementptr inbounds float, float* %9, i64 %idxprom4, !dbg !9006
  %11 = load float, float* %arrayidx5, align 4, !dbg !9006
  call void @madd_v3_v3fl(float* %arraydecay3, float* %8, float %11), !dbg !9008
  br label %for.inc, !dbg !9009

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !9010
  %inc = add nsw i32 %12, 1, !dbg !9010
  store i32 %inc, i32* %i, align 4, !dbg !9010
  br label %for.cond, !dbg !9011, !llvm.loop !9012

for.end:                                          ; preds = %for.cond
  br label %if.end15, !dbg !9014

if.else:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !9015
  br label %for.cond6, !dbg !9018

for.cond6:                                        ; preds = %for.inc12, %if.else
  %13 = load i32, i32* %i, align 4, !dbg !9019
  %14 = load i32, i32* %count.addr, align 4, !dbg !9021
  %cmp7 = icmp slt i32 %13, %14, !dbg !9022
  br i1 %cmp7, label %for.body8, label %for.end14, !dbg !9023

for.body8:                                        ; preds = %for.cond6
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9024
  %15 = load float**, float*** %in, align 8, !dbg !9026
  %16 = load i32, i32* %i, align 4, !dbg !9027
  %idxprom10 = sext i32 %16 to i64, !dbg !9026
  %arrayidx11 = getelementptr inbounds float*, float** %15, i64 %idxprom10, !dbg !9026
  %17 = load float*, float** %arrayidx11, align 8, !dbg !9026
  call void @add_v3_v3(float* %arraydecay9, float* %17), !dbg !9028
  br label %for.inc12, !dbg !9029

for.inc12:                                        ; preds = %for.body8
  %18 = load i32, i32* %i, align 4, !dbg !9030
  %inc13 = add nsw i32 %18, 1, !dbg !9030
  store i32 %inc13, i32* %i, align 4, !dbg !9030
  br label %for.cond6, !dbg !9031, !llvm.loop !9032

for.end14:                                        ; preds = %for.cond6
  br label %if.end15

if.end15:                                         ; preds = %for.end14, %for.end
  %19 = load i8*, i8** %dest.addr, align 8, !dbg !9034
  %20 = bitcast i8* %19 to float*, !dbg !9035
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9036
  call void @copy_v3_v3(float* %20, float* %arraydecay16), !dbg !9037
  br label %return, !dbg !9038

return:                                           ; preds = %if.end15, %if.then
  ret void, !dbg !9038
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_bweight(i8** %sources, float* %weights, float* %UNUSED_sub_weights, i32 %count, i8* %dest) #0 !dbg !9039 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %UNUSED_sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %f = alloca float, align 4
  %in = alloca float**, align 8
  %i = alloca i32, align 4
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !9040, metadata !DIExpression()), !dbg !9041
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !9042, metadata !DIExpression()), !dbg !9043
  store float* %UNUSED_sub_weights, float** %UNUSED_sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %UNUSED_sub_weights.addr, metadata !9044, metadata !DIExpression()), !dbg !9045
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !9046, metadata !DIExpression()), !dbg !9047
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !9048, metadata !DIExpression()), !dbg !9049
  call void @llvm.dbg.declare(metadata float* %f, metadata !9050, metadata !DIExpression()), !dbg !9051
  call void @llvm.dbg.declare(metadata float*** %in, metadata !9052, metadata !DIExpression()), !dbg !9053
  %0 = load i8**, i8*** %sources.addr, align 8, !dbg !9054
  %1 = bitcast i8** %0 to float**, !dbg !9055
  store float** %1, float*** %in, align 8, !dbg !9053
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9056, metadata !DIExpression()), !dbg !9057
  %2 = load i32, i32* %count.addr, align 4, !dbg !9058
  %cmp = icmp sle i32 %2, 0, !dbg !9060
  br i1 %cmp, label %if.then, label %if.end, !dbg !9061

if.then:                                          ; preds = %entry
  br label %return, !dbg !9062

if.end:                                           ; preds = %entry
  store float 0.000000e+00, float* %f, align 4, !dbg !9063
  %3 = load float*, float** %weights.addr, align 8, !dbg !9064
  %tobool = icmp ne float* %3, null, !dbg !9064
  br i1 %tobool, label %if.then1, label %if.else, !dbg !9066

if.then1:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !9067
  br label %for.cond, !dbg !9070

for.cond:                                         ; preds = %for.inc, %if.then1
  %4 = load i32, i32* %i, align 4, !dbg !9071
  %5 = load i32, i32* %count.addr, align 4, !dbg !9073
  %cmp2 = icmp slt i32 %4, %5, !dbg !9074
  br i1 %cmp2, label %for.body, label %for.end, !dbg !9075

for.body:                                         ; preds = %for.cond
  %6 = load float**, float*** %in, align 8, !dbg !9076
  %7 = load i32, i32* %i, align 4, !dbg !9078
  %idxprom = sext i32 %7 to i64, !dbg !9076
  %arrayidx = getelementptr inbounds float*, float** %6, i64 %idxprom, !dbg !9076
  %8 = load float*, float** %arrayidx, align 8, !dbg !9076
  %9 = load float, float* %8, align 4, !dbg !9079
  %10 = load float*, float** %weights.addr, align 8, !dbg !9080
  %11 = load i32, i32* %i, align 4, !dbg !9081
  %idxprom3 = sext i32 %11 to i64, !dbg !9080
  %arrayidx4 = getelementptr inbounds float, float* %10, i64 %idxprom3, !dbg !9080
  %12 = load float, float* %arrayidx4, align 4, !dbg !9080
  %mul = fmul float %9, %12, !dbg !9082
  %13 = load float, float* %f, align 4, !dbg !9083
  %add = fadd float %13, %mul, !dbg !9083
  store float %add, float* %f, align 4, !dbg !9083
  br label %for.inc, !dbg !9084

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !9085
  %inc = add nsw i32 %14, 1, !dbg !9085
  store i32 %inc, i32* %i, align 4, !dbg !9085
  br label %for.cond, !dbg !9086, !llvm.loop !9087

for.end:                                          ; preds = %for.cond
  br label %if.end14, !dbg !9089

if.else:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !9090
  br label %for.cond5, !dbg !9093

for.cond5:                                        ; preds = %for.inc11, %if.else
  %15 = load i32, i32* %i, align 4, !dbg !9094
  %16 = load i32, i32* %count.addr, align 4, !dbg !9096
  %cmp6 = icmp slt i32 %15, %16, !dbg !9097
  br i1 %cmp6, label %for.body7, label %for.end13, !dbg !9098

for.body7:                                        ; preds = %for.cond5
  %17 = load float**, float*** %in, align 8, !dbg !9099
  %18 = load i32, i32* %i, align 4, !dbg !9101
  %idxprom8 = sext i32 %18 to i64, !dbg !9099
  %arrayidx9 = getelementptr inbounds float*, float** %17, i64 %idxprom8, !dbg !9099
  %19 = load float*, float** %arrayidx9, align 8, !dbg !9099
  %20 = load float, float* %19, align 4, !dbg !9102
  %21 = load float, float* %f, align 4, !dbg !9103
  %add10 = fadd float %21, %20, !dbg !9103
  store float %add10, float* %f, align 4, !dbg !9103
  br label %for.inc11, !dbg !9104

for.inc11:                                        ; preds = %for.body7
  %22 = load i32, i32* %i, align 4, !dbg !9105
  %inc12 = add nsw i32 %22, 1, !dbg !9105
  store i32 %inc12, i32* %i, align 4, !dbg !9105
  br label %for.cond5, !dbg !9106, !llvm.loop !9107

for.end13:                                        ; preds = %for.cond5
  br label %if.end14

if.end14:                                         ; preds = %for.end13, %for.end
  %23 = load float, float* %f, align 4, !dbg !9109
  %24 = load i8*, i8** %dest.addr, align 8, !dbg !9110
  %25 = bitcast i8* %24 to float*, !dbg !9111
  store float %23, float* %25, align 4, !dbg !9112
  br label %return, !dbg !9113

return:                                           ; preds = %if.end14, %if.then
  ret void, !dbg !9113
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_mloop_origspace(i8** %sources, float* %weights, float* %sub_weights, i32 %count, i8* %dest) #0 !dbg !9114 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %uv = alloca [2 x float], align 4
  %i = alloca i32, align 4
  %sub_weight = alloca float*, align 8
  %weight = alloca float, align 4
  %src = alloca %struct.OrigSpaceLoop*, align 8
  %weight10 = alloca float, align 4
  %src18 = alloca %struct.OrigSpaceLoop*, align 8
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !9115, metadata !DIExpression()), !dbg !9116
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !9117, metadata !DIExpression()), !dbg !9118
  store float* %sub_weights, float** %sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %sub_weights.addr, metadata !9119, metadata !DIExpression()), !dbg !9120
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !9121, metadata !DIExpression()), !dbg !9122
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !9123, metadata !DIExpression()), !dbg !9124
  call void @llvm.dbg.declare(metadata [2 x float]* %uv, metadata !9125, metadata !DIExpression()), !dbg !9126
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9127, metadata !DIExpression()), !dbg !9128
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9129
  call void @zero_v2(float* %arraydecay), !dbg !9130
  %0 = load float*, float** %sub_weights.addr, align 8, !dbg !9131
  %tobool = icmp ne float* %0, null, !dbg !9131
  br i1 %tobool, label %if.then, label %if.else, !dbg !9133

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata float** %sub_weight, metadata !9134, metadata !DIExpression()), !dbg !9136
  %1 = load float*, float** %sub_weights.addr, align 8, !dbg !9137
  store float* %1, float** %sub_weight, align 8, !dbg !9136
  store i32 0, i32* %i, align 4, !dbg !9138
  br label %for.cond, !dbg !9140

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !9141
  %3 = load i32, i32* %count.addr, align 4, !dbg !9143
  %cmp = icmp slt i32 %2, %3, !dbg !9144
  br i1 %cmp, label %for.body, label %for.end, !dbg !9145

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %weight, metadata !9146, metadata !DIExpression()), !dbg !9148
  %4 = load float*, float** %weights.addr, align 8, !dbg !9149
  %tobool1 = icmp ne float* %4, null, !dbg !9149
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !9149

cond.true:                                        ; preds = %for.body
  %5 = load float*, float** %weights.addr, align 8, !dbg !9150
  %6 = load i32, i32* %i, align 4, !dbg !9151
  %idxprom = sext i32 %6 to i64, !dbg !9150
  %arrayidx = getelementptr inbounds float, float* %5, i64 %idxprom, !dbg !9150
  %7 = load float, float* %arrayidx, align 4, !dbg !9150
  br label %cond.end, !dbg !9149

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !9149

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %7, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !9149
  store float %cond, float* %weight, align 4, !dbg !9148
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %src, metadata !9152, metadata !DIExpression()), !dbg !9153
  %8 = load i8**, i8*** %sources.addr, align 8, !dbg !9154
  %9 = load i32, i32* %i, align 4, !dbg !9155
  %idxprom2 = sext i32 %9 to i64, !dbg !9154
  %arrayidx3 = getelementptr inbounds i8*, i8** %8, i64 %idxprom2, !dbg !9154
  %10 = load i8*, i8** %arrayidx3, align 8, !dbg !9154
  %11 = bitcast i8* %10 to %struct.OrigSpaceLoop*, !dbg !9154
  store %struct.OrigSpaceLoop* %11, %struct.OrigSpaceLoop** %src, align 8, !dbg !9153
  %arraydecay4 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9156
  %12 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %src, align 8, !dbg !9157
  %uv5 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %12, i32 0, i32 0, !dbg !9158
  %arraydecay6 = getelementptr inbounds [2 x float], [2 x float]* %uv5, i64 0, i64 0, !dbg !9157
  %13 = load float*, float** %sub_weight, align 8, !dbg !9159
  %14 = load float, float* %13, align 4, !dbg !9160
  %15 = load float, float* %weight, align 4, !dbg !9161
  %mul = fmul float %14, %15, !dbg !9162
  call void @madd_v2_v2fl(float* %arraydecay4, float* %arraydecay6, float %mul), !dbg !9163
  %16 = load float*, float** %sub_weight, align 8, !dbg !9164
  %incdec.ptr = getelementptr inbounds float, float* %16, i32 1, !dbg !9164
  store float* %incdec.ptr, float** %sub_weight, align 8, !dbg !9164
  br label %for.inc, !dbg !9165

for.inc:                                          ; preds = %cond.end
  %17 = load i32, i32* %i, align 4, !dbg !9166
  %inc = add nsw i32 %17, 1, !dbg !9166
  store i32 %inc, i32* %i, align 4, !dbg !9166
  br label %for.cond, !dbg !9167, !llvm.loop !9168

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !9170

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !9171
  br label %for.cond7, !dbg !9174

for.cond7:                                        ; preds = %for.inc24, %if.else
  %18 = load i32, i32* %i, align 4, !dbg !9175
  %19 = load i32, i32* %count.addr, align 4, !dbg !9177
  %cmp8 = icmp slt i32 %18, %19, !dbg !9178
  br i1 %cmp8, label %for.body9, label %for.end26, !dbg !9179

for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata float* %weight10, metadata !9180, metadata !DIExpression()), !dbg !9182
  %20 = load float*, float** %weights.addr, align 8, !dbg !9183
  %tobool11 = icmp ne float* %20, null, !dbg !9183
  br i1 %tobool11, label %cond.true12, label %cond.false15, !dbg !9183

cond.true12:                                      ; preds = %for.body9
  %21 = load float*, float** %weights.addr, align 8, !dbg !9184
  %22 = load i32, i32* %i, align 4, !dbg !9185
  %idxprom13 = sext i32 %22 to i64, !dbg !9184
  %arrayidx14 = getelementptr inbounds float, float* %21, i64 %idxprom13, !dbg !9184
  %23 = load float, float* %arrayidx14, align 4, !dbg !9184
  br label %cond.end16, !dbg !9183

cond.false15:                                     ; preds = %for.body9
  br label %cond.end16, !dbg !9183

cond.end16:                                       ; preds = %cond.false15, %cond.true12
  %cond17 = phi float [ %23, %cond.true12 ], [ 1.000000e+00, %cond.false15 ], !dbg !9183
  store float %cond17, float* %weight10, align 4, !dbg !9182
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %src18, metadata !9186, metadata !DIExpression()), !dbg !9187
  %24 = load i8**, i8*** %sources.addr, align 8, !dbg !9188
  %25 = load i32, i32* %i, align 4, !dbg !9189
  %idxprom19 = sext i32 %25 to i64, !dbg !9188
  %arrayidx20 = getelementptr inbounds i8*, i8** %24, i64 %idxprom19, !dbg !9188
  %26 = load i8*, i8** %arrayidx20, align 8, !dbg !9188
  %27 = bitcast i8* %26 to %struct.OrigSpaceLoop*, !dbg !9188
  store %struct.OrigSpaceLoop* %27, %struct.OrigSpaceLoop** %src18, align 8, !dbg !9187
  %arraydecay21 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9190
  %28 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %src18, align 8, !dbg !9191
  %uv22 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %28, i32 0, i32 0, !dbg !9192
  %arraydecay23 = getelementptr inbounds [2 x float], [2 x float]* %uv22, i64 0, i64 0, !dbg !9191
  %29 = load float, float* %weight10, align 4, !dbg !9193
  call void @madd_v2_v2fl(float* %arraydecay21, float* %arraydecay23, float %29), !dbg !9194
  br label %for.inc24, !dbg !9195

for.inc24:                                        ; preds = %cond.end16
  %30 = load i32, i32* %i, align 4, !dbg !9196
  %inc25 = add nsw i32 %30, 1, !dbg !9196
  store i32 %inc25, i32* %i, align 4, !dbg !9196
  br label %for.cond7, !dbg !9197, !llvm.loop !9198

for.end26:                                        ; preds = %for.cond7
  br label %if.end

if.end:                                           ; preds = %for.end26, %for.end
  %31 = load i8*, i8** %dest.addr, align 8, !dbg !9200
  %32 = bitcast i8* %31 to %struct.OrigSpaceLoop*, !dbg !9201
  %uv27 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %32, i32 0, i32 0, !dbg !9202
  %arraydecay28 = getelementptr inbounds [2 x float], [2 x float]* %uv27, i64 0, i64 0, !dbg !9203
  %arraydecay29 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9204
  call void @copy_v2_v2(float* %arraydecay28, float* %arraydecay29), !dbg !9205
  ret void, !dbg !9206
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @layerEqual_mloop_origspace(i8* %data1, i8* %data2) #0 !dbg !9207 {
entry:
  %data1.addr = alloca i8*, align 8
  %data2.addr = alloca i8*, align 8
  %luv1 = alloca %struct.OrigSpaceLoop*, align 8
  %luv2 = alloca %struct.OrigSpaceLoop*, align 8
  store i8* %data1, i8** %data1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data1.addr, metadata !9208, metadata !DIExpression()), !dbg !9209
  store i8* %data2, i8** %data2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data2.addr, metadata !9210, metadata !DIExpression()), !dbg !9211
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %luv1, metadata !9212, metadata !DIExpression()), !dbg !9215
  %0 = load i8*, i8** %data1.addr, align 8, !dbg !9216
  %1 = bitcast i8* %0 to %struct.OrigSpaceLoop*, !dbg !9216
  store %struct.OrigSpaceLoop* %1, %struct.OrigSpaceLoop** %luv1, align 8, !dbg !9215
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %luv2, metadata !9217, metadata !DIExpression()), !dbg !9218
  %2 = load i8*, i8** %data2.addr, align 8, !dbg !9219
  %3 = bitcast i8* %2 to %struct.OrigSpaceLoop*, !dbg !9219
  store %struct.OrigSpaceLoop* %3, %struct.OrigSpaceLoop** %luv2, align 8, !dbg !9218
  %4 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %luv1, align 8, !dbg !9220
  %uv = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %4, i32 0, i32 0, !dbg !9221
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9220
  %5 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %luv2, align 8, !dbg !9222
  %uv1 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %5, i32 0, i32 0, !dbg !9223
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !9222
  %call = call float @len_squared_v2v2(float* %arraydecay, float* %arraydecay2), !dbg !9224
  %cmp = fcmp olt float %call, 0x3EE4F8B580000000, !dbg !9225
  %conv = zext i1 %cmp to i32, !dbg !9225
  %conv3 = trunc i32 %conv to i8, !dbg !9224
  ret i8 %conv3, !dbg !9226
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerMultiply_mloop_origspace(i8* %data, float %fac) #0 !dbg !9227 {
entry:
  %data.addr = alloca i8*, align 8
  %fac.addr = alloca float, align 4
  %luv = alloca %struct.OrigSpaceLoop*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9228, metadata !DIExpression()), !dbg !9229
  store float %fac, float* %fac.addr, align 4
  call void @llvm.dbg.declare(metadata float* %fac.addr, metadata !9230, metadata !DIExpression()), !dbg !9231
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %luv, metadata !9232, metadata !DIExpression()), !dbg !9233
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9234
  %1 = bitcast i8* %0 to %struct.OrigSpaceLoop*, !dbg !9234
  store %struct.OrigSpaceLoop* %1, %struct.OrigSpaceLoop** %luv, align 8, !dbg !9233
  %2 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %luv, align 8, !dbg !9235
  %uv = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %2, i32 0, i32 0, !dbg !9236
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9235
  %3 = load float, float* %fac.addr, align 4, !dbg !9237
  call void @mul_v2_fl(float* %arraydecay, float %3), !dbg !9238
  ret void, !dbg !9239
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInitMinMax_mloop_origspace(i8* %vmin, i8* %vmax) #0 !dbg !9240 {
entry:
  %vmin.addr = alloca i8*, align 8
  %vmax.addr = alloca i8*, align 8
  %min = alloca %struct.OrigSpaceLoop*, align 8
  %max = alloca %struct.OrigSpaceLoop*, align 8
  store i8* %vmin, i8** %vmin.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmin.addr, metadata !9241, metadata !DIExpression()), !dbg !9242
  store i8* %vmax, i8** %vmax.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmax.addr, metadata !9243, metadata !DIExpression()), !dbg !9244
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %min, metadata !9245, metadata !DIExpression()), !dbg !9246
  %0 = load i8*, i8** %vmin.addr, align 8, !dbg !9247
  %1 = bitcast i8* %0 to %struct.OrigSpaceLoop*, !dbg !9247
  store %struct.OrigSpaceLoop* %1, %struct.OrigSpaceLoop** %min, align 8, !dbg !9246
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %max, metadata !9248, metadata !DIExpression()), !dbg !9249
  %2 = load i8*, i8** %vmax.addr, align 8, !dbg !9250
  %3 = bitcast i8* %2 to %struct.OrigSpaceLoop*, !dbg !9250
  store %struct.OrigSpaceLoop* %3, %struct.OrigSpaceLoop** %max, align 8, !dbg !9249
  %4 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %min, align 8, !dbg !9251
  %uv = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %4, i32 0, i32 0, !dbg !9251
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 1, !dbg !9251
  store float 0x46293E5940000000, float* %arrayidx, align 4, !dbg !9251
  %5 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %min, align 8, !dbg !9251
  %uv1 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %5, i32 0, i32 0, !dbg !9251
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !9251
  store float 0x46293E5940000000, float* %arrayidx2, align 4, !dbg !9251
  %6 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %max, align 8, !dbg !9251
  %uv3 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %6, i32 0, i32 0, !dbg !9251
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %uv3, i64 0, i64 1, !dbg !9251
  store float 0xC6293E5940000000, float* %arrayidx4, align 4, !dbg !9251
  %7 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %max, align 8, !dbg !9251
  %uv5 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %7, i32 0, i32 0, !dbg !9251
  %arrayidx6 = getelementptr inbounds [2 x float], [2 x float]* %uv5, i64 0, i64 0, !dbg !9251
  store float 0xC6293E5940000000, float* %arrayidx6, align 4, !dbg !9251
  ret void, !dbg !9253
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerAdd_mloop_origspace(i8* %data1, i8* %data2) #0 !dbg !9254 {
entry:
  %data1.addr = alloca i8*, align 8
  %data2.addr = alloca i8*, align 8
  %l1 = alloca %struct.OrigSpaceLoop*, align 8
  %l2 = alloca %struct.OrigSpaceLoop*, align 8
  store i8* %data1, i8** %data1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data1.addr, metadata !9255, metadata !DIExpression()), !dbg !9256
  store i8* %data2, i8** %data2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data2.addr, metadata !9257, metadata !DIExpression()), !dbg !9258
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %l1, metadata !9259, metadata !DIExpression()), !dbg !9260
  %0 = load i8*, i8** %data1.addr, align 8, !dbg !9261
  %1 = bitcast i8* %0 to %struct.OrigSpaceLoop*, !dbg !9261
  store %struct.OrigSpaceLoop* %1, %struct.OrigSpaceLoop** %l1, align 8, !dbg !9260
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %l2, metadata !9262, metadata !DIExpression()), !dbg !9263
  %2 = load i8*, i8** %data2.addr, align 8, !dbg !9264
  %3 = bitcast i8* %2 to %struct.OrigSpaceLoop*, !dbg !9264
  store %struct.OrigSpaceLoop* %3, %struct.OrigSpaceLoop** %l2, align 8, !dbg !9263
  %4 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %l1, align 8, !dbg !9265
  %uv = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %4, i32 0, i32 0, !dbg !9266
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9265
  %5 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %l2, align 8, !dbg !9267
  %uv1 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %5, i32 0, i32 0, !dbg !9268
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !9267
  call void @add_v2_v2(float* %arraydecay, float* %arraydecay2), !dbg !9269
  ret void, !dbg !9270
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDoMinMax_mloop_origspace(i8* %data, i8* %vmin, i8* %vmax) #0 !dbg !9271 {
entry:
  %data.addr = alloca i8*, align 8
  %vmin.addr = alloca i8*, align 8
  %vmax.addr = alloca i8*, align 8
  %luv = alloca %struct.OrigSpaceLoop*, align 8
  %min = alloca %struct.OrigSpaceLoop*, align 8
  %max = alloca %struct.OrigSpaceLoop*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9272, metadata !DIExpression()), !dbg !9273
  store i8* %vmin, i8** %vmin.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmin.addr, metadata !9274, metadata !DIExpression()), !dbg !9275
  store i8* %vmax, i8** %vmax.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vmax.addr, metadata !9276, metadata !DIExpression()), !dbg !9277
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %luv, metadata !9278, metadata !DIExpression()), !dbg !9279
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9280
  %1 = bitcast i8* %0 to %struct.OrigSpaceLoop*, !dbg !9280
  store %struct.OrigSpaceLoop* %1, %struct.OrigSpaceLoop** %luv, align 8, !dbg !9279
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %min, metadata !9281, metadata !DIExpression()), !dbg !9282
  %2 = load i8*, i8** %vmin.addr, align 8, !dbg !9283
  %3 = bitcast i8* %2 to %struct.OrigSpaceLoop*, !dbg !9283
  store %struct.OrigSpaceLoop* %3, %struct.OrigSpaceLoop** %min, align 8, !dbg !9282
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %max, metadata !9284, metadata !DIExpression()), !dbg !9285
  %4 = load i8*, i8** %vmax.addr, align 8, !dbg !9286
  %5 = bitcast i8* %4 to %struct.OrigSpaceLoop*, !dbg !9286
  store %struct.OrigSpaceLoop* %5, %struct.OrigSpaceLoop** %max, align 8, !dbg !9285
  %6 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %min, align 8, !dbg !9287
  %uv = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %6, i32 0, i32 0, !dbg !9288
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9287
  %7 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %max, align 8, !dbg !9289
  %uv1 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %7, i32 0, i32 0, !dbg !9290
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !9289
  %8 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %luv, align 8, !dbg !9291
  %uv3 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %8, i32 0, i32 0, !dbg !9292
  %arraydecay4 = getelementptr inbounds [2 x float], [2 x float]* %uv3, i64 0, i64 0, !dbg !9291
  call void @minmax_v2v2_v2(float* %arraydecay, float* %arraydecay2, float* %arraydecay4), !dbg !9293
  ret void, !dbg !9294
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopyValue_mloop_origspace(i8* %source, i8* %dest) #0 !dbg !9295 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %luv1 = alloca %struct.OrigSpaceLoop*, align 8
  %luv2 = alloca %struct.OrigSpaceLoop*, align 8
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !9296, metadata !DIExpression()), !dbg !9297
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !9298, metadata !DIExpression()), !dbg !9299
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %luv1, metadata !9300, metadata !DIExpression()), !dbg !9301
  %0 = load i8*, i8** %source.addr, align 8, !dbg !9302
  %1 = bitcast i8* %0 to %struct.OrigSpaceLoop*, !dbg !9302
  store %struct.OrigSpaceLoop* %1, %struct.OrigSpaceLoop** %luv1, align 8, !dbg !9301
  call void @llvm.dbg.declare(metadata %struct.OrigSpaceLoop** %luv2, metadata !9303, metadata !DIExpression()), !dbg !9304
  %2 = load i8*, i8** %dest.addr, align 8, !dbg !9305
  %3 = bitcast i8* %2 to %struct.OrigSpaceLoop*, !dbg !9305
  store %struct.OrigSpaceLoop* %3, %struct.OrigSpaceLoop** %luv2, align 8, !dbg !9304
  %4 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %luv2, align 8, !dbg !9306
  %uv = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %4, i32 0, i32 0, !dbg !9307
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9306
  %5 = load %struct.OrigSpaceLoop*, %struct.OrigSpaceLoop** %luv1, align 8, !dbg !9308
  %uv1 = getelementptr inbounds %struct.OrigSpaceLoop, %struct.OrigSpaceLoop* %5, i32 0, i32 0, !dbg !9309
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv1, i64 0, i64 0, !dbg !9308
  call void @copy_v2_v2(float* %arraydecay, float* %arraydecay2), !dbg !9310
  ret void, !dbg !9311
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_bmesh_elem_py_ptr(i8* %UNUSED_source, i8* %dest, i32 %count) #0 !dbg !9312 {
entry:
  %UNUSED_source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %ptr = alloca i8**, align 8
  store i8* %UNUSED_source, i8** %UNUSED_source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %UNUSED_source.addr, metadata !9313, metadata !DIExpression()), !dbg !9314
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !9315, metadata !DIExpression()), !dbg !9316
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !9317, metadata !DIExpression()), !dbg !9318
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9319, metadata !DIExpression()), !dbg !9320
  call void @llvm.dbg.declare(metadata i32* %size, metadata !9321, metadata !DIExpression()), !dbg !9322
  store i32 8, i32* %size, align 4, !dbg !9322
  store i32 0, i32* %i, align 4, !dbg !9323
  br label %for.cond, !dbg !9325

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9326
  %1 = load i32, i32* %count.addr, align 4, !dbg !9328
  %cmp = icmp slt i32 %0, %1, !dbg !9329
  br i1 %cmp, label %for.body, label %for.end, !dbg !9330

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8*** %ptr, metadata !9331, metadata !DIExpression()), !dbg !9333
  %2 = load i8*, i8** %dest.addr, align 8, !dbg !9334
  %3 = load i32, i32* %i, align 4, !dbg !9335
  %4 = load i32, i32* %size, align 4, !dbg !9336
  %mul = mul nsw i32 %3, %4, !dbg !9337
  %idx.ext = sext i32 %mul to i64, !dbg !9338
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !9338
  %5 = bitcast i8* %add.ptr to i8**, !dbg !9339
  store i8** %5, i8*** %ptr, align 8, !dbg !9333
  %6 = load i8**, i8*** %ptr, align 8, !dbg !9340
  store i8* null, i8** %6, align 8, !dbg !9341
  br label %for.inc, !dbg !9342

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !9343
  %inc = add nsw i32 %7, 1, !dbg !9343
  store i32 %inc, i32* %i, align 4, !dbg !9343
  br label %for.cond, !dbg !9344, !llvm.loop !9345

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9347
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerFree_bmesh_elem_py_ptr(i8* %data, i32 %count, i32 %size) #0 !dbg !9348 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ptr = alloca i8**, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9349, metadata !DIExpression()), !dbg !9350
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !9351, metadata !DIExpression()), !dbg !9352
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !9353, metadata !DIExpression()), !dbg !9354
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9355, metadata !DIExpression()), !dbg !9356
  store i32 0, i32* %i, align 4, !dbg !9357
  br label %for.cond, !dbg !9359

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9360
  %1 = load i32, i32* %count.addr, align 4, !dbg !9362
  %cmp = icmp slt i32 %0, %1, !dbg !9363
  br i1 %cmp, label %for.body, label %for.end, !dbg !9364

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8*** %ptr, metadata !9365, metadata !DIExpression()), !dbg !9367
  %2 = load i8*, i8** %data.addr, align 8, !dbg !9368
  %3 = load i32, i32* %i, align 4, !dbg !9369
  %4 = load i32, i32* %size.addr, align 4, !dbg !9370
  %mul = mul nsw i32 %3, %4, !dbg !9371
  %idx.ext = sext i32 %mul to i64, !dbg !9372
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !9372
  %5 = bitcast i8* %add.ptr to i8**, !dbg !9373
  store i8** %5, i8*** %ptr, align 8, !dbg !9367
  %6 = load i8**, i8*** %ptr, align 8, !dbg !9374
  %7 = load i8*, i8** %6, align 8, !dbg !9376
  %tobool = icmp ne i8* %7, null, !dbg !9376
  br i1 %tobool, label %if.then, label %if.end, !dbg !9377

if.then:                                          ; preds = %for.body
  %8 = load i8**, i8*** %ptr, align 8, !dbg !9378
  %9 = load i8*, i8** %8, align 8, !dbg !9380
  %10 = bitcast i8* %9 to %struct.BPy_BMGeneric*, !dbg !9380
  call void @bpy_bm_generic_invalidate(%struct.BPy_BMGeneric* %10), !dbg !9381
  br label %if.end, !dbg !9382

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !9383

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !9384
  %inc = add nsw i32 %11, 1, !dbg !9384
  store i32 %inc, i32* %i, align 4, !dbg !9384
  br label %for.cond, !dbg !9385, !llvm.loop !9386

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9388
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerCopy_grid_paint_mask(i8* %source, i8* %dest, i32 %count) #0 !dbg !9389 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca %struct.GridPaintMask*, align 8
  %d = alloca %struct.GridPaintMask*, align 8
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !9390, metadata !DIExpression()), !dbg !9391
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !9392, metadata !DIExpression()), !dbg !9393
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !9394, metadata !DIExpression()), !dbg !9395
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9396, metadata !DIExpression()), !dbg !9397
  call void @llvm.dbg.declare(metadata %struct.GridPaintMask** %s, metadata !9398, metadata !DIExpression()), !dbg !9407
  %0 = load i8*, i8** %source.addr, align 8, !dbg !9408
  %1 = bitcast i8* %0 to %struct.GridPaintMask*, !dbg !9408
  store %struct.GridPaintMask* %1, %struct.GridPaintMask** %s, align 8, !dbg !9407
  call void @llvm.dbg.declare(metadata %struct.GridPaintMask** %d, metadata !9409, metadata !DIExpression()), !dbg !9411
  %2 = load i8*, i8** %dest.addr, align 8, !dbg !9412
  %3 = bitcast i8* %2 to %struct.GridPaintMask*, !dbg !9412
  store %struct.GridPaintMask* %3, %struct.GridPaintMask** %d, align 8, !dbg !9411
  store i32 0, i32* %i, align 4, !dbg !9413
  br label %for.cond, !dbg !9415

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !9416
  %5 = load i32, i32* %count.addr, align 4, !dbg !9418
  %cmp = icmp slt i32 %4, %5, !dbg !9419
  br i1 %cmp, label %for.body, label %for.end, !dbg !9420

for.body:                                         ; preds = %for.cond
  %6 = load %struct.GridPaintMask*, %struct.GridPaintMask** %s, align 8, !dbg !9421
  %7 = load i32, i32* %i, align 4, !dbg !9424
  %idxprom = sext i32 %7 to i64, !dbg !9421
  %arrayidx = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %6, i64 %idxprom, !dbg !9421
  %data = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx, i32 0, i32 0, !dbg !9425
  %8 = load float*, float** %data, align 8, !dbg !9425
  %tobool = icmp ne float* %8, null, !dbg !9421
  br i1 %tobool, label %if.then, label %if.else, !dbg !9426

if.then:                                          ; preds = %for.body
  %9 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9427
  %10 = load %struct.GridPaintMask*, %struct.GridPaintMask** %s, align 8, !dbg !9429
  %11 = load i32, i32* %i, align 4, !dbg !9430
  %idxprom1 = sext i32 %11 to i64, !dbg !9429
  %arrayidx2 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %10, i64 %idxprom1, !dbg !9429
  %data3 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx2, i32 0, i32 0, !dbg !9431
  %12 = load float*, float** %data3, align 8, !dbg !9431
  %13 = bitcast float* %12 to i8*, !dbg !9429
  %call = call i8* %9(i8* %13), !dbg !9427
  %14 = bitcast i8* %call to float*, !dbg !9427
  %15 = load %struct.GridPaintMask*, %struct.GridPaintMask** %d, align 8, !dbg !9432
  %16 = load i32, i32* %i, align 4, !dbg !9433
  %idxprom4 = sext i32 %16 to i64, !dbg !9432
  %arrayidx5 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %15, i64 %idxprom4, !dbg !9432
  %data6 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx5, i32 0, i32 0, !dbg !9434
  store float* %14, float** %data6, align 8, !dbg !9435
  %17 = load %struct.GridPaintMask*, %struct.GridPaintMask** %s, align 8, !dbg !9436
  %18 = load i32, i32* %i, align 4, !dbg !9437
  %idxprom7 = sext i32 %18 to i64, !dbg !9436
  %arrayidx8 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %17, i64 %idxprom7, !dbg !9436
  %level = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx8, i32 0, i32 1, !dbg !9438
  %19 = load i32, i32* %level, align 8, !dbg !9438
  %20 = load %struct.GridPaintMask*, %struct.GridPaintMask** %d, align 8, !dbg !9439
  %21 = load i32, i32* %i, align 4, !dbg !9440
  %idxprom9 = sext i32 %21 to i64, !dbg !9439
  %arrayidx10 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %20, i64 %idxprom9, !dbg !9439
  %level11 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx10, i32 0, i32 1, !dbg !9441
  store i32 %19, i32* %level11, align 8, !dbg !9442
  br label %if.end, !dbg !9443

if.else:                                          ; preds = %for.body
  %22 = load %struct.GridPaintMask*, %struct.GridPaintMask** %d, align 8, !dbg !9444
  %23 = load i32, i32* %i, align 4, !dbg !9446
  %idxprom12 = sext i32 %23 to i64, !dbg !9444
  %arrayidx13 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %22, i64 %idxprom12, !dbg !9444
  %data14 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx13, i32 0, i32 0, !dbg !9447
  store float* null, float** %data14, align 8, !dbg !9448
  %24 = load %struct.GridPaintMask*, %struct.GridPaintMask** %d, align 8, !dbg !9449
  %25 = load i32, i32* %i, align 4, !dbg !9450
  %idxprom15 = sext i32 %25 to i64, !dbg !9449
  %arrayidx16 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %24, i64 %idxprom15, !dbg !9449
  %level17 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx16, i32 0, i32 1, !dbg !9451
  store i32 0, i32* %level17, align 8, !dbg !9452
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !9453

for.inc:                                          ; preds = %if.end
  %26 = load i32, i32* %i, align 4, !dbg !9454
  %inc = add nsw i32 %26, 1, !dbg !9454
  store i32 %inc, i32* %i, align 4, !dbg !9454
  br label %for.cond, !dbg !9455, !llvm.loop !9456

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9458
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerFree_grid_paint_mask(i8* %data, i32 %count, i32 %UNUSED_size) #0 !dbg !9459 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %UNUSED_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %gpm = alloca %struct.GridPaintMask*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9460, metadata !DIExpression()), !dbg !9461
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !9462, metadata !DIExpression()), !dbg !9463
  store i32 %UNUSED_size, i32* %UNUSED_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %UNUSED_size.addr, metadata !9464, metadata !DIExpression()), !dbg !9465
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9466, metadata !DIExpression()), !dbg !9467
  call void @llvm.dbg.declare(metadata %struct.GridPaintMask** %gpm, metadata !9468, metadata !DIExpression()), !dbg !9469
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9470
  %1 = bitcast i8* %0 to %struct.GridPaintMask*, !dbg !9470
  store %struct.GridPaintMask* %1, %struct.GridPaintMask** %gpm, align 8, !dbg !9469
  store i32 0, i32* %i, align 4, !dbg !9471
  br label %for.cond, !dbg !9473

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !9474
  %3 = load i32, i32* %count.addr, align 4, !dbg !9476
  %cmp = icmp slt i32 %2, %3, !dbg !9477
  br i1 %cmp, label %for.body, label %for.end, !dbg !9478

for.body:                                         ; preds = %for.cond
  %4 = load %struct.GridPaintMask*, %struct.GridPaintMask** %gpm, align 8, !dbg !9479
  %5 = load i32, i32* %i, align 4, !dbg !9482
  %idxprom = sext i32 %5 to i64, !dbg !9479
  %arrayidx = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %4, i64 %idxprom, !dbg !9479
  %data1 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx, i32 0, i32 0, !dbg !9483
  %6 = load float*, float** %data1, align 8, !dbg !9483
  %tobool = icmp ne float* %6, null, !dbg !9479
  br i1 %tobool, label %if.then, label %if.end, !dbg !9484

if.then:                                          ; preds = %for.body
  %7 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !9485
  %8 = load %struct.GridPaintMask*, %struct.GridPaintMask** %gpm, align 8, !dbg !9486
  %9 = load i32, i32* %i, align 4, !dbg !9487
  %idxprom2 = sext i32 %9 to i64, !dbg !9486
  %arrayidx3 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %8, i64 %idxprom2, !dbg !9486
  %data4 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx3, i32 0, i32 0, !dbg !9488
  %10 = load float*, float** %data4, align 8, !dbg !9488
  %11 = bitcast float* %10 to i8*, !dbg !9486
  call void %7(i8* %11), !dbg !9485
  br label %if.end, !dbg !9485

if.end:                                           ; preds = %if.then, %for.body
  %12 = load %struct.GridPaintMask*, %struct.GridPaintMask** %gpm, align 8, !dbg !9489
  %13 = load i32, i32* %i, align 4, !dbg !9490
  %idxprom5 = sext i32 %13 to i64, !dbg !9489
  %arrayidx6 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %12, i64 %idxprom5, !dbg !9489
  %data7 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx6, i32 0, i32 0, !dbg !9491
  store float* null, float** %data7, align 8, !dbg !9492
  %14 = load %struct.GridPaintMask*, %struct.GridPaintMask** %gpm, align 8, !dbg !9493
  %15 = load i32, i32* %i, align 4, !dbg !9494
  %idxprom8 = sext i32 %15 to i64, !dbg !9493
  %arrayidx9 = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %14, i64 %idxprom8, !dbg !9493
  %level = getelementptr inbounds %struct.GridPaintMask, %struct.GridPaintMask* %arrayidx9, i32 0, i32 1, !dbg !9495
  store i32 0, i32* %level, align 8, !dbg !9496
  br label %for.inc, !dbg !9497

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4, !dbg !9498
  %inc = add nsw i32 %16, 1, !dbg !9498
  store i32 %inc, i32* %i, align 4, !dbg !9498
  br label %for.cond, !dbg !9499, !llvm.loop !9500

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9502
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerInterp_mvert_skin(i8** %sources, float* %weights, float* %UNUSED_sub_weights, i32 %count, i8* %dest) #0 !dbg !9503 {
entry:
  %sources.addr = alloca i8**, align 8
  %weights.addr = alloca float*, align 8
  %UNUSED_sub_weights.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %radius = alloca [3 x float], align 4
  %w = alloca float, align 4
  %vs = alloca %struct.MVertSkin*, align 8
  %i = alloca i32, align 4
  store i8** %sources, i8*** %sources.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %sources.addr, metadata !9504, metadata !DIExpression()), !dbg !9505
  store float* %weights, float** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %weights.addr, metadata !9506, metadata !DIExpression()), !dbg !9507
  store float* %UNUSED_sub_weights, float** %UNUSED_sub_weights.addr, align 8
  call void @llvm.dbg.declare(metadata float** %UNUSED_sub_weights.addr, metadata !9508, metadata !DIExpression()), !dbg !9509
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !9510, metadata !DIExpression()), !dbg !9511
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !9512, metadata !DIExpression()), !dbg !9513
  call void @llvm.dbg.declare(metadata [3 x float]* %radius, metadata !9514, metadata !DIExpression()), !dbg !9515
  call void @llvm.dbg.declare(metadata float* %w, metadata !9516, metadata !DIExpression()), !dbg !9517
  call void @llvm.dbg.declare(metadata %struct.MVertSkin** %vs, metadata !9518, metadata !DIExpression()), !dbg !9525
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9526, metadata !DIExpression()), !dbg !9527
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %radius, i64 0, i64 0, !dbg !9528
  call void @zero_v3(float* %arraydecay), !dbg !9529
  store i32 0, i32* %i, align 4, !dbg !9530
  br label %for.cond, !dbg !9532

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9533
  %1 = load i32, i32* %count.addr, align 4, !dbg !9535
  %cmp = icmp slt i32 %0, %1, !dbg !9536
  br i1 %cmp, label %for.body, label %for.end, !dbg !9537

for.body:                                         ; preds = %for.cond
  %2 = load float*, float** %weights.addr, align 8, !dbg !9538
  %tobool = icmp ne float* %2, null, !dbg !9538
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9538

cond.true:                                        ; preds = %for.body
  %3 = load float*, float** %weights.addr, align 8, !dbg !9540
  %4 = load i32, i32* %i, align 4, !dbg !9541
  %idxprom = sext i32 %4 to i64, !dbg !9540
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom, !dbg !9540
  %5 = load float, float* %arrayidx, align 4, !dbg !9540
  br label %cond.end, !dbg !9538

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !9538

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %5, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !9538
  store float %cond, float* %w, align 4, !dbg !9542
  %6 = load i8**, i8*** %sources.addr, align 8, !dbg !9543
  %7 = load i32, i32* %i, align 4, !dbg !9544
  %idxprom1 = sext i32 %7 to i64, !dbg !9543
  %arrayidx2 = getelementptr inbounds i8*, i8** %6, i64 %idxprom1, !dbg !9543
  %8 = load i8*, i8** %arrayidx2, align 8, !dbg !9543
  %9 = bitcast i8* %8 to %struct.MVertSkin*, !dbg !9543
  store %struct.MVertSkin* %9, %struct.MVertSkin** %vs, align 8, !dbg !9545
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %radius, i64 0, i64 0, !dbg !9546
  %10 = load %struct.MVertSkin*, %struct.MVertSkin** %vs, align 8, !dbg !9547
  %radius4 = getelementptr inbounds %struct.MVertSkin, %struct.MVertSkin* %10, i32 0, i32 0, !dbg !9548
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %radius4, i64 0, i64 0, !dbg !9547
  %11 = load float, float* %w, align 4, !dbg !9549
  call void @madd_v3_v3fl(float* %arraydecay3, float* %arraydecay5, float %11), !dbg !9550
  br label %for.inc, !dbg !9551

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4, !dbg !9552
  %inc = add nsw i32 %12, 1, !dbg !9552
  store i32 %inc, i32* %i, align 4, !dbg !9552
  br label %for.cond, !dbg !9553, !llvm.loop !9554

for.end:                                          ; preds = %for.cond
  %13 = load i8*, i8** %dest.addr, align 8, !dbg !9556
  %14 = bitcast i8* %13 to %struct.MVertSkin*, !dbg !9556
  store %struct.MVertSkin* %14, %struct.MVertSkin** %vs, align 8, !dbg !9557
  %15 = load %struct.MVertSkin*, %struct.MVertSkin** %vs, align 8, !dbg !9558
  %radius6 = getelementptr inbounds %struct.MVertSkin, %struct.MVertSkin* %15, i32 0, i32 0, !dbg !9559
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %radius6, i64 0, i64 0, !dbg !9558
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %radius, i64 0, i64 0, !dbg !9560
  call void @copy_v3_v3(float* %arraydecay7, float* %arraydecay8), !dbg !9561
  %16 = load %struct.MVertSkin*, %struct.MVertSkin** %vs, align 8, !dbg !9562
  %flag = getelementptr inbounds %struct.MVertSkin, %struct.MVertSkin* %16, i32 0, i32 1, !dbg !9563
  %17 = load i32, i32* %flag, align 4, !dbg !9564
  %and = and i32 %17, -2, !dbg !9564
  store i32 %and, i32* %flag, align 4, !dbg !9564
  ret void, !dbg !9565
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerDefault_mvert_skin(i8* %data, i32 %count) #0 !dbg !9566 {
entry:
  %data.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %vs = alloca %struct.MVertSkin*, align 8
  %i = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9567, metadata !DIExpression()), !dbg !9568
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !9569, metadata !DIExpression()), !dbg !9570
  call void @llvm.dbg.declare(metadata %struct.MVertSkin** %vs, metadata !9571, metadata !DIExpression()), !dbg !9572
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9573
  %1 = bitcast i8* %0 to %struct.MVertSkin*, !dbg !9573
  store %struct.MVertSkin* %1, %struct.MVertSkin** %vs, align 8, !dbg !9572
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9574, metadata !DIExpression()), !dbg !9575
  store i32 0, i32* %i, align 4, !dbg !9576
  br label %for.cond, !dbg !9578

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !9579
  %3 = load i32, i32* %count.addr, align 4, !dbg !9581
  %cmp = icmp slt i32 %2, %3, !dbg !9582
  br i1 %cmp, label %for.body, label %for.end, !dbg !9583

for.body:                                         ; preds = %for.cond
  %4 = load %struct.MVertSkin*, %struct.MVertSkin** %vs, align 8, !dbg !9584
  %5 = load i32, i32* %i, align 4, !dbg !9586
  %idxprom = sext i32 %5 to i64, !dbg !9584
  %arrayidx = getelementptr inbounds %struct.MVertSkin, %struct.MVertSkin* %4, i64 %idxprom, !dbg !9584
  %radius = getelementptr inbounds %struct.MVertSkin, %struct.MVertSkin* %arrayidx, i32 0, i32 0, !dbg !9587
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %radius, i64 0, i64 0, !dbg !9584
  call void @copy_v3_fl(float* %arraydecay, float 2.500000e-01), !dbg !9588
  %6 = load %struct.MVertSkin*, %struct.MVertSkin** %vs, align 8, !dbg !9589
  %7 = load i32, i32* %i, align 4, !dbg !9590
  %idxprom1 = sext i32 %7 to i64, !dbg !9589
  %arrayidx2 = getelementptr inbounds %struct.MVertSkin, %struct.MVertSkin* %6, i64 %idxprom1, !dbg !9589
  %flag = getelementptr inbounds %struct.MVertSkin, %struct.MVertSkin* %arrayidx2, i32 0, i32 1, !dbg !9591
  store i32 0, i32* %flag, align 4, !dbg !9592
  br label %for.inc, !dbg !9593

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !9594
  %inc = add nsw i32 %8, 1, !dbg !9594
  store i32 %inc, i32* %i, align 4, !dbg !9594
  br label %for.cond, !dbg !9595, !llvm.loop !9596

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9598
}

; Function Attrs: noinline nounwind uwtable
define internal void @layerSwap_flnor(i8* %data, i32* %corner_indices) #0 !dbg !9599 {
entry:
  %data.addr = alloca i8*, align 8
  %corner_indices.addr = alloca i32*, align 8
  %flnors = alloca [4 x [3 x i16]]*, align 8
  %nors = alloca [4 x [3 x i16]], align 16
  %i = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9600, metadata !DIExpression()), !dbg !9601
  store i32* %corner_indices, i32** %corner_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %corner_indices.addr, metadata !9602, metadata !DIExpression()), !dbg !9603
  call void @llvm.dbg.declare(metadata [4 x [3 x i16]]** %flnors, metadata !9604, metadata !DIExpression()), !dbg !9608
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9609
  %1 = bitcast i8* %0 to [4 x [3 x i16]]*, !dbg !9609
  store [4 x [3 x i16]]* %1, [4 x [3 x i16]]** %flnors, align 8, !dbg !9608
  call void @llvm.dbg.declare(metadata [4 x [3 x i16]]* %nors, metadata !9610, metadata !DIExpression()), !dbg !9611
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9612, metadata !DIExpression()), !dbg !9613
  store i32 4, i32* %i, align 4, !dbg !9613
  br label %while.cond, !dbg !9614

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4, !dbg !9615
  %dec = add nsw i32 %2, -1, !dbg !9615
  store i32 %dec, i32* %i, align 4, !dbg !9615
  %tobool = icmp ne i32 %2, 0, !dbg !9614
  br i1 %tobool, label %while.body, label %while.end, !dbg !9614

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %i, align 4, !dbg !9616
  %idxprom = sext i32 %3 to i64, !dbg !9618
  %arrayidx = getelementptr inbounds [4 x [3 x i16]], [4 x [3 x i16]]* %nors, i64 0, i64 %idxprom, !dbg !9618
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %arrayidx, i64 0, i64 0, !dbg !9618
  %4 = load [4 x [3 x i16]]*, [4 x [3 x i16]]** %flnors, align 8, !dbg !9619
  %5 = load i32*, i32** %corner_indices.addr, align 8, !dbg !9620
  %6 = load i32, i32* %i, align 4, !dbg !9621
  %idxprom1 = sext i32 %6 to i64, !dbg !9620
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i64 %idxprom1, !dbg !9620
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !9620
  %idxprom3 = sext i32 %7 to i64, !dbg !9622
  %arrayidx4 = getelementptr inbounds [4 x [3 x i16]], [4 x [3 x i16]]* %4, i64 0, i64 %idxprom3, !dbg !9622
  %arraydecay5 = getelementptr inbounds [3 x i16], [3 x i16]* %arrayidx4, i64 0, i64 0, !dbg !9622
  call void @copy_v3_v3_short(i16* %arraydecay, i16* %arraydecay5), !dbg !9623
  br label %while.cond, !dbg !9614, !llvm.loop !9624

while.end:                                        ; preds = %while.cond
  %8 = load [4 x [3 x i16]]*, [4 x [3 x i16]]** %flnors, align 8, !dbg !9626
  %9 = bitcast [4 x [3 x i16]]* %8 to i8*, !dbg !9627
  %arraydecay6 = getelementptr inbounds [4 x [3 x i16]], [4 x [3 x i16]]* %nors, i64 0, i64 0, !dbg !9627
  %10 = bitcast [3 x i16]* %arraydecay6 to i8*, !dbg !9627
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %9, i8* align 16 %10, i64 24, i1 false), !dbg !9627
  ret void, !dbg !9628
}

; Function Attrs: noinline nounwind uwtable
define internal void @madd_v2_v2fl(float* %r, float* %a, float %f) #0 !dbg !9629 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9633, metadata !DIExpression()), !dbg !9634
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9635, metadata !DIExpression()), !dbg !9636
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !9637, metadata !DIExpression()), !dbg !9638
  %0 = load float*, float** %a.addr, align 8, !dbg !9639
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9639
  %1 = load float, float* %arrayidx, align 4, !dbg !9639
  %2 = load float, float* %f.addr, align 4, !dbg !9640
  %mul = fmul float %1, %2, !dbg !9641
  %3 = load float*, float** %r.addr, align 8, !dbg !9642
  %arrayidx1 = getelementptr inbounds float, float* %3, i64 0, !dbg !9642
  %4 = load float, float* %arrayidx1, align 4, !dbg !9643
  %add = fadd float %4, %mul, !dbg !9643
  store float %add, float* %arrayidx1, align 4, !dbg !9643
  %5 = load float*, float** %a.addr, align 8, !dbg !9644
  %arrayidx2 = getelementptr inbounds float, float* %5, i64 1, !dbg !9644
  %6 = load float, float* %arrayidx2, align 4, !dbg !9644
  %7 = load float, float* %f.addr, align 4, !dbg !9645
  %mul3 = fmul float %6, %7, !dbg !9646
  %8 = load float*, float** %r.addr, align 8, !dbg !9647
  %arrayidx4 = getelementptr inbounds float, float* %8, i64 1, !dbg !9647
  %9 = load float, float* %arrayidx4, align 4, !dbg !9648
  %add5 = fadd float %9, %mul3, !dbg !9648
  store float %add5, float* %arrayidx4, align 4, !dbg !9648
  ret void, !dbg !9649
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v2_v2(float* %r, float* %a) #0 !dbg !9650 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9653, metadata !DIExpression()), !dbg !9654
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9655, metadata !DIExpression()), !dbg !9656
  %0 = load float*, float** %a.addr, align 8, !dbg !9657
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9657
  %1 = load float, float* %arrayidx, align 4, !dbg !9657
  %2 = load float*, float** %r.addr, align 8, !dbg !9658
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !9658
  store float %1, float* %arrayidx1, align 4, !dbg !9659
  %3 = load float*, float** %a.addr, align 8, !dbg !9660
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !9660
  %4 = load float, float* %arrayidx2, align 4, !dbg !9660
  %5 = load float*, float** %r.addr, align 8, !dbg !9661
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !9661
  store float %4, float* %arrayidx3, align 4, !dbg !9662
  ret void, !dbg !9663
}

; Function Attrs: noinline nounwind uwtable
define internal void @zero_v2(float* %r) #0 !dbg !9664 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9667, metadata !DIExpression()), !dbg !9668
  %0 = load float*, float** %r.addr, align 8, !dbg !9669
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9669
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !9670
  %1 = load float*, float** %r.addr, align 8, !dbg !9671
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 1, !dbg !9671
  store float 0.000000e+00, float* %arrayidx1, align 4, !dbg !9672
  ret void, !dbg !9673
}

; Function Attrs: noinline nounwind uwtable
define internal float @len_squared_v2v2(float* %a, float* %b) #0 !dbg !9674 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  %d = alloca [2 x float], align 4
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9677, metadata !DIExpression()), !dbg !9678
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !9679, metadata !DIExpression()), !dbg !9680
  call void @llvm.dbg.declare(metadata [2 x float]* %d, metadata !9681, metadata !DIExpression()), !dbg !9682
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %d, i64 0, i64 0, !dbg !9683
  %0 = load float*, float** %b.addr, align 8, !dbg !9684
  %1 = load float*, float** %a.addr, align 8, !dbg !9685
  call void @sub_v2_v2v2(float* %arraydecay, float* %0, float* %1), !dbg !9686
  %arraydecay1 = getelementptr inbounds [2 x float], [2 x float]* %d, i64 0, i64 0, !dbg !9687
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %d, i64 0, i64 0, !dbg !9688
  %call = call float @dot_v2v2(float* %arraydecay1, float* %arraydecay2), !dbg !9689
  ret float %call, !dbg !9690
}

; Function Attrs: noinline nounwind uwtable
define internal void @sub_v2_v2v2(float* %r, float* %a, float* %b) #0 !dbg !9691 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9694, metadata !DIExpression()), !dbg !9695
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9696, metadata !DIExpression()), !dbg !9697
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !9698, metadata !DIExpression()), !dbg !9699
  %0 = load float*, float** %a.addr, align 8, !dbg !9700
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9700
  %1 = load float, float* %arrayidx, align 4, !dbg !9700
  %2 = load float*, float** %b.addr, align 8, !dbg !9701
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !9701
  %3 = load float, float* %arrayidx1, align 4, !dbg !9701
  %sub = fsub float %1, %3, !dbg !9702
  %4 = load float*, float** %r.addr, align 8, !dbg !9703
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 0, !dbg !9703
  store float %sub, float* %arrayidx2, align 4, !dbg !9704
  %5 = load float*, float** %a.addr, align 8, !dbg !9705
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !9705
  %6 = load float, float* %arrayidx3, align 4, !dbg !9705
  %7 = load float*, float** %b.addr, align 8, !dbg !9706
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 1, !dbg !9706
  %8 = load float, float* %arrayidx4, align 4, !dbg !9706
  %sub5 = fsub float %6, %8, !dbg !9707
  %9 = load float*, float** %r.addr, align 8, !dbg !9708
  %arrayidx6 = getelementptr inbounds float, float* %9, i64 1, !dbg !9708
  store float %sub5, float* %arrayidx6, align 4, !dbg !9709
  ret void, !dbg !9710
}

; Function Attrs: noinline nounwind uwtable
define internal float @dot_v2v2(float* %a, float* %b) #0 !dbg !9711 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9712, metadata !DIExpression()), !dbg !9713
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !9714, metadata !DIExpression()), !dbg !9715
  %0 = load float*, float** %a.addr, align 8, !dbg !9716
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9716
  %1 = load float, float* %arrayidx, align 4, !dbg !9716
  %2 = load float*, float** %b.addr, align 8, !dbg !9717
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !9717
  %3 = load float, float* %arrayidx1, align 4, !dbg !9717
  %mul = fmul float %1, %3, !dbg !9718
  %4 = load float*, float** %a.addr, align 8, !dbg !9719
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !9719
  %5 = load float, float* %arrayidx2, align 4, !dbg !9719
  %6 = load float*, float** %b.addr, align 8, !dbg !9720
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !9720
  %7 = load float, float* %arrayidx3, align 4, !dbg !9720
  %mul4 = fmul float %5, %7, !dbg !9721
  %add = fadd float %mul, %mul4, !dbg !9722
  ret float %add, !dbg !9723
}

; Function Attrs: noinline nounwind uwtable
define internal void @mul_v2_fl(float* %r, float %f) #0 !dbg !9724 {
entry:
  %r.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9727, metadata !DIExpression()), !dbg !9728
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !9729, metadata !DIExpression()), !dbg !9730
  %0 = load float, float* %f.addr, align 4, !dbg !9731
  %1 = load float*, float** %r.addr, align 8, !dbg !9732
  %arrayidx = getelementptr inbounds float, float* %1, i64 0, !dbg !9732
  %2 = load float, float* %arrayidx, align 4, !dbg !9733
  %mul = fmul float %2, %0, !dbg !9733
  store float %mul, float* %arrayidx, align 4, !dbg !9733
  %3 = load float, float* %f.addr, align 4, !dbg !9734
  %4 = load float*, float** %r.addr, align 8, !dbg !9735
  %arrayidx1 = getelementptr inbounds float, float* %4, i64 1, !dbg !9735
  %5 = load float, float* %arrayidx1, align 4, !dbg !9736
  %mul2 = fmul float %5, %3, !dbg !9736
  store float %mul2, float* %arrayidx1, align 4, !dbg !9736
  ret void, !dbg !9737
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_v2_v2(float* %r, float* %a) #0 !dbg !9738 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9739, metadata !DIExpression()), !dbg !9740
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9741, metadata !DIExpression()), !dbg !9742
  %0 = load float*, float** %a.addr, align 8, !dbg !9743
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9743
  %1 = load float, float* %arrayidx, align 4, !dbg !9743
  %2 = load float*, float** %r.addr, align 8, !dbg !9744
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !9744
  %3 = load float, float* %arrayidx1, align 4, !dbg !9745
  %add = fadd float %3, %1, !dbg !9745
  store float %add, float* %arrayidx1, align 4, !dbg !9745
  %4 = load float*, float** %a.addr, align 8, !dbg !9746
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !9746
  %5 = load float, float* %arrayidx2, align 4, !dbg !9746
  %6 = load float*, float** %r.addr, align 8, !dbg !9747
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !9747
  %7 = load float, float* %arrayidx3, align 4, !dbg !9748
  %add4 = fadd float %7, %5, !dbg !9748
  store float %add4, float* %arrayidx3, align 4, !dbg !9748
  ret void, !dbg !9749
}

declare dso_local void @minmax_v2v2_v2(float*, float*, float*) #2

declare dso_local i32 @multires_mdisp_corners(%struct.MDisps*) #2

declare dso_local i32 @cdf_read_data(%struct.CDataFile*, i32, i8*) #2

declare dso_local i32 @cdf_write_data(%struct.CDataFile*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @zero_v3(float* %r) #0 !dbg !9750 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9751, metadata !DIExpression()), !dbg !9752
  %0 = load float*, float** %r.addr, align 8, !dbg !9753
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9753
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !9754
  %1 = load float*, float** %r.addr, align 8, !dbg !9755
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 1, !dbg !9755
  store float 0.000000e+00, float* %arrayidx1, align 4, !dbg !9756
  %2 = load float*, float** %r.addr, align 8, !dbg !9757
  %arrayidx2 = getelementptr inbounds float, float* %2, i64 2, !dbg !9757
  store float 0.000000e+00, float* %arrayidx2, align 4, !dbg !9758
  ret void, !dbg !9759
}

; Function Attrs: noinline nounwind uwtable
define internal void @madd_v3_v3fl(float* %r, float* %a, float %f) #0 !dbg !9760 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9761, metadata !DIExpression()), !dbg !9762
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9763, metadata !DIExpression()), !dbg !9764
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !9765, metadata !DIExpression()), !dbg !9766
  %0 = load float*, float** %a.addr, align 8, !dbg !9767
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9767
  %1 = load float, float* %arrayidx, align 4, !dbg !9767
  %2 = load float, float* %f.addr, align 4, !dbg !9768
  %mul = fmul float %1, %2, !dbg !9769
  %3 = load float*, float** %r.addr, align 8, !dbg !9770
  %arrayidx1 = getelementptr inbounds float, float* %3, i64 0, !dbg !9770
  %4 = load float, float* %arrayidx1, align 4, !dbg !9771
  %add = fadd float %4, %mul, !dbg !9771
  store float %add, float* %arrayidx1, align 4, !dbg !9771
  %5 = load float*, float** %a.addr, align 8, !dbg !9772
  %arrayidx2 = getelementptr inbounds float, float* %5, i64 1, !dbg !9772
  %6 = load float, float* %arrayidx2, align 4, !dbg !9772
  %7 = load float, float* %f.addr, align 4, !dbg !9773
  %mul3 = fmul float %6, %7, !dbg !9774
  %8 = load float*, float** %r.addr, align 8, !dbg !9775
  %arrayidx4 = getelementptr inbounds float, float* %8, i64 1, !dbg !9775
  %9 = load float, float* %arrayidx4, align 4, !dbg !9776
  %add5 = fadd float %9, %mul3, !dbg !9776
  store float %add5, float* %arrayidx4, align 4, !dbg !9776
  %10 = load float*, float** %a.addr, align 8, !dbg !9777
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !9777
  %11 = load float, float* %arrayidx6, align 4, !dbg !9777
  %12 = load float, float* %f.addr, align 4, !dbg !9778
  %mul7 = fmul float %11, %12, !dbg !9779
  %13 = load float*, float** %r.addr, align 8, !dbg !9780
  %arrayidx8 = getelementptr inbounds float, float* %13, i64 2, !dbg !9780
  %14 = load float, float* %arrayidx8, align 4, !dbg !9781
  %add9 = fadd float %14, %mul7, !dbg !9781
  store float %add9, float* %arrayidx8, align 4, !dbg !9781
  ret void, !dbg !9782
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_v3_v3(float* %r, float* %a) #0 !dbg !9783 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9784, metadata !DIExpression()), !dbg !9785
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9786, metadata !DIExpression()), !dbg !9787
  %0 = load float*, float** %a.addr, align 8, !dbg !9788
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9788
  %1 = load float, float* %arrayidx, align 4, !dbg !9788
  %2 = load float*, float** %r.addr, align 8, !dbg !9789
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !9789
  %3 = load float, float* %arrayidx1, align 4, !dbg !9790
  %add = fadd float %3, %1, !dbg !9790
  store float %add, float* %arrayidx1, align 4, !dbg !9790
  %4 = load float*, float** %a.addr, align 8, !dbg !9791
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !9791
  %5 = load float, float* %arrayidx2, align 4, !dbg !9791
  %6 = load float*, float** %r.addr, align 8, !dbg !9792
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !9792
  %7 = load float, float* %arrayidx3, align 4, !dbg !9793
  %add4 = fadd float %7, %5, !dbg !9793
  store float %add4, float* %arrayidx3, align 4, !dbg !9793
  %8 = load float*, float** %a.addr, align 8, !dbg !9794
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !9794
  %9 = load float, float* %arrayidx5, align 4, !dbg !9794
  %10 = load float*, float** %r.addr, align 8, !dbg !9795
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !9795
  %11 = load float, float* %arrayidx6, align 4, !dbg !9796
  %add7 = fadd float %11, %9, !dbg !9796
  store float %add7, float* %arrayidx6, align 4, !dbg !9796
  ret void, !dbg !9797
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v3_v3(float* %r, float* %a) #0 !dbg !9798 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9799, metadata !DIExpression()), !dbg !9800
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !9801, metadata !DIExpression()), !dbg !9802
  %0 = load float*, float** %a.addr, align 8, !dbg !9803
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !9803
  %1 = load float, float* %arrayidx, align 4, !dbg !9803
  %2 = load float*, float** %r.addr, align 8, !dbg !9804
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !9804
  store float %1, float* %arrayidx1, align 4, !dbg !9805
  %3 = load float*, float** %a.addr, align 8, !dbg !9806
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !9806
  %4 = load float, float* %arrayidx2, align 4, !dbg !9806
  %5 = load float*, float** %r.addr, align 8, !dbg !9807
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !9807
  store float %4, float* %arrayidx3, align 4, !dbg !9808
  %6 = load float*, float** %a.addr, align 8, !dbg !9809
  %arrayidx4 = getelementptr inbounds float, float* %6, i64 2, !dbg !9809
  %7 = load float, float* %arrayidx4, align 4, !dbg !9809
  %8 = load float*, float** %r.addr, align 8, !dbg !9810
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !9810
  store float %7, float* %arrayidx5, align 4, !dbg !9811
  ret void, !dbg !9812
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v3_fl(float* %r, float %f) #0 !dbg !9813 {
entry:
  %r.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !9814, metadata !DIExpression()), !dbg !9815
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !9816, metadata !DIExpression()), !dbg !9817
  %0 = load float, float* %f.addr, align 4, !dbg !9818
  %1 = load float*, float** %r.addr, align 8, !dbg !9819
  %arrayidx = getelementptr inbounds float, float* %1, i64 0, !dbg !9819
  store float %0, float* %arrayidx, align 4, !dbg !9820
  %2 = load float, float* %f.addr, align 4, !dbg !9821
  %3 = load float*, float** %r.addr, align 8, !dbg !9822
  %arrayidx1 = getelementptr inbounds float, float* %3, i64 1, !dbg !9822
  store float %2, float* %arrayidx1, align 4, !dbg !9823
  %4 = load float, float* %f.addr, align 4, !dbg !9824
  %5 = load float*, float** %r.addr, align 8, !dbg !9825
  %arrayidx2 = getelementptr inbounds float, float* %5, i64 2, !dbg !9825
  store float %4, float* %arrayidx2, align 4, !dbg !9826
  ret void, !dbg !9827
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v3_v3_short(i16* %r, i16* %a) #0 !dbg !9828 {
entry:
  %r.addr = alloca i16*, align 8
  %a.addr = alloca i16*, align 8
  store i16* %r, i16** %r.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %r.addr, metadata !9833, metadata !DIExpression()), !dbg !9834
  store i16* %a, i16** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %a.addr, metadata !9835, metadata !DIExpression()), !dbg !9836
  %0 = load i16*, i16** %a.addr, align 8, !dbg !9837
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 0, !dbg !9837
  %1 = load i16, i16* %arrayidx, align 2, !dbg !9837
  %2 = load i16*, i16** %r.addr, align 8, !dbg !9838
  %arrayidx1 = getelementptr inbounds i16, i16* %2, i64 0, !dbg !9838
  store i16 %1, i16* %arrayidx1, align 2, !dbg !9839
  %3 = load i16*, i16** %a.addr, align 8, !dbg !9840
  %arrayidx2 = getelementptr inbounds i16, i16* %3, i64 1, !dbg !9840
  %4 = load i16, i16* %arrayidx2, align 2, !dbg !9840
  %5 = load i16*, i16** %r.addr, align 8, !dbg !9841
  %arrayidx3 = getelementptr inbounds i16, i16* %5, i64 1, !dbg !9841
  store i16 %4, i16* %arrayidx3, align 2, !dbg !9842
  %6 = load i16*, i16** %a.addr, align 8, !dbg !9843
  %arrayidx4 = getelementptr inbounds i16, i16* %6, i64 2, !dbg !9843
  %7 = load i16, i16* %arrayidx4, align 2, !dbg !9843
  %8 = load i16*, i16** %r.addr, align 8, !dbg !9844
  %arrayidx5 = getelementptr inbounds i16, i16* %8, i64 2, !dbg !9844
  store i16 %7, i16* %arrayidx5, align 2, !dbg !9845
  ret void, !dbg !9846
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BM_iter_init(%struct.BMIter* %iter, %struct.BMesh* %bm, i8 zeroext %itype, i8* %data) #0 !dbg !9847 {
entry:
  %retval = alloca i8, align 1
  %iter.addr = alloca %struct.BMIter*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %itype.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  store %struct.BMIter* %iter, %struct.BMIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMIter** %iter.addr, metadata !9850, metadata !DIExpression()), !dbg !9851
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !9852, metadata !DIExpression()), !dbg !9853
  store i8 %itype, i8* %itype.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %itype.addr, metadata !9854, metadata !DIExpression()), !dbg !9855
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9856, metadata !DIExpression()), !dbg !9857
  %0 = load i8, i8* %itype.addr, align 1, !dbg !9858
  %1 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9859
  %itype1 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %1, i32 0, i32 4, !dbg !9860
  store i8 %0, i8* %itype1, align 4, !dbg !9861
  %2 = load i8, i8* %itype.addr, align 1, !dbg !9862
  %conv = zext i8 %2 to i32, !dbg !9863
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb10
    i32 4, label %sw.bb17
    i32 5, label %sw.bb21
    i32 6, label %sw.bb26
    i32 7, label %sw.bb31
    i32 8, label %sw.bb35
    i32 9, label %sw.bb40
    i32 10, label %sw.bb44
    i32 11, label %sw.bb49
    i32 13, label %sw.bb54
    i32 14, label %sw.bb58
  ], !dbg !9864

sw.bb:                                            ; preds = %entry
  %3 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9865
  %begin = getelementptr inbounds %struct.BMIter, %struct.BMIter* %3, i32 0, i32 1, !dbg !9867
  store void (i8*)* bitcast (void (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_begin to void (i8*)*), void (i8*)** %begin, align 8, !dbg !9868
  %4 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9869
  %step = getelementptr inbounds %struct.BMIter, %struct.BMIter* %4, i32 0, i32 2, !dbg !9870
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_step to i8* (i8*)*), i8* (i8*)** %step, align 8, !dbg !9871
  %5 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !9872
  %vpool = getelementptr inbounds %struct.BMesh, %struct.BMesh* %5, i32 0, i32 9, !dbg !9873
  %6 = load %struct.BLI_mempool*, %struct.BLI_mempool** %vpool, align 8, !dbg !9873
  %7 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9874
  %data2 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %7, i32 0, i32 0, !dbg !9875
  %elem_of_mesh = bitcast %union.anon.0* %data2 to %struct.BMIter__elem_of_mesh*, !dbg !9876
  %pooliter = getelementptr inbounds %struct.BMIter__elem_of_mesh, %struct.BMIter__elem_of_mesh* %elem_of_mesh, i32 0, i32 0, !dbg !9877
  %pool = getelementptr inbounds %struct.BLI_mempool_iter, %struct.BLI_mempool_iter* %pooliter, i32 0, i32 0, !dbg !9878
  store %struct.BLI_mempool* %6, %struct.BLI_mempool** %pool, align 8, !dbg !9879
  br label %sw.epilog, !dbg !9880

sw.bb3:                                           ; preds = %entry
  %8 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9881
  %begin4 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %8, i32 0, i32 1, !dbg !9882
  store void (i8*)* bitcast (void (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_begin to void (i8*)*), void (i8*)** %begin4, align 8, !dbg !9883
  %9 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9884
  %step5 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %9, i32 0, i32 2, !dbg !9885
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_step to i8* (i8*)*), i8* (i8*)** %step5, align 8, !dbg !9886
  %10 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !9887
  %epool = getelementptr inbounds %struct.BMesh, %struct.BMesh* %10, i32 0, i32 10, !dbg !9888
  %11 = load %struct.BLI_mempool*, %struct.BLI_mempool** %epool, align 8, !dbg !9888
  %12 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9889
  %data6 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %12, i32 0, i32 0, !dbg !9890
  %elem_of_mesh7 = bitcast %union.anon.0* %data6 to %struct.BMIter__elem_of_mesh*, !dbg !9891
  %pooliter8 = getelementptr inbounds %struct.BMIter__elem_of_mesh, %struct.BMIter__elem_of_mesh* %elem_of_mesh7, i32 0, i32 0, !dbg !9892
  %pool9 = getelementptr inbounds %struct.BLI_mempool_iter, %struct.BLI_mempool_iter* %pooliter8, i32 0, i32 0, !dbg !9893
  store %struct.BLI_mempool* %11, %struct.BLI_mempool** %pool9, align 8, !dbg !9894
  br label %sw.epilog, !dbg !9895

sw.bb10:                                          ; preds = %entry
  %13 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9896
  %begin11 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %13, i32 0, i32 1, !dbg !9897
  store void (i8*)* bitcast (void (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_begin to void (i8*)*), void (i8*)** %begin11, align 8, !dbg !9898
  %14 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9899
  %step12 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %14, i32 0, i32 2, !dbg !9900
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_step to i8* (i8*)*), i8* (i8*)** %step12, align 8, !dbg !9901
  %15 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !9902
  %fpool = getelementptr inbounds %struct.BMesh, %struct.BMesh* %15, i32 0, i32 12, !dbg !9903
  %16 = load %struct.BLI_mempool*, %struct.BLI_mempool** %fpool, align 8, !dbg !9903
  %17 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9904
  %data13 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %17, i32 0, i32 0, !dbg !9905
  %elem_of_mesh14 = bitcast %union.anon.0* %data13 to %struct.BMIter__elem_of_mesh*, !dbg !9906
  %pooliter15 = getelementptr inbounds %struct.BMIter__elem_of_mesh, %struct.BMIter__elem_of_mesh* %elem_of_mesh14, i32 0, i32 0, !dbg !9907
  %pool16 = getelementptr inbounds %struct.BLI_mempool_iter, %struct.BLI_mempool_iter* %pooliter15, i32 0, i32 0, !dbg !9908
  store %struct.BLI_mempool* %16, %struct.BLI_mempool** %pool16, align 8, !dbg !9909
  br label %sw.epilog, !dbg !9910

sw.bb17:                                          ; preds = %entry
  %18 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9911
  %begin18 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %18, i32 0, i32 1, !dbg !9912
  store void (i8*)* bitcast (void (%struct.BMIter__edge_of_vert*)* @bmiter__edge_of_vert_begin to void (i8*)*), void (i8*)** %begin18, align 8, !dbg !9913
  %19 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9914
  %step19 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %19, i32 0, i32 2, !dbg !9915
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__edge_of_vert*)* @bmiter__edge_of_vert_step to i8* (i8*)*), i8* (i8*)** %step19, align 8, !dbg !9916
  %20 = load i8*, i8** %data.addr, align 8, !dbg !9917
  %21 = bitcast i8* %20 to %struct.BMVert*, !dbg !9918
  %22 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9919
  %data20 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %22, i32 0, i32 0, !dbg !9920
  %edge_of_vert = bitcast %union.anon.0* %data20 to %struct.BMIter__edge_of_vert*, !dbg !9921
  %vdata = getelementptr inbounds %struct.BMIter__edge_of_vert, %struct.BMIter__edge_of_vert* %edge_of_vert, i32 0, i32 0, !dbg !9922
  store %struct.BMVert* %21, %struct.BMVert** %vdata, align 8, !dbg !9923
  br label %sw.epilog, !dbg !9924

sw.bb21:                                          ; preds = %entry
  %23 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9925
  %begin22 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %23, i32 0, i32 1, !dbg !9926
  store void (i8*)* bitcast (void (%struct.BMIter__face_of_vert*)* @bmiter__face_of_vert_begin to void (i8*)*), void (i8*)** %begin22, align 8, !dbg !9927
  %24 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9928
  %step23 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %24, i32 0, i32 2, !dbg !9929
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__face_of_vert*)* @bmiter__face_of_vert_step to i8* (i8*)*), i8* (i8*)** %step23, align 8, !dbg !9930
  %25 = load i8*, i8** %data.addr, align 8, !dbg !9931
  %26 = bitcast i8* %25 to %struct.BMVert*, !dbg !9932
  %27 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9933
  %data24 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %27, i32 0, i32 0, !dbg !9934
  %face_of_vert = bitcast %union.anon.0* %data24 to %struct.BMIter__face_of_vert*, !dbg !9935
  %vdata25 = getelementptr inbounds %struct.BMIter__face_of_vert, %struct.BMIter__face_of_vert* %face_of_vert, i32 0, i32 0, !dbg !9936
  store %struct.BMVert* %26, %struct.BMVert** %vdata25, align 8, !dbg !9937
  br label %sw.epilog, !dbg !9938

sw.bb26:                                          ; preds = %entry
  %28 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9939
  %begin27 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %28, i32 0, i32 1, !dbg !9940
  store void (i8*)* bitcast (void (%struct.BMIter__loop_of_vert*)* @bmiter__loop_of_vert_begin to void (i8*)*), void (i8*)** %begin27, align 8, !dbg !9941
  %29 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9942
  %step28 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %29, i32 0, i32 2, !dbg !9943
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__loop_of_vert*)* @bmiter__loop_of_vert_step to i8* (i8*)*), i8* (i8*)** %step28, align 8, !dbg !9944
  %30 = load i8*, i8** %data.addr, align 8, !dbg !9945
  %31 = bitcast i8* %30 to %struct.BMVert*, !dbg !9946
  %32 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9947
  %data29 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %32, i32 0, i32 0, !dbg !9948
  %loop_of_vert = bitcast %union.anon.0* %data29 to %struct.BMIter__loop_of_vert*, !dbg !9949
  %vdata30 = getelementptr inbounds %struct.BMIter__loop_of_vert, %struct.BMIter__loop_of_vert* %loop_of_vert, i32 0, i32 0, !dbg !9950
  store %struct.BMVert* %31, %struct.BMVert** %vdata30, align 8, !dbg !9951
  br label %sw.epilog, !dbg !9952

sw.bb31:                                          ; preds = %entry
  %33 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9953
  %begin32 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %33, i32 0, i32 1, !dbg !9954
  store void (i8*)* bitcast (void (%struct.BMIter__vert_of_edge*)* @bmiter__vert_of_edge_begin to void (i8*)*), void (i8*)** %begin32, align 8, !dbg !9955
  %34 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9956
  %step33 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %34, i32 0, i32 2, !dbg !9957
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__vert_of_edge*)* @bmiter__vert_of_edge_step to i8* (i8*)*), i8* (i8*)** %step33, align 8, !dbg !9958
  %35 = load i8*, i8** %data.addr, align 8, !dbg !9959
  %36 = bitcast i8* %35 to %struct.BMEdge*, !dbg !9960
  %37 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9961
  %data34 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %37, i32 0, i32 0, !dbg !9962
  %vert_of_edge = bitcast %union.anon.0* %data34 to %struct.BMIter__vert_of_edge*, !dbg !9963
  %edata = getelementptr inbounds %struct.BMIter__vert_of_edge, %struct.BMIter__vert_of_edge* %vert_of_edge, i32 0, i32 0, !dbg !9964
  store %struct.BMEdge* %36, %struct.BMEdge** %edata, align 8, !dbg !9965
  br label %sw.epilog, !dbg !9966

sw.bb35:                                          ; preds = %entry
  %38 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9967
  %begin36 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %38, i32 0, i32 1, !dbg !9968
  store void (i8*)* bitcast (void (%struct.BMIter__face_of_edge*)* @bmiter__face_of_edge_begin to void (i8*)*), void (i8*)** %begin36, align 8, !dbg !9969
  %39 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9970
  %step37 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %39, i32 0, i32 2, !dbg !9971
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__face_of_edge*)* @bmiter__face_of_edge_step to i8* (i8*)*), i8* (i8*)** %step37, align 8, !dbg !9972
  %40 = load i8*, i8** %data.addr, align 8, !dbg !9973
  %41 = bitcast i8* %40 to %struct.BMEdge*, !dbg !9974
  %42 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9975
  %data38 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %42, i32 0, i32 0, !dbg !9976
  %face_of_edge = bitcast %union.anon.0* %data38 to %struct.BMIter__face_of_edge*, !dbg !9977
  %edata39 = getelementptr inbounds %struct.BMIter__face_of_edge, %struct.BMIter__face_of_edge* %face_of_edge, i32 0, i32 0, !dbg !9978
  store %struct.BMEdge* %41, %struct.BMEdge** %edata39, align 8, !dbg !9979
  br label %sw.epilog, !dbg !9980

sw.bb40:                                          ; preds = %entry
  %43 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9981
  %begin41 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %43, i32 0, i32 1, !dbg !9982
  store void (i8*)* bitcast (void (%struct.BMIter__vert_of_face*)* @bmiter__vert_of_face_begin to void (i8*)*), void (i8*)** %begin41, align 8, !dbg !9983
  %44 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9984
  %step42 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %44, i32 0, i32 2, !dbg !9985
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__vert_of_face*)* @bmiter__vert_of_face_step to i8* (i8*)*), i8* (i8*)** %step42, align 8, !dbg !9986
  %45 = load i8*, i8** %data.addr, align 8, !dbg !9987
  %46 = bitcast i8* %45 to %struct.BMFace*, !dbg !9988
  %47 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9989
  %data43 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %47, i32 0, i32 0, !dbg !9990
  %vert_of_face = bitcast %union.anon.0* %data43 to %struct.BMIter__vert_of_face*, !dbg !9991
  %pdata = getelementptr inbounds %struct.BMIter__vert_of_face, %struct.BMIter__vert_of_face* %vert_of_face, i32 0, i32 0, !dbg !9992
  store %struct.BMFace* %46, %struct.BMFace** %pdata, align 8, !dbg !9993
  br label %sw.epilog, !dbg !9994

sw.bb44:                                          ; preds = %entry
  %48 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9995
  %begin45 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %48, i32 0, i32 1, !dbg !9996
  store void (i8*)* bitcast (void (%struct.BMIter__edge_of_face*)* @bmiter__edge_of_face_begin to void (i8*)*), void (i8*)** %begin45, align 8, !dbg !9997
  %49 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !9998
  %step46 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %49, i32 0, i32 2, !dbg !9999
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__edge_of_face*)* @bmiter__edge_of_face_step to i8* (i8*)*), i8* (i8*)** %step46, align 8, !dbg !10000
  %50 = load i8*, i8** %data.addr, align 8, !dbg !10001
  %51 = bitcast i8* %50 to %struct.BMFace*, !dbg !10002
  %52 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10003
  %data47 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %52, i32 0, i32 0, !dbg !10004
  %edge_of_face = bitcast %union.anon.0* %data47 to %struct.BMIter__edge_of_face*, !dbg !10005
  %pdata48 = getelementptr inbounds %struct.BMIter__edge_of_face, %struct.BMIter__edge_of_face* %edge_of_face, i32 0, i32 0, !dbg !10006
  store %struct.BMFace* %51, %struct.BMFace** %pdata48, align 8, !dbg !10007
  br label %sw.epilog, !dbg !10008

sw.bb49:                                          ; preds = %entry
  %53 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10009
  %begin50 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %53, i32 0, i32 1, !dbg !10010
  store void (i8*)* bitcast (void (%struct.BMIter__loop_of_face*)* @bmiter__loop_of_face_begin to void (i8*)*), void (i8*)** %begin50, align 8, !dbg !10011
  %54 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10012
  %step51 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %54, i32 0, i32 2, !dbg !10013
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__loop_of_face*)* @bmiter__loop_of_face_step to i8* (i8*)*), i8* (i8*)** %step51, align 8, !dbg !10014
  %55 = load i8*, i8** %data.addr, align 8, !dbg !10015
  %56 = bitcast i8* %55 to %struct.BMFace*, !dbg !10016
  %57 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10017
  %data52 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %57, i32 0, i32 0, !dbg !10018
  %loop_of_face = bitcast %union.anon.0* %data52 to %struct.BMIter__loop_of_face*, !dbg !10019
  %pdata53 = getelementptr inbounds %struct.BMIter__loop_of_face, %struct.BMIter__loop_of_face* %loop_of_face, i32 0, i32 0, !dbg !10020
  store %struct.BMFace* %56, %struct.BMFace** %pdata53, align 8, !dbg !10021
  br label %sw.epilog, !dbg !10022

sw.bb54:                                          ; preds = %entry
  %58 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10023
  %begin55 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %58, i32 0, i32 1, !dbg !10024
  store void (i8*)* bitcast (void (%struct.BMIter__loop_of_loop*)* @bmiter__loop_of_loop_begin to void (i8*)*), void (i8*)** %begin55, align 8, !dbg !10025
  %59 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10026
  %step56 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %59, i32 0, i32 2, !dbg !10027
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__loop_of_loop*)* @bmiter__loop_of_loop_step to i8* (i8*)*), i8* (i8*)** %step56, align 8, !dbg !10028
  %60 = load i8*, i8** %data.addr, align 8, !dbg !10029
  %61 = bitcast i8* %60 to %struct.BMLoop*, !dbg !10030
  %62 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10031
  %data57 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %62, i32 0, i32 0, !dbg !10032
  %loop_of_loop = bitcast %union.anon.0* %data57 to %struct.BMIter__loop_of_loop*, !dbg !10033
  %ldata = getelementptr inbounds %struct.BMIter__loop_of_loop, %struct.BMIter__loop_of_loop* %loop_of_loop, i32 0, i32 0, !dbg !10034
  store %struct.BMLoop* %61, %struct.BMLoop** %ldata, align 8, !dbg !10035
  br label %sw.epilog, !dbg !10036

sw.bb58:                                          ; preds = %entry
  %63 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10037
  %begin59 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %63, i32 0, i32 1, !dbg !10038
  store void (i8*)* bitcast (void (%struct.BMIter__loop_of_edge*)* @bmiter__loop_of_edge_begin to void (i8*)*), void (i8*)** %begin59, align 8, !dbg !10039
  %64 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10040
  %step60 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %64, i32 0, i32 2, !dbg !10041
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__loop_of_edge*)* @bmiter__loop_of_edge_step to i8* (i8*)*), i8* (i8*)** %step60, align 8, !dbg !10042
  %65 = load i8*, i8** %data.addr, align 8, !dbg !10043
  %66 = bitcast i8* %65 to %struct.BMEdge*, !dbg !10044
  %67 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10045
  %data61 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %67, i32 0, i32 0, !dbg !10046
  %loop_of_edge = bitcast %union.anon.0* %data61 to %struct.BMIter__loop_of_edge*, !dbg !10047
  %edata62 = getelementptr inbounds %struct.BMIter__loop_of_edge, %struct.BMIter__loop_of_edge* %loop_of_edge, i32 0, i32 0, !dbg !10048
  store %struct.BMEdge* %66, %struct.BMEdge** %edata62, align 8, !dbg !10049
  br label %sw.epilog, !dbg !10050

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10051
  br label %return, !dbg !10051

sw.epilog:                                        ; preds = %sw.bb58, %sw.bb54, %sw.bb49, %sw.bb44, %sw.bb40, %sw.bb35, %sw.bb31, %sw.bb26, %sw.bb21, %sw.bb17, %sw.bb10, %sw.bb3, %sw.bb
  %68 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10052
  %begin63 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %68, i32 0, i32 1, !dbg !10053
  %69 = load void (i8*)*, void (i8*)** %begin63, align 8, !dbg !10053
  %70 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !10054
  %71 = bitcast %struct.BMIter* %70 to i8*, !dbg !10054
  call void %69(i8* %71), !dbg !10052
  store i8 1, i8* %retval, align 1, !dbg !10055
  br label %return, !dbg !10055

return:                                           ; preds = %sw.epilog, %sw.default
  %72 = load i8, i8* %retval, align 1, !dbg !10056
  ret i8 %72, !dbg !10056
}

declare dso_local void @bmiter__elem_of_mesh_begin(%struct.BMIter__elem_of_mesh*) #2

declare dso_local i8* @bmiter__elem_of_mesh_step(%struct.BMIter__elem_of_mesh*) #2

declare dso_local void @bmiter__edge_of_vert_begin(%struct.BMIter__edge_of_vert*) #2

declare dso_local i8* @bmiter__edge_of_vert_step(%struct.BMIter__edge_of_vert*) #2

declare dso_local void @bmiter__face_of_vert_begin(%struct.BMIter__face_of_vert*) #2

declare dso_local i8* @bmiter__face_of_vert_step(%struct.BMIter__face_of_vert*) #2

declare dso_local void @bmiter__loop_of_vert_begin(%struct.BMIter__loop_of_vert*) #2

declare dso_local i8* @bmiter__loop_of_vert_step(%struct.BMIter__loop_of_vert*) #2

declare dso_local void @bmiter__vert_of_edge_begin(%struct.BMIter__vert_of_edge*) #2

declare dso_local i8* @bmiter__vert_of_edge_step(%struct.BMIter__vert_of_edge*) #2

declare dso_local void @bmiter__face_of_edge_begin(%struct.BMIter__face_of_edge*) #2

declare dso_local i8* @bmiter__face_of_edge_step(%struct.BMIter__face_of_edge*) #2

declare dso_local void @bmiter__vert_of_face_begin(%struct.BMIter__vert_of_face*) #2

declare dso_local i8* @bmiter__vert_of_face_step(%struct.BMIter__vert_of_face*) #2

declare dso_local void @bmiter__edge_of_face_begin(%struct.BMIter__edge_of_face*) #2

declare dso_local i8* @bmiter__edge_of_face_step(%struct.BMIter__edge_of_face*) #2

declare dso_local void @bmiter__loop_of_face_begin(%struct.BMIter__loop_of_face*) #2

declare dso_local i8* @bmiter__loop_of_face_step(%struct.BMIter__loop_of_face*) #2

declare dso_local void @bmiter__loop_of_loop_begin(%struct.BMIter__loop_of_loop*) #2

declare dso_local i8* @bmiter__loop_of_loop_step(%struct.BMIter__loop_of_loop*) #2

declare dso_local void @bmiter__loop_of_edge_begin(%struct.BMIter__loop_of_edge*) #2

declare dso_local i8* @bmiter__loop_of_edge_step(%struct.BMIter__loop_of_edge*) #2

declare dso_local i8* @BLI_mempool_alloc(%struct.BLI_mempool*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cd_layer_find_dupe(%struct.CustomData* %data, i8* %name, i32 %type, i32 %index) #0 !dbg !10057 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.CustomData*, align 8
  %name.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %layer = alloca %struct.CustomDataLayer*, align 8
  store %struct.CustomData* %data, %struct.CustomData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %data.addr, metadata !10060, metadata !DIExpression()), !dbg !10061
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10062, metadata !DIExpression()), !dbg !10063
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !10064, metadata !DIExpression()), !dbg !10065
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !10066, metadata !DIExpression()), !dbg !10067
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10068, metadata !DIExpression()), !dbg !10069
  store i32 0, i32* %i, align 4, !dbg !10070
  br label %for.cond, !dbg !10072

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !10073
  %1 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !10075
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %1, i32 0, i32 2, !dbg !10076
  %2 = load i32, i32* %totlayer, align 4, !dbg !10076
  %cmp = icmp slt i32 %0, %2, !dbg !10077
  br i1 %cmp, label %for.body, label %for.end, !dbg !10078

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4, !dbg !10079
  %4 = load i32, i32* %index.addr, align 4, !dbg !10082
  %cmp1 = icmp ne i32 %3, %4, !dbg !10083
  br i1 %cmp1, label %if.then, label %if.end26, !dbg !10084

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.CustomDataLayer** %layer, metadata !10085, metadata !DIExpression()), !dbg !10087
  %5 = load %struct.CustomData*, %struct.CustomData** %data.addr, align 8, !dbg !10088
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %5, i32 0, i32 0, !dbg !10089
  %6 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !10089
  %7 = load i32, i32* %i, align 4, !dbg !10090
  %idxprom = sext i32 %7 to i64, !dbg !10088
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %6, i64 %idxprom, !dbg !10088
  store %struct.CustomDataLayer* %arrayidx, %struct.CustomDataLayer** %layer, align 8, !dbg !10087
  %8 = load i32, i32* %type.addr, align 4, !dbg !10091
  %call = call zeroext i8 @CustomData_is_property_layer(i32 %8), !dbg !10093
  %tobool = icmp ne i8 %call, 0, !dbg !10093
  br i1 %tobool, label %if.then2, label %if.else, !dbg !10094

if.then2:                                         ; preds = %if.then
  %9 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !10095
  %type3 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %9, i32 0, i32 0, !dbg !10098
  %10 = load i32, i32* %type3, align 8, !dbg !10098
  %call4 = call zeroext i8 @CustomData_is_property_layer(i32 %10), !dbg !10099
  %conv = zext i8 %call4 to i32, !dbg !10099
  %tobool5 = icmp ne i32 %conv, 0, !dbg !10099
  br i1 %tobool5, label %land.lhs.true, label %if.end, !dbg !10100

land.lhs.true:                                    ; preds = %if.then2
  %11 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !10101
  %name6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %11, i32 0, i32 8, !dbg !10102
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name6, i64 0, i64 0, !dbg !10101
  %12 = load i8*, i8** %name.addr, align 8, !dbg !10103
  %call7 = call i32 @strcmp(i8* %arraydecay, i8* %12) #5, !dbg !10104
  %cmp8 = icmp eq i32 %call7, 0, !dbg !10105
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !10106

if.then10:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !10107
  br label %return, !dbg !10107

if.end:                                           ; preds = %land.lhs.true, %if.then2
  br label %if.end25, !dbg !10109

if.else:                                          ; preds = %if.then
  %13 = load i32, i32* %i, align 4, !dbg !10110
  %14 = load i32, i32* %index.addr, align 4, !dbg !10113
  %cmp11 = icmp ne i32 %13, %14, !dbg !10114
  br i1 %cmp11, label %land.lhs.true13, label %if.end24, !dbg !10115

land.lhs.true13:                                  ; preds = %if.else
  %15 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !10116
  %type14 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %15, i32 0, i32 0, !dbg !10117
  %16 = load i32, i32* %type14, align 8, !dbg !10117
  %17 = load i32, i32* %type.addr, align 4, !dbg !10118
  %cmp15 = icmp eq i32 %16, %17, !dbg !10119
  br i1 %cmp15, label %land.lhs.true17, label %if.end24, !dbg !10120

land.lhs.true17:                                  ; preds = %land.lhs.true13
  %18 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layer, align 8, !dbg !10121
  %name18 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %18, i32 0, i32 8, !dbg !10122
  %arraydecay19 = getelementptr inbounds [64 x i8], [64 x i8]* %name18, i64 0, i64 0, !dbg !10121
  %19 = load i8*, i8** %name.addr, align 8, !dbg !10123
  %call20 = call i32 @strcmp(i8* %arraydecay19, i8* %19) #5, !dbg !10124
  %cmp21 = icmp eq i32 %call20, 0, !dbg !10125
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !10126

if.then23:                                        ; preds = %land.lhs.true17
  store i8 1, i8* %retval, align 1, !dbg !10127
  br label %return, !dbg !10127

if.end24:                                         ; preds = %land.lhs.true17, %land.lhs.true13, %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.end
  br label %if.end26, !dbg !10129

if.end26:                                         ; preds = %if.end25, %for.body
  br label %for.inc, !dbg !10130

for.inc:                                          ; preds = %if.end26
  %20 = load i32, i32* %i, align 4, !dbg !10131
  %inc = add nsw i32 %20, 1, !dbg !10131
  store i32 %inc, i32* %i, align 4, !dbg !10131
  br label %for.cond, !dbg !10132, !llvm.loop !10133

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !10135
  br label %return, !dbg !10135

return:                                           ; preds = %for.end, %if.then23, %if.then10
  %21 = load i8, i8* %retval, align 1, !dbg !10136
  ret i8 %21, !dbg !10136
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @CustomData_is_property_layer(i32 %type) #0 !dbg !10137 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !10138, metadata !DIExpression()), !dbg !10139
  %0 = load i32, i32* %type.addr, align 4, !dbg !10140
  %cmp = icmp eq i32 %0, 10, !dbg !10142
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10143

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4, !dbg !10144
  %cmp1 = icmp eq i32 %1, 11, !dbg !10145
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !10146

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %type.addr, align 4, !dbg !10147
  %cmp3 = icmp eq i32 %2, 12, !dbg !10148
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10149

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !10150
  br label %return, !dbg !10150

if.end:                                           ; preds = %lor.lhs.false2
  store i8 0, i8* %retval, align 1, !dbg !10151
  br label %return, !dbg !10151

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !10152
  ret i8 %3, !dbg !10152
}

declare dso_local zeroext i8 @BLI_path_abs(i8*, i8*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!423, !424, !425}
!llvm.ident = !{!426}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "CD_MASK_BAREMESH", scope: !2, file: !3, line: 1232, type: !302, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !138, globals: !299, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "blender/source/blender/blenkernel/intern/customdata.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !50, !57, !62, !73, !79, !85, !93, !100, !117, !128, !134}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 76, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "blender/source/blender/makesdna/DNA_customdata_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!9 = !DIEnumerator(name: "CD_MVERT", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "CD_MSTICKY", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CD_MDEFORMVERT", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CD_MEDGE", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CD_MFACE", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CD_MTFACE", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CD_MCOL", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CD_ORIGINDEX", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CD_NORMAL", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CD_PROP_FLT", value: 10, isUnsigned: true)
!19 = !DIEnumerator(name: "CD_PROP_INT", value: 11, isUnsigned: true)
!20 = !DIEnumerator(name: "CD_PROP_STR", value: 12, isUnsigned: true)
!21 = !DIEnumerator(name: "CD_ORIGSPACE", value: 13, isUnsigned: true)
!22 = !DIEnumerator(name: "CD_ORCO", value: 14, isUnsigned: true)
!23 = !DIEnumerator(name: "CD_MTEXPOLY", value: 15, isUnsigned: true)
!24 = !DIEnumerator(name: "CD_MLOOPUV", value: 16, isUnsigned: true)
!25 = !DIEnumerator(name: "CD_MLOOPCOL", value: 17, isUnsigned: true)
!26 = !DIEnumerator(name: "CD_TANGENT", value: 18, isUnsigned: true)
!27 = !DIEnumerator(name: "CD_MDISPS", value: 19, isUnsigned: true)
!28 = !DIEnumerator(name: "CD_PREVIEW_MCOL", value: 20, isUnsigned: true)
!29 = !DIEnumerator(name: "CD_ID_MCOL", value: 21, isUnsigned: true)
!30 = !DIEnumerator(name: "CD_TEXTURE_MCOL", value: 22, isUnsigned: true)
!31 = !DIEnumerator(name: "CD_CLOTH_ORCO", value: 23, isUnsigned: true)
!32 = !DIEnumerator(name: "CD_RECAST", value: 24, isUnsigned: true)
!33 = !DIEnumerator(name: "CD_MPOLY", value: 25, isUnsigned: true)
!34 = !DIEnumerator(name: "CD_MLOOP", value: 26, isUnsigned: true)
!35 = !DIEnumerator(name: "CD_SHAPE_KEYINDEX", value: 27, isUnsigned: true)
!36 = !DIEnumerator(name: "CD_SHAPEKEY", value: 28, isUnsigned: true)
!37 = !DIEnumerator(name: "CD_BWEIGHT", value: 29, isUnsigned: true)
!38 = !DIEnumerator(name: "CD_CREASE", value: 30, isUnsigned: true)
!39 = !DIEnumerator(name: "CD_ORIGSPACE_MLOOP", value: 31, isUnsigned: true)
!40 = !DIEnumerator(name: "CD_PREVIEW_MLOOPCOL", value: 32, isUnsigned: true)
!41 = !DIEnumerator(name: "CD_BM_ELEM_PYPTR", value: 33, isUnsigned: true)
!42 = !DIEnumerator(name: "CD_PAINT_MASK", value: 34, isUnsigned: true)
!43 = !DIEnumerator(name: "CD_GRID_PAINT_MASK", value: 35, isUnsigned: true)
!44 = !DIEnumerator(name: "CD_MVERT_SKIN", value: 36, isUnsigned: true)
!45 = !DIEnumerator(name: "CD_FREESTYLE_EDGE", value: 37, isUnsigned: true)
!46 = !DIEnumerator(name: "CD_FREESTYLE_FACE", value: 38, isUnsigned: true)
!47 = !DIEnumerator(name: "CD_MLOOPTANGENT", value: 39, isUnsigned: true)
!48 = !DIEnumerator(name: "CD_TESSLOOPNORMAL", value: 40, isUnsigned: true)
!49 = !DIEnumerator(name: "CD_NUMTYPES", value: 41, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 172, baseType: !7, size: 32, elements: !51)
!51 = !{!52, !53, !54, !55, !56}
!52 = !DIEnumerator(name: "CD_FLAG_NOCOPY", value: 1, isUnsigned: true)
!53 = !DIEnumerator(name: "CD_FLAG_NOFREE", value: 2, isUnsigned: true)
!54 = !DIEnumerator(name: "CD_FLAG_TEMPORARY", value: 5, isUnsigned: true)
!55 = !DIEnumerator(name: "CD_FLAG_EXTERNAL", value: 8, isUnsigned: true)
!56 = !DIEnumerator(name: "CD_FLAG_IN_MEMORY", value: 16, isUnsigned: true)
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !58, line: 83, baseType: !7, size: 32, elements: !59)
!58 = !DIFile(filename: "blender/source/blender/blenlib/BLI_mempool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!59 = !{!60, !61}
!60 = !DIEnumerator(name: "BLI_MEMPOOL_NOP", value: 0, isUnsigned: true)
!61 = !DIEnumerator(name: "BLI_MEMPOOL_ALLOW_ITER", value: 1, isUnsigned: true)
!62 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotType", file: !63, line: 94, baseType: !7, size: 32, elements: !64)
!63 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_operator_api.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!64 = !{!65, !66, !67, !68, !69, !70, !71, !72}
!65 = !DIEnumerator(name: "BMO_OP_SLOT_BOOL", value: 1, isUnsigned: true)
!66 = !DIEnumerator(name: "BMO_OP_SLOT_INT", value: 2, isUnsigned: true)
!67 = !DIEnumerator(name: "BMO_OP_SLOT_FLT", value: 3, isUnsigned: true)
!68 = !DIEnumerator(name: "BMO_OP_SLOT_PTR", value: 4, isUnsigned: true)
!69 = !DIEnumerator(name: "BMO_OP_SLOT_MAT", value: 5, isUnsigned: true)
!70 = !DIEnumerator(name: "BMO_OP_SLOT_VEC", value: 8, isUnsigned: true)
!71 = !DIEnumerator(name: "BMO_OP_SLOT_ELEMENT_BUF", value: 9, isUnsigned: true)
!72 = !DIEnumerator(name: "BMO_OP_SLOT_MAPPING", value: 10, isUnsigned: true)
!73 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Elem", file: !63, line: 116, baseType: !7, size: 32, elements: !74)
!74 = !{!75, !76, !77, !78}
!75 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_VERT", value: 1, isUnsigned: true)
!76 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_EDGE", value: 2, isUnsigned: true)
!77 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_FACE", value: 8, isUnsigned: true)
!78 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_IS_SINGLE", value: 16, isUnsigned: true)
!79 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Ptr", file: !63, line: 131, baseType: !7, size: 32, elements: !80)
!80 = !{!81, !82, !83, !84}
!81 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_BMESH", value: 100, isUnsigned: true)
!82 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_SCENE", value: 101, isUnsigned: true)
!83 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_OBJECT", value: 102, isUnsigned: true)
!84 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_MESH", value: 103, isUnsigned: true)
!85 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Map", file: !63, line: 123, baseType: !7, size: 32, elements: !86)
!86 = !{!87, !88, !89, !90, !91, !92}
!87 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_EMPTY", value: 64, isUnsigned: true)
!88 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_ELEM", value: 65, isUnsigned: true)
!89 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_FLT", value: 66, isUnsigned: true)
!90 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_INT", value: 67, isUnsigned: true)
!91 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_BOOL", value: 68, isUnsigned: true)
!92 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_INTERNAL", value: 69, isUnsigned: true)
!93 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !63, line: 182, baseType: !7, size: 32, elements: !94)
!94 = !{!95, !96, !97, !98, !99}
!95 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_NOP", value: 0, isUnsigned: true)
!96 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_UNTAN_MULTIRES", value: 1, isUnsigned: true)
!97 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_NORMALS_CALC", value: 2, isUnsigned: true)
!98 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_SELECT_FLUSH", value: 4, isUnsigned: true)
!99 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_SELECT_VALIDATE", value: 8, isUnsigned: true)
!100 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "BMIterType", file: !101, line: 57, baseType: !7, size: 32, elements: !102)
!101 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_iterators.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!102 = !{!103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116}
!103 = !DIEnumerator(name: "BM_VERTS_OF_MESH", value: 1, isUnsigned: true)
!104 = !DIEnumerator(name: "BM_EDGES_OF_MESH", value: 2, isUnsigned: true)
!105 = !DIEnumerator(name: "BM_FACES_OF_MESH", value: 3, isUnsigned: true)
!106 = !DIEnumerator(name: "BM_EDGES_OF_VERT", value: 4, isUnsigned: true)
!107 = !DIEnumerator(name: "BM_FACES_OF_VERT", value: 5, isUnsigned: true)
!108 = !DIEnumerator(name: "BM_LOOPS_OF_VERT", value: 6, isUnsigned: true)
!109 = !DIEnumerator(name: "BM_VERTS_OF_EDGE", value: 7, isUnsigned: true)
!110 = !DIEnumerator(name: "BM_FACES_OF_EDGE", value: 8, isUnsigned: true)
!111 = !DIEnumerator(name: "BM_VERTS_OF_FACE", value: 9, isUnsigned: true)
!112 = !DIEnumerator(name: "BM_EDGES_OF_FACE", value: 10, isUnsigned: true)
!113 = !DIEnumerator(name: "BM_LOOPS_OF_FACE", value: 11, isUnsigned: true)
!114 = !DIEnumerator(name: "BM_ALL_LOOPS_OF_FACE", value: 12, isUnsigned: true)
!115 = !DIEnumerator(name: "BM_LOOPS_OF_LOOP", value: 13, isUnsigned: true)
!116 = !DIEnumerator(name: "BM_LOOPS_OF_EDGE", value: 14, isUnsigned: true)
!117 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !118, line: 400, baseType: !7, size: 32, elements: !119)
!118 = !DIFile(filename: "blender/source/blender/makesdna/DNA_meshdata_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!119 = !{!120, !121, !122, !123, !124, !125, !126, !127}
!120 = !DIEnumerator(name: "TF_DEPRECATED1", value: 1, isUnsigned: true)
!121 = !DIEnumerator(name: "TF_DEPRECATED2", value: 2, isUnsigned: true)
!122 = !DIEnumerator(name: "TF_DEPRECATED3", value: 4, isUnsigned: true)
!123 = !DIEnumerator(name: "TF_DEPRECATED4", value: 8, isUnsigned: true)
!124 = !DIEnumerator(name: "TF_PIN1", value: 16, isUnsigned: true)
!125 = !DIEnumerator(name: "TF_PIN2", value: 32, isUnsigned: true)
!126 = !DIEnumerator(name: "TF_PIN3", value: 64, isUnsigned: true)
!127 = !DIEnumerator(name: "TF_PIN4", value: 128, isUnsigned: true)
!128 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !118, line: 358, baseType: !7, size: 32, elements: !129)
!129 = !{!130, !131, !132, !133}
!130 = !DIEnumerator(name: "TF_SEL1", value: 4, isUnsigned: true)
!131 = !DIEnumerator(name: "TF_SEL2", value: 8, isUnsigned: true)
!132 = !DIEnumerator(name: "TF_SEL3", value: 16, isUnsigned: true)
!133 = !DIEnumerator(name: "TF_SEL4", value: 32, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "MVertSkinFlag", file: !118, line: 263, baseType: !7, size: 32, elements: !135)
!135 = !{!136, !137}
!136 = !DIEnumerator(name: "MVERT_SKIN_ROOT", value: 1, isUnsigned: true)
!137 = !DIEnumerator(name: "MVERT_SKIN_LOOSE", value: 2, isUnsigned: true)
!138 = !{!139, !140, !146, !147, !149, !163, !182, !158, !183, !191, !192, !198, !199, !207, !160, !215, !216, !217, !222, !223, !224, !228, !232, !295, !297, !279}
!139 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!140 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomDataMask", file: !141, line: 48, baseType: !142)
!141 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_customdata.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!142 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !143, line: 27, baseType: !144)
!143 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!144 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !145, line: 45, baseType: !139)
!145 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !148, size: 64)
!148 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!150 = !DIDerivedType(tag: DW_TAG_typedef, name: "MDeformVert", file: !118, line: 63, baseType: !151)
!151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MDeformVert", file: !118, line: 59, size: 128, elements: !152)
!152 = !{!153, !161, !162}
!153 = !DIDerivedType(tag: DW_TAG_member, name: "dw", scope: !151, file: !118, line: 60, baseType: !154, size: 64)
!154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !155, size: 64)
!155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MDeformWeight", file: !118, line: 54, size: 64, elements: !156)
!156 = !{!157, !159}
!157 = !DIDerivedType(tag: DW_TAG_member, name: "def_nr", scope: !155, file: !118, line: 55, baseType: !158, size: 32)
!158 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !155, file: !118, line: 56, baseType: !160, size: 32, offset: 32)
!160 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "totweight", scope: !151, file: !118, line: 61, baseType: !158, size: 32, offset: 64)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !151, file: !118, line: 62, baseType: !158, size: 32, offset: 96)
!163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !164, size: 64)
!164 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !165)
!165 = !DIDerivedType(tag: DW_TAG_typedef, name: "MTFace", file: !118, line: 165, baseType: !166)
!166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MTFace", file: !118, line: 160, size: 384, elements: !167)
!167 = !{!168, !173, !176, !177, !178, !180, !181}
!168 = !DIDerivedType(tag: DW_TAG_member, name: "uv", scope: !166, file: !118, line: 161, baseType: !169, size: 256)
!169 = !DICompositeType(tag: DW_TAG_array_type, baseType: !160, size: 256, elements: !170)
!170 = !{!171, !172}
!171 = !DISubrange(count: 4)
!172 = !DISubrange(count: 2)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "tpage", scope: !166, file: !118, line: 162, baseType: !174, size: 64, offset: 256)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DICompositeType(tag: DW_TAG_structure_type, name: "Image", file: !118, line: 39, flags: DIFlagFwdDecl)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !166, file: !118, line: 163, baseType: !148, size: 8, offset: 320)
!177 = !DIDerivedType(tag: DW_TAG_member, name: "transp", scope: !166, file: !118, line: 163, baseType: !148, size: 8, offset: 328)
!178 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !166, file: !118, line: 164, baseType: !179, size: 16, offset: 336)
!179 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!180 = !DIDerivedType(tag: DW_TAG_member, name: "tile", scope: !166, file: !118, line: 164, baseType: !179, size: 16, offset: 352)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "unwrap", scope: !166, file: !118, line: 164, baseType: !179, size: 16, offset: 368)
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !165, size: 64)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !184, size: 64)
!184 = !DIDerivedType(tag: DW_TAG_typedef, name: "MCol", file: !118, line: 76, baseType: !185)
!185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MCol", file: !118, line: 74, size: 32, elements: !186)
!186 = !{!187, !188, !189, !190}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !185, file: !118, line: 75, baseType: !148, size: 8)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !185, file: !118, line: 75, baseType: !148, size: 8, offset: 8)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !185, file: !118, line: 75, baseType: !148, size: 8, offset: 16)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !185, file: !118, line: 75, baseType: !148, size: 8, offset: 24)
!191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !193, size: 64)
!193 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !194)
!194 = !DIDerivedType(tag: DW_TAG_typedef, name: "OrigSpaceFace", file: !118, line: 180, baseType: !195)
!195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OrigSpaceFace", file: !118, line: 178, size: 256, elements: !196)
!196 = !{!197}
!197 = !DIDerivedType(tag: DW_TAG_member, name: "uv", scope: !195, file: !118, line: 179, baseType: !169, size: 256)
!198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !194, size: 64)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64)
!200 = !DIDerivedType(tag: DW_TAG_typedef, name: "MLoopUV", file: !118, line: 112, baseType: !201)
!201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MLoopUV", file: !118, line: 109, size: 96, elements: !202)
!202 = !{!203, !206}
!203 = !DIDerivedType(tag: DW_TAG_member, name: "uv", scope: !201, file: !118, line: 110, baseType: !204, size: 64)
!204 = !DICompositeType(tag: DW_TAG_array_type, baseType: !160, size: 64, elements: !205)
!205 = !{!172}
!206 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !201, file: !118, line: 111, baseType: !158, size: 32, offset: 64)
!207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !208, size: 64)
!208 = !DIDerivedType(tag: DW_TAG_typedef, name: "MLoopCol", file: !118, line: 131, baseType: !209)
!209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MLoopCol", file: !118, line: 129, size: 32, elements: !210)
!210 = !{!211, !212, !213, !214}
!211 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !209, file: !118, line: 130, baseType: !148, size: 8)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !209, file: !118, line: 130, baseType: !148, size: 8, offset: 8)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !209, file: !118, line: 130, baseType: !148, size: 8, offset: 16)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !209, file: !118, line: 130, baseType: !148, size: 8, offset: 24)
!215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !216, size: 64)
!216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !160, size: 64)
!217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !218, size: 64)
!218 = !DIDerivedType(tag: DW_TAG_typedef, name: "OrigSpaceLoop", file: !118, line: 184, baseType: !219)
!219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OrigSpaceLoop", file: !118, line: 182, size: 64, elements: !220)
!220 = !{!221}
!221 = !DIDerivedType(tag: DW_TAG_member, name: "uv", scope: !219, file: !118, line: 183, baseType: !204, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !146, size: 64)
!223 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMIterType", file: !101, line: 79, baseType: !100)
!224 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMIter__begin_cb", file: !101, line: 158, baseType: !225)
!225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !226, size: 64)
!226 = !DISubroutineType(types: !227)
!227 = !{null, !146}
!228 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMIter__step_cb", file: !101, line: 159, baseType: !229)
!229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !230, size: 64)
!230 = !DISubroutineType(types: !231)
!231 = !{!146, !146}
!232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !233, size: 64)
!233 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMVert", file: !234, line: 103, baseType: !235)
!234 = !DIFile(filename: "blender/source/blender/bmesh/bmesh_class.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMVert", file: !234, line: 90, size: 448, elements: !236)
!236 = !{!237, !246, !251, !255, !256}
!237 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !235, file: !234, line: 91, baseType: !238, size: 128)
!238 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMHeader", file: !234, line: 82, baseType: !239)
!239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMHeader", file: !234, line: 64, size: 128, elements: !240)
!240 = !{!241, !242, !243, !244, !245}
!241 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !239, file: !234, line: 65, baseType: !146, size: 64)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !239, file: !234, line: 66, baseType: !158, size: 32, offset: 64)
!243 = !DIDerivedType(tag: DW_TAG_member, name: "htype", scope: !239, file: !234, line: 73, baseType: !148, size: 8, offset: 96)
!244 = !DIDerivedType(tag: DW_TAG_member, name: "hflag", scope: !239, file: !234, line: 74, baseType: !148, size: 8, offset: 104)
!245 = !DIDerivedType(tag: DW_TAG_member, name: "api_flag", scope: !239, file: !234, line: 80, baseType: !148, size: 8, offset: 112)
!246 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !235, file: !234, line: 92, baseType: !247, size: 64, offset: 128)
!247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !248, size: 64)
!248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMFlagLayer", file: !234, line: 180, size: 16, elements: !249)
!249 = !{!250}
!250 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !248, file: !234, line: 181, baseType: !179, size: 16)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "co", scope: !235, file: !234, line: 94, baseType: !252, size: 96, offset: 192)
!252 = !DICompositeType(tag: DW_TAG_array_type, baseType: !160, size: 96, elements: !253)
!253 = !{!254}
!254 = !DISubrange(count: 3)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !235, file: !234, line: 95, baseType: !252, size: 96, offset: 288)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !235, file: !234, line: 102, baseType: !257, size: 64, offset: 384)
!257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !258, size: 64)
!258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMEdge", file: !234, line: 110, size: 640, elements: !259)
!259 = !{!260, !261, !262, !264, !265, !288, !294}
!260 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !258, file: !234, line: 111, baseType: !238, size: 128)
!261 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !258, file: !234, line: 112, baseType: !247, size: 64, offset: 128)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "v1", scope: !258, file: !234, line: 114, baseType: !263, size: 64, offset: 192)
!263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !235, size: 64)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "v2", scope: !258, file: !234, line: 114, baseType: !263, size: 64, offset: 256)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "l", scope: !258, file: !234, line: 118, baseType: !266, size: 64, offset: 320)
!266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !267, size: 64)
!267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMLoop", file: !234, line: 125, size: 576, elements: !268)
!268 = !{!269, !270, !271, !272, !284, !285, !286, !287}
!269 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !267, file: !234, line: 126, baseType: !238, size: 128)
!270 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !267, file: !234, line: 129, baseType: !263, size: 64, offset: 128)
!271 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !267, file: !234, line: 130, baseType: !257, size: 64, offset: 192)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !267, file: !234, line: 131, baseType: !273, size: 64, offset: 256)
!273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !274, size: 64)
!274 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMFace", file: !234, line: 164, size: 448, elements: !275)
!275 = !{!276, !277, !278, !281, !282, !283}
!276 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !274, file: !234, line: 165, baseType: !238, size: 128)
!277 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !274, file: !234, line: 166, baseType: !247, size: 64, offset: 128)
!278 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !274, file: !234, line: 172, baseType: !279, size: 64, offset: 192)
!279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !280, size: 64)
!280 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMLoop", file: !234, line: 140, baseType: !267)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !274, file: !234, line: 174, baseType: !158, size: 32, offset: 256)
!282 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !274, file: !234, line: 175, baseType: !252, size: 96, offset: 288)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "mat_nr", scope: !274, file: !234, line: 176, baseType: !179, size: 16, offset: 384)
!284 = !DIDerivedType(tag: DW_TAG_member, name: "radial_next", scope: !267, file: !234, line: 135, baseType: !266, size: 64, offset: 320)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "radial_prev", scope: !267, file: !234, line: 135, baseType: !266, size: 64, offset: 384)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !267, file: !234, line: 139, baseType: !266, size: 64, offset: 448)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !267, file: !234, line: 139, baseType: !266, size: 64, offset: 512)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "v1_disk_link", scope: !258, file: !234, line: 122, baseType: !289, size: 128, offset: 384)
!289 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMDiskLink", file: !234, line: 108, baseType: !290)
!290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMDiskLink", file: !234, line: 106, size: 128, elements: !291)
!291 = !{!292, !293}
!292 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !290, file: !234, line: 107, baseType: !257, size: 64)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !290, file: !234, line: 107, baseType: !257, size: 64, offset: 64)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "v2_disk_link", scope: !258, file: !234, line: 122, baseType: !289, size: 128, offset: 512)
!295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !296, size: 64)
!296 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMEdge", file: !234, line: 123, baseType: !258)
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64)
!298 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMFace", file: !234, line: 178, baseType: !274)
!299 = !{!0, !300, !303, !305, !307, !309, !311, !313, !320, !404, !411, !414, !417, !420}
!300 = !DIGlobalVariableExpression(var: !301, expr: !DIExpression())
!301 = distinct !DIGlobalVariable(name: "CD_MASK_MESH", scope: !2, file: !3, line: 1234, type: !302, isLocal: false, isDefinition: true)
!302 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !140)
!303 = !DIGlobalVariableExpression(var: !304, expr: !DIExpression())
!304 = distinct !DIGlobalVariable(name: "CD_MASK_EDITMESH", scope: !2, file: !3, line: 1241, type: !302, isLocal: false, isDefinition: true)
!305 = !DIGlobalVariableExpression(var: !306, expr: !DIExpression())
!306 = distinct !DIGlobalVariable(name: "CD_MASK_DERIVEDMESH", scope: !2, file: !3, line: 1247, type: !302, isLocal: false, isDefinition: true)
!307 = !DIGlobalVariableExpression(var: !308, expr: !DIExpression())
!308 = distinct !DIGlobalVariable(name: "CD_MASK_BMESH", scope: !2, file: !3, line: 1254, type: !302, isLocal: false, isDefinition: true)
!309 = !DIGlobalVariableExpression(var: !310, expr: !DIExpression())
!310 = distinct !DIGlobalVariable(name: "CD_MASK_FACECORNERS", scope: !2, file: !3, line: 1260, type: !302, isLocal: false, isDefinition: true)
!311 = !DIGlobalVariableExpression(var: !312, expr: !DIExpression())
!312 = distinct !DIGlobalVariable(name: "CD_MASK_EVERYTHING", scope: !2, file: !3, line: 1263, type: !302, isLocal: false, isDefinition: true)
!313 = !DIGlobalVariableExpression(var: !314, expr: !DIExpression())
!314 = distinct !DIGlobalVariable(name: "LAYERTYPENAMES", scope: !2, file: !3, line: 1217, type: !315, isLocal: true, isDefinition: true)
!315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 2624, elements: !318)
!316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !317, size: 64)
!317 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !148)
!318 = !{!319}
!319 = !DISubrange(count: 41)
!320 = !DIGlobalVariableExpression(var: !321, expr: !DIExpression())
!321 = distinct !DIGlobalVariable(name: "LAYERTYPEINFO", scope: !2, file: !3, line: 1099, type: !322, isLocal: true, isDefinition: true)
!322 = !DICompositeType(tag: DW_TAG_array_type, baseType: !323, size: 49856, elements: !318)
!323 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !324)
!324 = !DIDerivedType(tag: DW_TAG_typedef, name: "LayerTypeInfo", file: !3, line: 154, baseType: !325)
!325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "LayerTypeInfo", file: !3, line: 80, size: 1216, elements: !326)
!326 = !{!327, !328, !329, !330, !331, !337, !341, !347, !353, !357, !362, !366, !370, !374, !378, !382, !390, !394, !400}
!327 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !325, file: !3, line: 81, baseType: !158, size: 32)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "structname", scope: !325, file: !3, line: 84, baseType: !316, size: 64, offset: 64)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "structnum", scope: !325, file: !3, line: 86, baseType: !158, size: 32, offset: 128)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "defaultname", scope: !325, file: !3, line: 92, baseType: !316, size: 64, offset: 192)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "copy", scope: !325, file: !3, line: 99, baseType: !332, size: 64, offset: 256)
!332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !333, size: 64)
!333 = !DISubroutineType(types: !334)
!334 = !{null, !335, !146, !158}
!335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !336, size: 64)
!336 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !325, file: !3, line: 107, baseType: !338, size: 64, offset: 320)
!338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !339, size: 64)
!339 = !DISubroutineType(types: !340)
!340 = !{null, !146, !158, !158}
!341 = !DIDerivedType(tag: DW_TAG_member, name: "interp", scope: !325, file: !3, line: 124, baseType: !342, size: 64, offset: 384)
!342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !343, size: 64)
!343 = !DISubroutineType(types: !344)
!344 = !{null, !222, !345, !345, !158, !146}
!345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !346, size: 64)
!346 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !160)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "swap", scope: !325, file: !3, line: 128, baseType: !348, size: 64, offset: 448)
!348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !349, size: 64)
!349 = !DISubroutineType(types: !350)
!350 = !{null, !146, !351}
!351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !352, size: 64)
!352 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !158)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "set_default", scope: !325, file: !3, line: 133, baseType: !354, size: 64, offset: 512)
!354 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !355, size: 64)
!355 = !DISubroutineType(types: !356)
!356 = !{null, !146, !158}
!357 = !DIDerivedType(tag: DW_TAG_member, name: "equal", scope: !325, file: !3, line: 136, baseType: !358, size: 64, offset: 576)
!358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !359, size: 64)
!359 = !DISubroutineType(types: !360)
!360 = !{!361, !335, !335}
!361 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!362 = !DIDerivedType(tag: DW_TAG_member, name: "multiply", scope: !325, file: !3, line: 137, baseType: !363, size: 64, offset: 640)
!363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !364, size: 64)
!364 = !DISubroutineType(types: !365)
!365 = !{null, !146, !160}
!366 = !DIDerivedType(tag: DW_TAG_member, name: "initminmax", scope: !325, file: !3, line: 138, baseType: !367, size: 64, offset: 704)
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DISubroutineType(types: !369)
!369 = !{null, !146, !146}
!370 = !DIDerivedType(tag: DW_TAG_member, name: "add", scope: !325, file: !3, line: 139, baseType: !371, size: 64, offset: 768)
!371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !372, size: 64)
!372 = !DISubroutineType(types: !373)
!373 = !{null, !146, !335}
!374 = !DIDerivedType(tag: DW_TAG_member, name: "dominmax", scope: !325, file: !3, line: 140, baseType: !375, size: 64, offset: 832)
!375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !376, size: 64)
!376 = !DISubroutineType(types: !377)
!377 = !{null, !335, !146, !146}
!378 = !DIDerivedType(tag: DW_TAG_member, name: "copyvalue", scope: !325, file: !3, line: 141, baseType: !379, size: 64, offset: 896)
!379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !380, size: 64)
!380 = !DISubroutineType(types: !381)
!381 = !{null, !335, !146}
!382 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !325, file: !3, line: 144, baseType: !383, size: 64, offset: 960)
!383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !384, size: 64)
!384 = !DISubroutineType(types: !385)
!385 = !{!158, !386, !146, !158}
!386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !387, size: 64)
!387 = !DIDerivedType(tag: DW_TAG_typedef, name: "CDataFile", file: !388, line: 33, baseType: !389)
!388 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_customdata_file.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!389 = !DICompositeType(tag: DW_TAG_structure_type, name: "CDataFile", file: !388, line: 33, flags: DIFlagFwdDecl)
!390 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !325, file: !3, line: 147, baseType: !391, size: 64, offset: 1024)
!391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !392, size: 64)
!392 = !DISubroutineType(types: !393)
!393 = !{!158, !386, !335, !158}
!394 = !DIDerivedType(tag: DW_TAG_member, name: "filesize", scope: !325, file: !3, line: 150, baseType: !395, size: 64, offset: 1088)
!395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !396, size: 64)
!396 = !DISubroutineType(types: !397)
!397 = !{!398, !386, !335, !158}
!398 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !399, line: 46, baseType: !139)
!399 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!400 = !DIDerivedType(tag: DW_TAG_member, name: "layers_max", scope: !325, file: !3, line: 153, baseType: !401, size: 64, offset: 1152)
!401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !402, size: 64)
!402 = !DISubroutineType(types: !403)
!403 = !{!158}
!404 = !DIGlobalVariableExpression(var: !405, expr: !DIExpression())
!405 = distinct !DIGlobalVariable(name: "pin_flags", scope: !406, file: !3, line: 351, type: !408, isLocal: true, isDefinition: true)
!406 = distinct !DISubprogram(name: "layerSwap_tface", scope: !3, file: !3, line: 347, type: !349, scopeLine: 348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!407 = !{}
!408 = !DICompositeType(tag: DW_TAG_array_type, baseType: !409, size: 64, elements: !410)
!409 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !179)
!410 = !{!171}
!411 = !DIGlobalVariableExpression(var: !412, expr: !DIExpression())
!412 = distinct !DIGlobalVariable(name: "sel_flags", scope: !406, file: !3, line: 352, type: !413, isLocal: true, isDefinition: true)
!413 = !DICompositeType(tag: DW_TAG_array_type, baseType: !317, size: 32, elements: !410)
!414 = !DIGlobalVariableExpression(var: !415, expr: !DIExpression())
!415 = distinct !DIGlobalVariable(name: "default_tf", scope: !416, file: !3, line: 380, type: !165, isLocal: true, isDefinition: true)
!416 = distinct !DISubprogram(name: "layerDefault_tface", scope: !3, file: !3, line: 378, type: !355, scopeLine: 379, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!417 = !DIGlobalVariableExpression(var: !418, expr: !DIExpression())
!418 = distinct !DIGlobalVariable(name: "default_mcol", scope: !419, file: !3, line: 987, type: !184, isLocal: true, isDefinition: true)
!419 = distinct !DISubprogram(name: "layerDefault_mcol", scope: !3, file: !3, line: 985, type: !355, scopeLine: 986, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!420 = !DIGlobalVariableExpression(var: !421, expr: !DIExpression())
!421 = distinct !DIGlobalVariable(name: "default_osf", scope: !422, file: !3, line: 471, type: !194, isLocal: true, isDefinition: true)
!422 = distinct !DISubprogram(name: "layerDefault_origspace_face", scope: !3, file: !3, line: 469, type: !355, scopeLine: 470, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!423 = !{i32 7, !"Dwarf Version", i32 4}
!424 = !{i32 2, !"Debug Info Version", i32 3}
!425 = !{i32 1, !"wchar_size", i32 4}
!426 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!427 = distinct !DISubprogram(name: "bpy_bm_generic_invalidate", scope: !3, file: !3, line: 206, type: !428, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!428 = !DISubroutineType(types: !429)
!429 = !{null, !430}
!430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !431, size: 64)
!431 = !DICompositeType(tag: DW_TAG_structure_type, name: "BPy_BMGeneric", file: !234, line: 282, flags: DIFlagFwdDecl)
!432 = !DILocalVariable(name: "UNUSED_self", arg: 1, scope: !427, file: !3, line: 206, type: !430)
!433 = !DILocation(line: 206, column: 54, scope: !427)
!434 = !DILocation(line: 209, column: 1, scope: !427)
!435 = distinct !DISubprogram(name: "customData_mask_layers__print", scope: !3, file: !3, line: 1290, type: !436, scopeLine: 1291, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!436 = !DISubroutineType(types: !437)
!437 = !{null, !140}
!438 = !DILocalVariable(name: "mask", arg: 1, scope: !435, file: !3, line: 1290, type: !140)
!439 = !DILocation(line: 1290, column: 51, scope: !435)
!440 = !DILocalVariable(name: "i", scope: !435, file: !3, line: 1292, type: !158)
!441 = !DILocation(line: 1292, column: 6, scope: !435)
!442 = !DILocation(line: 1294, column: 45, scope: !435)
!443 = !DILocation(line: 1294, column: 2, scope: !435)
!444 = !DILocation(line: 1295, column: 9, scope: !445)
!445 = distinct !DILexicalBlock(scope: !435, file: !3, line: 1295, column: 2)
!446 = !DILocation(line: 1295, column: 7, scope: !445)
!447 = !DILocation(line: 1295, column: 14, scope: !448)
!448 = distinct !DILexicalBlock(scope: !445, file: !3, line: 1295, column: 2)
!449 = !DILocation(line: 1295, column: 16, scope: !448)
!450 = !DILocation(line: 1295, column: 2, scope: !445)
!451 = !DILocation(line: 1296, column: 7, scope: !452)
!452 = distinct !DILexicalBlock(scope: !453, file: !3, line: 1296, column: 7)
!453 = distinct !DILexicalBlock(scope: !448, file: !3, line: 1295, column: 36)
!454 = !DILocation(line: 1296, column: 14, scope: !452)
!455 = !DILocation(line: 1296, column: 12, scope: !452)
!456 = !DILocation(line: 1296, column: 7, scope: !453)
!457 = !DILocation(line: 1297, column: 39, scope: !458)
!458 = distinct !DILexicalBlock(scope: !452, file: !3, line: 1296, column: 34)
!459 = !DILocation(line: 1297, column: 21, scope: !458)
!460 = !DILocation(line: 1297, column: 4, scope: !458)
!461 = !DILocation(line: 1298, column: 3, scope: !458)
!462 = !DILocation(line: 1299, column: 2, scope: !453)
!463 = !DILocation(line: 1295, column: 32, scope: !448)
!464 = !DILocation(line: 1295, column: 2, scope: !448)
!465 = distinct !{!465, !450, !466}
!466 = !DILocation(line: 1299, column: 2, scope: !445)
!467 = !DILocation(line: 1300, column: 1, scope: !435)
!468 = distinct !DISubprogram(name: "layerType_getName", scope: !3, file: !3, line: 1283, type: !469, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!469 = !DISubroutineType(types: !470)
!470 = !{!316, !158}
!471 = !DILocalVariable(name: "type", arg: 1, scope: !468, file: !3, line: 1283, type: !158)
!472 = !DILocation(line: 1283, column: 42, scope: !468)
!473 = !DILocation(line: 1285, column: 6, scope: !474)
!474 = distinct !DILexicalBlock(scope: !468, file: !3, line: 1285, column: 6)
!475 = !DILocation(line: 1285, column: 11, scope: !474)
!476 = !DILocation(line: 1285, column: 15, scope: !474)
!477 = !DILocation(line: 1285, column: 18, scope: !474)
!478 = !DILocation(line: 1285, column: 23, scope: !474)
!479 = !DILocation(line: 1285, column: 6, scope: !468)
!480 = !DILocation(line: 1285, column: 39, scope: !474)
!481 = !DILocation(line: 1287, column: 24, scope: !468)
!482 = !DILocation(line: 1287, column: 9, scope: !468)
!483 = !DILocation(line: 1287, column: 2, scope: !468)
!484 = !DILocation(line: 1288, column: 1, scope: !468)
!485 = distinct !DISubprogram(name: "CustomData_update_typemap", scope: !3, file: !3, line: 1308, type: !486, scopeLine: 1309, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!486 = !DISubroutineType(types: !487)
!487 = !{null, !488}
!488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !489, size: 64)
!489 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomData", file: !6, line: 73, baseType: !490)
!490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomData", file: !6, line: 64, size: 1600, elements: !491)
!491 = !{!492, !510, !512, !513, !514, !515, !518}
!492 = !DIDerivedType(tag: DW_TAG_member, name: "layers", scope: !490, file: !6, line: 65, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !494, size: 64)
!494 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomDataLayer", file: !6, line: 53, baseType: !495)
!495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomDataLayer", file: !6, line: 42, size: 832, elements: !496)
!496 = !{!497, !498, !499, !500, !501, !502, !503, !504, !505, !509}
!497 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !495, file: !6, line: 43, baseType: !158, size: 32)
!498 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !495, file: !6, line: 44, baseType: !158, size: 32, offset: 32)
!499 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !495, file: !6, line: 45, baseType: !158, size: 32, offset: 64)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !495, file: !6, line: 46, baseType: !158, size: 32, offset: 96)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "active_rnd", scope: !495, file: !6, line: 47, baseType: !158, size: 32, offset: 128)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "active_clone", scope: !495, file: !6, line: 48, baseType: !158, size: 32, offset: 160)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "active_mask", scope: !495, file: !6, line: 49, baseType: !158, size: 32, offset: 192)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !495, file: !6, line: 50, baseType: !158, size: 32, offset: 224)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !495, file: !6, line: 51, baseType: !506, size: 512, offset: 256)
!506 = !DICompositeType(tag: DW_TAG_array_type, baseType: !148, size: 512, elements: !507)
!507 = !{!508}
!508 = !DISubrange(count: 64)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !495, file: !6, line: 52, baseType: !146, size: 64, offset: 768)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "typemap", scope: !490, file: !6, line: 66, baseType: !511, size: 1312, offset: 64)
!511 = !DICompositeType(tag: DW_TAG_array_type, baseType: !158, size: 1312, elements: !318)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "totlayer", scope: !490, file: !6, line: 69, baseType: !158, size: 32, offset: 1376)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "maxlayer", scope: !490, file: !6, line: 69, baseType: !158, size: 32, offset: 1408)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "totsize", scope: !490, file: !6, line: 70, baseType: !158, size: 32, offset: 1440)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !490, file: !6, line: 71, baseType: !516, size: 64, offset: 1472)
!516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !517, size: 64)
!517 = !DICompositeType(tag: DW_TAG_structure_type, name: "BLI_mempool", file: !6, line: 71, flags: DIFlagFwdDecl)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "external", scope: !490, file: !6, line: 72, baseType: !519, size: 64, offset: 1536)
!519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !520, size: 64)
!520 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomDataExternal", file: !6, line: 59, baseType: !521)
!521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomDataExternal", file: !6, line: 57, size: 8192, elements: !522)
!522 = !{!523}
!523 = !DIDerivedType(tag: DW_TAG_member, name: "filename", scope: !521, file: !6, line: 58, baseType: !524, size: 8192)
!524 = !DICompositeType(tag: DW_TAG_array_type, baseType: !148, size: 8192, elements: !525)
!525 = !{!526}
!526 = !DISubrange(count: 1024)
!527 = !DILocalVariable(name: "data", arg: 1, scope: !485, file: !3, line: 1308, type: !488)
!528 = !DILocation(line: 1308, column: 44, scope: !485)
!529 = !DILocalVariable(name: "i", scope: !485, file: !3, line: 1310, type: !158)
!530 = !DILocation(line: 1310, column: 6, scope: !485)
!531 = !DILocalVariable(name: "lasttype", scope: !485, file: !3, line: 1310, type: !158)
!532 = !DILocation(line: 1310, column: 9, scope: !485)
!533 = !DILocation(line: 1312, column: 9, scope: !534)
!534 = distinct !DILexicalBlock(scope: !485, file: !3, line: 1312, column: 2)
!535 = !DILocation(line: 1312, column: 7, scope: !534)
!536 = !DILocation(line: 1312, column: 14, scope: !537)
!537 = distinct !DILexicalBlock(scope: !534, file: !3, line: 1312, column: 2)
!538 = !DILocation(line: 1312, column: 16, scope: !537)
!539 = !DILocation(line: 1312, column: 2, scope: !534)
!540 = !DILocation(line: 1313, column: 3, scope: !541)
!541 = distinct !DILexicalBlock(scope: !537, file: !3, line: 1312, column: 36)
!542 = !DILocation(line: 1313, column: 9, scope: !541)
!543 = !DILocation(line: 1313, column: 17, scope: !541)
!544 = !DILocation(line: 1313, column: 20, scope: !541)
!545 = !DILocation(line: 1314, column: 2, scope: !541)
!546 = !DILocation(line: 1312, column: 32, scope: !537)
!547 = !DILocation(line: 1312, column: 2, scope: !537)
!548 = distinct !{!548, !539, !549}
!549 = !DILocation(line: 1314, column: 2, scope: !534)
!550 = !DILocation(line: 1316, column: 9, scope: !551)
!551 = distinct !DILexicalBlock(scope: !485, file: !3, line: 1316, column: 2)
!552 = !DILocation(line: 1316, column: 7, scope: !551)
!553 = !DILocation(line: 1316, column: 14, scope: !554)
!554 = distinct !DILexicalBlock(scope: !551, file: !3, line: 1316, column: 2)
!555 = !DILocation(line: 1316, column: 18, scope: !554)
!556 = !DILocation(line: 1316, column: 24, scope: !554)
!557 = !DILocation(line: 1316, column: 16, scope: !554)
!558 = !DILocation(line: 1316, column: 2, scope: !551)
!559 = !DILocation(line: 1317, column: 7, scope: !560)
!560 = distinct !DILexicalBlock(scope: !561, file: !3, line: 1317, column: 7)
!561 = distinct !DILexicalBlock(scope: !554, file: !3, line: 1316, column: 39)
!562 = !DILocation(line: 1317, column: 13, scope: !560)
!563 = !DILocation(line: 1317, column: 20, scope: !560)
!564 = !DILocation(line: 1317, column: 23, scope: !560)
!565 = !DILocation(line: 1317, column: 31, scope: !560)
!566 = !DILocation(line: 1317, column: 28, scope: !560)
!567 = !DILocation(line: 1317, column: 7, scope: !561)
!568 = !DILocation(line: 1318, column: 42, scope: !569)
!569 = distinct !DILexicalBlock(scope: !560, file: !3, line: 1317, column: 41)
!570 = !DILocation(line: 1318, column: 4, scope: !569)
!571 = !DILocation(line: 1318, column: 10, scope: !569)
!572 = !DILocation(line: 1318, column: 18, scope: !569)
!573 = !DILocation(line: 1318, column: 24, scope: !569)
!574 = !DILocation(line: 1318, column: 31, scope: !569)
!575 = !DILocation(line: 1318, column: 34, scope: !569)
!576 = !DILocation(line: 1318, column: 40, scope: !569)
!577 = !DILocation(line: 1319, column: 3, scope: !569)
!578 = !DILocation(line: 1320, column: 14, scope: !561)
!579 = !DILocation(line: 1320, column: 20, scope: !561)
!580 = !DILocation(line: 1320, column: 27, scope: !561)
!581 = !DILocation(line: 1320, column: 30, scope: !561)
!582 = !DILocation(line: 1320, column: 12, scope: !561)
!583 = !DILocation(line: 1321, column: 2, scope: !561)
!584 = !DILocation(line: 1316, column: 35, scope: !554)
!585 = !DILocation(line: 1316, column: 2, scope: !554)
!586 = distinct !{!586, !558, !587}
!587 = !DILocation(line: 1321, column: 2, scope: !551)
!588 = !DILocation(line: 1322, column: 1, scope: !485)
!589 = distinct !DISubprogram(name: "CustomData_merge", scope: !3, file: !3, line: 1334, type: !590, scopeLine: 1336, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!590 = !DISubroutineType(types: !591)
!591 = !{!361, !592, !594, !140, !158, !158}
!592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !593, size: 64)
!593 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !490)
!594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !490, size: 64)
!595 = !DILocalVariable(name: "source", arg: 1, scope: !589, file: !3, line: 1334, type: !592)
!596 = !DILocation(line: 1334, column: 48, scope: !589)
!597 = !DILocalVariable(name: "dest", arg: 2, scope: !589, file: !3, line: 1334, type: !594)
!598 = !DILocation(line: 1334, column: 75, scope: !589)
!599 = !DILocalVariable(name: "mask", arg: 3, scope: !589, file: !3, line: 1335, type: !140)
!600 = !DILocation(line: 1335, column: 38, scope: !589)
!601 = !DILocalVariable(name: "alloctype", arg: 4, scope: !589, file: !3, line: 1335, type: !158)
!602 = !DILocation(line: 1335, column: 48, scope: !589)
!603 = !DILocalVariable(name: "totelem", arg: 5, scope: !589, file: !3, line: 1335, type: !158)
!604 = !DILocation(line: 1335, column: 63, scope: !589)
!605 = !DILocalVariable(name: "layer", scope: !589, file: !3, line: 1338, type: !493)
!606 = !DILocation(line: 1338, column: 19, scope: !589)
!607 = !DILocalVariable(name: "newlayer", scope: !589, file: !3, line: 1338, type: !493)
!608 = !DILocation(line: 1338, column: 27, scope: !589)
!609 = !DILocalVariable(name: "data", scope: !589, file: !3, line: 1339, type: !146)
!610 = !DILocation(line: 1339, column: 8, scope: !589)
!611 = !DILocalVariable(name: "i", scope: !589, file: !3, line: 1340, type: !158)
!612 = !DILocation(line: 1340, column: 6, scope: !589)
!613 = !DILocalVariable(name: "type", scope: !589, file: !3, line: 1340, type: !158)
!614 = !DILocation(line: 1340, column: 9, scope: !589)
!615 = !DILocalVariable(name: "lasttype", scope: !589, file: !3, line: 1340, type: !158)
!616 = !DILocation(line: 1340, column: 15, scope: !589)
!617 = !DILocalVariable(name: "lastactive", scope: !589, file: !3, line: 1340, type: !158)
!618 = !DILocation(line: 1340, column: 30, scope: !589)
!619 = !DILocalVariable(name: "lastrender", scope: !589, file: !3, line: 1340, type: !158)
!620 = !DILocation(line: 1340, column: 46, scope: !589)
!621 = !DILocalVariable(name: "lastclone", scope: !589, file: !3, line: 1340, type: !158)
!622 = !DILocation(line: 1340, column: 62, scope: !589)
!623 = !DILocalVariable(name: "lastmask", scope: !589, file: !3, line: 1340, type: !158)
!624 = !DILocation(line: 1340, column: 77, scope: !589)
!625 = !DILocalVariable(name: "lastflag", scope: !589, file: !3, line: 1340, type: !158)
!626 = !DILocation(line: 1340, column: 91, scope: !589)
!627 = !DILocalVariable(name: "number", scope: !589, file: !3, line: 1341, type: !158)
!628 = !DILocation(line: 1341, column: 6, scope: !589)
!629 = !DILocalVariable(name: "maxnumber", scope: !589, file: !3, line: 1341, type: !158)
!630 = !DILocation(line: 1341, column: 18, scope: !589)
!631 = !DILocalVariable(name: "changed", scope: !589, file: !3, line: 1342, type: !361)
!632 = !DILocation(line: 1342, column: 7, scope: !589)
!633 = !DILocation(line: 1344, column: 9, scope: !634)
!634 = distinct !DILexicalBlock(scope: !589, file: !3, line: 1344, column: 2)
!635 = !DILocation(line: 1344, column: 7, scope: !634)
!636 = !DILocation(line: 1344, column: 14, scope: !637)
!637 = distinct !DILexicalBlock(scope: !634, file: !3, line: 1344, column: 2)
!638 = !DILocation(line: 1344, column: 18, scope: !637)
!639 = !DILocation(line: 1344, column: 26, scope: !637)
!640 = !DILocation(line: 1344, column: 16, scope: !637)
!641 = !DILocation(line: 1344, column: 2, scope: !634)
!642 = !DILocation(line: 1345, column: 12, scope: !643)
!643 = distinct !DILexicalBlock(scope: !637, file: !3, line: 1344, column: 41)
!644 = !DILocation(line: 1345, column: 20, scope: !643)
!645 = !DILocation(line: 1345, column: 27, scope: !643)
!646 = !DILocation(line: 1345, column: 9, scope: !643)
!647 = !DILocation(line: 1348, column: 10, scope: !643)
!648 = !DILocation(line: 1348, column: 17, scope: !643)
!649 = !DILocation(line: 1348, column: 8, scope: !643)
!650 = !DILocation(line: 1350, column: 7, scope: !651)
!651 = distinct !DILexicalBlock(scope: !643, file: !3, line: 1350, column: 7)
!652 = !DILocation(line: 1350, column: 15, scope: !651)
!653 = !DILocation(line: 1350, column: 12, scope: !651)
!654 = !DILocation(line: 1350, column: 7, scope: !643)
!655 = !DILocation(line: 1351, column: 11, scope: !656)
!656 = distinct !DILexicalBlock(scope: !651, file: !3, line: 1350, column: 25)
!657 = !DILocation(line: 1352, column: 48, scope: !656)
!658 = !DILocation(line: 1352, column: 16, scope: !656)
!659 = !DILocation(line: 1352, column: 14, scope: !656)
!660 = !DILocation(line: 1353, column: 17, scope: !656)
!661 = !DILocation(line: 1353, column: 24, scope: !656)
!662 = !DILocation(line: 1353, column: 15, scope: !656)
!663 = !DILocation(line: 1354, column: 17, scope: !656)
!664 = !DILocation(line: 1354, column: 24, scope: !656)
!665 = !DILocation(line: 1354, column: 15, scope: !656)
!666 = !DILocation(line: 1355, column: 16, scope: !656)
!667 = !DILocation(line: 1355, column: 23, scope: !656)
!668 = !DILocation(line: 1355, column: 14, scope: !656)
!669 = !DILocation(line: 1356, column: 15, scope: !656)
!670 = !DILocation(line: 1356, column: 22, scope: !656)
!671 = !DILocation(line: 1356, column: 13, scope: !656)
!672 = !DILocation(line: 1357, column: 15, scope: !656)
!673 = !DILocation(line: 1357, column: 13, scope: !656)
!674 = !DILocation(line: 1358, column: 15, scope: !656)
!675 = !DILocation(line: 1358, column: 22, scope: !656)
!676 = !DILocation(line: 1358, column: 13, scope: !656)
!677 = !DILocation(line: 1359, column: 3, scope: !656)
!678 = !DILocation(line: 1361, column: 10, scope: !651)
!679 = !DILocation(line: 1363, column: 7, scope: !680)
!680 = distinct !DILexicalBlock(scope: !643, file: !3, line: 1363, column: 7)
!681 = !DILocation(line: 1363, column: 16, scope: !680)
!682 = !DILocation(line: 1363, column: 7, scope: !643)
!683 = !DILocation(line: 1363, column: 34, scope: !680)
!684 = !DILocation(line: 1364, column: 14, scope: !685)
!685 = distinct !DILexicalBlock(scope: !680, file: !3, line: 1364, column: 12)
!686 = !DILocation(line: 1364, column: 21, scope: !685)
!687 = !DILocation(line: 1364, column: 19, scope: !685)
!688 = !DILocation(line: 1364, column: 12, scope: !680)
!689 = !DILocation(line: 1364, column: 45, scope: !685)
!690 = !DILocation(line: 1365, column: 13, scope: !691)
!691 = distinct !DILexicalBlock(scope: !685, file: !3, line: 1365, column: 12)
!692 = !DILocation(line: 1365, column: 23, scope: !691)
!693 = !DILocation(line: 1365, column: 30, scope: !691)
!694 = !DILocation(line: 1365, column: 34, scope: !691)
!695 = !DILocation(line: 1365, column: 44, scope: !691)
!696 = !DILocation(line: 1365, column: 41, scope: !691)
!697 = !DILocation(line: 1365, column: 12, scope: !685)
!698 = !DILocation(line: 1365, column: 56, scope: !691)
!699 = !DILocation(line: 1366, column: 39, scope: !700)
!700 = distinct !DILexicalBlock(scope: !691, file: !3, line: 1366, column: 12)
!701 = !DILocation(line: 1366, column: 45, scope: !700)
!702 = !DILocation(line: 1366, column: 51, scope: !700)
!703 = !DILocation(line: 1366, column: 58, scope: !700)
!704 = !DILocation(line: 1366, column: 12, scope: !700)
!705 = !DILocation(line: 1366, column: 12, scope: !691)
!706 = !DILocation(line: 1366, column: 65, scope: !700)
!707 = !DILocation(line: 1368, column: 11, scope: !643)
!708 = !DILocation(line: 1368, column: 3, scope: !643)
!709 = !DILocation(line: 1372, column: 12, scope: !710)
!710 = distinct !DILexicalBlock(scope: !643, file: !3, line: 1368, column: 22)
!711 = !DILocation(line: 1372, column: 19, scope: !710)
!712 = !DILocation(line: 1372, column: 10, scope: !710)
!713 = !DILocation(line: 1373, column: 5, scope: !710)
!714 = !DILocation(line: 1375, column: 10, scope: !710)
!715 = !DILocation(line: 1376, column: 5, scope: !710)
!716 = !DILocation(line: 1379, column: 8, scope: !717)
!717 = distinct !DILexicalBlock(scope: !643, file: !3, line: 1379, column: 7)
!718 = !DILocation(line: 1379, column: 18, scope: !717)
!719 = !DILocation(line: 1379, column: 32, scope: !717)
!720 = !DILocation(line: 1379, column: 36, scope: !717)
!721 = !DILocation(line: 1379, column: 45, scope: !717)
!722 = !DILocation(line: 1379, column: 7, scope: !643)
!723 = !DILocation(line: 1380, column: 46, scope: !717)
!724 = !DILocation(line: 1380, column: 52, scope: !717)
!725 = !DILocation(line: 1381, column: 46, scope: !717)
!726 = !DILocation(line: 1381, column: 52, scope: !717)
!727 = !DILocation(line: 1381, column: 61, scope: !717)
!728 = !DILocation(line: 1381, column: 68, scope: !717)
!729 = !DILocation(line: 1380, column: 15, scope: !717)
!730 = !DILocation(line: 1380, column: 13, scope: !717)
!731 = !DILocation(line: 1380, column: 4, scope: !717)
!732 = !DILocation(line: 1383, column: 46, scope: !717)
!733 = !DILocation(line: 1383, column: 52, scope: !717)
!734 = !DILocation(line: 1383, column: 58, scope: !717)
!735 = !DILocation(line: 1384, column: 46, scope: !717)
!736 = !DILocation(line: 1384, column: 52, scope: !717)
!737 = !DILocation(line: 1384, column: 61, scope: !717)
!738 = !DILocation(line: 1384, column: 68, scope: !717)
!739 = !DILocation(line: 1383, column: 15, scope: !717)
!740 = !DILocation(line: 1383, column: 13, scope: !717)
!741 = !DILocation(line: 1386, column: 7, scope: !742)
!742 = distinct !DILexicalBlock(scope: !643, file: !3, line: 1386, column: 7)
!743 = !DILocation(line: 1386, column: 7, scope: !643)
!744 = !DILocation(line: 1387, column: 20, scope: !745)
!745 = distinct !DILexicalBlock(scope: !742, file: !3, line: 1386, column: 17)
!746 = !DILocation(line: 1387, column: 27, scope: !745)
!747 = !DILocation(line: 1387, column: 4, scope: !745)
!748 = !DILocation(line: 1387, column: 14, scope: !745)
!749 = !DILocation(line: 1387, column: 18, scope: !745)
!750 = !DILocation(line: 1389, column: 23, scope: !745)
!751 = !DILocation(line: 1389, column: 4, scope: !745)
!752 = !DILocation(line: 1389, column: 14, scope: !745)
!753 = !DILocation(line: 1389, column: 21, scope: !745)
!754 = !DILocation(line: 1390, column: 27, scope: !745)
!755 = !DILocation(line: 1390, column: 4, scope: !745)
!756 = !DILocation(line: 1390, column: 14, scope: !745)
!757 = !DILocation(line: 1390, column: 25, scope: !745)
!758 = !DILocation(line: 1391, column: 29, scope: !745)
!759 = !DILocation(line: 1391, column: 4, scope: !745)
!760 = !DILocation(line: 1391, column: 14, scope: !745)
!761 = !DILocation(line: 1391, column: 27, scope: !745)
!762 = !DILocation(line: 1392, column: 28, scope: !745)
!763 = !DILocation(line: 1392, column: 4, scope: !745)
!764 = !DILocation(line: 1392, column: 14, scope: !745)
!765 = !DILocation(line: 1392, column: 26, scope: !745)
!766 = !DILocation(line: 1393, column: 22, scope: !745)
!767 = !DILocation(line: 1393, column: 31, scope: !745)
!768 = !DILocation(line: 1393, column: 4, scope: !745)
!769 = !DILocation(line: 1393, column: 14, scope: !745)
!770 = !DILocation(line: 1393, column: 19, scope: !745)
!771 = !DILocation(line: 1394, column: 12, scope: !745)
!772 = !DILocation(line: 1395, column: 3, scope: !745)
!773 = !DILocation(line: 1396, column: 2, scope: !643)
!774 = !DILocation(line: 1344, column: 36, scope: !637)
!775 = !DILocation(line: 1344, column: 2, scope: !637)
!776 = distinct !{!776, !641, !777}
!777 = !DILocation(line: 1396, column: 2, scope: !634)
!778 = !DILocation(line: 1398, column: 28, scope: !589)
!779 = !DILocation(line: 1398, column: 2, scope: !589)
!780 = !DILocation(line: 1399, column: 9, scope: !589)
!781 = !DILocation(line: 1399, column: 2, scope: !589)
!782 = distinct !DISubprogram(name: "CustomData_layertype_layers_max", scope: !3, file: !3, line: 3066, type: !783, scopeLine: 3067, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!783 = !DISubroutineType(types: !784)
!784 = !{!158, !352}
!785 = !DILocalVariable(name: "type", arg: 1, scope: !782, file: !3, line: 3066, type: !352)
!786 = !DILocation(line: 3066, column: 47, scope: !782)
!787 = !DILocalVariable(name: "typeInfo", scope: !782, file: !3, line: 3068, type: !788)
!788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !323, size: 64)
!789 = !DILocation(line: 3068, column: 23, scope: !782)
!790 = !DILocation(line: 3068, column: 52, scope: !782)
!791 = !DILocation(line: 3068, column: 34, scope: !782)
!792 = !DILocation(line: 3071, column: 6, scope: !793)
!793 = distinct !DILexicalBlock(scope: !782, file: !3, line: 3071, column: 6)
!794 = !DILocation(line: 3071, column: 16, scope: !793)
!795 = !DILocation(line: 3071, column: 28, scope: !793)
!796 = !DILocation(line: 3071, column: 6, scope: !782)
!797 = !DILocation(line: 3072, column: 3, scope: !798)
!798 = distinct !DILexicalBlock(scope: !793, file: !3, line: 3071, column: 37)
!799 = !DILocation(line: 3074, column: 11, scope: !800)
!800 = distinct !DILexicalBlock(scope: !793, file: !3, line: 3074, column: 11)
!801 = !DILocation(line: 3074, column: 21, scope: !800)
!802 = !DILocation(line: 3074, column: 32, scope: !800)
!803 = !DILocation(line: 3074, column: 11, scope: !793)
!804 = !DILocation(line: 3075, column: 3, scope: !805)
!805 = distinct !DILexicalBlock(scope: !800, file: !3, line: 3074, column: 41)
!806 = !DILocation(line: 3078, column: 9, scope: !782)
!807 = !DILocation(line: 3078, column: 19, scope: !782)
!808 = !DILocation(line: 3078, column: 2, scope: !782)
!809 = !DILocation(line: 3079, column: 1, scope: !782)
!810 = distinct !DISubprogram(name: "CustomData_get_layer_named", scope: !3, file: !3, line: 2238, type: !811, scopeLine: 2240, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!811 = !DISubroutineType(types: !812)
!812 = !{!146, !592, !158, !316}
!813 = !DILocalVariable(name: "data", arg: 1, scope: !810, file: !3, line: 2238, type: !592)
!814 = !DILocation(line: 2238, column: 59, scope: !810)
!815 = !DILocalVariable(name: "type", arg: 2, scope: !810, file: !3, line: 2238, type: !158)
!816 = !DILocation(line: 2238, column: 69, scope: !810)
!817 = !DILocalVariable(name: "name", arg: 3, scope: !810, file: !3, line: 2239, type: !316)
!818 = !DILocation(line: 2239, column: 46, scope: !810)
!819 = !DILocalVariable(name: "layer_index", scope: !810, file: !3, line: 2241, type: !158)
!820 = !DILocation(line: 2241, column: 6, scope: !810)
!821 = !DILocation(line: 2241, column: 53, scope: !810)
!822 = !DILocation(line: 2241, column: 59, scope: !810)
!823 = !DILocation(line: 2241, column: 65, scope: !810)
!824 = !DILocation(line: 2241, column: 20, scope: !810)
!825 = !DILocation(line: 2242, column: 6, scope: !826)
!826 = distinct !DILexicalBlock(scope: !810, file: !3, line: 2242, column: 6)
!827 = !DILocation(line: 2242, column: 18, scope: !826)
!828 = !DILocation(line: 2242, column: 6, scope: !810)
!829 = !DILocation(line: 2242, column: 25, scope: !826)
!830 = !DILocation(line: 2244, column: 9, scope: !810)
!831 = !DILocation(line: 2244, column: 15, scope: !810)
!832 = !DILocation(line: 2244, column: 22, scope: !810)
!833 = !DILocation(line: 2244, column: 35, scope: !810)
!834 = !DILocation(line: 2244, column: 2, scope: !810)
!835 = !DILocation(line: 2245, column: 1, scope: !810)
!836 = distinct !DISubprogram(name: "customData_add_layer__internal", scope: !3, file: !3, line: 1683, type: !837, scopeLine: 1685, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!837 = !DISubroutineType(types: !838)
!838 = !{!493, !488, !158, !158, !146, !158, !316}
!839 = !DILocalVariable(name: "data", arg: 1, scope: !836, file: !3, line: 1683, type: !488)
!840 = !DILocation(line: 1683, column: 68, scope: !836)
!841 = !DILocalVariable(name: "type", arg: 2, scope: !836, file: !3, line: 1683, type: !158)
!842 = !DILocation(line: 1683, column: 78, scope: !836)
!843 = !DILocalVariable(name: "alloctype", arg: 3, scope: !836, file: !3, line: 1683, type: !158)
!844 = !DILocation(line: 1683, column: 88, scope: !836)
!845 = !DILocalVariable(name: "layerdata", arg: 4, scope: !836, file: !3, line: 1683, type: !146)
!846 = !DILocation(line: 1683, column: 105, scope: !836)
!847 = !DILocalVariable(name: "totelem", arg: 5, scope: !836, file: !3, line: 1684, type: !158)
!848 = !DILocation(line: 1684, column: 60, scope: !836)
!849 = !DILocalVariable(name: "name", arg: 6, scope: !836, file: !3, line: 1684, type: !316)
!850 = !DILocation(line: 1684, column: 81, scope: !836)
!851 = !DILocalVariable(name: "typeInfo", scope: !836, file: !3, line: 1686, type: !788)
!852 = !DILocation(line: 1686, column: 23, scope: !836)
!853 = !DILocation(line: 1686, column: 52, scope: !836)
!854 = !DILocation(line: 1686, column: 34, scope: !836)
!855 = !DILocalVariable(name: "size", scope: !836, file: !3, line: 1687, type: !158)
!856 = !DILocation(line: 1687, column: 6, scope: !836)
!857 = !DILocation(line: 1687, column: 13, scope: !836)
!858 = !DILocation(line: 1687, column: 23, scope: !836)
!859 = !DILocation(line: 1687, column: 30, scope: !836)
!860 = !DILocation(line: 1687, column: 28, scope: !836)
!861 = !DILocalVariable(name: "flag", scope: !836, file: !3, line: 1687, type: !158)
!862 = !DILocation(line: 1687, column: 39, scope: !836)
!863 = !DILocalVariable(name: "index", scope: !836, file: !3, line: 1687, type: !158)
!864 = !DILocation(line: 1687, column: 49, scope: !836)
!865 = !DILocation(line: 1687, column: 57, scope: !836)
!866 = !DILocation(line: 1687, column: 63, scope: !836)
!867 = !DILocalVariable(name: "newlayerdata", scope: !836, file: !3, line: 1688, type: !146)
!868 = !DILocation(line: 1688, column: 8, scope: !836)
!869 = !DILocation(line: 1699, column: 7, scope: !870)
!870 = distinct !DILexicalBlock(scope: !836, file: !3, line: 1699, column: 6)
!871 = !DILocation(line: 1699, column: 17, scope: !870)
!872 = !DILocation(line: 1699, column: 29, scope: !870)
!873 = !DILocation(line: 1699, column: 53, scope: !870)
!874 = !DILocation(line: 1699, column: 59, scope: !870)
!875 = !DILocation(line: 1699, column: 32, scope: !870)
!876 = !DILocation(line: 1699, column: 6, scope: !836)
!877 = !DILocation(line: 1700, column: 11, scope: !870)
!878 = !DILocation(line: 1700, column: 17, scope: !870)
!879 = !DILocation(line: 1700, column: 51, scope: !870)
!880 = !DILocation(line: 1700, column: 57, scope: !870)
!881 = !DILocation(line: 1700, column: 24, scope: !870)
!882 = !DILocation(line: 1700, column: 3, scope: !870)
!883 = !DILocation(line: 1702, column: 7, scope: !884)
!884 = distinct !DILexicalBlock(scope: !836, file: !3, line: 1702, column: 6)
!885 = !DILocation(line: 1702, column: 17, scope: !884)
!886 = !DILocation(line: 1702, column: 31, scope: !884)
!887 = !DILocation(line: 1702, column: 35, scope: !884)
!888 = !DILocation(line: 1702, column: 45, scope: !884)
!889 = !DILocation(line: 1702, column: 6, scope: !836)
!890 = !DILocation(line: 1703, column: 18, scope: !891)
!891 = distinct !DILexicalBlock(scope: !884, file: !3, line: 1702, column: 63)
!892 = !DILocation(line: 1703, column: 16, scope: !891)
!893 = !DILocation(line: 1704, column: 2, scope: !891)
!894 = !DILocation(line: 1705, column: 11, scope: !895)
!895 = distinct !DILexicalBlock(scope: !884, file: !3, line: 1705, column: 11)
!896 = !DILocation(line: 1705, column: 16, scope: !895)
!897 = !DILocation(line: 1705, column: 11, scope: !884)
!898 = !DILocation(line: 1706, column: 18, scope: !899)
!899 = distinct !DILexicalBlock(scope: !895, file: !3, line: 1705, column: 21)
!900 = !DILocation(line: 1706, column: 30, scope: !899)
!901 = !DILocation(line: 1706, column: 54, scope: !899)
!902 = !DILocation(line: 1706, column: 36, scope: !899)
!903 = !DILocation(line: 1706, column: 16, scope: !899)
!904 = !DILocation(line: 1707, column: 8, scope: !905)
!905 = distinct !DILexicalBlock(scope: !899, file: !3, line: 1707, column: 7)
!906 = !DILocation(line: 1707, column: 7, scope: !899)
!907 = !DILocation(line: 1708, column: 4, scope: !905)
!908 = !DILocation(line: 1709, column: 2, scope: !899)
!909 = !DILocation(line: 1711, column: 6, scope: !910)
!910 = distinct !DILexicalBlock(scope: !836, file: !3, line: 1711, column: 6)
!911 = !DILocation(line: 1711, column: 16, scope: !910)
!912 = !DILocation(line: 1711, column: 32, scope: !910)
!913 = !DILocation(line: 1711, column: 35, scope: !910)
!914 = !DILocation(line: 1711, column: 6, scope: !836)
!915 = !DILocation(line: 1712, column: 7, scope: !916)
!916 = distinct !DILexicalBlock(scope: !917, file: !3, line: 1712, column: 7)
!917 = distinct !DILexicalBlock(scope: !910, file: !3, line: 1711, column: 46)
!918 = !DILocation(line: 1712, column: 17, scope: !916)
!919 = !DILocation(line: 1712, column: 7, scope: !917)
!920 = !DILocation(line: 1713, column: 4, scope: !916)
!921 = !DILocation(line: 1713, column: 14, scope: !916)
!922 = !DILocation(line: 1713, column: 19, scope: !916)
!923 = !DILocation(line: 1713, column: 30, scope: !916)
!924 = !DILocation(line: 1713, column: 44, scope: !916)
!925 = !DILocation(line: 1715, column: 11, scope: !916)
!926 = !DILocation(line: 1715, column: 25, scope: !916)
!927 = !DILocation(line: 1715, column: 36, scope: !916)
!928 = !DILocation(line: 1715, column: 4, scope: !916)
!929 = !DILocation(line: 1716, column: 2, scope: !917)
!930 = !DILocation(line: 1717, column: 11, scope: !931)
!931 = distinct !DILexicalBlock(scope: !910, file: !3, line: 1717, column: 11)
!932 = !DILocation(line: 1717, column: 21, scope: !931)
!933 = !DILocation(line: 1717, column: 11, scope: !910)
!934 = !DILocation(line: 1718, column: 7, scope: !935)
!935 = distinct !DILexicalBlock(scope: !936, file: !3, line: 1718, column: 7)
!936 = distinct !DILexicalBlock(scope: !931, file: !3, line: 1717, column: 36)
!937 = !DILocation(line: 1718, column: 17, scope: !935)
!938 = !DILocation(line: 1718, column: 7, scope: !936)
!939 = !DILocation(line: 1719, column: 4, scope: !935)
!940 = !DILocation(line: 1719, column: 14, scope: !935)
!941 = !DILocation(line: 1719, column: 34, scope: !935)
!942 = !DILocation(line: 1719, column: 48, scope: !935)
!943 = !DILocation(line: 1720, column: 2, scope: !936)
!944 = !DILocation(line: 1721, column: 11, scope: !945)
!945 = distinct !DILexicalBlock(scope: !931, file: !3, line: 1721, column: 11)
!946 = !DILocation(line: 1721, column: 21, scope: !945)
!947 = !DILocation(line: 1721, column: 11, scope: !931)
!948 = !DILocation(line: 1722, column: 8, scope: !945)
!949 = !DILocation(line: 1722, column: 3, scope: !945)
!950 = !DILocation(line: 1724, column: 6, scope: !951)
!951 = distinct !DILexicalBlock(scope: !836, file: !3, line: 1724, column: 6)
!952 = !DILocation(line: 1724, column: 15, scope: !951)
!953 = !DILocation(line: 1724, column: 21, scope: !951)
!954 = !DILocation(line: 1724, column: 12, scope: !951)
!955 = !DILocation(line: 1724, column: 6, scope: !836)
!956 = !DILocation(line: 1725, column: 26, scope: !957)
!957 = distinct !DILexicalBlock(scope: !958, file: !3, line: 1725, column: 7)
!958 = distinct !DILexicalBlock(scope: !951, file: !3, line: 1724, column: 31)
!959 = !DILocation(line: 1725, column: 8, scope: !957)
!960 = !DILocation(line: 1725, column: 7, scope: !958)
!961 = !DILocation(line: 1726, column: 8, scope: !962)
!962 = distinct !DILexicalBlock(scope: !963, file: !3, line: 1726, column: 8)
!963 = distinct !DILexicalBlock(scope: !957, file: !3, line: 1725, column: 50)
!964 = !DILocation(line: 1726, column: 24, scope: !962)
!965 = !DILocation(line: 1726, column: 21, scope: !962)
!966 = !DILocation(line: 1726, column: 8, scope: !963)
!967 = !DILocation(line: 1727, column: 5, scope: !962)
!968 = !DILocation(line: 1727, column: 15, scope: !962)
!969 = !DILocation(line: 1728, column: 4, scope: !963)
!970 = !DILocation(line: 1730, column: 2, scope: !958)
!971 = !DILocation(line: 1732, column: 2, scope: !836)
!972 = !DILocation(line: 1732, column: 8, scope: !836)
!973 = !DILocation(line: 1732, column: 16, scope: !836)
!974 = !DILocation(line: 1735, column: 2, scope: !836)
!975 = !DILocation(line: 1735, column: 9, scope: !976)
!976 = distinct !DILexicalBlock(scope: !977, file: !3, line: 1735, column: 2)
!977 = distinct !DILexicalBlock(scope: !836, file: !3, line: 1735, column: 2)
!978 = !DILocation(line: 1735, column: 15, scope: !976)
!979 = !DILocation(line: 1735, column: 19, scope: !976)
!980 = !DILocation(line: 1735, column: 22, scope: !976)
!981 = !DILocation(line: 1735, column: 28, scope: !976)
!982 = !DILocation(line: 1735, column: 35, scope: !976)
!983 = !DILocation(line: 1735, column: 41, scope: !976)
!984 = !DILocation(line: 1735, column: 46, scope: !976)
!985 = !DILocation(line: 1735, column: 53, scope: !976)
!986 = !DILocation(line: 1735, column: 51, scope: !976)
!987 = !DILocation(line: 0, scope: !976)
!988 = !DILocation(line: 1735, column: 2, scope: !977)
!989 = !DILocation(line: 1736, column: 3, scope: !976)
!990 = !DILocation(line: 1736, column: 9, scope: !976)
!991 = !DILocation(line: 1736, column: 16, scope: !976)
!992 = !DILocation(line: 1736, column: 25, scope: !976)
!993 = !DILocation(line: 1736, column: 31, scope: !976)
!994 = !DILocation(line: 1736, column: 38, scope: !976)
!995 = !DILocation(line: 1736, column: 44, scope: !976)
!996 = !DILocation(line: 1735, column: 59, scope: !976)
!997 = !DILocation(line: 1735, column: 2, scope: !976)
!998 = distinct !{!998, !988, !999}
!999 = !DILocation(line: 1736, column: 47, scope: !977)
!1000 = !DILocation(line: 1738, column: 29, scope: !836)
!1001 = !DILocation(line: 1738, column: 2, scope: !836)
!1002 = !DILocation(line: 1738, column: 8, scope: !836)
!1003 = !DILocation(line: 1738, column: 15, scope: !836)
!1004 = !DILocation(line: 1738, column: 22, scope: !836)
!1005 = !DILocation(line: 1738, column: 27, scope: !836)
!1006 = !DILocation(line: 1739, column: 29, scope: !836)
!1007 = !DILocation(line: 1739, column: 2, scope: !836)
!1008 = !DILocation(line: 1739, column: 8, scope: !836)
!1009 = !DILocation(line: 1739, column: 15, scope: !836)
!1010 = !DILocation(line: 1739, column: 22, scope: !836)
!1011 = !DILocation(line: 1739, column: 27, scope: !836)
!1012 = !DILocation(line: 1740, column: 29, scope: !836)
!1013 = !DILocation(line: 1740, column: 2, scope: !836)
!1014 = !DILocation(line: 1740, column: 8, scope: !836)
!1015 = !DILocation(line: 1740, column: 15, scope: !836)
!1016 = !DILocation(line: 1740, column: 22, scope: !836)
!1017 = !DILocation(line: 1740, column: 27, scope: !836)
!1018 = !DILocation(line: 1742, column: 6, scope: !1019)
!1019 = distinct !DILexicalBlock(scope: !836, file: !3, line: 1742, column: 6)
!1020 = !DILocation(line: 1742, column: 11, scope: !1019)
!1021 = !DILocation(line: 1742, column: 22, scope: !1019)
!1022 = !DILocation(line: 1742, column: 20, scope: !1019)
!1023 = !DILocation(line: 1742, column: 6, scope: !836)
!1024 = !DILocation(line: 1743, column: 15, scope: !1025)
!1025 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 1742, column: 53)
!1026 = !DILocation(line: 1743, column: 21, scope: !1025)
!1027 = !DILocation(line: 1743, column: 28, scope: !1025)
!1028 = !DILocation(line: 1743, column: 35, scope: !1025)
!1029 = !DILocation(line: 1743, column: 41, scope: !1025)
!1030 = !DILocation(line: 1743, column: 3, scope: !1025)
!1031 = !DILocation(line: 1744, column: 36, scope: !1025)
!1032 = !DILocation(line: 1744, column: 42, scope: !1025)
!1033 = !DILocation(line: 1744, column: 3, scope: !1025)
!1034 = !DILocation(line: 1745, column: 2, scope: !1025)
!1035 = !DILocation(line: 1747, column: 3, scope: !1019)
!1036 = !DILocation(line: 1747, column: 9, scope: !1019)
!1037 = !DILocation(line: 1747, column: 16, scope: !1019)
!1038 = !DILocation(line: 1747, column: 23, scope: !1019)
!1039 = !DILocation(line: 1747, column: 31, scope: !1019)
!1040 = !DILocation(line: 1749, column: 6, scope: !1041)
!1041 = distinct !DILexicalBlock(scope: !836, file: !3, line: 1749, column: 6)
!1042 = !DILocation(line: 1749, column: 12, scope: !1041)
!1043 = !DILocation(line: 1749, column: 16, scope: !1041)
!1044 = !DILocation(line: 1749, column: 19, scope: !1041)
!1045 = !DILocation(line: 1749, column: 25, scope: !1041)
!1046 = !DILocation(line: 1749, column: 32, scope: !1041)
!1047 = !DILocation(line: 1749, column: 38, scope: !1041)
!1048 = !DILocation(line: 1749, column: 43, scope: !1041)
!1049 = !DILocation(line: 1749, column: 51, scope: !1041)
!1050 = !DILocation(line: 1749, column: 48, scope: !1041)
!1051 = !DILocation(line: 1749, column: 6, scope: !836)
!1052 = !DILocation(line: 1750, column: 32, scope: !1053)
!1053 = distinct !DILexicalBlock(scope: !1041, file: !3, line: 1749, column: 57)
!1054 = !DILocation(line: 1750, column: 38, scope: !1053)
!1055 = !DILocation(line: 1750, column: 45, scope: !1053)
!1056 = !DILocation(line: 1750, column: 51, scope: !1053)
!1057 = !DILocation(line: 1750, column: 56, scope: !1053)
!1058 = !DILocation(line: 1750, column: 3, scope: !1053)
!1059 = !DILocation(line: 1750, column: 9, scope: !1053)
!1060 = !DILocation(line: 1750, column: 16, scope: !1053)
!1061 = !DILocation(line: 1750, column: 23, scope: !1053)
!1062 = !DILocation(line: 1750, column: 30, scope: !1053)
!1063 = !DILocation(line: 1751, column: 36, scope: !1053)
!1064 = !DILocation(line: 1751, column: 42, scope: !1053)
!1065 = !DILocation(line: 1751, column: 49, scope: !1053)
!1066 = !DILocation(line: 1751, column: 55, scope: !1053)
!1067 = !DILocation(line: 1751, column: 60, scope: !1053)
!1068 = !DILocation(line: 1751, column: 3, scope: !1053)
!1069 = !DILocation(line: 1751, column: 9, scope: !1053)
!1070 = !DILocation(line: 1751, column: 16, scope: !1053)
!1071 = !DILocation(line: 1751, column: 23, scope: !1053)
!1072 = !DILocation(line: 1751, column: 34, scope: !1053)
!1073 = !DILocation(line: 1752, column: 38, scope: !1053)
!1074 = !DILocation(line: 1752, column: 44, scope: !1053)
!1075 = !DILocation(line: 1752, column: 51, scope: !1053)
!1076 = !DILocation(line: 1752, column: 57, scope: !1053)
!1077 = !DILocation(line: 1752, column: 62, scope: !1053)
!1078 = !DILocation(line: 1752, column: 3, scope: !1053)
!1079 = !DILocation(line: 1752, column: 9, scope: !1053)
!1080 = !DILocation(line: 1752, column: 16, scope: !1053)
!1081 = !DILocation(line: 1752, column: 23, scope: !1053)
!1082 = !DILocation(line: 1752, column: 36, scope: !1053)
!1083 = !DILocation(line: 1753, column: 37, scope: !1053)
!1084 = !DILocation(line: 1753, column: 43, scope: !1053)
!1085 = !DILocation(line: 1753, column: 50, scope: !1053)
!1086 = !DILocation(line: 1753, column: 56, scope: !1053)
!1087 = !DILocation(line: 1753, column: 61, scope: !1053)
!1088 = !DILocation(line: 1753, column: 3, scope: !1053)
!1089 = !DILocation(line: 1753, column: 9, scope: !1053)
!1090 = !DILocation(line: 1753, column: 16, scope: !1053)
!1091 = !DILocation(line: 1753, column: 23, scope: !1053)
!1092 = !DILocation(line: 1753, column: 35, scope: !1053)
!1093 = !DILocation(line: 1754, column: 2, scope: !1053)
!1094 = !DILocation(line: 1756, column: 3, scope: !1095)
!1095 = distinct !DILexicalBlock(scope: !1041, file: !3, line: 1755, column: 7)
!1096 = !DILocation(line: 1756, column: 9, scope: !1095)
!1097 = !DILocation(line: 1756, column: 16, scope: !1095)
!1098 = !DILocation(line: 1756, column: 23, scope: !1095)
!1099 = !DILocation(line: 1756, column: 30, scope: !1095)
!1100 = !DILocation(line: 1757, column: 3, scope: !1095)
!1101 = !DILocation(line: 1757, column: 9, scope: !1095)
!1102 = !DILocation(line: 1757, column: 16, scope: !1095)
!1103 = !DILocation(line: 1757, column: 23, scope: !1095)
!1104 = !DILocation(line: 1757, column: 34, scope: !1095)
!1105 = !DILocation(line: 1758, column: 3, scope: !1095)
!1106 = !DILocation(line: 1758, column: 9, scope: !1095)
!1107 = !DILocation(line: 1758, column: 16, scope: !1095)
!1108 = !DILocation(line: 1758, column: 23, scope: !1095)
!1109 = !DILocation(line: 1758, column: 36, scope: !1095)
!1110 = !DILocation(line: 1759, column: 3, scope: !1095)
!1111 = !DILocation(line: 1759, column: 9, scope: !1095)
!1112 = !DILocation(line: 1759, column: 16, scope: !1095)
!1113 = !DILocation(line: 1759, column: 23, scope: !1095)
!1114 = !DILocation(line: 1759, column: 35, scope: !1095)
!1115 = !DILocation(line: 1762, column: 28, scope: !836)
!1116 = !DILocation(line: 1762, column: 2, scope: !836)
!1117 = !DILocation(line: 1764, column: 10, scope: !836)
!1118 = !DILocation(line: 1764, column: 16, scope: !836)
!1119 = !DILocation(line: 1764, column: 23, scope: !836)
!1120 = !DILocation(line: 1764, column: 2, scope: !836)
!1121 = !DILocation(line: 1765, column: 1, scope: !836)
!1122 = distinct !DISubprogram(name: "CustomData_copy", scope: !3, file: !3, line: 1402, type: !1123, scopeLine: 1404, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{null, !592, !594, !140, !158, !158}
!1125 = !DILocalVariable(name: "source", arg: 1, scope: !1122, file: !3, line: 1402, type: !592)
!1126 = !DILocation(line: 1402, column: 47, scope: !1122)
!1127 = !DILocalVariable(name: "dest", arg: 2, scope: !1122, file: !3, line: 1402, type: !594)
!1128 = !DILocation(line: 1402, column: 74, scope: !1122)
!1129 = !DILocalVariable(name: "mask", arg: 3, scope: !1122, file: !3, line: 1403, type: !140)
!1130 = !DILocation(line: 1403, column: 37, scope: !1122)
!1131 = !DILocalVariable(name: "alloctype", arg: 4, scope: !1122, file: !3, line: 1403, type: !158)
!1132 = !DILocation(line: 1403, column: 47, scope: !1122)
!1133 = !DILocalVariable(name: "totelem", arg: 5, scope: !1122, file: !3, line: 1403, type: !158)
!1134 = !DILocation(line: 1403, column: 62, scope: !1122)
!1135 = !DILocation(line: 1405, column: 19, scope: !1122)
!1136 = !DILocation(line: 1405, column: 2, scope: !1122)
!1137 = !DILocation(line: 1407, column: 6, scope: !1138)
!1138 = distinct !DILexicalBlock(scope: !1122, file: !3, line: 1407, column: 6)
!1139 = !DILocation(line: 1407, column: 14, scope: !1138)
!1140 = !DILocation(line: 1407, column: 6, scope: !1122)
!1141 = !DILocation(line: 1408, column: 20, scope: !1138)
!1142 = !DILocation(line: 1408, column: 34, scope: !1138)
!1143 = !DILocation(line: 1408, column: 42, scope: !1138)
!1144 = !DILocation(line: 1408, column: 3, scope: !1138)
!1145 = !DILocation(line: 1408, column: 9, scope: !1138)
!1146 = !DILocation(line: 1408, column: 18, scope: !1138)
!1147 = !DILocation(line: 1410, column: 19, scope: !1122)
!1148 = !DILocation(line: 1410, column: 27, scope: !1122)
!1149 = !DILocation(line: 1410, column: 33, scope: !1122)
!1150 = !DILocation(line: 1410, column: 39, scope: !1122)
!1151 = !DILocation(line: 1410, column: 50, scope: !1122)
!1152 = !DILocation(line: 1410, column: 2, scope: !1122)
!1153 = !DILocation(line: 1411, column: 1, scope: !1122)
!1154 = distinct !DISubprogram(name: "CustomData_reset", scope: !3, file: !3, line: 1436, type: !486, scopeLine: 1437, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1155 = !DILocalVariable(name: "data", arg: 1, scope: !1154, file: !3, line: 1436, type: !488)
!1156 = !DILocation(line: 1436, column: 35, scope: !1154)
!1157 = !DILocation(line: 1438, column: 9, scope: !1154)
!1158 = !DILocation(line: 1438, column: 2, scope: !1154)
!1159 = !DILocation(line: 1439, column: 12, scope: !1154)
!1160 = !DILocation(line: 1439, column: 18, scope: !1154)
!1161 = !DILocation(line: 1439, column: 2, scope: !1154)
!1162 = !DILocation(line: 1440, column: 1, scope: !1154)
!1163 = distinct !DISubprogram(name: "CustomData_free", scope: !3, file: !3, line: 1442, type: !1164, scopeLine: 1443, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1164 = !DISubroutineType(types: !1165)
!1165 = !{null, !488, !158}
!1166 = !DILocalVariable(name: "data", arg: 1, scope: !1163, file: !3, line: 1442, type: !488)
!1167 = !DILocation(line: 1442, column: 34, scope: !1163)
!1168 = !DILocalVariable(name: "totelem", arg: 2, scope: !1163, file: !3, line: 1442, type: !158)
!1169 = !DILocation(line: 1442, column: 44, scope: !1163)
!1170 = !DILocalVariable(name: "i", scope: !1163, file: !3, line: 1444, type: !158)
!1171 = !DILocation(line: 1444, column: 6, scope: !1163)
!1172 = !DILocation(line: 1446, column: 9, scope: !1173)
!1173 = distinct !DILexicalBlock(scope: !1163, file: !3, line: 1446, column: 2)
!1174 = !DILocation(line: 1446, column: 7, scope: !1173)
!1175 = !DILocation(line: 1446, column: 14, scope: !1176)
!1176 = distinct !DILexicalBlock(scope: !1173, file: !3, line: 1446, column: 2)
!1177 = !DILocation(line: 1446, column: 18, scope: !1176)
!1178 = !DILocation(line: 1446, column: 24, scope: !1176)
!1179 = !DILocation(line: 1446, column: 16, scope: !1176)
!1180 = !DILocation(line: 1446, column: 2, scope: !1173)
!1181 = !DILocation(line: 1447, column: 36, scope: !1176)
!1182 = !DILocation(line: 1447, column: 42, scope: !1176)
!1183 = !DILocation(line: 1447, column: 49, scope: !1176)
!1184 = !DILocation(line: 1447, column: 53, scope: !1176)
!1185 = !DILocation(line: 1447, column: 3, scope: !1176)
!1186 = !DILocation(line: 1446, column: 34, scope: !1176)
!1187 = !DILocation(line: 1446, column: 2, scope: !1176)
!1188 = distinct !{!1188, !1180, !1189}
!1189 = !DILocation(line: 1447, column: 60, scope: !1173)
!1190 = !DILocation(line: 1449, column: 6, scope: !1191)
!1191 = distinct !DILexicalBlock(scope: !1163, file: !3, line: 1449, column: 6)
!1192 = !DILocation(line: 1449, column: 12, scope: !1191)
!1193 = !DILocation(line: 1449, column: 6, scope: !1163)
!1194 = !DILocation(line: 1450, column: 3, scope: !1191)
!1195 = !DILocation(line: 1450, column: 13, scope: !1191)
!1196 = !DILocation(line: 1450, column: 19, scope: !1191)
!1197 = !DILocation(line: 1452, column: 27, scope: !1163)
!1198 = !DILocation(line: 1452, column: 2, scope: !1163)
!1199 = !DILocation(line: 1453, column: 19, scope: !1163)
!1200 = !DILocation(line: 1453, column: 2, scope: !1163)
!1201 = !DILocation(line: 1454, column: 1, scope: !1163)
!1202 = distinct !DISubprogram(name: "customData_free_layer__internal", scope: !3, file: !3, line: 1413, type: !1203, scopeLine: 1414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1203 = !DISubroutineType(types: !1204)
!1204 = !{null, !493, !158}
!1205 = !DILocalVariable(name: "layer", arg: 1, scope: !1202, file: !3, line: 1413, type: !493)
!1206 = !DILocation(line: 1413, column: 62, scope: !1202)
!1207 = !DILocalVariable(name: "totelem", arg: 2, scope: !1202, file: !3, line: 1413, type: !158)
!1208 = !DILocation(line: 1413, column: 73, scope: !1202)
!1209 = !DILocalVariable(name: "typeInfo", scope: !1202, file: !3, line: 1415, type: !788)
!1210 = !DILocation(line: 1415, column: 23, scope: !1202)
!1211 = !DILocation(line: 1417, column: 8, scope: !1212)
!1212 = distinct !DILexicalBlock(scope: !1202, file: !3, line: 1417, column: 6)
!1213 = !DILocation(line: 1417, column: 15, scope: !1212)
!1214 = !DILocation(line: 1417, column: 20, scope: !1212)
!1215 = !DILocation(line: 1417, column: 38, scope: !1212)
!1216 = !DILocation(line: 1417, column: 41, scope: !1212)
!1217 = !DILocation(line: 1417, column: 48, scope: !1212)
!1218 = !DILocation(line: 1417, column: 6, scope: !1202)
!1219 = !DILocation(line: 1418, column: 32, scope: !1220)
!1220 = distinct !DILexicalBlock(scope: !1212, file: !3, line: 1417, column: 54)
!1221 = !DILocation(line: 1418, column: 39, scope: !1220)
!1222 = !DILocation(line: 1418, column: 14, scope: !1220)
!1223 = !DILocation(line: 1418, column: 12, scope: !1220)
!1224 = !DILocation(line: 1420, column: 7, scope: !1225)
!1225 = distinct !DILexicalBlock(scope: !1220, file: !3, line: 1420, column: 7)
!1226 = !DILocation(line: 1420, column: 17, scope: !1225)
!1227 = !DILocation(line: 1420, column: 7, scope: !1220)
!1228 = !DILocation(line: 1421, column: 4, scope: !1225)
!1229 = !DILocation(line: 1421, column: 14, scope: !1225)
!1230 = !DILocation(line: 1421, column: 19, scope: !1225)
!1231 = !DILocation(line: 1421, column: 26, scope: !1225)
!1232 = !DILocation(line: 1421, column: 32, scope: !1225)
!1233 = !DILocation(line: 1421, column: 41, scope: !1225)
!1234 = !DILocation(line: 1421, column: 51, scope: !1225)
!1235 = !DILocation(line: 1423, column: 7, scope: !1236)
!1236 = distinct !DILexicalBlock(scope: !1220, file: !3, line: 1423, column: 7)
!1237 = !DILocation(line: 1423, column: 14, scope: !1236)
!1238 = !DILocation(line: 1423, column: 7, scope: !1220)
!1239 = !DILocation(line: 1424, column: 4, scope: !1236)
!1240 = !DILocation(line: 1424, column: 14, scope: !1236)
!1241 = !DILocation(line: 1424, column: 21, scope: !1236)
!1242 = !DILocation(line: 1425, column: 2, scope: !1220)
!1243 = !DILocation(line: 1426, column: 1, scope: !1202)
!1244 = distinct !DISubprogram(name: "CustomData_external_free", scope: !3, file: !3, line: 1428, type: !486, scopeLine: 1429, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1245 = !DILocalVariable(name: "data", arg: 1, scope: !1244, file: !3, line: 1428, type: !488)
!1246 = !DILocation(line: 1428, column: 50, scope: !1244)
!1247 = !DILocation(line: 1430, column: 6, scope: !1248)
!1248 = distinct !DILexicalBlock(scope: !1244, file: !3, line: 1430, column: 6)
!1249 = !DILocation(line: 1430, column: 12, scope: !1248)
!1250 = !DILocation(line: 1430, column: 6, scope: !1244)
!1251 = !DILocation(line: 1431, column: 3, scope: !1252)
!1252 = distinct !DILexicalBlock(scope: !1248, file: !3, line: 1430, column: 22)
!1253 = !DILocation(line: 1431, column: 13, scope: !1252)
!1254 = !DILocation(line: 1431, column: 19, scope: !1252)
!1255 = !DILocation(line: 1432, column: 3, scope: !1252)
!1256 = !DILocation(line: 1432, column: 9, scope: !1252)
!1257 = !DILocation(line: 1432, column: 18, scope: !1252)
!1258 = !DILocation(line: 1433, column: 2, scope: !1252)
!1259 = !DILocation(line: 1434, column: 1, scope: !1244)
!1260 = distinct !DISubprogram(name: "CustomData_get_layer_index", scope: !3, file: !3, line: 1487, type: !1261, scopeLine: 1488, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1261 = !DISubroutineType(types: !1262)
!1262 = !{!158, !1263, !158}
!1263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1264, size: 64)
!1264 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !489)
!1265 = !DILocalVariable(name: "data", arg: 1, scope: !1260, file: !3, line: 1487, type: !1263)
!1266 = !DILocation(line: 1487, column: 50, scope: !1260)
!1267 = !DILocalVariable(name: "type", arg: 2, scope: !1260, file: !3, line: 1487, type: !158)
!1268 = !DILocation(line: 1487, column: 60, scope: !1260)
!1269 = !DILocation(line: 1490, column: 9, scope: !1260)
!1270 = !DILocation(line: 1490, column: 15, scope: !1260)
!1271 = !DILocation(line: 1490, column: 23, scope: !1260)
!1272 = !DILocation(line: 1490, column: 2, scope: !1260)
!1273 = distinct !DISubprogram(name: "CustomData_get_layer_index_n", scope: !3, file: !3, line: 1493, type: !1274, scopeLine: 1494, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1274 = !DISubroutineType(types: !1275)
!1275 = !{!158, !592, !158, !158}
!1276 = !DILocalVariable(name: "data", arg: 1, scope: !1273, file: !3, line: 1493, type: !592)
!1277 = !DILocation(line: 1493, column: 59, scope: !1273)
!1278 = !DILocalVariable(name: "type", arg: 2, scope: !1273, file: !3, line: 1493, type: !158)
!1279 = !DILocation(line: 1493, column: 69, scope: !1273)
!1280 = !DILocalVariable(name: "n", arg: 3, scope: !1273, file: !3, line: 1493, type: !158)
!1281 = !DILocation(line: 1493, column: 79, scope: !1273)
!1282 = !DILocalVariable(name: "i", scope: !1273, file: !3, line: 1495, type: !158)
!1283 = !DILocation(line: 1495, column: 6, scope: !1273)
!1284 = !DILocation(line: 1495, column: 37, scope: !1273)
!1285 = !DILocation(line: 1495, column: 43, scope: !1273)
!1286 = !DILocation(line: 1495, column: 10, scope: !1273)
!1287 = !DILocation(line: 1497, column: 6, scope: !1288)
!1288 = distinct !DILexicalBlock(scope: !1273, file: !3, line: 1497, column: 6)
!1289 = !DILocation(line: 1497, column: 8, scope: !1288)
!1290 = !DILocation(line: 1497, column: 6, scope: !1273)
!1291 = !DILocation(line: 1499, column: 8, scope: !1292)
!1292 = distinct !DILexicalBlock(scope: !1288, file: !3, line: 1497, column: 15)
!1293 = !DILocation(line: 1499, column: 14, scope: !1292)
!1294 = !DILocation(line: 1499, column: 21, scope: !1292)
!1295 = !DILocation(line: 1499, column: 25, scope: !1292)
!1296 = !DILocation(line: 1499, column: 23, scope: !1292)
!1297 = !DILocation(line: 1499, column: 28, scope: !1292)
!1298 = !DILocation(line: 1499, column: 36, scope: !1292)
!1299 = !DILocation(line: 1499, column: 33, scope: !1292)
!1300 = !DILocation(line: 1499, column: 7, scope: !1292)
!1301 = !DILocation(line: 1499, column: 45, scope: !1292)
!1302 = !DILocation(line: 1499, column: 49, scope: !1292)
!1303 = !DILocation(line: 1499, column: 47, scope: !1292)
!1304 = !DILocation(line: 1499, column: 5, scope: !1292)
!1305 = !DILocation(line: 1500, column: 2, scope: !1292)
!1306 = !DILocation(line: 1502, column: 9, scope: !1273)
!1307 = !DILocation(line: 1502, column: 2, scope: !1273)
!1308 = distinct !DISubprogram(name: "CustomData_get_named_layer_index", scope: !3, file: !3, line: 1505, type: !1309, scopeLine: 1506, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1309 = !DISubroutineType(types: !1310)
!1310 = !{!158, !1263, !158, !316}
!1311 = !DILocalVariable(name: "data", arg: 1, scope: !1308, file: !3, line: 1505, type: !1263)
!1312 = !DILocation(line: 1505, column: 56, scope: !1308)
!1313 = !DILocalVariable(name: "type", arg: 2, scope: !1308, file: !3, line: 1505, type: !158)
!1314 = !DILocation(line: 1505, column: 66, scope: !1308)
!1315 = !DILocalVariable(name: "name", arg: 3, scope: !1308, file: !3, line: 1505, type: !316)
!1316 = !DILocation(line: 1505, column: 84, scope: !1308)
!1317 = !DILocalVariable(name: "i", scope: !1308, file: !3, line: 1507, type: !158)
!1318 = !DILocation(line: 1507, column: 6, scope: !1308)
!1319 = !DILocation(line: 1509, column: 9, scope: !1320)
!1320 = distinct !DILexicalBlock(scope: !1308, file: !3, line: 1509, column: 2)
!1321 = !DILocation(line: 1509, column: 7, scope: !1320)
!1322 = !DILocation(line: 1509, column: 14, scope: !1323)
!1323 = distinct !DILexicalBlock(scope: !1320, file: !3, line: 1509, column: 2)
!1324 = !DILocation(line: 1509, column: 18, scope: !1323)
!1325 = !DILocation(line: 1509, column: 24, scope: !1323)
!1326 = !DILocation(line: 1509, column: 16, scope: !1323)
!1327 = !DILocation(line: 1509, column: 2, scope: !1320)
!1328 = !DILocation(line: 1510, column: 7, scope: !1329)
!1329 = distinct !DILexicalBlock(scope: !1323, file: !3, line: 1510, column: 7)
!1330 = !DILocation(line: 1510, column: 13, scope: !1329)
!1331 = !DILocation(line: 1510, column: 20, scope: !1329)
!1332 = !DILocation(line: 1510, column: 23, scope: !1329)
!1333 = !DILocation(line: 1510, column: 31, scope: !1329)
!1334 = !DILocation(line: 1510, column: 28, scope: !1329)
!1335 = !DILocation(line: 1510, column: 7, scope: !1323)
!1336 = !DILocation(line: 1511, column: 15, scope: !1337)
!1337 = distinct !DILexicalBlock(scope: !1329, file: !3, line: 1511, column: 8)
!1338 = !DILocation(line: 1511, column: 21, scope: !1337)
!1339 = !DILocation(line: 1511, column: 28, scope: !1337)
!1340 = !DILocation(line: 1511, column: 31, scope: !1337)
!1341 = !DILocation(line: 1511, column: 37, scope: !1337)
!1342 = !DILocation(line: 1511, column: 8, scope: !1337)
!1343 = !DILocation(line: 1511, column: 43, scope: !1337)
!1344 = !DILocation(line: 1511, column: 8, scope: !1329)
!1345 = !DILocation(line: 1512, column: 12, scope: !1337)
!1346 = !DILocation(line: 1512, column: 5, scope: !1337)
!1347 = !DILocation(line: 1511, column: 46, scope: !1337)
!1348 = !DILocation(line: 1509, column: 34, scope: !1323)
!1349 = !DILocation(line: 1509, column: 2, scope: !1323)
!1350 = distinct !{!1350, !1327, !1351}
!1351 = !DILocation(line: 1512, column: 12, scope: !1320)
!1352 = !DILocation(line: 1514, column: 2, scope: !1308)
!1353 = !DILocation(line: 1515, column: 1, scope: !1308)
!1354 = distinct !DISubprogram(name: "CustomData_get_active_layer_index", scope: !3, file: !3, line: 1517, type: !1261, scopeLine: 1518, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1355 = !DILocalVariable(name: "data", arg: 1, scope: !1354, file: !3, line: 1517, type: !1263)
!1356 = !DILocation(line: 1517, column: 57, scope: !1354)
!1357 = !DILocalVariable(name: "type", arg: 2, scope: !1354, file: !3, line: 1517, type: !158)
!1358 = !DILocation(line: 1517, column: 67, scope: !1354)
!1359 = !DILocalVariable(name: "layer_index", scope: !1354, file: !3, line: 1519, type: !352)
!1360 = !DILocation(line: 1519, column: 12, scope: !1354)
!1361 = !DILocation(line: 1519, column: 26, scope: !1354)
!1362 = !DILocation(line: 1519, column: 32, scope: !1354)
!1363 = !DILocation(line: 1519, column: 40, scope: !1354)
!1364 = !DILocation(line: 1521, column: 10, scope: !1354)
!1365 = !DILocation(line: 1521, column: 22, scope: !1354)
!1366 = !DILocation(line: 1521, column: 9, scope: !1354)
!1367 = !DILocation(line: 1521, column: 31, scope: !1354)
!1368 = !DILocation(line: 1521, column: 45, scope: !1354)
!1369 = !DILocation(line: 1521, column: 51, scope: !1354)
!1370 = !DILocation(line: 1521, column: 58, scope: !1354)
!1371 = !DILocation(line: 1521, column: 71, scope: !1354)
!1372 = !DILocation(line: 1521, column: 43, scope: !1354)
!1373 = !DILocation(line: 1521, column: 2, scope: !1354)
!1374 = distinct !DISubprogram(name: "CustomData_get_render_layer_index", scope: !3, file: !3, line: 1524, type: !1261, scopeLine: 1525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1375 = !DILocalVariable(name: "data", arg: 1, scope: !1374, file: !3, line: 1524, type: !1263)
!1376 = !DILocation(line: 1524, column: 57, scope: !1374)
!1377 = !DILocalVariable(name: "type", arg: 2, scope: !1374, file: !3, line: 1524, type: !158)
!1378 = !DILocation(line: 1524, column: 67, scope: !1374)
!1379 = !DILocalVariable(name: "layer_index", scope: !1374, file: !3, line: 1526, type: !352)
!1380 = !DILocation(line: 1526, column: 12, scope: !1374)
!1381 = !DILocation(line: 1526, column: 26, scope: !1374)
!1382 = !DILocation(line: 1526, column: 32, scope: !1374)
!1383 = !DILocation(line: 1526, column: 40, scope: !1374)
!1384 = !DILocation(line: 1528, column: 10, scope: !1374)
!1385 = !DILocation(line: 1528, column: 22, scope: !1374)
!1386 = !DILocation(line: 1528, column: 9, scope: !1374)
!1387 = !DILocation(line: 1528, column: 31, scope: !1374)
!1388 = !DILocation(line: 1528, column: 45, scope: !1374)
!1389 = !DILocation(line: 1528, column: 51, scope: !1374)
!1390 = !DILocation(line: 1528, column: 58, scope: !1374)
!1391 = !DILocation(line: 1528, column: 71, scope: !1374)
!1392 = !DILocation(line: 1528, column: 43, scope: !1374)
!1393 = !DILocation(line: 1528, column: 2, scope: !1374)
!1394 = distinct !DISubprogram(name: "CustomData_get_clone_layer_index", scope: !3, file: !3, line: 1531, type: !1261, scopeLine: 1532, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1395 = !DILocalVariable(name: "data", arg: 1, scope: !1394, file: !3, line: 1531, type: !1263)
!1396 = !DILocation(line: 1531, column: 56, scope: !1394)
!1397 = !DILocalVariable(name: "type", arg: 2, scope: !1394, file: !3, line: 1531, type: !158)
!1398 = !DILocation(line: 1531, column: 66, scope: !1394)
!1399 = !DILocalVariable(name: "layer_index", scope: !1394, file: !3, line: 1533, type: !352)
!1400 = !DILocation(line: 1533, column: 12, scope: !1394)
!1401 = !DILocation(line: 1533, column: 26, scope: !1394)
!1402 = !DILocation(line: 1533, column: 32, scope: !1394)
!1403 = !DILocation(line: 1533, column: 40, scope: !1394)
!1404 = !DILocation(line: 1535, column: 10, scope: !1394)
!1405 = !DILocation(line: 1535, column: 22, scope: !1394)
!1406 = !DILocation(line: 1535, column: 9, scope: !1394)
!1407 = !DILocation(line: 1535, column: 31, scope: !1394)
!1408 = !DILocation(line: 1535, column: 45, scope: !1394)
!1409 = !DILocation(line: 1535, column: 51, scope: !1394)
!1410 = !DILocation(line: 1535, column: 58, scope: !1394)
!1411 = !DILocation(line: 1535, column: 71, scope: !1394)
!1412 = !DILocation(line: 1535, column: 43, scope: !1394)
!1413 = !DILocation(line: 1535, column: 2, scope: !1394)
!1414 = distinct !DISubprogram(name: "CustomData_get_stencil_layer_index", scope: !3, file: !3, line: 1538, type: !1261, scopeLine: 1539, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1415 = !DILocalVariable(name: "data", arg: 1, scope: !1414, file: !3, line: 1538, type: !1263)
!1416 = !DILocation(line: 1538, column: 58, scope: !1414)
!1417 = !DILocalVariable(name: "type", arg: 2, scope: !1414, file: !3, line: 1538, type: !158)
!1418 = !DILocation(line: 1538, column: 68, scope: !1414)
!1419 = !DILocalVariable(name: "layer_index", scope: !1414, file: !3, line: 1540, type: !352)
!1420 = !DILocation(line: 1540, column: 12, scope: !1414)
!1421 = !DILocation(line: 1540, column: 26, scope: !1414)
!1422 = !DILocation(line: 1540, column: 32, scope: !1414)
!1423 = !DILocation(line: 1540, column: 40, scope: !1414)
!1424 = !DILocation(line: 1542, column: 10, scope: !1414)
!1425 = !DILocation(line: 1542, column: 22, scope: !1414)
!1426 = !DILocation(line: 1542, column: 9, scope: !1414)
!1427 = !DILocation(line: 1542, column: 31, scope: !1414)
!1428 = !DILocation(line: 1542, column: 45, scope: !1414)
!1429 = !DILocation(line: 1542, column: 51, scope: !1414)
!1430 = !DILocation(line: 1542, column: 58, scope: !1414)
!1431 = !DILocation(line: 1542, column: 71, scope: !1414)
!1432 = !DILocation(line: 1542, column: 43, scope: !1414)
!1433 = !DILocation(line: 1542, column: 2, scope: !1414)
!1434 = distinct !DISubprogram(name: "CustomData_get_named_layer", scope: !3, file: !3, line: 1549, type: !1435, scopeLine: 1550, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1435 = !DISubroutineType(types: !1436)
!1436 = !{!158, !592, !158, !316}
!1437 = !DILocalVariable(name: "data", arg: 1, scope: !1434, file: !3, line: 1549, type: !592)
!1438 = !DILocation(line: 1549, column: 57, scope: !1434)
!1439 = !DILocalVariable(name: "type", arg: 2, scope: !1434, file: !3, line: 1549, type: !158)
!1440 = !DILocation(line: 1549, column: 67, scope: !1434)
!1441 = !DILocalVariable(name: "name", arg: 3, scope: !1434, file: !3, line: 1549, type: !316)
!1442 = !DILocation(line: 1549, column: 85, scope: !1434)
!1443 = !DILocalVariable(name: "named_index", scope: !1434, file: !3, line: 1551, type: !352)
!1444 = !DILocation(line: 1551, column: 12, scope: !1434)
!1445 = !DILocation(line: 1551, column: 59, scope: !1434)
!1446 = !DILocation(line: 1551, column: 65, scope: !1434)
!1447 = !DILocation(line: 1551, column: 71, scope: !1434)
!1448 = !DILocation(line: 1551, column: 26, scope: !1434)
!1449 = !DILocalVariable(name: "layer_index", scope: !1434, file: !3, line: 1552, type: !352)
!1450 = !DILocation(line: 1552, column: 12, scope: !1434)
!1451 = !DILocation(line: 1552, column: 26, scope: !1434)
!1452 = !DILocation(line: 1552, column: 32, scope: !1434)
!1453 = !DILocation(line: 1552, column: 40, scope: !1434)
!1454 = !DILocation(line: 1554, column: 10, scope: !1434)
!1455 = !DILocation(line: 1554, column: 22, scope: !1434)
!1456 = !DILocation(line: 1554, column: 9, scope: !1434)
!1457 = !DILocation(line: 1554, column: 31, scope: !1434)
!1458 = !DILocation(line: 1554, column: 45, scope: !1434)
!1459 = !DILocation(line: 1554, column: 43, scope: !1434)
!1460 = !DILocation(line: 1554, column: 2, scope: !1434)
!1461 = distinct !DISubprogram(name: "CustomData_get_active_layer", scope: !3, file: !3, line: 1557, type: !1261, scopeLine: 1558, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1462 = !DILocalVariable(name: "data", arg: 1, scope: !1461, file: !3, line: 1557, type: !1263)
!1463 = !DILocation(line: 1557, column: 51, scope: !1461)
!1464 = !DILocalVariable(name: "type", arg: 2, scope: !1461, file: !3, line: 1557, type: !158)
!1465 = !DILocation(line: 1557, column: 61, scope: !1461)
!1466 = !DILocalVariable(name: "layer_index", scope: !1461, file: !3, line: 1559, type: !352)
!1467 = !DILocation(line: 1559, column: 12, scope: !1461)
!1468 = !DILocation(line: 1559, column: 26, scope: !1461)
!1469 = !DILocation(line: 1559, column: 32, scope: !1461)
!1470 = !DILocation(line: 1559, column: 40, scope: !1461)
!1471 = !DILocation(line: 1561, column: 10, scope: !1461)
!1472 = !DILocation(line: 1561, column: 22, scope: !1461)
!1473 = !DILocation(line: 1561, column: 9, scope: !1461)
!1474 = !DILocation(line: 1561, column: 31, scope: !1461)
!1475 = !DILocation(line: 1561, column: 37, scope: !1461)
!1476 = !DILocation(line: 1561, column: 44, scope: !1461)
!1477 = !DILocation(line: 1561, column: 57, scope: !1461)
!1478 = !DILocation(line: 1561, column: 2, scope: !1461)
!1479 = distinct !DISubprogram(name: "CustomData_get_render_layer", scope: !3, file: !3, line: 1564, type: !1261, scopeLine: 1565, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1480 = !DILocalVariable(name: "data", arg: 1, scope: !1479, file: !3, line: 1564, type: !1263)
!1481 = !DILocation(line: 1564, column: 51, scope: !1479)
!1482 = !DILocalVariable(name: "type", arg: 2, scope: !1479, file: !3, line: 1564, type: !158)
!1483 = !DILocation(line: 1564, column: 61, scope: !1479)
!1484 = !DILocalVariable(name: "layer_index", scope: !1479, file: !3, line: 1566, type: !352)
!1485 = !DILocation(line: 1566, column: 12, scope: !1479)
!1486 = !DILocation(line: 1566, column: 26, scope: !1479)
!1487 = !DILocation(line: 1566, column: 32, scope: !1479)
!1488 = !DILocation(line: 1566, column: 40, scope: !1479)
!1489 = !DILocation(line: 1568, column: 10, scope: !1479)
!1490 = !DILocation(line: 1568, column: 22, scope: !1479)
!1491 = !DILocation(line: 1568, column: 9, scope: !1479)
!1492 = !DILocation(line: 1568, column: 31, scope: !1479)
!1493 = !DILocation(line: 1568, column: 37, scope: !1479)
!1494 = !DILocation(line: 1568, column: 44, scope: !1479)
!1495 = !DILocation(line: 1568, column: 57, scope: !1479)
!1496 = !DILocation(line: 1568, column: 2, scope: !1479)
!1497 = distinct !DISubprogram(name: "CustomData_get_clone_layer", scope: !3, file: !3, line: 1571, type: !1261, scopeLine: 1572, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1498 = !DILocalVariable(name: "data", arg: 1, scope: !1497, file: !3, line: 1571, type: !1263)
!1499 = !DILocation(line: 1571, column: 50, scope: !1497)
!1500 = !DILocalVariable(name: "type", arg: 2, scope: !1497, file: !3, line: 1571, type: !158)
!1501 = !DILocation(line: 1571, column: 60, scope: !1497)
!1502 = !DILocalVariable(name: "layer_index", scope: !1497, file: !3, line: 1573, type: !352)
!1503 = !DILocation(line: 1573, column: 12, scope: !1497)
!1504 = !DILocation(line: 1573, column: 26, scope: !1497)
!1505 = !DILocation(line: 1573, column: 32, scope: !1497)
!1506 = !DILocation(line: 1573, column: 40, scope: !1497)
!1507 = !DILocation(line: 1575, column: 10, scope: !1497)
!1508 = !DILocation(line: 1575, column: 22, scope: !1497)
!1509 = !DILocation(line: 1575, column: 9, scope: !1497)
!1510 = !DILocation(line: 1575, column: 31, scope: !1497)
!1511 = !DILocation(line: 1575, column: 37, scope: !1497)
!1512 = !DILocation(line: 1575, column: 44, scope: !1497)
!1513 = !DILocation(line: 1575, column: 57, scope: !1497)
!1514 = !DILocation(line: 1575, column: 2, scope: !1497)
!1515 = distinct !DISubprogram(name: "CustomData_get_stencil_layer", scope: !3, file: !3, line: 1578, type: !1261, scopeLine: 1579, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1516 = !DILocalVariable(name: "data", arg: 1, scope: !1515, file: !3, line: 1578, type: !1263)
!1517 = !DILocation(line: 1578, column: 52, scope: !1515)
!1518 = !DILocalVariable(name: "type", arg: 2, scope: !1515, file: !3, line: 1578, type: !158)
!1519 = !DILocation(line: 1578, column: 62, scope: !1515)
!1520 = !DILocalVariable(name: "layer_index", scope: !1515, file: !3, line: 1580, type: !352)
!1521 = !DILocation(line: 1580, column: 12, scope: !1515)
!1522 = !DILocation(line: 1580, column: 26, scope: !1515)
!1523 = !DILocation(line: 1580, column: 32, scope: !1515)
!1524 = !DILocation(line: 1580, column: 40, scope: !1515)
!1525 = !DILocation(line: 1582, column: 10, scope: !1515)
!1526 = !DILocation(line: 1582, column: 22, scope: !1515)
!1527 = !DILocation(line: 1582, column: 9, scope: !1515)
!1528 = !DILocation(line: 1582, column: 31, scope: !1515)
!1529 = !DILocation(line: 1582, column: 37, scope: !1515)
!1530 = !DILocation(line: 1582, column: 44, scope: !1515)
!1531 = !DILocation(line: 1582, column: 57, scope: !1515)
!1532 = !DILocation(line: 1582, column: 2, scope: !1515)
!1533 = distinct !DISubprogram(name: "CustomData_set_layer_active", scope: !3, file: !3, line: 1585, type: !1534, scopeLine: 1586, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1534 = !DISubroutineType(types: !1535)
!1535 = !{null, !488, !158, !158}
!1536 = !DILocalVariable(name: "data", arg: 1, scope: !1533, file: !3, line: 1585, type: !488)
!1537 = !DILocation(line: 1585, column: 46, scope: !1533)
!1538 = !DILocalVariable(name: "type", arg: 2, scope: !1533, file: !3, line: 1585, type: !158)
!1539 = !DILocation(line: 1585, column: 56, scope: !1533)
!1540 = !DILocalVariable(name: "n", arg: 3, scope: !1533, file: !3, line: 1585, type: !158)
!1541 = !DILocation(line: 1585, column: 66, scope: !1533)
!1542 = !DILocalVariable(name: "i", scope: !1533, file: !3, line: 1587, type: !158)
!1543 = !DILocation(line: 1587, column: 6, scope: !1533)
!1544 = !DILocation(line: 1589, column: 9, scope: !1545)
!1545 = distinct !DILexicalBlock(scope: !1533, file: !3, line: 1589, column: 2)
!1546 = !DILocation(line: 1589, column: 7, scope: !1545)
!1547 = !DILocation(line: 1589, column: 14, scope: !1548)
!1548 = distinct !DILexicalBlock(scope: !1545, file: !3, line: 1589, column: 2)
!1549 = !DILocation(line: 1589, column: 18, scope: !1548)
!1550 = !DILocation(line: 1589, column: 24, scope: !1548)
!1551 = !DILocation(line: 1589, column: 16, scope: !1548)
!1552 = !DILocation(line: 1589, column: 2, scope: !1545)
!1553 = !DILocation(line: 1590, column: 7, scope: !1554)
!1554 = distinct !DILexicalBlock(scope: !1548, file: !3, line: 1590, column: 7)
!1555 = !DILocation(line: 1590, column: 13, scope: !1554)
!1556 = !DILocation(line: 1590, column: 20, scope: !1554)
!1557 = !DILocation(line: 1590, column: 23, scope: !1554)
!1558 = !DILocation(line: 1590, column: 31, scope: !1554)
!1559 = !DILocation(line: 1590, column: 28, scope: !1554)
!1560 = !DILocation(line: 1590, column: 7, scope: !1548)
!1561 = !DILocation(line: 1591, column: 29, scope: !1554)
!1562 = !DILocation(line: 1591, column: 4, scope: !1554)
!1563 = !DILocation(line: 1591, column: 10, scope: !1554)
!1564 = !DILocation(line: 1591, column: 17, scope: !1554)
!1565 = !DILocation(line: 1591, column: 20, scope: !1554)
!1566 = !DILocation(line: 1591, column: 27, scope: !1554)
!1567 = !DILocation(line: 1589, column: 34, scope: !1548)
!1568 = !DILocation(line: 1589, column: 2, scope: !1548)
!1569 = distinct !{!1569, !1552, !1570}
!1570 = !DILocation(line: 1591, column: 29, scope: !1545)
!1571 = !DILocation(line: 1592, column: 1, scope: !1533)
!1572 = distinct !DISubprogram(name: "CustomData_set_layer_render", scope: !3, file: !3, line: 1594, type: !1534, scopeLine: 1595, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1573 = !DILocalVariable(name: "data", arg: 1, scope: !1572, file: !3, line: 1594, type: !488)
!1574 = !DILocation(line: 1594, column: 46, scope: !1572)
!1575 = !DILocalVariable(name: "type", arg: 2, scope: !1572, file: !3, line: 1594, type: !158)
!1576 = !DILocation(line: 1594, column: 56, scope: !1572)
!1577 = !DILocalVariable(name: "n", arg: 3, scope: !1572, file: !3, line: 1594, type: !158)
!1578 = !DILocation(line: 1594, column: 66, scope: !1572)
!1579 = !DILocalVariable(name: "i", scope: !1572, file: !3, line: 1596, type: !158)
!1580 = !DILocation(line: 1596, column: 6, scope: !1572)
!1581 = !DILocation(line: 1598, column: 9, scope: !1582)
!1582 = distinct !DILexicalBlock(scope: !1572, file: !3, line: 1598, column: 2)
!1583 = !DILocation(line: 1598, column: 7, scope: !1582)
!1584 = !DILocation(line: 1598, column: 14, scope: !1585)
!1585 = distinct !DILexicalBlock(scope: !1582, file: !3, line: 1598, column: 2)
!1586 = !DILocation(line: 1598, column: 18, scope: !1585)
!1587 = !DILocation(line: 1598, column: 24, scope: !1585)
!1588 = !DILocation(line: 1598, column: 16, scope: !1585)
!1589 = !DILocation(line: 1598, column: 2, scope: !1582)
!1590 = !DILocation(line: 1599, column: 7, scope: !1591)
!1591 = distinct !DILexicalBlock(scope: !1585, file: !3, line: 1599, column: 7)
!1592 = !DILocation(line: 1599, column: 13, scope: !1591)
!1593 = !DILocation(line: 1599, column: 20, scope: !1591)
!1594 = !DILocation(line: 1599, column: 23, scope: !1591)
!1595 = !DILocation(line: 1599, column: 31, scope: !1591)
!1596 = !DILocation(line: 1599, column: 28, scope: !1591)
!1597 = !DILocation(line: 1599, column: 7, scope: !1585)
!1598 = !DILocation(line: 1600, column: 33, scope: !1591)
!1599 = !DILocation(line: 1600, column: 4, scope: !1591)
!1600 = !DILocation(line: 1600, column: 10, scope: !1591)
!1601 = !DILocation(line: 1600, column: 17, scope: !1591)
!1602 = !DILocation(line: 1600, column: 20, scope: !1591)
!1603 = !DILocation(line: 1600, column: 31, scope: !1591)
!1604 = !DILocation(line: 1598, column: 34, scope: !1585)
!1605 = !DILocation(line: 1598, column: 2, scope: !1585)
!1606 = distinct !{!1606, !1589, !1607}
!1607 = !DILocation(line: 1600, column: 33, scope: !1582)
!1608 = !DILocation(line: 1601, column: 1, scope: !1572)
!1609 = distinct !DISubprogram(name: "CustomData_set_layer_clone", scope: !3, file: !3, line: 1603, type: !1534, scopeLine: 1604, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1610 = !DILocalVariable(name: "data", arg: 1, scope: !1609, file: !3, line: 1603, type: !488)
!1611 = !DILocation(line: 1603, column: 45, scope: !1609)
!1612 = !DILocalVariable(name: "type", arg: 2, scope: !1609, file: !3, line: 1603, type: !158)
!1613 = !DILocation(line: 1603, column: 55, scope: !1609)
!1614 = !DILocalVariable(name: "n", arg: 3, scope: !1609, file: !3, line: 1603, type: !158)
!1615 = !DILocation(line: 1603, column: 65, scope: !1609)
!1616 = !DILocalVariable(name: "i", scope: !1609, file: !3, line: 1605, type: !158)
!1617 = !DILocation(line: 1605, column: 6, scope: !1609)
!1618 = !DILocation(line: 1607, column: 9, scope: !1619)
!1619 = distinct !DILexicalBlock(scope: !1609, file: !3, line: 1607, column: 2)
!1620 = !DILocation(line: 1607, column: 7, scope: !1619)
!1621 = !DILocation(line: 1607, column: 14, scope: !1622)
!1622 = distinct !DILexicalBlock(scope: !1619, file: !3, line: 1607, column: 2)
!1623 = !DILocation(line: 1607, column: 18, scope: !1622)
!1624 = !DILocation(line: 1607, column: 24, scope: !1622)
!1625 = !DILocation(line: 1607, column: 16, scope: !1622)
!1626 = !DILocation(line: 1607, column: 2, scope: !1619)
!1627 = !DILocation(line: 1608, column: 7, scope: !1628)
!1628 = distinct !DILexicalBlock(scope: !1622, file: !3, line: 1608, column: 7)
!1629 = !DILocation(line: 1608, column: 13, scope: !1628)
!1630 = !DILocation(line: 1608, column: 20, scope: !1628)
!1631 = !DILocation(line: 1608, column: 23, scope: !1628)
!1632 = !DILocation(line: 1608, column: 31, scope: !1628)
!1633 = !DILocation(line: 1608, column: 28, scope: !1628)
!1634 = !DILocation(line: 1608, column: 7, scope: !1622)
!1635 = !DILocation(line: 1609, column: 35, scope: !1628)
!1636 = !DILocation(line: 1609, column: 4, scope: !1628)
!1637 = !DILocation(line: 1609, column: 10, scope: !1628)
!1638 = !DILocation(line: 1609, column: 17, scope: !1628)
!1639 = !DILocation(line: 1609, column: 20, scope: !1628)
!1640 = !DILocation(line: 1609, column: 33, scope: !1628)
!1641 = !DILocation(line: 1607, column: 34, scope: !1622)
!1642 = !DILocation(line: 1607, column: 2, scope: !1622)
!1643 = distinct !{!1643, !1626, !1644}
!1644 = !DILocation(line: 1609, column: 35, scope: !1619)
!1645 = !DILocation(line: 1610, column: 1, scope: !1609)
!1646 = distinct !DISubprogram(name: "CustomData_set_layer_stencil", scope: !3, file: !3, line: 1612, type: !1534, scopeLine: 1613, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1647 = !DILocalVariable(name: "data", arg: 1, scope: !1646, file: !3, line: 1612, type: !488)
!1648 = !DILocation(line: 1612, column: 47, scope: !1646)
!1649 = !DILocalVariable(name: "type", arg: 2, scope: !1646, file: !3, line: 1612, type: !158)
!1650 = !DILocation(line: 1612, column: 57, scope: !1646)
!1651 = !DILocalVariable(name: "n", arg: 3, scope: !1646, file: !3, line: 1612, type: !158)
!1652 = !DILocation(line: 1612, column: 67, scope: !1646)
!1653 = !DILocalVariable(name: "i", scope: !1646, file: !3, line: 1614, type: !158)
!1654 = !DILocation(line: 1614, column: 6, scope: !1646)
!1655 = !DILocation(line: 1616, column: 9, scope: !1656)
!1656 = distinct !DILexicalBlock(scope: !1646, file: !3, line: 1616, column: 2)
!1657 = !DILocation(line: 1616, column: 7, scope: !1656)
!1658 = !DILocation(line: 1616, column: 14, scope: !1659)
!1659 = distinct !DILexicalBlock(scope: !1656, file: !3, line: 1616, column: 2)
!1660 = !DILocation(line: 1616, column: 18, scope: !1659)
!1661 = !DILocation(line: 1616, column: 24, scope: !1659)
!1662 = !DILocation(line: 1616, column: 16, scope: !1659)
!1663 = !DILocation(line: 1616, column: 2, scope: !1656)
!1664 = !DILocation(line: 1617, column: 7, scope: !1665)
!1665 = distinct !DILexicalBlock(scope: !1659, file: !3, line: 1617, column: 7)
!1666 = !DILocation(line: 1617, column: 13, scope: !1665)
!1667 = !DILocation(line: 1617, column: 20, scope: !1665)
!1668 = !DILocation(line: 1617, column: 23, scope: !1665)
!1669 = !DILocation(line: 1617, column: 31, scope: !1665)
!1670 = !DILocation(line: 1617, column: 28, scope: !1665)
!1671 = !DILocation(line: 1617, column: 7, scope: !1659)
!1672 = !DILocation(line: 1618, column: 34, scope: !1665)
!1673 = !DILocation(line: 1618, column: 4, scope: !1665)
!1674 = !DILocation(line: 1618, column: 10, scope: !1665)
!1675 = !DILocation(line: 1618, column: 17, scope: !1665)
!1676 = !DILocation(line: 1618, column: 20, scope: !1665)
!1677 = !DILocation(line: 1618, column: 32, scope: !1665)
!1678 = !DILocation(line: 1616, column: 34, scope: !1659)
!1679 = !DILocation(line: 1616, column: 2, scope: !1659)
!1680 = distinct !{!1680, !1663, !1681}
!1681 = !DILocation(line: 1618, column: 34, scope: !1656)
!1682 = !DILocation(line: 1619, column: 1, scope: !1646)
!1683 = distinct !DISubprogram(name: "CustomData_set_layer_active_index", scope: !3, file: !3, line: 1622, type: !1534, scopeLine: 1623, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1684 = !DILocalVariable(name: "data", arg: 1, scope: !1683, file: !3, line: 1622, type: !488)
!1685 = !DILocation(line: 1622, column: 52, scope: !1683)
!1686 = !DILocalVariable(name: "type", arg: 2, scope: !1683, file: !3, line: 1622, type: !158)
!1687 = !DILocation(line: 1622, column: 62, scope: !1683)
!1688 = !DILocalVariable(name: "n", arg: 3, scope: !1683, file: !3, line: 1622, type: !158)
!1689 = !DILocation(line: 1622, column: 72, scope: !1683)
!1690 = !DILocalVariable(name: "i", scope: !1683, file: !3, line: 1624, type: !158)
!1691 = !DILocation(line: 1624, column: 6, scope: !1683)
!1692 = !DILocation(line: 1626, column: 9, scope: !1693)
!1693 = distinct !DILexicalBlock(scope: !1683, file: !3, line: 1626, column: 2)
!1694 = !DILocation(line: 1626, column: 7, scope: !1693)
!1695 = !DILocation(line: 1626, column: 14, scope: !1696)
!1696 = distinct !DILexicalBlock(scope: !1693, file: !3, line: 1626, column: 2)
!1697 = !DILocation(line: 1626, column: 18, scope: !1696)
!1698 = !DILocation(line: 1626, column: 24, scope: !1696)
!1699 = !DILocation(line: 1626, column: 16, scope: !1696)
!1700 = !DILocation(line: 1626, column: 2, scope: !1693)
!1701 = !DILocation(line: 1627, column: 7, scope: !1702)
!1702 = distinct !DILexicalBlock(scope: !1696, file: !3, line: 1627, column: 7)
!1703 = !DILocation(line: 1627, column: 13, scope: !1702)
!1704 = !DILocation(line: 1627, column: 20, scope: !1702)
!1705 = !DILocation(line: 1627, column: 23, scope: !1702)
!1706 = !DILocation(line: 1627, column: 31, scope: !1702)
!1707 = !DILocation(line: 1627, column: 28, scope: !1702)
!1708 = !DILocation(line: 1627, column: 7, scope: !1696)
!1709 = !DILocation(line: 1628, column: 29, scope: !1702)
!1710 = !DILocation(line: 1628, column: 33, scope: !1702)
!1711 = !DILocation(line: 1628, column: 31, scope: !1702)
!1712 = !DILocation(line: 1628, column: 4, scope: !1702)
!1713 = !DILocation(line: 1628, column: 10, scope: !1702)
!1714 = !DILocation(line: 1628, column: 17, scope: !1702)
!1715 = !DILocation(line: 1628, column: 20, scope: !1702)
!1716 = !DILocation(line: 1628, column: 27, scope: !1702)
!1717 = !DILocation(line: 1626, column: 34, scope: !1696)
!1718 = !DILocation(line: 1626, column: 2, scope: !1696)
!1719 = distinct !{!1719, !1700, !1720}
!1720 = !DILocation(line: 1628, column: 33, scope: !1693)
!1721 = !DILocation(line: 1629, column: 1, scope: !1683)
!1722 = distinct !DISubprogram(name: "CustomData_set_layer_render_index", scope: !3, file: !3, line: 1631, type: !1534, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1723 = !DILocalVariable(name: "data", arg: 1, scope: !1722, file: !3, line: 1631, type: !488)
!1724 = !DILocation(line: 1631, column: 52, scope: !1722)
!1725 = !DILocalVariable(name: "type", arg: 2, scope: !1722, file: !3, line: 1631, type: !158)
!1726 = !DILocation(line: 1631, column: 62, scope: !1722)
!1727 = !DILocalVariable(name: "n", arg: 3, scope: !1722, file: !3, line: 1631, type: !158)
!1728 = !DILocation(line: 1631, column: 72, scope: !1722)
!1729 = !DILocalVariable(name: "i", scope: !1722, file: !3, line: 1633, type: !158)
!1730 = !DILocation(line: 1633, column: 6, scope: !1722)
!1731 = !DILocation(line: 1635, column: 9, scope: !1732)
!1732 = distinct !DILexicalBlock(scope: !1722, file: !3, line: 1635, column: 2)
!1733 = !DILocation(line: 1635, column: 7, scope: !1732)
!1734 = !DILocation(line: 1635, column: 14, scope: !1735)
!1735 = distinct !DILexicalBlock(scope: !1732, file: !3, line: 1635, column: 2)
!1736 = !DILocation(line: 1635, column: 18, scope: !1735)
!1737 = !DILocation(line: 1635, column: 24, scope: !1735)
!1738 = !DILocation(line: 1635, column: 16, scope: !1735)
!1739 = !DILocation(line: 1635, column: 2, scope: !1732)
!1740 = !DILocation(line: 1636, column: 7, scope: !1741)
!1741 = distinct !DILexicalBlock(scope: !1735, file: !3, line: 1636, column: 7)
!1742 = !DILocation(line: 1636, column: 13, scope: !1741)
!1743 = !DILocation(line: 1636, column: 20, scope: !1741)
!1744 = !DILocation(line: 1636, column: 23, scope: !1741)
!1745 = !DILocation(line: 1636, column: 31, scope: !1741)
!1746 = !DILocation(line: 1636, column: 28, scope: !1741)
!1747 = !DILocation(line: 1636, column: 7, scope: !1735)
!1748 = !DILocation(line: 1637, column: 33, scope: !1741)
!1749 = !DILocation(line: 1637, column: 37, scope: !1741)
!1750 = !DILocation(line: 1637, column: 35, scope: !1741)
!1751 = !DILocation(line: 1637, column: 4, scope: !1741)
!1752 = !DILocation(line: 1637, column: 10, scope: !1741)
!1753 = !DILocation(line: 1637, column: 17, scope: !1741)
!1754 = !DILocation(line: 1637, column: 20, scope: !1741)
!1755 = !DILocation(line: 1637, column: 31, scope: !1741)
!1756 = !DILocation(line: 1635, column: 34, scope: !1735)
!1757 = !DILocation(line: 1635, column: 2, scope: !1735)
!1758 = distinct !{!1758, !1739, !1759}
!1759 = !DILocation(line: 1637, column: 37, scope: !1732)
!1760 = !DILocation(line: 1638, column: 1, scope: !1722)
!1761 = distinct !DISubprogram(name: "CustomData_set_layer_clone_index", scope: !3, file: !3, line: 1640, type: !1534, scopeLine: 1641, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1762 = !DILocalVariable(name: "data", arg: 1, scope: !1761, file: !3, line: 1640, type: !488)
!1763 = !DILocation(line: 1640, column: 51, scope: !1761)
!1764 = !DILocalVariable(name: "type", arg: 2, scope: !1761, file: !3, line: 1640, type: !158)
!1765 = !DILocation(line: 1640, column: 61, scope: !1761)
!1766 = !DILocalVariable(name: "n", arg: 3, scope: !1761, file: !3, line: 1640, type: !158)
!1767 = !DILocation(line: 1640, column: 71, scope: !1761)
!1768 = !DILocalVariable(name: "i", scope: !1761, file: !3, line: 1642, type: !158)
!1769 = !DILocation(line: 1642, column: 6, scope: !1761)
!1770 = !DILocation(line: 1644, column: 9, scope: !1771)
!1771 = distinct !DILexicalBlock(scope: !1761, file: !3, line: 1644, column: 2)
!1772 = !DILocation(line: 1644, column: 7, scope: !1771)
!1773 = !DILocation(line: 1644, column: 14, scope: !1774)
!1774 = distinct !DILexicalBlock(scope: !1771, file: !3, line: 1644, column: 2)
!1775 = !DILocation(line: 1644, column: 18, scope: !1774)
!1776 = !DILocation(line: 1644, column: 24, scope: !1774)
!1777 = !DILocation(line: 1644, column: 16, scope: !1774)
!1778 = !DILocation(line: 1644, column: 2, scope: !1771)
!1779 = !DILocation(line: 1645, column: 7, scope: !1780)
!1780 = distinct !DILexicalBlock(scope: !1774, file: !3, line: 1645, column: 7)
!1781 = !DILocation(line: 1645, column: 13, scope: !1780)
!1782 = !DILocation(line: 1645, column: 20, scope: !1780)
!1783 = !DILocation(line: 1645, column: 23, scope: !1780)
!1784 = !DILocation(line: 1645, column: 31, scope: !1780)
!1785 = !DILocation(line: 1645, column: 28, scope: !1780)
!1786 = !DILocation(line: 1645, column: 7, scope: !1774)
!1787 = !DILocation(line: 1646, column: 35, scope: !1780)
!1788 = !DILocation(line: 1646, column: 39, scope: !1780)
!1789 = !DILocation(line: 1646, column: 37, scope: !1780)
!1790 = !DILocation(line: 1646, column: 4, scope: !1780)
!1791 = !DILocation(line: 1646, column: 10, scope: !1780)
!1792 = !DILocation(line: 1646, column: 17, scope: !1780)
!1793 = !DILocation(line: 1646, column: 20, scope: !1780)
!1794 = !DILocation(line: 1646, column: 33, scope: !1780)
!1795 = !DILocation(line: 1644, column: 34, scope: !1774)
!1796 = !DILocation(line: 1644, column: 2, scope: !1774)
!1797 = distinct !{!1797, !1778, !1798}
!1798 = !DILocation(line: 1646, column: 39, scope: !1771)
!1799 = !DILocation(line: 1647, column: 1, scope: !1761)
!1800 = distinct !DISubprogram(name: "CustomData_set_layer_stencil_index", scope: !3, file: !3, line: 1649, type: !1534, scopeLine: 1650, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1801 = !DILocalVariable(name: "data", arg: 1, scope: !1800, file: !3, line: 1649, type: !488)
!1802 = !DILocation(line: 1649, column: 53, scope: !1800)
!1803 = !DILocalVariable(name: "type", arg: 2, scope: !1800, file: !3, line: 1649, type: !158)
!1804 = !DILocation(line: 1649, column: 63, scope: !1800)
!1805 = !DILocalVariable(name: "n", arg: 3, scope: !1800, file: !3, line: 1649, type: !158)
!1806 = !DILocation(line: 1649, column: 73, scope: !1800)
!1807 = !DILocalVariable(name: "i", scope: !1800, file: !3, line: 1651, type: !158)
!1808 = !DILocation(line: 1651, column: 6, scope: !1800)
!1809 = !DILocation(line: 1653, column: 9, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1800, file: !3, line: 1653, column: 2)
!1811 = !DILocation(line: 1653, column: 7, scope: !1810)
!1812 = !DILocation(line: 1653, column: 14, scope: !1813)
!1813 = distinct !DILexicalBlock(scope: !1810, file: !3, line: 1653, column: 2)
!1814 = !DILocation(line: 1653, column: 18, scope: !1813)
!1815 = !DILocation(line: 1653, column: 24, scope: !1813)
!1816 = !DILocation(line: 1653, column: 16, scope: !1813)
!1817 = !DILocation(line: 1653, column: 2, scope: !1810)
!1818 = !DILocation(line: 1654, column: 7, scope: !1819)
!1819 = distinct !DILexicalBlock(scope: !1813, file: !3, line: 1654, column: 7)
!1820 = !DILocation(line: 1654, column: 13, scope: !1819)
!1821 = !DILocation(line: 1654, column: 20, scope: !1819)
!1822 = !DILocation(line: 1654, column: 23, scope: !1819)
!1823 = !DILocation(line: 1654, column: 31, scope: !1819)
!1824 = !DILocation(line: 1654, column: 28, scope: !1819)
!1825 = !DILocation(line: 1654, column: 7, scope: !1813)
!1826 = !DILocation(line: 1655, column: 34, scope: !1819)
!1827 = !DILocation(line: 1655, column: 38, scope: !1819)
!1828 = !DILocation(line: 1655, column: 36, scope: !1819)
!1829 = !DILocation(line: 1655, column: 4, scope: !1819)
!1830 = !DILocation(line: 1655, column: 10, scope: !1819)
!1831 = !DILocation(line: 1655, column: 17, scope: !1819)
!1832 = !DILocation(line: 1655, column: 20, scope: !1819)
!1833 = !DILocation(line: 1655, column: 32, scope: !1819)
!1834 = !DILocation(line: 1653, column: 34, scope: !1813)
!1835 = !DILocation(line: 1653, column: 2, scope: !1813)
!1836 = distinct !{!1836, !1817, !1837}
!1837 = !DILocation(line: 1655, column: 38, scope: !1810)
!1838 = !DILocation(line: 1656, column: 1, scope: !1800)
!1839 = distinct !DISubprogram(name: "CustomData_set_layer_flag", scope: !3, file: !3, line: 1658, type: !1840, scopeLine: 1659, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1840 = !DISubroutineType(types: !1841)
!1841 = !{null, !594, !158, !158}
!1842 = !DILocalVariable(name: "data", arg: 1, scope: !1839, file: !3, line: 1658, type: !594)
!1843 = !DILocation(line: 1658, column: 51, scope: !1839)
!1844 = !DILocalVariable(name: "type", arg: 2, scope: !1839, file: !3, line: 1658, type: !158)
!1845 = !DILocation(line: 1658, column: 61, scope: !1839)
!1846 = !DILocalVariable(name: "flag", arg: 3, scope: !1839, file: !3, line: 1658, type: !158)
!1847 = !DILocation(line: 1658, column: 71, scope: !1839)
!1848 = !DILocalVariable(name: "i", scope: !1839, file: !3, line: 1660, type: !158)
!1849 = !DILocation(line: 1660, column: 6, scope: !1839)
!1850 = !DILocation(line: 1662, column: 9, scope: !1851)
!1851 = distinct !DILexicalBlock(scope: !1839, file: !3, line: 1662, column: 2)
!1852 = !DILocation(line: 1662, column: 7, scope: !1851)
!1853 = !DILocation(line: 1662, column: 14, scope: !1854)
!1854 = distinct !DILexicalBlock(scope: !1851, file: !3, line: 1662, column: 2)
!1855 = !DILocation(line: 1662, column: 18, scope: !1854)
!1856 = !DILocation(line: 1662, column: 24, scope: !1854)
!1857 = !DILocation(line: 1662, column: 16, scope: !1854)
!1858 = !DILocation(line: 1662, column: 2, scope: !1851)
!1859 = !DILocation(line: 1663, column: 7, scope: !1860)
!1860 = distinct !DILexicalBlock(scope: !1854, file: !3, line: 1663, column: 7)
!1861 = !DILocation(line: 1663, column: 13, scope: !1860)
!1862 = !DILocation(line: 1663, column: 20, scope: !1860)
!1863 = !DILocation(line: 1663, column: 23, scope: !1860)
!1864 = !DILocation(line: 1663, column: 31, scope: !1860)
!1865 = !DILocation(line: 1663, column: 28, scope: !1860)
!1866 = !DILocation(line: 1663, column: 7, scope: !1854)
!1867 = !DILocation(line: 1664, column: 28, scope: !1860)
!1868 = !DILocation(line: 1664, column: 4, scope: !1860)
!1869 = !DILocation(line: 1664, column: 10, scope: !1860)
!1870 = !DILocation(line: 1664, column: 17, scope: !1860)
!1871 = !DILocation(line: 1664, column: 20, scope: !1860)
!1872 = !DILocation(line: 1664, column: 25, scope: !1860)
!1873 = !DILocation(line: 1662, column: 34, scope: !1854)
!1874 = !DILocation(line: 1662, column: 2, scope: !1854)
!1875 = distinct !{!1875, !1858, !1876}
!1876 = !DILocation(line: 1664, column: 28, scope: !1851)
!1877 = !DILocation(line: 1665, column: 1, scope: !1839)
!1878 = distinct !DISubprogram(name: "CustomData_add_layer", scope: !3, file: !3, line: 1767, type: !1879, scopeLine: 1769, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1879 = !DISubroutineType(types: !1880)
!1880 = !{!146, !488, !158, !158, !146, !158}
!1881 = !DILocalVariable(name: "data", arg: 1, scope: !1878, file: !3, line: 1767, type: !488)
!1882 = !DILocation(line: 1767, column: 40, scope: !1878)
!1883 = !DILocalVariable(name: "type", arg: 2, scope: !1878, file: !3, line: 1767, type: !158)
!1884 = !DILocation(line: 1767, column: 50, scope: !1878)
!1885 = !DILocalVariable(name: "alloctype", arg: 3, scope: !1878, file: !3, line: 1767, type: !158)
!1886 = !DILocation(line: 1767, column: 60, scope: !1878)
!1887 = !DILocalVariable(name: "layerdata", arg: 4, scope: !1878, file: !3, line: 1768, type: !146)
!1888 = !DILocation(line: 1768, column: 34, scope: !1878)
!1889 = !DILocalVariable(name: "totelem", arg: 5, scope: !1878, file: !3, line: 1768, type: !158)
!1890 = !DILocation(line: 1768, column: 49, scope: !1878)
!1891 = !DILocalVariable(name: "layer", scope: !1878, file: !3, line: 1770, type: !493)
!1892 = !DILocation(line: 1770, column: 19, scope: !1878)
!1893 = !DILocalVariable(name: "typeInfo", scope: !1878, file: !3, line: 1771, type: !788)
!1894 = !DILocation(line: 1771, column: 23, scope: !1878)
!1895 = !DILocation(line: 1771, column: 52, scope: !1878)
!1896 = !DILocation(line: 1771, column: 34, scope: !1878)
!1897 = !DILocation(line: 1773, column: 41, scope: !1878)
!1898 = !DILocation(line: 1773, column: 47, scope: !1878)
!1899 = !DILocation(line: 1773, column: 53, scope: !1878)
!1900 = !DILocation(line: 1773, column: 64, scope: !1878)
!1901 = !DILocation(line: 1774, column: 41, scope: !1878)
!1902 = !DILocation(line: 1774, column: 50, scope: !1878)
!1903 = !DILocation(line: 1774, column: 60, scope: !1878)
!1904 = !DILocation(line: 1773, column: 10, scope: !1878)
!1905 = !DILocation(line: 1773, column: 8, scope: !1878)
!1906 = !DILocation(line: 1775, column: 28, scope: !1878)
!1907 = !DILocation(line: 1775, column: 2, scope: !1878)
!1908 = !DILocation(line: 1777, column: 6, scope: !1909)
!1909 = distinct !DILexicalBlock(scope: !1878, file: !3, line: 1777, column: 6)
!1910 = !DILocation(line: 1777, column: 6, scope: !1878)
!1911 = !DILocation(line: 1778, column: 10, scope: !1909)
!1912 = !DILocation(line: 1778, column: 17, scope: !1909)
!1913 = !DILocation(line: 1778, column: 3, scope: !1909)
!1914 = !DILocation(line: 1780, column: 2, scope: !1878)
!1915 = !DILocation(line: 1781, column: 1, scope: !1878)
!1916 = distinct !DISubprogram(name: "layerType_getInfo", scope: !3, file: !3, line: 1276, type: !1917, scopeLine: 1277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1917 = !DISubroutineType(types: !1918)
!1918 = !{!788, !158}
!1919 = !DILocalVariable(name: "type", arg: 1, scope: !1916, file: !3, line: 1276, type: !158)
!1920 = !DILocation(line: 1276, column: 51, scope: !1916)
!1921 = !DILocation(line: 1278, column: 6, scope: !1922)
!1922 = distinct !DILexicalBlock(scope: !1916, file: !3, line: 1278, column: 6)
!1923 = !DILocation(line: 1278, column: 11, scope: !1922)
!1924 = !DILocation(line: 1278, column: 15, scope: !1922)
!1925 = !DILocation(line: 1278, column: 18, scope: !1922)
!1926 = !DILocation(line: 1278, column: 23, scope: !1922)
!1927 = !DILocation(line: 1278, column: 6, scope: !1916)
!1928 = !DILocation(line: 1278, column: 39, scope: !1922)
!1929 = !DILocation(line: 1280, column: 24, scope: !1916)
!1930 = !DILocation(line: 1280, column: 10, scope: !1916)
!1931 = !DILocation(line: 1280, column: 2, scope: !1916)
!1932 = !DILocation(line: 1281, column: 1, scope: !1916)
!1933 = distinct !DISubprogram(name: "CustomData_add_layer_named", scope: !3, file: !3, line: 1784, type: !1934, scopeLine: 1786, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1934 = !DISubroutineType(types: !1935)
!1935 = !{!146, !488, !158, !158, !146, !158, !316}
!1936 = !DILocalVariable(name: "data", arg: 1, scope: !1933, file: !3, line: 1784, type: !488)
!1937 = !DILocation(line: 1784, column: 46, scope: !1933)
!1938 = !DILocalVariable(name: "type", arg: 2, scope: !1933, file: !3, line: 1784, type: !158)
!1939 = !DILocation(line: 1784, column: 56, scope: !1933)
!1940 = !DILocalVariable(name: "alloctype", arg: 3, scope: !1933, file: !3, line: 1784, type: !158)
!1941 = !DILocation(line: 1784, column: 66, scope: !1933)
!1942 = !DILocalVariable(name: "layerdata", arg: 4, scope: !1933, file: !3, line: 1785, type: !146)
!1943 = !DILocation(line: 1785, column: 40, scope: !1933)
!1944 = !DILocalVariable(name: "totelem", arg: 5, scope: !1933, file: !3, line: 1785, type: !158)
!1945 = !DILocation(line: 1785, column: 55, scope: !1933)
!1946 = !DILocalVariable(name: "name", arg: 6, scope: !1933, file: !3, line: 1785, type: !316)
!1947 = !DILocation(line: 1785, column: 76, scope: !1933)
!1948 = !DILocalVariable(name: "layer", scope: !1933, file: !3, line: 1787, type: !493)
!1949 = !DILocation(line: 1787, column: 19, scope: !1933)
!1950 = !DILocation(line: 1789, column: 41, scope: !1933)
!1951 = !DILocation(line: 1789, column: 47, scope: !1933)
!1952 = !DILocation(line: 1789, column: 53, scope: !1933)
!1953 = !DILocation(line: 1789, column: 64, scope: !1933)
!1954 = !DILocation(line: 1790, column: 41, scope: !1933)
!1955 = !DILocation(line: 1790, column: 50, scope: !1933)
!1956 = !DILocation(line: 1789, column: 10, scope: !1933)
!1957 = !DILocation(line: 1789, column: 8, scope: !1933)
!1958 = !DILocation(line: 1791, column: 28, scope: !1933)
!1959 = !DILocation(line: 1791, column: 2, scope: !1933)
!1960 = !DILocation(line: 1793, column: 6, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1933, file: !3, line: 1793, column: 6)
!1962 = !DILocation(line: 1793, column: 6, scope: !1933)
!1963 = !DILocation(line: 1794, column: 10, scope: !1961)
!1964 = !DILocation(line: 1794, column: 17, scope: !1961)
!1965 = !DILocation(line: 1794, column: 3, scope: !1961)
!1966 = !DILocation(line: 1796, column: 2, scope: !1933)
!1967 = !DILocation(line: 1797, column: 1, scope: !1933)
!1968 = distinct !DISubprogram(name: "CustomData_free_layer", scope: !3, file: !3, line: 1800, type: !1969, scopeLine: 1801, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!1969 = !DISubroutineType(types: !1970)
!1970 = !{!361, !488, !158, !158, !158}
!1971 = !DILocalVariable(name: "data", arg: 1, scope: !1968, file: !3, line: 1800, type: !488)
!1972 = !DILocation(line: 1800, column: 40, scope: !1968)
!1973 = !DILocalVariable(name: "type", arg: 2, scope: !1968, file: !3, line: 1800, type: !158)
!1974 = !DILocation(line: 1800, column: 50, scope: !1968)
!1975 = !DILocalVariable(name: "totelem", arg: 3, scope: !1968, file: !3, line: 1800, type: !158)
!1976 = !DILocation(line: 1800, column: 60, scope: !1968)
!1977 = !DILocalVariable(name: "index", arg: 4, scope: !1968, file: !3, line: 1800, type: !158)
!1978 = !DILocation(line: 1800, column: 73, scope: !1968)
!1979 = !DILocalVariable(name: "n", scope: !1968, file: !3, line: 1802, type: !352)
!1980 = !DILocation(line: 1802, column: 12, scope: !1968)
!1981 = !DILocation(line: 1802, column: 16, scope: !1968)
!1982 = !DILocation(line: 1802, column: 51, scope: !1968)
!1983 = !DILocation(line: 1802, column: 57, scope: !1968)
!1984 = !DILocation(line: 1802, column: 24, scope: !1968)
!1985 = !DILocation(line: 1802, column: 22, scope: !1968)
!1986 = !DILocalVariable(name: "i", scope: !1968, file: !3, line: 1803, type: !158)
!1987 = !DILocation(line: 1803, column: 6, scope: !1968)
!1988 = !DILocation(line: 1805, column: 6, scope: !1989)
!1989 = distinct !DILexicalBlock(scope: !1968, file: !3, line: 1805, column: 6)
!1990 = !DILocation(line: 1805, column: 12, scope: !1989)
!1991 = !DILocation(line: 1805, column: 6, scope: !1968)
!1992 = !DILocation(line: 1805, column: 17, scope: !1989)
!1993 = !DILocation(line: 1807, column: 35, scope: !1968)
!1994 = !DILocation(line: 1807, column: 41, scope: !1968)
!1995 = !DILocation(line: 1807, column: 48, scope: !1968)
!1996 = !DILocation(line: 1807, column: 56, scope: !1968)
!1997 = !DILocation(line: 1807, column: 2, scope: !1968)
!1998 = !DILocation(line: 1809, column: 11, scope: !1999)
!1999 = distinct !DILexicalBlock(scope: !1968, file: !3, line: 1809, column: 2)
!2000 = !DILocation(line: 1809, column: 17, scope: !1999)
!2001 = !DILocation(line: 1809, column: 9, scope: !1999)
!2002 = !DILocation(line: 1809, column: 7, scope: !1999)
!2003 = !DILocation(line: 1809, column: 22, scope: !2004)
!2004 = distinct !DILexicalBlock(scope: !1999, file: !3, line: 1809, column: 2)
!2005 = !DILocation(line: 1809, column: 26, scope: !2004)
!2006 = !DILocation(line: 1809, column: 32, scope: !2004)
!2007 = !DILocation(line: 1809, column: 24, scope: !2004)
!2008 = !DILocation(line: 1809, column: 2, scope: !1999)
!2009 = !DILocation(line: 1810, column: 3, scope: !2004)
!2010 = !DILocation(line: 1810, column: 9, scope: !2004)
!2011 = !DILocation(line: 1810, column: 16, scope: !2004)
!2012 = !DILocation(line: 1810, column: 18, scope: !2004)
!2013 = !DILocation(line: 1810, column: 25, scope: !2004)
!2014 = !DILocation(line: 1810, column: 31, scope: !2004)
!2015 = !DILocation(line: 1810, column: 38, scope: !2004)
!2016 = !DILocation(line: 1809, column: 42, scope: !2004)
!2017 = !DILocation(line: 1809, column: 2, scope: !2004)
!2018 = distinct !{!2018, !2008, !2019}
!2019 = !DILocation(line: 1810, column: 39, scope: !1999)
!2020 = !DILocation(line: 1812, column: 2, scope: !1968)
!2021 = !DILocation(line: 1812, column: 8, scope: !1968)
!2022 = !DILocation(line: 1812, column: 16, scope: !1968)
!2023 = !DILocation(line: 1815, column: 44, scope: !1968)
!2024 = !DILocation(line: 1815, column: 50, scope: !1968)
!2025 = !DILocation(line: 1815, column: 6, scope: !1968)
!2026 = !DILocation(line: 1815, column: 4, scope: !1968)
!2027 = !DILocation(line: 1817, column: 6, scope: !2028)
!2028 = distinct !DILexicalBlock(scope: !1968, file: !3, line: 1817, column: 6)
!2029 = !DILocation(line: 1817, column: 8, scope: !2028)
!2030 = !DILocation(line: 1817, column: 6, scope: !1968)
!2031 = !DILocalVariable(name: "index_nonzero", scope: !2032, file: !3, line: 1819, type: !352)
!2032 = distinct !DILexicalBlock(scope: !2028, file: !3, line: 1817, column: 15)
!2033 = !DILocation(line: 1819, column: 13, scope: !2032)
!2034 = !DILocation(line: 1819, column: 29, scope: !2032)
!2035 = !DILocation(line: 1819, column: 33, scope: !2032)
!2036 = !DILocalVariable(name: "layer", scope: !2032, file: !3, line: 1820, type: !493)
!2037 = !DILocation(line: 1820, column: 20, scope: !2032)
!2038 = !DILocation(line: 1822, column: 17, scope: !2039)
!2039 = distinct !DILexicalBlock(scope: !2032, file: !3, line: 1822, column: 3)
!2040 = !DILocation(line: 1822, column: 23, scope: !2039)
!2041 = !DILocation(line: 1822, column: 30, scope: !2039)
!2042 = !DILocation(line: 1822, column: 14, scope: !2039)
!2043 = !DILocation(line: 1822, column: 8, scope: !2039)
!2044 = !DILocation(line: 1822, column: 34, scope: !2045)
!2045 = distinct !DILexicalBlock(scope: !2039, file: !3, line: 1822, column: 3)
!2046 = !DILocation(line: 1822, column: 38, scope: !2045)
!2047 = !DILocation(line: 1822, column: 44, scope: !2045)
!2048 = !DILocation(line: 1822, column: 36, scope: !2045)
!2049 = !DILocation(line: 1822, column: 53, scope: !2045)
!2050 = !DILocation(line: 1822, column: 56, scope: !2045)
!2051 = !DILocation(line: 1822, column: 63, scope: !2045)
!2052 = !DILocation(line: 1822, column: 71, scope: !2045)
!2053 = !DILocation(line: 1822, column: 68, scope: !2045)
!2054 = !DILocation(line: 0, scope: !2045)
!2055 = !DILocation(line: 1822, column: 3, scope: !2039)
!2056 = !DILocation(line: 1823, column: 8, scope: !2057)
!2057 = distinct !DILexicalBlock(scope: !2058, file: !3, line: 1823, column: 8)
!2058 = distinct !DILexicalBlock(scope: !2045, file: !3, line: 1822, column: 91)
!2059 = !DILocation(line: 1823, column: 15, scope: !2057)
!2060 = !DILocation(line: 1823, column: 31, scope: !2057)
!2061 = !DILocation(line: 1823, column: 28, scope: !2057)
!2062 = !DILocation(line: 1823, column: 8, scope: !2058)
!2063 = !DILocation(line: 1823, column: 46, scope: !2057)
!2064 = !DILocation(line: 1823, column: 53, scope: !2057)
!2065 = !DILocation(line: 1823, column: 59, scope: !2057)
!2066 = !DILocation(line: 1824, column: 8, scope: !2067)
!2067 = distinct !DILexicalBlock(scope: !2058, file: !3, line: 1824, column: 8)
!2068 = !DILocation(line: 1824, column: 15, scope: !2067)
!2069 = !DILocation(line: 1824, column: 31, scope: !2067)
!2070 = !DILocation(line: 1824, column: 28, scope: !2067)
!2071 = !DILocation(line: 1824, column: 8, scope: !2058)
!2072 = !DILocation(line: 1824, column: 46, scope: !2067)
!2073 = !DILocation(line: 1824, column: 53, scope: !2067)
!2074 = !DILocation(line: 1824, column: 63, scope: !2067)
!2075 = !DILocation(line: 1825, column: 8, scope: !2076)
!2076 = distinct !DILexicalBlock(scope: !2058, file: !3, line: 1825, column: 8)
!2077 = !DILocation(line: 1825, column: 15, scope: !2076)
!2078 = !DILocation(line: 1825, column: 31, scope: !2076)
!2079 = !DILocation(line: 1825, column: 28, scope: !2076)
!2080 = !DILocation(line: 1825, column: 8, scope: !2058)
!2081 = !DILocation(line: 1825, column: 46, scope: !2076)
!2082 = !DILocation(line: 1825, column: 53, scope: !2076)
!2083 = !DILocation(line: 1825, column: 65, scope: !2076)
!2084 = !DILocation(line: 1826, column: 8, scope: !2085)
!2085 = distinct !DILexicalBlock(scope: !2058, file: !3, line: 1826, column: 8)
!2086 = !DILocation(line: 1826, column: 15, scope: !2085)
!2087 = !DILocation(line: 1826, column: 31, scope: !2085)
!2088 = !DILocation(line: 1826, column: 28, scope: !2085)
!2089 = !DILocation(line: 1826, column: 8, scope: !2058)
!2090 = !DILocation(line: 1826, column: 46, scope: !2085)
!2091 = !DILocation(line: 1826, column: 53, scope: !2085)
!2092 = !DILocation(line: 1826, column: 64, scope: !2085)
!2093 = !DILocation(line: 1827, column: 3, scope: !2058)
!2094 = !DILocation(line: 1822, column: 78, scope: !2045)
!2095 = !DILocation(line: 1822, column: 87, scope: !2045)
!2096 = !DILocation(line: 1822, column: 3, scope: !2045)
!2097 = distinct !{!2097, !2055, !2098}
!2098 = !DILocation(line: 1827, column: 3, scope: !2039)
!2099 = !DILocation(line: 1828, column: 2, scope: !2032)
!2100 = !DILocation(line: 1830, column: 6, scope: !2101)
!2101 = distinct !DILexicalBlock(scope: !1968, file: !3, line: 1830, column: 6)
!2102 = !DILocation(line: 1830, column: 12, scope: !2101)
!2103 = !DILocation(line: 1830, column: 24, scope: !2101)
!2104 = !DILocation(line: 1830, column: 30, scope: !2101)
!2105 = !DILocation(line: 1830, column: 39, scope: !2101)
!2106 = !DILocation(line: 1830, column: 21, scope: !2101)
!2107 = !DILocation(line: 1830, column: 6, scope: !1968)
!2108 = !DILocation(line: 1831, column: 21, scope: !2101)
!2109 = !DILocation(line: 1831, column: 3, scope: !2101)
!2110 = !DILocation(line: 1833, column: 28, scope: !1968)
!2111 = !DILocation(line: 1833, column: 2, scope: !1968)
!2112 = !DILocation(line: 1835, column: 2, scope: !1968)
!2113 = !DILocation(line: 1836, column: 1, scope: !1968)
!2114 = distinct !DISubprogram(name: "CustomData_get_layer_index__notypemap", scope: !3, file: !3, line: 1473, type: !1261, scopeLine: 1474, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2115 = !DILocalVariable(name: "data", arg: 1, scope: !2114, file: !3, line: 1473, type: !1263)
!2116 = !DILocation(line: 1473, column: 68, scope: !2114)
!2117 = !DILocalVariable(name: "type", arg: 2, scope: !2114, file: !3, line: 1473, type: !158)
!2118 = !DILocation(line: 1473, column: 78, scope: !2114)
!2119 = !DILocalVariable(name: "i", scope: !2114, file: !3, line: 1475, type: !158)
!2120 = !DILocation(line: 1475, column: 6, scope: !2114)
!2121 = !DILocation(line: 1477, column: 9, scope: !2122)
!2122 = distinct !DILexicalBlock(scope: !2114, file: !3, line: 1477, column: 2)
!2123 = !DILocation(line: 1477, column: 7, scope: !2122)
!2124 = !DILocation(line: 1477, column: 14, scope: !2125)
!2125 = distinct !DILexicalBlock(scope: !2122, file: !3, line: 1477, column: 2)
!2126 = !DILocation(line: 1477, column: 18, scope: !2125)
!2127 = !DILocation(line: 1477, column: 24, scope: !2125)
!2128 = !DILocation(line: 1477, column: 16, scope: !2125)
!2129 = !DILocation(line: 1477, column: 2, scope: !2122)
!2130 = !DILocation(line: 1478, column: 7, scope: !2131)
!2131 = distinct !DILexicalBlock(scope: !2125, file: !3, line: 1478, column: 7)
!2132 = !DILocation(line: 1478, column: 13, scope: !2131)
!2133 = !DILocation(line: 1478, column: 20, scope: !2131)
!2134 = !DILocation(line: 1478, column: 23, scope: !2131)
!2135 = !DILocation(line: 1478, column: 31, scope: !2131)
!2136 = !DILocation(line: 1478, column: 28, scope: !2131)
!2137 = !DILocation(line: 1478, column: 7, scope: !2125)
!2138 = !DILocation(line: 1479, column: 11, scope: !2131)
!2139 = !DILocation(line: 1479, column: 4, scope: !2131)
!2140 = !DILocation(line: 1477, column: 34, scope: !2125)
!2141 = !DILocation(line: 1477, column: 2, scope: !2125)
!2142 = distinct !{!2142, !2129, !2143}
!2143 = !DILocation(line: 1479, column: 11, scope: !2122)
!2144 = !DILocation(line: 1481, column: 2, scope: !2114)
!2145 = !DILocation(line: 1482, column: 1, scope: !2114)
!2146 = distinct !DISubprogram(name: "customData_resize", scope: !3, file: !3, line: 1667, type: !2147, scopeLine: 1668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2147 = !DISubroutineType(types: !2148)
!2148 = !{!158, !488, !158}
!2149 = !DILocalVariable(name: "data", arg: 1, scope: !2146, file: !3, line: 1667, type: !488)
!2150 = !DILocation(line: 1667, column: 42, scope: !2146)
!2151 = !DILocalVariable(name: "amount", arg: 2, scope: !2146, file: !3, line: 1667, type: !158)
!2152 = !DILocation(line: 1667, column: 52, scope: !2146)
!2153 = !DILocalVariable(name: "tmp", scope: !2146, file: !3, line: 1669, type: !493)
!2154 = !DILocation(line: 1669, column: 19, scope: !2146)
!2155 = !DILocation(line: 1669, column: 25, scope: !2146)
!2156 = !DILocation(line: 1669, column: 53, scope: !2146)
!2157 = !DILocation(line: 1669, column: 59, scope: !2146)
!2158 = !DILocation(line: 1669, column: 70, scope: !2146)
!2159 = !DILocation(line: 1669, column: 68, scope: !2146)
!2160 = !DILocation(line: 1669, column: 52, scope: !2146)
!2161 = !DILocation(line: 1669, column: 50, scope: !2146)
!2162 = !DILocation(line: 1671, column: 7, scope: !2163)
!2163 = distinct !DILexicalBlock(scope: !2146, file: !3, line: 1671, column: 6)
!2164 = !DILocation(line: 1671, column: 6, scope: !2146)
!2165 = !DILocation(line: 1671, column: 12, scope: !2163)
!2166 = !DILocation(line: 1673, column: 20, scope: !2146)
!2167 = !DILocation(line: 1673, column: 2, scope: !2146)
!2168 = !DILocation(line: 1673, column: 8, scope: !2146)
!2169 = !DILocation(line: 1673, column: 17, scope: !2146)
!2170 = !DILocation(line: 1674, column: 6, scope: !2171)
!2171 = distinct !DILexicalBlock(scope: !2146, file: !3, line: 1674, column: 6)
!2172 = !DILocation(line: 1674, column: 12, scope: !2171)
!2173 = !DILocation(line: 1674, column: 6, scope: !2146)
!2174 = !DILocation(line: 1675, column: 10, scope: !2175)
!2175 = distinct !DILexicalBlock(scope: !2171, file: !3, line: 1674, column: 20)
!2176 = !DILocation(line: 1675, column: 3, scope: !2175)
!2177 = !DILocation(line: 1675, column: 15, scope: !2175)
!2178 = !DILocation(line: 1675, column: 21, scope: !2175)
!2179 = !DILocation(line: 1675, column: 44, scope: !2175)
!2180 = !DILocation(line: 1675, column: 50, scope: !2175)
!2181 = !DILocation(line: 1675, column: 42, scope: !2175)
!2182 = !DILocation(line: 1676, column: 3, scope: !2175)
!2183 = !DILocation(line: 1676, column: 13, scope: !2175)
!2184 = !DILocation(line: 1676, column: 19, scope: !2175)
!2185 = !DILocation(line: 1677, column: 2, scope: !2175)
!2186 = !DILocation(line: 1678, column: 17, scope: !2146)
!2187 = !DILocation(line: 1678, column: 2, scope: !2146)
!2188 = !DILocation(line: 1678, column: 8, scope: !2146)
!2189 = !DILocation(line: 1678, column: 15, scope: !2146)
!2190 = !DILocation(line: 1680, column: 2, scope: !2146)
!2191 = !DILocation(line: 1681, column: 1, scope: !2146)
!2192 = distinct !DISubprogram(name: "customData_update_offsets", scope: !3, file: !3, line: 1456, type: !486, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2193 = !DILocalVariable(name: "data", arg: 1, scope: !2192, file: !3, line: 1456, type: !488)
!2194 = !DILocation(line: 1456, column: 51, scope: !2192)
!2195 = !DILocalVariable(name: "typeInfo", scope: !2192, file: !3, line: 1458, type: !788)
!2196 = !DILocation(line: 1458, column: 23, scope: !2192)
!2197 = !DILocalVariable(name: "i", scope: !2192, file: !3, line: 1459, type: !158)
!2198 = !DILocation(line: 1459, column: 6, scope: !2192)
!2199 = !DILocalVariable(name: "offset", scope: !2192, file: !3, line: 1459, type: !158)
!2200 = !DILocation(line: 1459, column: 9, scope: !2192)
!2201 = !DILocation(line: 1461, column: 9, scope: !2202)
!2202 = distinct !DILexicalBlock(scope: !2192, file: !3, line: 1461, column: 2)
!2203 = !DILocation(line: 1461, column: 7, scope: !2202)
!2204 = !DILocation(line: 1461, column: 14, scope: !2205)
!2205 = distinct !DILexicalBlock(scope: !2202, file: !3, line: 1461, column: 2)
!2206 = !DILocation(line: 1461, column: 18, scope: !2205)
!2207 = !DILocation(line: 1461, column: 24, scope: !2205)
!2208 = !DILocation(line: 1461, column: 16, scope: !2205)
!2209 = !DILocation(line: 1461, column: 2, scope: !2202)
!2210 = !DILocation(line: 1462, column: 32, scope: !2211)
!2211 = distinct !DILexicalBlock(scope: !2205, file: !3, line: 1461, column: 39)
!2212 = !DILocation(line: 1462, column: 38, scope: !2211)
!2213 = !DILocation(line: 1462, column: 45, scope: !2211)
!2214 = !DILocation(line: 1462, column: 48, scope: !2211)
!2215 = !DILocation(line: 1462, column: 14, scope: !2211)
!2216 = !DILocation(line: 1462, column: 12, scope: !2211)
!2217 = !DILocation(line: 1464, column: 28, scope: !2211)
!2218 = !DILocation(line: 1464, column: 3, scope: !2211)
!2219 = !DILocation(line: 1464, column: 9, scope: !2211)
!2220 = !DILocation(line: 1464, column: 16, scope: !2211)
!2221 = !DILocation(line: 1464, column: 19, scope: !2211)
!2222 = !DILocation(line: 1464, column: 26, scope: !2211)
!2223 = !DILocation(line: 1465, column: 13, scope: !2211)
!2224 = !DILocation(line: 1465, column: 23, scope: !2211)
!2225 = !DILocation(line: 1465, column: 10, scope: !2211)
!2226 = !DILocation(line: 1466, column: 2, scope: !2211)
!2227 = !DILocation(line: 1461, column: 34, scope: !2205)
!2228 = !DILocation(line: 1461, column: 2, scope: !2205)
!2229 = distinct !{!2229, !2209, !2230}
!2230 = !DILocation(line: 1466, column: 2, scope: !2202)
!2231 = !DILocation(line: 1468, column: 18, scope: !2192)
!2232 = !DILocation(line: 1468, column: 2, scope: !2192)
!2233 = !DILocation(line: 1468, column: 8, scope: !2192)
!2234 = !DILocation(line: 1468, column: 16, scope: !2192)
!2235 = !DILocation(line: 1469, column: 28, scope: !2192)
!2236 = !DILocation(line: 1469, column: 2, scope: !2192)
!2237 = !DILocation(line: 1470, column: 1, scope: !2192)
!2238 = distinct !DISubprogram(name: "CustomData_free_layer_active", scope: !3, file: !3, line: 1838, type: !2239, scopeLine: 1839, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2239 = !DISubroutineType(types: !2240)
!2240 = !{!361, !488, !158, !158}
!2241 = !DILocalVariable(name: "data", arg: 1, scope: !2238, file: !3, line: 1838, type: !488)
!2242 = !DILocation(line: 1838, column: 47, scope: !2238)
!2243 = !DILocalVariable(name: "type", arg: 2, scope: !2238, file: !3, line: 1838, type: !158)
!2244 = !DILocation(line: 1838, column: 57, scope: !2238)
!2245 = !DILocalVariable(name: "totelem", arg: 3, scope: !2238, file: !3, line: 1838, type: !158)
!2246 = !DILocation(line: 1838, column: 67, scope: !2238)
!2247 = !DILocalVariable(name: "index", scope: !2238, file: !3, line: 1840, type: !158)
!2248 = !DILocation(line: 1840, column: 6, scope: !2238)
!2249 = !DILocation(line: 1841, column: 44, scope: !2238)
!2250 = !DILocation(line: 1841, column: 50, scope: !2238)
!2251 = !DILocation(line: 1841, column: 10, scope: !2238)
!2252 = !DILocation(line: 1841, column: 8, scope: !2238)
!2253 = !DILocation(line: 1842, column: 6, scope: !2254)
!2254 = distinct !DILexicalBlock(scope: !2238, file: !3, line: 1842, column: 6)
!2255 = !DILocation(line: 1842, column: 12, scope: !2254)
!2256 = !DILocation(line: 1842, column: 6, scope: !2238)
!2257 = !DILocation(line: 1842, column: 19, scope: !2254)
!2258 = !DILocation(line: 1843, column: 31, scope: !2238)
!2259 = !DILocation(line: 1843, column: 37, scope: !2238)
!2260 = !DILocation(line: 1843, column: 43, scope: !2238)
!2261 = !DILocation(line: 1843, column: 52, scope: !2238)
!2262 = !DILocation(line: 1843, column: 9, scope: !2238)
!2263 = !DILocation(line: 1843, column: 2, scope: !2238)
!2264 = !DILocation(line: 1844, column: 1, scope: !2238)
!2265 = distinct !DISubprogram(name: "CustomData_free_layers", scope: !3, file: !3, line: 1847, type: !1534, scopeLine: 1848, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2266 = !DILocalVariable(name: "data", arg: 1, scope: !2265, file: !3, line: 1847, type: !488)
!2267 = !DILocation(line: 1847, column: 41, scope: !2265)
!2268 = !DILocalVariable(name: "type", arg: 2, scope: !2265, file: !3, line: 1847, type: !158)
!2269 = !DILocation(line: 1847, column: 51, scope: !2265)
!2270 = !DILocalVariable(name: "totelem", arg: 3, scope: !2265, file: !3, line: 1847, type: !158)
!2271 = !DILocation(line: 1847, column: 61, scope: !2265)
!2272 = !DILocation(line: 1849, column: 2, scope: !2265)
!2273 = !DILocation(line: 1849, column: 30, scope: !2265)
!2274 = !DILocation(line: 1849, column: 36, scope: !2265)
!2275 = !DILocation(line: 1849, column: 9, scope: !2265)
!2276 = !DILocation(line: 1850, column: 32, scope: !2265)
!2277 = !DILocation(line: 1850, column: 38, scope: !2265)
!2278 = !DILocation(line: 1850, column: 44, scope: !2265)
!2279 = !DILocation(line: 1850, column: 3, scope: !2265)
!2280 = distinct !{!2280, !2272, !2281}
!2281 = !DILocation(line: 1850, column: 51, scope: !2265)
!2282 = !DILocation(line: 1851, column: 1, scope: !2265)
!2283 = distinct !DISubprogram(name: "CustomData_has_layer", scope: !3, file: !3, line: 1853, type: !2284, scopeLine: 1854, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2284 = !DISubroutineType(types: !2285)
!2285 = !{!361, !1263, !158}
!2286 = !DILocalVariable(name: "data", arg: 1, scope: !2283, file: !3, line: 1853, type: !1263)
!2287 = !DILocation(line: 1853, column: 45, scope: !2283)
!2288 = !DILocalVariable(name: "type", arg: 2, scope: !2283, file: !3, line: 1853, type: !158)
!2289 = !DILocation(line: 1853, column: 55, scope: !2283)
!2290 = !DILocation(line: 1855, column: 37, scope: !2283)
!2291 = !DILocation(line: 1855, column: 43, scope: !2283)
!2292 = !DILocation(line: 1855, column: 10, scope: !2283)
!2293 = !DILocation(line: 1855, column: 49, scope: !2283)
!2294 = !DILocation(line: 1855, column: 9, scope: !2283)
!2295 = !DILocation(line: 1855, column: 2, scope: !2283)
!2296 = distinct !DISubprogram(name: "CustomData_number_of_layers", scope: !3, file: !3, line: 1858, type: !1261, scopeLine: 1859, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2297 = !DILocalVariable(name: "data", arg: 1, scope: !2296, file: !3, line: 1858, type: !1263)
!2298 = !DILocation(line: 1858, column: 51, scope: !2296)
!2299 = !DILocalVariable(name: "type", arg: 2, scope: !2296, file: !3, line: 1858, type: !158)
!2300 = !DILocation(line: 1858, column: 61, scope: !2296)
!2301 = !DILocalVariable(name: "i", scope: !2296, file: !3, line: 1860, type: !158)
!2302 = !DILocation(line: 1860, column: 6, scope: !2296)
!2303 = !DILocalVariable(name: "number", scope: !2296, file: !3, line: 1860, type: !158)
!2304 = !DILocation(line: 1860, column: 9, scope: !2296)
!2305 = !DILocation(line: 1862, column: 9, scope: !2306)
!2306 = distinct !DILexicalBlock(scope: !2296, file: !3, line: 1862, column: 2)
!2307 = !DILocation(line: 1862, column: 7, scope: !2306)
!2308 = !DILocation(line: 1862, column: 14, scope: !2309)
!2309 = distinct !DILexicalBlock(scope: !2306, file: !3, line: 1862, column: 2)
!2310 = !DILocation(line: 1862, column: 18, scope: !2309)
!2311 = !DILocation(line: 1862, column: 24, scope: !2309)
!2312 = !DILocation(line: 1862, column: 16, scope: !2309)
!2313 = !DILocation(line: 1862, column: 2, scope: !2306)
!2314 = !DILocation(line: 1863, column: 7, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2309, file: !3, line: 1863, column: 7)
!2316 = !DILocation(line: 1863, column: 13, scope: !2315)
!2317 = !DILocation(line: 1863, column: 20, scope: !2315)
!2318 = !DILocation(line: 1863, column: 23, scope: !2315)
!2319 = !DILocation(line: 1863, column: 31, scope: !2315)
!2320 = !DILocation(line: 1863, column: 28, scope: !2315)
!2321 = !DILocation(line: 1863, column: 7, scope: !2309)
!2322 = !DILocation(line: 1864, column: 10, scope: !2315)
!2323 = !DILocation(line: 1864, column: 4, scope: !2315)
!2324 = !DILocation(line: 1862, column: 35, scope: !2309)
!2325 = !DILocation(line: 1862, column: 2, scope: !2309)
!2326 = distinct !{!2326, !2313, !2327}
!2327 = !DILocation(line: 1864, column: 10, scope: !2306)
!2328 = !DILocation(line: 1866, column: 9, scope: !2296)
!2329 = !DILocation(line: 1866, column: 2, scope: !2296)
!2330 = distinct !DISubprogram(name: "CustomData_number_of_layers_typemask", scope: !3, file: !3, line: 1869, type: !2331, scopeLine: 1870, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2331 = !DISubroutineType(types: !2332)
!2332 = !{!158, !1263, !140}
!2333 = !DILocalVariable(name: "data", arg: 1, scope: !2330, file: !3, line: 1869, type: !1263)
!2334 = !DILocation(line: 1869, column: 60, scope: !2330)
!2335 = !DILocalVariable(name: "mask", arg: 2, scope: !2330, file: !3, line: 1869, type: !140)
!2336 = !DILocation(line: 1869, column: 81, scope: !2330)
!2337 = !DILocalVariable(name: "i", scope: !2330, file: !3, line: 1871, type: !158)
!2338 = !DILocation(line: 1871, column: 6, scope: !2330)
!2339 = !DILocalVariable(name: "number", scope: !2330, file: !3, line: 1871, type: !158)
!2340 = !DILocation(line: 1871, column: 9, scope: !2330)
!2341 = !DILocation(line: 1873, column: 9, scope: !2342)
!2342 = distinct !DILexicalBlock(scope: !2330, file: !3, line: 1873, column: 2)
!2343 = !DILocation(line: 1873, column: 7, scope: !2342)
!2344 = !DILocation(line: 1873, column: 14, scope: !2345)
!2345 = distinct !DILexicalBlock(scope: !2342, file: !3, line: 1873, column: 2)
!2346 = !DILocation(line: 1873, column: 18, scope: !2345)
!2347 = !DILocation(line: 1873, column: 24, scope: !2345)
!2348 = !DILocation(line: 1873, column: 16, scope: !2345)
!2349 = !DILocation(line: 1873, column: 2, scope: !2342)
!2350 = !DILocation(line: 1874, column: 7, scope: !2351)
!2351 = distinct !DILexicalBlock(scope: !2345, file: !3, line: 1874, column: 7)
!2352 = !DILocation(line: 1874, column: 14, scope: !2351)
!2353 = !DILocation(line: 1874, column: 12, scope: !2351)
!2354 = !DILocation(line: 1874, column: 7, scope: !2345)
!2355 = !DILocation(line: 1875, column: 10, scope: !2351)
!2356 = !DILocation(line: 1875, column: 4, scope: !2351)
!2357 = !DILocation(line: 1873, column: 35, scope: !2345)
!2358 = !DILocation(line: 1873, column: 2, scope: !2345)
!2359 = distinct !{!2359, !2349, !2360}
!2360 = !DILocation(line: 1875, column: 10, scope: !2342)
!2361 = !DILocation(line: 1877, column: 9, scope: !2330)
!2362 = !DILocation(line: 1877, column: 2, scope: !2330)
!2363 = distinct !DISubprogram(name: "CustomData_duplicate_referenced_layer", scope: !3, file: !3, line: 1880, type: !2364, scopeLine: 1881, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2364 = !DISubroutineType(types: !2365)
!2365 = !{!146, !594, !352, !352}
!2366 = !DILocalVariable(name: "data", arg: 1, scope: !2363, file: !3, line: 1880, type: !594)
!2367 = !DILocation(line: 1880, column: 64, scope: !2363)
!2368 = !DILocalVariable(name: "type", arg: 2, scope: !2363, file: !3, line: 1880, type: !352)
!2369 = !DILocation(line: 1880, column: 80, scope: !2363)
!2370 = !DILocalVariable(name: "totelem", arg: 3, scope: !2363, file: !3, line: 1880, type: !352)
!2371 = !DILocation(line: 1880, column: 96, scope: !2363)
!2372 = !DILocalVariable(name: "layer", scope: !2363, file: !3, line: 1882, type: !493)
!2373 = !DILocation(line: 1882, column: 19, scope: !2363)
!2374 = !DILocalVariable(name: "layer_index", scope: !2363, file: !3, line: 1883, type: !158)
!2375 = !DILocation(line: 1883, column: 6, scope: !2363)
!2376 = !DILocation(line: 1886, column: 50, scope: !2363)
!2377 = !DILocation(line: 1886, column: 56, scope: !2363)
!2378 = !DILocation(line: 1886, column: 16, scope: !2363)
!2379 = !DILocation(line: 1886, column: 14, scope: !2363)
!2380 = !DILocation(line: 1887, column: 6, scope: !2381)
!2381 = distinct !DILexicalBlock(scope: !2363, file: !3, line: 1887, column: 6)
!2382 = !DILocation(line: 1887, column: 18, scope: !2381)
!2383 = !DILocation(line: 1887, column: 6, scope: !2363)
!2384 = !DILocation(line: 1887, column: 25, scope: !2381)
!2385 = !DILocation(line: 1889, column: 11, scope: !2363)
!2386 = !DILocation(line: 1889, column: 17, scope: !2363)
!2387 = !DILocation(line: 1889, column: 24, scope: !2363)
!2388 = !DILocation(line: 1889, column: 8, scope: !2363)
!2389 = !DILocation(line: 1891, column: 6, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2363, file: !3, line: 1891, column: 6)
!2391 = !DILocation(line: 1891, column: 13, scope: !2390)
!2392 = !DILocation(line: 1891, column: 18, scope: !2390)
!2393 = !DILocation(line: 1891, column: 6, scope: !2363)
!2394 = !DILocalVariable(name: "typeInfo", scope: !2395, file: !3, line: 1896, type: !788)
!2395 = distinct !DILexicalBlock(scope: !2390, file: !3, line: 1891, column: 36)
!2396 = !DILocation(line: 1896, column: 24, scope: !2395)
!2397 = !DILocation(line: 1896, column: 53, scope: !2395)
!2398 = !DILocation(line: 1896, column: 60, scope: !2395)
!2399 = !DILocation(line: 1896, column: 35, scope: !2395)
!2400 = !DILocation(line: 1898, column: 7, scope: !2401)
!2401 = distinct !DILexicalBlock(scope: !2395, file: !3, line: 1898, column: 7)
!2402 = !DILocation(line: 1898, column: 17, scope: !2401)
!2403 = !DILocation(line: 1898, column: 7, scope: !2395)
!2404 = !DILocalVariable(name: "dest_data", scope: !2405, file: !3, line: 1899, type: !147)
!2405 = distinct !DILexicalBlock(scope: !2401, file: !3, line: 1898, column: 23)
!2406 = !DILocation(line: 1899, column: 10, scope: !2405)
!2407 = !DILocation(line: 1899, column: 22, scope: !2405)
!2408 = !DILocation(line: 1899, column: 34, scope: !2405)
!2409 = !DILocation(line: 1899, column: 44, scope: !2405)
!2410 = !DILocation(line: 1899, column: 51, scope: !2405)
!2411 = !DILocation(line: 1899, column: 49, scope: !2405)
!2412 = !DILocation(line: 1900, column: 4, scope: !2405)
!2413 = !DILocation(line: 1900, column: 14, scope: !2405)
!2414 = !DILocation(line: 1900, column: 19, scope: !2405)
!2415 = !DILocation(line: 1900, column: 26, scope: !2405)
!2416 = !DILocation(line: 1900, column: 32, scope: !2405)
!2417 = !DILocation(line: 1900, column: 43, scope: !2405)
!2418 = !DILocation(line: 1901, column: 18, scope: !2405)
!2419 = !DILocation(line: 1901, column: 4, scope: !2405)
!2420 = !DILocation(line: 1901, column: 11, scope: !2405)
!2421 = !DILocation(line: 1901, column: 16, scope: !2405)
!2422 = !DILocation(line: 1902, column: 3, scope: !2405)
!2423 = !DILocation(line: 1904, column: 18, scope: !2401)
!2424 = !DILocation(line: 1904, column: 32, scope: !2401)
!2425 = !DILocation(line: 1904, column: 39, scope: !2401)
!2426 = !DILocation(line: 1904, column: 4, scope: !2401)
!2427 = !DILocation(line: 1904, column: 11, scope: !2401)
!2428 = !DILocation(line: 1904, column: 16, scope: !2401)
!2429 = !DILocation(line: 1906, column: 3, scope: !2395)
!2430 = !DILocation(line: 1906, column: 10, scope: !2395)
!2431 = !DILocation(line: 1906, column: 15, scope: !2395)
!2432 = !DILocation(line: 1907, column: 2, scope: !2395)
!2433 = !DILocation(line: 1909, column: 9, scope: !2363)
!2434 = !DILocation(line: 1909, column: 16, scope: !2363)
!2435 = !DILocation(line: 1909, column: 2, scope: !2363)
!2436 = !DILocation(line: 1910, column: 1, scope: !2363)
!2437 = distinct !DISubprogram(name: "CustomData_duplicate_referenced_layer_named", scope: !3, file: !3, line: 1912, type: !2438, scopeLine: 1914, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2438 = !DISubroutineType(types: !2439)
!2439 = !{!146, !594, !352, !316, !352}
!2440 = !DILocalVariable(name: "data", arg: 1, scope: !2437, file: !3, line: 1912, type: !594)
!2441 = !DILocation(line: 1912, column: 70, scope: !2437)
!2442 = !DILocalVariable(name: "type", arg: 2, scope: !2437, file: !3, line: 1913, type: !352)
!2443 = !DILocation(line: 1913, column: 61, scope: !2437)
!2444 = !DILocalVariable(name: "name", arg: 3, scope: !2437, file: !3, line: 1913, type: !316)
!2445 = !DILocation(line: 1913, column: 79, scope: !2437)
!2446 = !DILocalVariable(name: "totelem", arg: 4, scope: !2437, file: !3, line: 1913, type: !352)
!2447 = !DILocation(line: 1913, column: 95, scope: !2437)
!2448 = !DILocalVariable(name: "layer", scope: !2437, file: !3, line: 1915, type: !493)
!2449 = !DILocation(line: 1915, column: 19, scope: !2437)
!2450 = !DILocalVariable(name: "layer_index", scope: !2437, file: !3, line: 1916, type: !158)
!2451 = !DILocation(line: 1916, column: 6, scope: !2437)
!2452 = !DILocation(line: 1919, column: 49, scope: !2437)
!2453 = !DILocation(line: 1919, column: 55, scope: !2437)
!2454 = !DILocation(line: 1919, column: 61, scope: !2437)
!2455 = !DILocation(line: 1919, column: 16, scope: !2437)
!2456 = !DILocation(line: 1919, column: 14, scope: !2437)
!2457 = !DILocation(line: 1920, column: 6, scope: !2458)
!2458 = distinct !DILexicalBlock(scope: !2437, file: !3, line: 1920, column: 6)
!2459 = !DILocation(line: 1920, column: 18, scope: !2458)
!2460 = !DILocation(line: 1920, column: 6, scope: !2437)
!2461 = !DILocation(line: 1920, column: 25, scope: !2458)
!2462 = !DILocation(line: 1922, column: 11, scope: !2437)
!2463 = !DILocation(line: 1922, column: 17, scope: !2437)
!2464 = !DILocation(line: 1922, column: 24, scope: !2437)
!2465 = !DILocation(line: 1922, column: 8, scope: !2437)
!2466 = !DILocation(line: 1924, column: 6, scope: !2467)
!2467 = distinct !DILexicalBlock(scope: !2437, file: !3, line: 1924, column: 6)
!2468 = !DILocation(line: 1924, column: 13, scope: !2467)
!2469 = !DILocation(line: 1924, column: 18, scope: !2467)
!2470 = !DILocation(line: 1924, column: 6, scope: !2437)
!2471 = !DILocalVariable(name: "typeInfo", scope: !2472, file: !3, line: 1929, type: !788)
!2472 = distinct !DILexicalBlock(scope: !2467, file: !3, line: 1924, column: 36)
!2473 = !DILocation(line: 1929, column: 24, scope: !2472)
!2474 = !DILocation(line: 1929, column: 53, scope: !2472)
!2475 = !DILocation(line: 1929, column: 60, scope: !2472)
!2476 = !DILocation(line: 1929, column: 35, scope: !2472)
!2477 = !DILocation(line: 1931, column: 7, scope: !2478)
!2478 = distinct !DILexicalBlock(scope: !2472, file: !3, line: 1931, column: 7)
!2479 = !DILocation(line: 1931, column: 17, scope: !2478)
!2480 = !DILocation(line: 1931, column: 7, scope: !2472)
!2481 = !DILocalVariable(name: "dest_data", scope: !2482, file: !3, line: 1932, type: !147)
!2482 = distinct !DILexicalBlock(scope: !2478, file: !3, line: 1931, column: 23)
!2483 = !DILocation(line: 1932, column: 10, scope: !2482)
!2484 = !DILocation(line: 1932, column: 22, scope: !2482)
!2485 = !DILocation(line: 1932, column: 34, scope: !2482)
!2486 = !DILocation(line: 1932, column: 44, scope: !2482)
!2487 = !DILocation(line: 1932, column: 51, scope: !2482)
!2488 = !DILocation(line: 1932, column: 49, scope: !2482)
!2489 = !DILocation(line: 1933, column: 4, scope: !2482)
!2490 = !DILocation(line: 1933, column: 14, scope: !2482)
!2491 = !DILocation(line: 1933, column: 19, scope: !2482)
!2492 = !DILocation(line: 1933, column: 26, scope: !2482)
!2493 = !DILocation(line: 1933, column: 32, scope: !2482)
!2494 = !DILocation(line: 1933, column: 43, scope: !2482)
!2495 = !DILocation(line: 1934, column: 18, scope: !2482)
!2496 = !DILocation(line: 1934, column: 4, scope: !2482)
!2497 = !DILocation(line: 1934, column: 11, scope: !2482)
!2498 = !DILocation(line: 1934, column: 16, scope: !2482)
!2499 = !DILocation(line: 1935, column: 3, scope: !2482)
!2500 = !DILocation(line: 1937, column: 18, scope: !2478)
!2501 = !DILocation(line: 1937, column: 32, scope: !2478)
!2502 = !DILocation(line: 1937, column: 39, scope: !2478)
!2503 = !DILocation(line: 1937, column: 4, scope: !2478)
!2504 = !DILocation(line: 1937, column: 11, scope: !2478)
!2505 = !DILocation(line: 1937, column: 16, scope: !2478)
!2506 = !DILocation(line: 1939, column: 3, scope: !2472)
!2507 = !DILocation(line: 1939, column: 10, scope: !2472)
!2508 = !DILocation(line: 1939, column: 15, scope: !2472)
!2509 = !DILocation(line: 1940, column: 2, scope: !2472)
!2510 = !DILocation(line: 1942, column: 9, scope: !2437)
!2511 = !DILocation(line: 1942, column: 16, scope: !2437)
!2512 = !DILocation(line: 1942, column: 2, scope: !2437)
!2513 = !DILocation(line: 1943, column: 1, scope: !2437)
!2514 = distinct !DISubprogram(name: "CustomData_is_referenced_layer", scope: !3, file: !3, line: 1945, type: !2515, scopeLine: 1946, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2515 = !DISubroutineType(types: !2516)
!2516 = !{!361, !594, !158}
!2517 = !DILocalVariable(name: "data", arg: 1, scope: !2514, file: !3, line: 1945, type: !594)
!2518 = !DILocation(line: 1945, column: 56, scope: !2514)
!2519 = !DILocalVariable(name: "type", arg: 2, scope: !2514, file: !3, line: 1945, type: !158)
!2520 = !DILocation(line: 1945, column: 66, scope: !2514)
!2521 = !DILocalVariable(name: "layer", scope: !2514, file: !3, line: 1947, type: !493)
!2522 = !DILocation(line: 1947, column: 19, scope: !2514)
!2523 = !DILocalVariable(name: "layer_index", scope: !2514, file: !3, line: 1948, type: !158)
!2524 = !DILocation(line: 1948, column: 6, scope: !2514)
!2525 = !DILocation(line: 1951, column: 50, scope: !2514)
!2526 = !DILocation(line: 1951, column: 56, scope: !2514)
!2527 = !DILocation(line: 1951, column: 16, scope: !2514)
!2528 = !DILocation(line: 1951, column: 14, scope: !2514)
!2529 = !DILocation(line: 1952, column: 6, scope: !2530)
!2530 = distinct !DILexicalBlock(scope: !2514, file: !3, line: 1952, column: 6)
!2531 = !DILocation(line: 1952, column: 18, scope: !2530)
!2532 = !DILocation(line: 1952, column: 6, scope: !2514)
!2533 = !DILocation(line: 1952, column: 25, scope: !2530)
!2534 = !DILocation(line: 1954, column: 11, scope: !2514)
!2535 = !DILocation(line: 1954, column: 17, scope: !2514)
!2536 = !DILocation(line: 1954, column: 24, scope: !2514)
!2537 = !DILocation(line: 1954, column: 8, scope: !2514)
!2538 = !DILocation(line: 1956, column: 10, scope: !2514)
!2539 = !DILocation(line: 1956, column: 17, scope: !2514)
!2540 = !DILocation(line: 1956, column: 22, scope: !2514)
!2541 = !DILocation(line: 1956, column: 40, scope: !2514)
!2542 = !DILocation(line: 1956, column: 9, scope: !2514)
!2543 = !DILocation(line: 1956, column: 2, scope: !2514)
!2544 = !DILocation(line: 1957, column: 1, scope: !2514)
!2545 = distinct !DISubprogram(name: "CustomData_free_temporary", scope: !3, file: !3, line: 1959, type: !1164, scopeLine: 1960, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2546 = !DILocalVariable(name: "data", arg: 1, scope: !2545, file: !3, line: 1959, type: !488)
!2547 = !DILocation(line: 1959, column: 44, scope: !2545)
!2548 = !DILocalVariable(name: "totelem", arg: 2, scope: !2545, file: !3, line: 1959, type: !158)
!2549 = !DILocation(line: 1959, column: 54, scope: !2545)
!2550 = !DILocalVariable(name: "layer", scope: !2545, file: !3, line: 1961, type: !493)
!2551 = !DILocation(line: 1961, column: 19, scope: !2545)
!2552 = !DILocalVariable(name: "i", scope: !2545, file: !3, line: 1962, type: !158)
!2553 = !DILocation(line: 1962, column: 6, scope: !2545)
!2554 = !DILocalVariable(name: "j", scope: !2545, file: !3, line: 1962, type: !158)
!2555 = !DILocation(line: 1962, column: 9, scope: !2545)
!2556 = !DILocalVariable(name: "changed", scope: !2545, file: !3, line: 1963, type: !361)
!2557 = !DILocation(line: 1963, column: 7, scope: !2545)
!2558 = !DILocation(line: 1965, column: 9, scope: !2559)
!2559 = distinct !DILexicalBlock(scope: !2545, file: !3, line: 1965, column: 2)
!2560 = !DILocation(line: 1965, column: 16, scope: !2559)
!2561 = !DILocation(line: 1965, column: 7, scope: !2559)
!2562 = !DILocation(line: 1965, column: 21, scope: !2563)
!2563 = distinct !DILexicalBlock(scope: !2559, file: !3, line: 1965, column: 2)
!2564 = !DILocation(line: 1965, column: 25, scope: !2563)
!2565 = !DILocation(line: 1965, column: 31, scope: !2563)
!2566 = !DILocation(line: 1965, column: 23, scope: !2563)
!2567 = !DILocation(line: 1965, column: 2, scope: !2559)
!2568 = !DILocation(line: 1966, column: 12, scope: !2569)
!2569 = distinct !DILexicalBlock(scope: !2563, file: !3, line: 1965, column: 46)
!2570 = !DILocation(line: 1966, column: 18, scope: !2569)
!2571 = !DILocation(line: 1966, column: 25, scope: !2569)
!2572 = !DILocation(line: 1966, column: 9, scope: !2569)
!2573 = !DILocation(line: 1968, column: 7, scope: !2574)
!2574 = distinct !DILexicalBlock(scope: !2569, file: !3, line: 1968, column: 7)
!2575 = !DILocation(line: 1968, column: 12, scope: !2574)
!2576 = !DILocation(line: 1968, column: 9, scope: !2574)
!2577 = !DILocation(line: 1968, column: 7, scope: !2569)
!2578 = !DILocation(line: 1969, column: 4, scope: !2574)
!2579 = !DILocation(line: 1969, column: 10, scope: !2574)
!2580 = !DILocation(line: 1969, column: 17, scope: !2574)
!2581 = !DILocation(line: 1969, column: 22, scope: !2574)
!2582 = !DILocation(line: 1969, column: 28, scope: !2574)
!2583 = !DILocation(line: 1969, column: 35, scope: !2574)
!2584 = !DILocation(line: 1971, column: 8, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2569, file: !3, line: 1971, column: 7)
!2586 = !DILocation(line: 1971, column: 15, scope: !2585)
!2587 = !DILocation(line: 1971, column: 20, scope: !2585)
!2588 = !DILocation(line: 1971, column: 41, scope: !2585)
!2589 = !DILocation(line: 1971, column: 7, scope: !2569)
!2590 = !DILocation(line: 1972, column: 36, scope: !2591)
!2591 = distinct !DILexicalBlock(scope: !2585, file: !3, line: 1971, column: 63)
!2592 = !DILocation(line: 1972, column: 43, scope: !2591)
!2593 = !DILocation(line: 1972, column: 4, scope: !2591)
!2594 = !DILocation(line: 1973, column: 12, scope: !2591)
!2595 = !DILocation(line: 1974, column: 3, scope: !2591)
!2596 = !DILocation(line: 1976, column: 5, scope: !2585)
!2597 = !DILocation(line: 1977, column: 2, scope: !2569)
!2598 = !DILocation(line: 1965, column: 41, scope: !2563)
!2599 = !DILocation(line: 1965, column: 2, scope: !2563)
!2600 = distinct !{!2600, !2567, !2601}
!2601 = !DILocation(line: 1977, column: 2, scope: !2559)
!2602 = !DILocation(line: 1979, column: 19, scope: !2545)
!2603 = !DILocation(line: 1979, column: 2, scope: !2545)
!2604 = !DILocation(line: 1979, column: 8, scope: !2545)
!2605 = !DILocation(line: 1979, column: 17, scope: !2545)
!2606 = !DILocation(line: 1981, column: 6, scope: !2607)
!2607 = distinct !DILexicalBlock(scope: !2545, file: !3, line: 1981, column: 6)
!2608 = !DILocation(line: 1981, column: 12, scope: !2607)
!2609 = !DILocation(line: 1981, column: 24, scope: !2607)
!2610 = !DILocation(line: 1981, column: 30, scope: !2607)
!2611 = !DILocation(line: 1981, column: 39, scope: !2607)
!2612 = !DILocation(line: 1981, column: 21, scope: !2607)
!2613 = !DILocation(line: 1981, column: 6, scope: !2545)
!2614 = !DILocation(line: 1982, column: 21, scope: !2615)
!2615 = distinct !DILexicalBlock(scope: !2607, file: !3, line: 1981, column: 58)
!2616 = !DILocation(line: 1982, column: 3, scope: !2615)
!2617 = !DILocation(line: 1983, column: 11, scope: !2615)
!2618 = !DILocation(line: 1984, column: 2, scope: !2615)
!2619 = !DILocation(line: 1986, column: 6, scope: !2620)
!2620 = distinct !DILexicalBlock(scope: !2545, file: !3, line: 1986, column: 6)
!2621 = !DILocation(line: 1986, column: 6, scope: !2545)
!2622 = !DILocation(line: 1987, column: 29, scope: !2623)
!2623 = distinct !DILexicalBlock(scope: !2620, file: !3, line: 1986, column: 15)
!2624 = !DILocation(line: 1987, column: 3, scope: !2623)
!2625 = !DILocation(line: 1988, column: 2, scope: !2623)
!2626 = !DILocation(line: 1989, column: 1, scope: !2545)
!2627 = distinct !DISubprogram(name: "CustomData_set_only_copy", scope: !3, file: !3, line: 1991, type: !2628, scopeLine: 1993, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2628 = !DISubroutineType(types: !2629)
!2629 = !{null, !592, !140}
!2630 = !DILocalVariable(name: "data", arg: 1, scope: !2627, file: !3, line: 1991, type: !592)
!2631 = !DILocation(line: 1991, column: 56, scope: !2627)
!2632 = !DILocalVariable(name: "mask", arg: 2, scope: !2627, file: !3, line: 1992, type: !140)
!2633 = !DILocation(line: 1992, column: 46, scope: !2627)
!2634 = !DILocalVariable(name: "i", scope: !2627, file: !3, line: 1994, type: !158)
!2635 = !DILocation(line: 1994, column: 6, scope: !2627)
!2636 = !DILocation(line: 1996, column: 9, scope: !2637)
!2637 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 1996, column: 2)
!2638 = !DILocation(line: 1996, column: 7, scope: !2637)
!2639 = !DILocation(line: 1996, column: 14, scope: !2640)
!2640 = distinct !DILexicalBlock(scope: !2637, file: !3, line: 1996, column: 2)
!2641 = !DILocation(line: 1996, column: 18, scope: !2640)
!2642 = !DILocation(line: 1996, column: 24, scope: !2640)
!2643 = !DILocation(line: 1996, column: 16, scope: !2640)
!2644 = !DILocation(line: 1996, column: 2, scope: !2637)
!2645 = !DILocation(line: 1997, column: 9, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2640, file: !3, line: 1997, column: 7)
!2647 = !DILocation(line: 1997, column: 16, scope: !2646)
!2648 = !DILocation(line: 1997, column: 14, scope: !2646)
!2649 = !DILocation(line: 1997, column: 7, scope: !2640)
!2650 = !DILocation(line: 1998, column: 4, scope: !2646)
!2651 = !DILocation(line: 1998, column: 10, scope: !2646)
!2652 = !DILocation(line: 1998, column: 17, scope: !2646)
!2653 = !DILocation(line: 1998, column: 20, scope: !2646)
!2654 = !DILocation(line: 1998, column: 25, scope: !2646)
!2655 = !DILocation(line: 1997, column: 53, scope: !2646)
!2656 = !DILocation(line: 1996, column: 34, scope: !2640)
!2657 = !DILocation(line: 1996, column: 2, scope: !2640)
!2658 = distinct !{!2658, !2644, !2659}
!2659 = !DILocation(line: 1998, column: 28, scope: !2637)
!2660 = !DILocation(line: 1999, column: 1, scope: !2627)
!2661 = distinct !DISubprogram(name: "CustomData_copy_elements", scope: !3, file: !3, line: 2001, type: !2662, scopeLine: 2002, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2662 = !DISubroutineType(types: !2663)
!2663 = !{null, !158, !146, !146, !158}
!2664 = !DILocalVariable(name: "type", arg: 1, scope: !2661, file: !3, line: 2001, type: !158)
!2665 = !DILocation(line: 2001, column: 35, scope: !2661)
!2666 = !DILocalVariable(name: "source", arg: 2, scope: !2661, file: !3, line: 2001, type: !146)
!2667 = !DILocation(line: 2001, column: 47, scope: !2661)
!2668 = !DILocalVariable(name: "dest", arg: 3, scope: !2661, file: !3, line: 2001, type: !146)
!2669 = !DILocation(line: 2001, column: 61, scope: !2661)
!2670 = !DILocalVariable(name: "count", arg: 4, scope: !2661, file: !3, line: 2001, type: !158)
!2671 = !DILocation(line: 2001, column: 71, scope: !2661)
!2672 = !DILocalVariable(name: "typeInfo", scope: !2661, file: !3, line: 2003, type: !788)
!2673 = !DILocation(line: 2003, column: 23, scope: !2661)
!2674 = !DILocation(line: 2003, column: 52, scope: !2661)
!2675 = !DILocation(line: 2003, column: 34, scope: !2661)
!2676 = !DILocation(line: 2005, column: 6, scope: !2677)
!2677 = distinct !DILexicalBlock(scope: !2661, file: !3, line: 2005, column: 6)
!2678 = !DILocation(line: 2005, column: 16, scope: !2677)
!2679 = !DILocation(line: 2005, column: 6, scope: !2661)
!2680 = !DILocation(line: 2006, column: 3, scope: !2677)
!2681 = !DILocation(line: 2006, column: 13, scope: !2677)
!2682 = !DILocation(line: 2006, column: 18, scope: !2677)
!2683 = !DILocation(line: 2006, column: 26, scope: !2677)
!2684 = !DILocation(line: 2006, column: 32, scope: !2677)
!2685 = !DILocation(line: 2008, column: 10, scope: !2677)
!2686 = !DILocation(line: 2008, column: 16, scope: !2677)
!2687 = !DILocation(line: 2008, column: 24, scope: !2677)
!2688 = !DILocation(line: 2008, column: 34, scope: !2677)
!2689 = !DILocation(line: 2008, column: 41, scope: !2677)
!2690 = !DILocation(line: 2008, column: 39, scope: !2677)
!2691 = !DILocation(line: 2008, column: 3, scope: !2677)
!2692 = !DILocation(line: 2009, column: 1, scope: !2661)
!2693 = distinct !DISubprogram(name: "CustomData_copy_data_named", scope: !3, file: !3, line: 2045, type: !2694, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2694 = !DISubroutineType(types: !2695)
!2695 = !{null, !1263, !488, !158, !158, !158}
!2696 = !DILocalVariable(name: "source", arg: 1, scope: !2693, file: !3, line: 2045, type: !1263)
!2697 = !DILocation(line: 2045, column: 51, scope: !2693)
!2698 = !DILocalVariable(name: "dest", arg: 2, scope: !2693, file: !3, line: 2045, type: !488)
!2699 = !DILocation(line: 2045, column: 71, scope: !2693)
!2700 = !DILocalVariable(name: "source_index", arg: 3, scope: !2693, file: !3, line: 2046, type: !158)
!2701 = !DILocation(line: 2046, column: 37, scope: !2693)
!2702 = !DILocalVariable(name: "dest_index", arg: 4, scope: !2693, file: !3, line: 2046, type: !158)
!2703 = !DILocation(line: 2046, column: 55, scope: !2693)
!2704 = !DILocalVariable(name: "count", arg: 5, scope: !2693, file: !3, line: 2046, type: !158)
!2705 = !DILocation(line: 2046, column: 71, scope: !2693)
!2706 = !DILocalVariable(name: "src_i", scope: !2693, file: !3, line: 2048, type: !158)
!2707 = !DILocation(line: 2048, column: 6, scope: !2693)
!2708 = !DILocalVariable(name: "dest_i", scope: !2693, file: !3, line: 2048, type: !158)
!2709 = !DILocation(line: 2048, column: 13, scope: !2693)
!2710 = !DILocation(line: 2051, column: 13, scope: !2711)
!2711 = distinct !DILexicalBlock(scope: !2693, file: !3, line: 2051, column: 2)
!2712 = !DILocation(line: 2051, column: 7, scope: !2711)
!2713 = !DILocation(line: 2051, column: 18, scope: !2714)
!2714 = distinct !DILexicalBlock(scope: !2711, file: !3, line: 2051, column: 2)
!2715 = !DILocation(line: 2051, column: 26, scope: !2714)
!2716 = !DILocation(line: 2051, column: 34, scope: !2714)
!2717 = !DILocation(line: 2051, column: 24, scope: !2714)
!2718 = !DILocation(line: 2051, column: 2, scope: !2711)
!2719 = !DILocation(line: 2053, column: 45, scope: !2720)
!2720 = distinct !DILexicalBlock(scope: !2714, file: !3, line: 2051, column: 53)
!2721 = !DILocation(line: 2053, column: 51, scope: !2720)
!2722 = !DILocation(line: 2053, column: 59, scope: !2720)
!2723 = !DILocation(line: 2053, column: 66, scope: !2720)
!2724 = !DILocation(line: 2053, column: 73, scope: !2720)
!2725 = !DILocation(line: 2053, column: 79, scope: !2720)
!2726 = !DILocation(line: 2053, column: 87, scope: !2720)
!2727 = !DILocation(line: 2053, column: 94, scope: !2720)
!2728 = !DILocation(line: 2053, column: 101, scope: !2720)
!2729 = !DILocation(line: 2053, column: 12, scope: !2720)
!2730 = !DILocation(line: 2053, column: 10, scope: !2720)
!2731 = !DILocation(line: 2056, column: 7, scope: !2732)
!2732 = distinct !DILexicalBlock(scope: !2720, file: !3, line: 2056, column: 7)
!2733 = !DILocation(line: 2056, column: 14, scope: !2732)
!2734 = !DILocation(line: 2056, column: 7, scope: !2720)
!2735 = !DILocation(line: 2057, column: 31, scope: !2736)
!2736 = distinct !DILexicalBlock(scope: !2732, file: !3, line: 2056, column: 21)
!2737 = !DILocation(line: 2057, column: 39, scope: !2736)
!2738 = !DILocation(line: 2057, column: 45, scope: !2736)
!2739 = !DILocation(line: 2057, column: 52, scope: !2736)
!2740 = !DILocation(line: 2057, column: 60, scope: !2736)
!2741 = !DILocation(line: 2057, column: 74, scope: !2736)
!2742 = !DILocation(line: 2057, column: 86, scope: !2736)
!2743 = !DILocation(line: 2057, column: 4, scope: !2736)
!2744 = !DILocation(line: 2058, column: 3, scope: !2736)
!2745 = !DILocation(line: 2059, column: 2, scope: !2720)
!2746 = !DILocation(line: 2051, column: 44, scope: !2714)
!2747 = !DILocation(line: 2051, column: 2, scope: !2714)
!2748 = distinct !{!2748, !2718, !2749}
!2749 = !DILocation(line: 2059, column: 2, scope: !2711)
!2750 = !DILocation(line: 2060, column: 1, scope: !2693)
!2751 = distinct !DISubprogram(name: "CustomData_copy_data_layer", scope: !3, file: !3, line: 2011, type: !2752, scopeLine: 2013, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2752 = !DISubroutineType(types: !2753)
!2753 = !{null, !1263, !488, !158, !158, !158, !158, !158}
!2754 = !DILocalVariable(name: "source", arg: 1, scope: !2751, file: !3, line: 2011, type: !1263)
!2755 = !DILocation(line: 2011, column: 58, scope: !2751)
!2756 = !DILocalVariable(name: "dest", arg: 2, scope: !2751, file: !3, line: 2011, type: !488)
!2757 = !DILocation(line: 2011, column: 78, scope: !2751)
!2758 = !DILocalVariable(name: "src_i", arg: 3, scope: !2751, file: !3, line: 2012, type: !158)
!2759 = !DILocation(line: 2012, column: 44, scope: !2751)
!2760 = !DILocalVariable(name: "dest_i", arg: 4, scope: !2751, file: !3, line: 2012, type: !158)
!2761 = !DILocation(line: 2012, column: 55, scope: !2751)
!2762 = !DILocalVariable(name: "source_index", arg: 5, scope: !2751, file: !3, line: 2013, type: !158)
!2763 = !DILocation(line: 2013, column: 44, scope: !2751)
!2764 = !DILocalVariable(name: "dest_index", arg: 6, scope: !2751, file: !3, line: 2013, type: !158)
!2765 = !DILocation(line: 2013, column: 62, scope: !2751)
!2766 = !DILocalVariable(name: "count", arg: 7, scope: !2751, file: !3, line: 2013, type: !158)
!2767 = !DILocation(line: 2013, column: 78, scope: !2751)
!2768 = !DILocalVariable(name: "typeInfo", scope: !2751, file: !3, line: 2014, type: !788)
!2769 = !DILocation(line: 2014, column: 23, scope: !2751)
!2770 = !DILocalVariable(name: "src_offset", scope: !2751, file: !3, line: 2015, type: !158)
!2771 = !DILocation(line: 2015, column: 6, scope: !2751)
!2772 = !DILocalVariable(name: "dest_offset", scope: !2751, file: !3, line: 2016, type: !158)
!2773 = !DILocation(line: 2016, column: 6, scope: !2751)
!2774 = !DILocalVariable(name: "src_data", scope: !2751, file: !3, line: 2018, type: !316)
!2775 = !DILocation(line: 2018, column: 14, scope: !2751)
!2776 = !DILocation(line: 2018, column: 25, scope: !2751)
!2777 = !DILocation(line: 2018, column: 33, scope: !2751)
!2778 = !DILocation(line: 2018, column: 40, scope: !2751)
!2779 = !DILocation(line: 2018, column: 47, scope: !2751)
!2780 = !DILocalVariable(name: "dest_data", scope: !2751, file: !3, line: 2019, type: !147)
!2781 = !DILocation(line: 2019, column: 8, scope: !2751)
!2782 = !DILocation(line: 2019, column: 20, scope: !2751)
!2783 = !DILocation(line: 2019, column: 26, scope: !2751)
!2784 = !DILocation(line: 2019, column: 33, scope: !2751)
!2785 = !DILocation(line: 2019, column: 41, scope: !2751)
!2786 = !DILocation(line: 2021, column: 31, scope: !2751)
!2787 = !DILocation(line: 2021, column: 39, scope: !2751)
!2788 = !DILocation(line: 2021, column: 46, scope: !2751)
!2789 = !DILocation(line: 2021, column: 53, scope: !2751)
!2790 = !DILocation(line: 2021, column: 13, scope: !2751)
!2791 = !DILocation(line: 2021, column: 11, scope: !2751)
!2792 = !DILocation(line: 2023, column: 15, scope: !2751)
!2793 = !DILocation(line: 2023, column: 30, scope: !2751)
!2794 = !DILocation(line: 2023, column: 40, scope: !2751)
!2795 = !DILocation(line: 2023, column: 28, scope: !2751)
!2796 = !DILocation(line: 2023, column: 13, scope: !2751)
!2797 = !DILocation(line: 2024, column: 16, scope: !2751)
!2798 = !DILocation(line: 2024, column: 29, scope: !2751)
!2799 = !DILocation(line: 2024, column: 39, scope: !2751)
!2800 = !DILocation(line: 2024, column: 27, scope: !2751)
!2801 = !DILocation(line: 2024, column: 14, scope: !2751)
!2802 = !DILocation(line: 2026, column: 7, scope: !2803)
!2803 = distinct !DILexicalBlock(scope: !2751, file: !3, line: 2026, column: 6)
!2804 = !DILocation(line: 2026, column: 16, scope: !2803)
!2805 = !DILocation(line: 2026, column: 20, scope: !2803)
!2806 = !DILocation(line: 2026, column: 6, scope: !2751)
!2807 = !DILocation(line: 2027, column: 9, scope: !2808)
!2808 = distinct !DILexicalBlock(scope: !2809, file: !3, line: 2027, column: 7)
!2809 = distinct !DILexicalBlock(scope: !2803, file: !3, line: 2026, column: 31)
!2810 = !DILocation(line: 2027, column: 18, scope: !2808)
!2811 = !DILocation(line: 2027, column: 26, scope: !2808)
!2812 = !DILocation(line: 2027, column: 29, scope: !2808)
!2813 = !DILocation(line: 2027, column: 39, scope: !2808)
!2814 = !DILocation(line: 2027, column: 7, scope: !2809)
!2815 = !DILocation(line: 2029, column: 36, scope: !2816)
!2816 = distinct !DILexicalBlock(scope: !2808, file: !3, line: 2027, column: 49)
!2817 = !DILocation(line: 2029, column: 44, scope: !2816)
!2818 = !DILocation(line: 2029, column: 51, scope: !2816)
!2819 = !DILocation(line: 2029, column: 58, scope: !2816)
!2820 = !DILocation(line: 2029, column: 18, scope: !2816)
!2821 = !DILocation(line: 2030, column: 16, scope: !2816)
!2822 = !DILocation(line: 2030, column: 34, scope: !2816)
!2823 = !DILocation(line: 2028, column: 4, scope: !2816)
!2824 = !DILocation(line: 2031, column: 3, scope: !2816)
!2825 = !DILocation(line: 2032, column: 3, scope: !2809)
!2826 = !DILocation(line: 2035, column: 6, scope: !2827)
!2827 = distinct !DILexicalBlock(scope: !2751, file: !3, line: 2035, column: 6)
!2828 = !DILocation(line: 2035, column: 16, scope: !2827)
!2829 = !DILocation(line: 2035, column: 6, scope: !2751)
!2830 = !DILocation(line: 2036, column: 3, scope: !2827)
!2831 = !DILocation(line: 2036, column: 13, scope: !2827)
!2832 = !DILocation(line: 2036, column: 18, scope: !2827)
!2833 = !DILocation(line: 2036, column: 29, scope: !2827)
!2834 = !DILocation(line: 2036, column: 27, scope: !2827)
!2835 = !DILocation(line: 2037, column: 18, scope: !2827)
!2836 = !DILocation(line: 2037, column: 30, scope: !2827)
!2837 = !DILocation(line: 2037, column: 28, scope: !2827)
!2838 = !DILocation(line: 2038, column: 18, scope: !2827)
!2839 = !DILocation(line: 2040, column: 10, scope: !2827)
!2840 = !DILocation(line: 2040, column: 22, scope: !2827)
!2841 = !DILocation(line: 2040, column: 20, scope: !2827)
!2842 = !DILocation(line: 2041, column: 10, scope: !2827)
!2843 = !DILocation(line: 2041, column: 21, scope: !2827)
!2844 = !DILocation(line: 2041, column: 19, scope: !2827)
!2845 = !DILocation(line: 2042, column: 10, scope: !2827)
!2846 = !DILocation(line: 2042, column: 18, scope: !2827)
!2847 = !DILocation(line: 2042, column: 28, scope: !2827)
!2848 = !DILocation(line: 2042, column: 16, scope: !2827)
!2849 = !DILocation(line: 2040, column: 3, scope: !2827)
!2850 = !DILocation(line: 2043, column: 1, scope: !2751)
!2851 = distinct !DISubprogram(name: "CustomData_copy_data", scope: !3, file: !3, line: 2062, type: !2694, scopeLine: 2064, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2852 = !DILocalVariable(name: "source", arg: 1, scope: !2851, file: !3, line: 2062, type: !1263)
!2853 = !DILocation(line: 2062, column: 45, scope: !2851)
!2854 = !DILocalVariable(name: "dest", arg: 2, scope: !2851, file: !3, line: 2062, type: !488)
!2855 = !DILocation(line: 2062, column: 65, scope: !2851)
!2856 = !DILocalVariable(name: "source_index", arg: 3, scope: !2851, file: !3, line: 2063, type: !158)
!2857 = !DILocation(line: 2063, column: 31, scope: !2851)
!2858 = !DILocalVariable(name: "dest_index", arg: 4, scope: !2851, file: !3, line: 2063, type: !158)
!2859 = !DILocation(line: 2063, column: 49, scope: !2851)
!2860 = !DILocalVariable(name: "count", arg: 5, scope: !2851, file: !3, line: 2063, type: !158)
!2861 = !DILocation(line: 2063, column: 65, scope: !2851)
!2862 = !DILocalVariable(name: "src_i", scope: !2851, file: !3, line: 2065, type: !158)
!2863 = !DILocation(line: 2065, column: 6, scope: !2851)
!2864 = !DILocalVariable(name: "dest_i", scope: !2851, file: !3, line: 2065, type: !158)
!2865 = !DILocation(line: 2065, column: 13, scope: !2851)
!2866 = !DILocation(line: 2068, column: 9, scope: !2851)
!2867 = !DILocation(line: 2069, column: 13, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2851, file: !3, line: 2069, column: 2)
!2869 = !DILocation(line: 2069, column: 7, scope: !2868)
!2870 = !DILocation(line: 2069, column: 18, scope: !2871)
!2871 = distinct !DILexicalBlock(scope: !2868, file: !3, line: 2069, column: 2)
!2872 = !DILocation(line: 2069, column: 26, scope: !2871)
!2873 = !DILocation(line: 2069, column: 34, scope: !2871)
!2874 = !DILocation(line: 2069, column: 24, scope: !2871)
!2875 = !DILocation(line: 2069, column: 2, scope: !2868)
!2876 = !DILocation(line: 2074, column: 3, scope: !2877)
!2877 = distinct !DILexicalBlock(scope: !2871, file: !3, line: 2069, column: 53)
!2878 = !DILocation(line: 2074, column: 10, scope: !2877)
!2879 = !DILocation(line: 2074, column: 19, scope: !2877)
!2880 = !DILocation(line: 2074, column: 25, scope: !2877)
!2881 = !DILocation(line: 2074, column: 17, scope: !2877)
!2882 = !DILocation(line: 2074, column: 34, scope: !2877)
!2883 = !DILocation(line: 2074, column: 37, scope: !2877)
!2884 = !DILocation(line: 2074, column: 43, scope: !2877)
!2885 = !DILocation(line: 2074, column: 50, scope: !2877)
!2886 = !DILocation(line: 2074, column: 58, scope: !2877)
!2887 = !DILocation(line: 2074, column: 65, scope: !2877)
!2888 = !DILocation(line: 2074, column: 73, scope: !2877)
!2889 = !DILocation(line: 2074, column: 80, scope: !2877)
!2890 = !DILocation(line: 2074, column: 87, scope: !2877)
!2891 = !DILocation(line: 2074, column: 63, scope: !2877)
!2892 = !DILocation(line: 0, scope: !2877)
!2893 = !DILocation(line: 2075, column: 10, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 2074, column: 93)
!2895 = distinct !{!2895, !2876, !2896}
!2896 = !DILocation(line: 2076, column: 3, scope: !2877)
!2897 = !DILocation(line: 2079, column: 7, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 2079, column: 7)
!2899 = !DILocation(line: 2079, column: 17, scope: !2898)
!2900 = !DILocation(line: 2079, column: 23, scope: !2898)
!2901 = !DILocation(line: 2079, column: 14, scope: !2898)
!2902 = !DILocation(line: 2079, column: 7, scope: !2877)
!2903 = !DILocation(line: 2079, column: 33, scope: !2898)
!2904 = !DILocation(line: 2082, column: 7, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 2082, column: 7)
!2906 = !DILocation(line: 2082, column: 13, scope: !2905)
!2907 = !DILocation(line: 2082, column: 20, scope: !2905)
!2908 = !DILocation(line: 2082, column: 28, scope: !2905)
!2909 = !DILocation(line: 2082, column: 36, scope: !2905)
!2910 = !DILocation(line: 2082, column: 44, scope: !2905)
!2911 = !DILocation(line: 2082, column: 51, scope: !2905)
!2912 = !DILocation(line: 2082, column: 58, scope: !2905)
!2913 = !DILocation(line: 2082, column: 33, scope: !2905)
!2914 = !DILocation(line: 2082, column: 7, scope: !2877)
!2915 = !DILocation(line: 2083, column: 31, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2905, file: !3, line: 2082, column: 64)
!2917 = !DILocation(line: 2083, column: 39, scope: !2916)
!2918 = !DILocation(line: 2083, column: 45, scope: !2916)
!2919 = !DILocation(line: 2083, column: 52, scope: !2916)
!2920 = !DILocation(line: 2083, column: 60, scope: !2916)
!2921 = !DILocation(line: 2083, column: 74, scope: !2916)
!2922 = !DILocation(line: 2083, column: 86, scope: !2916)
!2923 = !DILocation(line: 2083, column: 4, scope: !2916)
!2924 = !DILocation(line: 2089, column: 10, scope: !2916)
!2925 = !DILocation(line: 2090, column: 3, scope: !2916)
!2926 = !DILocation(line: 2091, column: 2, scope: !2877)
!2927 = !DILocation(line: 2069, column: 44, scope: !2871)
!2928 = !DILocation(line: 2069, column: 2, scope: !2871)
!2929 = distinct !{!2929, !2875, !2930}
!2930 = !DILocation(line: 2091, column: 2, scope: !2868)
!2931 = !DILocation(line: 2092, column: 1, scope: !2851)
!2932 = distinct !DISubprogram(name: "CustomData_free_elem", scope: !3, file: !3, line: 2094, type: !1534, scopeLine: 2095, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2933 = !DILocalVariable(name: "data", arg: 1, scope: !2932, file: !3, line: 2094, type: !488)
!2934 = !DILocation(line: 2094, column: 39, scope: !2932)
!2935 = !DILocalVariable(name: "index", arg: 2, scope: !2932, file: !3, line: 2094, type: !158)
!2936 = !DILocation(line: 2094, column: 49, scope: !2932)
!2937 = !DILocalVariable(name: "count", arg: 3, scope: !2932, file: !3, line: 2094, type: !158)
!2938 = !DILocation(line: 2094, column: 60, scope: !2932)
!2939 = !DILocalVariable(name: "i", scope: !2932, file: !3, line: 2096, type: !158)
!2940 = !DILocation(line: 2096, column: 6, scope: !2932)
!2941 = !DILocalVariable(name: "typeInfo", scope: !2932, file: !3, line: 2097, type: !788)
!2942 = !DILocation(line: 2097, column: 23, scope: !2932)
!2943 = !DILocation(line: 2099, column: 9, scope: !2944)
!2944 = distinct !DILexicalBlock(scope: !2932, file: !3, line: 2099, column: 2)
!2945 = !DILocation(line: 2099, column: 7, scope: !2944)
!2946 = !DILocation(line: 2099, column: 14, scope: !2947)
!2947 = distinct !DILexicalBlock(scope: !2944, file: !3, line: 2099, column: 2)
!2948 = !DILocation(line: 2099, column: 18, scope: !2947)
!2949 = !DILocation(line: 2099, column: 24, scope: !2947)
!2950 = !DILocation(line: 2099, column: 16, scope: !2947)
!2951 = !DILocation(line: 2099, column: 2, scope: !2944)
!2952 = !DILocation(line: 2100, column: 9, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2954, file: !3, line: 2100, column: 7)
!2954 = distinct !DILexicalBlock(scope: !2947, file: !3, line: 2099, column: 39)
!2955 = !DILocation(line: 2100, column: 15, scope: !2953)
!2956 = !DILocation(line: 2100, column: 22, scope: !2953)
!2957 = !DILocation(line: 2100, column: 25, scope: !2953)
!2958 = !DILocation(line: 2100, column: 30, scope: !2953)
!2959 = !DILocation(line: 2100, column: 7, scope: !2954)
!2960 = !DILocation(line: 2101, column: 33, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 2100, column: 49)
!2962 = !DILocation(line: 2101, column: 39, scope: !2961)
!2963 = !DILocation(line: 2101, column: 46, scope: !2961)
!2964 = !DILocation(line: 2101, column: 49, scope: !2961)
!2965 = !DILocation(line: 2101, column: 15, scope: !2961)
!2966 = !DILocation(line: 2101, column: 13, scope: !2961)
!2967 = !DILocation(line: 2103, column: 8, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2961, file: !3, line: 2103, column: 8)
!2969 = !DILocation(line: 2103, column: 18, scope: !2968)
!2970 = !DILocation(line: 2103, column: 8, scope: !2961)
!2971 = !DILocalVariable(name: "offset", scope: !2972, file: !3, line: 2104, type: !158)
!2972 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 2103, column: 24)
!2973 = !DILocation(line: 2104, column: 9, scope: !2972)
!2974 = !DILocation(line: 2104, column: 18, scope: !2972)
!2975 = !DILocation(line: 2104, column: 28, scope: !2972)
!2976 = !DILocation(line: 2104, column: 35, scope: !2972)
!2977 = !DILocation(line: 2104, column: 33, scope: !2972)
!2978 = !DILocation(line: 2106, column: 5, scope: !2972)
!2979 = !DILocation(line: 2106, column: 15, scope: !2972)
!2980 = !DILocation(line: 2106, column: 28, scope: !2972)
!2981 = !DILocation(line: 2106, column: 34, scope: !2972)
!2982 = !DILocation(line: 2106, column: 41, scope: !2972)
!2983 = !DILocation(line: 2106, column: 44, scope: !2972)
!2984 = !DILocation(line: 2106, column: 51, scope: !2972)
!2985 = !DILocation(line: 2106, column: 49, scope: !2972)
!2986 = !DILocation(line: 2107, column: 20, scope: !2972)
!2987 = !DILocation(line: 2107, column: 27, scope: !2972)
!2988 = !DILocation(line: 2107, column: 37, scope: !2972)
!2989 = !DILocation(line: 2108, column: 4, scope: !2972)
!2990 = !DILocation(line: 2109, column: 3, scope: !2961)
!2991 = !DILocation(line: 2110, column: 2, scope: !2954)
!2992 = !DILocation(line: 2099, column: 34, scope: !2947)
!2993 = !DILocation(line: 2099, column: 2, scope: !2947)
!2994 = distinct !{!2994, !2951, !2995}
!2995 = !DILocation(line: 2110, column: 2, scope: !2944)
!2996 = !DILocation(line: 2111, column: 1, scope: !2932)
!2997 = distinct !DISubprogram(name: "CustomData_interp", scope: !3, file: !3, line: 2115, type: !2998, scopeLine: 2118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!2998 = !DISubroutineType(types: !2999)
!2999 = !{null, !1263, !488, !191, !216, !216, !158, !158}
!3000 = !DILocalVariable(name: "source", arg: 1, scope: !2997, file: !3, line: 2115, type: !1263)
!3001 = !DILocation(line: 2115, column: 42, scope: !2997)
!3002 = !DILocalVariable(name: "dest", arg: 2, scope: !2997, file: !3, line: 2115, type: !488)
!3003 = !DILocation(line: 2115, column: 62, scope: !2997)
!3004 = !DILocalVariable(name: "src_indices", arg: 3, scope: !2997, file: !3, line: 2116, type: !191)
!3005 = !DILocation(line: 2116, column: 29, scope: !2997)
!3006 = !DILocalVariable(name: "weights", arg: 4, scope: !2997, file: !3, line: 2116, type: !216)
!3007 = !DILocation(line: 2116, column: 49, scope: !2997)
!3008 = !DILocalVariable(name: "sub_weights", arg: 5, scope: !2997, file: !3, line: 2116, type: !216)
!3009 = !DILocation(line: 2116, column: 65, scope: !2997)
!3010 = !DILocalVariable(name: "count", arg: 6, scope: !2997, file: !3, line: 2117, type: !158)
!3011 = !DILocation(line: 2117, column: 28, scope: !2997)
!3012 = !DILocalVariable(name: "dest_index", arg: 7, scope: !2997, file: !3, line: 2117, type: !158)
!3013 = !DILocation(line: 2117, column: 39, scope: !2997)
!3014 = !DILocalVariable(name: "src_i", scope: !2997, file: !3, line: 2119, type: !158)
!3015 = !DILocation(line: 2119, column: 6, scope: !2997)
!3016 = !DILocalVariable(name: "dest_i", scope: !2997, file: !3, line: 2119, type: !158)
!3017 = !DILocation(line: 2119, column: 13, scope: !2997)
!3018 = !DILocalVariable(name: "dest_offset", scope: !2997, file: !3, line: 2120, type: !158)
!3019 = !DILocation(line: 2120, column: 6, scope: !2997)
!3020 = !DILocalVariable(name: "j", scope: !2997, file: !3, line: 2121, type: !158)
!3021 = !DILocation(line: 2121, column: 6, scope: !2997)
!3022 = !DILocalVariable(name: "source_buf", scope: !2997, file: !3, line: 2122, type: !3023)
!3023 = !DICompositeType(tag: DW_TAG_array_type, baseType: !146, size: 6400, elements: !3024)
!3024 = !{!3025}
!3025 = !DISubrange(count: 100)
!3026 = !DILocation(line: 2122, column: 8, scope: !2997)
!3027 = !DILocalVariable(name: "sources", scope: !2997, file: !3, line: 2123, type: !222)
!3028 = !DILocation(line: 2123, column: 9, scope: !2997)
!3029 = !DILocation(line: 2123, column: 19, scope: !2997)
!3030 = !DILocation(line: 2128, column: 6, scope: !3031)
!3031 = distinct !DILexicalBlock(scope: !2997, file: !3, line: 2128, column: 6)
!3032 = !DILocation(line: 2128, column: 12, scope: !3031)
!3033 = !DILocation(line: 2128, column: 6, scope: !2997)
!3034 = !DILocation(line: 2129, column: 13, scope: !3031)
!3035 = !DILocation(line: 2129, column: 44, scope: !3031)
!3036 = !DILocation(line: 2129, column: 42, scope: !3031)
!3037 = !DILocation(line: 2129, column: 11, scope: !3031)
!3038 = !DILocation(line: 2129, column: 3, scope: !3031)
!3039 = !DILocation(line: 2133, column: 9, scope: !2997)
!3040 = !DILocation(line: 2134, column: 13, scope: !3041)
!3041 = distinct !DILexicalBlock(scope: !2997, file: !3, line: 2134, column: 2)
!3042 = !DILocation(line: 2134, column: 7, scope: !3041)
!3043 = !DILocation(line: 2134, column: 18, scope: !3044)
!3044 = distinct !DILexicalBlock(scope: !3041, file: !3, line: 2134, column: 2)
!3045 = !DILocation(line: 2134, column: 26, scope: !3044)
!3046 = !DILocation(line: 2134, column: 34, scope: !3044)
!3047 = !DILocation(line: 2134, column: 24, scope: !3044)
!3048 = !DILocation(line: 2134, column: 2, scope: !3041)
!3049 = !DILocalVariable(name: "typeInfo", scope: !3050, file: !3, line: 2135, type: !788)
!3050 = distinct !DILexicalBlock(scope: !3044, file: !3, line: 2134, column: 53)
!3051 = !DILocation(line: 2135, column: 24, scope: !3050)
!3052 = !DILocation(line: 2135, column: 53, scope: !3050)
!3053 = !DILocation(line: 2135, column: 61, scope: !3050)
!3054 = !DILocation(line: 2135, column: 68, scope: !3050)
!3055 = !DILocation(line: 2135, column: 75, scope: !3050)
!3056 = !DILocation(line: 2135, column: 35, scope: !3050)
!3057 = !DILocation(line: 2136, column: 8, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3050, file: !3, line: 2136, column: 7)
!3059 = !DILocation(line: 2136, column: 18, scope: !3058)
!3060 = !DILocation(line: 2136, column: 7, scope: !3050)
!3061 = !DILocation(line: 2136, column: 26, scope: !3058)
!3062 = !DILocation(line: 2141, column: 3, scope: !3050)
!3063 = !DILocation(line: 2141, column: 10, scope: !3050)
!3064 = !DILocation(line: 2141, column: 19, scope: !3050)
!3065 = !DILocation(line: 2141, column: 25, scope: !3050)
!3066 = !DILocation(line: 2141, column: 17, scope: !3050)
!3067 = !DILocation(line: 2141, column: 34, scope: !3050)
!3068 = !DILocation(line: 2141, column: 37, scope: !3050)
!3069 = !DILocation(line: 2141, column: 43, scope: !3050)
!3070 = !DILocation(line: 2141, column: 50, scope: !3050)
!3071 = !DILocation(line: 2141, column: 58, scope: !3050)
!3072 = !DILocation(line: 2141, column: 65, scope: !3050)
!3073 = !DILocation(line: 2141, column: 73, scope: !3050)
!3074 = !DILocation(line: 2141, column: 80, scope: !3050)
!3075 = !DILocation(line: 2141, column: 87, scope: !3050)
!3076 = !DILocation(line: 2141, column: 63, scope: !3050)
!3077 = !DILocation(line: 0, scope: !3050)
!3078 = !DILocation(line: 2142, column: 10, scope: !3079)
!3079 = distinct !DILexicalBlock(scope: !3050, file: !3, line: 2141, column: 93)
!3080 = distinct !{!3080, !3062, !3081}
!3081 = !DILocation(line: 2143, column: 3, scope: !3050)
!3082 = !DILocation(line: 2146, column: 7, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3050, file: !3, line: 2146, column: 7)
!3084 = !DILocation(line: 2146, column: 17, scope: !3083)
!3085 = !DILocation(line: 2146, column: 23, scope: !3083)
!3086 = !DILocation(line: 2146, column: 14, scope: !3083)
!3087 = !DILocation(line: 2146, column: 7, scope: !3050)
!3088 = !DILocation(line: 2146, column: 33, scope: !3083)
!3089 = !DILocation(line: 2149, column: 7, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3050, file: !3, line: 2149, column: 7)
!3091 = !DILocation(line: 2149, column: 13, scope: !3090)
!3092 = !DILocation(line: 2149, column: 20, scope: !3090)
!3093 = !DILocation(line: 2149, column: 28, scope: !3090)
!3094 = !DILocation(line: 2149, column: 36, scope: !3090)
!3095 = !DILocation(line: 2149, column: 44, scope: !3090)
!3096 = !DILocation(line: 2149, column: 51, scope: !3090)
!3097 = !DILocation(line: 2149, column: 58, scope: !3090)
!3098 = !DILocation(line: 2149, column: 33, scope: !3090)
!3099 = !DILocation(line: 2149, column: 7, scope: !3050)
!3100 = !DILocalVariable(name: "src_data", scope: !3101, file: !3, line: 2150, type: !146)
!3101 = distinct !DILexicalBlock(scope: !3090, file: !3, line: 2149, column: 64)
!3102 = !DILocation(line: 2150, column: 10, scope: !3101)
!3103 = !DILocation(line: 2150, column: 21, scope: !3101)
!3104 = !DILocation(line: 2150, column: 29, scope: !3101)
!3105 = !DILocation(line: 2150, column: 36, scope: !3101)
!3106 = !DILocation(line: 2150, column: 43, scope: !3101)
!3107 = !DILocation(line: 2152, column: 11, scope: !3108)
!3108 = distinct !DILexicalBlock(scope: !3101, file: !3, line: 2152, column: 4)
!3109 = !DILocation(line: 2152, column: 9, scope: !3108)
!3110 = !DILocation(line: 2152, column: 16, scope: !3111)
!3111 = distinct !DILexicalBlock(scope: !3108, file: !3, line: 2152, column: 4)
!3112 = !DILocation(line: 2152, column: 20, scope: !3111)
!3113 = !DILocation(line: 2152, column: 18, scope: !3111)
!3114 = !DILocation(line: 2152, column: 4, scope: !3108)
!3115 = !DILocation(line: 2153, column: 26, scope: !3116)
!3116 = distinct !DILexicalBlock(scope: !3111, file: !3, line: 2152, column: 32)
!3117 = !DILocation(line: 2153, column: 37, scope: !3116)
!3118 = !DILocation(line: 2153, column: 47, scope: !3116)
!3119 = !DILocation(line: 2153, column: 54, scope: !3116)
!3120 = !DILocation(line: 2153, column: 66, scope: !3116)
!3121 = !DILocation(line: 2153, column: 52, scope: !3116)
!3122 = !DILocation(line: 2153, column: 35, scope: !3116)
!3123 = !DILocation(line: 2153, column: 5, scope: !3116)
!3124 = !DILocation(line: 2153, column: 13, scope: !3116)
!3125 = !DILocation(line: 2153, column: 16, scope: !3116)
!3126 = !DILocation(line: 2154, column: 4, scope: !3116)
!3127 = !DILocation(line: 2152, column: 27, scope: !3111)
!3128 = !DILocation(line: 2152, column: 4, scope: !3111)
!3129 = distinct !{!3129, !3114, !3130}
!3130 = !DILocation(line: 2154, column: 4, scope: !3108)
!3131 = !DILocation(line: 2156, column: 18, scope: !3101)
!3132 = !DILocation(line: 2156, column: 31, scope: !3101)
!3133 = !DILocation(line: 2156, column: 41, scope: !3101)
!3134 = !DILocation(line: 2156, column: 29, scope: !3101)
!3135 = !DILocation(line: 2156, column: 16, scope: !3101)
!3136 = !DILocation(line: 2158, column: 4, scope: !3101)
!3137 = !DILocation(line: 2158, column: 14, scope: !3101)
!3138 = !DILocation(line: 2158, column: 21, scope: !3101)
!3139 = !DILocation(line: 2158, column: 30, scope: !3101)
!3140 = !DILocation(line: 2158, column: 39, scope: !3101)
!3141 = !DILocation(line: 2158, column: 52, scope: !3101)
!3142 = !DILocation(line: 2159, column: 29, scope: !3101)
!3143 = !DILocation(line: 2159, column: 35, scope: !3101)
!3144 = !DILocation(line: 2159, column: 42, scope: !3101)
!3145 = !DILocation(line: 2159, column: 50, scope: !3101)
!3146 = !DILocation(line: 2159, column: 57, scope: !3101)
!3147 = !DILocation(line: 2159, column: 55, scope: !3101)
!3148 = !DILocation(line: 2165, column: 10, scope: !3101)
!3149 = !DILocation(line: 2166, column: 3, scope: !3101)
!3150 = !DILocation(line: 2167, column: 2, scope: !3050)
!3151 = !DILocation(line: 2134, column: 44, scope: !3044)
!3152 = !DILocation(line: 2134, column: 2, scope: !3044)
!3153 = distinct !{!3153, !3048, !3154}
!3154 = !DILocation(line: 2167, column: 2, scope: !3041)
!3155 = !DILocation(line: 2169, column: 6, scope: !3156)
!3156 = distinct !DILexicalBlock(scope: !2997, file: !3, line: 2169, column: 6)
!3157 = !DILocation(line: 2169, column: 12, scope: !3156)
!3158 = !DILocation(line: 2169, column: 6, scope: !2997)
!3159 = !DILocation(line: 2169, column: 31, scope: !3156)
!3160 = !DILocation(line: 2169, column: 41, scope: !3156)
!3161 = !DILocation(line: 2170, column: 1, scope: !2997)
!3162 = distinct !DISubprogram(name: "CustomData_swap", scope: !3, file: !3, line: 2172, type: !3163, scopeLine: 2173, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3163 = !DISubroutineType(types: !3164)
!3164 = !{null, !594, !158, !351}
!3165 = !DILocalVariable(name: "data", arg: 1, scope: !3162, file: !3, line: 2172, type: !594)
!3166 = !DILocation(line: 2172, column: 41, scope: !3162)
!3167 = !DILocalVariable(name: "index", arg: 2, scope: !3162, file: !3, line: 2172, type: !158)
!3168 = !DILocation(line: 2172, column: 51, scope: !3162)
!3169 = !DILocalVariable(name: "corner_indices", arg: 3, scope: !3162, file: !3, line: 2172, type: !351)
!3170 = !DILocation(line: 2172, column: 69, scope: !3162)
!3171 = !DILocalVariable(name: "typeInfo", scope: !3162, file: !3, line: 2174, type: !788)
!3172 = !DILocation(line: 2174, column: 23, scope: !3162)
!3173 = !DILocalVariable(name: "i", scope: !3162, file: !3, line: 2175, type: !158)
!3174 = !DILocation(line: 2175, column: 6, scope: !3162)
!3175 = !DILocation(line: 2177, column: 9, scope: !3176)
!3176 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 2177, column: 2)
!3177 = !DILocation(line: 2177, column: 7, scope: !3176)
!3178 = !DILocation(line: 2177, column: 14, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !3176, file: !3, line: 2177, column: 2)
!3180 = !DILocation(line: 2177, column: 18, scope: !3179)
!3181 = !DILocation(line: 2177, column: 24, scope: !3179)
!3182 = !DILocation(line: 2177, column: 16, scope: !3179)
!3183 = !DILocation(line: 2177, column: 2, scope: !3176)
!3184 = !DILocation(line: 2178, column: 32, scope: !3185)
!3185 = distinct !DILexicalBlock(scope: !3179, file: !3, line: 2177, column: 39)
!3186 = !DILocation(line: 2178, column: 38, scope: !3185)
!3187 = !DILocation(line: 2178, column: 45, scope: !3185)
!3188 = !DILocation(line: 2178, column: 48, scope: !3185)
!3189 = !DILocation(line: 2178, column: 14, scope: !3185)
!3190 = !DILocation(line: 2178, column: 12, scope: !3185)
!3191 = !DILocation(line: 2180, column: 7, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3185, file: !3, line: 2180, column: 7)
!3193 = !DILocation(line: 2180, column: 17, scope: !3192)
!3194 = !DILocation(line: 2180, column: 7, scope: !3185)
!3195 = !DILocalVariable(name: "offset", scope: !3196, file: !3, line: 2181, type: !158)
!3196 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 2180, column: 23)
!3197 = !DILocation(line: 2181, column: 8, scope: !3196)
!3198 = !DILocation(line: 2181, column: 17, scope: !3196)
!3199 = !DILocation(line: 2181, column: 27, scope: !3196)
!3200 = !DILocation(line: 2181, column: 34, scope: !3196)
!3201 = !DILocation(line: 2181, column: 32, scope: !3196)
!3202 = !DILocation(line: 2183, column: 4, scope: !3196)
!3203 = !DILocation(line: 2183, column: 14, scope: !3196)
!3204 = !DILocation(line: 2183, column: 27, scope: !3196)
!3205 = !DILocation(line: 2183, column: 33, scope: !3196)
!3206 = !DILocation(line: 2183, column: 40, scope: !3196)
!3207 = !DILocation(line: 2183, column: 43, scope: !3196)
!3208 = !DILocation(line: 2183, column: 50, scope: !3196)
!3209 = !DILocation(line: 2183, column: 48, scope: !3196)
!3210 = !DILocation(line: 2183, column: 58, scope: !3196)
!3211 = !DILocation(line: 2184, column: 3, scope: !3196)
!3212 = !DILocation(line: 2185, column: 2, scope: !3185)
!3213 = !DILocation(line: 2177, column: 34, scope: !3179)
!3214 = !DILocation(line: 2177, column: 2, scope: !3179)
!3215 = distinct !{!3215, !3183, !3216}
!3216 = !DILocation(line: 2185, column: 2, scope: !3176)
!3217 = !DILocation(line: 2186, column: 1, scope: !3162)
!3218 = distinct !DISubprogram(name: "CustomData_get", scope: !3, file: !3, line: 2188, type: !3219, scopeLine: 2189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3219 = !DISubroutineType(types: !3220)
!3220 = !{!146, !1263, !158, !158}
!3221 = !DILocalVariable(name: "data", arg: 1, scope: !3218, file: !3, line: 2188, type: !1263)
!3222 = !DILocation(line: 2188, column: 40, scope: !3218)
!3223 = !DILocalVariable(name: "index", arg: 2, scope: !3218, file: !3, line: 2188, type: !158)
!3224 = !DILocation(line: 2188, column: 50, scope: !3218)
!3225 = !DILocalVariable(name: "type", arg: 3, scope: !3218, file: !3, line: 2188, type: !158)
!3226 = !DILocation(line: 2188, column: 61, scope: !3218)
!3227 = !DILocalVariable(name: "offset", scope: !3218, file: !3, line: 2190, type: !158)
!3228 = !DILocation(line: 2190, column: 6, scope: !3218)
!3229 = !DILocalVariable(name: "layer_index", scope: !3218, file: !3, line: 2191, type: !158)
!3230 = !DILocation(line: 2191, column: 6, scope: !3218)
!3231 = !DILocation(line: 2196, column: 50, scope: !3218)
!3232 = !DILocation(line: 2196, column: 56, scope: !3218)
!3233 = !DILocation(line: 2196, column: 16, scope: !3218)
!3234 = !DILocation(line: 2196, column: 14, scope: !3218)
!3235 = !DILocation(line: 2197, column: 6, scope: !3236)
!3236 = distinct !DILexicalBlock(scope: !3218, file: !3, line: 2197, column: 6)
!3237 = !DILocation(line: 2197, column: 18, scope: !3236)
!3238 = !DILocation(line: 2197, column: 6, scope: !3218)
!3239 = !DILocation(line: 2197, column: 25, scope: !3236)
!3240 = !DILocation(line: 2200, column: 29, scope: !3218)
!3241 = !DILocation(line: 2200, column: 11, scope: !3218)
!3242 = !DILocation(line: 2200, column: 36, scope: !3218)
!3243 = !DILocation(line: 2200, column: 43, scope: !3218)
!3244 = !DILocation(line: 2200, column: 41, scope: !3218)
!3245 = !DILocation(line: 2200, column: 9, scope: !3218)
!3246 = !DILocation(line: 2202, column: 17, scope: !3218)
!3247 = !DILocation(line: 2202, column: 23, scope: !3218)
!3248 = !DILocation(line: 2202, column: 30, scope: !3218)
!3249 = !DILocation(line: 2202, column: 43, scope: !3218)
!3250 = !DILocation(line: 2202, column: 50, scope: !3218)
!3251 = !DILocation(line: 2202, column: 48, scope: !3218)
!3252 = !DILocation(line: 2202, column: 2, scope: !3218)
!3253 = !DILocation(line: 2203, column: 1, scope: !3218)
!3254 = distinct !DISubprogram(name: "CustomData_get_n", scope: !3, file: !3, line: 2205, type: !3255, scopeLine: 2206, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3255 = !DISubroutineType(types: !3256)
!3256 = !{!146, !1263, !158, !158, !158}
!3257 = !DILocalVariable(name: "data", arg: 1, scope: !3254, file: !3, line: 2205, type: !1263)
!3258 = !DILocation(line: 2205, column: 42, scope: !3254)
!3259 = !DILocalVariable(name: "type", arg: 2, scope: !3254, file: !3, line: 2205, type: !158)
!3260 = !DILocation(line: 2205, column: 52, scope: !3254)
!3261 = !DILocalVariable(name: "index", arg: 3, scope: !3254, file: !3, line: 2205, type: !158)
!3262 = !DILocation(line: 2205, column: 62, scope: !3254)
!3263 = !DILocalVariable(name: "n", arg: 4, scope: !3254, file: !3, line: 2205, type: !158)
!3264 = !DILocation(line: 2205, column: 73, scope: !3254)
!3265 = !DILocalVariable(name: "layer_index", scope: !3254, file: !3, line: 2207, type: !158)
!3266 = !DILocation(line: 2207, column: 6, scope: !3254)
!3267 = !DILocalVariable(name: "offset", scope: !3254, file: !3, line: 2208, type: !158)
!3268 = !DILocation(line: 2208, column: 6, scope: !3254)
!3269 = !DILocation(line: 2213, column: 16, scope: !3254)
!3270 = !DILocation(line: 2213, column: 22, scope: !3254)
!3271 = !DILocation(line: 2213, column: 30, scope: !3254)
!3272 = !DILocation(line: 2213, column: 14, scope: !3254)
!3273 = !DILocation(line: 2214, column: 6, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 2214, column: 6)
!3275 = !DILocation(line: 2214, column: 18, scope: !3274)
!3276 = !DILocation(line: 2214, column: 6, scope: !3254)
!3277 = !DILocation(line: 2214, column: 25, scope: !3274)
!3278 = !DILocation(line: 2216, column: 29, scope: !3254)
!3279 = !DILocation(line: 2216, column: 11, scope: !3254)
!3280 = !DILocation(line: 2216, column: 36, scope: !3254)
!3281 = !DILocation(line: 2216, column: 43, scope: !3254)
!3282 = !DILocation(line: 2216, column: 41, scope: !3254)
!3283 = !DILocation(line: 2216, column: 9, scope: !3254)
!3284 = !DILocation(line: 2217, column: 17, scope: !3254)
!3285 = !DILocation(line: 2217, column: 23, scope: !3254)
!3286 = !DILocation(line: 2217, column: 30, scope: !3254)
!3287 = !DILocation(line: 2217, column: 44, scope: !3254)
!3288 = !DILocation(line: 2217, column: 42, scope: !3254)
!3289 = !DILocation(line: 2217, column: 47, scope: !3254)
!3290 = !DILocation(line: 2217, column: 54, scope: !3254)
!3291 = !DILocation(line: 2217, column: 52, scope: !3254)
!3292 = !DILocation(line: 2217, column: 2, scope: !3254)
!3293 = !DILocation(line: 2218, column: 1, scope: !3254)
!3294 = distinct !DISubprogram(name: "CustomData_get_layer", scope: !3, file: !3, line: 2220, type: !3295, scopeLine: 2221, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3295 = !DISubroutineType(types: !3296)
!3296 = !{!146, !1263, !158}
!3297 = !DILocalVariable(name: "data", arg: 1, scope: !3294, file: !3, line: 2220, type: !1263)
!3298 = !DILocation(line: 2220, column: 46, scope: !3294)
!3299 = !DILocalVariable(name: "type", arg: 2, scope: !3294, file: !3, line: 2220, type: !158)
!3300 = !DILocation(line: 2220, column: 56, scope: !3294)
!3301 = !DILocalVariable(name: "layer_index", scope: !3294, file: !3, line: 2223, type: !158)
!3302 = !DILocation(line: 2223, column: 6, scope: !3294)
!3303 = !DILocation(line: 2223, column: 54, scope: !3294)
!3304 = !DILocation(line: 2223, column: 60, scope: !3294)
!3305 = !DILocation(line: 2223, column: 20, scope: !3294)
!3306 = !DILocation(line: 2224, column: 6, scope: !3307)
!3307 = distinct !DILexicalBlock(scope: !3294, file: !3, line: 2224, column: 6)
!3308 = !DILocation(line: 2224, column: 18, scope: !3307)
!3309 = !DILocation(line: 2224, column: 6, scope: !3294)
!3310 = !DILocation(line: 2224, column: 25, scope: !3307)
!3311 = !DILocation(line: 2226, column: 9, scope: !3294)
!3312 = !DILocation(line: 2226, column: 15, scope: !3294)
!3313 = !DILocation(line: 2226, column: 22, scope: !3294)
!3314 = !DILocation(line: 2226, column: 35, scope: !3294)
!3315 = !DILocation(line: 2226, column: 2, scope: !3294)
!3316 = !DILocation(line: 2227, column: 1, scope: !3294)
!3317 = distinct !DISubprogram(name: "CustomData_get_layer_n", scope: !3, file: !3, line: 2229, type: !3219, scopeLine: 2230, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3318 = !DILocalVariable(name: "data", arg: 1, scope: !3317, file: !3, line: 2229, type: !1263)
!3319 = !DILocation(line: 2229, column: 48, scope: !3317)
!3320 = !DILocalVariable(name: "type", arg: 2, scope: !3317, file: !3, line: 2229, type: !158)
!3321 = !DILocation(line: 2229, column: 58, scope: !3317)
!3322 = !DILocalVariable(name: "n", arg: 3, scope: !3317, file: !3, line: 2229, type: !158)
!3323 = !DILocation(line: 2229, column: 68, scope: !3317)
!3324 = !DILocalVariable(name: "layer_index", scope: !3317, file: !3, line: 2232, type: !158)
!3325 = !DILocation(line: 2232, column: 6, scope: !3317)
!3326 = !DILocation(line: 2232, column: 49, scope: !3317)
!3327 = !DILocation(line: 2232, column: 55, scope: !3317)
!3328 = !DILocation(line: 2232, column: 61, scope: !3317)
!3329 = !DILocation(line: 2232, column: 20, scope: !3317)
!3330 = !DILocation(line: 2233, column: 6, scope: !3331)
!3331 = distinct !DILexicalBlock(scope: !3317, file: !3, line: 2233, column: 6)
!3332 = !DILocation(line: 2233, column: 18, scope: !3331)
!3333 = !DILocation(line: 2233, column: 6, scope: !3317)
!3334 = !DILocation(line: 2233, column: 25, scope: !3331)
!3335 = !DILocation(line: 2235, column: 9, scope: !3317)
!3336 = !DILocation(line: 2235, column: 15, scope: !3317)
!3337 = !DILocation(line: 2235, column: 22, scope: !3317)
!3338 = !DILocation(line: 2235, column: 35, scope: !3317)
!3339 = !DILocation(line: 2235, column: 2, scope: !3317)
!3340 = !DILocation(line: 2236, column: 1, scope: !3317)
!3341 = distinct !DISubprogram(name: "CustomData_get_offset", scope: !3, file: !3, line: 2247, type: !1261, scopeLine: 2248, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3342 = !DILocalVariable(name: "data", arg: 1, scope: !3341, file: !3, line: 2247, type: !1263)
!3343 = !DILocation(line: 2247, column: 45, scope: !3341)
!3344 = !DILocalVariable(name: "type", arg: 2, scope: !3341, file: !3, line: 2247, type: !158)
!3345 = !DILocation(line: 2247, column: 55, scope: !3341)
!3346 = !DILocalVariable(name: "layer_index", scope: !3341, file: !3, line: 2250, type: !158)
!3347 = !DILocation(line: 2250, column: 6, scope: !3341)
!3348 = !DILocation(line: 2250, column: 54, scope: !3341)
!3349 = !DILocation(line: 2250, column: 60, scope: !3341)
!3350 = !DILocation(line: 2250, column: 20, scope: !3341)
!3351 = !DILocation(line: 2251, column: 6, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3341, file: !3, line: 2251, column: 6)
!3353 = !DILocation(line: 2251, column: 18, scope: !3352)
!3354 = !DILocation(line: 2251, column: 6, scope: !3341)
!3355 = !DILocation(line: 2251, column: 25, scope: !3352)
!3356 = !DILocation(line: 2253, column: 9, scope: !3341)
!3357 = !DILocation(line: 2253, column: 15, scope: !3341)
!3358 = !DILocation(line: 2253, column: 22, scope: !3341)
!3359 = !DILocation(line: 2253, column: 35, scope: !3341)
!3360 = !DILocation(line: 2253, column: 2, scope: !3341)
!3361 = !DILocation(line: 2254, column: 1, scope: !3341)
!3362 = distinct !DISubprogram(name: "CustomData_get_n_offset", scope: !3, file: !3, line: 2256, type: !3363, scopeLine: 2257, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3363 = !DISubroutineType(types: !3364)
!3364 = !{!158, !1263, !158, !158}
!3365 = !DILocalVariable(name: "data", arg: 1, scope: !3362, file: !3, line: 2256, type: !1263)
!3366 = !DILocation(line: 2256, column: 47, scope: !3362)
!3367 = !DILocalVariable(name: "type", arg: 2, scope: !3362, file: !3, line: 2256, type: !158)
!3368 = !DILocation(line: 2256, column: 57, scope: !3362)
!3369 = !DILocalVariable(name: "n", arg: 3, scope: !3362, file: !3, line: 2256, type: !158)
!3370 = !DILocation(line: 2256, column: 67, scope: !3362)
!3371 = !DILocalVariable(name: "layer_index", scope: !3362, file: !3, line: 2259, type: !158)
!3372 = !DILocation(line: 2259, column: 6, scope: !3362)
!3373 = !DILocation(line: 2259, column: 49, scope: !3362)
!3374 = !DILocation(line: 2259, column: 55, scope: !3362)
!3375 = !DILocation(line: 2259, column: 61, scope: !3362)
!3376 = !DILocation(line: 2259, column: 20, scope: !3362)
!3377 = !DILocation(line: 2260, column: 6, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !3362, file: !3, line: 2260, column: 6)
!3379 = !DILocation(line: 2260, column: 18, scope: !3378)
!3380 = !DILocation(line: 2260, column: 6, scope: !3362)
!3381 = !DILocation(line: 2260, column: 25, scope: !3378)
!3382 = !DILocation(line: 2262, column: 9, scope: !3362)
!3383 = !DILocation(line: 2262, column: 15, scope: !3362)
!3384 = !DILocation(line: 2262, column: 22, scope: !3362)
!3385 = !DILocation(line: 2262, column: 35, scope: !3362)
!3386 = !DILocation(line: 2262, column: 2, scope: !3362)
!3387 = !DILocation(line: 2263, column: 1, scope: !3362)
!3388 = distinct !DISubprogram(name: "CustomData_set_layer_name", scope: !3, file: !3, line: 2265, type: !3389, scopeLine: 2266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3389 = !DISubroutineType(types: !3390)
!3390 = !{!361, !1263, !158, !158, !316}
!3391 = !DILocalVariable(name: "data", arg: 1, scope: !3388, file: !3, line: 2265, type: !1263)
!3392 = !DILocation(line: 2265, column: 50, scope: !3388)
!3393 = !DILocalVariable(name: "type", arg: 2, scope: !3388, file: !3, line: 2265, type: !158)
!3394 = !DILocation(line: 2265, column: 60, scope: !3388)
!3395 = !DILocalVariable(name: "n", arg: 3, scope: !3388, file: !3, line: 2265, type: !158)
!3396 = !DILocation(line: 2265, column: 70, scope: !3388)
!3397 = !DILocalVariable(name: "name", arg: 4, scope: !3388, file: !3, line: 2265, type: !316)
!3398 = !DILocation(line: 2265, column: 85, scope: !3388)
!3399 = !DILocalVariable(name: "layer_index", scope: !3388, file: !3, line: 2268, type: !158)
!3400 = !DILocation(line: 2268, column: 6, scope: !3388)
!3401 = !DILocation(line: 2268, column: 49, scope: !3388)
!3402 = !DILocation(line: 2268, column: 55, scope: !3388)
!3403 = !DILocation(line: 2268, column: 61, scope: !3388)
!3404 = !DILocation(line: 2268, column: 20, scope: !3388)
!3405 = !DILocation(line: 2270, column: 6, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 2270, column: 6)
!3407 = !DILocation(line: 2270, column: 18, scope: !3406)
!3408 = !DILocation(line: 2270, column: 6, scope: !3388)
!3409 = !DILocation(line: 2270, column: 25, scope: !3406)
!3410 = !DILocation(line: 2271, column: 7, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 2271, column: 6)
!3412 = !DILocation(line: 2271, column: 6, scope: !3388)
!3413 = !DILocation(line: 2271, column: 13, scope: !3411)
!3414 = !DILocation(line: 2273, column: 14, scope: !3388)
!3415 = !DILocation(line: 2273, column: 20, scope: !3388)
!3416 = !DILocation(line: 2273, column: 27, scope: !3388)
!3417 = !DILocation(line: 2273, column: 40, scope: !3388)
!3418 = !DILocation(line: 2273, column: 46, scope: !3388)
!3419 = !DILocation(line: 2273, column: 2, scope: !3388)
!3420 = !DILocation(line: 2275, column: 2, scope: !3388)
!3421 = !DILocation(line: 2276, column: 1, scope: !3388)
!3422 = distinct !DISubprogram(name: "CustomData_set_layer", scope: !3, file: !3, line: 2278, type: !3423, scopeLine: 2279, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3423 = !DISubroutineType(types: !3424)
!3424 = !{!146, !1263, !158, !146}
!3425 = !DILocalVariable(name: "data", arg: 1, scope: !3422, file: !3, line: 2278, type: !1263)
!3426 = !DILocation(line: 2278, column: 46, scope: !3422)
!3427 = !DILocalVariable(name: "type", arg: 2, scope: !3422, file: !3, line: 2278, type: !158)
!3428 = !DILocation(line: 2278, column: 56, scope: !3422)
!3429 = !DILocalVariable(name: "ptr", arg: 3, scope: !3422, file: !3, line: 2278, type: !146)
!3430 = !DILocation(line: 2278, column: 68, scope: !3422)
!3431 = !DILocalVariable(name: "layer_index", scope: !3422, file: !3, line: 2281, type: !158)
!3432 = !DILocation(line: 2281, column: 6, scope: !3422)
!3433 = !DILocation(line: 2281, column: 54, scope: !3422)
!3434 = !DILocation(line: 2281, column: 60, scope: !3422)
!3435 = !DILocation(line: 2281, column: 20, scope: !3422)
!3436 = !DILocation(line: 2283, column: 6, scope: !3437)
!3437 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 2283, column: 6)
!3438 = !DILocation(line: 2283, column: 18, scope: !3437)
!3439 = !DILocation(line: 2283, column: 6, scope: !3422)
!3440 = !DILocation(line: 2283, column: 25, scope: !3437)
!3441 = !DILocation(line: 2285, column: 35, scope: !3422)
!3442 = !DILocation(line: 2285, column: 2, scope: !3422)
!3443 = !DILocation(line: 2285, column: 8, scope: !3422)
!3444 = !DILocation(line: 2285, column: 15, scope: !3422)
!3445 = !DILocation(line: 2285, column: 28, scope: !3422)
!3446 = !DILocation(line: 2285, column: 33, scope: !3422)
!3447 = !DILocation(line: 2287, column: 9, scope: !3422)
!3448 = !DILocation(line: 2287, column: 2, scope: !3422)
!3449 = !DILocation(line: 2288, column: 1, scope: !3422)
!3450 = distinct !DISubprogram(name: "CustomData_set_layer_n", scope: !3, file: !3, line: 2290, type: !3451, scopeLine: 2291, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3451 = !DISubroutineType(types: !3452)
!3452 = !{!146, !592, !158, !158, !146}
!3453 = !DILocalVariable(name: "data", arg: 1, scope: !3450, file: !3, line: 2290, type: !592)
!3454 = !DILocation(line: 2290, column: 55, scope: !3450)
!3455 = !DILocalVariable(name: "type", arg: 2, scope: !3450, file: !3, line: 2290, type: !158)
!3456 = !DILocation(line: 2290, column: 65, scope: !3450)
!3457 = !DILocalVariable(name: "n", arg: 3, scope: !3450, file: !3, line: 2290, type: !158)
!3458 = !DILocation(line: 2290, column: 75, scope: !3450)
!3459 = !DILocalVariable(name: "ptr", arg: 4, scope: !3450, file: !3, line: 2290, type: !146)
!3460 = !DILocation(line: 2290, column: 84, scope: !3450)
!3461 = !DILocalVariable(name: "layer_index", scope: !3450, file: !3, line: 2293, type: !158)
!3462 = !DILocation(line: 2293, column: 6, scope: !3450)
!3463 = !DILocation(line: 2293, column: 49, scope: !3450)
!3464 = !DILocation(line: 2293, column: 55, scope: !3450)
!3465 = !DILocation(line: 2293, column: 61, scope: !3450)
!3466 = !DILocation(line: 2293, column: 20, scope: !3450)
!3467 = !DILocation(line: 2294, column: 6, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 2294, column: 6)
!3469 = !DILocation(line: 2294, column: 18, scope: !3468)
!3470 = !DILocation(line: 2294, column: 6, scope: !3450)
!3471 = !DILocation(line: 2294, column: 25, scope: !3468)
!3472 = !DILocation(line: 2296, column: 35, scope: !3450)
!3473 = !DILocation(line: 2296, column: 2, scope: !3450)
!3474 = !DILocation(line: 2296, column: 8, scope: !3450)
!3475 = !DILocation(line: 2296, column: 15, scope: !3450)
!3476 = !DILocation(line: 2296, column: 28, scope: !3450)
!3477 = !DILocation(line: 2296, column: 33, scope: !3450)
!3478 = !DILocation(line: 2298, column: 9, scope: !3450)
!3479 = !DILocation(line: 2298, column: 2, scope: !3450)
!3480 = !DILocation(line: 2299, column: 1, scope: !3450)
!3481 = distinct !DISubprogram(name: "CustomData_set", scope: !3, file: !3, line: 2301, type: !3482, scopeLine: 2302, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3482 = !DISubroutineType(types: !3483)
!3483 = !{null, !1263, !158, !158, !146}
!3484 = !DILocalVariable(name: "data", arg: 1, scope: !3481, file: !3, line: 2301, type: !1263)
!3485 = !DILocation(line: 2301, column: 39, scope: !3481)
!3486 = !DILocalVariable(name: "index", arg: 2, scope: !3481, file: !3, line: 2301, type: !158)
!3487 = !DILocation(line: 2301, column: 49, scope: !3481)
!3488 = !DILocalVariable(name: "type", arg: 3, scope: !3481, file: !3, line: 2301, type: !158)
!3489 = !DILocation(line: 2301, column: 60, scope: !3481)
!3490 = !DILocalVariable(name: "source", arg: 4, scope: !3481, file: !3, line: 2301, type: !146)
!3491 = !DILocation(line: 2301, column: 72, scope: !3481)
!3492 = !DILocalVariable(name: "dest", scope: !3481, file: !3, line: 2303, type: !146)
!3493 = !DILocation(line: 2303, column: 8, scope: !3481)
!3494 = !DILocation(line: 2303, column: 30, scope: !3481)
!3495 = !DILocation(line: 2303, column: 36, scope: !3481)
!3496 = !DILocation(line: 2303, column: 43, scope: !3481)
!3497 = !DILocation(line: 2303, column: 15, scope: !3481)
!3498 = !DILocalVariable(name: "typeInfo", scope: !3481, file: !3, line: 2304, type: !788)
!3499 = !DILocation(line: 2304, column: 23, scope: !3481)
!3500 = !DILocation(line: 2304, column: 52, scope: !3481)
!3501 = !DILocation(line: 2304, column: 34, scope: !3481)
!3502 = !DILocation(line: 2306, column: 7, scope: !3503)
!3503 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 2306, column: 6)
!3504 = !DILocation(line: 2306, column: 6, scope: !3481)
!3505 = !DILocation(line: 2306, column: 13, scope: !3503)
!3506 = !DILocation(line: 2308, column: 6, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 2308, column: 6)
!3508 = !DILocation(line: 2308, column: 16, scope: !3507)
!3509 = !DILocation(line: 2308, column: 6, scope: !3481)
!3510 = !DILocation(line: 2309, column: 3, scope: !3507)
!3511 = !DILocation(line: 2309, column: 13, scope: !3507)
!3512 = !DILocation(line: 2309, column: 18, scope: !3507)
!3513 = !DILocation(line: 2309, column: 26, scope: !3507)
!3514 = !DILocation(line: 2311, column: 10, scope: !3507)
!3515 = !DILocation(line: 2311, column: 16, scope: !3507)
!3516 = !DILocation(line: 2311, column: 24, scope: !3507)
!3517 = !DILocation(line: 2311, column: 34, scope: !3507)
!3518 = !DILocation(line: 2311, column: 3, scope: !3507)
!3519 = !DILocation(line: 2312, column: 1, scope: !3481)
!3520 = distinct !DISubprogram(name: "CustomData_to_bmeshpoly", scope: !3, file: !3, line: 2316, type: !3521, scopeLine: 2318, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3521 = !DISubroutineType(types: !3522)
!3522 = !{null, !488, !488, !488, !158, !158}
!3523 = !DILocalVariable(name: "fdata", arg: 1, scope: !3520, file: !3, line: 2316, type: !488)
!3524 = !DILocation(line: 2316, column: 42, scope: !3520)
!3525 = !DILocalVariable(name: "pdata", arg: 2, scope: !3520, file: !3, line: 2316, type: !488)
!3526 = !DILocation(line: 2316, column: 61, scope: !3520)
!3527 = !DILocalVariable(name: "ldata", arg: 3, scope: !3520, file: !3, line: 2316, type: !488)
!3528 = !DILocation(line: 2316, column: 80, scope: !3520)
!3529 = !DILocalVariable(name: "totloop", arg: 4, scope: !3520, file: !3, line: 2317, type: !158)
!3530 = !DILocation(line: 2317, column: 34, scope: !3520)
!3531 = !DILocalVariable(name: "totpoly", arg: 5, scope: !3520, file: !3, line: 2317, type: !158)
!3532 = !DILocation(line: 2317, column: 47, scope: !3520)
!3533 = !DILocalVariable(name: "i", scope: !3520, file: !3, line: 2319, type: !158)
!3534 = !DILocation(line: 2319, column: 6, scope: !3520)
!3535 = !DILocation(line: 2320, column: 9, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3520, file: !3, line: 2320, column: 2)
!3537 = !DILocation(line: 2320, column: 7, scope: !3536)
!3538 = !DILocation(line: 2320, column: 14, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3536, file: !3, line: 2320, column: 2)
!3540 = !DILocation(line: 2320, column: 18, scope: !3539)
!3541 = !DILocation(line: 2320, column: 25, scope: !3539)
!3542 = !DILocation(line: 2320, column: 16, scope: !3539)
!3543 = !DILocation(line: 2320, column: 2, scope: !3536)
!3544 = !DILocation(line: 2321, column: 7, scope: !3545)
!3545 = distinct !DILexicalBlock(scope: !3546, file: !3, line: 2321, column: 7)
!3546 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 2320, column: 40)
!3547 = !DILocation(line: 2321, column: 14, scope: !3545)
!3548 = !DILocation(line: 2321, column: 21, scope: !3545)
!3549 = !DILocation(line: 2321, column: 24, scope: !3545)
!3550 = !DILocation(line: 2321, column: 29, scope: !3545)
!3551 = !DILocation(line: 2321, column: 7, scope: !3546)
!3552 = !DILocation(line: 2322, column: 31, scope: !3553)
!3553 = distinct !DILexicalBlock(scope: !3545, file: !3, line: 2321, column: 43)
!3554 = !DILocation(line: 2322, column: 68, scope: !3553)
!3555 = !DILocation(line: 2322, column: 77, scope: !3553)
!3556 = !DILocation(line: 2322, column: 84, scope: !3553)
!3557 = !DILocation(line: 2322, column: 91, scope: !3553)
!3558 = !DILocation(line: 2322, column: 94, scope: !3553)
!3559 = !DILocation(line: 2322, column: 4, scope: !3553)
!3560 = !DILocation(line: 2323, column: 31, scope: !3553)
!3561 = !DILocation(line: 2323, column: 67, scope: !3553)
!3562 = !DILocation(line: 2323, column: 76, scope: !3553)
!3563 = !DILocation(line: 2323, column: 83, scope: !3553)
!3564 = !DILocation(line: 2323, column: 90, scope: !3553)
!3565 = !DILocation(line: 2323, column: 93, scope: !3553)
!3566 = !DILocation(line: 2323, column: 4, scope: !3553)
!3567 = !DILocation(line: 2324, column: 3, scope: !3553)
!3568 = !DILocation(line: 2325, column: 12, scope: !3569)
!3569 = distinct !DILexicalBlock(scope: !3545, file: !3, line: 2325, column: 12)
!3570 = !DILocation(line: 2325, column: 19, scope: !3569)
!3571 = !DILocation(line: 2325, column: 26, scope: !3569)
!3572 = !DILocation(line: 2325, column: 29, scope: !3569)
!3573 = !DILocation(line: 2325, column: 34, scope: !3569)
!3574 = !DILocation(line: 2325, column: 12, scope: !3545)
!3575 = !DILocation(line: 2326, column: 31, scope: !3576)
!3576 = distinct !DILexicalBlock(scope: !3569, file: !3, line: 2325, column: 46)
!3577 = !DILocation(line: 2326, column: 68, scope: !3576)
!3578 = !DILocation(line: 2326, column: 77, scope: !3576)
!3579 = !DILocation(line: 2326, column: 84, scope: !3576)
!3580 = !DILocation(line: 2326, column: 91, scope: !3576)
!3581 = !DILocation(line: 2326, column: 94, scope: !3576)
!3582 = !DILocation(line: 2326, column: 4, scope: !3576)
!3583 = !DILocation(line: 2327, column: 3, scope: !3576)
!3584 = !DILocation(line: 2328, column: 12, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3569, file: !3, line: 2328, column: 12)
!3586 = !DILocation(line: 2328, column: 19, scope: !3585)
!3587 = !DILocation(line: 2328, column: 26, scope: !3585)
!3588 = !DILocation(line: 2328, column: 29, scope: !3585)
!3589 = !DILocation(line: 2328, column: 34, scope: !3585)
!3590 = !DILocation(line: 2328, column: 12, scope: !3569)
!3591 = !DILocation(line: 2329, column: 31, scope: !3592)
!3592 = distinct !DILexicalBlock(scope: !3585, file: !3, line: 2328, column: 48)
!3593 = !DILocation(line: 2329, column: 66, scope: !3592)
!3594 = !DILocation(line: 2329, column: 75, scope: !3592)
!3595 = !DILocation(line: 2329, column: 82, scope: !3592)
!3596 = !DILocation(line: 2329, column: 89, scope: !3592)
!3597 = !DILocation(line: 2329, column: 92, scope: !3592)
!3598 = !DILocation(line: 2329, column: 4, scope: !3592)
!3599 = !DILocation(line: 2330, column: 3, scope: !3592)
!3600 = !DILocation(line: 2331, column: 12, scope: !3601)
!3601 = distinct !DILexicalBlock(scope: !3585, file: !3, line: 2331, column: 12)
!3602 = !DILocation(line: 2331, column: 19, scope: !3601)
!3603 = !DILocation(line: 2331, column: 26, scope: !3601)
!3604 = !DILocation(line: 2331, column: 29, scope: !3601)
!3605 = !DILocation(line: 2331, column: 34, scope: !3601)
!3606 = !DILocation(line: 2331, column: 12, scope: !3585)
!3607 = !DILocation(line: 2332, column: 31, scope: !3608)
!3608 = distinct !DILexicalBlock(scope: !3601, file: !3, line: 2331, column: 56)
!3609 = !DILocation(line: 2332, column: 66, scope: !3608)
!3610 = !DILocation(line: 2332, column: 75, scope: !3608)
!3611 = !DILocation(line: 2332, column: 82, scope: !3608)
!3612 = !DILocation(line: 2332, column: 89, scope: !3608)
!3613 = !DILocation(line: 2332, column: 92, scope: !3608)
!3614 = !DILocation(line: 2332, column: 4, scope: !3608)
!3615 = !DILocation(line: 2333, column: 3, scope: !3608)
!3616 = !DILocation(line: 2334, column: 2, scope: !3546)
!3617 = !DILocation(line: 2320, column: 36, scope: !3539)
!3618 = !DILocation(line: 2320, column: 2, scope: !3539)
!3619 = distinct !{!3619, !3543, !3620}
!3620 = !DILocation(line: 2334, column: 2, scope: !3536)
!3621 = !DILocation(line: 2335, column: 1, scope: !3520)
!3622 = distinct !DISubprogram(name: "CustomData_from_bmeshpoly", scope: !3, file: !3, line: 2337, type: !3623, scopeLine: 2338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3623 = !DISubroutineType(types: !3624)
!3624 = !{null, !488, !488, !488, !158}
!3625 = !DILocalVariable(name: "fdata", arg: 1, scope: !3622, file: !3, line: 2337, type: !488)
!3626 = !DILocation(line: 2337, column: 44, scope: !3622)
!3627 = !DILocalVariable(name: "pdata", arg: 2, scope: !3622, file: !3, line: 2337, type: !488)
!3628 = !DILocation(line: 2337, column: 63, scope: !3622)
!3629 = !DILocalVariable(name: "ldata", arg: 3, scope: !3622, file: !3, line: 2337, type: !488)
!3630 = !DILocation(line: 2337, column: 82, scope: !3622)
!3631 = !DILocalVariable(name: "total", arg: 4, scope: !3622, file: !3, line: 2337, type: !158)
!3632 = !DILocation(line: 2337, column: 93, scope: !3622)
!3633 = !DILocalVariable(name: "i", scope: !3622, file: !3, line: 2339, type: !158)
!3634 = !DILocation(line: 2339, column: 6, scope: !3622)
!3635 = !DILocation(line: 2340, column: 9, scope: !3636)
!3636 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 2340, column: 2)
!3637 = !DILocation(line: 2340, column: 7, scope: !3636)
!3638 = !DILocation(line: 2340, column: 14, scope: !3639)
!3639 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 2340, column: 2)
!3640 = !DILocation(line: 2340, column: 18, scope: !3639)
!3641 = !DILocation(line: 2340, column: 25, scope: !3639)
!3642 = !DILocation(line: 2340, column: 16, scope: !3639)
!3643 = !DILocation(line: 2340, column: 2, scope: !3636)
!3644 = !DILocation(line: 2341, column: 7, scope: !3645)
!3645 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 2341, column: 7)
!3646 = distinct !DILexicalBlock(scope: !3639, file: !3, line: 2340, column: 40)
!3647 = !DILocation(line: 2341, column: 14, scope: !3645)
!3648 = !DILocation(line: 2341, column: 21, scope: !3645)
!3649 = !DILocation(line: 2341, column: 24, scope: !3645)
!3650 = !DILocation(line: 2341, column: 29, scope: !3645)
!3651 = !DILocation(line: 2341, column: 7, scope: !3646)
!3652 = !DILocation(line: 2342, column: 31, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3645, file: !3, line: 2341, column: 45)
!3654 = !DILocation(line: 2342, column: 66, scope: !3653)
!3655 = !DILocation(line: 2342, column: 73, scope: !3653)
!3656 = !DILocation(line: 2342, column: 80, scope: !3653)
!3657 = !DILocation(line: 2342, column: 87, scope: !3653)
!3658 = !DILocation(line: 2342, column: 90, scope: !3653)
!3659 = !DILocation(line: 2342, column: 4, scope: !3653)
!3660 = !DILocation(line: 2343, column: 3, scope: !3653)
!3661 = !DILocation(line: 2344, column: 2, scope: !3646)
!3662 = !DILocation(line: 2340, column: 36, scope: !3639)
!3663 = !DILocation(line: 2340, column: 2, scope: !3639)
!3664 = distinct !{!3664, !3643, !3665}
!3665 = !DILocation(line: 2344, column: 2, scope: !3636)
!3666 = !DILocation(line: 2345, column: 9, scope: !3667)
!3667 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 2345, column: 2)
!3668 = !DILocation(line: 2345, column: 7, scope: !3667)
!3669 = !DILocation(line: 2345, column: 14, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 2345, column: 2)
!3671 = !DILocation(line: 2345, column: 18, scope: !3670)
!3672 = !DILocation(line: 2345, column: 25, scope: !3670)
!3673 = !DILocation(line: 2345, column: 16, scope: !3670)
!3674 = !DILocation(line: 2345, column: 2, scope: !3667)
!3675 = !DILocation(line: 2346, column: 7, scope: !3676)
!3676 = distinct !DILexicalBlock(scope: !3677, file: !3, line: 2346, column: 7)
!3677 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 2345, column: 40)
!3678 = !DILocation(line: 2346, column: 14, scope: !3676)
!3679 = !DILocation(line: 2346, column: 21, scope: !3676)
!3680 = !DILocation(line: 2346, column: 24, scope: !3676)
!3681 = !DILocation(line: 2346, column: 29, scope: !3676)
!3682 = !DILocation(line: 2346, column: 7, scope: !3677)
!3683 = !DILocation(line: 2347, column: 31, scope: !3684)
!3684 = distinct !DILexicalBlock(scope: !3676, file: !3, line: 2346, column: 45)
!3685 = !DILocation(line: 2347, column: 64, scope: !3684)
!3686 = !DILocation(line: 2347, column: 71, scope: !3684)
!3687 = !DILocation(line: 2347, column: 78, scope: !3684)
!3688 = !DILocation(line: 2347, column: 85, scope: !3684)
!3689 = !DILocation(line: 2347, column: 88, scope: !3684)
!3690 = !DILocation(line: 2347, column: 4, scope: !3684)
!3691 = !DILocation(line: 2348, column: 3, scope: !3684)
!3692 = !DILocation(line: 2349, column: 12, scope: !3693)
!3693 = distinct !DILexicalBlock(scope: !3676, file: !3, line: 2349, column: 12)
!3694 = !DILocation(line: 2349, column: 19, scope: !3693)
!3695 = !DILocation(line: 2349, column: 26, scope: !3693)
!3696 = !DILocation(line: 2349, column: 29, scope: !3693)
!3697 = !DILocation(line: 2349, column: 34, scope: !3693)
!3698 = !DILocation(line: 2349, column: 12, scope: !3676)
!3699 = !DILocation(line: 2350, column: 31, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 2349, column: 58)
!3701 = !DILocation(line: 2350, column: 72, scope: !3700)
!3702 = !DILocation(line: 2350, column: 79, scope: !3700)
!3703 = !DILocation(line: 2350, column: 86, scope: !3700)
!3704 = !DILocation(line: 2350, column: 93, scope: !3700)
!3705 = !DILocation(line: 2350, column: 96, scope: !3700)
!3706 = !DILocation(line: 2350, column: 4, scope: !3700)
!3707 = !DILocation(line: 2351, column: 3, scope: !3700)
!3708 = !DILocation(line: 2352, column: 12, scope: !3709)
!3709 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 2352, column: 12)
!3710 = !DILocation(line: 2352, column: 19, scope: !3709)
!3711 = !DILocation(line: 2352, column: 26, scope: !3709)
!3712 = !DILocation(line: 2352, column: 29, scope: !3709)
!3713 = !DILocation(line: 2352, column: 34, scope: !3709)
!3714 = !DILocation(line: 2352, column: 12, scope: !3693)
!3715 = !DILocation(line: 2353, column: 31, scope: !3716)
!3716 = distinct !DILexicalBlock(scope: !3709, file: !3, line: 2352, column: 57)
!3717 = !DILocation(line: 2353, column: 69, scope: !3716)
!3718 = !DILocation(line: 2353, column: 76, scope: !3716)
!3719 = !DILocation(line: 2353, column: 83, scope: !3716)
!3720 = !DILocation(line: 2353, column: 90, scope: !3716)
!3721 = !DILocation(line: 2353, column: 93, scope: !3716)
!3722 = !DILocation(line: 2353, column: 4, scope: !3716)
!3723 = !DILocation(line: 2354, column: 3, scope: !3716)
!3724 = !DILocation(line: 2355, column: 12, scope: !3725)
!3725 = distinct !DILexicalBlock(scope: !3709, file: !3, line: 2355, column: 12)
!3726 = !DILocation(line: 2355, column: 19, scope: !3725)
!3727 = !DILocation(line: 2355, column: 26, scope: !3725)
!3728 = !DILocation(line: 2355, column: 29, scope: !3725)
!3729 = !DILocation(line: 2355, column: 34, scope: !3725)
!3730 = !DILocation(line: 2355, column: 12, scope: !3709)
!3731 = !DILocation(line: 2356, column: 31, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 2355, column: 48)
!3733 = !DILocation(line: 2356, column: 74, scope: !3732)
!3734 = !DILocation(line: 2356, column: 81, scope: !3732)
!3735 = !DILocation(line: 2356, column: 88, scope: !3732)
!3736 = !DILocation(line: 2356, column: 95, scope: !3732)
!3737 = !DILocation(line: 2356, column: 98, scope: !3732)
!3738 = !DILocation(line: 2356, column: 4, scope: !3732)
!3739 = !DILocation(line: 2357, column: 3, scope: !3732)
!3740 = !DILocation(line: 2358, column: 2, scope: !3677)
!3741 = !DILocation(line: 2345, column: 36, scope: !3670)
!3742 = !DILocation(line: 2345, column: 2, scope: !3670)
!3743 = distinct !{!3743, !3674, !3744}
!3744 = !DILocation(line: 2358, column: 2, scope: !3667)
!3745 = !DILocation(line: 2360, column: 40, scope: !3622)
!3746 = !DILocation(line: 2360, column: 47, scope: !3622)
!3747 = !DILocation(line: 2360, column: 54, scope: !3622)
!3748 = !DILocation(line: 2360, column: 2, scope: !3622)
!3749 = !DILocation(line: 2361, column: 1, scope: !3622)
!3750 = distinct !DISubprogram(name: "CustomData_bmesh_update_active_layers", scope: !3, file: !3, line: 2363, type: !3751, scopeLine: 2364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3751 = !DISubroutineType(types: !3752)
!3752 = !{null, !488, !488, !488}
!3753 = !DILocalVariable(name: "fdata", arg: 1, scope: !3750, file: !3, line: 2363, type: !488)
!3754 = !DILocation(line: 2363, column: 56, scope: !3750)
!3755 = !DILocalVariable(name: "pdata", arg: 2, scope: !3750, file: !3, line: 2363, type: !488)
!3756 = !DILocation(line: 2363, column: 75, scope: !3750)
!3757 = !DILocalVariable(name: "ldata", arg: 3, scope: !3750, file: !3, line: 2363, type: !488)
!3758 = !DILocation(line: 2363, column: 94, scope: !3750)
!3759 = !DILocalVariable(name: "act", scope: !3750, file: !3, line: 2365, type: !158)
!3760 = !DILocation(line: 2365, column: 6, scope: !3750)
!3761 = !DILocation(line: 2367, column: 27, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3750, file: !3, line: 2367, column: 6)
!3763 = !DILocation(line: 2367, column: 6, scope: !3762)
!3764 = !DILocation(line: 2367, column: 6, scope: !3750)
!3765 = !DILocation(line: 2368, column: 37, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3762, file: !3, line: 2367, column: 48)
!3767 = !DILocation(line: 2368, column: 9, scope: !3766)
!3768 = !DILocation(line: 2368, column: 7, scope: !3766)
!3769 = !DILocation(line: 2369, column: 31, scope: !3766)
!3770 = !DILocation(line: 2369, column: 50, scope: !3766)
!3771 = !DILocation(line: 2369, column: 3, scope: !3766)
!3772 = !DILocation(line: 2370, column: 31, scope: !3766)
!3773 = !DILocation(line: 2370, column: 49, scope: !3766)
!3774 = !DILocation(line: 2370, column: 3, scope: !3766)
!3775 = !DILocation(line: 2372, column: 37, scope: !3766)
!3776 = !DILocation(line: 2372, column: 9, scope: !3766)
!3777 = !DILocation(line: 2372, column: 7, scope: !3766)
!3778 = !DILocation(line: 2373, column: 31, scope: !3766)
!3779 = !DILocation(line: 2373, column: 50, scope: !3766)
!3780 = !DILocation(line: 2373, column: 3, scope: !3766)
!3781 = !DILocation(line: 2374, column: 31, scope: !3766)
!3782 = !DILocation(line: 2374, column: 49, scope: !3766)
!3783 = !DILocation(line: 2374, column: 3, scope: !3766)
!3784 = !DILocation(line: 2376, column: 36, scope: !3766)
!3785 = !DILocation(line: 2376, column: 9, scope: !3766)
!3786 = !DILocation(line: 2376, column: 7, scope: !3766)
!3787 = !DILocation(line: 2377, column: 30, scope: !3766)
!3788 = !DILocation(line: 2377, column: 49, scope: !3766)
!3789 = !DILocation(line: 2377, column: 3, scope: !3766)
!3790 = !DILocation(line: 2378, column: 30, scope: !3766)
!3791 = !DILocation(line: 2378, column: 48, scope: !3766)
!3792 = !DILocation(line: 2378, column: 3, scope: !3766)
!3793 = !DILocation(line: 2380, column: 38, scope: !3766)
!3794 = !DILocation(line: 2380, column: 9, scope: !3766)
!3795 = !DILocation(line: 2380, column: 7, scope: !3766)
!3796 = !DILocation(line: 2381, column: 32, scope: !3766)
!3797 = !DILocation(line: 2381, column: 51, scope: !3766)
!3798 = !DILocation(line: 2381, column: 3, scope: !3766)
!3799 = !DILocation(line: 2382, column: 32, scope: !3766)
!3800 = !DILocation(line: 2382, column: 50, scope: !3766)
!3801 = !DILocation(line: 2382, column: 3, scope: !3766)
!3802 = !DILocation(line: 2383, column: 2, scope: !3766)
!3803 = !DILocation(line: 2385, column: 27, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3750, file: !3, line: 2385, column: 6)
!3805 = !DILocation(line: 2385, column: 6, scope: !3804)
!3806 = !DILocation(line: 2385, column: 6, scope: !3750)
!3807 = !DILocation(line: 2386, column: 37, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 2385, column: 48)
!3809 = !DILocation(line: 2386, column: 9, scope: !3808)
!3810 = !DILocation(line: 2386, column: 7, scope: !3808)
!3811 = !DILocation(line: 2387, column: 31, scope: !3808)
!3812 = !DILocation(line: 2387, column: 47, scope: !3808)
!3813 = !DILocation(line: 2387, column: 3, scope: !3808)
!3814 = !DILocation(line: 2389, column: 37, scope: !3808)
!3815 = !DILocation(line: 2389, column: 9, scope: !3808)
!3816 = !DILocation(line: 2389, column: 7, scope: !3808)
!3817 = !DILocation(line: 2390, column: 31, scope: !3808)
!3818 = !DILocation(line: 2390, column: 47, scope: !3808)
!3819 = !DILocation(line: 2390, column: 3, scope: !3808)
!3820 = !DILocation(line: 2392, column: 36, scope: !3808)
!3821 = !DILocation(line: 2392, column: 9, scope: !3808)
!3822 = !DILocation(line: 2392, column: 7, scope: !3808)
!3823 = !DILocation(line: 2393, column: 30, scope: !3808)
!3824 = !DILocation(line: 2393, column: 46, scope: !3808)
!3825 = !DILocation(line: 2393, column: 3, scope: !3808)
!3826 = !DILocation(line: 2395, column: 38, scope: !3808)
!3827 = !DILocation(line: 2395, column: 9, scope: !3808)
!3828 = !DILocation(line: 2395, column: 7, scope: !3808)
!3829 = !DILocation(line: 2396, column: 32, scope: !3808)
!3830 = !DILocation(line: 2396, column: 48, scope: !3808)
!3831 = !DILocation(line: 2396, column: 3, scope: !3808)
!3832 = !DILocation(line: 2397, column: 2, scope: !3808)
!3833 = !DILocation(line: 2398, column: 1, scope: !3750)
!3834 = distinct !DISubprogram(name: "CustomData_bmesh_do_versions_update_active_layers", scope: !3, file: !3, line: 2405, type: !3751, scopeLine: 2406, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3835 = !DILocalVariable(name: "fdata", arg: 1, scope: !3834, file: !3, line: 2405, type: !488)
!3836 = !DILocation(line: 2405, column: 68, scope: !3834)
!3837 = !DILocalVariable(name: "pdata", arg: 2, scope: !3834, file: !3, line: 2405, type: !488)
!3838 = !DILocation(line: 2405, column: 87, scope: !3834)
!3839 = !DILocalVariable(name: "ldata", arg: 3, scope: !3834, file: !3, line: 2405, type: !488)
!3840 = !DILocation(line: 2405, column: 106, scope: !3834)
!3841 = !DILocalVariable(name: "act", scope: !3834, file: !3, line: 2407, type: !158)
!3842 = !DILocation(line: 2407, column: 6, scope: !3834)
!3843 = !DILocation(line: 2409, column: 27, scope: !3844)
!3844 = distinct !DILexicalBlock(scope: !3834, file: !3, line: 2409, column: 6)
!3845 = !DILocation(line: 2409, column: 6, scope: !3844)
!3846 = !DILocation(line: 2409, column: 6, scope: !3834)
!3847 = !DILocation(line: 2410, column: 37, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 2409, column: 46)
!3849 = !DILocation(line: 2410, column: 9, scope: !3848)
!3850 = !DILocation(line: 2410, column: 7, scope: !3848)
!3851 = !DILocation(line: 2411, column: 31, scope: !3848)
!3852 = !DILocation(line: 2411, column: 51, scope: !3848)
!3853 = !DILocation(line: 2411, column: 3, scope: !3848)
!3854 = !DILocation(line: 2412, column: 31, scope: !3848)
!3855 = !DILocation(line: 2412, column: 50, scope: !3848)
!3856 = !DILocation(line: 2412, column: 3, scope: !3848)
!3857 = !DILocation(line: 2414, column: 37, scope: !3848)
!3858 = !DILocation(line: 2414, column: 9, scope: !3848)
!3859 = !DILocation(line: 2414, column: 7, scope: !3848)
!3860 = !DILocation(line: 2415, column: 31, scope: !3848)
!3861 = !DILocation(line: 2415, column: 51, scope: !3848)
!3862 = !DILocation(line: 2415, column: 3, scope: !3848)
!3863 = !DILocation(line: 2416, column: 31, scope: !3848)
!3864 = !DILocation(line: 2416, column: 50, scope: !3848)
!3865 = !DILocation(line: 2416, column: 3, scope: !3848)
!3866 = !DILocation(line: 2418, column: 36, scope: !3848)
!3867 = !DILocation(line: 2418, column: 9, scope: !3848)
!3868 = !DILocation(line: 2418, column: 7, scope: !3848)
!3869 = !DILocation(line: 2419, column: 30, scope: !3848)
!3870 = !DILocation(line: 2419, column: 50, scope: !3848)
!3871 = !DILocation(line: 2419, column: 3, scope: !3848)
!3872 = !DILocation(line: 2420, column: 30, scope: !3848)
!3873 = !DILocation(line: 2420, column: 49, scope: !3848)
!3874 = !DILocation(line: 2420, column: 3, scope: !3848)
!3875 = !DILocation(line: 2422, column: 38, scope: !3848)
!3876 = !DILocation(line: 2422, column: 9, scope: !3848)
!3877 = !DILocation(line: 2422, column: 7, scope: !3848)
!3878 = !DILocation(line: 2423, column: 32, scope: !3848)
!3879 = !DILocation(line: 2423, column: 52, scope: !3848)
!3880 = !DILocation(line: 2423, column: 3, scope: !3848)
!3881 = !DILocation(line: 2424, column: 32, scope: !3848)
!3882 = !DILocation(line: 2424, column: 51, scope: !3848)
!3883 = !DILocation(line: 2424, column: 3, scope: !3848)
!3884 = !DILocation(line: 2425, column: 2, scope: !3848)
!3885 = !DILocation(line: 2427, column: 27, scope: !3886)
!3886 = distinct !DILexicalBlock(scope: !3834, file: !3, line: 2427, column: 6)
!3887 = !DILocation(line: 2427, column: 6, scope: !3886)
!3888 = !DILocation(line: 2427, column: 6, scope: !3834)
!3889 = !DILocation(line: 2428, column: 37, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 2427, column: 44)
!3891 = !DILocation(line: 2428, column: 9, scope: !3890)
!3892 = !DILocation(line: 2428, column: 7, scope: !3890)
!3893 = !DILocation(line: 2429, column: 31, scope: !3890)
!3894 = !DILocation(line: 2429, column: 51, scope: !3890)
!3895 = !DILocation(line: 2429, column: 3, scope: !3890)
!3896 = !DILocation(line: 2431, column: 37, scope: !3890)
!3897 = !DILocation(line: 2431, column: 9, scope: !3890)
!3898 = !DILocation(line: 2431, column: 7, scope: !3890)
!3899 = !DILocation(line: 2432, column: 31, scope: !3890)
!3900 = !DILocation(line: 2432, column: 51, scope: !3890)
!3901 = !DILocation(line: 2432, column: 3, scope: !3890)
!3902 = !DILocation(line: 2434, column: 36, scope: !3890)
!3903 = !DILocation(line: 2434, column: 9, scope: !3890)
!3904 = !DILocation(line: 2434, column: 7, scope: !3890)
!3905 = !DILocation(line: 2435, column: 30, scope: !3890)
!3906 = !DILocation(line: 2435, column: 50, scope: !3890)
!3907 = !DILocation(line: 2435, column: 3, scope: !3890)
!3908 = !DILocation(line: 2437, column: 38, scope: !3890)
!3909 = !DILocation(line: 2437, column: 9, scope: !3890)
!3910 = !DILocation(line: 2437, column: 7, scope: !3890)
!3911 = !DILocation(line: 2438, column: 32, scope: !3890)
!3912 = !DILocation(line: 2438, column: 52, scope: !3890)
!3913 = !DILocation(line: 2438, column: 3, scope: !3890)
!3914 = !DILocation(line: 2439, column: 2, scope: !3890)
!3915 = !DILocation(line: 2440, column: 1, scope: !3834)
!3916 = distinct !DISubprogram(name: "CustomData_bmesh_init_pool", scope: !3, file: !3, line: 2442, type: !3917, scopeLine: 2443, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3917 = !DISubroutineType(types: !3918)
!3918 = !{null, !488, !158, !317}
!3919 = !DILocalVariable(name: "data", arg: 1, scope: !3916, file: !3, line: 2442, type: !488)
!3920 = !DILocation(line: 2442, column: 45, scope: !3916)
!3921 = !DILocalVariable(name: "totelem", arg: 2, scope: !3916, file: !3, line: 2442, type: !158)
!3922 = !DILocation(line: 2442, column: 55, scope: !3916)
!3923 = !DILocalVariable(name: "htype", arg: 3, scope: !3916, file: !3, line: 2442, type: !317)
!3924 = !DILocation(line: 2442, column: 75, scope: !3916)
!3925 = !DILocalVariable(name: "chunksize", scope: !3916, file: !3, line: 2444, type: !158)
!3926 = !DILocation(line: 2444, column: 6, scope: !3916)
!3927 = !DILocation(line: 2449, column: 10, scope: !3916)
!3928 = !DILocation(line: 2449, column: 2, scope: !3916)
!3929 = !DILocation(line: 2450, column: 55, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3916, file: !3, line: 2449, column: 17)
!3931 = !DILocation(line: 2450, column: 27, scope: !3930)
!3932 = !DILocation(line: 2450, column: 65, scope: !3930)
!3933 = !DILocation(line: 2451, column: 55, scope: !3930)
!3934 = !DILocation(line: 2451, column: 27, scope: !3930)
!3935 = !DILocation(line: 2451, column: 65, scope: !3930)
!3936 = !DILocation(line: 2452, column: 55, scope: !3930)
!3937 = !DILocation(line: 2452, column: 27, scope: !3930)
!3938 = !DILocation(line: 2452, column: 65, scope: !3930)
!3939 = !DILocation(line: 2453, column: 55, scope: !3930)
!3940 = !DILocation(line: 2453, column: 27, scope: !3930)
!3941 = !DILocation(line: 2453, column: 65, scope: !3930)
!3942 = !DILocation(line: 2456, column: 14, scope: !3930)
!3943 = !DILocation(line: 2457, column: 4, scope: !3930)
!3944 = !DILocation(line: 2461, column: 6, scope: !3945)
!3945 = distinct !DILexicalBlock(scope: !3916, file: !3, line: 2461, column: 6)
!3946 = !DILocation(line: 2461, column: 12, scope: !3945)
!3947 = !DILocation(line: 2461, column: 6, scope: !3916)
!3948 = !DILocation(line: 2462, column: 35, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 2461, column: 22)
!3950 = !DILocation(line: 2462, column: 41, scope: !3949)
!3951 = !DILocation(line: 2462, column: 50, scope: !3949)
!3952 = !DILocation(line: 2462, column: 59, scope: !3949)
!3953 = !DILocation(line: 2462, column: 16, scope: !3949)
!3954 = !DILocation(line: 2462, column: 3, scope: !3949)
!3955 = !DILocation(line: 2462, column: 9, scope: !3949)
!3956 = !DILocation(line: 2462, column: 14, scope: !3949)
!3957 = !DILocation(line: 2463, column: 2, scope: !3949)
!3958 = !DILocation(line: 2464, column: 1, scope: !3916)
!3959 = distinct !DISubprogram(name: "CustomData_bmesh_merge", scope: !3, file: !3, line: 2466, type: !3960, scopeLine: 2468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!3960 = !DISubroutineType(types: !3961)
!3961 = !{!361, !488, !488, !140, !158, !3962, !317}
!3962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3963, size: 64)
!3963 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMesh", file: !234, line: 246, baseType: !3964)
!3964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMesh", file: !234, line: 186, size: 8064, elements: !3965)
!3965 = !{!3966, !3967, !3968, !3969, !3970, !3971, !3972, !3973, !3974, !3975, !3976, !3977, !3978, !3979, !3981, !3983, !3985, !3986, !3987, !3988, !3989, !3990, !3991, !3992, !4041, !4042, !4043, !4044, !4045, !4046, !4047, !4048, !4049, !4056, !4057, !4058}
!3966 = !DIDerivedType(tag: DW_TAG_member, name: "totvert", scope: !3964, file: !234, line: 187, baseType: !158, size: 32)
!3967 = !DIDerivedType(tag: DW_TAG_member, name: "totedge", scope: !3964, file: !234, line: 187, baseType: !158, size: 32, offset: 32)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "totloop", scope: !3964, file: !234, line: 187, baseType: !158, size: 32, offset: 64)
!3969 = !DIDerivedType(tag: DW_TAG_member, name: "totface", scope: !3964, file: !234, line: 187, baseType: !158, size: 32, offset: 96)
!3970 = !DIDerivedType(tag: DW_TAG_member, name: "totvertsel", scope: !3964, file: !234, line: 188, baseType: !158, size: 32, offset: 128)
!3971 = !DIDerivedType(tag: DW_TAG_member, name: "totedgesel", scope: !3964, file: !234, line: 188, baseType: !158, size: 32, offset: 160)
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "totfacesel", scope: !3964, file: !234, line: 188, baseType: !158, size: 32, offset: 192)
!3973 = !DIDerivedType(tag: DW_TAG_member, name: "elem_index_dirty", scope: !3964, file: !234, line: 193, baseType: !148, size: 8, offset: 224)
!3974 = !DIDerivedType(tag: DW_TAG_member, name: "elem_table_dirty", scope: !3964, file: !234, line: 197, baseType: !148, size: 8, offset: 232)
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "vpool", scope: !3964, file: !234, line: 201, baseType: !516, size: 64, offset: 256)
!3976 = !DIDerivedType(tag: DW_TAG_member, name: "epool", scope: !3964, file: !234, line: 201, baseType: !516, size: 64, offset: 320)
!3977 = !DIDerivedType(tag: DW_TAG_member, name: "lpool", scope: !3964, file: !234, line: 201, baseType: !516, size: 64, offset: 384)
!3978 = !DIDerivedType(tag: DW_TAG_member, name: "fpool", scope: !3964, file: !234, line: 201, baseType: !516, size: 64, offset: 448)
!3979 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3964, file: !234, line: 208, baseType: !3980, size: 64, offset: 512)
!3980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !232, size: 64)
!3981 = !DIDerivedType(tag: DW_TAG_member, name: "etable", scope: !3964, file: !234, line: 209, baseType: !3982, size: 64, offset: 576)
!3982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !295, size: 64)
!3983 = !DIDerivedType(tag: DW_TAG_member, name: "ftable", scope: !3964, file: !234, line: 210, baseType: !3984, size: 64, offset: 640)
!3984 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !297, size: 64)
!3985 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_tot", scope: !3964, file: !234, line: 213, baseType: !158, size: 32, offset: 704)
!3986 = !DIDerivedType(tag: DW_TAG_member, name: "etable_tot", scope: !3964, file: !234, line: 214, baseType: !158, size: 32, offset: 736)
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "ftable_tot", scope: !3964, file: !234, line: 215, baseType: !158, size: 32, offset: 768)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "vtoolflagpool", scope: !3964, file: !234, line: 218, baseType: !516, size: 64, offset: 832)
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "etoolflagpool", scope: !3964, file: !234, line: 218, baseType: !516, size: 64, offset: 896)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "ftoolflagpool", scope: !3964, file: !234, line: 218, baseType: !516, size: 64, offset: 960)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "stackdepth", scope: !3964, file: !234, line: 220, baseType: !158, size: 32, offset: 1024)
!3992 = !DIDerivedType(tag: DW_TAG_member, name: "currentop", scope: !3964, file: !234, line: 221, baseType: !3993, size: 64, offset: 1088)
!3993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3994, size: 64)
!3994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMOperator", file: !63, line: 190, size: 10496, elements: !3995)
!3995 = !{!3996, !4029, !4030, !4034, !4037, !4038, !4040}
!3996 = !DIDerivedType(tag: DW_TAG_member, name: "slots_in", scope: !3994, file: !63, line: 191, baseType: !3997, size: 5120)
!3997 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3998, size: 5120, elements: !4027)
!3998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMOpSlot", file: !63, line: 147, size: 320, elements: !3999)
!3999 = !{!4000, !4001, !4003, !4013, !4014}
!4000 = !DIDerivedType(tag: DW_TAG_member, name: "slot_name", scope: !3998, file: !63, line: 148, baseType: !316, size: 64)
!4001 = !DIDerivedType(tag: DW_TAG_member, name: "slot_type", scope: !3998, file: !63, line: 149, baseType: !4002, size: 32, offset: 64)
!4002 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotType", file: !63, line: 112, baseType: !62)
!4003 = !DIDerivedType(tag: DW_TAG_member, name: "slot_subtype", scope: !3998, file: !63, line: 150, baseType: !4004, size: 32, offset: 96)
!4004 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Union", file: !63, line: 142, baseType: !4005)
!4005 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eBMOpSlotSubType_Union", file: !63, line: 138, size: 32, elements: !4006)
!4006 = !{!4007, !4009, !4011}
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !4005, file: !63, line: 139, baseType: !4008, size: 32)
!4008 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Elem", file: !63, line: 122, baseType: !73)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4005, file: !63, line: 140, baseType: !4010, size: 32)
!4010 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Ptr", file: !63, line: 136, baseType: !79)
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !4005, file: !63, line: 141, baseType: !4012, size: 32)
!4012 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Map", file: !63, line: 130, baseType: !85)
!4013 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3998, file: !63, line: 152, baseType: !158, size: 32, offset: 128)
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3998, file: !63, line: 162, baseType: !4015, size: 128, offset: 192)
!4015 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3998, file: !63, line: 155, size: 128, elements: !4016)
!4016 = !{!4017, !4018, !4019, !4020, !4021, !4022}
!4017 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !4015, file: !63, line: 156, baseType: !158, size: 32)
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !4015, file: !63, line: 157, baseType: !160, size: 32)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !4015, file: !63, line: 158, baseType: !146, size: 64)
!4020 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4015, file: !63, line: 159, baseType: !252, size: 96)
!4021 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !4015, file: !63, line: 160, baseType: !222, size: 64)
!4022 = !DIDerivedType(tag: DW_TAG_member, name: "ghash", scope: !4015, file: !63, line: 161, baseType: !4023, size: 64)
!4023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4024, size: 64)
!4024 = !DIDerivedType(tag: DW_TAG_typedef, name: "GHash", file: !4025, line: 48, baseType: !4026)
!4025 = !DIFile(filename: "blender/source/blender/blenlib/BLI_ghash.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!4026 = !DICompositeType(tag: DW_TAG_structure_type, name: "GHash", file: !4025, line: 48, flags: DIFlagFwdDecl)
!4027 = !{!4028}
!4028 = !DISubrange(count: 16)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "slots_out", scope: !3994, file: !63, line: 192, baseType: !3997, size: 5120, offset: 5120)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "exec", scope: !3994, file: !63, line: 193, baseType: !4031, size: 64, offset: 10240)
!4031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4032, size: 64)
!4032 = !DISubroutineType(types: !4033)
!4033 = !{null, !3962, !3993}
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "arena", scope: !3994, file: !63, line: 194, baseType: !4035, size: 64, offset: 10304)
!4035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4036, size: 64)
!4036 = !DICompositeType(tag: DW_TAG_structure_type, name: "MemArena", file: !63, line: 194, flags: DIFlagFwdDecl)
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3994, file: !63, line: 195, baseType: !158, size: 32, offset: 10368)
!4038 = !DIDerivedType(tag: DW_TAG_member, name: "type_flag", scope: !3994, file: !63, line: 196, baseType: !4039, size: 32, offset: 10400)
!4039 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMOpTypeFlag", file: !63, line: 188, baseType: !93)
!4040 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !3994, file: !63, line: 197, baseType: !158, size: 32, offset: 10432)
!4041 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !3964, file: !234, line: 223, baseType: !489, size: 1600, offset: 1152)
!4042 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !3964, file: !234, line: 223, baseType: !489, size: 1600, offset: 2752)
!4043 = !DIDerivedType(tag: DW_TAG_member, name: "ldata", scope: !3964, file: !234, line: 223, baseType: !489, size: 1600, offset: 4352)
!4044 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !3964, file: !234, line: 223, baseType: !489, size: 1600, offset: 5952)
!4045 = !DIDerivedType(tag: DW_TAG_member, name: "selectmode", scope: !3964, file: !234, line: 233, baseType: !179, size: 16, offset: 7552)
!4046 = !DIDerivedType(tag: DW_TAG_member, name: "shapenr", scope: !3964, file: !234, line: 236, baseType: !158, size: 32, offset: 7584)
!4047 = !DIDerivedType(tag: DW_TAG_member, name: "walkers", scope: !3964, file: !234, line: 238, baseType: !158, size: 32, offset: 7616)
!4048 = !DIDerivedType(tag: DW_TAG_member, name: "totflags", scope: !3964, file: !234, line: 238, baseType: !158, size: 32, offset: 7648)
!4049 = !DIDerivedType(tag: DW_TAG_member, name: "selected", scope: !3964, file: !234, line: 239, baseType: !4050, size: 128, offset: 7680)
!4050 = !DIDerivedType(tag: DW_TAG_typedef, name: "ListBase", file: !4051, line: 71, baseType: !4052)
!4051 = !DIFile(filename: "blender/source/blender/makesdna/DNA_listBase.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!4052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ListBase", file: !4051, line: 69, size: 128, elements: !4053)
!4053 = !{!4054, !4055}
!4054 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !4052, file: !4051, line: 70, baseType: !146, size: 64)
!4055 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !4052, file: !4051, line: 70, baseType: !146, size: 64, offset: 64)
!4056 = !DIDerivedType(tag: DW_TAG_member, name: "act_face", scope: !3964, file: !234, line: 241, baseType: !297, size: 64, offset: 7808)
!4057 = !DIDerivedType(tag: DW_TAG_member, name: "errorstack", scope: !3964, file: !234, line: 243, baseType: !4050, size: 128, offset: 7872)
!4058 = !DIDerivedType(tag: DW_TAG_member, name: "py_handle", scope: !3964, file: !234, line: 245, baseType: !146, size: 64, offset: 8000)
!4059 = !DILocalVariable(name: "source", arg: 1, scope: !3959, file: !3, line: 2466, type: !488)
!4060 = !DILocation(line: 2466, column: 41, scope: !3959)
!4061 = !DILocalVariable(name: "dest", arg: 2, scope: !3959, file: !3, line: 2466, type: !488)
!4062 = !DILocation(line: 2466, column: 61, scope: !3959)
!4063 = !DILocalVariable(name: "mask", arg: 3, scope: !3959, file: !3, line: 2467, type: !140)
!4064 = !DILocation(line: 2467, column: 44, scope: !3959)
!4065 = !DILocalVariable(name: "alloctype", arg: 4, scope: !3959, file: !3, line: 2467, type: !158)
!4066 = !DILocation(line: 2467, column: 54, scope: !3959)
!4067 = !DILocalVariable(name: "bm", arg: 5, scope: !3959, file: !3, line: 2467, type: !3962)
!4068 = !DILocation(line: 2467, column: 72, scope: !3959)
!4069 = !DILocalVariable(name: "htype", arg: 6, scope: !3959, file: !3, line: 2467, type: !317)
!4070 = !DILocation(line: 2467, column: 87, scope: !3959)
!4071 = !DILocalVariable(name: "h", scope: !3959, file: !3, line: 2469, type: !4072)
!4072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !238, size: 64)
!4073 = !DILocation(line: 2469, column: 12, scope: !3959)
!4074 = !DILocalVariable(name: "iter", scope: !3959, file: !3, line: 2470, type: !4075)
!4075 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMIter", file: !101, line: 186, baseType: !4076)
!4076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter", file: !101, line: 164, size: 512, elements: !4077)
!4077 = !{!4078, !4157, !4158, !4159, !4160}
!4078 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4076, file: !101, line: 179, baseType: !4079, size: 320)
!4079 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4076, file: !101, line: 166, size: 320, elements: !4080)
!4080 = !{!4081, !4095, !4101, !4109, !4117, !4123, !4129, !4135, !4139, !4145, !4151}
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "elem_of_mesh", scope: !4079, file: !101, line: 167, baseType: !4082, size: 192)
!4082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__elem_of_mesh", file: !101, line: 113, size: 192, elements: !4083)
!4083 = !{!4084}
!4084 = !DIDerivedType(tag: DW_TAG_member, name: "pooliter", scope: !4082, file: !101, line: 114, baseType: !4085, size: 192)
!4085 = !DIDerivedType(tag: DW_TAG_typedef, name: "BLI_mempool_iter", file: !58, line: 80, baseType: !4086)
!4086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BLI_mempool_iter", file: !58, line: 76, size: 192, elements: !4087)
!4087 = !{!4088, !4091, !4094}
!4088 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !4086, file: !58, line: 77, baseType: !4089, size: 64)
!4089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4090, size: 64)
!4090 = !DIDerivedType(tag: DW_TAG_typedef, name: "BLI_mempool", file: !58, line: 47, baseType: !517)
!4091 = !DIDerivedType(tag: DW_TAG_member, name: "curchunk", scope: !4086, file: !58, line: 78, baseType: !4092, size: 64, offset: 64)
!4092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4093, size: 64)
!4093 = !DICompositeType(tag: DW_TAG_structure_type, name: "BLI_mempool_chunk", file: !58, line: 45, flags: DIFlagFwdDecl)
!4094 = !DIDerivedType(tag: DW_TAG_member, name: "curindex", scope: !4086, file: !58, line: 79, baseType: !7, size: 32, offset: 128)
!4095 = !DIDerivedType(tag: DW_TAG_member, name: "edge_of_vert", scope: !4079, file: !101, line: 169, baseType: !4096, size: 192)
!4096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__edge_of_vert", file: !101, line: 116, size: 192, elements: !4097)
!4097 = !{!4098, !4099, !4100}
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !4096, file: !101, line: 117, baseType: !232, size: 64)
!4099 = !DIDerivedType(tag: DW_TAG_member, name: "e_first", scope: !4096, file: !101, line: 118, baseType: !295, size: 64, offset: 64)
!4100 = !DIDerivedType(tag: DW_TAG_member, name: "e_next", scope: !4096, file: !101, line: 118, baseType: !295, size: 64, offset: 128)
!4101 = !DIDerivedType(tag: DW_TAG_member, name: "face_of_vert", scope: !4079, file: !101, line: 170, baseType: !4102, size: 320)
!4102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__face_of_vert", file: !101, line: 120, size: 320, elements: !4103)
!4103 = !{!4104, !4105, !4106, !4107, !4108}
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !4102, file: !101, line: 121, baseType: !232, size: 64)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !4102, file: !101, line: 122, baseType: !279, size: 64, offset: 64)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !4102, file: !101, line: 122, baseType: !279, size: 64, offset: 128)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "e_first", scope: !4102, file: !101, line: 123, baseType: !295, size: 64, offset: 192)
!4108 = !DIDerivedType(tag: DW_TAG_member, name: "e_next", scope: !4102, file: !101, line: 123, baseType: !295, size: 64, offset: 256)
!4109 = !DIDerivedType(tag: DW_TAG_member, name: "loop_of_vert", scope: !4079, file: !101, line: 171, baseType: !4110, size: 320)
!4110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__loop_of_vert", file: !101, line: 125, size: 320, elements: !4111)
!4111 = !{!4112, !4113, !4114, !4115, !4116}
!4112 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !4110, file: !101, line: 126, baseType: !232, size: 64)
!4113 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !4110, file: !101, line: 127, baseType: !279, size: 64, offset: 64)
!4114 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !4110, file: !101, line: 127, baseType: !279, size: 64, offset: 128)
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "e_first", scope: !4110, file: !101, line: 128, baseType: !295, size: 64, offset: 192)
!4116 = !DIDerivedType(tag: DW_TAG_member, name: "e_next", scope: !4110, file: !101, line: 128, baseType: !295, size: 64, offset: 256)
!4117 = !DIDerivedType(tag: DW_TAG_member, name: "loop_of_edge", scope: !4079, file: !101, line: 172, baseType: !4118, size: 192)
!4118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__loop_of_edge", file: !101, line: 130, size: 192, elements: !4119)
!4119 = !{!4120, !4121, !4122}
!4120 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !4118, file: !101, line: 131, baseType: !295, size: 64)
!4121 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !4118, file: !101, line: 132, baseType: !279, size: 64, offset: 64)
!4122 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !4118, file: !101, line: 132, baseType: !279, size: 64, offset: 128)
!4123 = !DIDerivedType(tag: DW_TAG_member, name: "loop_of_loop", scope: !4079, file: !101, line: 173, baseType: !4124, size: 192)
!4124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__loop_of_loop", file: !101, line: 134, size: 192, elements: !4125)
!4125 = !{!4126, !4127, !4128}
!4126 = !DIDerivedType(tag: DW_TAG_member, name: "ldata", scope: !4124, file: !101, line: 135, baseType: !279, size: 64)
!4127 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !4124, file: !101, line: 136, baseType: !279, size: 64, offset: 64)
!4128 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !4124, file: !101, line: 136, baseType: !279, size: 64, offset: 128)
!4129 = !DIDerivedType(tag: DW_TAG_member, name: "face_of_edge", scope: !4079, file: !101, line: 174, baseType: !4130, size: 192)
!4130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__face_of_edge", file: !101, line: 138, size: 192, elements: !4131)
!4131 = !{!4132, !4133, !4134}
!4132 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !4130, file: !101, line: 139, baseType: !295, size: 64)
!4133 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !4130, file: !101, line: 140, baseType: !279, size: 64, offset: 64)
!4134 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !4130, file: !101, line: 140, baseType: !279, size: 64, offset: 128)
!4135 = !DIDerivedType(tag: DW_TAG_member, name: "vert_of_edge", scope: !4079, file: !101, line: 175, baseType: !4136, size: 64)
!4136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__vert_of_edge", file: !101, line: 142, size: 64, elements: !4137)
!4137 = !{!4138}
!4138 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !4136, file: !101, line: 143, baseType: !295, size: 64)
!4139 = !DIDerivedType(tag: DW_TAG_member, name: "vert_of_face", scope: !4079, file: !101, line: 176, baseType: !4140, size: 192)
!4140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__vert_of_face", file: !101, line: 145, size: 192, elements: !4141)
!4141 = !{!4142, !4143, !4144}
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !4140, file: !101, line: 146, baseType: !297, size: 64)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !4140, file: !101, line: 147, baseType: !279, size: 64, offset: 64)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !4140, file: !101, line: 147, baseType: !279, size: 64, offset: 128)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "edge_of_face", scope: !4079, file: !101, line: 177, baseType: !4146, size: 192)
!4146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__edge_of_face", file: !101, line: 149, size: 192, elements: !4147)
!4147 = !{!4148, !4149, !4150}
!4148 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !4146, file: !101, line: 150, baseType: !297, size: 64)
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !4146, file: !101, line: 151, baseType: !279, size: 64, offset: 64)
!4150 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !4146, file: !101, line: 151, baseType: !279, size: 64, offset: 128)
!4151 = !DIDerivedType(tag: DW_TAG_member, name: "loop_of_face", scope: !4079, file: !101, line: 178, baseType: !4152, size: 192)
!4152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__loop_of_face", file: !101, line: 153, size: 192, elements: !4153)
!4153 = !{!4154, !4155, !4156}
!4154 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !4152, file: !101, line: 154, baseType: !297, size: 64)
!4155 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !4152, file: !101, line: 155, baseType: !279, size: 64, offset: 64)
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !4152, file: !101, line: 155, baseType: !279, size: 64, offset: 128)
!4157 = !DIDerivedType(tag: DW_TAG_member, name: "begin", scope: !4076, file: !101, line: 181, baseType: !224, size: 64, offset: 320)
!4158 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !4076, file: !101, line: 182, baseType: !228, size: 64, offset: 384)
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !4076, file: !101, line: 184, baseType: !158, size: 32, offset: 448)
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "itype", scope: !4076, file: !101, line: 185, baseType: !148, size: 8, offset: 480)
!4161 = !DILocation(line: 2470, column: 9, scope: !3959)
!4162 = !DILocalVariable(name: "destold", scope: !3959, file: !3, line: 2471, type: !489)
!4163 = !DILocation(line: 2471, column: 13, scope: !3959)
!4164 = !DILocalVariable(name: "tmp", scope: !3959, file: !3, line: 2472, type: !146)
!4165 = !DILocation(line: 2472, column: 8, scope: !3959)
!4166 = !DILocalVariable(name: "iter_type", scope: !3959, file: !3, line: 2473, type: !158)
!4167 = !DILocation(line: 2473, column: 6, scope: !3959)
!4168 = !DILocalVariable(name: "totelem", scope: !3959, file: !3, line: 2474, type: !158)
!4169 = !DILocation(line: 2474, column: 6, scope: !3959)
!4170 = !DILocation(line: 2476, column: 43, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 2476, column: 6)
!4172 = !DILocation(line: 2476, column: 51, scope: !4171)
!4173 = !DILocation(line: 2476, column: 6, scope: !4171)
!4174 = !DILocation(line: 2476, column: 57, scope: !4171)
!4175 = !DILocation(line: 2476, column: 6, scope: !3959)
!4176 = !DILocation(line: 2477, column: 3, scope: !4177)
!4177 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 2476, column: 63)
!4178 = !DILocation(line: 2482, column: 13, scope: !3959)
!4179 = !DILocation(line: 2482, column: 12, scope: !3959)
!4180 = !DILocation(line: 2483, column: 14, scope: !4181)
!4181 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 2483, column: 6)
!4182 = !DILocation(line: 2483, column: 6, scope: !4181)
!4183 = !DILocation(line: 2483, column: 6, scope: !3959)
!4184 = !DILocation(line: 2484, column: 20, scope: !4185)
!4185 = distinct !DILexicalBlock(scope: !4181, file: !3, line: 2483, column: 22)
!4186 = !DILocation(line: 2484, column: 42, scope: !4185)
!4187 = !DILocation(line: 2484, column: 34, scope: !4185)
!4188 = !DILocation(line: 2484, column: 11, scope: !4185)
!4189 = !DILocation(line: 2484, column: 18, scope: !4185)
!4190 = !DILocation(line: 2485, column: 2, scope: !4185)
!4191 = !DILocation(line: 2487, column: 23, scope: !4192)
!4192 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 2487, column: 6)
!4193 = !DILocation(line: 2487, column: 31, scope: !4192)
!4194 = !DILocation(line: 2487, column: 37, scope: !4192)
!4195 = !DILocation(line: 2487, column: 43, scope: !4192)
!4196 = !DILocation(line: 2487, column: 6, scope: !4192)
!4197 = !DILocation(line: 2487, column: 57, scope: !4192)
!4198 = !DILocation(line: 2487, column: 6, scope: !3959)
!4199 = !DILocation(line: 2488, column: 15, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4201, file: !3, line: 2488, column: 7)
!4201 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2487, column: 67)
!4202 = !DILocation(line: 2488, column: 7, scope: !4200)
!4203 = !DILocation(line: 2488, column: 7, scope: !4201)
!4204 = !DILocation(line: 2489, column: 4, scope: !4200)
!4205 = !DILocation(line: 2489, column: 22, scope: !4200)
!4206 = !DILocation(line: 2489, column: 14, scope: !4200)
!4207 = !DILocation(line: 2490, column: 3, scope: !4201)
!4208 = !DILocation(line: 2493, column: 10, scope: !3959)
!4209 = !DILocation(line: 2493, column: 2, scope: !3959)
!4210 = !DILocation(line: 2495, column: 14, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 2493, column: 17)
!4212 = !DILocation(line: 2496, column: 14, scope: !4211)
!4213 = !DILocation(line: 2496, column: 18, scope: !4211)
!4214 = !DILocation(line: 2496, column: 12, scope: !4211)
!4215 = !DILocation(line: 2497, column: 4, scope: !4211)
!4216 = !DILocation(line: 2499, column: 14, scope: !4211)
!4217 = !DILocation(line: 2500, column: 14, scope: !4211)
!4218 = !DILocation(line: 2500, column: 18, scope: !4211)
!4219 = !DILocation(line: 2500, column: 12, scope: !4211)
!4220 = !DILocation(line: 2501, column: 4, scope: !4211)
!4221 = !DILocation(line: 2503, column: 14, scope: !4211)
!4222 = !DILocation(line: 2504, column: 14, scope: !4211)
!4223 = !DILocation(line: 2504, column: 18, scope: !4211)
!4224 = !DILocation(line: 2504, column: 12, scope: !4211)
!4225 = !DILocation(line: 2505, column: 4, scope: !4211)
!4226 = !DILocation(line: 2507, column: 14, scope: !4211)
!4227 = !DILocation(line: 2508, column: 14, scope: !4211)
!4228 = !DILocation(line: 2508, column: 18, scope: !4211)
!4229 = !DILocation(line: 2508, column: 12, scope: !4211)
!4230 = !DILocation(line: 2509, column: 4, scope: !4211)
!4231 = !DILocation(line: 2512, column: 14, scope: !4211)
!4232 = !DILocation(line: 2513, column: 14, scope: !4211)
!4233 = !DILocation(line: 2513, column: 18, scope: !4211)
!4234 = !DILocation(line: 2513, column: 12, scope: !4211)
!4235 = !DILocation(line: 2514, column: 4, scope: !4211)
!4236 = !DILocation(line: 2517, column: 2, scope: !3959)
!4237 = !DILocation(line: 2517, column: 8, scope: !3959)
!4238 = !DILocation(line: 2517, column: 13, scope: !3959)
!4239 = !DILocation(line: 2518, column: 29, scope: !3959)
!4240 = !DILocation(line: 2518, column: 35, scope: !3959)
!4241 = !DILocation(line: 2518, column: 44, scope: !3959)
!4242 = !DILocation(line: 2518, column: 2, scope: !3959)
!4243 = !DILocation(line: 2520, column: 6, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 2520, column: 6)
!4245 = !DILocation(line: 2520, column: 16, scope: !4244)
!4246 = !DILocation(line: 2520, column: 6, scope: !3959)
!4247 = !DILocation(line: 2522, column: 3, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4249, file: !3, line: 2522, column: 3)
!4249 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 2520, column: 37)
!4250 = !DILocation(line: 2522, column: 3, scope: !4251)
!4251 = distinct !DILexicalBlock(scope: !4248, file: !3, line: 2522, column: 3)
!4252 = !DILocation(line: 2523, column: 8, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4251, file: !3, line: 2522, column: 42)
!4254 = !DILocation(line: 2524, column: 41, scope: !4253)
!4255 = !DILocation(line: 2524, column: 47, scope: !4253)
!4256 = !DILocation(line: 2524, column: 50, scope: !4253)
!4257 = !DILocation(line: 2524, column: 4, scope: !4253)
!4258 = !DILocation(line: 2525, column: 43, scope: !4253)
!4259 = !DILocation(line: 2525, column: 46, scope: !4253)
!4260 = !DILocation(line: 2525, column: 4, scope: !4253)
!4261 = !DILocation(line: 2526, column: 14, scope: !4253)
!4262 = !DILocation(line: 2526, column: 4, scope: !4253)
!4263 = !DILocation(line: 2526, column: 7, scope: !4253)
!4264 = !DILocation(line: 2526, column: 12, scope: !4253)
!4265 = !DILocation(line: 2527, column: 3, scope: !4253)
!4266 = distinct !{!4266, !4247, !4267}
!4267 = !DILocation(line: 2527, column: 3, scope: !4248)
!4268 = !DILocation(line: 2528, column: 2, scope: !4249)
!4269 = !DILocalVariable(name: "f", scope: !4270, file: !3, line: 2530, type: !297)
!4270 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 2529, column: 7)
!4271 = !DILocation(line: 2530, column: 11, scope: !4270)
!4272 = !DILocalVariable(name: "l", scope: !4270, file: !3, line: 2531, type: !279)
!4273 = !DILocation(line: 2531, column: 11, scope: !4270)
!4274 = !DILocalVariable(name: "liter", scope: !4270, file: !3, line: 2532, type: !4075)
!4275 = !DILocation(line: 2532, column: 10, scope: !4270)
!4276 = !DILocation(line: 2535, column: 3, scope: !4277)
!4277 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 2535, column: 3)
!4278 = !DILocation(line: 2535, column: 3, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4277, file: !3, line: 2535, column: 3)
!4280 = !DILocation(line: 2536, column: 4, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 2536, column: 4)
!4282 = distinct !DILexicalBlock(scope: !4279, file: !3, line: 2535, column: 49)
!4283 = !DILocation(line: 2536, column: 4, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4281, file: !3, line: 2536, column: 4)
!4285 = !DILocation(line: 2537, column: 9, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4284, file: !3, line: 2536, column: 50)
!4287 = !DILocation(line: 2538, column: 42, scope: !4286)
!4288 = !DILocation(line: 2538, column: 48, scope: !4286)
!4289 = !DILocation(line: 2538, column: 51, scope: !4286)
!4290 = !DILocation(line: 2538, column: 56, scope: !4286)
!4291 = !DILocation(line: 2538, column: 5, scope: !4286)
!4292 = !DILocation(line: 2539, column: 44, scope: !4286)
!4293 = !DILocation(line: 2539, column: 47, scope: !4286)
!4294 = !DILocation(line: 2539, column: 52, scope: !4286)
!4295 = !DILocation(line: 2539, column: 5, scope: !4286)
!4296 = !DILocation(line: 2540, column: 20, scope: !4286)
!4297 = !DILocation(line: 2540, column: 5, scope: !4286)
!4298 = !DILocation(line: 2540, column: 8, scope: !4286)
!4299 = !DILocation(line: 2540, column: 13, scope: !4286)
!4300 = !DILocation(line: 2540, column: 18, scope: !4286)
!4301 = !DILocation(line: 2541, column: 4, scope: !4286)
!4302 = distinct !{!4302, !4280, !4303}
!4303 = !DILocation(line: 2541, column: 4, scope: !4281)
!4304 = !DILocation(line: 2542, column: 3, scope: !4282)
!4305 = distinct !{!4305, !4276, !4306}
!4306 = !DILocation(line: 2542, column: 3, scope: !4277)
!4307 = !DILocation(line: 2545, column: 14, scope: !4308)
!4308 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 2545, column: 6)
!4309 = !DILocation(line: 2545, column: 6, scope: !4308)
!4310 = !DILocation(line: 2545, column: 6, scope: !3959)
!4311 = !DILocation(line: 2545, column: 48, scope: !4308)
!4312 = !DILocation(line: 2545, column: 20, scope: !4308)
!4313 = !DILocation(line: 2546, column: 14, scope: !4314)
!4314 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 2546, column: 6)
!4315 = !DILocation(line: 2546, column: 6, scope: !4314)
!4316 = !DILocation(line: 2546, column: 6, scope: !3959)
!4317 = !DILocation(line: 2546, column: 22, scope: !4314)
!4318 = !DILocation(line: 2546, column: 40, scope: !4314)
!4319 = !DILocation(line: 2546, column: 32, scope: !4314)
!4320 = !DILocation(line: 2547, column: 2, scope: !3959)
!4321 = !DILocation(line: 2548, column: 1, scope: !3959)
!4322 = distinct !DISubprogram(name: "BM_iter_new", scope: !4323, file: !4323, line: 172, type: !4324, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4323 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_iterators_inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!4324 = !DISubroutineType(types: !4325)
!4325 = !{!146, !4326, !3962, !317, !146}
!4326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4075, size: 64)
!4327 = !DILocalVariable(name: "iter", arg: 1, scope: !4322, file: !4323, line: 172, type: !4326)
!4328 = !DILocation(line: 172, column: 38, scope: !4322)
!4329 = !DILocalVariable(name: "bm", arg: 2, scope: !4322, file: !4323, line: 172, type: !3962)
!4330 = !DILocation(line: 172, column: 51, scope: !4322)
!4331 = !DILocalVariable(name: "itype", arg: 3, scope: !4322, file: !4323, line: 172, type: !317)
!4332 = !DILocation(line: 172, column: 66, scope: !4322)
!4333 = !DILocalVariable(name: "data", arg: 4, scope: !4322, file: !4323, line: 172, type: !146)
!4334 = !DILocation(line: 172, column: 79, scope: !4322)
!4335 = !DILocation(line: 174, column: 6, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4322, file: !4323, line: 174, column: 6)
!4337 = !DILocation(line: 174, column: 6, scope: !4322)
!4338 = !DILocation(line: 175, column: 23, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4336, file: !4323, line: 174, column: 51)
!4340 = !DILocation(line: 175, column: 10, scope: !4339)
!4341 = !DILocation(line: 175, column: 3, scope: !4339)
!4342 = !DILocation(line: 178, column: 3, scope: !4343)
!4343 = distinct !DILexicalBlock(scope: !4336, file: !4323, line: 177, column: 7)
!4344 = !DILocation(line: 180, column: 1, scope: !4322)
!4345 = distinct !DISubprogram(name: "CustomData_bmesh_copy_data", scope: !3, file: !3, line: 2613, type: !4346, scopeLine: 2615, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4346 = !DISubroutineType(types: !4347)
!4347 = !{null, !1263, !488, !146, !222}
!4348 = !DILocalVariable(name: "source", arg: 1, scope: !4345, file: !3, line: 2613, type: !1263)
!4349 = !DILocation(line: 2613, column: 51, scope: !4345)
!4350 = !DILocalVariable(name: "dest", arg: 2, scope: !4345, file: !3, line: 2613, type: !488)
!4351 = !DILocation(line: 2613, column: 71, scope: !4345)
!4352 = !DILocalVariable(name: "src_block", arg: 3, scope: !4345, file: !3, line: 2614, type: !146)
!4353 = !DILocation(line: 2614, column: 39, scope: !4345)
!4354 = !DILocalVariable(name: "dest_block", arg: 4, scope: !4345, file: !3, line: 2614, type: !222)
!4355 = !DILocation(line: 2614, column: 57, scope: !4345)
!4356 = !DILocalVariable(name: "typeInfo", scope: !4345, file: !3, line: 2616, type: !788)
!4357 = !DILocation(line: 2616, column: 23, scope: !4345)
!4358 = !DILocalVariable(name: "dest_i", scope: !4345, file: !3, line: 2617, type: !158)
!4359 = !DILocation(line: 2617, column: 6, scope: !4345)
!4360 = !DILocalVariable(name: "src_i", scope: !4345, file: !3, line: 2617, type: !158)
!4361 = !DILocation(line: 2617, column: 14, scope: !4345)
!4362 = !DILocation(line: 2619, column: 7, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4345, file: !3, line: 2619, column: 6)
!4364 = !DILocation(line: 2619, column: 6, scope: !4363)
!4365 = !DILocation(line: 2619, column: 18, scope: !4363)
!4366 = !DILocation(line: 2619, column: 6, scope: !4345)
!4367 = !DILocation(line: 2620, column: 32, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4363, file: !3, line: 2619, column: 27)
!4369 = !DILocation(line: 2620, column: 38, scope: !4368)
!4370 = !DILocation(line: 2620, column: 3, scope: !4368)
!4371 = !DILocation(line: 2621, column: 8, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4368, file: !3, line: 2621, column: 7)
!4373 = !DILocation(line: 2621, column: 7, scope: !4372)
!4374 = !DILocation(line: 2621, column: 7, scope: !4368)
!4375 = !DILocation(line: 2622, column: 12, scope: !4372)
!4376 = !DILocation(line: 2622, column: 11, scope: !4372)
!4377 = !DILocation(line: 2622, column: 27, scope: !4372)
!4378 = !DILocation(line: 2622, column: 33, scope: !4372)
!4379 = !DILocation(line: 2622, column: 4, scope: !4372)
!4380 = !DILocation(line: 2623, column: 2, scope: !4368)
!4381 = !DILocation(line: 2626, column: 9, scope: !4345)
!4382 = !DILocation(line: 2627, column: 13, scope: !4383)
!4383 = distinct !DILexicalBlock(scope: !4345, file: !3, line: 2627, column: 2)
!4384 = !DILocation(line: 2627, column: 7, scope: !4383)
!4385 = !DILocation(line: 2627, column: 18, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4383, file: !3, line: 2627, column: 2)
!4387 = !DILocation(line: 2627, column: 26, scope: !4386)
!4388 = !DILocation(line: 2627, column: 34, scope: !4386)
!4389 = !DILocation(line: 2627, column: 24, scope: !4386)
!4390 = !DILocation(line: 2627, column: 2, scope: !4383)
!4391 = !DILocation(line: 2632, column: 3, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4386, file: !3, line: 2627, column: 53)
!4393 = !DILocation(line: 2632, column: 10, scope: !4392)
!4394 = !DILocation(line: 2632, column: 19, scope: !4392)
!4395 = !DILocation(line: 2632, column: 25, scope: !4392)
!4396 = !DILocation(line: 2632, column: 17, scope: !4392)
!4397 = !DILocation(line: 2632, column: 34, scope: !4392)
!4398 = !DILocation(line: 2632, column: 37, scope: !4392)
!4399 = !DILocation(line: 2632, column: 43, scope: !4392)
!4400 = !DILocation(line: 2632, column: 50, scope: !4392)
!4401 = !DILocation(line: 2632, column: 58, scope: !4392)
!4402 = !DILocation(line: 2632, column: 65, scope: !4392)
!4403 = !DILocation(line: 2632, column: 73, scope: !4392)
!4404 = !DILocation(line: 2632, column: 80, scope: !4392)
!4405 = !DILocation(line: 2632, column: 87, scope: !4392)
!4406 = !DILocation(line: 2632, column: 63, scope: !4392)
!4407 = !DILocation(line: 0, scope: !4392)
!4408 = !DILocation(line: 2633, column: 10, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4392, file: !3, line: 2632, column: 93)
!4410 = distinct !{!4410, !4391, !4411}
!4411 = !DILocation(line: 2634, column: 3, scope: !4392)
!4412 = !DILocation(line: 2637, column: 7, scope: !4413)
!4413 = distinct !DILexicalBlock(scope: !4392, file: !3, line: 2637, column: 7)
!4414 = !DILocation(line: 2637, column: 17, scope: !4413)
!4415 = !DILocation(line: 2637, column: 23, scope: !4413)
!4416 = !DILocation(line: 2637, column: 14, scope: !4413)
!4417 = !DILocation(line: 2637, column: 7, scope: !4392)
!4418 = !DILocation(line: 2637, column: 33, scope: !4413)
!4419 = !DILocation(line: 2640, column: 7, scope: !4420)
!4420 = distinct !DILexicalBlock(scope: !4392, file: !3, line: 2640, column: 7)
!4421 = !DILocation(line: 2640, column: 13, scope: !4420)
!4422 = !DILocation(line: 2640, column: 20, scope: !4420)
!4423 = !DILocation(line: 2640, column: 28, scope: !4420)
!4424 = !DILocation(line: 2640, column: 36, scope: !4420)
!4425 = !DILocation(line: 2640, column: 44, scope: !4420)
!4426 = !DILocation(line: 2640, column: 51, scope: !4420)
!4427 = !DILocation(line: 2640, column: 58, scope: !4420)
!4428 = !DILocation(line: 2640, column: 33, scope: !4420)
!4429 = !DILocation(line: 2640, column: 63, scope: !4420)
!4430 = !DILocation(line: 2641, column: 14, scope: !4420)
!4431 = !DILocation(line: 2641, column: 20, scope: !4420)
!4432 = !DILocation(line: 2641, column: 27, scope: !4420)
!4433 = !DILocation(line: 2641, column: 35, scope: !4420)
!4434 = !DILocation(line: 2641, column: 41, scope: !4420)
!4435 = !DILocation(line: 2641, column: 49, scope: !4420)
!4436 = !DILocation(line: 2641, column: 56, scope: !4420)
!4437 = !DILocation(line: 2641, column: 63, scope: !4420)
!4438 = !DILocation(line: 2641, column: 7, scope: !4420)
!4439 = !DILocation(line: 2641, column: 69, scope: !4420)
!4440 = !DILocation(line: 2640, column: 7, scope: !4392)
!4441 = !DILocalVariable(name: "src_data", scope: !4442, file: !3, line: 2643, type: !316)
!4442 = distinct !DILexicalBlock(scope: !4420, file: !3, line: 2642, column: 3)
!4443 = !DILocation(line: 2643, column: 16, scope: !4442)
!4444 = !DILocation(line: 2643, column: 35, scope: !4442)
!4445 = !DILocation(line: 2643, column: 47, scope: !4442)
!4446 = !DILocation(line: 2643, column: 55, scope: !4442)
!4447 = !DILocation(line: 2643, column: 62, scope: !4442)
!4448 = !DILocation(line: 2643, column: 69, scope: !4442)
!4449 = !DILocation(line: 2643, column: 45, scope: !4442)
!4450 = !DILocalVariable(name: "dest_data", scope: !4442, file: !3, line: 2644, type: !147)
!4451 = !DILocation(line: 2644, column: 10, scope: !4442)
!4452 = !DILocation(line: 2644, column: 31, scope: !4442)
!4453 = !DILocation(line: 2644, column: 30, scope: !4442)
!4454 = !DILocation(line: 2644, column: 44, scope: !4442)
!4455 = !DILocation(line: 2644, column: 50, scope: !4442)
!4456 = !DILocation(line: 2644, column: 57, scope: !4442)
!4457 = !DILocation(line: 2644, column: 65, scope: !4442)
!4458 = !DILocation(line: 2644, column: 42, scope: !4442)
!4459 = !DILocation(line: 2646, column: 33, scope: !4442)
!4460 = !DILocation(line: 2646, column: 41, scope: !4442)
!4461 = !DILocation(line: 2646, column: 48, scope: !4442)
!4462 = !DILocation(line: 2646, column: 55, scope: !4442)
!4463 = !DILocation(line: 2646, column: 15, scope: !4442)
!4464 = !DILocation(line: 2646, column: 13, scope: !4442)
!4465 = !DILocation(line: 2648, column: 8, scope: !4466)
!4466 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 2648, column: 8)
!4467 = !DILocation(line: 2648, column: 18, scope: !4466)
!4468 = !DILocation(line: 2648, column: 8, scope: !4442)
!4469 = !DILocation(line: 2649, column: 5, scope: !4466)
!4470 = !DILocation(line: 2649, column: 15, scope: !4466)
!4471 = !DILocation(line: 2649, column: 20, scope: !4466)
!4472 = !DILocation(line: 2649, column: 30, scope: !4466)
!4473 = !DILocation(line: 2651, column: 12, scope: !4466)
!4474 = !DILocation(line: 2651, column: 23, scope: !4466)
!4475 = !DILocation(line: 2651, column: 33, scope: !4466)
!4476 = !DILocation(line: 2651, column: 43, scope: !4466)
!4477 = !DILocation(line: 2651, column: 5, scope: !4466)
!4478 = !DILocation(line: 2657, column: 10, scope: !4442)
!4479 = !DILocation(line: 2658, column: 3, scope: !4442)
!4480 = !DILocation(line: 2659, column: 2, scope: !4392)
!4481 = !DILocation(line: 2627, column: 44, scope: !4386)
!4482 = !DILocation(line: 2627, column: 2, scope: !4386)
!4483 = distinct !{!4483, !4390, !4484}
!4484 = !DILocation(line: 2659, column: 2, scope: !4383)
!4485 = !DILocation(line: 2660, column: 1, scope: !4345)
!4486 = distinct !DISubprogram(name: "CustomData_bmesh_free_block", scope: !3, file: !3, line: 2550, type: !4487, scopeLine: 2551, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4487 = !DISubroutineType(types: !4488)
!4488 = !{null, !488, !222}
!4489 = !DILocalVariable(name: "data", arg: 1, scope: !4486, file: !3, line: 2550, type: !488)
!4490 = !DILocation(line: 2550, column: 46, scope: !4486)
!4491 = !DILocalVariable(name: "block", arg: 2, scope: !4486, file: !3, line: 2550, type: !222)
!4492 = !DILocation(line: 2550, column: 59, scope: !4486)
!4493 = !DILocalVariable(name: "typeInfo", scope: !4486, file: !3, line: 2552, type: !788)
!4494 = !DILocation(line: 2552, column: 23, scope: !4486)
!4495 = !DILocalVariable(name: "i", scope: !4486, file: !3, line: 2553, type: !158)
!4496 = !DILocation(line: 2553, column: 6, scope: !4486)
!4497 = !DILocation(line: 2555, column: 7, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2555, column: 6)
!4499 = !DILocation(line: 2555, column: 6, scope: !4498)
!4500 = !DILocation(line: 2555, column: 13, scope: !4498)
!4501 = !DILocation(line: 2555, column: 6, scope: !4486)
!4502 = !DILocation(line: 2556, column: 3, scope: !4498)
!4503 = !DILocation(line: 2558, column: 9, scope: !4504)
!4504 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2558, column: 2)
!4505 = !DILocation(line: 2558, column: 7, scope: !4504)
!4506 = !DILocation(line: 2558, column: 14, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 2558, column: 2)
!4508 = !DILocation(line: 2558, column: 18, scope: !4507)
!4509 = !DILocation(line: 2558, column: 24, scope: !4507)
!4510 = !DILocation(line: 2558, column: 16, scope: !4507)
!4511 = !DILocation(line: 2558, column: 2, scope: !4504)
!4512 = !DILocation(line: 2559, column: 9, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 2559, column: 7)
!4514 = distinct !DILexicalBlock(scope: !4507, file: !3, line: 2558, column: 39)
!4515 = !DILocation(line: 2559, column: 15, scope: !4513)
!4516 = !DILocation(line: 2559, column: 22, scope: !4513)
!4517 = !DILocation(line: 2559, column: 25, scope: !4513)
!4518 = !DILocation(line: 2559, column: 30, scope: !4513)
!4519 = !DILocation(line: 2559, column: 7, scope: !4514)
!4520 = !DILocation(line: 2560, column: 33, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 2559, column: 49)
!4522 = !DILocation(line: 2560, column: 39, scope: !4521)
!4523 = !DILocation(line: 2560, column: 46, scope: !4521)
!4524 = !DILocation(line: 2560, column: 49, scope: !4521)
!4525 = !DILocation(line: 2560, column: 15, scope: !4521)
!4526 = !DILocation(line: 2560, column: 13, scope: !4521)
!4527 = !DILocation(line: 2562, column: 8, scope: !4528)
!4528 = distinct !DILexicalBlock(scope: !4521, file: !3, line: 2562, column: 8)
!4529 = !DILocation(line: 2562, column: 18, scope: !4528)
!4530 = !DILocation(line: 2562, column: 8, scope: !4521)
!4531 = !DILocalVariable(name: "offset", scope: !4532, file: !3, line: 2563, type: !158)
!4532 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 2562, column: 24)
!4533 = !DILocation(line: 2563, column: 9, scope: !4532)
!4534 = !DILocation(line: 2563, column: 18, scope: !4532)
!4535 = !DILocation(line: 2563, column: 24, scope: !4532)
!4536 = !DILocation(line: 2563, column: 31, scope: !4532)
!4537 = !DILocation(line: 2563, column: 34, scope: !4532)
!4538 = !DILocation(line: 2564, column: 5, scope: !4532)
!4539 = !DILocation(line: 2564, column: 15, scope: !4532)
!4540 = !DILocation(line: 2564, column: 29, scope: !4532)
!4541 = !DILocation(line: 2564, column: 28, scope: !4532)
!4542 = !DILocation(line: 2564, column: 37, scope: !4532)
!4543 = !DILocation(line: 2564, column: 35, scope: !4532)
!4544 = !DILocation(line: 2564, column: 48, scope: !4532)
!4545 = !DILocation(line: 2564, column: 58, scope: !4532)
!4546 = !DILocation(line: 2565, column: 4, scope: !4532)
!4547 = !DILocation(line: 2566, column: 3, scope: !4521)
!4548 = !DILocation(line: 2567, column: 2, scope: !4514)
!4549 = !DILocation(line: 2558, column: 34, scope: !4507)
!4550 = !DILocation(line: 2558, column: 2, scope: !4507)
!4551 = distinct !{!4551, !4511, !4552}
!4552 = !DILocation(line: 2567, column: 2, scope: !4504)
!4553 = !DILocation(line: 2569, column: 6, scope: !4554)
!4554 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2569, column: 6)
!4555 = !DILocation(line: 2569, column: 12, scope: !4554)
!4556 = !DILocation(line: 2569, column: 6, scope: !4486)
!4557 = !DILocation(line: 2570, column: 20, scope: !4554)
!4558 = !DILocation(line: 2570, column: 26, scope: !4554)
!4559 = !DILocation(line: 2570, column: 33, scope: !4554)
!4560 = !DILocation(line: 2570, column: 32, scope: !4554)
!4561 = !DILocation(line: 2570, column: 3, scope: !4554)
!4562 = !DILocation(line: 2572, column: 3, scope: !4486)
!4563 = !DILocation(line: 2572, column: 9, scope: !4486)
!4564 = !DILocation(line: 2573, column: 1, scope: !4486)
!4565 = distinct !DISubprogram(name: "BM_iter_step", scope: !4323, file: !4323, line: 40, type: !4566, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4566 = !DISubroutineType(types: !4567)
!4567 = !{!146, !4326}
!4568 = !DILocalVariable(name: "iter", arg: 1, scope: !4565, file: !4323, line: 40, type: !4326)
!4569 = !DILocation(line: 40, column: 39, scope: !4565)
!4570 = !DILocation(line: 42, column: 9, scope: !4565)
!4571 = !DILocation(line: 42, column: 15, scope: !4565)
!4572 = !DILocation(line: 42, column: 20, scope: !4565)
!4573 = !DILocation(line: 42, column: 2, scope: !4565)
!4574 = distinct !DISubprogram(name: "CustomData_bmesh_free_block_data", scope: !3, file: !3, line: 2578, type: !4575, scopeLine: 2579, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4575 = !DISubroutineType(types: !4576)
!4576 = !{null, !488, !146}
!4577 = !DILocalVariable(name: "data", arg: 1, scope: !4574, file: !3, line: 2578, type: !488)
!4578 = !DILocation(line: 2578, column: 51, scope: !4574)
!4579 = !DILocalVariable(name: "block", arg: 2, scope: !4574, file: !3, line: 2578, type: !146)
!4580 = !DILocation(line: 2578, column: 63, scope: !4574)
!4581 = !DILocalVariable(name: "typeInfo", scope: !4574, file: !3, line: 2580, type: !788)
!4582 = !DILocation(line: 2580, column: 23, scope: !4574)
!4583 = !DILocalVariable(name: "i", scope: !4574, file: !3, line: 2581, type: !158)
!4584 = !DILocation(line: 2581, column: 6, scope: !4574)
!4585 = !DILocation(line: 2583, column: 6, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4574, file: !3, line: 2583, column: 6)
!4587 = !DILocation(line: 2583, column: 12, scope: !4586)
!4588 = !DILocation(line: 2583, column: 6, scope: !4574)
!4589 = !DILocation(line: 2584, column: 3, scope: !4586)
!4590 = !DILocation(line: 2586, column: 9, scope: !4591)
!4591 = distinct !DILexicalBlock(scope: !4574, file: !3, line: 2586, column: 2)
!4592 = !DILocation(line: 2586, column: 7, scope: !4591)
!4593 = !DILocation(line: 2586, column: 14, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 2586, column: 2)
!4595 = !DILocation(line: 2586, column: 18, scope: !4594)
!4596 = !DILocation(line: 2586, column: 24, scope: !4594)
!4597 = !DILocation(line: 2586, column: 16, scope: !4594)
!4598 = !DILocation(line: 2586, column: 2, scope: !4591)
!4599 = !DILocation(line: 2587, column: 9, scope: !4600)
!4600 = distinct !DILexicalBlock(scope: !4601, file: !3, line: 2587, column: 7)
!4601 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 2586, column: 39)
!4602 = !DILocation(line: 2587, column: 15, scope: !4600)
!4603 = !DILocation(line: 2587, column: 22, scope: !4600)
!4604 = !DILocation(line: 2587, column: 25, scope: !4600)
!4605 = !DILocation(line: 2587, column: 30, scope: !4600)
!4606 = !DILocation(line: 2587, column: 7, scope: !4601)
!4607 = !DILocation(line: 2588, column: 33, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4600, file: !3, line: 2587, column: 49)
!4609 = !DILocation(line: 2588, column: 39, scope: !4608)
!4610 = !DILocation(line: 2588, column: 46, scope: !4608)
!4611 = !DILocation(line: 2588, column: 49, scope: !4608)
!4612 = !DILocation(line: 2588, column: 15, scope: !4608)
!4613 = !DILocation(line: 2588, column: 13, scope: !4608)
!4614 = !DILocation(line: 2590, column: 8, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4608, file: !3, line: 2590, column: 8)
!4616 = !DILocation(line: 2590, column: 18, scope: !4615)
!4617 = !DILocation(line: 2590, column: 8, scope: !4608)
!4618 = !DILocalVariable(name: "offset", scope: !4619, file: !3, line: 2591, type: !158)
!4619 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 2590, column: 24)
!4620 = !DILocation(line: 2591, column: 9, scope: !4619)
!4621 = !DILocation(line: 2591, column: 18, scope: !4619)
!4622 = !DILocation(line: 2591, column: 24, scope: !4619)
!4623 = !DILocation(line: 2591, column: 31, scope: !4619)
!4624 = !DILocation(line: 2591, column: 34, scope: !4619)
!4625 = !DILocation(line: 2592, column: 5, scope: !4619)
!4626 = !DILocation(line: 2592, column: 15, scope: !4619)
!4627 = !DILocation(line: 2592, column: 28, scope: !4619)
!4628 = !DILocation(line: 2592, column: 36, scope: !4619)
!4629 = !DILocation(line: 2592, column: 34, scope: !4619)
!4630 = !DILocation(line: 2592, column: 47, scope: !4619)
!4631 = !DILocation(line: 2592, column: 57, scope: !4619)
!4632 = !DILocation(line: 2593, column: 4, scope: !4619)
!4633 = !DILocation(line: 2594, column: 3, scope: !4608)
!4634 = !DILocation(line: 2595, column: 2, scope: !4601)
!4635 = !DILocation(line: 2586, column: 34, scope: !4594)
!4636 = !DILocation(line: 2586, column: 2, scope: !4594)
!4637 = distinct !{!4637, !4598, !4638}
!4638 = !DILocation(line: 2595, column: 2, scope: !4591)
!4639 = !DILocation(line: 2597, column: 6, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !4574, file: !3, line: 2597, column: 6)
!4641 = !DILocation(line: 2597, column: 12, scope: !4640)
!4642 = !DILocation(line: 2597, column: 6, scope: !4574)
!4643 = !DILocation(line: 2598, column: 10, scope: !4640)
!4644 = !DILocation(line: 2598, column: 20, scope: !4640)
!4645 = !DILocation(line: 2598, column: 26, scope: !4640)
!4646 = !DILocation(line: 2598, column: 3, scope: !4640)
!4647 = !DILocation(line: 2599, column: 1, scope: !4574)
!4648 = distinct !DISubprogram(name: "CustomData_bmesh_alloc_block", scope: !3, file: !3, line: 2601, type: !4487, scopeLine: 2602, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4649 = !DILocalVariable(name: "data", arg: 1, scope: !4648, file: !3, line: 2601, type: !488)
!4650 = !DILocation(line: 2601, column: 54, scope: !4648)
!4651 = !DILocalVariable(name: "block", arg: 2, scope: !4648, file: !3, line: 2601, type: !222)
!4652 = !DILocation(line: 2601, column: 67, scope: !4648)
!4653 = !DILocation(line: 2604, column: 7, scope: !4654)
!4654 = distinct !DILexicalBlock(scope: !4648, file: !3, line: 2604, column: 6)
!4655 = !DILocation(line: 2604, column: 6, scope: !4654)
!4656 = !DILocation(line: 2604, column: 6, scope: !4648)
!4657 = !DILocation(line: 2605, column: 31, scope: !4654)
!4658 = !DILocation(line: 2605, column: 37, scope: !4654)
!4659 = !DILocation(line: 2605, column: 3, scope: !4654)
!4660 = !DILocation(line: 2607, column: 6, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4648, file: !3, line: 2607, column: 6)
!4662 = !DILocation(line: 2607, column: 12, scope: !4661)
!4663 = !DILocation(line: 2607, column: 20, scope: !4661)
!4664 = !DILocation(line: 2607, column: 6, scope: !4648)
!4665 = !DILocation(line: 2608, column: 30, scope: !4661)
!4666 = !DILocation(line: 2608, column: 36, scope: !4661)
!4667 = !DILocation(line: 2608, column: 12, scope: !4661)
!4668 = !DILocation(line: 2608, column: 4, scope: !4661)
!4669 = !DILocation(line: 2608, column: 10, scope: !4661)
!4670 = !DILocation(line: 2608, column: 3, scope: !4661)
!4671 = !DILocation(line: 2610, column: 4, scope: !4661)
!4672 = !DILocation(line: 2610, column: 10, scope: !4661)
!4673 = !DILocation(line: 2611, column: 1, scope: !4648)
!4674 = distinct !DISubprogram(name: "CustomData_bmesh_get", scope: !3, file: !3, line: 2663, type: !4675, scopeLine: 2664, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4675 = !DISubroutineType(types: !4676)
!4676 = !{!146, !1263, !146, !158}
!4677 = !DILocalVariable(name: "data", arg: 1, scope: !4674, file: !3, line: 2663, type: !1263)
!4678 = !DILocation(line: 2663, column: 46, scope: !4674)
!4679 = !DILocalVariable(name: "block", arg: 2, scope: !4674, file: !3, line: 2663, type: !146)
!4680 = !DILocation(line: 2663, column: 58, scope: !4674)
!4681 = !DILocalVariable(name: "type", arg: 3, scope: !4674, file: !3, line: 2663, type: !158)
!4682 = !DILocation(line: 2663, column: 69, scope: !4674)
!4683 = !DILocalVariable(name: "layer_index", scope: !4674, file: !3, line: 2665, type: !158)
!4684 = !DILocation(line: 2665, column: 6, scope: !4674)
!4685 = !DILocation(line: 2668, column: 50, scope: !4674)
!4686 = !DILocation(line: 2668, column: 56, scope: !4674)
!4687 = !DILocation(line: 2668, column: 16, scope: !4674)
!4688 = !DILocation(line: 2668, column: 14, scope: !4674)
!4689 = !DILocation(line: 2669, column: 6, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4674, file: !3, line: 2669, column: 6)
!4691 = !DILocation(line: 2669, column: 18, scope: !4690)
!4692 = !DILocation(line: 2669, column: 6, scope: !4674)
!4693 = !DILocation(line: 2669, column: 25, scope: !4690)
!4694 = !DILocation(line: 2671, column: 17, scope: !4674)
!4695 = !DILocation(line: 2671, column: 25, scope: !4674)
!4696 = !DILocation(line: 2671, column: 31, scope: !4674)
!4697 = !DILocation(line: 2671, column: 38, scope: !4674)
!4698 = !DILocation(line: 2671, column: 51, scope: !4674)
!4699 = !DILocation(line: 2671, column: 23, scope: !4674)
!4700 = !DILocation(line: 2671, column: 2, scope: !4674)
!4701 = !DILocation(line: 2672, column: 1, scope: !4674)
!4702 = distinct !DISubprogram(name: "CustomData_bmesh_get_n", scope: !3, file: !3, line: 2674, type: !4703, scopeLine: 2675, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4703 = !DISubroutineType(types: !4704)
!4704 = !{!146, !1263, !146, !158, !158}
!4705 = !DILocalVariable(name: "data", arg: 1, scope: !4702, file: !3, line: 2674, type: !1263)
!4706 = !DILocation(line: 2674, column: 48, scope: !4702)
!4707 = !DILocalVariable(name: "block", arg: 2, scope: !4702, file: !3, line: 2674, type: !146)
!4708 = !DILocation(line: 2674, column: 60, scope: !4702)
!4709 = !DILocalVariable(name: "type", arg: 3, scope: !4702, file: !3, line: 2674, type: !158)
!4710 = !DILocation(line: 2674, column: 71, scope: !4702)
!4711 = !DILocalVariable(name: "n", arg: 4, scope: !4702, file: !3, line: 2674, type: !158)
!4712 = !DILocation(line: 2674, column: 81, scope: !4702)
!4713 = !DILocalVariable(name: "layer_index", scope: !4702, file: !3, line: 2676, type: !158)
!4714 = !DILocation(line: 2676, column: 6, scope: !4702)
!4715 = !DILocation(line: 2679, column: 43, scope: !4702)
!4716 = !DILocation(line: 2679, column: 49, scope: !4702)
!4717 = !DILocation(line: 2679, column: 16, scope: !4702)
!4718 = !DILocation(line: 2679, column: 14, scope: !4702)
!4719 = !DILocation(line: 2680, column: 6, scope: !4720)
!4720 = distinct !DILexicalBlock(scope: !4702, file: !3, line: 2680, column: 6)
!4721 = !DILocation(line: 2680, column: 18, scope: !4720)
!4722 = !DILocation(line: 2680, column: 6, scope: !4702)
!4723 = !DILocation(line: 2680, column: 25, scope: !4720)
!4724 = !DILocation(line: 2682, column: 17, scope: !4702)
!4725 = !DILocation(line: 2682, column: 25, scope: !4702)
!4726 = !DILocation(line: 2682, column: 31, scope: !4702)
!4727 = !DILocation(line: 2682, column: 38, scope: !4702)
!4728 = !DILocation(line: 2682, column: 52, scope: !4702)
!4729 = !DILocation(line: 2682, column: 50, scope: !4702)
!4730 = !DILocation(line: 2682, column: 55, scope: !4702)
!4731 = !DILocation(line: 2682, column: 23, scope: !4702)
!4732 = !DILocation(line: 2682, column: 2, scope: !4702)
!4733 = !DILocation(line: 2683, column: 1, scope: !4702)
!4734 = distinct !DISubprogram(name: "CustomData_bmesh_get_layer_n", scope: !3, file: !3, line: 2686, type: !4675, scopeLine: 2687, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4735 = !DILocalVariable(name: "data", arg: 1, scope: !4734, file: !3, line: 2686, type: !1263)
!4736 = !DILocation(line: 2686, column: 54, scope: !4734)
!4737 = !DILocalVariable(name: "block", arg: 2, scope: !4734, file: !3, line: 2686, type: !146)
!4738 = !DILocation(line: 2686, column: 66, scope: !4734)
!4739 = !DILocalVariable(name: "n", arg: 3, scope: !4734, file: !3, line: 2686, type: !158)
!4740 = !DILocation(line: 2686, column: 77, scope: !4734)
!4741 = !DILocation(line: 2688, column: 6, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 2688, column: 6)
!4743 = !DILocation(line: 2688, column: 8, scope: !4742)
!4744 = !DILocation(line: 2688, column: 12, scope: !4742)
!4745 = !DILocation(line: 2688, column: 15, scope: !4742)
!4746 = !DILocation(line: 2688, column: 20, scope: !4742)
!4747 = !DILocation(line: 2688, column: 26, scope: !4742)
!4748 = !DILocation(line: 2688, column: 17, scope: !4742)
!4749 = !DILocation(line: 2688, column: 6, scope: !4734)
!4750 = !DILocation(line: 2688, column: 36, scope: !4742)
!4751 = !DILocation(line: 2690, column: 17, scope: !4734)
!4752 = !DILocation(line: 2690, column: 25, scope: !4734)
!4753 = !DILocation(line: 2690, column: 31, scope: !4734)
!4754 = !DILocation(line: 2690, column: 38, scope: !4734)
!4755 = !DILocation(line: 2690, column: 41, scope: !4734)
!4756 = !DILocation(line: 2690, column: 23, scope: !4734)
!4757 = !DILocation(line: 2690, column: 2, scope: !4734)
!4758 = !DILocation(line: 2691, column: 1, scope: !4734)
!4759 = distinct !DISubprogram(name: "CustomData_layer_has_math", scope: !3, file: !3, line: 2693, type: !4760, scopeLine: 2694, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4760 = !DISubroutineType(types: !4761)
!4761 = !{!361, !592, !158}
!4762 = !DILocalVariable(name: "data", arg: 1, scope: !4759, file: !3, line: 2693, type: !592)
!4763 = !DILocation(line: 2693, column: 57, scope: !4759)
!4764 = !DILocalVariable(name: "layer_n", arg: 2, scope: !4759, file: !3, line: 2693, type: !158)
!4765 = !DILocation(line: 2693, column: 67, scope: !4759)
!4766 = !DILocalVariable(name: "typeInfo", scope: !4759, file: !3, line: 2695, type: !788)
!4767 = !DILocation(line: 2695, column: 23, scope: !4759)
!4768 = !DILocation(line: 2695, column: 52, scope: !4759)
!4769 = !DILocation(line: 2695, column: 58, scope: !4759)
!4770 = !DILocation(line: 2695, column: 65, scope: !4759)
!4771 = !DILocation(line: 2695, column: 74, scope: !4759)
!4772 = !DILocation(line: 2695, column: 34, scope: !4759)
!4773 = !DILocation(line: 2697, column: 6, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2697, column: 6)
!4775 = !DILocation(line: 2697, column: 16, scope: !4774)
!4776 = !DILocation(line: 2697, column: 22, scope: !4774)
!4777 = !DILocation(line: 2697, column: 25, scope: !4774)
!4778 = !DILocation(line: 2697, column: 35, scope: !4774)
!4779 = !DILocation(line: 2697, column: 39, scope: !4774)
!4780 = !DILocation(line: 2697, column: 42, scope: !4774)
!4781 = !DILocation(line: 2697, column: 52, scope: !4774)
!4782 = !DILocation(line: 2697, column: 61, scope: !4774)
!4783 = !DILocation(line: 2698, column: 6, scope: !4774)
!4784 = !DILocation(line: 2698, column: 16, scope: !4774)
!4785 = !DILocation(line: 2698, column: 27, scope: !4774)
!4786 = !DILocation(line: 2698, column: 30, scope: !4774)
!4787 = !DILocation(line: 2698, column: 40, scope: !4774)
!4788 = !DILocation(line: 2697, column: 6, scope: !4759)
!4789 = !DILocation(line: 2700, column: 3, scope: !4790)
!4790 = distinct !DILexicalBlock(scope: !4774, file: !3, line: 2699, column: 2)
!4791 = !DILocation(line: 2703, column: 2, scope: !4759)
!4792 = !DILocation(line: 2704, column: 1, scope: !4759)
!4793 = distinct !DISubprogram(name: "CustomData_layer_has_interp", scope: !3, file: !3, line: 2706, type: !4760, scopeLine: 2707, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4794 = !DILocalVariable(name: "data", arg: 1, scope: !4793, file: !3, line: 2706, type: !592)
!4795 = !DILocation(line: 2706, column: 59, scope: !4793)
!4796 = !DILocalVariable(name: "layer_n", arg: 2, scope: !4793, file: !3, line: 2706, type: !158)
!4797 = !DILocation(line: 2706, column: 69, scope: !4793)
!4798 = !DILocalVariable(name: "typeInfo", scope: !4793, file: !3, line: 2708, type: !788)
!4799 = !DILocation(line: 2708, column: 23, scope: !4793)
!4800 = !DILocation(line: 2708, column: 52, scope: !4793)
!4801 = !DILocation(line: 2708, column: 58, scope: !4793)
!4802 = !DILocation(line: 2708, column: 65, scope: !4793)
!4803 = !DILocation(line: 2708, column: 74, scope: !4793)
!4804 = !DILocation(line: 2708, column: 34, scope: !4793)
!4805 = !DILocation(line: 2710, column: 6, scope: !4806)
!4806 = distinct !DILexicalBlock(scope: !4793, file: !3, line: 2710, column: 6)
!4807 = !DILocation(line: 2710, column: 16, scope: !4806)
!4808 = !DILocation(line: 2710, column: 6, scope: !4793)
!4809 = !DILocation(line: 2711, column: 3, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4806, file: !3, line: 2710, column: 24)
!4811 = !DILocation(line: 2714, column: 2, scope: !4793)
!4812 = !DILocation(line: 2715, column: 1, scope: !4793)
!4813 = distinct !DISubprogram(name: "CustomData_has_math", scope: !3, file: !3, line: 2717, type: !4814, scopeLine: 2718, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4814 = !DISubroutineType(types: !4815)
!4815 = !{!361, !592}
!4816 = !DILocalVariable(name: "data", arg: 1, scope: !4813, file: !3, line: 2717, type: !592)
!4817 = !DILocation(line: 2717, column: 51, scope: !4813)
!4818 = !DILocalVariable(name: "i", scope: !4813, file: !3, line: 2719, type: !158)
!4819 = !DILocation(line: 2719, column: 6, scope: !4813)
!4820 = !DILocation(line: 2722, column: 9, scope: !4821)
!4821 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 2722, column: 2)
!4822 = !DILocation(line: 2722, column: 7, scope: !4821)
!4823 = !DILocation(line: 2722, column: 14, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4821, file: !3, line: 2722, column: 2)
!4825 = !DILocation(line: 2722, column: 18, scope: !4824)
!4826 = !DILocation(line: 2722, column: 24, scope: !4824)
!4827 = !DILocation(line: 2722, column: 16, scope: !4824)
!4828 = !DILocation(line: 2722, column: 2, scope: !4821)
!4829 = !DILocation(line: 2723, column: 33, scope: !4830)
!4830 = distinct !DILexicalBlock(scope: !4831, file: !3, line: 2723, column: 7)
!4831 = distinct !DILexicalBlock(scope: !4824, file: !3, line: 2722, column: 39)
!4832 = !DILocation(line: 2723, column: 39, scope: !4830)
!4833 = !DILocation(line: 2723, column: 7, scope: !4830)
!4834 = !DILocation(line: 2723, column: 7, scope: !4831)
!4835 = !DILocation(line: 2724, column: 4, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4830, file: !3, line: 2723, column: 43)
!4837 = !DILocation(line: 2726, column: 2, scope: !4831)
!4838 = !DILocation(line: 2722, column: 34, scope: !4824)
!4839 = !DILocation(line: 2722, column: 2, scope: !4824)
!4840 = distinct !{!4840, !4828, !4841}
!4841 = !DILocation(line: 2726, column: 2, scope: !4821)
!4842 = !DILocation(line: 2728, column: 2, scope: !4813)
!4843 = !DILocation(line: 2729, column: 1, scope: !4813)
!4844 = distinct !DISubprogram(name: "CustomData_bmesh_has_free", scope: !3, file: !3, line: 2732, type: !4814, scopeLine: 2733, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4845 = !DILocalVariable(name: "data", arg: 1, scope: !4844, file: !3, line: 2732, type: !592)
!4846 = !DILocation(line: 2732, column: 57, scope: !4844)
!4847 = !DILocalVariable(name: "typeInfo", scope: !4844, file: !3, line: 2734, type: !788)
!4848 = !DILocation(line: 2734, column: 23, scope: !4844)
!4849 = !DILocalVariable(name: "i", scope: !4844, file: !3, line: 2735, type: !158)
!4850 = !DILocation(line: 2735, column: 6, scope: !4844)
!4851 = !DILocation(line: 2737, column: 9, scope: !4852)
!4852 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 2737, column: 2)
!4853 = !DILocation(line: 2737, column: 7, scope: !4852)
!4854 = !DILocation(line: 2737, column: 14, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4852, file: !3, line: 2737, column: 2)
!4856 = !DILocation(line: 2737, column: 18, scope: !4855)
!4857 = !DILocation(line: 2737, column: 24, scope: !4855)
!4858 = !DILocation(line: 2737, column: 16, scope: !4855)
!4859 = !DILocation(line: 2737, column: 2, scope: !4852)
!4860 = !DILocation(line: 2738, column: 9, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4862, file: !3, line: 2738, column: 7)
!4862 = distinct !DILexicalBlock(scope: !4855, file: !3, line: 2737, column: 39)
!4863 = !DILocation(line: 2738, column: 15, scope: !4861)
!4864 = !DILocation(line: 2738, column: 22, scope: !4861)
!4865 = !DILocation(line: 2738, column: 25, scope: !4861)
!4866 = !DILocation(line: 2738, column: 30, scope: !4861)
!4867 = !DILocation(line: 2738, column: 7, scope: !4862)
!4868 = !DILocation(line: 2739, column: 33, scope: !4869)
!4869 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 2738, column: 49)
!4870 = !DILocation(line: 2739, column: 39, scope: !4869)
!4871 = !DILocation(line: 2739, column: 46, scope: !4869)
!4872 = !DILocation(line: 2739, column: 49, scope: !4869)
!4873 = !DILocation(line: 2739, column: 15, scope: !4869)
!4874 = !DILocation(line: 2739, column: 13, scope: !4869)
!4875 = !DILocation(line: 2740, column: 8, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 2740, column: 8)
!4877 = !DILocation(line: 2740, column: 18, scope: !4876)
!4878 = !DILocation(line: 2740, column: 8, scope: !4869)
!4879 = !DILocation(line: 2741, column: 5, scope: !4880)
!4880 = distinct !DILexicalBlock(scope: !4876, file: !3, line: 2740, column: 24)
!4881 = !DILocation(line: 2743, column: 3, scope: !4869)
!4882 = !DILocation(line: 2744, column: 2, scope: !4862)
!4883 = !DILocation(line: 2737, column: 34, scope: !4855)
!4884 = !DILocation(line: 2737, column: 2, scope: !4855)
!4885 = distinct !{!4885, !4859, !4886}
!4886 = !DILocation(line: 2744, column: 2, scope: !4852)
!4887 = !DILocation(line: 2745, column: 2, scope: !4844)
!4888 = !DILocation(line: 2746, column: 1, scope: !4844)
!4889 = distinct !DISubprogram(name: "CustomData_has_interp", scope: !3, file: !3, line: 2748, type: !4814, scopeLine: 2749, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4890 = !DILocalVariable(name: "data", arg: 1, scope: !4889, file: !3, line: 2748, type: !592)
!4891 = !DILocation(line: 2748, column: 53, scope: !4889)
!4892 = !DILocalVariable(name: "i", scope: !4889, file: !3, line: 2750, type: !158)
!4893 = !DILocation(line: 2750, column: 6, scope: !4889)
!4894 = !DILocation(line: 2753, column: 9, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4889, file: !3, line: 2753, column: 2)
!4896 = !DILocation(line: 2753, column: 7, scope: !4895)
!4897 = !DILocation(line: 2753, column: 14, scope: !4898)
!4898 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 2753, column: 2)
!4899 = !DILocation(line: 2753, column: 18, scope: !4898)
!4900 = !DILocation(line: 2753, column: 24, scope: !4898)
!4901 = !DILocation(line: 2753, column: 16, scope: !4898)
!4902 = !DILocation(line: 2753, column: 2, scope: !4895)
!4903 = !DILocation(line: 2754, column: 35, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 2754, column: 7)
!4905 = distinct !DILexicalBlock(scope: !4898, file: !3, line: 2753, column: 39)
!4906 = !DILocation(line: 2754, column: 41, scope: !4904)
!4907 = !DILocation(line: 2754, column: 7, scope: !4904)
!4908 = !DILocation(line: 2754, column: 7, scope: !4905)
!4909 = !DILocation(line: 2755, column: 4, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4904, file: !3, line: 2754, column: 45)
!4911 = !DILocation(line: 2757, column: 2, scope: !4905)
!4912 = !DILocation(line: 2753, column: 34, scope: !4898)
!4913 = !DILocation(line: 2753, column: 2, scope: !4898)
!4914 = distinct !{!4914, !4902, !4915}
!4915 = !DILocation(line: 2757, column: 2, scope: !4895)
!4916 = !DILocation(line: 2759, column: 2, scope: !4889)
!4917 = !DILocation(line: 2760, column: 1, scope: !4889)
!4918 = distinct !DISubprogram(name: "CustomData_data_copy_value", scope: !3, file: !3, line: 2764, type: !4919, scopeLine: 2765, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4919 = !DISubroutineType(types: !4920)
!4920 = !{null, !158, !335, !146}
!4921 = !DILocalVariable(name: "type", arg: 1, scope: !4918, file: !3, line: 2764, type: !158)
!4922 = !DILocation(line: 2764, column: 37, scope: !4918)
!4923 = !DILocalVariable(name: "source", arg: 2, scope: !4918, file: !3, line: 2764, type: !335)
!4924 = !DILocation(line: 2764, column: 55, scope: !4918)
!4925 = !DILocalVariable(name: "dest", arg: 3, scope: !4918, file: !3, line: 2764, type: !146)
!4926 = !DILocation(line: 2764, column: 69, scope: !4918)
!4927 = !DILocalVariable(name: "typeInfo", scope: !4918, file: !3, line: 2766, type: !788)
!4928 = !DILocation(line: 2766, column: 23, scope: !4918)
!4929 = !DILocation(line: 2766, column: 52, scope: !4918)
!4930 = !DILocation(line: 2766, column: 34, scope: !4918)
!4931 = !DILocation(line: 2768, column: 7, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4918, file: !3, line: 2768, column: 6)
!4933 = !DILocation(line: 2768, column: 6, scope: !4918)
!4934 = !DILocation(line: 2768, column: 13, scope: !4932)
!4935 = !DILocation(line: 2770, column: 6, scope: !4936)
!4936 = distinct !DILexicalBlock(scope: !4918, file: !3, line: 2770, column: 6)
!4937 = !DILocation(line: 2770, column: 16, scope: !4936)
!4938 = !DILocation(line: 2770, column: 6, scope: !4918)
!4939 = !DILocation(line: 2771, column: 3, scope: !4936)
!4940 = !DILocation(line: 2771, column: 13, scope: !4936)
!4941 = !DILocation(line: 2771, column: 23, scope: !4936)
!4942 = !DILocation(line: 2771, column: 31, scope: !4936)
!4943 = !DILocation(line: 2773, column: 10, scope: !4936)
!4944 = !DILocation(line: 2773, column: 16, scope: !4936)
!4945 = !DILocation(line: 2773, column: 24, scope: !4936)
!4946 = !DILocation(line: 2773, column: 34, scope: !4936)
!4947 = !DILocation(line: 2773, column: 3, scope: !4936)
!4948 = !DILocation(line: 2774, column: 1, scope: !4918)
!4949 = distinct !DISubprogram(name: "CustomData_data_equals", scope: !3, file: !3, line: 2776, type: !4950, scopeLine: 2777, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4950 = !DISubroutineType(types: !4951)
!4951 = !{!361, !158, !335, !335}
!4952 = !DILocalVariable(name: "type", arg: 1, scope: !4949, file: !3, line: 2776, type: !158)
!4953 = !DILocation(line: 2776, column: 33, scope: !4949)
!4954 = !DILocalVariable(name: "data1", arg: 2, scope: !4949, file: !3, line: 2776, type: !335)
!4955 = !DILocation(line: 2776, column: 51, scope: !4949)
!4956 = !DILocalVariable(name: "data2", arg: 3, scope: !4949, file: !3, line: 2776, type: !335)
!4957 = !DILocation(line: 2776, column: 70, scope: !4949)
!4958 = !DILocalVariable(name: "typeInfo", scope: !4949, file: !3, line: 2778, type: !788)
!4959 = !DILocation(line: 2778, column: 23, scope: !4949)
!4960 = !DILocation(line: 2778, column: 52, scope: !4949)
!4961 = !DILocation(line: 2778, column: 34, scope: !4949)
!4962 = !DILocation(line: 2780, column: 6, scope: !4963)
!4963 = distinct !DILexicalBlock(scope: !4949, file: !3, line: 2780, column: 6)
!4964 = !DILocation(line: 2780, column: 16, scope: !4963)
!4965 = !DILocation(line: 2780, column: 6, scope: !4949)
!4966 = !DILocation(line: 2781, column: 10, scope: !4963)
!4967 = !DILocation(line: 2781, column: 20, scope: !4963)
!4968 = !DILocation(line: 2781, column: 26, scope: !4963)
!4969 = !DILocation(line: 2781, column: 33, scope: !4963)
!4970 = !DILocation(line: 2781, column: 3, scope: !4963)
!4971 = !DILocation(line: 2782, column: 22, scope: !4963)
!4972 = !DILocation(line: 2782, column: 29, scope: !4963)
!4973 = !DILocation(line: 2782, column: 36, scope: !4963)
!4974 = !DILocation(line: 2782, column: 46, scope: !4963)
!4975 = !DILocation(line: 2782, column: 15, scope: !4963)
!4976 = !DILocation(line: 2782, column: 14, scope: !4963)
!4977 = !DILocation(line: 2782, column: 7, scope: !4963)
!4978 = !DILocation(line: 2783, column: 1, scope: !4949)
!4979 = distinct !DISubprogram(name: "CustomData_data_initminmax", scope: !3, file: !3, line: 2785, type: !4980, scopeLine: 2786, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!4980 = !DISubroutineType(types: !4981)
!4981 = !{null, !158, !146, !146}
!4982 = !DILocalVariable(name: "type", arg: 1, scope: !4979, file: !3, line: 2785, type: !158)
!4983 = !DILocation(line: 2785, column: 37, scope: !4979)
!4984 = !DILocalVariable(name: "min", arg: 2, scope: !4979, file: !3, line: 2785, type: !146)
!4985 = !DILocation(line: 2785, column: 49, scope: !4979)
!4986 = !DILocalVariable(name: "max", arg: 3, scope: !4979, file: !3, line: 2785, type: !146)
!4987 = !DILocation(line: 2785, column: 60, scope: !4979)
!4988 = !DILocalVariable(name: "typeInfo", scope: !4979, file: !3, line: 2787, type: !788)
!4989 = !DILocation(line: 2787, column: 23, scope: !4979)
!4990 = !DILocation(line: 2787, column: 52, scope: !4979)
!4991 = !DILocation(line: 2787, column: 34, scope: !4979)
!4992 = !DILocation(line: 2789, column: 6, scope: !4993)
!4993 = distinct !DILexicalBlock(scope: !4979, file: !3, line: 2789, column: 6)
!4994 = !DILocation(line: 2789, column: 16, scope: !4993)
!4995 = !DILocation(line: 2789, column: 6, scope: !4979)
!4996 = !DILocation(line: 2790, column: 3, scope: !4993)
!4997 = !DILocation(line: 2790, column: 13, scope: !4993)
!4998 = !DILocation(line: 2790, column: 24, scope: !4993)
!4999 = !DILocation(line: 2790, column: 29, scope: !4993)
!5000 = !DILocation(line: 2791, column: 1, scope: !4979)
!5001 = distinct !DISubprogram(name: "CustomData_data_dominmax", scope: !3, file: !3, line: 2794, type: !5002, scopeLine: 2795, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5002 = !DISubroutineType(types: !5003)
!5003 = !{null, !158, !335, !146, !146}
!5004 = !DILocalVariable(name: "type", arg: 1, scope: !5001, file: !3, line: 2794, type: !158)
!5005 = !DILocation(line: 2794, column: 35, scope: !5001)
!5006 = !DILocalVariable(name: "data", arg: 2, scope: !5001, file: !3, line: 2794, type: !335)
!5007 = !DILocation(line: 2794, column: 53, scope: !5001)
!5008 = !DILocalVariable(name: "min", arg: 3, scope: !5001, file: !3, line: 2794, type: !146)
!5009 = !DILocation(line: 2794, column: 65, scope: !5001)
!5010 = !DILocalVariable(name: "max", arg: 4, scope: !5001, file: !3, line: 2794, type: !146)
!5011 = !DILocation(line: 2794, column: 76, scope: !5001)
!5012 = !DILocalVariable(name: "typeInfo", scope: !5001, file: !3, line: 2796, type: !788)
!5013 = !DILocation(line: 2796, column: 23, scope: !5001)
!5014 = !DILocation(line: 2796, column: 52, scope: !5001)
!5015 = !DILocation(line: 2796, column: 34, scope: !5001)
!5016 = !DILocation(line: 2798, column: 6, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !5001, file: !3, line: 2798, column: 6)
!5018 = !DILocation(line: 2798, column: 16, scope: !5017)
!5019 = !DILocation(line: 2798, column: 6, scope: !5001)
!5020 = !DILocation(line: 2799, column: 3, scope: !5017)
!5021 = !DILocation(line: 2799, column: 13, scope: !5017)
!5022 = !DILocation(line: 2799, column: 22, scope: !5017)
!5023 = !DILocation(line: 2799, column: 28, scope: !5017)
!5024 = !DILocation(line: 2799, column: 33, scope: !5017)
!5025 = !DILocation(line: 2800, column: 1, scope: !5001)
!5026 = distinct !DISubprogram(name: "CustomData_data_multiply", scope: !3, file: !3, line: 2803, type: !5027, scopeLine: 2804, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5027 = !DISubroutineType(types: !5028)
!5028 = !{null, !158, !146, !160}
!5029 = !DILocalVariable(name: "type", arg: 1, scope: !5026, file: !3, line: 2803, type: !158)
!5030 = !DILocation(line: 2803, column: 35, scope: !5026)
!5031 = !DILocalVariable(name: "data", arg: 2, scope: !5026, file: !3, line: 2803, type: !146)
!5032 = !DILocation(line: 2803, column: 47, scope: !5026)
!5033 = !DILocalVariable(name: "fac", arg: 3, scope: !5026, file: !3, line: 2803, type: !160)
!5034 = !DILocation(line: 2803, column: 59, scope: !5026)
!5035 = !DILocalVariable(name: "typeInfo", scope: !5026, file: !3, line: 2805, type: !788)
!5036 = !DILocation(line: 2805, column: 23, scope: !5026)
!5037 = !DILocation(line: 2805, column: 52, scope: !5026)
!5038 = !DILocation(line: 2805, column: 34, scope: !5026)
!5039 = !DILocation(line: 2807, column: 6, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !5026, file: !3, line: 2807, column: 6)
!5041 = !DILocation(line: 2807, column: 16, scope: !5040)
!5042 = !DILocation(line: 2807, column: 6, scope: !5026)
!5043 = !DILocation(line: 2808, column: 3, scope: !5040)
!5044 = !DILocation(line: 2808, column: 13, scope: !5040)
!5045 = !DILocation(line: 2808, column: 22, scope: !5040)
!5046 = !DILocation(line: 2808, column: 28, scope: !5040)
!5047 = !DILocation(line: 2809, column: 1, scope: !5026)
!5048 = distinct !DISubprogram(name: "CustomData_data_add", scope: !3, file: !3, line: 2812, type: !5049, scopeLine: 2813, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5049 = !DISubroutineType(types: !5050)
!5050 = !{null, !158, !146, !335}
!5051 = !DILocalVariable(name: "type", arg: 1, scope: !5048, file: !3, line: 2812, type: !158)
!5052 = !DILocation(line: 2812, column: 30, scope: !5048)
!5053 = !DILocalVariable(name: "data1", arg: 2, scope: !5048, file: !3, line: 2812, type: !146)
!5054 = !DILocation(line: 2812, column: 42, scope: !5048)
!5055 = !DILocalVariable(name: "data2", arg: 3, scope: !5048, file: !3, line: 2812, type: !335)
!5056 = !DILocation(line: 2812, column: 61, scope: !5048)
!5057 = !DILocalVariable(name: "typeInfo", scope: !5048, file: !3, line: 2814, type: !788)
!5058 = !DILocation(line: 2814, column: 23, scope: !5048)
!5059 = !DILocation(line: 2814, column: 52, scope: !5048)
!5060 = !DILocation(line: 2814, column: 34, scope: !5048)
!5061 = !DILocation(line: 2816, column: 6, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 2816, column: 6)
!5063 = !DILocation(line: 2816, column: 16, scope: !5062)
!5064 = !DILocation(line: 2816, column: 6, scope: !5048)
!5065 = !DILocation(line: 2817, column: 3, scope: !5062)
!5066 = !DILocation(line: 2817, column: 13, scope: !5062)
!5067 = !DILocation(line: 2817, column: 17, scope: !5062)
!5068 = !DILocation(line: 2817, column: 24, scope: !5062)
!5069 = !DILocation(line: 2818, column: 1, scope: !5048)
!5070 = distinct !DISubprogram(name: "CustomData_bmesh_set", scope: !3, file: !3, line: 2820, type: !5071, scopeLine: 2821, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5071 = !DISubroutineType(types: !5072)
!5072 = !{null, !1263, !146, !158, !146}
!5073 = !DILocalVariable(name: "data", arg: 1, scope: !5070, file: !3, line: 2820, type: !1263)
!5074 = !DILocation(line: 2820, column: 45, scope: !5070)
!5075 = !DILocalVariable(name: "block", arg: 2, scope: !5070, file: !3, line: 2820, type: !146)
!5076 = !DILocation(line: 2820, column: 57, scope: !5070)
!5077 = !DILocalVariable(name: "type", arg: 3, scope: !5070, file: !3, line: 2820, type: !158)
!5078 = !DILocation(line: 2820, column: 68, scope: !5070)
!5079 = !DILocalVariable(name: "source", arg: 4, scope: !5070, file: !3, line: 2820, type: !146)
!5080 = !DILocation(line: 2820, column: 80, scope: !5070)
!5081 = !DILocalVariable(name: "dest", scope: !5070, file: !3, line: 2822, type: !146)
!5082 = !DILocation(line: 2822, column: 8, scope: !5070)
!5083 = !DILocation(line: 2822, column: 36, scope: !5070)
!5084 = !DILocation(line: 2822, column: 42, scope: !5070)
!5085 = !DILocation(line: 2822, column: 49, scope: !5070)
!5086 = !DILocation(line: 2822, column: 15, scope: !5070)
!5087 = !DILocalVariable(name: "typeInfo", scope: !5070, file: !3, line: 2823, type: !788)
!5088 = !DILocation(line: 2823, column: 23, scope: !5070)
!5089 = !DILocation(line: 2823, column: 52, scope: !5070)
!5090 = !DILocation(line: 2823, column: 34, scope: !5070)
!5091 = !DILocation(line: 2825, column: 7, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 2825, column: 6)
!5093 = !DILocation(line: 2825, column: 6, scope: !5070)
!5094 = !DILocation(line: 2825, column: 13, scope: !5092)
!5095 = !DILocation(line: 2827, column: 6, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 2827, column: 6)
!5097 = !DILocation(line: 2827, column: 16, scope: !5096)
!5098 = !DILocation(line: 2827, column: 6, scope: !5070)
!5099 = !DILocation(line: 2828, column: 3, scope: !5096)
!5100 = !DILocation(line: 2828, column: 13, scope: !5096)
!5101 = !DILocation(line: 2828, column: 18, scope: !5096)
!5102 = !DILocation(line: 2828, column: 26, scope: !5096)
!5103 = !DILocation(line: 2830, column: 10, scope: !5096)
!5104 = !DILocation(line: 2830, column: 16, scope: !5096)
!5105 = !DILocation(line: 2830, column: 24, scope: !5096)
!5106 = !DILocation(line: 2830, column: 34, scope: !5096)
!5107 = !DILocation(line: 2830, column: 3, scope: !5096)
!5108 = !DILocation(line: 2831, column: 1, scope: !5070)
!5109 = distinct !DISubprogram(name: "CustomData_bmesh_set_n", scope: !3, file: !3, line: 2833, type: !5110, scopeLine: 2834, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5110 = !DISubroutineType(types: !5111)
!5111 = !{null, !488, !146, !158, !158, !146}
!5112 = !DILocalVariable(name: "data", arg: 1, scope: !5109, file: !3, line: 2833, type: !488)
!5113 = !DILocation(line: 2833, column: 41, scope: !5109)
!5114 = !DILocalVariable(name: "block", arg: 2, scope: !5109, file: !3, line: 2833, type: !146)
!5115 = !DILocation(line: 2833, column: 53, scope: !5109)
!5116 = !DILocalVariable(name: "type", arg: 3, scope: !5109, file: !3, line: 2833, type: !158)
!5117 = !DILocation(line: 2833, column: 64, scope: !5109)
!5118 = !DILocalVariable(name: "n", arg: 4, scope: !5109, file: !3, line: 2833, type: !158)
!5119 = !DILocation(line: 2833, column: 74, scope: !5109)
!5120 = !DILocalVariable(name: "source", arg: 5, scope: !5109, file: !3, line: 2833, type: !146)
!5121 = !DILocation(line: 2833, column: 83, scope: !5109)
!5122 = !DILocalVariable(name: "dest", scope: !5109, file: !3, line: 2835, type: !146)
!5123 = !DILocation(line: 2835, column: 8, scope: !5109)
!5124 = !DILocation(line: 2835, column: 38, scope: !5109)
!5125 = !DILocation(line: 2835, column: 44, scope: !5109)
!5126 = !DILocation(line: 2835, column: 51, scope: !5109)
!5127 = !DILocation(line: 2835, column: 57, scope: !5109)
!5128 = !DILocation(line: 2835, column: 15, scope: !5109)
!5129 = !DILocalVariable(name: "typeInfo", scope: !5109, file: !3, line: 2836, type: !788)
!5130 = !DILocation(line: 2836, column: 23, scope: !5109)
!5131 = !DILocation(line: 2836, column: 52, scope: !5109)
!5132 = !DILocation(line: 2836, column: 34, scope: !5109)
!5133 = !DILocation(line: 2838, column: 7, scope: !5134)
!5134 = distinct !DILexicalBlock(scope: !5109, file: !3, line: 2838, column: 6)
!5135 = !DILocation(line: 2838, column: 6, scope: !5109)
!5136 = !DILocation(line: 2838, column: 13, scope: !5134)
!5137 = !DILocation(line: 2840, column: 6, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !5109, file: !3, line: 2840, column: 6)
!5139 = !DILocation(line: 2840, column: 16, scope: !5138)
!5140 = !DILocation(line: 2840, column: 6, scope: !5109)
!5141 = !DILocation(line: 2841, column: 3, scope: !5138)
!5142 = !DILocation(line: 2841, column: 13, scope: !5138)
!5143 = !DILocation(line: 2841, column: 18, scope: !5138)
!5144 = !DILocation(line: 2841, column: 26, scope: !5138)
!5145 = !DILocation(line: 2843, column: 10, scope: !5138)
!5146 = !DILocation(line: 2843, column: 16, scope: !5138)
!5147 = !DILocation(line: 2843, column: 24, scope: !5138)
!5148 = !DILocation(line: 2843, column: 34, scope: !5138)
!5149 = !DILocation(line: 2843, column: 3, scope: !5138)
!5150 = !DILocation(line: 2844, column: 1, scope: !5109)
!5151 = distinct !DISubprogram(name: "CustomData_bmesh_set_layer_n", scope: !3, file: !3, line: 2846, type: !5152, scopeLine: 2847, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5152 = !DISubroutineType(types: !5153)
!5153 = !{null, !488, !146, !158, !146}
!5154 = !DILocalVariable(name: "data", arg: 1, scope: !5151, file: !3, line: 2846, type: !488)
!5155 = !DILocation(line: 2846, column: 47, scope: !5151)
!5156 = !DILocalVariable(name: "block", arg: 2, scope: !5151, file: !3, line: 2846, type: !146)
!5157 = !DILocation(line: 2846, column: 59, scope: !5151)
!5158 = !DILocalVariable(name: "n", arg: 3, scope: !5151, file: !3, line: 2846, type: !158)
!5159 = !DILocation(line: 2846, column: 70, scope: !5151)
!5160 = !DILocalVariable(name: "source", arg: 4, scope: !5151, file: !3, line: 2846, type: !146)
!5161 = !DILocation(line: 2846, column: 79, scope: !5151)
!5162 = !DILocalVariable(name: "dest", scope: !5151, file: !3, line: 2848, type: !146)
!5163 = !DILocation(line: 2848, column: 8, scope: !5151)
!5164 = !DILocation(line: 2848, column: 44, scope: !5151)
!5165 = !DILocation(line: 2848, column: 50, scope: !5151)
!5166 = !DILocation(line: 2848, column: 57, scope: !5151)
!5167 = !DILocation(line: 2848, column: 15, scope: !5151)
!5168 = !DILocalVariable(name: "typeInfo", scope: !5151, file: !3, line: 2849, type: !788)
!5169 = !DILocation(line: 2849, column: 23, scope: !5151)
!5170 = !DILocation(line: 2849, column: 52, scope: !5151)
!5171 = !DILocation(line: 2849, column: 58, scope: !5151)
!5172 = !DILocation(line: 2849, column: 65, scope: !5151)
!5173 = !DILocation(line: 2849, column: 68, scope: !5151)
!5174 = !DILocation(line: 2849, column: 34, scope: !5151)
!5175 = !DILocation(line: 2851, column: 7, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5151, file: !3, line: 2851, column: 6)
!5177 = !DILocation(line: 2851, column: 6, scope: !5151)
!5178 = !DILocation(line: 2851, column: 13, scope: !5176)
!5179 = !DILocation(line: 2853, column: 6, scope: !5180)
!5180 = distinct !DILexicalBlock(scope: !5151, file: !3, line: 2853, column: 6)
!5181 = !DILocation(line: 2853, column: 16, scope: !5180)
!5182 = !DILocation(line: 2853, column: 6, scope: !5151)
!5183 = !DILocation(line: 2854, column: 3, scope: !5180)
!5184 = !DILocation(line: 2854, column: 13, scope: !5180)
!5185 = !DILocation(line: 2854, column: 18, scope: !5180)
!5186 = !DILocation(line: 2854, column: 26, scope: !5180)
!5187 = !DILocation(line: 2856, column: 10, scope: !5180)
!5188 = !DILocation(line: 2856, column: 16, scope: !5180)
!5189 = !DILocation(line: 2856, column: 24, scope: !5180)
!5190 = !DILocation(line: 2856, column: 34, scope: !5180)
!5191 = !DILocation(line: 2856, column: 3, scope: !5180)
!5192 = !DILocation(line: 2857, column: 1, scope: !5151)
!5193 = distinct !DISubprogram(name: "CustomData_bmesh_interp_n", scope: !3, file: !3, line: 2862, type: !5194, scopeLine: 2864, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5194 = !DISubroutineType(types: !5195)
!5195 = !{null, !488, !222, !345, !345, !158, !146, !158}
!5196 = !DILocalVariable(name: "data", arg: 1, scope: !5193, file: !3, line: 2862, type: !488)
!5197 = !DILocation(line: 2862, column: 44, scope: !5193)
!5198 = !DILocalVariable(name: "src_blocks", arg: 2, scope: !5193, file: !3, line: 2862, type: !222)
!5199 = !DILocation(line: 2862, column: 57, scope: !5193)
!5200 = !DILocalVariable(name: "weights", arg: 3, scope: !5193, file: !3, line: 2862, type: !345)
!5201 = !DILocation(line: 2862, column: 82, scope: !5193)
!5202 = !DILocalVariable(name: "sub_weights", arg: 4, scope: !5193, file: !3, line: 2863, type: !345)
!5203 = !DILocation(line: 2863, column: 45, scope: !5193)
!5204 = !DILocalVariable(name: "count", arg: 5, scope: !5193, file: !3, line: 2863, type: !158)
!5205 = !DILocation(line: 2863, column: 62, scope: !5193)
!5206 = !DILocalVariable(name: "dest_block", arg: 6, scope: !5193, file: !3, line: 2863, type: !146)
!5207 = !DILocation(line: 2863, column: 75, scope: !5193)
!5208 = !DILocalVariable(name: "n", arg: 7, scope: !5193, file: !3, line: 2863, type: !158)
!5209 = !DILocation(line: 2863, column: 91, scope: !5193)
!5210 = !DILocalVariable(name: "layer", scope: !5193, file: !3, line: 2865, type: !493)
!5211 = !DILocation(line: 2865, column: 19, scope: !5193)
!5212 = !DILocation(line: 2865, column: 28, scope: !5193)
!5213 = !DILocation(line: 2865, column: 34, scope: !5193)
!5214 = !DILocation(line: 2865, column: 41, scope: !5193)
!5215 = !DILocalVariable(name: "typeInfo", scope: !5193, file: !3, line: 2866, type: !788)
!5216 = !DILocation(line: 2866, column: 23, scope: !5193)
!5217 = !DILocation(line: 2866, column: 52, scope: !5193)
!5218 = !DILocation(line: 2866, column: 59, scope: !5193)
!5219 = !DILocation(line: 2866, column: 34, scope: !5193)
!5220 = !DILocation(line: 2868, column: 2, scope: !5193)
!5221 = !DILocation(line: 2868, column: 12, scope: !5193)
!5222 = !DILocation(line: 2868, column: 19, scope: !5193)
!5223 = !DILocation(line: 2868, column: 31, scope: !5193)
!5224 = !DILocation(line: 2868, column: 40, scope: !5193)
!5225 = !DILocation(line: 2868, column: 53, scope: !5193)
!5226 = !DILocation(line: 2869, column: 27, scope: !5193)
!5227 = !DILocation(line: 2869, column: 40, scope: !5193)
!5228 = !DILocation(line: 2869, column: 47, scope: !5193)
!5229 = !DILocation(line: 2869, column: 38, scope: !5193)
!5230 = !DILocation(line: 2870, column: 1, scope: !5193)
!5231 = distinct !DISubprogram(name: "CustomData_bmesh_interp", scope: !3, file: !3, line: 2872, type: !5232, scopeLine: 2874, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5232 = !DISubroutineType(types: !5233)
!5233 = !{null, !488, !222, !345, !345, !158, !146}
!5234 = !DILocalVariable(name: "data", arg: 1, scope: !5231, file: !3, line: 2872, type: !488)
!5235 = !DILocation(line: 2872, column: 42, scope: !5231)
!5236 = !DILocalVariable(name: "src_blocks", arg: 2, scope: !5231, file: !3, line: 2872, type: !222)
!5237 = !DILocation(line: 2872, column: 55, scope: !5231)
!5238 = !DILocalVariable(name: "weights", arg: 3, scope: !5231, file: !3, line: 2872, type: !345)
!5239 = !DILocation(line: 2872, column: 80, scope: !5231)
!5240 = !DILocalVariable(name: "sub_weights", arg: 4, scope: !5231, file: !3, line: 2873, type: !345)
!5241 = !DILocation(line: 2873, column: 43, scope: !5231)
!5242 = !DILocalVariable(name: "count", arg: 5, scope: !5231, file: !3, line: 2873, type: !158)
!5243 = !DILocation(line: 2873, column: 60, scope: !5231)
!5244 = !DILocalVariable(name: "dest_block", arg: 6, scope: !5231, file: !3, line: 2873, type: !146)
!5245 = !DILocation(line: 2873, column: 73, scope: !5231)
!5246 = !DILocalVariable(name: "i", scope: !5231, file: !3, line: 2875, type: !158)
!5247 = !DILocation(line: 2875, column: 6, scope: !5231)
!5248 = !DILocalVariable(name: "j", scope: !5231, file: !3, line: 2875, type: !158)
!5249 = !DILocation(line: 2875, column: 9, scope: !5231)
!5250 = !DILocalVariable(name: "source_buf", scope: !5231, file: !3, line: 2876, type: !3023)
!5251 = !DILocation(line: 2876, column: 8, scope: !5231)
!5252 = !DILocalVariable(name: "sources", scope: !5231, file: !3, line: 2877, type: !222)
!5253 = !DILocation(line: 2877, column: 9, scope: !5231)
!5254 = !DILocation(line: 2877, column: 19, scope: !5231)
!5255 = !DILocation(line: 2882, column: 6, scope: !5256)
!5256 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 2882, column: 6)
!5257 = !DILocation(line: 2882, column: 12, scope: !5256)
!5258 = !DILocation(line: 2882, column: 6, scope: !5231)
!5259 = !DILocation(line: 2883, column: 13, scope: !5256)
!5260 = !DILocation(line: 2883, column: 44, scope: !5256)
!5261 = !DILocation(line: 2883, column: 42, scope: !5256)
!5262 = !DILocation(line: 2883, column: 11, scope: !5256)
!5263 = !DILocation(line: 2883, column: 3, scope: !5256)
!5264 = !DILocation(line: 2887, column: 9, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 2887, column: 2)
!5266 = !DILocation(line: 2887, column: 7, scope: !5265)
!5267 = !DILocation(line: 2887, column: 14, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5265, file: !3, line: 2887, column: 2)
!5269 = !DILocation(line: 2887, column: 18, scope: !5268)
!5270 = !DILocation(line: 2887, column: 24, scope: !5268)
!5271 = !DILocation(line: 2887, column: 16, scope: !5268)
!5272 = !DILocation(line: 2887, column: 2, scope: !5265)
!5273 = !DILocalVariable(name: "layer", scope: !5274, file: !3, line: 2888, type: !493)
!5274 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 2887, column: 39)
!5275 = !DILocation(line: 2888, column: 20, scope: !5274)
!5276 = !DILocation(line: 2888, column: 29, scope: !5274)
!5277 = !DILocation(line: 2888, column: 35, scope: !5274)
!5278 = !DILocation(line: 2888, column: 42, scope: !5274)
!5279 = !DILocalVariable(name: "typeInfo", scope: !5274, file: !3, line: 2889, type: !788)
!5280 = !DILocation(line: 2889, column: 24, scope: !5274)
!5281 = !DILocation(line: 2889, column: 53, scope: !5274)
!5282 = !DILocation(line: 2889, column: 60, scope: !5274)
!5283 = !DILocation(line: 2889, column: 35, scope: !5274)
!5284 = !DILocation(line: 2890, column: 7, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5274, file: !3, line: 2890, column: 7)
!5286 = !DILocation(line: 2890, column: 17, scope: !5285)
!5287 = !DILocation(line: 2890, column: 7, scope: !5274)
!5288 = !DILocation(line: 2891, column: 11, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5290, file: !3, line: 2891, column: 4)
!5290 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 2890, column: 25)
!5291 = !DILocation(line: 2891, column: 9, scope: !5289)
!5292 = !DILocation(line: 2891, column: 16, scope: !5293)
!5293 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 2891, column: 4)
!5294 = !DILocation(line: 2891, column: 20, scope: !5293)
!5295 = !DILocation(line: 2891, column: 18, scope: !5293)
!5296 = !DILocation(line: 2891, column: 4, scope: !5289)
!5297 = !DILocation(line: 2892, column: 26, scope: !5298)
!5298 = distinct !DILexicalBlock(scope: !5293, file: !3, line: 2891, column: 32)
!5299 = !DILocation(line: 2892, column: 37, scope: !5298)
!5300 = !DILocation(line: 2892, column: 42, scope: !5298)
!5301 = !DILocation(line: 2892, column: 49, scope: !5298)
!5302 = !DILocation(line: 2892, column: 40, scope: !5298)
!5303 = !DILocation(line: 2892, column: 5, scope: !5298)
!5304 = !DILocation(line: 2892, column: 13, scope: !5298)
!5305 = !DILocation(line: 2892, column: 16, scope: !5298)
!5306 = !DILocation(line: 2893, column: 4, scope: !5298)
!5307 = !DILocation(line: 2891, column: 27, scope: !5293)
!5308 = !DILocation(line: 2891, column: 4, scope: !5293)
!5309 = distinct !{!5309, !5296, !5310}
!5310 = !DILocation(line: 2893, column: 4, scope: !5289)
!5311 = !DILocation(line: 2894, column: 30, scope: !5290)
!5312 = !DILocation(line: 2894, column: 36, scope: !5290)
!5313 = !DILocation(line: 2894, column: 45, scope: !5290)
!5314 = !DILocation(line: 2894, column: 54, scope: !5290)
!5315 = !DILocation(line: 2894, column: 67, scope: !5290)
!5316 = !DILocation(line: 2894, column: 74, scope: !5290)
!5317 = !DILocation(line: 2894, column: 86, scope: !5290)
!5318 = !DILocation(line: 2894, column: 4, scope: !5290)
!5319 = !DILocation(line: 2895, column: 3, scope: !5290)
!5320 = !DILocation(line: 2896, column: 2, scope: !5274)
!5321 = !DILocation(line: 2887, column: 34, scope: !5268)
!5322 = !DILocation(line: 2887, column: 2, scope: !5268)
!5323 = distinct !{!5323, !5272, !5324}
!5324 = !DILocation(line: 2896, column: 2, scope: !5265)
!5325 = !DILocation(line: 2898, column: 6, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 2898, column: 6)
!5327 = !DILocation(line: 2898, column: 12, scope: !5326)
!5328 = !DILocation(line: 2898, column: 6, scope: !5231)
!5329 = !DILocation(line: 2898, column: 31, scope: !5326)
!5330 = !DILocation(line: 2898, column: 41, scope: !5326)
!5331 = !DILocation(line: 2899, column: 1, scope: !5231)
!5332 = distinct !DISubprogram(name: "CustomData_bmesh_set_default", scope: !3, file: !3, line: 2916, type: !4487, scopeLine: 2917, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5333 = !DILocalVariable(name: "data", arg: 1, scope: !5332, file: !3, line: 2916, type: !488)
!5334 = !DILocation(line: 2916, column: 47, scope: !5332)
!5335 = !DILocalVariable(name: "block", arg: 2, scope: !5332, file: !3, line: 2916, type: !222)
!5336 = !DILocation(line: 2916, column: 60, scope: !5332)
!5337 = !DILocalVariable(name: "i", scope: !5332, file: !3, line: 2918, type: !158)
!5338 = !DILocation(line: 2918, column: 6, scope: !5332)
!5339 = !DILocation(line: 2920, column: 7, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5332, file: !3, line: 2920, column: 6)
!5341 = !DILocation(line: 2920, column: 6, scope: !5340)
!5342 = !DILocation(line: 2920, column: 13, scope: !5340)
!5343 = !DILocation(line: 2920, column: 6, scope: !5332)
!5344 = !DILocation(line: 2921, column: 32, scope: !5340)
!5345 = !DILocation(line: 2921, column: 38, scope: !5340)
!5346 = !DILocation(line: 2921, column: 3, scope: !5340)
!5347 = !DILocation(line: 2923, column: 9, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5332, file: !3, line: 2923, column: 2)
!5349 = !DILocation(line: 2923, column: 7, scope: !5348)
!5350 = !DILocation(line: 2923, column: 14, scope: !5351)
!5351 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 2923, column: 2)
!5352 = !DILocation(line: 2923, column: 18, scope: !5351)
!5353 = !DILocation(line: 2923, column: 24, scope: !5351)
!5354 = !DILocation(line: 2923, column: 16, scope: !5351)
!5355 = !DILocation(line: 2923, column: 2, scope: !5348)
!5356 = !DILocation(line: 2924, column: 34, scope: !5357)
!5357 = distinct !DILexicalBlock(scope: !5351, file: !3, line: 2923, column: 39)
!5358 = !DILocation(line: 2924, column: 40, scope: !5357)
!5359 = !DILocation(line: 2924, column: 47, scope: !5357)
!5360 = !DILocation(line: 2924, column: 3, scope: !5357)
!5361 = !DILocation(line: 2925, column: 2, scope: !5357)
!5362 = !DILocation(line: 2923, column: 34, scope: !5351)
!5363 = !DILocation(line: 2923, column: 2, scope: !5351)
!5364 = distinct !{!5364, !5355, !5365}
!5365 = !DILocation(line: 2925, column: 2, scope: !5348)
!5366 = !DILocation(line: 2926, column: 1, scope: !5332)
!5367 = distinct !DISubprogram(name: "CustomData_bmesh_set_default_n", scope: !3, file: !3, line: 2901, type: !5368, scopeLine: 2902, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5368 = !DISubroutineType(types: !5369)
!5369 = !{null, !488, !222, !158}
!5370 = !DILocalVariable(name: "data", arg: 1, scope: !5367, file: !3, line: 2901, type: !488)
!5371 = !DILocation(line: 2901, column: 56, scope: !5367)
!5372 = !DILocalVariable(name: "block", arg: 2, scope: !5367, file: !3, line: 2901, type: !222)
!5373 = !DILocation(line: 2901, column: 69, scope: !5367)
!5374 = !DILocalVariable(name: "n", arg: 3, scope: !5367, file: !3, line: 2901, type: !158)
!5375 = !DILocation(line: 2901, column: 80, scope: !5367)
!5376 = !DILocalVariable(name: "typeInfo", scope: !5367, file: !3, line: 2903, type: !788)
!5377 = !DILocation(line: 2903, column: 23, scope: !5367)
!5378 = !DILocalVariable(name: "offset", scope: !5367, file: !3, line: 2904, type: !158)
!5379 = !DILocation(line: 2904, column: 6, scope: !5367)
!5380 = !DILocation(line: 2904, column: 15, scope: !5367)
!5381 = !DILocation(line: 2904, column: 21, scope: !5367)
!5382 = !DILocation(line: 2904, column: 28, scope: !5367)
!5383 = !DILocation(line: 2904, column: 31, scope: !5367)
!5384 = !DILocation(line: 2906, column: 31, scope: !5367)
!5385 = !DILocation(line: 2906, column: 37, scope: !5367)
!5386 = !DILocation(line: 2906, column: 44, scope: !5367)
!5387 = !DILocation(line: 2906, column: 47, scope: !5367)
!5388 = !DILocation(line: 2906, column: 13, scope: !5367)
!5389 = !DILocation(line: 2906, column: 11, scope: !5367)
!5390 = !DILocation(line: 2908, column: 6, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !5367, file: !3, line: 2908, column: 6)
!5392 = !DILocation(line: 2908, column: 16, scope: !5391)
!5393 = !DILocation(line: 2908, column: 6, scope: !5367)
!5394 = !DILocation(line: 2909, column: 3, scope: !5395)
!5395 = distinct !DILexicalBlock(scope: !5391, file: !3, line: 2908, column: 29)
!5396 = !DILocation(line: 2909, column: 13, scope: !5395)
!5397 = !DILocation(line: 2909, column: 34, scope: !5395)
!5398 = !DILocation(line: 2909, column: 33, scope: !5395)
!5399 = !DILocation(line: 2909, column: 42, scope: !5395)
!5400 = !DILocation(line: 2909, column: 40, scope: !5395)
!5401 = !DILocation(line: 2910, column: 2, scope: !5395)
!5402 = !DILocation(line: 2912, column: 19, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5391, file: !3, line: 2911, column: 7)
!5404 = !DILocation(line: 2912, column: 18, scope: !5403)
!5405 = !DILocation(line: 2912, column: 27, scope: !5403)
!5406 = !DILocation(line: 2912, column: 25, scope: !5403)
!5407 = !DILocation(line: 2912, column: 38, scope: !5403)
!5408 = !DILocation(line: 2912, column: 48, scope: !5403)
!5409 = !DILocation(line: 2912, column: 3, scope: !5403)
!5410 = !DILocation(line: 2914, column: 1, scope: !5367)
!5411 = distinct !DISubprogram(name: "CustomData_to_bmesh_block", scope: !3, file: !3, line: 2933, type: !5412, scopeLine: 2935, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5412 = !DISubroutineType(types: !5413)
!5413 = !{null, !1263, !488, !158, !222, !361}
!5414 = !DILocalVariable(name: "source", arg: 1, scope: !5411, file: !3, line: 2933, type: !1263)
!5415 = !DILocation(line: 2933, column: 50, scope: !5411)
!5416 = !DILocalVariable(name: "dest", arg: 2, scope: !5411, file: !3, line: 2933, type: !488)
!5417 = !DILocation(line: 2933, column: 70, scope: !5411)
!5418 = !DILocalVariable(name: "src_index", arg: 3, scope: !5411, file: !3, line: 2934, type: !158)
!5419 = !DILocation(line: 2934, column: 36, scope: !5411)
!5420 = !DILocalVariable(name: "dest_block", arg: 4, scope: !5411, file: !3, line: 2934, type: !222)
!5421 = !DILocation(line: 2934, column: 54, scope: !5411)
!5422 = !DILocalVariable(name: "use_default_init", arg: 5, scope: !5411, file: !3, line: 2934, type: !361)
!5423 = !DILocation(line: 2934, column: 71, scope: !5411)
!5424 = !DILocalVariable(name: "typeInfo", scope: !5411, file: !3, line: 2936, type: !788)
!5425 = !DILocation(line: 2936, column: 23, scope: !5411)
!5426 = !DILocalVariable(name: "dest_i", scope: !5411, file: !3, line: 2937, type: !158)
!5427 = !DILocation(line: 2937, column: 6, scope: !5411)
!5428 = !DILocalVariable(name: "src_i", scope: !5411, file: !3, line: 2937, type: !158)
!5429 = !DILocation(line: 2937, column: 14, scope: !5411)
!5430 = !DILocalVariable(name: "src_offset", scope: !5411, file: !3, line: 2937, type: !158)
!5431 = !DILocation(line: 2937, column: 21, scope: !5411)
!5432 = !DILocation(line: 2939, column: 7, scope: !5433)
!5433 = distinct !DILexicalBlock(scope: !5411, file: !3, line: 2939, column: 6)
!5434 = !DILocation(line: 2939, column: 6, scope: !5433)
!5435 = !DILocation(line: 2939, column: 18, scope: !5433)
!5436 = !DILocation(line: 2939, column: 6, scope: !5411)
!5437 = !DILocation(line: 2940, column: 32, scope: !5433)
!5438 = !DILocation(line: 2940, column: 38, scope: !5433)
!5439 = !DILocation(line: 2940, column: 3, scope: !5433)
!5440 = !DILocation(line: 2943, column: 9, scope: !5411)
!5441 = !DILocation(line: 2944, column: 13, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !5411, file: !3, line: 2944, column: 2)
!5443 = !DILocation(line: 2944, column: 7, scope: !5442)
!5444 = !DILocation(line: 2944, column: 18, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5442, file: !3, line: 2944, column: 2)
!5446 = !DILocation(line: 2944, column: 26, scope: !5445)
!5447 = !DILocation(line: 2944, column: 34, scope: !5445)
!5448 = !DILocation(line: 2944, column: 24, scope: !5445)
!5449 = !DILocation(line: 2944, column: 2, scope: !5442)
!5450 = !DILocation(line: 2949, column: 3, scope: !5451)
!5451 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 2944, column: 53)
!5452 = !DILocation(line: 2949, column: 10, scope: !5451)
!5453 = !DILocation(line: 2949, column: 19, scope: !5451)
!5454 = !DILocation(line: 2949, column: 25, scope: !5451)
!5455 = !DILocation(line: 2949, column: 17, scope: !5451)
!5456 = !DILocation(line: 2949, column: 34, scope: !5451)
!5457 = !DILocation(line: 2949, column: 37, scope: !5451)
!5458 = !DILocation(line: 2949, column: 43, scope: !5451)
!5459 = !DILocation(line: 2949, column: 50, scope: !5451)
!5460 = !DILocation(line: 2949, column: 58, scope: !5451)
!5461 = !DILocation(line: 2949, column: 65, scope: !5451)
!5462 = !DILocation(line: 2949, column: 73, scope: !5451)
!5463 = !DILocation(line: 2949, column: 80, scope: !5451)
!5464 = !DILocation(line: 2949, column: 87, scope: !5451)
!5465 = !DILocation(line: 2949, column: 63, scope: !5451)
!5466 = !DILocation(line: 0, scope: !5451)
!5467 = !DILocation(line: 2950, column: 8, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 2950, column: 8)
!5469 = distinct !DILexicalBlock(scope: !5451, file: !3, line: 2949, column: 93)
!5470 = !DILocation(line: 2950, column: 8, scope: !5469)
!5471 = !DILocation(line: 2951, column: 36, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5468, file: !3, line: 2950, column: 26)
!5473 = !DILocation(line: 2951, column: 42, scope: !5472)
!5474 = !DILocation(line: 2951, column: 54, scope: !5472)
!5475 = !DILocation(line: 2951, column: 5, scope: !5472)
!5476 = !DILocation(line: 2952, column: 4, scope: !5472)
!5477 = !DILocation(line: 2953, column: 10, scope: !5469)
!5478 = distinct !{!5478, !5450, !5479}
!5479 = !DILocation(line: 2954, column: 3, scope: !5451)
!5480 = !DILocation(line: 2957, column: 7, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5451, file: !3, line: 2957, column: 7)
!5482 = !DILocation(line: 2957, column: 17, scope: !5481)
!5483 = !DILocation(line: 2957, column: 23, scope: !5481)
!5484 = !DILocation(line: 2957, column: 14, scope: !5481)
!5485 = !DILocation(line: 2957, column: 7, scope: !5451)
!5486 = !DILocation(line: 2957, column: 33, scope: !5481)
!5487 = !DILocation(line: 2960, column: 7, scope: !5488)
!5488 = distinct !DILexicalBlock(scope: !5451, file: !3, line: 2960, column: 7)
!5489 = !DILocation(line: 2960, column: 13, scope: !5488)
!5490 = !DILocation(line: 2960, column: 20, scope: !5488)
!5491 = !DILocation(line: 2960, column: 28, scope: !5488)
!5492 = !DILocation(line: 2960, column: 36, scope: !5488)
!5493 = !DILocation(line: 2960, column: 44, scope: !5488)
!5494 = !DILocation(line: 2960, column: 51, scope: !5488)
!5495 = !DILocation(line: 2960, column: 58, scope: !5488)
!5496 = !DILocation(line: 2960, column: 33, scope: !5488)
!5497 = !DILocation(line: 2960, column: 7, scope: !5451)
!5498 = !DILocalVariable(name: "offset", scope: !5499, file: !3, line: 2961, type: !158)
!5499 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 2960, column: 64)
!5500 = !DILocation(line: 2961, column: 8, scope: !5499)
!5501 = !DILocation(line: 2961, column: 17, scope: !5499)
!5502 = !DILocation(line: 2961, column: 23, scope: !5499)
!5503 = !DILocation(line: 2961, column: 30, scope: !5499)
!5504 = !DILocation(line: 2961, column: 38, scope: !5499)
!5505 = !DILocalVariable(name: "src_data", scope: !5499, file: !3, line: 2962, type: !316)
!5506 = !DILocation(line: 2962, column: 16, scope: !5499)
!5507 = !DILocation(line: 2962, column: 27, scope: !5499)
!5508 = !DILocation(line: 2962, column: 35, scope: !5499)
!5509 = !DILocation(line: 2962, column: 42, scope: !5499)
!5510 = !DILocation(line: 2962, column: 49, scope: !5499)
!5511 = !DILocalVariable(name: "dest_data", scope: !5499, file: !3, line: 2963, type: !147)
!5512 = !DILocation(line: 2963, column: 10, scope: !5499)
!5513 = !DILocation(line: 2963, column: 31, scope: !5499)
!5514 = !DILocation(line: 2963, column: 30, scope: !5499)
!5515 = !DILocation(line: 2963, column: 44, scope: !5499)
!5516 = !DILocation(line: 2963, column: 42, scope: !5499)
!5517 = !DILocation(line: 2965, column: 33, scope: !5499)
!5518 = !DILocation(line: 2965, column: 39, scope: !5499)
!5519 = !DILocation(line: 2965, column: 46, scope: !5499)
!5520 = !DILocation(line: 2965, column: 54, scope: !5499)
!5521 = !DILocation(line: 2965, column: 15, scope: !5499)
!5522 = !DILocation(line: 2965, column: 13, scope: !5499)
!5523 = !DILocation(line: 2966, column: 17, scope: !5499)
!5524 = !DILocation(line: 2966, column: 29, scope: !5499)
!5525 = !DILocation(line: 2966, column: 39, scope: !5499)
!5526 = !DILocation(line: 2966, column: 27, scope: !5499)
!5527 = !DILocation(line: 2966, column: 15, scope: !5499)
!5528 = !DILocation(line: 2968, column: 8, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !5499, file: !3, line: 2968, column: 8)
!5530 = !DILocation(line: 2968, column: 18, scope: !5529)
!5531 = !DILocation(line: 2968, column: 8, scope: !5499)
!5532 = !DILocation(line: 2969, column: 5, scope: !5529)
!5533 = !DILocation(line: 2969, column: 15, scope: !5529)
!5534 = !DILocation(line: 2969, column: 20, scope: !5529)
!5535 = !DILocation(line: 2969, column: 31, scope: !5529)
!5536 = !DILocation(line: 2969, column: 29, scope: !5529)
!5537 = !DILocation(line: 2969, column: 43, scope: !5529)
!5538 = !DILocation(line: 2971, column: 12, scope: !5529)
!5539 = !DILocation(line: 2971, column: 23, scope: !5529)
!5540 = !DILocation(line: 2971, column: 34, scope: !5529)
!5541 = !DILocation(line: 2971, column: 32, scope: !5529)
!5542 = !DILocation(line: 2971, column: 46, scope: !5529)
!5543 = !DILocation(line: 2971, column: 56, scope: !5529)
!5544 = !DILocation(line: 2971, column: 5, scope: !5529)
!5545 = !DILocation(line: 2977, column: 10, scope: !5499)
!5546 = !DILocation(line: 2978, column: 3, scope: !5499)
!5547 = !DILocation(line: 2979, column: 2, scope: !5451)
!5548 = !DILocation(line: 2944, column: 44, scope: !5445)
!5549 = !DILocation(line: 2944, column: 2, scope: !5445)
!5550 = distinct !{!5550, !5449, !5551}
!5551 = !DILocation(line: 2979, column: 2, scope: !5442)
!5552 = !DILocation(line: 2981, column: 6, scope: !5553)
!5553 = distinct !DILexicalBlock(scope: !5411, file: !3, line: 2981, column: 6)
!5554 = !DILocation(line: 2981, column: 6, scope: !5411)
!5555 = !DILocation(line: 2982, column: 3, scope: !5556)
!5556 = distinct !DILexicalBlock(scope: !5553, file: !3, line: 2981, column: 24)
!5557 = !DILocation(line: 2982, column: 10, scope: !5556)
!5558 = !DILocation(line: 2982, column: 19, scope: !5556)
!5559 = !DILocation(line: 2982, column: 25, scope: !5556)
!5560 = !DILocation(line: 2982, column: 17, scope: !5556)
!5561 = !DILocation(line: 2983, column: 35, scope: !5562)
!5562 = distinct !DILexicalBlock(scope: !5556, file: !3, line: 2982, column: 35)
!5563 = !DILocation(line: 2983, column: 41, scope: !5562)
!5564 = !DILocation(line: 2983, column: 53, scope: !5562)
!5565 = !DILocation(line: 2983, column: 4, scope: !5562)
!5566 = !DILocation(line: 2984, column: 10, scope: !5562)
!5567 = distinct !{!5567, !5555, !5568}
!5568 = !DILocation(line: 2985, column: 3, scope: !5556)
!5569 = !DILocation(line: 2986, column: 2, scope: !5556)
!5570 = !DILocation(line: 2987, column: 1, scope: !5411)
!5571 = distinct !DISubprogram(name: "CustomData_from_bmesh_block", scope: !3, file: !3, line: 2989, type: !5572, scopeLine: 2991, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5572 = !DISubroutineType(types: !5573)
!5573 = !{null, !1263, !488, !146, !158}
!5574 = !DILocalVariable(name: "source", arg: 1, scope: !5571, file: !3, line: 2989, type: !1263)
!5575 = !DILocation(line: 2989, column: 52, scope: !5571)
!5576 = !DILocalVariable(name: "dest", arg: 2, scope: !5571, file: !3, line: 2989, type: !488)
!5577 = !DILocation(line: 2989, column: 72, scope: !5571)
!5578 = !DILocalVariable(name: "src_block", arg: 3, scope: !5571, file: !3, line: 2990, type: !146)
!5579 = !DILocation(line: 2990, column: 40, scope: !5571)
!5580 = !DILocalVariable(name: "dest_index", arg: 4, scope: !5571, file: !3, line: 2990, type: !158)
!5581 = !DILocation(line: 2990, column: 55, scope: !5571)
!5582 = !DILocalVariable(name: "typeInfo", scope: !5571, file: !3, line: 2992, type: !788)
!5583 = !DILocation(line: 2992, column: 23, scope: !5571)
!5584 = !DILocalVariable(name: "dest_i", scope: !5571, file: !3, line: 2993, type: !158)
!5585 = !DILocation(line: 2993, column: 6, scope: !5571)
!5586 = !DILocalVariable(name: "src_i", scope: !5571, file: !3, line: 2993, type: !158)
!5587 = !DILocation(line: 2993, column: 14, scope: !5571)
!5588 = !DILocalVariable(name: "dest_offset", scope: !5571, file: !3, line: 2993, type: !158)
!5589 = !DILocation(line: 2993, column: 21, scope: !5571)
!5590 = !DILocation(line: 2996, column: 9, scope: !5571)
!5591 = !DILocation(line: 2997, column: 13, scope: !5592)
!5592 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 2997, column: 2)
!5593 = !DILocation(line: 2997, column: 7, scope: !5592)
!5594 = !DILocation(line: 2997, column: 18, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5592, file: !3, line: 2997, column: 2)
!5596 = !DILocation(line: 2997, column: 26, scope: !5595)
!5597 = !DILocation(line: 2997, column: 34, scope: !5595)
!5598 = !DILocation(line: 2997, column: 24, scope: !5595)
!5599 = !DILocation(line: 2997, column: 2, scope: !5592)
!5600 = !DILocation(line: 3002, column: 3, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 2997, column: 53)
!5602 = !DILocation(line: 3002, column: 10, scope: !5601)
!5603 = !DILocation(line: 3002, column: 19, scope: !5601)
!5604 = !DILocation(line: 3002, column: 25, scope: !5601)
!5605 = !DILocation(line: 3002, column: 17, scope: !5601)
!5606 = !DILocation(line: 3002, column: 34, scope: !5601)
!5607 = !DILocation(line: 3002, column: 37, scope: !5601)
!5608 = !DILocation(line: 3002, column: 43, scope: !5601)
!5609 = !DILocation(line: 3002, column: 50, scope: !5601)
!5610 = !DILocation(line: 3002, column: 58, scope: !5601)
!5611 = !DILocation(line: 3002, column: 65, scope: !5601)
!5612 = !DILocation(line: 3002, column: 73, scope: !5601)
!5613 = !DILocation(line: 3002, column: 80, scope: !5601)
!5614 = !DILocation(line: 3002, column: 87, scope: !5601)
!5615 = !DILocation(line: 3002, column: 63, scope: !5601)
!5616 = !DILocation(line: 0, scope: !5601)
!5617 = !DILocation(line: 3003, column: 10, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 3002, column: 93)
!5619 = distinct !{!5619, !5600, !5620}
!5620 = !DILocation(line: 3004, column: 3, scope: !5601)
!5621 = !DILocation(line: 3007, column: 7, scope: !5622)
!5622 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 3007, column: 7)
!5623 = !DILocation(line: 3007, column: 17, scope: !5622)
!5624 = !DILocation(line: 3007, column: 23, scope: !5622)
!5625 = !DILocation(line: 3007, column: 14, scope: !5622)
!5626 = !DILocation(line: 3007, column: 7, scope: !5601)
!5627 = !DILocation(line: 3007, column: 33, scope: !5622)
!5628 = !DILocation(line: 3010, column: 7, scope: !5629)
!5629 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 3010, column: 7)
!5630 = !DILocation(line: 3010, column: 13, scope: !5629)
!5631 = !DILocation(line: 3010, column: 20, scope: !5629)
!5632 = !DILocation(line: 3010, column: 28, scope: !5629)
!5633 = !DILocation(line: 3010, column: 36, scope: !5629)
!5634 = !DILocation(line: 3010, column: 44, scope: !5629)
!5635 = !DILocation(line: 3010, column: 51, scope: !5629)
!5636 = !DILocation(line: 3010, column: 58, scope: !5629)
!5637 = !DILocation(line: 3010, column: 33, scope: !5629)
!5638 = !DILocation(line: 3010, column: 7, scope: !5601)
!5639 = !DILocalVariable(name: "offset", scope: !5640, file: !3, line: 3011, type: !158)
!5640 = distinct !DILexicalBlock(scope: !5629, file: !3, line: 3010, column: 64)
!5641 = !DILocation(line: 3011, column: 8, scope: !5640)
!5642 = !DILocation(line: 3011, column: 17, scope: !5640)
!5643 = !DILocation(line: 3011, column: 25, scope: !5640)
!5644 = !DILocation(line: 3011, column: 32, scope: !5640)
!5645 = !DILocation(line: 3011, column: 39, scope: !5640)
!5646 = !DILocalVariable(name: "src_data", scope: !5640, file: !3, line: 3012, type: !316)
!5647 = !DILocation(line: 3012, column: 16, scope: !5640)
!5648 = !DILocation(line: 3012, column: 35, scope: !5640)
!5649 = !DILocation(line: 3012, column: 47, scope: !5640)
!5650 = !DILocation(line: 3012, column: 45, scope: !5640)
!5651 = !DILocalVariable(name: "dest_data", scope: !5640, file: !3, line: 3013, type: !147)
!5652 = !DILocation(line: 3013, column: 10, scope: !5640)
!5653 = !DILocation(line: 3013, column: 22, scope: !5640)
!5654 = !DILocation(line: 3013, column: 28, scope: !5640)
!5655 = !DILocation(line: 3013, column: 35, scope: !5640)
!5656 = !DILocation(line: 3013, column: 43, scope: !5640)
!5657 = !DILocation(line: 3015, column: 33, scope: !5640)
!5658 = !DILocation(line: 3015, column: 39, scope: !5640)
!5659 = !DILocation(line: 3015, column: 46, scope: !5640)
!5660 = !DILocation(line: 3015, column: 54, scope: !5640)
!5661 = !DILocation(line: 3015, column: 15, scope: !5640)
!5662 = !DILocation(line: 3015, column: 13, scope: !5640)
!5663 = !DILocation(line: 3016, column: 18, scope: !5640)
!5664 = !DILocation(line: 3016, column: 31, scope: !5640)
!5665 = !DILocation(line: 3016, column: 41, scope: !5640)
!5666 = !DILocation(line: 3016, column: 29, scope: !5640)
!5667 = !DILocation(line: 3016, column: 16, scope: !5640)
!5668 = !DILocation(line: 3018, column: 8, scope: !5669)
!5669 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 3018, column: 8)
!5670 = !DILocation(line: 3018, column: 18, scope: !5669)
!5671 = !DILocation(line: 3018, column: 8, scope: !5640)
!5672 = !DILocation(line: 3019, column: 5, scope: !5669)
!5673 = !DILocation(line: 3019, column: 15, scope: !5669)
!5674 = !DILocation(line: 3019, column: 20, scope: !5669)
!5675 = !DILocation(line: 3019, column: 30, scope: !5669)
!5676 = !DILocation(line: 3019, column: 42, scope: !5669)
!5677 = !DILocation(line: 3019, column: 40, scope: !5669)
!5678 = !DILocation(line: 3021, column: 12, scope: !5669)
!5679 = !DILocation(line: 3021, column: 24, scope: !5669)
!5680 = !DILocation(line: 3021, column: 22, scope: !5669)
!5681 = !DILocation(line: 3021, column: 37, scope: !5669)
!5682 = !DILocation(line: 3021, column: 47, scope: !5669)
!5683 = !DILocation(line: 3021, column: 57, scope: !5669)
!5684 = !DILocation(line: 3021, column: 5, scope: !5669)
!5685 = !DILocation(line: 3027, column: 10, scope: !5640)
!5686 = !DILocation(line: 3028, column: 3, scope: !5640)
!5687 = !DILocation(line: 3029, column: 2, scope: !5601)
!5688 = !DILocation(line: 2997, column: 44, scope: !5595)
!5689 = !DILocation(line: 2997, column: 2, scope: !5595)
!5690 = distinct !{!5690, !5599, !5691}
!5691 = !DILocation(line: 3029, column: 2, scope: !5592)
!5692 = !DILocation(line: 3031, column: 1, scope: !5571)
!5693 = distinct !DISubprogram(name: "CustomData_file_write_info", scope: !3, file: !3, line: 3033, type: !5694, scopeLine: 3034, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5694 = !DISubroutineType(types: !5695)
!5695 = !{null, !158, !5696, !191}
!5696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!5697 = !DILocalVariable(name: "type", arg: 1, scope: !5693, file: !3, line: 3033, type: !158)
!5698 = !DILocation(line: 3033, column: 37, scope: !5693)
!5699 = !DILocalVariable(name: "structname", arg: 2, scope: !5693, file: !3, line: 3033, type: !5696)
!5700 = !DILocation(line: 3033, column: 56, scope: !5693)
!5701 = !DILocalVariable(name: "structnum", arg: 3, scope: !5693, file: !3, line: 3033, type: !191)
!5702 = !DILocation(line: 3033, column: 73, scope: !5693)
!5703 = !DILocalVariable(name: "typeInfo", scope: !5693, file: !3, line: 3035, type: !788)
!5704 = !DILocation(line: 3035, column: 23, scope: !5693)
!5705 = !DILocation(line: 3035, column: 52, scope: !5693)
!5706 = !DILocation(line: 3035, column: 34, scope: !5693)
!5707 = !DILocation(line: 3037, column: 16, scope: !5693)
!5708 = !DILocation(line: 3037, column: 26, scope: !5693)
!5709 = !DILocation(line: 3037, column: 3, scope: !5693)
!5710 = !DILocation(line: 3037, column: 14, scope: !5693)
!5711 = !DILocation(line: 3038, column: 15, scope: !5693)
!5712 = !DILocation(line: 3038, column: 25, scope: !5693)
!5713 = !DILocation(line: 3038, column: 3, scope: !5693)
!5714 = !DILocation(line: 3038, column: 13, scope: !5693)
!5715 = !DILocation(line: 3039, column: 1, scope: !5693)
!5716 = distinct !DISubprogram(name: "CustomData_sizeof", scope: !3, file: !3, line: 3041, type: !5717, scopeLine: 3042, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5717 = !DISubroutineType(types: !5718)
!5718 = !{!158, !158}
!5719 = !DILocalVariable(name: "type", arg: 1, scope: !5716, file: !3, line: 3041, type: !158)
!5720 = !DILocation(line: 3041, column: 27, scope: !5716)
!5721 = !DILocalVariable(name: "typeInfo", scope: !5716, file: !3, line: 3043, type: !788)
!5722 = !DILocation(line: 3043, column: 23, scope: !5716)
!5723 = !DILocation(line: 3043, column: 52, scope: !5716)
!5724 = !DILocation(line: 3043, column: 34, scope: !5716)
!5725 = !DILocation(line: 3045, column: 9, scope: !5716)
!5726 = !DILocation(line: 3045, column: 19, scope: !5716)
!5727 = !DILocation(line: 3045, column: 2, scope: !5716)
!5728 = distinct !DISubprogram(name: "CustomData_layertype_name", scope: !3, file: !3, line: 3048, type: !469, scopeLine: 3049, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5729 = !DILocalVariable(name: "type", arg: 1, scope: !5728, file: !3, line: 3048, type: !158)
!5730 = !DILocation(line: 3048, column: 43, scope: !5728)
!5731 = !DILocation(line: 3050, column: 27, scope: !5728)
!5732 = !DILocation(line: 3050, column: 9, scope: !5728)
!5733 = !DILocation(line: 3050, column: 2, scope: !5728)
!5734 = distinct !DISubprogram(name: "CustomData_layertype_is_singleton", scope: !3, file: !3, line: 3057, type: !5735, scopeLine: 3058, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5735 = !DISubroutineType(types: !5736)
!5736 = !{!361, !158}
!5737 = !DILocalVariable(name: "type", arg: 1, scope: !5734, file: !3, line: 3057, type: !158)
!5738 = !DILocation(line: 3057, column: 44, scope: !5734)
!5739 = !DILocalVariable(name: "typeInfo", scope: !5734, file: !3, line: 3059, type: !788)
!5740 = !DILocation(line: 3059, column: 23, scope: !5734)
!5741 = !DILocation(line: 3059, column: 52, scope: !5734)
!5742 = !DILocation(line: 3059, column: 34, scope: !5734)
!5743 = !DILocation(line: 3060, column: 9, scope: !5734)
!5744 = !DILocation(line: 3060, column: 19, scope: !5734)
!5745 = !DILocation(line: 3060, column: 31, scope: !5734)
!5746 = !DILocation(line: 3060, column: 2, scope: !5734)
!5747 = distinct !DISubprogram(name: "CustomData_set_layer_unique_name", scope: !3, file: !3, line: 3118, type: !1164, scopeLine: 3119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5748 = !DILocalVariable(name: "data", arg: 1, scope: !5747, file: !3, line: 3118, type: !488)
!5749 = !DILocation(line: 3118, column: 51, scope: !5747)
!5750 = !DILocalVariable(name: "index", arg: 2, scope: !5747, file: !3, line: 3118, type: !158)
!5751 = !DILocation(line: 3118, column: 61, scope: !5747)
!5752 = !DILocalVariable(name: "nlayer", scope: !5747, file: !3, line: 3120, type: !493)
!5753 = !DILocation(line: 3120, column: 19, scope: !5747)
!5754 = !DILocation(line: 3120, column: 29, scope: !5747)
!5755 = !DILocation(line: 3120, column: 35, scope: !5747)
!5756 = !DILocation(line: 3120, column: 42, scope: !5747)
!5757 = !DILocalVariable(name: "typeInfo", scope: !5747, file: !3, line: 3121, type: !788)
!5758 = !DILocation(line: 3121, column: 23, scope: !5747)
!5759 = !DILocation(line: 3121, column: 52, scope: !5747)
!5760 = !DILocation(line: 3121, column: 60, scope: !5747)
!5761 = !DILocation(line: 3121, column: 34, scope: !5747)
!5762 = !DILocalVariable(name: "data_arg", scope: !5747, file: !3, line: 3123, type: !5763)
!5763 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !5747, file: !3, line: 3123, size: 128, elements: !5764)
!5764 = !{!5765, !5766, !5767}
!5765 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !5763, file: !3, line: 3123, baseType: !488, size: 64)
!5766 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !5763, file: !3, line: 3123, baseType: !158, size: 32, offset: 64)
!5767 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5763, file: !3, line: 3123, baseType: !158, size: 32, offset: 96)
!5768 = !DILocation(line: 3123, column: 51, scope: !5747)
!5769 = !DILocation(line: 3124, column: 18, scope: !5747)
!5770 = !DILocation(line: 3124, column: 11, scope: !5747)
!5771 = !DILocation(line: 3124, column: 16, scope: !5747)
!5772 = !DILocation(line: 3125, column: 18, scope: !5747)
!5773 = !DILocation(line: 3125, column: 26, scope: !5747)
!5774 = !DILocation(line: 3125, column: 11, scope: !5747)
!5775 = !DILocation(line: 3125, column: 16, scope: !5747)
!5776 = !DILocation(line: 3126, column: 19, scope: !5747)
!5777 = !DILocation(line: 3126, column: 11, scope: !5747)
!5778 = !DILocation(line: 3126, column: 17, scope: !5747)
!5779 = !DILocation(line: 3128, column: 7, scope: !5780)
!5780 = distinct !DILexicalBlock(scope: !5747, file: !3, line: 3128, column: 6)
!5781 = !DILocation(line: 3128, column: 17, scope: !5780)
!5782 = !DILocation(line: 3128, column: 6, scope: !5747)
!5783 = !DILocation(line: 3129, column: 3, scope: !5780)
!5784 = !DILocation(line: 3131, column: 45, scope: !5747)
!5785 = !DILocation(line: 3131, column: 56, scope: !5747)
!5786 = !DILocation(line: 3131, column: 91, scope: !5747)
!5787 = !DILocation(line: 3131, column: 99, scope: !5747)
!5788 = !DILocation(line: 3131, column: 2, scope: !5747)
!5789 = !DILocation(line: 3133, column: 1, scope: !5747)
!5790 = distinct !DISubprogram(name: "customdata_unique_check", scope: !3, file: !3, line: 3112, type: !5791, scopeLine: 3113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5791 = !DISubroutineType(types: !5792)
!5792 = !{!361, !146, !316}
!5793 = !DILocalVariable(name: "arg", arg: 1, scope: !5790, file: !3, line: 3112, type: !146)
!5794 = !DILocation(line: 3112, column: 43, scope: !5790)
!5795 = !DILocalVariable(name: "name", arg: 2, scope: !5790, file: !3, line: 3112, type: !316)
!5796 = !DILocation(line: 3112, column: 60, scope: !5790)
!5797 = !DILocalVariable(name: "data_arg", scope: !5790, file: !3, line: 3114, type: !5798)
!5798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5799, size: 64)
!5799 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !5790, file: !3, line: 3114, size: 128, elements: !5800)
!5800 = !{!5801, !5802, !5803}
!5801 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !5799, file: !3, line: 3114, baseType: !488, size: 64)
!5802 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !5799, file: !3, line: 3114, baseType: !158, size: 32, offset: 64)
!5803 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5799, file: !3, line: 3114, baseType: !158, size: 32, offset: 96)
!5804 = !DILocation(line: 3114, column: 52, scope: !5790)
!5805 = !DILocation(line: 3114, column: 63, scope: !5790)
!5806 = !DILocation(line: 3115, column: 28, scope: !5790)
!5807 = !DILocation(line: 3115, column: 38, scope: !5790)
!5808 = !DILocation(line: 3115, column: 44, scope: !5790)
!5809 = !DILocation(line: 3115, column: 50, scope: !5790)
!5810 = !DILocation(line: 3115, column: 60, scope: !5790)
!5811 = !DILocation(line: 3115, column: 66, scope: !5790)
!5812 = !DILocation(line: 3115, column: 76, scope: !5790)
!5813 = !DILocation(line: 3115, column: 9, scope: !5790)
!5814 = !DILocation(line: 3115, column: 2, scope: !5790)
!5815 = distinct !DISubprogram(name: "CustomData_validate_layer_name", scope: !3, file: !3, line: 3135, type: !5816, scopeLine: 3136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5816 = !DISubroutineType(types: !5817)
!5817 = !{null, !1263, !158, !316, !147}
!5818 = !DILocalVariable(name: "data", arg: 1, scope: !5815, file: !3, line: 3135, type: !1263)
!5819 = !DILocation(line: 3135, column: 55, scope: !5815)
!5820 = !DILocalVariable(name: "type", arg: 2, scope: !5815, file: !3, line: 3135, type: !158)
!5821 = !DILocation(line: 3135, column: 65, scope: !5815)
!5822 = !DILocalVariable(name: "name", arg: 3, scope: !5815, file: !3, line: 3135, type: !316)
!5823 = !DILocation(line: 3135, column: 83, scope: !5815)
!5824 = !DILocalVariable(name: "outname", arg: 4, scope: !5815, file: !3, line: 3135, type: !147)
!5825 = !DILocation(line: 3135, column: 95, scope: !5815)
!5826 = !DILocalVariable(name: "index", scope: !5815, file: !3, line: 3137, type: !158)
!5827 = !DILocation(line: 3137, column: 6, scope: !5815)
!5828 = !DILocation(line: 3140, column: 6, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5815, file: !3, line: 3140, column: 6)
!5830 = !DILocation(line: 3140, column: 6, scope: !5815)
!5831 = !DILocation(line: 3141, column: 44, scope: !5829)
!5832 = !DILocation(line: 3141, column: 50, scope: !5829)
!5833 = !DILocation(line: 3141, column: 56, scope: !5829)
!5834 = !DILocation(line: 3141, column: 11, scope: !5829)
!5835 = !DILocation(line: 3141, column: 9, scope: !5829)
!5836 = !DILocation(line: 3141, column: 3, scope: !5829)
!5837 = !DILocation(line: 3143, column: 6, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5815, file: !3, line: 3143, column: 6)
!5839 = !DILocation(line: 3143, column: 12, scope: !5838)
!5840 = !DILocation(line: 3143, column: 6, scope: !5815)
!5841 = !DILocation(line: 3147, column: 45, scope: !5842)
!5842 = distinct !DILexicalBlock(scope: !5838, file: !3, line: 3143, column: 19)
!5843 = !DILocation(line: 3147, column: 51, scope: !5842)
!5844 = !DILocation(line: 3147, column: 11, scope: !5842)
!5845 = !DILocation(line: 3147, column: 9, scope: !5842)
!5846 = !DILocation(line: 3148, column: 15, scope: !5842)
!5847 = !DILocation(line: 3148, column: 24, scope: !5842)
!5848 = !DILocation(line: 3148, column: 30, scope: !5842)
!5849 = !DILocation(line: 3148, column: 37, scope: !5842)
!5850 = !DILocation(line: 3148, column: 44, scope: !5842)
!5851 = !DILocation(line: 3148, column: 3, scope: !5842)
!5852 = !DILocation(line: 3149, column: 2, scope: !5842)
!5853 = !DILocation(line: 3151, column: 15, scope: !5854)
!5854 = distinct !DILexicalBlock(scope: !5838, file: !3, line: 3150, column: 7)
!5855 = !DILocation(line: 3151, column: 24, scope: !5854)
!5856 = !DILocation(line: 3151, column: 3, scope: !5854)
!5857 = !DILocation(line: 3153, column: 1, scope: !5815)
!5858 = distinct !DISubprogram(name: "CustomData_verify_versions", scope: !3, file: !3, line: 3155, type: !2515, scopeLine: 3156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5859 = !DILocalVariable(name: "data", arg: 1, scope: !5858, file: !3, line: 3155, type: !594)
!5860 = !DILocation(line: 3155, column: 52, scope: !5858)
!5861 = !DILocalVariable(name: "index", arg: 2, scope: !5858, file: !3, line: 3155, type: !158)
!5862 = !DILocation(line: 3155, column: 62, scope: !5858)
!5863 = !DILocalVariable(name: "typeInfo", scope: !5858, file: !3, line: 3157, type: !788)
!5864 = !DILocation(line: 3157, column: 23, scope: !5858)
!5865 = !DILocalVariable(name: "layer", scope: !5858, file: !3, line: 3158, type: !493)
!5866 = !DILocation(line: 3158, column: 19, scope: !5858)
!5867 = !DILocation(line: 3158, column: 28, scope: !5858)
!5868 = !DILocation(line: 3158, column: 34, scope: !5858)
!5869 = !DILocation(line: 3158, column: 41, scope: !5858)
!5870 = !DILocalVariable(name: "keeplayer", scope: !5858, file: !3, line: 3159, type: !361)
!5871 = !DILocation(line: 3159, column: 7, scope: !5858)
!5872 = !DILocalVariable(name: "i", scope: !5858, file: !3, line: 3160, type: !158)
!5873 = !DILocation(line: 3160, column: 6, scope: !5858)
!5874 = !DILocation(line: 3162, column: 6, scope: !5875)
!5875 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 3162, column: 6)
!5876 = !DILocation(line: 3162, column: 13, scope: !5875)
!5877 = !DILocation(line: 3162, column: 18, scope: !5875)
!5878 = !DILocation(line: 3162, column: 6, scope: !5858)
!5879 = !DILocation(line: 3163, column: 13, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 3162, column: 34)
!5881 = !DILocation(line: 3164, column: 2, scope: !5880)
!5882 = !DILocation(line: 3166, column: 32, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 3165, column: 7)
!5884 = !DILocation(line: 3166, column: 39, scope: !5883)
!5885 = !DILocation(line: 3166, column: 14, scope: !5883)
!5886 = !DILocation(line: 3166, column: 12, scope: !5883)
!5887 = !DILocation(line: 3168, column: 8, scope: !5888)
!5888 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 3168, column: 7)
!5889 = !DILocation(line: 3168, column: 18, scope: !5888)
!5890 = !DILocation(line: 3168, column: 30, scope: !5888)
!5891 = !DILocation(line: 3168, column: 34, scope: !5888)
!5892 = !DILocation(line: 3168, column: 40, scope: !5888)
!5893 = !DILocation(line: 3168, column: 45, scope: !5888)
!5894 = !DILocation(line: 3169, column: 7, scope: !5888)
!5895 = !DILocation(line: 3169, column: 13, scope: !5888)
!5896 = !DILocation(line: 3169, column: 20, scope: !5888)
!5897 = !DILocation(line: 3169, column: 26, scope: !5888)
!5898 = !DILocation(line: 3169, column: 31, scope: !5888)
!5899 = !DILocation(line: 3169, column: 39, scope: !5888)
!5900 = !DILocation(line: 3169, column: 46, scope: !5888)
!5901 = !DILocation(line: 3169, column: 36, scope: !5888)
!5902 = !DILocation(line: 3168, column: 7, scope: !5883)
!5903 = !DILocation(line: 3171, column: 14, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 3170, column: 3)
!5905 = !DILocation(line: 3172, column: 3, scope: !5904)
!5906 = !DILocation(line: 3175, column: 7, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 3175, column: 6)
!5908 = !DILocation(line: 3175, column: 6, scope: !5858)
!5909 = !DILocation(line: 3176, column: 12, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5911, file: !3, line: 3176, column: 3)
!5911 = distinct !DILexicalBlock(scope: !5907, file: !3, line: 3175, column: 18)
!5912 = !DILocation(line: 3176, column: 18, scope: !5910)
!5913 = !DILocation(line: 3176, column: 10, scope: !5910)
!5914 = !DILocation(line: 3176, column: 8, scope: !5910)
!5915 = !DILocation(line: 3176, column: 23, scope: !5916)
!5916 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 3176, column: 3)
!5917 = !DILocation(line: 3176, column: 27, scope: !5916)
!5918 = !DILocation(line: 3176, column: 33, scope: !5916)
!5919 = !DILocation(line: 3176, column: 25, scope: !5916)
!5920 = !DILocation(line: 3176, column: 3, scope: !5910)
!5921 = !DILocation(line: 3177, column: 4, scope: !5916)
!5922 = !DILocation(line: 3177, column: 10, scope: !5916)
!5923 = !DILocation(line: 3177, column: 17, scope: !5916)
!5924 = !DILocation(line: 3177, column: 19, scope: !5916)
!5925 = !DILocation(line: 3177, column: 26, scope: !5916)
!5926 = !DILocation(line: 3177, column: 32, scope: !5916)
!5927 = !DILocation(line: 3177, column: 39, scope: !5916)
!5928 = !DILocation(line: 3176, column: 43, scope: !5916)
!5929 = !DILocation(line: 3176, column: 3, scope: !5916)
!5930 = distinct !{!5930, !5920, !5931}
!5931 = !DILocation(line: 3177, column: 40, scope: !5910)
!5932 = !DILocation(line: 3178, column: 3, scope: !5911)
!5933 = !DILocation(line: 3178, column: 9, scope: !5911)
!5934 = !DILocation(line: 3178, column: 17, scope: !5911)
!5935 = !DILocation(line: 3179, column: 2, scope: !5911)
!5936 = !DILocation(line: 3181, column: 9, scope: !5858)
!5937 = !DILocation(line: 3181, column: 2, scope: !5858)
!5938 = distinct !DISubprogram(name: "CustomData_external_reload", scope: !3, file: !3, line: 3192, type: !5939, scopeLine: 3193, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!5939 = !DISubroutineType(types: !5940)
!5940 = !{null, !488, !5941, !140, !158}
!5941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5942, size: 64)
!5942 = !DIDerivedType(tag: DW_TAG_typedef, name: "ID", file: !5943, line: 130, baseType: !5944)
!5943 = !DIFile(filename: "blender/source/blender/makesdna/DNA_ID.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!5944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ID", file: !5943, line: 117, size: 960, elements: !5945)
!5945 = !{!5946, !5947, !5948, !5950, !5965, !5969, !5970, !5971, !5972, !5973}
!5946 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !5944, file: !5943, line: 118, baseType: !146, size: 64)
!5947 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !5944, file: !5943, line: 118, baseType: !146, size: 64, offset: 64)
!5948 = !DIDerivedType(tag: DW_TAG_member, name: "newid", scope: !5944, file: !5943, line: 119, baseType: !5949, size: 64, offset: 128)
!5949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5944, size: 64)
!5950 = !DIDerivedType(tag: DW_TAG_member, name: "lib", scope: !5944, file: !5943, line: 120, baseType: !5951, size: 64, offset: 192)
!5951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5952, size: 64)
!5952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Library", file: !5943, line: 136, size: 17600, elements: !5953)
!5953 = !{!5954, !5955, !5956, !5959, !5960, !5961, !5962}
!5954 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !5952, file: !5943, line: 137, baseType: !5942, size: 960)
!5955 = !DIDerivedType(tag: DW_TAG_member, name: "idblock", scope: !5952, file: !5943, line: 138, baseType: !5941, size: 64, offset: 960)
!5956 = !DIDerivedType(tag: DW_TAG_member, name: "filedata", scope: !5952, file: !5943, line: 139, baseType: !5957, size: 64, offset: 1024)
!5957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5958, size: 64)
!5958 = !DICompositeType(tag: DW_TAG_structure_type, name: "FileData", file: !5943, line: 43, flags: DIFlagFwdDecl)
!5959 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !5952, file: !5943, line: 140, baseType: !524, size: 8192, offset: 1088)
!5960 = !DIDerivedType(tag: DW_TAG_member, name: "filepath", scope: !5952, file: !5943, line: 141, baseType: !524, size: 8192, offset: 9280)
!5961 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !5952, file: !5943, line: 148, baseType: !5951, size: 64, offset: 17472)
!5962 = !DIDerivedType(tag: DW_TAG_member, name: "packedfile", scope: !5952, file: !5943, line: 150, baseType: !5963, size: 64, offset: 17536)
!5963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5964, size: 64)
!5964 = !DICompositeType(tag: DW_TAG_structure_type, name: "PackedFile", file: !5943, line: 45, flags: DIFlagFwdDecl)
!5965 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !5944, file: !5943, line: 121, baseType: !5966, size: 528, offset: 256)
!5966 = !DICompositeType(tag: DW_TAG_array_type, baseType: !148, size: 528, elements: !5967)
!5967 = !{!5968}
!5968 = !DISubrange(count: 66)
!5969 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !5944, file: !5943, line: 126, baseType: !179, size: 16, offset: 784)
!5970 = !DIDerivedType(tag: DW_TAG_member, name: "us", scope: !5944, file: !5943, line: 127, baseType: !158, size: 32, offset: 800)
!5971 = !DIDerivedType(tag: DW_TAG_member, name: "icon_id", scope: !5944, file: !5943, line: 128, baseType: !158, size: 32, offset: 832)
!5972 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !5944, file: !5943, line: 128, baseType: !158, size: 32, offset: 864)
!5973 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !5944, file: !5943, line: 129, baseType: !5974, size: 64, offset: 896)
!5974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5975, size: 64)
!5975 = !DIDerivedType(tag: DW_TAG_typedef, name: "IDProperty", file: !5943, line: 75, baseType: !5976)
!5976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "IDProperty", file: !5943, line: 62, size: 1024, elements: !5977)
!5977 = !{!5978, !5980, !5981, !5982, !5983, !5984, !5985, !5986, !5994, !5995}
!5978 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !5976, file: !5943, line: 63, baseType: !5979, size: 64)
!5979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5976, size: 64)
!5980 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !5976, file: !5943, line: 63, baseType: !5979, size: 64, offset: 64)
!5981 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !5976, file: !5943, line: 64, baseType: !148, size: 8, offset: 128)
!5982 = !DIDerivedType(tag: DW_TAG_member, name: "subtype", scope: !5976, file: !5943, line: 64, baseType: !148, size: 8, offset: 136)
!5983 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !5976, file: !5943, line: 65, baseType: !179, size: 16, offset: 144)
!5984 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !5976, file: !5943, line: 66, baseType: !506, size: 512, offset: 160)
!5985 = !DIDerivedType(tag: DW_TAG_member, name: "saved", scope: !5976, file: !5943, line: 67, baseType: !158, size: 32, offset: 672)
!5986 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !5976, file: !5943, line: 69, baseType: !5987, size: 256, offset: 704)
!5987 = !DIDerivedType(tag: DW_TAG_typedef, name: "IDPropertyData", file: !5943, line: 60, baseType: !5988)
!5988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "IDPropertyData", file: !5943, line: 48, size: 256, elements: !5989)
!5989 = !{!5990, !5991, !5992, !5993}
!5990 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !5988, file: !5943, line: 49, baseType: !146, size: 64)
!5991 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !5988, file: !5943, line: 58, baseType: !4050, size: 128, offset: 64)
!5992 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5988, file: !5943, line: 59, baseType: !158, size: 32, offset: 192)
!5993 = !DIDerivedType(tag: DW_TAG_member, name: "val2", scope: !5988, file: !5943, line: 59, baseType: !158, size: 32, offset: 224)
!5994 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !5976, file: !5943, line: 70, baseType: !158, size: 32, offset: 960)
!5995 = !DIDerivedType(tag: DW_TAG_member, name: "totallen", scope: !5976, file: !5943, line: 74, baseType: !158, size: 32, offset: 992)
!5996 = !DILocalVariable(name: "data", arg: 1, scope: !5938, file: !3, line: 3192, type: !488)
!5997 = !DILocation(line: 3192, column: 45, scope: !5938)
!5998 = !DILocalVariable(name: "UNUSED_id", arg: 2, scope: !5938, file: !3, line: 3192, type: !5941)
!5999 = !DILocation(line: 3192, column: 55, scope: !5938)
!6000 = !DILocalVariable(name: "mask", arg: 3, scope: !5938, file: !3, line: 3192, type: !140)
!6001 = !DILocation(line: 3192, column: 82, scope: !5938)
!6002 = !DILocalVariable(name: "totelem", arg: 4, scope: !5938, file: !3, line: 3192, type: !158)
!6003 = !DILocation(line: 3192, column: 92, scope: !5938)
!6004 = !DILocalVariable(name: "layer", scope: !5938, file: !3, line: 3194, type: !493)
!6005 = !DILocation(line: 3194, column: 19, scope: !5938)
!6006 = !DILocalVariable(name: "typeInfo", scope: !5938, file: !3, line: 3195, type: !788)
!6007 = !DILocation(line: 3195, column: 23, scope: !5938)
!6008 = !DILocalVariable(name: "i", scope: !5938, file: !3, line: 3196, type: !158)
!6009 = !DILocation(line: 3196, column: 6, scope: !5938)
!6010 = !DILocation(line: 3198, column: 9, scope: !6011)
!6011 = distinct !DILexicalBlock(scope: !5938, file: !3, line: 3198, column: 2)
!6012 = !DILocation(line: 3198, column: 7, scope: !6011)
!6013 = !DILocation(line: 3198, column: 14, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !6011, file: !3, line: 3198, column: 2)
!6015 = !DILocation(line: 3198, column: 18, scope: !6014)
!6016 = !DILocation(line: 3198, column: 24, scope: !6014)
!6017 = !DILocation(line: 3198, column: 16, scope: !6014)
!6018 = !DILocation(line: 3198, column: 2, scope: !6011)
!6019 = !DILocation(line: 3199, column: 12, scope: !6020)
!6020 = distinct !DILexicalBlock(scope: !6014, file: !3, line: 3198, column: 39)
!6021 = !DILocation(line: 3199, column: 18, scope: !6020)
!6022 = !DILocation(line: 3199, column: 25, scope: !6020)
!6023 = !DILocation(line: 3199, column: 9, scope: !6020)
!6024 = !DILocation(line: 3200, column: 32, scope: !6020)
!6025 = !DILocation(line: 3200, column: 39, scope: !6020)
!6026 = !DILocation(line: 3200, column: 14, scope: !6020)
!6027 = !DILocation(line: 3200, column: 12, scope: !6020)
!6028 = !DILocation(line: 3202, column: 9, scope: !6029)
!6029 = distinct !DILexicalBlock(scope: !6020, file: !3, line: 3202, column: 7)
!6030 = !DILocation(line: 3202, column: 16, scope: !6029)
!6031 = !DILocation(line: 3202, column: 14, scope: !6029)
!6032 = !DILocation(line: 3202, column: 7, scope: !6020)
!6033 = !DILocation(line: 3204, column: 3, scope: !6034)
!6034 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 3202, column: 47)
!6035 = !DILocation(line: 3205, column: 13, scope: !6036)
!6036 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 3205, column: 12)
!6037 = !DILocation(line: 3205, column: 20, scope: !6036)
!6038 = !DILocation(line: 3205, column: 25, scope: !6036)
!6039 = !DILocation(line: 3205, column: 45, scope: !6036)
!6040 = !DILocation(line: 3205, column: 49, scope: !6036)
!6041 = !DILocation(line: 3205, column: 56, scope: !6036)
!6042 = !DILocation(line: 3205, column: 61, scope: !6036)
!6043 = !DILocation(line: 3205, column: 12, scope: !6029)
!6044 = !DILocation(line: 3206, column: 8, scope: !6045)
!6045 = distinct !DILexicalBlock(scope: !6046, file: !3, line: 3206, column: 8)
!6046 = distinct !DILexicalBlock(scope: !6036, file: !3, line: 3205, column: 83)
!6047 = !DILocation(line: 3206, column: 18, scope: !6045)
!6048 = !DILocation(line: 3206, column: 8, scope: !6046)
!6049 = !DILocation(line: 3207, column: 5, scope: !6045)
!6050 = !DILocation(line: 3207, column: 15, scope: !6045)
!6051 = !DILocation(line: 3207, column: 20, scope: !6045)
!6052 = !DILocation(line: 3207, column: 27, scope: !6045)
!6053 = !DILocation(line: 3207, column: 33, scope: !6045)
!6054 = !DILocation(line: 3207, column: 42, scope: !6045)
!6055 = !DILocation(line: 3207, column: 52, scope: !6045)
!6056 = !DILocation(line: 3208, column: 4, scope: !6046)
!6057 = !DILocation(line: 3208, column: 11, scope: !6046)
!6058 = !DILocation(line: 3208, column: 16, scope: !6046)
!6059 = !DILocation(line: 3209, column: 3, scope: !6046)
!6060 = !DILocation(line: 3210, column: 2, scope: !6020)
!6061 = !DILocation(line: 3198, column: 35, scope: !6014)
!6062 = !DILocation(line: 3198, column: 2, scope: !6014)
!6063 = distinct !{!6063, !6018, !6064}
!6064 = !DILocation(line: 3210, column: 2, scope: !6011)
!6065 = !DILocation(line: 3211, column: 1, scope: !5938)
!6066 = distinct !DISubprogram(name: "CustomData_external_read", scope: !3, file: !3, line: 3213, type: !5939, scopeLine: 3214, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6067 = !DILocalVariable(name: "data", arg: 1, scope: !6066, file: !3, line: 3213, type: !488)
!6068 = !DILocation(line: 3213, column: 43, scope: !6066)
!6069 = !DILocalVariable(name: "id", arg: 2, scope: !6066, file: !3, line: 3213, type: !5941)
!6070 = !DILocation(line: 3213, column: 53, scope: !6066)
!6071 = !DILocalVariable(name: "mask", arg: 3, scope: !6066, file: !3, line: 3213, type: !140)
!6072 = !DILocation(line: 3213, column: 72, scope: !6066)
!6073 = !DILocalVariable(name: "totelem", arg: 4, scope: !6066, file: !3, line: 3213, type: !158)
!6074 = !DILocation(line: 3213, column: 82, scope: !6066)
!6075 = !DILocalVariable(name: "external", scope: !6066, file: !3, line: 3215, type: !519)
!6076 = !DILocation(line: 3215, column: 22, scope: !6066)
!6077 = !DILocation(line: 3215, column: 33, scope: !6066)
!6078 = !DILocation(line: 3215, column: 39, scope: !6066)
!6079 = !DILocalVariable(name: "layer", scope: !6066, file: !3, line: 3216, type: !493)
!6080 = !DILocation(line: 3216, column: 19, scope: !6066)
!6081 = !DILocalVariable(name: "cdf", scope: !6066, file: !3, line: 3217, type: !386)
!6082 = !DILocation(line: 3217, column: 13, scope: !6066)
!6083 = !DILocalVariable(name: "blay", scope: !6066, file: !3, line: 3218, type: !6084)
!6084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6085, size: 64)
!6085 = !DIDerivedType(tag: DW_TAG_typedef, name: "CDataFileLayer", file: !388, line: 34, baseType: !6086)
!6086 = !DICompositeType(tag: DW_TAG_structure_type, name: "CDataFileLayer", file: !388, line: 34, flags: DIFlagFwdDecl)
!6087 = !DILocation(line: 3218, column: 18, scope: !6066)
!6088 = !DILocalVariable(name: "filename", scope: !6066, file: !3, line: 3219, type: !524)
!6089 = !DILocation(line: 3219, column: 7, scope: !6066)
!6090 = !DILocalVariable(name: "typeInfo", scope: !6066, file: !3, line: 3220, type: !788)
!6091 = !DILocation(line: 3220, column: 23, scope: !6066)
!6092 = !DILocalVariable(name: "i", scope: !6066, file: !3, line: 3221, type: !158)
!6093 = !DILocation(line: 3221, column: 6, scope: !6066)
!6094 = !DILocalVariable(name: "update", scope: !6066, file: !3, line: 3221, type: !158)
!6095 = !DILocation(line: 3221, column: 9, scope: !6066)
!6096 = !DILocation(line: 3223, column: 7, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6066, file: !3, line: 3223, column: 6)
!6098 = !DILocation(line: 3223, column: 6, scope: !6066)
!6099 = !DILocation(line: 3224, column: 3, scope: !6097)
!6100 = !DILocation(line: 3226, column: 9, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6066, file: !3, line: 3226, column: 2)
!6102 = !DILocation(line: 3226, column: 7, scope: !6101)
!6103 = !DILocation(line: 3226, column: 14, scope: !6104)
!6104 = distinct !DILexicalBlock(scope: !6101, file: !3, line: 3226, column: 2)
!6105 = !DILocation(line: 3226, column: 18, scope: !6104)
!6106 = !DILocation(line: 3226, column: 24, scope: !6104)
!6107 = !DILocation(line: 3226, column: 16, scope: !6104)
!6108 = !DILocation(line: 3226, column: 2, scope: !6101)
!6109 = !DILocation(line: 3227, column: 12, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6104, file: !3, line: 3226, column: 39)
!6111 = !DILocation(line: 3227, column: 18, scope: !6110)
!6112 = !DILocation(line: 3227, column: 25, scope: !6110)
!6113 = !DILocation(line: 3227, column: 9, scope: !6110)
!6114 = !DILocation(line: 3228, column: 32, scope: !6110)
!6115 = !DILocation(line: 3228, column: 39, scope: !6110)
!6116 = !DILocation(line: 3228, column: 14, scope: !6110)
!6117 = !DILocation(line: 3228, column: 12, scope: !6110)
!6118 = !DILocation(line: 3230, column: 9, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6110, file: !3, line: 3230, column: 7)
!6120 = !DILocation(line: 3230, column: 16, scope: !6119)
!6121 = !DILocation(line: 3230, column: 14, scope: !6119)
!6122 = !DILocation(line: 3230, column: 7, scope: !6110)
!6123 = !DILocation(line: 3232, column: 3, scope: !6124)
!6124 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 3230, column: 47)
!6125 = !DILocation(line: 3233, column: 12, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 3233, column: 12)
!6127 = !DILocation(line: 3233, column: 19, scope: !6126)
!6128 = !DILocation(line: 3233, column: 24, scope: !6126)
!6129 = !DILocation(line: 3233, column: 12, scope: !6119)
!6130 = !DILocation(line: 3235, column: 3, scope: !6131)
!6131 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 3233, column: 45)
!6132 = !DILocation(line: 3236, column: 13, scope: !6133)
!6133 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 3236, column: 12)
!6134 = !DILocation(line: 3236, column: 20, scope: !6133)
!6135 = !DILocation(line: 3236, column: 25, scope: !6133)
!6136 = !DILocation(line: 3236, column: 45, scope: !6133)
!6137 = !DILocation(line: 3236, column: 48, scope: !6133)
!6138 = !DILocation(line: 3236, column: 58, scope: !6133)
!6139 = !DILocation(line: 3236, column: 12, scope: !6126)
!6140 = !DILocation(line: 3237, column: 11, scope: !6141)
!6141 = distinct !DILexicalBlock(scope: !6133, file: !3, line: 3236, column: 64)
!6142 = !DILocation(line: 3238, column: 3, scope: !6141)
!6143 = !DILocation(line: 3239, column: 2, scope: !6110)
!6144 = !DILocation(line: 3226, column: 35, scope: !6104)
!6145 = !DILocation(line: 3226, column: 2, scope: !6104)
!6146 = distinct !{!6146, !6108, !6147}
!6147 = !DILocation(line: 3239, column: 2, scope: !6101)
!6148 = !DILocation(line: 3241, column: 7, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6066, file: !3, line: 3241, column: 6)
!6150 = !DILocation(line: 3241, column: 6, scope: !6066)
!6151 = !DILocation(line: 3242, column: 3, scope: !6149)
!6152 = !DILocation(line: 3244, column: 31, scope: !6066)
!6153 = !DILocation(line: 3244, column: 41, scope: !6066)
!6154 = !DILocation(line: 3244, column: 45, scope: !6066)
!6155 = !DILocation(line: 3244, column: 2, scope: !6066)
!6156 = !DILocation(line: 3246, column: 8, scope: !6066)
!6157 = !DILocation(line: 3246, column: 6, scope: !6066)
!6158 = !DILocation(line: 3247, column: 21, scope: !6159)
!6159 = distinct !DILexicalBlock(scope: !6066, file: !3, line: 3247, column: 6)
!6160 = !DILocation(line: 3247, column: 26, scope: !6159)
!6161 = !DILocation(line: 3247, column: 7, scope: !6159)
!6162 = !DILocation(line: 3247, column: 6, scope: !6066)
!6163 = !DILocation(line: 3248, column: 11, scope: !6164)
!6164 = distinct !DILexicalBlock(scope: !6159, file: !3, line: 3247, column: 37)
!6165 = !DILocation(line: 3248, column: 75, scope: !6164)
!6166 = !DILocation(line: 3248, column: 82, scope: !6164)
!6167 = !DILocation(line: 3248, column: 57, scope: !6164)
!6168 = !DILocation(line: 3248, column: 89, scope: !6164)
!6169 = !DILocation(line: 3248, column: 3, scope: !6164)
!6170 = !DILocation(line: 3249, column: 3, scope: !6164)
!6171 = !DILocation(line: 3252, column: 9, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !6066, file: !3, line: 3252, column: 2)
!6173 = !DILocation(line: 3252, column: 7, scope: !6172)
!6174 = !DILocation(line: 3252, column: 14, scope: !6175)
!6175 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3252, column: 2)
!6176 = !DILocation(line: 3252, column: 18, scope: !6175)
!6177 = !DILocation(line: 3252, column: 24, scope: !6175)
!6178 = !DILocation(line: 3252, column: 16, scope: !6175)
!6179 = !DILocation(line: 3252, column: 2, scope: !6172)
!6180 = !DILocation(line: 3253, column: 12, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6175, file: !3, line: 3252, column: 39)
!6182 = !DILocation(line: 3253, column: 18, scope: !6181)
!6183 = !DILocation(line: 3253, column: 25, scope: !6181)
!6184 = !DILocation(line: 3253, column: 9, scope: !6181)
!6185 = !DILocation(line: 3254, column: 32, scope: !6181)
!6186 = !DILocation(line: 3254, column: 39, scope: !6181)
!6187 = !DILocation(line: 3254, column: 14, scope: !6181)
!6188 = !DILocation(line: 3254, column: 12, scope: !6181)
!6189 = !DILocation(line: 3256, column: 9, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6181, file: !3, line: 3256, column: 7)
!6191 = !DILocation(line: 3256, column: 16, scope: !6190)
!6192 = !DILocation(line: 3256, column: 14, scope: !6190)
!6193 = !DILocation(line: 3256, column: 7, scope: !6181)
!6194 = !DILocation(line: 3258, column: 3, scope: !6195)
!6195 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 3256, column: 47)
!6196 = !DILocation(line: 3259, column: 12, scope: !6197)
!6197 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 3259, column: 12)
!6198 = !DILocation(line: 3259, column: 19, scope: !6197)
!6199 = !DILocation(line: 3259, column: 24, scope: !6197)
!6200 = !DILocation(line: 3259, column: 12, scope: !6190)
!6201 = !DILocation(line: 3261, column: 3, scope: !6202)
!6202 = distinct !DILexicalBlock(scope: !6197, file: !3, line: 3259, column: 45)
!6203 = !DILocation(line: 3262, column: 13, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6197, file: !3, line: 3262, column: 12)
!6205 = !DILocation(line: 3262, column: 20, scope: !6204)
!6206 = !DILocation(line: 3262, column: 25, scope: !6204)
!6207 = !DILocation(line: 3262, column: 45, scope: !6204)
!6208 = !DILocation(line: 3262, column: 48, scope: !6204)
!6209 = !DILocation(line: 3262, column: 58, scope: !6204)
!6210 = !DILocation(line: 3262, column: 12, scope: !6197)
!6211 = !DILocation(line: 3263, column: 26, scope: !6212)
!6212 = distinct !DILexicalBlock(scope: !6204, file: !3, line: 3262, column: 64)
!6213 = !DILocation(line: 3263, column: 31, scope: !6212)
!6214 = !DILocation(line: 3263, column: 38, scope: !6212)
!6215 = !DILocation(line: 3263, column: 44, scope: !6212)
!6216 = !DILocation(line: 3263, column: 51, scope: !6212)
!6217 = !DILocation(line: 3263, column: 11, scope: !6212)
!6218 = !DILocation(line: 3263, column: 9, scope: !6212)
!6219 = !DILocation(line: 3265, column: 8, scope: !6220)
!6220 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 3265, column: 8)
!6221 = !DILocation(line: 3265, column: 8, scope: !6212)
!6222 = !DILocation(line: 3266, column: 24, scope: !6223)
!6223 = distinct !DILexicalBlock(scope: !6224, file: !3, line: 3266, column: 9)
!6224 = distinct !DILexicalBlock(scope: !6220, file: !3, line: 3265, column: 14)
!6225 = !DILocation(line: 3266, column: 29, scope: !6223)
!6226 = !DILocation(line: 3266, column: 9, scope: !6223)
!6227 = !DILocation(line: 3266, column: 9, scope: !6224)
!6228 = !DILocation(line: 3267, column: 10, scope: !6229)
!6229 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 3267, column: 10)
!6230 = distinct !DILexicalBlock(scope: !6223, file: !3, line: 3266, column: 36)
!6231 = !DILocation(line: 3267, column: 20, scope: !6229)
!6232 = !DILocation(line: 3267, column: 25, scope: !6229)
!6233 = !DILocation(line: 3267, column: 30, scope: !6229)
!6234 = !DILocation(line: 3267, column: 37, scope: !6229)
!6235 = !DILocation(line: 3267, column: 43, scope: !6229)
!6236 = !DILocation(line: 3267, column: 10, scope: !6230)
!6237 = !DILocation(line: 3269, column: 6, scope: !6238)
!6238 = distinct !DILexicalBlock(scope: !6229, file: !3, line: 3267, column: 53)
!6239 = !DILocation(line: 3271, column: 7, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6229, file: !3, line: 3270, column: 11)
!6241 = !DILocation(line: 3273, column: 6, scope: !6230)
!6242 = !DILocation(line: 3273, column: 13, scope: !6230)
!6243 = !DILocation(line: 3273, column: 18, scope: !6230)
!6244 = !DILocation(line: 3274, column: 5, scope: !6230)
!6245 = !DILocation(line: 3276, column: 6, scope: !6223)
!6246 = !DILocation(line: 3277, column: 4, scope: !6224)
!6247 = !DILocation(line: 3278, column: 3, scope: !6212)
!6248 = !DILocation(line: 3279, column: 2, scope: !6181)
!6249 = !DILocation(line: 3252, column: 35, scope: !6175)
!6250 = !DILocation(line: 3252, column: 2, scope: !6175)
!6251 = distinct !{!6251, !6179, !6252}
!6252 = !DILocation(line: 3279, column: 2, scope: !6172)
!6253 = !DILocation(line: 3281, column: 17, scope: !6066)
!6254 = !DILocation(line: 3281, column: 2, scope: !6066)
!6255 = !DILocation(line: 3282, column: 11, scope: !6066)
!6256 = !DILocation(line: 3282, column: 2, scope: !6066)
!6257 = !DILocation(line: 3283, column: 1, scope: !6066)
!6258 = distinct !DISubprogram(name: "customdata_external_filename", scope: !3, file: !3, line: 3186, type: !6259, scopeLine: 3187, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6259 = !DISubroutineType(types: !6260)
!6260 = !{null, !147, !5941, !519}
!6261 = !DILocalVariable(name: "filename", arg: 1, scope: !6258, file: !3, line: 3186, type: !147)
!6262 = !DILocation(line: 3186, column: 47, scope: !6258)
!6263 = !DILocalVariable(name: "id", arg: 2, scope: !6258, file: !3, line: 3186, type: !5941)
!6264 = !DILocation(line: 3186, column: 71, scope: !6258)
!6265 = !DILocalVariable(name: "external", arg: 3, scope: !6258, file: !3, line: 3186, type: !519)
!6266 = !DILocation(line: 3186, column: 95, scope: !6258)
!6267 = !DILocation(line: 3188, column: 14, scope: !6258)
!6268 = !DILocation(line: 3188, column: 24, scope: !6258)
!6269 = !DILocation(line: 3188, column: 34, scope: !6258)
!6270 = !DILocation(line: 3188, column: 2, scope: !6258)
!6271 = !DILocation(line: 3189, column: 15, scope: !6258)
!6272 = !DILocation(line: 3189, column: 25, scope: !6258)
!6273 = !DILocation(line: 3189, column: 2, scope: !6258)
!6274 = !DILocation(line: 3190, column: 1, scope: !6258)
!6275 = distinct !DISubprogram(name: "CustomData_external_write", scope: !3, file: !3, line: 3285, type: !6276, scopeLine: 3286, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6276 = !DISubroutineType(types: !6277)
!6277 = !{null, !488, !5941, !140, !158, !158}
!6278 = !DILocalVariable(name: "data", arg: 1, scope: !6275, file: !3, line: 3285, type: !488)
!6279 = !DILocation(line: 3285, column: 44, scope: !6275)
!6280 = !DILocalVariable(name: "id", arg: 2, scope: !6275, file: !3, line: 3285, type: !5941)
!6281 = !DILocation(line: 3285, column: 54, scope: !6275)
!6282 = !DILocalVariable(name: "mask", arg: 3, scope: !6275, file: !3, line: 3285, type: !140)
!6283 = !DILocation(line: 3285, column: 73, scope: !6275)
!6284 = !DILocalVariable(name: "totelem", arg: 4, scope: !6275, file: !3, line: 3285, type: !158)
!6285 = !DILocation(line: 3285, column: 83, scope: !6275)
!6286 = !DILocalVariable(name: "free", arg: 5, scope: !6275, file: !3, line: 3285, type: !158)
!6287 = !DILocation(line: 3285, column: 96, scope: !6275)
!6288 = !DILocalVariable(name: "external", scope: !6275, file: !3, line: 3287, type: !519)
!6289 = !DILocation(line: 3287, column: 22, scope: !6275)
!6290 = !DILocation(line: 3287, column: 33, scope: !6275)
!6291 = !DILocation(line: 3287, column: 39, scope: !6275)
!6292 = !DILocalVariable(name: "layer", scope: !6275, file: !3, line: 3288, type: !493)
!6293 = !DILocation(line: 3288, column: 19, scope: !6275)
!6294 = !DILocalVariable(name: "cdf", scope: !6275, file: !3, line: 3289, type: !386)
!6295 = !DILocation(line: 3289, column: 13, scope: !6275)
!6296 = !DILocalVariable(name: "blay", scope: !6275, file: !3, line: 3290, type: !6084)
!6297 = !DILocation(line: 3290, column: 18, scope: !6275)
!6298 = !DILocalVariable(name: "typeInfo", scope: !6275, file: !3, line: 3291, type: !788)
!6299 = !DILocation(line: 3291, column: 23, scope: !6275)
!6300 = !DILocalVariable(name: "i", scope: !6275, file: !3, line: 3292, type: !158)
!6301 = !DILocation(line: 3292, column: 6, scope: !6275)
!6302 = !DILocalVariable(name: "update", scope: !6275, file: !3, line: 3292, type: !158)
!6303 = !DILocation(line: 3292, column: 9, scope: !6275)
!6304 = !DILocalVariable(name: "filename", scope: !6275, file: !3, line: 3293, type: !524)
!6305 = !DILocation(line: 3293, column: 7, scope: !6275)
!6306 = !DILocation(line: 3295, column: 7, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 3295, column: 6)
!6308 = !DILocation(line: 3295, column: 6, scope: !6275)
!6309 = !DILocation(line: 3296, column: 3, scope: !6307)
!6310 = !DILocation(line: 3299, column: 9, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 3299, column: 2)
!6312 = !DILocation(line: 3299, column: 7, scope: !6311)
!6313 = !DILocation(line: 3299, column: 14, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 3299, column: 2)
!6315 = !DILocation(line: 3299, column: 18, scope: !6314)
!6316 = !DILocation(line: 3299, column: 24, scope: !6314)
!6317 = !DILocation(line: 3299, column: 16, scope: !6314)
!6318 = !DILocation(line: 3299, column: 2, scope: !6311)
!6319 = !DILocation(line: 3300, column: 12, scope: !6320)
!6320 = distinct !DILexicalBlock(scope: !6314, file: !3, line: 3299, column: 39)
!6321 = !DILocation(line: 3300, column: 18, scope: !6320)
!6322 = !DILocation(line: 3300, column: 25, scope: !6320)
!6323 = !DILocation(line: 3300, column: 9, scope: !6320)
!6324 = !DILocation(line: 3301, column: 32, scope: !6320)
!6325 = !DILocation(line: 3301, column: 39, scope: !6320)
!6326 = !DILocation(line: 3301, column: 14, scope: !6320)
!6327 = !DILocation(line: 3301, column: 12, scope: !6320)
!6328 = !DILocation(line: 3303, column: 9, scope: !6329)
!6329 = distinct !DILexicalBlock(scope: !6320, file: !3, line: 3303, column: 7)
!6330 = !DILocation(line: 3303, column: 16, scope: !6329)
!6331 = !DILocation(line: 3303, column: 14, scope: !6329)
!6332 = !DILocation(line: 3303, column: 7, scope: !6320)
!6333 = !DILocation(line: 3305, column: 3, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6329, file: !3, line: 3303, column: 47)
!6335 = !DILocation(line: 3306, column: 13, scope: !6336)
!6336 = distinct !DILexicalBlock(scope: !6329, file: !3, line: 3306, column: 12)
!6337 = !DILocation(line: 3306, column: 20, scope: !6336)
!6338 = !DILocation(line: 3306, column: 25, scope: !6336)
!6339 = !DILocation(line: 3306, column: 45, scope: !6336)
!6340 = !DILocation(line: 3306, column: 48, scope: !6336)
!6341 = !DILocation(line: 3306, column: 58, scope: !6336)
!6342 = !DILocation(line: 3306, column: 12, scope: !6329)
!6343 = !DILocation(line: 3307, column: 11, scope: !6344)
!6344 = distinct !DILexicalBlock(scope: !6336, file: !3, line: 3306, column: 65)
!6345 = !DILocation(line: 3308, column: 3, scope: !6344)
!6346 = !DILocation(line: 3309, column: 2, scope: !6320)
!6347 = !DILocation(line: 3299, column: 35, scope: !6314)
!6348 = !DILocation(line: 3299, column: 2, scope: !6314)
!6349 = distinct !{!6349, !6318, !6350}
!6350 = !DILocation(line: 3309, column: 2, scope: !6311)
!6351 = !DILocation(line: 3311, column: 7, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 3311, column: 6)
!6353 = !DILocation(line: 3311, column: 6, scope: !6275)
!6354 = !DILocation(line: 3312, column: 3, scope: !6352)
!6355 = !DILocation(line: 3315, column: 27, scope: !6275)
!6356 = !DILocation(line: 3315, column: 33, scope: !6275)
!6357 = !DILocation(line: 3315, column: 37, scope: !6275)
!6358 = !DILocation(line: 3315, column: 43, scope: !6275)
!6359 = !DILocation(line: 3315, column: 2, scope: !6275)
!6360 = !DILocation(line: 3316, column: 31, scope: !6275)
!6361 = !DILocation(line: 3316, column: 41, scope: !6275)
!6362 = !DILocation(line: 3316, column: 45, scope: !6275)
!6363 = !DILocation(line: 3316, column: 2, scope: !6275)
!6364 = !DILocation(line: 3318, column: 8, scope: !6275)
!6365 = !DILocation(line: 3318, column: 6, scope: !6275)
!6366 = !DILocation(line: 3320, column: 9, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 3320, column: 2)
!6368 = !DILocation(line: 3320, column: 7, scope: !6367)
!6369 = !DILocation(line: 3320, column: 14, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6367, file: !3, line: 3320, column: 2)
!6371 = !DILocation(line: 3320, column: 18, scope: !6370)
!6372 = !DILocation(line: 3320, column: 24, scope: !6370)
!6373 = !DILocation(line: 3320, column: 16, scope: !6370)
!6374 = !DILocation(line: 3320, column: 2, scope: !6367)
!6375 = !DILocation(line: 3321, column: 12, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 3320, column: 39)
!6377 = !DILocation(line: 3321, column: 18, scope: !6376)
!6378 = !DILocation(line: 3321, column: 25, scope: !6376)
!6379 = !DILocation(line: 3321, column: 9, scope: !6376)
!6380 = !DILocation(line: 3322, column: 32, scope: !6376)
!6381 = !DILocation(line: 3322, column: 39, scope: !6376)
!6382 = !DILocation(line: 3322, column: 14, scope: !6376)
!6383 = !DILocation(line: 3322, column: 12, scope: !6376)
!6384 = !DILocation(line: 3324, column: 8, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !6376, file: !3, line: 3324, column: 7)
!6386 = !DILocation(line: 3324, column: 15, scope: !6385)
!6387 = !DILocation(line: 3324, column: 20, scope: !6385)
!6388 = !DILocation(line: 3324, column: 40, scope: !6385)
!6389 = !DILocation(line: 3324, column: 43, scope: !6385)
!6390 = !DILocation(line: 3324, column: 53, scope: !6385)
!6391 = !DILocation(line: 3324, column: 7, scope: !6376)
!6392 = !DILocation(line: 3325, column: 8, scope: !6393)
!6393 = distinct !DILexicalBlock(scope: !6394, file: !3, line: 3325, column: 8)
!6394 = distinct !DILexicalBlock(scope: !6385, file: !3, line: 3324, column: 63)
!6395 = !DILocation(line: 3325, column: 15, scope: !6393)
!6396 = !DILocation(line: 3325, column: 20, scope: !6393)
!6397 = !DILocation(line: 3325, column: 8, scope: !6394)
!6398 = !DILocation(line: 3326, column: 19, scope: !6399)
!6399 = distinct !DILexicalBlock(scope: !6393, file: !3, line: 3325, column: 41)
!6400 = !DILocation(line: 3326, column: 24, scope: !6399)
!6401 = !DILocation(line: 3326, column: 31, scope: !6399)
!6402 = !DILocation(line: 3326, column: 37, scope: !6399)
!6403 = !DILocation(line: 3326, column: 44, scope: !6399)
!6404 = !DILocation(line: 3327, column: 19, scope: !6399)
!6405 = !DILocation(line: 3327, column: 29, scope: !6399)
!6406 = !DILocation(line: 3327, column: 38, scope: !6399)
!6407 = !DILocation(line: 3327, column: 43, scope: !6399)
!6408 = !DILocation(line: 3327, column: 50, scope: !6399)
!6409 = !DILocation(line: 3327, column: 56, scope: !6399)
!6410 = !DILocation(line: 3326, column: 5, scope: !6399)
!6411 = !DILocation(line: 3328, column: 4, scope: !6399)
!6412 = !DILocation(line: 3330, column: 14, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6393, file: !3, line: 3329, column: 9)
!6414 = !DILocation(line: 3330, column: 5, scope: !6413)
!6415 = !DILocation(line: 3331, column: 5, scope: !6413)
!6416 = !DILocation(line: 3333, column: 3, scope: !6394)
!6417 = !DILocation(line: 3334, column: 2, scope: !6376)
!6418 = !DILocation(line: 3320, column: 35, scope: !6370)
!6419 = !DILocation(line: 3320, column: 2, scope: !6370)
!6420 = distinct !{!6420, !6374, !6421}
!6421 = !DILocation(line: 3334, column: 2, scope: !6367)
!6422 = !DILocation(line: 3336, column: 22, scope: !6423)
!6423 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 3336, column: 6)
!6424 = !DILocation(line: 3336, column: 27, scope: !6423)
!6425 = !DILocation(line: 3336, column: 7, scope: !6423)
!6426 = !DILocation(line: 3336, column: 6, scope: !6275)
!6427 = !DILocation(line: 3337, column: 11, scope: !6428)
!6428 = distinct !DILexicalBlock(scope: !6423, file: !3, line: 3336, column: 38)
!6429 = !DILocation(line: 3337, column: 55, scope: !6428)
!6430 = !DILocation(line: 3337, column: 3, scope: !6428)
!6431 = !DILocation(line: 3338, column: 3, scope: !6428)
!6432 = !DILocation(line: 3341, column: 9, scope: !6433)
!6433 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 3341, column: 2)
!6434 = !DILocation(line: 3341, column: 7, scope: !6433)
!6435 = !DILocation(line: 3341, column: 14, scope: !6436)
!6436 = distinct !DILexicalBlock(scope: !6433, file: !3, line: 3341, column: 2)
!6437 = !DILocation(line: 3341, column: 18, scope: !6436)
!6438 = !DILocation(line: 3341, column: 24, scope: !6436)
!6439 = !DILocation(line: 3341, column: 16, scope: !6436)
!6440 = !DILocation(line: 3341, column: 2, scope: !6433)
!6441 = !DILocation(line: 3342, column: 12, scope: !6442)
!6442 = distinct !DILexicalBlock(scope: !6436, file: !3, line: 3341, column: 39)
!6443 = !DILocation(line: 3342, column: 18, scope: !6442)
!6444 = !DILocation(line: 3342, column: 25, scope: !6442)
!6445 = !DILocation(line: 3342, column: 9, scope: !6442)
!6446 = !DILocation(line: 3343, column: 32, scope: !6442)
!6447 = !DILocation(line: 3343, column: 39, scope: !6442)
!6448 = !DILocation(line: 3343, column: 14, scope: !6442)
!6449 = !DILocation(line: 3343, column: 12, scope: !6442)
!6450 = !DILocation(line: 3345, column: 8, scope: !6451)
!6451 = distinct !DILexicalBlock(scope: !6442, file: !3, line: 3345, column: 7)
!6452 = !DILocation(line: 3345, column: 15, scope: !6451)
!6453 = !DILocation(line: 3345, column: 20, scope: !6451)
!6454 = !DILocation(line: 3345, column: 40, scope: !6451)
!6455 = !DILocation(line: 3345, column: 43, scope: !6451)
!6456 = !DILocation(line: 3345, column: 53, scope: !6451)
!6457 = !DILocation(line: 3345, column: 7, scope: !6442)
!6458 = !DILocation(line: 3346, column: 26, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6451, file: !3, line: 3345, column: 60)
!6460 = !DILocation(line: 3346, column: 31, scope: !6459)
!6461 = !DILocation(line: 3346, column: 38, scope: !6459)
!6462 = !DILocation(line: 3346, column: 44, scope: !6459)
!6463 = !DILocation(line: 3346, column: 51, scope: !6459)
!6464 = !DILocation(line: 3346, column: 11, scope: !6459)
!6465 = !DILocation(line: 3346, column: 9, scope: !6459)
!6466 = !DILocation(line: 3348, column: 24, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 3348, column: 8)
!6468 = !DILocation(line: 3348, column: 29, scope: !6467)
!6469 = !DILocation(line: 3348, column: 8, scope: !6467)
!6470 = !DILocation(line: 3348, column: 8, scope: !6459)
!6471 = !DILocation(line: 3349, column: 9, scope: !6472)
!6472 = distinct !DILexicalBlock(scope: !6473, file: !3, line: 3349, column: 9)
!6473 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 3348, column: 36)
!6474 = !DILocation(line: 3349, column: 19, scope: !6472)
!6475 = !DILocation(line: 3349, column: 25, scope: !6472)
!6476 = !DILocation(line: 3349, column: 30, scope: !6472)
!6477 = !DILocation(line: 3349, column: 37, scope: !6472)
!6478 = !DILocation(line: 3349, column: 43, scope: !6472)
!6479 = !DILocation(line: 3349, column: 9, scope: !6473)
!6480 = !DILocation(line: 3351, column: 5, scope: !6481)
!6481 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 3349, column: 53)
!6482 = !DILocation(line: 3353, column: 6, scope: !6483)
!6483 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 3352, column: 10)
!6484 = !DILocation(line: 3355, column: 4, scope: !6473)
!6485 = !DILocation(line: 3357, column: 5, scope: !6486)
!6486 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 3356, column: 9)
!6487 = !DILocation(line: 3359, column: 3, scope: !6459)
!6488 = !DILocation(line: 3360, column: 2, scope: !6442)
!6489 = !DILocation(line: 3341, column: 35, scope: !6436)
!6490 = !DILocation(line: 3341, column: 2, scope: !6436)
!6491 = distinct !{!6491, !6440, !6492}
!6492 = !DILocation(line: 3360, column: 2, scope: !6433)
!6493 = !DILocation(line: 3362, column: 6, scope: !6494)
!6494 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 3362, column: 6)
!6495 = !DILocation(line: 3362, column: 11, scope: !6494)
!6496 = !DILocation(line: 3362, column: 17, scope: !6494)
!6497 = !DILocation(line: 3362, column: 8, scope: !6494)
!6498 = !DILocation(line: 3362, column: 6, scope: !6275)
!6499 = !DILocation(line: 3363, column: 11, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6494, file: !3, line: 3362, column: 27)
!6501 = !DILocation(line: 3363, column: 52, scope: !6500)
!6502 = !DILocation(line: 3363, column: 3, scope: !6500)
!6503 = !DILocation(line: 3364, column: 12, scope: !6500)
!6504 = !DILocation(line: 3364, column: 3, scope: !6500)
!6505 = !DILocation(line: 3365, column: 3, scope: !6500)
!6506 = !DILocation(line: 3368, column: 9, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 3368, column: 2)
!6508 = !DILocation(line: 3368, column: 7, scope: !6507)
!6509 = !DILocation(line: 3368, column: 14, scope: !6510)
!6510 = distinct !DILexicalBlock(scope: !6507, file: !3, line: 3368, column: 2)
!6511 = !DILocation(line: 3368, column: 18, scope: !6510)
!6512 = !DILocation(line: 3368, column: 24, scope: !6510)
!6513 = !DILocation(line: 3368, column: 16, scope: !6510)
!6514 = !DILocation(line: 3368, column: 2, scope: !6507)
!6515 = !DILocation(line: 3369, column: 12, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 3368, column: 39)
!6517 = !DILocation(line: 3369, column: 18, scope: !6516)
!6518 = !DILocation(line: 3369, column: 25, scope: !6516)
!6519 = !DILocation(line: 3369, column: 9, scope: !6516)
!6520 = !DILocation(line: 3370, column: 32, scope: !6516)
!6521 = !DILocation(line: 3370, column: 39, scope: !6516)
!6522 = !DILocation(line: 3370, column: 14, scope: !6516)
!6523 = !DILocation(line: 3370, column: 12, scope: !6516)
!6524 = !DILocation(line: 3372, column: 8, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6516, file: !3, line: 3372, column: 7)
!6526 = !DILocation(line: 3372, column: 15, scope: !6525)
!6527 = !DILocation(line: 3372, column: 20, scope: !6525)
!6528 = !DILocation(line: 3372, column: 40, scope: !6525)
!6529 = !DILocation(line: 3372, column: 43, scope: !6525)
!6530 = !DILocation(line: 3372, column: 53, scope: !6525)
!6531 = !DILocation(line: 3372, column: 7, scope: !6516)
!6532 = !DILocation(line: 3373, column: 8, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6534, file: !3, line: 3373, column: 8)
!6534 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 3372, column: 60)
!6535 = !DILocation(line: 3373, column: 8, scope: !6534)
!6536 = !DILocation(line: 3374, column: 9, scope: !6537)
!6537 = distinct !DILexicalBlock(scope: !6538, file: !3, line: 3374, column: 9)
!6538 = distinct !DILexicalBlock(scope: !6533, file: !3, line: 3373, column: 14)
!6539 = !DILocation(line: 3374, column: 19, scope: !6537)
!6540 = !DILocation(line: 3374, column: 9, scope: !6538)
!6541 = !DILocation(line: 3375, column: 6, scope: !6537)
!6542 = !DILocation(line: 3375, column: 16, scope: !6537)
!6543 = !DILocation(line: 3375, column: 21, scope: !6537)
!6544 = !DILocation(line: 3375, column: 28, scope: !6537)
!6545 = !DILocation(line: 3375, column: 34, scope: !6537)
!6546 = !DILocation(line: 3375, column: 43, scope: !6537)
!6547 = !DILocation(line: 3375, column: 53, scope: !6537)
!6548 = !DILocation(line: 3376, column: 5, scope: !6538)
!6549 = !DILocation(line: 3376, column: 12, scope: !6538)
!6550 = !DILocation(line: 3376, column: 17, scope: !6538)
!6551 = !DILocation(line: 3377, column: 4, scope: !6538)
!6552 = !DILocation(line: 3378, column: 3, scope: !6534)
!6553 = !DILocation(line: 3379, column: 2, scope: !6516)
!6554 = !DILocation(line: 3368, column: 35, scope: !6510)
!6555 = !DILocation(line: 3368, column: 2, scope: !6510)
!6556 = distinct !{!6556, !6514, !6557}
!6557 = !DILocation(line: 3379, column: 2, scope: !6507)
!6558 = !DILocation(line: 3381, column: 18, scope: !6275)
!6559 = !DILocation(line: 3381, column: 2, scope: !6275)
!6560 = !DILocation(line: 3382, column: 11, scope: !6275)
!6561 = !DILocation(line: 3382, column: 2, scope: !6275)
!6562 = !DILocation(line: 3383, column: 1, scope: !6275)
!6563 = distinct !DISubprogram(name: "CustomData_external_add", scope: !3, file: !3, line: 3385, type: !6564, scopeLine: 3386, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6564 = !DISubroutineType(types: !6565)
!6565 = !{null, !488, !5941, !158, !158, !316}
!6566 = !DILocalVariable(name: "data", arg: 1, scope: !6563, file: !3, line: 3385, type: !488)
!6567 = !DILocation(line: 3385, column: 42, scope: !6563)
!6568 = !DILocalVariable(name: "UNUSED_id", arg: 2, scope: !6563, file: !3, line: 3385, type: !5941)
!6569 = !DILocation(line: 3385, column: 52, scope: !6563)
!6570 = !DILocalVariable(name: "type", arg: 3, scope: !6563, file: !3, line: 3385, type: !158)
!6571 = !DILocation(line: 3385, column: 68, scope: !6563)
!6572 = !DILocalVariable(name: "UNUSED_totelem", arg: 4, scope: !6563, file: !3, line: 3385, type: !158)
!6573 = !DILocation(line: 3385, column: 78, scope: !6563)
!6574 = !DILocalVariable(name: "filename", arg: 5, scope: !6563, file: !3, line: 3385, type: !316)
!6575 = !DILocation(line: 3385, column: 107, scope: !6563)
!6576 = !DILocalVariable(name: "external", scope: !6563, file: !3, line: 3387, type: !519)
!6577 = !DILocation(line: 3387, column: 22, scope: !6563)
!6578 = !DILocation(line: 3387, column: 33, scope: !6563)
!6579 = !DILocation(line: 3387, column: 39, scope: !6563)
!6580 = !DILocalVariable(name: "layer", scope: !6563, file: !3, line: 3388, type: !493)
!6581 = !DILocation(line: 3388, column: 19, scope: !6563)
!6582 = !DILocalVariable(name: "layer_index", scope: !6563, file: !3, line: 3389, type: !158)
!6583 = !DILocation(line: 3389, column: 6, scope: !6563)
!6584 = !DILocation(line: 3391, column: 50, scope: !6563)
!6585 = !DILocation(line: 3391, column: 56, scope: !6563)
!6586 = !DILocation(line: 3391, column: 16, scope: !6563)
!6587 = !DILocation(line: 3391, column: 14, scope: !6563)
!6588 = !DILocation(line: 3392, column: 6, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 3392, column: 6)
!6590 = !DILocation(line: 3392, column: 18, scope: !6589)
!6591 = !DILocation(line: 3392, column: 6, scope: !6563)
!6592 = !DILocation(line: 3392, column: 25, scope: !6589)
!6593 = !DILocation(line: 3394, column: 11, scope: !6563)
!6594 = !DILocation(line: 3394, column: 17, scope: !6563)
!6595 = !DILocation(line: 3394, column: 24, scope: !6563)
!6596 = !DILocation(line: 3394, column: 8, scope: !6563)
!6597 = !DILocation(line: 3396, column: 6, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 3396, column: 6)
!6599 = !DILocation(line: 3396, column: 13, scope: !6598)
!6600 = !DILocation(line: 3396, column: 18, scope: !6598)
!6601 = !DILocation(line: 3396, column: 6, scope: !6563)
!6602 = !DILocation(line: 3397, column: 3, scope: !6598)
!6603 = !DILocation(line: 3399, column: 7, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 3399, column: 6)
!6605 = !DILocation(line: 3399, column: 6, scope: !6563)
!6606 = !DILocation(line: 3400, column: 14, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 3399, column: 17)
!6608 = !DILocation(line: 3400, column: 12, scope: !6607)
!6609 = !DILocation(line: 3401, column: 20, scope: !6607)
!6610 = !DILocation(line: 3401, column: 3, scope: !6607)
!6611 = !DILocation(line: 3401, column: 9, scope: !6607)
!6612 = !DILocation(line: 3401, column: 18, scope: !6607)
!6613 = !DILocation(line: 3402, column: 2, scope: !6607)
!6614 = !DILocation(line: 3403, column: 14, scope: !6563)
!6615 = !DILocation(line: 3403, column: 24, scope: !6563)
!6616 = !DILocation(line: 3403, column: 34, scope: !6563)
!6617 = !DILocation(line: 3403, column: 2, scope: !6563)
!6618 = !DILocation(line: 3405, column: 2, scope: !6563)
!6619 = !DILocation(line: 3405, column: 9, scope: !6563)
!6620 = !DILocation(line: 3405, column: 14, scope: !6563)
!6621 = !DILocation(line: 3406, column: 1, scope: !6563)
!6622 = distinct !DISubprogram(name: "CustomData_external_remove", scope: !3, file: !3, line: 3408, type: !6623, scopeLine: 3409, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6623 = !DISubroutineType(types: !6624)
!6624 = !{null, !488, !5941, !158, !158}
!6625 = !DILocalVariable(name: "data", arg: 1, scope: !6622, file: !3, line: 3408, type: !488)
!6626 = !DILocation(line: 3408, column: 45, scope: !6622)
!6627 = !DILocalVariable(name: "id", arg: 2, scope: !6622, file: !3, line: 3408, type: !5941)
!6628 = !DILocation(line: 3408, column: 55, scope: !6622)
!6629 = !DILocalVariable(name: "type", arg: 3, scope: !6622, file: !3, line: 3408, type: !158)
!6630 = !DILocation(line: 3408, column: 63, scope: !6622)
!6631 = !DILocalVariable(name: "totelem", arg: 4, scope: !6622, file: !3, line: 3408, type: !158)
!6632 = !DILocation(line: 3408, column: 73, scope: !6622)
!6633 = !DILocalVariable(name: "external", scope: !6622, file: !3, line: 3410, type: !519)
!6634 = !DILocation(line: 3410, column: 22, scope: !6622)
!6635 = !DILocation(line: 3410, column: 33, scope: !6622)
!6636 = !DILocation(line: 3410, column: 39, scope: !6622)
!6637 = !DILocalVariable(name: "layer", scope: !6622, file: !3, line: 3411, type: !493)
!6638 = !DILocation(line: 3411, column: 19, scope: !6622)
!6639 = !DILocalVariable(name: "layer_index", scope: !6622, file: !3, line: 3413, type: !158)
!6640 = !DILocation(line: 3413, column: 6, scope: !6622)
!6641 = !DILocation(line: 3415, column: 50, scope: !6622)
!6642 = !DILocation(line: 3415, column: 56, scope: !6622)
!6643 = !DILocation(line: 3415, column: 16, scope: !6622)
!6644 = !DILocation(line: 3415, column: 14, scope: !6622)
!6645 = !DILocation(line: 3416, column: 6, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6622, file: !3, line: 3416, column: 6)
!6647 = !DILocation(line: 3416, column: 18, scope: !6646)
!6648 = !DILocation(line: 3416, column: 6, scope: !6622)
!6649 = !DILocation(line: 3416, column: 25, scope: !6646)
!6650 = !DILocation(line: 3418, column: 11, scope: !6622)
!6651 = !DILocation(line: 3418, column: 17, scope: !6622)
!6652 = !DILocation(line: 3418, column: 24, scope: !6622)
!6653 = !DILocation(line: 3418, column: 8, scope: !6622)
!6654 = !DILocation(line: 3420, column: 7, scope: !6655)
!6655 = distinct !DILexicalBlock(scope: !6622, file: !3, line: 3420, column: 6)
!6656 = !DILocation(line: 3420, column: 6, scope: !6622)
!6657 = !DILocation(line: 3421, column: 3, scope: !6655)
!6658 = !DILocation(line: 3423, column: 6, scope: !6659)
!6659 = distinct !DILexicalBlock(scope: !6622, file: !3, line: 3423, column: 6)
!6660 = !DILocation(line: 3423, column: 13, scope: !6659)
!6661 = !DILocation(line: 3423, column: 18, scope: !6659)
!6662 = !DILocation(line: 3423, column: 6, scope: !6622)
!6663 = !DILocation(line: 3424, column: 9, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6665, file: !3, line: 3424, column: 7)
!6665 = distinct !DILexicalBlock(scope: !6659, file: !3, line: 3423, column: 38)
!6666 = !DILocation(line: 3424, column: 16, scope: !6664)
!6667 = !DILocation(line: 3424, column: 21, scope: !6664)
!6668 = !DILocation(line: 3424, column: 7, scope: !6665)
!6669 = !DILocation(line: 3425, column: 29, scope: !6664)
!6670 = !DILocation(line: 3425, column: 35, scope: !6664)
!6671 = !DILocation(line: 3425, column: 39, scope: !6664)
!6672 = !DILocation(line: 3425, column: 69, scope: !6664)
!6673 = !DILocation(line: 3425, column: 4, scope: !6664)
!6674 = !DILocation(line: 3427, column: 3, scope: !6665)
!6675 = !DILocation(line: 3427, column: 10, scope: !6665)
!6676 = !DILocation(line: 3427, column: 15, scope: !6665)
!6677 = !DILocation(line: 3441, column: 2, scope: !6665)
!6678 = !DILocation(line: 3442, column: 1, scope: !6622)
!6679 = distinct !DISubprogram(name: "CustomData_external_test", scope: !3, file: !3, line: 3444, type: !6680, scopeLine: 3445, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6680 = !DISubroutineType(types: !6681)
!6681 = !{!361, !488, !158}
!6682 = !DILocalVariable(name: "data", arg: 1, scope: !6679, file: !3, line: 3444, type: !488)
!6683 = !DILocation(line: 3444, column: 43, scope: !6679)
!6684 = !DILocalVariable(name: "type", arg: 2, scope: !6679, file: !3, line: 3444, type: !158)
!6685 = !DILocation(line: 3444, column: 53, scope: !6679)
!6686 = !DILocalVariable(name: "layer", scope: !6679, file: !3, line: 3446, type: !493)
!6687 = !DILocation(line: 3446, column: 19, scope: !6679)
!6688 = !DILocalVariable(name: "layer_index", scope: !6679, file: !3, line: 3447, type: !158)
!6689 = !DILocation(line: 3447, column: 6, scope: !6679)
!6690 = !DILocation(line: 3449, column: 50, scope: !6679)
!6691 = !DILocation(line: 3449, column: 56, scope: !6679)
!6692 = !DILocation(line: 3449, column: 16, scope: !6679)
!6693 = !DILocation(line: 3449, column: 14, scope: !6679)
!6694 = !DILocation(line: 3450, column: 6, scope: !6695)
!6695 = distinct !DILexicalBlock(scope: !6679, file: !3, line: 3450, column: 6)
!6696 = !DILocation(line: 3450, column: 18, scope: !6695)
!6697 = !DILocation(line: 3450, column: 6, scope: !6679)
!6698 = !DILocation(line: 3450, column: 25, scope: !6695)
!6699 = !DILocation(line: 3452, column: 11, scope: !6679)
!6700 = !DILocation(line: 3452, column: 17, scope: !6679)
!6701 = !DILocation(line: 3452, column: 24, scope: !6679)
!6702 = !DILocation(line: 3452, column: 8, scope: !6679)
!6703 = !DILocation(line: 3453, column: 10, scope: !6679)
!6704 = !DILocation(line: 3453, column: 17, scope: !6679)
!6705 = !DILocation(line: 3453, column: 22, scope: !6679)
!6706 = !DILocation(line: 3453, column: 42, scope: !6679)
!6707 = !DILocation(line: 3453, column: 9, scope: !6679)
!6708 = !DILocation(line: 3453, column: 2, scope: !6679)
!6709 = !DILocation(line: 3454, column: 1, scope: !6679)
!6710 = distinct !DISubprogram(name: "layerCopy_mdeformvert", scope: !3, file: !3, line: 156, type: !333, scopeLine: 158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6711 = !DILocalVariable(name: "source", arg: 1, scope: !6710, file: !3, line: 156, type: !335)
!6712 = !DILocation(line: 156, column: 47, scope: !6710)
!6713 = !DILocalVariable(name: "dest", arg: 2, scope: !6710, file: !3, line: 156, type: !146)
!6714 = !DILocation(line: 156, column: 61, scope: !6710)
!6715 = !DILocalVariable(name: "count", arg: 3, scope: !6710, file: !3, line: 157, type: !158)
!6716 = !DILocation(line: 157, column: 39, scope: !6710)
!6717 = !DILocalVariable(name: "i", scope: !6710, file: !3, line: 159, type: !158)
!6718 = !DILocation(line: 159, column: 6, scope: !6710)
!6719 = !DILocalVariable(name: "size", scope: !6710, file: !3, line: 159, type: !158)
!6720 = !DILocation(line: 159, column: 9, scope: !6710)
!6721 = !DILocation(line: 161, column: 9, scope: !6710)
!6722 = !DILocation(line: 161, column: 15, scope: !6710)
!6723 = !DILocation(line: 161, column: 23, scope: !6710)
!6724 = !DILocation(line: 161, column: 31, scope: !6710)
!6725 = !DILocation(line: 161, column: 29, scope: !6710)
!6726 = !DILocation(line: 161, column: 2, scope: !6710)
!6727 = !DILocation(line: 163, column: 9, scope: !6728)
!6728 = distinct !DILexicalBlock(scope: !6710, file: !3, line: 163, column: 2)
!6729 = !DILocation(line: 163, column: 7, scope: !6728)
!6730 = !DILocation(line: 163, column: 14, scope: !6731)
!6731 = distinct !DILexicalBlock(scope: !6728, file: !3, line: 163, column: 2)
!6732 = !DILocation(line: 163, column: 18, scope: !6731)
!6733 = !DILocation(line: 163, column: 16, scope: !6731)
!6734 = !DILocation(line: 163, column: 2, scope: !6728)
!6735 = !DILocalVariable(name: "dvert", scope: !6736, file: !3, line: 164, type: !149)
!6736 = distinct !DILexicalBlock(scope: !6731, file: !3, line: 163, column: 30)
!6737 = !DILocation(line: 164, column: 16, scope: !6736)
!6738 = !DILocation(line: 164, column: 48, scope: !6736)
!6739 = !DILocation(line: 164, column: 55, scope: !6736)
!6740 = !DILocation(line: 164, column: 59, scope: !6736)
!6741 = !DILocation(line: 164, column: 57, scope: !6736)
!6742 = !DILocation(line: 164, column: 53, scope: !6736)
!6743 = !DILocation(line: 164, column: 24, scope: !6736)
!6744 = !DILocation(line: 166, column: 7, scope: !6745)
!6745 = distinct !DILexicalBlock(scope: !6736, file: !3, line: 166, column: 7)
!6746 = !DILocation(line: 166, column: 14, scope: !6745)
!6747 = !DILocation(line: 166, column: 7, scope: !6736)
!6748 = !DILocalVariable(name: "dw", scope: !6749, file: !3, line: 167, type: !6750)
!6749 = distinct !DILexicalBlock(scope: !6745, file: !3, line: 166, column: 25)
!6750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6751, size: 64)
!6751 = !DIDerivedType(tag: DW_TAG_typedef, name: "MDeformWeight", file: !118, line: 57, baseType: !155)
!6752 = !DILocation(line: 167, column: 19, scope: !6749)
!6753 = !DILocation(line: 167, column: 24, scope: !6749)
!6754 = !DILocation(line: 167, column: 36, scope: !6749)
!6755 = !DILocation(line: 167, column: 43, scope: !6749)
!6756 = !DILocation(line: 167, column: 53, scope: !6749)
!6757 = !DILocation(line: 170, column: 11, scope: !6749)
!6758 = !DILocation(line: 170, column: 4, scope: !6749)
!6759 = !DILocation(line: 170, column: 15, scope: !6749)
!6760 = !DILocation(line: 170, column: 22, scope: !6749)
!6761 = !DILocation(line: 170, column: 26, scope: !6749)
!6762 = !DILocation(line: 170, column: 33, scope: !6749)
!6763 = !DILocation(line: 170, column: 43, scope: !6749)
!6764 = !DILocation(line: 171, column: 16, scope: !6749)
!6765 = !DILocation(line: 171, column: 4, scope: !6749)
!6766 = !DILocation(line: 171, column: 11, scope: !6749)
!6767 = !DILocation(line: 171, column: 14, scope: !6749)
!6768 = !DILocation(line: 172, column: 3, scope: !6749)
!6769 = !DILocation(line: 174, column: 4, scope: !6745)
!6770 = !DILocation(line: 174, column: 11, scope: !6745)
!6771 = !DILocation(line: 174, column: 14, scope: !6745)
!6772 = !DILocation(line: 175, column: 2, scope: !6736)
!6773 = !DILocation(line: 163, column: 25, scope: !6731)
!6774 = !DILocation(line: 163, column: 2, scope: !6731)
!6775 = distinct !{!6775, !6734, !6776}
!6776 = !DILocation(line: 175, column: 2, scope: !6728)
!6777 = !DILocation(line: 176, column: 1, scope: !6710)
!6778 = distinct !DISubprogram(name: "layerFree_mdeformvert", scope: !3, file: !3, line: 178, type: !339, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6779 = !DILocalVariable(name: "data", arg: 1, scope: !6778, file: !3, line: 178, type: !146)
!6780 = !DILocation(line: 178, column: 41, scope: !6778)
!6781 = !DILocalVariable(name: "count", arg: 2, scope: !6778, file: !3, line: 178, type: !158)
!6782 = !DILocation(line: 178, column: 51, scope: !6778)
!6783 = !DILocalVariable(name: "size", arg: 3, scope: !6778, file: !3, line: 178, type: !158)
!6784 = !DILocation(line: 178, column: 62, scope: !6778)
!6785 = !DILocalVariable(name: "i", scope: !6778, file: !3, line: 180, type: !158)
!6786 = !DILocation(line: 180, column: 6, scope: !6778)
!6787 = !DILocation(line: 182, column: 9, scope: !6788)
!6788 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 182, column: 2)
!6789 = !DILocation(line: 182, column: 7, scope: !6788)
!6790 = !DILocation(line: 182, column: 14, scope: !6791)
!6791 = distinct !DILexicalBlock(scope: !6788, file: !3, line: 182, column: 2)
!6792 = !DILocation(line: 182, column: 18, scope: !6791)
!6793 = !DILocation(line: 182, column: 16, scope: !6791)
!6794 = !DILocation(line: 182, column: 2, scope: !6788)
!6795 = !DILocalVariable(name: "dvert", scope: !6796, file: !3, line: 183, type: !149)
!6796 = distinct !DILexicalBlock(scope: !6791, file: !3, line: 182, column: 30)
!6797 = !DILocation(line: 183, column: 16, scope: !6796)
!6798 = !DILocation(line: 183, column: 48, scope: !6796)
!6799 = !DILocation(line: 183, column: 55, scope: !6796)
!6800 = !DILocation(line: 183, column: 59, scope: !6796)
!6801 = !DILocation(line: 183, column: 57, scope: !6796)
!6802 = !DILocation(line: 183, column: 53, scope: !6796)
!6803 = !DILocation(line: 183, column: 24, scope: !6796)
!6804 = !DILocation(line: 185, column: 7, scope: !6805)
!6805 = distinct !DILexicalBlock(scope: !6796, file: !3, line: 185, column: 7)
!6806 = !DILocation(line: 185, column: 14, scope: !6805)
!6807 = !DILocation(line: 185, column: 7, scope: !6796)
!6808 = !DILocation(line: 186, column: 4, scope: !6809)
!6809 = distinct !DILexicalBlock(scope: !6805, file: !3, line: 185, column: 18)
!6810 = !DILocation(line: 186, column: 14, scope: !6809)
!6811 = !DILocation(line: 186, column: 21, scope: !6809)
!6812 = !DILocation(line: 187, column: 4, scope: !6809)
!6813 = !DILocation(line: 187, column: 11, scope: !6809)
!6814 = !DILocation(line: 187, column: 14, scope: !6809)
!6815 = !DILocation(line: 188, column: 4, scope: !6809)
!6816 = !DILocation(line: 188, column: 11, scope: !6809)
!6817 = !DILocation(line: 188, column: 21, scope: !6809)
!6818 = !DILocation(line: 189, column: 3, scope: !6809)
!6819 = !DILocation(line: 190, column: 2, scope: !6796)
!6820 = !DILocation(line: 182, column: 25, scope: !6791)
!6821 = !DILocation(line: 182, column: 2, scope: !6791)
!6822 = distinct !{!6822, !6794, !6823}
!6823 = !DILocation(line: 190, column: 2, scope: !6788)
!6824 = !DILocation(line: 191, column: 1, scope: !6778)
!6825 = distinct !DISubprogram(name: "layerInterp_mdeformvert", scope: !3, file: !3, line: 224, type: !343, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!6826 = !DILocalVariable(name: "sources", arg: 1, scope: !6825, file: !3, line: 224, type: !222)
!6827 = !DILocation(line: 224, column: 44, scope: !6825)
!6828 = !DILocalVariable(name: "weights", arg: 2, scope: !6825, file: !3, line: 224, type: !345)
!6829 = !DILocation(line: 224, column: 66, scope: !6825)
!6830 = !DILocalVariable(name: "UNUSED_sub_weights", arg: 3, scope: !6825, file: !3, line: 225, type: !345)
!6831 = !DILocation(line: 225, column: 50, scope: !6825)
!6832 = !DILocalVariable(name: "count", arg: 4, scope: !6825, file: !3, line: 225, type: !158)
!6833 = !DILocation(line: 225, column: 75, scope: !6825)
!6834 = !DILocalVariable(name: "dest", arg: 5, scope: !6825, file: !3, line: 225, type: !146)
!6835 = !DILocation(line: 225, column: 88, scope: !6825)
!6836 = !DILocalVariable(name: "dvert", scope: !6825, file: !3, line: 234, type: !149)
!6837 = !DILocation(line: 234, column: 15, scope: !6825)
!6838 = !DILocation(line: 234, column: 23, scope: !6825)
!6839 = !DILocalVariable(name: "dest_dwlink", scope: !6825, file: !3, line: 235, type: !6840)
!6840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6841, size: 64)
!6841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MDeformWeight_Link", scope: !6825, file: !3, line: 229, size: 128, elements: !6842)
!6842 = !{!6843, !6844}
!6843 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !6841, file: !3, line: 230, baseType: !6840, size: 64)
!6844 = !DIDerivedType(tag: DW_TAG_member, name: "dw", scope: !6841, file: !3, line: 231, baseType: !6751, size: 64, offset: 64)
!6845 = !DILocation(line: 235, column: 29, scope: !6825)
!6846 = !DILocalVariable(name: "node", scope: !6825, file: !3, line: 236, type: !6840)
!6847 = !DILocation(line: 236, column: 29, scope: !6825)
!6848 = !DILocalVariable(name: "i", scope: !6825, file: !3, line: 237, type: !158)
!6849 = !DILocation(line: 237, column: 6, scope: !6825)
!6850 = !DILocalVariable(name: "j", scope: !6825, file: !3, line: 237, type: !158)
!6851 = !DILocation(line: 237, column: 9, scope: !6825)
!6852 = !DILocalVariable(name: "totweight", scope: !6825, file: !3, line: 237, type: !158)
!6853 = !DILocation(line: 237, column: 12, scope: !6825)
!6854 = !DILocation(line: 239, column: 6, scope: !6855)
!6855 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 239, column: 6)
!6856 = !DILocation(line: 239, column: 12, scope: !6855)
!6857 = !DILocation(line: 239, column: 6, scope: !6825)
!6858 = !DILocation(line: 239, column: 18, scope: !6855)
!6859 = !DILocation(line: 242, column: 12, scope: !6825)
!6860 = !DILocation(line: 243, column: 9, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 243, column: 2)
!6862 = !DILocation(line: 243, column: 7, scope: !6861)
!6863 = !DILocation(line: 243, column: 14, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6861, file: !3, line: 243, column: 2)
!6865 = !DILocation(line: 243, column: 18, scope: !6864)
!6866 = !DILocation(line: 243, column: 16, scope: !6864)
!6867 = !DILocation(line: 243, column: 2, scope: !6861)
!6868 = !DILocalVariable(name: "source", scope: !6869, file: !3, line: 244, type: !149)
!6869 = distinct !DILexicalBlock(scope: !6864, file: !3, line: 243, column: 30)
!6870 = !DILocation(line: 244, column: 16, scope: !6869)
!6871 = !DILocation(line: 244, column: 25, scope: !6869)
!6872 = !DILocation(line: 244, column: 33, scope: !6869)
!6873 = !DILocalVariable(name: "interp_weight", scope: !6869, file: !3, line: 245, type: !160)
!6874 = !DILocation(line: 245, column: 9, scope: !6869)
!6875 = !DILocation(line: 245, column: 25, scope: !6869)
!6876 = !DILocation(line: 245, column: 35, scope: !6869)
!6877 = !DILocation(line: 245, column: 43, scope: !6869)
!6878 = !DILocation(line: 247, column: 10, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !6869, file: !3, line: 247, column: 3)
!6880 = !DILocation(line: 247, column: 8, scope: !6879)
!6881 = !DILocation(line: 247, column: 15, scope: !6882)
!6882 = distinct !DILexicalBlock(scope: !6879, file: !3, line: 247, column: 3)
!6883 = !DILocation(line: 247, column: 19, scope: !6882)
!6884 = !DILocation(line: 247, column: 27, scope: !6882)
!6885 = !DILocation(line: 247, column: 17, scope: !6882)
!6886 = !DILocation(line: 247, column: 3, scope: !6879)
!6887 = !DILocalVariable(name: "dw", scope: !6888, file: !3, line: 248, type: !6750)
!6888 = distinct !DILexicalBlock(scope: !6882, file: !3, line: 247, column: 43)
!6889 = !DILocation(line: 248, column: 19, scope: !6888)
!6890 = !DILocation(line: 248, column: 25, scope: !6888)
!6891 = !DILocation(line: 248, column: 33, scope: !6888)
!6892 = !DILocation(line: 248, column: 36, scope: !6888)
!6893 = !DILocalVariable(name: "weight", scope: !6888, file: !3, line: 249, type: !160)
!6894 = !DILocation(line: 249, column: 10, scope: !6888)
!6895 = !DILocation(line: 249, column: 19, scope: !6888)
!6896 = !DILocation(line: 249, column: 23, scope: !6888)
!6897 = !DILocation(line: 249, column: 32, scope: !6888)
!6898 = !DILocation(line: 249, column: 30, scope: !6888)
!6899 = !DILocation(line: 251, column: 8, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6888, file: !3, line: 251, column: 8)
!6901 = !DILocation(line: 251, column: 15, scope: !6900)
!6902 = !DILocation(line: 251, column: 8, scope: !6888)
!6903 = !DILocation(line: 252, column: 5, scope: !6900)
!6904 = !DILocation(line: 254, column: 16, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6888, file: !3, line: 254, column: 4)
!6906 = !DILocation(line: 254, column: 14, scope: !6905)
!6907 = !DILocation(line: 254, column: 9, scope: !6905)
!6908 = !DILocation(line: 254, column: 29, scope: !6909)
!6909 = distinct !DILexicalBlock(scope: !6905, file: !3, line: 254, column: 4)
!6910 = !DILocation(line: 254, column: 4, scope: !6905)
!6911 = !DILocalVariable(name: "tmp_dw", scope: !6912, file: !3, line: 255, type: !6750)
!6912 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 254, column: 54)
!6913 = !DILocation(line: 255, column: 20, scope: !6912)
!6914 = !DILocation(line: 255, column: 30, scope: !6912)
!6915 = !DILocation(line: 255, column: 36, scope: !6912)
!6916 = !DILocation(line: 257, column: 9, scope: !6917)
!6917 = distinct !DILexicalBlock(scope: !6912, file: !3, line: 257, column: 9)
!6918 = !DILocation(line: 257, column: 17, scope: !6917)
!6919 = !DILocation(line: 257, column: 27, scope: !6917)
!6920 = !DILocation(line: 257, column: 31, scope: !6917)
!6921 = !DILocation(line: 257, column: 24, scope: !6917)
!6922 = !DILocation(line: 257, column: 9, scope: !6912)
!6923 = !DILocation(line: 258, column: 24, scope: !6924)
!6924 = distinct !DILexicalBlock(scope: !6917, file: !3, line: 257, column: 39)
!6925 = !DILocation(line: 258, column: 6, scope: !6924)
!6926 = !DILocation(line: 258, column: 14, scope: !6924)
!6927 = !DILocation(line: 258, column: 21, scope: !6924)
!6928 = !DILocation(line: 259, column: 6, scope: !6924)
!6929 = !DILocation(line: 261, column: 4, scope: !6912)
!6930 = !DILocation(line: 254, column: 42, scope: !6909)
!6931 = !DILocation(line: 254, column: 48, scope: !6909)
!6932 = !DILocation(line: 254, column: 40, scope: !6909)
!6933 = !DILocation(line: 254, column: 4, scope: !6909)
!6934 = distinct !{!6934, !6910, !6935}
!6935 = !DILocation(line: 261, column: 4, scope: !6905)
!6936 = !DILocation(line: 264, column: 9, scope: !6937)
!6937 = distinct !DILexicalBlock(scope: !6888, file: !3, line: 264, column: 8)
!6938 = !DILocation(line: 264, column: 8, scope: !6888)
!6939 = !DILocalVariable(name: "tmp_dwlink", scope: !6940, file: !3, line: 265, type: !6840)
!6940 = distinct !DILexicalBlock(scope: !6937, file: !3, line: 264, column: 15)
!6941 = !DILocation(line: 265, column: 32, scope: !6940)
!6942 = !DILocation(line: 265, column: 45, scope: !6940)
!6943 = !DILocation(line: 266, column: 29, scope: !6940)
!6944 = !DILocation(line: 266, column: 33, scope: !6940)
!6945 = !DILocation(line: 266, column: 5, scope: !6940)
!6946 = !DILocation(line: 266, column: 17, scope: !6940)
!6947 = !DILocation(line: 266, column: 20, scope: !6940)
!6948 = !DILocation(line: 266, column: 27, scope: !6940)
!6949 = !DILocation(line: 267, column: 29, scope: !6940)
!6950 = !DILocation(line: 267, column: 5, scope: !6940)
!6951 = !DILocation(line: 267, column: 17, scope: !6940)
!6952 = !DILocation(line: 267, column: 20, scope: !6940)
!6953 = !DILocation(line: 267, column: 27, scope: !6940)
!6954 = !DILocation(line: 270, column: 24, scope: !6940)
!6955 = !DILocation(line: 270, column: 5, scope: !6940)
!6956 = !DILocation(line: 270, column: 17, scope: !6940)
!6957 = !DILocation(line: 270, column: 22, scope: !6940)
!6958 = !DILocation(line: 271, column: 19, scope: !6940)
!6959 = !DILocation(line: 271, column: 17, scope: !6940)
!6960 = !DILocation(line: 273, column: 14, scope: !6940)
!6961 = !DILocation(line: 274, column: 4, scope: !6940)
!6962 = !DILocation(line: 275, column: 3, scope: !6888)
!6963 = !DILocation(line: 247, column: 38, scope: !6882)
!6964 = !DILocation(line: 247, column: 3, scope: !6882)
!6965 = distinct !{!6965, !6886, !6966}
!6966 = !DILocation(line: 275, column: 3, scope: !6879)
!6967 = !DILocation(line: 276, column: 2, scope: !6869)
!6968 = !DILocation(line: 243, column: 25, scope: !6864)
!6969 = !DILocation(line: 243, column: 2, scope: !6864)
!6970 = distinct !{!6970, !6867, !6971}
!6971 = !DILocation(line: 276, column: 2, scope: !6861)
!6972 = !DILocation(line: 281, column: 6, scope: !6973)
!6973 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 281, column: 6)
!6974 = !DILocation(line: 281, column: 13, scope: !6973)
!6975 = !DILocation(line: 281, column: 16, scope: !6973)
!6976 = !DILocation(line: 281, column: 20, scope: !6973)
!6977 = !DILocation(line: 281, column: 27, scope: !6973)
!6978 = !DILocation(line: 281, column: 40, scope: !6973)
!6979 = !DILocation(line: 281, column: 37, scope: !6973)
!6980 = !DILocation(line: 281, column: 6, scope: !6825)
!6981 = !DILocation(line: 283, column: 2, scope: !6982)
!6982 = distinct !DILexicalBlock(scope: !6973, file: !3, line: 281, column: 52)
!6983 = !DILocation(line: 285, column: 7, scope: !6984)
!6984 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 285, column: 7)
!6985 = distinct !DILexicalBlock(scope: !6973, file: !3, line: 284, column: 7)
!6986 = !DILocation(line: 285, column: 14, scope: !6984)
!6987 = !DILocation(line: 285, column: 7, scope: !6985)
!6988 = !DILocation(line: 286, column: 4, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 285, column: 18)
!6990 = !DILocation(line: 286, column: 14, scope: !6989)
!6991 = !DILocation(line: 286, column: 21, scope: !6989)
!6992 = !DILocation(line: 287, column: 3, scope: !6989)
!6993 = !DILocation(line: 289, column: 7, scope: !6994)
!6994 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 289, column: 7)
!6995 = !DILocation(line: 289, column: 7, scope: !6985)
!6996 = !DILocation(line: 290, column: 16, scope: !6997)
!6997 = distinct !DILexicalBlock(scope: !6994, file: !3, line: 289, column: 18)
!6998 = !DILocation(line: 290, column: 49, scope: !6997)
!6999 = !DILocation(line: 290, column: 47, scope: !6997)
!7000 = !DILocation(line: 290, column: 4, scope: !6997)
!7001 = !DILocation(line: 290, column: 11, scope: !6997)
!7002 = !DILocation(line: 290, column: 14, scope: !6997)
!7003 = !DILocation(line: 291, column: 3, scope: !6997)
!7004 = !DILocation(line: 294, column: 6, scope: !7005)
!7005 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 294, column: 6)
!7006 = !DILocation(line: 294, column: 6, scope: !6825)
!7007 = !DILocation(line: 295, column: 22, scope: !7008)
!7008 = distinct !DILexicalBlock(scope: !7005, file: !3, line: 294, column: 17)
!7009 = !DILocation(line: 295, column: 3, scope: !7008)
!7010 = !DILocation(line: 295, column: 10, scope: !7008)
!7011 = !DILocation(line: 295, column: 20, scope: !7008)
!7012 = !DILocation(line: 296, column: 10, scope: !7013)
!7013 = distinct !DILexicalBlock(scope: !7008, file: !3, line: 296, column: 3)
!7014 = !DILocation(line: 296, column: 22, scope: !7013)
!7015 = !DILocation(line: 296, column: 20, scope: !7013)
!7016 = !DILocation(line: 296, column: 8, scope: !7013)
!7017 = !DILocation(line: 296, column: 35, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !7013, file: !3, line: 296, column: 3)
!7019 = !DILocation(line: 296, column: 3, scope: !7013)
!7020 = !DILocation(line: 297, column: 4, scope: !7021)
!7021 = distinct !DILexicalBlock(scope: !7018, file: !3, line: 296, column: 65)
!7022 = !DILocation(line: 297, column: 11, scope: !7021)
!7023 = !DILocation(line: 297, column: 14, scope: !7021)
!7024 = !DILocation(line: 297, column: 19, scope: !7021)
!7025 = !DILocation(line: 297, column: 25, scope: !7021)
!7026 = !DILocation(line: 298, column: 3, scope: !7021)
!7027 = !DILocation(line: 296, column: 48, scope: !7018)
!7028 = !DILocation(line: 296, column: 54, scope: !7018)
!7029 = !DILocation(line: 296, column: 46, scope: !7018)
!7030 = !DILocation(line: 296, column: 61, scope: !7018)
!7031 = !DILocation(line: 296, column: 3, scope: !7018)
!7032 = distinct !{!7032, !7019, !7033}
!7033 = !DILocation(line: 298, column: 3, scope: !7013)
!7034 = !DILocation(line: 299, column: 2, scope: !7008)
!7035 = !DILocation(line: 301, column: 10, scope: !7036)
!7036 = distinct !DILexicalBlock(scope: !7005, file: !3, line: 300, column: 7)
!7037 = !DILocation(line: 301, column: 3, scope: !7036)
!7038 = !DILocation(line: 303, column: 1, scope: !6825)
!7039 = distinct !DISubprogram(name: "layerCopy_tface", scope: !3, file: !3, line: 305, type: !333, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7040 = !DILocalVariable(name: "source", arg: 1, scope: !7039, file: !3, line: 305, type: !335)
!7041 = !DILocation(line: 305, column: 41, scope: !7039)
!7042 = !DILocalVariable(name: "dest", arg: 2, scope: !7039, file: !3, line: 305, type: !146)
!7043 = !DILocation(line: 305, column: 55, scope: !7039)
!7044 = !DILocalVariable(name: "count", arg: 3, scope: !7039, file: !3, line: 305, type: !158)
!7045 = !DILocation(line: 305, column: 65, scope: !7039)
!7046 = !DILocalVariable(name: "source_tf", scope: !7039, file: !3, line: 307, type: !163)
!7047 = !DILocation(line: 307, column: 16, scope: !7039)
!7048 = !DILocation(line: 307, column: 44, scope: !7039)
!7049 = !DILocation(line: 307, column: 28, scope: !7039)
!7050 = !DILocalVariable(name: "dest_tf", scope: !7039, file: !3, line: 308, type: !182)
!7051 = !DILocation(line: 308, column: 10, scope: !7039)
!7052 = !DILocation(line: 308, column: 30, scope: !7039)
!7053 = !DILocation(line: 308, column: 20, scope: !7039)
!7054 = !DILocalVariable(name: "i", scope: !7039, file: !3, line: 309, type: !158)
!7055 = !DILocation(line: 309, column: 6, scope: !7039)
!7056 = !DILocation(line: 311, column: 9, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 311, column: 2)
!7058 = !DILocation(line: 311, column: 7, scope: !7057)
!7059 = !DILocation(line: 311, column: 14, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7057, file: !3, line: 311, column: 2)
!7061 = !DILocation(line: 311, column: 18, scope: !7060)
!7062 = !DILocation(line: 311, column: 16, scope: !7060)
!7063 = !DILocation(line: 311, column: 2, scope: !7057)
!7064 = !DILocation(line: 312, column: 3, scope: !7060)
!7065 = !DILocation(line: 312, column: 11, scope: !7060)
!7066 = !DILocation(line: 312, column: 16, scope: !7060)
!7067 = !DILocation(line: 312, column: 26, scope: !7060)
!7068 = !DILocation(line: 311, column: 25, scope: !7060)
!7069 = !DILocation(line: 311, column: 2, scope: !7060)
!7070 = distinct !{!7070, !7063, !7071}
!7071 = !DILocation(line: 312, column: 27, scope: !7057)
!7072 = !DILocation(line: 313, column: 1, scope: !7039)
!7073 = distinct !DISubprogram(name: "layerInterp_tface", scope: !3, file: !3, line: 315, type: !343, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7074 = !DILocalVariable(name: "sources", arg: 1, scope: !7073, file: !3, line: 315, type: !222)
!7075 = !DILocation(line: 315, column: 38, scope: !7073)
!7076 = !DILocalVariable(name: "weights", arg: 2, scope: !7073, file: !3, line: 315, type: !345)
!7077 = !DILocation(line: 315, column: 60, scope: !7073)
!7078 = !DILocalVariable(name: "sub_weights", arg: 3, scope: !7073, file: !3, line: 316, type: !345)
!7079 = !DILocation(line: 316, column: 44, scope: !7073)
!7080 = !DILocalVariable(name: "count", arg: 4, scope: !7073, file: !3, line: 316, type: !158)
!7081 = !DILocation(line: 316, column: 61, scope: !7073)
!7082 = !DILocalVariable(name: "dest", arg: 5, scope: !7073, file: !3, line: 316, type: !146)
!7083 = !DILocation(line: 316, column: 74, scope: !7073)
!7084 = !DILocalVariable(name: "tf", scope: !7073, file: !3, line: 318, type: !182)
!7085 = !DILocation(line: 318, column: 10, scope: !7073)
!7086 = !DILocation(line: 318, column: 15, scope: !7073)
!7087 = !DILocalVariable(name: "i", scope: !7073, file: !3, line: 319, type: !158)
!7088 = !DILocation(line: 319, column: 6, scope: !7073)
!7089 = !DILocalVariable(name: "j", scope: !7073, file: !3, line: 319, type: !158)
!7090 = !DILocation(line: 319, column: 9, scope: !7073)
!7091 = !DILocalVariable(name: "k", scope: !7073, file: !3, line: 319, type: !158)
!7092 = !DILocation(line: 319, column: 12, scope: !7073)
!7093 = !DILocalVariable(name: "uv", scope: !7073, file: !3, line: 320, type: !169)
!7094 = !DILocation(line: 320, column: 8, scope: !7073)
!7095 = !DILocalVariable(name: "sub_weight", scope: !7073, file: !3, line: 321, type: !345)
!7096 = !DILocation(line: 321, column: 15, scope: !7073)
!7097 = !DILocation(line: 323, column: 6, scope: !7098)
!7098 = distinct !DILexicalBlock(scope: !7073, file: !3, line: 323, column: 6)
!7099 = !DILocation(line: 323, column: 12, scope: !7098)
!7100 = !DILocation(line: 323, column: 6, scope: !7073)
!7101 = !DILocation(line: 323, column: 18, scope: !7098)
!7102 = !DILocation(line: 325, column: 15, scope: !7073)
!7103 = !DILocation(line: 325, column: 13, scope: !7073)
!7104 = !DILocation(line: 326, column: 9, scope: !7105)
!7105 = distinct !DILexicalBlock(scope: !7073, file: !3, line: 326, column: 2)
!7106 = !DILocation(line: 326, column: 7, scope: !7105)
!7107 = !DILocation(line: 326, column: 14, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 326, column: 2)
!7109 = !DILocation(line: 326, column: 18, scope: !7108)
!7110 = !DILocation(line: 326, column: 16, scope: !7108)
!7111 = !DILocation(line: 326, column: 2, scope: !7105)
!7112 = !DILocalVariable(name: "weight", scope: !7113, file: !3, line: 327, type: !160)
!7113 = distinct !DILexicalBlock(scope: !7108, file: !3, line: 326, column: 30)
!7114 = !DILocation(line: 327, column: 9, scope: !7113)
!7115 = !DILocation(line: 327, column: 18, scope: !7113)
!7116 = !DILocation(line: 327, column: 28, scope: !7113)
!7117 = !DILocation(line: 327, column: 36, scope: !7113)
!7118 = !DILocalVariable(name: "src", scope: !7113, file: !3, line: 328, type: !182)
!7119 = !DILocation(line: 328, column: 11, scope: !7113)
!7120 = !DILocation(line: 328, column: 17, scope: !7113)
!7121 = !DILocation(line: 328, column: 25, scope: !7113)
!7122 = !DILocation(line: 330, column: 10, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 330, column: 3)
!7124 = !DILocation(line: 330, column: 8, scope: !7123)
!7125 = !DILocation(line: 330, column: 15, scope: !7126)
!7126 = distinct !DILexicalBlock(scope: !7123, file: !3, line: 330, column: 3)
!7127 = !DILocation(line: 330, column: 17, scope: !7126)
!7128 = !DILocation(line: 330, column: 3, scope: !7123)
!7129 = !DILocation(line: 331, column: 8, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !7131, file: !3, line: 331, column: 8)
!7131 = distinct !DILexicalBlock(scope: !7126, file: !3, line: 330, column: 27)
!7132 = !DILocation(line: 331, column: 8, scope: !7131)
!7133 = !DILocation(line: 332, column: 12, scope: !7134)
!7134 = distinct !DILexicalBlock(scope: !7135, file: !3, line: 332, column: 5)
!7135 = distinct !DILexicalBlock(scope: !7130, file: !3, line: 331, column: 21)
!7136 = !DILocation(line: 332, column: 10, scope: !7134)
!7137 = !DILocation(line: 332, column: 17, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7134, file: !3, line: 332, column: 5)
!7139 = !DILocation(line: 332, column: 19, scope: !7138)
!7140 = !DILocation(line: 332, column: 5, scope: !7134)
!7141 = !DILocation(line: 333, column: 22, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7138, file: !3, line: 332, column: 43)
!7143 = !DILocation(line: 333, column: 19, scope: !7142)
!7144 = !DILocation(line: 333, column: 26, scope: !7142)
!7145 = !DILocation(line: 333, column: 31, scope: !7142)
!7146 = !DILocation(line: 333, column: 34, scope: !7142)
!7147 = !DILocation(line: 333, column: 40, scope: !7142)
!7148 = !DILocation(line: 333, column: 39, scope: !7142)
!7149 = !DILocation(line: 333, column: 54, scope: !7142)
!7150 = !DILocation(line: 333, column: 52, scope: !7142)
!7151 = !DILocation(line: 333, column: 6, scope: !7142)
!7152 = !DILocation(line: 334, column: 5, scope: !7142)
!7153 = !DILocation(line: 332, column: 24, scope: !7138)
!7154 = !DILocation(line: 332, column: 29, scope: !7138)
!7155 = !DILocation(line: 332, column: 5, scope: !7138)
!7156 = distinct !{!7156, !7140, !7157}
!7157 = !DILocation(line: 334, column: 5, scope: !7134)
!7158 = !DILocation(line: 335, column: 4, scope: !7135)
!7159 = !DILocation(line: 337, column: 21, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7130, file: !3, line: 336, column: 9)
!7161 = !DILocation(line: 337, column: 18, scope: !7160)
!7162 = !DILocation(line: 337, column: 25, scope: !7160)
!7163 = !DILocation(line: 337, column: 30, scope: !7160)
!7164 = !DILocation(line: 337, column: 33, scope: !7160)
!7165 = !DILocation(line: 337, column: 37, scope: !7160)
!7166 = !DILocation(line: 337, column: 5, scope: !7160)
!7167 = !DILocation(line: 339, column: 3, scope: !7131)
!7168 = !DILocation(line: 330, column: 22, scope: !7126)
!7169 = !DILocation(line: 330, column: 3, scope: !7126)
!7170 = distinct !{!7170, !7128, !7171}
!7171 = !DILocation(line: 339, column: 3, scope: !7123)
!7172 = !DILocation(line: 340, column: 2, scope: !7113)
!7173 = !DILocation(line: 326, column: 25, scope: !7108)
!7174 = !DILocation(line: 326, column: 2, scope: !7108)
!7175 = distinct !{!7175, !7111, !7176}
!7176 = !DILocation(line: 340, column: 2, scope: !7105)
!7177 = !DILocation(line: 343, column: 3, scope: !7073)
!7178 = !DILocation(line: 343, column: 21, scope: !7073)
!7179 = !DILocation(line: 343, column: 20, scope: !7073)
!7180 = !DILocation(line: 343, column: 9, scope: !7073)
!7181 = !DILocation(line: 343, column: 8, scope: !7073)
!7182 = !DILocation(line: 344, column: 9, scope: !7073)
!7183 = !DILocation(line: 344, column: 13, scope: !7073)
!7184 = !DILocation(line: 344, column: 2, scope: !7073)
!7185 = !DILocation(line: 345, column: 1, scope: !7073)
!7186 = !DILocalVariable(name: "data", arg: 1, scope: !406, file: !3, line: 347, type: !146)
!7187 = !DILocation(line: 347, column: 35, scope: !406)
!7188 = !DILocalVariable(name: "corner_indices", arg: 2, scope: !406, file: !3, line: 347, type: !351)
!7189 = !DILocation(line: 347, column: 52, scope: !406)
!7190 = !DILocalVariable(name: "tf", scope: !406, file: !3, line: 349, type: !182)
!7191 = !DILocation(line: 349, column: 10, scope: !406)
!7192 = !DILocation(line: 349, column: 15, scope: !406)
!7193 = !DILocalVariable(name: "uv", scope: !406, file: !3, line: 350, type: !169)
!7194 = !DILocation(line: 350, column: 8, scope: !406)
!7195 = !DILocalVariable(name: "unwrap", scope: !406, file: !3, line: 353, type: !179)
!7196 = !DILocation(line: 353, column: 8, scope: !406)
!7197 = !DILocation(line: 353, column: 17, scope: !406)
!7198 = !DILocation(line: 353, column: 21, scope: !406)
!7199 = !DILocation(line: 353, column: 28, scope: !406)
!7200 = !DILocalVariable(name: "flag", scope: !406, file: !3, line: 354, type: !148)
!7201 = !DILocation(line: 354, column: 7, scope: !406)
!7202 = !DILocation(line: 354, column: 14, scope: !406)
!7203 = !DILocation(line: 354, column: 18, scope: !406)
!7204 = !DILocation(line: 354, column: 23, scope: !406)
!7205 = !DILocalVariable(name: "j", scope: !406, file: !3, line: 355, type: !158)
!7206 = !DILocation(line: 355, column: 6, scope: !406)
!7207 = !DILocation(line: 357, column: 9, scope: !7208)
!7208 = distinct !DILexicalBlock(scope: !406, file: !3, line: 357, column: 2)
!7209 = !DILocation(line: 357, column: 7, scope: !7208)
!7210 = !DILocation(line: 357, column: 14, scope: !7211)
!7211 = distinct !DILexicalBlock(scope: !7208, file: !3, line: 357, column: 2)
!7212 = !DILocation(line: 357, column: 16, scope: !7211)
!7213 = !DILocation(line: 357, column: 2, scope: !7208)
!7214 = !DILocalVariable(name: "source_index", scope: !7215, file: !3, line: 358, type: !352)
!7215 = distinct !DILexicalBlock(scope: !7211, file: !3, line: 357, column: 26)
!7216 = !DILocation(line: 358, column: 13, scope: !7215)
!7217 = !DILocation(line: 358, column: 28, scope: !7215)
!7218 = !DILocation(line: 358, column: 43, scope: !7215)
!7219 = !DILocation(line: 360, column: 17, scope: !7215)
!7220 = !DILocation(line: 360, column: 14, scope: !7215)
!7221 = !DILocation(line: 360, column: 21, scope: !7215)
!7222 = !DILocation(line: 360, column: 25, scope: !7215)
!7223 = !DILocation(line: 360, column: 28, scope: !7215)
!7224 = !DILocation(line: 360, column: 3, scope: !7215)
!7225 = !DILocation(line: 363, column: 7, scope: !7226)
!7226 = distinct !DILexicalBlock(scope: !7215, file: !3, line: 363, column: 7)
!7227 = !DILocation(line: 363, column: 11, scope: !7226)
!7228 = !DILocation(line: 363, column: 30, scope: !7226)
!7229 = !DILocation(line: 363, column: 20, scope: !7226)
!7230 = !DILocation(line: 363, column: 18, scope: !7226)
!7231 = !DILocation(line: 363, column: 7, scope: !7215)
!7232 = !DILocation(line: 364, column: 24, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !7226, file: !3, line: 363, column: 45)
!7234 = !DILocation(line: 364, column: 14, scope: !7233)
!7235 = !DILocation(line: 364, column: 11, scope: !7233)
!7236 = !DILocation(line: 365, column: 3, scope: !7233)
!7237 = !DILocation(line: 368, column: 7, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7215, file: !3, line: 368, column: 7)
!7239 = !DILocation(line: 368, column: 11, scope: !7238)
!7240 = !DILocation(line: 368, column: 28, scope: !7238)
!7241 = !DILocation(line: 368, column: 18, scope: !7238)
!7242 = !DILocation(line: 368, column: 16, scope: !7238)
!7243 = !DILocation(line: 368, column: 7, scope: !7215)
!7244 = !DILocation(line: 369, column: 22, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7238, file: !3, line: 368, column: 43)
!7246 = !DILocation(line: 369, column: 12, scope: !7245)
!7247 = !DILocation(line: 369, column: 9, scope: !7245)
!7248 = !DILocation(line: 370, column: 3, scope: !7245)
!7249 = !DILocation(line: 371, column: 2, scope: !7215)
!7250 = !DILocation(line: 357, column: 21, scope: !7211)
!7251 = !DILocation(line: 357, column: 2, scope: !7211)
!7252 = distinct !{!7252, !7213, !7253}
!7253 = !DILocation(line: 371, column: 2, scope: !7208)
!7254 = !DILocation(line: 373, column: 9, scope: !406)
!7255 = !DILocation(line: 373, column: 13, scope: !406)
!7256 = !DILocation(line: 373, column: 2, scope: !406)
!7257 = !DILocation(line: 374, column: 15, scope: !406)
!7258 = !DILocation(line: 374, column: 2, scope: !406)
!7259 = !DILocation(line: 374, column: 6, scope: !406)
!7260 = !DILocation(line: 374, column: 13, scope: !406)
!7261 = !DILocation(line: 375, column: 13, scope: !406)
!7262 = !DILocation(line: 375, column: 2, scope: !406)
!7263 = !DILocation(line: 375, column: 6, scope: !406)
!7264 = !DILocation(line: 375, column: 11, scope: !406)
!7265 = !DILocation(line: 376, column: 1, scope: !406)
!7266 = !DILocalVariable(name: "data", arg: 1, scope: !416, file: !3, line: 378, type: !146)
!7267 = !DILocation(line: 378, column: 38, scope: !416)
!7268 = !DILocalVariable(name: "count", arg: 2, scope: !416, file: !3, line: 378, type: !158)
!7269 = !DILocation(line: 378, column: 48, scope: !416)
!7270 = !DILocalVariable(name: "tf", scope: !416, file: !3, line: 382, type: !182)
!7271 = !DILocation(line: 382, column: 10, scope: !416)
!7272 = !DILocation(line: 382, column: 25, scope: !416)
!7273 = !DILocation(line: 382, column: 15, scope: !416)
!7274 = !DILocalVariable(name: "i", scope: !416, file: !3, line: 383, type: !158)
!7275 = !DILocation(line: 383, column: 6, scope: !416)
!7276 = !DILocation(line: 385, column: 9, scope: !7277)
!7277 = distinct !DILexicalBlock(scope: !416, file: !3, line: 385, column: 2)
!7278 = !DILocation(line: 385, column: 7, scope: !7277)
!7279 = !DILocation(line: 385, column: 14, scope: !7280)
!7280 = distinct !DILexicalBlock(scope: !7277, file: !3, line: 385, column: 2)
!7281 = !DILocation(line: 385, column: 18, scope: !7280)
!7282 = !DILocation(line: 385, column: 16, scope: !7280)
!7283 = !DILocation(line: 385, column: 2, scope: !7277)
!7284 = !DILocation(line: 386, column: 3, scope: !7280)
!7285 = !DILocation(line: 386, column: 6, scope: !7280)
!7286 = !DILocation(line: 386, column: 11, scope: !7280)
!7287 = !DILocation(line: 385, column: 26, scope: !7280)
!7288 = !DILocation(line: 385, column: 2, scope: !7280)
!7289 = distinct !{!7289, !7283, !7290}
!7290 = !DILocation(line: 386, column: 11, scope: !7277)
!7291 = !DILocation(line: 387, column: 1, scope: !416)
!7292 = distinct !DISubprogram(name: "layerMaxNum_tface", scope: !3, file: !3, line: 389, type: !402, scopeLine: 390, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7293 = !DILocation(line: 391, column: 2, scope: !7292)
!7294 = distinct !DISubprogram(name: "layerInterp_mcol", scope: !3, file: !3, line: 915, type: !343, scopeLine: 917, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7295 = !DILocalVariable(name: "sources", arg: 1, scope: !7294, file: !3, line: 915, type: !222)
!7296 = !DILocation(line: 915, column: 37, scope: !7294)
!7297 = !DILocalVariable(name: "weights", arg: 2, scope: !7294, file: !3, line: 915, type: !345)
!7298 = !DILocation(line: 915, column: 59, scope: !7294)
!7299 = !DILocalVariable(name: "sub_weights", arg: 3, scope: !7294, file: !3, line: 916, type: !345)
!7300 = !DILocation(line: 916, column: 43, scope: !7294)
!7301 = !DILocalVariable(name: "count", arg: 4, scope: !7294, file: !3, line: 916, type: !158)
!7302 = !DILocation(line: 916, column: 60, scope: !7294)
!7303 = !DILocalVariable(name: "dest", arg: 5, scope: !7294, file: !3, line: 916, type: !146)
!7304 = !DILocation(line: 916, column: 73, scope: !7294)
!7305 = !DILocalVariable(name: "mc", scope: !7294, file: !3, line: 918, type: !183)
!7306 = !DILocation(line: 918, column: 8, scope: !7294)
!7307 = !DILocation(line: 918, column: 13, scope: !7294)
!7308 = !DILocalVariable(name: "i", scope: !7294, file: !3, line: 919, type: !158)
!7309 = !DILocation(line: 919, column: 6, scope: !7294)
!7310 = !DILocalVariable(name: "j", scope: !7294, file: !3, line: 919, type: !158)
!7311 = !DILocation(line: 919, column: 9, scope: !7294)
!7312 = !DILocalVariable(name: "k", scope: !7294, file: !3, line: 919, type: !158)
!7313 = !DILocation(line: 919, column: 12, scope: !7294)
!7314 = !DILocalVariable(name: "col", scope: !7294, file: !3, line: 925, type: !7315)
!7315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7316, size: 512, elements: !410)
!7316 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !7294, file: !3, line: 920, size: 128, elements: !7317)
!7317 = !{!7318, !7319, !7320, !7321}
!7318 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !7316, file: !3, line: 921, baseType: !160, size: 32)
!7319 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !7316, file: !3, line: 922, baseType: !160, size: 32, offset: 32)
!7320 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !7316, file: !3, line: 923, baseType: !160, size: 32, offset: 64)
!7321 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !7316, file: !3, line: 924, baseType: !160, size: 32, offset: 96)
!7322 = !DILocation(line: 925, column: 4, scope: !7294)
!7323 = !DILocalVariable(name: "sub_weight", scope: !7294, file: !3, line: 927, type: !345)
!7324 = !DILocation(line: 927, column: 15, scope: !7294)
!7325 = !DILocation(line: 929, column: 6, scope: !7326)
!7326 = distinct !DILexicalBlock(scope: !7294, file: !3, line: 929, column: 6)
!7327 = !DILocation(line: 929, column: 12, scope: !7326)
!7328 = !DILocation(line: 929, column: 6, scope: !7294)
!7329 = !DILocation(line: 929, column: 18, scope: !7326)
!7330 = !DILocation(line: 931, column: 15, scope: !7294)
!7331 = !DILocation(line: 931, column: 13, scope: !7294)
!7332 = !DILocation(line: 932, column: 9, scope: !7333)
!7333 = distinct !DILexicalBlock(scope: !7294, file: !3, line: 932, column: 2)
!7334 = !DILocation(line: 932, column: 7, scope: !7333)
!7335 = !DILocation(line: 932, column: 14, scope: !7336)
!7336 = distinct !DILexicalBlock(scope: !7333, file: !3, line: 932, column: 2)
!7337 = !DILocation(line: 932, column: 18, scope: !7336)
!7338 = !DILocation(line: 932, column: 16, scope: !7336)
!7339 = !DILocation(line: 932, column: 2, scope: !7333)
!7340 = !DILocalVariable(name: "weight", scope: !7341, file: !3, line: 933, type: !160)
!7341 = distinct !DILexicalBlock(scope: !7336, file: !3, line: 932, column: 30)
!7342 = !DILocation(line: 933, column: 9, scope: !7341)
!7343 = !DILocation(line: 933, column: 18, scope: !7341)
!7344 = !DILocation(line: 933, column: 28, scope: !7341)
!7345 = !DILocation(line: 933, column: 36, scope: !7341)
!7346 = !DILocation(line: 935, column: 10, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 935, column: 3)
!7348 = !DILocation(line: 935, column: 8, scope: !7347)
!7349 = !DILocation(line: 935, column: 15, scope: !7350)
!7350 = distinct !DILexicalBlock(scope: !7347, file: !3, line: 935, column: 3)
!7351 = !DILocation(line: 935, column: 17, scope: !7350)
!7352 = !DILocation(line: 935, column: 3, scope: !7347)
!7353 = !DILocation(line: 936, column: 8, scope: !7354)
!7354 = distinct !DILexicalBlock(scope: !7355, file: !3, line: 936, column: 8)
!7355 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 935, column: 27)
!7356 = !DILocation(line: 936, column: 8, scope: !7355)
!7357 = !DILocalVariable(name: "src", scope: !7358, file: !3, line: 937, type: !183)
!7358 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 936, column: 21)
!7359 = !DILocation(line: 937, column: 11, scope: !7358)
!7360 = !DILocation(line: 937, column: 17, scope: !7358)
!7361 = !DILocation(line: 937, column: 25, scope: !7358)
!7362 = !DILocation(line: 938, column: 12, scope: !7363)
!7363 = distinct !DILexicalBlock(scope: !7358, file: !3, line: 938, column: 5)
!7364 = !DILocation(line: 938, column: 10, scope: !7363)
!7365 = !DILocation(line: 938, column: 17, scope: !7366)
!7366 = distinct !DILexicalBlock(scope: !7363, file: !3, line: 938, column: 5)
!7367 = !DILocation(line: 938, column: 19, scope: !7366)
!7368 = !DILocation(line: 938, column: 5, scope: !7363)
!7369 = !DILocalVariable(name: "w", scope: !7370, file: !3, line: 939, type: !346)
!7370 = distinct !DILexicalBlock(scope: !7366, file: !3, line: 938, column: 50)
!7371 = !DILocation(line: 939, column: 18, scope: !7370)
!7372 = !DILocation(line: 939, column: 24, scope: !7370)
!7373 = !DILocation(line: 939, column: 23, scope: !7370)
!7374 = !DILocation(line: 939, column: 38, scope: !7370)
!7375 = !DILocation(line: 939, column: 36, scope: !7370)
!7376 = !DILocation(line: 940, column: 18, scope: !7370)
!7377 = !DILocation(line: 940, column: 23, scope: !7370)
!7378 = !DILocation(line: 940, column: 27, scope: !7370)
!7379 = !DILocation(line: 940, column: 25, scope: !7370)
!7380 = !DILocation(line: 940, column: 10, scope: !7370)
!7381 = !DILocation(line: 940, column: 6, scope: !7370)
!7382 = !DILocation(line: 940, column: 13, scope: !7370)
!7383 = !DILocation(line: 940, column: 15, scope: !7370)
!7384 = !DILocation(line: 941, column: 18, scope: !7370)
!7385 = !DILocation(line: 941, column: 23, scope: !7370)
!7386 = !DILocation(line: 941, column: 27, scope: !7370)
!7387 = !DILocation(line: 941, column: 25, scope: !7370)
!7388 = !DILocation(line: 941, column: 10, scope: !7370)
!7389 = !DILocation(line: 941, column: 6, scope: !7370)
!7390 = !DILocation(line: 941, column: 13, scope: !7370)
!7391 = !DILocation(line: 941, column: 15, scope: !7370)
!7392 = !DILocation(line: 942, column: 18, scope: !7370)
!7393 = !DILocation(line: 942, column: 23, scope: !7370)
!7394 = !DILocation(line: 942, column: 27, scope: !7370)
!7395 = !DILocation(line: 942, column: 25, scope: !7370)
!7396 = !DILocation(line: 942, column: 10, scope: !7370)
!7397 = !DILocation(line: 942, column: 6, scope: !7370)
!7398 = !DILocation(line: 942, column: 13, scope: !7370)
!7399 = !DILocation(line: 942, column: 15, scope: !7370)
!7400 = !DILocation(line: 943, column: 18, scope: !7370)
!7401 = !DILocation(line: 943, column: 23, scope: !7370)
!7402 = !DILocation(line: 943, column: 27, scope: !7370)
!7403 = !DILocation(line: 943, column: 25, scope: !7370)
!7404 = !DILocation(line: 943, column: 10, scope: !7370)
!7405 = !DILocation(line: 943, column: 6, scope: !7370)
!7406 = !DILocation(line: 943, column: 13, scope: !7370)
!7407 = !DILocation(line: 943, column: 15, scope: !7370)
!7408 = !DILocation(line: 944, column: 5, scope: !7370)
!7409 = !DILocation(line: 938, column: 24, scope: !7366)
!7410 = !DILocation(line: 938, column: 29, scope: !7366)
!7411 = !DILocation(line: 938, column: 43, scope: !7366)
!7412 = !DILocation(line: 938, column: 5, scope: !7366)
!7413 = distinct !{!7413, !7368, !7414}
!7414 = !DILocation(line: 944, column: 5, scope: !7363)
!7415 = !DILocation(line: 945, column: 4, scope: !7358)
!7416 = !DILocalVariable(name: "src", scope: !7417, file: !3, line: 947, type: !183)
!7417 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 946, column: 9)
!7418 = !DILocation(line: 947, column: 11, scope: !7417)
!7419 = !DILocation(line: 947, column: 17, scope: !7417)
!7420 = !DILocation(line: 947, column: 25, scope: !7417)
!7421 = !DILocation(line: 948, column: 17, scope: !7417)
!7422 = !DILocation(line: 948, column: 21, scope: !7417)
!7423 = !DILocation(line: 948, column: 24, scope: !7417)
!7424 = !DILocation(line: 948, column: 28, scope: !7417)
!7425 = !DILocation(line: 948, column: 26, scope: !7417)
!7426 = !DILocation(line: 948, column: 9, scope: !7417)
!7427 = !DILocation(line: 948, column: 5, scope: !7417)
!7428 = !DILocation(line: 948, column: 12, scope: !7417)
!7429 = !DILocation(line: 948, column: 14, scope: !7417)
!7430 = !DILocation(line: 949, column: 17, scope: !7417)
!7431 = !DILocation(line: 949, column: 21, scope: !7417)
!7432 = !DILocation(line: 949, column: 24, scope: !7417)
!7433 = !DILocation(line: 949, column: 28, scope: !7417)
!7434 = !DILocation(line: 949, column: 26, scope: !7417)
!7435 = !DILocation(line: 949, column: 9, scope: !7417)
!7436 = !DILocation(line: 949, column: 5, scope: !7417)
!7437 = !DILocation(line: 949, column: 12, scope: !7417)
!7438 = !DILocation(line: 949, column: 14, scope: !7417)
!7439 = !DILocation(line: 950, column: 17, scope: !7417)
!7440 = !DILocation(line: 950, column: 21, scope: !7417)
!7441 = !DILocation(line: 950, column: 24, scope: !7417)
!7442 = !DILocation(line: 950, column: 28, scope: !7417)
!7443 = !DILocation(line: 950, column: 26, scope: !7417)
!7444 = !DILocation(line: 950, column: 9, scope: !7417)
!7445 = !DILocation(line: 950, column: 5, scope: !7417)
!7446 = !DILocation(line: 950, column: 12, scope: !7417)
!7447 = !DILocation(line: 950, column: 14, scope: !7417)
!7448 = !DILocation(line: 951, column: 17, scope: !7417)
!7449 = !DILocation(line: 951, column: 21, scope: !7417)
!7450 = !DILocation(line: 951, column: 24, scope: !7417)
!7451 = !DILocation(line: 951, column: 28, scope: !7417)
!7452 = !DILocation(line: 951, column: 26, scope: !7417)
!7453 = !DILocation(line: 951, column: 9, scope: !7417)
!7454 = !DILocation(line: 951, column: 5, scope: !7417)
!7455 = !DILocation(line: 951, column: 12, scope: !7417)
!7456 = !DILocation(line: 951, column: 14, scope: !7417)
!7457 = !DILocation(line: 953, column: 3, scope: !7355)
!7458 = !DILocation(line: 935, column: 22, scope: !7350)
!7459 = !DILocation(line: 935, column: 3, scope: !7350)
!7460 = distinct !{!7460, !7352, !7461}
!7461 = !DILocation(line: 953, column: 3, scope: !7347)
!7462 = !DILocation(line: 954, column: 2, scope: !7341)
!7463 = !DILocation(line: 932, column: 25, scope: !7336)
!7464 = !DILocation(line: 932, column: 2, scope: !7336)
!7465 = distinct !{!7465, !7339, !7466}
!7466 = !DILocation(line: 954, column: 2, scope: !7333)
!7467 = !DILocation(line: 957, column: 9, scope: !7468)
!7468 = distinct !DILexicalBlock(scope: !7294, file: !3, line: 957, column: 2)
!7469 = !DILocation(line: 957, column: 7, scope: !7468)
!7470 = !DILocation(line: 957, column: 14, scope: !7471)
!7471 = distinct !DILexicalBlock(scope: !7468, file: !3, line: 957, column: 2)
!7472 = !DILocation(line: 957, column: 16, scope: !7471)
!7473 = !DILocation(line: 957, column: 2, scope: !7468)
!7474 = !DILocation(line: 961, column: 3, scope: !7475)
!7475 = distinct !DILexicalBlock(scope: !7476, file: !3, line: 961, column: 3)
!7476 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 961, column: 3)
!7477 = distinct !DILexicalBlock(scope: !7471, file: !3, line: 957, column: 26)
!7478 = !DILocation(line: 961, column: 3, scope: !7476)
!7479 = !DILocation(line: 961, column: 3, scope: !7480)
!7480 = distinct !DILexicalBlock(scope: !7475, file: !3, line: 961, column: 3)
!7481 = !DILocation(line: 962, column: 3, scope: !7482)
!7482 = distinct !DILexicalBlock(scope: !7483, file: !3, line: 962, column: 3)
!7483 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 962, column: 3)
!7484 = !DILocation(line: 962, column: 3, scope: !7483)
!7485 = !DILocation(line: 962, column: 3, scope: !7486)
!7486 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 962, column: 3)
!7487 = !DILocation(line: 963, column: 3, scope: !7488)
!7488 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 963, column: 3)
!7489 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 963, column: 3)
!7490 = !DILocation(line: 963, column: 3, scope: !7489)
!7491 = !DILocation(line: 963, column: 3, scope: !7492)
!7492 = distinct !DILexicalBlock(scope: !7488, file: !3, line: 963, column: 3)
!7493 = !DILocation(line: 964, column: 3, scope: !7494)
!7494 = distinct !DILexicalBlock(scope: !7495, file: !3, line: 964, column: 3)
!7495 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 964, column: 3)
!7496 = !DILocation(line: 964, column: 3, scope: !7495)
!7497 = !DILocation(line: 964, column: 3, scope: !7498)
!7498 = distinct !DILexicalBlock(scope: !7494, file: !3, line: 964, column: 3)
!7499 = !DILocation(line: 966, column: 22, scope: !7477)
!7500 = !DILocation(line: 966, column: 18, scope: !7477)
!7501 = !DILocation(line: 966, column: 25, scope: !7477)
!7502 = !DILocation(line: 966, column: 13, scope: !7477)
!7503 = !DILocation(line: 966, column: 3, scope: !7477)
!7504 = !DILocation(line: 966, column: 6, scope: !7477)
!7505 = !DILocation(line: 966, column: 9, scope: !7477)
!7506 = !DILocation(line: 966, column: 11, scope: !7477)
!7507 = !DILocation(line: 967, column: 22, scope: !7477)
!7508 = !DILocation(line: 967, column: 18, scope: !7477)
!7509 = !DILocation(line: 967, column: 25, scope: !7477)
!7510 = !DILocation(line: 967, column: 13, scope: !7477)
!7511 = !DILocation(line: 967, column: 3, scope: !7477)
!7512 = !DILocation(line: 967, column: 6, scope: !7477)
!7513 = !DILocation(line: 967, column: 9, scope: !7477)
!7514 = !DILocation(line: 967, column: 11, scope: !7477)
!7515 = !DILocation(line: 968, column: 22, scope: !7477)
!7516 = !DILocation(line: 968, column: 18, scope: !7477)
!7517 = !DILocation(line: 968, column: 25, scope: !7477)
!7518 = !DILocation(line: 968, column: 13, scope: !7477)
!7519 = !DILocation(line: 968, column: 3, scope: !7477)
!7520 = !DILocation(line: 968, column: 6, scope: !7477)
!7521 = !DILocation(line: 968, column: 9, scope: !7477)
!7522 = !DILocation(line: 968, column: 11, scope: !7477)
!7523 = !DILocation(line: 969, column: 22, scope: !7477)
!7524 = !DILocation(line: 969, column: 18, scope: !7477)
!7525 = !DILocation(line: 969, column: 25, scope: !7477)
!7526 = !DILocation(line: 969, column: 13, scope: !7477)
!7527 = !DILocation(line: 969, column: 3, scope: !7477)
!7528 = !DILocation(line: 969, column: 6, scope: !7477)
!7529 = !DILocation(line: 969, column: 9, scope: !7477)
!7530 = !DILocation(line: 969, column: 11, scope: !7477)
!7531 = !DILocation(line: 970, column: 2, scope: !7477)
!7532 = !DILocation(line: 957, column: 21, scope: !7471)
!7533 = !DILocation(line: 957, column: 2, scope: !7471)
!7534 = distinct !{!7534, !7473, !7535}
!7535 = !DILocation(line: 970, column: 2, scope: !7468)
!7536 = !DILocation(line: 971, column: 1, scope: !7294)
!7537 = distinct !DISubprogram(name: "layerSwap_mcol", scope: !3, file: !3, line: 973, type: !349, scopeLine: 974, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7538 = !DILocalVariable(name: "data", arg: 1, scope: !7537, file: !3, line: 973, type: !146)
!7539 = !DILocation(line: 973, column: 34, scope: !7537)
!7540 = !DILocalVariable(name: "corner_indices", arg: 2, scope: !7537, file: !3, line: 973, type: !351)
!7541 = !DILocation(line: 973, column: 51, scope: !7537)
!7542 = !DILocalVariable(name: "mcol", scope: !7537, file: !3, line: 975, type: !183)
!7543 = !DILocation(line: 975, column: 8, scope: !7537)
!7544 = !DILocation(line: 975, column: 15, scope: !7537)
!7545 = !DILocalVariable(name: "col", scope: !7537, file: !3, line: 976, type: !7546)
!7546 = !DICompositeType(tag: DW_TAG_array_type, baseType: !184, size: 128, elements: !410)
!7547 = !DILocation(line: 976, column: 7, scope: !7537)
!7548 = !DILocalVariable(name: "j", scope: !7537, file: !3, line: 977, type: !158)
!7549 = !DILocation(line: 977, column: 6, scope: !7537)
!7550 = !DILocation(line: 979, column: 9, scope: !7551)
!7551 = distinct !DILexicalBlock(scope: !7537, file: !3, line: 979, column: 2)
!7552 = !DILocation(line: 979, column: 7, scope: !7551)
!7553 = !DILocation(line: 979, column: 14, scope: !7554)
!7554 = distinct !DILexicalBlock(scope: !7551, file: !3, line: 979, column: 2)
!7555 = !DILocation(line: 979, column: 16, scope: !7554)
!7556 = !DILocation(line: 979, column: 2, scope: !7551)
!7557 = !DILocation(line: 980, column: 7, scope: !7554)
!7558 = !DILocation(line: 980, column: 3, scope: !7554)
!7559 = !DILocation(line: 980, column: 12, scope: !7554)
!7560 = !DILocation(line: 980, column: 17, scope: !7554)
!7561 = !DILocation(line: 980, column: 32, scope: !7554)
!7562 = !DILocation(line: 979, column: 21, scope: !7554)
!7563 = !DILocation(line: 979, column: 2, scope: !7554)
!7564 = distinct !{!7564, !7556, !7565}
!7565 = !DILocation(line: 980, column: 34, scope: !7551)
!7566 = !DILocation(line: 982, column: 9, scope: !7537)
!7567 = !DILocation(line: 982, column: 2, scope: !7537)
!7568 = !DILocation(line: 983, column: 1, scope: !7537)
!7569 = !DILocalVariable(name: "data", arg: 1, scope: !419, file: !3, line: 985, type: !146)
!7570 = !DILocation(line: 985, column: 37, scope: !419)
!7571 = !DILocalVariable(name: "count", arg: 2, scope: !419, file: !3, line: 985, type: !158)
!7572 = !DILocation(line: 985, column: 47, scope: !419)
!7573 = !DILocalVariable(name: "mcol", scope: !419, file: !3, line: 988, type: !183)
!7574 = !DILocation(line: 988, column: 8, scope: !419)
!7575 = !DILocation(line: 988, column: 23, scope: !419)
!7576 = !DILocation(line: 988, column: 15, scope: !419)
!7577 = !DILocalVariable(name: "i", scope: !419, file: !3, line: 989, type: !158)
!7578 = !DILocation(line: 989, column: 6, scope: !419)
!7579 = !DILocation(line: 991, column: 9, scope: !7580)
!7580 = distinct !DILexicalBlock(scope: !419, file: !3, line: 991, column: 2)
!7581 = !DILocation(line: 991, column: 7, scope: !7580)
!7582 = !DILocation(line: 991, column: 14, scope: !7583)
!7583 = distinct !DILexicalBlock(scope: !7580, file: !3, line: 991, column: 2)
!7584 = !DILocation(line: 991, column: 22, scope: !7583)
!7585 = !DILocation(line: 991, column: 20, scope: !7583)
!7586 = !DILocation(line: 991, column: 16, scope: !7583)
!7587 = !DILocation(line: 991, column: 2, scope: !7580)
!7588 = !DILocation(line: 992, column: 3, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7583, file: !3, line: 991, column: 34)
!7590 = !DILocation(line: 992, column: 8, scope: !7589)
!7591 = !DILocation(line: 992, column: 13, scope: !7589)
!7592 = !DILocation(line: 993, column: 2, scope: !7589)
!7593 = !DILocation(line: 991, column: 30, scope: !7583)
!7594 = !DILocation(line: 991, column: 2, scope: !7583)
!7595 = distinct !{!7595, !7587, !7596}
!7596 = !DILocation(line: 993, column: 2, scope: !7580)
!7597 = !DILocation(line: 994, column: 1, scope: !419)
!7598 = distinct !DISubprogram(name: "layerMaxNum_mloopcol", scope: !3, file: !3, line: 760, type: !402, scopeLine: 761, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7599 = !DILocation(line: 762, column: 2, scope: !7598)
!7600 = distinct !DISubprogram(name: "layerDefault_origindex", scope: !3, file: !3, line: 996, type: !355, scopeLine: 997, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7601 = !DILocalVariable(name: "data", arg: 1, scope: !7600, file: !3, line: 996, type: !146)
!7602 = !DILocation(line: 996, column: 42, scope: !7600)
!7603 = !DILocalVariable(name: "count", arg: 2, scope: !7600, file: !3, line: 996, type: !158)
!7604 = !DILocation(line: 996, column: 52, scope: !7600)
!7605 = !DILocation(line: 998, column: 19, scope: !7600)
!7606 = !DILocation(line: 998, column: 12, scope: !7600)
!7607 = !DILocation(line: 998, column: 25, scope: !7600)
!7608 = !DILocation(line: 998, column: 2, scope: !7600)
!7609 = !DILocation(line: 999, column: 1, scope: !7600)
!7610 = distinct !DISubprogram(name: "layerCopy_propFloat", scope: !3, file: !3, line: 394, type: !333, scopeLine: 396, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7611 = !DILocalVariable(name: "source", arg: 1, scope: !7610, file: !3, line: 394, type: !335)
!7612 = !DILocation(line: 394, column: 45, scope: !7610)
!7613 = !DILocalVariable(name: "dest", arg: 2, scope: !7610, file: !3, line: 394, type: !146)
!7614 = !DILocation(line: 394, column: 59, scope: !7610)
!7615 = !DILocalVariable(name: "count", arg: 3, scope: !7610, file: !3, line: 395, type: !158)
!7616 = !DILocation(line: 395, column: 37, scope: !7610)
!7617 = !DILocation(line: 397, column: 9, scope: !7610)
!7618 = !DILocation(line: 397, column: 15, scope: !7610)
!7619 = !DILocation(line: 397, column: 48, scope: !7610)
!7620 = !DILocation(line: 397, column: 46, scope: !7610)
!7621 = !DILocation(line: 397, column: 2, scope: !7610)
!7622 = !DILocation(line: 398, column: 1, scope: !7610)
!7623 = distinct !DISubprogram(name: "layerCopy_propInt", scope: !3, file: !3, line: 400, type: !333, scopeLine: 402, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7624 = !DILocalVariable(name: "source", arg: 1, scope: !7623, file: !3, line: 400, type: !335)
!7625 = !DILocation(line: 400, column: 43, scope: !7623)
!7626 = !DILocalVariable(name: "dest", arg: 2, scope: !7623, file: !3, line: 400, type: !146)
!7627 = !DILocation(line: 400, column: 57, scope: !7623)
!7628 = !DILocalVariable(name: "count", arg: 3, scope: !7623, file: !3, line: 401, type: !158)
!7629 = !DILocation(line: 401, column: 35, scope: !7623)
!7630 = !DILocation(line: 403, column: 9, scope: !7623)
!7631 = !DILocation(line: 403, column: 15, scope: !7623)
!7632 = !DILocation(line: 403, column: 46, scope: !7623)
!7633 = !DILocation(line: 403, column: 44, scope: !7623)
!7634 = !DILocation(line: 403, column: 2, scope: !7623)
!7635 = !DILocation(line: 404, column: 1, scope: !7623)
!7636 = distinct !DISubprogram(name: "layerCopy_propString", scope: !3, file: !3, line: 406, type: !333, scopeLine: 408, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7637 = !DILocalVariable(name: "source", arg: 1, scope: !7636, file: !3, line: 406, type: !335)
!7638 = !DILocation(line: 406, column: 46, scope: !7636)
!7639 = !DILocalVariable(name: "dest", arg: 2, scope: !7636, file: !3, line: 406, type: !146)
!7640 = !DILocation(line: 406, column: 60, scope: !7636)
!7641 = !DILocalVariable(name: "count", arg: 3, scope: !7636, file: !3, line: 407, type: !158)
!7642 = !DILocation(line: 407, column: 38, scope: !7636)
!7643 = !DILocation(line: 409, column: 9, scope: !7636)
!7644 = !DILocation(line: 409, column: 15, scope: !7636)
!7645 = !DILocation(line: 409, column: 49, scope: !7636)
!7646 = !DILocation(line: 409, column: 47, scope: !7636)
!7647 = !DILocation(line: 409, column: 2, scope: !7636)
!7648 = !DILocation(line: 410, column: 1, scope: !7636)
!7649 = distinct !DISubprogram(name: "layerCopy_origspace_face", scope: !3, file: !3, line: 412, type: !333, scopeLine: 413, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7650 = !DILocalVariable(name: "source", arg: 1, scope: !7649, file: !3, line: 412, type: !335)
!7651 = !DILocation(line: 412, column: 50, scope: !7649)
!7652 = !DILocalVariable(name: "dest", arg: 2, scope: !7649, file: !3, line: 412, type: !146)
!7653 = !DILocation(line: 412, column: 64, scope: !7649)
!7654 = !DILocalVariable(name: "count", arg: 3, scope: !7649, file: !3, line: 412, type: !158)
!7655 = !DILocation(line: 412, column: 74, scope: !7649)
!7656 = !DILocalVariable(name: "source_tf", scope: !7649, file: !3, line: 414, type: !192)
!7657 = !DILocation(line: 414, column: 23, scope: !7649)
!7658 = !DILocation(line: 414, column: 58, scope: !7649)
!7659 = !DILocation(line: 414, column: 35, scope: !7649)
!7660 = !DILocalVariable(name: "dest_tf", scope: !7649, file: !3, line: 415, type: !198)
!7661 = !DILocation(line: 415, column: 17, scope: !7649)
!7662 = !DILocation(line: 415, column: 44, scope: !7649)
!7663 = !DILocation(line: 415, column: 27, scope: !7649)
!7664 = !DILocalVariable(name: "i", scope: !7649, file: !3, line: 416, type: !158)
!7665 = !DILocation(line: 416, column: 6, scope: !7649)
!7666 = !DILocation(line: 418, column: 9, scope: !7667)
!7667 = distinct !DILexicalBlock(scope: !7649, file: !3, line: 418, column: 2)
!7668 = !DILocation(line: 418, column: 7, scope: !7667)
!7669 = !DILocation(line: 418, column: 14, scope: !7670)
!7670 = distinct !DILexicalBlock(scope: !7667, file: !3, line: 418, column: 2)
!7671 = !DILocation(line: 418, column: 18, scope: !7670)
!7672 = !DILocation(line: 418, column: 16, scope: !7670)
!7673 = !DILocation(line: 418, column: 2, scope: !7667)
!7674 = !DILocation(line: 419, column: 3, scope: !7670)
!7675 = !DILocation(line: 419, column: 11, scope: !7670)
!7676 = !DILocation(line: 419, column: 16, scope: !7670)
!7677 = !DILocation(line: 419, column: 26, scope: !7670)
!7678 = !DILocation(line: 418, column: 25, scope: !7670)
!7679 = !DILocation(line: 418, column: 2, scope: !7670)
!7680 = distinct !{!7680, !7673, !7681}
!7681 = !DILocation(line: 419, column: 27, scope: !7667)
!7682 = !DILocation(line: 420, column: 1, scope: !7649)
!7683 = distinct !DISubprogram(name: "layerInterp_origspace_face", scope: !3, file: !3, line: 422, type: !343, scopeLine: 424, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7684 = !DILocalVariable(name: "sources", arg: 1, scope: !7683, file: !3, line: 422, type: !222)
!7685 = !DILocation(line: 422, column: 47, scope: !7683)
!7686 = !DILocalVariable(name: "weights", arg: 2, scope: !7683, file: !3, line: 422, type: !345)
!7687 = !DILocation(line: 422, column: 69, scope: !7683)
!7688 = !DILocalVariable(name: "sub_weights", arg: 3, scope: !7683, file: !3, line: 423, type: !345)
!7689 = !DILocation(line: 423, column: 53, scope: !7683)
!7690 = !DILocalVariable(name: "count", arg: 4, scope: !7683, file: !3, line: 423, type: !158)
!7691 = !DILocation(line: 423, column: 70, scope: !7683)
!7692 = !DILocalVariable(name: "dest", arg: 5, scope: !7683, file: !3, line: 423, type: !146)
!7693 = !DILocation(line: 423, column: 83, scope: !7683)
!7694 = !DILocalVariable(name: "osf", scope: !7683, file: !3, line: 425, type: !198)
!7695 = !DILocation(line: 425, column: 17, scope: !7683)
!7696 = !DILocation(line: 425, column: 23, scope: !7683)
!7697 = !DILocalVariable(name: "i", scope: !7683, file: !3, line: 426, type: !158)
!7698 = !DILocation(line: 426, column: 6, scope: !7683)
!7699 = !DILocalVariable(name: "j", scope: !7683, file: !3, line: 426, type: !158)
!7700 = !DILocation(line: 426, column: 9, scope: !7683)
!7701 = !DILocalVariable(name: "k", scope: !7683, file: !3, line: 426, type: !158)
!7702 = !DILocation(line: 426, column: 12, scope: !7683)
!7703 = !DILocalVariable(name: "uv", scope: !7683, file: !3, line: 427, type: !169)
!7704 = !DILocation(line: 427, column: 8, scope: !7683)
!7705 = !DILocalVariable(name: "sub_weight", scope: !7683, file: !3, line: 428, type: !345)
!7706 = !DILocation(line: 428, column: 15, scope: !7683)
!7707 = !DILocation(line: 430, column: 6, scope: !7708)
!7708 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 430, column: 6)
!7709 = !DILocation(line: 430, column: 12, scope: !7708)
!7710 = !DILocation(line: 430, column: 6, scope: !7683)
!7711 = !DILocation(line: 430, column: 18, scope: !7708)
!7712 = !DILocation(line: 432, column: 15, scope: !7683)
!7713 = !DILocation(line: 432, column: 13, scope: !7683)
!7714 = !DILocation(line: 433, column: 9, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 433, column: 2)
!7716 = !DILocation(line: 433, column: 7, scope: !7715)
!7717 = !DILocation(line: 433, column: 14, scope: !7718)
!7718 = distinct !DILexicalBlock(scope: !7715, file: !3, line: 433, column: 2)
!7719 = !DILocation(line: 433, column: 18, scope: !7718)
!7720 = !DILocation(line: 433, column: 16, scope: !7718)
!7721 = !DILocation(line: 433, column: 2, scope: !7715)
!7722 = !DILocalVariable(name: "weight", scope: !7723, file: !3, line: 434, type: !160)
!7723 = distinct !DILexicalBlock(scope: !7718, file: !3, line: 433, column: 30)
!7724 = !DILocation(line: 434, column: 9, scope: !7723)
!7725 = !DILocation(line: 434, column: 18, scope: !7723)
!7726 = !DILocation(line: 434, column: 28, scope: !7723)
!7727 = !DILocation(line: 434, column: 36, scope: !7723)
!7728 = !DILocalVariable(name: "src", scope: !7723, file: !3, line: 435, type: !198)
!7729 = !DILocation(line: 435, column: 18, scope: !7723)
!7730 = !DILocation(line: 435, column: 24, scope: !7723)
!7731 = !DILocation(line: 435, column: 32, scope: !7723)
!7732 = !DILocation(line: 437, column: 10, scope: !7733)
!7733 = distinct !DILexicalBlock(scope: !7723, file: !3, line: 437, column: 3)
!7734 = !DILocation(line: 437, column: 8, scope: !7733)
!7735 = !DILocation(line: 437, column: 15, scope: !7736)
!7736 = distinct !DILexicalBlock(scope: !7733, file: !3, line: 437, column: 3)
!7737 = !DILocation(line: 437, column: 17, scope: !7736)
!7738 = !DILocation(line: 437, column: 3, scope: !7733)
!7739 = !DILocation(line: 438, column: 8, scope: !7740)
!7740 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 438, column: 8)
!7741 = distinct !DILexicalBlock(scope: !7736, file: !3, line: 437, column: 27)
!7742 = !DILocation(line: 438, column: 8, scope: !7741)
!7743 = !DILocation(line: 439, column: 12, scope: !7744)
!7744 = distinct !DILexicalBlock(scope: !7745, file: !3, line: 439, column: 5)
!7745 = distinct !DILexicalBlock(scope: !7740, file: !3, line: 438, column: 21)
!7746 = !DILocation(line: 439, column: 10, scope: !7744)
!7747 = !DILocation(line: 439, column: 17, scope: !7748)
!7748 = distinct !DILexicalBlock(scope: !7744, file: !3, line: 439, column: 5)
!7749 = !DILocation(line: 439, column: 19, scope: !7748)
!7750 = !DILocation(line: 439, column: 5, scope: !7744)
!7751 = !DILocation(line: 440, column: 22, scope: !7752)
!7752 = distinct !DILexicalBlock(scope: !7748, file: !3, line: 439, column: 43)
!7753 = !DILocation(line: 440, column: 19, scope: !7752)
!7754 = !DILocation(line: 440, column: 26, scope: !7752)
!7755 = !DILocation(line: 440, column: 31, scope: !7752)
!7756 = !DILocation(line: 440, column: 34, scope: !7752)
!7757 = !DILocation(line: 440, column: 40, scope: !7752)
!7758 = !DILocation(line: 440, column: 39, scope: !7752)
!7759 = !DILocation(line: 440, column: 54, scope: !7752)
!7760 = !DILocation(line: 440, column: 52, scope: !7752)
!7761 = !DILocation(line: 440, column: 6, scope: !7752)
!7762 = !DILocation(line: 441, column: 5, scope: !7752)
!7763 = !DILocation(line: 439, column: 24, scope: !7748)
!7764 = !DILocation(line: 439, column: 29, scope: !7748)
!7765 = !DILocation(line: 439, column: 5, scope: !7748)
!7766 = distinct !{!7766, !7750, !7767}
!7767 = !DILocation(line: 441, column: 5, scope: !7744)
!7768 = !DILocation(line: 442, column: 4, scope: !7745)
!7769 = !DILocation(line: 444, column: 21, scope: !7770)
!7770 = distinct !DILexicalBlock(scope: !7740, file: !3, line: 443, column: 9)
!7771 = !DILocation(line: 444, column: 18, scope: !7770)
!7772 = !DILocation(line: 444, column: 25, scope: !7770)
!7773 = !DILocation(line: 444, column: 30, scope: !7770)
!7774 = !DILocation(line: 444, column: 33, scope: !7770)
!7775 = !DILocation(line: 444, column: 37, scope: !7770)
!7776 = !DILocation(line: 444, column: 5, scope: !7770)
!7777 = !DILocation(line: 446, column: 3, scope: !7741)
!7778 = !DILocation(line: 437, column: 22, scope: !7736)
!7779 = !DILocation(line: 437, column: 3, scope: !7736)
!7780 = distinct !{!7780, !7738, !7781}
!7781 = !DILocation(line: 446, column: 3, scope: !7733)
!7782 = !DILocation(line: 447, column: 2, scope: !7723)
!7783 = !DILocation(line: 433, column: 25, scope: !7718)
!7784 = !DILocation(line: 433, column: 2, scope: !7718)
!7785 = distinct !{!7785, !7721, !7786}
!7786 = !DILocation(line: 447, column: 2, scope: !7715)
!7787 = !DILocation(line: 454, column: 9, scope: !7683)
!7788 = !DILocation(line: 454, column: 14, scope: !7683)
!7789 = !DILocation(line: 454, column: 2, scope: !7683)
!7790 = !DILocation(line: 455, column: 1, scope: !7683)
!7791 = distinct !DISubprogram(name: "layerSwap_origspace_face", scope: !3, file: !3, line: 457, type: !349, scopeLine: 458, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7792 = !DILocalVariable(name: "data", arg: 1, scope: !7791, file: !3, line: 457, type: !146)
!7793 = !DILocation(line: 457, column: 44, scope: !7791)
!7794 = !DILocalVariable(name: "corner_indices", arg: 2, scope: !7791, file: !3, line: 457, type: !351)
!7795 = !DILocation(line: 457, column: 61, scope: !7791)
!7796 = !DILocalVariable(name: "osf", scope: !7791, file: !3, line: 459, type: !198)
!7797 = !DILocation(line: 459, column: 17, scope: !7791)
!7798 = !DILocation(line: 459, column: 23, scope: !7791)
!7799 = !DILocalVariable(name: "uv", scope: !7791, file: !3, line: 460, type: !169)
!7800 = !DILocation(line: 460, column: 8, scope: !7791)
!7801 = !DILocalVariable(name: "j", scope: !7791, file: !3, line: 461, type: !158)
!7802 = !DILocation(line: 461, column: 6, scope: !7791)
!7803 = !DILocation(line: 463, column: 9, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7791, file: !3, line: 463, column: 2)
!7805 = !DILocation(line: 463, column: 7, scope: !7804)
!7806 = !DILocation(line: 463, column: 14, scope: !7807)
!7807 = distinct !DILexicalBlock(scope: !7804, file: !3, line: 463, column: 2)
!7808 = !DILocation(line: 463, column: 16, scope: !7807)
!7809 = !DILocation(line: 463, column: 2, scope: !7804)
!7810 = !DILocation(line: 464, column: 17, scope: !7811)
!7811 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 463, column: 26)
!7812 = !DILocation(line: 464, column: 14, scope: !7811)
!7813 = !DILocation(line: 464, column: 21, scope: !7811)
!7814 = !DILocation(line: 464, column: 26, scope: !7811)
!7815 = !DILocation(line: 464, column: 29, scope: !7811)
!7816 = !DILocation(line: 464, column: 44, scope: !7811)
!7817 = !DILocation(line: 464, column: 3, scope: !7811)
!7818 = !DILocation(line: 465, column: 2, scope: !7811)
!7819 = !DILocation(line: 463, column: 21, scope: !7807)
!7820 = !DILocation(line: 463, column: 2, scope: !7807)
!7821 = distinct !{!7821, !7809, !7822}
!7822 = !DILocation(line: 465, column: 2, scope: !7804)
!7823 = !DILocation(line: 466, column: 9, scope: !7791)
!7824 = !DILocation(line: 466, column: 14, scope: !7791)
!7825 = !DILocation(line: 466, column: 2, scope: !7791)
!7826 = !DILocation(line: 467, column: 1, scope: !7791)
!7827 = !DILocalVariable(name: "data", arg: 1, scope: !422, file: !3, line: 469, type: !146)
!7828 = !DILocation(line: 469, column: 47, scope: !422)
!7829 = !DILocalVariable(name: "count", arg: 2, scope: !422, file: !3, line: 469, type: !158)
!7830 = !DILocation(line: 469, column: 57, scope: !422)
!7831 = !DILocalVariable(name: "osf", scope: !422, file: !3, line: 472, type: !198)
!7832 = !DILocation(line: 472, column: 17, scope: !422)
!7833 = !DILocation(line: 472, column: 40, scope: !422)
!7834 = !DILocation(line: 472, column: 23, scope: !422)
!7835 = !DILocalVariable(name: "i", scope: !422, file: !3, line: 473, type: !158)
!7836 = !DILocation(line: 473, column: 6, scope: !422)
!7837 = !DILocation(line: 475, column: 9, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !422, file: !3, line: 475, column: 2)
!7839 = !DILocation(line: 475, column: 7, scope: !7838)
!7840 = !DILocation(line: 475, column: 14, scope: !7841)
!7841 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 475, column: 2)
!7842 = !DILocation(line: 475, column: 18, scope: !7841)
!7843 = !DILocation(line: 475, column: 16, scope: !7841)
!7844 = !DILocation(line: 475, column: 2, scope: !7838)
!7845 = !DILocation(line: 476, column: 3, scope: !7841)
!7846 = !DILocation(line: 476, column: 7, scope: !7841)
!7847 = !DILocation(line: 476, column: 12, scope: !7841)
!7848 = !DILocation(line: 475, column: 26, scope: !7841)
!7849 = !DILocation(line: 475, column: 2, scope: !7841)
!7850 = distinct !{!7850, !7844, !7851}
!7851 = !DILocation(line: 476, column: 12, scope: !7838)
!7852 = !DILocation(line: 477, column: 1, scope: !422)
!7853 = distinct !DISubprogram(name: "layerInterp_mloopuv", scope: !3, file: !3, line: 810, type: !343, scopeLine: 812, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7854 = !DILocalVariable(name: "sources", arg: 1, scope: !7853, file: !3, line: 810, type: !222)
!7855 = !DILocation(line: 810, column: 40, scope: !7853)
!7856 = !DILocalVariable(name: "weights", arg: 2, scope: !7853, file: !3, line: 810, type: !345)
!7857 = !DILocation(line: 810, column: 62, scope: !7853)
!7858 = !DILocalVariable(name: "sub_weights", arg: 3, scope: !7853, file: !3, line: 811, type: !345)
!7859 = !DILocation(line: 811, column: 46, scope: !7853)
!7860 = !DILocalVariable(name: "count", arg: 4, scope: !7853, file: !3, line: 811, type: !158)
!7861 = !DILocation(line: 811, column: 63, scope: !7853)
!7862 = !DILocalVariable(name: "dest", arg: 5, scope: !7853, file: !3, line: 811, type: !146)
!7863 = !DILocation(line: 811, column: 76, scope: !7853)
!7864 = !DILocalVariable(name: "uv", scope: !7853, file: !3, line: 813, type: !204)
!7865 = !DILocation(line: 813, column: 8, scope: !7853)
!7866 = !DILocalVariable(name: "i", scope: !7853, file: !3, line: 814, type: !158)
!7867 = !DILocation(line: 814, column: 6, scope: !7853)
!7868 = !DILocation(line: 816, column: 10, scope: !7853)
!7869 = !DILocation(line: 816, column: 2, scope: !7853)
!7870 = !DILocation(line: 818, column: 6, scope: !7871)
!7871 = distinct !DILexicalBlock(scope: !7853, file: !3, line: 818, column: 6)
!7872 = !DILocation(line: 818, column: 6, scope: !7853)
!7873 = !DILocalVariable(name: "sub_weight", scope: !7874, file: !3, line: 819, type: !345)
!7874 = distinct !DILexicalBlock(scope: !7871, file: !3, line: 818, column: 19)
!7875 = !DILocation(line: 819, column: 16, scope: !7874)
!7876 = !DILocation(line: 819, column: 29, scope: !7874)
!7877 = !DILocation(line: 820, column: 10, scope: !7878)
!7878 = distinct !DILexicalBlock(scope: !7874, file: !3, line: 820, column: 3)
!7879 = !DILocation(line: 820, column: 8, scope: !7878)
!7880 = !DILocation(line: 820, column: 15, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 820, column: 3)
!7882 = !DILocation(line: 820, column: 19, scope: !7881)
!7883 = !DILocation(line: 820, column: 17, scope: !7881)
!7884 = !DILocation(line: 820, column: 3, scope: !7878)
!7885 = !DILocalVariable(name: "weight", scope: !7886, file: !3, line: 821, type: !160)
!7886 = distinct !DILexicalBlock(scope: !7881, file: !3, line: 820, column: 31)
!7887 = !DILocation(line: 821, column: 10, scope: !7886)
!7888 = !DILocation(line: 821, column: 19, scope: !7886)
!7889 = !DILocation(line: 821, column: 29, scope: !7886)
!7890 = !DILocation(line: 821, column: 37, scope: !7886)
!7891 = !DILocalVariable(name: "src", scope: !7886, file: !3, line: 822, type: !199)
!7892 = !DILocation(line: 822, column: 13, scope: !7886)
!7893 = !DILocation(line: 822, column: 19, scope: !7886)
!7894 = !DILocation(line: 822, column: 27, scope: !7886)
!7895 = !DILocation(line: 823, column: 17, scope: !7886)
!7896 = !DILocation(line: 823, column: 21, scope: !7886)
!7897 = !DILocation(line: 823, column: 26, scope: !7886)
!7898 = !DILocation(line: 823, column: 32, scope: !7886)
!7899 = !DILocation(line: 823, column: 31, scope: !7886)
!7900 = !DILocation(line: 823, column: 46, scope: !7886)
!7901 = !DILocation(line: 823, column: 44, scope: !7886)
!7902 = !DILocation(line: 823, column: 4, scope: !7886)
!7903 = !DILocation(line: 824, column: 14, scope: !7886)
!7904 = !DILocation(line: 825, column: 3, scope: !7886)
!7905 = !DILocation(line: 820, column: 27, scope: !7881)
!7906 = !DILocation(line: 820, column: 3, scope: !7881)
!7907 = distinct !{!7907, !7884, !7908}
!7908 = !DILocation(line: 825, column: 3, scope: !7878)
!7909 = !DILocation(line: 826, column: 2, scope: !7874)
!7910 = !DILocation(line: 828, column: 10, scope: !7911)
!7911 = distinct !DILexicalBlock(scope: !7912, file: !3, line: 828, column: 3)
!7912 = distinct !DILexicalBlock(scope: !7871, file: !3, line: 827, column: 7)
!7913 = !DILocation(line: 828, column: 8, scope: !7911)
!7914 = !DILocation(line: 828, column: 15, scope: !7915)
!7915 = distinct !DILexicalBlock(scope: !7911, file: !3, line: 828, column: 3)
!7916 = !DILocation(line: 828, column: 19, scope: !7915)
!7917 = !DILocation(line: 828, column: 17, scope: !7915)
!7918 = !DILocation(line: 828, column: 3, scope: !7911)
!7919 = !DILocalVariable(name: "weight", scope: !7920, file: !3, line: 829, type: !160)
!7920 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 828, column: 31)
!7921 = !DILocation(line: 829, column: 10, scope: !7920)
!7922 = !DILocation(line: 829, column: 19, scope: !7920)
!7923 = !DILocation(line: 829, column: 29, scope: !7920)
!7924 = !DILocation(line: 829, column: 37, scope: !7920)
!7925 = !DILocalVariable(name: "src", scope: !7920, file: !3, line: 830, type: !199)
!7926 = !DILocation(line: 830, column: 13, scope: !7920)
!7927 = !DILocation(line: 830, column: 19, scope: !7920)
!7928 = !DILocation(line: 830, column: 27, scope: !7920)
!7929 = !DILocation(line: 831, column: 17, scope: !7920)
!7930 = !DILocation(line: 831, column: 21, scope: !7920)
!7931 = !DILocation(line: 831, column: 26, scope: !7920)
!7932 = !DILocation(line: 831, column: 30, scope: !7920)
!7933 = !DILocation(line: 831, column: 4, scope: !7920)
!7934 = !DILocation(line: 832, column: 3, scope: !7920)
!7935 = !DILocation(line: 828, column: 27, scope: !7915)
!7936 = !DILocation(line: 828, column: 3, scope: !7915)
!7937 = distinct !{!7937, !7918, !7938}
!7938 = !DILocation(line: 832, column: 3, scope: !7911)
!7939 = !DILocation(line: 836, column: 25, scope: !7853)
!7940 = !DILocation(line: 836, column: 14, scope: !7853)
!7941 = !DILocation(line: 836, column: 32, scope: !7853)
!7942 = !DILocation(line: 836, column: 13, scope: !7853)
!7943 = !DILocation(line: 836, column: 36, scope: !7853)
!7944 = !DILocation(line: 836, column: 2, scope: !7853)
!7945 = !DILocation(line: 837, column: 1, scope: !7853)
!7946 = distinct !DISubprogram(name: "layerEqual_mloopuv", scope: !3, file: !3, line: 773, type: !359, scopeLine: 774, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7947 = !DILocalVariable(name: "data1", arg: 1, scope: !7946, file: !3, line: 773, type: !335)
!7948 = !DILocation(line: 773, column: 44, scope: !7946)
!7949 = !DILocalVariable(name: "data2", arg: 2, scope: !7946, file: !3, line: 773, type: !335)
!7950 = !DILocation(line: 773, column: 63, scope: !7946)
!7951 = !DILocalVariable(name: "luv1", scope: !7946, file: !3, line: 775, type: !7952)
!7952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7953, size: 64)
!7953 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !200)
!7954 = !DILocation(line: 775, column: 17, scope: !7946)
!7955 = !DILocation(line: 775, column: 24, scope: !7946)
!7956 = !DILocalVariable(name: "luv2", scope: !7946, file: !3, line: 775, type: !7952)
!7957 = !DILocation(line: 775, column: 32, scope: !7946)
!7958 = !DILocation(line: 775, column: 39, scope: !7946)
!7959 = !DILocation(line: 777, column: 26, scope: !7946)
!7960 = !DILocation(line: 777, column: 32, scope: !7946)
!7961 = !DILocation(line: 777, column: 36, scope: !7946)
!7962 = !DILocation(line: 777, column: 42, scope: !7946)
!7963 = !DILocation(line: 777, column: 9, scope: !7946)
!7964 = !DILocation(line: 777, column: 46, scope: !7946)
!7965 = !DILocation(line: 777, column: 2, scope: !7946)
!7966 = distinct !DISubprogram(name: "layerMultiply_mloopuv", scope: !3, file: !3, line: 780, type: !364, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7967 = !DILocalVariable(name: "data", arg: 1, scope: !7966, file: !3, line: 780, type: !146)
!7968 = !DILocation(line: 780, column: 41, scope: !7966)
!7969 = !DILocalVariable(name: "fac", arg: 2, scope: !7966, file: !3, line: 780, type: !160)
!7970 = !DILocation(line: 780, column: 53, scope: !7966)
!7971 = !DILocalVariable(name: "luv", scope: !7966, file: !3, line: 782, type: !199)
!7972 = !DILocation(line: 782, column: 11, scope: !7966)
!7973 = !DILocation(line: 782, column: 17, scope: !7966)
!7974 = !DILocation(line: 784, column: 12, scope: !7966)
!7975 = !DILocation(line: 784, column: 17, scope: !7966)
!7976 = !DILocation(line: 784, column: 21, scope: !7966)
!7977 = !DILocation(line: 784, column: 2, scope: !7966)
!7978 = !DILocation(line: 785, column: 1, scope: !7966)
!7979 = distinct !DISubprogram(name: "layerInitMinMax_mloopuv", scope: !3, file: !3, line: 787, type: !368, scopeLine: 788, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7980 = !DILocalVariable(name: "vmin", arg: 1, scope: !7979, file: !3, line: 787, type: !146)
!7981 = !DILocation(line: 787, column: 43, scope: !7979)
!7982 = !DILocalVariable(name: "vmax", arg: 2, scope: !7979, file: !3, line: 787, type: !146)
!7983 = !DILocation(line: 787, column: 55, scope: !7979)
!7984 = !DILocalVariable(name: "min", scope: !7979, file: !3, line: 789, type: !199)
!7985 = !DILocation(line: 789, column: 11, scope: !7979)
!7986 = !DILocation(line: 789, column: 17, scope: !7979)
!7987 = !DILocalVariable(name: "max", scope: !7979, file: !3, line: 789, type: !199)
!7988 = !DILocation(line: 789, column: 24, scope: !7979)
!7989 = !DILocation(line: 789, column: 30, scope: !7979)
!7990 = !DILocation(line: 791, column: 2, scope: !7991)
!7991 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 791, column: 2)
!7992 = !DILocation(line: 792, column: 1, scope: !7979)
!7993 = distinct !DISubprogram(name: "layerAdd_mloopuv", scope: !3, file: !3, line: 802, type: !372, scopeLine: 803, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!7994 = !DILocalVariable(name: "data1", arg: 1, scope: !7993, file: !3, line: 802, type: !146)
!7995 = !DILocation(line: 802, column: 36, scope: !7993)
!7996 = !DILocalVariable(name: "data2", arg: 2, scope: !7993, file: !3, line: 802, type: !335)
!7997 = !DILocation(line: 802, column: 55, scope: !7993)
!7998 = !DILocalVariable(name: "l1", scope: !7993, file: !3, line: 804, type: !199)
!7999 = !DILocation(line: 804, column: 11, scope: !7993)
!8000 = !DILocation(line: 804, column: 16, scope: !7993)
!8001 = !DILocalVariable(name: "l2", scope: !7993, file: !3, line: 805, type: !7952)
!8002 = !DILocation(line: 805, column: 17, scope: !7993)
!8003 = !DILocation(line: 805, column: 22, scope: !7993)
!8004 = !DILocation(line: 807, column: 12, scope: !7993)
!8005 = !DILocation(line: 807, column: 16, scope: !7993)
!8006 = !DILocation(line: 807, column: 20, scope: !7993)
!8007 = !DILocation(line: 807, column: 24, scope: !7993)
!8008 = !DILocation(line: 807, column: 2, scope: !7993)
!8009 = !DILocation(line: 808, column: 1, scope: !7993)
!8010 = distinct !DISubprogram(name: "layerDoMinMax_mloopuv", scope: !3, file: !3, line: 794, type: !376, scopeLine: 795, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8011 = !DILocalVariable(name: "data", arg: 1, scope: !8010, file: !3, line: 794, type: !335)
!8012 = !DILocation(line: 794, column: 47, scope: !8010)
!8013 = !DILocalVariable(name: "vmin", arg: 2, scope: !8010, file: !3, line: 794, type: !146)
!8014 = !DILocation(line: 794, column: 59, scope: !8010)
!8015 = !DILocalVariable(name: "vmax", arg: 3, scope: !8010, file: !3, line: 794, type: !146)
!8016 = !DILocation(line: 794, column: 71, scope: !8010)
!8017 = !DILocalVariable(name: "luv", scope: !8010, file: !3, line: 796, type: !7952)
!8018 = !DILocation(line: 796, column: 17, scope: !8010)
!8019 = !DILocation(line: 796, column: 23, scope: !8010)
!8020 = !DILocalVariable(name: "min", scope: !8010, file: !3, line: 797, type: !199)
!8021 = !DILocation(line: 797, column: 11, scope: !8010)
!8022 = !DILocation(line: 797, column: 17, scope: !8010)
!8023 = !DILocalVariable(name: "max", scope: !8010, file: !3, line: 797, type: !199)
!8024 = !DILocation(line: 797, column: 24, scope: !8010)
!8025 = !DILocation(line: 797, column: 30, scope: !8010)
!8026 = !DILocation(line: 799, column: 17, scope: !8010)
!8027 = !DILocation(line: 799, column: 22, scope: !8010)
!8028 = !DILocation(line: 799, column: 26, scope: !8010)
!8029 = !DILocation(line: 799, column: 31, scope: !8010)
!8030 = !DILocation(line: 799, column: 35, scope: !8010)
!8031 = !DILocation(line: 799, column: 40, scope: !8010)
!8032 = !DILocation(line: 799, column: 2, scope: !8010)
!8033 = !DILocation(line: 800, column: 1, scope: !8010)
!8034 = distinct !DISubprogram(name: "layerCopyValue_mloopuv", scope: !3, file: !3, line: 765, type: !380, scopeLine: 766, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8035 = !DILocalVariable(name: "source", arg: 1, scope: !8034, file: !3, line: 765, type: !335)
!8036 = !DILocation(line: 765, column: 48, scope: !8034)
!8037 = !DILocalVariable(name: "dest", arg: 2, scope: !8034, file: !3, line: 765, type: !146)
!8038 = !DILocation(line: 765, column: 62, scope: !8034)
!8039 = !DILocalVariable(name: "luv1", scope: !8034, file: !3, line: 767, type: !7952)
!8040 = !DILocation(line: 767, column: 17, scope: !8034)
!8041 = !DILocation(line: 767, column: 24, scope: !8034)
!8042 = !DILocalVariable(name: "luv2", scope: !8034, file: !3, line: 768, type: !199)
!8043 = !DILocation(line: 768, column: 11, scope: !8034)
!8044 = !DILocation(line: 768, column: 18, scope: !8034)
!8045 = !DILocation(line: 770, column: 13, scope: !8034)
!8046 = !DILocation(line: 770, column: 19, scope: !8034)
!8047 = !DILocation(line: 770, column: 23, scope: !8034)
!8048 = !DILocation(line: 770, column: 29, scope: !8034)
!8049 = !DILocation(line: 770, column: 2, scope: !8034)
!8050 = !DILocation(line: 771, column: 1, scope: !8034)
!8051 = distinct !DISubprogram(name: "layerInterp_mloopcol", scope: !3, file: !3, line: 713, type: !343, scopeLine: 715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8052 = !DILocalVariable(name: "sources", arg: 1, scope: !8051, file: !3, line: 713, type: !222)
!8053 = !DILocation(line: 713, column: 41, scope: !8051)
!8054 = !DILocalVariable(name: "weights", arg: 2, scope: !8051, file: !3, line: 713, type: !345)
!8055 = !DILocation(line: 713, column: 63, scope: !8051)
!8056 = !DILocalVariable(name: "sub_weights", arg: 3, scope: !8051, file: !3, line: 714, type: !345)
!8057 = !DILocation(line: 714, column: 47, scope: !8051)
!8058 = !DILocalVariable(name: "count", arg: 4, scope: !8051, file: !3, line: 714, type: !158)
!8059 = !DILocation(line: 714, column: 64, scope: !8051)
!8060 = !DILocalVariable(name: "dest", arg: 5, scope: !8051, file: !3, line: 714, type: !146)
!8061 = !DILocation(line: 714, column: 77, scope: !8051)
!8062 = !DILocalVariable(name: "mc", scope: !8051, file: !3, line: 716, type: !207)
!8063 = !DILocation(line: 716, column: 12, scope: !8051)
!8064 = !DILocation(line: 716, column: 17, scope: !8051)
!8065 = !DILocalVariable(name: "i", scope: !8051, file: !3, line: 717, type: !158)
!8066 = !DILocation(line: 717, column: 6, scope: !8051)
!8067 = !DILocalVariable(name: "sub_weight", scope: !8051, file: !3, line: 718, type: !345)
!8068 = !DILocation(line: 718, column: 15, scope: !8051)
!8069 = !DILocalVariable(name: "col", scope: !8051, file: !3, line: 724, type: !8070)
!8070 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !8051, file: !3, line: 719, size: 128, elements: !8071)
!8071 = !{!8072, !8073, !8074, !8075}
!8072 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !8070, file: !3, line: 720, baseType: !160, size: 32)
!8073 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !8070, file: !3, line: 721, baseType: !160, size: 32, offset: 32)
!8074 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !8070, file: !3, line: 722, baseType: !160, size: 32, offset: 64)
!8075 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !8070, file: !3, line: 723, baseType: !160, size: 32, offset: 96)
!8076 = !DILocation(line: 724, column: 4, scope: !8051)
!8077 = !DILocation(line: 725, column: 30, scope: !8051)
!8078 = !DILocation(line: 725, column: 32, scope: !8051)
!8079 = !DILocation(line: 725, column: 22, scope: !8051)
!8080 = !DILocation(line: 725, column: 24, scope: !8051)
!8081 = !DILocation(line: 725, column: 14, scope: !8051)
!8082 = !DILocation(line: 725, column: 16, scope: !8051)
!8083 = !DILocation(line: 725, column: 6, scope: !8051)
!8084 = !DILocation(line: 725, column: 8, scope: !8051)
!8085 = !DILocation(line: 727, column: 15, scope: !8051)
!8086 = !DILocation(line: 727, column: 13, scope: !8051)
!8087 = !DILocation(line: 728, column: 9, scope: !8088)
!8088 = distinct !DILexicalBlock(scope: !8051, file: !3, line: 728, column: 2)
!8089 = !DILocation(line: 728, column: 7, scope: !8088)
!8090 = !DILocation(line: 728, column: 14, scope: !8091)
!8091 = distinct !DILexicalBlock(scope: !8088, file: !3, line: 728, column: 2)
!8092 = !DILocation(line: 728, column: 18, scope: !8091)
!8093 = !DILocation(line: 728, column: 16, scope: !8091)
!8094 = !DILocation(line: 728, column: 2, scope: !8088)
!8095 = !DILocalVariable(name: "weight", scope: !8096, file: !3, line: 729, type: !160)
!8096 = distinct !DILexicalBlock(scope: !8091, file: !3, line: 728, column: 30)
!8097 = !DILocation(line: 729, column: 9, scope: !8096)
!8098 = !DILocation(line: 729, column: 18, scope: !8096)
!8099 = !DILocation(line: 729, column: 28, scope: !8096)
!8100 = !DILocation(line: 729, column: 36, scope: !8096)
!8101 = !DILocalVariable(name: "src", scope: !8096, file: !3, line: 730, type: !207)
!8102 = !DILocation(line: 730, column: 13, scope: !8096)
!8103 = !DILocation(line: 730, column: 19, scope: !8096)
!8104 = !DILocation(line: 730, column: 27, scope: !8096)
!8105 = !DILocation(line: 731, column: 7, scope: !8106)
!8106 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 731, column: 7)
!8107 = !DILocation(line: 731, column: 7, scope: !8096)
!8108 = !DILocation(line: 732, column: 13, scope: !8109)
!8109 = distinct !DILexicalBlock(scope: !8106, file: !3, line: 731, column: 20)
!8110 = !DILocation(line: 732, column: 18, scope: !8109)
!8111 = !DILocation(line: 732, column: 24, scope: !8109)
!8112 = !DILocation(line: 732, column: 23, scope: !8109)
!8113 = !DILocation(line: 732, column: 20, scope: !8109)
!8114 = !DILocation(line: 732, column: 38, scope: !8109)
!8115 = !DILocation(line: 732, column: 36, scope: !8109)
!8116 = !DILocation(line: 732, column: 8, scope: !8109)
!8117 = !DILocation(line: 732, column: 10, scope: !8109)
!8118 = !DILocation(line: 733, column: 13, scope: !8109)
!8119 = !DILocation(line: 733, column: 18, scope: !8109)
!8120 = !DILocation(line: 733, column: 24, scope: !8109)
!8121 = !DILocation(line: 733, column: 23, scope: !8109)
!8122 = !DILocation(line: 733, column: 20, scope: !8109)
!8123 = !DILocation(line: 733, column: 38, scope: !8109)
!8124 = !DILocation(line: 733, column: 36, scope: !8109)
!8125 = !DILocation(line: 733, column: 8, scope: !8109)
!8126 = !DILocation(line: 733, column: 10, scope: !8109)
!8127 = !DILocation(line: 734, column: 13, scope: !8109)
!8128 = !DILocation(line: 734, column: 18, scope: !8109)
!8129 = !DILocation(line: 734, column: 24, scope: !8109)
!8130 = !DILocation(line: 734, column: 23, scope: !8109)
!8131 = !DILocation(line: 734, column: 20, scope: !8109)
!8132 = !DILocation(line: 734, column: 38, scope: !8109)
!8133 = !DILocation(line: 734, column: 36, scope: !8109)
!8134 = !DILocation(line: 734, column: 8, scope: !8109)
!8135 = !DILocation(line: 734, column: 10, scope: !8109)
!8136 = !DILocation(line: 735, column: 13, scope: !8109)
!8137 = !DILocation(line: 735, column: 18, scope: !8109)
!8138 = !DILocation(line: 735, column: 24, scope: !8109)
!8139 = !DILocation(line: 735, column: 23, scope: !8109)
!8140 = !DILocation(line: 735, column: 20, scope: !8109)
!8141 = !DILocation(line: 735, column: 38, scope: !8109)
!8142 = !DILocation(line: 735, column: 36, scope: !8109)
!8143 = !DILocation(line: 735, column: 8, scope: !8109)
!8144 = !DILocation(line: 735, column: 10, scope: !8109)
!8145 = !DILocation(line: 736, column: 14, scope: !8109)
!8146 = !DILocation(line: 737, column: 3, scope: !8109)
!8147 = !DILocation(line: 739, column: 13, scope: !8148)
!8148 = distinct !DILexicalBlock(scope: !8106, file: !3, line: 738, column: 8)
!8149 = !DILocation(line: 739, column: 18, scope: !8148)
!8150 = !DILocation(line: 739, column: 22, scope: !8148)
!8151 = !DILocation(line: 739, column: 20, scope: !8148)
!8152 = !DILocation(line: 739, column: 8, scope: !8148)
!8153 = !DILocation(line: 739, column: 10, scope: !8148)
!8154 = !DILocation(line: 740, column: 13, scope: !8148)
!8155 = !DILocation(line: 740, column: 18, scope: !8148)
!8156 = !DILocation(line: 740, column: 22, scope: !8148)
!8157 = !DILocation(line: 740, column: 20, scope: !8148)
!8158 = !DILocation(line: 740, column: 8, scope: !8148)
!8159 = !DILocation(line: 740, column: 10, scope: !8148)
!8160 = !DILocation(line: 741, column: 13, scope: !8148)
!8161 = !DILocation(line: 741, column: 18, scope: !8148)
!8162 = !DILocation(line: 741, column: 22, scope: !8148)
!8163 = !DILocation(line: 741, column: 20, scope: !8148)
!8164 = !DILocation(line: 741, column: 8, scope: !8148)
!8165 = !DILocation(line: 741, column: 10, scope: !8148)
!8166 = !DILocation(line: 742, column: 13, scope: !8148)
!8167 = !DILocation(line: 742, column: 18, scope: !8148)
!8168 = !DILocation(line: 742, column: 22, scope: !8148)
!8169 = !DILocation(line: 742, column: 20, scope: !8148)
!8170 = !DILocation(line: 742, column: 8, scope: !8148)
!8171 = !DILocation(line: 742, column: 10, scope: !8148)
!8172 = !DILocation(line: 744, column: 2, scope: !8096)
!8173 = !DILocation(line: 728, column: 25, scope: !8091)
!8174 = !DILocation(line: 728, column: 2, scope: !8091)
!8175 = distinct !{!8175, !8094, !8176}
!8176 = !DILocation(line: 744, column: 2, scope: !8088)
!8177 = !DILocation(line: 748, column: 2, scope: !8178)
!8178 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 748, column: 2)
!8179 = distinct !DILexicalBlock(scope: !8051, file: !3, line: 748, column: 2)
!8180 = !DILocation(line: 748, column: 2, scope: !8179)
!8181 = !DILocation(line: 748, column: 2, scope: !8182)
!8182 = distinct !DILexicalBlock(scope: !8178, file: !3, line: 748, column: 2)
!8183 = !DILocation(line: 749, column: 2, scope: !8184)
!8184 = distinct !DILexicalBlock(scope: !8185, file: !3, line: 749, column: 2)
!8185 = distinct !DILexicalBlock(scope: !8051, file: !3, line: 749, column: 2)
!8186 = !DILocation(line: 749, column: 2, scope: !8185)
!8187 = !DILocation(line: 749, column: 2, scope: !8188)
!8188 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 749, column: 2)
!8189 = !DILocation(line: 750, column: 2, scope: !8190)
!8190 = distinct !DILexicalBlock(scope: !8191, file: !3, line: 750, column: 2)
!8191 = distinct !DILexicalBlock(scope: !8051, file: !3, line: 750, column: 2)
!8192 = !DILocation(line: 750, column: 2, scope: !8191)
!8193 = !DILocation(line: 750, column: 2, scope: !8194)
!8194 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 750, column: 2)
!8195 = !DILocation(line: 751, column: 2, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8197, file: !3, line: 751, column: 2)
!8197 = distinct !DILexicalBlock(scope: !8051, file: !3, line: 751, column: 2)
!8198 = !DILocation(line: 751, column: 2, scope: !8197)
!8199 = !DILocation(line: 751, column: 2, scope: !8200)
!8200 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 751, column: 2)
!8201 = !DILocation(line: 754, column: 19, scope: !8051)
!8202 = !DILocation(line: 754, column: 10, scope: !8051)
!8203 = !DILocation(line: 754, column: 2, scope: !8051)
!8204 = !DILocation(line: 754, column: 6, scope: !8051)
!8205 = !DILocation(line: 754, column: 8, scope: !8051)
!8206 = !DILocation(line: 755, column: 19, scope: !8051)
!8207 = !DILocation(line: 755, column: 10, scope: !8051)
!8208 = !DILocation(line: 755, column: 2, scope: !8051)
!8209 = !DILocation(line: 755, column: 6, scope: !8051)
!8210 = !DILocation(line: 755, column: 8, scope: !8051)
!8211 = !DILocation(line: 756, column: 19, scope: !8051)
!8212 = !DILocation(line: 756, column: 10, scope: !8051)
!8213 = !DILocation(line: 756, column: 2, scope: !8051)
!8214 = !DILocation(line: 756, column: 6, scope: !8051)
!8215 = !DILocation(line: 756, column: 8, scope: !8051)
!8216 = !DILocation(line: 757, column: 19, scope: !8051)
!8217 = !DILocation(line: 757, column: 10, scope: !8051)
!8218 = !DILocation(line: 757, column: 2, scope: !8051)
!8219 = !DILocation(line: 757, column: 6, scope: !8051)
!8220 = !DILocation(line: 757, column: 8, scope: !8051)
!8221 = !DILocation(line: 758, column: 1, scope: !8051)
!8222 = distinct !DISubprogram(name: "layerDefault_mloopcol", scope: !3, file: !3, line: 703, type: !355, scopeLine: 704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8223 = !DILocalVariable(name: "data", arg: 1, scope: !8222, file: !3, line: 703, type: !146)
!8224 = !DILocation(line: 703, column: 41, scope: !8222)
!8225 = !DILocalVariable(name: "count", arg: 2, scope: !8222, file: !3, line: 703, type: !158)
!8226 = !DILocation(line: 703, column: 51, scope: !8222)
!8227 = !DILocalVariable(name: "default_mloopcol", scope: !8222, file: !3, line: 705, type: !208)
!8228 = !DILocation(line: 705, column: 11, scope: !8222)
!8229 = !DILocalVariable(name: "mlcol", scope: !8222, file: !3, line: 706, type: !207)
!8230 = !DILocation(line: 706, column: 12, scope: !8222)
!8231 = !DILocation(line: 706, column: 32, scope: !8222)
!8232 = !DILocation(line: 706, column: 20, scope: !8222)
!8233 = !DILocalVariable(name: "i", scope: !8222, file: !3, line: 707, type: !158)
!8234 = !DILocation(line: 707, column: 6, scope: !8222)
!8235 = !DILocation(line: 708, column: 9, scope: !8236)
!8236 = distinct !DILexicalBlock(scope: !8222, file: !3, line: 708, column: 2)
!8237 = !DILocation(line: 708, column: 7, scope: !8236)
!8238 = !DILocation(line: 708, column: 14, scope: !8239)
!8239 = distinct !DILexicalBlock(scope: !8236, file: !3, line: 708, column: 2)
!8240 = !DILocation(line: 708, column: 18, scope: !8239)
!8241 = !DILocation(line: 708, column: 16, scope: !8239)
!8242 = !DILocation(line: 708, column: 2, scope: !8236)
!8243 = !DILocation(line: 709, column: 3, scope: !8239)
!8244 = !DILocation(line: 709, column: 9, scope: !8239)
!8245 = !DILocation(line: 709, column: 14, scope: !8239)
!8246 = !DILocation(line: 708, column: 26, scope: !8239)
!8247 = !DILocation(line: 708, column: 2, scope: !8239)
!8248 = distinct !{!8248, !8242, !8249}
!8249 = !DILocation(line: 709, column: 14, scope: !8236)
!8250 = !DILocation(line: 711, column: 1, scope: !8222)
!8251 = distinct !DISubprogram(name: "layerEqual_mloopcol", scope: !3, file: !3, line: 638, type: !359, scopeLine: 639, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8252 = !DILocalVariable(name: "data1", arg: 1, scope: !8251, file: !3, line: 638, type: !335)
!8253 = !DILocation(line: 638, column: 45, scope: !8251)
!8254 = !DILocalVariable(name: "data2", arg: 2, scope: !8251, file: !3, line: 638, type: !335)
!8255 = !DILocation(line: 638, column: 64, scope: !8251)
!8256 = !DILocalVariable(name: "m1", scope: !8251, file: !3, line: 640, type: !8257)
!8257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8258, size: 64)
!8258 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !208)
!8259 = !DILocation(line: 640, column: 18, scope: !8251)
!8260 = !DILocation(line: 640, column: 23, scope: !8251)
!8261 = !DILocalVariable(name: "m2", scope: !8251, file: !3, line: 640, type: !8257)
!8262 = !DILocation(line: 640, column: 31, scope: !8251)
!8263 = !DILocation(line: 640, column: 36, scope: !8251)
!8264 = !DILocalVariable(name: "r", scope: !8251, file: !3, line: 641, type: !160)
!8265 = !DILocation(line: 641, column: 8, scope: !8251)
!8266 = !DILocalVariable(name: "g", scope: !8251, file: !3, line: 641, type: !160)
!8267 = !DILocation(line: 641, column: 11, scope: !8251)
!8268 = !DILocalVariable(name: "b", scope: !8251, file: !3, line: 641, type: !160)
!8269 = !DILocation(line: 641, column: 14, scope: !8251)
!8270 = !DILocalVariable(name: "a", scope: !8251, file: !3, line: 641, type: !160)
!8271 = !DILocation(line: 641, column: 17, scope: !8251)
!8272 = !DILocation(line: 643, column: 6, scope: !8251)
!8273 = !DILocation(line: 643, column: 10, scope: !8251)
!8274 = !DILocation(line: 643, column: 14, scope: !8251)
!8275 = !DILocation(line: 643, column: 18, scope: !8251)
!8276 = !DILocation(line: 643, column: 12, scope: !8251)
!8277 = !DILocation(line: 643, column: 4, scope: !8251)
!8278 = !DILocation(line: 644, column: 6, scope: !8251)
!8279 = !DILocation(line: 644, column: 10, scope: !8251)
!8280 = !DILocation(line: 644, column: 14, scope: !8251)
!8281 = !DILocation(line: 644, column: 18, scope: !8251)
!8282 = !DILocation(line: 644, column: 12, scope: !8251)
!8283 = !DILocation(line: 644, column: 4, scope: !8251)
!8284 = !DILocation(line: 645, column: 6, scope: !8251)
!8285 = !DILocation(line: 645, column: 10, scope: !8251)
!8286 = !DILocation(line: 645, column: 14, scope: !8251)
!8287 = !DILocation(line: 645, column: 18, scope: !8251)
!8288 = !DILocation(line: 645, column: 12, scope: !8251)
!8289 = !DILocation(line: 645, column: 4, scope: !8251)
!8290 = !DILocation(line: 646, column: 6, scope: !8251)
!8291 = !DILocation(line: 646, column: 10, scope: !8251)
!8292 = !DILocation(line: 646, column: 14, scope: !8251)
!8293 = !DILocation(line: 646, column: 18, scope: !8251)
!8294 = !DILocation(line: 646, column: 12, scope: !8251)
!8295 = !DILocation(line: 646, column: 4, scope: !8251)
!8296 = !DILocation(line: 648, column: 9, scope: !8251)
!8297 = !DILocation(line: 648, column: 13, scope: !8251)
!8298 = !DILocation(line: 648, column: 11, scope: !8251)
!8299 = !DILocation(line: 648, column: 17, scope: !8251)
!8300 = !DILocation(line: 648, column: 21, scope: !8251)
!8301 = !DILocation(line: 648, column: 19, scope: !8251)
!8302 = !DILocation(line: 648, column: 15, scope: !8251)
!8303 = !DILocation(line: 648, column: 25, scope: !8251)
!8304 = !DILocation(line: 648, column: 29, scope: !8251)
!8305 = !DILocation(line: 648, column: 27, scope: !8251)
!8306 = !DILocation(line: 648, column: 23, scope: !8251)
!8307 = !DILocation(line: 648, column: 33, scope: !8251)
!8308 = !DILocation(line: 648, column: 37, scope: !8251)
!8309 = !DILocation(line: 648, column: 35, scope: !8251)
!8310 = !DILocation(line: 648, column: 31, scope: !8251)
!8311 = !DILocation(line: 648, column: 39, scope: !8251)
!8312 = !DILocation(line: 648, column: 2, scope: !8251)
!8313 = distinct !DISubprogram(name: "layerMultiply_mloopcol", scope: !3, file: !3, line: 651, type: !364, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8314 = !DILocalVariable(name: "data", arg: 1, scope: !8313, file: !3, line: 651, type: !146)
!8315 = !DILocation(line: 651, column: 42, scope: !8313)
!8316 = !DILocalVariable(name: "fac", arg: 2, scope: !8313, file: !3, line: 651, type: !160)
!8317 = !DILocation(line: 651, column: 54, scope: !8313)
!8318 = !DILocalVariable(name: "m", scope: !8313, file: !3, line: 653, type: !207)
!8319 = !DILocation(line: 653, column: 12, scope: !8313)
!8320 = !DILocation(line: 653, column: 16, scope: !8313)
!8321 = !DILocation(line: 655, column: 16, scope: !8313)
!8322 = !DILocation(line: 655, column: 19, scope: !8313)
!8323 = !DILocation(line: 655, column: 9, scope: !8313)
!8324 = !DILocation(line: 655, column: 23, scope: !8313)
!8325 = !DILocation(line: 655, column: 21, scope: !8313)
!8326 = !DILocation(line: 655, column: 2, scope: !8313)
!8327 = !DILocation(line: 655, column: 5, scope: !8313)
!8328 = !DILocation(line: 655, column: 7, scope: !8313)
!8329 = !DILocation(line: 656, column: 16, scope: !8313)
!8330 = !DILocation(line: 656, column: 19, scope: !8313)
!8331 = !DILocation(line: 656, column: 9, scope: !8313)
!8332 = !DILocation(line: 656, column: 23, scope: !8313)
!8333 = !DILocation(line: 656, column: 21, scope: !8313)
!8334 = !DILocation(line: 656, column: 2, scope: !8313)
!8335 = !DILocation(line: 656, column: 5, scope: !8313)
!8336 = !DILocation(line: 656, column: 7, scope: !8313)
!8337 = !DILocation(line: 657, column: 16, scope: !8313)
!8338 = !DILocation(line: 657, column: 19, scope: !8313)
!8339 = !DILocation(line: 657, column: 9, scope: !8313)
!8340 = !DILocation(line: 657, column: 23, scope: !8313)
!8341 = !DILocation(line: 657, column: 21, scope: !8313)
!8342 = !DILocation(line: 657, column: 2, scope: !8313)
!8343 = !DILocation(line: 657, column: 5, scope: !8313)
!8344 = !DILocation(line: 657, column: 7, scope: !8313)
!8345 = !DILocation(line: 658, column: 16, scope: !8313)
!8346 = !DILocation(line: 658, column: 19, scope: !8313)
!8347 = !DILocation(line: 658, column: 9, scope: !8313)
!8348 = !DILocation(line: 658, column: 23, scope: !8313)
!8349 = !DILocation(line: 658, column: 21, scope: !8313)
!8350 = !DILocation(line: 658, column: 2, scope: !8313)
!8351 = !DILocation(line: 658, column: 5, scope: !8313)
!8352 = !DILocation(line: 658, column: 7, scope: !8313)
!8353 = !DILocation(line: 659, column: 1, scope: !8313)
!8354 = distinct !DISubprogram(name: "layerInitMinMax_mloopcol", scope: !3, file: !3, line: 688, type: !368, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8355 = !DILocalVariable(name: "vmin", arg: 1, scope: !8354, file: !3, line: 688, type: !146)
!8356 = !DILocation(line: 688, column: 44, scope: !8354)
!8357 = !DILocalVariable(name: "vmax", arg: 2, scope: !8354, file: !3, line: 688, type: !146)
!8358 = !DILocation(line: 688, column: 56, scope: !8354)
!8359 = !DILocalVariable(name: "min", scope: !8354, file: !3, line: 690, type: !207)
!8360 = !DILocation(line: 690, column: 12, scope: !8354)
!8361 = !DILocation(line: 690, column: 18, scope: !8354)
!8362 = !DILocalVariable(name: "max", scope: !8354, file: !3, line: 690, type: !207)
!8363 = !DILocation(line: 690, column: 25, scope: !8354)
!8364 = !DILocation(line: 690, column: 31, scope: !8354)
!8365 = !DILocation(line: 692, column: 2, scope: !8354)
!8366 = !DILocation(line: 692, column: 7, scope: !8354)
!8367 = !DILocation(line: 692, column: 9, scope: !8354)
!8368 = !DILocation(line: 693, column: 2, scope: !8354)
!8369 = !DILocation(line: 693, column: 7, scope: !8354)
!8370 = !DILocation(line: 693, column: 9, scope: !8354)
!8371 = !DILocation(line: 694, column: 2, scope: !8354)
!8372 = !DILocation(line: 694, column: 7, scope: !8354)
!8373 = !DILocation(line: 694, column: 9, scope: !8354)
!8374 = !DILocation(line: 695, column: 2, scope: !8354)
!8375 = !DILocation(line: 695, column: 7, scope: !8354)
!8376 = !DILocation(line: 695, column: 9, scope: !8354)
!8377 = !DILocation(line: 697, column: 2, scope: !8354)
!8378 = !DILocation(line: 697, column: 7, scope: !8354)
!8379 = !DILocation(line: 697, column: 9, scope: !8354)
!8380 = !DILocation(line: 698, column: 2, scope: !8354)
!8381 = !DILocation(line: 698, column: 7, scope: !8354)
!8382 = !DILocation(line: 698, column: 9, scope: !8354)
!8383 = !DILocation(line: 699, column: 2, scope: !8354)
!8384 = !DILocation(line: 699, column: 7, scope: !8354)
!8385 = !DILocation(line: 699, column: 9, scope: !8354)
!8386 = !DILocation(line: 700, column: 2, scope: !8354)
!8387 = !DILocation(line: 700, column: 7, scope: !8354)
!8388 = !DILocation(line: 700, column: 9, scope: !8354)
!8389 = !DILocation(line: 701, column: 1, scope: !8354)
!8390 = distinct !DISubprogram(name: "layerAdd_mloopcol", scope: !3, file: !3, line: 661, type: !372, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8391 = !DILocalVariable(name: "data1", arg: 1, scope: !8390, file: !3, line: 661, type: !146)
!8392 = !DILocation(line: 661, column: 37, scope: !8390)
!8393 = !DILocalVariable(name: "data2", arg: 2, scope: !8390, file: !3, line: 661, type: !335)
!8394 = !DILocation(line: 661, column: 56, scope: !8390)
!8395 = !DILocalVariable(name: "m", scope: !8390, file: !3, line: 663, type: !207)
!8396 = !DILocation(line: 663, column: 12, scope: !8390)
!8397 = !DILocation(line: 663, column: 16, scope: !8390)
!8398 = !DILocalVariable(name: "m2", scope: !8390, file: !3, line: 664, type: !8257)
!8399 = !DILocation(line: 664, column: 18, scope: !8390)
!8400 = !DILocation(line: 664, column: 23, scope: !8390)
!8401 = !DILocation(line: 666, column: 10, scope: !8390)
!8402 = !DILocation(line: 666, column: 14, scope: !8390)
!8403 = !DILocation(line: 666, column: 2, scope: !8390)
!8404 = !DILocation(line: 666, column: 5, scope: !8390)
!8405 = !DILocation(line: 666, column: 7, scope: !8390)
!8406 = !DILocation(line: 667, column: 10, scope: !8390)
!8407 = !DILocation(line: 667, column: 14, scope: !8390)
!8408 = !DILocation(line: 667, column: 2, scope: !8390)
!8409 = !DILocation(line: 667, column: 5, scope: !8390)
!8410 = !DILocation(line: 667, column: 7, scope: !8390)
!8411 = !DILocation(line: 668, column: 10, scope: !8390)
!8412 = !DILocation(line: 668, column: 14, scope: !8390)
!8413 = !DILocation(line: 668, column: 2, scope: !8390)
!8414 = !DILocation(line: 668, column: 5, scope: !8390)
!8415 = !DILocation(line: 668, column: 7, scope: !8390)
!8416 = !DILocation(line: 669, column: 10, scope: !8390)
!8417 = !DILocation(line: 669, column: 14, scope: !8390)
!8418 = !DILocation(line: 669, column: 2, scope: !8390)
!8419 = !DILocation(line: 669, column: 5, scope: !8390)
!8420 = !DILocation(line: 669, column: 7, scope: !8390)
!8421 = !DILocation(line: 670, column: 1, scope: !8390)
!8422 = distinct !DISubprogram(name: "layerDoMinMax_mloopcol", scope: !3, file: !3, line: 672, type: !376, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8423 = !DILocalVariable(name: "data", arg: 1, scope: !8422, file: !3, line: 672, type: !335)
!8424 = !DILocation(line: 672, column: 48, scope: !8422)
!8425 = !DILocalVariable(name: "vmin", arg: 2, scope: !8422, file: !3, line: 672, type: !146)
!8426 = !DILocation(line: 672, column: 60, scope: !8422)
!8427 = !DILocalVariable(name: "vmax", arg: 3, scope: !8422, file: !3, line: 672, type: !146)
!8428 = !DILocation(line: 672, column: 72, scope: !8422)
!8429 = !DILocalVariable(name: "m", scope: !8422, file: !3, line: 674, type: !8257)
!8430 = !DILocation(line: 674, column: 18, scope: !8422)
!8431 = !DILocation(line: 674, column: 22, scope: !8422)
!8432 = !DILocalVariable(name: "min", scope: !8422, file: !3, line: 675, type: !207)
!8433 = !DILocation(line: 675, column: 12, scope: !8422)
!8434 = !DILocation(line: 675, column: 18, scope: !8422)
!8435 = !DILocalVariable(name: "max", scope: !8422, file: !3, line: 675, type: !207)
!8436 = !DILocation(line: 675, column: 25, scope: !8422)
!8437 = !DILocation(line: 675, column: 31, scope: !8422)
!8438 = !DILocation(line: 677, column: 6, scope: !8439)
!8439 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 677, column: 6)
!8440 = !DILocation(line: 677, column: 9, scope: !8439)
!8441 = !DILocation(line: 677, column: 13, scope: !8439)
!8442 = !DILocation(line: 677, column: 18, scope: !8439)
!8443 = !DILocation(line: 677, column: 11, scope: !8439)
!8444 = !DILocation(line: 677, column: 6, scope: !8422)
!8445 = !DILocation(line: 677, column: 30, scope: !8439)
!8446 = !DILocation(line: 677, column: 33, scope: !8439)
!8447 = !DILocation(line: 677, column: 21, scope: !8439)
!8448 = !DILocation(line: 677, column: 26, scope: !8439)
!8449 = !DILocation(line: 677, column: 28, scope: !8439)
!8450 = !DILocation(line: 678, column: 6, scope: !8451)
!8451 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 678, column: 6)
!8452 = !DILocation(line: 678, column: 9, scope: !8451)
!8453 = !DILocation(line: 678, column: 13, scope: !8451)
!8454 = !DILocation(line: 678, column: 18, scope: !8451)
!8455 = !DILocation(line: 678, column: 11, scope: !8451)
!8456 = !DILocation(line: 678, column: 6, scope: !8422)
!8457 = !DILocation(line: 678, column: 30, scope: !8451)
!8458 = !DILocation(line: 678, column: 33, scope: !8451)
!8459 = !DILocation(line: 678, column: 21, scope: !8451)
!8460 = !DILocation(line: 678, column: 26, scope: !8451)
!8461 = !DILocation(line: 678, column: 28, scope: !8451)
!8462 = !DILocation(line: 679, column: 6, scope: !8463)
!8463 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 679, column: 6)
!8464 = !DILocation(line: 679, column: 9, scope: !8463)
!8465 = !DILocation(line: 679, column: 13, scope: !8463)
!8466 = !DILocation(line: 679, column: 18, scope: !8463)
!8467 = !DILocation(line: 679, column: 11, scope: !8463)
!8468 = !DILocation(line: 679, column: 6, scope: !8422)
!8469 = !DILocation(line: 679, column: 30, scope: !8463)
!8470 = !DILocation(line: 679, column: 33, scope: !8463)
!8471 = !DILocation(line: 679, column: 21, scope: !8463)
!8472 = !DILocation(line: 679, column: 26, scope: !8463)
!8473 = !DILocation(line: 679, column: 28, scope: !8463)
!8474 = !DILocation(line: 680, column: 6, scope: !8475)
!8475 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 680, column: 6)
!8476 = !DILocation(line: 680, column: 9, scope: !8475)
!8477 = !DILocation(line: 680, column: 13, scope: !8475)
!8478 = !DILocation(line: 680, column: 18, scope: !8475)
!8479 = !DILocation(line: 680, column: 11, scope: !8475)
!8480 = !DILocation(line: 680, column: 6, scope: !8422)
!8481 = !DILocation(line: 680, column: 30, scope: !8475)
!8482 = !DILocation(line: 680, column: 33, scope: !8475)
!8483 = !DILocation(line: 680, column: 21, scope: !8475)
!8484 = !DILocation(line: 680, column: 26, scope: !8475)
!8485 = !DILocation(line: 680, column: 28, scope: !8475)
!8486 = !DILocation(line: 682, column: 6, scope: !8487)
!8487 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 682, column: 6)
!8488 = !DILocation(line: 682, column: 9, scope: !8487)
!8489 = !DILocation(line: 682, column: 13, scope: !8487)
!8490 = !DILocation(line: 682, column: 18, scope: !8487)
!8491 = !DILocation(line: 682, column: 11, scope: !8487)
!8492 = !DILocation(line: 682, column: 6, scope: !8422)
!8493 = !DILocation(line: 682, column: 30, scope: !8487)
!8494 = !DILocation(line: 682, column: 33, scope: !8487)
!8495 = !DILocation(line: 682, column: 21, scope: !8487)
!8496 = !DILocation(line: 682, column: 26, scope: !8487)
!8497 = !DILocation(line: 682, column: 28, scope: !8487)
!8498 = !DILocation(line: 683, column: 6, scope: !8499)
!8499 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 683, column: 6)
!8500 = !DILocation(line: 683, column: 9, scope: !8499)
!8501 = !DILocation(line: 683, column: 13, scope: !8499)
!8502 = !DILocation(line: 683, column: 18, scope: !8499)
!8503 = !DILocation(line: 683, column: 11, scope: !8499)
!8504 = !DILocation(line: 683, column: 6, scope: !8422)
!8505 = !DILocation(line: 683, column: 30, scope: !8499)
!8506 = !DILocation(line: 683, column: 33, scope: !8499)
!8507 = !DILocation(line: 683, column: 21, scope: !8499)
!8508 = !DILocation(line: 683, column: 26, scope: !8499)
!8509 = !DILocation(line: 683, column: 28, scope: !8499)
!8510 = !DILocation(line: 684, column: 6, scope: !8511)
!8511 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 684, column: 6)
!8512 = !DILocation(line: 684, column: 9, scope: !8511)
!8513 = !DILocation(line: 684, column: 13, scope: !8511)
!8514 = !DILocation(line: 684, column: 18, scope: !8511)
!8515 = !DILocation(line: 684, column: 11, scope: !8511)
!8516 = !DILocation(line: 684, column: 6, scope: !8422)
!8517 = !DILocation(line: 684, column: 30, scope: !8511)
!8518 = !DILocation(line: 684, column: 33, scope: !8511)
!8519 = !DILocation(line: 684, column: 21, scope: !8511)
!8520 = !DILocation(line: 684, column: 26, scope: !8511)
!8521 = !DILocation(line: 684, column: 28, scope: !8511)
!8522 = !DILocation(line: 685, column: 6, scope: !8523)
!8523 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 685, column: 6)
!8524 = !DILocation(line: 685, column: 9, scope: !8523)
!8525 = !DILocation(line: 685, column: 13, scope: !8523)
!8526 = !DILocation(line: 685, column: 18, scope: !8523)
!8527 = !DILocation(line: 685, column: 11, scope: !8523)
!8528 = !DILocation(line: 685, column: 6, scope: !8422)
!8529 = !DILocation(line: 685, column: 30, scope: !8523)
!8530 = !DILocation(line: 685, column: 33, scope: !8523)
!8531 = !DILocation(line: 685, column: 21, scope: !8523)
!8532 = !DILocation(line: 685, column: 26, scope: !8523)
!8533 = !DILocation(line: 685, column: 28, scope: !8523)
!8534 = !DILocation(line: 686, column: 1, scope: !8422)
!8535 = distinct !DISubprogram(name: "layerCopyValue_mloopcol", scope: !3, file: !3, line: 627, type: !380, scopeLine: 628, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8536 = !DILocalVariable(name: "source", arg: 1, scope: !8535, file: !3, line: 627, type: !335)
!8537 = !DILocation(line: 627, column: 49, scope: !8535)
!8538 = !DILocalVariable(name: "dest", arg: 2, scope: !8535, file: !3, line: 627, type: !146)
!8539 = !DILocation(line: 627, column: 63, scope: !8535)
!8540 = !DILocalVariable(name: "m1", scope: !8535, file: !3, line: 629, type: !8257)
!8541 = !DILocation(line: 629, column: 18, scope: !8535)
!8542 = !DILocation(line: 629, column: 23, scope: !8535)
!8543 = !DILocalVariable(name: "m2", scope: !8535, file: !3, line: 630, type: !207)
!8544 = !DILocation(line: 630, column: 12, scope: !8535)
!8545 = !DILocation(line: 630, column: 17, scope: !8535)
!8546 = !DILocation(line: 632, column: 10, scope: !8535)
!8547 = !DILocation(line: 632, column: 14, scope: !8535)
!8548 = !DILocation(line: 632, column: 2, scope: !8535)
!8549 = !DILocation(line: 632, column: 6, scope: !8535)
!8550 = !DILocation(line: 632, column: 8, scope: !8535)
!8551 = !DILocation(line: 633, column: 10, scope: !8535)
!8552 = !DILocation(line: 633, column: 14, scope: !8535)
!8553 = !DILocation(line: 633, column: 2, scope: !8535)
!8554 = !DILocation(line: 633, column: 6, scope: !8535)
!8555 = !DILocation(line: 633, column: 8, scope: !8535)
!8556 = !DILocation(line: 634, column: 10, scope: !8535)
!8557 = !DILocation(line: 634, column: 14, scope: !8535)
!8558 = !DILocation(line: 634, column: 2, scope: !8535)
!8559 = !DILocation(line: 634, column: 6, scope: !8535)
!8560 = !DILocation(line: 634, column: 8, scope: !8535)
!8561 = !DILocation(line: 635, column: 10, scope: !8535)
!8562 = !DILocation(line: 635, column: 14, scope: !8535)
!8563 = !DILocation(line: 635, column: 2, scope: !8535)
!8564 = !DILocation(line: 635, column: 6, scope: !8535)
!8565 = !DILocation(line: 635, column: 8, scope: !8535)
!8566 = !DILocation(line: 636, column: 1, scope: !8535)
!8567 = distinct !DISubprogram(name: "layerCopy_mdisps", scope: !3, file: !3, line: 510, type: !333, scopeLine: 511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8568 = !DILocalVariable(name: "source", arg: 1, scope: !8567, file: !3, line: 510, type: !335)
!8569 = !DILocation(line: 510, column: 42, scope: !8567)
!8570 = !DILocalVariable(name: "dest", arg: 2, scope: !8567, file: !3, line: 510, type: !146)
!8571 = !DILocation(line: 510, column: 56, scope: !8567)
!8572 = !DILocalVariable(name: "count", arg: 3, scope: !8567, file: !3, line: 510, type: !158)
!8573 = !DILocation(line: 510, column: 66, scope: !8567)
!8574 = !DILocalVariable(name: "i", scope: !8567, file: !3, line: 512, type: !158)
!8575 = !DILocation(line: 512, column: 6, scope: !8567)
!8576 = !DILocalVariable(name: "s", scope: !8567, file: !3, line: 513, type: !8577)
!8577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8578, size: 64)
!8578 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8579)
!8579 = !DIDerivedType(tag: DW_TAG_typedef, name: "MDisps", file: !118, line: 196, baseType: !8580)
!8580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MDisps", file: !118, line: 186, size: 192, elements: !8581)
!8581 = !{!8582, !8583, !8584, !8586}
!8582 = !DIDerivedType(tag: DW_TAG_member, name: "totdisp", scope: !8580, file: !118, line: 188, baseType: !158, size: 32)
!8583 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !8580, file: !118, line: 189, baseType: !158, size: 32, offset: 32)
!8584 = !DIDerivedType(tag: DW_TAG_member, name: "disps", scope: !8580, file: !118, line: 190, baseType: !8585, size: 64, offset: 64)
!8585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !252, size: 64)
!8586 = !DIDerivedType(tag: DW_TAG_member, name: "hidden", scope: !8580, file: !118, line: 195, baseType: !8587, size: 64, offset: 128)
!8587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!8588 = !DILocation(line: 513, column: 16, scope: !8567)
!8589 = !DILocation(line: 513, column: 20, scope: !8567)
!8590 = !DILocalVariable(name: "d", scope: !8567, file: !3, line: 514, type: !8591)
!8591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8579, size: 64)
!8592 = !DILocation(line: 514, column: 10, scope: !8567)
!8593 = !DILocation(line: 514, column: 14, scope: !8567)
!8594 = !DILocation(line: 516, column: 9, scope: !8595)
!8595 = distinct !DILexicalBlock(scope: !8567, file: !3, line: 516, column: 2)
!8596 = !DILocation(line: 516, column: 7, scope: !8595)
!8597 = !DILocation(line: 516, column: 14, scope: !8598)
!8598 = distinct !DILexicalBlock(scope: !8595, file: !3, line: 516, column: 2)
!8599 = !DILocation(line: 516, column: 18, scope: !8598)
!8600 = !DILocation(line: 516, column: 16, scope: !8598)
!8601 = !DILocation(line: 516, column: 2, scope: !8595)
!8602 = !DILocation(line: 517, column: 7, scope: !8603)
!8603 = distinct !DILexicalBlock(scope: !8604, file: !3, line: 517, column: 7)
!8604 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 516, column: 30)
!8605 = !DILocation(line: 517, column: 9, scope: !8603)
!8606 = !DILocation(line: 517, column: 12, scope: !8603)
!8607 = !DILocation(line: 517, column: 7, scope: !8604)
!8608 = !DILocation(line: 518, column: 17, scope: !8609)
!8609 = distinct !DILexicalBlock(scope: !8603, file: !3, line: 517, column: 19)
!8610 = !DILocation(line: 518, column: 31, scope: !8609)
!8611 = !DILocation(line: 518, column: 33, scope: !8609)
!8612 = !DILocation(line: 518, column: 36, scope: !8609)
!8613 = !DILocation(line: 518, column: 4, scope: !8609)
!8614 = !DILocation(line: 518, column: 6, scope: !8609)
!8615 = !DILocation(line: 518, column: 9, scope: !8609)
!8616 = !DILocation(line: 518, column: 15, scope: !8609)
!8617 = !DILocation(line: 519, column: 18, scope: !8609)
!8618 = !DILocation(line: 519, column: 32, scope: !8609)
!8619 = !DILocation(line: 519, column: 34, scope: !8609)
!8620 = !DILocation(line: 519, column: 37, scope: !8609)
!8621 = !DILocation(line: 519, column: 4, scope: !8609)
!8622 = !DILocation(line: 519, column: 6, scope: !8609)
!8623 = !DILocation(line: 519, column: 9, scope: !8609)
!8624 = !DILocation(line: 519, column: 16, scope: !8609)
!8625 = !DILocation(line: 520, column: 3, scope: !8609)
!8626 = !DILocation(line: 522, column: 4, scope: !8627)
!8627 = distinct !DILexicalBlock(scope: !8603, file: !3, line: 521, column: 8)
!8628 = !DILocation(line: 522, column: 6, scope: !8627)
!8629 = !DILocation(line: 522, column: 9, scope: !8627)
!8630 = !DILocation(line: 522, column: 15, scope: !8627)
!8631 = !DILocation(line: 523, column: 4, scope: !8627)
!8632 = !DILocation(line: 523, column: 6, scope: !8627)
!8633 = !DILocation(line: 523, column: 9, scope: !8627)
!8634 = !DILocation(line: 523, column: 16, scope: !8627)
!8635 = !DILocation(line: 527, column: 18, scope: !8604)
!8636 = !DILocation(line: 527, column: 20, scope: !8604)
!8637 = !DILocation(line: 527, column: 23, scope: !8604)
!8638 = !DILocation(line: 527, column: 3, scope: !8604)
!8639 = !DILocation(line: 527, column: 5, scope: !8604)
!8640 = !DILocation(line: 527, column: 8, scope: !8604)
!8641 = !DILocation(line: 527, column: 16, scope: !8604)
!8642 = !DILocation(line: 528, column: 16, scope: !8604)
!8643 = !DILocation(line: 528, column: 18, scope: !8604)
!8644 = !DILocation(line: 528, column: 21, scope: !8604)
!8645 = !DILocation(line: 528, column: 3, scope: !8604)
!8646 = !DILocation(line: 528, column: 5, scope: !8604)
!8647 = !DILocation(line: 528, column: 8, scope: !8604)
!8648 = !DILocation(line: 528, column: 14, scope: !8604)
!8649 = !DILocation(line: 529, column: 2, scope: !8604)
!8650 = !DILocation(line: 516, column: 25, scope: !8598)
!8651 = !DILocation(line: 516, column: 2, scope: !8598)
!8652 = distinct !{!8652, !8601, !8653}
!8653 = !DILocation(line: 529, column: 2, scope: !8595)
!8654 = !DILocation(line: 530, column: 1, scope: !8567)
!8655 = distinct !DISubprogram(name: "layerFree_mdisps", scope: !3, file: !3, line: 532, type: !339, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8656 = !DILocalVariable(name: "data", arg: 1, scope: !8655, file: !3, line: 532, type: !146)
!8657 = !DILocation(line: 532, column: 36, scope: !8655)
!8658 = !DILocalVariable(name: "count", arg: 2, scope: !8655, file: !3, line: 532, type: !158)
!8659 = !DILocation(line: 532, column: 46, scope: !8655)
!8660 = !DILocalVariable(name: "UNUSED_size", arg: 3, scope: !8655, file: !3, line: 532, type: !158)
!8661 = !DILocation(line: 532, column: 57, scope: !8655)
!8662 = !DILocalVariable(name: "i", scope: !8655, file: !3, line: 534, type: !158)
!8663 = !DILocation(line: 534, column: 6, scope: !8655)
!8664 = !DILocalVariable(name: "d", scope: !8655, file: !3, line: 535, type: !8591)
!8665 = !DILocation(line: 535, column: 10, scope: !8655)
!8666 = !DILocation(line: 535, column: 14, scope: !8655)
!8667 = !DILocation(line: 537, column: 9, scope: !8668)
!8668 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 537, column: 2)
!8669 = !DILocation(line: 537, column: 7, scope: !8668)
!8670 = !DILocation(line: 537, column: 14, scope: !8671)
!8671 = distinct !DILexicalBlock(scope: !8668, file: !3, line: 537, column: 2)
!8672 = !DILocation(line: 537, column: 18, scope: !8671)
!8673 = !DILocation(line: 537, column: 16, scope: !8671)
!8674 = !DILocation(line: 537, column: 2, scope: !8668)
!8675 = !DILocation(line: 538, column: 7, scope: !8676)
!8676 = distinct !DILexicalBlock(scope: !8677, file: !3, line: 538, column: 7)
!8677 = distinct !DILexicalBlock(scope: !8671, file: !3, line: 537, column: 30)
!8678 = !DILocation(line: 538, column: 9, scope: !8676)
!8679 = !DILocation(line: 538, column: 12, scope: !8676)
!8680 = !DILocation(line: 538, column: 7, scope: !8677)
!8681 = !DILocation(line: 539, column: 4, scope: !8676)
!8682 = !DILocation(line: 539, column: 14, scope: !8676)
!8683 = !DILocation(line: 539, column: 16, scope: !8676)
!8684 = !DILocation(line: 539, column: 19, scope: !8676)
!8685 = !DILocation(line: 540, column: 7, scope: !8686)
!8686 = distinct !DILexicalBlock(scope: !8677, file: !3, line: 540, column: 7)
!8687 = !DILocation(line: 540, column: 9, scope: !8686)
!8688 = !DILocation(line: 540, column: 12, scope: !8686)
!8689 = !DILocation(line: 540, column: 7, scope: !8677)
!8690 = !DILocation(line: 541, column: 4, scope: !8686)
!8691 = !DILocation(line: 541, column: 14, scope: !8686)
!8692 = !DILocation(line: 541, column: 16, scope: !8686)
!8693 = !DILocation(line: 541, column: 19, scope: !8686)
!8694 = !DILocation(line: 542, column: 3, scope: !8677)
!8695 = !DILocation(line: 542, column: 5, scope: !8677)
!8696 = !DILocation(line: 542, column: 8, scope: !8677)
!8697 = !DILocation(line: 542, column: 14, scope: !8677)
!8698 = !DILocation(line: 543, column: 3, scope: !8677)
!8699 = !DILocation(line: 543, column: 5, scope: !8677)
!8700 = !DILocation(line: 543, column: 8, scope: !8677)
!8701 = !DILocation(line: 543, column: 15, scope: !8677)
!8702 = !DILocation(line: 544, column: 3, scope: !8677)
!8703 = !DILocation(line: 544, column: 5, scope: !8677)
!8704 = !DILocation(line: 544, column: 8, scope: !8677)
!8705 = !DILocation(line: 544, column: 16, scope: !8677)
!8706 = !DILocation(line: 545, column: 3, scope: !8677)
!8707 = !DILocation(line: 545, column: 5, scope: !8677)
!8708 = !DILocation(line: 545, column: 8, scope: !8677)
!8709 = !DILocation(line: 545, column: 14, scope: !8677)
!8710 = !DILocation(line: 546, column: 2, scope: !8677)
!8711 = !DILocation(line: 537, column: 25, scope: !8671)
!8712 = !DILocation(line: 537, column: 2, scope: !8671)
!8713 = distinct !{!8713, !8674, !8714}
!8714 = !DILocation(line: 546, column: 2, scope: !8668)
!8715 = !DILocation(line: 547, column: 1, scope: !8655)
!8716 = distinct !DISubprogram(name: "layerSwap_mdisps", scope: !3, file: !3, line: 479, type: !349, scopeLine: 480, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8717 = !DILocalVariable(name: "data", arg: 1, scope: !8716, file: !3, line: 479, type: !146)
!8718 = !DILocation(line: 479, column: 36, scope: !8716)
!8719 = !DILocalVariable(name: "ci", arg: 2, scope: !8716, file: !3, line: 479, type: !351)
!8720 = !DILocation(line: 479, column: 53, scope: !8716)
!8721 = !DILocalVariable(name: "s", scope: !8716, file: !3, line: 481, type: !8591)
!8722 = !DILocation(line: 481, column: 10, scope: !8716)
!8723 = !DILocation(line: 481, column: 14, scope: !8716)
!8724 = !DILocalVariable(name: "d", scope: !8716, file: !3, line: 482, type: !8585)
!8725 = !DILocation(line: 482, column: 10, scope: !8716)
!8726 = !DILocalVariable(name: "corners", scope: !8716, file: !3, line: 483, type: !158)
!8727 = !DILocation(line: 483, column: 6, scope: !8716)
!8728 = !DILocalVariable(name: "cornersize", scope: !8716, file: !3, line: 483, type: !158)
!8729 = !DILocation(line: 483, column: 15, scope: !8716)
!8730 = !DILocalVariable(name: "S", scope: !8716, file: !3, line: 483, type: !158)
!8731 = !DILocation(line: 483, column: 27, scope: !8716)
!8732 = !DILocation(line: 485, column: 6, scope: !8733)
!8733 = distinct !DILexicalBlock(scope: !8716, file: !3, line: 485, column: 6)
!8734 = !DILocation(line: 485, column: 9, scope: !8733)
!8735 = !DILocation(line: 485, column: 6, scope: !8716)
!8736 = !DILocalVariable(name: "nverts", scope: !8737, file: !3, line: 486, type: !158)
!8737 = distinct !DILexicalBlock(scope: !8733, file: !3, line: 485, column: 16)
!8738 = !DILocation(line: 486, column: 7, scope: !8737)
!8739 = !DILocation(line: 486, column: 17, scope: !8737)
!8740 = !DILocation(line: 486, column: 23, scope: !8737)
!8741 = !DILocation(line: 486, column: 16, scope: !8737)
!8742 = !DILocation(line: 487, column: 36, scope: !8737)
!8743 = !DILocation(line: 487, column: 13, scope: !8737)
!8744 = !DILocation(line: 487, column: 11, scope: !8737)
!8745 = !DILocation(line: 488, column: 16, scope: !8737)
!8746 = !DILocation(line: 488, column: 19, scope: !8737)
!8747 = !DILocation(line: 488, column: 29, scope: !8737)
!8748 = !DILocation(line: 488, column: 27, scope: !8737)
!8749 = !DILocation(line: 488, column: 14, scope: !8737)
!8750 = !DILocation(line: 490, column: 7, scope: !8751)
!8751 = distinct !DILexicalBlock(scope: !8737, file: !3, line: 490, column: 7)
!8752 = !DILocation(line: 490, column: 18, scope: !8751)
!8753 = !DILocation(line: 490, column: 15, scope: !8751)
!8754 = !DILocation(line: 490, column: 7, scope: !8737)
!8755 = !DILocation(line: 494, column: 4, scope: !8756)
!8756 = distinct !DILexicalBlock(scope: !8751, file: !3, line: 490, column: 26)
!8757 = !DILocation(line: 494, column: 14, scope: !8756)
!8758 = !DILocation(line: 494, column: 17, scope: !8756)
!8759 = !DILocation(line: 495, column: 18, scope: !8756)
!8760 = !DILocation(line: 495, column: 21, scope: !8756)
!8761 = !DILocation(line: 495, column: 31, scope: !8756)
!8762 = !DILocation(line: 495, column: 29, scope: !8756)
!8763 = !DILocation(line: 495, column: 42, scope: !8756)
!8764 = !DILocation(line: 495, column: 40, scope: !8756)
!8765 = !DILocation(line: 495, column: 4, scope: !8756)
!8766 = !DILocation(line: 495, column: 7, scope: !8756)
!8767 = !DILocation(line: 495, column: 15, scope: !8756)
!8768 = !DILocation(line: 496, column: 15, scope: !8756)
!8769 = !DILocation(line: 496, column: 27, scope: !8756)
!8770 = !DILocation(line: 496, column: 30, scope: !8756)
!8771 = !DILocation(line: 496, column: 38, scope: !8756)
!8772 = !DILocation(line: 496, column: 54, scope: !8756)
!8773 = !DILocation(line: 496, column: 4, scope: !8756)
!8774 = !DILocation(line: 496, column: 7, scope: !8756)
!8775 = !DILocation(line: 496, column: 13, scope: !8756)
!8776 = !DILocation(line: 497, column: 4, scope: !8756)
!8777 = !DILocation(line: 500, column: 7, scope: !8737)
!8778 = !DILocation(line: 500, column: 39, scope: !8737)
!8779 = !DILocation(line: 500, column: 42, scope: !8737)
!8780 = !DILocation(line: 500, column: 37, scope: !8737)
!8781 = !DILocation(line: 500, column: 5, scope: !8737)
!8782 = !DILocation(line: 502, column: 10, scope: !8783)
!8783 = distinct !DILexicalBlock(scope: !8737, file: !3, line: 502, column: 3)
!8784 = !DILocation(line: 502, column: 8, scope: !8783)
!8785 = !DILocation(line: 502, column: 15, scope: !8786)
!8786 = distinct !DILexicalBlock(scope: !8783, file: !3, line: 502, column: 3)
!8787 = !DILocation(line: 502, column: 19, scope: !8786)
!8788 = !DILocation(line: 502, column: 17, scope: !8786)
!8789 = !DILocation(line: 502, column: 3, scope: !8783)
!8790 = !DILocation(line: 503, column: 11, scope: !8786)
!8791 = !DILocation(line: 503, column: 15, scope: !8786)
!8792 = !DILocation(line: 503, column: 28, scope: !8786)
!8793 = !DILocation(line: 503, column: 26, scope: !8786)
!8794 = !DILocation(line: 503, column: 13, scope: !8786)
!8795 = !DILocation(line: 503, column: 4, scope: !8786)
!8796 = !DILocation(line: 503, column: 31, scope: !8786)
!8797 = !DILocation(line: 503, column: 34, scope: !8786)
!8798 = !DILocation(line: 503, column: 42, scope: !8786)
!8799 = !DILocation(line: 503, column: 55, scope: !8786)
!8800 = !DILocation(line: 503, column: 58, scope: !8786)
!8801 = !DILocation(line: 503, column: 53, scope: !8786)
!8802 = !DILocation(line: 503, column: 40, scope: !8786)
!8803 = !DILocation(line: 503, column: 62, scope: !8786)
!8804 = !DILocation(line: 503, column: 73, scope: !8786)
!8805 = !DILocation(line: 503, column: 77, scope: !8786)
!8806 = !DILocation(line: 502, column: 29, scope: !8786)
!8807 = !DILocation(line: 502, column: 3, scope: !8786)
!8808 = distinct !{!8808, !8789, !8809}
!8809 = !DILocation(line: 503, column: 92, scope: !8783)
!8810 = !DILocation(line: 505, column: 3, scope: !8737)
!8811 = !DILocation(line: 505, column: 13, scope: !8737)
!8812 = !DILocation(line: 505, column: 16, scope: !8737)
!8813 = !DILocation(line: 506, column: 14, scope: !8737)
!8814 = !DILocation(line: 506, column: 3, scope: !8737)
!8815 = !DILocation(line: 506, column: 6, scope: !8737)
!8816 = !DILocation(line: 506, column: 12, scope: !8737)
!8817 = !DILocation(line: 507, column: 2, scope: !8737)
!8818 = !DILocation(line: 508, column: 1, scope: !8716)
!8819 = distinct !DISubprogram(name: "layerRead_mdisps", scope: !3, file: !3, line: 549, type: !384, scopeLine: 550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8820 = !DILocalVariable(name: "cdf", arg: 1, scope: !8819, file: !3, line: 549, type: !386)
!8821 = !DILocation(line: 549, column: 40, scope: !8819)
!8822 = !DILocalVariable(name: "data", arg: 2, scope: !8819, file: !3, line: 549, type: !146)
!8823 = !DILocation(line: 549, column: 51, scope: !8819)
!8824 = !DILocalVariable(name: "count", arg: 3, scope: !8819, file: !3, line: 549, type: !158)
!8825 = !DILocation(line: 549, column: 61, scope: !8819)
!8826 = !DILocalVariable(name: "d", scope: !8819, file: !3, line: 551, type: !8591)
!8827 = !DILocation(line: 551, column: 10, scope: !8819)
!8828 = !DILocation(line: 551, column: 14, scope: !8819)
!8829 = !DILocalVariable(name: "i", scope: !8819, file: !3, line: 552, type: !158)
!8830 = !DILocation(line: 552, column: 6, scope: !8819)
!8831 = !DILocation(line: 554, column: 9, scope: !8832)
!8832 = distinct !DILexicalBlock(scope: !8819, file: !3, line: 554, column: 2)
!8833 = !DILocation(line: 554, column: 7, scope: !8832)
!8834 = !DILocation(line: 554, column: 14, scope: !8835)
!8835 = distinct !DILexicalBlock(scope: !8832, file: !3, line: 554, column: 2)
!8836 = !DILocation(line: 554, column: 18, scope: !8835)
!8837 = !DILocation(line: 554, column: 16, scope: !8835)
!8838 = !DILocation(line: 554, column: 2, scope: !8832)
!8839 = !DILocation(line: 555, column: 8, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 555, column: 7)
!8841 = distinct !DILexicalBlock(scope: !8835, file: !3, line: 554, column: 30)
!8842 = !DILocation(line: 555, column: 10, scope: !8840)
!8843 = !DILocation(line: 555, column: 13, scope: !8840)
!8844 = !DILocation(line: 555, column: 7, scope: !8841)
!8845 = !DILocation(line: 556, column: 17, scope: !8840)
!8846 = !DILocation(line: 556, column: 49, scope: !8840)
!8847 = !DILocation(line: 556, column: 51, scope: !8840)
!8848 = !DILocation(line: 556, column: 54, scope: !8840)
!8849 = !DILocation(line: 556, column: 47, scope: !8840)
!8850 = !DILocation(line: 556, column: 4, scope: !8840)
!8851 = !DILocation(line: 556, column: 6, scope: !8840)
!8852 = !DILocation(line: 556, column: 9, scope: !8840)
!8853 = !DILocation(line: 556, column: 15, scope: !8840)
!8854 = !DILocation(line: 558, column: 22, scope: !8855)
!8855 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 558, column: 7)
!8856 = !DILocation(line: 558, column: 27, scope: !8855)
!8857 = !DILocation(line: 558, column: 29, scope: !8855)
!8858 = !DILocation(line: 558, column: 32, scope: !8855)
!8859 = !DILocation(line: 558, column: 40, scope: !8855)
!8860 = !DILocation(line: 558, column: 44, scope: !8855)
!8861 = !DILocation(line: 558, column: 61, scope: !8855)
!8862 = !DILocation(line: 558, column: 63, scope: !8855)
!8863 = !DILocation(line: 558, column: 66, scope: !8855)
!8864 = !DILocation(line: 558, column: 8, scope: !8855)
!8865 = !DILocation(line: 558, column: 7, scope: !8841)
!8866 = !DILocation(line: 559, column: 62, scope: !8867)
!8867 = distinct !DILexicalBlock(scope: !8855, file: !3, line: 558, column: 74)
!8868 = !DILocation(line: 559, column: 65, scope: !8867)
!8869 = !DILocation(line: 559, column: 72, scope: !8867)
!8870 = !DILocation(line: 559, column: 74, scope: !8867)
!8871 = !DILocation(line: 559, column: 77, scope: !8867)
!8872 = !DILocation(line: 559, column: 4, scope: !8867)
!8873 = !DILocation(line: 560, column: 4, scope: !8867)
!8874 = !DILocation(line: 562, column: 2, scope: !8841)
!8875 = !DILocation(line: 554, column: 25, scope: !8835)
!8876 = !DILocation(line: 554, column: 2, scope: !8835)
!8877 = distinct !{!8877, !8838, !8878}
!8878 = !DILocation(line: 562, column: 2, scope: !8832)
!8879 = !DILocation(line: 564, column: 2, scope: !8819)
!8880 = !DILocation(line: 565, column: 1, scope: !8819)
!8881 = distinct !DISubprogram(name: "layerWrite_mdisps", scope: !3, file: !3, line: 567, type: !392, scopeLine: 568, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8882 = !DILocalVariable(name: "cdf", arg: 1, scope: !8881, file: !3, line: 567, type: !386)
!8883 = !DILocation(line: 567, column: 41, scope: !8881)
!8884 = !DILocalVariable(name: "data", arg: 2, scope: !8881, file: !3, line: 567, type: !335)
!8885 = !DILocation(line: 567, column: 58, scope: !8881)
!8886 = !DILocalVariable(name: "count", arg: 3, scope: !8881, file: !3, line: 567, type: !158)
!8887 = !DILocation(line: 567, column: 68, scope: !8881)
!8888 = !DILocalVariable(name: "d", scope: !8881, file: !3, line: 569, type: !8577)
!8889 = !DILocation(line: 569, column: 16, scope: !8881)
!8890 = !DILocation(line: 569, column: 20, scope: !8881)
!8891 = !DILocalVariable(name: "i", scope: !8881, file: !3, line: 570, type: !158)
!8892 = !DILocation(line: 570, column: 6, scope: !8881)
!8893 = !DILocation(line: 572, column: 9, scope: !8894)
!8894 = distinct !DILexicalBlock(scope: !8881, file: !3, line: 572, column: 2)
!8895 = !DILocation(line: 572, column: 7, scope: !8894)
!8896 = !DILocation(line: 572, column: 14, scope: !8897)
!8897 = distinct !DILexicalBlock(scope: !8894, file: !3, line: 572, column: 2)
!8898 = !DILocation(line: 572, column: 18, scope: !8897)
!8899 = !DILocation(line: 572, column: 16, scope: !8897)
!8900 = !DILocation(line: 572, column: 2, scope: !8894)
!8901 = !DILocation(line: 573, column: 23, scope: !8902)
!8902 = distinct !DILexicalBlock(scope: !8903, file: !3, line: 573, column: 7)
!8903 = distinct !DILexicalBlock(scope: !8897, file: !3, line: 572, column: 30)
!8904 = !DILocation(line: 573, column: 28, scope: !8902)
!8905 = !DILocation(line: 573, column: 30, scope: !8902)
!8906 = !DILocation(line: 573, column: 33, scope: !8902)
!8907 = !DILocation(line: 573, column: 41, scope: !8902)
!8908 = !DILocation(line: 573, column: 45, scope: !8902)
!8909 = !DILocation(line: 573, column: 62, scope: !8902)
!8910 = !DILocation(line: 573, column: 64, scope: !8902)
!8911 = !DILocation(line: 573, column: 67, scope: !8902)
!8912 = !DILocation(line: 573, column: 8, scope: !8902)
!8913 = !DILocation(line: 573, column: 7, scope: !8903)
!8914 = !DILocation(line: 574, column: 63, scope: !8915)
!8915 = distinct !DILexicalBlock(scope: !8902, file: !3, line: 573, column: 75)
!8916 = !DILocation(line: 574, column: 66, scope: !8915)
!8917 = !DILocation(line: 574, column: 73, scope: !8915)
!8918 = !DILocation(line: 574, column: 75, scope: !8915)
!8919 = !DILocation(line: 574, column: 78, scope: !8915)
!8920 = !DILocation(line: 574, column: 4, scope: !8915)
!8921 = !DILocation(line: 575, column: 4, scope: !8915)
!8922 = !DILocation(line: 577, column: 2, scope: !8903)
!8923 = !DILocation(line: 572, column: 25, scope: !8897)
!8924 = !DILocation(line: 572, column: 2, scope: !8897)
!8925 = distinct !{!8925, !8900, !8926}
!8926 = !DILocation(line: 577, column: 2, scope: !8894)
!8927 = !DILocation(line: 579, column: 2, scope: !8881)
!8928 = !DILocation(line: 580, column: 1, scope: !8881)
!8929 = distinct !DISubprogram(name: "layerFilesize_mdisps", scope: !3, file: !3, line: 582, type: !396, scopeLine: 583, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8930 = !DILocalVariable(name: "UNUSED_cdf", arg: 1, scope: !8929, file: !3, line: 582, type: !386)
!8931 = !DILocation(line: 582, column: 47, scope: !8929)
!8932 = !DILocalVariable(name: "data", arg: 2, scope: !8929, file: !3, line: 582, type: !335)
!8933 = !DILocation(line: 582, column: 72, scope: !8929)
!8934 = !DILocalVariable(name: "count", arg: 3, scope: !8929, file: !3, line: 582, type: !158)
!8935 = !DILocation(line: 582, column: 82, scope: !8929)
!8936 = !DILocalVariable(name: "d", scope: !8929, file: !3, line: 584, type: !8577)
!8937 = !DILocation(line: 584, column: 16, scope: !8929)
!8938 = !DILocation(line: 584, column: 20, scope: !8929)
!8939 = !DILocalVariable(name: "size", scope: !8929, file: !3, line: 585, type: !398)
!8940 = !DILocation(line: 585, column: 9, scope: !8929)
!8941 = !DILocalVariable(name: "i", scope: !8929, file: !3, line: 586, type: !158)
!8942 = !DILocation(line: 586, column: 6, scope: !8929)
!8943 = !DILocation(line: 588, column: 9, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !8929, file: !3, line: 588, column: 2)
!8945 = !DILocation(line: 588, column: 7, scope: !8944)
!8946 = !DILocation(line: 588, column: 14, scope: !8947)
!8947 = distinct !DILexicalBlock(scope: !8944, file: !3, line: 588, column: 2)
!8948 = !DILocation(line: 588, column: 18, scope: !8947)
!8949 = !DILocation(line: 588, column: 16, scope: !8947)
!8950 = !DILocation(line: 588, column: 2, scope: !8944)
!8951 = !DILocation(line: 589, column: 11, scope: !8947)
!8952 = !DILocation(line: 589, column: 13, scope: !8947)
!8953 = !DILocation(line: 589, column: 16, scope: !8947)
!8954 = !DILocation(line: 589, column: 24, scope: !8947)
!8955 = !DILocation(line: 589, column: 28, scope: !8947)
!8956 = !DILocation(line: 589, column: 8, scope: !8947)
!8957 = !DILocation(line: 589, column: 3, scope: !8947)
!8958 = !DILocation(line: 588, column: 25, scope: !8947)
!8959 = !DILocation(line: 588, column: 2, scope: !8947)
!8960 = distinct !{!8960, !8950, !8961}
!8961 = !DILocation(line: 589, column: 42, scope: !8944)
!8962 = !DILocation(line: 591, column: 9, scope: !8929)
!8963 = !DILocation(line: 591, column: 2, scope: !8929)
!8964 = distinct !DISubprogram(name: "layerInterp_shapekey", scope: !3, file: !3, line: 1027, type: !343, scopeLine: 1029, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!8965 = !DILocalVariable(name: "sources", arg: 1, scope: !8964, file: !3, line: 1027, type: !222)
!8966 = !DILocation(line: 1027, column: 41, scope: !8964)
!8967 = !DILocalVariable(name: "weights", arg: 2, scope: !8964, file: !3, line: 1027, type: !345)
!8968 = !DILocation(line: 1027, column: 63, scope: !8964)
!8969 = !DILocalVariable(name: "UNUSED_sub_weights", arg: 3, scope: !8964, file: !3, line: 1028, type: !345)
!8970 = !DILocation(line: 1028, column: 47, scope: !8964)
!8971 = !DILocalVariable(name: "count", arg: 4, scope: !8964, file: !3, line: 1028, type: !158)
!8972 = !DILocation(line: 1028, column: 72, scope: !8964)
!8973 = !DILocalVariable(name: "dest", arg: 5, scope: !8964, file: !3, line: 1028, type: !146)
!8974 = !DILocation(line: 1028, column: 85, scope: !8964)
!8975 = !DILocalVariable(name: "co", scope: !8964, file: !3, line: 1030, type: !252)
!8976 = !DILocation(line: 1030, column: 8, scope: !8964)
!8977 = !DILocalVariable(name: "in", scope: !8964, file: !3, line: 1031, type: !215)
!8978 = !DILocation(line: 1031, column: 10, scope: !8964)
!8979 = !DILocation(line: 1031, column: 25, scope: !8964)
!8980 = !DILocation(line: 1031, column: 15, scope: !8964)
!8981 = !DILocalVariable(name: "i", scope: !8964, file: !3, line: 1032, type: !158)
!8982 = !DILocation(line: 1032, column: 6, scope: !8964)
!8983 = !DILocation(line: 1034, column: 6, scope: !8984)
!8984 = distinct !DILexicalBlock(scope: !8964, file: !3, line: 1034, column: 6)
!8985 = !DILocation(line: 1034, column: 12, scope: !8984)
!8986 = !DILocation(line: 1034, column: 6, scope: !8964)
!8987 = !DILocation(line: 1034, column: 18, scope: !8984)
!8988 = !DILocation(line: 1036, column: 10, scope: !8964)
!8989 = !DILocation(line: 1036, column: 2, scope: !8964)
!8990 = !DILocation(line: 1038, column: 6, scope: !8991)
!8991 = distinct !DILexicalBlock(scope: !8964, file: !3, line: 1038, column: 6)
!8992 = !DILocation(line: 1038, column: 6, scope: !8964)
!8993 = !DILocation(line: 1039, column: 10, scope: !8994)
!8994 = distinct !DILexicalBlock(scope: !8995, file: !3, line: 1039, column: 3)
!8995 = distinct !DILexicalBlock(scope: !8991, file: !3, line: 1038, column: 15)
!8996 = !DILocation(line: 1039, column: 8, scope: !8994)
!8997 = !DILocation(line: 1039, column: 15, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 1039, column: 3)
!8999 = !DILocation(line: 1039, column: 19, scope: !8998)
!9000 = !DILocation(line: 1039, column: 17, scope: !8998)
!9001 = !DILocation(line: 1039, column: 3, scope: !8994)
!9002 = !DILocation(line: 1040, column: 17, scope: !9003)
!9003 = distinct !DILexicalBlock(scope: !8998, file: !3, line: 1039, column: 31)
!9004 = !DILocation(line: 1040, column: 21, scope: !9003)
!9005 = !DILocation(line: 1040, column: 24, scope: !9003)
!9006 = !DILocation(line: 1040, column: 28, scope: !9003)
!9007 = !DILocation(line: 1040, column: 36, scope: !9003)
!9008 = !DILocation(line: 1040, column: 4, scope: !9003)
!9009 = !DILocation(line: 1041, column: 3, scope: !9003)
!9010 = !DILocation(line: 1039, column: 26, scope: !8998)
!9011 = !DILocation(line: 1039, column: 3, scope: !8998)
!9012 = distinct !{!9012, !9001, !9013}
!9013 = !DILocation(line: 1041, column: 3, scope: !8994)
!9014 = !DILocation(line: 1042, column: 2, scope: !8995)
!9015 = !DILocation(line: 1044, column: 10, scope: !9016)
!9016 = distinct !DILexicalBlock(scope: !9017, file: !3, line: 1044, column: 3)
!9017 = distinct !DILexicalBlock(scope: !8991, file: !3, line: 1043, column: 7)
!9018 = !DILocation(line: 1044, column: 8, scope: !9016)
!9019 = !DILocation(line: 1044, column: 15, scope: !9020)
!9020 = distinct !DILexicalBlock(scope: !9016, file: !3, line: 1044, column: 3)
!9021 = !DILocation(line: 1044, column: 19, scope: !9020)
!9022 = !DILocation(line: 1044, column: 17, scope: !9020)
!9023 = !DILocation(line: 1044, column: 3, scope: !9016)
!9024 = !DILocation(line: 1045, column: 14, scope: !9025)
!9025 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 1044, column: 31)
!9026 = !DILocation(line: 1045, column: 18, scope: !9025)
!9027 = !DILocation(line: 1045, column: 21, scope: !9025)
!9028 = !DILocation(line: 1045, column: 4, scope: !9025)
!9029 = !DILocation(line: 1046, column: 3, scope: !9025)
!9030 = !DILocation(line: 1044, column: 26, scope: !9020)
!9031 = !DILocation(line: 1044, column: 3, scope: !9020)
!9032 = distinct !{!9032, !9023, !9033}
!9033 = !DILocation(line: 1046, column: 3, scope: !9016)
!9034 = !DILocation(line: 1050, column: 22, scope: !8964)
!9035 = !DILocation(line: 1050, column: 13, scope: !8964)
!9036 = !DILocation(line: 1050, column: 28, scope: !8964)
!9037 = !DILocation(line: 1050, column: 2, scope: !8964)
!9038 = !DILocation(line: 1051, column: 1, scope: !8964)
!9039 = distinct !DISubprogram(name: "layerInterp_bweight", scope: !3, file: !3, line: 1001, type: !343, scopeLine: 1003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9040 = !DILocalVariable(name: "sources", arg: 1, scope: !9039, file: !3, line: 1001, type: !222)
!9041 = !DILocation(line: 1001, column: 40, scope: !9039)
!9042 = !DILocalVariable(name: "weights", arg: 2, scope: !9039, file: !3, line: 1001, type: !345)
!9043 = !DILocation(line: 1001, column: 62, scope: !9039)
!9044 = !DILocalVariable(name: "UNUSED_sub_weights", arg: 3, scope: !9039, file: !3, line: 1002, type: !345)
!9045 = !DILocation(line: 1002, column: 46, scope: !9039)
!9046 = !DILocalVariable(name: "count", arg: 4, scope: !9039, file: !3, line: 1002, type: !158)
!9047 = !DILocation(line: 1002, column: 71, scope: !9039)
!9048 = !DILocalVariable(name: "dest", arg: 5, scope: !9039, file: !3, line: 1002, type: !146)
!9049 = !DILocation(line: 1002, column: 84, scope: !9039)
!9050 = !DILocalVariable(name: "f", scope: !9039, file: !3, line: 1004, type: !160)
!9051 = !DILocation(line: 1004, column: 8, scope: !9039)
!9052 = !DILocalVariable(name: "in", scope: !9039, file: !3, line: 1005, type: !215)
!9053 = !DILocation(line: 1005, column: 10, scope: !9039)
!9054 = !DILocation(line: 1005, column: 25, scope: !9039)
!9055 = !DILocation(line: 1005, column: 15, scope: !9039)
!9056 = !DILocalVariable(name: "i", scope: !9039, file: !3, line: 1006, type: !158)
!9057 = !DILocation(line: 1006, column: 6, scope: !9039)
!9058 = !DILocation(line: 1008, column: 6, scope: !9059)
!9059 = distinct !DILexicalBlock(scope: !9039, file: !3, line: 1008, column: 6)
!9060 = !DILocation(line: 1008, column: 12, scope: !9059)
!9061 = !DILocation(line: 1008, column: 6, scope: !9039)
!9062 = !DILocation(line: 1008, column: 18, scope: !9059)
!9063 = !DILocation(line: 1010, column: 4, scope: !9039)
!9064 = !DILocation(line: 1012, column: 6, scope: !9065)
!9065 = distinct !DILexicalBlock(scope: !9039, file: !3, line: 1012, column: 6)
!9066 = !DILocation(line: 1012, column: 6, scope: !9039)
!9067 = !DILocation(line: 1013, column: 10, scope: !9068)
!9068 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 1013, column: 3)
!9069 = distinct !DILexicalBlock(scope: !9065, file: !3, line: 1012, column: 15)
!9070 = !DILocation(line: 1013, column: 8, scope: !9068)
!9071 = !DILocation(line: 1013, column: 15, scope: !9072)
!9072 = distinct !DILexicalBlock(scope: !9068, file: !3, line: 1013, column: 3)
!9073 = !DILocation(line: 1013, column: 19, scope: !9072)
!9074 = !DILocation(line: 1013, column: 17, scope: !9072)
!9075 = !DILocation(line: 1013, column: 3, scope: !9068)
!9076 = !DILocation(line: 1014, column: 10, scope: !9077)
!9077 = distinct !DILexicalBlock(scope: !9072, file: !3, line: 1013, column: 31)
!9078 = !DILocation(line: 1014, column: 13, scope: !9077)
!9079 = !DILocation(line: 1014, column: 9, scope: !9077)
!9080 = !DILocation(line: 1014, column: 18, scope: !9077)
!9081 = !DILocation(line: 1014, column: 26, scope: !9077)
!9082 = !DILocation(line: 1014, column: 16, scope: !9077)
!9083 = !DILocation(line: 1014, column: 6, scope: !9077)
!9084 = !DILocation(line: 1015, column: 3, scope: !9077)
!9085 = !DILocation(line: 1013, column: 26, scope: !9072)
!9086 = !DILocation(line: 1013, column: 3, scope: !9072)
!9087 = distinct !{!9087, !9075, !9088}
!9088 = !DILocation(line: 1015, column: 3, scope: !9068)
!9089 = !DILocation(line: 1016, column: 2, scope: !9069)
!9090 = !DILocation(line: 1018, column: 10, scope: !9091)
!9091 = distinct !DILexicalBlock(scope: !9092, file: !3, line: 1018, column: 3)
!9092 = distinct !DILexicalBlock(scope: !9065, file: !3, line: 1017, column: 7)
!9093 = !DILocation(line: 1018, column: 8, scope: !9091)
!9094 = !DILocation(line: 1018, column: 15, scope: !9095)
!9095 = distinct !DILexicalBlock(scope: !9091, file: !3, line: 1018, column: 3)
!9096 = !DILocation(line: 1018, column: 19, scope: !9095)
!9097 = !DILocation(line: 1018, column: 17, scope: !9095)
!9098 = !DILocation(line: 1018, column: 3, scope: !9091)
!9099 = !DILocation(line: 1019, column: 10, scope: !9100)
!9100 = distinct !DILexicalBlock(scope: !9095, file: !3, line: 1018, column: 31)
!9101 = !DILocation(line: 1019, column: 13, scope: !9100)
!9102 = !DILocation(line: 1019, column: 9, scope: !9100)
!9103 = !DILocation(line: 1019, column: 6, scope: !9100)
!9104 = !DILocation(line: 1020, column: 3, scope: !9100)
!9105 = !DILocation(line: 1018, column: 26, scope: !9095)
!9106 = !DILocation(line: 1018, column: 3, scope: !9095)
!9107 = distinct !{!9107, !9098, !9108}
!9108 = !DILocation(line: 1020, column: 3, scope: !9091)
!9109 = !DILocation(line: 1024, column: 21, scope: !9039)
!9110 = !DILocation(line: 1024, column: 13, scope: !9039)
!9111 = !DILocation(line: 1024, column: 4, scope: !9039)
!9112 = !DILocation(line: 1024, column: 19, scope: !9039)
!9113 = !DILocation(line: 1025, column: 1, scope: !9039)
!9114 = distinct !DISubprogram(name: "layerInterp_mloop_origspace", scope: !3, file: !3, line: 885, type: !343, scopeLine: 887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9115 = !DILocalVariable(name: "sources", arg: 1, scope: !9114, file: !3, line: 885, type: !222)
!9116 = !DILocation(line: 885, column: 48, scope: !9114)
!9117 = !DILocalVariable(name: "weights", arg: 2, scope: !9114, file: !3, line: 885, type: !345)
!9118 = !DILocation(line: 885, column: 70, scope: !9114)
!9119 = !DILocalVariable(name: "sub_weights", arg: 3, scope: !9114, file: !3, line: 886, type: !345)
!9120 = !DILocation(line: 886, column: 54, scope: !9114)
!9121 = !DILocalVariable(name: "count", arg: 4, scope: !9114, file: !3, line: 886, type: !158)
!9122 = !DILocation(line: 886, column: 71, scope: !9114)
!9123 = !DILocalVariable(name: "dest", arg: 5, scope: !9114, file: !3, line: 886, type: !146)
!9124 = !DILocation(line: 886, column: 84, scope: !9114)
!9125 = !DILocalVariable(name: "uv", scope: !9114, file: !3, line: 888, type: !204)
!9126 = !DILocation(line: 888, column: 8, scope: !9114)
!9127 = !DILocalVariable(name: "i", scope: !9114, file: !3, line: 889, type: !158)
!9128 = !DILocation(line: 889, column: 6, scope: !9114)
!9129 = !DILocation(line: 891, column: 10, scope: !9114)
!9130 = !DILocation(line: 891, column: 2, scope: !9114)
!9131 = !DILocation(line: 893, column: 6, scope: !9132)
!9132 = distinct !DILexicalBlock(scope: !9114, file: !3, line: 893, column: 6)
!9133 = !DILocation(line: 893, column: 6, scope: !9114)
!9134 = !DILocalVariable(name: "sub_weight", scope: !9135, file: !3, line: 894, type: !345)
!9135 = distinct !DILexicalBlock(scope: !9132, file: !3, line: 893, column: 19)
!9136 = !DILocation(line: 894, column: 16, scope: !9135)
!9137 = !DILocation(line: 894, column: 29, scope: !9135)
!9138 = !DILocation(line: 895, column: 10, scope: !9139)
!9139 = distinct !DILexicalBlock(scope: !9135, file: !3, line: 895, column: 3)
!9140 = !DILocation(line: 895, column: 8, scope: !9139)
!9141 = !DILocation(line: 895, column: 15, scope: !9142)
!9142 = distinct !DILexicalBlock(scope: !9139, file: !3, line: 895, column: 3)
!9143 = !DILocation(line: 895, column: 19, scope: !9142)
!9144 = !DILocation(line: 895, column: 17, scope: !9142)
!9145 = !DILocation(line: 895, column: 3, scope: !9139)
!9146 = !DILocalVariable(name: "weight", scope: !9147, file: !3, line: 896, type: !160)
!9147 = distinct !DILexicalBlock(scope: !9142, file: !3, line: 895, column: 31)
!9148 = !DILocation(line: 896, column: 10, scope: !9147)
!9149 = !DILocation(line: 896, column: 19, scope: !9147)
!9150 = !DILocation(line: 896, column: 29, scope: !9147)
!9151 = !DILocation(line: 896, column: 37, scope: !9147)
!9152 = !DILocalVariable(name: "src", scope: !9147, file: !3, line: 897, type: !217)
!9153 = !DILocation(line: 897, column: 19, scope: !9147)
!9154 = !DILocation(line: 897, column: 25, scope: !9147)
!9155 = !DILocation(line: 897, column: 33, scope: !9147)
!9156 = !DILocation(line: 898, column: 17, scope: !9147)
!9157 = !DILocation(line: 898, column: 21, scope: !9147)
!9158 = !DILocation(line: 898, column: 26, scope: !9147)
!9159 = !DILocation(line: 898, column: 32, scope: !9147)
!9160 = !DILocation(line: 898, column: 31, scope: !9147)
!9161 = !DILocation(line: 898, column: 46, scope: !9147)
!9162 = !DILocation(line: 898, column: 44, scope: !9147)
!9163 = !DILocation(line: 898, column: 4, scope: !9147)
!9164 = !DILocation(line: 899, column: 14, scope: !9147)
!9165 = !DILocation(line: 900, column: 3, scope: !9147)
!9166 = !DILocation(line: 895, column: 27, scope: !9142)
!9167 = !DILocation(line: 895, column: 3, scope: !9142)
!9168 = distinct !{!9168, !9145, !9169}
!9169 = !DILocation(line: 900, column: 3, scope: !9139)
!9170 = !DILocation(line: 901, column: 2, scope: !9135)
!9171 = !DILocation(line: 903, column: 10, scope: !9172)
!9172 = distinct !DILexicalBlock(scope: !9173, file: !3, line: 903, column: 3)
!9173 = distinct !DILexicalBlock(scope: !9132, file: !3, line: 902, column: 7)
!9174 = !DILocation(line: 903, column: 8, scope: !9172)
!9175 = !DILocation(line: 903, column: 15, scope: !9176)
!9176 = distinct !DILexicalBlock(scope: !9172, file: !3, line: 903, column: 3)
!9177 = !DILocation(line: 903, column: 19, scope: !9176)
!9178 = !DILocation(line: 903, column: 17, scope: !9176)
!9179 = !DILocation(line: 903, column: 3, scope: !9172)
!9180 = !DILocalVariable(name: "weight", scope: !9181, file: !3, line: 904, type: !160)
!9181 = distinct !DILexicalBlock(scope: !9176, file: !3, line: 903, column: 31)
!9182 = !DILocation(line: 904, column: 10, scope: !9181)
!9183 = !DILocation(line: 904, column: 19, scope: !9181)
!9184 = !DILocation(line: 904, column: 29, scope: !9181)
!9185 = !DILocation(line: 904, column: 37, scope: !9181)
!9186 = !DILocalVariable(name: "src", scope: !9181, file: !3, line: 905, type: !217)
!9187 = !DILocation(line: 905, column: 19, scope: !9181)
!9188 = !DILocation(line: 905, column: 25, scope: !9181)
!9189 = !DILocation(line: 905, column: 33, scope: !9181)
!9190 = !DILocation(line: 906, column: 17, scope: !9181)
!9191 = !DILocation(line: 906, column: 21, scope: !9181)
!9192 = !DILocation(line: 906, column: 26, scope: !9181)
!9193 = !DILocation(line: 906, column: 30, scope: !9181)
!9194 = !DILocation(line: 906, column: 4, scope: !9181)
!9195 = !DILocation(line: 907, column: 3, scope: !9181)
!9196 = !DILocation(line: 903, column: 27, scope: !9176)
!9197 = !DILocation(line: 903, column: 3, scope: !9176)
!9198 = distinct !{!9198, !9179, !9199}
!9199 = !DILocation(line: 907, column: 3, scope: !9172)
!9200 = !DILocation(line: 911, column: 31, scope: !9114)
!9201 = !DILocation(line: 911, column: 14, scope: !9114)
!9202 = !DILocation(line: 911, column: 38, scope: !9114)
!9203 = !DILocation(line: 911, column: 13, scope: !9114)
!9204 = !DILocation(line: 911, column: 42, scope: !9114)
!9205 = !DILocation(line: 911, column: 2, scope: !9114)
!9206 = !DILocation(line: 912, column: 1, scope: !9114)
!9207 = distinct !DISubprogram(name: "layerEqual_mloop_origspace", scope: !3, file: !3, line: 848, type: !359, scopeLine: 849, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9208 = !DILocalVariable(name: "data1", arg: 1, scope: !9207, file: !3, line: 848, type: !335)
!9209 = !DILocation(line: 848, column: 52, scope: !9207)
!9210 = !DILocalVariable(name: "data2", arg: 2, scope: !9207, file: !3, line: 848, type: !335)
!9211 = !DILocation(line: 848, column: 71, scope: !9207)
!9212 = !DILocalVariable(name: "luv1", scope: !9207, file: !3, line: 850, type: !9213)
!9213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9214, size: 64)
!9214 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !218)
!9215 = !DILocation(line: 850, column: 23, scope: !9207)
!9216 = !DILocation(line: 850, column: 30, scope: !9207)
!9217 = !DILocalVariable(name: "luv2", scope: !9207, file: !3, line: 850, type: !9213)
!9218 = !DILocation(line: 850, column: 38, scope: !9207)
!9219 = !DILocation(line: 850, column: 45, scope: !9207)
!9220 = !DILocation(line: 852, column: 26, scope: !9207)
!9221 = !DILocation(line: 852, column: 32, scope: !9207)
!9222 = !DILocation(line: 852, column: 36, scope: !9207)
!9223 = !DILocation(line: 852, column: 42, scope: !9207)
!9224 = !DILocation(line: 852, column: 9, scope: !9207)
!9225 = !DILocation(line: 852, column: 46, scope: !9207)
!9226 = !DILocation(line: 852, column: 2, scope: !9207)
!9227 = distinct !DISubprogram(name: "layerMultiply_mloop_origspace", scope: !3, file: !3, line: 855, type: !364, scopeLine: 856, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9228 = !DILocalVariable(name: "data", arg: 1, scope: !9227, file: !3, line: 855, type: !146)
!9229 = !DILocation(line: 855, column: 49, scope: !9227)
!9230 = !DILocalVariable(name: "fac", arg: 2, scope: !9227, file: !3, line: 855, type: !160)
!9231 = !DILocation(line: 855, column: 61, scope: !9227)
!9232 = !DILocalVariable(name: "luv", scope: !9227, file: !3, line: 857, type: !217)
!9233 = !DILocation(line: 857, column: 17, scope: !9227)
!9234 = !DILocation(line: 857, column: 23, scope: !9227)
!9235 = !DILocation(line: 859, column: 12, scope: !9227)
!9236 = !DILocation(line: 859, column: 17, scope: !9227)
!9237 = !DILocation(line: 859, column: 21, scope: !9227)
!9238 = !DILocation(line: 859, column: 2, scope: !9227)
!9239 = !DILocation(line: 860, column: 1, scope: !9227)
!9240 = distinct !DISubprogram(name: "layerInitMinMax_mloop_origspace", scope: !3, file: !3, line: 862, type: !368, scopeLine: 863, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9241 = !DILocalVariable(name: "vmin", arg: 1, scope: !9240, file: !3, line: 862, type: !146)
!9242 = !DILocation(line: 862, column: 51, scope: !9240)
!9243 = !DILocalVariable(name: "vmax", arg: 2, scope: !9240, file: !3, line: 862, type: !146)
!9244 = !DILocation(line: 862, column: 63, scope: !9240)
!9245 = !DILocalVariable(name: "min", scope: !9240, file: !3, line: 864, type: !217)
!9246 = !DILocation(line: 864, column: 17, scope: !9240)
!9247 = !DILocation(line: 864, column: 23, scope: !9240)
!9248 = !DILocalVariable(name: "max", scope: !9240, file: !3, line: 864, type: !217)
!9249 = !DILocation(line: 864, column: 30, scope: !9240)
!9250 = !DILocation(line: 864, column: 36, scope: !9240)
!9251 = !DILocation(line: 866, column: 2, scope: !9252)
!9252 = distinct !DILexicalBlock(scope: !9240, file: !3, line: 866, column: 2)
!9253 = !DILocation(line: 867, column: 1, scope: !9240)
!9254 = distinct !DISubprogram(name: "layerAdd_mloop_origspace", scope: !3, file: !3, line: 877, type: !372, scopeLine: 878, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9255 = !DILocalVariable(name: "data1", arg: 1, scope: !9254, file: !3, line: 877, type: !146)
!9256 = !DILocation(line: 877, column: 44, scope: !9254)
!9257 = !DILocalVariable(name: "data2", arg: 2, scope: !9254, file: !3, line: 877, type: !335)
!9258 = !DILocation(line: 877, column: 63, scope: !9254)
!9259 = !DILocalVariable(name: "l1", scope: !9254, file: !3, line: 879, type: !217)
!9260 = !DILocation(line: 879, column: 17, scope: !9254)
!9261 = !DILocation(line: 879, column: 22, scope: !9254)
!9262 = !DILocalVariable(name: "l2", scope: !9254, file: !3, line: 880, type: !9213)
!9263 = !DILocation(line: 880, column: 23, scope: !9254)
!9264 = !DILocation(line: 880, column: 28, scope: !9254)
!9265 = !DILocation(line: 882, column: 12, scope: !9254)
!9266 = !DILocation(line: 882, column: 16, scope: !9254)
!9267 = !DILocation(line: 882, column: 20, scope: !9254)
!9268 = !DILocation(line: 882, column: 24, scope: !9254)
!9269 = !DILocation(line: 882, column: 2, scope: !9254)
!9270 = !DILocation(line: 883, column: 1, scope: !9254)
!9271 = distinct !DISubprogram(name: "layerDoMinMax_mloop_origspace", scope: !3, file: !3, line: 869, type: !376, scopeLine: 870, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9272 = !DILocalVariable(name: "data", arg: 1, scope: !9271, file: !3, line: 869, type: !335)
!9273 = !DILocation(line: 869, column: 55, scope: !9271)
!9274 = !DILocalVariable(name: "vmin", arg: 2, scope: !9271, file: !3, line: 869, type: !146)
!9275 = !DILocation(line: 869, column: 67, scope: !9271)
!9276 = !DILocalVariable(name: "vmax", arg: 3, scope: !9271, file: !3, line: 869, type: !146)
!9277 = !DILocation(line: 869, column: 79, scope: !9271)
!9278 = !DILocalVariable(name: "luv", scope: !9271, file: !3, line: 871, type: !9213)
!9279 = !DILocation(line: 871, column: 23, scope: !9271)
!9280 = !DILocation(line: 871, column: 29, scope: !9271)
!9281 = !DILocalVariable(name: "min", scope: !9271, file: !3, line: 872, type: !217)
!9282 = !DILocation(line: 872, column: 17, scope: !9271)
!9283 = !DILocation(line: 872, column: 23, scope: !9271)
!9284 = !DILocalVariable(name: "max", scope: !9271, file: !3, line: 872, type: !217)
!9285 = !DILocation(line: 872, column: 30, scope: !9271)
!9286 = !DILocation(line: 872, column: 36, scope: !9271)
!9287 = !DILocation(line: 874, column: 17, scope: !9271)
!9288 = !DILocation(line: 874, column: 22, scope: !9271)
!9289 = !DILocation(line: 874, column: 26, scope: !9271)
!9290 = !DILocation(line: 874, column: 31, scope: !9271)
!9291 = !DILocation(line: 874, column: 35, scope: !9271)
!9292 = !DILocation(line: 874, column: 40, scope: !9271)
!9293 = !DILocation(line: 874, column: 2, scope: !9271)
!9294 = !DILocation(line: 875, column: 1, scope: !9271)
!9295 = distinct !DISubprogram(name: "layerCopyValue_mloop_origspace", scope: !3, file: !3, line: 840, type: !380, scopeLine: 841, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9296 = !DILocalVariable(name: "source", arg: 1, scope: !9295, file: !3, line: 840, type: !335)
!9297 = !DILocation(line: 840, column: 56, scope: !9295)
!9298 = !DILocalVariable(name: "dest", arg: 2, scope: !9295, file: !3, line: 840, type: !146)
!9299 = !DILocation(line: 840, column: 70, scope: !9295)
!9300 = !DILocalVariable(name: "luv1", scope: !9295, file: !3, line: 842, type: !9213)
!9301 = !DILocation(line: 842, column: 23, scope: !9295)
!9302 = !DILocation(line: 842, column: 30, scope: !9295)
!9303 = !DILocalVariable(name: "luv2", scope: !9295, file: !3, line: 843, type: !217)
!9304 = !DILocation(line: 843, column: 17, scope: !9295)
!9305 = !DILocation(line: 843, column: 24, scope: !9295)
!9306 = !DILocation(line: 845, column: 13, scope: !9295)
!9307 = !DILocation(line: 845, column: 19, scope: !9295)
!9308 = !DILocation(line: 845, column: 23, scope: !9295)
!9309 = !DILocation(line: 845, column: 29, scope: !9295)
!9310 = !DILocation(line: 845, column: 2, scope: !9295)
!9311 = !DILocation(line: 846, column: 1, scope: !9295)
!9312 = distinct !DISubprogram(name: "layerCopy_bmesh_elem_py_ptr", scope: !3, file: !3, line: 194, type: !333, scopeLine: 196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9313 = !DILocalVariable(name: "UNUSED_source", arg: 1, scope: !9312, file: !3, line: 194, type: !335)
!9314 = !DILocation(line: 194, column: 53, scope: !9312)
!9315 = !DILocalVariable(name: "dest", arg: 2, scope: !9312, file: !3, line: 194, type: !146)
!9316 = !DILocation(line: 194, column: 75, scope: !9312)
!9317 = !DILocalVariable(name: "count", arg: 3, scope: !9312, file: !3, line: 195, type: !158)
!9318 = !DILocation(line: 195, column: 45, scope: !9312)
!9319 = !DILocalVariable(name: "i", scope: !9312, file: !3, line: 197, type: !158)
!9320 = !DILocation(line: 197, column: 6, scope: !9312)
!9321 = !DILocalVariable(name: "size", scope: !9312, file: !3, line: 197, type: !158)
!9322 = !DILocation(line: 197, column: 9, scope: !9312)
!9323 = !DILocation(line: 199, column: 9, scope: !9324)
!9324 = distinct !DILexicalBlock(scope: !9312, file: !3, line: 199, column: 2)
!9325 = !DILocation(line: 199, column: 7, scope: !9324)
!9326 = !DILocation(line: 199, column: 14, scope: !9327)
!9327 = distinct !DILexicalBlock(scope: !9324, file: !3, line: 199, column: 2)
!9328 = !DILocation(line: 199, column: 18, scope: !9327)
!9329 = !DILocation(line: 199, column: 16, scope: !9327)
!9330 = !DILocation(line: 199, column: 2, scope: !9324)
!9331 = !DILocalVariable(name: "ptr", scope: !9332, file: !3, line: 200, type: !222)
!9332 = distinct !DILexicalBlock(scope: !9327, file: !3, line: 199, column: 30)
!9333 = !DILocation(line: 200, column: 10, scope: !9332)
!9334 = !DILocation(line: 200, column: 34, scope: !9332)
!9335 = !DILocation(line: 200, column: 41, scope: !9332)
!9336 = !DILocation(line: 200, column: 45, scope: !9332)
!9337 = !DILocation(line: 200, column: 43, scope: !9332)
!9338 = !DILocation(line: 200, column: 39, scope: !9332)
!9339 = !DILocation(line: 200, column: 16, scope: !9332)
!9340 = !DILocation(line: 201, column: 4, scope: !9332)
!9341 = !DILocation(line: 201, column: 8, scope: !9332)
!9342 = !DILocation(line: 202, column: 2, scope: !9332)
!9343 = !DILocation(line: 199, column: 25, scope: !9327)
!9344 = !DILocation(line: 199, column: 2, scope: !9327)
!9345 = distinct !{!9345, !9330, !9346}
!9346 = !DILocation(line: 202, column: 2, scope: !9324)
!9347 = !DILocation(line: 203, column: 1, scope: !9312)
!9348 = distinct !DISubprogram(name: "layerFree_bmesh_elem_py_ptr", scope: !3, file: !3, line: 212, type: !339, scopeLine: 213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9349 = !DILocalVariable(name: "data", arg: 1, scope: !9348, file: !3, line: 212, type: !146)
!9350 = !DILocation(line: 212, column: 47, scope: !9348)
!9351 = !DILocalVariable(name: "count", arg: 2, scope: !9348, file: !3, line: 212, type: !158)
!9352 = !DILocation(line: 212, column: 57, scope: !9348)
!9353 = !DILocalVariable(name: "size", arg: 3, scope: !9348, file: !3, line: 212, type: !158)
!9354 = !DILocation(line: 212, column: 68, scope: !9348)
!9355 = !DILocalVariable(name: "i", scope: !9348, file: !3, line: 214, type: !158)
!9356 = !DILocation(line: 214, column: 6, scope: !9348)
!9357 = !DILocation(line: 216, column: 9, scope: !9358)
!9358 = distinct !DILexicalBlock(scope: !9348, file: !3, line: 216, column: 2)
!9359 = !DILocation(line: 216, column: 7, scope: !9358)
!9360 = !DILocation(line: 216, column: 14, scope: !9361)
!9361 = distinct !DILexicalBlock(scope: !9358, file: !3, line: 216, column: 2)
!9362 = !DILocation(line: 216, column: 18, scope: !9361)
!9363 = !DILocation(line: 216, column: 16, scope: !9361)
!9364 = !DILocation(line: 216, column: 2, scope: !9358)
!9365 = !DILocalVariable(name: "ptr", scope: !9366, file: !3, line: 217, type: !222)
!9366 = distinct !DILexicalBlock(scope: !9361, file: !3, line: 216, column: 30)
!9367 = !DILocation(line: 217, column: 10, scope: !9366)
!9368 = !DILocation(line: 217, column: 33, scope: !9366)
!9369 = !DILocation(line: 217, column: 40, scope: !9366)
!9370 = !DILocation(line: 217, column: 44, scope: !9366)
!9371 = !DILocation(line: 217, column: 42, scope: !9366)
!9372 = !DILocation(line: 217, column: 38, scope: !9366)
!9373 = !DILocation(line: 217, column: 16, scope: !9366)
!9374 = !DILocation(line: 218, column: 8, scope: !9375)
!9375 = distinct !DILexicalBlock(scope: !9366, file: !3, line: 218, column: 7)
!9376 = !DILocation(line: 218, column: 7, scope: !9375)
!9377 = !DILocation(line: 218, column: 7, scope: !9366)
!9378 = !DILocation(line: 219, column: 31, scope: !9379)
!9379 = distinct !DILexicalBlock(scope: !9375, file: !3, line: 218, column: 13)
!9380 = !DILocation(line: 219, column: 30, scope: !9379)
!9381 = !DILocation(line: 219, column: 4, scope: !9379)
!9382 = !DILocation(line: 220, column: 3, scope: !9379)
!9383 = !DILocation(line: 221, column: 2, scope: !9366)
!9384 = !DILocation(line: 216, column: 25, scope: !9361)
!9385 = !DILocation(line: 216, column: 2, scope: !9361)
!9386 = distinct !{!9386, !9364, !9387}
!9387 = !DILocation(line: 221, column: 2, scope: !9358)
!9388 = !DILocation(line: 222, column: 1, scope: !9348)
!9389 = distinct !DISubprogram(name: "layerCopy_grid_paint_mask", scope: !3, file: !3, line: 594, type: !333, scopeLine: 595, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9390 = !DILocalVariable(name: "source", arg: 1, scope: !9389, file: !3, line: 594, type: !335)
!9391 = !DILocation(line: 594, column: 51, scope: !9389)
!9392 = !DILocalVariable(name: "dest", arg: 2, scope: !9389, file: !3, line: 594, type: !146)
!9393 = !DILocation(line: 594, column: 65, scope: !9389)
!9394 = !DILocalVariable(name: "count", arg: 3, scope: !9389, file: !3, line: 594, type: !158)
!9395 = !DILocation(line: 594, column: 75, scope: !9389)
!9396 = !DILocalVariable(name: "i", scope: !9389, file: !3, line: 596, type: !158)
!9397 = !DILocation(line: 596, column: 6, scope: !9389)
!9398 = !DILocalVariable(name: "s", scope: !9389, file: !3, line: 597, type: !9399)
!9399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9400, size: 64)
!9400 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9401)
!9401 = !DIDerivedType(tag: DW_TAG_typedef, name: "GridPaintMask", file: !118, line: 261, baseType: !9402)
!9402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GridPaintMask", file: !118, line: 253, size: 128, elements: !9403)
!9403 = !{!9404, !9405, !9406}
!9404 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !9402, file: !118, line: 255, baseType: !216, size: 64)
!9405 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !9402, file: !118, line: 258, baseType: !7, size: 32, offset: 64)
!9406 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !9402, file: !118, line: 260, baseType: !158, size: 32, offset: 96)
!9407 = !DILocation(line: 597, column: 23, scope: !9389)
!9408 = !DILocation(line: 597, column: 27, scope: !9389)
!9409 = !DILocalVariable(name: "d", scope: !9389, file: !3, line: 598, type: !9410)
!9410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9401, size: 64)
!9411 = !DILocation(line: 598, column: 17, scope: !9389)
!9412 = !DILocation(line: 598, column: 21, scope: !9389)
!9413 = !DILocation(line: 600, column: 9, scope: !9414)
!9414 = distinct !DILexicalBlock(scope: !9389, file: !3, line: 600, column: 2)
!9415 = !DILocation(line: 600, column: 7, scope: !9414)
!9416 = !DILocation(line: 600, column: 14, scope: !9417)
!9417 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 600, column: 2)
!9418 = !DILocation(line: 600, column: 18, scope: !9417)
!9419 = !DILocation(line: 600, column: 16, scope: !9417)
!9420 = !DILocation(line: 600, column: 2, scope: !9414)
!9421 = !DILocation(line: 601, column: 7, scope: !9422)
!9422 = distinct !DILexicalBlock(scope: !9423, file: !3, line: 601, column: 7)
!9423 = distinct !DILexicalBlock(scope: !9417, file: !3, line: 600, column: 30)
!9424 = !DILocation(line: 601, column: 9, scope: !9422)
!9425 = !DILocation(line: 601, column: 12, scope: !9422)
!9426 = !DILocation(line: 601, column: 7, scope: !9423)
!9427 = !DILocation(line: 602, column: 16, scope: !9428)
!9428 = distinct !DILexicalBlock(scope: !9422, file: !3, line: 601, column: 18)
!9429 = !DILocation(line: 602, column: 30, scope: !9428)
!9430 = !DILocation(line: 602, column: 32, scope: !9428)
!9431 = !DILocation(line: 602, column: 35, scope: !9428)
!9432 = !DILocation(line: 602, column: 4, scope: !9428)
!9433 = !DILocation(line: 602, column: 6, scope: !9428)
!9434 = !DILocation(line: 602, column: 9, scope: !9428)
!9435 = !DILocation(line: 602, column: 14, scope: !9428)
!9436 = !DILocation(line: 603, column: 17, scope: !9428)
!9437 = !DILocation(line: 603, column: 19, scope: !9428)
!9438 = !DILocation(line: 603, column: 22, scope: !9428)
!9439 = !DILocation(line: 603, column: 4, scope: !9428)
!9440 = !DILocation(line: 603, column: 6, scope: !9428)
!9441 = !DILocation(line: 603, column: 9, scope: !9428)
!9442 = !DILocation(line: 603, column: 15, scope: !9428)
!9443 = !DILocation(line: 604, column: 3, scope: !9428)
!9444 = !DILocation(line: 606, column: 4, scope: !9445)
!9445 = distinct !DILexicalBlock(scope: !9422, file: !3, line: 605, column: 8)
!9446 = !DILocation(line: 606, column: 6, scope: !9445)
!9447 = !DILocation(line: 606, column: 9, scope: !9445)
!9448 = !DILocation(line: 606, column: 14, scope: !9445)
!9449 = !DILocation(line: 607, column: 4, scope: !9445)
!9450 = !DILocation(line: 607, column: 6, scope: !9445)
!9451 = !DILocation(line: 607, column: 9, scope: !9445)
!9452 = !DILocation(line: 607, column: 15, scope: !9445)
!9453 = !DILocation(line: 610, column: 2, scope: !9423)
!9454 = !DILocation(line: 600, column: 25, scope: !9417)
!9455 = !DILocation(line: 600, column: 2, scope: !9417)
!9456 = distinct !{!9456, !9420, !9457}
!9457 = !DILocation(line: 610, column: 2, scope: !9414)
!9458 = !DILocation(line: 611, column: 1, scope: !9389)
!9459 = distinct !DISubprogram(name: "layerFree_grid_paint_mask", scope: !3, file: !3, line: 613, type: !339, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9460 = !DILocalVariable(name: "data", arg: 1, scope: !9459, file: !3, line: 613, type: !146)
!9461 = !DILocation(line: 613, column: 45, scope: !9459)
!9462 = !DILocalVariable(name: "count", arg: 2, scope: !9459, file: !3, line: 613, type: !158)
!9463 = !DILocation(line: 613, column: 55, scope: !9459)
!9464 = !DILocalVariable(name: "UNUSED_size", arg: 3, scope: !9459, file: !3, line: 613, type: !158)
!9465 = !DILocation(line: 613, column: 66, scope: !9459)
!9466 = !DILocalVariable(name: "i", scope: !9459, file: !3, line: 615, type: !158)
!9467 = !DILocation(line: 615, column: 6, scope: !9459)
!9468 = !DILocalVariable(name: "gpm", scope: !9459, file: !3, line: 616, type: !9410)
!9469 = !DILocation(line: 616, column: 17, scope: !9459)
!9470 = !DILocation(line: 616, column: 23, scope: !9459)
!9471 = !DILocation(line: 618, column: 9, scope: !9472)
!9472 = distinct !DILexicalBlock(scope: !9459, file: !3, line: 618, column: 2)
!9473 = !DILocation(line: 618, column: 7, scope: !9472)
!9474 = !DILocation(line: 618, column: 14, scope: !9475)
!9475 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 618, column: 2)
!9476 = !DILocation(line: 618, column: 18, scope: !9475)
!9477 = !DILocation(line: 618, column: 16, scope: !9475)
!9478 = !DILocation(line: 618, column: 2, scope: !9472)
!9479 = !DILocation(line: 619, column: 7, scope: !9480)
!9480 = distinct !DILexicalBlock(scope: !9481, file: !3, line: 619, column: 7)
!9481 = distinct !DILexicalBlock(scope: !9475, file: !3, line: 618, column: 30)
!9482 = !DILocation(line: 619, column: 11, scope: !9480)
!9483 = !DILocation(line: 619, column: 14, scope: !9480)
!9484 = !DILocation(line: 619, column: 7, scope: !9481)
!9485 = !DILocation(line: 620, column: 4, scope: !9480)
!9486 = !DILocation(line: 620, column: 14, scope: !9480)
!9487 = !DILocation(line: 620, column: 18, scope: !9480)
!9488 = !DILocation(line: 620, column: 21, scope: !9480)
!9489 = !DILocation(line: 621, column: 3, scope: !9481)
!9490 = !DILocation(line: 621, column: 7, scope: !9481)
!9491 = !DILocation(line: 621, column: 10, scope: !9481)
!9492 = !DILocation(line: 621, column: 15, scope: !9481)
!9493 = !DILocation(line: 622, column: 3, scope: !9481)
!9494 = !DILocation(line: 622, column: 7, scope: !9481)
!9495 = !DILocation(line: 622, column: 10, scope: !9481)
!9496 = !DILocation(line: 622, column: 16, scope: !9481)
!9497 = !DILocation(line: 623, column: 2, scope: !9481)
!9498 = !DILocation(line: 618, column: 25, scope: !9475)
!9499 = !DILocation(line: 618, column: 2, scope: !9475)
!9500 = distinct !{!9500, !9478, !9501}
!9501 = !DILocation(line: 623, column: 2, scope: !9472)
!9502 = !DILocation(line: 624, column: 1, scope: !9459)
!9503 = distinct !DISubprogram(name: "layerInterp_mvert_skin", scope: !3, file: !3, line: 1064, type: !343, scopeLine: 1067, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9504 = !DILocalVariable(name: "sources", arg: 1, scope: !9503, file: !3, line: 1064, type: !222)
!9505 = !DILocation(line: 1064, column: 43, scope: !9503)
!9506 = !DILocalVariable(name: "weights", arg: 2, scope: !9503, file: !3, line: 1064, type: !345)
!9507 = !DILocation(line: 1064, column: 65, scope: !9503)
!9508 = !DILocalVariable(name: "UNUSED_sub_weights", arg: 3, scope: !9503, file: !3, line: 1065, type: !345)
!9509 = !DILocation(line: 1065, column: 49, scope: !9503)
!9510 = !DILocalVariable(name: "count", arg: 4, scope: !9503, file: !3, line: 1066, type: !158)
!9511 = !DILocation(line: 1066, column: 40, scope: !9503)
!9512 = !DILocalVariable(name: "dest", arg: 5, scope: !9503, file: !3, line: 1066, type: !146)
!9513 = !DILocation(line: 1066, column: 53, scope: !9503)
!9514 = !DILocalVariable(name: "radius", scope: !9503, file: !3, line: 1068, type: !252)
!9515 = !DILocation(line: 1068, column: 8, scope: !9503)
!9516 = !DILocalVariable(name: "w", scope: !9503, file: !3, line: 1068, type: !160)
!9517 = !DILocation(line: 1068, column: 19, scope: !9503)
!9518 = !DILocalVariable(name: "vs", scope: !9503, file: !3, line: 1069, type: !9519)
!9519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9520, size: 64)
!9520 = !DIDerivedType(tag: DW_TAG_typedef, name: "MVertSkin", file: !118, line: 281, baseType: !9521)
!9521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MVertSkin", file: !118, line: 275, size: 128, elements: !9522)
!9522 = !{!9523, !9524}
!9523 = !DIDerivedType(tag: DW_TAG_member, name: "radius", scope: !9521, file: !118, line: 277, baseType: !252, size: 96)
!9524 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !9521, file: !118, line: 280, baseType: !158, size: 32, offset: 96)
!9525 = !DILocation(line: 1069, column: 13, scope: !9503)
!9526 = !DILocalVariable(name: "i", scope: !9503, file: !3, line: 1070, type: !158)
!9527 = !DILocation(line: 1070, column: 6, scope: !9503)
!9528 = !DILocation(line: 1072, column: 10, scope: !9503)
!9529 = !DILocation(line: 1072, column: 2, scope: !9503)
!9530 = !DILocation(line: 1073, column: 9, scope: !9531)
!9531 = distinct !DILexicalBlock(scope: !9503, file: !3, line: 1073, column: 2)
!9532 = !DILocation(line: 1073, column: 7, scope: !9531)
!9533 = !DILocation(line: 1073, column: 14, scope: !9534)
!9534 = distinct !DILexicalBlock(scope: !9531, file: !3, line: 1073, column: 2)
!9535 = !DILocation(line: 1073, column: 18, scope: !9534)
!9536 = !DILocation(line: 1073, column: 16, scope: !9534)
!9537 = !DILocation(line: 1073, column: 2, scope: !9531)
!9538 = !DILocation(line: 1074, column: 7, scope: !9539)
!9539 = distinct !DILexicalBlock(scope: !9534, file: !3, line: 1073, column: 30)
!9540 = !DILocation(line: 1074, column: 17, scope: !9539)
!9541 = !DILocation(line: 1074, column: 25, scope: !9539)
!9542 = !DILocation(line: 1074, column: 5, scope: !9539)
!9543 = !DILocation(line: 1075, column: 8, scope: !9539)
!9544 = !DILocation(line: 1075, column: 16, scope: !9539)
!9545 = !DILocation(line: 1075, column: 6, scope: !9539)
!9546 = !DILocation(line: 1077, column: 16, scope: !9539)
!9547 = !DILocation(line: 1077, column: 24, scope: !9539)
!9548 = !DILocation(line: 1077, column: 28, scope: !9539)
!9549 = !DILocation(line: 1077, column: 36, scope: !9539)
!9550 = !DILocation(line: 1077, column: 3, scope: !9539)
!9551 = !DILocation(line: 1078, column: 2, scope: !9539)
!9552 = !DILocation(line: 1073, column: 26, scope: !9534)
!9553 = !DILocation(line: 1073, column: 2, scope: !9534)
!9554 = distinct !{!9554, !9537, !9555}
!9555 = !DILocation(line: 1078, column: 2, scope: !9531)
!9556 = !DILocation(line: 1081, column: 7, scope: !9503)
!9557 = !DILocation(line: 1081, column: 5, scope: !9503)
!9558 = !DILocation(line: 1082, column: 13, scope: !9503)
!9559 = !DILocation(line: 1082, column: 17, scope: !9503)
!9560 = !DILocation(line: 1082, column: 25, scope: !9503)
!9561 = !DILocation(line: 1082, column: 2, scope: !9503)
!9562 = !DILocation(line: 1083, column: 2, scope: !9503)
!9563 = !DILocation(line: 1083, column: 6, scope: !9503)
!9564 = !DILocation(line: 1083, column: 11, scope: !9503)
!9565 = !DILocation(line: 1084, column: 1, scope: !9503)
!9566 = distinct !DISubprogram(name: "layerDefault_mvert_skin", scope: !3, file: !3, line: 1053, type: !355, scopeLine: 1054, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9567 = !DILocalVariable(name: "data", arg: 1, scope: !9566, file: !3, line: 1053, type: !146)
!9568 = !DILocation(line: 1053, column: 43, scope: !9566)
!9569 = !DILocalVariable(name: "count", arg: 2, scope: !9566, file: !3, line: 1053, type: !158)
!9570 = !DILocation(line: 1053, column: 53, scope: !9566)
!9571 = !DILocalVariable(name: "vs", scope: !9566, file: !3, line: 1055, type: !9519)
!9572 = !DILocation(line: 1055, column: 13, scope: !9566)
!9573 = !DILocation(line: 1055, column: 18, scope: !9566)
!9574 = !DILocalVariable(name: "i", scope: !9566, file: !3, line: 1056, type: !158)
!9575 = !DILocation(line: 1056, column: 6, scope: !9566)
!9576 = !DILocation(line: 1058, column: 9, scope: !9577)
!9577 = distinct !DILexicalBlock(scope: !9566, file: !3, line: 1058, column: 2)
!9578 = !DILocation(line: 1058, column: 7, scope: !9577)
!9579 = !DILocation(line: 1058, column: 14, scope: !9580)
!9580 = distinct !DILexicalBlock(scope: !9577, file: !3, line: 1058, column: 2)
!9581 = !DILocation(line: 1058, column: 18, scope: !9580)
!9582 = !DILocation(line: 1058, column: 16, scope: !9580)
!9583 = !DILocation(line: 1058, column: 2, scope: !9577)
!9584 = !DILocation(line: 1059, column: 14, scope: !9585)
!9585 = distinct !DILexicalBlock(scope: !9580, file: !3, line: 1058, column: 30)
!9586 = !DILocation(line: 1059, column: 17, scope: !9585)
!9587 = !DILocation(line: 1059, column: 20, scope: !9585)
!9588 = !DILocation(line: 1059, column: 3, scope: !9585)
!9589 = !DILocation(line: 1060, column: 3, scope: !9585)
!9590 = !DILocation(line: 1060, column: 6, scope: !9585)
!9591 = !DILocation(line: 1060, column: 9, scope: !9585)
!9592 = !DILocation(line: 1060, column: 14, scope: !9585)
!9593 = !DILocation(line: 1061, column: 2, scope: !9585)
!9594 = !DILocation(line: 1058, column: 26, scope: !9580)
!9595 = !DILocation(line: 1058, column: 2, scope: !9580)
!9596 = distinct !{!9596, !9583, !9597}
!9597 = !DILocation(line: 1061, column: 2, scope: !9577)
!9598 = !DILocation(line: 1062, column: 1, scope: !9566)
!9599 = distinct !DISubprogram(name: "layerSwap_flnor", scope: !3, file: !3, line: 1086, type: !349, scopeLine: 1087, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9600 = !DILocalVariable(name: "data", arg: 1, scope: !9599, file: !3, line: 1086, type: !146)
!9601 = !DILocation(line: 1086, column: 35, scope: !9599)
!9602 = !DILocalVariable(name: "corner_indices", arg: 2, scope: !9599, file: !3, line: 1086, type: !351)
!9603 = !DILocation(line: 1086, column: 52, scope: !9599)
!9604 = !DILocalVariable(name: "flnors", scope: !9599, file: !3, line: 1088, type: !9605)
!9605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9606, size: 64)
!9606 = !DICompositeType(tag: DW_TAG_array_type, baseType: !179, size: 192, elements: !9607)
!9607 = !{!171, !254}
!9608 = !DILocation(line: 1088, column: 10, scope: !9599)
!9609 = !DILocation(line: 1088, column: 26, scope: !9599)
!9610 = !DILocalVariable(name: "nors", scope: !9599, file: !3, line: 1089, type: !9606)
!9611 = !DILocation(line: 1089, column: 8, scope: !9599)
!9612 = !DILocalVariable(name: "i", scope: !9599, file: !3, line: 1090, type: !158)
!9613 = !DILocation(line: 1090, column: 6, scope: !9599)
!9614 = !DILocation(line: 1092, column: 2, scope: !9599)
!9615 = !DILocation(line: 1092, column: 10, scope: !9599)
!9616 = !DILocation(line: 1093, column: 25, scope: !9617)
!9617 = distinct !DILexicalBlock(scope: !9599, file: !3, line: 1092, column: 14)
!9618 = !DILocation(line: 1093, column: 20, scope: !9617)
!9619 = !DILocation(line: 1093, column: 31, scope: !9617)
!9620 = !DILocation(line: 1093, column: 39, scope: !9617)
!9621 = !DILocation(line: 1093, column: 54, scope: !9617)
!9622 = !DILocation(line: 1093, column: 29, scope: !9617)
!9623 = !DILocation(line: 1093, column: 3, scope: !9617)
!9624 = distinct !{!9624, !9614, !9625}
!9625 = !DILocation(line: 1094, column: 2, scope: !9599)
!9626 = !DILocation(line: 1096, column: 9, scope: !9599)
!9627 = !DILocation(line: 1096, column: 2, scope: !9599)
!9628 = !DILocation(line: 1097, column: 1, scope: !9599)
!9629 = distinct !DISubprogram(name: "madd_v2_v2fl", scope: !9630, file: !9630, line: 501, type: !9631, scopeLine: 502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9630 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_vector_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!9631 = !DISubroutineType(types: !9632)
!9632 = !{null, !216, !345, !160}
!9633 = !DILocalVariable(name: "r", arg: 1, scope: !9629, file: !9630, line: 501, type: !216)
!9634 = !DILocation(line: 501, column: 33, scope: !9629)
!9635 = !DILocalVariable(name: "a", arg: 2, scope: !9629, file: !9630, line: 501, type: !345)
!9636 = !DILocation(line: 501, column: 51, scope: !9629)
!9637 = !DILocalVariable(name: "f", arg: 3, scope: !9629, file: !9630, line: 501, type: !160)
!9638 = !DILocation(line: 501, column: 63, scope: !9629)
!9639 = !DILocation(line: 503, column: 10, scope: !9629)
!9640 = !DILocation(line: 503, column: 17, scope: !9629)
!9641 = !DILocation(line: 503, column: 15, scope: !9629)
!9642 = !DILocation(line: 503, column: 2, scope: !9629)
!9643 = !DILocation(line: 503, column: 7, scope: !9629)
!9644 = !DILocation(line: 504, column: 10, scope: !9629)
!9645 = !DILocation(line: 504, column: 17, scope: !9629)
!9646 = !DILocation(line: 504, column: 15, scope: !9629)
!9647 = !DILocation(line: 504, column: 2, scope: !9629)
!9648 = !DILocation(line: 504, column: 7, scope: !9629)
!9649 = !DILocation(line: 505, column: 1, scope: !9629)
!9650 = distinct !DISubprogram(name: "copy_v2_v2", scope: !9630, file: !9630, line: 58, type: !9651, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9651 = !DISubroutineType(types: !9652)
!9652 = !{null, !216, !345}
!9653 = !DILocalVariable(name: "r", arg: 1, scope: !9650, file: !9630, line: 58, type: !216)
!9654 = !DILocation(line: 58, column: 31, scope: !9650)
!9655 = !DILocalVariable(name: "a", arg: 2, scope: !9650, file: !9630, line: 58, type: !345)
!9656 = !DILocation(line: 58, column: 49, scope: !9650)
!9657 = !DILocation(line: 60, column: 9, scope: !9650)
!9658 = !DILocation(line: 60, column: 2, scope: !9650)
!9659 = !DILocation(line: 60, column: 7, scope: !9650)
!9660 = !DILocation(line: 61, column: 9, scope: !9650)
!9661 = !DILocation(line: 61, column: 2, scope: !9650)
!9662 = !DILocation(line: 61, column: 7, scope: !9650)
!9663 = !DILocation(line: 62, column: 1, scope: !9650)
!9664 = distinct !DISubprogram(name: "zero_v2", scope: !9630, file: !9630, line: 37, type: !9665, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9665 = !DISubroutineType(types: !9666)
!9666 = !{null, !216}
!9667 = !DILocalVariable(name: "r", arg: 1, scope: !9664, file: !9630, line: 37, type: !216)
!9668 = !DILocation(line: 37, column: 28, scope: !9664)
!9669 = !DILocation(line: 39, column: 2, scope: !9664)
!9670 = !DILocation(line: 39, column: 7, scope: !9664)
!9671 = !DILocation(line: 40, column: 2, scope: !9664)
!9672 = !DILocation(line: 40, column: 7, scope: !9664)
!9673 = !DILocation(line: 41, column: 1, scope: !9664)
!9674 = distinct !DISubprogram(name: "len_squared_v2v2", scope: !9630, file: !9630, line: 719, type: !9675, scopeLine: 720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9675 = !DISubroutineType(types: !9676)
!9676 = !{!160, !345, !345}
!9677 = !DILocalVariable(name: "a", arg: 1, scope: !9674, file: !9630, line: 719, type: !345)
!9678 = !DILocation(line: 719, column: 44, scope: !9674)
!9679 = !DILocalVariable(name: "b", arg: 2, scope: !9674, file: !9630, line: 719, type: !345)
!9680 = !DILocation(line: 719, column: 62, scope: !9674)
!9681 = !DILocalVariable(name: "d", scope: !9674, file: !9630, line: 721, type: !204)
!9682 = !DILocation(line: 721, column: 8, scope: !9674)
!9683 = !DILocation(line: 723, column: 14, scope: !9674)
!9684 = !DILocation(line: 723, column: 17, scope: !9674)
!9685 = !DILocation(line: 723, column: 20, scope: !9674)
!9686 = !DILocation(line: 723, column: 2, scope: !9674)
!9687 = !DILocation(line: 724, column: 18, scope: !9674)
!9688 = !DILocation(line: 724, column: 21, scope: !9674)
!9689 = !DILocation(line: 724, column: 9, scope: !9674)
!9690 = !DILocation(line: 724, column: 2, scope: !9674)
!9691 = distinct !DISubprogram(name: "sub_v2_v2v2", scope: !9630, file: !9630, line: 338, type: !9692, scopeLine: 339, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9692 = !DISubroutineType(types: !9693)
!9693 = !{null, !216, !345, !345}
!9694 = !DILocalVariable(name: "r", arg: 1, scope: !9691, file: !9630, line: 338, type: !216)
!9695 = !DILocation(line: 338, column: 32, scope: !9691)
!9696 = !DILocalVariable(name: "a", arg: 2, scope: !9691, file: !9630, line: 338, type: !345)
!9697 = !DILocation(line: 338, column: 50, scope: !9691)
!9698 = !DILocalVariable(name: "b", arg: 3, scope: !9691, file: !9630, line: 338, type: !345)
!9699 = !DILocation(line: 338, column: 68, scope: !9691)
!9700 = !DILocation(line: 340, column: 9, scope: !9691)
!9701 = !DILocation(line: 340, column: 16, scope: !9691)
!9702 = !DILocation(line: 340, column: 14, scope: !9691)
!9703 = !DILocation(line: 340, column: 2, scope: !9691)
!9704 = !DILocation(line: 340, column: 7, scope: !9691)
!9705 = !DILocation(line: 341, column: 9, scope: !9691)
!9706 = !DILocation(line: 341, column: 16, scope: !9691)
!9707 = !DILocation(line: 341, column: 14, scope: !9691)
!9708 = !DILocation(line: 341, column: 2, scope: !9691)
!9709 = !DILocation(line: 341, column: 7, scope: !9691)
!9710 = !DILocation(line: 342, column: 1, scope: !9691)
!9711 = distinct !DISubprogram(name: "dot_v2v2", scope: !9630, file: !9630, line: 614, type: !9675, scopeLine: 615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9712 = !DILocalVariable(name: "a", arg: 1, scope: !9711, file: !9630, line: 614, type: !345)
!9713 = !DILocation(line: 614, column: 36, scope: !9711)
!9714 = !DILocalVariable(name: "b", arg: 2, scope: !9711, file: !9630, line: 614, type: !345)
!9715 = !DILocation(line: 614, column: 54, scope: !9711)
!9716 = !DILocation(line: 616, column: 9, scope: !9711)
!9717 = !DILocation(line: 616, column: 16, scope: !9711)
!9718 = !DILocation(line: 616, column: 14, scope: !9711)
!9719 = !DILocation(line: 616, column: 23, scope: !9711)
!9720 = !DILocation(line: 616, column: 30, scope: !9711)
!9721 = !DILocation(line: 616, column: 28, scope: !9711)
!9722 = !DILocation(line: 616, column: 21, scope: !9711)
!9723 = !DILocation(line: 616, column: 2, scope: !9711)
!9724 = distinct !DISubprogram(name: "mul_v2_fl", scope: !9630, file: !9630, line: 380, type: !9725, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9725 = !DISubroutineType(types: !9726)
!9726 = !{null, !216, !160}
!9727 = !DILocalVariable(name: "r", arg: 1, scope: !9724, file: !9630, line: 380, type: !216)
!9728 = !DILocation(line: 380, column: 30, scope: !9724)
!9729 = !DILocalVariable(name: "f", arg: 2, scope: !9724, file: !9630, line: 380, type: !160)
!9730 = !DILocation(line: 380, column: 42, scope: !9724)
!9731 = !DILocation(line: 382, column: 10, scope: !9724)
!9732 = !DILocation(line: 382, column: 2, scope: !9724)
!9733 = !DILocation(line: 382, column: 7, scope: !9724)
!9734 = !DILocation(line: 383, column: 10, scope: !9724)
!9735 = !DILocation(line: 383, column: 2, scope: !9724)
!9736 = !DILocation(line: 383, column: 7, scope: !9724)
!9737 = !DILocation(line: 384, column: 1, scope: !9724)
!9738 = distinct !DISubprogram(name: "add_v2_v2", scope: !9630, file: !9630, line: 284, type: !9651, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9739 = !DILocalVariable(name: "r", arg: 1, scope: !9738, file: !9630, line: 284, type: !216)
!9740 = !DILocation(line: 284, column: 30, scope: !9738)
!9741 = !DILocalVariable(name: "a", arg: 2, scope: !9738, file: !9630, line: 284, type: !345)
!9742 = !DILocation(line: 284, column: 48, scope: !9738)
!9743 = !DILocation(line: 286, column: 10, scope: !9738)
!9744 = !DILocation(line: 286, column: 2, scope: !9738)
!9745 = !DILocation(line: 286, column: 7, scope: !9738)
!9746 = !DILocation(line: 287, column: 10, scope: !9738)
!9747 = !DILocation(line: 287, column: 2, scope: !9738)
!9748 = !DILocation(line: 287, column: 7, scope: !9738)
!9749 = !DILocation(line: 288, column: 1, scope: !9738)
!9750 = distinct !DISubprogram(name: "zero_v3", scope: !9630, file: !9630, line: 43, type: !9665, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9751 = !DILocalVariable(name: "r", arg: 1, scope: !9750, file: !9630, line: 43, type: !216)
!9752 = !DILocation(line: 43, column: 28, scope: !9750)
!9753 = !DILocation(line: 45, column: 2, scope: !9750)
!9754 = !DILocation(line: 45, column: 7, scope: !9750)
!9755 = !DILocation(line: 46, column: 2, scope: !9750)
!9756 = !DILocation(line: 46, column: 7, scope: !9750)
!9757 = !DILocation(line: 47, column: 2, scope: !9750)
!9758 = !DILocation(line: 47, column: 7, scope: !9750)
!9759 = !DILocation(line: 48, column: 1, scope: !9750)
!9760 = distinct !DISubprogram(name: "madd_v3_v3fl", scope: !9630, file: !9630, line: 507, type: !9631, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9761 = !DILocalVariable(name: "r", arg: 1, scope: !9760, file: !9630, line: 507, type: !216)
!9762 = !DILocation(line: 507, column: 33, scope: !9760)
!9763 = !DILocalVariable(name: "a", arg: 2, scope: !9760, file: !9630, line: 507, type: !345)
!9764 = !DILocation(line: 507, column: 51, scope: !9760)
!9765 = !DILocalVariable(name: "f", arg: 3, scope: !9760, file: !9630, line: 507, type: !160)
!9766 = !DILocation(line: 507, column: 63, scope: !9760)
!9767 = !DILocation(line: 509, column: 10, scope: !9760)
!9768 = !DILocation(line: 509, column: 17, scope: !9760)
!9769 = !DILocation(line: 509, column: 15, scope: !9760)
!9770 = !DILocation(line: 509, column: 2, scope: !9760)
!9771 = !DILocation(line: 509, column: 7, scope: !9760)
!9772 = !DILocation(line: 510, column: 10, scope: !9760)
!9773 = !DILocation(line: 510, column: 17, scope: !9760)
!9774 = !DILocation(line: 510, column: 15, scope: !9760)
!9775 = !DILocation(line: 510, column: 2, scope: !9760)
!9776 = !DILocation(line: 510, column: 7, scope: !9760)
!9777 = !DILocation(line: 511, column: 10, scope: !9760)
!9778 = !DILocation(line: 511, column: 17, scope: !9760)
!9779 = !DILocation(line: 511, column: 15, scope: !9760)
!9780 = !DILocation(line: 511, column: 2, scope: !9760)
!9781 = !DILocation(line: 511, column: 7, scope: !9760)
!9782 = !DILocation(line: 512, column: 1, scope: !9760)
!9783 = distinct !DISubprogram(name: "add_v3_v3", scope: !9630, file: !9630, line: 302, type: !9651, scopeLine: 303, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9784 = !DILocalVariable(name: "r", arg: 1, scope: !9783, file: !9630, line: 302, type: !216)
!9785 = !DILocation(line: 302, column: 30, scope: !9783)
!9786 = !DILocalVariable(name: "a", arg: 2, scope: !9783, file: !9630, line: 302, type: !345)
!9787 = !DILocation(line: 302, column: 48, scope: !9783)
!9788 = !DILocation(line: 304, column: 10, scope: !9783)
!9789 = !DILocation(line: 304, column: 2, scope: !9783)
!9790 = !DILocation(line: 304, column: 7, scope: !9783)
!9791 = !DILocation(line: 305, column: 10, scope: !9783)
!9792 = !DILocation(line: 305, column: 2, scope: !9783)
!9793 = !DILocation(line: 305, column: 7, scope: !9783)
!9794 = !DILocation(line: 306, column: 10, scope: !9783)
!9795 = !DILocation(line: 306, column: 2, scope: !9783)
!9796 = !DILocation(line: 306, column: 7, scope: !9783)
!9797 = !DILocation(line: 307, column: 1, scope: !9783)
!9798 = distinct !DISubprogram(name: "copy_v3_v3", scope: !9630, file: !9630, line: 64, type: !9651, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9799 = !DILocalVariable(name: "r", arg: 1, scope: !9798, file: !9630, line: 64, type: !216)
!9800 = !DILocation(line: 64, column: 31, scope: !9798)
!9801 = !DILocalVariable(name: "a", arg: 2, scope: !9798, file: !9630, line: 64, type: !345)
!9802 = !DILocation(line: 64, column: 49, scope: !9798)
!9803 = !DILocation(line: 66, column: 9, scope: !9798)
!9804 = !DILocation(line: 66, column: 2, scope: !9798)
!9805 = !DILocation(line: 66, column: 7, scope: !9798)
!9806 = !DILocation(line: 67, column: 9, scope: !9798)
!9807 = !DILocation(line: 67, column: 2, scope: !9798)
!9808 = !DILocation(line: 67, column: 7, scope: !9798)
!9809 = !DILocation(line: 68, column: 9, scope: !9798)
!9810 = !DILocation(line: 68, column: 2, scope: !9798)
!9811 = !DILocation(line: 68, column: 7, scope: !9798)
!9812 = !DILocation(line: 69, column: 1, scope: !9798)
!9813 = distinct !DISubprogram(name: "copy_v3_fl", scope: !9630, file: !9630, line: 85, type: !9725, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9814 = !DILocalVariable(name: "r", arg: 1, scope: !9813, file: !9630, line: 85, type: !216)
!9815 = !DILocation(line: 85, column: 31, scope: !9813)
!9816 = !DILocalVariable(name: "f", arg: 2, scope: !9813, file: !9630, line: 85, type: !160)
!9817 = !DILocation(line: 85, column: 43, scope: !9813)
!9818 = !DILocation(line: 87, column: 9, scope: !9813)
!9819 = !DILocation(line: 87, column: 2, scope: !9813)
!9820 = !DILocation(line: 87, column: 7, scope: !9813)
!9821 = !DILocation(line: 88, column: 9, scope: !9813)
!9822 = !DILocation(line: 88, column: 2, scope: !9813)
!9823 = !DILocation(line: 88, column: 7, scope: !9813)
!9824 = !DILocation(line: 89, column: 9, scope: !9813)
!9825 = !DILocation(line: 89, column: 2, scope: !9813)
!9826 = !DILocation(line: 89, column: 7, scope: !9813)
!9827 = !DILocation(line: 90, column: 1, scope: !9813)
!9828 = distinct !DISubprogram(name: "copy_v3_v3_short", scope: !9630, file: !9630, line: 136, type: !9829, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9829 = !DISubroutineType(types: !9830)
!9830 = !{null, !9831, !9832}
!9831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !179, size: 64)
!9832 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !409, size: 64)
!9833 = !DILocalVariable(name: "r", arg: 1, scope: !9828, file: !9630, line: 136, type: !9831)
!9834 = !DILocation(line: 136, column: 37, scope: !9828)
!9835 = !DILocalVariable(name: "a", arg: 2, scope: !9828, file: !9630, line: 136, type: !9832)
!9836 = !DILocation(line: 136, column: 55, scope: !9828)
!9837 = !DILocation(line: 138, column: 9, scope: !9828)
!9838 = !DILocation(line: 138, column: 2, scope: !9828)
!9839 = !DILocation(line: 138, column: 7, scope: !9828)
!9840 = !DILocation(line: 139, column: 9, scope: !9828)
!9841 = !DILocation(line: 139, column: 2, scope: !9828)
!9842 = !DILocation(line: 139, column: 7, scope: !9828)
!9843 = !DILocation(line: 140, column: 9, scope: !9828)
!9844 = !DILocation(line: 140, column: 2, scope: !9828)
!9845 = !DILocation(line: 140, column: 7, scope: !9828)
!9846 = !DILocation(line: 141, column: 1, scope: !9828)
!9847 = distinct !DISubprogram(name: "BM_iter_init", scope: !4323, file: !4323, line: 53, type: !9848, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!9848 = !DISubroutineType(types: !9849)
!9849 = !{!361, !4326, !3962, !317, !146}
!9850 = !DILocalVariable(name: "iter", arg: 1, scope: !9847, file: !4323, line: 53, type: !4326)
!9851 = !DILocation(line: 53, column: 38, scope: !9847)
!9852 = !DILocalVariable(name: "bm", arg: 2, scope: !9847, file: !4323, line: 53, type: !3962)
!9853 = !DILocation(line: 53, column: 51, scope: !9847)
!9854 = !DILocalVariable(name: "itype", arg: 3, scope: !9847, file: !4323, line: 53, type: !317)
!9855 = !DILocation(line: 53, column: 66, scope: !9847)
!9856 = !DILocalVariable(name: "data", arg: 4, scope: !9847, file: !4323, line: 53, type: !146)
!9857 = !DILocation(line: 53, column: 79, scope: !9847)
!9858 = !DILocation(line: 56, column: 16, scope: !9847)
!9859 = !DILocation(line: 56, column: 2, scope: !9847)
!9860 = !DILocation(line: 56, column: 8, scope: !9847)
!9861 = !DILocation(line: 56, column: 14, scope: !9847)
!9862 = !DILocation(line: 59, column: 22, scope: !9847)
!9863 = !DILocation(line: 59, column: 10, scope: !9847)
!9864 = !DILocation(line: 59, column: 2, scope: !9847)
!9865 = !DILocation(line: 63, column: 4, scope: !9866)
!9866 = distinct !DILexicalBlock(scope: !9847, file: !4323, line: 59, column: 29)
!9867 = !DILocation(line: 63, column: 10, scope: !9866)
!9868 = !DILocation(line: 63, column: 16, scope: !9866)
!9869 = !DILocation(line: 64, column: 4, scope: !9866)
!9870 = !DILocation(line: 64, column: 10, scope: !9866)
!9871 = !DILocation(line: 64, column: 16, scope: !9866)
!9872 = !DILocation(line: 65, column: 44, scope: !9866)
!9873 = !DILocation(line: 65, column: 48, scope: !9866)
!9874 = !DILocation(line: 65, column: 4, scope: !9866)
!9875 = !DILocation(line: 65, column: 10, scope: !9866)
!9876 = !DILocation(line: 65, column: 15, scope: !9866)
!9877 = !DILocation(line: 65, column: 28, scope: !9866)
!9878 = !DILocation(line: 65, column: 37, scope: !9866)
!9879 = !DILocation(line: 65, column: 42, scope: !9866)
!9880 = !DILocation(line: 66, column: 4, scope: !9866)
!9881 = !DILocation(line: 70, column: 4, scope: !9866)
!9882 = !DILocation(line: 70, column: 10, scope: !9866)
!9883 = !DILocation(line: 70, column: 16, scope: !9866)
!9884 = !DILocation(line: 71, column: 4, scope: !9866)
!9885 = !DILocation(line: 71, column: 10, scope: !9866)
!9886 = !DILocation(line: 71, column: 16, scope: !9866)
!9887 = !DILocation(line: 72, column: 44, scope: !9866)
!9888 = !DILocation(line: 72, column: 48, scope: !9866)
!9889 = !DILocation(line: 72, column: 4, scope: !9866)
!9890 = !DILocation(line: 72, column: 10, scope: !9866)
!9891 = !DILocation(line: 72, column: 15, scope: !9866)
!9892 = !DILocation(line: 72, column: 28, scope: !9866)
!9893 = !DILocation(line: 72, column: 37, scope: !9866)
!9894 = !DILocation(line: 72, column: 42, scope: !9866)
!9895 = !DILocation(line: 73, column: 4, scope: !9866)
!9896 = !DILocation(line: 77, column: 4, scope: !9866)
!9897 = !DILocation(line: 77, column: 10, scope: !9866)
!9898 = !DILocation(line: 77, column: 16, scope: !9866)
!9899 = !DILocation(line: 78, column: 4, scope: !9866)
!9900 = !DILocation(line: 78, column: 10, scope: !9866)
!9901 = !DILocation(line: 78, column: 16, scope: !9866)
!9902 = !DILocation(line: 79, column: 44, scope: !9866)
!9903 = !DILocation(line: 79, column: 48, scope: !9866)
!9904 = !DILocation(line: 79, column: 4, scope: !9866)
!9905 = !DILocation(line: 79, column: 10, scope: !9866)
!9906 = !DILocation(line: 79, column: 15, scope: !9866)
!9907 = !DILocation(line: 79, column: 28, scope: !9866)
!9908 = !DILocation(line: 79, column: 37, scope: !9866)
!9909 = !DILocation(line: 79, column: 42, scope: !9866)
!9910 = !DILocation(line: 80, column: 4, scope: !9866)
!9911 = !DILocation(line: 84, column: 4, scope: !9866)
!9912 = !DILocation(line: 84, column: 10, scope: !9866)
!9913 = !DILocation(line: 84, column: 16, scope: !9866)
!9914 = !DILocation(line: 85, column: 4, scope: !9866)
!9915 = !DILocation(line: 85, column: 10, scope: !9866)
!9916 = !DILocation(line: 85, column: 16, scope: !9866)
!9917 = !DILocation(line: 86, column: 46, scope: !9866)
!9918 = !DILocation(line: 86, column: 36, scope: !9866)
!9919 = !DILocation(line: 86, column: 4, scope: !9866)
!9920 = !DILocation(line: 86, column: 10, scope: !9866)
!9921 = !DILocation(line: 86, column: 15, scope: !9866)
!9922 = !DILocation(line: 86, column: 28, scope: !9866)
!9923 = !DILocation(line: 86, column: 34, scope: !9866)
!9924 = !DILocation(line: 87, column: 4, scope: !9866)
!9925 = !DILocation(line: 91, column: 4, scope: !9866)
!9926 = !DILocation(line: 91, column: 10, scope: !9866)
!9927 = !DILocation(line: 91, column: 16, scope: !9866)
!9928 = !DILocation(line: 92, column: 4, scope: !9866)
!9929 = !DILocation(line: 92, column: 10, scope: !9866)
!9930 = !DILocation(line: 92, column: 16, scope: !9866)
!9931 = !DILocation(line: 93, column: 46, scope: !9866)
!9932 = !DILocation(line: 93, column: 36, scope: !9866)
!9933 = !DILocation(line: 93, column: 4, scope: !9866)
!9934 = !DILocation(line: 93, column: 10, scope: !9866)
!9935 = !DILocation(line: 93, column: 15, scope: !9866)
!9936 = !DILocation(line: 93, column: 28, scope: !9866)
!9937 = !DILocation(line: 93, column: 34, scope: !9866)
!9938 = !DILocation(line: 94, column: 4, scope: !9866)
!9939 = !DILocation(line: 98, column: 4, scope: !9866)
!9940 = !DILocation(line: 98, column: 10, scope: !9866)
!9941 = !DILocation(line: 98, column: 16, scope: !9866)
!9942 = !DILocation(line: 99, column: 4, scope: !9866)
!9943 = !DILocation(line: 99, column: 10, scope: !9866)
!9944 = !DILocation(line: 99, column: 16, scope: !9866)
!9945 = !DILocation(line: 100, column: 46, scope: !9866)
!9946 = !DILocation(line: 100, column: 36, scope: !9866)
!9947 = !DILocation(line: 100, column: 4, scope: !9866)
!9948 = !DILocation(line: 100, column: 10, scope: !9866)
!9949 = !DILocation(line: 100, column: 15, scope: !9866)
!9950 = !DILocation(line: 100, column: 28, scope: !9866)
!9951 = !DILocation(line: 100, column: 34, scope: !9866)
!9952 = !DILocation(line: 101, column: 4, scope: !9866)
!9953 = !DILocation(line: 105, column: 4, scope: !9866)
!9954 = !DILocation(line: 105, column: 10, scope: !9866)
!9955 = !DILocation(line: 105, column: 16, scope: !9866)
!9956 = !DILocation(line: 106, column: 4, scope: !9866)
!9957 = !DILocation(line: 106, column: 10, scope: !9866)
!9958 = !DILocation(line: 106, column: 16, scope: !9866)
!9959 = !DILocation(line: 107, column: 46, scope: !9866)
!9960 = !DILocation(line: 107, column: 36, scope: !9866)
!9961 = !DILocation(line: 107, column: 4, scope: !9866)
!9962 = !DILocation(line: 107, column: 10, scope: !9866)
!9963 = !DILocation(line: 107, column: 15, scope: !9866)
!9964 = !DILocation(line: 107, column: 28, scope: !9866)
!9965 = !DILocation(line: 107, column: 34, scope: !9866)
!9966 = !DILocation(line: 108, column: 4, scope: !9866)
!9967 = !DILocation(line: 112, column: 4, scope: !9866)
!9968 = !DILocation(line: 112, column: 10, scope: !9866)
!9969 = !DILocation(line: 112, column: 16, scope: !9866)
!9970 = !DILocation(line: 113, column: 4, scope: !9866)
!9971 = !DILocation(line: 113, column: 10, scope: !9866)
!9972 = !DILocation(line: 113, column: 16, scope: !9866)
!9973 = !DILocation(line: 114, column: 46, scope: !9866)
!9974 = !DILocation(line: 114, column: 36, scope: !9866)
!9975 = !DILocation(line: 114, column: 4, scope: !9866)
!9976 = !DILocation(line: 114, column: 10, scope: !9866)
!9977 = !DILocation(line: 114, column: 15, scope: !9866)
!9978 = !DILocation(line: 114, column: 28, scope: !9866)
!9979 = !DILocation(line: 114, column: 34, scope: !9866)
!9980 = !DILocation(line: 115, column: 4, scope: !9866)
!9981 = !DILocation(line: 119, column: 4, scope: !9866)
!9982 = !DILocation(line: 119, column: 10, scope: !9866)
!9983 = !DILocation(line: 119, column: 16, scope: !9866)
!9984 = !DILocation(line: 120, column: 4, scope: !9866)
!9985 = !DILocation(line: 120, column: 10, scope: !9866)
!9986 = !DILocation(line: 120, column: 16, scope: !9866)
!9987 = !DILocation(line: 121, column: 46, scope: !9866)
!9988 = !DILocation(line: 121, column: 36, scope: !9866)
!9989 = !DILocation(line: 121, column: 4, scope: !9866)
!9990 = !DILocation(line: 121, column: 10, scope: !9866)
!9991 = !DILocation(line: 121, column: 15, scope: !9866)
!9992 = !DILocation(line: 121, column: 28, scope: !9866)
!9993 = !DILocation(line: 121, column: 34, scope: !9866)
!9994 = !DILocation(line: 122, column: 4, scope: !9866)
!9995 = !DILocation(line: 126, column: 4, scope: !9866)
!9996 = !DILocation(line: 126, column: 10, scope: !9866)
!9997 = !DILocation(line: 126, column: 16, scope: !9866)
!9998 = !DILocation(line: 127, column: 4, scope: !9866)
!9999 = !DILocation(line: 127, column: 10, scope: !9866)
!10000 = !DILocation(line: 127, column: 16, scope: !9866)
!10001 = !DILocation(line: 128, column: 46, scope: !9866)
!10002 = !DILocation(line: 128, column: 36, scope: !9866)
!10003 = !DILocation(line: 128, column: 4, scope: !9866)
!10004 = !DILocation(line: 128, column: 10, scope: !9866)
!10005 = !DILocation(line: 128, column: 15, scope: !9866)
!10006 = !DILocation(line: 128, column: 28, scope: !9866)
!10007 = !DILocation(line: 128, column: 34, scope: !9866)
!10008 = !DILocation(line: 129, column: 4, scope: !9866)
!10009 = !DILocation(line: 133, column: 4, scope: !9866)
!10010 = !DILocation(line: 133, column: 10, scope: !9866)
!10011 = !DILocation(line: 133, column: 16, scope: !9866)
!10012 = !DILocation(line: 134, column: 4, scope: !9866)
!10013 = !DILocation(line: 134, column: 10, scope: !9866)
!10014 = !DILocation(line: 134, column: 16, scope: !9866)
!10015 = !DILocation(line: 135, column: 46, scope: !9866)
!10016 = !DILocation(line: 135, column: 36, scope: !9866)
!10017 = !DILocation(line: 135, column: 4, scope: !9866)
!10018 = !DILocation(line: 135, column: 10, scope: !9866)
!10019 = !DILocation(line: 135, column: 15, scope: !9866)
!10020 = !DILocation(line: 135, column: 28, scope: !9866)
!10021 = !DILocation(line: 135, column: 34, scope: !9866)
!10022 = !DILocation(line: 136, column: 4, scope: !9866)
!10023 = !DILocation(line: 140, column: 4, scope: !9866)
!10024 = !DILocation(line: 140, column: 10, scope: !9866)
!10025 = !DILocation(line: 140, column: 16, scope: !9866)
!10026 = !DILocation(line: 141, column: 4, scope: !9866)
!10027 = !DILocation(line: 141, column: 10, scope: !9866)
!10028 = !DILocation(line: 141, column: 16, scope: !9866)
!10029 = !DILocation(line: 142, column: 46, scope: !9866)
!10030 = !DILocation(line: 142, column: 36, scope: !9866)
!10031 = !DILocation(line: 142, column: 4, scope: !9866)
!10032 = !DILocation(line: 142, column: 10, scope: !9866)
!10033 = !DILocation(line: 142, column: 15, scope: !9866)
!10034 = !DILocation(line: 142, column: 28, scope: !9866)
!10035 = !DILocation(line: 142, column: 34, scope: !9866)
!10036 = !DILocation(line: 143, column: 4, scope: !9866)
!10037 = !DILocation(line: 147, column: 4, scope: !9866)
!10038 = !DILocation(line: 147, column: 10, scope: !9866)
!10039 = !DILocation(line: 147, column: 16, scope: !9866)
!10040 = !DILocation(line: 148, column: 4, scope: !9866)
!10041 = !DILocation(line: 148, column: 10, scope: !9866)
!10042 = !DILocation(line: 148, column: 16, scope: !9866)
!10043 = !DILocation(line: 149, column: 46, scope: !9866)
!10044 = !DILocation(line: 149, column: 36, scope: !9866)
!10045 = !DILocation(line: 149, column: 4, scope: !9866)
!10046 = !DILocation(line: 149, column: 10, scope: !9866)
!10047 = !DILocation(line: 149, column: 15, scope: !9866)
!10048 = !DILocation(line: 149, column: 28, scope: !9866)
!10049 = !DILocation(line: 149, column: 34, scope: !9866)
!10050 = !DILocation(line: 150, column: 4, scope: !9866)
!10051 = !DILocation(line: 154, column: 4, scope: !9866)
!10052 = !DILocation(line: 158, column: 2, scope: !9847)
!10053 = !DILocation(line: 158, column: 8, scope: !9847)
!10054 = !DILocation(line: 158, column: 14, scope: !9847)
!10055 = !DILocation(line: 160, column: 2, scope: !9847)
!10056 = !DILocation(line: 161, column: 1, scope: !9847)
!10057 = distinct !DISubprogram(name: "cd_layer_find_dupe", scope: !3, file: !3, line: 3088, type: !10058, scopeLine: 3089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!10058 = !DISubroutineType(types: !10059)
!10059 = !{!361, !488, !316, !158, !158}
!10060 = !DILocalVariable(name: "data", arg: 1, scope: !10057, file: !3, line: 3088, type: !488)
!10061 = !DILocation(line: 3088, column: 44, scope: !10057)
!10062 = !DILocalVariable(name: "name", arg: 2, scope: !10057, file: !3, line: 3088, type: !316)
!10063 = !DILocation(line: 3088, column: 62, scope: !10057)
!10064 = !DILocalVariable(name: "type", arg: 3, scope: !10057, file: !3, line: 3088, type: !158)
!10065 = !DILocation(line: 3088, column: 72, scope: !10057)
!10066 = !DILocalVariable(name: "index", arg: 4, scope: !10057, file: !3, line: 3088, type: !158)
!10067 = !DILocation(line: 3088, column: 82, scope: !10057)
!10068 = !DILocalVariable(name: "i", scope: !10057, file: !3, line: 3090, type: !158)
!10069 = !DILocation(line: 3090, column: 6, scope: !10057)
!10070 = !DILocation(line: 3092, column: 9, scope: !10071)
!10071 = distinct !DILexicalBlock(scope: !10057, file: !3, line: 3092, column: 2)
!10072 = !DILocation(line: 3092, column: 7, scope: !10071)
!10073 = !DILocation(line: 3092, column: 14, scope: !10074)
!10074 = distinct !DILexicalBlock(scope: !10071, file: !3, line: 3092, column: 2)
!10075 = !DILocation(line: 3092, column: 18, scope: !10074)
!10076 = !DILocation(line: 3092, column: 24, scope: !10074)
!10077 = !DILocation(line: 3092, column: 16, scope: !10074)
!10078 = !DILocation(line: 3092, column: 2, scope: !10071)
!10079 = !DILocation(line: 3093, column: 7, scope: !10080)
!10080 = distinct !DILexicalBlock(scope: !10081, file: !3, line: 3093, column: 7)
!10081 = distinct !DILexicalBlock(scope: !10074, file: !3, line: 3092, column: 39)
!10082 = !DILocation(line: 3093, column: 12, scope: !10080)
!10083 = !DILocation(line: 3093, column: 9, scope: !10080)
!10084 = !DILocation(line: 3093, column: 7, scope: !10081)
!10085 = !DILocalVariable(name: "layer", scope: !10086, file: !3, line: 3094, type: !493)
!10086 = distinct !DILexicalBlock(scope: !10080, file: !3, line: 3093, column: 19)
!10087 = !DILocation(line: 3094, column: 21, scope: !10086)
!10088 = !DILocation(line: 3094, column: 30, scope: !10086)
!10089 = !DILocation(line: 3094, column: 36, scope: !10086)
!10090 = !DILocation(line: 3094, column: 43, scope: !10086)
!10091 = !DILocation(line: 3096, column: 37, scope: !10092)
!10092 = distinct !DILexicalBlock(scope: !10086, file: !3, line: 3096, column: 8)
!10093 = !DILocation(line: 3096, column: 8, scope: !10092)
!10094 = !DILocation(line: 3096, column: 8, scope: !10086)
!10095 = !DILocation(line: 3097, column: 38, scope: !10096)
!10096 = distinct !DILexicalBlock(scope: !10097, file: !3, line: 3097, column: 9)
!10097 = distinct !DILexicalBlock(scope: !10092, file: !3, line: 3096, column: 44)
!10098 = !DILocation(line: 3097, column: 45, scope: !10096)
!10099 = !DILocation(line: 3097, column: 9, scope: !10096)
!10100 = !DILocation(line: 3097, column: 51, scope: !10096)
!10101 = !DILocation(line: 3097, column: 61, scope: !10096)
!10102 = !DILocation(line: 3097, column: 68, scope: !10096)
!10103 = !DILocation(line: 3097, column: 74, scope: !10096)
!10104 = !DILocation(line: 3097, column: 54, scope: !10096)
!10105 = !DILocation(line: 3097, column: 80, scope: !10096)
!10106 = !DILocation(line: 3097, column: 9, scope: !10097)
!10107 = !DILocation(line: 3098, column: 6, scope: !10108)
!10108 = distinct !DILexicalBlock(scope: !10096, file: !3, line: 3097, column: 86)
!10109 = !DILocation(line: 3100, column: 4, scope: !10097)
!10110 = !DILocation(line: 3102, column: 9, scope: !10111)
!10111 = distinct !DILexicalBlock(scope: !10112, file: !3, line: 3102, column: 9)
!10112 = distinct !DILexicalBlock(scope: !10092, file: !3, line: 3101, column: 9)
!10113 = !DILocation(line: 3102, column: 14, scope: !10111)
!10114 = !DILocation(line: 3102, column: 11, scope: !10111)
!10115 = !DILocation(line: 3102, column: 20, scope: !10111)
!10116 = !DILocation(line: 3102, column: 23, scope: !10111)
!10117 = !DILocation(line: 3102, column: 30, scope: !10111)
!10118 = !DILocation(line: 3102, column: 38, scope: !10111)
!10119 = !DILocation(line: 3102, column: 35, scope: !10111)
!10120 = !DILocation(line: 3102, column: 43, scope: !10111)
!10121 = !DILocation(line: 3102, column: 53, scope: !10111)
!10122 = !DILocation(line: 3102, column: 60, scope: !10111)
!10123 = !DILocation(line: 3102, column: 66, scope: !10111)
!10124 = !DILocation(line: 3102, column: 46, scope: !10111)
!10125 = !DILocation(line: 3102, column: 72, scope: !10111)
!10126 = !DILocation(line: 3102, column: 9, scope: !10112)
!10127 = !DILocation(line: 3103, column: 6, scope: !10128)
!10128 = distinct !DILexicalBlock(scope: !10111, file: !3, line: 3102, column: 78)
!10129 = !DILocation(line: 3106, column: 3, scope: !10086)
!10130 = !DILocation(line: 3107, column: 2, scope: !10081)
!10131 = !DILocation(line: 3092, column: 35, scope: !10074)
!10132 = !DILocation(line: 3092, column: 2, scope: !10074)
!10133 = distinct !{!10133, !10078, !10134}
!10134 = !DILocation(line: 3107, column: 2, scope: !10071)
!10135 = !DILocation(line: 3109, column: 2, scope: !10057)
!10136 = !DILocation(line: 3110, column: 1, scope: !10057)
!10137 = distinct !DISubprogram(name: "CustomData_is_property_layer", scope: !3, file: !3, line: 3081, type: !5735, scopeLine: 3082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !407)
!10138 = !DILocalVariable(name: "type", arg: 1, scope: !10137, file: !3, line: 3081, type: !158)
!10139 = !DILocation(line: 3081, column: 46, scope: !10137)
!10140 = !DILocation(line: 3083, column: 7, scope: !10141)
!10141 = distinct !DILexicalBlock(scope: !10137, file: !3, line: 3083, column: 6)
!10142 = !DILocation(line: 3083, column: 12, scope: !10141)
!10143 = !DILocation(line: 3083, column: 28, scope: !10141)
!10144 = !DILocation(line: 3083, column: 32, scope: !10141)
!10145 = !DILocation(line: 3083, column: 37, scope: !10141)
!10146 = !DILocation(line: 3083, column: 53, scope: !10141)
!10147 = !DILocation(line: 3083, column: 57, scope: !10141)
!10148 = !DILocation(line: 3083, column: 62, scope: !10141)
!10149 = !DILocation(line: 3083, column: 6, scope: !10137)
!10150 = !DILocation(line: 3084, column: 3, scope: !10141)
!10151 = !DILocation(line: 3085, column: 2, scope: !10137)
!10152 = !DILocation(line: 3086, column: 1, scope: !10137)
