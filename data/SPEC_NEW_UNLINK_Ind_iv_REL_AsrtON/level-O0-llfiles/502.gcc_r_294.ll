; ModuleID = 'tree-loop-distribution.c'
source_filename = "tree-loop-distribution.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_bitmap_heap = type { %struct.VEC_bitmap_base }
%struct.VEC_bitmap_base = type { i32, i32, [1 x %struct.bitmap_head_def*] }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.graph = type { i32, %struct.vertex*, %struct.htab* }
%struct.vertex = type { %struct.graph_edge*, %struct.graph_edge*, i32, i32, i8* }
%struct.graph_edge = type { i32, i32, %struct.graph_edge*, %struct.graph_edge*, i8* }
%struct.VEC_rdgc_heap = type { %struct.VEC_rdgc_base }
%struct.VEC_rdgc_base = type { i32, i32, [1 x %struct.rdg_component*] }
%struct.rdg_component = type { i32, %struct.VEC_int_heap* }
%struct.rdg_vertex = type { %union.gimple_statement_d*, i8, i8 }
%struct.rdg_edge = type { i32, i32, %struct.data_dependence_relation* }
%struct.data_dependence_relation = type { %struct.data_reference*, %struct.data_reference*, %union.tree_node*, %struct.VEC_subscript_p_heap*, %struct.VEC_loop_p_heap*, %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap*, i32, i8, i8, i8 }
%struct.data_reference = type { %union.gimple_statement_d*, %union.tree_node*, i8*, i8, %struct.innermost_loop_behavior, %struct.indices, %struct.dr_alias, %struct.access_matrix* }
%struct.innermost_loop_behavior = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.indices = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.dr_alias = type { %struct.ptr_info_def*, %struct.bitmap_head_def* }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.access_matrix = type { %struct.VEC_loop_p_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_lambda_vector_gc* }
%struct.VEC_lambda_vector_gc = type { %struct.VEC_lambda_vector_base }
%struct.VEC_lambda_vector_base = type { i32, i32, [1 x i32*] }
%struct.VEC_subscript_p_heap = type { %struct.VEC_subscript_p_base }
%struct.VEC_subscript_p_base = type { i32, i32, [1 x %struct.subscript*] }
%struct.subscript = type { %struct.conflict_function*, %struct.conflict_function*, %union.tree_node*, %union.tree_node* }
%struct.conflict_function = type { i32, [2 x %struct.VEC_tree_heap*] }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.VEC_lambda_vector_heap = type { %struct.VEC_lambda_vector_base }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [6 x i8] c"ldist\00", align 1
@pass_loop_distribution = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_tree_loop_distribution, i32 ()* @tree_loop_distribution, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 95, i32 40, i32 0, i32 0, i32 0, i32 65 } }, align 8, !dbg !0
@flag_tree_loop_distribution = external dso_local global i32, align 4
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.1 = private unnamed_addr constant [41 x i8] c"Loop %d distributed: split to %d loops.\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Loop %d is the same.\0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.3 = private unnamed_addr constant [68 x i8] c"FIXME: Loop %d not distributed: it has more than two basic blocks.\0A\00", align 1
@.str.4 = private unnamed_addr constant [58 x i8] c"FIXME: Loop %d not distributed: failed to build the RDG.\0A\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"ldist asked to generate code for vertex %d\0A\00", align 1
@remaining_stmts = internal global %struct.bitmap_head_def* null, align 8, !dbg !3084
@upstream_mem_writes = internal global %struct.bitmap_head_def* null, align 8, !dbg !3086
@.str.6 = private unnamed_addr constant [25 x i8] c"ldist useful partition:\0A\00", align 1
@.str.7 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.9 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@chrec_dont_know = external dso_local global %union.tree_node*, align 8
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@implicit_built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.11 = private unnamed_addr constant [23 x i8] c"generated memset zero\0A\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"tree-loop-distribution.c\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_rdg_partitions(%struct.VEC_bitmap_heap* %partitions) #0 !dbg !3118 {
entry:
  %partitions.addr = alloca %struct.VEC_bitmap_heap*, align 8
  store %struct.VEC_bitmap_heap* %partitions, %struct.VEC_bitmap_heap** %partitions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap** %partitions.addr, metadata !3122, metadata !DIExpression()), !dbg !3123
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3124
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions.addr, align 8, !dbg !3125
  call void @dump_rdg_partitions(%struct._IO_FILE* %0, %struct.VEC_bitmap_heap* %1), !dbg !3126
  ret void, !dbg !3127
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dump_rdg_partitions(%struct._IO_FILE* %file, %struct.VEC_bitmap_heap* %partitions) #0 !dbg !3128 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %partitions.addr = alloca %struct.VEC_bitmap_heap*, align 8
  %i = alloca i32, align 4
  %partition = alloca %struct.bitmap_head_def*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3182, metadata !DIExpression()), !dbg !3183
  store %struct.VEC_bitmap_heap* %partitions, %struct.VEC_bitmap_heap** %partitions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap** %partitions.addr, metadata !3184, metadata !DIExpression()), !dbg !3185
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3186, metadata !DIExpression()), !dbg !3187
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition, metadata !3188, metadata !DIExpression()), !dbg !3189
  store i32 0, i32* %i, align 4, !dbg !3190
  br label %for.cond, !dbg !3192

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions.addr, align 8, !dbg !3193
  %tobool = icmp ne %struct.VEC_bitmap_heap* %0, null, !dbg !3193
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3193

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions.addr, align 8, !dbg !3193
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %1, i32 0, i32 0, !dbg !3193
  br label %cond.end, !dbg !3193

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3193

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3193
  %2 = load i32, i32* %i, align 4, !dbg !3193
  %call = call i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %cond, i32 %2, %struct.bitmap_head_def** %partition), !dbg !3193
  %tobool1 = icmp ne i32 %call, 0, !dbg !3195
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3195

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3196
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !3197
  call void @debug_bitmap_file(%struct._IO_FILE* %3, %struct.bitmap_head_def* %4), !dbg !3198
  br label %for.inc, !dbg !3198

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !3199
  %inc = add nsw i32 %5, 1, !dbg !3199
  store i32 %inc, i32* %i, align 4, !dbg !3199
  br label %for.cond, !dbg !3200, !llvm.loop !3201

for.end:                                          ; preds = %cond.end
  ret void, !dbg !3203
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_tree_loop_distribution() #0 !dbg !3204 {
entry:
  %0 = load i32, i32* @flag_tree_loop_distribution, align 4, !dbg !3205
  %cmp = icmp ne i32 %0, 0, !dbg !3206
  %conv = zext i1 %cmp to i32, !dbg !3206
  %conv1 = trunc i32 %conv to i8, !dbg !3205
  ret i8 %conv1, !dbg !3207
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_loop_distribution() #0 !dbg !3208 {
entry:
  %loop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  %nb_generated_loops = alloca i32, align 4
  %work_list = alloca %struct.VEC_gimple_heap*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3209, metadata !DIExpression()), !dbg !3210
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !3211, metadata !DIExpression()), !dbg !3217
  call void @llvm.dbg.declare(metadata i32* %nb_generated_loops, metadata !3218, metadata !DIExpression()), !dbg !3219
  store i32 0, i32* %nb_generated_loops, align 4, !dbg !3219
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !3220
  br label %for.cond, !dbg !3220

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3222
  %tobool = icmp ne %struct.loop* %0, null, !dbg !3220
  br i1 %tobool, label %for.body, label %for.end, !dbg !3220

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %work_list, metadata !3224, metadata !DIExpression()), !dbg !3226
  %call = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 3), !dbg !3227
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %work_list, align 8, !dbg !3226
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3228
  call void @stores_from_loop(%struct.loop* %1, %struct.VEC_gimple_heap** %work_list), !dbg !3229
  call void @remove_similar_memory_refs(%struct.VEC_gimple_heap** %work_list), !dbg !3230
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3231
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %work_list, align 8, !dbg !3232
  %call1 = call i32 @distribute_loop(%struct.loop* %2, %struct.VEC_gimple_heap* %3), !dbg !3233
  store i32 %call1, i32* %nb_generated_loops, align 4, !dbg !3234
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3235
  %tobool2 = icmp ne %struct._IO_FILE* %4, null, !dbg !3235
  br i1 %tobool2, label %land.lhs.true, label %if.end8, !dbg !3237

land.lhs.true:                                    ; preds = %for.body
  %5 = load i32, i32* @dump_flags, align 4, !dbg !3238
  %and = and i32 %5, 8, !dbg !3239
  %tobool3 = icmp ne i32 %and, 0, !dbg !3239
  br i1 %tobool3, label %if.then, label %if.end8, !dbg !3240

if.then:                                          ; preds = %land.lhs.true
  %6 = load i32, i32* %nb_generated_loops, align 4, !dbg !3241
  %cmp = icmp sgt i32 %6, 1, !dbg !3244
  br i1 %cmp, label %if.then4, label %if.else, !dbg !3245

if.then4:                                         ; preds = %if.then
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3246
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3247
  %num = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 0, !dbg !3248
  %9 = load i32, i32* %num, align 8, !dbg !3248
  %10 = load i32, i32* %nb_generated_loops, align 4, !dbg !3249
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i32 %9, i32 %10), !dbg !3250
  br label %if.end, !dbg !3250

if.else:                                          ; preds = %if.then
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3251
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3252
  %num6 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 0, !dbg !3253
  %13 = load i32, i32* %num6, align 8, !dbg !3253
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i32 %13), !dbg !3254
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end8, !dbg !3255

if.end8:                                          ; preds = %if.end, %land.lhs.true, %for.body
  call void @verify_loop_structure(), !dbg !3256
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %work_list), !dbg !3257
  br label %for.inc, !dbg !3258

for.inc:                                          ; preds = %if.end8
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !3222
  br label %for.cond, !dbg !3222, !llvm.loop !3259

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !3261
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %vec_, i32 %ix_, %struct.bitmap_head_def** %ptr) #0 !dbg !3262 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_bitmap_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.bitmap_head_def**, align 8
  store %struct.VEC_bitmap_base* %vec_, %struct.VEC_bitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_base** %vec_.addr, metadata !3268, metadata !DIExpression()), !dbg !3269
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3270, metadata !DIExpression()), !dbg !3269
  store %struct.bitmap_head_def** %ptr, %struct.bitmap_head_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %ptr.addr, metadata !3271, metadata !DIExpression()), !dbg !3269
  %0 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !3272
  %tobool = icmp ne %struct.VEC_bitmap_base* %0, null, !dbg !3272
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3272

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3272
  %2 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !3272
  %num = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %2, i32 0, i32 0, !dbg !3272
  %3 = load i32, i32* %num, align 8, !dbg !3272
  %cmp = icmp ult i32 %1, %3, !dbg !3272
  br i1 %cmp, label %if.then, label %if.else, !dbg !3269

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !3274
  %vec = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %4, i32 0, i32 2, !dbg !3274
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3274
  %idxprom = zext i32 %5 to i64, !dbg !3274
  %arrayidx = getelementptr inbounds [1 x %struct.bitmap_head_def*], [1 x %struct.bitmap_head_def*]* %vec, i64 0, i64 %idxprom, !dbg !3274
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !3274
  %7 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %ptr.addr, align 8, !dbg !3274
  store %struct.bitmap_head_def* %6, %struct.bitmap_head_def** %7, align 8, !dbg !3274
  store i32 1, i32* %retval, align 4, !dbg !3274
  br label %return, !dbg !3274

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %ptr.addr, align 8, !dbg !3276
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %8, align 8, !dbg !3276
  store i32 0, i32* %retval, align 4, !dbg !3276
  br label %return, !dbg !3276

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3269
  ret i32 %9, !dbg !3269
}

declare dso_local void @debug_bitmap_file(%struct._IO_FILE*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !3278 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3283, metadata !DIExpression()), !dbg !3284
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3285, metadata !DIExpression()), !dbg !3286
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3287, metadata !DIExpression()), !dbg !3288
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !3289, metadata !DIExpression()), !dbg !3290
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3291, metadata !DIExpression()), !dbg !3292
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !3293, metadata !DIExpression()), !dbg !3294
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3295
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !3296
  store i32 0, i32* %idx, align 8, !dbg !3297
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3298
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3298
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3298
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3298
  %tobool = icmp ne %struct.loops* %2, null, !dbg !3298
  br i1 %tobool, label %if.end, label %if.then, !dbg !3300

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3301
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !3303
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3304
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3305
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !3306
  br label %return, !dbg !3307

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !3308
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !3308
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3309
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !3310
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !3311
  %6 = load i32, i32* %flags.addr, align 4, !dbg !3312
  %and = and i32 %6, 1, !dbg !3313
  %tobool3 = icmp ne i32 %and, 0, !dbg !3314
  %7 = zext i1 %tobool3 to i64, !dbg !3314
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !3314
  store i32 %cond, i32* %mn, align 4, !dbg !3315
  %8 = load i32, i32* %flags.addr, align 4, !dbg !3316
  %and4 = and i32 %8, 4, !dbg !3318
  %tobool5 = icmp ne i32 %and4, 0, !dbg !3318
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3319

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !3320
  br label %for.cond, !dbg !3323

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3324
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3324
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !3324
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !3324
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !3324
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3324
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !3324
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !3324

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3324
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3324
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !3324
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !3324
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !3324
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !3324
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !3324
  br label %cond.end, !dbg !3324

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3324

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3324
  %15 = load i32, i32* %i, align 4, !dbg !3324
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !3324
  %tobool15 = icmp ne i32 %call14, 0, !dbg !3326
  br i1 %tobool15, label %for.body, label %for.end, !dbg !3326

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3327
  %cmp = icmp ne %struct.loop* %16, null, !dbg !3329
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !3330

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3331
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !3332
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3332
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !3333
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !3334

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3335
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !3336
  %20 = load i32, i32* %num, align 8, !dbg !3336
  %21 = load i32, i32* %mn, align 4, !dbg !3337
  %cmp18 = icmp sge i32 %20, %21, !dbg !3338
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !3339

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3340
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !3340
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !3340
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !3340
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !3340

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3340
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !3340
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !3340
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !3340
  br label %cond.end26, !dbg !3340

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !3340

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !3340
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3340
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !3340
  %27 = load i32, i32* %num28, align 8, !dbg !3340
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !3340
  br label %if.end30, !dbg !3340

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3337

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !3341
  %inc = add i32 %28, 1, !dbg !3341
  store i32 %inc, i32* %i, align 4, !dbg !3341
  br label %for.cond, !dbg !3342, !llvm.loop !3343

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !3345

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !3346
  %and31 = and i32 %29, 2, !dbg !3348
  %tobool32 = icmp ne i32 %and31, 0, !dbg !3348
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !3349

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3350
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !3350
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !3350
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !3350
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !3353
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3353
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !3354
  br label %for.cond36, !dbg !3355

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3356
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !3358
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !3358
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !3359
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !3360

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !3361

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3362
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !3363
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !3363
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !3364
  br label %for.cond36, !dbg !3365, !llvm.loop !3366

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !3368

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3369
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !3372
  %38 = load i32, i32* %num43, align 8, !dbg !3372
  %39 = load i32, i32* %mn, align 4, !dbg !3373
  %cmp44 = icmp sge i32 %38, %39, !dbg !3374
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !3375

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3376
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !3376
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !3376
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !3376
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !3376

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3376
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !3376
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !3376
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !3376
  br label %cond.end52, !dbg !3376

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !3376

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !3376
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3376
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !3376
  %45 = load i32, i32* %num54, align 8, !dbg !3376
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !3376
  br label %if.end56, !dbg !3376

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3377
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !3379
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !3379
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !3377
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !3380

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3381
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !3384
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !3384
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !3385
  br label %for.cond60, !dbg !3386

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3387
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !3389
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !3389
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !3390
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !3391

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !3392

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3393
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !3394
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !3394
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !3395
  br label %for.cond60, !dbg !3396, !llvm.loop !3397

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !3399

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3400
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !3402
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !3402
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !3403

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !3404

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3405
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !3406
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !3407
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !3368, !llvm.loop !3408

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !3410

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3411
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !3411
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !3411
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !3411
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !3413
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !3413
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !3414
  br label %while.body79, !dbg !3415

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3416
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !3419
  %60 = load i32, i32* %num80, align 8, !dbg !3419
  %61 = load i32, i32* %mn, align 4, !dbg !3420
  %cmp81 = icmp sge i32 %60, %61, !dbg !3421
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !3422

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3423
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !3423
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !3423
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !3423
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !3423

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3423
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !3423
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !3423
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !3423
  br label %cond.end89, !dbg !3423

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !3423

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !3423
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3423
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !3423
  %67 = load i32, i32* %num91, align 8, !dbg !3423
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !3423
  br label %if.end93, !dbg !3423

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3424
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !3426
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !3426
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !3427
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !3428

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3429
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !3430
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !3430
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !3431
  br label %if.end110, !dbg !3432

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !3433

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3435
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !3436
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !3437

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3438
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !3439
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !3439
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !3440
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !3441
  br i1 %75, label %while.body103, label %while.end105, !dbg !3433

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3442
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !3443
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !3444
  br label %while.cond99, !dbg !3433, !llvm.loop !3445

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3447
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !3449
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !3450

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !3451

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3452
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !3453
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !3453
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !3454
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !3415, !llvm.loop !3455

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3457
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3458
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !3459
  br label %return, !dbg !3460

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !3460
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !3461 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3464, metadata !DIExpression()), !dbg !3465
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3465
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3465
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !3465
  ret %struct.VEC_gimple_heap* %1, !dbg !3465
}

declare dso_local void @stores_from_loop(%struct.loop*, %struct.VEC_gimple_heap**) #2

declare dso_local void @remove_similar_memory_refs(%struct.VEC_gimple_heap**) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @distribute_loop(%struct.loop* %loop, %struct.VEC_gimple_heap* %stmts) #0 !dbg !3466 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %stmts.addr = alloca %struct.VEC_gimple_heap*, align 8
  %res = alloca i32, align 4
  %rdg = alloca %struct.graph*, align 8
  %s = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %vertices = alloca %struct.VEC_int_heap*, align 8
  %v = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3469, metadata !DIExpression()), !dbg !3470
  store %struct.VEC_gimple_heap* %stmts, %struct.VEC_gimple_heap** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %stmts.addr, metadata !3471, metadata !DIExpression()), !dbg !3472
  call void @llvm.dbg.declare(metadata i32* %res, metadata !3473, metadata !DIExpression()), !dbg !3474
  store i32 0, i32* %res, align 4, !dbg !3474
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg, metadata !3475, metadata !DIExpression()), !dbg !3499
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s, metadata !3500, metadata !DIExpression()), !dbg !3501
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3502, metadata !DIExpression()), !dbg !3503
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %vertices, metadata !3504, metadata !DIExpression()), !dbg !3505
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3506
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 6, !dbg !3508
  %1 = load i32, i32* %num_nodes, align 4, !dbg !3508
  %cmp = icmp ugt i32 %1, 2, !dbg !3509
  br i1 %cmp, label %if.then, label %if.end3, !dbg !3510

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3511
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !3511
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3514

land.lhs.true:                                    ; preds = %if.then
  %3 = load i32, i32* @dump_flags, align 4, !dbg !3515
  %and = and i32 %3, 8, !dbg !3516
  %tobool1 = icmp ne i32 %and, 0, !dbg !3516
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !3517

if.then2:                                         ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3518
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3519
  %num = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 0, !dbg !3520
  %6 = load i32, i32* %num, align 8, !dbg !3520
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 %6), !dbg !3521
  br label %if.end, !dbg !3521

if.end:                                           ; preds = %if.then2, %land.lhs.true, %if.then
  %7 = load i32, i32* %res, align 4, !dbg !3522
  store i32 %7, i32* %retval, align 4, !dbg !3523
  br label %return, !dbg !3523

if.end3:                                          ; preds = %entry
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3524
  %call4 = call %struct.graph* @build_rdg(%struct.loop* %8), !dbg !3525
  store %struct.graph* %call4, %struct.graph** %rdg, align 8, !dbg !3526
  %9 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !3527
  %tobool5 = icmp ne %struct.graph* %9, null, !dbg !3527
  br i1 %tobool5, label %if.end15, label %if.then6, !dbg !3529

if.then6:                                         ; preds = %if.end3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3530
  %tobool7 = icmp ne %struct._IO_FILE* %10, null, !dbg !3530
  br i1 %tobool7, label %land.lhs.true8, label %if.end14, !dbg !3533

land.lhs.true8:                                   ; preds = %if.then6
  %11 = load i32, i32* @dump_flags, align 4, !dbg !3534
  %and9 = and i32 %11, 8, !dbg !3535
  %tobool10 = icmp ne i32 %and9, 0, !dbg !3535
  br i1 %tobool10, label %if.then11, label %if.end14, !dbg !3536

if.then11:                                        ; preds = %land.lhs.true8
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3537
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3538
  %num12 = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 0, !dbg !3539
  %14 = load i32, i32* %num12, align 8, !dbg !3539
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4, i64 0, i64 0), i32 %14), !dbg !3540
  br label %if.end14, !dbg !3540

if.end14:                                         ; preds = %if.then11, %land.lhs.true8, %if.then6
  %15 = load i32, i32* %res, align 4, !dbg !3541
  store i32 %15, i32* %retval, align 4, !dbg !3542
  br label %return, !dbg !3542

if.end15:                                         ; preds = %if.end3
  %call16 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 3), !dbg !3543
  store %struct.VEC_int_heap* %call16, %struct.VEC_int_heap** %vertices, align 8, !dbg !3544
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3545
  %tobool17 = icmp ne %struct._IO_FILE* %16, null, !dbg !3545
  br i1 %tobool17, label %land.lhs.true18, label %if.end22, !dbg !3547

land.lhs.true18:                                  ; preds = %if.end15
  %17 = load i32, i32* @dump_flags, align 4, !dbg !3548
  %and19 = and i32 %17, 8, !dbg !3549
  %tobool20 = icmp ne i32 %and19, 0, !dbg !3549
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !3550

if.then21:                                        ; preds = %land.lhs.true18
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3551
  %19 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !3552
  call void @dump_rdg(%struct._IO_FILE* %18, %struct.graph* %19), !dbg !3553
  br label %if.end22, !dbg !3553

if.end22:                                         ; preds = %if.then21, %land.lhs.true18, %if.end15
  store i32 0, i32* %i, align 4, !dbg !3554
  br label %for.cond, !dbg !3556

for.cond:                                         ; preds = %for.inc, %if.end22
  %20 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts.addr, align 8, !dbg !3557
  %tobool23 = icmp ne %struct.VEC_gimple_heap* %20, null, !dbg !3557
  br i1 %tobool23, label %cond.true, label %cond.false, !dbg !3557

cond.true:                                        ; preds = %for.cond
  %21 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts.addr, align 8, !dbg !3557
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %21, i32 0, i32 0, !dbg !3557
  br label %cond.end, !dbg !3557

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3557

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3557
  %22 = load i32, i32* %i, align 4, !dbg !3557
  %call24 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %22, %union.gimple_statement_d** %s), !dbg !3557
  %tobool25 = icmp ne i32 %call24, 0, !dbg !3559
  br i1 %tobool25, label %for.body, label %for.end, !dbg !3559

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %v, metadata !3560, metadata !DIExpression()), !dbg !3562
  %23 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !3563
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !3564
  %call26 = call i32 @rdg_vertex_for_stmt(%struct.graph* %23, %union.gimple_statement_d* %24), !dbg !3565
  store i32 %call26, i32* %v, align 4, !dbg !3562
  %25 = load i32, i32* %v, align 4, !dbg !3566
  %cmp27 = icmp sge i32 %25, 0, !dbg !3568
  br i1 %cmp27, label %if.then28, label %if.end37, !dbg !3569

if.then28:                                        ; preds = %for.body
  %26 = load i32, i32* %v, align 4, !dbg !3570
  %call29 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %vertices, i32 %26), !dbg !3570
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3572
  %tobool30 = icmp ne %struct._IO_FILE* %27, null, !dbg !3572
  br i1 %tobool30, label %land.lhs.true31, label %if.end36, !dbg !3574

land.lhs.true31:                                  ; preds = %if.then28
  %28 = load i32, i32* @dump_flags, align 4, !dbg !3575
  %and32 = and i32 %28, 8, !dbg !3576
  %tobool33 = icmp ne i32 %and32, 0, !dbg !3576
  br i1 %tobool33, label %if.then34, label %if.end36, !dbg !3577

if.then34:                                        ; preds = %land.lhs.true31
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3578
  %30 = load i32, i32* %v, align 4, !dbg !3579
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i32 %30), !dbg !3580
  br label %if.end36, !dbg !3580

if.end36:                                         ; preds = %if.then34, %land.lhs.true31, %if.then28
  br label %if.end37, !dbg !3581

if.end37:                                         ; preds = %if.end36, %for.body
  br label %for.inc, !dbg !3582

for.inc:                                          ; preds = %if.end37
  %31 = load i32, i32* %i, align 4, !dbg !3583
  %inc = add i32 %31, 1, !dbg !3583
  store i32 %inc, i32* %i, align 4, !dbg !3583
  br label %for.cond, !dbg !3584, !llvm.loop !3585

for.end:                                          ; preds = %cond.end
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3587
  %33 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !3588
  %34 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vertices, align 8, !dbg !3589
  %call38 = call i32 @ldist_gen(%struct.loop* %32, %struct.graph* %33, %struct.VEC_int_heap* %34), !dbg !3590
  store i32 %call38, i32* %res, align 4, !dbg !3591
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %vertices), !dbg !3592
  %35 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !3593
  call void @free_rdg(%struct.graph* %35), !dbg !3594
  %36 = load i32, i32* %res, align 4, !dbg !3595
  store i32 %36, i32* %retval, align 4, !dbg !3596
  br label %return, !dbg !3596

return:                                           ; preds = %for.end, %if.end14, %if.end
  %37 = load i32, i32* %retval, align 4, !dbg !3597
  ret i32 %37, !dbg !3597
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @verify_loop_structure() #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !3598 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !3602, metadata !DIExpression()), !dbg !3603
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3604
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !3604
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !3604
  br i1 %tobool, label %if.then, label %if.end, !dbg !3603

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3604
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !3604
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !3604
  call void @free(i8* %4), !dbg !3604
  br label %if.end, !dbg !3604

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3603
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !3603
  ret void, !dbg !3603
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !3606 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3609, metadata !DIExpression()), !dbg !3610
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3611, metadata !DIExpression()), !dbg !3612
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !3613, metadata !DIExpression()), !dbg !3614
  br label %while.cond, !dbg !3615

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3616
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !3616
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3616
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3616
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3616

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3616
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !3616
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !3616
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !3616
  br label %cond.end, !dbg !3616

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !3616

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3616
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3616
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !3616
  %5 = load i32, i32* %idx, align 8, !dbg !3616
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !3616
  %tobool2 = icmp ne i32 %call, 0, !dbg !3615
  br i1 %tobool2, label %while.body, label %while.end, !dbg !3615

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3617
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !3619
  %7 = load i32, i32* %idx3, align 8, !dbg !3620
  %inc = add i32 %7, 1, !dbg !3620
  store i32 %inc, i32* %idx3, align 8, !dbg !3620
  %8 = load i32, i32* %anum, align 4, !dbg !3621
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !3622
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3623
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !3624
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3625
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !3627
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !3627
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3628

if.then:                                          ; preds = %while.body
  br label %return, !dbg !3629

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !3615, !llvm.loop !3630

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3632
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !3632
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !3632
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3633
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !3634
  br label %return, !dbg !3635

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !3635
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !3636 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3639, metadata !DIExpression()), !dbg !3640
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3640
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !3640
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !3640
  ret %struct.VEC_int_heap* %1, !dbg !3640
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !3641 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3642
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3642
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3642
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3642
  %tobool = icmp ne %struct.loops* %1, null, !dbg !3642
  br i1 %tobool, label %if.end, label %if.then, !dbg !3644

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3645
  br label %return, !dbg !3645

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3646
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3646
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !3646
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !3646
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !3646
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3646
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !3646
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3646

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3646
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3646
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !3646
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !3646
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !3646
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !3646
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !3646
  br label %cond.end, !dbg !3646

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3646

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3646
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3646
  store i32 %call, i32* %retval, align 4, !dbg !3647
  br label %return, !dbg !3647

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3648
  ret i32 %8, !dbg !3648
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !3649 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3654, metadata !DIExpression()), !dbg !3655
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3656, metadata !DIExpression()), !dbg !3655
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !3657, metadata !DIExpression()), !dbg !3655
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3658
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3658
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3658

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3658
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3658
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3658
  %3 = load i32, i32* %num, align 8, !dbg !3658
  %cmp = icmp ult i32 %1, %3, !dbg !3658
  br i1 %cmp, label %if.then, label %if.else, !dbg !3655

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3660
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !3660
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3660
  %idxprom = zext i32 %5 to i64, !dbg !3660
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3660
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3660
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3660
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !3660
  store i32 1, i32* %retval, align 4, !dbg !3660
  br label %return, !dbg !3660

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3662
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !3662
  store i32 0, i32* %retval, align 4, !dbg !3662
  br label %return, !dbg !3662

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3655
  ret i32 %9, !dbg !3655
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !3664 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !3668, metadata !DIExpression()), !dbg !3669
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !3670, metadata !DIExpression()), !dbg !3669
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !3671, metadata !DIExpression()), !dbg !3669
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3669
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !3669
  %1 = load i32, i32* %num, align 4, !dbg !3669
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3669
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !3669
  %3 = load i32, i32* %alloc, align 4, !dbg !3669
  %cmp = icmp ult i32 %1, %3, !dbg !3669
  %conv = zext i1 %cmp to i32, !dbg !3669
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3669
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !3669
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3669
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !3669
  %6 = load i32, i32* %num1, align 4, !dbg !3669
  %inc = add i32 %6, 1, !dbg !3669
  store i32 %inc, i32* %num1, align 4, !dbg !3669
  %idxprom = zext i32 %6 to i64, !dbg !3669
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3669
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !3669
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !3669
  %8 = load i32*, i32** %slot_, align 8, !dbg !3669
  store i32 %7, i32* %8, align 4, !dbg !3669
  %9 = load i32*, i32** %slot_, align 8, !dbg !3669
  ret i32* %9, !dbg !3669
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !3672 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3677, metadata !DIExpression()), !dbg !3678
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3679, metadata !DIExpression()), !dbg !3680
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3681
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !3681
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !3681
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !3681
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3681

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3681
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !3681
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !3681
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !3681
  br label %cond.end, !dbg !3681

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3681

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3681
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3681
  store i32 %call, i32* %n, align 4, !dbg !3680
  %4 = load i32, i32* %n, align 4, !dbg !3682
  %cmp = icmp eq i32 %4, 0, !dbg !3684
  br i1 %cmp, label %if.then, label %if.end, !dbg !3685

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3686
  br label %return, !dbg !3686

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3687
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !3687
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !3687
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !3687
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !3687

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3687
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !3687
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !3687
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !3687
  br label %cond.end8, !dbg !3687

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !3687

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !3687
  %9 = load i32, i32* %n, align 4, !dbg !3687
  %sub = sub i32 %9, 1, !dbg !3687
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !3687
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !3688
  br label %return, !dbg !3688

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3689
  ret %struct.loop* %10, !dbg !3689
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !3690 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3693, metadata !DIExpression()), !dbg !3694
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3694
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3694
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3694

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3694
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !3694
  %2 = load i32, i32* %num, align 8, !dbg !3694
  br label %cond.end, !dbg !3694

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3694

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3694
  ret i32 %cond, !dbg !3694
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !3695 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3698, metadata !DIExpression()), !dbg !3699
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3700, metadata !DIExpression()), !dbg !3699
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3699
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3699
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3699

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3699
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3699
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3699
  %3 = load i32, i32* %num, align 8, !dbg !3699
  %cmp = icmp ult i32 %1, %3, !dbg !3699
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3701
  %land.ext = zext i1 %4 to i32, !dbg !3699
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3699
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !3699
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3699
  %idxprom = zext i32 %6 to i64, !dbg !3699
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3699
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3699
  ret %struct.loop* %7, !dbg !3699
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local %struct.graph* @build_rdg(%struct.loop*) #2

declare dso_local void @dump_rdg(%struct._IO_FILE*, %struct.graph*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !3702 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3710, metadata !DIExpression()), !dbg !3709
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !3711, metadata !DIExpression()), !dbg !3709
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3712
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !3712
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3712

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3712
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3712
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !3712
  %3 = load i32, i32* %num, align 8, !dbg !3712
  %cmp = icmp ult i32 %1, %3, !dbg !3712
  br i1 %cmp, label %if.then, label %if.else, !dbg !3709

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3714
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !3714
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3714
  %idxprom = zext i32 %5 to i64, !dbg !3714
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !3714
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !3714
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !3714
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !3714
  store i32 1, i32* %retval, align 4, !dbg !3714
  br label %return, !dbg !3714

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !3716
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !3716
  store i32 0, i32* %retval, align 4, !dbg !3716
  br label %return, !dbg !3716

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3709
  ret i32 %9, !dbg !3709
}

declare dso_local i32 @rdg_vertex_for_stmt(%struct.graph*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %vec_, i32 %obj_) #0 !dbg !3718 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %obj_.addr = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !3722, metadata !DIExpression()), !dbg !3723
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !3724, metadata !DIExpression()), !dbg !3723
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3723
  %call = call i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %0, i32 1), !dbg !3723
  %1 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3723
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %1, align 8, !dbg !3723
  %tobool = icmp ne %struct.VEC_int_heap* %2, null, !dbg !3723
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3723

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3723
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %3, align 8, !dbg !3723
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !3723
  br label %cond.end, !dbg !3723

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3723

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3723
  %5 = load i32, i32* %obj_.addr, align 4, !dbg !3723
  %call1 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond, i32 %5), !dbg !3723
  ret i32* %call1, !dbg !3723
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ldist_gen(%struct.loop* %loop, %struct.graph* %rdg, %struct.VEC_int_heap* %starting_vertices) #0 !dbg !3725 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %rdg.addr = alloca %struct.graph*, align 8
  %starting_vertices.addr = alloca %struct.VEC_int_heap*, align 8
  %i = alloca i32, align 4
  %nbp = alloca i32, align 4
  %components = alloca %struct.VEC_rdgc_heap*, align 8
  %partitions = alloca %struct.VEC_bitmap_heap*, align 8
  %other_stores = alloca %struct.VEC_int_heap*, align 8
  %partition = alloca %struct.bitmap_head_def*, align 8
  %processed = alloca %struct.bitmap_head_def*, align 8
  %v = alloca i32, align 4
  %j = alloca i32, align 4
  %found = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3728, metadata !DIExpression()), !dbg !3729
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !3730, metadata !DIExpression()), !dbg !3731
  store %struct.VEC_int_heap* %starting_vertices, %struct.VEC_int_heap** %starting_vertices.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %starting_vertices.addr, metadata !3732, metadata !DIExpression()), !dbg !3733
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3734, metadata !DIExpression()), !dbg !3735
  call void @llvm.dbg.declare(metadata i32* %nbp, metadata !3736, metadata !DIExpression()), !dbg !3737
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_heap** %components, metadata !3738, metadata !DIExpression()), !dbg !3739
  %call = call %struct.VEC_rdgc_heap* @VEC_rdgc_heap_alloc(i32 3), !dbg !3740
  store %struct.VEC_rdgc_heap* %call, %struct.VEC_rdgc_heap** %components, align 8, !dbg !3739
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap** %partitions, metadata !3741, metadata !DIExpression()), !dbg !3742
  %call1 = call %struct.VEC_bitmap_heap* @VEC_bitmap_heap_alloc(i32 3), !dbg !3743
  store %struct.VEC_bitmap_heap* %call1, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3742
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %other_stores, metadata !3744, metadata !DIExpression()), !dbg !3745
  %call2 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 3), !dbg !3746
  store %struct.VEC_int_heap* %call2, %struct.VEC_int_heap** %other_stores, align 8, !dbg !3745
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition, metadata !3747, metadata !DIExpression()), !dbg !3748
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed, metadata !3749, metadata !DIExpression()), !dbg !3750
  %call3 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3751
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %processed, align 8, !dbg !3750
  %call4 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3752
  store %struct.bitmap_head_def* %call4, %struct.bitmap_head_def** @remaining_stmts, align 8, !dbg !3753
  %call5 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3754
  store %struct.bitmap_head_def* %call5, %struct.bitmap_head_def** @upstream_mem_writes, align 8, !dbg !3755
  store i32 0, i32* %i, align 4, !dbg !3756
  br label %for.cond, !dbg !3758

for.cond:                                         ; preds = %for.inc19, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3759
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3761
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %1, i32 0, i32 0, !dbg !3762
  %2 = load i32, i32* %n_vertices, align 8, !dbg !3762
  %cmp = icmp slt i32 %0, %2, !dbg !3763
  br i1 %cmp, label %for.body, label %for.end21, !dbg !3764

for.body:                                         ; preds = %for.cond
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @remaining_stmts, align 8, !dbg !3765
  %4 = load i32, i32* %i, align 4, !dbg !3767
  %call6 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %4), !dbg !3768
  %5 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3769
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %5, i32 0, i32 1, !dbg !3769
  %6 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !3769
  %7 = load i32, i32* %i, align 4, !dbg !3769
  %idxprom = sext i32 %7 to i64, !dbg !3769
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %6, i64 %idxprom, !dbg !3769
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !3769
  %8 = load i8*, i8** %data, align 8, !dbg !3769
  %9 = bitcast i8* %8 to %struct.rdg_vertex*, !dbg !3769
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %9, i32 0, i32 1, !dbg !3769
  %10 = load i8, i8* %has_mem_write, align 8, !dbg !3769
  %tobool = icmp ne i8 %10, 0, !dbg !3769
  br i1 %tobool, label %if.then, label %if.end18, !dbg !3771

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %v, metadata !3772, metadata !DIExpression()), !dbg !3774
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3775, metadata !DIExpression()), !dbg !3776
  call void @llvm.dbg.declare(metadata i8* %found, metadata !3777, metadata !DIExpression()), !dbg !3778
  store i8 0, i8* %found, align 1, !dbg !3778
  store i32 0, i32* %j, align 4, !dbg !3779
  br label %for.cond7, !dbg !3781

for.cond7:                                        ; preds = %for.inc, %if.then
  %11 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %starting_vertices.addr, align 8, !dbg !3782
  %tobool8 = icmp ne %struct.VEC_int_heap* %11, null, !dbg !3782
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !3782

cond.true:                                        ; preds = %for.cond7
  %12 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %starting_vertices.addr, align 8, !dbg !3782
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %12, i32 0, i32 0, !dbg !3782
  br label %cond.end, !dbg !3782

cond.false:                                       ; preds = %for.cond7
  br label %cond.end, !dbg !3782

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3782
  %13 = load i32, i32* %j, align 4, !dbg !3782
  %call9 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %13, i32* %v), !dbg !3782
  %tobool10 = icmp ne i32 %call9, 0, !dbg !3784
  br i1 %tobool10, label %for.body11, label %for.end, !dbg !3784

for.body11:                                       ; preds = %cond.end
  %14 = load i32, i32* %i, align 4, !dbg !3785
  %15 = load i32, i32* %v, align 4, !dbg !3787
  %cmp12 = icmp eq i32 %14, %15, !dbg !3788
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !3789

if.then13:                                        ; preds = %for.body11
  store i8 1, i8* %found, align 1, !dbg !3790
  br label %for.end, !dbg !3792

if.end:                                           ; preds = %for.body11
  br label %for.inc, !dbg !3787

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %j, align 4, !dbg !3793
  %inc = add i32 %16, 1, !dbg !3793
  store i32 %inc, i32* %j, align 4, !dbg !3793
  br label %for.cond7, !dbg !3794, !llvm.loop !3795

for.end:                                          ; preds = %if.then13, %cond.end
  %17 = load i8, i8* %found, align 1, !dbg !3797
  %tobool14 = icmp ne i8 %17, 0, !dbg !3797
  br i1 %tobool14, label %if.end17, label %if.then15, !dbg !3799

if.then15:                                        ; preds = %for.end
  %18 = load i32, i32* %i, align 4, !dbg !3800
  %call16 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %other_stores, i32 %18), !dbg !3800
  br label %if.end17, !dbg !3800

if.end17:                                         ; preds = %if.then15, %for.end
  br label %if.end18, !dbg !3801

if.end18:                                         ; preds = %if.end17, %for.body
  br label %for.inc19, !dbg !3802

for.inc19:                                        ; preds = %if.end18
  %19 = load i32, i32* %i, align 4, !dbg !3803
  %inc20 = add nsw i32 %19, 1, !dbg !3803
  store i32 %inc20, i32* %i, align 4, !dbg !3803
  br label %for.cond, !dbg !3804, !llvm.loop !3805

for.end21:                                        ; preds = %for.cond
  %20 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3807
  call void @mark_nodes_having_upstream_mem_writes(%struct.graph* %20), !dbg !3808
  %21 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3809
  %22 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %starting_vertices.addr, align 8, !dbg !3810
  call void @rdg_build_components(%struct.graph* %21, %struct.VEC_int_heap* %22, %struct.VEC_rdgc_heap** %components), !dbg !3811
  %23 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3812
  %24 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %components, align 8, !dbg !3813
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed, align 8, !dbg !3814
  call void @rdg_build_partitions(%struct.graph* %23, %struct.VEC_rdgc_heap* %24, %struct.VEC_int_heap** %other_stores, %struct.VEC_bitmap_heap** %partitions, %struct.bitmap_head_def* %25), !dbg !3815
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed, align 8, !dbg !3816
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %26), !dbg !3816
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %processed, align 8, !dbg !3816
  %27 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3817
  %tobool22 = icmp ne %struct.VEC_bitmap_heap* %27, null, !dbg !3817
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !3817

cond.true23:                                      ; preds = %for.end21
  %28 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3817
  %base24 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %28, i32 0, i32 0, !dbg !3817
  br label %cond.end26, !dbg !3817

cond.false25:                                     ; preds = %for.end21
  br label %cond.end26, !dbg !3817

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_bitmap_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !3817
  %call28 = call i32 @VEC_bitmap_base_length(%struct.VEC_bitmap_base* %cond27), !dbg !3817
  store i32 %call28, i32* %nbp, align 4, !dbg !3818
  %29 = load i32, i32* %nbp, align 4, !dbg !3819
  %cmp29 = icmp sle i32 %29, 1, !dbg !3821
  br i1 %cmp29, label %if.then32, label %lor.lhs.false, !dbg !3822

lor.lhs.false:                                    ; preds = %cond.end26
  %30 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3823
  %31 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3824
  %call30 = call zeroext i8 @partition_contains_all_rw(%struct.graph* %30, %struct.VEC_bitmap_heap* %31), !dbg !3825
  %conv = zext i8 %call30 to i32, !dbg !3825
  %tobool31 = icmp ne i32 %conv, 0, !dbg !3825
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !3826

if.then32:                                        ; preds = %lor.lhs.false, %cond.end26
  br label %ldist_done, !dbg !3827

if.end33:                                         ; preds = %lor.lhs.false
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3828
  %tobool34 = icmp ne %struct._IO_FILE* %32, null, !dbg !3828
  br i1 %tobool34, label %land.lhs.true, label %if.end37, !dbg !3830

land.lhs.true:                                    ; preds = %if.end33
  %33 = load i32, i32* @dump_flags, align 4, !dbg !3831
  %and = and i32 %33, 8, !dbg !3832
  %tobool35 = icmp ne i32 %and, 0, !dbg !3832
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !3833

if.then36:                                        ; preds = %land.lhs.true
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3834
  %35 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3835
  call void @dump_rdg_partitions(%struct._IO_FILE* %34, %struct.VEC_bitmap_heap* %35), !dbg !3836
  br label %if.end37, !dbg !3836

if.end37:                                         ; preds = %if.then36, %land.lhs.true, %if.end33
  store i32 0, i32* %i, align 4, !dbg !3837
  br label %for.cond38, !dbg !3839

for.cond38:                                       ; preds = %for.inc55, %if.end37
  %36 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3840
  %tobool39 = icmp ne %struct.VEC_bitmap_heap* %36, null, !dbg !3840
  br i1 %tobool39, label %cond.true40, label %cond.false42, !dbg !3840

cond.true40:                                      ; preds = %for.cond38
  %37 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3840
  %base41 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %37, i32 0, i32 0, !dbg !3840
  br label %cond.end43, !dbg !3840

cond.false42:                                     ; preds = %for.cond38
  br label %cond.end43, !dbg !3840

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.VEC_bitmap_base* [ %base41, %cond.true40 ], [ null, %cond.false42 ], !dbg !3840
  %38 = load i32, i32* %i, align 4, !dbg !3840
  %call45 = call i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %cond44, i32 %38, %struct.bitmap_head_def** %partition), !dbg !3840
  %tobool46 = icmp ne i32 %call45, 0, !dbg !3842
  br i1 %tobool46, label %for.body47, label %for.end57, !dbg !3842

for.body47:                                       ; preds = %cond.end43
  %39 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3843
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !3845
  %41 = load i32, i32* %i, align 4, !dbg !3846
  %42 = load i32, i32* %nbp, align 4, !dbg !3847
  %sub = sub nsw i32 %42, 1, !dbg !3848
  %cmp48 = icmp slt i32 %41, %sub, !dbg !3849
  %conv49 = zext i1 %cmp48 to i32, !dbg !3849
  %conv50 = trunc i32 %conv49 to i8, !dbg !3846
  %call51 = call zeroext i8 @generate_code_for_partition(%struct.loop* %39, %struct.bitmap_head_def* %40, i8 zeroext %conv50), !dbg !3850
  %tobool52 = icmp ne i8 %call51, 0, !dbg !3850
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !3851

if.then53:                                        ; preds = %for.body47
  br label %ldist_done, !dbg !3852

if.end54:                                         ; preds = %for.body47
  br label %for.inc55, !dbg !3853

for.inc55:                                        ; preds = %if.end54
  %43 = load i32, i32* %i, align 4, !dbg !3854
  %inc56 = add nsw i32 %43, 1, !dbg !3854
  store i32 %inc56, i32* %i, align 4, !dbg !3854
  br label %for.cond38, !dbg !3855, !llvm.loop !3856

for.end57:                                        ; preds = %cond.end43
  call void @rewrite_into_loop_closed_ssa(%struct.bitmap_head_def* null, i32 2048), !dbg !3858
  call void @update_ssa(i32 18432), !dbg !3859
  br label %ldist_done, !dbg !3859

ldist_done:                                       ; preds = %for.end57, %if.then53, %if.then32
  call void @llvm.dbg.label(metadata !3860), !dbg !3861
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @remaining_stmts, align 8, !dbg !3862
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %44), !dbg !3862
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @remaining_stmts, align 8, !dbg !3862
  %45 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @upstream_mem_writes, align 8, !dbg !3863
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %45), !dbg !3863
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @upstream_mem_writes, align 8, !dbg !3863
  store i32 0, i32* %i, align 4, !dbg !3864
  br label %for.cond58, !dbg !3866

for.cond58:                                       ; preds = %for.inc68, %ldist_done
  %46 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3867
  %tobool59 = icmp ne %struct.VEC_bitmap_heap* %46, null, !dbg !3867
  br i1 %tobool59, label %cond.true60, label %cond.false62, !dbg !3867

cond.true60:                                      ; preds = %for.cond58
  %47 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions, align 8, !dbg !3867
  %base61 = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %47, i32 0, i32 0, !dbg !3867
  br label %cond.end63, !dbg !3867

cond.false62:                                     ; preds = %for.cond58
  br label %cond.end63, !dbg !3867

cond.end63:                                       ; preds = %cond.false62, %cond.true60
  %cond64 = phi %struct.VEC_bitmap_base* [ %base61, %cond.true60 ], [ null, %cond.false62 ], !dbg !3867
  %48 = load i32, i32* %i, align 4, !dbg !3867
  %call65 = call i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %cond64, i32 %48, %struct.bitmap_head_def** %partition), !dbg !3867
  %tobool66 = icmp ne i32 %call65, 0, !dbg !3869
  br i1 %tobool66, label %for.body67, label %for.end70, !dbg !3869

for.body67:                                       ; preds = %cond.end63
  %49 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !3870
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %49), !dbg !3870
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %partition, align 8, !dbg !3870
  br label %for.inc68, !dbg !3870

for.inc68:                                        ; preds = %for.body67
  %50 = load i32, i32* %i, align 4, !dbg !3871
  %inc69 = add nsw i32 %50, 1, !dbg !3871
  store i32 %inc69, i32* %i, align 4, !dbg !3871
  br label %for.cond58, !dbg !3872, !llvm.loop !3873

for.end70:                                        ; preds = %cond.end63
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %other_stores), !dbg !3875
  call void @VEC_bitmap_heap_free(%struct.VEC_bitmap_heap** %partitions), !dbg !3876
  %51 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %components, align 8, !dbg !3877
  call void @free_rdg_components(%struct.VEC_rdgc_heap* %51), !dbg !3878
  %52 = load i32, i32* %nbp, align 4, !dbg !3879
  ret i32 %52, !dbg !3880
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !3881 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !3884, metadata !DIExpression()), !dbg !3885
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3886
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !3886
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3886
  br i1 %tobool, label %if.then, label %if.end, !dbg !3885

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3886
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !3886
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !3886
  call void @free(i8* %4), !dbg !3886
  br label %if.end, !dbg !3886

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3885
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !3885
  ret void, !dbg !3885
}

declare dso_local void @free_rdg(%struct.graph*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %vec_, i32 %alloc_) #0 !dbg !3888 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !3891, metadata !DIExpression()), !dbg !3892
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3893, metadata !DIExpression()), !dbg !3892
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !3894, metadata !DIExpression()), !dbg !3892
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3892
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !3892
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3892
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3892

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3892
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !3892
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !3892
  br label %cond.end, !dbg !3892

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3892

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3892
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !3892
  %call = call i32 @VEC_int_base_space(%struct.VEC_int_base* %cond, i32 %4), !dbg !3892
  %tobool1 = icmp ne i32 %call, 0, !dbg !3892
  %lnot = xor i1 %tobool1, true, !dbg !3892
  %lnot.ext = zext i1 %lnot to i32, !dbg !3892
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !3892
  %5 = load i32, i32* %extend, align 4, !dbg !3895
  %tobool2 = icmp ne i32 %5, 0, !dbg !3895
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3892

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3895
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %6, align 8, !dbg !3895
  %8 = bitcast %struct.VEC_int_heap* %7 to i8*, !dbg !3895
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !3895
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !3895
  %10 = bitcast i8* %call3 to %struct.VEC_int_heap*, !dbg !3895
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3895
  store %struct.VEC_int_heap* %10, %struct.VEC_int_heap** %11, align 8, !dbg !3895
  br label %if.end, !dbg !3895

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !3892
  ret i32 %12, !dbg !3892
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_space(%struct.VEC_int_base* %vec_, i32 %alloc_) #0 !dbg !3897 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !3900, metadata !DIExpression()), !dbg !3901
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3902, metadata !DIExpression()), !dbg !3901
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3901
  %cmp = icmp sge i32 %0, 0, !dbg !3901
  %conv = zext i1 %cmp to i32, !dbg !3901
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3901
  %tobool = icmp ne %struct.VEC_int_base* %1, null, !dbg !3901
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3901

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3901
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !3901
  %3 = load i32, i32* %alloc, align 4, !dbg !3901
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3901
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 0, !dbg !3901
  %5 = load i32, i32* %num, align 4, !dbg !3901
  %sub = sub i32 %3, %5, !dbg !3901
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !3901
  %cmp1 = icmp uge i32 %sub, %6, !dbg !3901
  %conv2 = zext i1 %cmp1 to i32, !dbg !3901
  br label %cond.end, !dbg !3901

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !3901
  %tobool3 = icmp ne i32 %7, 0, !dbg !3901
  %lnot = xor i1 %tobool3, true, !dbg !3901
  %lnot.ext = zext i1 %lnot to i32, !dbg !3901
  br label %cond.end, !dbg !3901

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !3901
  ret i32 %cond, !dbg !3901
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_rdgc_heap* @VEC_rdgc_heap_alloc(i32 %alloc_) #0 !dbg !3903 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3906, metadata !DIExpression()), !dbg !3907
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3907
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3907
  %1 = bitcast i8* %call to %struct.VEC_rdgc_heap*, !dbg !3907
  ret %struct.VEC_rdgc_heap* %1, !dbg !3907
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_bitmap_heap* @VEC_bitmap_heap_alloc(i32 %alloc_) #0 !dbg !3908 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3911, metadata !DIExpression()), !dbg !3912
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3912
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3912
  %1 = bitcast i8* %call to %struct.VEC_bitmap_heap*, !dbg !3912
  ret %struct.VEC_bitmap_heap* %1, !dbg !3912
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !3913 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !3918, metadata !DIExpression()), !dbg !3919
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3920, metadata !DIExpression()), !dbg !3919
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !3921, metadata !DIExpression()), !dbg !3919
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3922
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !3922
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3922

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3922
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3922
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !3922
  %3 = load i32, i32* %num, align 4, !dbg !3922
  %cmp = icmp ult i32 %1, %3, !dbg !3922
  br i1 %cmp, label %if.then, label %if.else, !dbg !3919

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3924
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !3924
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3924
  %idxprom = zext i32 %5 to i64, !dbg !3924
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3924
  %6 = load i32, i32* %arrayidx, align 4, !dbg !3924
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !3924
  store i32 %6, i32* %7, align 4, !dbg !3924
  store i32 1, i32* %retval, align 4, !dbg !3924
  br label %return, !dbg !3924

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !3926
  store i32 0, i32* %8, align 4, !dbg !3926
  store i32 0, i32* %retval, align 4, !dbg !3926
  br label %return, !dbg !3926

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3919
  ret i32 %9, !dbg !3919
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_nodes_having_upstream_mem_writes(%struct.graph* %rdg) #0 !dbg !3928 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %v = alloca i32, align 4
  %x = alloca i32, align 4
  %seen = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %nodes = alloca %struct.VEC_int_heap*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !3931, metadata !DIExpression()), !dbg !3932
  call void @llvm.dbg.declare(metadata i32* %v, metadata !3933, metadata !DIExpression()), !dbg !3934
  call void @llvm.dbg.declare(metadata i32* %x, metadata !3935, metadata !DIExpression()), !dbg !3936
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %seen, metadata !3937, metadata !DIExpression()), !dbg !3938
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3939
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %seen, align 8, !dbg !3938
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3940
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %0, i32 0, i32 0, !dbg !3942
  %1 = load i32, i32* %n_vertices, align 8, !dbg !3942
  %sub = sub nsw i32 %1, 1, !dbg !3943
  store i32 %sub, i32* %v, align 4, !dbg !3944
  br label %for.cond, !dbg !3945

for.cond:                                         ; preds = %for.inc30, %entry
  %2 = load i32, i32* %v, align 4, !dbg !3946
  %cmp = icmp sge i32 %2, 0, !dbg !3948
  br i1 %cmp, label %for.body, label %for.end31, !dbg !3949

for.body:                                         ; preds = %for.cond
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen, align 8, !dbg !3950
  %4 = load i32, i32* %v, align 4, !dbg !3952
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %3, i32 %4), !dbg !3953
  %tobool = icmp ne i32 %call1, 0, !dbg !3953
  br i1 %tobool, label %if.end29, label %if.then, !dbg !3954

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3955, metadata !DIExpression()), !dbg !3957
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %nodes, metadata !3958, metadata !DIExpression()), !dbg !3959
  %call2 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 3), !dbg !3960
  store %struct.VEC_int_heap* %call2, %struct.VEC_int_heap** %nodes, align 8, !dbg !3959
  %5 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3961
  %call3 = call i32 @graphds_dfs(%struct.graph* %5, i32* %v, i32 1, %struct.VEC_int_heap** %nodes, i8 zeroext 0, %struct.bitmap_head_def* null), !dbg !3962
  store i32 0, i32* %i, align 4, !dbg !3963
  br label %for.cond4, !dbg !3965

for.cond4:                                        ; preds = %for.inc, %if.then
  %6 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %nodes, align 8, !dbg !3966
  %tobool5 = icmp ne %struct.VEC_int_heap* %6, null, !dbg !3966
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !3966

cond.true:                                        ; preds = %for.cond4
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %nodes, align 8, !dbg !3966
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %7, i32 0, i32 0, !dbg !3966
  br label %cond.end, !dbg !3966

cond.false:                                       ; preds = %for.cond4
  br label %cond.end, !dbg !3966

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3966
  %8 = load i32, i32* %i, align 4, !dbg !3966
  %call6 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %8, i32* %x), !dbg !3966
  %tobool7 = icmp ne i32 %call6, 0, !dbg !3968
  br i1 %tobool7, label %for.body8, label %for.end, !dbg !3968

for.body8:                                        ; preds = %cond.end
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen, align 8, !dbg !3969
  %10 = load i32, i32* %x, align 4, !dbg !3972
  %call9 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %9, i32 %10), !dbg !3973
  %tobool10 = icmp ne i32 %call9, 0, !dbg !3973
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !3974

if.then11:                                        ; preds = %for.body8
  br label %for.inc, !dbg !3975

if.end:                                           ; preds = %for.body8
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %seen, align 8, !dbg !3976
  %12 = load i32, i32* %x, align 4, !dbg !3977
  %call12 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %12), !dbg !3978
  %13 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3979
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %13, i32 0, i32 1, !dbg !3979
  %14 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !3979
  %15 = load i32, i32* %x, align 4, !dbg !3979
  %idxprom = sext i32 %15 to i64, !dbg !3979
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %14, i64 %idxprom, !dbg !3979
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !3979
  %16 = load i8*, i8** %data, align 8, !dbg !3979
  %17 = bitcast i8* %16 to %struct.rdg_vertex*, !dbg !3979
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %17, i32 0, i32 1, !dbg !3979
  %18 = load i8, i8* %has_mem_write, align 8, !dbg !3979
  %conv = zext i8 %18 to i32, !dbg !3979
  %tobool13 = icmp ne i32 %conv, 0, !dbg !3979
  br i1 %tobool13, label %if.then26, label %lor.lhs.false, !dbg !3981

lor.lhs.false:                                    ; preds = %if.end
  %19 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3982
  %20 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3983
  %vertices14 = getelementptr inbounds %struct.graph, %struct.graph* %20, i32 0, i32 1, !dbg !3984
  %21 = load %struct.vertex*, %struct.vertex** %vertices14, align 8, !dbg !3984
  %22 = load i32, i32* %x, align 4, !dbg !3985
  %idxprom15 = sext i32 %22 to i64, !dbg !3983
  %arrayidx16 = getelementptr inbounds %struct.vertex, %struct.vertex* %21, i64 %idxprom15, !dbg !3983
  %call17 = call zeroext i8 @predecessor_has_mem_write(%struct.graph* %19, %struct.vertex* %arrayidx16), !dbg !3986
  %conv18 = zext i8 %call17 to i32, !dbg !3986
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !3986
  br i1 %tobool19, label %if.then26, label %lor.lhs.false20, !dbg !3987

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %23 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !3988
  %vertices21 = getelementptr inbounds %struct.graph, %struct.graph* %23, i32 0, i32 1, !dbg !3989
  %24 = load %struct.vertex*, %struct.vertex** %vertices21, align 8, !dbg !3989
  %25 = load i32, i32* %x, align 4, !dbg !3990
  %idxprom22 = sext i32 %25 to i64, !dbg !3988
  %arrayidx23 = getelementptr inbounds %struct.vertex, %struct.vertex* %24, i64 %idxprom22, !dbg !3988
  %call24 = call %struct.graph_edge* @has_anti_dependence(%struct.vertex* %arrayidx23), !dbg !3991
  %tobool25 = icmp ne %struct.graph_edge* %call24, null, !dbg !3991
  br i1 %tobool25, label %if.then26, label %if.end28, !dbg !3992

if.then26:                                        ; preds = %lor.lhs.false20, %lor.lhs.false, %if.end
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @upstream_mem_writes, align 8, !dbg !3993
  %27 = load i32, i32* %x, align 4, !dbg !3995
  %call27 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %26, i32 %27), !dbg !3996
  br label %if.end28, !dbg !3997

if.end28:                                         ; preds = %if.then26, %lor.lhs.false20
  br label %for.inc, !dbg !3998

for.inc:                                          ; preds = %if.end28, %if.then11
  %28 = load i32, i32* %i, align 4, !dbg !3999
  %inc = add i32 %28, 1, !dbg !3999
  store i32 %inc, i32* %i, align 4, !dbg !3999
  br label %for.cond4, !dbg !4000, !llvm.loop !4001

for.end:                                          ; preds = %cond.end
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %nodes), !dbg !4003
  br label %if.end29, !dbg !4004

if.end29:                                         ; preds = %for.end, %for.body
  br label %for.inc30, !dbg !4005

for.inc30:                                        ; preds = %if.end29
  %29 = load i32, i32* %v, align 4, !dbg !4006
  %dec = add nsw i32 %29, -1, !dbg !4006
  store i32 %dec, i32* %v, align 4, !dbg !4006
  br label %for.cond, !dbg !4007, !llvm.loop !4008

for.end31:                                        ; preds = %for.cond
  ret void, !dbg !4010
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdg_build_components(%struct.graph* %rdg, %struct.VEC_int_heap* %starting_vertices, %struct.VEC_rdgc_heap** %components) #0 !dbg !4011 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %starting_vertices.addr = alloca %struct.VEC_int_heap*, align 8
  %components.addr = alloca %struct.VEC_rdgc_heap**, align 8
  %i = alloca i32, align 4
  %v = alloca i32, align 4
  %saved_components = alloca %struct.bitmap_head_def*, align 8
  %n_components = alloca i32, align 4
  %all_components = alloca %struct.VEC_int_heap**, align 8
  %c = alloca i32, align 4
  %x = alloca %struct.rdg_component*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4015, metadata !DIExpression()), !dbg !4016
  store %struct.VEC_int_heap* %starting_vertices, %struct.VEC_int_heap** %starting_vertices.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %starting_vertices.addr, metadata !4017, metadata !DIExpression()), !dbg !4018
  store %struct.VEC_rdgc_heap** %components, %struct.VEC_rdgc_heap*** %components.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_heap*** %components.addr, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4021, metadata !DIExpression()), !dbg !4022
  call void @llvm.dbg.declare(metadata i32* %v, metadata !4023, metadata !DIExpression()), !dbg !4024
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %saved_components, metadata !4025, metadata !DIExpression()), !dbg !4026
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4027
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %saved_components, align 8, !dbg !4026
  call void @llvm.dbg.declare(metadata i32* %n_components, metadata !4028, metadata !DIExpression()), !dbg !4029
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4030
  %call1 = call i32 @graphds_scc(%struct.graph* %0, %struct.bitmap_head_def* null), !dbg !4031
  store i32 %call1, i32* %n_components, align 4, !dbg !4029
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %all_components, metadata !4032, metadata !DIExpression()), !dbg !4033
  %1 = load i32, i32* %n_components, align 4, !dbg !4034
  %conv = sext i32 %1 to i64, !dbg !4034
  %mul = mul i64 8, %conv, !dbg !4034
  %call2 = call i8* @xmalloc(i64 %mul), !dbg !4034
  %2 = bitcast i8* %call2 to %struct.VEC_int_heap**, !dbg !4034
  store %struct.VEC_int_heap** %2, %struct.VEC_int_heap*** %all_components, align 8, !dbg !4033
  store i32 0, i32* %i, align 4, !dbg !4035
  br label %for.cond, !dbg !4037

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !4038
  %4 = load i32, i32* %n_components, align 4, !dbg !4040
  %cmp = icmp slt i32 %3, %4, !dbg !4041
  br i1 %cmp, label %for.body, label %for.end, !dbg !4042

for.body:                                         ; preds = %for.cond
  %call4 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 3), !dbg !4043
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %all_components, align 8, !dbg !4044
  %6 = load i32, i32* %i, align 4, !dbg !4045
  %idxprom = sext i32 %6 to i64, !dbg !4044
  %arrayidx = getelementptr inbounds %struct.VEC_int_heap*, %struct.VEC_int_heap** %5, i64 %idxprom, !dbg !4044
  store %struct.VEC_int_heap* %call4, %struct.VEC_int_heap** %arrayidx, align 8, !dbg !4046
  br label %for.inc, !dbg !4044

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !4047
  %inc = add nsw i32 %7, 1, !dbg !4047
  store i32 %inc, i32* %i, align 4, !dbg !4047
  br label %for.cond, !dbg !4048, !llvm.loop !4049

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !4051
  br label %for.cond5, !dbg !4053

for.cond5:                                        ; preds = %for.inc14, %for.end
  %8 = load i32, i32* %i, align 4, !dbg !4054
  %9 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4056
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %9, i32 0, i32 0, !dbg !4057
  %10 = load i32, i32* %n_vertices, align 8, !dbg !4057
  %cmp6 = icmp slt i32 %8, %10, !dbg !4058
  br i1 %cmp6, label %for.body8, label %for.end16, !dbg !4059

for.body8:                                        ; preds = %for.cond5
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %all_components, align 8, !dbg !4060
  %12 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4060
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %12, i32 0, i32 1, !dbg !4060
  %13 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !4060
  %14 = load i32, i32* %i, align 4, !dbg !4060
  %idxprom9 = sext i32 %14 to i64, !dbg !4060
  %arrayidx10 = getelementptr inbounds %struct.vertex, %struct.vertex* %13, i64 %idxprom9, !dbg !4060
  %component = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx10, i32 0, i32 2, !dbg !4060
  %15 = load i32, i32* %component, align 8, !dbg !4060
  %idxprom11 = sext i32 %15 to i64, !dbg !4060
  %arrayidx12 = getelementptr inbounds %struct.VEC_int_heap*, %struct.VEC_int_heap** %11, i64 %idxprom11, !dbg !4060
  %16 = load i32, i32* %i, align 4, !dbg !4060
  %call13 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %arrayidx12, i32 %16), !dbg !4060
  br label %for.inc14, !dbg !4060

for.inc14:                                        ; preds = %for.body8
  %17 = load i32, i32* %i, align 4, !dbg !4061
  %inc15 = add nsw i32 %17, 1, !dbg !4061
  store i32 %inc15, i32* %i, align 4, !dbg !4061
  br label %for.cond5, !dbg !4062, !llvm.loop !4063

for.end16:                                        ; preds = %for.cond5
  store i32 0, i32* %i, align 4, !dbg !4065
  br label %for.cond17, !dbg !4067

for.cond17:                                       ; preds = %for.inc33, %for.end16
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %starting_vertices.addr, align 8, !dbg !4068
  %tobool = icmp ne %struct.VEC_int_heap* %18, null, !dbg !4068
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4068

cond.true:                                        ; preds = %for.cond17
  %19 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %starting_vertices.addr, align 8, !dbg !4068
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %19, i32 0, i32 0, !dbg !4068
  br label %cond.end, !dbg !4068

cond.false:                                       ; preds = %for.cond17
  br label %cond.end, !dbg !4068

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4068
  %20 = load i32, i32* %i, align 4, !dbg !4068
  %call18 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %20, i32* %v), !dbg !4068
  %tobool19 = icmp ne i32 %call18, 0, !dbg !4070
  br i1 %tobool19, label %for.body20, label %for.end35, !dbg !4070

for.body20:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %c, metadata !4071, metadata !DIExpression()), !dbg !4073
  %21 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4074
  %vertices21 = getelementptr inbounds %struct.graph, %struct.graph* %21, i32 0, i32 1, !dbg !4075
  %22 = load %struct.vertex*, %struct.vertex** %vertices21, align 8, !dbg !4075
  %23 = load i32, i32* %v, align 4, !dbg !4076
  %idxprom22 = sext i32 %23 to i64, !dbg !4074
  %arrayidx23 = getelementptr inbounds %struct.vertex, %struct.vertex* %22, i64 %idxprom22, !dbg !4074
  %component24 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx23, i32 0, i32 2, !dbg !4077
  %24 = load i32, i32* %component24, align 8, !dbg !4077
  store i32 %24, i32* %c, align 4, !dbg !4073
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %saved_components, align 8, !dbg !4078
  %26 = load i32, i32* %c, align 4, !dbg !4080
  %call25 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %25, i32 %26), !dbg !4081
  %tobool26 = icmp ne i32 %call25, 0, !dbg !4081
  br i1 %tobool26, label %if.end, label %if.then, !dbg !4082

if.then:                                          ; preds = %for.body20
  call void @llvm.dbg.declare(metadata %struct.rdg_component** %x, metadata !4083, metadata !DIExpression()), !dbg !4085
  %call27 = call i8* @xcalloc(i64 1, i64 16), !dbg !4086
  %27 = bitcast i8* %call27 to %struct.rdg_component*, !dbg !4086
  store %struct.rdg_component* %27, %struct.rdg_component** %x, align 8, !dbg !4085
  %28 = load i32, i32* %c, align 4, !dbg !4087
  %29 = load %struct.rdg_component*, %struct.rdg_component** %x, align 8, !dbg !4088
  %num = getelementptr inbounds %struct.rdg_component, %struct.rdg_component* %29, i32 0, i32 0, !dbg !4089
  store i32 %28, i32* %num, align 8, !dbg !4090
  %30 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %all_components, align 8, !dbg !4091
  %31 = load i32, i32* %c, align 4, !dbg !4092
  %idxprom28 = sext i32 %31 to i64, !dbg !4091
  %arrayidx29 = getelementptr inbounds %struct.VEC_int_heap*, %struct.VEC_int_heap** %30, i64 %idxprom28, !dbg !4091
  %32 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %arrayidx29, align 8, !dbg !4091
  %33 = load %struct.rdg_component*, %struct.rdg_component** %x, align 8, !dbg !4093
  %vertices30 = getelementptr inbounds %struct.rdg_component, %struct.rdg_component* %33, i32 0, i32 1, !dbg !4094
  store %struct.VEC_int_heap* %32, %struct.VEC_int_heap** %vertices30, align 8, !dbg !4095
  %34 = load %struct.VEC_rdgc_heap**, %struct.VEC_rdgc_heap*** %components.addr, align 8, !dbg !4096
  %35 = load %struct.rdg_component*, %struct.rdg_component** %x, align 8, !dbg !4096
  %call31 = call %struct.rdg_component** @VEC_rdgc_heap_safe_push(%struct.VEC_rdgc_heap** %34, %struct.rdg_component* %35), !dbg !4096
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %saved_components, align 8, !dbg !4097
  %37 = load i32, i32* %c, align 4, !dbg !4098
  %call32 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %36, i32 %37), !dbg !4099
  br label %if.end, !dbg !4100

if.end:                                           ; preds = %if.then, %for.body20
  br label %for.inc33, !dbg !4101

for.inc33:                                        ; preds = %if.end
  %38 = load i32, i32* %i, align 4, !dbg !4102
  %inc34 = add nsw i32 %38, 1, !dbg !4102
  store i32 %inc34, i32* %i, align 4, !dbg !4102
  br label %for.cond17, !dbg !4103, !llvm.loop !4104

for.end35:                                        ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !4106
  br label %for.cond36, !dbg !4108

for.cond36:                                       ; preds = %for.inc46, %for.end35
  %39 = load i32, i32* %i, align 4, !dbg !4109
  %40 = load i32, i32* %n_components, align 4, !dbg !4111
  %cmp37 = icmp slt i32 %39, %40, !dbg !4112
  br i1 %cmp37, label %for.body39, label %for.end48, !dbg !4113

for.body39:                                       ; preds = %for.cond36
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %saved_components, align 8, !dbg !4114
  %42 = load i32, i32* %i, align 4, !dbg !4116
  %call40 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %41, i32 %42), !dbg !4117
  %tobool41 = icmp ne i32 %call40, 0, !dbg !4117
  br i1 %tobool41, label %if.end45, label %if.then42, !dbg !4118

if.then42:                                        ; preds = %for.body39
  %43 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %all_components, align 8, !dbg !4119
  %44 = load i32, i32* %i, align 4, !dbg !4119
  %idxprom43 = sext i32 %44 to i64, !dbg !4119
  %arrayidx44 = getelementptr inbounds %struct.VEC_int_heap*, %struct.VEC_int_heap** %43, i64 %idxprom43, !dbg !4119
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %arrayidx44), !dbg !4119
  br label %if.end45, !dbg !4119

if.end45:                                         ; preds = %if.then42, %for.body39
  br label %for.inc46, !dbg !4120

for.inc46:                                        ; preds = %if.end45
  %45 = load i32, i32* %i, align 4, !dbg !4121
  %inc47 = add nsw i32 %45, 1, !dbg !4121
  store i32 %inc47, i32* %i, align 4, !dbg !4121
  br label %for.cond36, !dbg !4122, !llvm.loop !4123

for.end48:                                        ; preds = %for.cond36
  %46 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %all_components, align 8, !dbg !4125
  %47 = bitcast %struct.VEC_int_heap** %46 to i8*, !dbg !4125
  call void @free(i8* %47), !dbg !4126
  %48 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %saved_components, align 8, !dbg !4127
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %48), !dbg !4127
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %saved_components, align 8, !dbg !4127
  ret void, !dbg !4128
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdg_build_partitions(%struct.graph* %rdg, %struct.VEC_rdgc_heap* %components, %struct.VEC_int_heap** %other_stores, %struct.VEC_bitmap_heap** %partitions, %struct.bitmap_head_def* %processed) #0 !dbg !4129 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %components.addr = alloca %struct.VEC_rdgc_heap*, align 8
  %other_stores.addr = alloca %struct.VEC_int_heap**, align 8
  %partitions.addr = alloca %struct.VEC_bitmap_heap**, align 8
  %processed.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rdg_component*, align 8
  %partition = alloca %struct.bitmap_head_def*, align 8
  %np = alloca %struct.bitmap_head_def*, align 8
  %part_has_writes = alloca i8, align 1
  %v = alloca i32, align 4
  %comps = alloca %struct.VEC_rdgc_heap*, align 8
  %foo = alloca %struct.VEC_int_heap*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4133, metadata !DIExpression()), !dbg !4134
  store %struct.VEC_rdgc_heap* %components, %struct.VEC_rdgc_heap** %components.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_heap** %components.addr, metadata !4135, metadata !DIExpression()), !dbg !4136
  store %struct.VEC_int_heap** %other_stores, %struct.VEC_int_heap*** %other_stores.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %other_stores.addr, metadata !4137, metadata !DIExpression()), !dbg !4138
  store %struct.VEC_bitmap_heap** %partitions, %struct.VEC_bitmap_heap*** %partitions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap*** %partitions.addr, metadata !4139, metadata !DIExpression()), !dbg !4140
  store %struct.bitmap_head_def* %processed, %struct.bitmap_head_def** %processed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed.addr, metadata !4141, metadata !DIExpression()), !dbg !4142
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4143, metadata !DIExpression()), !dbg !4144
  call void @llvm.dbg.declare(metadata %struct.rdg_component** %x, metadata !4145, metadata !DIExpression()), !dbg !4146
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition, metadata !4147, metadata !DIExpression()), !dbg !4148
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4149
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %partition, align 8, !dbg !4148
  store i32 0, i32* %i, align 4, !dbg !4150
  br label %for.cond, !dbg !4152

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %components.addr, align 8, !dbg !4153
  %tobool = icmp ne %struct.VEC_rdgc_heap* %0, null, !dbg !4153
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4153

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %components.addr, align 8, !dbg !4153
  %base = getelementptr inbounds %struct.VEC_rdgc_heap, %struct.VEC_rdgc_heap* %1, i32 0, i32 0, !dbg !4153
  br label %cond.end, !dbg !4153

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4153

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rdgc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4153
  %2 = load i32, i32* %i, align 4, !dbg !4153
  %call1 = call i32 @VEC_rdgc_base_iterate(%struct.VEC_rdgc_base* %cond, i32 %2, %struct.rdg_component** %x), !dbg !4153
  %tobool2 = icmp ne i32 %call1, 0, !dbg !4155
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4155

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %np, metadata !4156, metadata !DIExpression()), !dbg !4158
  call void @llvm.dbg.declare(metadata i8* %part_has_writes, metadata !4159, metadata !DIExpression()), !dbg !4160
  store i8 0, i8* %part_has_writes, align 1, !dbg !4160
  call void @llvm.dbg.declare(metadata i32* %v, metadata !4161, metadata !DIExpression()), !dbg !4162
  %3 = load %struct.rdg_component*, %struct.rdg_component** %x, align 8, !dbg !4163
  %vertices = getelementptr inbounds %struct.rdg_component, %struct.rdg_component* %3, i32 0, i32 1, !dbg !4163
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vertices, align 8, !dbg !4163
  %tobool3 = icmp ne %struct.VEC_int_heap* %4, null, !dbg !4163
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !4163

cond.true4:                                       ; preds = %for.body
  %5 = load %struct.rdg_component*, %struct.rdg_component** %x, align 8, !dbg !4163
  %vertices5 = getelementptr inbounds %struct.rdg_component, %struct.rdg_component* %5, i32 0, i32 1, !dbg !4163
  %6 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vertices5, align 8, !dbg !4163
  %base6 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %6, i32 0, i32 0, !dbg !4163
  br label %cond.end8, !dbg !4163

cond.false7:                                      ; preds = %for.body
  br label %cond.end8, !dbg !4163

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_int_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !4163
  %call10 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond9, i32 0), !dbg !4163
  store i32 %call10, i32* %v, align 4, !dbg !4162
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4164
  %8 = load i32, i32* %v, align 4, !dbg !4166
  %call11 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %8), !dbg !4167
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4167
  br i1 %tobool12, label %if.then, label %if.end, !dbg !4168

if.then:                                          ; preds = %cond.end8
  br label %for.inc, !dbg !4169

if.end:                                           ; preds = %cond.end8
  %9 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4170
  %10 = load %struct.rdg_component*, %struct.rdg_component** %x, align 8, !dbg !4171
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4172
  %call13 = call %struct.bitmap_head_def* @build_rdg_partition_for_component(%struct.graph* %9, %struct.rdg_component* %10, i8* %part_has_writes, %struct.VEC_int_heap** %11), !dbg !4173
  store %struct.bitmap_head_def* %call13, %struct.bitmap_head_def** %np, align 8, !dbg !4174
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4175
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %np, align 8, !dbg !4176
  %call14 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %12, %struct.bitmap_head_def* %13), !dbg !4177
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4178
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %np, align 8, !dbg !4179
  %call15 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %14, %struct.bitmap_head_def* %15), !dbg !4180
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %np, align 8, !dbg !4181
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %16), !dbg !4181
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %np, align 8, !dbg !4181
  %17 = load i8, i8* %part_has_writes, align 1, !dbg !4182
  %tobool16 = icmp ne i8 %17, 0, !dbg !4182
  br i1 %tobool16, label %if.then17, label %if.end25, !dbg !4184

if.then17:                                        ; preds = %if.end
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4185
  %tobool18 = icmp ne %struct._IO_FILE* %18, null, !dbg !4185
  br i1 %tobool18, label %land.lhs.true, label %if.end22, !dbg !4188

land.lhs.true:                                    ; preds = %if.then17
  %19 = load i32, i32* @dump_flags, align 4, !dbg !4189
  %and = and i32 %19, 8, !dbg !4190
  %tobool19 = icmp ne i32 %and, 0, !dbg !4190
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !4191

if.then20:                                        ; preds = %land.lhs.true
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4192
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0)), !dbg !4194
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4195
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4195
  call void @bitmap_print(%struct._IO_FILE* %21, %struct.bitmap_head_def* %22, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !4195
  br label %if.end22, !dbg !4196

if.end22:                                         ; preds = %if.then20, %land.lhs.true, %if.then17
  %23 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %partitions.addr, align 8, !dbg !4197
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4197
  %call23 = call %struct.bitmap_head_def** @VEC_bitmap_heap_safe_push(%struct.VEC_bitmap_heap** %23, %struct.bitmap_head_def* %24), !dbg !4197
  %call24 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4198
  store %struct.bitmap_head_def* %call24, %struct.bitmap_head_def** %partition, align 8, !dbg !4199
  br label %if.end25, !dbg !4200

if.end25:                                         ; preds = %if.end22, %if.end
  br label %for.inc, !dbg !4201

for.inc:                                          ; preds = %if.end25, %if.then
  %25 = load i32, i32* %i, align 4, !dbg !4202
  %inc = add nsw i32 %25, 1, !dbg !4202
  store i32 %inc, i32* %i, align 4, !dbg !4202
  br label %for.cond, !dbg !4203, !llvm.loop !4204

for.end:                                          ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !4206
  br label %for.cond26, !dbg !4208

for.cond26:                                       ; preds = %for.inc36, %for.end
  %26 = load i32, i32* %i, align 4, !dbg !4209
  %27 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4211
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %27, i32 0, i32 0, !dbg !4212
  %28 = load i32, i32* %n_vertices, align 8, !dbg !4212
  %cmp = icmp slt i32 %26, %28, !dbg !4213
  br i1 %cmp, label %for.body27, label %for.end38, !dbg !4214

for.body27:                                       ; preds = %for.cond26
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4215
  %30 = load i32, i32* %i, align 4, !dbg !4217
  %call28 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %29, i32 %30), !dbg !4218
  %tobool29 = icmp ne i32 %call28, 0, !dbg !4218
  br i1 %tobool29, label %if.end35, label %land.lhs.true30, !dbg !4219

land.lhs.true30:                                  ; preds = %for.body27
  %31 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4220
  %32 = load i32, i32* %i, align 4, !dbg !4221
  %call31 = call zeroext i8 @rdg_defs_used_in_other_loops_p(%struct.graph* %31, i32 %32), !dbg !4222
  %conv = zext i8 %call31 to i32, !dbg !4222
  %tobool32 = icmp ne i32 %conv, 0, !dbg !4222
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !4223

if.then33:                                        ; preds = %land.lhs.true30
  %33 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4224
  %34 = load i32, i32* %i, align 4, !dbg !4224
  %call34 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %33, i32 %34), !dbg !4224
  br label %if.end35, !dbg !4224

if.end35:                                         ; preds = %if.then33, %land.lhs.true30, %for.body27
  br label %for.inc36, !dbg !4225

for.inc36:                                        ; preds = %if.end35
  %35 = load i32, i32* %i, align 4, !dbg !4226
  %inc37 = add nsw i32 %35, 1, !dbg !4226
  store i32 %inc37, i32* %i, align 4, !dbg !4226
  br label %for.cond26, !dbg !4227, !llvm.loop !4228

for.end38:                                        ; preds = %for.cond26
  %36 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4230
  %37 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %36, align 8, !dbg !4230
  %tobool39 = icmp ne %struct.VEC_int_heap* %37, null, !dbg !4230
  br i1 %tobool39, label %cond.true40, label %cond.false42, !dbg !4230

cond.true40:                                      ; preds = %for.end38
  %38 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4230
  %39 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %38, align 8, !dbg !4230
  %base41 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %39, i32 0, i32 0, !dbg !4230
  br label %cond.end43, !dbg !4230

cond.false42:                                     ; preds = %for.end38
  br label %cond.end43, !dbg !4230

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.VEC_int_base* [ %base41, %cond.true40 ], [ null, %cond.false42 ], !dbg !4230
  %call45 = call i32 @VEC_int_base_length(%struct.VEC_int_base* %cond44), !dbg !4230
  %cmp46 = icmp ugt i32 %call45, 0, !dbg !4232
  br i1 %cmp46, label %if.then48, label %if.end51, !dbg !4233

if.then48:                                        ; preds = %cond.end43
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_heap** %comps, metadata !4234, metadata !DIExpression()), !dbg !4236
  %call49 = call %struct.VEC_rdgc_heap* @VEC_rdgc_heap_alloc(i32 3), !dbg !4237
  store %struct.VEC_rdgc_heap* %call49, %struct.VEC_rdgc_heap** %comps, align 8, !dbg !4236
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %foo, metadata !4238, metadata !DIExpression()), !dbg !4239
  %call50 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 3), !dbg !4240
  store %struct.VEC_int_heap* %call50, %struct.VEC_int_heap** %foo, align 8, !dbg !4239
  %40 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4241
  %41 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4242
  %42 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %41, align 8, !dbg !4243
  call void @rdg_build_components(%struct.graph* %40, %struct.VEC_int_heap* %42, %struct.VEC_rdgc_heap** %comps), !dbg !4244
  %43 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4245
  %44 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %comps, align 8, !dbg !4246
  %45 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %partitions.addr, align 8, !dbg !4247
  %46 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4248
  call void @rdg_build_partitions(%struct.graph* %43, %struct.VEC_rdgc_heap* %44, %struct.VEC_int_heap** %foo, %struct.VEC_bitmap_heap** %45, %struct.bitmap_head_def* %46), !dbg !4249
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %foo), !dbg !4250
  %47 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %comps, align 8, !dbg !4251
  call void @free_rdg_components(%struct.VEC_rdgc_heap* %47), !dbg !4252
  br label %if.end51, !dbg !4253

if.end51:                                         ; preds = %if.then48, %cond.end43
  %48 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4254
  %call52 = call i64 @bitmap_count_bits(%struct.bitmap_head_def* %48), !dbg !4256
  %cmp53 = icmp ugt i64 %call52, 0, !dbg !4257
  br i1 %cmp53, label %if.then55, label %if.else, !dbg !4258

if.then55:                                        ; preds = %if.end51
  %49 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %partitions.addr, align 8, !dbg !4259
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4259
  %call56 = call %struct.bitmap_head_def** @VEC_bitmap_heap_safe_push(%struct.VEC_bitmap_heap** %49, %struct.bitmap_head_def* %50), !dbg !4259
  br label %if.end57, !dbg !4259

if.else:                                          ; preds = %if.end51
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4260
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %51), !dbg !4260
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %partition, align 8, !dbg !4260
  br label %if.end57

if.end57:                                         ; preds = %if.else, %if.then55
  ret void, !dbg !4261
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitmap_base_length(%struct.VEC_bitmap_base* %vec_) #0 !dbg !4262 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_base*, align 8
  store %struct.VEC_bitmap_base* %vec_, %struct.VEC_bitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_base** %vec_.addr, metadata !4265, metadata !DIExpression()), !dbg !4266
  %0 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4266
  %tobool = icmp ne %struct.VEC_bitmap_base* %0, null, !dbg !4266
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4266

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !4266
  %num = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %1, i32 0, i32 0, !dbg !4266
  %2 = load i32, i32* %num, align 8, !dbg !4266
  br label %cond.end, !dbg !4266

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4266

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4266
  ret i32 %cond, !dbg !4266
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @partition_contains_all_rw(%struct.graph* %rdg, %struct.VEC_bitmap_heap* %partitions) #0 !dbg !4267 {
entry:
  %retval = alloca i8, align 1
  %rdg.addr = alloca %struct.graph*, align 8
  %partitions.addr = alloca %struct.VEC_bitmap_heap*, align 8
  %i = alloca i32, align 4
  %partition = alloca %struct.bitmap_head_def*, align 8
  %nrw = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4270, metadata !DIExpression()), !dbg !4271
  store %struct.VEC_bitmap_heap* %partitions, %struct.VEC_bitmap_heap** %partitions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap** %partitions.addr, metadata !4272, metadata !DIExpression()), !dbg !4273
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4274, metadata !DIExpression()), !dbg !4275
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition, metadata !4276, metadata !DIExpression()), !dbg !4277
  call void @llvm.dbg.declare(metadata i32* %nrw, metadata !4278, metadata !DIExpression()), !dbg !4279
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4280
  %call = call i32 @number_of_rw_in_rdg(%struct.graph* %0), !dbg !4281
  store i32 %call, i32* %nrw, align 4, !dbg !4279
  store i32 0, i32* %i, align 4, !dbg !4282
  br label %for.cond, !dbg !4284

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions.addr, align 8, !dbg !4285
  %tobool = icmp ne %struct.VEC_bitmap_heap* %1, null, !dbg !4285
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4285

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %partitions.addr, align 8, !dbg !4285
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %2, i32 0, i32 0, !dbg !4285
  br label %cond.end, !dbg !4285

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4285

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4285
  %3 = load i32, i32* %i, align 4, !dbg !4285
  %call1 = call i32 @VEC_bitmap_base_iterate(%struct.VEC_bitmap_base* %cond, i32 %3, %struct.bitmap_head_def** %partition), !dbg !4285
  %tobool2 = icmp ne i32 %call1, 0, !dbg !4287
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4287

for.body:                                         ; preds = %cond.end
  %4 = load i32, i32* %nrw, align 4, !dbg !4288
  %5 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4290
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4291
  %call3 = call i32 @number_of_rw_in_partition(%struct.graph* %5, %struct.bitmap_head_def* %6), !dbg !4292
  %cmp = icmp eq i32 %4, %call3, !dbg !4293
  br i1 %cmp, label %if.then, label %if.end, !dbg !4294

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !4295
  br label %return, !dbg !4295

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4296

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !4297
  %inc = add nsw i32 %7, 1, !dbg !4297
  store i32 %inc, i32* %i, align 4, !dbg !4297
  br label %for.cond, !dbg !4298, !llvm.loop !4299

for.end:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !4301
  br label %return, !dbg !4301

return:                                           ; preds = %for.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !4302
  ret i8 %8, !dbg !4302
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @generate_code_for_partition(%struct.loop* %loop, %struct.bitmap_head_def* %partition, i8 zeroext %copy_p) #0 !dbg !4303 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %copy_p.addr = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4306, metadata !DIExpression()), !dbg !4307
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !4308, metadata !DIExpression()), !dbg !4309
  store i8 %copy_p, i8* %copy_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %copy_p.addr, metadata !4310, metadata !DIExpression()), !dbg !4311
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4312
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4314
  %2 = load i8, i8* %copy_p.addr, align 1, !dbg !4315
  %call = call zeroext i8 @generate_builtin(%struct.loop* %0, %struct.bitmap_head_def* %1, i8 zeroext %2), !dbg !4316
  %tobool = icmp ne i8 %call, 0, !dbg !4316
  br i1 %tobool, label %if.then, label %if.end, !dbg !4317

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4318
  br label %return, !dbg !4318

if.end:                                           ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4319
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4320
  %5 = load i8, i8* %copy_p.addr, align 1, !dbg !4321
  %call1 = call zeroext i8 @generate_loops_for_partition(%struct.loop* %3, %struct.bitmap_head_def* %4, i8 zeroext %5), !dbg !4322
  store i8 %call1, i8* %retval, align 1, !dbg !4323
  br label %return, !dbg !4323

return:                                           ; preds = %if.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !4324
  ret i8 %6, !dbg !4324
}

declare dso_local void @rewrite_into_loop_closed_ssa(%struct.bitmap_head_def*, i32) #2

declare dso_local void @update_ssa(i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_bitmap_heap_free(%struct.VEC_bitmap_heap** %vec_) #0 !dbg !4325 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_heap**, align 8
  store %struct.VEC_bitmap_heap** %vec_, %struct.VEC_bitmap_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap*** %vec_.addr, metadata !4328, metadata !DIExpression()), !dbg !4329
  %0 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !4330
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %0, align 8, !dbg !4330
  %tobool = icmp ne %struct.VEC_bitmap_heap* %1, null, !dbg !4330
  br i1 %tobool, label %if.then, label %if.end, !dbg !4329

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !4330
  %3 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %2, align 8, !dbg !4330
  %4 = bitcast %struct.VEC_bitmap_heap* %3 to i8*, !dbg !4330
  call void @free(i8* %4), !dbg !4330
  br label %if.end, !dbg !4330

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !4329
  store %struct.VEC_bitmap_heap* null, %struct.VEC_bitmap_heap** %5, align 8, !dbg !4329
  ret void, !dbg !4329
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_rdg_components(%struct.VEC_rdgc_heap* %components) #0 !dbg !4332 {
entry:
  %components.addr = alloca %struct.VEC_rdgc_heap*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rdg_component*, align 8
  store %struct.VEC_rdgc_heap* %components, %struct.VEC_rdgc_heap** %components.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_heap** %components.addr, metadata !4335, metadata !DIExpression()), !dbg !4336
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4337, metadata !DIExpression()), !dbg !4338
  call void @llvm.dbg.declare(metadata %struct.rdg_component** %x, metadata !4339, metadata !DIExpression()), !dbg !4340
  store i32 0, i32* %i, align 4, !dbg !4341
  br label %for.cond, !dbg !4343

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %components.addr, align 8, !dbg !4344
  %tobool = icmp ne %struct.VEC_rdgc_heap* %0, null, !dbg !4344
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4344

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %components.addr, align 8, !dbg !4344
  %base = getelementptr inbounds %struct.VEC_rdgc_heap, %struct.VEC_rdgc_heap* %1, i32 0, i32 0, !dbg !4344
  br label %cond.end, !dbg !4344

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4344

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rdgc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4344
  %2 = load i32, i32* %i, align 4, !dbg !4344
  %call = call i32 @VEC_rdgc_base_iterate(%struct.VEC_rdgc_base* %cond, i32 %2, %struct.rdg_component** %x), !dbg !4344
  %tobool1 = icmp ne i32 %call, 0, !dbg !4346
  br i1 %tobool1, label %for.body, label %for.end, !dbg !4346

for.body:                                         ; preds = %cond.end
  %3 = load %struct.rdg_component*, %struct.rdg_component** %x, align 8, !dbg !4347
  %vertices = getelementptr inbounds %struct.rdg_component, %struct.rdg_component* %3, i32 0, i32 1, !dbg !4347
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %vertices), !dbg !4347
  %4 = load %struct.rdg_component*, %struct.rdg_component** %x, align 8, !dbg !4349
  %5 = bitcast %struct.rdg_component* %4 to i8*, !dbg !4349
  call void @free(i8* %5), !dbg !4350
  br label %for.inc, !dbg !4351

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !4352
  %inc = add nsw i32 %6, 1, !dbg !4352
  store i32 %inc, i32* %i, align 4, !dbg !4352
  br label %for.cond, !dbg !4353, !llvm.loop !4354

for.end:                                          ; preds = %cond.end
  ret void, !dbg !4356
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local i32 @graphds_dfs(%struct.graph*, i32*, i32, %struct.VEC_int_heap**, i8 zeroext, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @predecessor_has_mem_write(%struct.graph* %rdg, %struct.vertex* %v) #0 !dbg !4357 {
entry:
  %retval = alloca i8, align 1
  %rdg.addr = alloca %struct.graph*, align 8
  %v.addr = alloca %struct.vertex*, align 8
  %e = alloca %struct.graph_edge*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4360, metadata !DIExpression()), !dbg !4361
  store %struct.vertex* %v, %struct.vertex** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vertex** %v.addr, metadata !4362, metadata !DIExpression()), !dbg !4363
  call void @llvm.dbg.declare(metadata %struct.graph_edge** %e, metadata !4364, metadata !DIExpression()), !dbg !4365
  %0 = load %struct.vertex*, %struct.vertex** %v.addr, align 8, !dbg !4366
  %pred = getelementptr inbounds %struct.vertex, %struct.vertex* %0, i32 0, i32 0, !dbg !4368
  %1 = load %struct.graph_edge*, %struct.graph_edge** %pred, align 8, !dbg !4368
  %tobool = icmp ne %struct.graph_edge* %1, null, !dbg !4366
  br i1 %tobool, label %if.then, label %if.end7, !dbg !4369

if.then:                                          ; preds = %entry
  %2 = load %struct.vertex*, %struct.vertex** %v.addr, align 8, !dbg !4370
  %pred1 = getelementptr inbounds %struct.vertex, %struct.vertex* %2, i32 0, i32 0, !dbg !4372
  %3 = load %struct.graph_edge*, %struct.graph_edge** %pred1, align 8, !dbg !4372
  store %struct.graph_edge* %3, %struct.graph_edge** %e, align 8, !dbg !4373
  br label %for.cond, !dbg !4374

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4375
  %tobool2 = icmp ne %struct.graph_edge* %4, null, !dbg !4377
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4377

for.body:                                         ; preds = %for.cond
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @upstream_mem_writes, align 8, !dbg !4378
  %6 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4380
  %src = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %6, i32 0, i32 0, !dbg !4381
  %7 = load i32, i32* %src, align 8, !dbg !4381
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %5, i32 %7), !dbg !4382
  %tobool3 = icmp ne i32 %call, 0, !dbg !4382
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !4383

land.lhs.true:                                    ; preds = %for.body
  %8 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4384
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %8, i32 0, i32 1, !dbg !4384
  %9 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !4384
  %10 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4384
  %src4 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %10, i32 0, i32 0, !dbg !4384
  %11 = load i32, i32* %src4, align 8, !dbg !4384
  %idxprom = sext i32 %11 to i64, !dbg !4384
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %9, i64 %idxprom, !dbg !4384
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !4384
  %12 = load i8*, i8** %data, align 8, !dbg !4384
  %13 = bitcast i8* %12 to %struct.rdg_vertex*, !dbg !4384
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %13, i32 0, i32 1, !dbg !4384
  %14 = load i8, i8* %has_mem_write, align 8, !dbg !4384
  %tobool5 = icmp ne i8 %14, 0, !dbg !4384
  br i1 %tobool5, label %if.end, label %if.then6, !dbg !4385

if.then6:                                         ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !4386
  br label %return, !dbg !4386

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !4384

for.inc:                                          ; preds = %if.end
  %15 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4387
  %pred_next = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %15, i32 0, i32 2, !dbg !4388
  %16 = load %struct.graph_edge*, %struct.graph_edge** %pred_next, align 8, !dbg !4388
  store %struct.graph_edge* %16, %struct.graph_edge** %e, align 8, !dbg !4389
  br label %for.cond, !dbg !4390, !llvm.loop !4391

for.end:                                          ; preds = %for.cond
  br label %if.end7, !dbg !4392

if.end7:                                          ; preds = %for.end, %entry
  store i8 0, i8* %retval, align 1, !dbg !4393
  br label %return, !dbg !4393

return:                                           ; preds = %if.end7, %if.then6
  %17 = load i8, i8* %retval, align 1, !dbg !4394
  ret i8 %17, !dbg !4394
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.graph_edge* @has_anti_dependence(%struct.vertex* %v) #0 !dbg !4395 {
entry:
  %retval = alloca %struct.graph_edge*, align 8
  %v.addr = alloca %struct.vertex*, align 8
  %e = alloca %struct.graph_edge*, align 8
  store %struct.vertex* %v, %struct.vertex** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vertex** %v.addr, metadata !4398, metadata !DIExpression()), !dbg !4399
  call void @llvm.dbg.declare(metadata %struct.graph_edge** %e, metadata !4400, metadata !DIExpression()), !dbg !4401
  %0 = load %struct.vertex*, %struct.vertex** %v.addr, align 8, !dbg !4402
  %succ = getelementptr inbounds %struct.vertex, %struct.vertex* %0, i32 0, i32 1, !dbg !4404
  %1 = load %struct.graph_edge*, %struct.graph_edge** %succ, align 8, !dbg !4404
  %tobool = icmp ne %struct.graph_edge* %1, null, !dbg !4402
  br i1 %tobool, label %if.then, label %if.end4, !dbg !4405

if.then:                                          ; preds = %entry
  %2 = load %struct.vertex*, %struct.vertex** %v.addr, align 8, !dbg !4406
  %succ1 = getelementptr inbounds %struct.vertex, %struct.vertex* %2, i32 0, i32 1, !dbg !4408
  %3 = load %struct.graph_edge*, %struct.graph_edge** %succ1, align 8, !dbg !4408
  store %struct.graph_edge* %3, %struct.graph_edge** %e, align 8, !dbg !4409
  br label %for.cond, !dbg !4410

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4411
  %tobool2 = icmp ne %struct.graph_edge* %4, null, !dbg !4413
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4413

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4414
  %data = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %5, i32 0, i32 4, !dbg !4414
  %6 = load i8*, i8** %data, align 8, !dbg !4414
  %7 = bitcast i8* %6 to %struct.rdg_edge*, !dbg !4414
  %type = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %7, i32 0, i32 0, !dbg !4414
  %8 = load i32, i32* %type, align 8, !dbg !4414
  %cmp = icmp eq i32 %8, 97, !dbg !4416
  br i1 %cmp, label %if.then3, label %if.end, !dbg !4417

if.then3:                                         ; preds = %for.body
  %9 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4418
  store %struct.graph_edge* %9, %struct.graph_edge** %retval, align 8, !dbg !4419
  br label %return, !dbg !4419

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4420

for.inc:                                          ; preds = %if.end
  %10 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4421
  %succ_next = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %10, i32 0, i32 3, !dbg !4422
  %11 = load %struct.graph_edge*, %struct.graph_edge** %succ_next, align 8, !dbg !4422
  store %struct.graph_edge* %11, %struct.graph_edge** %e, align 8, !dbg !4423
  br label %for.cond, !dbg !4424, !llvm.loop !4425

for.end:                                          ; preds = %for.cond
  br label %if.end4, !dbg !4426

if.end4:                                          ; preds = %for.end, %entry
  store %struct.graph_edge* null, %struct.graph_edge** %retval, align 8, !dbg !4427
  br label %return, !dbg !4427

return:                                           ; preds = %if.end4, %if.then3
  %12 = load %struct.graph_edge*, %struct.graph_edge** %retval, align 8, !dbg !4428
  ret %struct.graph_edge* %12, !dbg !4428
}

declare dso_local i32 @graphds_scc(%struct.graph*, %struct.bitmap_head_def*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rdg_component** @VEC_rdgc_heap_safe_push(%struct.VEC_rdgc_heap** %vec_, %struct.rdg_component* %obj_) #0 !dbg !4429 {
entry:
  %vec_.addr = alloca %struct.VEC_rdgc_heap**, align 8
  %obj_.addr = alloca %struct.rdg_component*, align 8
  store %struct.VEC_rdgc_heap** %vec_, %struct.VEC_rdgc_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_heap*** %vec_.addr, metadata !4433, metadata !DIExpression()), !dbg !4434
  store %struct.rdg_component* %obj_, %struct.rdg_component** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rdg_component** %obj_.addr, metadata !4435, metadata !DIExpression()), !dbg !4434
  %0 = load %struct.VEC_rdgc_heap**, %struct.VEC_rdgc_heap*** %vec_.addr, align 8, !dbg !4434
  %call = call i32 @VEC_rdgc_heap_reserve(%struct.VEC_rdgc_heap** %0, i32 1), !dbg !4434
  %1 = load %struct.VEC_rdgc_heap**, %struct.VEC_rdgc_heap*** %vec_.addr, align 8, !dbg !4434
  %2 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %1, align 8, !dbg !4434
  %tobool = icmp ne %struct.VEC_rdgc_heap* %2, null, !dbg !4434
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4434

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_rdgc_heap**, %struct.VEC_rdgc_heap*** %vec_.addr, align 8, !dbg !4434
  %4 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %3, align 8, !dbg !4434
  %base = getelementptr inbounds %struct.VEC_rdgc_heap, %struct.VEC_rdgc_heap* %4, i32 0, i32 0, !dbg !4434
  br label %cond.end, !dbg !4434

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4434

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rdgc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4434
  %5 = load %struct.rdg_component*, %struct.rdg_component** %obj_.addr, align 8, !dbg !4434
  %call1 = call %struct.rdg_component** @VEC_rdgc_base_quick_push(%struct.VEC_rdgc_base* %cond, %struct.rdg_component* %5), !dbg !4434
  ret %struct.rdg_component** %call1, !dbg !4434
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rdgc_heap_reserve(%struct.VEC_rdgc_heap** %vec_, i32 %alloc_) #0 !dbg !4436 {
entry:
  %vec_.addr = alloca %struct.VEC_rdgc_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_rdgc_heap** %vec_, %struct.VEC_rdgc_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_heap*** %vec_.addr, metadata !4439, metadata !DIExpression()), !dbg !4440
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4441, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4442, metadata !DIExpression()), !dbg !4440
  %0 = load %struct.VEC_rdgc_heap**, %struct.VEC_rdgc_heap*** %vec_.addr, align 8, !dbg !4440
  %1 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %0, align 8, !dbg !4440
  %tobool = icmp ne %struct.VEC_rdgc_heap* %1, null, !dbg !4440
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4440

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rdgc_heap**, %struct.VEC_rdgc_heap*** %vec_.addr, align 8, !dbg !4440
  %3 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %2, align 8, !dbg !4440
  %base = getelementptr inbounds %struct.VEC_rdgc_heap, %struct.VEC_rdgc_heap* %3, i32 0, i32 0, !dbg !4440
  br label %cond.end, !dbg !4440

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4440

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rdgc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4440
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4440
  %call = call i32 @VEC_rdgc_base_space(%struct.VEC_rdgc_base* %cond, i32 %4), !dbg !4440
  %tobool1 = icmp ne i32 %call, 0, !dbg !4440
  %lnot = xor i1 %tobool1, true, !dbg !4440
  %lnot.ext = zext i1 %lnot to i32, !dbg !4440
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4440
  %5 = load i32, i32* %extend, align 4, !dbg !4443
  %tobool2 = icmp ne i32 %5, 0, !dbg !4443
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4440

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_rdgc_heap**, %struct.VEC_rdgc_heap*** %vec_.addr, align 8, !dbg !4443
  %7 = load %struct.VEC_rdgc_heap*, %struct.VEC_rdgc_heap** %6, align 8, !dbg !4443
  %8 = bitcast %struct.VEC_rdgc_heap* %7 to i8*, !dbg !4443
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4443
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !4443
  %10 = bitcast i8* %call3 to %struct.VEC_rdgc_heap*, !dbg !4443
  %11 = load %struct.VEC_rdgc_heap**, %struct.VEC_rdgc_heap*** %vec_.addr, align 8, !dbg !4443
  store %struct.VEC_rdgc_heap* %10, %struct.VEC_rdgc_heap** %11, align 8, !dbg !4443
  br label %if.end, !dbg !4443

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4440
  ret i32 %12, !dbg !4440
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rdg_component** @VEC_rdgc_base_quick_push(%struct.VEC_rdgc_base* %vec_, %struct.rdg_component* %obj_) #0 !dbg !4445 {
entry:
  %vec_.addr = alloca %struct.VEC_rdgc_base*, align 8
  %obj_.addr = alloca %struct.rdg_component*, align 8
  %slot_ = alloca %struct.rdg_component**, align 8
  store %struct.VEC_rdgc_base* %vec_, %struct.VEC_rdgc_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_base** %vec_.addr, metadata !4449, metadata !DIExpression()), !dbg !4450
  store %struct.rdg_component* %obj_, %struct.rdg_component** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rdg_component** %obj_.addr, metadata !4451, metadata !DIExpression()), !dbg !4450
  call void @llvm.dbg.declare(metadata %struct.rdg_component*** %slot_, metadata !4452, metadata !DIExpression()), !dbg !4450
  %0 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4450
  %num = getelementptr inbounds %struct.VEC_rdgc_base, %struct.VEC_rdgc_base* %0, i32 0, i32 0, !dbg !4450
  %1 = load i32, i32* %num, align 8, !dbg !4450
  %2 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4450
  %alloc = getelementptr inbounds %struct.VEC_rdgc_base, %struct.VEC_rdgc_base* %2, i32 0, i32 1, !dbg !4450
  %3 = load i32, i32* %alloc, align 4, !dbg !4450
  %cmp = icmp ult i32 %1, %3, !dbg !4450
  %conv = zext i1 %cmp to i32, !dbg !4450
  %4 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4450
  %vec = getelementptr inbounds %struct.VEC_rdgc_base, %struct.VEC_rdgc_base* %4, i32 0, i32 2, !dbg !4450
  %5 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4450
  %num1 = getelementptr inbounds %struct.VEC_rdgc_base, %struct.VEC_rdgc_base* %5, i32 0, i32 0, !dbg !4450
  %6 = load i32, i32* %num1, align 8, !dbg !4450
  %inc = add i32 %6, 1, !dbg !4450
  store i32 %inc, i32* %num1, align 8, !dbg !4450
  %idxprom = zext i32 %6 to i64, !dbg !4450
  %arrayidx = getelementptr inbounds [1 x %struct.rdg_component*], [1 x %struct.rdg_component*]* %vec, i64 0, i64 %idxprom, !dbg !4450
  store %struct.rdg_component** %arrayidx, %struct.rdg_component*** %slot_, align 8, !dbg !4450
  %7 = load %struct.rdg_component*, %struct.rdg_component** %obj_.addr, align 8, !dbg !4450
  %8 = load %struct.rdg_component**, %struct.rdg_component*** %slot_, align 8, !dbg !4450
  store %struct.rdg_component* %7, %struct.rdg_component** %8, align 8, !dbg !4450
  %9 = load %struct.rdg_component**, %struct.rdg_component*** %slot_, align 8, !dbg !4450
  ret %struct.rdg_component** %9, !dbg !4450
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rdgc_base_space(%struct.VEC_rdgc_base* %vec_, i32 %alloc_) #0 !dbg !4453 {
entry:
  %vec_.addr = alloca %struct.VEC_rdgc_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_rdgc_base* %vec_, %struct.VEC_rdgc_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_base** %vec_.addr, metadata !4456, metadata !DIExpression()), !dbg !4457
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4458, metadata !DIExpression()), !dbg !4457
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4457
  %cmp = icmp sge i32 %0, 0, !dbg !4457
  %conv = zext i1 %cmp to i32, !dbg !4457
  %1 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4457
  %tobool = icmp ne %struct.VEC_rdgc_base* %1, null, !dbg !4457
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4457

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4457
  %alloc = getelementptr inbounds %struct.VEC_rdgc_base, %struct.VEC_rdgc_base* %2, i32 0, i32 1, !dbg !4457
  %3 = load i32, i32* %alloc, align 4, !dbg !4457
  %4 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4457
  %num = getelementptr inbounds %struct.VEC_rdgc_base, %struct.VEC_rdgc_base* %4, i32 0, i32 0, !dbg !4457
  %5 = load i32, i32* %num, align 8, !dbg !4457
  %sub = sub i32 %3, %5, !dbg !4457
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4457
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4457
  %conv2 = zext i1 %cmp1 to i32, !dbg !4457
  br label %cond.end, !dbg !4457

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4457
  %tobool3 = icmp ne i32 %7, 0, !dbg !4457
  %lnot = xor i1 %tobool3, true, !dbg !4457
  %lnot.ext = zext i1 %lnot to i32, !dbg !4457
  br label %cond.end, !dbg !4457

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4457
  ret i32 %cond, !dbg !4457
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rdgc_base_iterate(%struct.VEC_rdgc_base* %vec_, i32 %ix_, %struct.rdg_component** %ptr) #0 !dbg !4459 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_rdgc_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.rdg_component**, align 8
  store %struct.VEC_rdgc_base* %vec_, %struct.VEC_rdgc_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rdgc_base** %vec_.addr, metadata !4464, metadata !DIExpression()), !dbg !4465
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4466, metadata !DIExpression()), !dbg !4465
  store %struct.rdg_component** %ptr, %struct.rdg_component*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rdg_component*** %ptr.addr, metadata !4467, metadata !DIExpression()), !dbg !4465
  %0 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4468
  %tobool = icmp ne %struct.VEC_rdgc_base* %0, null, !dbg !4468
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4468

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4468
  %2 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4468
  %num = getelementptr inbounds %struct.VEC_rdgc_base, %struct.VEC_rdgc_base* %2, i32 0, i32 0, !dbg !4468
  %3 = load i32, i32* %num, align 8, !dbg !4468
  %cmp = icmp ult i32 %1, %3, !dbg !4468
  br i1 %cmp, label %if.then, label %if.else, !dbg !4465

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_rdgc_base*, %struct.VEC_rdgc_base** %vec_.addr, align 8, !dbg !4470
  %vec = getelementptr inbounds %struct.VEC_rdgc_base, %struct.VEC_rdgc_base* %4, i32 0, i32 2, !dbg !4470
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4470
  %idxprom = zext i32 %5 to i64, !dbg !4470
  %arrayidx = getelementptr inbounds [1 x %struct.rdg_component*], [1 x %struct.rdg_component*]* %vec, i64 0, i64 %idxprom, !dbg !4470
  %6 = load %struct.rdg_component*, %struct.rdg_component** %arrayidx, align 8, !dbg !4470
  %7 = load %struct.rdg_component**, %struct.rdg_component*** %ptr.addr, align 8, !dbg !4470
  store %struct.rdg_component* %6, %struct.rdg_component** %7, align 8, !dbg !4470
  store i32 1, i32* %retval, align 4, !dbg !4470
  br label %return, !dbg !4470

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.rdg_component**, %struct.rdg_component*** %ptr.addr, align 8, !dbg !4472
  store %struct.rdg_component* null, %struct.rdg_component** %8, align 8, !dbg !4472
  store i32 0, i32* %retval, align 4, !dbg !4472
  br label %return, !dbg !4472

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4465
  ret i32 %9, !dbg !4465
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_index(%struct.VEC_int_base* %vec_, i32 %ix_) #0 !dbg !4474 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !4477, metadata !DIExpression()), !dbg !4478
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4479, metadata !DIExpression()), !dbg !4478
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4478
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !4478
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4478

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4478
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4478
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !4478
  %3 = load i32, i32* %num, align 4, !dbg !4478
  %cmp = icmp ult i32 %1, %3, !dbg !4478
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4480
  %land.ext = zext i1 %4 to i32, !dbg !4478
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4478
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 2, !dbg !4478
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4478
  %idxprom = zext i32 %6 to i64, !dbg !4478
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !4478
  %7 = load i32, i32* %arrayidx, align 4, !dbg !4478
  ret i32 %7, !dbg !4478
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def* @build_rdg_partition_for_component(%struct.graph* %rdg, %struct.rdg_component* %c, i8* %part_has_writes, %struct.VEC_int_heap** %other_stores) #0 !dbg !4481 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %c.addr = alloca %struct.rdg_component*, align 8
  %part_has_writes.addr = alloca i8*, align 8
  %other_stores.addr = alloca %struct.VEC_int_heap**, align 8
  %i = alloca i32, align 4
  %v = alloca i32, align 4
  %partition = alloca %struct.bitmap_head_def*, align 8
  %loops = alloca %struct.bitmap_head_def*, align 8
  %processed = alloca %struct.bitmap_head_def*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4485, metadata !DIExpression()), !dbg !4486
  store %struct.rdg_component* %c, %struct.rdg_component** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rdg_component** %c.addr, metadata !4487, metadata !DIExpression()), !dbg !4488
  store i8* %part_has_writes, i8** %part_has_writes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %part_has_writes.addr, metadata !4489, metadata !DIExpression()), !dbg !4490
  store %struct.VEC_int_heap** %other_stores, %struct.VEC_int_heap*** %other_stores.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %other_stores.addr, metadata !4491, metadata !DIExpression()), !dbg !4492
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4493, metadata !DIExpression()), !dbg !4494
  call void @llvm.dbg.declare(metadata i32* %v, metadata !4495, metadata !DIExpression()), !dbg !4496
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition, metadata !4497, metadata !DIExpression()), !dbg !4498
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4499
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %partition, align 8, !dbg !4498
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %loops, metadata !4500, metadata !DIExpression()), !dbg !4501
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4502
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %loops, align 8, !dbg !4501
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed, metadata !4503, metadata !DIExpression()), !dbg !4504
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4505
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** %processed, align 8, !dbg !4504
  store i32 0, i32* %i, align 4, !dbg !4506
  br label %for.cond, !dbg !4508

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.rdg_component*, %struct.rdg_component** %c.addr, align 8, !dbg !4509
  %vertices = getelementptr inbounds %struct.rdg_component, %struct.rdg_component* %0, i32 0, i32 1, !dbg !4509
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vertices, align 8, !dbg !4509
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !4509
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4509

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.rdg_component*, %struct.rdg_component** %c.addr, align 8, !dbg !4509
  %vertices3 = getelementptr inbounds %struct.rdg_component, %struct.rdg_component* %2, i32 0, i32 1, !dbg !4509
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vertices3, align 8, !dbg !4509
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !4509
  br label %cond.end, !dbg !4509

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4509

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4509
  %4 = load i32, i32* %i, align 4, !dbg !4509
  %call4 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %4, i32* %v), !dbg !4509
  %tobool5 = icmp ne i32 %call4, 0, !dbg !4511
  br i1 %tobool5, label %for.body, label %for.end, !dbg !4511

for.body:                                         ; preds = %cond.end
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed, align 8, !dbg !4512
  %6 = load i32, i32* %v, align 4, !dbg !4514
  %call6 = call zeroext i8 @already_processed_vertex_p(%struct.bitmap_head_def* %5, i32 %6), !dbg !4515
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4515
  br i1 %tobool7, label %if.end, label %if.then, !dbg !4516

if.then:                                          ; preds = %for.body
  %7 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4517
  %8 = load i32, i32* %v, align 4, !dbg !4518
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4519
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops, align 8, !dbg !4520
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed, align 8, !dbg !4521
  %12 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !4522
  call void @rdg_flag_vertex_and_dependent(%struct.graph* %7, i32 %8, %struct.bitmap_head_def* %9, %struct.bitmap_head_def* %10, %struct.bitmap_head_def* %11, i8* %12), !dbg !4523
  br label %if.end, !dbg !4523

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4524

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !4525
  %inc = add nsw i32 %13, 1, !dbg !4525
  store i32 %inc, i32* %i, align 4, !dbg !4525
  br label %for.cond, !dbg !4526, !llvm.loop !4527

for.end:                                          ; preds = %cond.end
  %14 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4529
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4530
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops, align 8, !dbg !4531
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed, align 8, !dbg !4532
  %18 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4533
  call void @rdg_flag_similar_memory_accesses(%struct.graph* %14, %struct.bitmap_head_def* %15, %struct.bitmap_head_def* %16, %struct.bitmap_head_def* %17, %struct.VEC_int_heap** %18), !dbg !4534
  %19 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4535
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops, align 8, !dbg !4536
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4537
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed, align 8, !dbg !4538
  %23 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !4539
  call void @rdg_flag_loop_exits(%struct.graph* %19, %struct.bitmap_head_def* %20, %struct.bitmap_head_def* %21, %struct.bitmap_head_def* %22, i8* %23), !dbg !4540
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed, align 8, !dbg !4541
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %24), !dbg !4541
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %processed, align 8, !dbg !4541
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops, align 8, !dbg !4542
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %25), !dbg !4542
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %loops, align 8, !dbg !4542
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition, align 8, !dbg !4543
  ret %struct.bitmap_head_def* %26, !dbg !4544
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local void @bitmap_print(%struct._IO_FILE*, %struct.bitmap_head_def*, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def** @VEC_bitmap_heap_safe_push(%struct.VEC_bitmap_heap** %vec_, %struct.bitmap_head_def* %obj_) #0 !dbg !4545 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_heap**, align 8
  %obj_.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.VEC_bitmap_heap** %vec_, %struct.VEC_bitmap_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap*** %vec_.addr, metadata !4548, metadata !DIExpression()), !dbg !4549
  store %struct.bitmap_head_def* %obj_, %struct.bitmap_head_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %obj_.addr, metadata !4550, metadata !DIExpression()), !dbg !4549
  %0 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !4549
  %call = call i32 @VEC_bitmap_heap_reserve(%struct.VEC_bitmap_heap** %0, i32 1), !dbg !4549
  %1 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !4549
  %2 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %1, align 8, !dbg !4549
  %tobool = icmp ne %struct.VEC_bitmap_heap* %2, null, !dbg !4549
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4549

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !4549
  %4 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %3, align 8, !dbg !4549
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %4, i32 0, i32 0, !dbg !4549
  br label %cond.end, !dbg !4549

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4549

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4549
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %obj_.addr, align 8, !dbg !4549
  %call1 = call %struct.bitmap_head_def** @VEC_bitmap_base_quick_push(%struct.VEC_bitmap_base* %cond, %struct.bitmap_head_def* %5), !dbg !4549
  ret %struct.bitmap_head_def** %call1, !dbg !4549
}

declare dso_local zeroext i8 @rdg_defs_used_in_other_loops_p(%struct.graph*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_length(%struct.VEC_int_base* %vec_) #0 !dbg !4551 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !4554, metadata !DIExpression()), !dbg !4555
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4555
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !4555
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4555

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4555
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %1, i32 0, i32 0, !dbg !4555
  %2 = load i32, i32* %num, align 4, !dbg !4555
  br label %cond.end, !dbg !4555

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4555

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4555
  ret i32 %cond, !dbg !4555
}

declare dso_local i64 @bitmap_count_bits(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @already_processed_vertex_p(%struct.bitmap_head_def* %processed, i32 %v) #0 !dbg !4556 {
entry:
  %processed.addr = alloca %struct.bitmap_head_def*, align 8
  %v.addr = alloca i32, align 4
  store %struct.bitmap_head_def* %processed, %struct.bitmap_head_def** %processed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed.addr, metadata !4559, metadata !DIExpression()), !dbg !4560
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !4561, metadata !DIExpression()), !dbg !4562
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4563
  %1 = load i32, i32* %v.addr, align 4, !dbg !4564
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %0, i32 %1), !dbg !4565
  %tobool = icmp ne i32 %call, 0, !dbg !4565
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !4566

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @remaining_stmts, align 8, !dbg !4567
  %3 = load i32, i32* %v.addr, align 4, !dbg !4568
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %2, i32 %3), !dbg !4569
  %tobool2 = icmp ne i32 %call1, 0, !dbg !4570
  %lnot = xor i1 %tobool2, true, !dbg !4570
  br label %lor.end, !dbg !4566

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !4566
  %conv = trunc i32 %lor.ext to i8, !dbg !4571
  ret i8 %conv, !dbg !4572
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdg_flag_vertex_and_dependent(%struct.graph* %rdg, i32 %v, %struct.bitmap_head_def* %partition, %struct.bitmap_head_def* %loops, %struct.bitmap_head_def* %processed, i8* %part_has_writes) #0 !dbg !4573 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %v.addr = alloca i32, align 4
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %loops.addr = alloca %struct.bitmap_head_def*, align 8
  %processed.addr = alloca %struct.bitmap_head_def*, align 8
  %part_has_writes.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %nodes = alloca %struct.VEC_int_heap*, align 8
  %x = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4576, metadata !DIExpression()), !dbg !4577
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !4578, metadata !DIExpression()), !dbg !4579
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !4580, metadata !DIExpression()), !dbg !4581
  store %struct.bitmap_head_def* %loops, %struct.bitmap_head_def** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %loops.addr, metadata !4582, metadata !DIExpression()), !dbg !4583
  store %struct.bitmap_head_def* %processed, %struct.bitmap_head_def** %processed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed.addr, metadata !4584, metadata !DIExpression()), !dbg !4585
  store i8* %part_has_writes, i8** %part_has_writes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %part_has_writes.addr, metadata !4586, metadata !DIExpression()), !dbg !4587
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4588, metadata !DIExpression()), !dbg !4589
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %nodes, metadata !4590, metadata !DIExpression()), !dbg !4591
  %call = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 3), !dbg !4592
  store %struct.VEC_int_heap* %call, %struct.VEC_int_heap** %nodes, align 8, !dbg !4591
  call void @llvm.dbg.declare(metadata i32* %x, metadata !4593, metadata !DIExpression()), !dbg !4594
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4595
  %1 = load i32, i32* %v.addr, align 4, !dbg !4596
  %call1 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %0, i32 %1), !dbg !4597
  %2 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4598
  %3 = load i32, i32* %v.addr, align 4, !dbg !4599
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4600
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4601
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4602
  %7 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !4603
  call void @rdg_flag_uses(%struct.graph* %2, i32 %3, %struct.bitmap_head_def* %4, %struct.bitmap_head_def* %5, %struct.bitmap_head_def* %6, i8* %7), !dbg !4604
  %8 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4605
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @remaining_stmts, align 8, !dbg !4606
  %call2 = call i32 @graphds_dfs(%struct.graph* %8, i32* %v.addr, i32 1, %struct.VEC_int_heap** %nodes, i8 zeroext 0, %struct.bitmap_head_def* %9), !dbg !4607
  %10 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4608
  %11 = load i32, i32* %v.addr, align 4, !dbg !4609
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4610
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4611
  %14 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !4612
  call void @rdg_flag_vertex(%struct.graph* %10, i32 %11, %struct.bitmap_head_def* %12, %struct.bitmap_head_def* %13, i8* %14), !dbg !4613
  store i32 0, i32* %i, align 4, !dbg !4614
  br label %for.cond, !dbg !4616

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %nodes, align 8, !dbg !4617
  %tobool = icmp ne %struct.VEC_int_heap* %15, null, !dbg !4617
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4617

cond.true:                                        ; preds = %for.cond
  %16 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %nodes, align 8, !dbg !4617
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %16, i32 0, i32 0, !dbg !4617
  br label %cond.end, !dbg !4617

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4617

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4617
  %17 = load i32, i32* %i, align 4, !dbg !4617
  %call3 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %17, i32* %x), !dbg !4617
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4619
  br i1 %tobool4, label %for.body, label %for.end, !dbg !4619

for.body:                                         ; preds = %cond.end
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4620
  %19 = load i32, i32* %x, align 4, !dbg !4622
  %call5 = call zeroext i8 @already_processed_vertex_p(%struct.bitmap_head_def* %18, i32 %19), !dbg !4623
  %tobool6 = icmp ne i8 %call5, 0, !dbg !4623
  br i1 %tobool6, label %if.end, label %if.then, !dbg !4624

if.then:                                          ; preds = %for.body
  %20 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4625
  %21 = load i32, i32* %x, align 4, !dbg !4626
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4627
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4628
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4629
  %25 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !4630
  call void @rdg_flag_vertex_and_dependent(%struct.graph* %20, i32 %21, %struct.bitmap_head_def* %22, %struct.bitmap_head_def* %23, %struct.bitmap_head_def* %24, i8* %25), !dbg !4631
  br label %if.end, !dbg !4631

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4632

for.inc:                                          ; preds = %if.end
  %26 = load i32, i32* %i, align 4, !dbg !4633
  %inc = add i32 %26, 1, !dbg !4633
  store i32 %inc, i32* %i, align 4, !dbg !4633
  br label %for.cond, !dbg !4634, !llvm.loop !4635

for.end:                                          ; preds = %cond.end
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %nodes), !dbg !4637
  ret void, !dbg !4638
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdg_flag_similar_memory_accesses(%struct.graph* %rdg, %struct.bitmap_head_def* %partition, %struct.bitmap_head_def* %loops, %struct.bitmap_head_def* %processed, %struct.VEC_int_heap** %other_stores) #0 !dbg !4639 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %loops.addr = alloca %struct.bitmap_head_def*, align 8
  %processed.addr = alloca %struct.bitmap_head_def*, align 8
  %other_stores.addr = alloca %struct.VEC_int_heap**, align 8
  %foo = alloca i8, align 1
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %kk = alloca i32, align 4
  %ii = alloca %struct.bitmap_iterator, align 8
  %e = alloca %struct.graph_edge*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4642, metadata !DIExpression()), !dbg !4643
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !4644, metadata !DIExpression()), !dbg !4645
  store %struct.bitmap_head_def* %loops, %struct.bitmap_head_def** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %loops.addr, metadata !4646, metadata !DIExpression()), !dbg !4647
  store %struct.bitmap_head_def* %processed, %struct.bitmap_head_def** %processed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed.addr, metadata !4648, metadata !DIExpression()), !dbg !4649
  store %struct.VEC_int_heap** %other_stores, %struct.VEC_int_heap*** %other_stores.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %other_stores.addr, metadata !4650, metadata !DIExpression()), !dbg !4651
  call void @llvm.dbg.declare(metadata i8* %foo, metadata !4652, metadata !DIExpression()), !dbg !4653
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4654, metadata !DIExpression()), !dbg !4655
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4656, metadata !DIExpression()), !dbg !4657
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4658, metadata !DIExpression()), !dbg !4659
  call void @llvm.dbg.declare(metadata i32* %k, metadata !4660, metadata !DIExpression()), !dbg !4661
  call void @llvm.dbg.declare(metadata i32* %kk, metadata !4662, metadata !DIExpression()), !dbg !4663
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %ii, metadata !4664, metadata !DIExpression()), !dbg !4672
  call void @llvm.dbg.declare(metadata %struct.graph_edge** %e, metadata !4673, metadata !DIExpression()), !dbg !4674
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4675
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %ii, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !4675
  br label %for.cond, !dbg !4675

for.cond:                                         ; preds = %for.inc74, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %ii, i32* %i), !dbg !4677
  %tobool = icmp ne i8 %call, 0, !dbg !4675
  br i1 %tobool, label %for.body, label %for.end75, !dbg !4675

for.body:                                         ; preds = %for.cond
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4679
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %1, i32 0, i32 1, !dbg !4679
  %2 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !4679
  %3 = load i32, i32* %i, align 4, !dbg !4679
  %idxprom = zext i32 %3 to i64, !dbg !4679
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %2, i64 %idxprom, !dbg !4679
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !4679
  %4 = load i8*, i8** %data, align 8, !dbg !4679
  %5 = bitcast i8* %4 to %struct.rdg_vertex*, !dbg !4679
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %5, i32 0, i32 1, !dbg !4679
  %6 = load i8, i8* %has_mem_write, align 8, !dbg !4679
  %conv = zext i8 %6 to i32, !dbg !4679
  %tobool1 = icmp ne i32 %conv, 0, !dbg !4679
  br i1 %tobool1, label %if.then, label %lor.lhs.false, !dbg !4681

lor.lhs.false:                                    ; preds = %for.body
  %7 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4682
  %vertices2 = getelementptr inbounds %struct.graph, %struct.graph* %7, i32 0, i32 1, !dbg !4682
  %8 = load %struct.vertex*, %struct.vertex** %vertices2, align 8, !dbg !4682
  %9 = load i32, i32* %i, align 4, !dbg !4682
  %idxprom3 = zext i32 %9 to i64, !dbg !4682
  %arrayidx4 = getelementptr inbounds %struct.vertex, %struct.vertex* %8, i64 %idxprom3, !dbg !4682
  %data5 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx4, i32 0, i32 4, !dbg !4682
  %10 = load i8*, i8** %data5, align 8, !dbg !4682
  %11 = bitcast i8* %10 to %struct.rdg_vertex*, !dbg !4682
  %has_mem_reads = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %11, i32 0, i32 2, !dbg !4682
  %12 = load i8, i8* %has_mem_reads, align 1, !dbg !4682
  %conv6 = zext i8 %12 to i32, !dbg !4682
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !4682
  br i1 %tobool7, label %if.then, label %if.end73, !dbg !4683

if.then:                                          ; preds = %lor.lhs.false, %for.body
  store i32 0, i32* %j, align 4, !dbg !4684
  br label %for.cond8, !dbg !4687

for.cond8:                                        ; preds = %for.inc57, %if.then
  %13 = load i32, i32* %j, align 4, !dbg !4688
  %14 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4690
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %14, i32 0, i32 0, !dbg !4691
  %15 = load i32, i32* %n_vertices, align 8, !dbg !4691
  %cmp = icmp slt i32 %13, %15, !dbg !4692
  br i1 %cmp, label %for.body10, label %for.end59, !dbg !4693

for.body10:                                       ; preds = %for.cond8
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4694
  %17 = load i32, i32* %j, align 4, !dbg !4696
  %call11 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %16, i32 %17), !dbg !4697
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4697
  br i1 %tobool12, label %if.end56, label %land.lhs.true, !dbg !4698

land.lhs.true:                                    ; preds = %for.body10
  %18 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4699
  %vertices13 = getelementptr inbounds %struct.graph, %struct.graph* %18, i32 0, i32 1, !dbg !4699
  %19 = load %struct.vertex*, %struct.vertex** %vertices13, align 8, !dbg !4699
  %20 = load i32, i32* %j, align 4, !dbg !4699
  %idxprom14 = sext i32 %20 to i64, !dbg !4699
  %arrayidx15 = getelementptr inbounds %struct.vertex, %struct.vertex* %19, i64 %idxprom14, !dbg !4699
  %data16 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx15, i32 0, i32 4, !dbg !4699
  %21 = load i8*, i8** %data16, align 8, !dbg !4699
  %22 = bitcast i8* %21 to %struct.rdg_vertex*, !dbg !4699
  %has_mem_write17 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %22, i32 0, i32 1, !dbg !4699
  %23 = load i8, i8* %has_mem_write17, align 8, !dbg !4699
  %conv18 = zext i8 %23 to i32, !dbg !4699
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !4699
  br i1 %tobool19, label %land.lhs.true28, label %lor.lhs.false20, !dbg !4700

lor.lhs.false20:                                  ; preds = %land.lhs.true
  %24 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4701
  %vertices21 = getelementptr inbounds %struct.graph, %struct.graph* %24, i32 0, i32 1, !dbg !4701
  %25 = load %struct.vertex*, %struct.vertex** %vertices21, align 8, !dbg !4701
  %26 = load i32, i32* %j, align 4, !dbg !4701
  %idxprom22 = sext i32 %26 to i64, !dbg !4701
  %arrayidx23 = getelementptr inbounds %struct.vertex, %struct.vertex* %25, i64 %idxprom22, !dbg !4701
  %data24 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx23, i32 0, i32 4, !dbg !4701
  %27 = load i8*, i8** %data24, align 8, !dbg !4701
  %28 = bitcast i8* %27 to %struct.rdg_vertex*, !dbg !4701
  %has_mem_reads25 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %28, i32 0, i32 2, !dbg !4701
  %29 = load i8, i8* %has_mem_reads25, align 1, !dbg !4701
  %conv26 = zext i8 %29 to i32, !dbg !4701
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !4701
  br i1 %tobool27, label %land.lhs.true28, label %if.end56, !dbg !4702

land.lhs.true28:                                  ; preds = %lor.lhs.false20, %land.lhs.true
  %30 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4703
  %31 = load i32, i32* %i, align 4, !dbg !4704
  %32 = load i32, i32* %j, align 4, !dbg !4705
  %call29 = call zeroext i8 @rdg_has_similar_memory_accesses(%struct.graph* %30, i32 %31, i32 %32), !dbg !4706
  %conv30 = zext i8 %call29 to i32, !dbg !4706
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !4706
  br i1 %tobool31, label %if.then32, label %if.end56, !dbg !4707

if.then32:                                        ; preds = %land.lhs.true28
  %33 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4708
  %34 = load i32, i32* %j, align 4, !dbg !4710
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4711
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4712
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4713
  call void @rdg_flag_vertex_and_dependent(%struct.graph* %33, i32 %34, %struct.bitmap_head_def* %35, %struct.bitmap_head_def* %36, %struct.bitmap_head_def* %37, i8* %foo), !dbg !4714
  %38 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4715
  %39 = load i32, i32* %j, align 4, !dbg !4716
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4717
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4718
  %42 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4719
  call void @rdg_flag_all_uses(%struct.graph* %38, i32 %39, %struct.bitmap_head_def* %40, %struct.bitmap_head_def* %41, %struct.bitmap_head_def* %42, i8* %foo), !dbg !4720
  %43 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4721
  %vertices33 = getelementptr inbounds %struct.graph, %struct.graph* %43, i32 0, i32 1, !dbg !4721
  %44 = load %struct.vertex*, %struct.vertex** %vertices33, align 8, !dbg !4721
  %45 = load i32, i32* %j, align 4, !dbg !4721
  %idxprom34 = sext i32 %45 to i64, !dbg !4721
  %arrayidx35 = getelementptr inbounds %struct.vertex, %struct.vertex* %44, i64 %idxprom34, !dbg !4721
  %data36 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx35, i32 0, i32 4, !dbg !4721
  %46 = load i8*, i8** %data36, align 8, !dbg !4721
  %47 = bitcast i8* %46 to %struct.rdg_vertex*, !dbg !4721
  %has_mem_write37 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %47, i32 0, i32 1, !dbg !4721
  %48 = load i8, i8* %has_mem_write37, align 8, !dbg !4721
  %tobool38 = icmp ne i8 %48, 0, !dbg !4721
  br i1 %tobool38, label %if.then39, label %if.end55, !dbg !4723

if.then39:                                        ; preds = %if.then32
  store i32 0, i32* %k, align 4, !dbg !4724
  br label %for.cond40, !dbg !4726

for.cond40:                                       ; preds = %for.inc, %if.then39
  %49 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4727
  %50 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %49, align 8, !dbg !4727
  %tobool41 = icmp ne %struct.VEC_int_heap* %50, null, !dbg !4727
  br i1 %tobool41, label %cond.true, label %cond.false, !dbg !4727

cond.true:                                        ; preds = %for.cond40
  %51 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4727
  %52 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %51, align 8, !dbg !4727
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %52, i32 0, i32 0, !dbg !4727
  br label %cond.end, !dbg !4727

cond.false:                                       ; preds = %for.cond40
  br label %cond.end, !dbg !4727

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4727
  %53 = load i32, i32* %k, align 4, !dbg !4727
  %call42 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %53, i32* %kk), !dbg !4727
  %tobool43 = icmp ne i32 %call42, 0, !dbg !4729
  br i1 %tobool43, label %for.body44, label %for.end, !dbg !4729

for.body44:                                       ; preds = %cond.end
  %54 = load i32, i32* %kk, align 4, !dbg !4730
  %55 = load i32, i32* %j, align 4, !dbg !4732
  %cmp45 = icmp eq i32 %54, %55, !dbg !4733
  br i1 %cmp45, label %if.then47, label %if.end, !dbg !4734

if.then47:                                        ; preds = %for.body44
  %56 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4735
  %57 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %56, align 8, !dbg !4735
  %tobool48 = icmp ne %struct.VEC_int_heap* %57, null, !dbg !4735
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !4735

cond.true49:                                      ; preds = %if.then47
  %58 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %other_stores.addr, align 8, !dbg !4735
  %59 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %58, align 8, !dbg !4735
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %59, i32 0, i32 0, !dbg !4735
  br label %cond.end52, !dbg !4735

cond.false51:                                     ; preds = %if.then47
  br label %cond.end52, !dbg !4735

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !4735
  %60 = load i32, i32* %k, align 4, !dbg !4735
  %call54 = call i32 @VEC_int_base_unordered_remove(%struct.VEC_int_base* %cond53, i32 %60), !dbg !4735
  br label %for.end, !dbg !4737

if.end:                                           ; preds = %for.body44
  br label %for.inc, !dbg !4732

for.inc:                                          ; preds = %if.end
  %61 = load i32, i32* %k, align 4, !dbg !4738
  %inc = add nsw i32 %61, 1, !dbg !4738
  store i32 %inc, i32* %k, align 4, !dbg !4738
  br label %for.cond40, !dbg !4739, !llvm.loop !4740

for.end:                                          ; preds = %cond.end52, %cond.end
  br label %if.end55, !dbg !4741

if.end55:                                         ; preds = %for.end, %if.then32
  br label %if.end56, !dbg !4742

if.end56:                                         ; preds = %if.end55, %land.lhs.true28, %lor.lhs.false20, %for.body10
  br label %for.inc57, !dbg !4743

for.inc57:                                        ; preds = %if.end56
  %62 = load i32, i32* %j, align 4, !dbg !4744
  %inc58 = add nsw i32 %62, 1, !dbg !4744
  store i32 %inc58, i32* %j, align 4, !dbg !4744
  br label %for.cond8, !dbg !4745, !llvm.loop !4746

for.end59:                                        ; preds = %for.cond8
  store i32 0, i32* %n, align 4, !dbg !4748
  %63 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4750
  %vertices60 = getelementptr inbounds %struct.graph, %struct.graph* %63, i32 0, i32 1, !dbg !4751
  %64 = load %struct.vertex*, %struct.vertex** %vertices60, align 8, !dbg !4751
  %65 = load i32, i32* %i, align 4, !dbg !4752
  %idxprom61 = zext i32 %65 to i64, !dbg !4750
  %arrayidx62 = getelementptr inbounds %struct.vertex, %struct.vertex* %64, i64 %idxprom61, !dbg !4750
  %succ = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx62, i32 0, i32 1, !dbg !4753
  %66 = load %struct.graph_edge*, %struct.graph_edge** %succ, align 8, !dbg !4753
  store %struct.graph_edge* %66, %struct.graph_edge** %e, align 8, !dbg !4754
  br label %for.cond63, !dbg !4755

for.cond63:                                       ; preds = %for.inc66, %for.end59
  %67 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4756
  %tobool64 = icmp ne %struct.graph_edge* %67, null, !dbg !4758
  br i1 %tobool64, label %for.body65, label %for.end68, !dbg !4758

for.body65:                                       ; preds = %for.cond63
  br label %for.inc66, !dbg !4758

for.inc66:                                        ; preds = %for.body65
  %68 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !4759
  %succ_next = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %68, i32 0, i32 3, !dbg !4760
  %69 = load %struct.graph_edge*, %struct.graph_edge** %succ_next, align 8, !dbg !4760
  store %struct.graph_edge* %69, %struct.graph_edge** %e, align 8, !dbg !4761
  %70 = load i32, i32* %n, align 4, !dbg !4762
  %inc67 = add i32 %70, 1, !dbg !4762
  store i32 %inc67, i32* %n, align 4, !dbg !4762
  br label %for.cond63, !dbg !4763, !llvm.loop !4764

for.end68:                                        ; preds = %for.cond63
  %71 = load i32, i32* %n, align 4, !dbg !4766
  %cmp69 = icmp ugt i32 %71, 1, !dbg !4768
  br i1 %cmp69, label %if.then71, label %if.end72, !dbg !4769

if.then71:                                        ; preds = %for.end68
  %72 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4770
  %73 = load i32, i32* %i, align 4, !dbg !4771
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4772
  %75 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4773
  %76 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4774
  call void @rdg_flag_all_uses(%struct.graph* %72, i32 %73, %struct.bitmap_head_def* %74, %struct.bitmap_head_def* %75, %struct.bitmap_head_def* %76, i8* %foo), !dbg !4775
  br label %if.end72, !dbg !4775

if.end72:                                         ; preds = %if.then71, %for.end68
  br label %if.end73, !dbg !4776

if.end73:                                         ; preds = %if.end72, %lor.lhs.false
  br label %for.inc74, !dbg !4682

for.inc74:                                        ; preds = %if.end73
  call void @bmp_iter_next(%struct.bitmap_iterator* %ii, i32* %i), !dbg !4677
  br label %for.cond, !dbg !4677, !llvm.loop !4777

for.end75:                                        ; preds = %for.cond
  ret void, !dbg !4779
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdg_flag_loop_exits(%struct.graph* %rdg, %struct.bitmap_head_def* %loops, %struct.bitmap_head_def* %partition, %struct.bitmap_head_def* %processed, i8* %part_has_writes) #0 !dbg !4780 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %loops.addr = alloca %struct.bitmap_head_def*, align 8
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %processed.addr = alloca %struct.bitmap_head_def*, align 8
  %part_has_writes.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %conds = alloca %struct.VEC_gimple_heap*, align 8
  %cond5 = alloca %union.gimple_statement_d*, align 8
  %v = alloca i32, align 4
  %new_loops = alloca %struct.bitmap_head_def*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4783, metadata !DIExpression()), !dbg !4784
  store %struct.bitmap_head_def* %loops, %struct.bitmap_head_def** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %loops.addr, metadata !4785, metadata !DIExpression()), !dbg !4786
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !4787, metadata !DIExpression()), !dbg !4788
  store %struct.bitmap_head_def* %processed, %struct.bitmap_head_def** %processed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed.addr, metadata !4789, metadata !DIExpression()), !dbg !4790
  store i8* %part_has_writes, i8** %part_has_writes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %part_has_writes.addr, metadata !4791, metadata !DIExpression()), !dbg !4792
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4793, metadata !DIExpression()), !dbg !4794
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4795, metadata !DIExpression()), !dbg !4796
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %conds, metadata !4797, metadata !DIExpression()), !dbg !4798
  %call = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 3), !dbg !4799
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %conds, align 8, !dbg !4798
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4800
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !4800
  br label %for.cond, !dbg !4800

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4802
  %tobool = icmp ne i8 %call1, 0, !dbg !4800
  br i1 %tobool, label %for.body, label %for.end, !dbg !4800

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !4804
  %call2 = call %struct.loop* @get_loop(i32 %1), !dbg !4805
  call void @collect_condition_stmts(%struct.loop* %call2, %struct.VEC_gimple_heap** %conds), !dbg !4806
  br label %for.inc, !dbg !4806

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4802
  br label %for.cond, !dbg !4802, !llvm.loop !4807

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !4809

while.cond:                                       ; preds = %for.end28, %for.end
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %conds, align 8, !dbg !4810
  %tobool3 = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !4810
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4810

cond.true:                                        ; preds = %while.cond
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %conds, align 8, !dbg !4810
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !4810
  br label %cond.end, !dbg !4810

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !4810

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4810
  %call4 = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond), !dbg !4810
  %cmp = icmp eq i32 %call4, 0, !dbg !4810
  %lnot = xor i1 %cmp, true, !dbg !4811
  br i1 %lnot, label %while.body, label %while.end, !dbg !4809

while.body:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond5, metadata !4812, metadata !DIExpression()), !dbg !4814
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %conds, align 8, !dbg !4815
  %tobool6 = icmp ne %struct.VEC_gimple_heap* %4, null, !dbg !4815
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !4815

cond.true7:                                       ; preds = %while.body
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %conds, align 8, !dbg !4815
  %base8 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %5, i32 0, i32 0, !dbg !4815
  br label %cond.end10, !dbg !4815

cond.false9:                                      ; preds = %while.body
  br label %cond.end10, !dbg !4815

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_gimple_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !4815
  %call12 = call %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %cond11), !dbg !4815
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %cond5, align 8, !dbg !4814
  call void @llvm.dbg.declare(metadata i32* %v, metadata !4816, metadata !DIExpression()), !dbg !4817
  %6 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4818
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond5, align 8, !dbg !4819
  %call13 = call i32 @rdg_vertex_for_stmt(%struct.graph* %6, %union.gimple_statement_d* %7), !dbg !4820
  store i32 %call13, i32* %v, align 4, !dbg !4817
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %new_loops, metadata !4821, metadata !DIExpression()), !dbg !4822
  %call14 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4823
  store %struct.bitmap_head_def* %call14, %struct.bitmap_head_def** %new_loops, align 8, !dbg !4822
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4824
  %9 = load i32, i32* %v, align 4, !dbg !4826
  %call15 = call zeroext i8 @already_processed_vertex_p(%struct.bitmap_head_def* %8, i32 %9), !dbg !4827
  %tobool16 = icmp ne i8 %call15, 0, !dbg !4827
  br i1 %tobool16, label %if.end, label %if.then, !dbg !4828

if.then:                                          ; preds = %cond.end10
  %10 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4829
  %11 = load i32, i32* %v, align 4, !dbg !4830
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4831
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_loops, align 8, !dbg !4832
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4833
  %15 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !4834
  call void @rdg_flag_vertex_and_dependent(%struct.graph* %10, i32 %11, %struct.bitmap_head_def* %12, %struct.bitmap_head_def* %13, %struct.bitmap_head_def* %14, i8* %15), !dbg !4835
  br label %if.end, !dbg !4835

if.end:                                           ; preds = %if.then, %cond.end10
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_loops, align 8, !dbg !4836
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %16, i32 0, i32* %i), !dbg !4836
  br label %for.cond17, !dbg !4836

for.cond17:                                       ; preds = %for.inc27, %if.end
  %call18 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4838
  %tobool19 = icmp ne i8 %call18, 0, !dbg !4836
  br i1 %tobool19, label %for.body20, label %for.end28, !dbg !4836

for.body20:                                       ; preds = %for.cond17
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4840
  %18 = load i32, i32* %i, align 4, !dbg !4842
  %call21 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %17, i32 %18), !dbg !4843
  %tobool22 = icmp ne i32 %call21, 0, !dbg !4843
  br i1 %tobool22, label %if.end26, label %if.then23, !dbg !4844

if.then23:                                        ; preds = %for.body20
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4845
  %20 = load i32, i32* %i, align 4, !dbg !4847
  %call24 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %19, i32 %20), !dbg !4848
  %21 = load i32, i32* %i, align 4, !dbg !4849
  %call25 = call %struct.loop* @get_loop(i32 %21), !dbg !4850
  call void @collect_condition_stmts(%struct.loop* %call25, %struct.VEC_gimple_heap** %conds), !dbg !4851
  br label %if.end26, !dbg !4852

if.end26:                                         ; preds = %if.then23, %for.body20
  br label %for.inc27, !dbg !4853

for.inc27:                                        ; preds = %if.end26
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4838
  br label %for.cond17, !dbg !4838, !llvm.loop !4854

for.end28:                                        ; preds = %for.cond17
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_loops, align 8, !dbg !4856
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %22), !dbg !4856
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %new_loops, align 8, !dbg !4856
  br label %while.cond, !dbg !4809, !llvm.loop !4857

while.end:                                        ; preds = %cond.end
  ret void, !dbg !4859
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdg_flag_uses(%struct.graph* %rdg, i32 %u, %struct.bitmap_head_def* %partition, %struct.bitmap_head_def* %loops, %struct.bitmap_head_def* %processed, i8* %part_has_writes) #0 !dbg !4860 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %u.addr = alloca i32, align 4
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %loops.addr = alloca %struct.bitmap_head_def*, align 8
  %processed.addr = alloca %struct.bitmap_head_def*, align 8
  %part_has_writes.addr = alloca i8*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %x = alloca %struct.vertex*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %anti_dep = alloca %struct.graph_edge*, align 8
  %v = alloca i32, align 4
  %use = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %v15 = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %use_p36 = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %v40 = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !4861, metadata !DIExpression()), !dbg !4862
  store i32 %u, i32* %u.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %u.addr, metadata !4863, metadata !DIExpression()), !dbg !4864
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !4865, metadata !DIExpression()), !dbg !4866
  store %struct.bitmap_head_def* %loops, %struct.bitmap_head_def** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %loops.addr, metadata !4867, metadata !DIExpression()), !dbg !4868
  store %struct.bitmap_head_def* %processed, %struct.bitmap_head_def** %processed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed.addr, metadata !4869, metadata !DIExpression()), !dbg !4870
  store i8* %part_has_writes, i8** %part_has_writes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %part_has_writes.addr, metadata !4871, metadata !DIExpression()), !dbg !4872
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !4873, metadata !DIExpression()), !dbg !4874
  call void @llvm.dbg.declare(metadata %struct.vertex** %x, metadata !4875, metadata !DIExpression()), !dbg !4876
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4877
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %0, i32 0, i32 1, !dbg !4878
  %1 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !4878
  %2 = load i32, i32* %u.addr, align 4, !dbg !4879
  %idxprom = sext i32 %2 to i64, !dbg !4877
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %1, i64 %idxprom, !dbg !4877
  store %struct.vertex* %arrayidx, %struct.vertex** %x, align 8, !dbg !4876
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4880, metadata !DIExpression()), !dbg !4881
  %3 = load %struct.vertex*, %struct.vertex** %x, align 8, !dbg !4882
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %3, i32 0, i32 4, !dbg !4882
  %4 = load i8*, i8** %data, align 8, !dbg !4882
  %5 = bitcast i8* %4 to %struct.rdg_vertex*, !dbg !4882
  %stmt1 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %5, i32 0, i32 0, !dbg !4882
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !4882
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %stmt, align 8, !dbg !4881
  call void @llvm.dbg.declare(metadata %struct.graph_edge** %anti_dep, metadata !4883, metadata !DIExpression()), !dbg !4884
  %7 = load %struct.vertex*, %struct.vertex** %x, align 8, !dbg !4885
  %call = call %struct.graph_edge* @has_anti_dependence(%struct.vertex* %7), !dbg !4886
  store %struct.graph_edge* %call, %struct.graph_edge** %anti_dep, align 8, !dbg !4884
  %8 = load %struct.graph_edge*, %struct.graph_edge** %anti_dep, align 8, !dbg !4887
  %tobool = icmp ne %struct.graph_edge* %8, null, !dbg !4887
  br i1 %tobool, label %if.then, label %if.end5, !dbg !4889

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %v, metadata !4890, metadata !DIExpression()), !dbg !4892
  %9 = load %struct.graph_edge*, %struct.graph_edge** %anti_dep, align 8, !dbg !4893
  %dest = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %9, i32 0, i32 1, !dbg !4894
  %10 = load i32, i32* %dest, align 4, !dbg !4894
  store i32 %10, i32* %v, align 4, !dbg !4892
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4895
  %12 = load i32, i32* %v, align 4, !dbg !4897
  %call2 = call zeroext i8 @already_processed_vertex_p(%struct.bitmap_head_def* %11, i32 %12), !dbg !4898
  %tobool3 = icmp ne i8 %call2, 0, !dbg !4898
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !4899

if.then4:                                         ; preds = %if.then
  %13 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4900
  %14 = load i32, i32* %v, align 4, !dbg !4901
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4902
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4903
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4904
  %18 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !4905
  call void @rdg_flag_vertex_and_dependent(%struct.graph* %13, i32 %14, %struct.bitmap_head_def* %15, %struct.bitmap_head_def* %16, %struct.bitmap_head_def* %17, i8* %18), !dbg !4906
  br label %if.end, !dbg !4906

if.end:                                           ; preds = %if.then4, %if.then
  br label %if.end5, !dbg !4907

if.end5:                                          ; preds = %if.end, %entry
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4908
  %call6 = call i32 @gimple_code(%union.gimple_statement_d* %19), !dbg !4910
  %cmp = icmp ne i32 %call6, 16, !dbg !4911
  br i1 %cmp, label %if.then7, label %if.end24, !dbg !4912

if.then7:                                         ; preds = %if.end5
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4913
  %call8 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %20), !dbg !4916
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4917
  %cmp9 = icmp ne %struct.ssa_use_operand_d* %call8, null, !dbg !4918
  br i1 %cmp9, label %if.then10, label %if.end23, !dbg !4919

if.then10:                                        ; preds = %if.then7
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !4920, metadata !DIExpression()), !dbg !4922
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4923
  %call11 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %21), !dbg !4923
  store %union.tree_node* %call11, %union.tree_node** %use, align 8, !dbg !4922
  %22 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4924
  %base = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4924
  %23 = bitcast %struct.tree_base* %base to i64*, !dbg !4924
  %bf.load = load i64, i64* %23, align 8, !dbg !4924
  %bf.clear = and i64 %bf.load, 65535, !dbg !4924
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4924
  %cmp12 = icmp eq i32 %bf.cast, 141, !dbg !4926
  br i1 %cmp12, label %if.then13, label %if.end22, !dbg !4927

if.then13:                                        ; preds = %if.then10
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !4928, metadata !DIExpression()), !dbg !4930
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4931
  %ssa_name = bitcast %union.tree_node* %24 to %struct.tree_ssa_name*, !dbg !4931
  %def_stmt14 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4931
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt14, align 8, !dbg !4931
  store %union.gimple_statement_d* %25, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4930
  call void @llvm.dbg.declare(metadata i32* %v15, metadata !4932, metadata !DIExpression()), !dbg !4933
  %26 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4934
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4935
  %call16 = call i32 @rdg_vertex_for_stmt(%struct.graph* %26, %union.gimple_statement_d* %27), !dbg !4936
  store i32 %call16, i32* %v15, align 4, !dbg !4933
  %28 = load i32, i32* %v15, align 4, !dbg !4937
  %cmp17 = icmp sge i32 %28, 0, !dbg !4939
  br i1 %cmp17, label %land.lhs.true, label %if.end21, !dbg !4940

land.lhs.true:                                    ; preds = %if.then13
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4941
  %30 = load i32, i32* %v15, align 4, !dbg !4942
  %call18 = call zeroext i8 @already_processed_vertex_p(%struct.bitmap_head_def* %29, i32 %30), !dbg !4943
  %tobool19 = icmp ne i8 %call18, 0, !dbg !4943
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !4944

if.then20:                                        ; preds = %land.lhs.true
  %31 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4945
  %32 = load i32, i32* %v15, align 4, !dbg !4946
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !4947
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !4948
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4949
  %36 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !4950
  call void @rdg_flag_vertex_and_dependent(%struct.graph* %31, i32 %32, %struct.bitmap_head_def* %33, %struct.bitmap_head_def* %34, %struct.bitmap_head_def* %35, i8* %36), !dbg !4951
  br label %if.end21, !dbg !4951

if.end21:                                         ; preds = %if.then20, %land.lhs.true, %if.then13
  br label %if.end22, !dbg !4952

if.end22:                                         ; preds = %if.end21, %if.then10
  br label %if.end23, !dbg !4953

if.end23:                                         ; preds = %if.end22, %if.then7
  br label %if.end24, !dbg !4954

if.end24:                                         ; preds = %if.end23, %if.end5
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4955
  %call25 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %37), !dbg !4957
  %conv = zext i8 %call25 to i32, !dbg !4957
  %tobool26 = icmp ne i32 %conv, 0, !dbg !4957
  br i1 %tobool26, label %land.lhs.true27, label %if.end49, !dbg !4958

land.lhs.true27:                                  ; preds = %if.end24
  %38 = load i32, i32* %u.addr, align 4, !dbg !4959
  %call28 = call zeroext i8 @has_upstream_mem_writes(i32 %38), !dbg !4960
  %conv29 = zext i8 %call28 to i32, !dbg !4960
  %tobool30 = icmp ne i32 %conv29, 0, !dbg !4960
  br i1 %tobool30, label %if.then31, label %if.end49, !dbg !4961

if.then31:                                        ; preds = %land.lhs.true27
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !4962, metadata !DIExpression()), !dbg !4964
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4965
  %call32 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %39), !dbg !4966
  store %union.tree_node* %call32, %union.tree_node** %op0, align 8, !dbg !4964
  %40 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !4967
  %call33 = call zeroext i8 @is_gimple_reg(%union.tree_node* %40), !dbg !4969
  %tobool34 = icmp ne i8 %call33, 0, !dbg !4969
  br i1 %tobool34, label %if.then35, label %if.end48, !dbg !4970

if.then35:                                        ; preds = %if.then31
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p36, metadata !4971, metadata !DIExpression()), !dbg !4973
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !4974, metadata !DIExpression()), !dbg !4982
  %41 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !4983
  %call37 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %41), !dbg !4983
  store %struct.ssa_use_operand_d* %call37, %struct.ssa_use_operand_d** %use_p36, align 8, !dbg !4983
  br label %for.cond, !dbg !4983

for.cond:                                         ; preds = %for.inc, %if.then35
  %call38 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %iter), !dbg !4985
  %tobool39 = icmp ne i8 %call38, 0, !dbg !4985
  %lnot = xor i1 %tobool39, true, !dbg !4985
  br i1 %lnot, label %for.body, label %for.end, !dbg !4983

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %v40, metadata !4987, metadata !DIExpression()), !dbg !4989
  %42 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4990
  %43 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p36, align 8, !dbg !4991
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %43, i32 0, i32 2, !dbg !4991
  %stmt41 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !4991
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt41, align 8, !dbg !4991
  %call42 = call i32 @rdg_vertex_for_stmt(%struct.graph* %42, %union.gimple_statement_d* %44), !dbg !4992
  store i32 %call42, i32* %v40, align 4, !dbg !4989
  %45 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !4993
  %46 = load i32, i32* %v40, align 4, !dbg !4995
  %call43 = call zeroext i8 @already_processed_vertex_p(%struct.bitmap_head_def* %45, i32 %46), !dbg !4996
  %tobool44 = icmp ne i8 %call43, 0, !dbg !4996
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !4997

if.then45:                                        ; preds = %for.body
  %47 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !4998
  %48 = load i32, i32* %v40, align 4, !dbg !4999
  %49 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !5000
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !5001
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !5002
  %52 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !5003
  call void @rdg_flag_vertex_and_dependent(%struct.graph* %47, i32 %48, %struct.bitmap_head_def* %49, %struct.bitmap_head_def* %50, %struct.bitmap_head_def* %51, i8* %52), !dbg !5004
  br label %if.end46, !dbg !5004

if.end46:                                         ; preds = %if.then45, %for.body
  br label %for.inc, !dbg !5005

for.inc:                                          ; preds = %if.end46
  %call47 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %iter), !dbg !4985
  store %struct.ssa_use_operand_d* %call47, %struct.ssa_use_operand_d** %use_p36, align 8, !dbg !4985
  br label %for.cond, !dbg !4985, !llvm.loop !5006

for.end:                                          ; preds = %for.cond
  br label %if.end48, !dbg !5008

if.end48:                                         ; preds = %for.end, %if.then31
  br label %if.end49, !dbg !5009

if.end49:                                         ; preds = %if.end48, %land.lhs.true27, %if.end24
  ret void, !dbg !5010
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdg_flag_vertex(%struct.graph* %rdg, i32 %v, %struct.bitmap_head_def* %partition, %struct.bitmap_head_def* %loops, i8* %part_has_writes) #0 !dbg !5011 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %v.addr = alloca i32, align 4
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %loops.addr = alloca %struct.bitmap_head_def*, align 8
  %part_has_writes.addr = alloca i8*, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !5014, metadata !DIExpression()), !dbg !5015
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !5016, metadata !DIExpression()), !dbg !5017
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !5018, metadata !DIExpression()), !dbg !5019
  store %struct.bitmap_head_def* %loops, %struct.bitmap_head_def** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %loops.addr, metadata !5020, metadata !DIExpression()), !dbg !5021
  store i8* %part_has_writes, i8** %part_has_writes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %part_has_writes.addr, metadata !5022, metadata !DIExpression()), !dbg !5023
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5024, metadata !DIExpression()), !dbg !5025
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !5026
  %1 = load i32, i32* %v.addr, align 4, !dbg !5028
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %0, i32 %1), !dbg !5029
  %tobool = icmp ne i32 %call, 0, !dbg !5029
  br i1 %tobool, label %if.then, label %if.end, !dbg !5030

if.then:                                          ; preds = %entry
  br label %if.end8, !dbg !5031

if.end:                                           ; preds = %entry
  %2 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5032
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %2, i32 0, i32 1, !dbg !5032
  %3 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !5032
  %4 = load i32, i32* %v.addr, align 4, !dbg !5032
  %idxprom = sext i32 %4 to i64, !dbg !5032
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %3, i64 %idxprom, !dbg !5032
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !5032
  %5 = load i8*, i8** %data, align 8, !dbg !5032
  %6 = bitcast i8* %5 to %struct.rdg_vertex*, !dbg !5032
  %stmt = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %6, i32 0, i32 0, !dbg !5032
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5032
  %call1 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %7), !dbg !5033
  store %struct.loop* %call1, %struct.loop** %loop, align 8, !dbg !5034
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !5035
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5036
  %num = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 0, !dbg !5037
  %10 = load i32, i32* %num, align 8, !dbg !5037
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %8, i32 %10), !dbg !5038
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !5039
  %12 = load i32, i32* %v.addr, align 4, !dbg !5040
  %call3 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %12), !dbg !5041
  %13 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5042
  %14 = load i32, i32* %v.addr, align 4, !dbg !5044
  %call4 = call zeroext i8 @rdg_cannot_recompute_vertex_p(%struct.graph* %13, i32 %14), !dbg !5045
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5045
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !5046

if.then6:                                         ; preds = %if.end
  %15 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !5047
  store i8 1, i8* %15, align 1, !dbg !5049
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @remaining_stmts, align 8, !dbg !5050
  %17 = load i32, i32* %v.addr, align 4, !dbg !5051
  %call7 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %16, i32 %17), !dbg !5052
  br label %if.end8, !dbg !5053

if.end8:                                          ; preds = %if.then, %if.then6, %if.end
  ret void, !dbg !5054
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5055 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5059, metadata !DIExpression()), !dbg !5060
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5061
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5062
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5063
  %bf.load = load i32, i32* %1, align 8, !dbg !5063
  %bf.clear = and i32 %bf.load, 255, !dbg !5063
  ret i32 %bf.clear, !dbg !5064
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !5065 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5068, metadata !DIExpression()), !dbg !5069
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !5070, metadata !DIExpression()), !dbg !5071
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5072
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5074
  %tobool = icmp ne i8 %call, 0, !dbg !5074
  br i1 %tobool, label %if.end, label %if.then, !dbg !5075

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5076
  br label %return, !dbg !5076

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5077
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5078
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5079
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !5080
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !5080
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !5081
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5082
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !5082
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !5084

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5085
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !5085
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !5086
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !5086
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5087
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5088
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !5089
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !5090
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !5091

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5092
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !5092
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5093
  br label %return, !dbg !5093

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5094
  br label %return, !dbg !5094

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5095
  ret %struct.ssa_use_operand_d* %8, !dbg !5095
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5096 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5100, metadata !DIExpression()), !dbg !5101
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5102
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5103
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5103
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5104
  ret %union.tree_node* %2, !dbg !5105
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !5106 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5109, metadata !DIExpression()), !dbg !5110
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5111
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5112
  %cmp = icmp eq i32 %call, 6, !dbg !5113
  %conv = zext i1 %cmp to i32, !dbg !5113
  %conv1 = trunc i32 %conv to i8, !dbg !5112
  ret i8 %conv1, !dbg !5114
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_upstream_mem_writes(i32 %u) #0 !dbg !5115 {
entry:
  %u.addr = alloca i32, align 4
  store i32 %u, i32* %u.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %u.addr, metadata !5118, metadata !DIExpression()), !dbg !5119
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @upstream_mem_writes, align 8, !dbg !5120
  %1 = load i32, i32* %u.addr, align 4, !dbg !5121
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %0, i32 %1), !dbg !5122
  %conv = trunc i32 %call to i8, !dbg !5122
  ret i8 %conv, !dbg !5123
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5124 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5127, metadata !DIExpression()), !dbg !5128
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5129
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5130
  ret %union.tree_node* %call, !dbg !5131
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !5132 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5136, metadata !DIExpression()), !dbg !5137
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5138, metadata !DIExpression()), !dbg !5139
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5140
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5140
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5140
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5141
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !5142
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5143
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5144
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5145
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !5145
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !5146
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5146
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5147
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !5148
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5149
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5150
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !5152
  %tobool = icmp ne i8 %call, 0, !dbg !5152
  br i1 %tobool, label %if.then, label %if.end, !dbg !5153

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5154
  br label %return, !dbg !5154

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5155
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !5156
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !5156
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5157
  br label %return, !dbg !5157

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5158
  ret %struct.ssa_use_operand_d* %9, !dbg !5158
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5159 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5164, metadata !DIExpression()), !dbg !5165
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5166
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5167
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5167
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5168
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5169
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5169
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !5170
  %conv = zext i1 %cmp to i32, !dbg !5170
  %conv1 = trunc i32 %conv to i8, !dbg !5171
  ret i8 %conv1, !dbg !5172
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5173 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5176, metadata !DIExpression()), !dbg !5177
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !5178, metadata !DIExpression()), !dbg !5179
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5180
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5181
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5181
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !5179
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !5182
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5183
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5183
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5184
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !5185
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !5186
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5187
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !5189
  %tobool = icmp ne i8 %call, 0, !dbg !5189
  br i1 %tobool, label %if.then, label %if.end, !dbg !5190

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5191
  br label %return, !dbg !5191

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5192
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !5193
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !5193
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5194
  br label %return, !dbg !5194

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5195
  ret %struct.ssa_use_operand_d* %8, !dbg !5195
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !5196 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5197, metadata !DIExpression()), !dbg !5198
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5199
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5200
  %cmp = icmp uge i32 %call, 6, !dbg !5201
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5202

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5203
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5204
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5205
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5206
  %land.ext = zext i1 %2 to i32, !dbg !5202
  %conv = trunc i32 %land.ext to i8, !dbg !5200
  ret i8 %conv, !dbg !5207
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5208 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5211, metadata !DIExpression()), !dbg !5212
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5213, metadata !DIExpression()), !dbg !5214
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5215
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5217
  %tobool = icmp ne i8 %call, 0, !dbg !5217
  br i1 %tobool, label %if.then, label %if.else, !dbg !5218

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5219
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5221
  %2 = load i32, i32* %i.addr, align 4, !dbg !5222
  %idxprom = zext i32 %2 to i64, !dbg !5221
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5221
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5221
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5223
  br label %return, !dbg !5223

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5224
  br label %return, !dbg !5224

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5225
  ret %union.tree_node* %4, !dbg !5225
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5226 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5227, metadata !DIExpression()), !dbg !5228
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5229
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5230
  %cmp = icmp uge i32 %call, 1, !dbg !5231
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5232

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5233
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5234
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5235
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5236
  %land.ext = zext i1 %2 to i32, !dbg !5232
  %conv = trunc i32 %land.ext to i8, !dbg !5230
  ret i8 %conv, !dbg !5237
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5238 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5241, metadata !DIExpression()), !dbg !5242
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5243, metadata !DIExpression()), !dbg !5244
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5245
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5246
  %idxprom = zext i32 %call to i64, !dbg !5247
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5247
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5247
  store i64 %1, i64* %off, align 8, !dbg !5248
  %2 = load i64, i64* %off, align 8, !dbg !5249
  %cmp = icmp ne i64 %2, 0, !dbg !5249
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5249

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !5249
  br label %cond.end, !dbg !5249

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5249

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5249
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5250
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5251
  %5 = load i64, i64* %off, align 8, !dbg !5252
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5253
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5254
  ret %union.tree_node** %6, !dbg !5255
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5256 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5259, metadata !DIExpression()), !dbg !5260
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5261
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5262
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5263
  ret i32 %call1, !dbg !5264
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5265 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5268, metadata !DIExpression()), !dbg !5269
  %0 = load i32, i32* %code.addr, align 4, !dbg !5270
  %idxprom = zext i32 %0 to i64, !dbg !5271
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5271
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5271
  ret i32 %1, !dbg !5272
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !5273 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5276, metadata !DIExpression()), !dbg !5277
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5278, metadata !DIExpression()), !dbg !5279
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5280
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !5281
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !5279
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5282
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !5282
  br i1 %tobool, label %if.end, label %if.then, !dbg !5284

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !5285
  br label %return, !dbg !5285

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5286
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !5287
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5287
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !5288
  br label %return, !dbg !5288

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !5289
  ret %struct.loop* %4, !dbg !5289
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rdg_cannot_recompute_vertex_p(%struct.graph* %rdg, i32 %v) #0 !dbg !5290 {
entry:
  %retval = alloca i8, align 1
  %rdg.addr = alloca %struct.graph*, align 8
  %v.addr = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !5293, metadata !DIExpression()), !dbg !5294
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !5295, metadata !DIExpression()), !dbg !5296
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5297
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %0, i32 0, i32 1, !dbg !5297
  %1 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !5297
  %2 = load i32, i32* %v.addr, align 4, !dbg !5297
  %idxprom = sext i32 %2 to i64, !dbg !5297
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %1, i64 %idxprom, !dbg !5297
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !5297
  %3 = load i8*, i8** %data, align 8, !dbg !5297
  %4 = bitcast i8* %3 to %struct.rdg_vertex*, !dbg !5297
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %4, i32 0, i32 1, !dbg !5297
  %5 = load i8, i8* %has_mem_write, align 8, !dbg !5297
  %tobool = icmp ne i8 %5, 0, !dbg !5297
  br i1 %tobool, label %if.then, label %if.end, !dbg !5299

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5300
  br label %return, !dbg !5300

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5301
  br label %return, !dbg !5301

return:                                           ; preds = %if.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !5302
  ret i8 %6, !dbg !5302
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !5303 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5306, metadata !DIExpression()), !dbg !5307
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5308
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5309
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !5310
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5310
  ret %struct.basic_block_def* %1, !dbg !5311
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !5312 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5320, metadata !DIExpression()), !dbg !5321
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !5322, metadata !DIExpression()), !dbg !5323
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !5324, metadata !DIExpression()), !dbg !5325
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5326, metadata !DIExpression()), !dbg !5327
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !5328
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !5329
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5329
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5330
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !5331
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !5332
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5333
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !5334
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !5335
  br label %while.body, !dbg !5336

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5337
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !5340
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !5340
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !5337
  br i1 %tobool, label %if.end, label %if.then, !dbg !5341

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5342
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !5344
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !5345
  br label %while.end, !dbg !5346

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5347
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !5349
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !5349
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !5350
  %9 = load i32, i32* %indx, align 8, !dbg !5350
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !5351
  %div = udiv i32 %10, 128, !dbg !5352
  %cmp = icmp uge i32 %9, %div, !dbg !5353
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5354

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !5355

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5356
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !5357
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !5357
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !5358
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5358
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5359
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !5360
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !5361
  br label %while.body, !dbg !5336, !llvm.loop !5362

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5364
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5366
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !5366
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !5367
  %17 = load i32, i32* %indx9, align 8, !dbg !5367
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !5368
  %div10 = udiv i32 %18, 128, !dbg !5369
  %cmp11 = icmp ne i32 %17, %div10, !dbg !5370
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5371

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5372
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !5373
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !5373
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !5374
  %21 = load i32, i32* %indx14, align 8, !dbg !5374
  %mul = mul i32 %21, 128, !dbg !5375
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !5376
  br label %if.end15, !dbg !5377

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !5378
  %div16 = udiv i32 %22, 64, !dbg !5379
  %rem = urem i32 %div16, 2, !dbg !5380
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5381
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !5382
  store i32 %rem, i32* %word_no, align 8, !dbg !5383
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5384
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !5385
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !5385
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !5386
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5387
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !5388
  %27 = load i32, i32* %word_no18, align 8, !dbg !5388
  %idxprom = zext i32 %27 to i64, !dbg !5384
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !5384
  %28 = load i64, i64* %arrayidx, align 8, !dbg !5384
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5389
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !5390
  store i64 %28, i64* %bits19, align 8, !dbg !5391
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !5392
  %rem20 = urem i32 %30, 64, !dbg !5393
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5394
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !5395
  %32 = load i64, i64* %bits21, align 8, !dbg !5396
  %sh_prom = zext i32 %rem20 to i64, !dbg !5396
  %shr = lshr i64 %32, %sh_prom, !dbg !5396
  store i64 %shr, i64* %bits21, align 8, !dbg !5396
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5397
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !5398
  %34 = load i64, i64* %bits22, align 8, !dbg !5398
  %tobool23 = icmp ne i64 %34, 0, !dbg !5399
  %lnot = xor i1 %tobool23, true, !dbg !5399
  %lnot.ext = zext i1 %lnot to i32, !dbg !5399
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !5400
  %add = add i32 %35, %lnot.ext, !dbg !5400
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !5400
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !5401
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !5402
  store i32 %36, i32* %37, align 4, !dbg !5403
  ret void, !dbg !5404
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5405 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5408, metadata !DIExpression()), !dbg !5409
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5410, metadata !DIExpression()), !dbg !5411
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5412
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5414
  %1 = load i64, i64* %bits, align 8, !dbg !5414
  %tobool = icmp ne i64 %1, 0, !dbg !5412
  br i1 %tobool, label %if.then, label %if.end, !dbg !5415

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !5416

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !5417), !dbg !5419
  br label %while.cond, !dbg !5420

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5421
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !5422
  %3 = load i64, i64* %bits1, align 8, !dbg !5422
  %and = and i64 %3, 1, !dbg !5423
  %tobool2 = icmp ne i64 %and, 0, !dbg !5424
  %lnot = xor i1 %tobool2, true, !dbg !5424
  br i1 %lnot, label %while.body, label %while.end, !dbg !5420

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5425
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !5427
  %5 = load i64, i64* %bits3, align 8, !dbg !5428
  %shr = lshr i64 %5, 1, !dbg !5428
  store i64 %shr, i64* %bits3, align 8, !dbg !5428
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !5429
  %7 = load i32, i32* %6, align 4, !dbg !5430
  %add = add i32 %7, 1, !dbg !5430
  store i32 %add, i32* %6, align 4, !dbg !5430
  br label %while.cond, !dbg !5420, !llvm.loop !5431

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !5433
  br label %return, !dbg !5433

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !5434
  %9 = load i32, i32* %8, align 4, !dbg !5435
  %add4 = add i32 %9, 64, !dbg !5436
  %sub = sub i32 %add4, 1, !dbg !5437
  %div = udiv i32 %sub, 64, !dbg !5438
  %mul = mul i32 %div, 64, !dbg !5439
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !5440
  store i32 %mul, i32* %10, align 4, !dbg !5441
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5442
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !5443
  %12 = load i32, i32* %word_no, align 8, !dbg !5444
  %inc = add i32 %12, 1, !dbg !5444
  store i32 %inc, i32* %word_no, align 8, !dbg !5444
  br label %while.body6, !dbg !5445

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !5446

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5448
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !5449
  %14 = load i32, i32* %word_no8, align 8, !dbg !5449
  %cmp = icmp ne i32 %14, 2, !dbg !5450
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !5446

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5451
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5453
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !5453
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !5454
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5455
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !5456
  %18 = load i32, i32* %word_no11, align 8, !dbg !5456
  %idxprom = zext i32 %18 to i64, !dbg !5451
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !5451
  %19 = load i64, i64* %arrayidx, align 8, !dbg !5451
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5457
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !5458
  store i64 %19, i64* %bits12, align 8, !dbg !5459
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5460
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !5462
  %22 = load i64, i64* %bits13, align 8, !dbg !5462
  %tobool14 = icmp ne i64 %22, 0, !dbg !5460
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5463

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !5464

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !5465
  %24 = load i32, i32* %23, align 4, !dbg !5466
  %add17 = add i32 %24, 64, !dbg !5466
  store i32 %add17, i32* %23, align 4, !dbg !5466
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5467
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !5468
  %26 = load i32, i32* %word_no18, align 8, !dbg !5469
  %inc19 = add i32 %26, 1, !dbg !5469
  store i32 %inc19, i32* %word_no18, align 8, !dbg !5469
  br label %while.cond7, !dbg !5446, !llvm.loop !5470

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5472
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !5473
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !5473
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !5474
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5474
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5475
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !5476
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !5477
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5478
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !5480
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !5480
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !5478
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5481

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !5482
  br label %return, !dbg !5482

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5483
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !5484
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !5484
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !5485
  %35 = load i32, i32* %indx, align 8, !dbg !5485
  %mul28 = mul i32 %35, 128, !dbg !5486
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !5487
  store i32 %mul28, i32* %36, align 4, !dbg !5488
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5489
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !5490
  store i32 0, i32* %word_no29, align 8, !dbg !5491
  br label %while.body6, !dbg !5445, !llvm.loop !5492

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !5494
  ret i8 %38, !dbg !5494
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rdg_has_similar_memory_accesses(%struct.graph* %rdg, i32 %v1, i32 %v2) #0 !dbg !5495 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %v1.addr = alloca i32, align 4
  %v2.addr = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !5498, metadata !DIExpression()), !dbg !5499
  store i32 %v1, i32* %v1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v1.addr, metadata !5500, metadata !DIExpression()), !dbg !5501
  store i32 %v2, i32* %v2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v2.addr, metadata !5502, metadata !DIExpression()), !dbg !5503
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5504
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %0, i32 0, i32 1, !dbg !5504
  %1 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !5504
  %2 = load i32, i32* %v1.addr, align 4, !dbg !5504
  %idxprom = sext i32 %2 to i64, !dbg !5504
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %1, i64 %idxprom, !dbg !5504
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !5504
  %3 = load i8*, i8** %data, align 8, !dbg !5504
  %4 = bitcast i8* %3 to %struct.rdg_vertex*, !dbg !5504
  %stmt = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %4, i32 0, i32 0, !dbg !5504
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5504
  %6 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5505
  %vertices1 = getelementptr inbounds %struct.graph, %struct.graph* %6, i32 0, i32 1, !dbg !5505
  %7 = load %struct.vertex*, %struct.vertex** %vertices1, align 8, !dbg !5505
  %8 = load i32, i32* %v2.addr, align 4, !dbg !5505
  %idxprom2 = sext i32 %8 to i64, !dbg !5505
  %arrayidx3 = getelementptr inbounds %struct.vertex, %struct.vertex* %7, i64 %idxprom2, !dbg !5505
  %data4 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx3, i32 0, i32 4, !dbg !5505
  %9 = load i8*, i8** %data4, align 8, !dbg !5505
  %10 = bitcast i8* %9 to %struct.rdg_vertex*, !dbg !5505
  %stmt5 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %10, i32 0, i32 0, !dbg !5505
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt5, align 8, !dbg !5505
  %call = call zeroext i8 @have_similar_memory_accesses(%union.gimple_statement_d* %5, %union.gimple_statement_d* %11), !dbg !5506
  ret i8 %call, !dbg !5507
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdg_flag_all_uses(%struct.graph* %rdg, i32 %u, %struct.bitmap_head_def* %partition, %struct.bitmap_head_def* %loops, %struct.bitmap_head_def* %processed, i8* %part_has_writes) #0 !dbg !5508 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %u.addr = alloca i32, align 4
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %loops.addr = alloca %struct.bitmap_head_def*, align 8
  %processed.addr = alloca %struct.bitmap_head_def*, align 8
  %part_has_writes.addr = alloca i8*, align 8
  %e = alloca %struct.graph_edge*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !5509, metadata !DIExpression()), !dbg !5510
  store i32 %u, i32* %u.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %u.addr, metadata !5511, metadata !DIExpression()), !dbg !5512
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !5513, metadata !DIExpression()), !dbg !5514
  store %struct.bitmap_head_def* %loops, %struct.bitmap_head_def** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %loops.addr, metadata !5515, metadata !DIExpression()), !dbg !5516
  store %struct.bitmap_head_def* %processed, %struct.bitmap_head_def** %processed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %processed.addr, metadata !5517, metadata !DIExpression()), !dbg !5518
  store i8* %part_has_writes, i8** %part_has_writes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %part_has_writes.addr, metadata !5519, metadata !DIExpression()), !dbg !5520
  call void @llvm.dbg.declare(metadata %struct.graph_edge** %e, metadata !5521, metadata !DIExpression()), !dbg !5522
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5523
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %0, i32 0, i32 1, !dbg !5525
  %1 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !5525
  %2 = load i32, i32* %u.addr, align 4, !dbg !5526
  %idxprom = sext i32 %2 to i64, !dbg !5523
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %1, i64 %idxprom, !dbg !5523
  %succ = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 1, !dbg !5527
  %3 = load %struct.graph_edge*, %struct.graph_edge** %succ, align 8, !dbg !5527
  store %struct.graph_edge* %3, %struct.graph_edge** %e, align 8, !dbg !5528
  br label %for.cond, !dbg !5529

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !5530
  %tobool = icmp ne %struct.graph_edge* %4, null, !dbg !5532
  br i1 %tobool, label %for.body, label %for.end, !dbg !5532

for.body:                                         ; preds = %for.cond
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !5533
  %6 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !5535
  %dest = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %6, i32 0, i32 1, !dbg !5536
  %7 = load i32, i32* %dest, align 4, !dbg !5536
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %5, i32 %7), !dbg !5537
  %tobool1 = icmp ne i32 %call, 0, !dbg !5537
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5538

if.then:                                          ; preds = %for.body
  %8 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5539
  %9 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !5541
  %dest2 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %9, i32 0, i32 1, !dbg !5542
  %10 = load i32, i32* %dest2, align 4, !dbg !5542
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !5543
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !5544
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !5545
  %14 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !5546
  call void @rdg_flag_vertex_and_dependent(%struct.graph* %8, i32 %10, %struct.bitmap_head_def* %11, %struct.bitmap_head_def* %12, %struct.bitmap_head_def* %13, i8* %14), !dbg !5547
  %15 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5548
  %16 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !5549
  %dest3 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %16, i32 0, i32 1, !dbg !5550
  %17 = load i32, i32* %dest3, align 4, !dbg !5550
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !5551
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops.addr, align 8, !dbg !5552
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %processed.addr, align 8, !dbg !5553
  %21 = load i8*, i8** %part_has_writes.addr, align 8, !dbg !5554
  call void @rdg_flag_all_uses(%struct.graph* %15, i32 %17, %struct.bitmap_head_def* %18, %struct.bitmap_head_def* %19, %struct.bitmap_head_def* %20, i8* %21), !dbg !5555
  br label %if.end, !dbg !5556

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5557

for.inc:                                          ; preds = %if.end
  %22 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !5558
  %succ_next = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %22, i32 0, i32 3, !dbg !5559
  %23 = load %struct.graph_edge*, %struct.graph_edge** %succ_next, align 8, !dbg !5559
  store %struct.graph_edge* %23, %struct.graph_edge** %e, align 8, !dbg !5560
  br label %for.cond, !dbg !5561, !llvm.loop !5562

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5564
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_unordered_remove(%struct.VEC_int_base* %vec_, i32 %ix_) #0 !dbg !5565 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  %obj_ = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5568, metadata !DIExpression()), !dbg !5569
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5570, metadata !DIExpression()), !dbg !5569
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !5571, metadata !DIExpression()), !dbg !5569
  call void @llvm.dbg.declare(metadata i32* %obj_, metadata !5572, metadata !DIExpression()), !dbg !5569
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5569
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5569
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %1, i32 0, i32 0, !dbg !5569
  %2 = load i32, i32* %num, align 4, !dbg !5569
  %cmp = icmp ult i32 %0, %2, !dbg !5569
  %conv = zext i1 %cmp to i32, !dbg !5569
  %3 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5569
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %3, i32 0, i32 2, !dbg !5569
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5569
  %idxprom = zext i32 %4 to i64, !dbg !5569
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5569
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !5569
  %5 = load i32*, i32** %slot_, align 8, !dbg !5569
  %6 = load i32, i32* %5, align 4, !dbg !5569
  store i32 %6, i32* %obj_, align 4, !dbg !5569
  %7 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5569
  %vec1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %7, i32 0, i32 2, !dbg !5569
  %8 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5569
  %num2 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %8, i32 0, i32 0, !dbg !5569
  %9 = load i32, i32* %num2, align 4, !dbg !5569
  %dec = add i32 %9, -1, !dbg !5569
  store i32 %dec, i32* %num2, align 4, !dbg !5569
  %idxprom3 = zext i32 %dec to i64, !dbg !5569
  %arrayidx4 = getelementptr inbounds [1 x i32], [1 x i32]* %vec1, i64 0, i64 %idxprom3, !dbg !5569
  %10 = load i32, i32* %arrayidx4, align 4, !dbg !5569
  %11 = load i32*, i32** %slot_, align 8, !dbg !5569
  store i32 %10, i32* %11, align 4, !dbg !5569
  %12 = load i32, i32* %obj_, align 4, !dbg !5569
  ret i32 %12, !dbg !5569
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5573 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5576, metadata !DIExpression()), !dbg !5577
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5578, metadata !DIExpression()), !dbg !5579
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5580
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5581
  %1 = load i64, i64* %bits, align 8, !dbg !5582
  %shr = lshr i64 %1, 1, !dbg !5582
  store i64 %shr, i64* %bits, align 8, !dbg !5582
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !5583
  %3 = load i32, i32* %2, align 4, !dbg !5584
  %add = add i32 %3, 1, !dbg !5584
  store i32 %add, i32* %2, align 4, !dbg !5584
  ret void, !dbg !5585
}

declare dso_local zeroext i8 @have_similar_memory_accesses(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @collect_condition_stmts(%struct.loop* %loop, %struct.VEC_gimple_heap** %conds) #0 !dbg !5586 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %conds.addr = alloca %struct.VEC_gimple_heap**, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %cond3 = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5589, metadata !DIExpression()), !dbg !5590
  store %struct.VEC_gimple_heap** %conds, %struct.VEC_gimple_heap*** %conds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %conds.addr, metadata !5591, metadata !DIExpression()), !dbg !5592
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5593, metadata !DIExpression()), !dbg !5594
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5595, metadata !DIExpression()), !dbg !5596
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !5597, metadata !DIExpression()), !dbg !5603
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5604
  %call = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %0), !dbg !5605
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !5603
  store i32 0, i32* %i, align 4, !dbg !5606
  br label %for.cond, !dbg !5608

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5609
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !5609
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5609

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5609
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %2, i32 0, i32 0, !dbg !5609
  br label %cond.end, !dbg !5609

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5609

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5609
  %3 = load i32, i32* %i, align 4, !dbg !5609
  %call1 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %3, %struct.edge_def** %e), !dbg !5609
  %tobool2 = icmp ne i32 %call1, 0, !dbg !5611
  br i1 %tobool2, label %for.body, label %for.end, !dbg !5611

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond3, metadata !5612, metadata !DIExpression()), !dbg !5614
  %4 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5615
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 0, !dbg !5616
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5616
  %call4 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %5), !dbg !5617
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %cond3, align 8, !dbg !5614
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond3, align 8, !dbg !5618
  %tobool5 = icmp ne %union.gimple_statement_d* %6, null, !dbg !5618
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5620

if.then:                                          ; preds = %for.body
  %7 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %conds.addr, align 8, !dbg !5621
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond3, align 8, !dbg !5621
  %call6 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %7, %union.gimple_statement_d* %8), !dbg !5621
  br label %if.end, !dbg !5621

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5622

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !5623
  %inc = add i32 %9, 1, !dbg !5623
  store i32 %inc, i32* %i, align 4, !dbg !5623
  br label %for.cond, !dbg !5624, !llvm.loop !5625

for.end:                                          ; preds = %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !5627
  ret void, !dbg !5628
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !5629 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !5632, metadata !DIExpression()), !dbg !5633
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5634
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5634
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5634
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5634
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !5634
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5634
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !5634
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5634

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5634
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5634
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5634
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5634
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !5634
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !5634
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !5634
  br label %cond.end, !dbg !5634

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5634

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5634
  %6 = load i32, i32* %num.addr, align 4, !dbg !5634
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !5634
  ret %struct.loop* %call, !dbg !5635
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) #0 !dbg !5636 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5639, metadata !DIExpression()), !dbg !5640
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5640
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !5640
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5640

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5640
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !5640
  %2 = load i32, i32* %num, align 8, !dbg !5640
  br label %cond.end, !dbg !5640

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5640

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5640
  ret i32 %cond, !dbg !5640
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %vec_) #0 !dbg !5641 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_ = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5645, metadata !DIExpression()), !dbg !5646
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_, metadata !5647, metadata !DIExpression()), !dbg !5646
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5646
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !5646
  %1 = load i32, i32* %num, align 8, !dbg !5646
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5646
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 2, !dbg !5646
  %3 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5646
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %3, i32 0, i32 0, !dbg !5646
  %4 = load i32, i32* %num1, align 8, !dbg !5646
  %dec = add i32 %4, -1, !dbg !5646
  store i32 %dec, i32* %num1, align 8, !dbg !5646
  %idxprom = zext i32 %dec to i64, !dbg !5646
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !5646
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !5646
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %obj_, align 8, !dbg !5646
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_, align 8, !dbg !5646
  ret %union.gimple_statement_d* %6, !dbg !5646
}

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !5648 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5654, metadata !DIExpression()), !dbg !5655
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5656, metadata !DIExpression()), !dbg !5655
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !5657, metadata !DIExpression()), !dbg !5655
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5658
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5658
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5658

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5658
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5658
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5658
  %3 = load i32, i32* %num, align 8, !dbg !5658
  %cmp = icmp ult i32 %1, %3, !dbg !5658
  br i1 %cmp, label %if.then, label %if.else, !dbg !5655

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5660
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !5660
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5660
  %idxprom = zext i32 %5 to i64, !dbg !5660
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5660
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5660
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !5660
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !5660
  store i32 1, i32* %retval, align 4, !dbg !5660
  br label %return, !dbg !5660

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !5662
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !5662
  store i32 0, i32* %retval, align 4, !dbg !5662
  br label %return, !dbg !5662

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5655
  ret i32 %9, !dbg !5655
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !5664 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !5667, metadata !DIExpression()), !dbg !5668
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !5669, metadata !DIExpression()), !dbg !5668
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5668
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !5668
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5668
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !5668
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !5668
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5668

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5668
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !5668
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !5668
  br label %cond.end, !dbg !5668

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5668

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5668
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !5668
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !5668
  ret %union.gimple_statement_d** %call1, !dbg !5668
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !5670 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !5674, metadata !DIExpression()), !dbg !5675
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5676
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !5676
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !5676
  br i1 %tobool, label %if.then, label %if.end, !dbg !5675

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5676
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !5676
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !5676
  call void @free(i8* %4), !dbg !5676
  br label %if.end, !dbg !5676

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5675
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !5675
  ret void, !dbg !5675
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !5678 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !5681, metadata !DIExpression()), !dbg !5682
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5683, metadata !DIExpression()), !dbg !5682
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5684, metadata !DIExpression()), !dbg !5682
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5682
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !5682
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !5682
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5682

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5682
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !5682
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !5682
  br label %cond.end, !dbg !5682

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5682

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5682
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5682
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !5682
  %tobool1 = icmp ne i32 %call, 0, !dbg !5682
  %lnot = xor i1 %tobool1, true, !dbg !5682
  %lnot.ext = zext i1 %lnot to i32, !dbg !5682
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5682
  %5 = load i32, i32* %extend, align 4, !dbg !5685
  %tobool2 = icmp ne i32 %5, 0, !dbg !5685
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5682

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5685
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !5685
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !5685
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5685
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5685
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !5685
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5685
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !5685
  br label %if.end, !dbg !5685

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5682
  ret i32 %12, !dbg !5682
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !5687 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5690, metadata !DIExpression()), !dbg !5691
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !5692, metadata !DIExpression()), !dbg !5691
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !5693, metadata !DIExpression()), !dbg !5691
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5691
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !5691
  %1 = load i32, i32* %num, align 8, !dbg !5691
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5691
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !5691
  %3 = load i32, i32* %alloc, align 4, !dbg !5691
  %cmp = icmp ult i32 %1, %3, !dbg !5691
  %conv = zext i1 %cmp to i32, !dbg !5691
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5691
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !5691
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5691
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !5691
  %6 = load i32, i32* %num1, align 8, !dbg !5691
  %inc = add i32 %6, 1, !dbg !5691
  store i32 %inc, i32* %num1, align 8, !dbg !5691
  %idxprom = zext i32 %6 to i64, !dbg !5691
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !5691
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !5691
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !5691
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !5691
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !5691
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !5691
  ret %union.gimple_statement_d** %9, !dbg !5691
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !5694 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5697, metadata !DIExpression()), !dbg !5698
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5699, metadata !DIExpression()), !dbg !5698
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5698
  %cmp = icmp sge i32 %0, 0, !dbg !5698
  %conv = zext i1 %cmp to i32, !dbg !5698
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5698
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !5698
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5698

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5698
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !5698
  %3 = load i32, i32* %alloc, align 4, !dbg !5698
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5698
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !5698
  %5 = load i32, i32* %num, align 8, !dbg !5698
  %sub = sub i32 %3, %5, !dbg !5698
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5698
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5698
  %conv2 = zext i1 %cmp1 to i32, !dbg !5698
  br label %cond.end, !dbg !5698

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5698
  %tobool3 = icmp ne i32 %7, 0, !dbg !5698
  %lnot = xor i1 %tobool3, true, !dbg !5698
  %lnot.ext = zext i1 %lnot to i32, !dbg !5698
  br label %cond.end, !dbg !5698

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5698
  ret i32 %cond, !dbg !5698
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitmap_heap_reserve(%struct.VEC_bitmap_heap** %vec_, i32 %alloc_) #0 !dbg !5700 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_bitmap_heap** %vec_, %struct.VEC_bitmap_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_heap*** %vec_.addr, metadata !5703, metadata !DIExpression()), !dbg !5704
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5705, metadata !DIExpression()), !dbg !5704
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5706, metadata !DIExpression()), !dbg !5704
  %0 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !5704
  %1 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %0, align 8, !dbg !5704
  %tobool = icmp ne %struct.VEC_bitmap_heap* %1, null, !dbg !5704
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5704

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !5704
  %3 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %2, align 8, !dbg !5704
  %base = getelementptr inbounds %struct.VEC_bitmap_heap, %struct.VEC_bitmap_heap* %3, i32 0, i32 0, !dbg !5704
  br label %cond.end, !dbg !5704

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5704

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5704
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5704
  %call = call i32 @VEC_bitmap_base_space(%struct.VEC_bitmap_base* %cond, i32 %4), !dbg !5704
  %tobool1 = icmp ne i32 %call, 0, !dbg !5704
  %lnot = xor i1 %tobool1, true, !dbg !5704
  %lnot.ext = zext i1 %lnot to i32, !dbg !5704
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5704
  %5 = load i32, i32* %extend, align 4, !dbg !5707
  %tobool2 = icmp ne i32 %5, 0, !dbg !5707
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5704

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !5707
  %7 = load %struct.VEC_bitmap_heap*, %struct.VEC_bitmap_heap** %6, align 8, !dbg !5707
  %8 = bitcast %struct.VEC_bitmap_heap* %7 to i8*, !dbg !5707
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5707
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5707
  %10 = bitcast i8* %call3 to %struct.VEC_bitmap_heap*, !dbg !5707
  %11 = load %struct.VEC_bitmap_heap**, %struct.VEC_bitmap_heap*** %vec_.addr, align 8, !dbg !5707
  store %struct.VEC_bitmap_heap* %10, %struct.VEC_bitmap_heap** %11, align 8, !dbg !5707
  br label %if.end, !dbg !5707

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5704
  ret i32 %12, !dbg !5704
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def** @VEC_bitmap_base_quick_push(%struct.VEC_bitmap_base* %vec_, %struct.bitmap_head_def* %obj_) #0 !dbg !5709 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_base*, align 8
  %obj_.addr = alloca %struct.bitmap_head_def*, align 8
  %slot_ = alloca %struct.bitmap_head_def**, align 8
  store %struct.VEC_bitmap_base* %vec_, %struct.VEC_bitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_base** %vec_.addr, metadata !5713, metadata !DIExpression()), !dbg !5714
  store %struct.bitmap_head_def* %obj_, %struct.bitmap_head_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %obj_.addr, metadata !5715, metadata !DIExpression()), !dbg !5714
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %slot_, metadata !5716, metadata !DIExpression()), !dbg !5714
  %0 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !5714
  %num = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %0, i32 0, i32 0, !dbg !5714
  %1 = load i32, i32* %num, align 8, !dbg !5714
  %2 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !5714
  %alloc = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %2, i32 0, i32 1, !dbg !5714
  %3 = load i32, i32* %alloc, align 4, !dbg !5714
  %cmp = icmp ult i32 %1, %3, !dbg !5714
  %conv = zext i1 %cmp to i32, !dbg !5714
  %4 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !5714
  %vec = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %4, i32 0, i32 2, !dbg !5714
  %5 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !5714
  %num1 = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %5, i32 0, i32 0, !dbg !5714
  %6 = load i32, i32* %num1, align 8, !dbg !5714
  %inc = add i32 %6, 1, !dbg !5714
  store i32 %inc, i32* %num1, align 8, !dbg !5714
  %idxprom = zext i32 %6 to i64, !dbg !5714
  %arrayidx = getelementptr inbounds [1 x %struct.bitmap_head_def*], [1 x %struct.bitmap_head_def*]* %vec, i64 0, i64 %idxprom, !dbg !5714
  store %struct.bitmap_head_def** %arrayidx, %struct.bitmap_head_def*** %slot_, align 8, !dbg !5714
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %obj_.addr, align 8, !dbg !5714
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %slot_, align 8, !dbg !5714
  store %struct.bitmap_head_def* %7, %struct.bitmap_head_def** %8, align 8, !dbg !5714
  %9 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %slot_, align 8, !dbg !5714
  ret %struct.bitmap_head_def** %9, !dbg !5714
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitmap_base_space(%struct.VEC_bitmap_base* %vec_, i32 %alloc_) #0 !dbg !5717 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_bitmap_base* %vec_, %struct.VEC_bitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_base** %vec_.addr, metadata !5720, metadata !DIExpression()), !dbg !5721
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5722, metadata !DIExpression()), !dbg !5721
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5721
  %cmp = icmp sge i32 %0, 0, !dbg !5721
  %conv = zext i1 %cmp to i32, !dbg !5721
  %1 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !5721
  %tobool = icmp ne %struct.VEC_bitmap_base* %1, null, !dbg !5721
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5721

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !5721
  %alloc = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %2, i32 0, i32 1, !dbg !5721
  %3 = load i32, i32* %alloc, align 4, !dbg !5721
  %4 = load %struct.VEC_bitmap_base*, %struct.VEC_bitmap_base** %vec_.addr, align 8, !dbg !5721
  %num = getelementptr inbounds %struct.VEC_bitmap_base, %struct.VEC_bitmap_base* %4, i32 0, i32 0, !dbg !5721
  %5 = load i32, i32* %num, align 8, !dbg !5721
  %sub = sub i32 %3, %5, !dbg !5721
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5721
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5721
  %conv2 = zext i1 %cmp1 to i32, !dbg !5721
  br label %cond.end, !dbg !5721

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5721
  %tobool3 = icmp ne i32 %7, 0, !dbg !5721
  %lnot = xor i1 %tobool3, true, !dbg !5721
  %lnot.ext = zext i1 %lnot to i32, !dbg !5721
  br label %cond.end, !dbg !5721

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5721
  ret i32 %cond, !dbg !5721
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_rw_in_rdg(%struct.graph* %rdg) #0 !dbg !5723 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %i = alloca i32, align 4
  %res = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !5726, metadata !DIExpression()), !dbg !5727
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5728, metadata !DIExpression()), !dbg !5729
  call void @llvm.dbg.declare(metadata i32* %res, metadata !5730, metadata !DIExpression()), !dbg !5731
  store i32 0, i32* %res, align 4, !dbg !5731
  store i32 0, i32* %i, align 4, !dbg !5732
  br label %for.cond, !dbg !5734

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5735
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5737
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %1, i32 0, i32 0, !dbg !5738
  %2 = load i32, i32* %n_vertices, align 8, !dbg !5738
  %cmp = icmp slt i32 %0, %2, !dbg !5739
  br i1 %cmp, label %for.body, label %for.end, !dbg !5740

for.body:                                         ; preds = %for.cond
  %3 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5741
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %3, i32 0, i32 1, !dbg !5741
  %4 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !5741
  %5 = load i32, i32* %i, align 4, !dbg !5741
  %idxprom = sext i32 %5 to i64, !dbg !5741
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %4, i64 %idxprom, !dbg !5741
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !5741
  %6 = load i8*, i8** %data, align 8, !dbg !5741
  %7 = bitcast i8* %6 to %struct.rdg_vertex*, !dbg !5741
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %7, i32 0, i32 1, !dbg !5741
  %8 = load i8, i8* %has_mem_write, align 8, !dbg !5741
  %tobool = icmp ne i8 %8, 0, !dbg !5741
  br i1 %tobool, label %if.then, label %if.end, !dbg !5744

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %res, align 4, !dbg !5745
  %inc = add nsw i32 %9, 1, !dbg !5745
  store i32 %inc, i32* %res, align 4, !dbg !5745
  br label %if.end, !dbg !5745

if.end:                                           ; preds = %if.then, %for.body
  %10 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5746
  %vertices1 = getelementptr inbounds %struct.graph, %struct.graph* %10, i32 0, i32 1, !dbg !5746
  %11 = load %struct.vertex*, %struct.vertex** %vertices1, align 8, !dbg !5746
  %12 = load i32, i32* %i, align 4, !dbg !5746
  %idxprom2 = sext i32 %12 to i64, !dbg !5746
  %arrayidx3 = getelementptr inbounds %struct.vertex, %struct.vertex* %11, i64 %idxprom2, !dbg !5746
  %data4 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx3, i32 0, i32 4, !dbg !5746
  %13 = load i8*, i8** %data4, align 8, !dbg !5746
  %14 = bitcast i8* %13 to %struct.rdg_vertex*, !dbg !5746
  %has_mem_reads = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %14, i32 0, i32 2, !dbg !5746
  %15 = load i8, i8* %has_mem_reads, align 1, !dbg !5746
  %tobool5 = icmp ne i8 %15, 0, !dbg !5746
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !5748

if.then6:                                         ; preds = %if.end
  %16 = load i32, i32* %res, align 4, !dbg !5749
  %inc7 = add nsw i32 %16, 1, !dbg !5749
  store i32 %inc7, i32* %res, align 4, !dbg !5749
  br label %if.end8, !dbg !5749

if.end8:                                          ; preds = %if.then6, %if.end
  br label %for.inc, !dbg !5750

for.inc:                                          ; preds = %if.end8
  %17 = load i32, i32* %i, align 4, !dbg !5751
  %inc9 = add nsw i32 %17, 1, !dbg !5751
  store i32 %inc9, i32* %i, align 4, !dbg !5751
  br label %for.cond, !dbg !5752, !llvm.loop !5753

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %res, align 4, !dbg !5755
  ret i32 %18, !dbg !5756
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_rw_in_partition(%struct.graph* %rdg, %struct.bitmap_head_def* %partition) #0 !dbg !5757 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %res = alloca i32, align 4
  %i = alloca i32, align 4
  %ii = alloca %struct.bitmap_iterator, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !5760, metadata !DIExpression()), !dbg !5761
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !5762, metadata !DIExpression()), !dbg !5763
  call void @llvm.dbg.declare(metadata i32* %res, metadata !5764, metadata !DIExpression()), !dbg !5765
  store i32 0, i32* %res, align 4, !dbg !5765
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5766, metadata !DIExpression()), !dbg !5767
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %ii, metadata !5768, metadata !DIExpression()), !dbg !5769
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !5770
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %ii, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !5770
  br label %for.cond, !dbg !5770

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %ii, i32* %i), !dbg !5772
  %tobool = icmp ne i8 %call, 0, !dbg !5770
  br i1 %tobool, label %for.body, label %for.end, !dbg !5770

for.body:                                         ; preds = %for.cond
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5774
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %1, i32 0, i32 1, !dbg !5774
  %2 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !5774
  %3 = load i32, i32* %i, align 4, !dbg !5774
  %idxprom = zext i32 %3 to i64, !dbg !5774
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %2, i64 %idxprom, !dbg !5774
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !5774
  %4 = load i8*, i8** %data, align 8, !dbg !5774
  %5 = bitcast i8* %4 to %struct.rdg_vertex*, !dbg !5774
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %5, i32 0, i32 1, !dbg !5774
  %6 = load i8, i8* %has_mem_write, align 8, !dbg !5774
  %tobool1 = icmp ne i8 %6, 0, !dbg !5774
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5777

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %res, align 4, !dbg !5778
  %inc = add nsw i32 %7, 1, !dbg !5778
  store i32 %inc, i32* %res, align 4, !dbg !5778
  br label %if.end, !dbg !5778

if.end:                                           ; preds = %if.then, %for.body
  %8 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5779
  %vertices2 = getelementptr inbounds %struct.graph, %struct.graph* %8, i32 0, i32 1, !dbg !5779
  %9 = load %struct.vertex*, %struct.vertex** %vertices2, align 8, !dbg !5779
  %10 = load i32, i32* %i, align 4, !dbg !5779
  %idxprom3 = zext i32 %10 to i64, !dbg !5779
  %arrayidx4 = getelementptr inbounds %struct.vertex, %struct.vertex* %9, i64 %idxprom3, !dbg !5779
  %data5 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx4, i32 0, i32 4, !dbg !5779
  %11 = load i8*, i8** %data5, align 8, !dbg !5779
  %12 = bitcast i8* %11 to %struct.rdg_vertex*, !dbg !5779
  %has_mem_reads = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %12, i32 0, i32 2, !dbg !5779
  %13 = load i8, i8* %has_mem_reads, align 1, !dbg !5779
  %tobool6 = icmp ne i8 %13, 0, !dbg !5779
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !5781

if.then7:                                         ; preds = %if.end
  %14 = load i32, i32* %res, align 4, !dbg !5782
  %inc8 = add nsw i32 %14, 1, !dbg !5782
  store i32 %inc8, i32* %res, align 4, !dbg !5782
  br label %if.end9, !dbg !5782

if.end9:                                          ; preds = %if.then7, %if.end
  br label %for.inc, !dbg !5783

for.inc:                                          ; preds = %if.end9
  call void @bmp_iter_next(%struct.bitmap_iterator* %ii, i32* %i), !dbg !5772
  br label %for.cond, !dbg !5772, !llvm.loop !5784

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %res, align 4, !dbg !5786
  ret i32 %15, !dbg !5787
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @generate_builtin(%struct.loop* %loop, %struct.bitmap_head_def* %partition, i8 zeroext %copy_p) #0 !dbg !5788 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %copy_p.addr = alloca i8, align 1
  %res = alloca i8, align 1
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  %write = alloca %union.gimple_statement_d*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %nb_iter = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp7 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp55 = alloca %struct.gimple_stmt_iterator, align 8
  %nbbs = alloca i32, align 4
  %src75 = alloca %struct.basic_block_def*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5789, metadata !DIExpression()), !dbg !5790
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !5791, metadata !DIExpression()), !dbg !5792
  store i8 %copy_p, i8* %copy_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %copy_p.addr, metadata !5793, metadata !DIExpression()), !dbg !5794
  call void @llvm.dbg.declare(metadata i8* %res, metadata !5795, metadata !DIExpression()), !dbg !5796
  store i8 0, i8* %res, align 1, !dbg !5796
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5797, metadata !DIExpression()), !dbg !5798
  call void @llvm.dbg.declare(metadata i32* %x, metadata !5799, metadata !DIExpression()), !dbg !5800
  store i32 0, i32* %x, align 4, !dbg !5800
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !5801, metadata !DIExpression()), !dbg !5803
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %write, metadata !5804, metadata !DIExpression()), !dbg !5805
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %write, align 8, !dbg !5805
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !5806, metadata !DIExpression()), !dbg !5807
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !5808, metadata !DIExpression()), !dbg !5809
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5810, metadata !DIExpression()), !dbg !5817
  call void @llvm.dbg.declare(metadata %union.tree_node** %nb_iter, metadata !5818, metadata !DIExpression()), !dbg !5819
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5820
  %call = call %union.tree_node* @number_of_exit_cond_executions(%struct.loop* %0), !dbg !5821
  store %union.tree_node* %call, %union.tree_node** %nb_iter, align 8, !dbg !5819
  %1 = load %union.tree_node*, %union.tree_node** %nb_iter, align 8, !dbg !5822
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !5822
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5824

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %nb_iter, align 8, !dbg !5825
  %3 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5826
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !5827
  br i1 %cmp, label %if.then, label %if.end, !dbg !5828

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !5829
  br label %return, !dbg !5829

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5830
  %call1 = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %4), !dbg !5831
  store %struct.basic_block_def** %call1, %struct.basic_block_def*** %bbs, align 8, !dbg !5832
  store i32 0, i32* %i, align 4, !dbg !5833
  br label %for.cond, !dbg !5835

for.cond:                                         ; preds = %for.inc36, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !5836
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5838
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 6, !dbg !5839
  %7 = load i32, i32* %num_nodes, align 4, !dbg !5839
  %cmp2 = icmp ult i32 %5, %7, !dbg !5840
  br i1 %cmp2, label %for.body, label %for.end38, !dbg !5841

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5842, metadata !DIExpression()), !dbg !5844
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5845
  %9 = load i32, i32* %i, align 4, !dbg !5846
  %idxprom = zext i32 %9 to i64, !dbg !5845
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %8, i64 %idxprom, !dbg !5845
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5845
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !5844
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5847
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %11), !dbg !5849
  %12 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5849
  %13 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5849
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false), !dbg !5849
  br label %for.cond3, !dbg !5850

for.cond3:                                        ; preds = %for.inc, %for.body
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5851
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5853
  %lnot = xor i1 %tobool5, true, !dbg !5853
  br i1 %lnot, label %for.body6, label %for.end, !dbg !5854

for.body6:                                        ; preds = %for.cond3
  %14 = load i32, i32* %x, align 4, !dbg !5855
  %inc = add i32 %14, 1, !dbg !5855
  store i32 %inc, i32* %x, align 4, !dbg !5855
  br label %for.inc, !dbg !5856

for.inc:                                          ; preds = %for.body6
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5857
  br label %for.cond3, !dbg !5858, !llvm.loop !5859

for.end:                                          ; preds = %for.cond3
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5861
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp7, %struct.basic_block_def* %15), !dbg !5863
  %16 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5863
  %17 = bitcast %struct.gimple_stmt_iterator* %tmp7 to i8*, !dbg !5863
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false), !dbg !5863
  br label %for.cond8, !dbg !5864

for.cond8:                                        ; preds = %for.inc34, %for.end
  %call9 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5865
  %tobool10 = icmp ne i8 %call9, 0, !dbg !5867
  %lnot11 = xor i1 %tobool10, true, !dbg !5867
  br i1 %lnot11, label %for.body12, label %for.end35, !dbg !5868

for.body12:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5869, metadata !DIExpression()), !dbg !5871
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5872
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt, align 8, !dbg !5871
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !5873
  %19 = load i32, i32* %x, align 4, !dbg !5875
  %inc14 = add i32 %19, 1, !dbg !5875
  store i32 %inc14, i32* %x, align 4, !dbg !5875
  %call15 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %18, i32 %19), !dbg !5876
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5876
  br i1 %tobool16, label %land.lhs.true, label %if.end33, !dbg !5877

land.lhs.true:                                    ; preds = %for.body12
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5878
  %call17 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %20), !dbg !5879
  %conv = zext i8 %call17 to i32, !dbg !5879
  %tobool18 = icmp ne i32 %conv, 0, !dbg !5879
  br i1 %tobool18, label %land.lhs.true19, label %if.end33, !dbg !5880

land.lhs.true19:                                  ; preds = %land.lhs.true
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5881
  %call20 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %21), !dbg !5882
  %call21 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call20), !dbg !5883
  %tobool22 = icmp ne i8 %call21, 0, !dbg !5883
  br i1 %tobool22, label %if.end33, label %if.then23, !dbg !5884

if.then23:                                        ; preds = %land.lhs.true19
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %write, align 8, !dbg !5885
  %cmp24 = icmp ne %union.gimple_statement_d* %22, null, !dbg !5888
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !5889

if.then26:                                        ; preds = %if.then23
  br label %end, !dbg !5890

if.end27:                                         ; preds = %if.then23
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5891
  store %union.gimple_statement_d* %23, %union.gimple_statement_d** %write, align 8, !dbg !5892
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5893
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5895
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 3, !dbg !5896
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !5896
  %cmp28 = icmp eq %struct.basic_block_def* %24, %26, !dbg !5897
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !5898

if.then30:                                        ; preds = %if.end27
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5899
  %call31 = call %union.tree_node* @number_of_latch_executions(%struct.loop* %27), !dbg !5900
  store %union.tree_node* %call31, %union.tree_node** %nb_iter, align 8, !dbg !5901
  br label %if.end32, !dbg !5902

if.end32:                                         ; preds = %if.then30, %if.end27
  br label %if.end33, !dbg !5903

if.end33:                                         ; preds = %if.end32, %land.lhs.true19, %land.lhs.true, %for.body12
  br label %for.inc34, !dbg !5904

for.inc34:                                        ; preds = %if.end33
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5905
  br label %for.cond8, !dbg !5906, !llvm.loop !5907

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36, !dbg !5909

for.inc36:                                        ; preds = %for.end35
  %28 = load i32, i32* %i, align 4, !dbg !5910
  %inc37 = add i32 %28, 1, !dbg !5910
  store i32 %inc37, i32* %i, align 4, !dbg !5910
  br label %for.cond, !dbg !5911, !llvm.loop !5912

for.end38:                                        ; preds = %for.cond
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %write, align 8, !dbg !5914
  %tobool39 = icmp ne %union.gimple_statement_d* %29, null, !dbg !5914
  br i1 %tobool39, label %if.end41, label %if.then40, !dbg !5916

if.then40:                                        ; preds = %for.end38
  br label %end, !dbg !5917

if.end41:                                         ; preds = %for.end38
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %write, align 8, !dbg !5918
  %call42 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %30), !dbg !5919
  store %union.tree_node* %call42, %union.tree_node** %op0, align 8, !dbg !5920
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %write, align 8, !dbg !5921
  %call43 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %31), !dbg !5922
  store %union.tree_node* %call43, %union.tree_node** %op1, align 8, !dbg !5923
  %32 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5924
  %base = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !5924
  %33 = bitcast %struct.tree_base* %base to i64*, !dbg !5924
  %bf.load = load i64, i64* %33, align 8, !dbg !5924
  %bf.clear = and i64 %bf.load, 65535, !dbg !5924
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5924
  %cmp44 = icmp eq i32 %bf.cast, 45, !dbg !5926
  br i1 %cmp44, label %if.end54, label %lor.lhs.false46, !dbg !5927

lor.lhs.false46:                                  ; preds = %if.end41
  %34 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5928
  %base47 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !5928
  %35 = bitcast %struct.tree_base* %base47 to i64*, !dbg !5928
  %bf.load48 = load i64, i64* %35, align 8, !dbg !5928
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !5928
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !5928
  %cmp51 = icmp eq i32 %bf.cast50, 47, !dbg !5929
  br i1 %cmp51, label %if.end54, label %if.then53, !dbg !5930

if.then53:                                        ; preds = %lor.lhs.false46
  br label %end, !dbg !5931

if.end54:                                         ; preds = %lor.lhs.false46, %if.end41
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5932
  %call56 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %36), !dbg !5933
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call56, i32 0, i32 0, !dbg !5934
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5934
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp55, %struct.basic_block_def* %37), !dbg !5935
  %38 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5935
  %39 = bitcast %struct.gimple_stmt_iterator* %tmp55 to i8*, !dbg !5935
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 24, i1 false), !dbg !5935
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %write, align 8, !dbg !5936
  %call57 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %40), !dbg !5938
  %cmp58 = icmp eq i32 %call57, 23, !dbg !5939
  br i1 %cmp58, label %land.lhs.true60, label %if.end68, !dbg !5940

land.lhs.true60:                                  ; preds = %if.end54
  %41 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5941
  %call61 = call i32 @integer_zerop(%union.tree_node* %41), !dbg !5942
  %tobool62 = icmp ne i32 %call61, 0, !dbg !5942
  br i1 %tobool62, label %if.then66, label %lor.lhs.false63, !dbg !5943

lor.lhs.false63:                                  ; preds = %land.lhs.true60
  %42 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5944
  %call64 = call i32 @real_zerop(%union.tree_node* %42), !dbg !5945
  %tobool65 = icmp ne i32 %call64, 0, !dbg !5945
  br i1 %tobool65, label %if.then66, label %if.end68, !dbg !5946

if.then66:                                        ; preds = %lor.lhs.false63, %land.lhs.true60
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %write, align 8, !dbg !5947
  %44 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5948
  %45 = load %union.tree_node*, %union.tree_node** %nb_iter, align 8, !dbg !5949
  %call67 = call zeroext i8 @generate_memset_zero(%union.gimple_statement_d* %43, %union.tree_node* %44, %union.tree_node* %45, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5950
  store i8 %call67, i8* %res, align 1, !dbg !5951
  br label %if.end68, !dbg !5952

if.end68:                                         ; preds = %if.then66, %lor.lhs.false63, %if.end54
  %46 = load i8, i8* %res, align 1, !dbg !5953
  %conv69 = zext i8 %46 to i32, !dbg !5953
  %tobool70 = icmp ne i32 %conv69, 0, !dbg !5953
  br i1 %tobool70, label %land.lhs.true71, label %if.end91, !dbg !5955

land.lhs.true71:                                  ; preds = %if.end68
  %47 = load i8, i8* %copy_p.addr, align 1, !dbg !5956
  %tobool72 = icmp ne i8 %47, 0, !dbg !5956
  br i1 %tobool72, label %if.end91, label %if.then73, !dbg !5957

if.then73:                                        ; preds = %land.lhs.true71
  call void @llvm.dbg.declare(metadata i32* %nbbs, metadata !5958, metadata !DIExpression()), !dbg !5960
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5961
  %num_nodes74 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 6, !dbg !5962
  %49 = load i32, i32* %num_nodes74, align 4, !dbg !5962
  store i32 %49, i32* %nbbs, align 4, !dbg !5960
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src75, metadata !5963, metadata !DIExpression()), !dbg !5964
  %50 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5965
  %call76 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %50), !dbg !5966
  %src77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call76, i32 0, i32 0, !dbg !5967
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %src77, align 8, !dbg !5967
  store %struct.basic_block_def* %51, %struct.basic_block_def** %src75, align 8, !dbg !5964
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !5968, metadata !DIExpression()), !dbg !5969
  %52 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5970
  %call78 = call %struct.edge_def* @single_exit(%struct.loop* %52), !dbg !5971
  %dest79 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call78, i32 0, i32 1, !dbg !5972
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %dest79, align 8, !dbg !5972
  store %struct.basic_block_def* %53, %struct.basic_block_def** %dest, align 8, !dbg !5969
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5973
  call void @prop_phis(%struct.basic_block_def* %54), !dbg !5974
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %src75, align 8, !dbg !5975
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5976
  %call80 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %55, %struct.basic_block_def* %56, i32 1), !dbg !5977
  %57 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5978
  call void @cancel_loop_tree(%struct.loop* %57), !dbg !5979
  store i32 0, i32* %i, align 4, !dbg !5980
  br label %for.cond81, !dbg !5982

for.cond81:                                       ; preds = %for.inc87, %if.then73
  %58 = load i32, i32* %i, align 4, !dbg !5983
  %59 = load i32, i32* %nbbs, align 4, !dbg !5985
  %cmp82 = icmp ult i32 %58, %59, !dbg !5986
  br i1 %cmp82, label %for.body84, label %for.end89, !dbg !5987

for.body84:                                       ; preds = %for.cond81
  %60 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5988
  %61 = load i32, i32* %i, align 4, !dbg !5989
  %idxprom85 = zext i32 %61 to i64, !dbg !5988
  %arrayidx86 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %60, i64 %idxprom85, !dbg !5988
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx86, align 8, !dbg !5988
  call void @delete_basic_block(%struct.basic_block_def* %62), !dbg !5990
  br label %for.inc87, !dbg !5990

for.inc87:                                        ; preds = %for.body84
  %63 = load i32, i32* %i, align 4, !dbg !5991
  %inc88 = add i32 %63, 1, !dbg !5991
  store i32 %inc88, i32* %i, align 4, !dbg !5991
  br label %for.cond81, !dbg !5992, !llvm.loop !5993

for.end89:                                        ; preds = %for.cond81
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5995
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5996
  %call90 = call %struct.basic_block_def* @recompute_dominator(i32 1, %struct.basic_block_def* %65), !dbg !5997
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %64, %struct.basic_block_def* %call90), !dbg !5998
  br label %if.end91, !dbg !5999

if.end91:                                         ; preds = %for.end89, %land.lhs.true71, %if.end68
  br label %end, !dbg !5956

end:                                              ; preds = %if.end91, %if.then53, %if.then40, %if.then26
  call void @llvm.dbg.label(metadata !6000), !dbg !6001
  %66 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !6002
  %67 = bitcast %struct.basic_block_def** %66 to i8*, !dbg !6002
  call void @free(i8* %67), !dbg !6003
  %68 = load i8, i8* %res, align 1, !dbg !6004
  store i8 %68, i8* %retval, align 1, !dbg !6005
  br label %return, !dbg !6005

return:                                           ; preds = %end, %if.then
  %69 = load i8, i8* %retval, align 1, !dbg !6006
  ret i8 %69, !dbg !6006
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @generate_loops_for_partition(%struct.loop* %loop, %struct.bitmap_head_def* %partition, i8 zeroext %copy_p) #0 !dbg !6007 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %partition.addr = alloca %struct.bitmap_head_def*, align 8
  %copy_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp14 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6008, metadata !DIExpression()), !dbg !6009
  store %struct.bitmap_head_def* %partition, %struct.bitmap_head_def** %partition.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %partition.addr, metadata !6010, metadata !DIExpression()), !dbg !6011
  store i8 %copy_p, i8* %copy_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %copy_p.addr, metadata !6012, metadata !DIExpression()), !dbg !6013
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6014, metadata !DIExpression()), !dbg !6015
  call void @llvm.dbg.declare(metadata i32* %x, metadata !6016, metadata !DIExpression()), !dbg !6017
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6018, metadata !DIExpression()), !dbg !6019
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !6020, metadata !DIExpression()), !dbg !6021
  %0 = load i8, i8* %copy_p.addr, align 1, !dbg !6022
  %tobool = icmp ne i8 %0, 0, !dbg !6022
  br i1 %tobool, label %if.then, label %if.end, !dbg !6024

if.then:                                          ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6025
  %call = call %struct.loop* @copy_loop_before(%struct.loop* %1), !dbg !6027
  store %struct.loop* %call, %struct.loop** %loop.addr, align 8, !dbg !6028
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6029
  %call1 = call %struct.basic_block_def* @create_preheader(%struct.loop* %2, i32 1), !dbg !6030
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6031
  call void @create_bb_after_loop(%struct.loop* %3), !dbg !6032
  br label %if.end, !dbg !6033

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6034
  %cmp = icmp eq %struct.loop* %4, null, !dbg !6036
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !6037

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6038
  br label %return, !dbg !6038

if.end3:                                          ; preds = %if.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6039
  %call4 = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %5), !dbg !6040
  store %struct.basic_block_def** %call4, %struct.basic_block_def*** %bbs, align 8, !dbg !6041
  store i32 0, i32* %x, align 4, !dbg !6042
  store i32 0, i32* %i, align 4, !dbg !6044
  br label %for.cond, !dbg !6045

for.cond:                                         ; preds = %for.inc, %if.end3
  %6 = load i32, i32* %i, align 4, !dbg !6046
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6048
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 6, !dbg !6049
  %8 = load i32, i32* %num_nodes, align 4, !dbg !6049
  %cmp5 = icmp ult i32 %6, %8, !dbg !6050
  br i1 %cmp5, label %for.body, label %for.end31, !dbg !6051

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6052, metadata !DIExpression()), !dbg !6054
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !6055
  %10 = load i32, i32* %i, align 4, !dbg !6056
  %idxprom = zext i32 %10 to i64, !dbg !6055
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %9, i64 %idxprom, !dbg !6055
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !6055
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !6054
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6057
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %12), !dbg !6059
  %13 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6059
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6059
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !6059
  br label %for.cond6, !dbg !6060

for.cond6:                                        ; preds = %if.end13, %for.body
  %call7 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6061
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6063
  %lnot = xor i1 %tobool8, true, !dbg !6063
  br i1 %lnot, label %for.body9, label %for.end, !dbg !6064

for.body9:                                        ; preds = %for.cond6
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !6065
  %16 = load i32, i32* %x, align 4, !dbg !6067
  %inc = add i32 %16, 1, !dbg !6067
  store i32 %inc, i32* %x, align 4, !dbg !6067
  %call10 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %15, i32 %16), !dbg !6068
  %tobool11 = icmp ne i32 %call10, 0, !dbg !6068
  br i1 %tobool11, label %if.else, label %if.then12, !dbg !6069

if.then12:                                        ; preds = %for.body9
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %bsi, i8 zeroext 1), !dbg !6070
  br label %if.end13, !dbg !6070

if.else:                                          ; preds = %for.body9
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6071
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  br label %for.cond6, !dbg !6072, !llvm.loop !6073

for.end:                                          ; preds = %for.cond6
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6075
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp14, %struct.basic_block_def* %17), !dbg !6077
  %18 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6077
  %19 = bitcast %struct.gimple_stmt_iterator* %tmp14 to i8*, !dbg !6077
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false), !dbg !6077
  br label %for.cond15, !dbg !6078

for.cond15:                                       ; preds = %if.end28, %for.end
  %call16 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6079
  %tobool17 = icmp ne i8 %call16, 0, !dbg !6081
  %lnot18 = xor i1 %tobool17, true, !dbg !6081
  br i1 %lnot18, label %for.body19, label %for.end29, !dbg !6082

for.body19:                                       ; preds = %for.cond15
  %call20 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6083
  %call21 = call i32 @gimple_code(%union.gimple_statement_d* %call20), !dbg !6085
  %cmp22 = icmp ne i32 %call21, 4, !dbg !6086
  br i1 %cmp22, label %land.lhs.true, label %if.else27, !dbg !6087

land.lhs.true:                                    ; preds = %for.body19
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %partition.addr, align 8, !dbg !6088
  %21 = load i32, i32* %x, align 4, !dbg !6089
  %inc23 = add i32 %21, 1, !dbg !6089
  store i32 %inc23, i32* %x, align 4, !dbg !6089
  %call24 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %20, i32 %21), !dbg !6090
  %tobool25 = icmp ne i32 %call24, 0, !dbg !6090
  br i1 %tobool25, label %if.else27, label %if.then26, !dbg !6091

if.then26:                                        ; preds = %land.lhs.true
  call void @gsi_remove(%struct.gimple_stmt_iterator* %bsi, i8 zeroext 0), !dbg !6092
  br label %if.end28, !dbg !6092

if.else27:                                        ; preds = %land.lhs.true, %for.body19
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6093
  br label %if.end28

if.end28:                                         ; preds = %if.else27, %if.then26
  br label %for.cond15, !dbg !6094, !llvm.loop !6095

for.end29:                                        ; preds = %for.cond15
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6097
  call void @mark_virtual_ops_in_bb(%struct.basic_block_def* %22), !dbg !6098
  br label %for.inc, !dbg !6099

for.inc:                                          ; preds = %for.end29
  %23 = load i32, i32* %i, align 4, !dbg !6100
  %inc30 = add i32 %23, 1, !dbg !6100
  store i32 %inc30, i32* %i, align 4, !dbg !6100
  br label %for.cond, !dbg !6101, !llvm.loop !6102

for.end31:                                        ; preds = %for.cond
  %24 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !6104
  %25 = bitcast %struct.basic_block_def** %24 to i8*, !dbg !6104
  call void @free(i8* %25), !dbg !6105
  store i8 1, i8* %retval, align 1, !dbg !6106
  br label %return, !dbg !6106

return:                                           ; preds = %for.end31, %if.then2
  %26 = load i8, i8* %retval, align 1, !dbg !6107
  ret i8 %26, !dbg !6107
}

declare dso_local %union.tree_node* @number_of_exit_cond_executions(%struct.loop*) #2

declare dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop*) #2

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6108 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6111, metadata !DIExpression()), !dbg !6112
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6113
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6113
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6114
  %conv = zext i1 %cmp to i32, !dbg !6114
  %conv1 = trunc i32 %conv to i8, !dbg !6115
  ret i8 %conv1, !dbg !6116
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6117 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6121, metadata !DIExpression()), !dbg !6122
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6123
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6124
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6124
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6125
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6125
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6126
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6127
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6128
  ret void, !dbg !6129
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6130 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6133, metadata !DIExpression()), !dbg !6134
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6135, metadata !DIExpression()), !dbg !6136
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6137, metadata !DIExpression()), !dbg !6138
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6139
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6140
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6141
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6142
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6143
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6144
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6145
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6146
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6147
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6148
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6149
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6150
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6151
  ret void, !dbg !6152
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6153 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6156, metadata !DIExpression()), !dbg !6157
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6158
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6158
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !6159
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6159
  ret %union.gimple_statement_d* %1, !dbg !6160
}

declare dso_local %union.tree_node* @number_of_latch_executions(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6161 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6162, metadata !DIExpression()), !dbg !6163
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6164
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6165
  ret %union.tree_node* %call, !dbg !6166
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6167 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6168, metadata !DIExpression()), !dbg !6169
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6170, metadata !DIExpression()), !dbg !6171
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6172, metadata !DIExpression()), !dbg !6173
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6174
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6175
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6176
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6177
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !6178
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6179
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6180
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6181
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6182
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6183
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6184
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6185
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6186
  ret void, !dbg !6187
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6188 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6191, metadata !DIExpression()), !dbg !6192
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6193, metadata !DIExpression()), !dbg !6194
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6195
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6196
  store i32 %call, i32* %code, align 4, !dbg !6197
  %1 = load i32, i32* %code, align 4, !dbg !6198
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6200
  %cmp = icmp eq i32 %call1, 3, !dbg !6201
  br i1 %cmp, label %if.then, label %if.end, !dbg !6202

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6203
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6203
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6203
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6203
  %bf.load = load i64, i64* %3, align 8, !dbg !6203
  %bf.clear = and i64 %bf.load, 65535, !dbg !6203
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6203
  store i32 %bf.cast, i32* %code, align 4, !dbg !6204
  br label %if.end, !dbg !6205

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6206
  ret i32 %4, !dbg !6207
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local i32 @real_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @generate_memset_zero(%union.gimple_statement_d* %stmt, %union.tree_node* %op0, %union.tree_node* %nb_iter, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi) #0 !dbg !6208 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %nb_iter.addr = alloca %union.tree_node*, align 8
  %addr_base = alloca %union.tree_node*, align 8
  %nb_bytes = alloca %union.tree_node*, align 8
  %res = alloca i8, align 1
  %stmt_list = alloca %struct.gimple_seq_d*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %fn_call = alloca %union.gimple_statement_d*, align 8
  %mem = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %dr = alloca %struct.data_reference*, align 8
  %loc = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %s = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !6213, metadata !DIExpression()), !dbg !6214
  store %union.tree_node* %nb_iter, %union.tree_node** %nb_iter.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %nb_iter.addr, metadata !6215, metadata !DIExpression()), !dbg !6216
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6217, metadata !DIExpression()), !dbg !6218
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_base, metadata !6219, metadata !DIExpression()), !dbg !6220
  call void @llvm.dbg.declare(metadata %union.tree_node** %nb_bytes, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @llvm.dbg.declare(metadata i8* %res, metadata !6223, metadata !DIExpression()), !dbg !6224
  store i8 0, i8* %res, align 1, !dbg !6224
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmt_list, metadata !6225, metadata !DIExpression()), !dbg !6226
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmt_list, align 8, !dbg !6226
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !6227, metadata !DIExpression()), !dbg !6228
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %fn_call, metadata !6229, metadata !DIExpression()), !dbg !6230
  call void @llvm.dbg.declare(metadata %union.tree_node** %mem, metadata !6231, metadata !DIExpression()), !dbg !6232
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6233, metadata !DIExpression()), !dbg !6234
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6235, metadata !DIExpression()), !dbg !6236
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !6237, metadata !DIExpression()), !dbg !6238
  %call = call i8* @xcalloc(i64 1, i64 112), !dbg !6239
  %0 = bitcast i8* %call to %struct.data_reference*, !dbg !6239
  store %struct.data_reference* %0, %struct.data_reference** %dr, align 8, !dbg !6238
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !6240, metadata !DIExpression()), !dbg !6241
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6242
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !6243
  store i32 %call1, i32* %loc, align 4, !dbg !6241
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6244
  %3 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6245
  %stmt2 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %3, i32 0, i32 0, !dbg !6245
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %stmt2, align 8, !dbg !6246
  %4 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6247
  %5 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6248
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %5, i32 0, i32 1, !dbg !6248
  store %union.tree_node* %4, %union.tree_node** %ref, align 8, !dbg !6249
  %6 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6250
  %call3 = call zeroext i8 @dr_analyze_innermost(%struct.data_reference* %6), !dbg !6252
  %tobool = icmp ne i8 %call3, 0, !dbg !6252
  br i1 %tobool, label %if.end, label %if.then, !dbg !6253

if.then:                                          ; preds = %entry
  br label %end, !dbg !6254

if.end:                                           ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6255
  %8 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6255
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %8, i32 0, i32 4, !dbg !6255
  %step = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 3, !dbg !6255
  %9 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6255
  %call4 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %7, %union.tree_node* %9), !dbg !6255
  %10 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6255
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !6255
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6255
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6255
  %type5 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !6255
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 3, !dbg !6255
  %12 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !6255
  %call6 = call %union.tree_node* @size_binop_loc(i32 0, i32 64, %union.tree_node* %call4, %union.tree_node* %12), !dbg !6255
  %call7 = call i32 @integer_zerop(%union.tree_node* %call6), !dbg !6257
  %tobool8 = icmp ne i32 %call7, 0, !dbg !6257
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !6258

if.then9:                                         ; preds = %if.end
  %13 = load i32, i32* %loc, align 4, !dbg !6259
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6261
  %15 = load i32, i32* %loc, align 4, !dbg !6262
  %16 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6263
  %innermost10 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %16, i32 0, i32 4, !dbg !6263
  %offset = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost10, i32 0, i32 1, !dbg !6263
  %17 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !6263
  %18 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6264
  %innermost11 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %18, i32 0, i32 4, !dbg !6264
  %init = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost11, i32 0, i32 2, !dbg !6264
  %19 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !6264
  %call12 = call %union.tree_node* @size_binop_loc(i32 %15, i32 63, %union.tree_node* %17, %union.tree_node* %19), !dbg !6265
  %call13 = call %union.tree_node* @fold_convert_loc(i32 %13, %union.tree_node* %14, %union.tree_node* %call12), !dbg !6266
  store %union.tree_node* %call13, %union.tree_node** %addr_base, align 8, !dbg !6267
  %20 = load i32, i32* %loc, align 4, !dbg !6268
  %21 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6268
  %innermost14 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %21, i32 0, i32 4, !dbg !6268
  %base_address = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost14, i32 0, i32 0, !dbg !6268
  %22 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !6268
  %common15 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !6268
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !6268
  %23 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !6268
  %24 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6268
  %innermost17 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %24, i32 0, i32 4, !dbg !6268
  %base_address18 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost17, i32 0, i32 0, !dbg !6268
  %25 = load %union.tree_node*, %union.tree_node** %base_address18, align 8, !dbg !6268
  %26 = load %union.tree_node*, %union.tree_node** %addr_base, align 8, !dbg !6268
  %call19 = call %union.tree_node* @fold_build2_stat_loc(i32 %20, i32 66, %union.tree_node* %23, %union.tree_node* %25, %union.tree_node* %26), !dbg !6268
  store %union.tree_node* %call19, %union.tree_node** %addr_base, align 8, !dbg !6269
  %27 = load i32, i32* %loc, align 4, !dbg !6270
  %28 = load %union.tree_node*, %union.tree_node** %nb_iter.addr, align 8, !dbg !6271
  %29 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6272
  %call20 = call %union.tree_node* @build_size_arg_loc(i32 %27, %union.tree_node* %28, %union.tree_node* %29, %struct.gimple_seq_d** %stmt_list), !dbg !6273
  store %union.tree_node* %call20, %union.tree_node** %nb_bytes, align 8, !dbg !6274
  br label %if.end55, !dbg !6275

if.else:                                          ; preds = %if.end
  %30 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6276
  %common21 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !6276
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !6276
  %31 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !6276
  %type23 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !6276
  %size_unit24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 3, !dbg !6276
  %32 = load %union.tree_node*, %union.tree_node** %size_unit24, align 8, !dbg !6276
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6276
  %34 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6276
  %innermost25 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %34, i32 0, i32 4, !dbg !6276
  %step26 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost25, i32 0, i32 3, !dbg !6276
  %35 = load %union.tree_node*, %union.tree_node** %step26, align 8, !dbg !6276
  %call27 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %33, %union.tree_node* %35), !dbg !6276
  %call28 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %32, %union.tree_node* %call27), !dbg !6276
  %call29 = call i32 @integer_zerop(%union.tree_node* %call28), !dbg !6278
  %tobool30 = icmp ne i32 %call29, 0, !dbg !6278
  br i1 %tobool30, label %if.then31, label %if.else53, !dbg !6279

if.then31:                                        ; preds = %if.else
  %36 = load i32, i32* %loc, align 4, !dbg !6280
  %37 = load %union.tree_node*, %union.tree_node** %nb_iter.addr, align 8, !dbg !6282
  %38 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6283
  %call32 = call %union.tree_node* @build_size_arg_loc(i32 %36, %union.tree_node* %37, %union.tree_node* %38, %struct.gimple_seq_d** %stmt_list), !dbg !6284
  store %union.tree_node* %call32, %union.tree_node** %nb_bytes, align 8, !dbg !6285
  %39 = load i32, i32* %loc, align 4, !dbg !6286
  %40 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6287
  %innermost33 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %40, i32 0, i32 4, !dbg !6287
  %offset34 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost33, i32 0, i32 1, !dbg !6287
  %41 = load %union.tree_node*, %union.tree_node** %offset34, align 8, !dbg !6287
  %42 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6288
  %innermost35 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %42, i32 0, i32 4, !dbg !6288
  %init36 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost35, i32 0, i32 2, !dbg !6288
  %43 = load %union.tree_node*, %union.tree_node** %init36, align 8, !dbg !6288
  %call37 = call %union.tree_node* @size_binop_loc(i32 %39, i32 63, %union.tree_node* %41, %union.tree_node* %43), !dbg !6289
  store %union.tree_node* %call37, %union.tree_node** %addr_base, align 8, !dbg !6290
  %44 = load i32, i32* %loc, align 4, !dbg !6291
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6292
  %46 = load %union.tree_node*, %union.tree_node** %addr_base, align 8, !dbg !6293
  %call38 = call %union.tree_node* @fold_convert_loc(i32 %44, %union.tree_node* %45, %union.tree_node* %46), !dbg !6294
  store %union.tree_node* %call38, %union.tree_node** %addr_base, align 8, !dbg !6295
  %47 = load i32, i32* %loc, align 4, !dbg !6296
  %48 = load %union.tree_node*, %union.tree_node** %addr_base, align 8, !dbg !6297
  %49 = load i32, i32* %loc, align 4, !dbg !6298
  %50 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6299
  %51 = load %union.tree_node*, %union.tree_node** %nb_bytes, align 8, !dbg !6300
  %call39 = call %union.tree_node* @fold_convert_loc(i32 %49, %union.tree_node* %50, %union.tree_node* %51), !dbg !6301
  %call40 = call %union.tree_node* @size_binop_loc(i32 %47, i32 64, %union.tree_node* %48, %union.tree_node* %call39), !dbg !6302
  store %union.tree_node* %call40, %union.tree_node** %addr_base, align 8, !dbg !6303
  %52 = load i32, i32* %loc, align 4, !dbg !6304
  %53 = load %union.tree_node*, %union.tree_node** %addr_base, align 8, !dbg !6305
  %54 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6306
  %common41 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !6306
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !6306
  %55 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !6306
  %type43 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !6306
  %size_unit44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 3, !dbg !6306
  %56 = load %union.tree_node*, %union.tree_node** %size_unit44, align 8, !dbg !6306
  %call45 = call %union.tree_node* @size_binop_loc(i32 %52, i32 63, %union.tree_node* %53, %union.tree_node* %56), !dbg !6307
  store %union.tree_node* %call45, %union.tree_node** %addr_base, align 8, !dbg !6308
  %57 = load i32, i32* %loc, align 4, !dbg !6309
  %58 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6309
  %innermost46 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %58, i32 0, i32 4, !dbg !6309
  %base_address47 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost46, i32 0, i32 0, !dbg !6309
  %59 = load %union.tree_node*, %union.tree_node** %base_address47, align 8, !dbg !6309
  %common48 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !6309
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2, !dbg !6309
  %60 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !6309
  %61 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6309
  %innermost50 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %61, i32 0, i32 4, !dbg !6309
  %base_address51 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost50, i32 0, i32 0, !dbg !6309
  %62 = load %union.tree_node*, %union.tree_node** %base_address51, align 8, !dbg !6309
  %63 = load %union.tree_node*, %union.tree_node** %addr_base, align 8, !dbg !6309
  %call52 = call %union.tree_node* @fold_build2_stat_loc(i32 %57, i32 66, %union.tree_node* %60, %union.tree_node* %62, %union.tree_node* %63), !dbg !6309
  store %union.tree_node* %call52, %union.tree_node** %addr_base, align 8, !dbg !6310
  br label %if.end54, !dbg !6311

if.else53:                                        ; preds = %if.else
  br label %end, !dbg !6312

if.end54:                                         ; preds = %if.then31
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.then9
  %64 = load %union.tree_node*, %union.tree_node** %addr_base, align 8, !dbg !6313
  %call56 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %64, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !6314
  store %union.tree_node* %call56, %union.tree_node** %mem, align 8, !dbg !6315
  %65 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !6316
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %stmt_list, %struct.gimple_seq_d* %65), !dbg !6317
  %66 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 333), align 8, !dbg !6318
  %call57 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %66), !dbg !6318
  store %union.tree_node* %call57, %union.tree_node** %fn, align 8, !dbg !6319
  %67 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6320
  %68 = load %union.tree_node*, %union.tree_node** %mem, align 8, !dbg !6321
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !6322
  %70 = load %union.tree_node*, %union.tree_node** %nb_bytes, align 8, !dbg !6323
  %call58 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %67, i32 3, %union.tree_node* %68, %union.tree_node* %69, %union.tree_node* %70), !dbg !6324
  store %union.gimple_statement_d* %call58, %union.gimple_statement_d** %fn_call, align 8, !dbg !6325
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %fn_call, align 8, !dbg !6326
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %stmt_list, %union.gimple_statement_d* %71), !dbg !6327
  %72 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmt_list, align 8, !dbg !6328
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %72), !dbg !6330
  %73 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !6330
  %74 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6330
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %74, i64 24, i1 false), !dbg !6330
  br label %for.cond, !dbg !6331

for.cond:                                         ; preds = %for.inc, %if.end55
  %call59 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !6332
  %tobool60 = icmp ne i8 %call59, 0, !dbg !6334
  %lnot = xor i1 %tobool60, true, !dbg !6334
  br i1 %lnot, label %for.body, label %for.end, !dbg !6335

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s, metadata !6336, metadata !DIExpression()), !dbg !6338
  %call61 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !6339
  store %union.gimple_statement_d* %call61, %union.gimple_statement_d** %s, align 8, !dbg !6338
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !6340
  call void @update_stmt_if_modified(%union.gimple_statement_d* %75), !dbg !6341
  br label %for.inc, !dbg !6342

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !6343
  br label %for.cond, !dbg !6344, !llvm.loop !6345

for.end:                                          ; preds = %for.cond
  %76 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmt_list, align 8, !dbg !6347
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %bsi, %struct.gimple_seq_d* %76, i32 2), !dbg !6348
  store i8 1, i8* %res, align 1, !dbg !6349
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6350
  %tobool62 = icmp ne %struct._IO_FILE* %77, null, !dbg !6350
  br i1 %tobool62, label %land.lhs.true, label %if.end66, !dbg !6352

land.lhs.true:                                    ; preds = %for.end
  %78 = load i32, i32* @dump_flags, align 4, !dbg !6353
  %and = and i32 %78, 8, !dbg !6354
  %tobool63 = icmp ne i32 %and, 0, !dbg !6354
  br i1 %tobool63, label %if.then64, label %if.end66, !dbg !6355

if.then64:                                        ; preds = %land.lhs.true
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6356
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0)), !dbg !6357
  br label %if.end66, !dbg !6357

if.end66:                                         ; preds = %if.then64, %land.lhs.true, %for.end
  br label %end, !dbg !6358

end:                                              ; preds = %if.end66, %if.else53, %if.then
  call void @llvm.dbg.label(metadata !6359), !dbg !6360
  %80 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !6361
  call void @free_data_ref(%struct.data_reference* %80), !dbg !6362
  %81 = load i8, i8* %res, align 1, !dbg !6363
  ret i8 %81, !dbg !6364
}

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @prop_phis(%struct.basic_block_def* %b) #0 !dbg !6365 {
entry:
  %b.addr = alloca %struct.basic_block_def*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %phis = alloca %struct.gimple_seq_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %use = alloca %union.tree_node*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !6368, metadata !DIExpression()), !dbg !6369
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !6370, metadata !DIExpression()), !dbg !6371
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %phis, metadata !6372, metadata !DIExpression()), !dbg !6373
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !6374
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %0), !dbg !6375
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %phis, align 8, !dbg !6373
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phis, align 8, !dbg !6376
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %1), !dbg !6378
  %2 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !6378
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6378
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !6378
  br label %for.cond, !dbg !6379

for.cond:                                         ; preds = %if.end, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !6380
  %tobool = icmp ne i8 %call1, 0, !dbg !6382
  %lnot = xor i1 %tobool, true, !dbg !6382
  br i1 %lnot, label %for.body, label %for.end24, !dbg !6383

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6384, metadata !DIExpression()), !dbg !6386
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !6387
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %phi, align 8, !dbg !6386
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !6388, metadata !DIExpression()), !dbg !6389
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6390
  %call3 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %4), !dbg !6391
  store %union.tree_node* %call3, %union.tree_node** %def, align 8, !dbg !6389
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !6392, metadata !DIExpression()), !dbg !6393
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6394
  %call4 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %5, i64 0), !dbg !6395
  store %union.tree_node* %call4, %union.tree_node** %use, align 8, !dbg !6393
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6396
  %call5 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %6), !dbg !6396
  %cmp = icmp eq i32 %call5, 1, !dbg !6396
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6396

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0), i32 335, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6396
  br label %cond.end, !dbg !6396

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !6396

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6396
  %7 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6397
  %call6 = call zeroext i8 @is_gimple_reg(%union.tree_node* %7), !dbg !6399
  %tobool7 = icmp ne i8 %call6, 0, !dbg !6399
  br i1 %tobool7, label %if.else, label %if.then, !dbg !6400

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !6401, metadata !DIExpression()), !dbg !6403
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6404, metadata !DIExpression()), !dbg !6405
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6406, metadata !DIExpression()), !dbg !6407
  %8 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6408
  %call8 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %8), !dbg !6408
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %stmt, align 8, !dbg !6408
  br label %for.cond9, !dbg !6408

for.cond9:                                        ; preds = %for.inc21, %if.then
  %call10 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !6410
  %tobool11 = icmp ne i8 %call10, 0, !dbg !6410
  %lnot12 = xor i1 %tobool11, true, !dbg !6410
  br i1 %lnot12, label %for.body13, label %for.end23, !dbg !6408

for.body13:                                       ; preds = %for.cond9
  %call14 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !6412
  store %struct.ssa_use_operand_d* %call14, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6412
  br label %for.cond15, !dbg !6412

for.cond15:                                       ; preds = %for.inc, %for.body13
  %call16 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !6414
  %tobool17 = icmp ne i8 %call16, 0, !dbg !6414
  %lnot18 = xor i1 %tobool17, true, !dbg !6414
  br i1 %lnot18, label %for.body19, label %for.end, !dbg !6412

for.body19:                                       ; preds = %for.cond15
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6416
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6416
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %9, %union.tree_node* %10), !dbg !6416
  br label %for.inc, !dbg !6416

for.inc:                                          ; preds = %for.body19
  %call20 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !6414
  store %struct.ssa_use_operand_d* %call20, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6414
  br label %for.cond15, !dbg !6414, !llvm.loop !6417

for.end:                                          ; preds = %for.cond15
  br label %for.inc21, !dbg !6418

for.inc21:                                        ; preds = %for.end
  %call22 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !6410
  store %union.gimple_statement_d* %call22, %union.gimple_statement_d** %stmt, align 8, !dbg !6410
  br label %for.cond9, !dbg !6410, !llvm.loop !6419

for.end23:                                        ; preds = %for.cond9
  br label %if.end, !dbg !6421

if.else:                                          ; preds = %cond.end
  %11 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6422
  %12 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6423
  call void @replace_uses_by(%union.tree_node* %11, %union.tree_node* %12), !dbg !6424
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end23
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %psi, i8 zeroext 1), !dbg !6425
  br label %for.cond, !dbg !6426, !llvm.loop !6427

for.end24:                                        ; preds = %for.cond
  ret void, !dbg !6429
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local void @cancel_loop_tree(%struct.loop*) #2

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #2

declare dso_local void @set_immediate_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @recompute_dominator(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6430 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6436, metadata !DIExpression()), !dbg !6437
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6438
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6439
  %1 = load i32, i32* %flags, align 8, !dbg !6439
  %and = and i32 %1, 512, !dbg !6440
  %tobool = icmp ne i32 %and, 0, !dbg !6440
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6441

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6442
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6443
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6444
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6444
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6442
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6445

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6446
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6447
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6448
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6448
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6449
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6449
  br label %cond.end, !dbg !6445

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6445

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6445
  ret %struct.gimple_seq_d* %cond, !dbg !6450
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6451 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6457, metadata !DIExpression()), !dbg !6458
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6459
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6459
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6459

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6460
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6461
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6461
  br label %cond.end, !dbg !6459

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6459

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6459
  ret %struct.gimple_seq_node_d* %cond, !dbg !6462
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !6463 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6464, metadata !DIExpression()), !dbg !6465
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6466
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6466
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6466

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6467
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !6468
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !6468
  br label %cond.end, !dbg !6466

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6466

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6466
  ret %struct.gimple_seq_node_d* %cond, !dbg !6469
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6470 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6471, metadata !DIExpression()), !dbg !6472
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6473, metadata !DIExpression()), !dbg !6474
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6475
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6476
  store i32 %call, i32* %code, align 4, !dbg !6474
  %1 = load i32, i32* %code, align 4, !dbg !6477
  %cmp = icmp eq i32 %1, 6, !dbg !6479
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6480

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6481
  %cmp1 = icmp eq i32 %2, 1, !dbg !6482
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6483

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6484
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6485
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6486
  %bf.load = load i32, i32* %4, align 8, !dbg !6486
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6486
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6487
  br label %return, !dbg !6487

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6488
  %cmp2 = icmp eq i32 %5, 8, !dbg !6490
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6491

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6492
  br label %return, !dbg !6492

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6493
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6494
  br label %return, !dbg !6494

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6495
  ret i32 %6, !dbg !6495
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6496 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6499, metadata !DIExpression()), !dbg !6500
  %0 = load i32, i32* %code.addr, align 4, !dbg !6501
  %idxprom = sext i32 %0 to i64, !dbg !6502
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6502
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6502
  %conv = zext i8 %1 to i32, !dbg !6503
  ret i32 %conv, !dbg !6504
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !6505 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6508, metadata !DIExpression()), !dbg !6509
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6510
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6511
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6512
  %1 = load i32, i32* %location, align 8, !dbg !6512
  ret i32 %1, !dbg !6513
}

declare dso_local zeroext i8 @dr_analyze_innermost(%struct.data_reference*) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @build_size_arg_loc(i32 %loc, %union.tree_node* %nb_iter, %union.tree_node* %op, %struct.gimple_seq_d** %stmt_list) #0 !dbg !6514 {
entry:
  %loc.addr = alloca i32, align 4
  %nb_iter.addr = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %stmt_list.addr = alloca %struct.gimple_seq_d**, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %x = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !6518, metadata !DIExpression()), !dbg !6519
  store %union.tree_node* %nb_iter, %union.tree_node** %nb_iter.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %nb_iter.addr, metadata !6520, metadata !DIExpression()), !dbg !6521
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6522, metadata !DIExpression()), !dbg !6523
  store %struct.gimple_seq_d** %stmt_list, %struct.gimple_seq_d*** %stmt_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmt_list.addr, metadata !6524, metadata !DIExpression()), !dbg !6525
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !6526, metadata !DIExpression()), !dbg !6527
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !6528, metadata !DIExpression()), !dbg !6529
  %0 = load i32, i32* %loc.addr, align 4, !dbg !6530
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !6530
  %2 = load i32, i32* %loc.addr, align 4, !dbg !6530
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !6530
  %4 = load %union.tree_node*, %union.tree_node** %nb_iter.addr, align 8, !dbg !6530
  %call = call %union.tree_node* @fold_convert_loc(i32 %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !6530
  %5 = load i32, i32* %loc.addr, align 4, !dbg !6530
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !6530
  %7 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6530
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !6530
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6530
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6530
  %type1 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !6530
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 3, !dbg !6530
  %9 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !6530
  %call2 = call %union.tree_node* @fold_convert_loc(i32 %5, %union.tree_node* %6, %union.tree_node* %9), !dbg !6530
  %call3 = call %union.tree_node* @fold_build2_stat_loc(i32 %0, i32 65, %union.tree_node* %1, %union.tree_node* %call, %union.tree_node* %call2), !dbg !6530
  store %union.tree_node* %call3, %union.tree_node** %x, align 8, !dbg !6531
  %10 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6532
  %call4 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %10, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !6533
  store %union.tree_node* %call4, %union.tree_node** %x, align 8, !dbg !6534
  %11 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmt_list.addr, align 8, !dbg !6535
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !6536
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %11, %struct.gimple_seq_d* %12), !dbg !6537
  %13 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6538
  ret %union.tree_node* %13, !dbg !6539
}

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local void @gimple_seq_add_seq(%struct.gimple_seq_d**, %struct.gimple_seq_d*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node*, i32, ...) #2

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !6540 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !6543, metadata !DIExpression()), !dbg !6544
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6545, metadata !DIExpression()), !dbg !6546
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !6547
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !6548
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6549
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6550
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !6551
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6552
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !6553
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6554
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !6554
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !6555
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !6556

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6557
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !6557
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !6558
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6558
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !6559
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !6560

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6561
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !6561
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !6562
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6562
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !6563
  br label %cond.end, !dbg !6560

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6560

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !6560
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6564
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !6565
  ret void, !dbg !6566
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt_if_modified(%union.gimple_statement_d* %s) #0 !dbg !6567 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6570, metadata !DIExpression()), !dbg !6571
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6572
  %call = call zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %0), !dbg !6574
  %tobool = icmp ne i8 %call, 0, !dbg !6574
  br i1 %tobool, label %if.then, label %if.end, !dbg !6575

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6576
  call void @update_stmt_operands(%union.gimple_statement_d* %1), !dbg !6577
  br label %if.end, !dbg !6577

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6578
}

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

declare dso_local void @free_data_ref(%struct.data_reference*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %g) #0 !dbg !6579 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6580, metadata !DIExpression()), !dbg !6581
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6582
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6583
  %conv = zext i8 %call to i32, !dbg !6584
  %tobool = icmp ne i32 %conv, 0, !dbg !6584
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6584

cond.true:                                        ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6585
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6586
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6587
  %bf.load = load i32, i32* %2, align 8, !dbg !6587
  %bf.lshr = lshr i32 %bf.load, 13, !dbg !6587
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6587
  %conv1 = trunc i32 %bf.clear to i8, !dbg !6588
  %conv2 = zext i8 %conv1 to i32, !dbg !6588
  br label %cond.end, !dbg !6584

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6584

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ 0, %cond.false ], !dbg !6584
  %conv3 = trunc i32 %cond to i8, !dbg !6584
  ret i8 %conv3, !dbg !6589
}

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #0 !dbg !6590 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6591, metadata !DIExpression()), !dbg !6592
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6593
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6593
  %1 = load i32, i32* %flags, align 8, !dbg !6593
  %and = and i32 %1, 512, !dbg !6593
  %tobool = icmp ne i32 %and, 0, !dbg !6593
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6593

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6593
  br label %cond.end, !dbg !6593

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6593

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6593
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6594
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6596
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6597
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6597
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6594
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6598

if.then:                                          ; preds = %cond.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !6599
  br label %return, !dbg !6599

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6600
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6601
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6602
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6602
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 1, !dbg !6603
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !6603
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %retval, align 8, !dbg !6604
  br label %return, !dbg !6604

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !6605
  ret %struct.gimple_seq_d* %7, !dbg !6605
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !6606 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6607, metadata !DIExpression()), !dbg !6608
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6609
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6610
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6611
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6611
  ret %union.tree_node* %1, !dbg !6612
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !6613 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6616, metadata !DIExpression()), !dbg !6617
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !6620, metadata !DIExpression()), !dbg !6622
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6623
  %1 = load i64, i64* %index.addr, align 8, !dbg !6624
  %conv = trunc i64 %1 to i32, !dbg !6624
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !6625
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !6622
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !6626
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !6627
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !6628
  ret %union.tree_node* %call1, !dbg !6629
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6630 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6633, metadata !DIExpression()), !dbg !6634
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6635
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6636
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6637
  %1 = load i32, i32* %nargs, align 4, !dbg !6637
  ret i32 %1, !dbg !6638
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !6639 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6642, metadata !DIExpression()), !dbg !6643
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6644, metadata !DIExpression()), !dbg !6645
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6646
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6646
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6646
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6647
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !6648
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6649
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6650
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6651
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !6651
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !6652
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6652
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6653
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !6654
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6655
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6656
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !6657
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6658
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6659
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !6660
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !6661
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6662
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6663
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !6664
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !6665
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !6666
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6667
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !6668
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !6669
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6670
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !6671
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6672
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !6673
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !6674
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !6675
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6676
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !6678
  %tobool = icmp ne i8 %call, 0, !dbg !6678
  br i1 %tobool, label %if.then, label %if.end, !dbg !6679

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6680
  br label %return, !dbg !6680

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6681
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !6682
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !6682
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6683
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !6684
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6685
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !6685
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !6685
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !6685
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !6685
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !6685
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !6686
  br label %return, !dbg !6686

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6687
  ret %union.gimple_statement_d* %18, !dbg !6687
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6688 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6689, metadata !DIExpression()), !dbg !6690
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6691
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6692
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6692
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6693
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6694
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6694
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6695
  %conv = zext i1 %cmp to i32, !dbg !6695
  %conv1 = trunc i32 %conv to i8, !dbg !6696
  ret i8 %conv1, !dbg !6697
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6698 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6699, metadata !DIExpression()), !dbg !6700
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6701
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6702
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6702
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !6703
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6703
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6704
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !6705
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6706
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6707
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6708
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6708
  ret %struct.ssa_use_operand_d* %5, !dbg !6709
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6710 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6711, metadata !DIExpression()), !dbg !6712
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6713
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6714
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6714
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6715
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !6716
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !6717
  %conv = zext i1 %cmp to i32, !dbg !6717
  %conv1 = trunc i32 %conv to i8, !dbg !6718
  ret i8 %conv1, !dbg !6719
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !6720 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6723, metadata !DIExpression()), !dbg !6724
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6725, metadata !DIExpression()), !dbg !6726
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6727
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !6728
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6729
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6730
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !6731
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6731
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !6732
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6733
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6734
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !6735
  ret void, !dbg !6736
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6737 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6738, metadata !DIExpression()), !dbg !6739
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6740
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !6741
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6741
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6742
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !6743
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6744
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6745
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !6747
  %tobool = icmp ne i8 %call, 0, !dbg !6747
  br i1 %tobool, label %if.then, label %if.else, !dbg !6748

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6749
  br label %return, !dbg !6749

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6750
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6752
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6752
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !6753
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6753
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6754
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !6755
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !6756
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6757
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !6758
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !6758
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6759
  br label %return, !dbg !6759

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6760
  ret %struct.ssa_use_operand_d* %10, !dbg !6760
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6761 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6764, metadata !DIExpression()), !dbg !6765
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6766
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !6767
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !6768
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6768
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6769
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !6770
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6771
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6772
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !6774
  %tobool = icmp ne i8 %call, 0, !dbg !6774
  br i1 %tobool, label %if.then, label %if.end4, !dbg !6775

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6776
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !6779
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !6780
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6780
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !6781
  br i1 %cmp, label %if.then2, label %if.end, !dbg !6782

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6783
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !6784
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !6785
  br label %if.end, !dbg !6785

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6786
  br label %return, !dbg !6786

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6787
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !6788
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !6788
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6789
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !6790
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6791
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !6791
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !6791
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !6791
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6791
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6791
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !6792
  br label %return, !dbg !6792

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6793
  ret %union.gimple_statement_d* %13, !dbg !6793
}

declare dso_local void @replace_uses_by(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6794 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6797, metadata !DIExpression()), !dbg !6798
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6799, metadata !DIExpression()), !dbg !6800
  %0 = load i32, i32* %index.addr, align 4, !dbg !6801
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6801
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !6801
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !6801
  %2 = load i32, i32* %capacity, align 8, !dbg !6801
  %cmp = icmp ule i32 %0, %2, !dbg !6801
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6801

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6801
  br label %cond.end, !dbg !6801

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6801

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6801
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6802
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !6803
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !6804
  %4 = load i32, i32* %index.addr, align 4, !dbg !6805
  %idxprom = zext i32 %4 to i64, !dbg !6802
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !6802
  ret %struct.phi_arg_d* %arrayidx, !dbg !6806
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !6807 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !6810, metadata !DIExpression()), !dbg !6811
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6812, metadata !DIExpression()), !dbg !6813
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6814, metadata !DIExpression()), !dbg !6815
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !6816, metadata !DIExpression()), !dbg !6817
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6818
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6817
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !6819, metadata !DIExpression()), !dbg !6820
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6821
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !6821
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6821
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6821
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6820
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !6822, metadata !DIExpression()), !dbg !6823
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6824
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !6824
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !6823
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !6825, metadata !DIExpression()), !dbg !6838
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !6839, metadata !DIExpression()), !dbg !6840
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6841
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6842
  %conv = zext i8 %call1 to i32, !dbg !6842
  %tobool = icmp ne i32 %conv, 0, !dbg !6842
  %5 = zext i1 %tobool to i64, !dbg !6842
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !6842
  store i32 %cond, i32* %flag, align 4, !dbg !6843
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6844
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !6846
  %cmp = icmp eq i32 %call2, 16, !dbg !6847
  br i1 %cmp, label %if.then, label %if.else, !dbg !6848

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6849
  %8 = load i32, i32* %flag, align 4, !dbg !6849
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !6849
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6849
  br label %for.cond, !dbg !6849

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6852
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6852
  %lnot = xor i1 %tobool6, true, !dbg !6852
  br i1 %lnot, label %for.body, label %for.end, !dbg !6849

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6854
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !6854
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6856
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !6857
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !6858

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6859
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6860
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6861
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !6862
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6863
  br label %if.end, !dbg !6864

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !6856

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6852
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6852
  br label %for.cond, !dbg !6852, !llvm.loop !6865

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !6867

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !6868
  %cmp13 = icmp eq i32 %14, 1, !dbg !6871
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !6872

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6873
  %16 = load i32, i32* %flag, align 4, !dbg !6873
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !6873
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6873
  br label %for.cond17, !dbg !6873

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6876
  %tobool19 = icmp ne i8 %call18, 0, !dbg !6876
  %lnot20 = xor i1 %tobool19, true, !dbg !6876
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !6873

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6878
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !6878
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6880
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !6881
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !6882

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6883
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6884
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6885
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !6886
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6887
  br label %if.end27, !dbg !6888

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !6880

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6876
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6876
  br label %for.cond17, !dbg !6876, !llvm.loop !6889

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !6891

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6892
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !6894
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6895
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !6896
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !6897

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6898
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !6898
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6901
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !6902
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !6903

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6904
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6905
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6906
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !6907
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6908
  br label %if.end41, !dbg !6909

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !6910

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6911
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !6913
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !6914
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6914
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !6915
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !6916

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6917
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !6918
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !6919
  br label %if.end49, !dbg !6919

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6920
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !6921
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6922
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !6923
  ret void, !dbg !6924
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !6925 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6929, metadata !DIExpression()), !dbg !6930
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6931, metadata !DIExpression()), !dbg !6932
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6933, metadata !DIExpression()), !dbg !6934
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !6935, metadata !DIExpression()), !dbg !6936
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6937
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !6938
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !6936
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !6939, metadata !DIExpression()), !dbg !6940
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6941
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !6942
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6943
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !6944
  store i8 0, i8* %done, align 8, !dbg !6945
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6946
  %and = and i32 %3, 5, !dbg !6946
  %cmp = icmp ne i32 %and, 0, !dbg !6946
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6946

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6946
  br label %cond.end, !dbg !6946

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6946

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6946
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !6947
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6948
  %conv = zext i8 %call1 to i32, !dbg !6948
  %tobool = icmp ne i32 %conv, 0, !dbg !6948
  %5 = zext i1 %tobool to i64, !dbg !6948
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !6948
  store i32 %cond2, i32* %comp, align 4, !dbg !6949
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6950
  %7 = load i32, i32* %comp, align 4, !dbg !6952
  %and3 = and i32 %6, %7, !dbg !6953
  %cmp4 = icmp eq i32 %and3, 0, !dbg !6954
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6955

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6956
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !6958
  store i8 1, i8* %done6, align 8, !dbg !6959
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6960
  br label %return, !dbg !6960

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6961
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6962
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !6963
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6964
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6965
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !6966
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6967
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !6968
  store i32 %call7, i32* %num_phi, align 4, !dbg !6969
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6970
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !6971
  store i32 2, i32* %iter_type, align 4, !dbg !6972
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6973
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !6974
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6975
  br label %return, !dbg !6975

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6976
  ret %struct.ssa_use_operand_d* %15, !dbg !6976
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6977 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6982, metadata !DIExpression()), !dbg !6983
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6984
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6985
  %1 = load i8, i8* %done, align 8, !dbg !6985
  ret i8 %1, !dbg !6986
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !6987 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !6990, metadata !DIExpression()), !dbg !6991
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !6992, metadata !DIExpression()), !dbg !6993
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !6994, metadata !DIExpression()), !dbg !6995
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6996
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6998
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !6999
  br i1 %cmp, label %if.then, label %if.end3, !dbg !7000

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7001
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7004
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7004
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7005
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !7006
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !7007

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7008
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7009
  br label %if.end, !dbg !7010

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7011
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !7013
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7014
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7015
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !7016
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7017
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7018
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !7019

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7020
  ret %struct.ssa_use_operand_d* %10, !dbg !7021
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7022 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7025, metadata !DIExpression()), !dbg !7026
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7027, metadata !DIExpression()), !dbg !7028
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7029
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !7031
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !7031
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !7029
  br i1 %tobool, label %if.then, label %if.end, !dbg !7032

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7033
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !7033
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !7033
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !7033
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7035
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7036
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !7037
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !7037
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !7038
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !7038
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7039
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !7040
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !7041
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7042
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7043
  br label %return, !dbg !7043

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7044
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !7046
  %10 = load i32, i32* %phi_i, align 8, !dbg !7046
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7047
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !7048
  %12 = load i32, i32* %num_phi, align 4, !dbg !7048
  %cmp = icmp slt i32 %10, %12, !dbg !7049
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !7050

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7051
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !7051
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7051
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7051
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !7051
  %16 = load i32, i32* %phi_i5, align 8, !dbg !7051
  %inc = add nsw i32 %16, 1, !dbg !7051
  store i32 %inc, i32* %phi_i5, align 8, !dbg !7051
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !7051
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7053
  br label %return, !dbg !7053

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7054
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !7055
  store i8 1, i8* %done, align 8, !dbg !7056
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7057
  br label %return, !dbg !7057

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7058
  ret %struct.ssa_use_operand_d* %18, !dbg !7058
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7059 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7060, metadata !DIExpression()), !dbg !7061
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7062, metadata !DIExpression()), !dbg !7063
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7064, metadata !DIExpression()), !dbg !7065
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7066
  %and = and i32 %0, 10, !dbg !7066
  %cmp = icmp eq i32 %and, 0, !dbg !7066
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !7066

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7066
  %and1 = and i32 %1, 1, !dbg !7066
  %tobool = icmp ne i32 %and1, 0, !dbg !7066
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7066

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7066
  br label %cond.end, !dbg !7066

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7066

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7066
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7067
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7068
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7069
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !7070
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7071
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !7072
  store i32 2, i32* %iter_type, align 4, !dbg !7073
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7074
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !7075
  ret %struct.ssa_use_operand_d* %call, !dbg !7076
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !7077 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7080, metadata !DIExpression()), !dbg !7081
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7082
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !7084
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7084
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !7085
  br i1 %cmp, label %if.then, label %if.end, !dbg !7086

if.then:                                          ; preds = %entry
  br label %return, !dbg !7087

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7088
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7089
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7089
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7090
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !7091
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !7091
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !7092
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !7093
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7094
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !7095
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !7095
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7096
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !7097
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !7097
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !7098
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !7099
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7100
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !7101
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !7102
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7103
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !7104
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !7105
  br label %return, !dbg !7106

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7106
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !7107 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7110, metadata !DIExpression()), !dbg !7111
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !7112, metadata !DIExpression()), !dbg !7113
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7114
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7115
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !7116
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7117
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7118
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7119
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7119
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7120
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !7121
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !7122
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7123
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7124
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !7125
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !7125
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !7126
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !7127
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7128
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7129
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !7130
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !7131
  ret void, !dbg !7132
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7133 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7136, metadata !DIExpression()), !dbg !7137
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7138
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !7139
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !7140
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7141
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !7142
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !7143
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7144
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !7145
  store i32 0, i32* %iter_type, align 4, !dbg !7146
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7147
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !7148
  store i32 0, i32* %phi_i, align 8, !dbg !7149
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7150
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !7151
  store i32 0, i32* %num_phi, align 4, !dbg !7152
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7153
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !7154
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7155
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7156
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !7157
  store i8 1, i8* %done, align 8, !dbg !7158
  ret void, !dbg !7159
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7160 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7163, metadata !DIExpression()), !dbg !7164
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7165, metadata !DIExpression()), !dbg !7166
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7167
  %1 = load i32, i32* %i.addr, align 4, !dbg !7168
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !7169
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !7170
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !7171
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7172 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7175, metadata !DIExpression()), !dbg !7176
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7177, metadata !DIExpression()), !dbg !7178
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7179, metadata !DIExpression()), !dbg !7180
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7181
  %and = and i32 %0, 8, !dbg !7181
  %tobool = icmp ne i32 %and, 0, !dbg !7181
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !7181

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7181
  %and1 = and i32 %1, 2, !dbg !7181
  %tobool2 = icmp ne i32 %and1, 0, !dbg !7181
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !7181

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7181
  %and3 = and i32 %2, 4, !dbg !7181
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7181
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !7181

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7181
  %and6 = and i32 %3, 1, !dbg !7181
  %tobool7 = icmp ne i32 %and6, 0, !dbg !7181
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7181

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7181
  br label %cond.end, !dbg !7181

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !7181

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7181
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7182
  %and8 = and i32 %4, 10, !dbg !7183
  %tobool9 = icmp ne i32 %and8, 0, !dbg !7183
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !7184

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7185
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !7186
  br label %cond.end12, !dbg !7184

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !7184

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !7184
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7187
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !7188
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !7189
  %7 = load i32, i32* %flags.addr, align 4, !dbg !7190
  %and14 = and i32 %7, 8, !dbg !7192
  %tobool15 = icmp ne i32 %and14, 0, !dbg !7192
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !7193

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7194
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !7195
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !7195
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !7194
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !7196

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7197
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !7198
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !7199
  br i1 %cmp, label %if.then, label %if.end, !dbg !7200

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7201
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !7202
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !7202
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !7203
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !7203
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7204
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !7205
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !7206
  br label %if.end, !dbg !7204

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !7207
  %and23 = and i32 %15, 5, !dbg !7208
  %tobool24 = icmp ne i32 %and23, 0, !dbg !7208
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7209

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7210
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !7211
  br label %cond.end28, !dbg !7209

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !7209

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7209
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7212
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !7213
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !7214
  %18 = load i32, i32* %flags.addr, align 4, !dbg !7215
  %and30 = and i32 %18, 4, !dbg !7217
  %tobool31 = icmp ne i32 %and30, 0, !dbg !7217
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !7218

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7219
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !7220
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !7220
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !7219
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !7221

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7222
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !7223
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !7224
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !7225

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7226
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !7227
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !7227
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !7228
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !7228
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7229
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !7230
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !7231
  br label %if.end42, !dbg !7229

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7232
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !7233
  store i8 0, i8* %done, align 8, !dbg !7234
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7235
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !7236
  store i32 0, i32* %phi_i, align 8, !dbg !7237
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7238
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !7239
  store i32 0, i32* %num_phi, align 4, !dbg !7240
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7241
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !7242
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7243
  ret void, !dbg !7244
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !7245 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7248, metadata !DIExpression()), !dbg !7249
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7250
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7252
  %tobool = icmp ne i8 %call, 0, !dbg !7252
  br i1 %tobool, label %if.end, label %if.then, !dbg !7253

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !7254
  br label %return, !dbg !7254

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7255
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7256
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7257
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !7258
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !7258
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !7259
  br label %return, !dbg !7259

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !7260
  ret %struct.def_optype_d* %3, !dbg !7260
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !7261 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7262, metadata !DIExpression()), !dbg !7263
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7264
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7266
  %tobool = icmp ne i8 %call, 0, !dbg !7266
  br i1 %tobool, label %if.end, label %if.then, !dbg !7267

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7268
  br label %return, !dbg !7268

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7269
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7270
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !7271
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !7271
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7272
  br label %return, !dbg !7272

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7273
  ret %union.tree_node* %3, !dbg !7273
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !7274 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7277, metadata !DIExpression()), !dbg !7278
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7279
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7281
  %tobool = icmp ne i8 %call, 0, !dbg !7281
  br i1 %tobool, label %if.end, label %if.then, !dbg !7282

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !7283
  br label %return, !dbg !7283

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7284
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7285
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7286
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7287
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7287
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !7288
  br label %return, !dbg !7288

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !7289
  ret %struct.use_optype_d* %3, !dbg !7289
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !7290 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7291, metadata !DIExpression()), !dbg !7292
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7293
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7295
  %tobool = icmp ne i8 %call, 0, !dbg !7295
  br i1 %tobool, label %if.end, label %if.then, !dbg !7296

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7297
  br label %return, !dbg !7297

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7298
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7299
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !7300
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !7300
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7301
  br label %return, !dbg !7301

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7302
  ret %union.tree_node* %3, !dbg !7302
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !7303 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7306, metadata !DIExpression()), !dbg !7307
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !7308, metadata !DIExpression()), !dbg !7309
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !7310, metadata !DIExpression()), !dbg !7311
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7312
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !7312
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7314

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7315
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7315
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7315
  %bf.load = load i64, i64* %2, align 8, !dbg !7315
  %bf.clear = and i64 %bf.load, 65535, !dbg !7315
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7315
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !7316
  br i1 %cmp, label %if.then, label %if.else, !dbg !7317

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7318
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !7319
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7320
  br label %if.end, !dbg !7318

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7321
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !7321
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !7321
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !7323
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7324
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !7325
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !7326
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7327
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @copy_loop_before(%struct.loop* %loop) #0 !dbg !7328 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %res = alloca %struct.loop*, align 8
  %preheader = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7331, metadata !DIExpression()), !dbg !7332
  call void @llvm.dbg.declare(metadata %struct.loop** %res, metadata !7333, metadata !DIExpression()), !dbg !7334
  call void @llvm.dbg.declare(metadata %struct.edge_def** %preheader, metadata !7335, metadata !DIExpression()), !dbg !7336
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7337
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !7338
  store %struct.edge_def* %call, %struct.edge_def** %preheader, align 8, !dbg !7336
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7339
  %call1 = call %struct.edge_def* @single_exit(%struct.loop* %1), !dbg !7341
  %tobool = icmp ne %struct.edge_def* %call1, null, !dbg !7341
  br i1 %tobool, label %if.end, label %if.then, !dbg !7342

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !7343
  br label %return, !dbg !7343

if.end:                                           ; preds = %entry
  call void @initialize_original_copy_tables(), !dbg !7344
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7345
  %3 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !7346
  %call2 = call %struct.loop* @slpeel_tree_duplicate_loop_to_edge_cfg(%struct.loop* %2, %struct.edge_def* %3), !dbg !7347
  store %struct.loop* %call2, %struct.loop** %res, align 8, !dbg !7348
  call void @free_original_copy_tables(), !dbg !7349
  %4 = load %struct.loop*, %struct.loop** %res, align 8, !dbg !7350
  %tobool3 = icmp ne %struct.loop* %4, null, !dbg !7350
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !7352

if.then4:                                         ; preds = %if.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !7353
  br label %return, !dbg !7353

if.end5:                                          ; preds = %if.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7354
  %6 = load %struct.loop*, %struct.loop** %res, align 8, !dbg !7355
  call void @update_phis_for_loop_copy(%struct.loop* %5, %struct.loop* %6), !dbg !7356
  %7 = load %struct.loop*, %struct.loop** %res, align 8, !dbg !7357
  call void @rename_variables_in_loop(%struct.loop* %7), !dbg !7358
  %8 = load %struct.loop*, %struct.loop** %res, align 8, !dbg !7359
  store %struct.loop* %8, %struct.loop** %retval, align 8, !dbg !7360
  br label %return, !dbg !7360

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %9 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !7361
  ret %struct.loop* %9, !dbg !7361
}

declare dso_local %struct.basic_block_def* @create_preheader(%struct.loop*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @create_bb_after_loop(%struct.loop* %loop) #0 !dbg !7362 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %exit = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7365, metadata !DIExpression()), !dbg !7366
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !7367, metadata !DIExpression()), !dbg !7368
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7369
  %call = call %struct.edge_def* @single_exit(%struct.loop* %0), !dbg !7370
  store %struct.edge_def* %call, %struct.edge_def** %exit, align 8, !dbg !7368
  %1 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !7371
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !7371
  br i1 %tobool, label %if.end, label %if.then, !dbg !7373

if.then:                                          ; preds = %entry
  br label %return, !dbg !7374

if.end:                                           ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !7375
  %call1 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %2), !dbg !7376
  br label %return, !dbg !7377

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7377
}

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @mark_virtual_ops_in_bb(%struct.basic_block_def*) #2

declare dso_local void @initialize_original_copy_tables() #2

declare dso_local %struct.loop* @slpeel_tree_duplicate_loop_to_edge_cfg(%struct.loop*, %struct.edge_def*) #2

declare dso_local void @free_original_copy_tables() #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_phis_for_loop_copy(%struct.loop* %orig_loop, %struct.loop* %new_loop) #0 !dbg !7378 {
entry:
  %orig_loop.addr = alloca %struct.loop*, align 8
  %new_loop.addr = alloca %struct.loop*, align 8
  %new_ssa_name = alloca %union.tree_node*, align 8
  %si_new = alloca %struct.gimple_stmt_iterator, align 8
  %si_orig = alloca %struct.gimple_stmt_iterator, align 8
  %orig_loop_latch = alloca %struct.edge_def*, align 8
  %orig_entry_e = alloca %struct.edge_def*, align 8
  %new_loop_entry_e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp3 = alloca %struct.gimple_stmt_iterator, align 8
  %def = alloca %union.tree_node*, align 8
  %locus = alloca i32, align 4
  %phi_new = alloca %union.gimple_statement_d*, align 8
  %phi_orig = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %orig_loop, %struct.loop** %orig_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %orig_loop.addr, metadata !7381, metadata !DIExpression()), !dbg !7382
  store %struct.loop* %new_loop, %struct.loop** %new_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %new_loop.addr, metadata !7383, metadata !DIExpression()), !dbg !7384
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_ssa_name, metadata !7385, metadata !DIExpression()), !dbg !7386
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si_new, metadata !7387, metadata !DIExpression()), !dbg !7388
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si_orig, metadata !7389, metadata !DIExpression()), !dbg !7390
  call void @llvm.dbg.declare(metadata %struct.edge_def** %orig_loop_latch, metadata !7391, metadata !DIExpression()), !dbg !7392
  %0 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !7393
  %call = call %struct.edge_def* @loop_latch_edge(%struct.loop* %0), !dbg !7394
  store %struct.edge_def* %call, %struct.edge_def** %orig_loop_latch, align 8, !dbg !7392
  call void @llvm.dbg.declare(metadata %struct.edge_def** %orig_entry_e, metadata !7395, metadata !DIExpression()), !dbg !7396
  %1 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !7397
  %call1 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %1), !dbg !7398
  store %struct.edge_def* %call1, %struct.edge_def** %orig_entry_e, align 8, !dbg !7396
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_loop_entry_e, metadata !7399, metadata !DIExpression()), !dbg !7400
  %2 = load %struct.loop*, %struct.loop** %new_loop.addr, align 8, !dbg !7401
  %call2 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %2), !dbg !7402
  store %struct.edge_def* %call2, %struct.edge_def** %new_loop_entry_e, align 8, !dbg !7400
  %3 = load %struct.loop*, %struct.loop** %new_loop.addr, align 8, !dbg !7403
  %header = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 2, !dbg !7405
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !7405
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %4), !dbg !7406
  %5 = bitcast %struct.gimple_stmt_iterator* %si_new to i8*, !dbg !7406
  %6 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7406
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false), !dbg !7406
  %7 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !7407
  %header4 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 2, !dbg !7408
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %header4, align 8, !dbg !7408
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp3, %struct.basic_block_def* %8), !dbg !7409
  %9 = bitcast %struct.gimple_stmt_iterator* %si_orig to i8*, !dbg !7409
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp3 to i8*, !dbg !7409
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !7409
  br label %for.cond, !dbg !7410

for.cond:                                         ; preds = %for.inc, %entry
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si_new), !dbg !7411
  %tobool = icmp ne i8 %call5, 0, !dbg !7411
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !7413

land.rhs:                                         ; preds = %for.cond
  %call6 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si_orig), !dbg !7414
  %tobool7 = icmp ne i8 %call6, 0, !dbg !7415
  %lnot = xor i1 %tobool7, true, !dbg !7415
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %11 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !7416
  br i1 %11, label %for.body, label %for.end, !dbg !7417

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !7418, metadata !DIExpression()), !dbg !7420
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !7421, metadata !DIExpression()), !dbg !7422
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi_new, metadata !7423, metadata !DIExpression()), !dbg !7424
  %call8 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si_new), !dbg !7425
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %phi_new, align 8, !dbg !7424
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi_orig, metadata !7426, metadata !DIExpression()), !dbg !7427
  %call9 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si_orig), !dbg !7428
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %phi_orig, align 8, !dbg !7427
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !7429
  %13 = load %struct.edge_def*, %struct.edge_def** %orig_entry_e, align 8, !dbg !7429
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 6, !dbg !7429
  %14 = load i32, i32* %dest_idx, align 4, !dbg !7429
  %call10 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %12, i32 %14), !dbg !7429
  %call11 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call10), !dbg !7429
  store %union.tree_node* %call11, %union.tree_node** %def, align 8, !dbg !7430
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !7431
  %16 = load %struct.edge_def*, %struct.edge_def** %orig_entry_e, align 8, !dbg !7432
  %call12 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %15, %struct.edge_def* %16), !dbg !7433
  store i32 %call12, i32* %locus, align 4, !dbg !7434
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_new, align 8, !dbg !7435
  %18 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7436
  %19 = load %struct.edge_def*, %struct.edge_def** %new_loop_entry_e, align 8, !dbg !7437
  %20 = load i32, i32* %locus, align 4, !dbg !7438
  call void @add_phi_arg(%union.gimple_statement_d* %17, %union.tree_node* %18, %struct.edge_def* %19, i32 %20), !dbg !7439
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !7440
  %22 = load %struct.edge_def*, %struct.edge_def** %orig_loop_latch, align 8, !dbg !7440
  %dest_idx13 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 6, !dbg !7440
  %23 = load i32, i32* %dest_idx13, align 4, !dbg !7440
  %call14 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %21, i32 %23), !dbg !7440
  %call15 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call14), !dbg !7440
  store %union.tree_node* %call15, %union.tree_node** %def, align 8, !dbg !7441
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !7442
  %25 = load %struct.edge_def*, %struct.edge_def** %orig_loop_latch, align 8, !dbg !7443
  %call16 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %24, %struct.edge_def* %25), !dbg !7444
  store i32 %call16, i32* %locus, align 4, !dbg !7445
  %26 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7446
  %base = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !7446
  %27 = bitcast %struct.tree_base* %base to i64*, !dbg !7446
  %bf.load = load i64, i64* %27, align 8, !dbg !7446
  %bf.clear = and i64 %bf.load, 65535, !dbg !7446
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7446
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !7448
  br i1 %cmp, label %if.then, label %if.else, !dbg !7449

if.then:                                          ; preds = %for.body
  %28 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7450
  %call17 = call %union.tree_node* @get_current_def(%union.tree_node* %28), !dbg !7452
  store %union.tree_node* %call17, %union.tree_node** %new_ssa_name, align 8, !dbg !7453
  %29 = load %union.tree_node*, %union.tree_node** %new_ssa_name, align 8, !dbg !7454
  %tobool18 = icmp ne %union.tree_node* %29, null, !dbg !7454
  br i1 %tobool18, label %if.end, label %if.then19, !dbg !7456

if.then19:                                        ; preds = %if.then
  %30 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7457
  store %union.tree_node* %30, %union.tree_node** %new_ssa_name, align 8, !dbg !7458
  br label %if.end, !dbg !7459

if.end:                                           ; preds = %if.then19, %if.then
  br label %if.end20, !dbg !7460

if.else:                                          ; preds = %for.body
  %31 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7461
  store %union.tree_node* %31, %union.tree_node** %new_ssa_name, align 8, !dbg !7462
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.end
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_new, align 8, !dbg !7463
  %33 = load %union.tree_node*, %union.tree_node** %new_ssa_name, align 8, !dbg !7464
  %34 = load %struct.loop*, %struct.loop** %new_loop.addr, align 8, !dbg !7465
  %call21 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %34), !dbg !7466
  %35 = load i32, i32* %locus, align 4, !dbg !7467
  call void @add_phi_arg(%union.gimple_statement_d* %32, %union.tree_node* %33, %struct.edge_def* %call21, i32 %35), !dbg !7468
  br label %for.inc, !dbg !7469

for.inc:                                          ; preds = %if.end20
  call void @gsi_next(%struct.gimple_stmt_iterator* %si_new), !dbg !7470
  call void @gsi_next(%struct.gimple_stmt_iterator* %si_orig), !dbg !7471
  br label %for.cond, !dbg !7472, !llvm.loop !7473

for.end:                                          ; preds = %land.end
  ret void, !dbg !7475
}

declare dso_local void @rename_variables_in_loop(%struct.loop*) #2

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %gs, %struct.edge_def* %e) #0 !dbg !7476 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7479, metadata !DIExpression()), !dbg !7480
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7481, metadata !DIExpression()), !dbg !7482
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7483
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7484
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 6, !dbg !7485
  %2 = load i32, i32* %dest_idx, align 4, !dbg !7485
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %2), !dbg !7486
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !7487
  %3 = load i32, i32* %locus, align 8, !dbg !7487
  ret i32 %3, !dbg !7488
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

declare dso_local %union.tree_node* @get_current_def(%union.tree_node*) #2

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3114, !3115, !3116}
!llvm.ident = !{!3117}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_loop_distribution", scope: !2, file: !3, line: 1231, type: !3088, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1551, globals: !3083, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-loop-distribution.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !189, !317, !323, !328, !333, !352, !359, !366, !560, !569, !573, !578, !585, !624, !650, !654, !668, !674, !681, !1401, !1535, !1540, !1547}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !6, line: 104, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 74, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!16 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!105 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!106 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!107 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!108 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!109 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!110 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!111 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!112 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!113 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!114 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!115 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!116 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!117 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!118 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!119 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!120 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!121 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!122 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!123 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!124 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!125 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!126 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!127 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!128 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!129 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!130 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!131 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!132 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!133 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!134 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!135 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!136 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!137 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!138 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!139 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!140 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!141 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!142 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!143 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!144 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!145 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!146 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!147 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!148 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!149 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!150 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!151 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!152 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!153 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!154 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!155 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!156 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!157 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!158 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!159 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!160 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!161 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!162 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!163 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!164 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!165 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!166 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!167 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!168 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!169 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!170 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!171 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!172 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!173 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!174 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!175 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!176 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!177 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!178 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!179 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!180 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!181 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!182 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!183 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!184 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!185 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!186 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!187 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!188 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !190, line: 7, baseType: !7, size: 32, elements: !191)
!190 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316}
!192 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!281 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!282 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!283 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!284 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!285 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!286 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!287 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!288 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!289 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!290 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!291 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!292 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!293 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!294 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!295 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!296 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!297 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!298 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!299 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!300 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!301 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!302 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!303 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!304 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!305 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!306 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!307 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!308 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!309 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!310 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!311 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!312 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!313 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!314 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!315 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!316 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!317 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !318, line: 363, baseType: !7, size: 32, elements: !319)
!318 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!319 = !{!320, !321, !322}
!320 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!321 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!322 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!323 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !318, line: 355, baseType: !7, size: 32, elements: !324)
!324 = !{!325, !326, !327}
!325 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!326 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!327 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!328 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !329, line: 474, baseType: !7, size: 32, elements: !330)
!329 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!330 = !{!331, !332}
!331 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!332 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!333 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !334, line: 280, baseType: !7, size: 32, elements: !335)
!334 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!335 = !{!336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351}
!336 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!337 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !334, line: 1817, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358}
!354 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!359 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !334, line: 1805, baseType: !7, size: 32, elements: !360)
!360 = !{!361, !362, !363, !364, !365}
!361 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!366 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !334, line: 39, baseType: !7, size: 32, elements: !367)
!367 = !{!368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559}
!368 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!369 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!370 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!371 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!372 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!373 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!374 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!375 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!376 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!377 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!378 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!379 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!380 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!381 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!382 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!383 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!384 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!385 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!386 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!387 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!388 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!389 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!390 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!391 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!392 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!393 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!394 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!395 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!396 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!397 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!398 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!399 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!400 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!401 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!402 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!403 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!404 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!405 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!406 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!407 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!408 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!409 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!410 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!411 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!412 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!413 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!414 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!415 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!416 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!417 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!418 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!419 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!420 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!421 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!422 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!423 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!424 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!425 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!426 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!427 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!428 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!429 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!430 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!431 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!432 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!433 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!434 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!435 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!436 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!437 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!438 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!439 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!440 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!441 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!442 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!443 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!444 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!445 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!446 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!447 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!448 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!449 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!450 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!451 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!452 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!453 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!454 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!455 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!456 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!457 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!458 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!459 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!460 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!461 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!462 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!463 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!464 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!465 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!466 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!467 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!468 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!469 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!470 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!471 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!472 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!473 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!474 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!475 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!476 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!477 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!478 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!479 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!480 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!481 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!482 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!483 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!484 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!485 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!486 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!487 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!488 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!489 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!490 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!491 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!492 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!493 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!494 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!495 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!496 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!497 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!498 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!499 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!500 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!501 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!502 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!503 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!504 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!505 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!506 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!507 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!508 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!509 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!510 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!511 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!512 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!513 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!514 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!515 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!516 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!517 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!518 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!519 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!520 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!521 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!522 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!523 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!524 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!525 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!526 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!527 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!528 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!529 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!530 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!531 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!532 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!533 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!534 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!535 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!536 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!537 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!538 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!539 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!540 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!541 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!542 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!543 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!544 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!545 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!546 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!547 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!548 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!549 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!550 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!551 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!552 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!553 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!554 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!555 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!556 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!557 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!558 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!559 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!560 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !561, line: 31, baseType: !7, size: 32, elements: !562)
!561 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!562 = !{!563, !564, !565, !566, !567, !568}
!563 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!564 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!565 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!566 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!567 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!568 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!569 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !561, line: 91, baseType: !7, size: 32, elements: !570)
!570 = !{!571, !572}
!571 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!572 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !561, line: 498, baseType: !7, size: 32, elements: !574)
!574 = !{!575, !576, !577}
!575 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!576 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!577 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!578 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rdg_dep_type", file: !579, line: 514, baseType: !7, size: 32, elements: !580)
!579 = !DIFile(filename: "./tree-data-ref.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!580 = !{!581, !582, !583, !584}
!581 = !DIEnumerator(name: "flow_dd", value: 102, isUnsigned: true)
!582 = !DIEnumerator(name: "anti_dd", value: 97, isUnsigned: true)
!583 = !DIEnumerator(name: "output_dd", value: 111, isUnsigned: true)
!584 = !DIEnumerator(name: "input_dd", value: 105, isUnsigned: true)
!585 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !586, line: 51, baseType: !7, size: 32, elements: !587)
!586 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!587 = !{!588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623}
!588 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!623 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!624 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !586, line: 727, baseType: !7, size: 32, elements: !625)
!625 = !{!626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649}
!626 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!627 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!628 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!629 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!630 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!631 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!632 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!633 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!634 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!635 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!636 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!637 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!638 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!639 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!640 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!641 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!642 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!643 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!644 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!645 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!646 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!647 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!648 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!649 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!650 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !318, line: 912, baseType: !7, size: 32, elements: !651)
!651 = !{!652, !653}
!652 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!653 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!654 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !318, line: 295, baseType: !7, size: 32, elements: !655)
!655 = !{!656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667}
!656 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!657 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!658 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!659 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!660 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!661 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!662 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!663 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!664 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!665 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!666 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!667 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!668 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !586, line: 80, baseType: !7, size: 32, elements: !669)
!669 = !{!670, !671, !672, !673}
!670 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!671 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!672 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!673 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!674 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !334, line: 4288, baseType: !7, size: 32, elements: !675)
!675 = !{!676, !677, !678, !679, !680}
!676 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!677 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!678 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!679 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!680 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!681 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !334, line: 220, baseType: !7, size: 32, elements: !682)
!682 = !{!683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400}
!683 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1400 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1401 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !334, line: 3410, baseType: !7, size: 32, elements: !1402)
!1402 = !{!1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534}
!1403 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1404 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1405 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1406 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1407 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1408 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1409 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1410 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1411 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1412 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1413 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1414 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1415 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1416 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1417 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1418 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1419 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1420 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1421 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1422 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1423 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1424 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1425 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1426 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1427 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1428 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1429 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1430 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1431 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1432 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1433 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1434 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1435 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1436 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1437 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1438 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1439 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1440 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1441 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1442 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1443 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1444 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1445 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1446 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1447 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1448 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1449 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1450 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1451 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1452 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1453 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1454 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1455 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1456 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1457 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1458 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1459 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1460 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1461 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1462 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1463 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1464 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1465 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1466 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1467 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1468 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1469 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1470 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1471 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1472 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1473 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1474 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1475 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1476 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1477 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1478 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1479 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1480 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1481 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1482 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1483 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1484 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1485 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1486 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1487 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1488 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1489 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1490 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1491 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1492 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1493 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1494 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1495 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1496 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1497 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1498 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1499 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1500 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1501 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1502 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1503 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1504 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1505 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1506 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1507 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1508 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1509 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1510 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1511 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1512 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1513 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1514 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1515 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1516 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1517 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1518 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1519 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1520 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1521 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1522 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1523 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1524 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1525 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1526 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1527 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1528 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1529 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1530 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1531 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1532 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1533 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1534 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1535 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !586, line: 4603, baseType: !7, size: 32, elements: !1536)
!1536 = !{!1537, !1538, !1539}
!1537 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1538 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1539 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1540 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1541, line: 119, baseType: !7, size: 32, elements: !1542)
!1541 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1542 = !{!1543, !1544, !1545, !1546}
!1543 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1544 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1545 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1546 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1547 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !561, line: 259, baseType: !7, size: 32, elements: !1548)
!1548 = !{!1549, !1550}
!1549 = !DIEnumerator(name: "CP_SIMPLE_PREHEADERS", value: 1, isUnsigned: true)
!1550 = !DIEnumerator(name: "CP_FALLTHRU_PREHEADERS", value: 2, isUnsigned: true)
!1551 = !{!1552, !1610, !1619, !1634, !2924, !1677, !7, !2929, !2935, !2953, !1605, !2965, !3077, !2948, !2947, !3078, !366, !1678, !3081, !1702, !2225, !1593, !1657, !668, !2976, !1697, !1815}
!1552 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1553, line: 47, baseType: !1554)
!1553 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1555, size: 64)
!1555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1556, line: 75, size: 256, elements: !1557)
!1556 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1557 = !{!1558, !1573, !1574, !1575}
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1555, file: !1556, line: 76, baseType: !1559, size: 64)
!1559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1560, size: 64)
!1560 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1556, line: 68, baseType: !1561)
!1561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1556, line: 63, size: 320, elements: !1562)
!1562 = !{!1563, !1565, !1566, !1567}
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1561, file: !1556, line: 64, baseType: !1564, size: 64)
!1564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1561, size: 64)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1561, file: !1556, line: 65, baseType: !1564, size: 64, offset: 64)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1561, file: !1556, line: 66, baseType: !7, size: 32, offset: 128)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1561, file: !1556, line: 67, baseType: !1568, size: 128, offset: 192)
!1568 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1569, size: 128, elements: !1571)
!1569 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1556, line: 29, baseType: !1570)
!1570 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1571 = !{!1572}
!1572 = !DISubrange(count: 2)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1555, file: !1556, line: 77, baseType: !1559, size: 64, offset: 64)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1555, file: !1556, line: 78, baseType: !7, size: 32, offset: 128)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1555, file: !1556, line: 79, baseType: !1576, size: 64, offset: 192)
!1576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1577, size: 64)
!1577 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1556, line: 49, baseType: !1578)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1556, line: 45, size: 832, elements: !1579)
!1579 = !{!1580, !1581, !1582}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1578, file: !1556, line: 46, baseType: !1564, size: 64)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1578, file: !1556, line: 47, baseType: !1554, size: 64, offset: 64)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1578, file: !1556, line: 48, baseType: !1583, size: 704, offset: 128)
!1583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1584, line: 164, size: 704, elements: !1585)
!1584 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1585 = !{!1586, !1588, !1600, !1601, !1602, !1603, !1604, !1606, !1611, !1615, !1616, !1617, !1618}
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1583, file: !1584, line: 166, baseType: !1587, size: 64)
!1587 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1583, file: !1584, line: 167, baseType: !1589, size: 64, offset: 64)
!1589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1590, size: 64)
!1590 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1584, line: 157, size: 192, elements: !1591)
!1591 = !{!1592, !1595, !1596}
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1590, file: !1584, line: 159, baseType: !1593, size: 64)
!1593 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1594, size: 64)
!1594 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1590, file: !1584, line: 160, baseType: !1589, size: 64, offset: 64)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1590, file: !1584, line: 161, baseType: !1597, size: 32, offset: 128)
!1597 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1594, size: 32, elements: !1598)
!1598 = !{!1599}
!1599 = !DISubrange(count: 4)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1583, file: !1584, line: 168, baseType: !1593, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1583, file: !1584, line: 169, baseType: !1593, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1583, file: !1584, line: 170, baseType: !1593, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1583, file: !1584, line: 171, baseType: !1587, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1583, file: !1584, line: 172, baseType: !1605, size: 32, offset: 384)
!1605 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1583, file: !1584, line: 176, baseType: !1607, size: 64, offset: 448)
!1607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1608, size: 64)
!1608 = !DISubroutineType(types: !1609)
!1609 = !{!1589, !1610, !1587}
!1610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1583, file: !1584, line: 177, baseType: !1612, size: 64, offset: 512)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = !DISubroutineType(types: !1614)
!1614 = !{null, !1610, !1589}
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1583, file: !1584, line: 178, baseType: !1610, size: 64, offset: 576)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1583, file: !1584, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1583, file: !1584, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1583, file: !1584, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1620, size: 64)
!1620 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !1621, line: 32, baseType: !1622)
!1621 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !1621, line: 32, size: 96, elements: !1623)
!1623 = !{!1624}
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1622, file: !1621, line: 32, baseType: !1625, size: 96)
!1625 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !1621, line: 31, baseType: !1626)
!1626 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !1621, line: 31, size: 96, elements: !1627)
!1627 = !{!1628, !1629, !1630}
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1626, file: !1621, line: 31, baseType: !7, size: 32)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1626, file: !1621, line: 31, baseType: !7, size: 32, offset: 32)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1626, file: !1621, line: 31, baseType: !1631, size: 32, offset: 64)
!1631 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1605, size: 32, elements: !1632)
!1632 = !{!1633}
!1633 = !DISubrange(count: 1)
!1634 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !561, line: 84, baseType: !1635)
!1635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1636, size: 64)
!1636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !561, line: 100, size: 1216, elements: !1637)
!1637 = !{!1638, !1639, !1640, !2888, !2889, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2914, !2922, !2923}
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1636, file: !561, line: 102, baseType: !1605, size: 32)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1636, file: !561, line: 105, baseType: !7, size: 32, offset: 32)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1636, file: !561, line: 108, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1642, size: 64)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !318, line: 217, size: 832, elements: !1643)
!1643 = !{!1644, !2855, !2856, !2857, !2858, !2862, !2863, !2864, !2882, !2883, !2884, !2885, !2886, !2887}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1642, file: !318, line: 219, baseType: !1645, size: 64)
!1645 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1646, size: 64)
!1646 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !318, line: 151, baseType: !1647)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !318, line: 151, size: 128, elements: !1648)
!1648 = !{!1649}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1647, file: !318, line: 151, baseType: !1650, size: 128)
!1650 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !318, line: 150, baseType: !1651)
!1651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !318, line: 150, size: 128, elements: !1652)
!1652 = !{!1653, !1654, !1655}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1651, file: !318, line: 150, baseType: !7, size: 32)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1651, file: !318, line: 150, baseType: !7, size: 32, offset: 32)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1651, file: !318, line: 150, baseType: !1656, size: 64, offset: 64)
!1656 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1657, size: 64, elements: !1632)
!1657 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1553, line: 108, baseType: !1658)
!1658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !318, line: 122, size: 512, elements: !1660)
!1660 = !{!1661, !1662, !1663, !2847, !2848, !2849, !2850, !2851, !2852, !2853}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1659, file: !318, line: 124, baseType: !1641, size: 64)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1659, file: !318, line: 125, baseType: !1641, size: 64, offset: 64)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1659, file: !318, line: 131, baseType: !1664, size: 64, offset: 128)
!1664 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !318, line: 128, size: 64, elements: !1665)
!1665 = !{!1666, !2846}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1664, file: !318, line: 129, baseType: !1667, size: 64)
!1667 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1553, line: 66, baseType: !1668)
!1668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !586, line: 143, size: 192, elements: !1670)
!1670 = !{!1671, !2844, !2845}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1669, file: !586, line: 145, baseType: !1672, size: 64)
!1672 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1553, line: 69, baseType: !1673)
!1673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !586, line: 136, size: 192, elements: !1675)
!1675 = !{!1676, !2842, !2843}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1674, file: !586, line: 137, baseType: !1677, size: 64)
!1677 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1553, line: 58, baseType: !1678)
!1678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !586, line: 737, size: 768, elements: !1680)
!1680 = !{!1681, !2689, !2699, !2705, !2710, !2715, !2722, !2728, !2734, !2739, !2753, !2758, !2764, !2769, !2779, !2784, !2800, !2807, !2814, !2820, !2825, !2831, !2837}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1679, file: !586, line: 738, baseType: !1682, size: 256)
!1682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !586, line: 271, size: 256, elements: !1683)
!1683 = !{!1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1699, !1700, !1701}
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1682, file: !586, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1682, file: !586, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1682, file: !586, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1682, file: !586, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1682, file: !586, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1682, file: !586, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1682, file: !586, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1682, file: !586, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1682, file: !586, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1682, file: !586, line: 312, baseType: !7, size: 32, offset: 32)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1682, file: !586, line: 316, baseType: !1695, size: 32, offset: 64)
!1695 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1696, line: 58, baseType: !1697)
!1696 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1697 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1698, line: 44, baseType: !7)
!1698 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1682, file: !586, line: 319, baseType: !7, size: 32, offset: 96)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1682, file: !586, line: 323, baseType: !1641, size: 64, offset: 128)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1682, file: !586, line: 327, baseType: !1702, size: 64, offset: 192)
!1702 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1553, line: 56, baseType: !1703)
!1703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1704, size: 64)
!1704 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !334, line: 3371, size: 1792, elements: !1705)
!1705 = !{!1706, !1739, !1745, !1756, !1775, !1786, !1791, !1798, !1804, !1818, !1826, !1864, !1981, !2009, !2026, !2027, !2032, !2041, !2047, !2052, !2056, !2060, !2340, !2387, !2393, !2399, !2406, !2419, !2433, !2450, !2462, !2484, !2499, !2671}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1704, file: !334, line: 3372, baseType: !1707, size: 64)
!1707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !334, line: 360, size: 64, elements: !1708)
!1708 = !{!1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738}
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1707, file: !334, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1707, file: !334, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1707, file: !334, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1707, file: !334, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1707, file: !334, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1707, file: !334, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1707, file: !334, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1707, file: !334, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1707, file: !334, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1707, file: !334, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1707, file: !334, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1707, file: !334, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1707, file: !334, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1707, file: !334, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1707, file: !334, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1707, file: !334, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1707, file: !334, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1707, file: !334, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1707, file: !334, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1707, file: !334, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1707, file: !334, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1707, file: !334, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1707, file: !334, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1707, file: !334, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1707, file: !334, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1707, file: !334, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1707, file: !334, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1707, file: !334, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1707, file: !334, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1707, file: !334, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1704, file: !334, line: 3373, baseType: !1740, size: 192)
!1740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !334, line: 402, size: 192, elements: !1741)
!1741 = !{!1742, !1743, !1744}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1740, file: !334, line: 403, baseType: !1707, size: 64)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1740, file: !334, line: 404, baseType: !1702, size: 64, offset: 64)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1740, file: !334, line: 405, baseType: !1702, size: 64, offset: 128)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1704, file: !334, line: 3374, baseType: !1746, size: 320)
!1746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !334, line: 1384, size: 320, elements: !1747)
!1747 = !{!1748, !1749}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1746, file: !334, line: 1385, baseType: !1740, size: 192)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1746, file: !334, line: 1386, baseType: !1750, size: 128, offset: 192)
!1750 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1751, line: 58, baseType: !1752)
!1751 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1752 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1751, line: 54, size: 128, elements: !1753)
!1753 = !{!1754, !1755}
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1752, file: !1751, line: 56, baseType: !1570, size: 64)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1752, file: !1751, line: 57, baseType: !1587, size: 64, offset: 64)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1704, file: !334, line: 3375, baseType: !1757, size: 256)
!1757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !334, line: 1397, size: 256, elements: !1758)
!1758 = !{!1759, !1760}
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1757, file: !334, line: 1398, baseType: !1740, size: 192)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1757, file: !334, line: 1399, baseType: !1761, size: 64, offset: 192)
!1761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1762, size: 64)
!1762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1763, line: 52, size: 256, elements: !1764)
!1763 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1764 = !{!1765, !1766, !1767, !1768, !1769, !1770, !1771}
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1762, file: !1763, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1762, file: !1763, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1762, file: !1763, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1762, file: !1763, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1762, file: !1763, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1762, file: !1763, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1762, file: !1763, line: 62, baseType: !1772, size: 192, offset: 64)
!1772 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1570, size: 192, elements: !1773)
!1773 = !{!1774}
!1774 = !DISubrange(count: 3)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1704, file: !334, line: 3376, baseType: !1776, size: 256)
!1776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !334, line: 1408, size: 256, elements: !1777)
!1777 = !{!1778, !1779}
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1776, file: !334, line: 1409, baseType: !1740, size: 192)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1776, file: !334, line: 1410, baseType: !1780, size: 64, offset: 192)
!1780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1781, size: 64)
!1781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1782, line: 27, size: 192, elements: !1783)
!1782 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1783 = !{!1784, !1785}
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1781, file: !1782, line: 29, baseType: !1750, size: 128)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1781, file: !1782, line: 30, baseType: !189, size: 32, offset: 128)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1704, file: !334, line: 3377, baseType: !1787, size: 256)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !334, line: 1437, size: 256, elements: !1788)
!1788 = !{!1789, !1790}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1787, file: !334, line: 1438, baseType: !1740, size: 192)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1787, file: !334, line: 1439, baseType: !1702, size: 64, offset: 192)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1704, file: !334, line: 3378, baseType: !1792, size: 256)
!1792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !334, line: 1418, size: 256, elements: !1793)
!1793 = !{!1794, !1795, !1796}
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1792, file: !334, line: 1419, baseType: !1740, size: 192)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1792, file: !334, line: 1420, baseType: !1605, size: 32, offset: 192)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1792, file: !334, line: 1421, baseType: !1797, size: 8, offset: 224)
!1797 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1594, size: 8, elements: !1632)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1704, file: !334, line: 3379, baseType: !1799, size: 320)
!1799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !334, line: 1428, size: 320, elements: !1800)
!1800 = !{!1801, !1802, !1803}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1799, file: !334, line: 1429, baseType: !1740, size: 192)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1799, file: !334, line: 1430, baseType: !1702, size: 64, offset: 192)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1799, file: !334, line: 1431, baseType: !1702, size: 64, offset: 256)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1704, file: !334, line: 3380, baseType: !1805, size: 320)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !334, line: 1460, size: 320, elements: !1806)
!1806 = !{!1807, !1808}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1805, file: !334, line: 1461, baseType: !1740, size: 192)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1805, file: !334, line: 1462, baseType: !1809, size: 128, offset: 192)
!1809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1810, line: 31, size: 128, elements: !1811)
!1810 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1811 = !{!1812, !1816, !1817}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1809, file: !1810, line: 32, baseType: !1813, size: 64)
!1813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1814, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1815)
!1815 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1809, file: !1810, line: 33, baseType: !7, size: 32, offset: 64)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1809, file: !1810, line: 34, baseType: !7, size: 32, offset: 96)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1704, file: !334, line: 3381, baseType: !1819, size: 384)
!1819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !334, line: 2507, size: 384, elements: !1820)
!1820 = !{!1821, !1822, !1823, !1824, !1825}
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1819, file: !334, line: 2508, baseType: !1740, size: 192)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1819, file: !334, line: 2509, baseType: !1695, size: 32, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1819, file: !334, line: 2510, baseType: !7, size: 32, offset: 224)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1819, file: !334, line: 2511, baseType: !1702, size: 64, offset: 256)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1819, file: !334, line: 2512, baseType: !1702, size: 64, offset: 320)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1704, file: !334, line: 3382, baseType: !1827, size: 896)
!1827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !334, line: 2652, size: 896, elements: !1828)
!1828 = !{!1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861}
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1827, file: !334, line: 2653, baseType: !1819, size: 384)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1827, file: !334, line: 2654, baseType: !1702, size: 64, offset: 384)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1827, file: !334, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1827, file: !334, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1827, file: !334, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1827, file: !334, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1827, file: !334, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1827, file: !334, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1827, file: !334, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1827, file: !334, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1827, file: !334, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1827, file: !334, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1827, file: !334, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1827, file: !334, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1827, file: !334, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1827, file: !334, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1827, file: !334, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1827, file: !334, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1827, file: !334, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1827, file: !334, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1827, file: !334, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1827, file: !334, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1827, file: !334, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1827, file: !334, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1827, file: !334, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1827, file: !334, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1827, file: !334, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1827, file: !334, line: 2703, baseType: !7, size: 32, offset: 512)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1827, file: !334, line: 2705, baseType: !1702, size: 64, offset: 576)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1827, file: !334, line: 2706, baseType: !1702, size: 64, offset: 640)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1827, file: !334, line: 2707, baseType: !1702, size: 64, offset: 704)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1827, file: !334, line: 2708, baseType: !1702, size: 64, offset: 768)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1827, file: !334, line: 2711, baseType: !1862, size: 64, offset: 832)
!1862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1863, size: 64)
!1863 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !334, line: 2711, flags: DIFlagFwdDecl)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1704, file: !334, line: 3383, baseType: !1865, size: 960)
!1865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !334, line: 2756, size: 960, elements: !1866)
!1866 = !{!1867, !1868}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1865, file: !334, line: 2757, baseType: !1827, size: 896)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1865, file: !334, line: 2758, baseType: !1869, size: 64, offset: 896)
!1869 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1553, line: 50, baseType: !1870)
!1870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1871, size: 64)
!1871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1872, line: 240, size: 384, elements: !1873)
!1872 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1873 = !{!1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884}
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1871, file: !1872, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1871, file: !1872, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1871, file: !1872, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1871, file: !1872, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1871, file: !1872, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1871, file: !1872, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1871, file: !1872, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1871, file: !1872, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1871, file: !1872, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1871, file: !1872, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1871, file: !1872, line: 321, baseType: !1885, size: 320, offset: 64)
!1885 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1872, line: 315, size: 320, elements: !1886)
!1886 = !{!1887, !1948, !1950, !1979, !1980}
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1885, file: !1872, line: 316, baseType: !1888, size: 64)
!1888 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1889, size: 64, elements: !1632)
!1889 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1872, line: 183, baseType: !1890)
!1890 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1872, line: 166, size: 64, elements: !1891)
!1891 = !{!1892, !1893, !1894, !1897, !1898, !1906, !1907, !1919, !1922, !1923, !1924, !1925, !1938, !1945}
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1890, file: !1872, line: 168, baseType: !1605, size: 32)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1890, file: !1872, line: 169, baseType: !7, size: 32)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1890, file: !1872, line: 170, baseType: !1895, size: 64)
!1895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1896, size: 64)
!1896 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1594)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1890, file: !1872, line: 171, baseType: !1869, size: 64)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1890, file: !1872, line: 172, baseType: !1899, size: 64)
!1899 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1553, line: 53, baseType: !1900)
!1900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1901, size: 64)
!1901 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1872, line: 359, size: 128, elements: !1902)
!1902 = !{!1903, !1904}
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1901, file: !1872, line: 360, baseType: !1605, size: 32)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1901, file: !1872, line: 361, baseType: !1905, size: 64, offset: 64)
!1905 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1869, size: 64, elements: !1632)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1890, file: !1872, line: 173, baseType: !189, size: 32)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1890, file: !1872, line: 174, baseType: !1908, size: 32)
!1908 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1872, line: 133, baseType: !1909)
!1909 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1872, line: 115, size: 32, elements: !1910)
!1910 = !{!1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918}
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1909, file: !1872, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1909, file: !1872, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1909, file: !1872, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1909, file: !1872, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1909, file: !1872, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1909, file: !1872, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1909, file: !1872, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1909, file: !1872, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1890, file: !1872, line: 175, baseType: !1920, size: 64)
!1920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1921, size: 64)
!1921 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1872, line: 175, flags: DIFlagFwdDecl)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1890, file: !1872, line: 176, baseType: !1554, size: 64)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1890, file: !1872, line: 177, baseType: !1702, size: 64)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1890, file: !1872, line: 178, baseType: !1641, size: 64)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1890, file: !1872, line: 179, baseType: !1926, size: 64)
!1926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1927, size: 64)
!1927 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1872, line: 150, baseType: !1928)
!1928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1872, line: 142, size: 320, elements: !1929)
!1929 = !{!1930, !1931, !1932, !1933, !1936, !1937}
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1928, file: !1872, line: 144, baseType: !1702, size: 64)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1928, file: !1872, line: 145, baseType: !1869, size: 64, offset: 64)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1928, file: !1872, line: 146, baseType: !1869, size: 64, offset: 128)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1928, file: !1872, line: 147, baseType: !1934, size: 32, offset: 192)
!1934 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1935, line: 31, baseType: !1605)
!1935 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1928, file: !1872, line: 148, baseType: !7, size: 32, offset: 224)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1928, file: !1872, line: 149, baseType: !1815, size: 8, offset: 256)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1890, file: !1872, line: 180, baseType: !1939, size: 64)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1940, size: 64)
!1940 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1872, line: 162, baseType: !1941)
!1941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1872, line: 159, size: 128, elements: !1942)
!1942 = !{!1943, !1944}
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1941, file: !1872, line: 160, baseType: !1702, size: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1941, file: !1872, line: 161, baseType: !1587, size: 64, offset: 64)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1890, file: !1872, line: 181, baseType: !1946, size: 64)
!1946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1947, size: 64)
!1947 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1872, line: 181, flags: DIFlagFwdDecl)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1885, file: !1872, line: 317, baseType: !1949, size: 64)
!1949 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1587, size: 64, elements: !1632)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1885, file: !1872, line: 318, baseType: !1951, size: 320)
!1951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1872, line: 188, size: 320, elements: !1952)
!1952 = !{!1953, !1955, !1978}
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1951, file: !1872, line: 190, baseType: !1954, size: 192)
!1954 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1889, size: 192, elements: !1773)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1951, file: !1872, line: 193, baseType: !1956, size: 64, offset: 192)
!1956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1957, size: 64)
!1957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1872, line: 206, size: 320, elements: !1958)
!1958 = !{!1959, !1963, !1964, !1965, !1977}
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1957, file: !1872, line: 208, baseType: !1960, size: 64)
!1960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1961, size: 64)
!1961 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1553, line: 62, baseType: !1962)
!1962 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1553, line: 61, flags: DIFlagFwdDecl)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1957, file: !1872, line: 211, baseType: !7, size: 32, offset: 64)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1957, file: !1872, line: 214, baseType: !1587, size: 64, offset: 128)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1957, file: !1872, line: 224, baseType: !1966, size: 64, offset: 192)
!1966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1967, size: 64)
!1967 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1872, line: 202, baseType: !1968)
!1968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1872, line: 202, size: 128, elements: !1969)
!1969 = !{!1970}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1968, file: !1872, line: 202, baseType: !1971, size: 128)
!1971 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1872, line: 200, baseType: !1972)
!1972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1872, line: 200, size: 128, elements: !1973)
!1973 = !{!1974, !1975, !1976}
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1972, file: !1872, line: 200, baseType: !7, size: 32)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1972, file: !1872, line: 200, baseType: !7, size: 32, offset: 32)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1972, file: !1872, line: 200, baseType: !1905, size: 64, offset: 64)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1957, file: !1872, line: 234, baseType: !1966, size: 64, offset: 256)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1951, file: !1872, line: 197, baseType: !1587, size: 64, offset: 256)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1885, file: !1872, line: 319, baseType: !1762, size: 256)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1885, file: !1872, line: 320, baseType: !1781, size: 192)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1704, file: !334, line: 3384, baseType: !1982, size: 1472)
!1982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !334, line: 3114, size: 1472, elements: !1983)
!1983 = !{!1984, !2005, !2006, !2007, !2008}
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1982, file: !334, line: 3115, baseType: !1985, size: 1216)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !334, line: 2984, size: 1216, elements: !1986)
!1986 = !{!1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1985, file: !334, line: 2985, baseType: !1865, size: 960)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1985, file: !334, line: 2986, baseType: !1702, size: 64, offset: 960)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1985, file: !334, line: 2987, baseType: !1702, size: 64, offset: 1024)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1985, file: !334, line: 2988, baseType: !1702, size: 64, offset: 1088)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1985, file: !334, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1985, file: !334, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1985, file: !334, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1985, file: !334, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1985, file: !334, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1985, file: !334, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1985, file: !334, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1985, file: !334, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1985, file: !334, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1985, file: !334, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1985, file: !334, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1985, file: !334, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1985, file: !334, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1985, file: !334, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1982, file: !334, line: 3117, baseType: !1702, size: 64, offset: 1216)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1982, file: !334, line: 3119, baseType: !1702, size: 64, offset: 1280)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1982, file: !334, line: 3121, baseType: !1702, size: 64, offset: 1344)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1982, file: !334, line: 3123, baseType: !1702, size: 64, offset: 1408)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1704, file: !334, line: 3385, baseType: !2010, size: 1088)
!2010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !334, line: 2874, size: 1088, elements: !2011)
!2011 = !{!2012, !2013, !2014}
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2010, file: !334, line: 2875, baseType: !1865, size: 960)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2010, file: !334, line: 2876, baseType: !1869, size: 64, offset: 960)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2010, file: !334, line: 2877, baseType: !2015, size: 64, offset: 1024)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2017, line: 172, size: 128, elements: !2018)
!2017 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2018 = !{!2019, !2020, !2021, !2022, !2023, !2024, !2025}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2016, file: !2017, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2016, file: !2017, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2016, file: !2017, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2016, file: !2017, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2016, file: !2017, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2016, file: !2017, line: 195, baseType: !7, size: 32, offset: 32)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2016, file: !2017, line: 199, baseType: !1702, size: 64, offset: 64)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1704, file: !334, line: 3386, baseType: !1985, size: 1216)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1704, file: !334, line: 3387, baseType: !2028, size: 1280)
!2028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !334, line: 3093, size: 1280, elements: !2029)
!2029 = !{!2030, !2031}
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2028, file: !334, line: 3094, baseType: !1985, size: 1216)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2028, file: !334, line: 3095, baseType: !2015, size: 64, offset: 1216)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1704, file: !334, line: 3388, baseType: !2033, size: 1216)
!2033 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !334, line: 2824, size: 1216, elements: !2034)
!2034 = !{!2035, !2036, !2037, !2038, !2039, !2040}
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2033, file: !334, line: 2825, baseType: !1827, size: 896)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2033, file: !334, line: 2827, baseType: !1702, size: 64, offset: 896)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2033, file: !334, line: 2828, baseType: !1702, size: 64, offset: 960)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2033, file: !334, line: 2829, baseType: !1702, size: 64, offset: 1024)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2033, file: !334, line: 2830, baseType: !1702, size: 64, offset: 1088)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2033, file: !334, line: 2831, baseType: !1702, size: 64, offset: 1152)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1704, file: !334, line: 3389, baseType: !2042, size: 1024)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !334, line: 2850, size: 1024, elements: !2043)
!2043 = !{!2044, !2045, !2046}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2042, file: !334, line: 2851, baseType: !1865, size: 960)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2042, file: !334, line: 2852, baseType: !1605, size: 32, offset: 960)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2042, file: !334, line: 2853, baseType: !1605, size: 32, offset: 992)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1704, file: !334, line: 3390, baseType: !2048, size: 1024)
!2048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !334, line: 2857, size: 1024, elements: !2049)
!2049 = !{!2050, !2051}
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2048, file: !334, line: 2858, baseType: !1865, size: 960)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2048, file: !334, line: 2859, baseType: !2015, size: 64, offset: 960)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1704, file: !334, line: 3391, baseType: !2053, size: 960)
!2053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !334, line: 2862, size: 960, elements: !2054)
!2054 = !{!2055}
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2053, file: !334, line: 2863, baseType: !1865, size: 960)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1704, file: !334, line: 3392, baseType: !2057, size: 1472)
!2057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !334, line: 3304, size: 1472, elements: !2058)
!2058 = !{!2059}
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2057, file: !334, line: 3305, baseType: !1982, size: 1472)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1704, file: !334, line: 3393, baseType: !2061, size: 1792)
!2061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !334, line: 3248, size: 1792, elements: !2062)
!2062 = !{!2063, !2064, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339}
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2061, file: !334, line: 3249, baseType: !1982, size: 1472)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2061, file: !334, line: 3251, baseType: !2065, size: 64, offset: 1472)
!2065 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2066, size: 64)
!2066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2067, line: 463, size: 1152, elements: !2068)
!2067 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2068 = !{!2069, !2072, !2103, !2104, !2243, !2263, !2264, !2265, !2266, !2267, !2268, !2292, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318}
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2066, file: !2067, line: 464, baseType: !2070, size: 64)
!2070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2071, size: 64)
!2071 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2067, line: 464, flags: DIFlagFwdDecl)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2066, file: !2067, line: 467, baseType: !2073, size: 64, offset: 64)
!2073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2074, size: 64)
!2074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !318, line: 374, size: 640, elements: !2075)
!2075 = !{!2076, !2078, !2079, !2092, !2093, !2094, !2095, !2096, !2097, !2099, !2101, !2102}
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2074, file: !318, line: 377, baseType: !2077, size: 64)
!2077 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1553, line: 111, baseType: !1641)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2074, file: !318, line: 378, baseType: !2077, size: 64, offset: 64)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2074, file: !318, line: 381, baseType: !2080, size: 64, offset: 128)
!2080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2081, size: 64)
!2081 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !318, line: 282, baseType: !2082)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !318, line: 282, size: 128, elements: !2083)
!2083 = !{!2084}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2082, file: !318, line: 282, baseType: !2085, size: 128)
!2085 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !318, line: 281, baseType: !2086)
!2086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !318, line: 281, size: 128, elements: !2087)
!2087 = !{!2088, !2089, !2090}
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2086, file: !318, line: 281, baseType: !7, size: 32)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2086, file: !318, line: 281, baseType: !7, size: 32, offset: 32)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2086, file: !318, line: 281, baseType: !2091, size: 64, offset: 64)
!2091 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2077, size: 64, elements: !1632)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2074, file: !318, line: 384, baseType: !1605, size: 32, offset: 192)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2074, file: !318, line: 387, baseType: !1605, size: 32, offset: 224)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2074, file: !318, line: 390, baseType: !1605, size: 32, offset: 256)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2074, file: !318, line: 394, baseType: !2080, size: 64, offset: 320)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2074, file: !318, line: 396, baseType: !317, size: 32, offset: 384)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2074, file: !318, line: 399, baseType: !2098, size: 64, offset: 416)
!2098 = !DICompositeType(tag: DW_TAG_array_type, baseType: !323, size: 64, elements: !1571)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2074, file: !318, line: 402, baseType: !2100, size: 64, offset: 480)
!2100 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1571)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2074, file: !318, line: 406, baseType: !1605, size: 32, offset: 544)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2074, file: !318, line: 409, baseType: !1605, size: 32, offset: 576)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2066, file: !2067, line: 470, baseType: !1668, size: 64, offset: 128)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2066, file: !2067, line: 473, baseType: !2105, size: 64, offset: 192)
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2106, size: 64)
!2106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2017, line: 39, size: 1152, elements: !2107)
!2107 = !{!2108, !2160, !2173, !2186, !2187, !2198, !2199, !2203, !2204, !2205, !2206, !2207}
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2106, file: !2017, line: 41, baseType: !2109, size: 64)
!2109 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2110, line: 144, baseType: !2111)
!2110 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2112, size: 64)
!2112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2110, line: 100, size: 896, elements: !2113)
!2113 = !{!2114, !2122, !2127, !2132, !2134, !2137, !2138, !2139, !2140, !2141, !2146, !2148, !2149, !2154, !2159}
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2112, file: !2110, line: 102, baseType: !2115, size: 64)
!2115 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2110, line: 52, baseType: !2116)
!2116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2117, size: 64)
!2117 = !DISubroutineType(types: !2118)
!2118 = !{!2119, !2120}
!2119 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2110, line: 47, baseType: !7)
!2120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2121, size: 64)
!2121 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2112, file: !2110, line: 105, baseType: !2123, size: 64, offset: 64)
!2123 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2110, line: 59, baseType: !2124)
!2124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2125, size: 64)
!2125 = !DISubroutineType(types: !2126)
!2126 = !{!1605, !2120, !2120}
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2112, file: !2110, line: 108, baseType: !2128, size: 64, offset: 128)
!2128 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2110, line: 63, baseType: !2129)
!2129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2130, size: 64)
!2130 = !DISubroutineType(types: !2131)
!2131 = !{null, !1610}
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2112, file: !2110, line: 111, baseType: !2133, size: 64, offset: 192)
!2133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1610, size: 64)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2112, file: !2110, line: 114, baseType: !2135, size: 64, offset: 256)
!2135 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2136, line: 46, baseType: !1570)
!2136 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2112, file: !2110, line: 117, baseType: !2135, size: 64, offset: 320)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2112, file: !2110, line: 120, baseType: !2135, size: 64, offset: 384)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2112, file: !2110, line: 124, baseType: !7, size: 32, offset: 448)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2112, file: !2110, line: 128, baseType: !7, size: 32, offset: 480)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2112, file: !2110, line: 131, baseType: !2142, size: 64, offset: 512)
!2142 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2110, line: 75, baseType: !2143)
!2143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2144, size: 64)
!2144 = !DISubroutineType(types: !2145)
!2145 = !{!1610, !2135, !2135}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2112, file: !2110, line: 132, baseType: !2147, size: 64, offset: 576)
!2147 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2110, line: 78, baseType: !2129)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2112, file: !2110, line: 135, baseType: !1610, size: 64, offset: 640)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2112, file: !2110, line: 136, baseType: !2150, size: 64, offset: 704)
!2150 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2110, line: 82, baseType: !2151)
!2151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2152, size: 64)
!2152 = !DISubroutineType(types: !2153)
!2153 = !{!1610, !1610, !2135, !2135}
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2112, file: !2110, line: 137, baseType: !2155, size: 64, offset: 768)
!2155 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2110, line: 83, baseType: !2156)
!2156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2157, size: 64)
!2157 = !DISubroutineType(types: !2158)
!2158 = !{null, !1610, !1610}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2112, file: !2110, line: 141, baseType: !7, size: 32, offset: 832)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2106, file: !2017, line: 48, baseType: !2161, size: 64, offset: 64)
!2161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2162, size: 64)
!2162 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !586, line: 35, baseType: !2163)
!2163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !586, line: 35, size: 128, elements: !2164)
!2164 = !{!2165}
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2163, file: !586, line: 35, baseType: !2166, size: 128)
!2166 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !586, line: 33, baseType: !2167)
!2167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !586, line: 33, size: 128, elements: !2168)
!2168 = !{!2169, !2170, !2171}
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2167, file: !586, line: 33, baseType: !7, size: 32)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2167, file: !586, line: 33, baseType: !7, size: 32, offset: 32)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2167, file: !586, line: 33, baseType: !2172, size: 64, offset: 64)
!2172 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1677, size: 64, elements: !1632)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2106, file: !2017, line: 51, baseType: !2174, size: 64, offset: 128)
!2174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2175, size: 64)
!2175 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !334, line: 183, baseType: !2176)
!2176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !334, line: 183, size: 128, elements: !2177)
!2177 = !{!2178}
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2176, file: !334, line: 183, baseType: !2179, size: 128)
!2179 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !334, line: 182, baseType: !2180)
!2180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !334, line: 182, size: 128, elements: !2181)
!2181 = !{!2182, !2183, !2184}
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2180, file: !334, line: 182, baseType: !7, size: 32)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2180, file: !334, line: 182, baseType: !7, size: 32, offset: 32)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2180, file: !334, line: 182, baseType: !2185, size: 64, offset: 64)
!2185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1702, size: 64, elements: !1632)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2106, file: !2017, line: 54, baseType: !1702, size: 64, offset: 192)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2106, file: !2017, line: 57, baseType: !2188, size: 128, offset: 256)
!2188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2189, line: 31, size: 128, elements: !2190)
!2189 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2190 = !{!2191, !2192, !2193, !2194, !2195, !2196, !2197}
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2188, file: !2189, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2188, file: !2189, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2188, file: !2189, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2188, file: !2189, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2188, file: !2189, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2188, file: !2189, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2188, file: !2189, line: 56, baseType: !1552, size: 64, offset: 64)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2106, file: !2017, line: 60, baseType: !2188, size: 128, offset: 384)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2106, file: !2017, line: 64, baseType: !2200, size: 64, offset: 512)
!2200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2201, size: 64)
!2201 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2202, line: 33, flags: DIFlagFwdDecl)
!2202 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2106, file: !2017, line: 67, baseType: !1702, size: 64, offset: 576)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2106, file: !2017, line: 73, baseType: !2109, size: 64, offset: 640)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2106, file: !2017, line: 77, baseType: !1552, size: 64, offset: 704)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2106, file: !2017, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2106, file: !2017, line: 82, baseType: !2208, size: 320, offset: 832)
!2208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1541, line: 62, size: 320, elements: !2209)
!2209 = !{!2210, !2216, !2217, !2218, !2219, !2226}
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2208, file: !1541, line: 63, baseType: !2211, size: 64)
!2211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2212, size: 64)
!2212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1541, line: 56, size: 128, elements: !2213)
!2213 = !{!2214, !2215}
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2212, file: !1541, line: 57, baseType: !2211, size: 64)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2212, file: !1541, line: 58, baseType: !1797, size: 8, offset: 64)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2208, file: !1541, line: 64, baseType: !7, size: 32, offset: 64)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2208, file: !1541, line: 66, baseType: !7, size: 32, offset: 96)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2208, file: !1541, line: 68, baseType: !1815, size: 8, offset: 128)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2208, file: !1541, line: 70, baseType: !2220, size: 64, offset: 192)
!2220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2221, size: 64)
!2221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1541, line: 37, size: 128, elements: !2222)
!2222 = !{!2223, !2224}
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2221, file: !1541, line: 39, baseType: !2220, size: 64)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2221, file: !1541, line: 40, baseType: !2225, size: 64, offset: 64)
!2225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1702, size: 64)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2208, file: !1541, line: 71, baseType: !2227, size: 64, offset: 256)
!2227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2228, size: 64)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1541, line: 45, size: 320, elements: !2229)
!2229 = !{!2230, !2231}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2228, file: !1541, line: 47, baseType: !2227, size: 64)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2228, file: !1541, line: 48, baseType: !2232, size: 256, offset: 64)
!2232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !334, line: 1883, size: 256, elements: !2233)
!2233 = !{!2234, !2236, !2237, !2242}
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2232, file: !334, line: 1884, baseType: !2235, size: 64)
!2235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2232, size: 64)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2232, file: !334, line: 1885, baseType: !2235, size: 64, offset: 64)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2232, file: !334, line: 1891, baseType: !2238, size: 64, offset: 128)
!2238 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2232, file: !334, line: 1891, size: 64, elements: !2239)
!2239 = !{!2240, !2241}
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2238, file: !334, line: 1891, baseType: !1677, size: 64)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2238, file: !334, line: 1891, baseType: !1702, size: 64)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2232, file: !334, line: 1892, baseType: !2225, size: 64, offset: 192)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2066, file: !2067, line: 476, baseType: !2244, size: 64, offset: 256)
!2244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2245, size: 64)
!2245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !561, line: 187, size: 256, elements: !2246)
!2246 = !{!2247, !2248, !2261, !2262}
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2245, file: !561, line: 189, baseType: !1605, size: 32)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2245, file: !561, line: 192, baseType: !2249, size: 64, offset: 64)
!2249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2250, size: 64)
!2250 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !561, line: 87, baseType: !2251)
!2251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !561, line: 87, size: 128, elements: !2252)
!2252 = !{!2253}
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2251, file: !561, line: 87, baseType: !2254, size: 128)
!2254 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !561, line: 85, baseType: !2255)
!2255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !561, line: 85, size: 128, elements: !2256)
!2256 = !{!2257, !2258, !2259}
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2255, file: !561, line: 85, baseType: !7, size: 32)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2255, file: !561, line: 85, baseType: !7, size: 32, offset: 32)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2255, file: !561, line: 85, baseType: !2260, size: 64, offset: 64)
!2260 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1634, size: 64, elements: !1632)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2245, file: !561, line: 197, baseType: !2109, size: 64, offset: 128)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2245, file: !561, line: 200, baseType: !1635, size: 64, offset: 192)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2066, file: !2067, line: 479, baseType: !2109, size: 64, offset: 320)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2066, file: !2067, line: 484, baseType: !1702, size: 64, offset: 384)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2066, file: !2067, line: 488, baseType: !1702, size: 64, offset: 448)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2066, file: !2067, line: 493, baseType: !1702, size: 64, offset: 512)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2066, file: !2067, line: 496, baseType: !1702, size: 64, offset: 576)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2066, file: !2067, line: 501, baseType: !2269, size: 64, offset: 640)
!2269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !329, line: 2355, size: 576, elements: !2271)
!2271 = !{!2272, !2275, !2276, !2277, !2278, !2280, !2281, !2286, !2287, !2288, !2289, !2290, !2291}
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2270, file: !329, line: 2356, baseType: !2273, size: 64)
!2273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2274, size: 64)
!2274 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !329, line: 2356, flags: DIFlagFwdDecl)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2270, file: !329, line: 2357, baseType: !1895, size: 64, offset: 64)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2270, file: !329, line: 2358, baseType: !1605, size: 32, offset: 128)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2270, file: !329, line: 2359, baseType: !1605, size: 32, offset: 160)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2270, file: !329, line: 2360, baseType: !2279, size: 128, offset: 192)
!2279 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1605, size: 128, elements: !1598)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2270, file: !329, line: 2364, baseType: !1605, size: 32, offset: 320)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2270, file: !329, line: 2367, baseType: !2282, size: 128, offset: 384)
!2282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !329, line: 2349, size: 128, elements: !2283)
!2283 = !{!2284, !2285}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2282, file: !329, line: 2351, baseType: !1869, size: 64)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2282, file: !329, line: 2352, baseType: !1587, size: 64, offset: 64)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2270, file: !329, line: 2371, baseType: !328, size: 32, offset: 512)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2270, file: !329, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2270, file: !329, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2270, file: !329, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2270, file: !329, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2270, file: !329, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2066, file: !2067, line: 504, baseType: !2293, size: 64, offset: 704)
!2293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2294, size: 64)
!2294 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2067, line: 504, flags: DIFlagFwdDecl)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2066, file: !2067, line: 507, baseType: !2109, size: 64, offset: 768)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2066, file: !2067, line: 510, baseType: !1605, size: 32, offset: 832)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2066, file: !2067, line: 513, baseType: !1605, size: 32, offset: 864)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2066, file: !2067, line: 516, baseType: !1695, size: 32, offset: 896)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2066, file: !2067, line: 519, baseType: !1695, size: 32, offset: 928)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2066, file: !2067, line: 522, baseType: !7, size: 32, offset: 960)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2066, file: !2067, line: 523, baseType: !7, size: 32, offset: 992)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2066, file: !2067, line: 528, baseType: !1895, size: 64, offset: 1024)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2066, file: !2067, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2066, file: !2067, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2066, file: !2067, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2066, file: !2067, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2066, file: !2067, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2066, file: !2067, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2066, file: !2067, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2066, file: !2067, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2066, file: !2067, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2066, file: !2067, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2066, file: !2067, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2066, file: !2067, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2066, file: !2067, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2066, file: !2067, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2066, file: !2067, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2066, file: !2067, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2061, file: !334, line: 3254, baseType: !1702, size: 64, offset: 1536)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2061, file: !334, line: 3257, baseType: !1702, size: 64, offset: 1600)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2061, file: !334, line: 3258, baseType: !1702, size: 64, offset: 1664)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2061, file: !334, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2061, file: !334, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2061, file: !334, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2061, file: !334, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2061, file: !334, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2061, file: !334, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2061, file: !334, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2061, file: !334, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2061, file: !334, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2061, file: !334, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2061, file: !334, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2061, file: !334, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2061, file: !334, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2061, file: !334, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2061, file: !334, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2061, file: !334, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2061, file: !334, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2061, file: !334, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1704, file: !334, line: 3394, baseType: !2341, size: 1344)
!2341 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !334, line: 2279, size: 1344, elements: !2342)
!2342 = !{!2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384}
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2341, file: !334, line: 2280, baseType: !1740, size: 192)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2341, file: !334, line: 2281, baseType: !1702, size: 64, offset: 192)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2341, file: !334, line: 2282, baseType: !1702, size: 64, offset: 256)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2341, file: !334, line: 2283, baseType: !1702, size: 64, offset: 320)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2341, file: !334, line: 2284, baseType: !1702, size: 64, offset: 384)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2341, file: !334, line: 2285, baseType: !7, size: 32, offset: 448)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2341, file: !334, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2341, file: !334, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2341, file: !334, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2341, file: !334, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2341, file: !334, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2341, file: !334, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2341, file: !334, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2341, file: !334, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2341, file: !334, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2341, file: !334, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2341, file: !334, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2341, file: !334, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2341, file: !334, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2341, file: !334, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2341, file: !334, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2341, file: !334, line: 2305, baseType: !7, size: 32, offset: 512)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2341, file: !334, line: 2306, baseType: !1934, size: 32, offset: 544)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2341, file: !334, line: 2307, baseType: !1702, size: 64, offset: 576)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2341, file: !334, line: 2308, baseType: !1702, size: 64, offset: 640)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2341, file: !334, line: 2314, baseType: !2369, size: 64, offset: 704)
!2369 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !334, line: 2309, size: 64, elements: !2370)
!2370 = !{!2371, !2372, !2373}
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2369, file: !334, line: 2310, baseType: !1605, size: 32)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2369, file: !334, line: 2311, baseType: !1895, size: 64)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2369, file: !334, line: 2312, baseType: !2374, size: 64)
!2374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2375, size: 64)
!2375 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !334, line: 2277, flags: DIFlagFwdDecl)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2341, file: !334, line: 2315, baseType: !1702, size: 64, offset: 768)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2341, file: !334, line: 2316, baseType: !1702, size: 64, offset: 832)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2341, file: !334, line: 2317, baseType: !1702, size: 64, offset: 896)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2341, file: !334, line: 2318, baseType: !1702, size: 64, offset: 960)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2341, file: !334, line: 2319, baseType: !1702, size: 64, offset: 1024)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2341, file: !334, line: 2320, baseType: !1702, size: 64, offset: 1088)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2341, file: !334, line: 2321, baseType: !1702, size: 64, offset: 1152)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2341, file: !334, line: 2322, baseType: !1702, size: 64, offset: 1216)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2341, file: !334, line: 2324, baseType: !2385, size: 64, offset: 1280)
!2385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2386, size: 64)
!2386 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !334, line: 2324, flags: DIFlagFwdDecl)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1704, file: !334, line: 3395, baseType: !2388, size: 320)
!2388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !334, line: 1469, size: 320, elements: !2389)
!2389 = !{!2390, !2391, !2392}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2388, file: !334, line: 1470, baseType: !1740, size: 192)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2388, file: !334, line: 1471, baseType: !1702, size: 64, offset: 192)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2388, file: !334, line: 1472, baseType: !1702, size: 64, offset: 256)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1704, file: !334, line: 3396, baseType: !2394, size: 320)
!2394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !334, line: 1482, size: 320, elements: !2395)
!2395 = !{!2396, !2397, !2398}
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2394, file: !334, line: 1483, baseType: !1740, size: 192)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2394, file: !334, line: 1484, baseType: !1605, size: 32, offset: 192)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2394, file: !334, line: 1485, baseType: !2185, size: 64, offset: 256)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1704, file: !334, line: 3397, baseType: !2400, size: 384)
!2400 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !334, line: 1829, size: 384, elements: !2401)
!2401 = !{!2402, !2403, !2404, !2405}
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2400, file: !334, line: 1830, baseType: !1740, size: 192)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2400, file: !334, line: 1831, baseType: !1695, size: 32, offset: 192)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2400, file: !334, line: 1832, baseType: !1702, size: 64, offset: 256)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2400, file: !334, line: 1835, baseType: !2185, size: 64, offset: 320)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1704, file: !334, line: 3398, baseType: !2407, size: 704)
!2407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !334, line: 1898, size: 704, elements: !2408)
!2408 = !{!2409, !2410, !2411, !2412, !2413, !2418}
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2407, file: !334, line: 1899, baseType: !1740, size: 192)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2407, file: !334, line: 1902, baseType: !1702, size: 64, offset: 192)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2407, file: !334, line: 1905, baseType: !1677, size: 64, offset: 256)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2407, file: !334, line: 1908, baseType: !7, size: 32, offset: 320)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2407, file: !334, line: 1911, baseType: !2414, size: 64, offset: 384)
!2414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2415, size: 64)
!2415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2017, line: 117, size: 128, elements: !2416)
!2416 = !{!2417}
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2415, file: !2017, line: 120, baseType: !2188, size: 128)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2407, file: !334, line: 1914, baseType: !2232, size: 256, offset: 448)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1704, file: !334, line: 3399, baseType: !2420, size: 704)
!2420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !334, line: 2008, size: 704, elements: !2421)
!2421 = !{!2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432}
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2420, file: !334, line: 2009, baseType: !1740, size: 192)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2420, file: !334, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2420, file: !334, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2420, file: !334, line: 2014, baseType: !1695, size: 32, offset: 224)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2420, file: !334, line: 2016, baseType: !1702, size: 64, offset: 256)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2420, file: !334, line: 2017, baseType: !2174, size: 64, offset: 320)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2420, file: !334, line: 2019, baseType: !1702, size: 64, offset: 384)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2420, file: !334, line: 2020, baseType: !1702, size: 64, offset: 448)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2420, file: !334, line: 2021, baseType: !1702, size: 64, offset: 512)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2420, file: !334, line: 2022, baseType: !1702, size: 64, offset: 576)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2420, file: !334, line: 2023, baseType: !1702, size: 64, offset: 640)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1704, file: !334, line: 3400, baseType: !2434, size: 832)
!2434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !334, line: 2430, size: 832, elements: !2435)
!2435 = !{!2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445}
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2434, file: !334, line: 2431, baseType: !1740, size: 192)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2434, file: !334, line: 2433, baseType: !1702, size: 64, offset: 192)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2434, file: !334, line: 2434, baseType: !1702, size: 64, offset: 256)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2434, file: !334, line: 2435, baseType: !1702, size: 64, offset: 320)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2434, file: !334, line: 2436, baseType: !1702, size: 64, offset: 384)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2434, file: !334, line: 2437, baseType: !2174, size: 64, offset: 448)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2434, file: !334, line: 2438, baseType: !1702, size: 64, offset: 512)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2434, file: !334, line: 2440, baseType: !1702, size: 64, offset: 576)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2434, file: !334, line: 2441, baseType: !1702, size: 64, offset: 640)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2434, file: !334, line: 2443, baseType: !2446, size: 128, offset: 704)
!2446 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !334, line: 182, baseType: !2447)
!2447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !334, line: 182, size: 128, elements: !2448)
!2448 = !{!2449}
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2447, file: !334, line: 182, baseType: !2179, size: 128)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1704, file: !334, line: 3401, baseType: !2451, size: 320)
!2451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !334, line: 3327, size: 320, elements: !2452)
!2452 = !{!2453, !2454, !2461}
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2451, file: !334, line: 3329, baseType: !1740, size: 192)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2451, file: !334, line: 3330, baseType: !2455, size: 64, offset: 192)
!2455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2456, size: 64)
!2456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !334, line: 3320, size: 192, elements: !2457)
!2457 = !{!2458, !2459, !2460}
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2456, file: !334, line: 3322, baseType: !2455, size: 64)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2456, file: !334, line: 3323, baseType: !2455, size: 64, offset: 64)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2456, file: !334, line: 3324, baseType: !1702, size: 64, offset: 128)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2451, file: !334, line: 3331, baseType: !2455, size: 64, offset: 256)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1704, file: !334, line: 3402, baseType: !2463, size: 256)
!2463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !334, line: 1540, size: 256, elements: !2464)
!2464 = !{!2465, !2466}
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2463, file: !334, line: 1541, baseType: !1740, size: 192)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2463, file: !334, line: 1542, baseType: !2467, size: 64, offset: 192)
!2467 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2468, size: 64)
!2468 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !334, line: 1538, baseType: !2469)
!2469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !334, line: 1538, size: 192, elements: !2470)
!2470 = !{!2471}
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2469, file: !334, line: 1538, baseType: !2472, size: 192)
!2472 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !334, line: 1537, baseType: !2473)
!2473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !334, line: 1537, size: 192, elements: !2474)
!2474 = !{!2475, !2476, !2477}
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2473, file: !334, line: 1537, baseType: !7, size: 32)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2473, file: !334, line: 1537, baseType: !7, size: 32, offset: 32)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2473, file: !334, line: 1537, baseType: !2478, size: 128, offset: 64)
!2478 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2479, size: 128, elements: !1632)
!2479 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !334, line: 1535, baseType: !2480)
!2480 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !334, line: 1532, size: 128, elements: !2481)
!2481 = !{!2482, !2483}
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2480, file: !334, line: 1533, baseType: !1702, size: 64)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2480, file: !334, line: 1534, baseType: !1702, size: 64, offset: 64)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1704, file: !334, line: 3403, baseType: !2485, size: 512)
!2485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !334, line: 1938, size: 512, elements: !2486)
!2486 = !{!2487, !2488, !2489, !2490, !2496, !2497, !2498}
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2485, file: !334, line: 1939, baseType: !1740, size: 192)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2485, file: !334, line: 1940, baseType: !1695, size: 32, offset: 192)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2485, file: !334, line: 1941, baseType: !333, size: 32, offset: 224)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2485, file: !334, line: 1946, baseType: !2491, size: 32, offset: 256)
!2491 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !334, line: 1942, size: 32, elements: !2492)
!2492 = !{!2493, !2494, !2495}
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2491, file: !334, line: 1943, baseType: !352, size: 32)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2491, file: !334, line: 1944, baseType: !359, size: 32)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2491, file: !334, line: 1945, baseType: !366, size: 32)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2485, file: !334, line: 1950, baseType: !1667, size: 64, offset: 320)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2485, file: !334, line: 1951, baseType: !1667, size: 64, offset: 384)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2485, file: !334, line: 1953, baseType: !2185, size: 64, offset: 448)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1704, file: !334, line: 3404, baseType: !2500, size: 1664)
!2500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !334, line: 3337, size: 1664, elements: !2501)
!2501 = !{!2502, !2503}
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2500, file: !334, line: 3338, baseType: !1740, size: 192)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2500, file: !334, line: 3341, baseType: !2504, size: 1472, offset: 192)
!2504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2505, line: 410, size: 1472, elements: !2506)
!2505 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2506 = !{!2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670}
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2504, file: !2505, line: 412, baseType: !1605, size: 32)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2504, file: !2505, line: 413, baseType: !1605, size: 32, offset: 32)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2504, file: !2505, line: 414, baseType: !1605, size: 32, offset: 64)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2504, file: !2505, line: 415, baseType: !1605, size: 32, offset: 96)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2504, file: !2505, line: 416, baseType: !1605, size: 32, offset: 128)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2504, file: !2505, line: 417, baseType: !1605, size: 32, offset: 160)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2504, file: !2505, line: 418, baseType: !1815, size: 8, offset: 192)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2504, file: !2505, line: 419, baseType: !1815, size: 8, offset: 200)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2504, file: !2505, line: 420, baseType: !2516, size: 8, offset: 208)
!2516 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2504, file: !2505, line: 421, baseType: !2516, size: 8, offset: 216)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2504, file: !2505, line: 422, baseType: !2516, size: 8, offset: 224)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2504, file: !2505, line: 423, baseType: !2516, size: 8, offset: 232)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2504, file: !2505, line: 424, baseType: !2516, size: 8, offset: 240)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2504, file: !2505, line: 425, baseType: !2516, size: 8, offset: 248)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2504, file: !2505, line: 426, baseType: !2516, size: 8, offset: 256)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2504, file: !2505, line: 427, baseType: !2516, size: 8, offset: 264)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2504, file: !2505, line: 428, baseType: !2516, size: 8, offset: 272)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2504, file: !2505, line: 429, baseType: !2516, size: 8, offset: 280)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2504, file: !2505, line: 430, baseType: !2516, size: 8, offset: 288)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2504, file: !2505, line: 431, baseType: !2516, size: 8, offset: 296)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2504, file: !2505, line: 432, baseType: !2516, size: 8, offset: 304)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2504, file: !2505, line: 433, baseType: !2516, size: 8, offset: 312)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2504, file: !2505, line: 434, baseType: !2516, size: 8, offset: 320)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2504, file: !2505, line: 435, baseType: !2516, size: 8, offset: 328)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2504, file: !2505, line: 436, baseType: !2516, size: 8, offset: 336)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2504, file: !2505, line: 437, baseType: !2516, size: 8, offset: 344)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2504, file: !2505, line: 438, baseType: !2516, size: 8, offset: 352)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2504, file: !2505, line: 439, baseType: !2516, size: 8, offset: 360)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2504, file: !2505, line: 440, baseType: !2516, size: 8, offset: 368)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2504, file: !2505, line: 441, baseType: !2516, size: 8, offset: 376)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2504, file: !2505, line: 442, baseType: !2516, size: 8, offset: 384)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2504, file: !2505, line: 443, baseType: !2516, size: 8, offset: 392)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2504, file: !2505, line: 444, baseType: !2516, size: 8, offset: 400)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2504, file: !2505, line: 445, baseType: !2516, size: 8, offset: 408)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2504, file: !2505, line: 446, baseType: !2516, size: 8, offset: 416)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2504, file: !2505, line: 447, baseType: !2516, size: 8, offset: 424)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2504, file: !2505, line: 448, baseType: !2516, size: 8, offset: 432)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2504, file: !2505, line: 449, baseType: !2516, size: 8, offset: 440)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2504, file: !2505, line: 450, baseType: !2516, size: 8, offset: 448)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2504, file: !2505, line: 451, baseType: !2516, size: 8, offset: 456)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2504, file: !2505, line: 452, baseType: !2516, size: 8, offset: 464)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2504, file: !2505, line: 453, baseType: !2516, size: 8, offset: 472)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2504, file: !2505, line: 454, baseType: !2516, size: 8, offset: 480)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2504, file: !2505, line: 455, baseType: !2516, size: 8, offset: 488)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2504, file: !2505, line: 456, baseType: !2516, size: 8, offset: 496)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2504, file: !2505, line: 457, baseType: !2516, size: 8, offset: 504)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2504, file: !2505, line: 458, baseType: !2516, size: 8, offset: 512)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2504, file: !2505, line: 459, baseType: !2516, size: 8, offset: 520)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2504, file: !2505, line: 460, baseType: !2516, size: 8, offset: 528)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2504, file: !2505, line: 461, baseType: !2516, size: 8, offset: 536)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2504, file: !2505, line: 462, baseType: !2516, size: 8, offset: 544)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2504, file: !2505, line: 463, baseType: !2516, size: 8, offset: 552)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2504, file: !2505, line: 464, baseType: !2516, size: 8, offset: 560)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2504, file: !2505, line: 465, baseType: !2516, size: 8, offset: 568)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2504, file: !2505, line: 466, baseType: !2516, size: 8, offset: 576)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2504, file: !2505, line: 467, baseType: !2516, size: 8, offset: 584)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2504, file: !2505, line: 468, baseType: !2516, size: 8, offset: 592)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2504, file: !2505, line: 469, baseType: !2516, size: 8, offset: 600)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2504, file: !2505, line: 470, baseType: !2516, size: 8, offset: 608)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2504, file: !2505, line: 471, baseType: !2516, size: 8, offset: 616)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2504, file: !2505, line: 472, baseType: !2516, size: 8, offset: 624)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2504, file: !2505, line: 473, baseType: !2516, size: 8, offset: 632)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2504, file: !2505, line: 474, baseType: !2516, size: 8, offset: 640)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2504, file: !2505, line: 475, baseType: !2516, size: 8, offset: 648)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2504, file: !2505, line: 476, baseType: !2516, size: 8, offset: 656)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2504, file: !2505, line: 477, baseType: !2516, size: 8, offset: 664)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2504, file: !2505, line: 478, baseType: !2516, size: 8, offset: 672)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2504, file: !2505, line: 479, baseType: !2516, size: 8, offset: 680)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2504, file: !2505, line: 480, baseType: !2516, size: 8, offset: 688)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2504, file: !2505, line: 481, baseType: !2516, size: 8, offset: 696)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2504, file: !2505, line: 482, baseType: !2516, size: 8, offset: 704)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2504, file: !2505, line: 483, baseType: !2516, size: 8, offset: 712)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2504, file: !2505, line: 484, baseType: !2516, size: 8, offset: 720)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2504, file: !2505, line: 485, baseType: !2516, size: 8, offset: 728)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2504, file: !2505, line: 486, baseType: !2516, size: 8, offset: 736)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2504, file: !2505, line: 487, baseType: !2516, size: 8, offset: 744)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2504, file: !2505, line: 488, baseType: !2516, size: 8, offset: 752)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2504, file: !2505, line: 489, baseType: !2516, size: 8, offset: 760)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2504, file: !2505, line: 490, baseType: !2516, size: 8, offset: 768)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2504, file: !2505, line: 491, baseType: !2516, size: 8, offset: 776)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2504, file: !2505, line: 492, baseType: !2516, size: 8, offset: 784)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2504, file: !2505, line: 493, baseType: !2516, size: 8, offset: 792)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2504, file: !2505, line: 494, baseType: !2516, size: 8, offset: 800)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2504, file: !2505, line: 495, baseType: !2516, size: 8, offset: 808)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2504, file: !2505, line: 496, baseType: !2516, size: 8, offset: 816)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2504, file: !2505, line: 497, baseType: !2516, size: 8, offset: 824)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2504, file: !2505, line: 498, baseType: !2516, size: 8, offset: 832)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2504, file: !2505, line: 499, baseType: !2516, size: 8, offset: 840)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2504, file: !2505, line: 500, baseType: !2516, size: 8, offset: 848)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2504, file: !2505, line: 501, baseType: !2516, size: 8, offset: 856)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2504, file: !2505, line: 502, baseType: !2516, size: 8, offset: 864)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2504, file: !2505, line: 503, baseType: !2516, size: 8, offset: 872)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2504, file: !2505, line: 504, baseType: !2516, size: 8, offset: 880)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2504, file: !2505, line: 505, baseType: !2516, size: 8, offset: 888)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2504, file: !2505, line: 506, baseType: !2516, size: 8, offset: 896)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2504, file: !2505, line: 507, baseType: !2516, size: 8, offset: 904)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2504, file: !2505, line: 508, baseType: !2516, size: 8, offset: 912)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2504, file: !2505, line: 509, baseType: !2516, size: 8, offset: 920)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2504, file: !2505, line: 510, baseType: !2516, size: 8, offset: 928)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2504, file: !2505, line: 511, baseType: !2516, size: 8, offset: 936)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2504, file: !2505, line: 512, baseType: !2516, size: 8, offset: 944)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2504, file: !2505, line: 513, baseType: !2516, size: 8, offset: 952)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2504, file: !2505, line: 514, baseType: !2516, size: 8, offset: 960)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2504, file: !2505, line: 515, baseType: !2516, size: 8, offset: 968)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2504, file: !2505, line: 516, baseType: !2516, size: 8, offset: 976)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2504, file: !2505, line: 517, baseType: !2516, size: 8, offset: 984)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2504, file: !2505, line: 518, baseType: !2516, size: 8, offset: 992)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2504, file: !2505, line: 519, baseType: !2516, size: 8, offset: 1000)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2504, file: !2505, line: 520, baseType: !2516, size: 8, offset: 1008)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2504, file: !2505, line: 521, baseType: !2516, size: 8, offset: 1016)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2504, file: !2505, line: 522, baseType: !2516, size: 8, offset: 1024)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2504, file: !2505, line: 523, baseType: !2516, size: 8, offset: 1032)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2504, file: !2505, line: 524, baseType: !2516, size: 8, offset: 1040)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2504, file: !2505, line: 525, baseType: !2516, size: 8, offset: 1048)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2504, file: !2505, line: 526, baseType: !2516, size: 8, offset: 1056)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2504, file: !2505, line: 527, baseType: !2516, size: 8, offset: 1064)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2504, file: !2505, line: 528, baseType: !2516, size: 8, offset: 1072)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2504, file: !2505, line: 529, baseType: !2516, size: 8, offset: 1080)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2504, file: !2505, line: 530, baseType: !2516, size: 8, offset: 1088)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2504, file: !2505, line: 531, baseType: !2516, size: 8, offset: 1096)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2504, file: !2505, line: 532, baseType: !2516, size: 8, offset: 1104)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2504, file: !2505, line: 533, baseType: !2516, size: 8, offset: 1112)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2504, file: !2505, line: 534, baseType: !2516, size: 8, offset: 1120)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2504, file: !2505, line: 535, baseType: !2516, size: 8, offset: 1128)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2504, file: !2505, line: 536, baseType: !2516, size: 8, offset: 1136)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2504, file: !2505, line: 537, baseType: !2516, size: 8, offset: 1144)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2504, file: !2505, line: 538, baseType: !2516, size: 8, offset: 1152)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2504, file: !2505, line: 539, baseType: !2516, size: 8, offset: 1160)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2504, file: !2505, line: 540, baseType: !2516, size: 8, offset: 1168)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2504, file: !2505, line: 541, baseType: !2516, size: 8, offset: 1176)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2504, file: !2505, line: 542, baseType: !2516, size: 8, offset: 1184)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2504, file: !2505, line: 543, baseType: !2516, size: 8, offset: 1192)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2504, file: !2505, line: 544, baseType: !2516, size: 8, offset: 1200)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2504, file: !2505, line: 545, baseType: !2516, size: 8, offset: 1208)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2504, file: !2505, line: 546, baseType: !2516, size: 8, offset: 1216)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2504, file: !2505, line: 547, baseType: !2516, size: 8, offset: 1224)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2504, file: !2505, line: 548, baseType: !2516, size: 8, offset: 1232)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2504, file: !2505, line: 549, baseType: !2516, size: 8, offset: 1240)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2504, file: !2505, line: 550, baseType: !2516, size: 8, offset: 1248)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2504, file: !2505, line: 551, baseType: !2516, size: 8, offset: 1256)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2504, file: !2505, line: 552, baseType: !2516, size: 8, offset: 1264)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2504, file: !2505, line: 553, baseType: !2516, size: 8, offset: 1272)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2504, file: !2505, line: 554, baseType: !2516, size: 8, offset: 1280)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2504, file: !2505, line: 555, baseType: !2516, size: 8, offset: 1288)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2504, file: !2505, line: 556, baseType: !2516, size: 8, offset: 1296)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2504, file: !2505, line: 557, baseType: !2516, size: 8, offset: 1304)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2504, file: !2505, line: 558, baseType: !2516, size: 8, offset: 1312)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2504, file: !2505, line: 559, baseType: !2516, size: 8, offset: 1320)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2504, file: !2505, line: 560, baseType: !2516, size: 8, offset: 1328)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2504, file: !2505, line: 561, baseType: !2516, size: 8, offset: 1336)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2504, file: !2505, line: 562, baseType: !2516, size: 8, offset: 1344)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2504, file: !2505, line: 563, baseType: !2516, size: 8, offset: 1352)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2504, file: !2505, line: 564, baseType: !2516, size: 8, offset: 1360)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2504, file: !2505, line: 565, baseType: !2516, size: 8, offset: 1368)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2504, file: !2505, line: 566, baseType: !2516, size: 8, offset: 1376)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2504, file: !2505, line: 567, baseType: !2516, size: 8, offset: 1384)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2504, file: !2505, line: 568, baseType: !2516, size: 8, offset: 1392)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2504, file: !2505, line: 569, baseType: !2516, size: 8, offset: 1400)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2504, file: !2505, line: 570, baseType: !2516, size: 8, offset: 1408)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2504, file: !2505, line: 571, baseType: !2516, size: 8, offset: 1416)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2504, file: !2505, line: 572, baseType: !2516, size: 8, offset: 1424)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2504, file: !2505, line: 573, baseType: !2516, size: 8, offset: 1432)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2504, file: !2505, line: 574, baseType: !2516, size: 8, offset: 1440)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1704, file: !334, line: 3405, baseType: !2672, size: 384)
!2672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !334, line: 3352, size: 384, elements: !2673)
!2673 = !{!2674, !2675}
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2672, file: !334, line: 3353, baseType: !1740, size: 192)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2672, file: !334, line: 3356, baseType: !2676, size: 192, offset: 192)
!2676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2505, line: 578, size: 192, elements: !2677)
!2677 = !{!2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688}
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2676, file: !2505, line: 580, baseType: !1605, size: 32)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2676, file: !2505, line: 581, baseType: !1605, size: 32, offset: 32)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2676, file: !2505, line: 582, baseType: !1605, size: 32, offset: 64)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2676, file: !2505, line: 583, baseType: !1605, size: 32, offset: 96)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2676, file: !2505, line: 584, baseType: !1815, size: 8, offset: 128)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2676, file: !2505, line: 585, baseType: !1815, size: 8, offset: 136)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2676, file: !2505, line: 586, baseType: !1815, size: 8, offset: 144)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2676, file: !2505, line: 587, baseType: !1815, size: 8, offset: 152)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2676, file: !2505, line: 588, baseType: !1815, size: 8, offset: 160)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2676, file: !2505, line: 589, baseType: !1815, size: 8, offset: 168)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2676, file: !2505, line: 590, baseType: !1815, size: 8, offset: 176)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1679, file: !586, line: 739, baseType: !2690, size: 448)
!2690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !586, line: 350, size: 448, elements: !2691)
!2691 = !{!2692, !2698}
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2690, file: !586, line: 353, baseType: !2693, size: 384)
!2693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !586, line: 333, size: 384, elements: !2694)
!2694 = !{!2695, !2696, !2697}
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2693, file: !586, line: 336, baseType: !1682, size: 256)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2693, file: !586, line: 343, baseType: !2220, size: 64, offset: 256)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2693, file: !586, line: 344, baseType: !2227, size: 64, offset: 320)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2690, file: !586, line: 359, baseType: !2185, size: 64, offset: 384)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1679, file: !586, line: 740, baseType: !2700, size: 512)
!2700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !586, line: 365, size: 512, elements: !2701)
!2701 = !{!2702, !2703, !2704}
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2700, file: !586, line: 368, baseType: !2693, size: 384)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2700, file: !586, line: 373, baseType: !1702, size: 64, offset: 384)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2700, file: !586, line: 374, baseType: !1702, size: 64, offset: 448)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1679, file: !586, line: 741, baseType: !2706, size: 576)
!2706 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !586, line: 380, size: 576, elements: !2707)
!2707 = !{!2708, !2709}
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2706, file: !586, line: 383, baseType: !2700, size: 512)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2706, file: !586, line: 389, baseType: !2185, size: 64, offset: 512)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1679, file: !586, line: 742, baseType: !2711, size: 320)
!2711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !586, line: 395, size: 320, elements: !2712)
!2712 = !{!2713, !2714}
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2711, file: !586, line: 397, baseType: !1682, size: 256)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2711, file: !586, line: 400, baseType: !1667, size: 64, offset: 256)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1679, file: !586, line: 743, baseType: !2716, size: 448)
!2716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !586, line: 406, size: 448, elements: !2717)
!2717 = !{!2718, !2719, !2720, !2721}
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2716, file: !586, line: 408, baseType: !1682, size: 256)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2716, file: !586, line: 412, baseType: !1702, size: 64, offset: 256)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2716, file: !586, line: 420, baseType: !1702, size: 64, offset: 320)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2716, file: !586, line: 423, baseType: !1667, size: 64, offset: 384)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1679, file: !586, line: 744, baseType: !2723, size: 384)
!2723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !586, line: 429, size: 384, elements: !2724)
!2724 = !{!2725, !2726, !2727}
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2723, file: !586, line: 431, baseType: !1682, size: 256)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2723, file: !586, line: 434, baseType: !1702, size: 64, offset: 256)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2723, file: !586, line: 437, baseType: !1667, size: 64, offset: 320)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1679, file: !586, line: 745, baseType: !2729, size: 384)
!2729 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !586, line: 443, size: 384, elements: !2730)
!2730 = !{!2731, !2732, !2733}
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2729, file: !586, line: 445, baseType: !1682, size: 256)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2729, file: !586, line: 449, baseType: !1702, size: 64, offset: 256)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2729, file: !586, line: 453, baseType: !1667, size: 64, offset: 320)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1679, file: !586, line: 746, baseType: !2735, size: 320)
!2735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !586, line: 459, size: 320, elements: !2736)
!2736 = !{!2737, !2738}
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2735, file: !586, line: 461, baseType: !1682, size: 256)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2735, file: !586, line: 464, baseType: !1702, size: 64, offset: 256)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1679, file: !586, line: 747, baseType: !2740, size: 768)
!2740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !586, line: 469, size: 768, elements: !2741)
!2741 = !{!2742, !2743, !2744, !2745, !2746}
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2740, file: !586, line: 471, baseType: !1682, size: 256)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2740, file: !586, line: 474, baseType: !7, size: 32, offset: 256)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2740, file: !586, line: 475, baseType: !7, size: 32, offset: 288)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2740, file: !586, line: 478, baseType: !1702, size: 64, offset: 320)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2740, file: !586, line: 481, baseType: !2747, size: 384, offset: 384)
!2747 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2748, size: 384, elements: !1632)
!2748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !334, line: 1917, size: 384, elements: !2749)
!2749 = !{!2750, !2751, !2752}
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2748, file: !334, line: 1920, baseType: !2232, size: 256)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2748, file: !334, line: 1921, baseType: !1702, size: 64, offset: 256)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2748, file: !334, line: 1922, baseType: !1695, size: 32, offset: 320)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1679, file: !586, line: 748, baseType: !2754, size: 320)
!2754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !586, line: 487, size: 320, elements: !2755)
!2755 = !{!2756, !2757}
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2754, file: !586, line: 490, baseType: !1682, size: 256)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2754, file: !586, line: 494, baseType: !1605, size: 32, offset: 256)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1679, file: !586, line: 749, baseType: !2759, size: 384)
!2759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !586, line: 500, size: 384, elements: !2760)
!2760 = !{!2761, !2762, !2763}
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2759, file: !586, line: 502, baseType: !1682, size: 256)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2759, file: !586, line: 506, baseType: !1667, size: 64, offset: 256)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2759, file: !586, line: 510, baseType: !1667, size: 64, offset: 320)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1679, file: !586, line: 750, baseType: !2765, size: 320)
!2765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !586, line: 529, size: 320, elements: !2766)
!2766 = !{!2767, !2768}
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2765, file: !586, line: 531, baseType: !1682, size: 256)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2765, file: !586, line: 540, baseType: !1667, size: 64, offset: 256)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1679, file: !586, line: 751, baseType: !2770, size: 704)
!2770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !586, line: 546, size: 704, elements: !2771)
!2771 = !{!2772, !2773, !2774, !2775, !2776, !2777, !2778}
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2770, file: !586, line: 549, baseType: !2700, size: 512)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2770, file: !586, line: 553, baseType: !1895, size: 64, offset: 512)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2770, file: !586, line: 557, baseType: !1815, size: 8, offset: 576)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2770, file: !586, line: 558, baseType: !1815, size: 8, offset: 584)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2770, file: !586, line: 559, baseType: !1815, size: 8, offset: 592)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2770, file: !586, line: 560, baseType: !1815, size: 8, offset: 600)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2770, file: !586, line: 566, baseType: !2185, size: 64, offset: 640)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1679, file: !586, line: 752, baseType: !2780, size: 384)
!2780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !586, line: 571, size: 384, elements: !2781)
!2781 = !{!2782, !2783}
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2780, file: !586, line: 573, baseType: !2711, size: 320)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2780, file: !586, line: 577, baseType: !1702, size: 64, offset: 320)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1679, file: !586, line: 753, baseType: !2785, size: 576)
!2785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !586, line: 600, size: 576, elements: !2786)
!2786 = !{!2787, !2788, !2789, !2790, !2799}
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2785, file: !586, line: 602, baseType: !2711, size: 320)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2785, file: !586, line: 605, baseType: !1702, size: 64, offset: 320)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2785, file: !586, line: 609, baseType: !2135, size: 64, offset: 384)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2785, file: !586, line: 612, baseType: !2791, size: 64, offset: 448)
!2791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2792, size: 64)
!2792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !586, line: 581, size: 320, elements: !2793)
!2793 = !{!2794, !2795, !2796, !2797, !2798}
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2792, file: !586, line: 583, baseType: !366, size: 32)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2792, file: !586, line: 586, baseType: !1702, size: 64, offset: 64)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2792, file: !586, line: 589, baseType: !1702, size: 64, offset: 128)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2792, file: !586, line: 592, baseType: !1702, size: 64, offset: 192)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2792, file: !586, line: 595, baseType: !1702, size: 64, offset: 256)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2785, file: !586, line: 616, baseType: !1667, size: 64, offset: 512)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1679, file: !586, line: 754, baseType: !2801, size: 512)
!2801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !586, line: 622, size: 512, elements: !2802)
!2802 = !{!2803, !2804, !2805, !2806}
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2801, file: !586, line: 624, baseType: !2711, size: 320)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2801, file: !586, line: 628, baseType: !1702, size: 64, offset: 320)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2801, file: !586, line: 632, baseType: !1702, size: 64, offset: 384)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2801, file: !586, line: 636, baseType: !1702, size: 64, offset: 448)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1679, file: !586, line: 755, baseType: !2808, size: 704)
!2808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !586, line: 642, size: 704, elements: !2809)
!2809 = !{!2810, !2811, !2812, !2813}
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2808, file: !586, line: 644, baseType: !2801, size: 512)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2808, file: !586, line: 648, baseType: !1702, size: 64, offset: 512)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2808, file: !586, line: 652, baseType: !1702, size: 64, offset: 576)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2808, file: !586, line: 653, baseType: !1702, size: 64, offset: 640)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1679, file: !586, line: 756, baseType: !2815, size: 448)
!2815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !586, line: 663, size: 448, elements: !2816)
!2816 = !{!2817, !2818, !2819}
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2815, file: !586, line: 665, baseType: !2711, size: 320)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2815, file: !586, line: 668, baseType: !1702, size: 64, offset: 320)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2815, file: !586, line: 673, baseType: !1702, size: 64, offset: 384)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1679, file: !586, line: 757, baseType: !2821, size: 384)
!2821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !586, line: 694, size: 384, elements: !2822)
!2822 = !{!2823, !2824}
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2821, file: !586, line: 696, baseType: !2711, size: 320)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2821, file: !586, line: 699, baseType: !1702, size: 64, offset: 320)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1679, file: !586, line: 758, baseType: !2826, size: 384)
!2826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !586, line: 681, size: 384, elements: !2827)
!2827 = !{!2828, !2829, !2830}
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2826, file: !586, line: 683, baseType: !1682, size: 256)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2826, file: !586, line: 686, baseType: !1702, size: 64, offset: 256)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2826, file: !586, line: 689, baseType: !1702, size: 64, offset: 320)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1679, file: !586, line: 759, baseType: !2832, size: 384)
!2832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !586, line: 707, size: 384, elements: !2833)
!2833 = !{!2834, !2835, !2836}
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2832, file: !586, line: 709, baseType: !1682, size: 256)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2832, file: !586, line: 712, baseType: !1702, size: 64, offset: 256)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2832, file: !586, line: 712, baseType: !1702, size: 64, offset: 320)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1679, file: !586, line: 760, baseType: !2838, size: 320)
!2838 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !586, line: 718, size: 320, elements: !2839)
!2839 = !{!2840, !2841}
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2838, file: !586, line: 720, baseType: !1682, size: 256)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2838, file: !586, line: 723, baseType: !1702, size: 64, offset: 256)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1674, file: !586, line: 138, baseType: !1673, size: 64, offset: 64)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1674, file: !586, line: 139, baseType: !1673, size: 64, offset: 128)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1669, file: !586, line: 146, baseType: !1672, size: 64, offset: 64)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1669, file: !586, line: 152, baseType: !1667, size: 64, offset: 128)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1664, file: !318, line: 130, baseType: !1869, size: 64)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1659, file: !318, line: 134, baseType: !1610, size: 64, offset: 192)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1659, file: !318, line: 137, baseType: !1702, size: 64, offset: 256)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1659, file: !318, line: 138, baseType: !1695, size: 32, offset: 320)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1659, file: !318, line: 142, baseType: !7, size: 32, offset: 352)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1659, file: !318, line: 144, baseType: !1605, size: 32, offset: 384)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1659, file: !318, line: 145, baseType: !1605, size: 32, offset: 416)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1659, file: !318, line: 146, baseType: !2854, size: 64, offset: 448)
!2854 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !318, line: 119, baseType: !1587)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1642, file: !318, line: 220, baseType: !1645, size: 64, offset: 64)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1642, file: !318, line: 223, baseType: !1610, size: 64, offset: 128)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1642, file: !318, line: 226, baseType: !1635, size: 64, offset: 192)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1642, file: !318, line: 229, baseType: !2859, size: 128, offset: 256)
!2859 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2860, size: 128, elements: !1571)
!2860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2861, size: 64)
!2861 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !318, line: 229, flags: DIFlagFwdDecl)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1642, file: !318, line: 232, baseType: !1641, size: 64, offset: 384)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1642, file: !318, line: 233, baseType: !1641, size: 64, offset: 448)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1642, file: !318, line: 238, baseType: !2865, size: 64, offset: 512)
!2865 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !318, line: 235, size: 64, elements: !2866)
!2866 = !{!2867, !2873}
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2865, file: !318, line: 236, baseType: !2868, size: 64)
!2868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2869, size: 64)
!2869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !318, line: 273, size: 128, elements: !2870)
!2870 = !{!2871, !2872}
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2869, file: !318, line: 275, baseType: !1667, size: 64)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2869, file: !318, line: 278, baseType: !1667, size: 64, offset: 64)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2865, file: !318, line: 237, baseType: !2874, size: 64)
!2874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2875, size: 64)
!2875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !318, line: 259, size: 320, elements: !2876)
!2876 = !{!2877, !2878, !2879, !2880, !2881}
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2875, file: !318, line: 261, baseType: !1869, size: 64)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2875, file: !318, line: 262, baseType: !1869, size: 64, offset: 64)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2875, file: !318, line: 266, baseType: !1869, size: 64, offset: 128)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2875, file: !318, line: 267, baseType: !1869, size: 64, offset: 192)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2875, file: !318, line: 270, baseType: !1605, size: 32, offset: 256)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1642, file: !318, line: 241, baseType: !2854, size: 64, offset: 576)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1642, file: !318, line: 244, baseType: !1605, size: 32, offset: 640)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1642, file: !318, line: 247, baseType: !1605, size: 32, offset: 672)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1642, file: !318, line: 250, baseType: !1605, size: 32, offset: 704)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1642, file: !318, line: 253, baseType: !1605, size: 32, offset: 736)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1642, file: !318, line: 256, baseType: !1605, size: 32, offset: 768)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1636, file: !561, line: 111, baseType: !1641, size: 64, offset: 128)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1636, file: !561, line: 114, baseType: !2890, size: 64, offset: 192)
!2890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !561, line: 41, size: 64, elements: !2891)
!2891 = !{!2892, !2893}
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !2890, file: !561, line: 42, baseType: !560, size: 32)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !2890, file: !561, line: 43, baseType: !7, size: 32, offset: 32)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1636, file: !561, line: 117, baseType: !7, size: 32, offset: 256)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1636, file: !561, line: 120, baseType: !7, size: 32, offset: 288)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1636, file: !561, line: 123, baseType: !2249, size: 64, offset: 320)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1636, file: !561, line: 126, baseType: !1635, size: 64, offset: 384)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1636, file: !561, line: 129, baseType: !1635, size: 64, offset: 448)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1636, file: !561, line: 132, baseType: !1610, size: 64, offset: 512)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1636, file: !561, line: 139, baseType: !1702, size: 64, offset: 576)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1636, file: !561, line: 143, baseType: !1750, size: 128, offset: 640)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1636, file: !561, line: 146, baseType: !1750, size: 128, offset: 768)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1636, file: !561, line: 148, baseType: !1815, size: 8, offset: 896)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1636, file: !561, line: 149, baseType: !1815, size: 8, offset: 904)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1636, file: !561, line: 153, baseType: !569, size: 32, offset: 928)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1636, file: !561, line: 156, baseType: !2907, size: 64, offset: 960)
!2907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2908, size: 64)
!2908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !561, line: 48, size: 320, elements: !2909)
!2909 = !{!2910, !2911, !2912, !2913}
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2908, file: !561, line: 50, baseType: !1677, size: 64)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2908, file: !561, line: 59, baseType: !1750, size: 128, offset: 64)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !2908, file: !561, line: 64, baseType: !1815, size: 8, offset: 192)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2908, file: !561, line: 67, baseType: !2907, size: 64, offset: 256)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1636, file: !561, line: 159, baseType: !2915, size: 64, offset: 1024)
!2915 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2916, size: 64)
!2916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !561, line: 72, size: 256, elements: !2917)
!2917 = !{!2918, !2919, !2920, !2921}
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2916, file: !561, line: 74, baseType: !1658, size: 64)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2916, file: !561, line: 77, baseType: !2915, size: 64, offset: 64)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2916, file: !561, line: 78, baseType: !2915, size: 64, offset: 128)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !2916, file: !561, line: 81, baseType: !2915, size: 64, offset: 192)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1636, file: !561, line: 162, baseType: !1815, size: 8, offset: 1088)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1636, file: !561, line: 166, baseType: !1702, size: 64, offset: 1152)
!2924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2925, size: 64)
!2925 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !586, line: 34, baseType: !2926)
!2926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !586, line: 34, size: 128, elements: !2927)
!2927 = !{!2928}
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2926, file: !586, line: 34, baseType: !2166, size: 128)
!2929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2930, size: 64)
!2930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rdg_vertex", file: !579, line: 485, size: 128, elements: !2931)
!2931 = !{!2932, !2933, !2934}
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2930, file: !579, line: 488, baseType: !1677, size: 64)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "has_mem_write", scope: !2930, file: !579, line: 491, baseType: !1815, size: 8, offset: 64)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "has_mem_reads", scope: !2930, file: !579, line: 494, baseType: !1815, size: 8, offset: 72)
!2935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2936, size: 64)
!2936 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rdgc_heap", file: !579, line: 604, baseType: !2937)
!2937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rdgc_heap", file: !579, line: 604, size: 128, elements: !2938)
!2938 = !{!2939}
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2937, file: !579, line: 604, baseType: !2940, size: 128)
!2940 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rdgc_base", file: !579, line: 603, baseType: !2941)
!2941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rdgc_base", file: !579, line: 603, size: 128, elements: !2942)
!2942 = !{!2943, !2944, !2945}
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2941, file: !579, line: 603, baseType: !7, size: 32)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2941, file: !579, line: 603, baseType: !7, size: 32, offset: 32)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2941, file: !579, line: 603, baseType: !2946, size: 64, offset: 64)
!2946 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2947, size: 64, elements: !1632)
!2947 = !DIDerivedType(tag: DW_TAG_typedef, name: "rdgc", file: !579, line: 601, baseType: !2948)
!2948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2949, size: 64)
!2949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rdg_component", file: !579, line: 597, size: 128, elements: !2950)
!2950 = !{!2951, !2952}
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2949, file: !579, line: 599, baseType: !1605, size: 32)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "vertices", scope: !2949, file: !579, line: 600, baseType: !1619, size: 64, offset: 64)
!2953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2954, size: 64)
!2954 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitmap_heap", file: !579, line: 607, baseType: !2955)
!2955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitmap_heap", file: !579, line: 607, size: 128, elements: !2956)
!2956 = !{!2957}
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2955, file: !579, line: 607, baseType: !2958, size: 128)
!2958 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitmap_base", file: !579, line: 606, baseType: !2959)
!2959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitmap_base", file: !579, line: 606, size: 128, elements: !2960)
!2960 = !{!2961, !2962, !2963}
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2959, file: !579, line: 606, baseType: !7, size: 32)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2959, file: !579, line: 606, baseType: !7, size: 32, offset: 32)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2959, file: !579, line: 606, baseType: !2964, size: 64, offset: 64)
!2964 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1552, size: 64, elements: !1632)
!2965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2966, size: 64)
!2966 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rdg_edge", file: !579, line: 531, size: 128, elements: !2967)
!2967 = !{!2968, !2969, !2970}
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2966, file: !579, line: 534, baseType: !578, size: 32)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !2966, file: !579, line: 538, baseType: !7, size: 32, offset: 32)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "relation", scope: !2966, file: !579, line: 542, baseType: !2971, size: 64, offset: 64)
!2971 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddr_p", file: !579, line: 331, baseType: !2972)
!2972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2973, size: 64)
!2973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_dependence_relation", file: !579, line: 282, size: 512, elements: !2974)
!2974 = !{!2975, !3034, !3035, !3036, !3065, !3066, !3072, !3073, !3074, !3075, !3076}
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2973, file: !579, line: 285, baseType: !2976, size: 64)
!2976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2977, size: 64)
!2977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_reference", file: !579, line: 165, size: 896, elements: !2978)
!2978 = !{!2979, !2980, !2981, !2982, !2983, !2991, !3001, !3006}
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2977, file: !579, line: 168, baseType: !1677, size: 64)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2977, file: !579, line: 171, baseType: !1702, size: 64, offset: 64)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2977, file: !579, line: 174, baseType: !1610, size: 64, offset: 128)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !2977, file: !579, line: 177, baseType: !1815, size: 8, offset: 192)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "innermost", scope: !2977, file: !579, line: 180, baseType: !2984, size: 320, offset: 256)
!2984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "innermost_loop_behavior", file: !579, line: 51, size: 320, elements: !2985)
!2985 = !{!2986, !2987, !2988, !2989, !2990}
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "base_address", scope: !2984, file: !579, line: 53, baseType: !1702, size: 64)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2984, file: !579, line: 54, baseType: !1702, size: 64, offset: 64)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !2984, file: !579, line: 55, baseType: !1702, size: 64, offset: 128)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2984, file: !579, line: 56, baseType: !1702, size: 64, offset: 192)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_to", scope: !2984, file: !579, line: 60, baseType: !1702, size: 64, offset: 256)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !2977, file: !579, line: 183, baseType: !2992, size: 128, offset: 576)
!2992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "indices", file: !579, line: 78, size: 128, elements: !2993)
!2993 = !{!2994, !2995}
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !2992, file: !579, line: 81, baseType: !1702, size: 64)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "access_fns", scope: !2992, file: !579, line: 84, baseType: !2996, size: 64, offset: 64)
!2996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2997, size: 64)
!2997 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !334, line: 184, baseType: !2998)
!2998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !334, line: 184, size: 128, elements: !2999)
!2999 = !{!3000}
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2998, file: !334, line: 184, baseType: !2179, size: 128)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2977, file: !579, line: 186, baseType: !3002, size: 128, offset: 704)
!3002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dr_alias", file: !579, line: 87, size: 128, elements: !3003)
!3003 = !{!3004, !3005}
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3002, file: !579, line: 91, baseType: !2414, size: 64)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !3002, file: !579, line: 96, baseType: !1552, size: 64, offset: 64)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "access_matrix", scope: !2977, file: !579, line: 189, baseType: !3007, size: 64, offset: 832)
!3007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3008, size: 64)
!3008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_matrix", file: !579, line: 127, size: 256, elements: !3009)
!3009 = !{!3010, !3016, !3017, !3018}
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3008, file: !579, line: 129, baseType: !3011, size: 64)
!3011 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3012, size: 64)
!3012 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !561, line: 86, baseType: !3013)
!3013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !561, line: 86, size: 128, elements: !3014)
!3014 = !{!3015}
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3013, file: !561, line: 86, baseType: !2254, size: 128)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "nb_induction_vars", scope: !3008, file: !579, line: 130, baseType: !1605, size: 32, offset: 64)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !3008, file: !579, line: 131, baseType: !2996, size: 64, offset: 128)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !3008, file: !579, line: 132, baseType: !3019, size: 64, offset: 192)
!3019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3020, size: 64)
!3020 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_gc", file: !3021, line: 34, baseType: !3022)
!3021 = !DIFile(filename: "./lambda.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_gc", file: !3021, line: 34, size: 128, elements: !3023)
!3023 = !{!3024}
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3022, file: !3021, line: 34, baseType: !3025, size: 128)
!3025 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_base", file: !3021, line: 32, baseType: !3026)
!3026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_base", file: !3021, line: 32, size: 128, elements: !3027)
!3027 = !{!3028, !3029, !3030}
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3026, file: !3021, line: 32, baseType: !7, size: 32)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3026, file: !3021, line: 32, baseType: !7, size: 32, offset: 32)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3026, file: !3021, line: 32, baseType: !3031, size: 64, offset: 64)
!3031 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3032, size: 64, elements: !1632)
!3032 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_vector", file: !3021, line: 31, baseType: !3033)
!3033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1605, size: 64)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2973, file: !579, line: 286, baseType: !2976, size: 64, offset: 64)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "are_dependent", scope: !2973, file: !579, line: 299, baseType: !1702, size: 64, offset: 128)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "subscripts", scope: !2973, file: !579, line: 304, baseType: !3037, size: 64, offset: 192)
!3037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3038, size: 64)
!3038 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_heap", file: !579, line: 272, baseType: !3039)
!3039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_heap", file: !579, line: 272, size: 128, elements: !3040)
!3040 = !{!3041}
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3039, file: !579, line: 272, baseType: !3042, size: 128)
!3042 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_base", file: !579, line: 271, baseType: !3043)
!3043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_base", file: !579, line: 271, size: 128, elements: !3044)
!3044 = !{!3045, !3046, !3047}
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3043, file: !579, line: 271, baseType: !7, size: 32)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3043, file: !579, line: 271, baseType: !7, size: 32, offset: 32)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3043, file: !579, line: 271, baseType: !3048, size: 64, offset: 64)
!3048 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3049, size: 64, elements: !1632)
!3049 = !DIDerivedType(tag: DW_TAG_typedef, name: "subscript_p", file: !579, line: 270, baseType: !3050)
!3050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3051, size: 64)
!3051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "subscript", file: !579, line: 252, size: 256, elements: !3052)
!3052 = !{!3053, !3062, !3063, !3064}
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_a", scope: !3051, file: !579, line: 256, baseType: !3054, size: 64)
!3054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3055, size: 64)
!3055 = !DIDerivedType(tag: DW_TAG_typedef, name: "conflict_function", file: !579, line: 243, baseType: !3056)
!3056 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !579, line: 239, size: 192, elements: !3057)
!3057 = !{!3058, !3059}
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !3056, file: !579, line: 241, baseType: !7, size: 32)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "fns", scope: !3056, file: !579, line: 242, baseType: !3060, size: 128, offset: 64)
!3060 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3061, size: 128, elements: !1571)
!3061 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_fn", file: !579, line: 237, baseType: !2996)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_b", scope: !3051, file: !579, line: 257, baseType: !3054, size: 64, offset: 64)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "last_conflict", scope: !3051, file: !579, line: 261, baseType: !1702, size: 64, offset: 128)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !3051, file: !579, line: 267, baseType: !1702, size: 64, offset: 192)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2973, file: !579, line: 307, baseType: !3011, size: 64, offset: 256)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "dir_vects", scope: !2973, file: !579, line: 310, baseType: !3067, size: 64, offset: 320)
!3067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3068, size: 64)
!3068 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_heap", file: !3021, line: 33, baseType: !3069)
!3069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_heap", file: !3021, line: 33, size: 128, elements: !3070)
!3070 = !{!3071}
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3069, file: !3021, line: 33, baseType: !3025, size: 128)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "dist_vects", scope: !2973, file: !579, line: 313, baseType: !3067, size: 64, offset: 384)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "inner_loop", scope: !2973, file: !579, line: 317, baseType: !7, size: 32, offset: 448)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "reversed_p", scope: !2973, file: !579, line: 320, baseType: !1815, size: 8, offset: 480)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "affine_p", scope: !2973, file: !579, line: 324, baseType: !1815, size: 8, offset: 488)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "self_reference_p", scope: !2973, file: !579, line: 328, baseType: !1815, size: 8, offset: 496)
!3077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1619, size: 64)
!3078 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1541, line: 30, baseType: !3079)
!3079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3080, size: 64)
!3080 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !334, line: 1893, baseType: !2232)
!3081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3082, size: 64)
!3082 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1679)
!3083 = !{!0, !3084, !3086}
!3084 = !DIGlobalVariableExpression(var: !3085, expr: !DIExpression())
!3085 = distinct !DIGlobalVariable(name: "remaining_stmts", scope: !2, file: !3, line: 75, type: !1552, isLocal: true, isDefinition: true)
!3086 = !DIGlobalVariableExpression(var: !3087, expr: !DIExpression())
!3087 = distinct !DIGlobalVariable(name: "upstream_mem_writes", scope: !2, file: !3, line: 79, type: !1552, isLocal: true, isDefinition: true)
!3088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !6, line: 156, size: 640, elements: !3089)
!3089 = !{!3090}
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3088, file: !6, line: 158, baseType: !3091, size: 640)
!3091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !6, line: 114, size: 640, elements: !3092)
!3092 = !{!3093, !3094, !3095, !3099, !3103, !3105, !3106, !3107, !3109, !3110, !3111, !3112, !3113}
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3091, file: !6, line: 117, baseType: !5, size: 32)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3091, file: !6, line: 121, baseType: !1895, size: 64, offset: 64)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3091, file: !6, line: 125, baseType: !3096, size: 64, offset: 128)
!3096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3097, size: 64)
!3097 = !DISubroutineType(types: !3098)
!3098 = !{!1815}
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3091, file: !6, line: 130, baseType: !3100, size: 64, offset: 192)
!3100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3101, size: 64)
!3101 = !DISubroutineType(types: !3102)
!3102 = !{!7}
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3091, file: !6, line: 133, baseType: !3104, size: 64, offset: 256)
!3104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3091, size: 64)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3091, file: !6, line: 136, baseType: !3104, size: 64, offset: 320)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3091, file: !6, line: 139, baseType: !1605, size: 32, offset: 384)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3091, file: !6, line: 143, baseType: !3108, size: 32, offset: 416)
!3108 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !14, line: 80, baseType: !13)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3091, file: !6, line: 146, baseType: !7, size: 32, offset: 448)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3091, file: !6, line: 147, baseType: !7, size: 32, offset: 480)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3091, file: !6, line: 148, baseType: !7, size: 32, offset: 512)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3091, file: !6, line: 151, baseType: !7, size: 32, offset: 544)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3091, file: !6, line: 152, baseType: !7, size: 32, offset: 576)
!3114 = !{i32 7, !"Dwarf Version", i32 4}
!3115 = !{i32 2, !"Debug Info Version", i32 3}
!3116 = !{i32 1, !"wchar_size", i32 4}
!3117 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3118 = distinct !DISubprogram(name: "debug_rdg_partitions", scope: !3, file: !3, line: 981, type: !3119, scopeLine: 982, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3119 = !DISubroutineType(types: !3120)
!3120 = !{null, !2953}
!3121 = !{}
!3122 = !DILocalVariable(name: "partitions", arg: 1, scope: !3118, file: !3, line: 981, type: !2953)
!3123 = !DILocation(line: 981, column: 43, scope: !3118)
!3124 = !DILocation(line: 983, column: 24, scope: !3118)
!3125 = !DILocation(line: 983, column: 32, scope: !3118)
!3126 = !DILocation(line: 983, column: 3, scope: !3118)
!3127 = !DILocation(line: 984, column: 1, scope: !3118)
!3128 = distinct !DISubprogram(name: "dump_rdg_partitions", scope: !3, file: !3, line: 968, type: !3129, scopeLine: 969, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3129 = !DISubroutineType(types: !3130)
!3130 = !{null, !3131, !2953}
!3131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3132, size: 64)
!3132 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3133, line: 7, baseType: !3134)
!3133 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3135, line: 49, size: 1728, elements: !3136)
!3135 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3136 = !{!3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3152, !3154, !3155, !3156, !3159, !3161, !3162, !3163, !3166, !3168, !3171, !3174, !3175, !3176, !3177, !3178}
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3134, file: !3135, line: 51, baseType: !1605, size: 32)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3134, file: !3135, line: 54, baseType: !1593, size: 64, offset: 64)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3134, file: !3135, line: 55, baseType: !1593, size: 64, offset: 128)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3134, file: !3135, line: 56, baseType: !1593, size: 64, offset: 192)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3134, file: !3135, line: 57, baseType: !1593, size: 64, offset: 256)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3134, file: !3135, line: 58, baseType: !1593, size: 64, offset: 320)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3134, file: !3135, line: 59, baseType: !1593, size: 64, offset: 384)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3134, file: !3135, line: 60, baseType: !1593, size: 64, offset: 448)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3134, file: !3135, line: 61, baseType: !1593, size: 64, offset: 512)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3134, file: !3135, line: 64, baseType: !1593, size: 64, offset: 576)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3134, file: !3135, line: 65, baseType: !1593, size: 64, offset: 640)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3134, file: !3135, line: 66, baseType: !1593, size: 64, offset: 704)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3134, file: !3135, line: 68, baseType: !3150, size: 64, offset: 768)
!3150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3151, size: 64)
!3151 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3135, line: 36, flags: DIFlagFwdDecl)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3134, file: !3135, line: 70, baseType: !3153, size: 64, offset: 832)
!3153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3134, size: 64)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3134, file: !3135, line: 72, baseType: !1605, size: 32, offset: 896)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3134, file: !3135, line: 73, baseType: !1605, size: 32, offset: 928)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3134, file: !3135, line: 74, baseType: !3157, size: 64, offset: 960)
!3157 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3158, line: 152, baseType: !1587)
!3158 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3134, file: !3135, line: 77, baseType: !3160, size: 16, offset: 1024)
!3160 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3134, file: !3135, line: 78, baseType: !2516, size: 8, offset: 1040)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3134, file: !3135, line: 79, baseType: !1797, size: 8, offset: 1048)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3134, file: !3135, line: 81, baseType: !3164, size: 64, offset: 1088)
!3164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3165, size: 64)
!3165 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3135, line: 43, baseType: null)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3134, file: !3135, line: 89, baseType: !3167, size: 64, offset: 1152)
!3167 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3158, line: 153, baseType: !1587)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3134, file: !3135, line: 91, baseType: !3169, size: 64, offset: 1216)
!3169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3170, size: 64)
!3170 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3135, line: 37, flags: DIFlagFwdDecl)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3134, file: !3135, line: 92, baseType: !3172, size: 64, offset: 1280)
!3172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3173, size: 64)
!3173 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3135, line: 38, flags: DIFlagFwdDecl)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3134, file: !3135, line: 93, baseType: !3153, size: 64, offset: 1344)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3134, file: !3135, line: 94, baseType: !1610, size: 64, offset: 1408)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3134, file: !3135, line: 95, baseType: !2135, size: 64, offset: 1472)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3134, file: !3135, line: 96, baseType: !1605, size: 32, offset: 1536)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3134, file: !3135, line: 98, baseType: !3179, size: 160, offset: 1568)
!3179 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1594, size: 160, elements: !3180)
!3180 = !{!3181}
!3181 = !DISubrange(count: 20)
!3182 = !DILocalVariable(name: "file", arg: 1, scope: !3128, file: !3, line: 968, type: !3131)
!3183 = !DILocation(line: 968, column: 28, scope: !3128)
!3184 = !DILocalVariable(name: "partitions", arg: 2, scope: !3128, file: !3, line: 968, type: !2953)
!3185 = !DILocation(line: 968, column: 54, scope: !3128)
!3186 = !DILocalVariable(name: "i", scope: !3128, file: !3, line: 970, type: !1605)
!3187 = !DILocation(line: 970, column: 7, scope: !3128)
!3188 = !DILocalVariable(name: "partition", scope: !3128, file: !3, line: 971, type: !1552)
!3189 = !DILocation(line: 971, column: 10, scope: !3128)
!3190 = !DILocation(line: 973, column: 10, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3128, file: !3, line: 973, column: 3)
!3192 = !DILocation(line: 973, column: 8, scope: !3191)
!3193 = !DILocation(line: 973, column: 15, scope: !3194)
!3194 = distinct !DILexicalBlock(scope: !3191, file: !3, line: 973, column: 3)
!3195 = !DILocation(line: 973, column: 3, scope: !3191)
!3196 = !DILocation(line: 974, column: 24, scope: !3194)
!3197 = !DILocation(line: 974, column: 30, scope: !3194)
!3198 = !DILocation(line: 974, column: 5, scope: !3194)
!3199 = !DILocation(line: 973, column: 64, scope: !3194)
!3200 = !DILocation(line: 973, column: 3, scope: !3194)
!3201 = distinct !{!3201, !3195, !3202}
!3202 = !DILocation(line: 974, column: 39, scope: !3191)
!3203 = !DILocation(line: 975, column: 1, scope: !3128)
!3204 = distinct !DISubprogram(name: "gate_tree_loop_distribution", scope: !3, file: !3, line: 1226, type: !3097, scopeLine: 1227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3205 = !DILocation(line: 1228, column: 10, scope: !3204)
!3206 = !DILocation(line: 1228, column: 38, scope: !3204)
!3207 = !DILocation(line: 1228, column: 3, scope: !3204)
!3208 = distinct !DISubprogram(name: "tree_loop_distribution", scope: !3, file: !3, line: 1185, type: !3101, scopeLine: 1186, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3209 = !DILocalVariable(name: "loop", scope: !3208, file: !3, line: 1187, type: !1635)
!3210 = !DILocation(line: 1187, column: 16, scope: !3208)
!3211 = !DILocalVariable(name: "li", scope: !3208, file: !3, line: 1188, type: !3212)
!3212 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !561, line: 515, baseType: !3213)
!3213 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !561, line: 508, size: 128, elements: !3214)
!3214 = !{!3215, !3216}
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !3213, file: !561, line: 511, baseType: !1619, size: 64)
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !3213, file: !561, line: 514, baseType: !7, size: 32, offset: 64)
!3217 = !DILocation(line: 1188, column: 17, scope: !3208)
!3218 = !DILocalVariable(name: "nb_generated_loops", scope: !3208, file: !3, line: 1189, type: !1605)
!3219 = !DILocation(line: 1189, column: 7, scope: !3208)
!3220 = !DILocation(line: 1191, column: 3, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3208, file: !3, line: 1191, column: 3)
!3222 = !DILocation(line: 1191, column: 3, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3221, file: !3, line: 1191, column: 3)
!3224 = !DILocalVariable(name: "work_list", scope: !3225, file: !3, line: 1193, type: !2924)
!3225 = distinct !DILexicalBlock(scope: !3223, file: !3, line: 1192, column: 5)
!3226 = !DILocation(line: 1193, column: 27, scope: !3225)
!3227 = !DILocation(line: 1193, column: 39, scope: !3225)
!3228 = !DILocation(line: 1198, column: 25, scope: !3225)
!3229 = !DILocation(line: 1198, column: 7, scope: !3225)
!3230 = !DILocation(line: 1204, column: 7, scope: !3225)
!3231 = !DILocation(line: 1206, column: 45, scope: !3225)
!3232 = !DILocation(line: 1206, column: 51, scope: !3225)
!3233 = !DILocation(line: 1206, column: 28, scope: !3225)
!3234 = !DILocation(line: 1206, column: 26, scope: !3225)
!3235 = !DILocation(line: 1208, column: 11, scope: !3236)
!3236 = distinct !DILexicalBlock(scope: !3225, file: !3, line: 1208, column: 11)
!3237 = !DILocation(line: 1208, column: 21, scope: !3236)
!3238 = !DILocation(line: 1208, column: 25, scope: !3236)
!3239 = !DILocation(line: 1208, column: 36, scope: !3236)
!3240 = !DILocation(line: 1208, column: 11, scope: !3225)
!3241 = !DILocation(line: 1210, column: 8, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3243, file: !3, line: 1210, column: 8)
!3243 = distinct !DILexicalBlock(scope: !3236, file: !3, line: 1209, column: 2)
!3244 = !DILocation(line: 1210, column: 27, scope: !3242)
!3245 = !DILocation(line: 1210, column: 8, scope: !3243)
!3246 = !DILocation(line: 1211, column: 15, scope: !3242)
!3247 = !DILocation(line: 1212, column: 8, scope: !3242)
!3248 = !DILocation(line: 1212, column: 14, scope: !3242)
!3249 = !DILocation(line: 1212, column: 19, scope: !3242)
!3250 = !DILocation(line: 1211, column: 6, scope: !3242)
!3251 = !DILocation(line: 1214, column: 15, scope: !3242)
!3252 = !DILocation(line: 1214, column: 52, scope: !3242)
!3253 = !DILocation(line: 1214, column: 58, scope: !3242)
!3254 = !DILocation(line: 1214, column: 6, scope: !3242)
!3255 = !DILocation(line: 1215, column: 2, scope: !3243)
!3256 = !DILocation(line: 1217, column: 7, scope: !3225)
!3257 = !DILocation(line: 1219, column: 7, scope: !3225)
!3258 = !DILocation(line: 1220, column: 5, scope: !3225)
!3259 = distinct !{!3259, !3220, !3260}
!3260 = !DILocation(line: 1220, column: 5, scope: !3221)
!3261 = !DILocation(line: 1222, column: 3, scope: !3208)
!3262 = distinct !DISubprogram(name: "VEC_bitmap_base_iterate", scope: !579, file: !579, line: 606, type: !3263, scopeLine: 606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3263 = !DISubroutineType(types: !3264)
!3264 = !{!1605, !3265, !7, !3267}
!3265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3266, size: 64)
!3266 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2958)
!3267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1552, size: 64)
!3268 = !DILocalVariable(name: "vec_", arg: 1, scope: !3262, file: !579, line: 606, type: !3265)
!3269 = !DILocation(line: 606, column: 1, scope: !3262)
!3270 = !DILocalVariable(name: "ix_", arg: 2, scope: !3262, file: !579, line: 606, type: !7)
!3271 = !DILocalVariable(name: "ptr", arg: 3, scope: !3262, file: !579, line: 606, type: !3267)
!3272 = !DILocation(line: 606, column: 1, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3262, file: !579, line: 606, column: 1)
!3274 = !DILocation(line: 606, column: 1, scope: !3275)
!3275 = distinct !DILexicalBlock(scope: !3273, file: !579, line: 606, column: 1)
!3276 = !DILocation(line: 606, column: 1, scope: !3277)
!3277 = distinct !DILexicalBlock(scope: !3273, file: !579, line: 606, column: 1)
!3278 = distinct !DISubprogram(name: "fel_init", scope: !561, file: !561, line: 535, type: !3279, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3279 = !DISubroutineType(types: !3280)
!3280 = !{null, !3281, !3282, !7}
!3281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3212, size: 64)
!3282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1634, size: 64)
!3283 = !DILocalVariable(name: "li", arg: 1, scope: !3278, file: !561, line: 535, type: !3281)
!3284 = !DILocation(line: 535, column: 26, scope: !3278)
!3285 = !DILocalVariable(name: "loop", arg: 2, scope: !3278, file: !561, line: 535, type: !3282)
!3286 = !DILocation(line: 535, column: 38, scope: !3278)
!3287 = !DILocalVariable(name: "flags", arg: 3, scope: !3278, file: !561, line: 535, type: !7)
!3288 = !DILocation(line: 535, column: 53, scope: !3278)
!3289 = !DILocalVariable(name: "aloop", scope: !3278, file: !561, line: 537, type: !1635)
!3290 = !DILocation(line: 537, column: 16, scope: !3278)
!3291 = !DILocalVariable(name: "i", scope: !3278, file: !561, line: 538, type: !7)
!3292 = !DILocation(line: 538, column: 12, scope: !3278)
!3293 = !DILocalVariable(name: "mn", scope: !3278, file: !561, line: 539, type: !1605)
!3294 = !DILocation(line: 539, column: 7, scope: !3278)
!3295 = !DILocation(line: 541, column: 3, scope: !3278)
!3296 = !DILocation(line: 541, column: 7, scope: !3278)
!3297 = !DILocation(line: 541, column: 11, scope: !3278)
!3298 = !DILocation(line: 542, column: 8, scope: !3299)
!3299 = distinct !DILexicalBlock(scope: !3278, file: !561, line: 542, column: 7)
!3300 = !DILocation(line: 542, column: 7, scope: !3278)
!3301 = !DILocation(line: 544, column: 7, scope: !3302)
!3302 = distinct !DILexicalBlock(scope: !3299, file: !561, line: 543, column: 5)
!3303 = !DILocation(line: 544, column: 11, scope: !3302)
!3304 = !DILocation(line: 544, column: 20, scope: !3302)
!3305 = !DILocation(line: 545, column: 8, scope: !3302)
!3306 = !DILocation(line: 545, column: 13, scope: !3302)
!3307 = !DILocation(line: 546, column: 7, scope: !3302)
!3308 = !DILocation(line: 549, column: 18, scope: !3278)
!3309 = !DILocation(line: 549, column: 3, scope: !3278)
!3310 = !DILocation(line: 549, column: 7, scope: !3278)
!3311 = !DILocation(line: 549, column: 16, scope: !3278)
!3312 = !DILocation(line: 550, column: 9, scope: !3278)
!3313 = !DILocation(line: 550, column: 15, scope: !3278)
!3314 = !DILocation(line: 550, column: 8, scope: !3278)
!3315 = !DILocation(line: 550, column: 6, scope: !3278)
!3316 = !DILocation(line: 552, column: 7, scope: !3317)
!3317 = distinct !DILexicalBlock(scope: !3278, file: !561, line: 552, column: 7)
!3318 = !DILocation(line: 552, column: 13, scope: !3317)
!3319 = !DILocation(line: 552, column: 7, scope: !3278)
!3320 = !DILocation(line: 554, column: 14, scope: !3321)
!3321 = distinct !DILexicalBlock(scope: !3322, file: !561, line: 554, column: 7)
!3322 = distinct !DILexicalBlock(scope: !3317, file: !561, line: 553, column: 5)
!3323 = !DILocation(line: 554, column: 12, scope: !3321)
!3324 = !DILocation(line: 554, column: 19, scope: !3325)
!3325 = distinct !DILexicalBlock(scope: !3321, file: !561, line: 554, column: 7)
!3326 = !DILocation(line: 554, column: 7, scope: !3321)
!3327 = !DILocation(line: 555, column: 6, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3325, file: !561, line: 555, column: 6)
!3329 = !DILocation(line: 555, column: 12, scope: !3328)
!3330 = !DILocation(line: 556, column: 6, scope: !3328)
!3331 = !DILocation(line: 556, column: 9, scope: !3328)
!3332 = !DILocation(line: 556, column: 16, scope: !3328)
!3333 = !DILocation(line: 556, column: 22, scope: !3328)
!3334 = !DILocation(line: 557, column: 6, scope: !3328)
!3335 = !DILocation(line: 557, column: 9, scope: !3328)
!3336 = !DILocation(line: 557, column: 16, scope: !3328)
!3337 = !DILocation(line: 557, column: 23, scope: !3328)
!3338 = !DILocation(line: 557, column: 20, scope: !3328)
!3339 = !DILocation(line: 555, column: 6, scope: !3325)
!3340 = !DILocation(line: 558, column: 4, scope: !3328)
!3341 = !DILocation(line: 554, column: 75, scope: !3325)
!3342 = !DILocation(line: 554, column: 7, scope: !3325)
!3343 = distinct !{!3343, !3326, !3344}
!3344 = !DILocation(line: 558, column: 4, scope: !3321)
!3345 = !DILocation(line: 559, column: 5, scope: !3322)
!3346 = !DILocation(line: 560, column: 12, scope: !3347)
!3347 = distinct !DILexicalBlock(scope: !3317, file: !561, line: 560, column: 12)
!3348 = !DILocation(line: 560, column: 18, scope: !3347)
!3349 = !DILocation(line: 560, column: 12, scope: !3317)
!3350 = !DILocation(line: 563, column: 20, scope: !3351)
!3351 = distinct !DILexicalBlock(scope: !3352, file: !561, line: 563, column: 7)
!3352 = distinct !DILexicalBlock(scope: !3347, file: !561, line: 561, column: 5)
!3353 = !DILocation(line: 563, column: 35, scope: !3351)
!3354 = !DILocation(line: 563, column: 18, scope: !3351)
!3355 = !DILocation(line: 563, column: 12, scope: !3351)
!3356 = !DILocation(line: 564, column: 5, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3351, file: !561, line: 563, column: 7)
!3358 = !DILocation(line: 564, column: 12, scope: !3357)
!3359 = !DILocation(line: 564, column: 18, scope: !3357)
!3360 = !DILocation(line: 563, column: 7, scope: !3351)
!3361 = !DILocation(line: 566, column: 2, scope: !3357)
!3362 = !DILocation(line: 565, column: 13, scope: !3357)
!3363 = !DILocation(line: 565, column: 20, scope: !3357)
!3364 = !DILocation(line: 565, column: 11, scope: !3357)
!3365 = !DILocation(line: 563, column: 7, scope: !3357)
!3366 = distinct !{!3366, !3360, !3367}
!3367 = !DILocation(line: 566, column: 2, scope: !3351)
!3368 = !DILocation(line: 568, column: 7, scope: !3352)
!3369 = !DILocation(line: 570, column: 8, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3371, file: !561, line: 570, column: 8)
!3371 = distinct !DILexicalBlock(scope: !3352, file: !561, line: 569, column: 2)
!3372 = !DILocation(line: 570, column: 15, scope: !3370)
!3373 = !DILocation(line: 570, column: 22, scope: !3370)
!3374 = !DILocation(line: 570, column: 19, scope: !3370)
!3375 = !DILocation(line: 570, column: 8, scope: !3371)
!3376 = !DILocation(line: 571, column: 6, scope: !3370)
!3377 = !DILocation(line: 573, column: 8, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !3371, file: !561, line: 573, column: 8)
!3379 = !DILocation(line: 573, column: 15, scope: !3378)
!3380 = !DILocation(line: 573, column: 8, scope: !3371)
!3381 = !DILocation(line: 575, column: 21, scope: !3382)
!3382 = distinct !DILexicalBlock(scope: !3383, file: !561, line: 575, column: 8)
!3383 = distinct !DILexicalBlock(scope: !3378, file: !561, line: 574, column: 6)
!3384 = !DILocation(line: 575, column: 28, scope: !3382)
!3385 = !DILocation(line: 575, column: 19, scope: !3382)
!3386 = !DILocation(line: 575, column: 13, scope: !3382)
!3387 = !DILocation(line: 576, column: 6, scope: !3388)
!3388 = distinct !DILexicalBlock(scope: !3382, file: !561, line: 575, column: 8)
!3389 = !DILocation(line: 576, column: 13, scope: !3388)
!3390 = !DILocation(line: 576, column: 19, scope: !3388)
!3391 = !DILocation(line: 575, column: 8, scope: !3382)
!3392 = !DILocation(line: 578, column: 3, scope: !3388)
!3393 = !DILocation(line: 577, column: 14, scope: !3388)
!3394 = !DILocation(line: 577, column: 21, scope: !3388)
!3395 = !DILocation(line: 577, column: 12, scope: !3388)
!3396 = !DILocation(line: 575, column: 8, scope: !3388)
!3397 = distinct !{!3397, !3391, !3398}
!3398 = !DILocation(line: 578, column: 3, scope: !3382)
!3399 = !DILocation(line: 579, column: 6, scope: !3383)
!3400 = !DILocation(line: 580, column: 26, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3378, file: !561, line: 580, column: 13)
!3402 = !DILocation(line: 580, column: 14, scope: !3401)
!3403 = !DILocation(line: 580, column: 13, scope: !3378)
!3404 = !DILocation(line: 581, column: 6, scope: !3401)
!3405 = !DILocation(line: 583, column: 26, scope: !3401)
!3406 = !DILocation(line: 583, column: 14, scope: !3401)
!3407 = !DILocation(line: 583, column: 12, scope: !3401)
!3408 = distinct !{!3408, !3368, !3409}
!3409 = !DILocation(line: 584, column: 2, scope: !3352)
!3410 = !DILocation(line: 585, column: 5, scope: !3352)
!3411 = !DILocation(line: 589, column: 15, scope: !3412)
!3412 = distinct !DILexicalBlock(scope: !3347, file: !561, line: 587, column: 5)
!3413 = !DILocation(line: 589, column: 30, scope: !3412)
!3414 = !DILocation(line: 589, column: 13, scope: !3412)
!3415 = !DILocation(line: 590, column: 7, scope: !3412)
!3416 = !DILocation(line: 592, column: 8, scope: !3417)
!3417 = distinct !DILexicalBlock(scope: !3418, file: !561, line: 592, column: 8)
!3418 = distinct !DILexicalBlock(scope: !3412, file: !561, line: 591, column: 2)
!3419 = !DILocation(line: 592, column: 15, scope: !3417)
!3420 = !DILocation(line: 592, column: 22, scope: !3417)
!3421 = !DILocation(line: 592, column: 19, scope: !3417)
!3422 = !DILocation(line: 592, column: 8, scope: !3418)
!3423 = !DILocation(line: 593, column: 6, scope: !3417)
!3424 = !DILocation(line: 595, column: 8, scope: !3425)
!3425 = distinct !DILexicalBlock(scope: !3418, file: !561, line: 595, column: 8)
!3426 = !DILocation(line: 595, column: 15, scope: !3425)
!3427 = !DILocation(line: 595, column: 21, scope: !3425)
!3428 = !DILocation(line: 595, column: 8, scope: !3418)
!3429 = !DILocation(line: 596, column: 14, scope: !3425)
!3430 = !DILocation(line: 596, column: 21, scope: !3425)
!3431 = !DILocation(line: 596, column: 12, scope: !3425)
!3432 = !DILocation(line: 596, column: 6, scope: !3425)
!3433 = !DILocation(line: 599, column: 8, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3425, file: !561, line: 598, column: 6)
!3435 = !DILocation(line: 599, column: 15, scope: !3434)
!3436 = !DILocation(line: 599, column: 21, scope: !3434)
!3437 = !DILocation(line: 599, column: 29, scope: !3434)
!3438 = !DILocation(line: 599, column: 32, scope: !3434)
!3439 = !DILocation(line: 599, column: 39, scope: !3434)
!3440 = !DILocation(line: 599, column: 44, scope: !3434)
!3441 = !DILocation(line: 0, scope: !3434)
!3442 = !DILocation(line: 600, column: 23, scope: !3434)
!3443 = !DILocation(line: 600, column: 11, scope: !3434)
!3444 = !DILocation(line: 600, column: 9, scope: !3434)
!3445 = distinct !{!3445, !3433, !3446}
!3446 = !DILocation(line: 600, column: 28, scope: !3434)
!3447 = !DILocation(line: 601, column: 12, scope: !3448)
!3448 = distinct !DILexicalBlock(scope: !3434, file: !561, line: 601, column: 12)
!3449 = !DILocation(line: 601, column: 18, scope: !3448)
!3450 = !DILocation(line: 601, column: 12, scope: !3434)
!3451 = !DILocation(line: 602, column: 3, scope: !3448)
!3452 = !DILocation(line: 603, column: 16, scope: !3434)
!3453 = !DILocation(line: 603, column: 23, scope: !3434)
!3454 = !DILocation(line: 603, column: 14, scope: !3434)
!3455 = distinct !{!3455, !3415, !3456}
!3456 = !DILocation(line: 605, column: 2, scope: !3412)
!3457 = !DILocation(line: 608, column: 13, scope: !3278)
!3458 = !DILocation(line: 608, column: 17, scope: !3278)
!3459 = !DILocation(line: 608, column: 3, scope: !3278)
!3460 = !DILocation(line: 609, column: 1, scope: !3278)
!3461 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !586, file: !586, line: 34, type: !3462, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3462 = !DISubroutineType(types: !3463)
!3463 = !{!2924, !1605}
!3464 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3461, file: !586, line: 34, type: !1605)
!3465 = !DILocation(line: 34, column: 1, scope: !3461)
!3466 = distinct !DISubprogram(name: "distribute_loop", scope: !3, file: !3, line: 1126, type: !3467, scopeLine: 1127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3467 = !DISubroutineType(types: !3468)
!3468 = !{!1605, !1635, !2924}
!3469 = !DILocalVariable(name: "loop", arg: 1, scope: !3466, file: !3, line: 1126, type: !1635)
!3470 = !DILocation(line: 1126, column: 31, scope: !3466)
!3471 = !DILocalVariable(name: "stmts", arg: 2, scope: !3466, file: !3, line: 1126, type: !2924)
!3472 = !DILocation(line: 1126, column: 57, scope: !3466)
!3473 = !DILocalVariable(name: "res", scope: !3466, file: !3, line: 1128, type: !1605)
!3474 = !DILocation(line: 1128, column: 7, scope: !3466)
!3475 = !DILocalVariable(name: "rdg", scope: !3466, file: !3, line: 1129, type: !3476)
!3476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3477, size: 64)
!3477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "graph", file: !3478, line: 45, size: 192, elements: !3479)
!3478 = !DIFile(filename: "./graphds.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3479 = !{!3480, !3481, !3498}
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "n_vertices", scope: !3477, file: !3478, line: 47, baseType: !1605, size: 32)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "vertices", scope: !3477, file: !3478, line: 48, baseType: !3482, size: 64, offset: 64)
!3482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3483, size: 64)
!3483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vertex", file: !3478, line: 33, size: 256, elements: !3484)
!3484 = !{!3485, !3494, !3495, !3496, !3497}
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "pred", scope: !3483, file: !3478, line: 35, baseType: !3486, size: 64)
!3486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3487, size: 64)
!3487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "graph_edge", file: !3478, line: 23, size: 256, elements: !3488)
!3488 = !{!3489, !3490, !3491, !3492, !3493}
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !3487, file: !3478, line: 25, baseType: !1605, size: 32)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !3487, file: !3478, line: 25, baseType: !1605, size: 32, offset: 32)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "pred_next", scope: !3487, file: !3478, line: 26, baseType: !3486, size: 64, offset: 64)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "succ_next", scope: !3487, file: !3478, line: 26, baseType: !3486, size: 64, offset: 128)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3487, file: !3478, line: 28, baseType: !1610, size: 64, offset: 192)
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "succ", scope: !3483, file: !3478, line: 35, baseType: !3486, size: 64, offset: 64)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "component", scope: !3483, file: !3478, line: 37, baseType: !1605, size: 32, offset: 128)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "post", scope: !3483, file: !3478, line: 39, baseType: !1605, size: 32, offset: 160)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3483, file: !3478, line: 40, baseType: !1610, size: 64, offset: 192)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !3477, file: !3478, line: 50, baseType: !2109, size: 64, offset: 128)
!3499 = !DILocation(line: 1129, column: 17, scope: !3466)
!3500 = !DILocalVariable(name: "s", scope: !3466, file: !3, line: 1130, type: !1677)
!3501 = !DILocation(line: 1130, column: 10, scope: !3466)
!3502 = !DILocalVariable(name: "i", scope: !3466, file: !3, line: 1131, type: !7)
!3503 = !DILocation(line: 1131, column: 12, scope: !3466)
!3504 = !DILocalVariable(name: "vertices", scope: !3466, file: !3, line: 1132, type: !1619)
!3505 = !DILocation(line: 1132, column: 20, scope: !3466)
!3506 = !DILocation(line: 1134, column: 7, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3466, file: !3, line: 1134, column: 7)
!3508 = !DILocation(line: 1134, column: 13, scope: !3507)
!3509 = !DILocation(line: 1134, column: 23, scope: !3507)
!3510 = !DILocation(line: 1134, column: 7, scope: !3466)
!3511 = !DILocation(line: 1136, column: 11, scope: !3512)
!3512 = distinct !DILexicalBlock(scope: !3513, file: !3, line: 1136, column: 11)
!3513 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 1135, column: 5)
!3514 = !DILocation(line: 1136, column: 21, scope: !3512)
!3515 = !DILocation(line: 1136, column: 25, scope: !3512)
!3516 = !DILocation(line: 1136, column: 36, scope: !3512)
!3517 = !DILocation(line: 1136, column: 11, scope: !3513)
!3518 = !DILocation(line: 1137, column: 11, scope: !3512)
!3519 = !DILocation(line: 1139, column: 4, scope: !3512)
!3520 = !DILocation(line: 1139, column: 10, scope: !3512)
!3521 = !DILocation(line: 1137, column: 2, scope: !3512)
!3522 = !DILocation(line: 1141, column: 14, scope: !3513)
!3523 = !DILocation(line: 1141, column: 7, scope: !3513)
!3524 = !DILocation(line: 1144, column: 20, scope: !3466)
!3525 = !DILocation(line: 1144, column: 9, scope: !3466)
!3526 = !DILocation(line: 1144, column: 7, scope: !3466)
!3527 = !DILocation(line: 1146, column: 8, scope: !3528)
!3528 = distinct !DILexicalBlock(scope: !3466, file: !3, line: 1146, column: 7)
!3529 = !DILocation(line: 1146, column: 7, scope: !3466)
!3530 = !DILocation(line: 1148, column: 11, scope: !3531)
!3531 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 1148, column: 11)
!3532 = distinct !DILexicalBlock(scope: !3528, file: !3, line: 1147, column: 5)
!3533 = !DILocation(line: 1148, column: 21, scope: !3531)
!3534 = !DILocation(line: 1148, column: 25, scope: !3531)
!3535 = !DILocation(line: 1148, column: 36, scope: !3531)
!3536 = !DILocation(line: 1148, column: 11, scope: !3532)
!3537 = !DILocation(line: 1149, column: 11, scope: !3531)
!3538 = !DILocation(line: 1151, column: 4, scope: !3531)
!3539 = !DILocation(line: 1151, column: 10, scope: !3531)
!3540 = !DILocation(line: 1149, column: 2, scope: !3531)
!3541 = !DILocation(line: 1153, column: 14, scope: !3532)
!3542 = !DILocation(line: 1153, column: 7, scope: !3532)
!3543 = !DILocation(line: 1156, column: 14, scope: !3466)
!3544 = !DILocation(line: 1156, column: 12, scope: !3466)
!3545 = !DILocation(line: 1158, column: 7, scope: !3546)
!3546 = distinct !DILexicalBlock(scope: !3466, file: !3, line: 1158, column: 7)
!3547 = !DILocation(line: 1158, column: 17, scope: !3546)
!3548 = !DILocation(line: 1158, column: 21, scope: !3546)
!3549 = !DILocation(line: 1158, column: 32, scope: !3546)
!3550 = !DILocation(line: 1158, column: 7, scope: !3466)
!3551 = !DILocation(line: 1159, column: 15, scope: !3546)
!3552 = !DILocation(line: 1159, column: 26, scope: !3546)
!3553 = !DILocation(line: 1159, column: 5, scope: !3546)
!3554 = !DILocation(line: 1161, column: 10, scope: !3555)
!3555 = distinct !DILexicalBlock(scope: !3466, file: !3, line: 1161, column: 3)
!3556 = !DILocation(line: 1161, column: 8, scope: !3555)
!3557 = !DILocation(line: 1161, column: 15, scope: !3558)
!3558 = distinct !DILexicalBlock(scope: !3555, file: !3, line: 1161, column: 3)
!3559 = !DILocation(line: 1161, column: 3, scope: !3555)
!3560 = !DILocalVariable(name: "v", scope: !3561, file: !3, line: 1163, type: !1605)
!3561 = distinct !DILexicalBlock(scope: !3558, file: !3, line: 1162, column: 5)
!3562 = !DILocation(line: 1163, column: 11, scope: !3561)
!3563 = !DILocation(line: 1163, column: 36, scope: !3561)
!3564 = !DILocation(line: 1163, column: 41, scope: !3561)
!3565 = !DILocation(line: 1163, column: 15, scope: !3561)
!3566 = !DILocation(line: 1165, column: 11, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 1165, column: 11)
!3568 = !DILocation(line: 1165, column: 13, scope: !3567)
!3569 = !DILocation(line: 1165, column: 11, scope: !3561)
!3570 = !DILocation(line: 1167, column: 4, scope: !3571)
!3571 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 1166, column: 2)
!3572 = !DILocation(line: 1169, column: 8, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 1169, column: 8)
!3574 = !DILocation(line: 1169, column: 18, scope: !3573)
!3575 = !DILocation(line: 1169, column: 22, scope: !3573)
!3576 = !DILocation(line: 1169, column: 33, scope: !3573)
!3577 = !DILocation(line: 1169, column: 8, scope: !3571)
!3578 = !DILocation(line: 1170, column: 15, scope: !3573)
!3579 = !DILocation(line: 1171, column: 56, scope: !3573)
!3580 = !DILocation(line: 1170, column: 6, scope: !3573)
!3581 = !DILocation(line: 1172, column: 2, scope: !3571)
!3582 = !DILocation(line: 1173, column: 5, scope: !3561)
!3583 = !DILocation(line: 1161, column: 51, scope: !3558)
!3584 = !DILocation(line: 1161, column: 3, scope: !3558)
!3585 = distinct !{!3585, !3559, !3586}
!3586 = !DILocation(line: 1173, column: 5, scope: !3555)
!3587 = !DILocation(line: 1175, column: 20, scope: !3466)
!3588 = !DILocation(line: 1175, column: 26, scope: !3466)
!3589 = !DILocation(line: 1175, column: 31, scope: !3466)
!3590 = !DILocation(line: 1175, column: 9, scope: !3466)
!3591 = !DILocation(line: 1175, column: 7, scope: !3466)
!3592 = !DILocation(line: 1176, column: 3, scope: !3466)
!3593 = !DILocation(line: 1177, column: 13, scope: !3466)
!3594 = !DILocation(line: 1177, column: 3, scope: !3466)
!3595 = !DILocation(line: 1179, column: 10, scope: !3466)
!3596 = !DILocation(line: 1179, column: 3, scope: !3466)
!3597 = !DILocation(line: 1180, column: 1, scope: !3466)
!3598 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !586, file: !586, line: 34, type: !3599, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3599 = !DISubroutineType(types: !3600)
!3600 = !{null, !3601}
!3601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2924, size: 64)
!3602 = !DILocalVariable(name: "vec_", arg: 1, scope: !3598, file: !586, line: 34, type: !3601)
!3603 = !DILocation(line: 34, column: 1, scope: !3598)
!3604 = !DILocation(line: 34, column: 1, scope: !3605)
!3605 = distinct !DILexicalBlock(scope: !3598, file: !586, line: 34, column: 1)
!3606 = distinct !DISubprogram(name: "fel_next", scope: !561, file: !561, line: 518, type: !3607, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3607 = !DISubroutineType(types: !3608)
!3608 = !{null, !3281, !3282}
!3609 = !DILocalVariable(name: "li", arg: 1, scope: !3606, file: !561, line: 518, type: !3281)
!3610 = !DILocation(line: 518, column: 26, scope: !3606)
!3611 = !DILocalVariable(name: "loop", arg: 2, scope: !3606, file: !561, line: 518, type: !3282)
!3612 = !DILocation(line: 518, column: 38, scope: !3606)
!3613 = !DILocalVariable(name: "anum", scope: !3606, file: !561, line: 520, type: !1605)
!3614 = !DILocation(line: 520, column: 7, scope: !3606)
!3615 = !DILocation(line: 522, column: 3, scope: !3606)
!3616 = !DILocation(line: 522, column: 10, scope: !3606)
!3617 = !DILocation(line: 524, column: 7, scope: !3618)
!3618 = distinct !DILexicalBlock(scope: !3606, file: !561, line: 523, column: 5)
!3619 = !DILocation(line: 524, column: 11, scope: !3618)
!3620 = !DILocation(line: 524, column: 14, scope: !3618)
!3621 = !DILocation(line: 525, column: 25, scope: !3618)
!3622 = !DILocation(line: 525, column: 15, scope: !3618)
!3623 = !DILocation(line: 525, column: 8, scope: !3618)
!3624 = !DILocation(line: 525, column: 13, scope: !3618)
!3625 = !DILocation(line: 526, column: 12, scope: !3626)
!3626 = distinct !DILexicalBlock(scope: !3618, file: !561, line: 526, column: 11)
!3627 = !DILocation(line: 526, column: 11, scope: !3626)
!3628 = !DILocation(line: 526, column: 11, scope: !3618)
!3629 = !DILocation(line: 527, column: 2, scope: !3626)
!3630 = distinct !{!3630, !3615, !3631}
!3631 = !DILocation(line: 528, column: 5, scope: !3606)
!3632 = !DILocation(line: 530, column: 3, scope: !3606)
!3633 = !DILocation(line: 531, column: 4, scope: !3606)
!3634 = !DILocation(line: 531, column: 9, scope: !3606)
!3635 = !DILocation(line: 532, column: 1, scope: !3606)
!3636 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !1621, file: !1621, line: 32, type: !3637, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3637 = !DISubroutineType(types: !3638)
!3638 = !{!1619, !1605}
!3639 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3636, file: !1621, line: 32, type: !1605)
!3640 = !DILocation(line: 32, column: 1, scope: !3636)
!3641 = distinct !DISubprogram(name: "number_of_loops", scope: !561, file: !561, line: 459, type: !3101, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3642 = !DILocation(line: 461, column: 8, scope: !3643)
!3643 = distinct !DILexicalBlock(scope: !3641, file: !561, line: 461, column: 7)
!3644 = !DILocation(line: 461, column: 7, scope: !3641)
!3645 = !DILocation(line: 462, column: 5, scope: !3643)
!3646 = !DILocation(line: 464, column: 10, scope: !3641)
!3647 = !DILocation(line: 464, column: 3, scope: !3641)
!3648 = !DILocation(line: 465, column: 1, scope: !3641)
!3649 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !561, file: !561, line: 85, type: !3650, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3650 = !DISubroutineType(types: !3651)
!3651 = !{!1605, !3652, !7, !3282}
!3652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3653, size: 64)
!3653 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2254)
!3654 = !DILocalVariable(name: "vec_", arg: 1, scope: !3649, file: !561, line: 85, type: !3652)
!3655 = !DILocation(line: 85, column: 1, scope: !3649)
!3656 = !DILocalVariable(name: "ix_", arg: 2, scope: !3649, file: !561, line: 85, type: !7)
!3657 = !DILocalVariable(name: "ptr", arg: 3, scope: !3649, file: !561, line: 85, type: !3282)
!3658 = !DILocation(line: 85, column: 1, scope: !3659)
!3659 = distinct !DILexicalBlock(scope: !3649, file: !561, line: 85, column: 1)
!3660 = !DILocation(line: 85, column: 1, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3659, file: !561, line: 85, column: 1)
!3662 = !DILocation(line: 85, column: 1, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3659, file: !561, line: 85, column: 1)
!3664 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !1621, file: !1621, line: 31, type: !3665, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3665 = !DISubroutineType(types: !3666)
!3666 = !{!3033, !3667, !1605}
!3667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1625, size: 64)
!3668 = !DILocalVariable(name: "vec_", arg: 1, scope: !3664, file: !1621, line: 31, type: !3667)
!3669 = !DILocation(line: 31, column: 1, scope: !3664)
!3670 = !DILocalVariable(name: "obj_", arg: 2, scope: !3664, file: !1621, line: 31, type: !1605)
!3671 = !DILocalVariable(name: "slot_", scope: !3664, file: !1621, line: 31, type: !3033)
!3672 = distinct !DISubprogram(name: "loop_outer", scope: !561, file: !561, line: 434, type: !3673, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3673 = !DISubroutineType(types: !3674)
!3674 = !{!1635, !3675}
!3675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3676, size: 64)
!3676 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1636)
!3677 = !DILocalVariable(name: "loop", arg: 1, scope: !3672, file: !561, line: 434, type: !3675)
!3678 = !DILocation(line: 434, column: 32, scope: !3672)
!3679 = !DILocalVariable(name: "n", scope: !3672, file: !561, line: 436, type: !7)
!3680 = !DILocation(line: 436, column: 12, scope: !3672)
!3681 = !DILocation(line: 436, column: 16, scope: !3672)
!3682 = !DILocation(line: 438, column: 7, scope: !3683)
!3683 = distinct !DILexicalBlock(scope: !3672, file: !561, line: 438, column: 7)
!3684 = !DILocation(line: 438, column: 9, scope: !3683)
!3685 = !DILocation(line: 438, column: 7, scope: !3672)
!3686 = !DILocation(line: 439, column: 5, scope: !3683)
!3687 = !DILocation(line: 441, column: 10, scope: !3672)
!3688 = !DILocation(line: 441, column: 3, scope: !3672)
!3689 = !DILocation(line: 442, column: 1, scope: !3672)
!3690 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !561, file: !561, line: 85, type: !3691, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3691 = !DISubroutineType(types: !3692)
!3692 = !{!7, !3652}
!3693 = !DILocalVariable(name: "vec_", arg: 1, scope: !3690, file: !561, line: 85, type: !3652)
!3694 = !DILocation(line: 85, column: 1, scope: !3690)
!3695 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !561, file: !561, line: 85, type: !3696, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3696 = !DISubroutineType(types: !3697)
!3697 = !{!1634, !3652, !7}
!3698 = !DILocalVariable(name: "vec_", arg: 1, scope: !3695, file: !561, line: 85, type: !3652)
!3699 = !DILocation(line: 85, column: 1, scope: !3695)
!3700 = !DILocalVariable(name: "ix_", arg: 2, scope: !3695, file: !561, line: 85, type: !7)
!3701 = !DILocation(line: 0, scope: !3695)
!3702 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !586, file: !586, line: 33, type: !3703, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3703 = !DISubroutineType(types: !3704)
!3704 = !{!1605, !3705, !7, !3707}
!3705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3706, size: 64)
!3706 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2166)
!3707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1677, size: 64)
!3708 = !DILocalVariable(name: "vec_", arg: 1, scope: !3702, file: !586, line: 33, type: !3705)
!3709 = !DILocation(line: 33, column: 1, scope: !3702)
!3710 = !DILocalVariable(name: "ix_", arg: 2, scope: !3702, file: !586, line: 33, type: !7)
!3711 = !DILocalVariable(name: "ptr", arg: 3, scope: !3702, file: !586, line: 33, type: !3707)
!3712 = !DILocation(line: 33, column: 1, scope: !3713)
!3713 = distinct !DILexicalBlock(scope: !3702, file: !586, line: 33, column: 1)
!3714 = !DILocation(line: 33, column: 1, scope: !3715)
!3715 = distinct !DILexicalBlock(scope: !3713, file: !586, line: 33, column: 1)
!3716 = !DILocation(line: 33, column: 1, scope: !3717)
!3717 = distinct !DILexicalBlock(scope: !3713, file: !586, line: 33, column: 1)
!3718 = distinct !DISubprogram(name: "VEC_int_heap_safe_push", scope: !1621, file: !1621, line: 32, type: !3719, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3719 = !DISubroutineType(types: !3720)
!3720 = !{!3033, !3077, !3721}
!3721 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1605)
!3722 = !DILocalVariable(name: "vec_", arg: 1, scope: !3718, file: !1621, line: 32, type: !3077)
!3723 = !DILocation(line: 32, column: 1, scope: !3718)
!3724 = !DILocalVariable(name: "obj_", arg: 2, scope: !3718, file: !1621, line: 32, type: !3721)
!3725 = distinct !DISubprogram(name: "ldist_gen", scope: !3, file: !3, line: 1048, type: !3726, scopeLine: 1050, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3726 = !DISubroutineType(types: !3727)
!3727 = !{!1605, !1635, !3476, !1619}
!3728 = !DILocalVariable(name: "loop", arg: 1, scope: !3725, file: !3, line: 1048, type: !1635)
!3729 = !DILocation(line: 1048, column: 25, scope: !3725)
!3730 = !DILocalVariable(name: "rdg", arg: 2, scope: !3725, file: !3, line: 1048, type: !3476)
!3731 = !DILocation(line: 1048, column: 45, scope: !3725)
!3732 = !DILocalVariable(name: "starting_vertices", arg: 3, scope: !3725, file: !3, line: 1049, type: !1619)
!3733 = !DILocation(line: 1049, column: 22, scope: !3725)
!3734 = !DILocalVariable(name: "i", scope: !3725, file: !3, line: 1051, type: !1605)
!3735 = !DILocation(line: 1051, column: 7, scope: !3725)
!3736 = !DILocalVariable(name: "nbp", scope: !3725, file: !3, line: 1051, type: !1605)
!3737 = !DILocation(line: 1051, column: 10, scope: !3725)
!3738 = !DILocalVariable(name: "components", scope: !3725, file: !3, line: 1052, type: !2935)
!3739 = !DILocation(line: 1052, column: 21, scope: !3725)
!3740 = !DILocation(line: 1052, column: 34, scope: !3725)
!3741 = !DILocalVariable(name: "partitions", scope: !3725, file: !3, line: 1053, type: !2953)
!3742 = !DILocation(line: 1053, column: 23, scope: !3725)
!3743 = !DILocation(line: 1053, column: 36, scope: !3725)
!3744 = !DILocalVariable(name: "other_stores", scope: !3725, file: !3, line: 1054, type: !1619)
!3745 = !DILocation(line: 1054, column: 20, scope: !3725)
!3746 = !DILocation(line: 1054, column: 35, scope: !3725)
!3747 = !DILocalVariable(name: "partition", scope: !3725, file: !3, line: 1055, type: !1552)
!3748 = !DILocation(line: 1055, column: 10, scope: !3725)
!3749 = !DILocalVariable(name: "processed", scope: !3725, file: !3, line: 1055, type: !1552)
!3750 = !DILocation(line: 1055, column: 21, scope: !3725)
!3751 = !DILocation(line: 1055, column: 33, scope: !3725)
!3752 = !DILocation(line: 1057, column: 21, scope: !3725)
!3753 = !DILocation(line: 1057, column: 19, scope: !3725)
!3754 = !DILocation(line: 1058, column: 25, scope: !3725)
!3755 = !DILocation(line: 1058, column: 23, scope: !3725)
!3756 = !DILocation(line: 1060, column: 10, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1060, column: 3)
!3758 = !DILocation(line: 1060, column: 8, scope: !3757)
!3759 = !DILocation(line: 1060, column: 15, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3757, file: !3, line: 1060, column: 3)
!3761 = !DILocation(line: 1060, column: 19, scope: !3760)
!3762 = !DILocation(line: 1060, column: 24, scope: !3760)
!3763 = !DILocation(line: 1060, column: 17, scope: !3760)
!3764 = !DILocation(line: 1060, column: 3, scope: !3757)
!3765 = !DILocation(line: 1062, column: 23, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3760, file: !3, line: 1061, column: 5)
!3767 = !DILocation(line: 1062, column: 40, scope: !3766)
!3768 = !DILocation(line: 1062, column: 7, scope: !3766)
!3769 = !DILocation(line: 1066, column: 11, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 1066, column: 11)
!3771 = !DILocation(line: 1066, column: 11, scope: !3766)
!3772 = !DILocalVariable(name: "v", scope: !3773, file: !3, line: 1068, type: !1605)
!3773 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 1067, column: 2)
!3774 = !DILocation(line: 1068, column: 8, scope: !3773)
!3775 = !DILocalVariable(name: "j", scope: !3773, file: !3, line: 1069, type: !7)
!3776 = !DILocation(line: 1069, column: 13, scope: !3773)
!3777 = !DILocalVariable(name: "found", scope: !3773, file: !3, line: 1070, type: !1815)
!3778 = !DILocation(line: 1070, column: 9, scope: !3773)
!3779 = !DILocation(line: 1072, column: 11, scope: !3780)
!3780 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 1072, column: 4)
!3781 = !DILocation(line: 1072, column: 9, scope: !3780)
!3782 = !DILocation(line: 1072, column: 16, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3780, file: !3, line: 1072, column: 4)
!3784 = !DILocation(line: 1072, column: 4, scope: !3780)
!3785 = !DILocation(line: 1073, column: 10, scope: !3786)
!3786 = distinct !DILexicalBlock(scope: !3783, file: !3, line: 1073, column: 10)
!3787 = !DILocation(line: 1073, column: 15, scope: !3786)
!3788 = !DILocation(line: 1073, column: 12, scope: !3786)
!3789 = !DILocation(line: 1073, column: 10, scope: !3783)
!3790 = !DILocation(line: 1075, column: 9, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 1074, column: 8)
!3792 = !DILocation(line: 1076, column: 3, scope: !3791)
!3793 = !DILocation(line: 1072, column: 61, scope: !3783)
!3794 = !DILocation(line: 1072, column: 4, scope: !3783)
!3795 = distinct !{!3795, !3784, !3796}
!3796 = !DILocation(line: 1077, column: 8, scope: !3780)
!3797 = !DILocation(line: 1079, column: 9, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 1079, column: 8)
!3799 = !DILocation(line: 1079, column: 8, scope: !3773)
!3800 = !DILocation(line: 1080, column: 6, scope: !3798)
!3801 = !DILocation(line: 1081, column: 2, scope: !3773)
!3802 = !DILocation(line: 1082, column: 5, scope: !3766)
!3803 = !DILocation(line: 1060, column: 37, scope: !3760)
!3804 = !DILocation(line: 1060, column: 3, scope: !3760)
!3805 = distinct !{!3805, !3764, !3806}
!3806 = !DILocation(line: 1082, column: 5, scope: !3757)
!3807 = !DILocation(line: 1084, column: 42, scope: !3725)
!3808 = !DILocation(line: 1084, column: 3, scope: !3725)
!3809 = !DILocation(line: 1085, column: 25, scope: !3725)
!3810 = !DILocation(line: 1085, column: 30, scope: !3725)
!3811 = !DILocation(line: 1085, column: 3, scope: !3725)
!3812 = !DILocation(line: 1086, column: 25, scope: !3725)
!3813 = !DILocation(line: 1086, column: 30, scope: !3725)
!3814 = !DILocation(line: 1087, column: 4, scope: !3725)
!3815 = !DILocation(line: 1086, column: 3, scope: !3725)
!3816 = !DILocation(line: 1088, column: 3, scope: !3725)
!3817 = !DILocation(line: 1089, column: 9, scope: !3725)
!3818 = !DILocation(line: 1089, column: 7, scope: !3725)
!3819 = !DILocation(line: 1091, column: 7, scope: !3820)
!3820 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1091, column: 7)
!3821 = !DILocation(line: 1091, column: 11, scope: !3820)
!3822 = !DILocation(line: 1092, column: 7, scope: !3820)
!3823 = !DILocation(line: 1092, column: 37, scope: !3820)
!3824 = !DILocation(line: 1092, column: 42, scope: !3820)
!3825 = !DILocation(line: 1092, column: 10, scope: !3820)
!3826 = !DILocation(line: 1091, column: 7, scope: !3725)
!3827 = !DILocation(line: 1093, column: 5, scope: !3820)
!3828 = !DILocation(line: 1095, column: 7, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1095, column: 7)
!3830 = !DILocation(line: 1095, column: 17, scope: !3829)
!3831 = !DILocation(line: 1095, column: 21, scope: !3829)
!3832 = !DILocation(line: 1095, column: 32, scope: !3829)
!3833 = !DILocation(line: 1095, column: 7, scope: !3725)
!3834 = !DILocation(line: 1096, column: 26, scope: !3829)
!3835 = !DILocation(line: 1096, column: 37, scope: !3829)
!3836 = !DILocation(line: 1096, column: 5, scope: !3829)
!3837 = !DILocation(line: 1098, column: 10, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1098, column: 3)
!3839 = !DILocation(line: 1098, column: 8, scope: !3838)
!3840 = !DILocation(line: 1098, column: 15, scope: !3841)
!3841 = distinct !DILexicalBlock(scope: !3838, file: !3, line: 1098, column: 3)
!3842 = !DILocation(line: 1098, column: 3, scope: !3838)
!3843 = !DILocation(line: 1099, column: 39, scope: !3844)
!3844 = distinct !DILexicalBlock(scope: !3841, file: !3, line: 1099, column: 9)
!3845 = !DILocation(line: 1099, column: 45, scope: !3844)
!3846 = !DILocation(line: 1099, column: 56, scope: !3844)
!3847 = !DILocation(line: 1099, column: 60, scope: !3844)
!3848 = !DILocation(line: 1099, column: 64, scope: !3844)
!3849 = !DILocation(line: 1099, column: 58, scope: !3844)
!3850 = !DILocation(line: 1099, column: 10, scope: !3844)
!3851 = !DILocation(line: 1099, column: 9, scope: !3841)
!3852 = !DILocation(line: 1100, column: 7, scope: !3844)
!3853 = !DILocation(line: 1099, column: 67, scope: !3844)
!3854 = !DILocation(line: 1098, column: 64, scope: !3841)
!3855 = !DILocation(line: 1098, column: 3, scope: !3841)
!3856 = distinct !{!3856, !3842, !3857}
!3857 = !DILocation(line: 1100, column: 12, scope: !3838)
!3858 = !DILocation(line: 1102, column: 3, scope: !3725)
!3859 = !DILocation(line: 1103, column: 3, scope: !3725)
!3860 = !DILabel(scope: !3725, name: "ldist_done", file: !3, line: 1105)
!3861 = !DILocation(line: 1105, column: 2, scope: !3725)
!3862 = !DILocation(line: 1107, column: 3, scope: !3725)
!3863 = !DILocation(line: 1108, column: 3, scope: !3725)
!3864 = !DILocation(line: 1110, column: 10, scope: !3865)
!3865 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1110, column: 3)
!3866 = !DILocation(line: 1110, column: 8, scope: !3865)
!3867 = !DILocation(line: 1110, column: 15, scope: !3868)
!3868 = distinct !DILexicalBlock(scope: !3865, file: !3, line: 1110, column: 3)
!3869 = !DILocation(line: 1110, column: 3, scope: !3865)
!3870 = !DILocation(line: 1111, column: 5, scope: !3868)
!3871 = !DILocation(line: 1110, column: 64, scope: !3868)
!3872 = !DILocation(line: 1110, column: 3, scope: !3868)
!3873 = distinct !{!3873, !3869, !3874}
!3874 = !DILocation(line: 1111, column: 5, scope: !3865)
!3875 = !DILocation(line: 1113, column: 3, scope: !3725)
!3876 = !DILocation(line: 1114, column: 3, scope: !3725)
!3877 = !DILocation(line: 1115, column: 24, scope: !3725)
!3878 = !DILocation(line: 1115, column: 3, scope: !3725)
!3879 = !DILocation(line: 1116, column: 10, scope: !3725)
!3880 = !DILocation(line: 1116, column: 3, scope: !3725)
!3881 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !1621, file: !1621, line: 32, type: !3882, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3882 = !DISubroutineType(types: !3883)
!3883 = !{null, !3077}
!3884 = !DILocalVariable(name: "vec_", arg: 1, scope: !3881, file: !1621, line: 32, type: !3077)
!3885 = !DILocation(line: 32, column: 1, scope: !3881)
!3886 = !DILocation(line: 32, column: 1, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3881, file: !1621, line: 32, column: 1)
!3888 = distinct !DISubprogram(name: "VEC_int_heap_reserve", scope: !1621, file: !1621, line: 32, type: !3889, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3889 = !DISubroutineType(types: !3890)
!3890 = !{!1605, !3077, !1605}
!3891 = !DILocalVariable(name: "vec_", arg: 1, scope: !3888, file: !1621, line: 32, type: !3077)
!3892 = !DILocation(line: 32, column: 1, scope: !3888)
!3893 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3888, file: !1621, line: 32, type: !1605)
!3894 = !DILocalVariable(name: "extend", scope: !3888, file: !1621, line: 32, type: !1605)
!3895 = !DILocation(line: 32, column: 1, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3888, file: !1621, line: 32, column: 1)
!3897 = distinct !DISubprogram(name: "VEC_int_base_space", scope: !1621, file: !1621, line: 31, type: !3898, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3898 = !DISubroutineType(types: !3899)
!3899 = !{!1605, !3667, !1605}
!3900 = !DILocalVariable(name: "vec_", arg: 1, scope: !3897, file: !1621, line: 31, type: !3667)
!3901 = !DILocation(line: 31, column: 1, scope: !3897)
!3902 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3897, file: !1621, line: 31, type: !1605)
!3903 = distinct !DISubprogram(name: "VEC_rdgc_heap_alloc", scope: !579, file: !579, line: 604, type: !3904, scopeLine: 604, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3904 = !DISubroutineType(types: !3905)
!3905 = !{!2935, !1605}
!3906 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3903, file: !579, line: 604, type: !1605)
!3907 = !DILocation(line: 604, column: 1, scope: !3903)
!3908 = distinct !DISubprogram(name: "VEC_bitmap_heap_alloc", scope: !579, file: !579, line: 607, type: !3909, scopeLine: 607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3909 = !DISubroutineType(types: !3910)
!3910 = !{!2953, !1605}
!3911 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3908, file: !579, line: 607, type: !1605)
!3912 = !DILocation(line: 607, column: 1, scope: !3908)
!3913 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !1621, file: !1621, line: 31, type: !3914, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3914 = !DISubroutineType(types: !3915)
!3915 = !{!1605, !3916, !7, !3033}
!3916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3917, size: 64)
!3917 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1625)
!3918 = !DILocalVariable(name: "vec_", arg: 1, scope: !3913, file: !1621, line: 31, type: !3916)
!3919 = !DILocation(line: 31, column: 1, scope: !3913)
!3920 = !DILocalVariable(name: "ix_", arg: 2, scope: !3913, file: !1621, line: 31, type: !7)
!3921 = !DILocalVariable(name: "ptr", arg: 3, scope: !3913, file: !1621, line: 31, type: !3033)
!3922 = !DILocation(line: 31, column: 1, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3913, file: !1621, line: 31, column: 1)
!3924 = !DILocation(line: 31, column: 1, scope: !3925)
!3925 = distinct !DILexicalBlock(scope: !3923, file: !1621, line: 31, column: 1)
!3926 = !DILocation(line: 31, column: 1, scope: !3927)
!3927 = distinct !DILexicalBlock(scope: !3923, file: !1621, line: 31, column: 1)
!3928 = distinct !DISubprogram(name: "mark_nodes_having_upstream_mem_writes", scope: !3, file: !3, line: 515, type: !3929, scopeLine: 516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!3929 = !DISubroutineType(types: !3930)
!3930 = !{null, !3476}
!3931 = !DILocalVariable(name: "rdg", arg: 1, scope: !3928, file: !3, line: 515, type: !3476)
!3932 = !DILocation(line: 515, column: 54, scope: !3928)
!3933 = !DILocalVariable(name: "v", scope: !3928, file: !3, line: 517, type: !1605)
!3934 = !DILocation(line: 517, column: 7, scope: !3928)
!3935 = !DILocalVariable(name: "x", scope: !3928, file: !3, line: 517, type: !1605)
!3936 = !DILocation(line: 517, column: 10, scope: !3928)
!3937 = !DILocalVariable(name: "seen", scope: !3928, file: !3, line: 518, type: !1552)
!3938 = !DILocation(line: 518, column: 10, scope: !3928)
!3939 = !DILocation(line: 518, column: 17, scope: !3928)
!3940 = !DILocation(line: 520, column: 12, scope: !3941)
!3941 = distinct !DILexicalBlock(scope: !3928, file: !3, line: 520, column: 3)
!3942 = !DILocation(line: 520, column: 17, scope: !3941)
!3943 = !DILocation(line: 520, column: 28, scope: !3941)
!3944 = !DILocation(line: 520, column: 10, scope: !3941)
!3945 = !DILocation(line: 520, column: 8, scope: !3941)
!3946 = !DILocation(line: 520, column: 33, scope: !3947)
!3947 = distinct !DILexicalBlock(scope: !3941, file: !3, line: 520, column: 3)
!3948 = !DILocation(line: 520, column: 35, scope: !3947)
!3949 = !DILocation(line: 520, column: 3, scope: !3941)
!3950 = !DILocation(line: 521, column: 24, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3947, file: !3, line: 521, column: 9)
!3952 = !DILocation(line: 521, column: 30, scope: !3951)
!3953 = !DILocation(line: 521, column: 10, scope: !3951)
!3954 = !DILocation(line: 521, column: 9, scope: !3947)
!3955 = !DILocalVariable(name: "i", scope: !3956, file: !3, line: 523, type: !7)
!3956 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 522, column: 7)
!3957 = !DILocation(line: 523, column: 11, scope: !3956)
!3958 = !DILocalVariable(name: "nodes", scope: !3956, file: !3, line: 524, type: !1619)
!3959 = !DILocation(line: 524, column: 19, scope: !3956)
!3960 = !DILocation(line: 524, column: 27, scope: !3956)
!3961 = !DILocation(line: 526, column: 15, scope: !3956)
!3962 = !DILocation(line: 526, column: 2, scope: !3956)
!3963 = !DILocation(line: 528, column: 9, scope: !3964)
!3964 = distinct !DILexicalBlock(scope: !3956, file: !3, line: 528, column: 2)
!3965 = !DILocation(line: 528, column: 7, scope: !3964)
!3966 = !DILocation(line: 528, column: 14, scope: !3967)
!3967 = distinct !DILexicalBlock(scope: !3964, file: !3, line: 528, column: 2)
!3968 = !DILocation(line: 528, column: 2, scope: !3964)
!3969 = !DILocation(line: 530, column: 24, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3971, file: !3, line: 530, column: 10)
!3971 = distinct !DILexicalBlock(scope: !3967, file: !3, line: 529, column: 4)
!3972 = !DILocation(line: 530, column: 30, scope: !3970)
!3973 = !DILocation(line: 530, column: 10, scope: !3970)
!3974 = !DILocation(line: 530, column: 10, scope: !3971)
!3975 = !DILocation(line: 531, column: 8, scope: !3970)
!3976 = !DILocation(line: 533, column: 22, scope: !3971)
!3977 = !DILocation(line: 533, column: 28, scope: !3971)
!3978 = !DILocation(line: 533, column: 6, scope: !3971)
!3979 = !DILocation(line: 535, column: 10, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3971, file: !3, line: 535, column: 10)
!3981 = !DILocation(line: 536, column: 3, scope: !3980)
!3982 = !DILocation(line: 536, column: 33, scope: !3980)
!3983 = !DILocation(line: 536, column: 40, scope: !3980)
!3984 = !DILocation(line: 536, column: 45, scope: !3980)
!3985 = !DILocation(line: 536, column: 54, scope: !3980)
!3986 = !DILocation(line: 536, column: 6, scope: !3980)
!3987 = !DILocation(line: 540, column: 3, scope: !3980)
!3988 = !DILocation(line: 540, column: 29, scope: !3980)
!3989 = !DILocation(line: 540, column: 34, scope: !3980)
!3990 = !DILocation(line: 540, column: 43, scope: !3980)
!3991 = !DILocation(line: 540, column: 6, scope: !3980)
!3992 = !DILocation(line: 535, column: 10, scope: !3971)
!3993 = !DILocation(line: 542, column: 19, scope: !3994)
!3994 = distinct !DILexicalBlock(scope: !3980, file: !3, line: 541, column: 8)
!3995 = !DILocation(line: 542, column: 40, scope: !3994)
!3996 = !DILocation(line: 542, column: 3, scope: !3994)
!3997 = !DILocation(line: 543, column: 8, scope: !3994)
!3998 = !DILocation(line: 544, column: 4, scope: !3971)
!3999 = !DILocation(line: 528, column: 47, scope: !3967)
!4000 = !DILocation(line: 528, column: 2, scope: !3967)
!4001 = distinct !{!4001, !3968, !4002}
!4002 = !DILocation(line: 544, column: 4, scope: !3964)
!4003 = !DILocation(line: 546, column: 2, scope: !3956)
!4004 = !DILocation(line: 547, column: 7, scope: !3956)
!4005 = !DILocation(line: 521, column: 31, scope: !3951)
!4006 = !DILocation(line: 520, column: 42, scope: !3947)
!4007 = !DILocation(line: 520, column: 3, scope: !3947)
!4008 = distinct !{!4008, !3949, !4009}
!4009 = !DILocation(line: 547, column: 7, scope: !3941)
!4010 = !DILocation(line: 548, column: 1, scope: !3928)
!4011 = distinct !DISubprogram(name: "rdg_build_components", scope: !3, file: !3, line: 857, type: !4012, scopeLine: 859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4012 = !DISubroutineType(types: !4013)
!4013 = !{null, !3476, !1619, !4014}
!4014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2935, size: 64)
!4015 = !DILocalVariable(name: "rdg", arg: 1, scope: !4011, file: !3, line: 857, type: !3476)
!4016 = !DILocation(line: 857, column: 37, scope: !4011)
!4017 = !DILocalVariable(name: "starting_vertices", arg: 2, scope: !4011, file: !3, line: 857, type: !1619)
!4018 = !DILocation(line: 857, column: 59, scope: !4011)
!4019 = !DILocalVariable(name: "components", arg: 3, scope: !4011, file: !3, line: 858, type: !4014)
!4020 = !DILocation(line: 858, column: 28, scope: !4011)
!4021 = !DILocalVariable(name: "i", scope: !4011, file: !3, line: 860, type: !1605)
!4022 = !DILocation(line: 860, column: 7, scope: !4011)
!4023 = !DILocalVariable(name: "v", scope: !4011, file: !3, line: 860, type: !1605)
!4024 = !DILocation(line: 860, column: 10, scope: !4011)
!4025 = !DILocalVariable(name: "saved_components", scope: !4011, file: !3, line: 861, type: !1552)
!4026 = !DILocation(line: 861, column: 10, scope: !4011)
!4027 = !DILocation(line: 861, column: 29, scope: !4011)
!4028 = !DILocalVariable(name: "n_components", scope: !4011, file: !3, line: 862, type: !1605)
!4029 = !DILocation(line: 862, column: 7, scope: !4011)
!4030 = !DILocation(line: 862, column: 35, scope: !4011)
!4031 = !DILocation(line: 862, column: 22, scope: !4011)
!4032 = !DILocalVariable(name: "all_components", scope: !4011, file: !3, line: 863, type: !3077)
!4033 = !DILocation(line: 863, column: 21, scope: !4011)
!4034 = !DILocation(line: 863, column: 38, scope: !4011)
!4035 = !DILocation(line: 865, column: 10, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 865, column: 3)
!4037 = !DILocation(line: 865, column: 8, scope: !4036)
!4038 = !DILocation(line: 865, column: 15, scope: !4039)
!4039 = distinct !DILexicalBlock(scope: !4036, file: !3, line: 865, column: 3)
!4040 = !DILocation(line: 865, column: 19, scope: !4039)
!4041 = !DILocation(line: 865, column: 17, scope: !4039)
!4042 = !DILocation(line: 865, column: 3, scope: !4036)
!4043 = !DILocation(line: 866, column: 25, scope: !4039)
!4044 = !DILocation(line: 866, column: 5, scope: !4039)
!4045 = !DILocation(line: 866, column: 20, scope: !4039)
!4046 = !DILocation(line: 866, column: 23, scope: !4039)
!4047 = !DILocation(line: 865, column: 34, scope: !4039)
!4048 = !DILocation(line: 865, column: 3, scope: !4039)
!4049 = distinct !{!4049, !4042, !4050}
!4050 = !DILocation(line: 866, column: 25, scope: !4036)
!4051 = !DILocation(line: 868, column: 10, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 868, column: 3)
!4053 = !DILocation(line: 868, column: 8, scope: !4052)
!4054 = !DILocation(line: 868, column: 15, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4052, file: !3, line: 868, column: 3)
!4056 = !DILocation(line: 868, column: 19, scope: !4055)
!4057 = !DILocation(line: 868, column: 24, scope: !4055)
!4058 = !DILocation(line: 868, column: 17, scope: !4055)
!4059 = !DILocation(line: 868, column: 3, scope: !4052)
!4060 = !DILocation(line: 869, column: 5, scope: !4055)
!4061 = !DILocation(line: 868, column: 37, scope: !4055)
!4062 = !DILocation(line: 868, column: 3, scope: !4055)
!4063 = distinct !{!4063, !4059, !4064}
!4064 = !DILocation(line: 869, column: 5, scope: !4052)
!4065 = !DILocation(line: 871, column: 10, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 871, column: 3)
!4067 = !DILocation(line: 871, column: 8, scope: !4066)
!4068 = !DILocation(line: 871, column: 15, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4066, file: !3, line: 871, column: 3)
!4070 = !DILocation(line: 871, column: 3, scope: !4066)
!4071 = !DILocalVariable(name: "c", scope: !4072, file: !3, line: 873, type: !1605)
!4072 = distinct !DILexicalBlock(scope: !4069, file: !3, line: 872, column: 5)
!4073 = !DILocation(line: 873, column: 11, scope: !4072)
!4074 = !DILocation(line: 873, column: 15, scope: !4072)
!4075 = !DILocation(line: 873, column: 20, scope: !4072)
!4076 = !DILocation(line: 873, column: 29, scope: !4072)
!4077 = !DILocation(line: 873, column: 32, scope: !4072)
!4078 = !DILocation(line: 875, column: 26, scope: !4079)
!4079 = distinct !DILexicalBlock(scope: !4072, file: !3, line: 875, column: 11)
!4080 = !DILocation(line: 875, column: 44, scope: !4079)
!4081 = !DILocation(line: 875, column: 12, scope: !4079)
!4082 = !DILocation(line: 875, column: 11, scope: !4072)
!4083 = !DILocalVariable(name: "x", scope: !4084, file: !3, line: 877, type: !2947)
!4084 = distinct !DILexicalBlock(scope: !4079, file: !3, line: 876, column: 2)
!4085 = !DILocation(line: 877, column: 9, scope: !4084)
!4086 = !DILocation(line: 877, column: 13, scope: !4084)
!4087 = !DILocation(line: 878, column: 13, scope: !4084)
!4088 = !DILocation(line: 878, column: 4, scope: !4084)
!4089 = !DILocation(line: 878, column: 7, scope: !4084)
!4090 = !DILocation(line: 878, column: 11, scope: !4084)
!4091 = !DILocation(line: 879, column: 18, scope: !4084)
!4092 = !DILocation(line: 879, column: 33, scope: !4084)
!4093 = !DILocation(line: 879, column: 4, scope: !4084)
!4094 = !DILocation(line: 879, column: 7, scope: !4084)
!4095 = !DILocation(line: 879, column: 16, scope: !4084)
!4096 = !DILocation(line: 881, column: 4, scope: !4084)
!4097 = !DILocation(line: 882, column: 20, scope: !4084)
!4098 = !DILocation(line: 882, column: 38, scope: !4084)
!4099 = !DILocation(line: 882, column: 4, scope: !4084)
!4100 = !DILocation(line: 883, column: 2, scope: !4084)
!4101 = !DILocation(line: 884, column: 5, scope: !4072)
!4102 = !DILocation(line: 871, column: 60, scope: !4069)
!4103 = !DILocation(line: 871, column: 3, scope: !4069)
!4104 = distinct !{!4104, !4070, !4105}
!4105 = !DILocation(line: 884, column: 5, scope: !4066)
!4106 = !DILocation(line: 886, column: 10, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 886, column: 3)
!4108 = !DILocation(line: 886, column: 8, scope: !4107)
!4109 = !DILocation(line: 886, column: 15, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4107, file: !3, line: 886, column: 3)
!4111 = !DILocation(line: 886, column: 19, scope: !4110)
!4112 = !DILocation(line: 886, column: 17, scope: !4110)
!4113 = !DILocation(line: 886, column: 3, scope: !4107)
!4114 = !DILocation(line: 887, column: 24, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 887, column: 9)
!4116 = !DILocation(line: 887, column: 42, scope: !4115)
!4117 = !DILocation(line: 887, column: 10, scope: !4115)
!4118 = !DILocation(line: 887, column: 9, scope: !4110)
!4119 = !DILocation(line: 888, column: 7, scope: !4115)
!4120 = !DILocation(line: 887, column: 43, scope: !4115)
!4121 = !DILocation(line: 886, column: 34, scope: !4110)
!4122 = !DILocation(line: 886, column: 3, scope: !4110)
!4123 = distinct !{!4123, !4113, !4124}
!4124 = !DILocation(line: 888, column: 7, scope: !4107)
!4125 = !DILocation(line: 890, column: 9, scope: !4011)
!4126 = !DILocation(line: 890, column: 3, scope: !4011)
!4127 = !DILocation(line: 891, column: 3, scope: !4011)
!4128 = !DILocation(line: 892, column: 1, scope: !4011)
!4129 = distinct !DISubprogram(name: "rdg_build_partitions", scope: !3, file: !3, line: 899, type: !4130, scopeLine: 902, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4130 = !DISubroutineType(types: !4131)
!4131 = !{null, !3476, !2935, !3077, !4132, !1552}
!4132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2953, size: 64)
!4133 = !DILocalVariable(name: "rdg", arg: 1, scope: !4129, file: !3, line: 899, type: !3476)
!4134 = !DILocation(line: 899, column: 37, scope: !4129)
!4135 = !DILocalVariable(name: "components", arg: 2, scope: !4129, file: !3, line: 899, type: !2935)
!4136 = !DILocation(line: 899, column: 60, scope: !4129)
!4137 = !DILocalVariable(name: "other_stores", arg: 3, scope: !4129, file: !3, line: 900, type: !3077)
!4138 = !DILocation(line: 900, column: 27, scope: !4129)
!4139 = !DILocalVariable(name: "partitions", arg: 4, scope: !4129, file: !3, line: 901, type: !4132)
!4140 = !DILocation(line: 901, column: 30, scope: !4129)
!4141 = !DILocalVariable(name: "processed", arg: 5, scope: !4129, file: !3, line: 901, type: !1552)
!4142 = !DILocation(line: 901, column: 49, scope: !4129)
!4143 = !DILocalVariable(name: "i", scope: !4129, file: !3, line: 903, type: !1605)
!4144 = !DILocation(line: 903, column: 7, scope: !4129)
!4145 = !DILocalVariable(name: "x", scope: !4129, file: !3, line: 904, type: !2947)
!4146 = !DILocation(line: 904, column: 8, scope: !4129)
!4147 = !DILocalVariable(name: "partition", scope: !4129, file: !3, line: 905, type: !1552)
!4148 = !DILocation(line: 905, column: 10, scope: !4129)
!4149 = !DILocation(line: 905, column: 22, scope: !4129)
!4150 = !DILocation(line: 907, column: 10, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 907, column: 3)
!4152 = !DILocation(line: 907, column: 8, scope: !4151)
!4153 = !DILocation(line: 907, column: 15, scope: !4154)
!4154 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 907, column: 3)
!4155 = !DILocation(line: 907, column: 3, scope: !4151)
!4156 = !DILocalVariable(name: "np", scope: !4157, file: !3, line: 909, type: !1552)
!4157 = distinct !DILexicalBlock(scope: !4154, file: !3, line: 908, column: 5)
!4158 = !DILocation(line: 909, column: 14, scope: !4157)
!4159 = !DILocalVariable(name: "part_has_writes", scope: !4157, file: !3, line: 910, type: !1815)
!4160 = !DILocation(line: 910, column: 12, scope: !4157)
!4161 = !DILocalVariable(name: "v", scope: !4157, file: !3, line: 911, type: !1605)
!4162 = !DILocation(line: 911, column: 11, scope: !4157)
!4163 = !DILocation(line: 911, column: 15, scope: !4157)
!4164 = !DILocation(line: 913, column: 25, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 913, column: 11)
!4166 = !DILocation(line: 913, column: 36, scope: !4165)
!4167 = !DILocation(line: 913, column: 11, scope: !4165)
!4168 = !DILocation(line: 913, column: 11, scope: !4157)
!4169 = !DILocation(line: 914, column: 2, scope: !4165)
!4170 = !DILocation(line: 916, column: 47, scope: !4157)
!4171 = !DILocation(line: 916, column: 52, scope: !4157)
!4172 = !DILocation(line: 917, column: 12, scope: !4157)
!4173 = !DILocation(line: 916, column: 12, scope: !4157)
!4174 = !DILocation(line: 916, column: 10, scope: !4157)
!4175 = !DILocation(line: 918, column: 24, scope: !4157)
!4176 = !DILocation(line: 918, column: 35, scope: !4157)
!4177 = !DILocation(line: 918, column: 7, scope: !4157)
!4178 = !DILocation(line: 919, column: 24, scope: !4157)
!4179 = !DILocation(line: 919, column: 35, scope: !4157)
!4180 = !DILocation(line: 919, column: 7, scope: !4157)
!4181 = !DILocation(line: 920, column: 7, scope: !4157)
!4182 = !DILocation(line: 922, column: 11, scope: !4183)
!4183 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 922, column: 11)
!4184 = !DILocation(line: 922, column: 11, scope: !4157)
!4185 = !DILocation(line: 924, column: 8, scope: !4186)
!4186 = distinct !DILexicalBlock(scope: !4187, file: !3, line: 924, column: 8)
!4187 = distinct !DILexicalBlock(scope: !4183, file: !3, line: 923, column: 2)
!4188 = !DILocation(line: 924, column: 18, scope: !4186)
!4189 = !DILocation(line: 924, column: 22, scope: !4186)
!4190 = !DILocation(line: 924, column: 33, scope: !4186)
!4191 = !DILocation(line: 924, column: 8, scope: !4187)
!4192 = !DILocation(line: 926, column: 17, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4186, file: !3, line: 925, column: 6)
!4194 = !DILocation(line: 926, column: 8, scope: !4193)
!4195 = !DILocation(line: 927, column: 8, scope: !4193)
!4196 = !DILocation(line: 928, column: 6, scope: !4193)
!4197 = !DILocation(line: 930, column: 4, scope: !4187)
!4198 = !DILocation(line: 931, column: 16, scope: !4187)
!4199 = !DILocation(line: 931, column: 14, scope: !4187)
!4200 = !DILocation(line: 932, column: 2, scope: !4187)
!4201 = !DILocation(line: 933, column: 5, scope: !4157)
!4202 = !DILocation(line: 907, column: 54, scope: !4154)
!4203 = !DILocation(line: 907, column: 3, scope: !4154)
!4204 = distinct !{!4204, !4155, !4205}
!4205 = !DILocation(line: 933, column: 5, scope: !4151)
!4206 = !DILocation(line: 938, column: 10, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 938, column: 3)
!4208 = !DILocation(line: 938, column: 8, scope: !4207)
!4209 = !DILocation(line: 938, column: 15, scope: !4210)
!4210 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 938, column: 3)
!4211 = !DILocation(line: 938, column: 19, scope: !4210)
!4212 = !DILocation(line: 938, column: 24, scope: !4210)
!4213 = !DILocation(line: 938, column: 17, scope: !4210)
!4214 = !DILocation(line: 938, column: 3, scope: !4207)
!4215 = !DILocation(line: 939, column: 24, scope: !4216)
!4216 = distinct !DILexicalBlock(scope: !4210, file: !3, line: 939, column: 9)
!4217 = !DILocation(line: 939, column: 35, scope: !4216)
!4218 = !DILocation(line: 939, column: 10, scope: !4216)
!4219 = !DILocation(line: 940, column: 2, scope: !4216)
!4220 = !DILocation(line: 940, column: 37, scope: !4216)
!4221 = !DILocation(line: 940, column: 42, scope: !4216)
!4222 = !DILocation(line: 940, column: 5, scope: !4216)
!4223 = !DILocation(line: 939, column: 9, scope: !4210)
!4224 = !DILocation(line: 941, column: 7, scope: !4216)
!4225 = !DILocation(line: 940, column: 43, scope: !4216)
!4226 = !DILocation(line: 938, column: 37, scope: !4210)
!4227 = !DILocation(line: 938, column: 3, scope: !4210)
!4228 = distinct !{!4228, !4214, !4229}
!4229 = !DILocation(line: 941, column: 7, scope: !4207)
!4230 = !DILocation(line: 946, column: 7, scope: !4231)
!4231 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 946, column: 7)
!4232 = !DILocation(line: 946, column: 39, scope: !4231)
!4233 = !DILocation(line: 946, column: 7, scope: !4129)
!4234 = !DILocalVariable(name: "comps", scope: !4235, file: !3, line: 948, type: !2935)
!4235 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 947, column: 5)
!4236 = !DILocation(line: 948, column: 25, scope: !4235)
!4237 = !DILocation(line: 948, column: 33, scope: !4235)
!4238 = !DILocalVariable(name: "foo", scope: !4235, file: !3, line: 949, type: !1619)
!4239 = !DILocation(line: 949, column: 24, scope: !4235)
!4240 = !DILocation(line: 949, column: 30, scope: !4235)
!4241 = !DILocation(line: 951, column: 29, scope: !4235)
!4242 = !DILocation(line: 951, column: 35, scope: !4235)
!4243 = !DILocation(line: 951, column: 34, scope: !4235)
!4244 = !DILocation(line: 951, column: 7, scope: !4235)
!4245 = !DILocation(line: 952, column: 29, scope: !4235)
!4246 = !DILocation(line: 952, column: 34, scope: !4235)
!4247 = !DILocation(line: 952, column: 47, scope: !4235)
!4248 = !DILocation(line: 952, column: 59, scope: !4235)
!4249 = !DILocation(line: 952, column: 7, scope: !4235)
!4250 = !DILocation(line: 954, column: 7, scope: !4235)
!4251 = !DILocation(line: 955, column: 28, scope: !4235)
!4252 = !DILocation(line: 955, column: 7, scope: !4235)
!4253 = !DILocation(line: 956, column: 5, scope: !4235)
!4254 = !DILocation(line: 959, column: 26, scope: !4255)
!4255 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 959, column: 7)
!4256 = !DILocation(line: 959, column: 7, scope: !4255)
!4257 = !DILocation(line: 959, column: 37, scope: !4255)
!4258 = !DILocation(line: 959, column: 7, scope: !4129)
!4259 = !DILocation(line: 960, column: 5, scope: !4255)
!4260 = !DILocation(line: 962, column: 5, scope: !4255)
!4261 = !DILocation(line: 963, column: 1, scope: !4129)
!4262 = distinct !DISubprogram(name: "VEC_bitmap_base_length", scope: !579, file: !579, line: 606, type: !4263, scopeLine: 606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4263 = !DISubroutineType(types: !4264)
!4264 = !{!7, !3265}
!4265 = !DILocalVariable(name: "vec_", arg: 1, scope: !4262, file: !579, line: 606, type: !3265)
!4266 = !DILocation(line: 606, column: 1, scope: !4262)
!4267 = distinct !DISubprogram(name: "partition_contains_all_rw", scope: !3, file: !3, line: 1031, type: !4268, scopeLine: 1032, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4268 = !DISubroutineType(types: !4269)
!4269 = !{!1815, !3476, !2953}
!4270 = !DILocalVariable(name: "rdg", arg: 1, scope: !4267, file: !3, line: 1031, type: !3476)
!4271 = !DILocation(line: 1031, column: 42, scope: !4267)
!4272 = !DILocalVariable(name: "partitions", arg: 2, scope: !4267, file: !3, line: 1031, type: !2953)
!4273 = !DILocation(line: 1031, column: 67, scope: !4267)
!4274 = !DILocalVariable(name: "i", scope: !4267, file: !3, line: 1033, type: !1605)
!4275 = !DILocation(line: 1033, column: 7, scope: !4267)
!4276 = !DILocalVariable(name: "partition", scope: !4267, file: !3, line: 1034, type: !1552)
!4277 = !DILocation(line: 1034, column: 10, scope: !4267)
!4278 = !DILocalVariable(name: "nrw", scope: !4267, file: !3, line: 1035, type: !1605)
!4279 = !DILocation(line: 1035, column: 7, scope: !4267)
!4280 = !DILocation(line: 1035, column: 34, scope: !4267)
!4281 = !DILocation(line: 1035, column: 13, scope: !4267)
!4282 = !DILocation(line: 1037, column: 10, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 1037, column: 3)
!4284 = !DILocation(line: 1037, column: 8, scope: !4283)
!4285 = !DILocation(line: 1037, column: 15, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4283, file: !3, line: 1037, column: 3)
!4287 = !DILocation(line: 1037, column: 3, scope: !4283)
!4288 = !DILocation(line: 1038, column: 9, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 1038, column: 9)
!4290 = !DILocation(line: 1038, column: 43, scope: !4289)
!4291 = !DILocation(line: 1038, column: 48, scope: !4289)
!4292 = !DILocation(line: 1038, column: 16, scope: !4289)
!4293 = !DILocation(line: 1038, column: 13, scope: !4289)
!4294 = !DILocation(line: 1038, column: 9, scope: !4286)
!4295 = !DILocation(line: 1039, column: 7, scope: !4289)
!4296 = !DILocation(line: 1038, column: 57, scope: !4289)
!4297 = !DILocation(line: 1037, column: 64, scope: !4286)
!4298 = !DILocation(line: 1037, column: 3, scope: !4286)
!4299 = distinct !{!4299, !4287, !4300}
!4300 = !DILocation(line: 1039, column: 14, scope: !4283)
!4301 = !DILocation(line: 1041, column: 3, scope: !4267)
!4302 = !DILocation(line: 1042, column: 1, scope: !4267)
!4303 = distinct !DISubprogram(name: "generate_code_for_partition", scope: !3, file: !3, line: 445, type: !4304, scopeLine: 446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4304 = !DISubroutineType(types: !4305)
!4305 = !{!1815, !1635, !1552, !1815}
!4306 = !DILocalVariable(name: "loop", arg: 1, scope: !4303, file: !3, line: 445, type: !1635)
!4307 = !DILocation(line: 445, column: 43, scope: !4303)
!4308 = !DILocalVariable(name: "partition", arg: 2, scope: !4303, file: !3, line: 445, type: !1552)
!4309 = !DILocation(line: 445, column: 56, scope: !4303)
!4310 = !DILocalVariable(name: "copy_p", arg: 3, scope: !4303, file: !3, line: 445, type: !1815)
!4311 = !DILocation(line: 445, column: 72, scope: !4303)
!4312 = !DILocation(line: 447, column: 25, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 447, column: 7)
!4314 = !DILocation(line: 447, column: 31, scope: !4313)
!4315 = !DILocation(line: 447, column: 42, scope: !4313)
!4316 = !DILocation(line: 447, column: 7, scope: !4313)
!4317 = !DILocation(line: 447, column: 7, scope: !4303)
!4318 = !DILocation(line: 448, column: 5, scope: !4313)
!4319 = !DILocation(line: 450, column: 40, scope: !4303)
!4320 = !DILocation(line: 450, column: 46, scope: !4303)
!4321 = !DILocation(line: 450, column: 57, scope: !4303)
!4322 = !DILocation(line: 450, column: 10, scope: !4303)
!4323 = !DILocation(line: 450, column: 3, scope: !4303)
!4324 = !DILocation(line: 451, column: 1, scope: !4303)
!4325 = distinct !DISubprogram(name: "VEC_bitmap_heap_free", scope: !579, file: !579, line: 607, type: !4326, scopeLine: 607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4326 = !DISubroutineType(types: !4327)
!4327 = !{null, !4132}
!4328 = !DILocalVariable(name: "vec_", arg: 1, scope: !4325, file: !579, line: 607, type: !4132)
!4329 = !DILocation(line: 607, column: 1, scope: !4325)
!4330 = !DILocation(line: 607, column: 1, scope: !4331)
!4331 = distinct !DILexicalBlock(scope: !4325, file: !579, line: 607, column: 1)
!4332 = distinct !DISubprogram(name: "free_rdg_components", scope: !3, file: !3, line: 841, type: !4333, scopeLine: 842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4333 = !DISubroutineType(types: !4334)
!4334 = !{null, !2935}
!4335 = !DILocalVariable(name: "components", arg: 1, scope: !4332, file: !3, line: 841, type: !2935)
!4336 = !DILocation(line: 841, column: 40, scope: !4332)
!4337 = !DILocalVariable(name: "i", scope: !4332, file: !3, line: 843, type: !1605)
!4338 = !DILocation(line: 843, column: 7, scope: !4332)
!4339 = !DILocalVariable(name: "x", scope: !4332, file: !3, line: 844, type: !2947)
!4340 = !DILocation(line: 844, column: 8, scope: !4332)
!4341 = !DILocation(line: 846, column: 10, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4332, file: !3, line: 846, column: 3)
!4343 = !DILocation(line: 846, column: 8, scope: !4342)
!4344 = !DILocation(line: 846, column: 15, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 846, column: 3)
!4346 = !DILocation(line: 846, column: 3, scope: !4342)
!4347 = !DILocation(line: 848, column: 7, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4345, file: !3, line: 847, column: 5)
!4349 = !DILocation(line: 849, column: 13, scope: !4348)
!4350 = !DILocation(line: 849, column: 7, scope: !4348)
!4351 = !DILocation(line: 850, column: 5, scope: !4348)
!4352 = !DILocation(line: 846, column: 54, scope: !4345)
!4353 = !DILocation(line: 846, column: 3, scope: !4345)
!4354 = distinct !{!4354, !4346, !4355}
!4355 = !DILocation(line: 850, column: 5, scope: !4342)
!4356 = !DILocation(line: 851, column: 1, scope: !4332)
!4357 = distinct !DISubprogram(name: "predecessor_has_mem_write", scope: !3, file: !3, line: 495, type: !4358, scopeLine: 496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4358 = !DISubroutineType(types: !4359)
!4359 = !{!1815, !3476, !3482}
!4360 = !DILocalVariable(name: "rdg", arg: 1, scope: !4357, file: !3, line: 495, type: !3476)
!4361 = !DILocation(line: 495, column: 42, scope: !4357)
!4362 = !DILocalVariable(name: "v", arg: 2, scope: !4357, file: !3, line: 495, type: !3482)
!4363 = !DILocation(line: 495, column: 62, scope: !4357)
!4364 = !DILocalVariable(name: "e", scope: !4357, file: !3, line: 497, type: !3486)
!4365 = !DILocation(line: 497, column: 22, scope: !4357)
!4366 = !DILocation(line: 499, column: 7, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 499, column: 7)
!4368 = !DILocation(line: 499, column: 10, scope: !4367)
!4369 = !DILocation(line: 499, column: 7, scope: !4357)
!4370 = !DILocation(line: 500, column: 14, scope: !4371)
!4371 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 500, column: 5)
!4372 = !DILocation(line: 500, column: 17, scope: !4371)
!4373 = !DILocation(line: 500, column: 12, scope: !4371)
!4374 = !DILocation(line: 500, column: 10, scope: !4371)
!4375 = !DILocation(line: 500, column: 23, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4371, file: !3, line: 500, column: 5)
!4377 = !DILocation(line: 500, column: 5, scope: !4371)
!4378 = !DILocation(line: 501, column: 25, scope: !4379)
!4379 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 501, column: 11)
!4380 = !DILocation(line: 501, column: 46, scope: !4379)
!4381 = !DILocation(line: 501, column: 49, scope: !4379)
!4382 = !DILocation(line: 501, column: 11, scope: !4379)
!4383 = !DILocation(line: 505, column: 4, scope: !4379)
!4384 = !DILocation(line: 505, column: 8, scope: !4379)
!4385 = !DILocation(line: 501, column: 11, scope: !4376)
!4386 = !DILocation(line: 506, column: 2, scope: !4379)
!4387 = !DILocation(line: 500, column: 30, scope: !4376)
!4388 = !DILocation(line: 500, column: 33, scope: !4376)
!4389 = !DILocation(line: 500, column: 28, scope: !4376)
!4390 = !DILocation(line: 500, column: 5, scope: !4376)
!4391 = distinct !{!4391, !4377, !4392}
!4392 = !DILocation(line: 506, column: 9, scope: !4371)
!4393 = !DILocation(line: 508, column: 3, scope: !4357)
!4394 = !DILocation(line: 509, column: 1, scope: !4357)
!4395 = distinct !DISubprogram(name: "has_anti_dependence", scope: !3, file: !3, line: 480, type: !4396, scopeLine: 481, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4396 = !DISubroutineType(types: !4397)
!4397 = !{!3486, !3482}
!4398 = !DILocalVariable(name: "v", arg: 1, scope: !4395, file: !3, line: 480, type: !3482)
!4399 = !DILocation(line: 480, column: 37, scope: !4395)
!4400 = !DILocalVariable(name: "e", scope: !4395, file: !3, line: 482, type: !3486)
!4401 = !DILocation(line: 482, column: 22, scope: !4395)
!4402 = !DILocation(line: 484, column: 7, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 484, column: 7)
!4404 = !DILocation(line: 484, column: 10, scope: !4403)
!4405 = !DILocation(line: 484, column: 7, scope: !4395)
!4406 = !DILocation(line: 485, column: 14, scope: !4407)
!4407 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 485, column: 5)
!4408 = !DILocation(line: 485, column: 17, scope: !4407)
!4409 = !DILocation(line: 485, column: 12, scope: !4407)
!4410 = !DILocation(line: 485, column: 10, scope: !4407)
!4411 = !DILocation(line: 485, column: 23, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 485, column: 5)
!4413 = !DILocation(line: 485, column: 5, scope: !4407)
!4414 = !DILocation(line: 486, column: 11, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 486, column: 11)
!4416 = !DILocation(line: 486, column: 25, scope: !4415)
!4417 = !DILocation(line: 486, column: 11, scope: !4412)
!4418 = !DILocation(line: 487, column: 9, scope: !4415)
!4419 = !DILocation(line: 487, column: 2, scope: !4415)
!4420 = !DILocation(line: 486, column: 28, scope: !4415)
!4421 = !DILocation(line: 485, column: 30, scope: !4412)
!4422 = !DILocation(line: 485, column: 33, scope: !4412)
!4423 = !DILocation(line: 485, column: 28, scope: !4412)
!4424 = !DILocation(line: 485, column: 5, scope: !4412)
!4425 = distinct !{!4425, !4413, !4426}
!4426 = !DILocation(line: 487, column: 9, scope: !4407)
!4427 = !DILocation(line: 489, column: 3, scope: !4395)
!4428 = !DILocation(line: 490, column: 1, scope: !4395)
!4429 = distinct !DISubprogram(name: "VEC_rdgc_heap_safe_push", scope: !579, file: !579, line: 604, type: !4430, scopeLine: 604, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4430 = !DISubroutineType(types: !4431)
!4431 = !{!4432, !4014, !2947}
!4432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2947, size: 64)
!4433 = !DILocalVariable(name: "vec_", arg: 1, scope: !4429, file: !579, line: 604, type: !4014)
!4434 = !DILocation(line: 604, column: 1, scope: !4429)
!4435 = !DILocalVariable(name: "obj_", arg: 2, scope: !4429, file: !579, line: 604, type: !2947)
!4436 = distinct !DISubprogram(name: "VEC_rdgc_heap_reserve", scope: !579, file: !579, line: 604, type: !4437, scopeLine: 604, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4437 = !DISubroutineType(types: !4438)
!4438 = !{!1605, !4014, !1605}
!4439 = !DILocalVariable(name: "vec_", arg: 1, scope: !4436, file: !579, line: 604, type: !4014)
!4440 = !DILocation(line: 604, column: 1, scope: !4436)
!4441 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4436, file: !579, line: 604, type: !1605)
!4442 = !DILocalVariable(name: "extend", scope: !4436, file: !579, line: 604, type: !1605)
!4443 = !DILocation(line: 604, column: 1, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4436, file: !579, line: 604, column: 1)
!4445 = distinct !DISubprogram(name: "VEC_rdgc_base_quick_push", scope: !579, file: !579, line: 603, type: !4446, scopeLine: 603, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4446 = !DISubroutineType(types: !4447)
!4447 = !{!4432, !4448, !2947}
!4448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2940, size: 64)
!4449 = !DILocalVariable(name: "vec_", arg: 1, scope: !4445, file: !579, line: 603, type: !4448)
!4450 = !DILocation(line: 603, column: 1, scope: !4445)
!4451 = !DILocalVariable(name: "obj_", arg: 2, scope: !4445, file: !579, line: 603, type: !2947)
!4452 = !DILocalVariable(name: "slot_", scope: !4445, file: !579, line: 603, type: !4432)
!4453 = distinct !DISubprogram(name: "VEC_rdgc_base_space", scope: !579, file: !579, line: 603, type: !4454, scopeLine: 603, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4454 = !DISubroutineType(types: !4455)
!4455 = !{!1605, !4448, !1605}
!4456 = !DILocalVariable(name: "vec_", arg: 1, scope: !4453, file: !579, line: 603, type: !4448)
!4457 = !DILocation(line: 603, column: 1, scope: !4453)
!4458 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4453, file: !579, line: 603, type: !1605)
!4459 = distinct !DISubprogram(name: "VEC_rdgc_base_iterate", scope: !579, file: !579, line: 603, type: !4460, scopeLine: 603, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4460 = !DISubroutineType(types: !4461)
!4461 = !{!1605, !4462, !7, !4432}
!4462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4463, size: 64)
!4463 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2940)
!4464 = !DILocalVariable(name: "vec_", arg: 1, scope: !4459, file: !579, line: 603, type: !4462)
!4465 = !DILocation(line: 603, column: 1, scope: !4459)
!4466 = !DILocalVariable(name: "ix_", arg: 2, scope: !4459, file: !579, line: 603, type: !7)
!4467 = !DILocalVariable(name: "ptr", arg: 3, scope: !4459, file: !579, line: 603, type: !4432)
!4468 = !DILocation(line: 603, column: 1, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4459, file: !579, line: 603, column: 1)
!4470 = !DILocation(line: 603, column: 1, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4469, file: !579, line: 603, column: 1)
!4472 = !DILocation(line: 603, column: 1, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4469, file: !579, line: 603, column: 1)
!4474 = distinct !DISubprogram(name: "VEC_int_base_index", scope: !1621, file: !1621, line: 31, type: !4475, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4475 = !DISubroutineType(types: !4476)
!4476 = !{!1605, !3916, !7}
!4477 = !DILocalVariable(name: "vec_", arg: 1, scope: !4474, file: !1621, line: 31, type: !3916)
!4478 = !DILocation(line: 31, column: 1, scope: !4474)
!4479 = !DILocalVariable(name: "ix_", arg: 2, scope: !4474, file: !1621, line: 31, type: !7)
!4480 = !DILocation(line: 0, scope: !4474)
!4481 = distinct !DISubprogram(name: "build_rdg_partition_for_component", scope: !3, file: !3, line: 810, type: !4482, scopeLine: 813, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4482 = !DISubroutineType(types: !4483)
!4483 = !{!1552, !3476, !2947, !4484, !3077}
!4484 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1815, size: 64)
!4485 = !DILocalVariable(name: "rdg", arg: 1, scope: !4481, file: !3, line: 810, type: !3476)
!4486 = !DILocation(line: 810, column: 50, scope: !4481)
!4487 = !DILocalVariable(name: "c", arg: 2, scope: !4481, file: !3, line: 810, type: !2947)
!4488 = !DILocation(line: 810, column: 60, scope: !4481)
!4489 = !DILocalVariable(name: "part_has_writes", arg: 3, scope: !4481, file: !3, line: 811, type: !4484)
!4490 = !DILocation(line: 811, column: 14, scope: !4481)
!4491 = !DILocalVariable(name: "other_stores", arg: 4, scope: !4481, file: !3, line: 812, type: !3077)
!4492 = !DILocation(line: 812, column: 26, scope: !4481)
!4493 = !DILocalVariable(name: "i", scope: !4481, file: !3, line: 814, type: !1605)
!4494 = !DILocation(line: 814, column: 7, scope: !4481)
!4495 = !DILocalVariable(name: "v", scope: !4481, file: !3, line: 814, type: !1605)
!4496 = !DILocation(line: 814, column: 10, scope: !4481)
!4497 = !DILocalVariable(name: "partition", scope: !4481, file: !3, line: 815, type: !1552)
!4498 = !DILocation(line: 815, column: 10, scope: !4481)
!4499 = !DILocation(line: 815, column: 22, scope: !4481)
!4500 = !DILocalVariable(name: "loops", scope: !4481, file: !3, line: 816, type: !1552)
!4501 = !DILocation(line: 816, column: 10, scope: !4481)
!4502 = !DILocation(line: 816, column: 18, scope: !4481)
!4503 = !DILocalVariable(name: "processed", scope: !4481, file: !3, line: 817, type: !1552)
!4504 = !DILocation(line: 817, column: 10, scope: !4481)
!4505 = !DILocation(line: 817, column: 22, scope: !4481)
!4506 = !DILocation(line: 819, column: 10, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4481, file: !3, line: 819, column: 3)
!4508 = !DILocation(line: 819, column: 8, scope: !4507)
!4509 = !DILocation(line: 819, column: 15, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4507, file: !3, line: 819, column: 3)
!4511 = !DILocation(line: 819, column: 3, scope: !4507)
!4512 = !DILocation(line: 820, column: 38, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 820, column: 9)
!4514 = !DILocation(line: 820, column: 49, scope: !4513)
!4515 = !DILocation(line: 820, column: 10, scope: !4513)
!4516 = !DILocation(line: 820, column: 9, scope: !4510)
!4517 = !DILocation(line: 821, column: 38, scope: !4513)
!4518 = !DILocation(line: 821, column: 43, scope: !4513)
!4519 = !DILocation(line: 821, column: 46, scope: !4513)
!4520 = !DILocation(line: 821, column: 57, scope: !4513)
!4521 = !DILocation(line: 821, column: 64, scope: !4513)
!4522 = !DILocation(line: 822, column: 10, scope: !4513)
!4523 = !DILocation(line: 821, column: 7, scope: !4513)
!4524 = !DILocation(line: 820, column: 50, scope: !4513)
!4525 = !DILocation(line: 819, column: 54, scope: !4510)
!4526 = !DILocation(line: 819, column: 3, scope: !4510)
!4527 = distinct !{!4527, !4511, !4528}
!4528 = !DILocation(line: 822, column: 25, scope: !4507)
!4529 = !DILocation(line: 828, column: 37, scope: !4481)
!4530 = !DILocation(line: 828, column: 42, scope: !4481)
!4531 = !DILocation(line: 828, column: 53, scope: !4481)
!4532 = !DILocation(line: 828, column: 60, scope: !4481)
!4533 = !DILocation(line: 829, column: 9, scope: !4481)
!4534 = !DILocation(line: 828, column: 3, scope: !4481)
!4535 = !DILocation(line: 831, column: 24, scope: !4481)
!4536 = !DILocation(line: 831, column: 29, scope: !4481)
!4537 = !DILocation(line: 831, column: 36, scope: !4481)
!4538 = !DILocation(line: 831, column: 47, scope: !4481)
!4539 = !DILocation(line: 831, column: 58, scope: !4481)
!4540 = !DILocation(line: 831, column: 3, scope: !4481)
!4541 = !DILocation(line: 833, column: 3, scope: !4481)
!4542 = !DILocation(line: 834, column: 3, scope: !4481)
!4543 = !DILocation(line: 835, column: 10, scope: !4481)
!4544 = !DILocation(line: 835, column: 3, scope: !4481)
!4545 = distinct !DISubprogram(name: "VEC_bitmap_heap_safe_push", scope: !579, file: !579, line: 607, type: !4546, scopeLine: 607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4546 = !DISubroutineType(types: !4547)
!4547 = !{!3267, !4132, !1552}
!4548 = !DILocalVariable(name: "vec_", arg: 1, scope: !4545, file: !579, line: 607, type: !4132)
!4549 = !DILocation(line: 607, column: 1, scope: !4545)
!4550 = !DILocalVariable(name: "obj_", arg: 2, scope: !4545, file: !579, line: 607, type: !1552)
!4551 = distinct !DISubprogram(name: "VEC_int_base_length", scope: !1621, file: !1621, line: 31, type: !4552, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4552 = !DISubroutineType(types: !4553)
!4553 = !{!7, !3916}
!4554 = !DILocalVariable(name: "vec_", arg: 1, scope: !4551, file: !1621, line: 31, type: !3916)
!4555 = !DILocation(line: 31, column: 1, scope: !4551)
!4556 = distinct !DISubprogram(name: "already_processed_vertex_p", scope: !3, file: !3, line: 470, type: !4557, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4557 = !DISubroutineType(types: !4558)
!4558 = !{!1815, !1552, !1605}
!4559 = !DILocalVariable(name: "processed", arg: 1, scope: !4556, file: !3, line: 470, type: !1552)
!4560 = !DILocation(line: 470, column: 36, scope: !4556)
!4561 = !DILocalVariable(name: "v", arg: 2, scope: !4556, file: !3, line: 470, type: !1605)
!4562 = !DILocation(line: 470, column: 51, scope: !4556)
!4563 = !DILocation(line: 472, column: 25, scope: !4556)
!4564 = !DILocation(line: 472, column: 36, scope: !4556)
!4565 = !DILocation(line: 472, column: 11, scope: !4556)
!4566 = !DILocation(line: 473, column: 4, scope: !4556)
!4567 = !DILocation(line: 473, column: 22, scope: !4556)
!4568 = !DILocation(line: 473, column: 39, scope: !4556)
!4569 = !DILocation(line: 473, column: 8, scope: !4556)
!4570 = !DILocation(line: 473, column: 7, scope: !4556)
!4571 = !DILocation(line: 472, column: 10, scope: !4556)
!4572 = !DILocation(line: 472, column: 3, scope: !4556)
!4573 = distinct !DISubprogram(name: "rdg_flag_vertex_and_dependent", scope: !3, file: !3, line: 673, type: !4574, scopeLine: 676, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4574 = !DISubroutineType(types: !4575)
!4575 = !{null, !3476, !1605, !1552, !1552, !1552, !4484}
!4576 = !DILocalVariable(name: "rdg", arg: 1, scope: !4573, file: !3, line: 673, type: !3476)
!4577 = !DILocation(line: 673, column: 46, scope: !4573)
!4578 = !DILocalVariable(name: "v", arg: 2, scope: !4573, file: !3, line: 673, type: !1605)
!4579 = !DILocation(line: 673, column: 55, scope: !4573)
!4580 = !DILocalVariable(name: "partition", arg: 3, scope: !4573, file: !3, line: 673, type: !1552)
!4581 = !DILocation(line: 673, column: 65, scope: !4573)
!4582 = !DILocalVariable(name: "loops", arg: 4, scope: !4573, file: !3, line: 674, type: !1552)
!4583 = !DILocation(line: 674, column: 18, scope: !4573)
!4584 = !DILocalVariable(name: "processed", arg: 5, scope: !4573, file: !3, line: 674, type: !1552)
!4585 = !DILocation(line: 674, column: 32, scope: !4573)
!4586 = !DILocalVariable(name: "part_has_writes", arg: 6, scope: !4573, file: !3, line: 675, type: !4484)
!4587 = !DILocation(line: 675, column: 17, scope: !4573)
!4588 = !DILocalVariable(name: "i", scope: !4573, file: !3, line: 677, type: !7)
!4589 = !DILocation(line: 677, column: 12, scope: !4573)
!4590 = !DILocalVariable(name: "nodes", scope: !4573, file: !3, line: 678, type: !1619)
!4591 = !DILocation(line: 678, column: 20, scope: !4573)
!4592 = !DILocation(line: 678, column: 28, scope: !4573)
!4593 = !DILocalVariable(name: "x", scope: !4573, file: !3, line: 679, type: !1605)
!4594 = !DILocation(line: 679, column: 7, scope: !4573)
!4595 = !DILocation(line: 681, column: 19, scope: !4573)
!4596 = !DILocation(line: 681, column: 30, scope: !4573)
!4597 = !DILocation(line: 681, column: 3, scope: !4573)
!4598 = !DILocation(line: 682, column: 18, scope: !4573)
!4599 = !DILocation(line: 682, column: 23, scope: !4573)
!4600 = !DILocation(line: 682, column: 26, scope: !4573)
!4601 = !DILocation(line: 682, column: 37, scope: !4573)
!4602 = !DILocation(line: 682, column: 44, scope: !4573)
!4603 = !DILocation(line: 682, column: 55, scope: !4573)
!4604 = !DILocation(line: 682, column: 3, scope: !4573)
!4605 = !DILocation(line: 683, column: 16, scope: !4573)
!4606 = !DILocation(line: 683, column: 43, scope: !4573)
!4607 = !DILocation(line: 683, column: 3, scope: !4573)
!4608 = !DILocation(line: 684, column: 20, scope: !4573)
!4609 = !DILocation(line: 684, column: 25, scope: !4573)
!4610 = !DILocation(line: 684, column: 28, scope: !4573)
!4611 = !DILocation(line: 684, column: 39, scope: !4573)
!4612 = !DILocation(line: 684, column: 46, scope: !4573)
!4613 = !DILocation(line: 684, column: 3, scope: !4573)
!4614 = !DILocation(line: 686, column: 10, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4573, file: !3, line: 686, column: 3)
!4616 = !DILocation(line: 686, column: 8, scope: !4615)
!4617 = !DILocation(line: 686, column: 15, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 686, column: 3)
!4619 = !DILocation(line: 686, column: 3, scope: !4615)
!4620 = !DILocation(line: 687, column: 38, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 687, column: 9)
!4622 = !DILocation(line: 687, column: 49, scope: !4621)
!4623 = !DILocation(line: 687, column: 10, scope: !4621)
!4624 = !DILocation(line: 687, column: 9, scope: !4618)
!4625 = !DILocation(line: 688, column: 38, scope: !4621)
!4626 = !DILocation(line: 688, column: 43, scope: !4621)
!4627 = !DILocation(line: 688, column: 46, scope: !4621)
!4628 = !DILocation(line: 688, column: 57, scope: !4621)
!4629 = !DILocation(line: 688, column: 64, scope: !4621)
!4630 = !DILocation(line: 689, column: 10, scope: !4621)
!4631 = !DILocation(line: 688, column: 7, scope: !4621)
!4632 = !DILocation(line: 687, column: 50, scope: !4621)
!4633 = !DILocation(line: 686, column: 48, scope: !4618)
!4634 = !DILocation(line: 686, column: 3, scope: !4618)
!4635 = distinct !{!4635, !4619, !4636}
!4636 = !DILocation(line: 689, column: 25, scope: !4615)
!4637 = !DILocation(line: 691, column: 3, scope: !4573)
!4638 = !DILocation(line: 692, column: 1, scope: !4573)
!4639 = distinct !DISubprogram(name: "rdg_flag_similar_memory_accesses", scope: !3, file: !3, line: 756, type: !4640, scopeLine: 759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4640 = !DISubroutineType(types: !4641)
!4641 = !{null, !3476, !1552, !1552, !1552, !3077}
!4642 = !DILocalVariable(name: "rdg", arg: 1, scope: !4639, file: !3, line: 756, type: !3476)
!4643 = !DILocation(line: 756, column: 49, scope: !4639)
!4644 = !DILocalVariable(name: "partition", arg: 2, scope: !4639, file: !3, line: 756, type: !1552)
!4645 = !DILocation(line: 756, column: 61, scope: !4639)
!4646 = !DILocalVariable(name: "loops", arg: 3, scope: !4639, file: !3, line: 757, type: !1552)
!4647 = !DILocation(line: 757, column: 14, scope: !4639)
!4648 = !DILocalVariable(name: "processed", arg: 4, scope: !4639, file: !3, line: 757, type: !1552)
!4649 = !DILocation(line: 757, column: 28, scope: !4639)
!4650 = !DILocalVariable(name: "other_stores", arg: 5, scope: !4639, file: !3, line: 758, type: !3077)
!4651 = !DILocation(line: 758, column: 25, scope: !4639)
!4652 = !DILocalVariable(name: "foo", scope: !4639, file: !3, line: 760, type: !1815)
!4653 = !DILocation(line: 760, column: 8, scope: !4639)
!4654 = !DILocalVariable(name: "i", scope: !4639, file: !3, line: 761, type: !7)
!4655 = !DILocation(line: 761, column: 12, scope: !4639)
!4656 = !DILocalVariable(name: "n", scope: !4639, file: !3, line: 761, type: !7)
!4657 = !DILocation(line: 761, column: 15, scope: !4639)
!4658 = !DILocalVariable(name: "j", scope: !4639, file: !3, line: 762, type: !1605)
!4659 = !DILocation(line: 762, column: 7, scope: !4639)
!4660 = !DILocalVariable(name: "k", scope: !4639, file: !3, line: 762, type: !1605)
!4661 = !DILocation(line: 762, column: 10, scope: !4639)
!4662 = !DILocalVariable(name: "kk", scope: !4639, file: !3, line: 762, type: !1605)
!4663 = !DILocation(line: 762, column: 13, scope: !4639)
!4664 = !DILocalVariable(name: "ii", scope: !4639, file: !3, line: 763, type: !4665)
!4665 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1556, line: 218, baseType: !4666)
!4666 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1556, line: 203, size: 256, elements: !4667)
!4667 = !{!4668, !4669, !4670, !4671}
!4668 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !4666, file: !1556, line: 206, baseType: !1559, size: 64)
!4669 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !4666, file: !1556, line: 209, baseType: !1559, size: 64, offset: 64)
!4670 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !4666, file: !1556, line: 212, baseType: !7, size: 32, offset: 128)
!4671 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !4666, file: !1556, line: 217, baseType: !1569, size: 64, offset: 192)
!4672 = !DILocation(line: 763, column: 19, scope: !4639)
!4673 = !DILocalVariable(name: "e", scope: !4639, file: !3, line: 764, type: !3486)
!4674 = !DILocation(line: 764, column: 22, scope: !4639)
!4675 = !DILocation(line: 766, column: 3, scope: !4676)
!4676 = distinct !DILexicalBlock(scope: !4639, file: !3, line: 766, column: 3)
!4677 = !DILocation(line: 766, column: 3, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4676, file: !3, line: 766, column: 3)
!4679 = !DILocation(line: 767, column: 9, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4678, file: !3, line: 767, column: 9)
!4681 = !DILocation(line: 768, column: 2, scope: !4680)
!4682 = !DILocation(line: 768, column: 5, scope: !4680)
!4683 = !DILocation(line: 767, column: 9, scope: !4678)
!4684 = !DILocation(line: 770, column: 9, scope: !4685)
!4685 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 770, column: 2)
!4686 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 769, column: 7)
!4687 = !DILocation(line: 770, column: 7, scope: !4685)
!4688 = !DILocation(line: 770, column: 14, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4685, file: !3, line: 770, column: 2)
!4690 = !DILocation(line: 770, column: 18, scope: !4689)
!4691 = !DILocation(line: 770, column: 23, scope: !4689)
!4692 = !DILocation(line: 770, column: 16, scope: !4689)
!4693 = !DILocation(line: 770, column: 2, scope: !4685)
!4694 = !DILocation(line: 771, column: 23, scope: !4695)
!4695 = distinct !DILexicalBlock(scope: !4689, file: !3, line: 771, column: 8)
!4696 = !DILocation(line: 771, column: 34, scope: !4695)
!4697 = !DILocation(line: 771, column: 9, scope: !4695)
!4698 = !DILocation(line: 772, column: 8, scope: !4695)
!4699 = !DILocation(line: 772, column: 12, scope: !4695)
!4700 = !DILocation(line: 773, column: 5, scope: !4695)
!4701 = !DILocation(line: 773, column: 8, scope: !4695)
!4702 = !DILocation(line: 774, column: 8, scope: !4695)
!4703 = !DILocation(line: 774, column: 44, scope: !4695)
!4704 = !DILocation(line: 774, column: 49, scope: !4695)
!4705 = !DILocation(line: 774, column: 52, scope: !4695)
!4706 = !DILocation(line: 774, column: 11, scope: !4695)
!4707 = !DILocation(line: 771, column: 8, scope: !4689)
!4708 = !DILocation(line: 778, column: 39, scope: !4709)
!4709 = distinct !DILexicalBlock(scope: !4695, file: !3, line: 775, column: 6)
!4710 = !DILocation(line: 778, column: 44, scope: !4709)
!4711 = !DILocation(line: 778, column: 47, scope: !4709)
!4712 = !DILocation(line: 778, column: 58, scope: !4709)
!4713 = !DILocation(line: 779, column: 11, scope: !4709)
!4714 = !DILocation(line: 778, column: 8, scope: !4709)
!4715 = !DILocation(line: 784, column: 27, scope: !4709)
!4716 = !DILocation(line: 784, column: 32, scope: !4709)
!4717 = !DILocation(line: 784, column: 35, scope: !4709)
!4718 = !DILocation(line: 784, column: 46, scope: !4709)
!4719 = !DILocation(line: 784, column: 53, scope: !4709)
!4720 = !DILocation(line: 784, column: 8, scope: !4709)
!4721 = !DILocation(line: 787, column: 12, scope: !4722)
!4722 = distinct !DILexicalBlock(scope: !4709, file: !3, line: 787, column: 12)
!4723 = !DILocation(line: 787, column: 12, scope: !4709)
!4724 = !DILocation(line: 788, column: 10, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4722, file: !3, line: 788, column: 3)
!4726 = !DILocation(line: 788, column: 8, scope: !4725)
!4727 = !DILocation(line: 788, column: 15, scope: !4728)
!4728 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 788, column: 3)
!4729 = !DILocation(line: 788, column: 3, scope: !4725)
!4730 = !DILocation(line: 789, column: 9, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4728, file: !3, line: 789, column: 9)
!4732 = !DILocation(line: 789, column: 15, scope: !4731)
!4733 = !DILocation(line: 789, column: 12, scope: !4731)
!4734 = !DILocation(line: 789, column: 9, scope: !4728)
!4735 = !DILocation(line: 791, column: 9, scope: !4736)
!4736 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 790, column: 7)
!4737 = !DILocation(line: 792, column: 9, scope: !4736)
!4738 = !DILocation(line: 788, column: 57, scope: !4728)
!4739 = !DILocation(line: 788, column: 3, scope: !4728)
!4740 = distinct !{!4740, !4729, !4741}
!4741 = !DILocation(line: 793, column: 7, scope: !4725)
!4742 = !DILocation(line: 794, column: 6, scope: !4709)
!4743 = !DILocation(line: 774, column: 53, scope: !4695)
!4744 = !DILocation(line: 770, column: 36, scope: !4689)
!4745 = !DILocation(line: 770, column: 2, scope: !4689)
!4746 = distinct !{!4746, !4693, !4747}
!4747 = !DILocation(line: 794, column: 6, scope: !4685)
!4748 = !DILocation(line: 798, column: 9, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 798, column: 2)
!4750 = !DILocation(line: 798, column: 18, scope: !4749)
!4751 = !DILocation(line: 798, column: 23, scope: !4749)
!4752 = !DILocation(line: 798, column: 32, scope: !4749)
!4753 = !DILocation(line: 798, column: 35, scope: !4749)
!4754 = !DILocation(line: 798, column: 16, scope: !4749)
!4755 = !DILocation(line: 798, column: 7, scope: !4749)
!4756 = !DILocation(line: 798, column: 41, scope: !4757)
!4757 = distinct !DILexicalBlock(scope: !4749, file: !3, line: 798, column: 2)
!4758 = !DILocation(line: 798, column: 2, scope: !4749)
!4759 = !DILocation(line: 798, column: 48, scope: !4757)
!4760 = !DILocation(line: 798, column: 51, scope: !4757)
!4761 = !DILocation(line: 798, column: 46, scope: !4757)
!4762 = !DILocation(line: 798, column: 63, scope: !4757)
!4763 = !DILocation(line: 798, column: 2, scope: !4757)
!4764 = distinct !{!4764, !4758, !4765}
!4765 = !DILocation(line: 798, column: 66, scope: !4749)
!4766 = !DILocation(line: 800, column: 6, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 800, column: 6)
!4768 = !DILocation(line: 800, column: 8, scope: !4767)
!4769 = !DILocation(line: 800, column: 6, scope: !4686)
!4770 = !DILocation(line: 801, column: 23, scope: !4767)
!4771 = !DILocation(line: 801, column: 28, scope: !4767)
!4772 = !DILocation(line: 801, column: 31, scope: !4767)
!4773 = !DILocation(line: 801, column: 42, scope: !4767)
!4774 = !DILocation(line: 801, column: 49, scope: !4767)
!4775 = !DILocation(line: 801, column: 4, scope: !4767)
!4776 = !DILocation(line: 802, column: 7, scope: !4686)
!4777 = distinct !{!4777, !4675, !4778}
!4778 = !DILocation(line: 802, column: 7, scope: !4676)
!4779 = !DILocation(line: 803, column: 1, scope: !4639)
!4780 = distinct !DISubprogram(name: "rdg_flag_loop_exits", scope: !3, file: !3, line: 720, type: !4781, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4781 = !DISubroutineType(types: !4782)
!4782 = !{null, !3476, !1552, !1552, !1552, !4484}
!4783 = !DILocalVariable(name: "rdg", arg: 1, scope: !4780, file: !3, line: 720, type: !3476)
!4784 = !DILocation(line: 720, column: 36, scope: !4780)
!4785 = !DILocalVariable(name: "loops", arg: 2, scope: !4780, file: !3, line: 720, type: !1552)
!4786 = !DILocation(line: 720, column: 48, scope: !4780)
!4787 = !DILocalVariable(name: "partition", arg: 3, scope: !4780, file: !3, line: 720, type: !1552)
!4788 = !DILocation(line: 720, column: 62, scope: !4780)
!4789 = !DILocalVariable(name: "processed", arg: 4, scope: !4780, file: !3, line: 721, type: !1552)
!4790 = !DILocation(line: 721, column: 15, scope: !4780)
!4791 = !DILocalVariable(name: "part_has_writes", arg: 5, scope: !4780, file: !3, line: 721, type: !4484)
!4792 = !DILocation(line: 721, column: 32, scope: !4780)
!4793 = !DILocalVariable(name: "i", scope: !4780, file: !3, line: 723, type: !7)
!4794 = !DILocation(line: 723, column: 12, scope: !4780)
!4795 = !DILocalVariable(name: "bi", scope: !4780, file: !3, line: 724, type: !4665)
!4796 = !DILocation(line: 724, column: 19, scope: !4780)
!4797 = !DILocalVariable(name: "conds", scope: !4780, file: !3, line: 725, type: !2924)
!4798 = !DILocation(line: 725, column: 23, scope: !4780)
!4799 = !DILocation(line: 725, column: 31, scope: !4780)
!4800 = !DILocation(line: 727, column: 3, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 727, column: 3)
!4802 = !DILocation(line: 727, column: 3, scope: !4803)
!4803 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 727, column: 3)
!4804 = !DILocation(line: 728, column: 40, scope: !4803)
!4805 = !DILocation(line: 728, column: 30, scope: !4803)
!4806 = !DILocation(line: 728, column: 5, scope: !4803)
!4807 = distinct !{!4807, !4800, !4808}
!4808 = !DILocation(line: 728, column: 50, scope: !4801)
!4809 = !DILocation(line: 730, column: 3, scope: !4780)
!4810 = !DILocation(line: 730, column: 11, scope: !4780)
!4811 = !DILocation(line: 730, column: 10, scope: !4780)
!4812 = !DILocalVariable(name: "cond", scope: !4813, file: !3, line: 732, type: !1677)
!4813 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 731, column: 5)
!4814 = !DILocation(line: 732, column: 14, scope: !4813)
!4815 = !DILocation(line: 732, column: 21, scope: !4813)
!4816 = !DILocalVariable(name: "v", scope: !4813, file: !3, line: 733, type: !1605)
!4817 = !DILocation(line: 733, column: 11, scope: !4813)
!4818 = !DILocation(line: 733, column: 36, scope: !4813)
!4819 = !DILocation(line: 733, column: 41, scope: !4813)
!4820 = !DILocation(line: 733, column: 15, scope: !4813)
!4821 = !DILocalVariable(name: "new_loops", scope: !4813, file: !3, line: 734, type: !1552)
!4822 = !DILocation(line: 734, column: 14, scope: !4813)
!4823 = !DILocation(line: 734, column: 26, scope: !4813)
!4824 = !DILocation(line: 736, column: 40, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 736, column: 11)
!4826 = !DILocation(line: 736, column: 51, scope: !4825)
!4827 = !DILocation(line: 736, column: 12, scope: !4825)
!4828 = !DILocation(line: 736, column: 11, scope: !4813)
!4829 = !DILocation(line: 737, column: 33, scope: !4825)
!4830 = !DILocation(line: 737, column: 38, scope: !4825)
!4831 = !DILocation(line: 737, column: 41, scope: !4825)
!4832 = !DILocation(line: 737, column: 52, scope: !4825)
!4833 = !DILocation(line: 737, column: 63, scope: !4825)
!4834 = !DILocation(line: 738, column: 12, scope: !4825)
!4835 = !DILocation(line: 737, column: 2, scope: !4825)
!4836 = !DILocation(line: 740, column: 7, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 740, column: 7)
!4838 = !DILocation(line: 740, column: 7, scope: !4839)
!4839 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 740, column: 7)
!4840 = !DILocation(line: 741, column: 21, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4839, file: !3, line: 741, column: 6)
!4842 = !DILocation(line: 741, column: 28, scope: !4841)
!4843 = !DILocation(line: 741, column: 7, scope: !4841)
!4844 = !DILocation(line: 741, column: 6, scope: !4839)
!4845 = !DILocation(line: 743, column: 22, scope: !4846)
!4846 = distinct !DILexicalBlock(scope: !4841, file: !3, line: 742, column: 4)
!4847 = !DILocation(line: 743, column: 29, scope: !4846)
!4848 = !DILocation(line: 743, column: 6, scope: !4846)
!4849 = !DILocation(line: 744, column: 41, scope: !4846)
!4850 = !DILocation(line: 744, column: 31, scope: !4846)
!4851 = !DILocation(line: 744, column: 6, scope: !4846)
!4852 = !DILocation(line: 745, column: 4, scope: !4846)
!4853 = !DILocation(line: 741, column: 29, scope: !4841)
!4854 = distinct !{!4854, !4836, !4855}
!4855 = !DILocation(line: 745, column: 4, scope: !4837)
!4856 = !DILocation(line: 747, column: 7, scope: !4813)
!4857 = distinct !{!4857, !4809, !4858}
!4858 = !DILocation(line: 748, column: 5, scope: !4780)
!4859 = !DILocation(line: 749, column: 1, scope: !4780)
!4860 = distinct !DISubprogram(name: "rdg_flag_uses", scope: !3, file: !3, line: 584, type: !4574, scopeLine: 586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!4861 = !DILocalVariable(name: "rdg", arg: 1, scope: !4860, file: !3, line: 584, type: !3476)
!4862 = !DILocation(line: 584, column: 30, scope: !4860)
!4863 = !DILocalVariable(name: "u", arg: 2, scope: !4860, file: !3, line: 584, type: !1605)
!4864 = !DILocation(line: 584, column: 39, scope: !4860)
!4865 = !DILocalVariable(name: "partition", arg: 3, scope: !4860, file: !3, line: 584, type: !1552)
!4866 = !DILocation(line: 584, column: 49, scope: !4860)
!4867 = !DILocalVariable(name: "loops", arg: 4, scope: !4860, file: !3, line: 584, type: !1552)
!4868 = !DILocation(line: 584, column: 67, scope: !4860)
!4869 = !DILocalVariable(name: "processed", arg: 5, scope: !4860, file: !3, line: 585, type: !1552)
!4870 = !DILocation(line: 585, column: 16, scope: !4860)
!4871 = !DILocalVariable(name: "part_has_writes", arg: 6, scope: !4860, file: !3, line: 585, type: !4484)
!4872 = !DILocation(line: 585, column: 33, scope: !4860)
!4873 = !DILocalVariable(name: "use_p", scope: !4860, file: !3, line: 587, type: !3078)
!4874 = !DILocation(line: 587, column: 17, scope: !4860)
!4875 = !DILocalVariable(name: "x", scope: !4860, file: !3, line: 588, type: !3482)
!4876 = !DILocation(line: 588, column: 18, scope: !4860)
!4877 = !DILocation(line: 588, column: 24, scope: !4860)
!4878 = !DILocation(line: 588, column: 29, scope: !4860)
!4879 = !DILocation(line: 588, column: 38, scope: !4860)
!4880 = !DILocalVariable(name: "stmt", scope: !4860, file: !3, line: 589, type: !1677)
!4881 = !DILocation(line: 589, column: 10, scope: !4860)
!4882 = !DILocation(line: 589, column: 17, scope: !4860)
!4883 = !DILocalVariable(name: "anti_dep", scope: !4860, file: !3, line: 590, type: !3486)
!4884 = !DILocation(line: 590, column: 22, scope: !4860)
!4885 = !DILocation(line: 590, column: 54, scope: !4860)
!4886 = !DILocation(line: 590, column: 33, scope: !4860)
!4887 = !DILocation(line: 595, column: 7, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4860, file: !3, line: 595, column: 7)
!4889 = !DILocation(line: 595, column: 7, scope: !4860)
!4890 = !DILocalVariable(name: "v", scope: !4891, file: !3, line: 597, type: !1605)
!4891 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 596, column: 5)
!4892 = !DILocation(line: 597, column: 11, scope: !4891)
!4893 = !DILocation(line: 597, column: 15, scope: !4891)
!4894 = !DILocation(line: 597, column: 25, scope: !4891)
!4895 = !DILocation(line: 599, column: 40, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4891, file: !3, line: 599, column: 11)
!4897 = !DILocation(line: 599, column: 51, scope: !4896)
!4898 = !DILocation(line: 599, column: 12, scope: !4896)
!4899 = !DILocation(line: 599, column: 11, scope: !4891)
!4900 = !DILocation(line: 600, column: 33, scope: !4896)
!4901 = !DILocation(line: 600, column: 38, scope: !4896)
!4902 = !DILocation(line: 600, column: 41, scope: !4896)
!4903 = !DILocation(line: 600, column: 52, scope: !4896)
!4904 = !DILocation(line: 601, column: 12, scope: !4896)
!4905 = !DILocation(line: 601, column: 23, scope: !4896)
!4906 = !DILocation(line: 600, column: 2, scope: !4896)
!4907 = !DILocation(line: 602, column: 5, scope: !4891)
!4908 = !DILocation(line: 604, column: 20, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4860, file: !3, line: 604, column: 7)
!4910 = !DILocation(line: 604, column: 7, scope: !4909)
!4911 = !DILocation(line: 604, column: 26, scope: !4909)
!4912 = !DILocation(line: 604, column: 7, scope: !4860)
!4913 = !DILocation(line: 606, column: 36, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4915, file: !3, line: 606, column: 11)
!4915 = distinct !DILexicalBlock(scope: !4909, file: !3, line: 605, column: 5)
!4916 = !DILocation(line: 606, column: 20, scope: !4914)
!4917 = !DILocation(line: 606, column: 18, scope: !4914)
!4918 = !DILocation(line: 606, column: 43, scope: !4914)
!4919 = !DILocation(line: 606, column: 11, scope: !4915)
!4920 = !DILocalVariable(name: "use", scope: !4921, file: !3, line: 608, type: !1702)
!4921 = distinct !DILexicalBlock(scope: !4914, file: !3, line: 607, column: 2)
!4922 = !DILocation(line: 608, column: 9, scope: !4921)
!4923 = !DILocation(line: 608, column: 15, scope: !4921)
!4924 = !DILocation(line: 610, column: 8, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 610, column: 8)
!4926 = !DILocation(line: 610, column: 24, scope: !4925)
!4927 = !DILocation(line: 610, column: 8, scope: !4921)
!4928 = !DILocalVariable(name: "def_stmt", scope: !4929, file: !3, line: 612, type: !1677)
!4929 = distinct !DILexicalBlock(scope: !4925, file: !3, line: 611, column: 6)
!4930 = !DILocation(line: 612, column: 15, scope: !4929)
!4931 = !DILocation(line: 612, column: 26, scope: !4929)
!4932 = !DILocalVariable(name: "v", scope: !4929, file: !3, line: 613, type: !1605)
!4933 = !DILocation(line: 613, column: 12, scope: !4929)
!4934 = !DILocation(line: 613, column: 37, scope: !4929)
!4935 = !DILocation(line: 613, column: 42, scope: !4929)
!4936 = !DILocation(line: 613, column: 16, scope: !4929)
!4937 = !DILocation(line: 615, column: 12, scope: !4938)
!4938 = distinct !DILexicalBlock(scope: !4929, file: !3, line: 615, column: 12)
!4939 = !DILocation(line: 615, column: 14, scope: !4938)
!4940 = !DILocation(line: 616, column: 5, scope: !4938)
!4941 = !DILocation(line: 616, column: 37, scope: !4938)
!4942 = !DILocation(line: 616, column: 48, scope: !4938)
!4943 = !DILocation(line: 616, column: 9, scope: !4938)
!4944 = !DILocation(line: 615, column: 12, scope: !4929)
!4945 = !DILocation(line: 617, column: 34, scope: !4938)
!4946 = !DILocation(line: 617, column: 39, scope: !4938)
!4947 = !DILocation(line: 617, column: 42, scope: !4938)
!4948 = !DILocation(line: 617, column: 53, scope: !4938)
!4949 = !DILocation(line: 618, column: 13, scope: !4938)
!4950 = !DILocation(line: 618, column: 24, scope: !4938)
!4951 = !DILocation(line: 617, column: 3, scope: !4938)
!4952 = !DILocation(line: 619, column: 6, scope: !4929)
!4953 = !DILocation(line: 620, column: 2, scope: !4921)
!4954 = !DILocation(line: 621, column: 5, scope: !4915)
!4955 = !DILocation(line: 623, column: 25, scope: !4956)
!4956 = distinct !DILexicalBlock(scope: !4860, file: !3, line: 623, column: 7)
!4957 = !DILocation(line: 623, column: 7, scope: !4956)
!4958 = !DILocation(line: 623, column: 31, scope: !4956)
!4959 = !DILocation(line: 623, column: 59, scope: !4956)
!4960 = !DILocation(line: 623, column: 34, scope: !4956)
!4961 = !DILocation(line: 623, column: 7, scope: !4860)
!4962 = !DILocalVariable(name: "op0", scope: !4963, file: !3, line: 625, type: !1702)
!4963 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 624, column: 5)
!4964 = !DILocation(line: 625, column: 12, scope: !4963)
!4965 = !DILocation(line: 625, column: 37, scope: !4963)
!4966 = !DILocation(line: 625, column: 18, scope: !4963)
!4967 = !DILocation(line: 629, column: 26, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4963, file: !3, line: 629, column: 11)
!4969 = !DILocation(line: 629, column: 11, scope: !4968)
!4970 = !DILocation(line: 629, column: 11, scope: !4963)
!4971 = !DILocalVariable(name: "use_p", scope: !4972, file: !3, line: 631, type: !3078)
!4972 = distinct !DILexicalBlock(scope: !4968, file: !3, line: 630, column: 2)
!4973 = !DILocation(line: 631, column: 18, scope: !4972)
!4974 = !DILocalVariable(name: "iter", scope: !4972, file: !3, line: 632, type: !4975)
!4975 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !2017, line: 249, baseType: !4976)
!4976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !2017, line: 238, size: 448, elements: !4977)
!4977 = !{!4978, !4979, !4980, !4981}
!4978 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !4976, file: !2017, line: 241, baseType: !3079, size: 64)
!4979 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !4976, file: !2017, line: 243, baseType: !3079, size: 64, offset: 64)
!4980 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !4976, file: !2017, line: 245, baseType: !3080, size: 256, offset: 128)
!4981 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !4976, file: !2017, line: 248, baseType: !3079, size: 64, offset: 384)
!4982 = !DILocation(line: 632, column: 21, scope: !4972)
!4983 = !DILocation(line: 634, column: 4, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4972, file: !3, line: 634, column: 4)
!4985 = !DILocation(line: 634, column: 4, scope: !4986)
!4986 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 634, column: 4)
!4987 = !DILocalVariable(name: "v", scope: !4988, file: !3, line: 636, type: !1605)
!4988 = distinct !DILexicalBlock(scope: !4986, file: !3, line: 635, column: 6)
!4989 = !DILocation(line: 636, column: 12, scope: !4988)
!4990 = !DILocation(line: 636, column: 37, scope: !4988)
!4991 = !DILocation(line: 636, column: 42, scope: !4988)
!4992 = !DILocation(line: 636, column: 16, scope: !4988)
!4993 = !DILocation(line: 638, column: 41, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4988, file: !3, line: 638, column: 12)
!4995 = !DILocation(line: 638, column: 52, scope: !4994)
!4996 = !DILocation(line: 638, column: 13, scope: !4994)
!4997 = !DILocation(line: 638, column: 12, scope: !4988)
!4998 = !DILocation(line: 639, column: 34, scope: !4994)
!4999 = !DILocation(line: 639, column: 39, scope: !4994)
!5000 = !DILocation(line: 639, column: 42, scope: !4994)
!5001 = !DILocation(line: 639, column: 53, scope: !4994)
!5002 = !DILocation(line: 640, column: 13, scope: !4994)
!5003 = !DILocation(line: 640, column: 24, scope: !4994)
!5004 = !DILocation(line: 639, column: 3, scope: !4994)
!5005 = !DILocation(line: 641, column: 6, scope: !4988)
!5006 = distinct !{!5006, !4983, !5007}
!5007 = !DILocation(line: 641, column: 6, scope: !4984)
!5008 = !DILocation(line: 642, column: 2, scope: !4972)
!5009 = !DILocation(line: 643, column: 5, scope: !4963)
!5010 = !DILocation(line: 644, column: 1, scope: !4860)
!5011 = distinct !DISubprogram(name: "rdg_flag_vertex", scope: !3, file: !3, line: 650, type: !5012, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5012 = !DISubroutineType(types: !5013)
!5013 = !{null, !3476, !1605, !1552, !1552, !4484}
!5014 = !DILocalVariable(name: "rdg", arg: 1, scope: !5011, file: !3, line: 650, type: !3476)
!5015 = !DILocation(line: 650, column: 32, scope: !5011)
!5016 = !DILocalVariable(name: "v", arg: 2, scope: !5011, file: !3, line: 650, type: !1605)
!5017 = !DILocation(line: 650, column: 41, scope: !5011)
!5018 = !DILocalVariable(name: "partition", arg: 3, scope: !5011, file: !3, line: 650, type: !1552)
!5019 = !DILocation(line: 650, column: 51, scope: !5011)
!5020 = !DILocalVariable(name: "loops", arg: 4, scope: !5011, file: !3, line: 650, type: !1552)
!5021 = !DILocation(line: 650, column: 69, scope: !5011)
!5022 = !DILocalVariable(name: "part_has_writes", arg: 5, scope: !5011, file: !3, line: 651, type: !4484)
!5023 = !DILocation(line: 651, column: 10, scope: !5011)
!5024 = !DILocalVariable(name: "loop", scope: !5011, file: !3, line: 653, type: !1635)
!5025 = !DILocation(line: 653, column: 16, scope: !5011)
!5026 = !DILocation(line: 655, column: 21, scope: !5027)
!5027 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 655, column: 7)
!5028 = !DILocation(line: 655, column: 32, scope: !5027)
!5029 = !DILocation(line: 655, column: 7, scope: !5027)
!5030 = !DILocation(line: 655, column: 7, scope: !5011)
!5031 = !DILocation(line: 656, column: 5, scope: !5027)
!5032 = !DILocation(line: 658, column: 32, scope: !5011)
!5033 = !DILocation(line: 658, column: 10, scope: !5011)
!5034 = !DILocation(line: 658, column: 8, scope: !5011)
!5035 = !DILocation(line: 659, column: 19, scope: !5011)
!5036 = !DILocation(line: 659, column: 26, scope: !5011)
!5037 = !DILocation(line: 659, column: 32, scope: !5011)
!5038 = !DILocation(line: 659, column: 3, scope: !5011)
!5039 = !DILocation(line: 660, column: 19, scope: !5011)
!5040 = !DILocation(line: 660, column: 30, scope: !5011)
!5041 = !DILocation(line: 660, column: 3, scope: !5011)
!5042 = !DILocation(line: 662, column: 38, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 662, column: 7)
!5044 = !DILocation(line: 662, column: 43, scope: !5043)
!5045 = !DILocation(line: 662, column: 7, scope: !5043)
!5046 = !DILocation(line: 662, column: 7, scope: !5011)
!5047 = !DILocation(line: 664, column: 8, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 663, column: 5)
!5049 = !DILocation(line: 664, column: 24, scope: !5048)
!5050 = !DILocation(line: 665, column: 25, scope: !5048)
!5051 = !DILocation(line: 665, column: 42, scope: !5048)
!5052 = !DILocation(line: 665, column: 7, scope: !5048)
!5053 = !DILocation(line: 666, column: 5, scope: !5048)
!5054 = !DILocation(line: 667, column: 1, scope: !5011)
!5055 = distinct !DISubprogram(name: "gimple_code", scope: !586, file: !586, line: 1052, type: !5056, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5056 = !DISubroutineType(types: !5057)
!5057 = !{!585, !5058}
!5058 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1553, line: 60, baseType: !3081)
!5059 = !DILocalVariable(name: "g", arg: 1, scope: !5055, file: !586, line: 1052, type: !5058)
!5060 = !DILocation(line: 1052, column: 27, scope: !5055)
!5061 = !DILocation(line: 1054, column: 10, scope: !5055)
!5062 = !DILocation(line: 1054, column: 13, scope: !5055)
!5063 = !DILocation(line: 1054, column: 20, scope: !5055)
!5064 = !DILocation(line: 1054, column: 3, scope: !5055)
!5065 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !586, file: !586, line: 1334, type: !5066, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5066 = !DISubroutineType(types: !5067)
!5067 = !{!3078, !5058}
!5068 = !DILocalVariable(name: "g", arg: 1, scope: !5065, file: !586, line: 1334, type: !5058)
!5069 = !DILocation(line: 1334, column: 30, scope: !5065)
!5070 = !DILocalVariable(name: "ops", scope: !5065, file: !586, line: 1336, type: !2227)
!5071 = !DILocation(line: 1336, column: 24, scope: !5065)
!5072 = !DILocation(line: 1337, column: 28, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5065, file: !586, line: 1337, column: 7)
!5074 = !DILocation(line: 1337, column: 8, scope: !5073)
!5075 = !DILocation(line: 1337, column: 7, scope: !5065)
!5076 = !DILocation(line: 1338, column: 5, scope: !5073)
!5077 = !DILocation(line: 1339, column: 9, scope: !5065)
!5078 = !DILocation(line: 1339, column: 12, scope: !5065)
!5079 = !DILocation(line: 1339, column: 18, scope: !5065)
!5080 = !DILocation(line: 1339, column: 25, scope: !5065)
!5081 = !DILocation(line: 1339, column: 7, scope: !5065)
!5082 = !DILocation(line: 1340, column: 7, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5065, file: !586, line: 1340, column: 7)
!5084 = !DILocation(line: 1341, column: 7, scope: !5083)
!5085 = !DILocation(line: 1341, column: 10, scope: !5083)
!5086 = !DILocation(line: 1341, column: 28, scope: !5083)
!5087 = !DILocation(line: 1341, column: 36, scope: !5083)
!5088 = !DILocation(line: 1341, column: 39, scope: !5083)
!5089 = !DILocation(line: 1341, column: 49, scope: !5083)
!5090 = !DILocation(line: 1341, column: 32, scope: !5083)
!5091 = !DILocation(line: 1340, column: 7, scope: !5065)
!5092 = !DILocation(line: 1342, column: 12, scope: !5083)
!5093 = !DILocation(line: 1342, column: 5, scope: !5083)
!5094 = !DILocation(line: 1343, column: 3, scope: !5065)
!5095 = !DILocation(line: 1344, column: 1, scope: !5065)
!5096 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5097, file: !5097, line: 427, type: !5098, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5097 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5098 = !DISubroutineType(types: !5099)
!5099 = !{!1702, !3078}
!5100 = !DILocalVariable(name: "use", arg: 1, scope: !5096, file: !5097, line: 427, type: !3078)
!5101 = !DILocation(line: 427, column: 33, scope: !5096)
!5102 = !DILocation(line: 429, column: 12, scope: !5096)
!5103 = !DILocation(line: 429, column: 17, scope: !5096)
!5104 = !DILocation(line: 429, column: 10, scope: !5096)
!5105 = !DILocation(line: 429, column: 3, scope: !5096)
!5106 = distinct !DISubprogram(name: "is_gimple_assign", scope: !586, file: !586, line: 1677, type: !5107, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5107 = !DISubroutineType(types: !5108)
!5108 = !{!1815, !5058}
!5109 = !DILocalVariable(name: "gs", arg: 1, scope: !5106, file: !586, line: 1677, type: !5058)
!5110 = !DILocation(line: 1677, column: 32, scope: !5106)
!5111 = !DILocation(line: 1679, column: 23, scope: !5106)
!5112 = !DILocation(line: 1679, column: 10, scope: !5106)
!5113 = !DILocation(line: 1679, column: 27, scope: !5106)
!5114 = !DILocation(line: 1679, column: 3, scope: !5106)
!5115 = distinct !DISubprogram(name: "has_upstream_mem_writes", scope: !3, file: !3, line: 554, type: !5116, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5116 = !DISubroutineType(types: !5117)
!5117 = !{!1815, !1605}
!5118 = !DILocalVariable(name: "u", arg: 1, scope: !5115, file: !3, line: 554, type: !1605)
!5119 = !DILocation(line: 554, column: 30, scope: !5115)
!5120 = !DILocation(line: 556, column: 24, scope: !5115)
!5121 = !DILocation(line: 556, column: 45, scope: !5115)
!5122 = !DILocation(line: 556, column: 10, scope: !5115)
!5123 = !DILocation(line: 556, column: 3, scope: !5115)
!5124 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !586, file: !586, line: 1694, type: !5125, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5125 = !DISubroutineType(types: !5126)
!5126 = !{!1702, !5058}
!5127 = !DILocalVariable(name: "gs", arg: 1, scope: !5124, file: !586, line: 1694, type: !5058)
!5128 = !DILocation(line: 1694, column: 33, scope: !5124)
!5129 = !DILocation(line: 1697, column: 21, scope: !5124)
!5130 = !DILocation(line: 1697, column: 10, scope: !5124)
!5131 = !DILocation(line: 1697, column: 3, scope: !5124)
!5132 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !5097, file: !5097, line: 292, type: !5133, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5133 = !DISubroutineType(types: !5134)
!5134 = !{!3078, !5135, !1702}
!5135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4975, size: 64)
!5136 = !DILocalVariable(name: "imm", arg: 1, scope: !5132, file: !5097, line: 292, type: !5135)
!5137 = !DILocation(line: 292, column: 43, scope: !5132)
!5138 = !DILocalVariable(name: "var", arg: 2, scope: !5132, file: !5097, line: 292, type: !1702)
!5139 = !DILocation(line: 292, column: 53, scope: !5132)
!5140 = !DILocation(line: 294, column: 18, scope: !5132)
!5141 = !DILocation(line: 294, column: 3, scope: !5132)
!5142 = !DILocation(line: 294, column: 8, scope: !5132)
!5143 = !DILocation(line: 294, column: 14, scope: !5132)
!5144 = !DILocation(line: 295, column: 18, scope: !5132)
!5145 = !DILocation(line: 295, column: 23, scope: !5132)
!5146 = !DILocation(line: 295, column: 30, scope: !5132)
!5147 = !DILocation(line: 295, column: 3, scope: !5132)
!5148 = !DILocation(line: 295, column: 8, scope: !5132)
!5149 = !DILocation(line: 295, column: 16, scope: !5132)
!5150 = !DILocation(line: 299, column: 31, scope: !5151)
!5151 = distinct !DILexicalBlock(scope: !5132, file: !5097, line: 299, column: 7)
!5152 = !DILocation(line: 299, column: 7, scope: !5151)
!5153 = !DILocation(line: 299, column: 7, scope: !5132)
!5154 = !DILocation(line: 300, column: 5, scope: !5151)
!5155 = !DILocation(line: 301, column: 10, scope: !5132)
!5156 = !DILocation(line: 301, column: 15, scope: !5132)
!5157 = !DILocation(line: 301, column: 3, scope: !5132)
!5158 = !DILocation(line: 302, column: 1, scope: !5132)
!5159 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !5097, file: !5097, line: 285, type: !5160, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5160 = !DISubroutineType(types: !5161)
!5161 = !{!1815, !5162}
!5162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5163, size: 64)
!5163 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4975)
!5164 = !DILocalVariable(name: "imm", arg: 1, scope: !5159, file: !5097, line: 285, type: !5162)
!5165 = !DILocation(line: 285, column: 49, scope: !5159)
!5166 = !DILocation(line: 287, column: 11, scope: !5159)
!5167 = !DILocation(line: 287, column: 16, scope: !5159)
!5168 = !DILocation(line: 287, column: 27, scope: !5159)
!5169 = !DILocation(line: 287, column: 32, scope: !5159)
!5170 = !DILocation(line: 287, column: 24, scope: !5159)
!5171 = !DILocation(line: 287, column: 10, scope: !5159)
!5172 = !DILocation(line: 287, column: 3, scope: !5159)
!5173 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !5097, file: !5097, line: 306, type: !5174, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5174 = !DISubroutineType(types: !5175)
!5175 = !{!3078, !5135}
!5176 = !DILocalVariable(name: "imm", arg: 1, scope: !5173, file: !5097, line: 306, type: !5135)
!5177 = !DILocation(line: 306, column: 42, scope: !5173)
!5178 = !DILocalVariable(name: "old", scope: !5173, file: !5097, line: 308, type: !3078)
!5179 = !DILocation(line: 308, column: 17, scope: !5173)
!5180 = !DILocation(line: 308, column: 23, scope: !5173)
!5181 = !DILocation(line: 308, column: 28, scope: !5173)
!5182 = !DILocation(line: 319, column: 18, scope: !5173)
!5183 = !DILocation(line: 319, column: 23, scope: !5173)
!5184 = !DILocation(line: 319, column: 3, scope: !5173)
!5185 = !DILocation(line: 319, column: 8, scope: !5173)
!5186 = !DILocation(line: 319, column: 16, scope: !5173)
!5187 = !DILocation(line: 320, column: 31, scope: !5188)
!5188 = distinct !DILexicalBlock(scope: !5173, file: !5097, line: 320, column: 7)
!5189 = !DILocation(line: 320, column: 7, scope: !5188)
!5190 = !DILocation(line: 320, column: 7, scope: !5173)
!5191 = !DILocation(line: 321, column: 5, scope: !5188)
!5192 = !DILocation(line: 322, column: 10, scope: !5173)
!5193 = !DILocation(line: 322, column: 15, scope: !5173)
!5194 = !DILocation(line: 322, column: 3, scope: !5173)
!5195 = !DILocation(line: 323, column: 1, scope: !5173)
!5196 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !586, file: !586, line: 1283, type: !5107, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5197 = !DILocalVariable(name: "g", arg: 1, scope: !5196, file: !586, line: 1283, type: !5058)
!5198 = !DILocation(line: 1283, column: 34, scope: !5196)
!5199 = !DILocation(line: 1285, column: 23, scope: !5196)
!5200 = !DILocation(line: 1285, column: 10, scope: !5196)
!5201 = !DILocation(line: 1285, column: 26, scope: !5196)
!5202 = !DILocation(line: 1285, column: 43, scope: !5196)
!5203 = !DILocation(line: 1285, column: 59, scope: !5196)
!5204 = !DILocation(line: 1285, column: 46, scope: !5196)
!5205 = !DILocation(line: 1285, column: 62, scope: !5196)
!5206 = !DILocation(line: 0, scope: !5196)
!5207 = !DILocation(line: 1285, column: 3, scope: !5196)
!5208 = distinct !DISubprogram(name: "gimple_op", scope: !586, file: !586, line: 1631, type: !5209, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5209 = !DISubroutineType(types: !5210)
!5210 = !{!1702, !5058, !7}
!5211 = !DILocalVariable(name: "gs", arg: 1, scope: !5208, file: !586, line: 1631, type: !5058)
!5212 = !DILocation(line: 1631, column: 25, scope: !5208)
!5213 = !DILocalVariable(name: "i", arg: 2, scope: !5208, file: !586, line: 1631, type: !7)
!5214 = !DILocation(line: 1631, column: 38, scope: !5208)
!5215 = !DILocation(line: 1633, column: 23, scope: !5216)
!5216 = distinct !DILexicalBlock(scope: !5208, file: !586, line: 1633, column: 7)
!5217 = !DILocation(line: 1633, column: 7, scope: !5216)
!5218 = !DILocation(line: 1633, column: 7, scope: !5208)
!5219 = !DILocation(line: 1638, column: 26, scope: !5220)
!5220 = distinct !DILexicalBlock(scope: !5216, file: !586, line: 1634, column: 5)
!5221 = !DILocation(line: 1638, column: 14, scope: !5220)
!5222 = !DILocation(line: 1638, column: 50, scope: !5220)
!5223 = !DILocation(line: 1638, column: 7, scope: !5220)
!5224 = !DILocation(line: 1641, column: 5, scope: !5216)
!5225 = !DILocation(line: 1642, column: 1, scope: !5208)
!5226 = distinct !DISubprogram(name: "gimple_has_ops", scope: !586, file: !586, line: 1274, type: !5107, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5227 = !DILocalVariable(name: "g", arg: 1, scope: !5226, file: !586, line: 1274, type: !5058)
!5228 = !DILocation(line: 1274, column: 30, scope: !5226)
!5229 = !DILocation(line: 1276, column: 23, scope: !5226)
!5230 = !DILocation(line: 1276, column: 10, scope: !5226)
!5231 = !DILocation(line: 1276, column: 26, scope: !5226)
!5232 = !DILocation(line: 1276, column: 41, scope: !5226)
!5233 = !DILocation(line: 1276, column: 57, scope: !5226)
!5234 = !DILocation(line: 1276, column: 44, scope: !5226)
!5235 = !DILocation(line: 1276, column: 60, scope: !5226)
!5236 = !DILocation(line: 0, scope: !5226)
!5237 = !DILocation(line: 1276, column: 3, scope: !5226)
!5238 = distinct !DISubprogram(name: "gimple_ops", scope: !586, file: !586, line: 1614, type: !5239, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5239 = !DISubroutineType(types: !5240)
!5240 = !{!2225, !1677}
!5241 = !DILocalVariable(name: "gs", arg: 1, scope: !5238, file: !586, line: 1614, type: !1677)
!5242 = !DILocation(line: 1614, column: 20, scope: !5238)
!5243 = !DILocalVariable(name: "off", scope: !5238, file: !586, line: 1616, type: !2135)
!5244 = !DILocation(line: 1616, column: 10, scope: !5238)
!5245 = !DILocation(line: 1621, column: 56, scope: !5238)
!5246 = !DILocation(line: 1621, column: 28, scope: !5238)
!5247 = !DILocation(line: 1621, column: 9, scope: !5238)
!5248 = !DILocation(line: 1621, column: 7, scope: !5238)
!5249 = !DILocation(line: 1622, column: 3, scope: !5238)
!5250 = !DILocation(line: 1624, column: 29, scope: !5238)
!5251 = !DILocation(line: 1624, column: 20, scope: !5238)
!5252 = !DILocation(line: 1624, column: 34, scope: !5238)
!5253 = !DILocation(line: 1624, column: 32, scope: !5238)
!5254 = !DILocation(line: 1624, column: 10, scope: !5238)
!5255 = !DILocation(line: 1624, column: 3, scope: !5238)
!5256 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !586, file: !586, line: 1073, type: !5257, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5257 = !DISubroutineType(types: !5258)
!5258 = !{!624, !1677}
!5259 = !DILocalVariable(name: "gs", arg: 1, scope: !5256, file: !586, line: 1073, type: !1677)
!5260 = !DILocation(line: 1073, column: 36, scope: !5256)
!5261 = !DILocation(line: 1075, column: 37, scope: !5256)
!5262 = !DILocation(line: 1075, column: 24, scope: !5256)
!5263 = !DILocation(line: 1075, column: 10, scope: !5256)
!5264 = !DILocation(line: 1075, column: 3, scope: !5256)
!5265 = distinct !DISubprogram(name: "gss_for_code", scope: !586, file: !586, line: 1061, type: !5266, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5266 = !DISubroutineType(types: !5267)
!5267 = !{!624, !585}
!5268 = !DILocalVariable(name: "code", arg: 1, scope: !5265, file: !586, line: 1061, type: !585)
!5269 = !DILocation(line: 1061, column: 32, scope: !5265)
!5270 = !DILocation(line: 1066, column: 24, scope: !5265)
!5271 = !DILocation(line: 1066, column: 10, scope: !5265)
!5272 = !DILocation(line: 1066, column: 3, scope: !5265)
!5273 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !5097, file: !5097, line: 617, type: !5274, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5274 = !DISubroutineType(types: !5275)
!5275 = !{!1635, !1677}
!5276 = !DILocalVariable(name: "stmt", arg: 1, scope: !5273, file: !5097, line: 617, type: !1677)
!5277 = !DILocation(line: 617, column: 30, scope: !5273)
!5278 = !DILocalVariable(name: "bb", scope: !5273, file: !5097, line: 619, type: !2077)
!5279 = !DILocation(line: 619, column: 15, scope: !5273)
!5280 = !DILocation(line: 619, column: 31, scope: !5273)
!5281 = !DILocation(line: 619, column: 20, scope: !5273)
!5282 = !DILocation(line: 620, column: 8, scope: !5283)
!5283 = distinct !DILexicalBlock(scope: !5273, file: !5097, line: 620, column: 7)
!5284 = !DILocation(line: 620, column: 7, scope: !5273)
!5285 = !DILocation(line: 621, column: 5, scope: !5283)
!5286 = !DILocation(line: 623, column: 10, scope: !5273)
!5287 = !DILocation(line: 623, column: 14, scope: !5273)
!5288 = !DILocation(line: 623, column: 3, scope: !5273)
!5289 = !DILocation(line: 624, column: 1, scope: !5273)
!5290 = distinct !DISubprogram(name: "rdg_cannot_recompute_vertex_p", scope: !3, file: !3, line: 457, type: !5291, scopeLine: 458, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5291 = !DISubroutineType(types: !5292)
!5292 = !{!1815, !3476, !1605}
!5293 = !DILocalVariable(name: "rdg", arg: 1, scope: !5290, file: !3, line: 457, type: !3476)
!5294 = !DILocation(line: 457, column: 46, scope: !5290)
!5295 = !DILocalVariable(name: "v", arg: 2, scope: !5290, file: !3, line: 457, type: !1605)
!5296 = !DILocation(line: 457, column: 55, scope: !5290)
!5297 = !DILocation(line: 459, column: 7, scope: !5298)
!5298 = distinct !DILexicalBlock(scope: !5290, file: !3, line: 459, column: 7)
!5299 = !DILocation(line: 459, column: 7, scope: !5290)
!5300 = !DILocation(line: 460, column: 5, scope: !5298)
!5301 = !DILocation(line: 462, column: 3, scope: !5290)
!5302 = !DILocation(line: 463, column: 1, scope: !5290)
!5303 = distinct !DISubprogram(name: "gimple_bb", scope: !586, file: !586, line: 1112, type: !5304, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5304 = !DISubroutineType(types: !5305)
!5305 = !{!1641, !5058}
!5306 = !DILocalVariable(name: "g", arg: 1, scope: !5303, file: !586, line: 1112, type: !5058)
!5307 = !DILocation(line: 1112, column: 25, scope: !5303)
!5308 = !DILocation(line: 1114, column: 10, scope: !5303)
!5309 = !DILocation(line: 1114, column: 13, scope: !5303)
!5310 = !DILocation(line: 1114, column: 20, scope: !5303)
!5311 = !DILocation(line: 1114, column: 3, scope: !5303)
!5312 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1556, file: !1556, line: 224, type: !5313, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5313 = !DISubroutineType(types: !5314)
!5314 = !{null, !5315, !5316, !7, !5319}
!5315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4665, size: 64)
!5316 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1553, line: 48, baseType: !5317)
!5317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5318, size: 64)
!5318 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1555)
!5319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!5320 = !DILocalVariable(name: "bi", arg: 1, scope: !5312, file: !1556, line: 224, type: !5315)
!5321 = !DILocation(line: 224, column: 37, scope: !5312)
!5322 = !DILocalVariable(name: "map", arg: 2, scope: !5312, file: !1556, line: 224, type: !5316)
!5323 = !DILocation(line: 224, column: 54, scope: !5312)
!5324 = !DILocalVariable(name: "start_bit", arg: 3, scope: !5312, file: !1556, line: 225, type: !7)
!5325 = !DILocation(line: 225, column: 15, scope: !5312)
!5326 = !DILocalVariable(name: "bit_no", arg: 4, scope: !5312, file: !1556, line: 225, type: !5319)
!5327 = !DILocation(line: 225, column: 36, scope: !5312)
!5328 = !DILocation(line: 227, column: 14, scope: !5312)
!5329 = !DILocation(line: 227, column: 19, scope: !5312)
!5330 = !DILocation(line: 227, column: 3, scope: !5312)
!5331 = !DILocation(line: 227, column: 7, scope: !5312)
!5332 = !DILocation(line: 227, column: 12, scope: !5312)
!5333 = !DILocation(line: 228, column: 3, scope: !5312)
!5334 = !DILocation(line: 228, column: 7, scope: !5312)
!5335 = !DILocation(line: 228, column: 12, scope: !5312)
!5336 = !DILocation(line: 231, column: 3, scope: !5312)
!5337 = !DILocation(line: 233, column: 12, scope: !5338)
!5338 = distinct !DILexicalBlock(scope: !5339, file: !1556, line: 233, column: 11)
!5339 = distinct !DILexicalBlock(scope: !5312, file: !1556, line: 232, column: 5)
!5340 = !DILocation(line: 233, column: 16, scope: !5338)
!5341 = !DILocation(line: 233, column: 11, scope: !5339)
!5342 = !DILocation(line: 235, column: 4, scope: !5343)
!5343 = distinct !DILexicalBlock(scope: !5338, file: !1556, line: 234, column: 2)
!5344 = !DILocation(line: 235, column: 8, scope: !5343)
!5345 = !DILocation(line: 235, column: 13, scope: !5343)
!5346 = !DILocation(line: 236, column: 4, scope: !5343)
!5347 = !DILocation(line: 239, column: 11, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5339, file: !1556, line: 239, column: 11)
!5349 = !DILocation(line: 239, column: 15, scope: !5348)
!5350 = !DILocation(line: 239, column: 21, scope: !5348)
!5351 = !DILocation(line: 239, column: 29, scope: !5348)
!5352 = !DILocation(line: 239, column: 39, scope: !5348)
!5353 = !DILocation(line: 239, column: 26, scope: !5348)
!5354 = !DILocation(line: 239, column: 11, scope: !5339)
!5355 = !DILocation(line: 240, column: 2, scope: !5348)
!5356 = !DILocation(line: 241, column: 18, scope: !5339)
!5357 = !DILocation(line: 241, column: 22, scope: !5339)
!5358 = !DILocation(line: 241, column: 28, scope: !5339)
!5359 = !DILocation(line: 241, column: 7, scope: !5339)
!5360 = !DILocation(line: 241, column: 11, scope: !5339)
!5361 = !DILocation(line: 241, column: 16, scope: !5339)
!5362 = distinct !{!5362, !5336, !5363}
!5363 = !DILocation(line: 242, column: 5, scope: !5312)
!5364 = !DILocation(line: 245, column: 7, scope: !5365)
!5365 = distinct !DILexicalBlock(scope: !5312, file: !1556, line: 245, column: 7)
!5366 = !DILocation(line: 245, column: 11, scope: !5365)
!5367 = !DILocation(line: 245, column: 17, scope: !5365)
!5368 = !DILocation(line: 245, column: 25, scope: !5365)
!5369 = !DILocation(line: 245, column: 35, scope: !5365)
!5370 = !DILocation(line: 245, column: 22, scope: !5365)
!5371 = !DILocation(line: 245, column: 7, scope: !5312)
!5372 = !DILocation(line: 246, column: 17, scope: !5365)
!5373 = !DILocation(line: 246, column: 21, scope: !5365)
!5374 = !DILocation(line: 246, column: 27, scope: !5365)
!5375 = !DILocation(line: 246, column: 32, scope: !5365)
!5376 = !DILocation(line: 246, column: 15, scope: !5365)
!5377 = !DILocation(line: 246, column: 5, scope: !5365)
!5378 = !DILocation(line: 249, column: 17, scope: !5312)
!5379 = !DILocation(line: 249, column: 27, scope: !5312)
!5380 = !DILocation(line: 249, column: 46, scope: !5312)
!5381 = !DILocation(line: 249, column: 3, scope: !5312)
!5382 = !DILocation(line: 249, column: 7, scope: !5312)
!5383 = !DILocation(line: 249, column: 15, scope: !5312)
!5384 = !DILocation(line: 250, column: 14, scope: !5312)
!5385 = !DILocation(line: 250, column: 18, scope: !5312)
!5386 = !DILocation(line: 250, column: 24, scope: !5312)
!5387 = !DILocation(line: 250, column: 29, scope: !5312)
!5388 = !DILocation(line: 250, column: 33, scope: !5312)
!5389 = !DILocation(line: 250, column: 3, scope: !5312)
!5390 = !DILocation(line: 250, column: 7, scope: !5312)
!5391 = !DILocation(line: 250, column: 12, scope: !5312)
!5392 = !DILocation(line: 251, column: 16, scope: !5312)
!5393 = !DILocation(line: 251, column: 26, scope: !5312)
!5394 = !DILocation(line: 251, column: 3, scope: !5312)
!5395 = !DILocation(line: 251, column: 7, scope: !5312)
!5396 = !DILocation(line: 251, column: 12, scope: !5312)
!5397 = !DILocation(line: 257, column: 17, scope: !5312)
!5398 = !DILocation(line: 257, column: 21, scope: !5312)
!5399 = !DILocation(line: 257, column: 16, scope: !5312)
!5400 = !DILocation(line: 257, column: 13, scope: !5312)
!5401 = !DILocation(line: 259, column: 13, scope: !5312)
!5402 = !DILocation(line: 259, column: 4, scope: !5312)
!5403 = !DILocation(line: 259, column: 11, scope: !5312)
!5404 = !DILocation(line: 260, column: 1, scope: !5312)
!5405 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1556, file: !1556, line: 393, type: !5406, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5406 = !DISubroutineType(types: !5407)
!5407 = !{!1815, !5315, !5319}
!5408 = !DILocalVariable(name: "bi", arg: 1, scope: !5405, file: !1556, line: 393, type: !5315)
!5409 = !DILocation(line: 393, column: 32, scope: !5405)
!5410 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5405, file: !1556, line: 393, type: !5319)
!5411 = !DILocation(line: 393, column: 46, scope: !5405)
!5412 = !DILocation(line: 396, column: 7, scope: !5413)
!5413 = distinct !DILexicalBlock(scope: !5405, file: !1556, line: 396, column: 7)
!5414 = !DILocation(line: 396, column: 11, scope: !5413)
!5415 = !DILocation(line: 396, column: 7, scope: !5405)
!5416 = !DILocation(line: 397, column: 5, scope: !5413)
!5417 = !DILabel(scope: !5418, name: "next_bit", file: !1556, line: 398)
!5418 = distinct !DILexicalBlock(scope: !5413, file: !1556, line: 397, column: 5)
!5419 = !DILocation(line: 398, column: 5, scope: !5418)
!5420 = !DILocation(line: 399, column: 7, scope: !5418)
!5421 = !DILocation(line: 399, column: 16, scope: !5418)
!5422 = !DILocation(line: 399, column: 20, scope: !5418)
!5423 = !DILocation(line: 399, column: 25, scope: !5418)
!5424 = !DILocation(line: 399, column: 14, scope: !5418)
!5425 = !DILocation(line: 401, column: 4, scope: !5426)
!5426 = distinct !DILexicalBlock(scope: !5418, file: !1556, line: 400, column: 2)
!5427 = !DILocation(line: 401, column: 8, scope: !5426)
!5428 = !DILocation(line: 401, column: 13, scope: !5426)
!5429 = !DILocation(line: 402, column: 5, scope: !5426)
!5430 = !DILocation(line: 402, column: 12, scope: !5426)
!5431 = distinct !{!5431, !5420, !5432}
!5432 = !DILocation(line: 403, column: 2, scope: !5418)
!5433 = !DILocation(line: 404, column: 7, scope: !5418)
!5434 = !DILocation(line: 410, column: 16, scope: !5405)
!5435 = !DILocation(line: 410, column: 15, scope: !5405)
!5436 = !DILocation(line: 410, column: 23, scope: !5405)
!5437 = !DILocation(line: 410, column: 42, scope: !5405)
!5438 = !DILocation(line: 411, column: 7, scope: !5405)
!5439 = !DILocation(line: 411, column: 26, scope: !5405)
!5440 = !DILocation(line: 410, column: 4, scope: !5405)
!5441 = !DILocation(line: 410, column: 11, scope: !5405)
!5442 = !DILocation(line: 412, column: 3, scope: !5405)
!5443 = !DILocation(line: 412, column: 7, scope: !5405)
!5444 = !DILocation(line: 412, column: 14, scope: !5405)
!5445 = !DILocation(line: 414, column: 3, scope: !5405)
!5446 = !DILocation(line: 417, column: 7, scope: !5447)
!5447 = distinct !DILexicalBlock(scope: !5405, file: !1556, line: 415, column: 5)
!5448 = !DILocation(line: 417, column: 14, scope: !5447)
!5449 = !DILocation(line: 417, column: 18, scope: !5447)
!5450 = !DILocation(line: 417, column: 26, scope: !5447)
!5451 = !DILocation(line: 419, column: 15, scope: !5452)
!5452 = distinct !DILexicalBlock(scope: !5447, file: !1556, line: 418, column: 2)
!5453 = !DILocation(line: 419, column: 19, scope: !5452)
!5454 = !DILocation(line: 419, column: 25, scope: !5452)
!5455 = !DILocation(line: 419, column: 30, scope: !5452)
!5456 = !DILocation(line: 419, column: 34, scope: !5452)
!5457 = !DILocation(line: 419, column: 4, scope: !5452)
!5458 = !DILocation(line: 419, column: 8, scope: !5452)
!5459 = !DILocation(line: 419, column: 13, scope: !5452)
!5460 = !DILocation(line: 420, column: 8, scope: !5461)
!5461 = distinct !DILexicalBlock(scope: !5452, file: !1556, line: 420, column: 8)
!5462 = !DILocation(line: 420, column: 12, scope: !5461)
!5463 = !DILocation(line: 420, column: 8, scope: !5452)
!5464 = !DILocation(line: 421, column: 6, scope: !5461)
!5465 = !DILocation(line: 422, column: 5, scope: !5452)
!5466 = !DILocation(line: 422, column: 12, scope: !5452)
!5467 = !DILocation(line: 423, column: 4, scope: !5452)
!5468 = !DILocation(line: 423, column: 8, scope: !5452)
!5469 = !DILocation(line: 423, column: 15, scope: !5452)
!5470 = distinct !{!5470, !5446, !5471}
!5471 = !DILocation(line: 424, column: 2, scope: !5447)
!5472 = !DILocation(line: 427, column: 18, scope: !5447)
!5473 = !DILocation(line: 427, column: 22, scope: !5447)
!5474 = !DILocation(line: 427, column: 28, scope: !5447)
!5475 = !DILocation(line: 427, column: 7, scope: !5447)
!5476 = !DILocation(line: 427, column: 11, scope: !5447)
!5477 = !DILocation(line: 427, column: 16, scope: !5447)
!5478 = !DILocation(line: 428, column: 12, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5447, file: !1556, line: 428, column: 11)
!5480 = !DILocation(line: 428, column: 16, scope: !5479)
!5481 = !DILocation(line: 428, column: 11, scope: !5447)
!5482 = !DILocation(line: 429, column: 2, scope: !5479)
!5483 = !DILocation(line: 430, column: 17, scope: !5447)
!5484 = !DILocation(line: 430, column: 21, scope: !5447)
!5485 = !DILocation(line: 430, column: 27, scope: !5447)
!5486 = !DILocation(line: 430, column: 32, scope: !5447)
!5487 = !DILocation(line: 430, column: 8, scope: !5447)
!5488 = !DILocation(line: 430, column: 15, scope: !5447)
!5489 = !DILocation(line: 431, column: 7, scope: !5447)
!5490 = !DILocation(line: 431, column: 11, scope: !5447)
!5491 = !DILocation(line: 431, column: 19, scope: !5447)
!5492 = distinct !{!5492, !5445, !5493}
!5493 = !DILocation(line: 432, column: 5, scope: !5405)
!5494 = !DILocation(line: 433, column: 1, scope: !5405)
!5495 = distinct !DISubprogram(name: "rdg_has_similar_memory_accesses", scope: !579, file: !579, line: 578, type: !5496, scopeLine: 579, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5496 = !DISubroutineType(types: !5497)
!5497 = !{!1815, !3476, !1605, !1605}
!5498 = !DILocalVariable(name: "rdg", arg: 1, scope: !5495, file: !579, line: 578, type: !3476)
!5499 = !DILocation(line: 578, column: 48, scope: !5495)
!5500 = !DILocalVariable(name: "v1", arg: 2, scope: !5495, file: !579, line: 578, type: !1605)
!5501 = !DILocation(line: 578, column: 57, scope: !5495)
!5502 = !DILocalVariable(name: "v2", arg: 3, scope: !5495, file: !579, line: 578, type: !1605)
!5503 = !DILocation(line: 578, column: 65, scope: !5495)
!5504 = !DILocation(line: 580, column: 40, scope: !5495)
!5505 = !DILocation(line: 581, column: 12, scope: !5495)
!5506 = !DILocation(line: 580, column: 10, scope: !5495)
!5507 = !DILocation(line: 580, column: 3, scope: !5495)
!5508 = distinct !DISubprogram(name: "rdg_flag_all_uses", scope: !3, file: !3, line: 565, type: !4574, scopeLine: 567, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5509 = !DILocalVariable(name: "rdg", arg: 1, scope: !5508, file: !3, line: 565, type: !3476)
!5510 = !DILocation(line: 565, column: 34, scope: !5508)
!5511 = !DILocalVariable(name: "u", arg: 2, scope: !5508, file: !3, line: 565, type: !1605)
!5512 = !DILocation(line: 565, column: 43, scope: !5508)
!5513 = !DILocalVariable(name: "partition", arg: 3, scope: !5508, file: !3, line: 565, type: !1552)
!5514 = !DILocation(line: 565, column: 53, scope: !5508)
!5515 = !DILocalVariable(name: "loops", arg: 4, scope: !5508, file: !3, line: 565, type: !1552)
!5516 = !DILocation(line: 565, column: 71, scope: !5508)
!5517 = !DILocalVariable(name: "processed", arg: 5, scope: !5508, file: !3, line: 566, type: !1552)
!5518 = !DILocation(line: 566, column: 13, scope: !5508)
!5519 = !DILocalVariable(name: "part_has_writes", arg: 6, scope: !5508, file: !3, line: 566, type: !4484)
!5520 = !DILocation(line: 566, column: 30, scope: !5508)
!5521 = !DILocalVariable(name: "e", scope: !5508, file: !3, line: 568, type: !3486)
!5522 = !DILocation(line: 568, column: 22, scope: !5508)
!5523 = !DILocation(line: 570, column: 12, scope: !5524)
!5524 = distinct !DILexicalBlock(scope: !5508, file: !3, line: 570, column: 3)
!5525 = !DILocation(line: 570, column: 17, scope: !5524)
!5526 = !DILocation(line: 570, column: 26, scope: !5524)
!5527 = !DILocation(line: 570, column: 29, scope: !5524)
!5528 = !DILocation(line: 570, column: 10, scope: !5524)
!5529 = !DILocation(line: 570, column: 8, scope: !5524)
!5530 = !DILocation(line: 570, column: 35, scope: !5531)
!5531 = distinct !DILexicalBlock(scope: !5524, file: !3, line: 570, column: 3)
!5532 = !DILocation(line: 570, column: 3, scope: !5524)
!5533 = !DILocation(line: 571, column: 24, scope: !5534)
!5534 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 571, column: 9)
!5535 = !DILocation(line: 571, column: 35, scope: !5534)
!5536 = !DILocation(line: 571, column: 38, scope: !5534)
!5537 = !DILocation(line: 571, column: 10, scope: !5534)
!5538 = !DILocation(line: 571, column: 9, scope: !5531)
!5539 = !DILocation(line: 573, column: 33, scope: !5540)
!5540 = distinct !DILexicalBlock(scope: !5534, file: !3, line: 572, column: 7)
!5541 = !DILocation(line: 573, column: 38, scope: !5540)
!5542 = !DILocation(line: 573, column: 41, scope: !5540)
!5543 = !DILocation(line: 573, column: 47, scope: !5540)
!5544 = !DILocation(line: 573, column: 58, scope: !5540)
!5545 = !DILocation(line: 574, column: 12, scope: !5540)
!5546 = !DILocation(line: 574, column: 23, scope: !5540)
!5547 = !DILocation(line: 573, column: 2, scope: !5540)
!5548 = !DILocation(line: 575, column: 21, scope: !5540)
!5549 = !DILocation(line: 575, column: 26, scope: !5540)
!5550 = !DILocation(line: 575, column: 29, scope: !5540)
!5551 = !DILocation(line: 575, column: 35, scope: !5540)
!5552 = !DILocation(line: 575, column: 46, scope: !5540)
!5553 = !DILocation(line: 575, column: 53, scope: !5540)
!5554 = !DILocation(line: 576, column: 7, scope: !5540)
!5555 = !DILocation(line: 575, column: 2, scope: !5540)
!5556 = !DILocation(line: 577, column: 7, scope: !5540)
!5557 = !DILocation(line: 571, column: 42, scope: !5534)
!5558 = !DILocation(line: 570, column: 42, scope: !5531)
!5559 = !DILocation(line: 570, column: 45, scope: !5531)
!5560 = !DILocation(line: 570, column: 40, scope: !5531)
!5561 = !DILocation(line: 570, column: 3, scope: !5531)
!5562 = distinct !{!5562, !5532, !5563}
!5563 = !DILocation(line: 577, column: 7, scope: !5524)
!5564 = !DILocation(line: 578, column: 1, scope: !5508)
!5565 = distinct !DISubprogram(name: "VEC_int_base_unordered_remove", scope: !1621, file: !1621, line: 31, type: !5566, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5566 = !DISubroutineType(types: !5567)
!5567 = !{!1605, !3667, !7}
!5568 = !DILocalVariable(name: "vec_", arg: 1, scope: !5565, file: !1621, line: 31, type: !3667)
!5569 = !DILocation(line: 31, column: 1, scope: !5565)
!5570 = !DILocalVariable(name: "ix_", arg: 2, scope: !5565, file: !1621, line: 31, type: !7)
!5571 = !DILocalVariable(name: "slot_", scope: !5565, file: !1621, line: 31, type: !3033)
!5572 = !DILocalVariable(name: "obj_", scope: !5565, file: !1621, line: 31, type: !1605)
!5573 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1556, file: !1556, line: 382, type: !5574, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5574 = !DISubroutineType(types: !5575)
!5575 = !{null, !5315, !5319}
!5576 = !DILocalVariable(name: "bi", arg: 1, scope: !5573, file: !1556, line: 382, type: !5315)
!5577 = !DILocation(line: 382, column: 33, scope: !5573)
!5578 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5573, file: !1556, line: 382, type: !5319)
!5579 = !DILocation(line: 382, column: 47, scope: !5573)
!5580 = !DILocation(line: 384, column: 3, scope: !5573)
!5581 = !DILocation(line: 384, column: 7, scope: !5573)
!5582 = !DILocation(line: 384, column: 12, scope: !5573)
!5583 = !DILocation(line: 385, column: 4, scope: !5573)
!5584 = !DILocation(line: 385, column: 11, scope: !5573)
!5585 = !DILocation(line: 386, column: 1, scope: !5573)
!5586 = distinct !DISubprogram(name: "collect_condition_stmts", scope: !3, file: !3, line: 698, type: !5587, scopeLine: 699, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5587 = !DISubroutineType(types: !5588)
!5588 = !{null, !1635, !3601}
!5589 = !DILocalVariable(name: "loop", arg: 1, scope: !5586, file: !3, line: 698, type: !1635)
!5590 = !DILocation(line: 698, column: 39, scope: !5586)
!5591 = !DILocalVariable(name: "conds", arg: 2, scope: !5586, file: !3, line: 698, type: !3601)
!5592 = !DILocation(line: 698, column: 66, scope: !5586)
!5593 = !DILocalVariable(name: "i", scope: !5586, file: !3, line: 700, type: !7)
!5594 = !DILocation(line: 700, column: 12, scope: !5586)
!5595 = !DILocalVariable(name: "e", scope: !5586, file: !3, line: 701, type: !1657)
!5596 = !DILocation(line: 701, column: 8, scope: !5586)
!5597 = !DILocalVariable(name: "exits", scope: !5586, file: !3, line: 702, type: !5598)
!5598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5599, size: 64)
!5599 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !318, line: 152, baseType: !5600)
!5600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !318, line: 152, size: 128, elements: !5601)
!5601 = !{!5602}
!5602 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5600, file: !318, line: 152, baseType: !1650, size: 128)
!5603 = !DILocation(line: 702, column: 21, scope: !5586)
!5604 = !DILocation(line: 702, column: 50, scope: !5586)
!5605 = !DILocation(line: 702, column: 29, scope: !5586)
!5606 = !DILocation(line: 704, column: 10, scope: !5607)
!5607 = distinct !DILexicalBlock(scope: !5586, file: !3, line: 704, column: 3)
!5608 = !DILocation(line: 704, column: 8, scope: !5607)
!5609 = !DILocation(line: 704, column: 15, scope: !5610)
!5610 = distinct !DILexicalBlock(scope: !5607, file: !3, line: 704, column: 3)
!5611 = !DILocation(line: 704, column: 3, scope: !5607)
!5612 = !DILocalVariable(name: "cond", scope: !5613, file: !3, line: 706, type: !1677)
!5613 = distinct !DILexicalBlock(scope: !5610, file: !3, line: 705, column: 5)
!5614 = !DILocation(line: 706, column: 14, scope: !5613)
!5615 = !DILocation(line: 706, column: 32, scope: !5613)
!5616 = !DILocation(line: 706, column: 35, scope: !5613)
!5617 = !DILocation(line: 706, column: 21, scope: !5613)
!5618 = !DILocation(line: 708, column: 11, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5613, file: !3, line: 708, column: 11)
!5620 = !DILocation(line: 708, column: 11, scope: !5613)
!5621 = !DILocation(line: 709, column: 2, scope: !5619)
!5622 = !DILocation(line: 710, column: 5, scope: !5613)
!5623 = !DILocation(line: 704, column: 49, scope: !5610)
!5624 = !DILocation(line: 704, column: 3, scope: !5610)
!5625 = distinct !{!5625, !5611, !5626}
!5626 = !DILocation(line: 710, column: 5, scope: !5607)
!5627 = !DILocation(line: 712, column: 3, scope: !5586)
!5628 = !DILocation(line: 713, column: 1, scope: !5586)
!5629 = distinct !DISubprogram(name: "get_loop", scope: !561, file: !561, line: 417, type: !5630, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5630 = !DISubroutineType(types: !5631)
!5631 = !{!1635, !7}
!5632 = !DILocalVariable(name: "num", arg: 1, scope: !5629, file: !561, line: 417, type: !7)
!5633 = !DILocation(line: 417, column: 20, scope: !5629)
!5634 = !DILocation(line: 419, column: 10, scope: !5629)
!5635 = !DILocation(line: 419, column: 3, scope: !5629)
!5636 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !586, file: !586, line: 33, type: !5637, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5637 = !DISubroutineType(types: !5638)
!5638 = !{!7, !3705}
!5639 = !DILocalVariable(name: "vec_", arg: 1, scope: !5636, file: !586, line: 33, type: !3705)
!5640 = !DILocation(line: 33, column: 1, scope: !5636)
!5641 = distinct !DISubprogram(name: "VEC_gimple_base_pop", scope: !586, file: !586, line: 33, type: !5642, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5642 = !DISubroutineType(types: !5643)
!5643 = !{!1677, !5644}
!5644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2166, size: 64)
!5645 = !DILocalVariable(name: "vec_", arg: 1, scope: !5641, file: !586, line: 33, type: !5644)
!5646 = !DILocation(line: 33, column: 1, scope: !5641)
!5647 = !DILocalVariable(name: "obj_", scope: !5641, file: !586, line: 33, type: !1677)
!5648 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !318, file: !318, line: 150, type: !5649, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5649 = !DISubroutineType(types: !5650)
!5650 = !{!1605, !5651, !7, !5653}
!5651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5652, size: 64)
!5652 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1650)
!5653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1657, size: 64)
!5654 = !DILocalVariable(name: "vec_", arg: 1, scope: !5648, file: !318, line: 150, type: !5651)
!5655 = !DILocation(line: 150, column: 1, scope: !5648)
!5656 = !DILocalVariable(name: "ix_", arg: 2, scope: !5648, file: !318, line: 150, type: !7)
!5657 = !DILocalVariable(name: "ptr", arg: 3, scope: !5648, file: !318, line: 150, type: !5653)
!5658 = !DILocation(line: 150, column: 1, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5648, file: !318, line: 150, column: 1)
!5660 = !DILocation(line: 150, column: 1, scope: !5661)
!5661 = distinct !DILexicalBlock(scope: !5659, file: !318, line: 150, column: 1)
!5662 = !DILocation(line: 150, column: 1, scope: !5663)
!5663 = distinct !DILexicalBlock(scope: !5659, file: !318, line: 150, column: 1)
!5664 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !586, file: !586, line: 34, type: !5665, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5665 = !DISubroutineType(types: !5666)
!5666 = !{!3707, !3601, !1677}
!5667 = !DILocalVariable(name: "vec_", arg: 1, scope: !5664, file: !586, line: 34, type: !3601)
!5668 = !DILocation(line: 34, column: 1, scope: !5664)
!5669 = !DILocalVariable(name: "obj_", arg: 2, scope: !5664, file: !586, line: 34, type: !1677)
!5670 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !318, file: !318, line: 152, type: !5671, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5671 = !DISubroutineType(types: !5672)
!5672 = !{null, !5673}
!5673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5598, size: 64)
!5674 = !DILocalVariable(name: "vec_", arg: 1, scope: !5670, file: !318, line: 152, type: !5673)
!5675 = !DILocation(line: 152, column: 1, scope: !5670)
!5676 = !DILocation(line: 152, column: 1, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5670, file: !318, line: 152, column: 1)
!5678 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !586, file: !586, line: 34, type: !5679, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5679 = !DISubroutineType(types: !5680)
!5680 = !{!1605, !3601, !1605}
!5681 = !DILocalVariable(name: "vec_", arg: 1, scope: !5678, file: !586, line: 34, type: !3601)
!5682 = !DILocation(line: 34, column: 1, scope: !5678)
!5683 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5678, file: !586, line: 34, type: !1605)
!5684 = !DILocalVariable(name: "extend", scope: !5678, file: !586, line: 34, type: !1605)
!5685 = !DILocation(line: 34, column: 1, scope: !5686)
!5686 = distinct !DILexicalBlock(scope: !5678, file: !586, line: 34, column: 1)
!5687 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !586, file: !586, line: 33, type: !5688, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5688 = !DISubroutineType(types: !5689)
!5689 = !{!3707, !5644, !1677}
!5690 = !DILocalVariable(name: "vec_", arg: 1, scope: !5687, file: !586, line: 33, type: !5644)
!5691 = !DILocation(line: 33, column: 1, scope: !5687)
!5692 = !DILocalVariable(name: "obj_", arg: 2, scope: !5687, file: !586, line: 33, type: !1677)
!5693 = !DILocalVariable(name: "slot_", scope: !5687, file: !586, line: 33, type: !3707)
!5694 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !586, file: !586, line: 33, type: !5695, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5695 = !DISubroutineType(types: !5696)
!5696 = !{!1605, !5644, !1605}
!5697 = !DILocalVariable(name: "vec_", arg: 1, scope: !5694, file: !586, line: 33, type: !5644)
!5698 = !DILocation(line: 33, column: 1, scope: !5694)
!5699 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5694, file: !586, line: 33, type: !1605)
!5700 = distinct !DISubprogram(name: "VEC_bitmap_heap_reserve", scope: !579, file: !579, line: 607, type: !5701, scopeLine: 607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5701 = !DISubroutineType(types: !5702)
!5702 = !{!1605, !4132, !1605}
!5703 = !DILocalVariable(name: "vec_", arg: 1, scope: !5700, file: !579, line: 607, type: !4132)
!5704 = !DILocation(line: 607, column: 1, scope: !5700)
!5705 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5700, file: !579, line: 607, type: !1605)
!5706 = !DILocalVariable(name: "extend", scope: !5700, file: !579, line: 607, type: !1605)
!5707 = !DILocation(line: 607, column: 1, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5700, file: !579, line: 607, column: 1)
!5709 = distinct !DISubprogram(name: "VEC_bitmap_base_quick_push", scope: !579, file: !579, line: 606, type: !5710, scopeLine: 606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5710 = !DISubroutineType(types: !5711)
!5711 = !{!3267, !5712, !1552}
!5712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2958, size: 64)
!5713 = !DILocalVariable(name: "vec_", arg: 1, scope: !5709, file: !579, line: 606, type: !5712)
!5714 = !DILocation(line: 606, column: 1, scope: !5709)
!5715 = !DILocalVariable(name: "obj_", arg: 2, scope: !5709, file: !579, line: 606, type: !1552)
!5716 = !DILocalVariable(name: "slot_", scope: !5709, file: !579, line: 606, type: !3267)
!5717 = distinct !DISubprogram(name: "VEC_bitmap_base_space", scope: !579, file: !579, line: 606, type: !5718, scopeLine: 606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5718 = !DISubroutineType(types: !5719)
!5719 = !{!1605, !5712, !1605}
!5720 = !DILocalVariable(name: "vec_", arg: 1, scope: !5717, file: !579, line: 606, type: !5712)
!5721 = !DILocation(line: 606, column: 1, scope: !5717)
!5722 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5717, file: !579, line: 606, type: !1605)
!5723 = distinct !DISubprogram(name: "number_of_rw_in_rdg", scope: !3, file: !3, line: 989, type: !5724, scopeLine: 990, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5724 = !DISubroutineType(types: !5725)
!5725 = !{!1605, !3476}
!5726 = !DILocalVariable(name: "rdg", arg: 1, scope: !5723, file: !3, line: 989, type: !3476)
!5727 = !DILocation(line: 989, column: 36, scope: !5723)
!5728 = !DILocalVariable(name: "i", scope: !5723, file: !3, line: 991, type: !1605)
!5729 = !DILocation(line: 991, column: 7, scope: !5723)
!5730 = !DILocalVariable(name: "res", scope: !5723, file: !3, line: 991, type: !1605)
!5731 = !DILocation(line: 991, column: 10, scope: !5723)
!5732 = !DILocation(line: 993, column: 10, scope: !5733)
!5733 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 993, column: 3)
!5734 = !DILocation(line: 993, column: 8, scope: !5733)
!5735 = !DILocation(line: 993, column: 15, scope: !5736)
!5736 = distinct !DILexicalBlock(scope: !5733, file: !3, line: 993, column: 3)
!5737 = !DILocation(line: 993, column: 19, scope: !5736)
!5738 = !DILocation(line: 993, column: 24, scope: !5736)
!5739 = !DILocation(line: 993, column: 17, scope: !5736)
!5740 = !DILocation(line: 993, column: 3, scope: !5733)
!5741 = !DILocation(line: 995, column: 11, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5743, file: !3, line: 995, column: 11)
!5743 = distinct !DILexicalBlock(scope: !5736, file: !3, line: 994, column: 5)
!5744 = !DILocation(line: 995, column: 11, scope: !5743)
!5745 = !DILocation(line: 996, column: 2, scope: !5742)
!5746 = !DILocation(line: 998, column: 11, scope: !5747)
!5747 = distinct !DILexicalBlock(scope: !5743, file: !3, line: 998, column: 11)
!5748 = !DILocation(line: 998, column: 11, scope: !5743)
!5749 = !DILocation(line: 999, column: 2, scope: !5747)
!5750 = !DILocation(line: 1000, column: 5, scope: !5743)
!5751 = !DILocation(line: 993, column: 37, scope: !5736)
!5752 = !DILocation(line: 993, column: 3, scope: !5736)
!5753 = distinct !{!5753, !5740, !5754}
!5754 = !DILocation(line: 1000, column: 5, scope: !5733)
!5755 = !DILocation(line: 1002, column: 10, scope: !5723)
!5756 = !DILocation(line: 1002, column: 3, scope: !5723)
!5757 = distinct !DISubprogram(name: "number_of_rw_in_partition", scope: !3, file: !3, line: 1009, type: !5758, scopeLine: 1010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5758 = !DISubroutineType(types: !5759)
!5759 = !{!1605, !3476, !1552}
!5760 = !DILocalVariable(name: "rdg", arg: 1, scope: !5757, file: !3, line: 1009, type: !3476)
!5761 = !DILocation(line: 1009, column: 42, scope: !5757)
!5762 = !DILocalVariable(name: "partition", arg: 2, scope: !5757, file: !3, line: 1009, type: !1552)
!5763 = !DILocation(line: 1009, column: 54, scope: !5757)
!5764 = !DILocalVariable(name: "res", scope: !5757, file: !3, line: 1011, type: !1605)
!5765 = !DILocation(line: 1011, column: 7, scope: !5757)
!5766 = !DILocalVariable(name: "i", scope: !5757, file: !3, line: 1012, type: !7)
!5767 = !DILocation(line: 1012, column: 12, scope: !5757)
!5768 = !DILocalVariable(name: "ii", scope: !5757, file: !3, line: 1013, type: !4665)
!5769 = !DILocation(line: 1013, column: 19, scope: !5757)
!5770 = !DILocation(line: 1015, column: 3, scope: !5771)
!5771 = distinct !DILexicalBlock(scope: !5757, file: !3, line: 1015, column: 3)
!5772 = !DILocation(line: 1015, column: 3, scope: !5773)
!5773 = distinct !DILexicalBlock(scope: !5771, file: !3, line: 1015, column: 3)
!5774 = !DILocation(line: 1017, column: 11, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5776, file: !3, line: 1017, column: 11)
!5776 = distinct !DILexicalBlock(scope: !5773, file: !3, line: 1016, column: 5)
!5777 = !DILocation(line: 1017, column: 11, scope: !5776)
!5778 = !DILocation(line: 1018, column: 2, scope: !5775)
!5779 = !DILocation(line: 1020, column: 11, scope: !5780)
!5780 = distinct !DILexicalBlock(scope: !5776, file: !3, line: 1020, column: 11)
!5781 = !DILocation(line: 1020, column: 11, scope: !5776)
!5782 = !DILocation(line: 1021, column: 2, scope: !5780)
!5783 = !DILocation(line: 1022, column: 5, scope: !5776)
!5784 = distinct !{!5784, !5770, !5785}
!5785 = !DILocation(line: 1022, column: 5, scope: !5771)
!5786 = !DILocation(line: 1024, column: 10, scope: !5757)
!5787 = !DILocation(line: 1024, column: 3, scope: !5757)
!5788 = distinct !DISubprogram(name: "generate_builtin", scope: !3, file: !3, line: 359, type: !4304, scopeLine: 360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!5789 = !DILocalVariable(name: "loop", arg: 1, scope: !5788, file: !3, line: 359, type: !1635)
!5790 = !DILocation(line: 359, column: 32, scope: !5788)
!5791 = !DILocalVariable(name: "partition", arg: 2, scope: !5788, file: !3, line: 359, type: !1552)
!5792 = !DILocation(line: 359, column: 45, scope: !5788)
!5793 = !DILocalVariable(name: "copy_p", arg: 3, scope: !5788, file: !3, line: 359, type: !1815)
!5794 = !DILocation(line: 359, column: 61, scope: !5788)
!5795 = !DILocalVariable(name: "res", scope: !5788, file: !3, line: 361, type: !1815)
!5796 = !DILocation(line: 361, column: 8, scope: !5788)
!5797 = !DILocalVariable(name: "i", scope: !5788, file: !3, line: 362, type: !7)
!5798 = !DILocation(line: 362, column: 12, scope: !5788)
!5799 = !DILocalVariable(name: "x", scope: !5788, file: !3, line: 362, type: !7)
!5800 = !DILocation(line: 362, column: 15, scope: !5788)
!5801 = !DILocalVariable(name: "bbs", scope: !5788, file: !3, line: 363, type: !5802)
!5802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2077, size: 64)
!5803 = !DILocation(line: 363, column: 16, scope: !5788)
!5804 = !DILocalVariable(name: "write", scope: !5788, file: !3, line: 364, type: !1677)
!5805 = !DILocation(line: 364, column: 10, scope: !5788)
!5806 = !DILocalVariable(name: "op0", scope: !5788, file: !3, line: 365, type: !1702)
!5807 = !DILocation(line: 365, column: 8, scope: !5788)
!5808 = !DILocalVariable(name: "op1", scope: !5788, file: !3, line: 365, type: !1702)
!5809 = !DILocation(line: 365, column: 13, scope: !5788)
!5810 = !DILocalVariable(name: "bsi", scope: !5788, file: !3, line: 366, type: !5811)
!5811 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !586, line: 265, baseType: !5812)
!5812 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !586, line: 254, size: 192, elements: !5813)
!5813 = !{!5814, !5815, !5816}
!5814 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !5812, file: !586, line: 257, baseType: !1672, size: 64)
!5815 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !5812, file: !586, line: 263, baseType: !1667, size: 64, offset: 64)
!5816 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !5812, file: !586, line: 264, baseType: !2077, size: 64, offset: 128)
!5817 = !DILocation(line: 366, column: 24, scope: !5788)
!5818 = !DILocalVariable(name: "nb_iter", scope: !5788, file: !3, line: 367, type: !1702)
!5819 = !DILocation(line: 367, column: 8, scope: !5788)
!5820 = !DILocation(line: 367, column: 50, scope: !5788)
!5821 = !DILocation(line: 367, column: 18, scope: !5788)
!5822 = !DILocation(line: 369, column: 8, scope: !5823)
!5823 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 369, column: 7)
!5824 = !DILocation(line: 369, column: 16, scope: !5823)
!5825 = !DILocation(line: 369, column: 19, scope: !5823)
!5826 = !DILocation(line: 369, column: 30, scope: !5823)
!5827 = !DILocation(line: 369, column: 27, scope: !5823)
!5828 = !DILocation(line: 369, column: 7, scope: !5788)
!5829 = !DILocation(line: 370, column: 5, scope: !5823)
!5830 = !DILocation(line: 372, column: 37, scope: !5788)
!5831 = !DILocation(line: 372, column: 9, scope: !5788)
!5832 = !DILocation(line: 372, column: 7, scope: !5788)
!5833 = !DILocation(line: 374, column: 10, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 374, column: 3)
!5835 = !DILocation(line: 374, column: 8, scope: !5834)
!5836 = !DILocation(line: 374, column: 15, scope: !5837)
!5837 = distinct !DILexicalBlock(scope: !5834, file: !3, line: 374, column: 3)
!5838 = !DILocation(line: 374, column: 19, scope: !5837)
!5839 = !DILocation(line: 374, column: 25, scope: !5837)
!5840 = !DILocation(line: 374, column: 17, scope: !5837)
!5841 = !DILocation(line: 374, column: 3, scope: !5834)
!5842 = !DILocalVariable(name: "bb", scope: !5843, file: !3, line: 376, type: !2077)
!5843 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 375, column: 5)
!5844 = !DILocation(line: 376, column: 19, scope: !5843)
!5845 = !DILocation(line: 376, column: 24, scope: !5843)
!5846 = !DILocation(line: 376, column: 28, scope: !5843)
!5847 = !DILocation(line: 378, column: 34, scope: !5848)
!5848 = distinct !DILexicalBlock(scope: !5843, file: !3, line: 378, column: 7)
!5849 = !DILocation(line: 378, column: 18, scope: !5848)
!5850 = !DILocation(line: 378, column: 12, scope: !5848)
!5851 = !DILocation(line: 378, column: 40, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !5848, file: !3, line: 378, column: 7)
!5853 = !DILocation(line: 378, column: 39, scope: !5852)
!5854 = !DILocation(line: 378, column: 7, scope: !5848)
!5855 = !DILocation(line: 379, column: 3, scope: !5852)
!5856 = !DILocation(line: 379, column: 2, scope: !5852)
!5857 = !DILocation(line: 378, column: 57, scope: !5852)
!5858 = !DILocation(line: 378, column: 7, scope: !5852)
!5859 = distinct !{!5859, !5854, !5860}
!5860 = !DILocation(line: 379, column: 3, scope: !5848)
!5861 = !DILocation(line: 381, column: 32, scope: !5862)
!5862 = distinct !DILexicalBlock(scope: !5843, file: !3, line: 381, column: 7)
!5863 = !DILocation(line: 381, column: 18, scope: !5862)
!5864 = !DILocation(line: 381, column: 12, scope: !5862)
!5865 = !DILocation(line: 381, column: 38, scope: !5866)
!5866 = distinct !DILexicalBlock(scope: !5862, file: !3, line: 381, column: 7)
!5867 = !DILocation(line: 381, column: 37, scope: !5866)
!5868 = !DILocation(line: 381, column: 7, scope: !5862)
!5869 = !DILocalVariable(name: "stmt", scope: !5870, file: !3, line: 383, type: !1677)
!5870 = distinct !DILexicalBlock(scope: !5866, file: !3, line: 382, column: 2)
!5871 = !DILocation(line: 383, column: 11, scope: !5870)
!5872 = !DILocation(line: 383, column: 18, scope: !5870)
!5873 = !DILocation(line: 385, column: 22, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 385, column: 8)
!5875 = !DILocation(line: 385, column: 34, scope: !5874)
!5876 = !DILocation(line: 385, column: 8, scope: !5874)
!5877 = !DILocation(line: 386, column: 8, scope: !5874)
!5878 = !DILocation(line: 386, column: 29, scope: !5874)
!5879 = !DILocation(line: 386, column: 11, scope: !5874)
!5880 = !DILocation(line: 387, column: 8, scope: !5874)
!5881 = !DILocation(line: 387, column: 46, scope: !5874)
!5882 = !DILocation(line: 387, column: 27, scope: !5874)
!5883 = !DILocation(line: 387, column: 12, scope: !5874)
!5884 = !DILocation(line: 385, column: 8, scope: !5870)
!5885 = !DILocation(line: 391, column: 12, scope: !5886)
!5886 = distinct !DILexicalBlock(scope: !5887, file: !3, line: 391, column: 12)
!5887 = distinct !DILexicalBlock(scope: !5874, file: !3, line: 388, column: 6)
!5888 = !DILocation(line: 391, column: 18, scope: !5886)
!5889 = !DILocation(line: 391, column: 12, scope: !5887)
!5890 = !DILocation(line: 392, column: 3, scope: !5886)
!5891 = !DILocation(line: 394, column: 16, scope: !5887)
!5892 = !DILocation(line: 394, column: 14, scope: !5887)
!5893 = !DILocation(line: 395, column: 12, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5887, file: !3, line: 395, column: 12)
!5895 = !DILocation(line: 395, column: 18, scope: !5894)
!5896 = !DILocation(line: 395, column: 24, scope: !5894)
!5897 = !DILocation(line: 395, column: 15, scope: !5894)
!5898 = !DILocation(line: 395, column: 12, scope: !5887)
!5899 = !DILocation(line: 396, column: 41, scope: !5894)
!5900 = !DILocation(line: 396, column: 13, scope: !5894)
!5901 = !DILocation(line: 396, column: 11, scope: !5894)
!5902 = !DILocation(line: 396, column: 3, scope: !5894)
!5903 = !DILocation(line: 397, column: 6, scope: !5887)
!5904 = !DILocation(line: 398, column: 2, scope: !5870)
!5905 = !DILocation(line: 381, column: 55, scope: !5866)
!5906 = !DILocation(line: 381, column: 7, scope: !5866)
!5907 = distinct !{!5907, !5868, !5908}
!5908 = !DILocation(line: 398, column: 2, scope: !5862)
!5909 = !DILocation(line: 399, column: 5, scope: !5843)
!5910 = !DILocation(line: 374, column: 37, scope: !5837)
!5911 = !DILocation(line: 374, column: 3, scope: !5837)
!5912 = distinct !{!5912, !5841, !5913}
!5913 = !DILocation(line: 399, column: 5, scope: !5834)
!5914 = !DILocation(line: 401, column: 8, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 401, column: 7)
!5916 = !DILocation(line: 401, column: 7, scope: !5788)
!5917 = !DILocation(line: 402, column: 5, scope: !5915)
!5918 = !DILocation(line: 404, column: 28, scope: !5788)
!5919 = !DILocation(line: 404, column: 9, scope: !5788)
!5920 = !DILocation(line: 404, column: 7, scope: !5788)
!5921 = !DILocation(line: 405, column: 29, scope: !5788)
!5922 = !DILocation(line: 405, column: 9, scope: !5788)
!5923 = !DILocation(line: 405, column: 7, scope: !5788)
!5924 = !DILocation(line: 407, column: 9, scope: !5925)
!5925 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 407, column: 7)
!5926 = !DILocation(line: 407, column: 25, scope: !5925)
!5927 = !DILocation(line: 408, column: 2, scope: !5925)
!5928 = !DILocation(line: 408, column: 5, scope: !5925)
!5929 = !DILocation(line: 408, column: 21, scope: !5925)
!5930 = !DILocation(line: 407, column: 7, scope: !5788)
!5931 = !DILocation(line: 409, column: 5, scope: !5925)
!5932 = !DILocation(line: 412, column: 43, scope: !5788)
!5933 = !DILocation(line: 412, column: 22, scope: !5788)
!5934 = !DILocation(line: 412, column: 50, scope: !5788)
!5935 = !DILocation(line: 412, column: 9, scope: !5788)
!5936 = !DILocation(line: 414, column: 31, scope: !5937)
!5937 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 414, column: 7)
!5938 = !DILocation(line: 414, column: 7, scope: !5937)
!5939 = !DILocation(line: 414, column: 38, scope: !5937)
!5940 = !DILocation(line: 415, column: 7, scope: !5937)
!5941 = !DILocation(line: 415, column: 26, scope: !5937)
!5942 = !DILocation(line: 415, column: 11, scope: !5937)
!5943 = !DILocation(line: 415, column: 31, scope: !5937)
!5944 = !DILocation(line: 415, column: 46, scope: !5937)
!5945 = !DILocation(line: 415, column: 34, scope: !5937)
!5946 = !DILocation(line: 414, column: 7, scope: !5788)
!5947 = !DILocation(line: 416, column: 33, scope: !5937)
!5948 = !DILocation(line: 416, column: 40, scope: !5937)
!5949 = !DILocation(line: 416, column: 45, scope: !5937)
!5950 = !DILocation(line: 416, column: 11, scope: !5937)
!5951 = !DILocation(line: 416, column: 9, scope: !5937)
!5952 = !DILocation(line: 416, column: 5, scope: !5937)
!5953 = !DILocation(line: 420, column: 7, scope: !5954)
!5954 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 420, column: 7)
!5955 = !DILocation(line: 420, column: 11, scope: !5954)
!5956 = !DILocation(line: 420, column: 15, scope: !5954)
!5957 = !DILocation(line: 420, column: 7, scope: !5788)
!5958 = !DILocalVariable(name: "nbbs", scope: !5959, file: !3, line: 422, type: !7)
!5959 = distinct !DILexicalBlock(scope: !5954, file: !3, line: 421, column: 5)
!5960 = !DILocation(line: 422, column: 16, scope: !5959)
!5961 = !DILocation(line: 422, column: 23, scope: !5959)
!5962 = !DILocation(line: 422, column: 29, scope: !5959)
!5963 = !DILocalVariable(name: "src", scope: !5959, file: !3, line: 423, type: !2077)
!5964 = !DILocation(line: 423, column: 19, scope: !5959)
!5965 = !DILocation(line: 423, column: 46, scope: !5959)
!5966 = !DILocation(line: 423, column: 25, scope: !5959)
!5967 = !DILocation(line: 423, column: 53, scope: !5959)
!5968 = !DILocalVariable(name: "dest", scope: !5959, file: !3, line: 424, type: !2077)
!5969 = !DILocation(line: 424, column: 19, scope: !5959)
!5970 = !DILocation(line: 424, column: 39, scope: !5959)
!5971 = !DILocation(line: 424, column: 26, scope: !5959)
!5972 = !DILocation(line: 424, column: 46, scope: !5959)
!5973 = !DILocation(line: 425, column: 18, scope: !5959)
!5974 = !DILocation(line: 425, column: 7, scope: !5959)
!5975 = !DILocation(line: 426, column: 18, scope: !5959)
!5976 = !DILocation(line: 426, column: 23, scope: !5959)
!5977 = !DILocation(line: 426, column: 7, scope: !5959)
!5978 = !DILocation(line: 427, column: 25, scope: !5959)
!5979 = !DILocation(line: 427, column: 7, scope: !5959)
!5980 = !DILocation(line: 429, column: 14, scope: !5981)
!5981 = distinct !DILexicalBlock(scope: !5959, file: !3, line: 429, column: 7)
!5982 = !DILocation(line: 429, column: 12, scope: !5981)
!5983 = !DILocation(line: 429, column: 19, scope: !5984)
!5984 = distinct !DILexicalBlock(scope: !5981, file: !3, line: 429, column: 7)
!5985 = !DILocation(line: 429, column: 23, scope: !5984)
!5986 = !DILocation(line: 429, column: 21, scope: !5984)
!5987 = !DILocation(line: 429, column: 7, scope: !5981)
!5988 = !DILocation(line: 430, column: 22, scope: !5984)
!5989 = !DILocation(line: 430, column: 26, scope: !5984)
!5990 = !DILocation(line: 430, column: 2, scope: !5984)
!5991 = !DILocation(line: 429, column: 30, scope: !5984)
!5992 = !DILocation(line: 429, column: 7, scope: !5984)
!5993 = distinct !{!5993, !5987, !5994}
!5994 = !DILocation(line: 430, column: 28, scope: !5981)
!5995 = !DILocation(line: 432, column: 48, scope: !5959)
!5996 = !DILocation(line: 433, column: 48, scope: !5959)
!5997 = !DILocation(line: 433, column: 11, scope: !5959)
!5998 = !DILocation(line: 432, column: 7, scope: !5959)
!5999 = !DILocation(line: 434, column: 5, scope: !5959)
!6000 = !DILabel(scope: !5788, name: "end", file: !3, line: 436)
!6001 = !DILocation(line: 436, column: 2, scope: !5788)
!6002 = !DILocation(line: 437, column: 9, scope: !5788)
!6003 = !DILocation(line: 437, column: 3, scope: !5788)
!6004 = !DILocation(line: 438, column: 10, scope: !5788)
!6005 = !DILocation(line: 438, column: 3, scope: !5788)
!6006 = !DILocation(line: 439, column: 1, scope: !5788)
!6007 = distinct !DISubprogram(name: "generate_loops_for_partition", scope: !3, file: !3, line: 178, type: !4304, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6008 = !DILocalVariable(name: "loop", arg: 1, scope: !6007, file: !3, line: 178, type: !1635)
!6009 = !DILocation(line: 178, column: 44, scope: !6007)
!6010 = !DILocalVariable(name: "partition", arg: 2, scope: !6007, file: !3, line: 178, type: !1552)
!6011 = !DILocation(line: 178, column: 57, scope: !6007)
!6012 = !DILocalVariable(name: "copy_p", arg: 3, scope: !6007, file: !3, line: 178, type: !1815)
!6013 = !DILocation(line: 178, column: 73, scope: !6007)
!6014 = !DILocalVariable(name: "i", scope: !6007, file: !3, line: 180, type: !7)
!6015 = !DILocation(line: 180, column: 12, scope: !6007)
!6016 = !DILocalVariable(name: "x", scope: !6007, file: !3, line: 180, type: !7)
!6017 = !DILocation(line: 180, column: 15, scope: !6007)
!6018 = !DILocalVariable(name: "bsi", scope: !6007, file: !3, line: 181, type: !5811)
!6019 = !DILocation(line: 181, column: 24, scope: !6007)
!6020 = !DILocalVariable(name: "bbs", scope: !6007, file: !3, line: 182, type: !5802)
!6021 = !DILocation(line: 182, column: 16, scope: !6007)
!6022 = !DILocation(line: 184, column: 7, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 184, column: 7)
!6024 = !DILocation(line: 184, column: 7, scope: !6007)
!6025 = !DILocation(line: 186, column: 32, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 185, column: 5)
!6027 = !DILocation(line: 186, column: 14, scope: !6026)
!6028 = !DILocation(line: 186, column: 12, scope: !6026)
!6029 = !DILocation(line: 187, column: 25, scope: !6026)
!6030 = !DILocation(line: 187, column: 7, scope: !6026)
!6031 = !DILocation(line: 188, column: 29, scope: !6026)
!6032 = !DILocation(line: 188, column: 7, scope: !6026)
!6033 = !DILocation(line: 189, column: 5, scope: !6026)
!6034 = !DILocation(line: 191, column: 7, scope: !6035)
!6035 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 191, column: 7)
!6036 = !DILocation(line: 191, column: 12, scope: !6035)
!6037 = !DILocation(line: 191, column: 7, scope: !6007)
!6038 = !DILocation(line: 192, column: 5, scope: !6035)
!6039 = !DILocation(line: 197, column: 37, scope: !6007)
!6040 = !DILocation(line: 197, column: 9, scope: !6007)
!6041 = !DILocation(line: 197, column: 7, scope: !6007)
!6042 = !DILocation(line: 199, column: 10, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 199, column: 3)
!6044 = !DILocation(line: 199, column: 17, scope: !6043)
!6045 = !DILocation(line: 199, column: 8, scope: !6043)
!6046 = !DILocation(line: 199, column: 22, scope: !6047)
!6047 = distinct !DILexicalBlock(scope: !6043, file: !3, line: 199, column: 3)
!6048 = !DILocation(line: 199, column: 26, scope: !6047)
!6049 = !DILocation(line: 199, column: 32, scope: !6047)
!6050 = !DILocation(line: 199, column: 24, scope: !6047)
!6051 = !DILocation(line: 199, column: 3, scope: !6043)
!6052 = !DILocalVariable(name: "bb", scope: !6053, file: !3, line: 201, type: !2077)
!6053 = distinct !DILexicalBlock(scope: !6047, file: !3, line: 200, column: 5)
!6054 = !DILocation(line: 201, column: 19, scope: !6053)
!6055 = !DILocation(line: 201, column: 24, scope: !6053)
!6056 = !DILocation(line: 201, column: 28, scope: !6053)
!6057 = !DILocation(line: 203, column: 34, scope: !6058)
!6058 = distinct !DILexicalBlock(scope: !6053, file: !3, line: 203, column: 7)
!6059 = !DILocation(line: 203, column: 18, scope: !6058)
!6060 = !DILocation(line: 203, column: 12, scope: !6058)
!6061 = !DILocation(line: 203, column: 40, scope: !6062)
!6062 = distinct !DILexicalBlock(scope: !6058, file: !3, line: 203, column: 7)
!6063 = !DILocation(line: 203, column: 39, scope: !6062)
!6064 = !DILocation(line: 203, column: 7, scope: !6058)
!6065 = !DILocation(line: 204, column: 21, scope: !6066)
!6066 = distinct !DILexicalBlock(scope: !6062, file: !3, line: 204, column: 6)
!6067 = !DILocation(line: 204, column: 33, scope: !6066)
!6068 = !DILocation(line: 204, column: 7, scope: !6066)
!6069 = !DILocation(line: 204, column: 6, scope: !6062)
!6070 = !DILocation(line: 205, column: 4, scope: !6066)
!6071 = !DILocation(line: 207, column: 4, scope: !6066)
!6072 = !DILocation(line: 203, column: 7, scope: !6062)
!6073 = distinct !{!6073, !6064, !6074}
!6074 = !DILocation(line: 207, column: 18, scope: !6058)
!6075 = !DILocation(line: 209, column: 32, scope: !6076)
!6076 = distinct !DILexicalBlock(scope: !6053, file: !3, line: 209, column: 7)
!6077 = !DILocation(line: 209, column: 18, scope: !6076)
!6078 = !DILocation(line: 209, column: 12, scope: !6076)
!6079 = !DILocation(line: 209, column: 38, scope: !6080)
!6080 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 209, column: 7)
!6081 = !DILocation(line: 209, column: 37, scope: !6080)
!6082 = !DILocation(line: 209, column: 7, scope: !6076)
!6083 = !DILocation(line: 210, column: 19, scope: !6084)
!6084 = distinct !DILexicalBlock(scope: !6080, file: !3, line: 210, column: 6)
!6085 = !DILocation(line: 210, column: 6, scope: !6084)
!6086 = !DILocation(line: 210, column: 35, scope: !6084)
!6087 = !DILocation(line: 211, column: 6, scope: !6084)
!6088 = !DILocation(line: 211, column: 24, scope: !6084)
!6089 = !DILocation(line: 211, column: 36, scope: !6084)
!6090 = !DILocation(line: 211, column: 10, scope: !6084)
!6091 = !DILocation(line: 210, column: 6, scope: !6080)
!6092 = !DILocation(line: 212, column: 4, scope: !6084)
!6093 = !DILocation(line: 214, column: 4, scope: !6084)
!6094 = !DILocation(line: 209, column: 7, scope: !6080)
!6095 = distinct !{!6095, !6082, !6096}
!6096 = !DILocation(line: 214, column: 18, scope: !6076)
!6097 = !DILocation(line: 216, column: 26, scope: !6053)
!6098 = !DILocation(line: 216, column: 2, scope: !6053)
!6099 = !DILocation(line: 217, column: 5, scope: !6053)
!6100 = !DILocation(line: 199, column: 44, scope: !6047)
!6101 = !DILocation(line: 199, column: 3, scope: !6047)
!6102 = distinct !{!6102, !6051, !6103}
!6103 = !DILocation(line: 217, column: 5, scope: !6043)
!6104 = !DILocation(line: 219, column: 9, scope: !6007)
!6105 = !DILocation(line: 219, column: 3, scope: !6007)
!6106 = !DILocation(line: 220, column: 3, scope: !6007)
!6107 = !DILocation(line: 221, column: 1, scope: !6007)
!6108 = distinct !DISubprogram(name: "gsi_end_p", scope: !586, file: !586, line: 4467, type: !6109, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6109 = !DISubroutineType(types: !6110)
!6110 = !{!1815, !5811}
!6111 = !DILocalVariable(name: "i", arg: 1, scope: !6108, file: !586, line: 4467, type: !5811)
!6112 = !DILocation(line: 4467, column: 33, scope: !6108)
!6113 = !DILocation(line: 4469, column: 12, scope: !6108)
!6114 = !DILocation(line: 4469, column: 16, scope: !6108)
!6115 = !DILocation(line: 4469, column: 10, scope: !6108)
!6116 = !DILocation(line: 4469, column: 3, scope: !6108)
!6117 = distinct !DISubprogram(name: "gsi_next", scope: !586, file: !586, line: 4485, type: !6118, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6118 = !DISubroutineType(types: !6119)
!6119 = !{null, !6120}
!6120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5811, size: 64)
!6121 = !DILocalVariable(name: "i", arg: 1, scope: !6117, file: !586, line: 4485, type: !6120)
!6122 = !DILocation(line: 4485, column: 33, scope: !6117)
!6123 = !DILocation(line: 4487, column: 12, scope: !6117)
!6124 = !DILocation(line: 4487, column: 15, scope: !6117)
!6125 = !DILocation(line: 4487, column: 20, scope: !6117)
!6126 = !DILocation(line: 4487, column: 3, scope: !6117)
!6127 = !DILocation(line: 4487, column: 6, scope: !6117)
!6128 = !DILocation(line: 4487, column: 10, scope: !6117)
!6129 = !DILocation(line: 4488, column: 1, scope: !6117)
!6130 = distinct !DISubprogram(name: "gsi_start_bb", scope: !586, file: !586, line: 4418, type: !6131, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6131 = !DISubroutineType(types: !6132)
!6132 = !{!5811, !2077}
!6133 = !DILocalVariable(name: "bb", arg: 1, scope: !6130, file: !586, line: 4418, type: !2077)
!6134 = !DILocation(line: 4418, column: 27, scope: !6130)
!6135 = !DILocalVariable(name: "i", scope: !6130, file: !586, line: 4420, type: !5811)
!6136 = !DILocation(line: 4420, column: 24, scope: !6130)
!6137 = !DILocalVariable(name: "seq", scope: !6130, file: !586, line: 4421, type: !1667)
!6138 = !DILocation(line: 4421, column: 14, scope: !6130)
!6139 = !DILocation(line: 4423, column: 17, scope: !6130)
!6140 = !DILocation(line: 4423, column: 9, scope: !6130)
!6141 = !DILocation(line: 4423, column: 7, scope: !6130)
!6142 = !DILocation(line: 4424, column: 29, scope: !6130)
!6143 = !DILocation(line: 4424, column: 11, scope: !6130)
!6144 = !DILocation(line: 4424, column: 5, scope: !6130)
!6145 = !DILocation(line: 4424, column: 9, scope: !6130)
!6146 = !DILocation(line: 4425, column: 11, scope: !6130)
!6147 = !DILocation(line: 4425, column: 5, scope: !6130)
!6148 = !DILocation(line: 4425, column: 9, scope: !6130)
!6149 = !DILocation(line: 4426, column: 10, scope: !6130)
!6150 = !DILocation(line: 4426, column: 5, scope: !6130)
!6151 = !DILocation(line: 4426, column: 8, scope: !6130)
!6152 = !DILocation(line: 4428, column: 3, scope: !6130)
!6153 = distinct !DISubprogram(name: "gsi_stmt", scope: !586, file: !586, line: 4501, type: !6154, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6154 = !DISubroutineType(types: !6155)
!6155 = !{!1677, !5811}
!6156 = !DILocalVariable(name: "i", arg: 1, scope: !6153, file: !586, line: 4501, type: !5811)
!6157 = !DILocation(line: 4501, column: 32, scope: !6153)
!6158 = !DILocation(line: 4503, column: 12, scope: !6153)
!6159 = !DILocation(line: 4503, column: 17, scope: !6153)
!6160 = !DILocation(line: 4503, column: 3, scope: !6153)
!6161 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !586, file: !586, line: 1727, type: !5125, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6162 = !DILocalVariable(name: "gs", arg: 1, scope: !6161, file: !586, line: 1727, type: !5058)
!6163 = !DILocation(line: 1727, column: 34, scope: !6161)
!6164 = !DILocation(line: 1730, column: 21, scope: !6161)
!6165 = !DILocation(line: 1730, column: 10, scope: !6161)
!6166 = !DILocation(line: 1730, column: 3, scope: !6161)
!6167 = distinct !DISubprogram(name: "gsi_last_bb", scope: !586, file: !586, line: 4450, type: !6131, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6168 = !DILocalVariable(name: "bb", arg: 1, scope: !6167, file: !586, line: 4450, type: !2077)
!6169 = !DILocation(line: 4450, column: 26, scope: !6167)
!6170 = !DILocalVariable(name: "i", scope: !6167, file: !586, line: 4452, type: !5811)
!6171 = !DILocation(line: 4452, column: 24, scope: !6167)
!6172 = !DILocalVariable(name: "seq", scope: !6167, file: !586, line: 4453, type: !1667)
!6173 = !DILocation(line: 4453, column: 14, scope: !6167)
!6174 = !DILocation(line: 4455, column: 17, scope: !6167)
!6175 = !DILocation(line: 4455, column: 9, scope: !6167)
!6176 = !DILocation(line: 4455, column: 7, scope: !6167)
!6177 = !DILocation(line: 4456, column: 28, scope: !6167)
!6178 = !DILocation(line: 4456, column: 11, scope: !6167)
!6179 = !DILocation(line: 4456, column: 5, scope: !6167)
!6180 = !DILocation(line: 4456, column: 9, scope: !6167)
!6181 = !DILocation(line: 4457, column: 11, scope: !6167)
!6182 = !DILocation(line: 4457, column: 5, scope: !6167)
!6183 = !DILocation(line: 4457, column: 9, scope: !6167)
!6184 = !DILocation(line: 4458, column: 10, scope: !6167)
!6185 = !DILocation(line: 4458, column: 5, scope: !6167)
!6186 = !DILocation(line: 4458, column: 8, scope: !6167)
!6187 = !DILocation(line: 4460, column: 3, scope: !6167)
!6188 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !586, file: !586, line: 1815, type: !6189, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6189 = !DISubroutineType(types: !6190)
!6190 = !{!366, !5058}
!6191 = !DILocalVariable(name: "gs", arg: 1, scope: !6188, file: !586, line: 1815, type: !5058)
!6192 = !DILocation(line: 1815, column: 38, scope: !6188)
!6193 = !DILocalVariable(name: "code", scope: !6188, file: !586, line: 1817, type: !366)
!6194 = !DILocation(line: 1817, column: 18, scope: !6188)
!6195 = !DILocation(line: 1820, column: 28, scope: !6188)
!6196 = !DILocation(line: 1820, column: 10, scope: !6188)
!6197 = !DILocation(line: 1820, column: 8, scope: !6188)
!6198 = !DILocation(line: 1821, column: 29, scope: !6199)
!6199 = distinct !DILexicalBlock(scope: !6188, file: !586, line: 1821, column: 7)
!6200 = !DILocation(line: 1821, column: 7, scope: !6199)
!6201 = !DILocation(line: 1821, column: 35, scope: !6199)
!6202 = !DILocation(line: 1821, column: 7, scope: !6188)
!6203 = !DILocation(line: 1822, column: 12, scope: !6199)
!6204 = !DILocation(line: 1822, column: 10, scope: !6199)
!6205 = !DILocation(line: 1822, column: 5, scope: !6199)
!6206 = !DILocation(line: 1824, column: 10, scope: !6188)
!6207 = !DILocation(line: 1824, column: 3, scope: !6188)
!6208 = distinct !DISubprogram(name: "generate_memset_zero", scope: !3, file: !3, line: 245, type: !6209, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6209 = !DISubroutineType(types: !6210)
!6210 = !{!1815, !1677, !1702, !1702, !5811}
!6211 = !DILocalVariable(name: "stmt", arg: 1, scope: !6208, file: !3, line: 245, type: !1677)
!6212 = !DILocation(line: 245, column: 30, scope: !6208)
!6213 = !DILocalVariable(name: "op0", arg: 2, scope: !6208, file: !3, line: 245, type: !1702)
!6214 = !DILocation(line: 245, column: 41, scope: !6208)
!6215 = !DILocalVariable(name: "nb_iter", arg: 3, scope: !6208, file: !3, line: 245, type: !1702)
!6216 = !DILocation(line: 245, column: 51, scope: !6208)
!6217 = !DILocalVariable(name: "bsi", arg: 4, scope: !6208, file: !3, line: 246, type: !5811)
!6218 = !DILocation(line: 246, column: 30, scope: !6208)
!6219 = !DILocalVariable(name: "addr_base", scope: !6208, file: !3, line: 248, type: !1702)
!6220 = !DILocation(line: 248, column: 8, scope: !6208)
!6221 = !DILocalVariable(name: "nb_bytes", scope: !6208, file: !3, line: 248, type: !1702)
!6222 = !DILocation(line: 248, column: 19, scope: !6208)
!6223 = !DILocalVariable(name: "res", scope: !6208, file: !3, line: 249, type: !1815)
!6224 = !DILocation(line: 249, column: 8, scope: !6208)
!6225 = !DILocalVariable(name: "stmt_list", scope: !6208, file: !3, line: 250, type: !1667)
!6226 = !DILocation(line: 250, column: 14, scope: !6208)
!6227 = !DILocalVariable(name: "stmts", scope: !6208, file: !3, line: 250, type: !1667)
!6228 = !DILocation(line: 250, column: 32, scope: !6208)
!6229 = !DILocalVariable(name: "fn_call", scope: !6208, file: !3, line: 251, type: !1677)
!6230 = !DILocation(line: 251, column: 10, scope: !6208)
!6231 = !DILocalVariable(name: "mem", scope: !6208, file: !3, line: 252, type: !1702)
!6232 = !DILocation(line: 252, column: 8, scope: !6208)
!6233 = !DILocalVariable(name: "fn", scope: !6208, file: !3, line: 252, type: !1702)
!6234 = !DILocation(line: 252, column: 13, scope: !6208)
!6235 = !DILocalVariable(name: "i", scope: !6208, file: !3, line: 253, type: !5811)
!6236 = !DILocation(line: 253, column: 24, scope: !6208)
!6237 = !DILocalVariable(name: "dr", scope: !6208, file: !3, line: 254, type: !2976)
!6238 = !DILocation(line: 254, column: 26, scope: !6208)
!6239 = !DILocation(line: 254, column: 31, scope: !6208)
!6240 = !DILocalVariable(name: "loc", scope: !6208, file: !3, line: 255, type: !1695)
!6241 = !DILocation(line: 255, column: 14, scope: !6208)
!6242 = !DILocation(line: 255, column: 37, scope: !6208)
!6243 = !DILocation(line: 255, column: 20, scope: !6208)
!6244 = !DILocation(line: 257, column: 18, scope: !6208)
!6245 = !DILocation(line: 257, column: 3, scope: !6208)
!6246 = !DILocation(line: 257, column: 16, scope: !6208)
!6247 = !DILocation(line: 258, column: 17, scope: !6208)
!6248 = !DILocation(line: 258, column: 3, scope: !6208)
!6249 = !DILocation(line: 258, column: 15, scope: !6208)
!6250 = !DILocation(line: 259, column: 30, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 259, column: 7)
!6252 = !DILocation(line: 259, column: 8, scope: !6251)
!6253 = !DILocation(line: 259, column: 7, scope: !6208)
!6254 = !DILocation(line: 260, column: 5, scope: !6251)
!6255 = !DILocation(line: 263, column: 22, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 263, column: 7)
!6257 = !DILocation(line: 263, column: 7, scope: !6256)
!6258 = !DILocation(line: 263, column: 7, scope: !6208)
!6259 = !DILocation(line: 267, column: 37, scope: !6260)
!6260 = distinct !DILexicalBlock(scope: !6256, file: !3, line: 266, column: 5)
!6261 = !DILocation(line: 267, column: 42, scope: !6260)
!6262 = !DILocation(line: 268, column: 25, scope: !6260)
!6263 = !DILocation(line: 269, column: 11, scope: !6260)
!6264 = !DILocation(line: 270, column: 11, scope: !6260)
!6265 = !DILocation(line: 268, column: 9, scope: !6260)
!6266 = !DILocation(line: 267, column: 19, scope: !6260)
!6267 = !DILocation(line: 267, column: 17, scope: !6260)
!6268 = !DILocation(line: 271, column: 19, scope: !6260)
!6269 = !DILocation(line: 271, column: 17, scope: !6260)
!6270 = !DILocation(line: 275, column: 38, scope: !6260)
!6271 = !DILocation(line: 275, column: 43, scope: !6260)
!6272 = !DILocation(line: 275, column: 52, scope: !6260)
!6273 = !DILocation(line: 275, column: 18, scope: !6260)
!6274 = !DILocation(line: 275, column: 16, scope: !6260)
!6275 = !DILocation(line: 276, column: 5, scope: !6260)
!6276 = !DILocation(line: 279, column: 27, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !6256, file: !3, line: 279, column: 12)
!6278 = !DILocation(line: 279, column: 12, scope: !6277)
!6279 = !DILocation(line: 279, column: 12, scope: !6256)
!6280 = !DILocation(line: 283, column: 38, scope: !6281)
!6281 = distinct !DILexicalBlock(scope: !6277, file: !3, line: 282, column: 5)
!6282 = !DILocation(line: 283, column: 43, scope: !6281)
!6283 = !DILocation(line: 283, column: 52, scope: !6281)
!6284 = !DILocation(line: 283, column: 18, scope: !6281)
!6285 = !DILocation(line: 283, column: 16, scope: !6281)
!6286 = !DILocation(line: 285, column: 35, scope: !6281)
!6287 = !DILocation(line: 285, column: 51, scope: !6281)
!6288 = !DILocation(line: 285, column: 67, scope: !6281)
!6289 = !DILocation(line: 285, column: 19, scope: !6281)
!6290 = !DILocation(line: 285, column: 17, scope: !6281)
!6291 = !DILocation(line: 286, column: 37, scope: !6281)
!6292 = !DILocation(line: 286, column: 42, scope: !6281)
!6293 = !DILocation(line: 286, column: 52, scope: !6281)
!6294 = !DILocation(line: 286, column: 19, scope: !6281)
!6295 = !DILocation(line: 286, column: 17, scope: !6281)
!6296 = !DILocation(line: 287, column: 35, scope: !6281)
!6297 = !DILocation(line: 287, column: 52, scope: !6281)
!6298 = !DILocation(line: 288, column: 25, scope: !6281)
!6299 = !DILocation(line: 288, column: 30, scope: !6281)
!6300 = !DILocation(line: 288, column: 40, scope: !6281)
!6301 = !DILocation(line: 288, column: 7, scope: !6281)
!6302 = !DILocation(line: 287, column: 19, scope: !6281)
!6303 = !DILocation(line: 287, column: 17, scope: !6281)
!6304 = !DILocation(line: 289, column: 35, scope: !6281)
!6305 = !DILocation(line: 289, column: 51, scope: !6281)
!6306 = !DILocation(line: 290, column: 7, scope: !6281)
!6307 = !DILocation(line: 289, column: 19, scope: !6281)
!6308 = !DILocation(line: 289, column: 17, scope: !6281)
!6309 = !DILocation(line: 291, column: 19, scope: !6281)
!6310 = !DILocation(line: 291, column: 17, scope: !6281)
!6311 = !DILocation(line: 294, column: 5, scope: !6281)
!6312 = !DILocation(line: 296, column: 5, scope: !6277)
!6313 = !DILocation(line: 298, column: 31, scope: !6208)
!6314 = !DILocation(line: 298, column: 9, scope: !6208)
!6315 = !DILocation(line: 298, column: 7, scope: !6208)
!6316 = !DILocation(line: 299, column: 35, scope: !6208)
!6317 = !DILocation(line: 299, column: 3, scope: !6208)
!6318 = !DILocation(line: 301, column: 8, scope: !6208)
!6319 = !DILocation(line: 301, column: 6, scope: !6208)
!6320 = !DILocation(line: 302, column: 32, scope: !6208)
!6321 = !DILocation(line: 302, column: 39, scope: !6208)
!6322 = !DILocation(line: 302, column: 44, scope: !6208)
!6323 = !DILocation(line: 302, column: 63, scope: !6208)
!6324 = !DILocation(line: 302, column: 13, scope: !6208)
!6325 = !DILocation(line: 302, column: 11, scope: !6208)
!6326 = !DILocation(line: 303, column: 36, scope: !6208)
!6327 = !DILocation(line: 303, column: 3, scope: !6208)
!6328 = !DILocation(line: 305, column: 23, scope: !6329)
!6329 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 305, column: 3)
!6330 = !DILocation(line: 305, column: 12, scope: !6329)
!6331 = !DILocation(line: 305, column: 8, scope: !6329)
!6332 = !DILocation(line: 305, column: 36, scope: !6333)
!6333 = distinct !DILexicalBlock(scope: !6329, file: !3, line: 305, column: 3)
!6334 = !DILocation(line: 305, column: 35, scope: !6333)
!6335 = !DILocation(line: 305, column: 3, scope: !6329)
!6336 = !DILocalVariable(name: "s", scope: !6337, file: !3, line: 307, type: !1677)
!6337 = distinct !DILexicalBlock(scope: !6333, file: !3, line: 306, column: 5)
!6338 = !DILocation(line: 307, column: 14, scope: !6337)
!6339 = !DILocation(line: 307, column: 18, scope: !6337)
!6340 = !DILocation(line: 308, column: 32, scope: !6337)
!6341 = !DILocation(line: 308, column: 7, scope: !6337)
!6342 = !DILocation(line: 309, column: 5, scope: !6337)
!6343 = !DILocation(line: 305, column: 51, scope: !6333)
!6344 = !DILocation(line: 305, column: 3, scope: !6333)
!6345 = distinct !{!6345, !6335, !6346}
!6346 = !DILocation(line: 309, column: 5, scope: !6329)
!6347 = !DILocation(line: 311, column: 31, scope: !6208)
!6348 = !DILocation(line: 311, column: 3, scope: !6208)
!6349 = !DILocation(line: 312, column: 7, scope: !6208)
!6350 = !DILocation(line: 314, column: 7, scope: !6351)
!6351 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 314, column: 7)
!6352 = !DILocation(line: 314, column: 17, scope: !6351)
!6353 = !DILocation(line: 314, column: 21, scope: !6351)
!6354 = !DILocation(line: 314, column: 32, scope: !6351)
!6355 = !DILocation(line: 314, column: 7, scope: !6208)
!6356 = !DILocation(line: 315, column: 14, scope: !6351)
!6357 = !DILocation(line: 315, column: 5, scope: !6351)
!6358 = !DILocation(line: 314, column: 45, scope: !6351)
!6359 = !DILabel(scope: !6208, name: "end", file: !3, line: 317)
!6360 = !DILocation(line: 317, column: 2, scope: !6208)
!6361 = !DILocation(line: 318, column: 18, scope: !6208)
!6362 = !DILocation(line: 318, column: 3, scope: !6208)
!6363 = !DILocation(line: 319, column: 10, scope: !6208)
!6364 = !DILocation(line: 319, column: 3, scope: !6208)
!6365 = distinct !DISubprogram(name: "prop_phis", scope: !3, file: !3, line: 325, type: !6366, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6366 = !DISubroutineType(types: !6367)
!6367 = !{null, !2077}
!6368 = !DILocalVariable(name: "b", arg: 1, scope: !6365, file: !3, line: 325, type: !2077)
!6369 = !DILocation(line: 325, column: 24, scope: !6365)
!6370 = !DILocalVariable(name: "psi", scope: !6365, file: !3, line: 327, type: !5811)
!6371 = !DILocation(line: 327, column: 24, scope: !6365)
!6372 = !DILocalVariable(name: "phis", scope: !6365, file: !3, line: 328, type: !1667)
!6373 = !DILocation(line: 328, column: 14, scope: !6365)
!6374 = !DILocation(line: 328, column: 32, scope: !6365)
!6375 = !DILocation(line: 328, column: 21, scope: !6365)
!6376 = !DILocation(line: 330, column: 25, scope: !6377)
!6377 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 330, column: 3)
!6378 = !DILocation(line: 330, column: 14, scope: !6377)
!6379 = !DILocation(line: 330, column: 8, scope: !6377)
!6380 = !DILocation(line: 330, column: 33, scope: !6381)
!6381 = distinct !DILexicalBlock(scope: !6377, file: !3, line: 330, column: 3)
!6382 = !DILocation(line: 330, column: 32, scope: !6381)
!6383 = !DILocation(line: 330, column: 3, scope: !6377)
!6384 = !DILocalVariable(name: "phi", scope: !6385, file: !3, line: 332, type: !1677)
!6385 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 331, column: 5)
!6386 = !DILocation(line: 332, column: 14, scope: !6385)
!6387 = !DILocation(line: 332, column: 20, scope: !6385)
!6388 = !DILocalVariable(name: "def", scope: !6385, file: !3, line: 333, type: !1702)
!6389 = !DILocation(line: 333, column: 12, scope: !6385)
!6390 = !DILocation(line: 333, column: 37, scope: !6385)
!6391 = !DILocation(line: 333, column: 18, scope: !6385)
!6392 = !DILocalVariable(name: "use", scope: !6385, file: !3, line: 333, type: !1702)
!6393 = !DILocation(line: 333, column: 43, scope: !6385)
!6394 = !DILocation(line: 333, column: 69, scope: !6385)
!6395 = !DILocation(line: 333, column: 49, scope: !6385)
!6396 = !DILocation(line: 335, column: 7, scope: !6385)
!6397 = !DILocation(line: 337, column: 27, scope: !6398)
!6398 = distinct !DILexicalBlock(scope: !6385, file: !3, line: 337, column: 11)
!6399 = !DILocation(line: 337, column: 12, scope: !6398)
!6400 = !DILocation(line: 337, column: 11, scope: !6385)
!6401 = !DILocalVariable(name: "iter", scope: !6402, file: !3, line: 339, type: !4975)
!6402 = distinct !DILexicalBlock(scope: !6398, file: !3, line: 338, column: 2)
!6403 = !DILocation(line: 339, column: 21, scope: !6402)
!6404 = !DILocalVariable(name: "use_p", scope: !6402, file: !3, line: 340, type: !3078)
!6405 = !DILocation(line: 340, column: 18, scope: !6402)
!6406 = !DILocalVariable(name: "stmt", scope: !6402, file: !3, line: 341, type: !1677)
!6407 = !DILocation(line: 341, column: 11, scope: !6402)
!6408 = !DILocation(line: 343, column: 4, scope: !6409)
!6409 = distinct !DILexicalBlock(scope: !6402, file: !3, line: 343, column: 4)
!6410 = !DILocation(line: 343, column: 4, scope: !6411)
!6411 = distinct !DILexicalBlock(scope: !6409, file: !3, line: 343, column: 4)
!6412 = !DILocation(line: 344, column: 6, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6411, file: !3, line: 344, column: 6)
!6414 = !DILocation(line: 344, column: 6, scope: !6415)
!6415 = distinct !DILexicalBlock(scope: !6413, file: !3, line: 344, column: 6)
!6416 = !DILocation(line: 345, column: 8, scope: !6415)
!6417 = distinct !{!6417, !6412, !6418}
!6418 = !DILocation(line: 345, column: 8, scope: !6413)
!6419 = distinct !{!6419, !6408, !6420}
!6420 = !DILocation(line: 345, column: 8, scope: !6409)
!6421 = !DILocation(line: 346, column: 2, scope: !6402)
!6422 = !DILocation(line: 348, column: 19, scope: !6398)
!6423 = !DILocation(line: 348, column: 24, scope: !6398)
!6424 = !DILocation(line: 348, column: 2, scope: !6398)
!6425 = !DILocation(line: 350, column: 7, scope: !6385)
!6426 = !DILocation(line: 330, column: 3, scope: !6381)
!6427 = distinct !{!6427, !6383, !6428}
!6428 = !DILocation(line: 351, column: 5, scope: !6377)
!6429 = !DILocation(line: 352, column: 1, scope: !6365)
!6430 = distinct !DISubprogram(name: "bb_seq", scope: !586, file: !586, line: 237, type: !6431, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6431 = !DISubroutineType(types: !6432)
!6432 = !{!1667, !6433}
!6433 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1553, line: 112, baseType: !6434)
!6434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6435, size: 64)
!6435 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1642)
!6436 = !DILocalVariable(name: "bb", arg: 1, scope: !6430, file: !586, line: 237, type: !6433)
!6437 = !DILocation(line: 237, column: 27, scope: !6430)
!6438 = !DILocation(line: 239, column: 13, scope: !6430)
!6439 = !DILocation(line: 239, column: 17, scope: !6430)
!6440 = !DILocation(line: 239, column: 23, scope: !6430)
!6441 = !DILocation(line: 239, column: 33, scope: !6430)
!6442 = !DILocation(line: 239, column: 36, scope: !6430)
!6443 = !DILocation(line: 239, column: 40, scope: !6430)
!6444 = !DILocation(line: 239, column: 43, scope: !6430)
!6445 = !DILocation(line: 239, column: 10, scope: !6430)
!6446 = !DILocation(line: 239, column: 53, scope: !6430)
!6447 = !DILocation(line: 239, column: 57, scope: !6430)
!6448 = !DILocation(line: 239, column: 60, scope: !6430)
!6449 = !DILocation(line: 239, column: 68, scope: !6430)
!6450 = !DILocation(line: 239, column: 3, scope: !6430)
!6451 = distinct !DISubprogram(name: "gimple_seq_first", scope: !586, file: !586, line: 159, type: !6452, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6452 = !DISubroutineType(types: !6453)
!6453 = !{!1672, !6454}
!6454 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1553, line: 67, baseType: !6455)
!6455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6456, size: 64)
!6456 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1669)
!6457 = !DILocalVariable(name: "s", arg: 1, scope: !6451, file: !586, line: 159, type: !6454)
!6458 = !DILocation(line: 159, column: 36, scope: !6451)
!6459 = !DILocation(line: 161, column: 10, scope: !6451)
!6460 = !DILocation(line: 161, column: 14, scope: !6451)
!6461 = !DILocation(line: 161, column: 17, scope: !6451)
!6462 = !DILocation(line: 161, column: 3, scope: !6451)
!6463 = distinct !DISubprogram(name: "gimple_seq_last", scope: !586, file: !586, line: 178, type: !6452, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6464 = !DILocalVariable(name: "s", arg: 1, scope: !6463, file: !586, line: 178, type: !6454)
!6465 = !DILocation(line: 178, column: 35, scope: !6463)
!6466 = !DILocation(line: 180, column: 10, scope: !6463)
!6467 = !DILocation(line: 180, column: 14, scope: !6463)
!6468 = !DILocation(line: 180, column: 17, scope: !6463)
!6469 = !DILocation(line: 180, column: 3, scope: !6463)
!6470 = distinct !DISubprogram(name: "gimple_expr_code", scope: !586, file: !586, line: 1438, type: !6189, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6471 = !DILocalVariable(name: "stmt", arg: 1, scope: !6470, file: !586, line: 1438, type: !5058)
!6472 = !DILocation(line: 1438, column: 32, scope: !6470)
!6473 = !DILocalVariable(name: "code", scope: !6470, file: !586, line: 1440, type: !585)
!6474 = !DILocation(line: 1440, column: 20, scope: !6470)
!6475 = !DILocation(line: 1440, column: 40, scope: !6470)
!6476 = !DILocation(line: 1440, column: 27, scope: !6470)
!6477 = !DILocation(line: 1441, column: 7, scope: !6478)
!6478 = distinct !DILexicalBlock(scope: !6470, file: !586, line: 1441, column: 7)
!6479 = !DILocation(line: 1441, column: 12, scope: !6478)
!6480 = !DILocation(line: 1441, column: 29, scope: !6478)
!6481 = !DILocation(line: 1441, column: 32, scope: !6478)
!6482 = !DILocation(line: 1441, column: 37, scope: !6478)
!6483 = !DILocation(line: 1441, column: 7, scope: !6470)
!6484 = !DILocation(line: 1442, column: 29, scope: !6478)
!6485 = !DILocation(line: 1442, column: 35, scope: !6478)
!6486 = !DILocation(line: 1442, column: 42, scope: !6478)
!6487 = !DILocation(line: 1442, column: 5, scope: !6478)
!6488 = !DILocation(line: 1443, column: 12, scope: !6489)
!6489 = distinct !DILexicalBlock(scope: !6478, file: !586, line: 1443, column: 12)
!6490 = !DILocation(line: 1443, column: 17, scope: !6489)
!6491 = !DILocation(line: 1443, column: 12, scope: !6478)
!6492 = !DILocation(line: 1444, column: 5, scope: !6489)
!6493 = !DILocation(line: 1446, column: 5, scope: !6489)
!6494 = !DILocation(line: 1448, column: 5, scope: !6470)
!6495 = !DILocation(line: 1450, column: 1, scope: !6470)
!6496 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !586, file: !586, line: 1686, type: !6497, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6497 = !DISubroutineType(types: !6498)
!6498 = !{!668, !366}
!6499 = !DILocalVariable(name: "code", arg: 1, scope: !6496, file: !586, line: 1686, type: !366)
!6500 = !DILocation(line: 1686, column: 38, scope: !6496)
!6501 = !DILocation(line: 1688, column: 63, scope: !6496)
!6502 = !DILocation(line: 1688, column: 34, scope: !6496)
!6503 = !DILocation(line: 1688, column: 10, scope: !6496)
!6504 = !DILocation(line: 1688, column: 3, scope: !6496)
!6505 = distinct !DISubprogram(name: "gimple_location", scope: !586, file: !586, line: 1139, type: !6506, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6506 = !DISubroutineType(types: !6507)
!6507 = !{!1695, !5058}
!6508 = !DILocalVariable(name: "g", arg: 1, scope: !6505, file: !586, line: 1139, type: !5058)
!6509 = !DILocation(line: 1139, column: 31, scope: !6505)
!6510 = !DILocation(line: 1141, column: 10, scope: !6505)
!6511 = !DILocation(line: 1141, column: 13, scope: !6505)
!6512 = !DILocation(line: 1141, column: 20, scope: !6505)
!6513 = !DILocation(line: 1141, column: 3, scope: !6505)
!6514 = distinct !DISubprogram(name: "build_size_arg_loc", scope: !3, file: !3, line: 226, type: !6515, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6515 = !DISubroutineType(types: !6516)
!6516 = !{!1702, !1695, !1702, !1702, !6517}
!6517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1667, size: 64)
!6518 = !DILocalVariable(name: "loc", arg: 1, scope: !6514, file: !3, line: 226, type: !1695)
!6519 = !DILocation(line: 226, column: 32, scope: !6514)
!6520 = !DILocalVariable(name: "nb_iter", arg: 2, scope: !6514, file: !3, line: 226, type: !1702)
!6521 = !DILocation(line: 226, column: 42, scope: !6514)
!6522 = !DILocalVariable(name: "op", arg: 3, scope: !6514, file: !3, line: 226, type: !1702)
!6523 = !DILocation(line: 226, column: 56, scope: !6514)
!6524 = !DILocalVariable(name: "stmt_list", arg: 4, scope: !6514, file: !3, line: 227, type: !6517)
!6525 = !DILocation(line: 227, column: 19, scope: !6514)
!6526 = !DILocalVariable(name: "stmts", scope: !6514, file: !3, line: 229, type: !1667)
!6527 = !DILocation(line: 229, column: 14, scope: !6514)
!6528 = !DILocalVariable(name: "x", scope: !6514, file: !3, line: 230, type: !1702)
!6529 = !DILocation(line: 230, column: 8, scope: !6514)
!6530 = !DILocation(line: 232, column: 7, scope: !6514)
!6531 = !DILocation(line: 232, column: 5, scope: !6514)
!6532 = !DILocation(line: 236, column: 29, scope: !6514)
!6533 = !DILocation(line: 236, column: 7, scope: !6514)
!6534 = !DILocation(line: 236, column: 5, scope: !6514)
!6535 = !DILocation(line: 237, column: 23, scope: !6514)
!6536 = !DILocation(line: 237, column: 34, scope: !6514)
!6537 = !DILocation(line: 237, column: 3, scope: !6514)
!6538 = !DILocation(line: 239, column: 10, scope: !6514)
!6539 = !DILocation(line: 239, column: 3, scope: !6514)
!6540 = distinct !DISubprogram(name: "gsi_start", scope: !586, file: !586, line: 4403, type: !6541, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6541 = !DISubroutineType(types: !6542)
!6542 = !{!5811, !1667}
!6543 = !DILocalVariable(name: "seq", arg: 1, scope: !6540, file: !586, line: 4403, type: !1667)
!6544 = !DILocation(line: 4403, column: 23, scope: !6540)
!6545 = !DILocalVariable(name: "i", scope: !6540, file: !586, line: 4405, type: !5811)
!6546 = !DILocation(line: 4405, column: 24, scope: !6540)
!6547 = !DILocation(line: 4407, column: 29, scope: !6540)
!6548 = !DILocation(line: 4407, column: 11, scope: !6540)
!6549 = !DILocation(line: 4407, column: 5, scope: !6540)
!6550 = !DILocation(line: 4407, column: 9, scope: !6540)
!6551 = !DILocation(line: 4408, column: 11, scope: !6540)
!6552 = !DILocation(line: 4408, column: 5, scope: !6540)
!6553 = !DILocation(line: 4408, column: 9, scope: !6540)
!6554 = !DILocation(line: 4409, column: 13, scope: !6540)
!6555 = !DILocation(line: 4409, column: 11, scope: !6540)
!6556 = !DILocation(line: 4409, column: 17, scope: !6540)
!6557 = !DILocation(line: 4409, column: 22, scope: !6540)
!6558 = !DILocation(line: 4409, column: 27, scope: !6540)
!6559 = !DILocation(line: 4409, column: 20, scope: !6540)
!6560 = !DILocation(line: 4409, column: 10, scope: !6540)
!6561 = !DILocation(line: 4409, column: 48, scope: !6540)
!6562 = !DILocation(line: 4409, column: 53, scope: !6540)
!6563 = !DILocation(line: 4409, column: 35, scope: !6540)
!6564 = !DILocation(line: 4409, column: 5, scope: !6540)
!6565 = !DILocation(line: 4409, column: 8, scope: !6540)
!6566 = !DILocation(line: 4411, column: 3, scope: !6540)
!6567 = distinct !DISubprogram(name: "update_stmt_if_modified", scope: !586, file: !586, line: 1468, type: !6568, scopeLine: 1469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6568 = !DISubroutineType(types: !6569)
!6569 = !{null, !1677}
!6570 = !DILocalVariable(name: "s", arg: 1, scope: !6567, file: !586, line: 1468, type: !1677)
!6571 = !DILocation(line: 1468, column: 33, scope: !6567)
!6572 = !DILocation(line: 1470, column: 26, scope: !6573)
!6573 = distinct !DILexicalBlock(scope: !6567, file: !586, line: 1470, column: 7)
!6574 = !DILocation(line: 1470, column: 7, scope: !6573)
!6575 = !DILocation(line: 1470, column: 7, scope: !6567)
!6576 = !DILocation(line: 1471, column: 27, scope: !6573)
!6577 = !DILocation(line: 1471, column: 5, scope: !6573)
!6578 = !DILocation(line: 1472, column: 1, scope: !6567)
!6579 = distinct !DISubprogram(name: "gimple_modified_p", scope: !586, file: !586, line: 1425, type: !5107, scopeLine: 1426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6580 = !DILocalVariable(name: "g", arg: 1, scope: !6579, file: !586, line: 1425, type: !5058)
!6581 = !DILocation(line: 1425, column: 33, scope: !6579)
!6582 = !DILocation(line: 1427, column: 27, scope: !6579)
!6583 = !DILocation(line: 1427, column: 11, scope: !6579)
!6584 = !DILocation(line: 1427, column: 10, scope: !6579)
!6585 = !DILocation(line: 1427, column: 40, scope: !6579)
!6586 = !DILocation(line: 1427, column: 43, scope: !6579)
!6587 = !DILocation(line: 1427, column: 50, scope: !6579)
!6588 = !DILocation(line: 1427, column: 33, scope: !6579)
!6589 = !DILocation(line: 1427, column: 3, scope: !6579)
!6590 = distinct !DISubprogram(name: "phi_nodes", scope: !5097, file: !5097, line: 508, type: !6431, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6591 = !DILocalVariable(name: "bb", arg: 1, scope: !6590, file: !5097, line: 508, type: !6433)
!6592 = !DILocation(line: 508, column: 30, scope: !6590)
!6593 = !DILocation(line: 510, column: 3, scope: !6590)
!6594 = !DILocation(line: 511, column: 8, scope: !6595)
!6595 = distinct !DILexicalBlock(scope: !6590, file: !5097, line: 511, column: 7)
!6596 = !DILocation(line: 511, column: 12, scope: !6595)
!6597 = !DILocation(line: 511, column: 15, scope: !6595)
!6598 = !DILocation(line: 511, column: 7, scope: !6590)
!6599 = !DILocation(line: 512, column: 5, scope: !6595)
!6600 = !DILocation(line: 513, column: 10, scope: !6590)
!6601 = !DILocation(line: 513, column: 14, scope: !6590)
!6602 = !DILocation(line: 513, column: 17, scope: !6590)
!6603 = !DILocation(line: 513, column: 25, scope: !6590)
!6604 = !DILocation(line: 513, column: 3, scope: !6590)
!6605 = !DILocation(line: 514, column: 1, scope: !6590)
!6606 = distinct !DISubprogram(name: "gimple_phi_result", scope: !586, file: !586, line: 3071, type: !5125, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6607 = !DILocalVariable(name: "gs", arg: 1, scope: !6606, file: !586, line: 3071, type: !5058)
!6608 = !DILocation(line: 3071, column: 33, scope: !6606)
!6609 = !DILocation(line: 3074, column: 10, scope: !6606)
!6610 = !DILocation(line: 3074, column: 14, scope: !6606)
!6611 = !DILocation(line: 3074, column: 25, scope: !6606)
!6612 = !DILocation(line: 3074, column: 3, scope: !6606)
!6613 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !5097, file: !5097, line: 450, type: !6614, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6614 = !DISubroutineType(types: !6615)
!6615 = !{!1702, !1677, !2135}
!6616 = !DILocalVariable(name: "gs", arg: 1, scope: !6613, file: !5097, line: 450, type: !1677)
!6617 = !DILocation(line: 450, column: 28, scope: !6613)
!6618 = !DILocalVariable(name: "index", arg: 2, scope: !6613, file: !5097, line: 450, type: !2135)
!6619 = !DILocation(line: 450, column: 39, scope: !6613)
!6620 = !DILocalVariable(name: "pd", scope: !6613, file: !5097, line: 452, type: !6621)
!6621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2748, size: 64)
!6622 = !DILocation(line: 452, column: 21, scope: !6613)
!6623 = !DILocation(line: 452, column: 42, scope: !6613)
!6624 = !DILocation(line: 452, column: 46, scope: !6613)
!6625 = !DILocation(line: 452, column: 26, scope: !6613)
!6626 = !DILocation(line: 453, column: 29, scope: !6613)
!6627 = !DILocation(line: 453, column: 33, scope: !6613)
!6628 = !DILocation(line: 453, column: 10, scope: !6613)
!6629 = !DILocation(line: 453, column: 3, scope: !6613)
!6630 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !586, file: !586, line: 3061, type: !6631, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6631 = !DISubroutineType(types: !6632)
!6632 = !{!7, !5058}
!6633 = !DILocalVariable(name: "gs", arg: 1, scope: !6630, file: !586, line: 3061, type: !5058)
!6634 = !DILocation(line: 3061, column: 35, scope: !6630)
!6635 = !DILocation(line: 3064, column: 10, scope: !6630)
!6636 = !DILocation(line: 3064, column: 14, scope: !6630)
!6637 = !DILocation(line: 3064, column: 25, scope: !6630)
!6638 = !DILocation(line: 3064, column: 3, scope: !6630)
!6639 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !5097, file: !5097, line: 1058, type: !6640, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6640 = !DISubroutineType(types: !6641)
!6641 = !{!1677, !5135, !1702}
!6642 = !DILocalVariable(name: "imm", arg: 1, scope: !6639, file: !5097, line: 1058, type: !5135)
!6643 = !DILocation(line: 1058, column: 39, scope: !6639)
!6644 = !DILocalVariable(name: "var", arg: 2, scope: !6639, file: !5097, line: 1058, type: !1702)
!6645 = !DILocation(line: 1058, column: 49, scope: !6639)
!6646 = !DILocation(line: 1060, column: 18, scope: !6639)
!6647 = !DILocation(line: 1060, column: 3, scope: !6639)
!6648 = !DILocation(line: 1060, column: 8, scope: !6639)
!6649 = !DILocation(line: 1060, column: 14, scope: !6639)
!6650 = !DILocation(line: 1061, column: 18, scope: !6639)
!6651 = !DILocation(line: 1061, column: 23, scope: !6639)
!6652 = !DILocation(line: 1061, column: 30, scope: !6639)
!6653 = !DILocation(line: 1061, column: 3, scope: !6639)
!6654 = !DILocation(line: 1061, column: 8, scope: !6639)
!6655 = !DILocation(line: 1061, column: 16, scope: !6639)
!6656 = !DILocation(line: 1062, column: 3, scope: !6639)
!6657 = !DILocation(line: 1062, column: 8, scope: !6639)
!6658 = !DILocation(line: 1062, column: 22, scope: !6639)
!6659 = !DILocation(line: 1067, column: 3, scope: !6639)
!6660 = !DILocation(line: 1067, column: 8, scope: !6639)
!6661 = !DILocation(line: 1067, column: 18, scope: !6639)
!6662 = !DILocation(line: 1067, column: 23, scope: !6639)
!6663 = !DILocation(line: 1068, column: 3, scope: !6639)
!6664 = !DILocation(line: 1068, column: 8, scope: !6639)
!6665 = !DILocation(line: 1068, column: 18, scope: !6639)
!6666 = !DILocation(line: 1068, column: 23, scope: !6639)
!6667 = !DILocation(line: 1069, column: 3, scope: !6639)
!6668 = !DILocation(line: 1069, column: 8, scope: !6639)
!6669 = !DILocation(line: 1069, column: 18, scope: !6639)
!6670 = !DILocation(line: 1069, column: 22, scope: !6639)
!6671 = !DILocation(line: 1069, column: 27, scope: !6639)
!6672 = !DILocation(line: 1070, column: 3, scope: !6639)
!6673 = !DILocation(line: 1070, column: 8, scope: !6639)
!6674 = !DILocation(line: 1070, column: 18, scope: !6639)
!6675 = !DILocation(line: 1070, column: 22, scope: !6639)
!6676 = !DILocation(line: 1072, column: 27, scope: !6677)
!6677 = distinct !DILexicalBlock(scope: !6639, file: !5097, line: 1072, column: 7)
!6678 = !DILocation(line: 1072, column: 7, scope: !6677)
!6679 = !DILocation(line: 1072, column: 7, scope: !6639)
!6680 = !DILocation(line: 1073, column: 5, scope: !6677)
!6681 = !DILocation(line: 1075, column: 25, scope: !6639)
!6682 = !DILocation(line: 1075, column: 30, scope: !6639)
!6683 = !DILocation(line: 1075, column: 39, scope: !6639)
!6684 = !DILocation(line: 1075, column: 3, scope: !6639)
!6685 = !DILocation(line: 1077, column: 10, scope: !6639)
!6686 = !DILocation(line: 1077, column: 3, scope: !6639)
!6687 = !DILocation(line: 1078, column: 1, scope: !6639)
!6688 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !5097, file: !5097, line: 969, type: !5160, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6689 = !DILocalVariable(name: "imm", arg: 1, scope: !6688, file: !5097, line: 969, type: !5162)
!6690 = !DILocation(line: 969, column: 45, scope: !6688)
!6691 = !DILocation(line: 971, column: 11, scope: !6688)
!6692 = !DILocation(line: 971, column: 16, scope: !6688)
!6693 = !DILocation(line: 971, column: 27, scope: !6688)
!6694 = !DILocation(line: 971, column: 32, scope: !6688)
!6695 = !DILocation(line: 971, column: 24, scope: !6688)
!6696 = !DILocation(line: 971, column: 10, scope: !6688)
!6697 = !DILocation(line: 971, column: 3, scope: !6688)
!6698 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !5097, file: !5097, line: 1101, type: !5174, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6699 = !DILocalVariable(name: "imm", arg: 1, scope: !6698, file: !5097, line: 1101, type: !5135)
!6700 = !DILocation(line: 1101, column: 42, scope: !6698)
!6701 = !DILocation(line: 1103, column: 24, scope: !6698)
!6702 = !DILocation(line: 1103, column: 29, scope: !6698)
!6703 = !DILocation(line: 1103, column: 38, scope: !6698)
!6704 = !DILocation(line: 1103, column: 3, scope: !6698)
!6705 = !DILocation(line: 1103, column: 8, scope: !6698)
!6706 = !DILocation(line: 1103, column: 22, scope: !6698)
!6707 = !DILocation(line: 1104, column: 10, scope: !6698)
!6708 = !DILocation(line: 1104, column: 15, scope: !6698)
!6709 = !DILocation(line: 1104, column: 3, scope: !6698)
!6710 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !5097, file: !5097, line: 1110, type: !5160, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6711 = !DILocalVariable(name: "imm", arg: 1, scope: !6710, file: !5097, line: 1110, type: !5162)
!6712 = !DILocation(line: 1110, column: 48, scope: !6710)
!6713 = !DILocation(line: 1112, column: 11, scope: !6710)
!6714 = !DILocation(line: 1112, column: 16, scope: !6710)
!6715 = !DILocation(line: 1112, column: 29, scope: !6710)
!6716 = !DILocation(line: 1112, column: 34, scope: !6710)
!6717 = !DILocation(line: 1112, column: 24, scope: !6710)
!6718 = !DILocation(line: 1112, column: 10, scope: !6710)
!6719 = !DILocation(line: 1112, column: 3, scope: !6710)
!6720 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !5097, file: !5097, line: 233, type: !6721, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6721 = !DISubroutineType(types: !6722)
!6722 = !{null, !3078, !1702}
!6723 = !DILocalVariable(name: "use", arg: 1, scope: !6720, file: !5097, line: 233, type: !3078)
!6724 = !DILocation(line: 233, column: 37, scope: !6720)
!6725 = !DILocalVariable(name: "val", arg: 2, scope: !6720, file: !5097, line: 233, type: !1702)
!6726 = !DILocation(line: 233, column: 47, scope: !6720)
!6727 = !DILocation(line: 235, column: 19, scope: !6720)
!6728 = !DILocation(line: 235, column: 3, scope: !6720)
!6729 = !DILocation(line: 236, column: 17, scope: !6720)
!6730 = !DILocation(line: 236, column: 5, scope: !6720)
!6731 = !DILocation(line: 236, column: 10, scope: !6720)
!6732 = !DILocation(line: 236, column: 15, scope: !6720)
!6733 = !DILocation(line: 237, column: 17, scope: !6720)
!6734 = !DILocation(line: 237, column: 22, scope: !6720)
!6735 = !DILocation(line: 237, column: 3, scope: !6720)
!6736 = !DILocation(line: 238, column: 1, scope: !6720)
!6737 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !5097, file: !5097, line: 1118, type: !5174, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6738 = !DILocalVariable(name: "imm", arg: 1, scope: !6737, file: !5097, line: 1118, type: !5135)
!6739 = !DILocation(line: 1118, column: 41, scope: !6737)
!6740 = !DILocation(line: 1120, column: 18, scope: !6737)
!6741 = !DILocation(line: 1120, column: 23, scope: !6737)
!6742 = !DILocation(line: 1120, column: 3, scope: !6737)
!6743 = !DILocation(line: 1120, column: 8, scope: !6737)
!6744 = !DILocation(line: 1120, column: 16, scope: !6737)
!6745 = !DILocation(line: 1121, column: 30, scope: !6746)
!6746 = distinct !DILexicalBlock(scope: !6737, file: !5097, line: 1121, column: 7)
!6747 = !DILocation(line: 1121, column: 7, scope: !6746)
!6748 = !DILocation(line: 1121, column: 7, scope: !6737)
!6749 = !DILocation(line: 1122, column: 5, scope: !6746)
!6750 = !DILocation(line: 1125, column: 28, scope: !6751)
!6751 = distinct !DILexicalBlock(scope: !6746, file: !5097, line: 1124, column: 5)
!6752 = !DILocation(line: 1125, column: 33, scope: !6751)
!6753 = !DILocation(line: 1125, column: 42, scope: !6751)
!6754 = !DILocation(line: 1125, column: 7, scope: !6751)
!6755 = !DILocation(line: 1125, column: 12, scope: !6751)
!6756 = !DILocation(line: 1125, column: 26, scope: !6751)
!6757 = !DILocation(line: 1126, column: 14, scope: !6751)
!6758 = !DILocation(line: 1126, column: 19, scope: !6751)
!6759 = !DILocation(line: 1126, column: 7, scope: !6751)
!6760 = !DILocation(line: 1128, column: 1, scope: !6737)
!6761 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !5097, file: !5097, line: 1083, type: !6762, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6762 = !DISubroutineType(types: !6763)
!6763 = !{!1677, !5135}
!6764 = !DILocalVariable(name: "imm", arg: 1, scope: !6761, file: !5097, line: 1083, type: !5135)
!6765 = !DILocation(line: 1083, column: 38, scope: !6761)
!6766 = !DILocation(line: 1085, column: 18, scope: !6761)
!6767 = !DILocation(line: 1085, column: 23, scope: !6761)
!6768 = !DILocation(line: 1085, column: 33, scope: !6761)
!6769 = !DILocation(line: 1085, column: 3, scope: !6761)
!6770 = !DILocation(line: 1085, column: 8, scope: !6761)
!6771 = !DILocation(line: 1085, column: 16, scope: !6761)
!6772 = !DILocation(line: 1086, column: 27, scope: !6773)
!6773 = distinct !DILexicalBlock(scope: !6761, file: !5097, line: 1086, column: 7)
!6774 = !DILocation(line: 1086, column: 7, scope: !6773)
!6775 = !DILocation(line: 1086, column: 7, scope: !6761)
!6776 = !DILocation(line: 1088, column: 11, scope: !6777)
!6777 = distinct !DILexicalBlock(scope: !6778, file: !5097, line: 1088, column: 11)
!6778 = distinct !DILexicalBlock(scope: !6773, file: !5097, line: 1087, column: 5)
!6779 = !DILocation(line: 1088, column: 16, scope: !6777)
!6780 = !DILocation(line: 1088, column: 26, scope: !6777)
!6781 = !DILocation(line: 1088, column: 31, scope: !6777)
!6782 = !DILocation(line: 1088, column: 11, scope: !6778)
!6783 = !DILocation(line: 1089, column: 19, scope: !6777)
!6784 = !DILocation(line: 1089, column: 24, scope: !6777)
!6785 = !DILocation(line: 1089, column: 2, scope: !6777)
!6786 = !DILocation(line: 1090, column: 7, scope: !6778)
!6787 = !DILocation(line: 1093, column: 25, scope: !6761)
!6788 = !DILocation(line: 1093, column: 30, scope: !6761)
!6789 = !DILocation(line: 1093, column: 39, scope: !6761)
!6790 = !DILocation(line: 1093, column: 3, scope: !6761)
!6791 = !DILocation(line: 1094, column: 10, scope: !6761)
!6792 = !DILocation(line: 1094, column: 3, scope: !6761)
!6793 = !DILocation(line: 1095, column: 1, scope: !6761)
!6794 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !586, file: !586, line: 3100, type: !6795, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6795 = !DISubroutineType(types: !6796)
!6796 = !{!6621, !1677, !7}
!6797 = !DILocalVariable(name: "gs", arg: 1, scope: !6794, file: !586, line: 3100, type: !1677)
!6798 = !DILocation(line: 3100, column: 24, scope: !6794)
!6799 = !DILocalVariable(name: "index", arg: 2, scope: !6794, file: !586, line: 3100, type: !7)
!6800 = !DILocation(line: 3100, column: 37, scope: !6794)
!6801 = !DILocation(line: 3103, column: 3, scope: !6794)
!6802 = !DILocation(line: 3104, column: 12, scope: !6794)
!6803 = !DILocation(line: 3104, column: 16, scope: !6794)
!6804 = !DILocation(line: 3104, column: 27, scope: !6794)
!6805 = !DILocation(line: 3104, column: 32, scope: !6794)
!6806 = !DILocation(line: 3104, column: 3, scope: !6794)
!6807 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !5097, file: !5097, line: 1018, type: !6808, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6808 = !DISubroutineType(types: !6809)
!6809 = !{null, !3078, !5135}
!6810 = !DILocalVariable(name: "head", arg: 1, scope: !6807, file: !5097, line: 1018, type: !3078)
!6811 = !DILocation(line: 1018, column: 37, scope: !6807)
!6812 = !DILocalVariable(name: "imm", arg: 2, scope: !6807, file: !5097, line: 1018, type: !5135)
!6813 = !DILocation(line: 1018, column: 61, scope: !6807)
!6814 = !DILocalVariable(name: "use_p", scope: !6807, file: !5097, line: 1020, type: !3078)
!6815 = !DILocation(line: 1020, column: 17, scope: !6807)
!6816 = !DILocalVariable(name: "last_p", scope: !6807, file: !5097, line: 1021, type: !3078)
!6817 = !DILocation(line: 1021, column: 17, scope: !6807)
!6818 = !DILocation(line: 1021, column: 26, scope: !6807)
!6819 = !DILocalVariable(name: "head_stmt", scope: !6807, file: !5097, line: 1022, type: !1677)
!6820 = !DILocation(line: 1022, column: 10, scope: !6807)
!6821 = !DILocation(line: 1022, column: 22, scope: !6807)
!6822 = !DILocalVariable(name: "use", scope: !6807, file: !5097, line: 1023, type: !1702)
!6823 = !DILocation(line: 1023, column: 8, scope: !6807)
!6824 = !DILocation(line: 1023, column: 14, scope: !6807)
!6825 = !DILocalVariable(name: "op_iter", scope: !6807, file: !5097, line: 1024, type: !6826)
!6826 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1541, line: 140, baseType: !6827)
!6827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1541, line: 131, size: 320, elements: !6828)
!6828 = !{!6829, !6830, !6831, !6833, !6835, !6836, !6837}
!6829 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6827, file: !1541, line: 133, baseType: !1815, size: 8)
!6830 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6827, file: !1541, line: 134, baseType: !1540, size: 32, offset: 32)
!6831 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6827, file: !1541, line: 135, baseType: !6832, size: 64, offset: 64)
!6832 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1541, line: 42, baseType: !2220)
!6833 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6827, file: !1541, line: 136, baseType: !6834, size: 64, offset: 128)
!6834 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1541, line: 50, baseType: !2227)
!6835 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6827, file: !1541, line: 137, baseType: !1605, size: 32, offset: 192)
!6836 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6827, file: !1541, line: 138, baseType: !1605, size: 32, offset: 224)
!6837 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6827, file: !1541, line: 139, baseType: !1677, size: 64, offset: 256)
!6838 = !DILocation(line: 1024, column: 15, scope: !6807)
!6839 = !DILocalVariable(name: "flag", scope: !6807, file: !5097, line: 1025, type: !1605)
!6840 = !DILocation(line: 1025, column: 7, scope: !6807)
!6841 = !DILocation(line: 1028, column: 26, scope: !6807)
!6842 = !DILocation(line: 1028, column: 11, scope: !6807)
!6843 = !DILocation(line: 1028, column: 8, scope: !6807)
!6844 = !DILocation(line: 1030, column: 20, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6807, file: !5097, line: 1030, column: 7)
!6846 = !DILocation(line: 1030, column: 7, scope: !6845)
!6847 = !DILocation(line: 1030, column: 31, scope: !6845)
!6848 = !DILocation(line: 1030, column: 7, scope: !6807)
!6849 = !DILocation(line: 1032, column: 7, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6851, file: !5097, line: 1032, column: 7)
!6851 = distinct !DILexicalBlock(scope: !6845, file: !5097, line: 1031, column: 5)
!6852 = !DILocation(line: 1032, column: 7, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6850, file: !5097, line: 1032, column: 7)
!6854 = !DILocation(line: 1033, column: 6, scope: !6855)
!6855 = distinct !DILexicalBlock(scope: !6853, file: !5097, line: 1033, column: 6)
!6856 = !DILocation(line: 1033, column: 30, scope: !6855)
!6857 = !DILocation(line: 1033, column: 27, scope: !6855)
!6858 = !DILocation(line: 1033, column: 6, scope: !6853)
!6859 = !DILocation(line: 1034, column: 34, scope: !6855)
!6860 = !DILocation(line: 1034, column: 41, scope: !6855)
!6861 = !DILocation(line: 1034, column: 47, scope: !6855)
!6862 = !DILocation(line: 1034, column: 13, scope: !6855)
!6863 = !DILocation(line: 1034, column: 11, scope: !6855)
!6864 = !DILocation(line: 1034, column: 4, scope: !6855)
!6865 = distinct !{!6865, !6849, !6866}
!6866 = !DILocation(line: 1034, column: 53, scope: !6850)
!6867 = !DILocation(line: 1035, column: 5, scope: !6851)
!6868 = !DILocation(line: 1038, column: 11, scope: !6869)
!6869 = distinct !DILexicalBlock(scope: !6870, file: !5097, line: 1038, column: 11)
!6870 = distinct !DILexicalBlock(scope: !6845, file: !5097, line: 1037, column: 5)
!6871 = !DILocation(line: 1038, column: 16, scope: !6869)
!6872 = !DILocation(line: 1038, column: 11, scope: !6870)
!6873 = !DILocation(line: 1040, column: 4, scope: !6874)
!6874 = distinct !DILexicalBlock(scope: !6875, file: !5097, line: 1040, column: 4)
!6875 = distinct !DILexicalBlock(scope: !6869, file: !5097, line: 1039, column: 2)
!6876 = !DILocation(line: 1040, column: 4, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6874, file: !5097, line: 1040, column: 4)
!6878 = !DILocation(line: 1041, column: 10, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !6877, file: !5097, line: 1041, column: 10)
!6880 = !DILocation(line: 1041, column: 34, scope: !6879)
!6881 = !DILocation(line: 1041, column: 31, scope: !6879)
!6882 = !DILocation(line: 1041, column: 10, scope: !6877)
!6883 = !DILocation(line: 1042, column: 38, scope: !6879)
!6884 = !DILocation(line: 1042, column: 45, scope: !6879)
!6885 = !DILocation(line: 1042, column: 51, scope: !6879)
!6886 = !DILocation(line: 1042, column: 17, scope: !6879)
!6887 = !DILocation(line: 1042, column: 15, scope: !6879)
!6888 = !DILocation(line: 1042, column: 8, scope: !6879)
!6889 = distinct !{!6889, !6873, !6890}
!6890 = !DILocation(line: 1042, column: 57, scope: !6874)
!6891 = !DILocation(line: 1043, column: 2, scope: !6875)
!6892 = !DILocation(line: 1044, column: 41, scope: !6893)
!6893 = distinct !DILexicalBlock(scope: !6869, file: !5097, line: 1044, column: 16)
!6894 = !DILocation(line: 1044, column: 25, scope: !6893)
!6895 = !DILocation(line: 1044, column: 23, scope: !6893)
!6896 = !DILocation(line: 1044, column: 53, scope: !6893)
!6897 = !DILocation(line: 1044, column: 16, scope: !6869)
!6898 = !DILocation(line: 1046, column: 8, scope: !6899)
!6899 = distinct !DILexicalBlock(scope: !6900, file: !5097, line: 1046, column: 8)
!6900 = distinct !DILexicalBlock(scope: !6893, file: !5097, line: 1045, column: 2)
!6901 = !DILocation(line: 1046, column: 32, scope: !6899)
!6902 = !DILocation(line: 1046, column: 29, scope: !6899)
!6903 = !DILocation(line: 1046, column: 8, scope: !6900)
!6904 = !DILocation(line: 1047, column: 36, scope: !6899)
!6905 = !DILocation(line: 1047, column: 43, scope: !6899)
!6906 = !DILocation(line: 1047, column: 49, scope: !6899)
!6907 = !DILocation(line: 1047, column: 15, scope: !6899)
!6908 = !DILocation(line: 1047, column: 13, scope: !6899)
!6909 = !DILocation(line: 1047, column: 6, scope: !6899)
!6910 = !DILocation(line: 1048, column: 2, scope: !6900)
!6911 = !DILocation(line: 1051, column: 7, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6807, file: !5097, line: 1051, column: 7)
!6913 = !DILocation(line: 1051, column: 12, scope: !6912)
!6914 = !DILocation(line: 1051, column: 22, scope: !6912)
!6915 = !DILocation(line: 1051, column: 27, scope: !6912)
!6916 = !DILocation(line: 1051, column: 7, scope: !6807)
!6917 = !DILocation(line: 1052, column: 22, scope: !6912)
!6918 = !DILocation(line: 1052, column: 27, scope: !6912)
!6919 = !DILocation(line: 1052, column: 5, scope: !6912)
!6920 = !DILocation(line: 1053, column: 27, scope: !6807)
!6921 = !DILocation(line: 1053, column: 32, scope: !6807)
!6922 = !DILocation(line: 1053, column: 44, scope: !6807)
!6923 = !DILocation(line: 1053, column: 3, scope: !6807)
!6924 = !DILocation(line: 1054, column: 1, scope: !6807)
!6925 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !5097, file: !5097, line: 910, type: !6926, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6926 = !DISubroutineType(types: !6927)
!6927 = !{!3078, !6928, !1677, !1605}
!6928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6826, size: 64)
!6929 = !DILocalVariable(name: "ptr", arg: 1, scope: !6925, file: !5097, line: 910, type: !6928)
!6930 = !DILocation(line: 910, column: 35, scope: !6925)
!6931 = !DILocalVariable(name: "phi", arg: 2, scope: !6925, file: !5097, line: 910, type: !1677)
!6932 = !DILocation(line: 910, column: 47, scope: !6925)
!6933 = !DILocalVariable(name: "flags", arg: 3, scope: !6925, file: !5097, line: 910, type: !1605)
!6934 = !DILocation(line: 910, column: 56, scope: !6925)
!6935 = !DILocalVariable(name: "phi_def", scope: !6925, file: !5097, line: 912, type: !1702)
!6936 = !DILocation(line: 912, column: 8, scope: !6925)
!6937 = !DILocation(line: 912, column: 37, scope: !6925)
!6938 = !DILocation(line: 912, column: 18, scope: !6925)
!6939 = !DILocalVariable(name: "comp", scope: !6925, file: !5097, line: 913, type: !1605)
!6940 = !DILocation(line: 913, column: 7, scope: !6925)
!6941 = !DILocation(line: 915, column: 28, scope: !6925)
!6942 = !DILocation(line: 915, column: 3, scope: !6925)
!6943 = !DILocation(line: 916, column: 3, scope: !6925)
!6944 = !DILocation(line: 916, column: 8, scope: !6925)
!6945 = !DILocation(line: 916, column: 13, scope: !6925)
!6946 = !DILocation(line: 918, column: 3, scope: !6925)
!6947 = !DILocation(line: 920, column: 26, scope: !6925)
!6948 = !DILocation(line: 920, column: 11, scope: !6925)
!6949 = !DILocation(line: 920, column: 8, scope: !6925)
!6950 = !DILocation(line: 923, column: 8, scope: !6951)
!6951 = distinct !DILexicalBlock(scope: !6925, file: !5097, line: 923, column: 7)
!6952 = !DILocation(line: 923, column: 16, scope: !6951)
!6953 = !DILocation(line: 923, column: 14, scope: !6951)
!6954 = !DILocation(line: 923, column: 22, scope: !6951)
!6955 = !DILocation(line: 923, column: 7, scope: !6925)
!6956 = !DILocation(line: 925, column: 7, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6951, file: !5097, line: 924, column: 5)
!6958 = !DILocation(line: 925, column: 12, scope: !6957)
!6959 = !DILocation(line: 925, column: 17, scope: !6957)
!6960 = !DILocation(line: 926, column: 7, scope: !6957)
!6961 = !DILocation(line: 929, column: 19, scope: !6925)
!6962 = !DILocation(line: 929, column: 3, scope: !6925)
!6963 = !DILocation(line: 929, column: 8, scope: !6925)
!6964 = !DILocation(line: 929, column: 17, scope: !6925)
!6965 = !DILocation(line: 930, column: 39, scope: !6925)
!6966 = !DILocation(line: 930, column: 18, scope: !6925)
!6967 = !DILocation(line: 930, column: 3, scope: !6925)
!6968 = !DILocation(line: 930, column: 8, scope: !6925)
!6969 = !DILocation(line: 930, column: 16, scope: !6925)
!6970 = !DILocation(line: 931, column: 3, scope: !6925)
!6971 = !DILocation(line: 931, column: 8, scope: !6925)
!6972 = !DILocation(line: 931, column: 18, scope: !6925)
!6973 = !DILocation(line: 932, column: 28, scope: !6925)
!6974 = !DILocation(line: 932, column: 10, scope: !6925)
!6975 = !DILocation(line: 932, column: 3, scope: !6925)
!6976 = !DILocation(line: 933, column: 1, scope: !6925)
!6977 = distinct !DISubprogram(name: "op_iter_done", scope: !5097, file: !5097, line: 652, type: !6978, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6978 = !DISubroutineType(types: !6979)
!6979 = !{!1815, !6980}
!6980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6981, size: 64)
!6981 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6826)
!6982 = !DILocalVariable(name: "ptr", arg: 1, scope: !6977, file: !5097, line: 652, type: !6980)
!6983 = !DILocation(line: 652, column: 34, scope: !6977)
!6984 = !DILocation(line: 654, column: 10, scope: !6977)
!6985 = !DILocation(line: 654, column: 15, scope: !6977)
!6986 = !DILocation(line: 654, column: 3, scope: !6977)
!6987 = distinct !DISubprogram(name: "move_use_after_head", scope: !5097, file: !5097, line: 990, type: !6988, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!6988 = !DISubroutineType(types: !6989)
!6989 = !{!3078, !3078, !3078, !3078}
!6990 = !DILocalVariable(name: "use_p", arg: 1, scope: !6987, file: !5097, line: 990, type: !3078)
!6991 = !DILocation(line: 990, column: 36, scope: !6987)
!6992 = !DILocalVariable(name: "head", arg: 2, scope: !6987, file: !5097, line: 990, type: !3078)
!6993 = !DILocation(line: 990, column: 57, scope: !6987)
!6994 = !DILocalVariable(name: "last_p", arg: 3, scope: !6987, file: !5097, line: 991, type: !3078)
!6995 = !DILocation(line: 991, column: 23, scope: !6987)
!6996 = !DILocation(line: 997, column: 7, scope: !6997)
!6997 = distinct !DILexicalBlock(scope: !6987, file: !5097, line: 997, column: 7)
!6998 = !DILocation(line: 997, column: 16, scope: !6997)
!6999 = !DILocation(line: 997, column: 13, scope: !6997)
!7000 = !DILocation(line: 997, column: 7, scope: !6987)
!7001 = !DILocation(line: 1000, column: 11, scope: !7002)
!7002 = distinct !DILexicalBlock(scope: !7003, file: !5097, line: 1000, column: 11)
!7003 = distinct !DILexicalBlock(scope: !6997, file: !5097, line: 998, column: 5)
!7004 = !DILocation(line: 1000, column: 19, scope: !7002)
!7005 = !DILocation(line: 1000, column: 27, scope: !7002)
!7006 = !DILocation(line: 1000, column: 24, scope: !7002)
!7007 = !DILocation(line: 1000, column: 11, scope: !7003)
!7008 = !DILocation(line: 1001, column: 11, scope: !7002)
!7009 = !DILocation(line: 1001, column: 9, scope: !7002)
!7010 = !DILocation(line: 1001, column: 2, scope: !7002)
!7011 = !DILocation(line: 1005, column: 20, scope: !7012)
!7012 = distinct !DILexicalBlock(scope: !7002, file: !5097, line: 1003, column: 2)
!7013 = !DILocation(line: 1005, column: 4, scope: !7012)
!7014 = !DILocation(line: 1006, column: 26, scope: !7012)
!7015 = !DILocation(line: 1006, column: 33, scope: !7012)
!7016 = !DILocation(line: 1006, column: 4, scope: !7012)
!7017 = !DILocation(line: 1007, column: 13, scope: !7012)
!7018 = !DILocation(line: 1007, column: 11, scope: !7012)
!7019 = !DILocation(line: 1009, column: 5, scope: !7003)
!7020 = !DILocation(line: 1010, column: 10, scope: !6987)
!7021 = !DILocation(line: 1010, column: 3, scope: !6987)
!7022 = distinct !DISubprogram(name: "op_iter_next_use", scope: !5097, file: !5097, line: 659, type: !7023, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7023 = !DISubroutineType(types: !7024)
!7024 = !{!3078, !6928}
!7025 = !DILocalVariable(name: "ptr", arg: 1, scope: !7022, file: !5097, line: 659, type: !6928)
!7026 = !DILocation(line: 659, column: 32, scope: !7022)
!7027 = !DILocalVariable(name: "use_p", scope: !7022, file: !5097, line: 661, type: !3078)
!7028 = !DILocation(line: 661, column: 17, scope: !7022)
!7029 = !DILocation(line: 665, column: 7, scope: !7030)
!7030 = distinct !DILexicalBlock(scope: !7022, file: !5097, line: 665, column: 7)
!7031 = !DILocation(line: 665, column: 12, scope: !7030)
!7032 = !DILocation(line: 665, column: 7, scope: !7022)
!7033 = !DILocation(line: 667, column: 15, scope: !7034)
!7034 = distinct !DILexicalBlock(scope: !7030, file: !5097, line: 666, column: 5)
!7035 = !DILocation(line: 667, column: 13, scope: !7034)
!7036 = !DILocation(line: 668, column: 19, scope: !7034)
!7037 = !DILocation(line: 668, column: 24, scope: !7034)
!7038 = !DILocation(line: 668, column: 30, scope: !7034)
!7039 = !DILocation(line: 668, column: 7, scope: !7034)
!7040 = !DILocation(line: 668, column: 12, scope: !7034)
!7041 = !DILocation(line: 668, column: 17, scope: !7034)
!7042 = !DILocation(line: 669, column: 14, scope: !7034)
!7043 = !DILocation(line: 669, column: 7, scope: !7034)
!7044 = !DILocation(line: 671, column: 7, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !7022, file: !5097, line: 671, column: 7)
!7046 = !DILocation(line: 671, column: 12, scope: !7045)
!7047 = !DILocation(line: 671, column: 20, scope: !7045)
!7048 = !DILocation(line: 671, column: 25, scope: !7045)
!7049 = !DILocation(line: 671, column: 18, scope: !7045)
!7050 = !DILocation(line: 671, column: 7, scope: !7022)
!7051 = !DILocation(line: 673, column: 14, scope: !7052)
!7052 = distinct !DILexicalBlock(scope: !7045, file: !5097, line: 672, column: 5)
!7053 = !DILocation(line: 673, column: 7, scope: !7052)
!7054 = !DILocation(line: 675, column: 3, scope: !7022)
!7055 = !DILocation(line: 675, column: 8, scope: !7022)
!7056 = !DILocation(line: 675, column: 13, scope: !7022)
!7057 = !DILocation(line: 676, column: 3, scope: !7022)
!7058 = !DILocation(line: 677, column: 1, scope: !7022)
!7059 = distinct !DISubprogram(name: "op_iter_init_use", scope: !5097, file: !5097, line: 768, type: !6926, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7060 = !DILocalVariable(name: "ptr", arg: 1, scope: !7059, file: !5097, line: 768, type: !6928)
!7061 = !DILocation(line: 768, column: 32, scope: !7059)
!7062 = !DILocalVariable(name: "stmt", arg: 2, scope: !7059, file: !5097, line: 768, type: !1677)
!7063 = !DILocation(line: 768, column: 44, scope: !7059)
!7064 = !DILocalVariable(name: "flags", arg: 3, scope: !7059, file: !5097, line: 768, type: !1605)
!7065 = !DILocation(line: 768, column: 54, scope: !7059)
!7066 = !DILocation(line: 770, column: 3, scope: !7059)
!7067 = !DILocation(line: 772, column: 17, scope: !7059)
!7068 = !DILocation(line: 772, column: 22, scope: !7059)
!7069 = !DILocation(line: 772, column: 28, scope: !7059)
!7070 = !DILocation(line: 772, column: 3, scope: !7059)
!7071 = !DILocation(line: 773, column: 3, scope: !7059)
!7072 = !DILocation(line: 773, column: 8, scope: !7059)
!7073 = !DILocation(line: 773, column: 18, scope: !7059)
!7074 = !DILocation(line: 774, column: 28, scope: !7059)
!7075 = !DILocation(line: 774, column: 10, scope: !7059)
!7076 = !DILocation(line: 774, column: 3, scope: !7059)
!7077 = distinct !DISubprogram(name: "delink_imm_use", scope: !5097, file: !5097, line: 188, type: !7078, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7078 = !DISubroutineType(types: !7079)
!7079 = !{null, !3079}
!7080 = !DILocalVariable(name: "linknode", arg: 1, scope: !7077, file: !5097, line: 188, type: !3079)
!7081 = !DILocation(line: 188, column: 36, scope: !7077)
!7082 = !DILocation(line: 191, column: 7, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !7077, file: !5097, line: 191, column: 7)
!7084 = !DILocation(line: 191, column: 17, scope: !7083)
!7085 = !DILocation(line: 191, column: 22, scope: !7083)
!7086 = !DILocation(line: 191, column: 7, scope: !7077)
!7087 = !DILocation(line: 192, column: 5, scope: !7083)
!7088 = !DILocation(line: 194, column: 26, scope: !7077)
!7089 = !DILocation(line: 194, column: 36, scope: !7077)
!7090 = !DILocation(line: 194, column: 3, scope: !7077)
!7091 = !DILocation(line: 194, column: 13, scope: !7077)
!7092 = !DILocation(line: 194, column: 19, scope: !7077)
!7093 = !DILocation(line: 194, column: 24, scope: !7077)
!7094 = !DILocation(line: 195, column: 26, scope: !7077)
!7095 = !DILocation(line: 195, column: 36, scope: !7077)
!7096 = !DILocation(line: 195, column: 3, scope: !7077)
!7097 = !DILocation(line: 195, column: 13, scope: !7077)
!7098 = !DILocation(line: 195, column: 19, scope: !7077)
!7099 = !DILocation(line: 195, column: 24, scope: !7077)
!7100 = !DILocation(line: 196, column: 3, scope: !7077)
!7101 = !DILocation(line: 196, column: 13, scope: !7077)
!7102 = !DILocation(line: 196, column: 18, scope: !7077)
!7103 = !DILocation(line: 197, column: 3, scope: !7077)
!7104 = !DILocation(line: 197, column: 13, scope: !7077)
!7105 = !DILocation(line: 197, column: 18, scope: !7077)
!7106 = !DILocation(line: 198, column: 1, scope: !7077)
!7107 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !5097, file: !5097, line: 202, type: !7108, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7108 = !DISubroutineType(types: !7109)
!7109 = !{null, !3079, !3079}
!7110 = !DILocalVariable(name: "linknode", arg: 1, scope: !7107, file: !5097, line: 202, type: !3079)
!7111 = !DILocation(line: 202, column: 42, scope: !7107)
!7112 = !DILocalVariable(name: "list", arg: 2, scope: !7107, file: !5097, line: 202, type: !3079)
!7113 = !DILocation(line: 202, column: 71, scope: !7107)
!7114 = !DILocation(line: 206, column: 20, scope: !7107)
!7115 = !DILocation(line: 206, column: 3, scope: !7107)
!7116 = !DILocation(line: 206, column: 13, scope: !7107)
!7117 = !DILocation(line: 206, column: 18, scope: !7107)
!7118 = !DILocation(line: 207, column: 20, scope: !7107)
!7119 = !DILocation(line: 207, column: 26, scope: !7107)
!7120 = !DILocation(line: 207, column: 3, scope: !7107)
!7121 = !DILocation(line: 207, column: 13, scope: !7107)
!7122 = !DILocation(line: 207, column: 18, scope: !7107)
!7123 = !DILocation(line: 208, column: 22, scope: !7107)
!7124 = !DILocation(line: 208, column: 3, scope: !7107)
!7125 = !DILocation(line: 208, column: 9, scope: !7107)
!7126 = !DILocation(line: 208, column: 15, scope: !7107)
!7127 = !DILocation(line: 208, column: 20, scope: !7107)
!7128 = !DILocation(line: 209, column: 16, scope: !7107)
!7129 = !DILocation(line: 209, column: 3, scope: !7107)
!7130 = !DILocation(line: 209, column: 9, scope: !7107)
!7131 = !DILocation(line: 209, column: 14, scope: !7107)
!7132 = !DILocation(line: 210, column: 1, scope: !7107)
!7133 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !5097, file: !5097, line: 729, type: !7134, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7134 = !DISubroutineType(types: !7135)
!7135 = !{null, !6928}
!7136 = !DILocalVariable(name: "ptr", arg: 1, scope: !7133, file: !5097, line: 729, type: !6928)
!7137 = !DILocation(line: 729, column: 39, scope: !7133)
!7138 = !DILocation(line: 731, column: 3, scope: !7133)
!7139 = !DILocation(line: 731, column: 8, scope: !7133)
!7140 = !DILocation(line: 731, column: 13, scope: !7133)
!7141 = !DILocation(line: 732, column: 3, scope: !7133)
!7142 = !DILocation(line: 732, column: 8, scope: !7133)
!7143 = !DILocation(line: 732, column: 13, scope: !7133)
!7144 = !DILocation(line: 733, column: 3, scope: !7133)
!7145 = !DILocation(line: 733, column: 8, scope: !7133)
!7146 = !DILocation(line: 733, column: 18, scope: !7133)
!7147 = !DILocation(line: 734, column: 3, scope: !7133)
!7148 = !DILocation(line: 734, column: 8, scope: !7133)
!7149 = !DILocation(line: 734, column: 14, scope: !7133)
!7150 = !DILocation(line: 735, column: 3, scope: !7133)
!7151 = !DILocation(line: 735, column: 8, scope: !7133)
!7152 = !DILocation(line: 735, column: 16, scope: !7133)
!7153 = !DILocation(line: 736, column: 3, scope: !7133)
!7154 = !DILocation(line: 736, column: 8, scope: !7133)
!7155 = !DILocation(line: 736, column: 17, scope: !7133)
!7156 = !DILocation(line: 737, column: 3, scope: !7133)
!7157 = !DILocation(line: 737, column: 8, scope: !7133)
!7158 = !DILocation(line: 737, column: 13, scope: !7133)
!7159 = !DILocation(line: 738, column: 1, scope: !7133)
!7160 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5097, file: !5097, line: 442, type: !7161, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7161 = !DISubroutineType(types: !7162)
!7162 = !{!3078, !1677, !1605}
!7163 = !DILocalVariable(name: "gs", arg: 1, scope: !7160, file: !5097, line: 442, type: !1677)
!7164 = !DILocation(line: 442, column: 36, scope: !7160)
!7165 = !DILocalVariable(name: "i", arg: 2, scope: !7160, file: !5097, line: 442, type: !1605)
!7166 = !DILocation(line: 442, column: 44, scope: !7160)
!7167 = !DILocation(line: 444, column: 27, scope: !7160)
!7168 = !DILocation(line: 444, column: 31, scope: !7160)
!7169 = !DILocation(line: 444, column: 11, scope: !7160)
!7170 = !DILocation(line: 444, column: 35, scope: !7160)
!7171 = !DILocation(line: 444, column: 3, scope: !7160)
!7172 = distinct !DISubprogram(name: "op_iter_init", scope: !5097, file: !5097, line: 742, type: !7173, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7173 = !DISubroutineType(types: !7174)
!7174 = !{null, !6928, !1677, !1605}
!7175 = !DILocalVariable(name: "ptr", arg: 1, scope: !7172, file: !5097, line: 742, type: !6928)
!7176 = !DILocation(line: 742, column: 28, scope: !7172)
!7177 = !DILocalVariable(name: "stmt", arg: 2, scope: !7172, file: !5097, line: 742, type: !1677)
!7178 = !DILocation(line: 742, column: 40, scope: !7172)
!7179 = !DILocalVariable(name: "flags", arg: 3, scope: !7172, file: !5097, line: 742, type: !1605)
!7180 = !DILocation(line: 742, column: 50, scope: !7172)
!7181 = !DILocation(line: 746, column: 3, scope: !7172)
!7182 = !DILocation(line: 748, column: 16, scope: !7172)
!7183 = !DILocation(line: 748, column: 22, scope: !7172)
!7184 = !DILocation(line: 748, column: 15, scope: !7172)
!7185 = !DILocation(line: 748, column: 68, scope: !7172)
!7186 = !DILocation(line: 748, column: 52, scope: !7172)
!7187 = !DILocation(line: 748, column: 3, scope: !7172)
!7188 = !DILocation(line: 748, column: 8, scope: !7172)
!7189 = !DILocation(line: 748, column: 13, scope: !7172)
!7190 = !DILocation(line: 749, column: 9, scope: !7191)
!7191 = distinct !DILexicalBlock(scope: !7172, file: !5097, line: 749, column: 7)
!7192 = !DILocation(line: 749, column: 15, scope: !7191)
!7193 = !DILocation(line: 750, column: 7, scope: !7191)
!7194 = !DILocation(line: 750, column: 10, scope: !7191)
!7195 = !DILocation(line: 750, column: 15, scope: !7191)
!7196 = !DILocation(line: 751, column: 7, scope: !7191)
!7197 = !DILocation(line: 751, column: 23, scope: !7191)
!7198 = !DILocation(line: 751, column: 10, scope: !7191)
!7199 = !DILocation(line: 751, column: 29, scope: !7191)
!7200 = !DILocation(line: 749, column: 7, scope: !7172)
!7201 = !DILocation(line: 752, column: 17, scope: !7191)
!7202 = !DILocation(line: 752, column: 22, scope: !7191)
!7203 = !DILocation(line: 752, column: 28, scope: !7191)
!7204 = !DILocation(line: 752, column: 5, scope: !7191)
!7205 = !DILocation(line: 752, column: 10, scope: !7191)
!7206 = !DILocation(line: 752, column: 15, scope: !7191)
!7207 = !DILocation(line: 753, column: 16, scope: !7172)
!7208 = !DILocation(line: 753, column: 22, scope: !7172)
!7209 = !DILocation(line: 753, column: 15, scope: !7172)
!7210 = !DILocation(line: 753, column: 68, scope: !7172)
!7211 = !DILocation(line: 753, column: 52, scope: !7172)
!7212 = !DILocation(line: 753, column: 3, scope: !7172)
!7213 = !DILocation(line: 753, column: 8, scope: !7172)
!7214 = !DILocation(line: 753, column: 13, scope: !7172)
!7215 = !DILocation(line: 754, column: 9, scope: !7216)
!7216 = distinct !DILexicalBlock(scope: !7172, file: !5097, line: 754, column: 7)
!7217 = !DILocation(line: 754, column: 15, scope: !7216)
!7218 = !DILocation(line: 755, column: 7, scope: !7216)
!7219 = !DILocation(line: 755, column: 10, scope: !7216)
!7220 = !DILocation(line: 755, column: 15, scope: !7216)
!7221 = !DILocation(line: 756, column: 7, scope: !7216)
!7222 = !DILocation(line: 756, column: 23, scope: !7216)
!7223 = !DILocation(line: 756, column: 10, scope: !7216)
!7224 = !DILocation(line: 756, column: 29, scope: !7216)
!7225 = !DILocation(line: 754, column: 7, scope: !7172)
!7226 = !DILocation(line: 757, column: 17, scope: !7216)
!7227 = !DILocation(line: 757, column: 22, scope: !7216)
!7228 = !DILocation(line: 757, column: 28, scope: !7216)
!7229 = !DILocation(line: 757, column: 5, scope: !7216)
!7230 = !DILocation(line: 757, column: 10, scope: !7216)
!7231 = !DILocation(line: 757, column: 15, scope: !7216)
!7232 = !DILocation(line: 758, column: 3, scope: !7172)
!7233 = !DILocation(line: 758, column: 8, scope: !7172)
!7234 = !DILocation(line: 758, column: 13, scope: !7172)
!7235 = !DILocation(line: 760, column: 3, scope: !7172)
!7236 = !DILocation(line: 760, column: 8, scope: !7172)
!7237 = !DILocation(line: 760, column: 14, scope: !7172)
!7238 = !DILocation(line: 761, column: 3, scope: !7172)
!7239 = !DILocation(line: 761, column: 8, scope: !7172)
!7240 = !DILocation(line: 761, column: 16, scope: !7172)
!7241 = !DILocation(line: 762, column: 3, scope: !7172)
!7242 = !DILocation(line: 762, column: 8, scope: !7172)
!7243 = !DILocation(line: 762, column: 17, scope: !7172)
!7244 = !DILocation(line: 763, column: 1, scope: !7172)
!7245 = distinct !DISubprogram(name: "gimple_def_ops", scope: !586, file: !586, line: 1292, type: !7246, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7246 = !DISubroutineType(types: !7247)
!7247 = !{!2220, !5058}
!7248 = !DILocalVariable(name: "g", arg: 1, scope: !7245, file: !586, line: 1292, type: !5058)
!7249 = !DILocation(line: 1292, column: 30, scope: !7245)
!7250 = !DILocation(line: 1294, column: 24, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7245, file: !586, line: 1294, column: 7)
!7252 = !DILocation(line: 1294, column: 8, scope: !7251)
!7253 = !DILocation(line: 1294, column: 7, scope: !7245)
!7254 = !DILocation(line: 1295, column: 5, scope: !7251)
!7255 = !DILocation(line: 1296, column: 10, scope: !7245)
!7256 = !DILocation(line: 1296, column: 13, scope: !7245)
!7257 = !DILocation(line: 1296, column: 19, scope: !7245)
!7258 = !DILocation(line: 1296, column: 26, scope: !7245)
!7259 = !DILocation(line: 1296, column: 3, scope: !7245)
!7260 = !DILocation(line: 1297, column: 1, scope: !7245)
!7261 = distinct !DISubprogram(name: "gimple_vdef", scope: !586, file: !586, line: 1375, type: !5125, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7262 = !DILocalVariable(name: "g", arg: 1, scope: !7261, file: !586, line: 1375, type: !5058)
!7263 = !DILocation(line: 1375, column: 27, scope: !7261)
!7264 = !DILocation(line: 1377, column: 28, scope: !7265)
!7265 = distinct !DILexicalBlock(scope: !7261, file: !586, line: 1377, column: 7)
!7266 = !DILocation(line: 1377, column: 8, scope: !7265)
!7267 = !DILocation(line: 1377, column: 7, scope: !7261)
!7268 = !DILocation(line: 1378, column: 5, scope: !7265)
!7269 = !DILocation(line: 1379, column: 10, scope: !7261)
!7270 = !DILocation(line: 1379, column: 13, scope: !7261)
!7271 = !DILocation(line: 1379, column: 23, scope: !7261)
!7272 = !DILocation(line: 1379, column: 3, scope: !7261)
!7273 = !DILocation(line: 1380, column: 1, scope: !7261)
!7274 = distinct !DISubprogram(name: "gimple_use_ops", scope: !586, file: !586, line: 1313, type: !7275, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7275 = !DISubroutineType(types: !7276)
!7276 = !{!2227, !5058}
!7277 = !DILocalVariable(name: "g", arg: 1, scope: !7274, file: !586, line: 1313, type: !5058)
!7278 = !DILocation(line: 1313, column: 30, scope: !7274)
!7279 = !DILocation(line: 1315, column: 24, scope: !7280)
!7280 = distinct !DILexicalBlock(scope: !7274, file: !586, line: 1315, column: 7)
!7281 = !DILocation(line: 1315, column: 8, scope: !7280)
!7282 = !DILocation(line: 1315, column: 7, scope: !7274)
!7283 = !DILocation(line: 1316, column: 5, scope: !7280)
!7284 = !DILocation(line: 1317, column: 10, scope: !7274)
!7285 = !DILocation(line: 1317, column: 13, scope: !7274)
!7286 = !DILocation(line: 1317, column: 19, scope: !7274)
!7287 = !DILocation(line: 1317, column: 26, scope: !7274)
!7288 = !DILocation(line: 1317, column: 3, scope: !7274)
!7289 = !DILocation(line: 1318, column: 1, scope: !7274)
!7290 = distinct !DISubprogram(name: "gimple_vuse", scope: !586, file: !586, line: 1365, type: !5125, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7291 = !DILocalVariable(name: "g", arg: 1, scope: !7290, file: !586, line: 1365, type: !5058)
!7292 = !DILocation(line: 1365, column: 27, scope: !7290)
!7293 = !DILocation(line: 1367, column: 28, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !7290, file: !586, line: 1367, column: 7)
!7295 = !DILocation(line: 1367, column: 8, scope: !7294)
!7296 = !DILocation(line: 1367, column: 7, scope: !7290)
!7297 = !DILocation(line: 1368, column: 5, scope: !7294)
!7298 = !DILocation(line: 1369, column: 10, scope: !7290)
!7299 = !DILocation(line: 1369, column: 13, scope: !7290)
!7300 = !DILocation(line: 1369, column: 23, scope: !7290)
!7301 = !DILocation(line: 1369, column: 3, scope: !7290)
!7302 = !DILocation(line: 1370, column: 1, scope: !7290)
!7303 = distinct !DISubprogram(name: "link_imm_use", scope: !5097, file: !5097, line: 214, type: !7304, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7304 = !DISubroutineType(types: !7305)
!7305 = !{null, !3079, !1702}
!7306 = !DILocalVariable(name: "linknode", arg: 1, scope: !7303, file: !5097, line: 214, type: !3079)
!7307 = !DILocation(line: 214, column: 34, scope: !7303)
!7308 = !DILocalVariable(name: "def", arg: 2, scope: !7303, file: !5097, line: 214, type: !1702)
!7309 = !DILocation(line: 214, column: 49, scope: !7303)
!7310 = !DILocalVariable(name: "root", scope: !7303, file: !5097, line: 216, type: !3079)
!7311 = !DILocation(line: 216, column: 22, scope: !7303)
!7312 = !DILocation(line: 218, column: 8, scope: !7313)
!7313 = distinct !DILexicalBlock(scope: !7303, file: !5097, line: 218, column: 7)
!7314 = !DILocation(line: 218, column: 12, scope: !7313)
!7315 = !DILocation(line: 218, column: 15, scope: !7313)
!7316 = !DILocation(line: 218, column: 31, scope: !7313)
!7317 = !DILocation(line: 218, column: 7, scope: !7303)
!7318 = !DILocation(line: 219, column: 5, scope: !7313)
!7319 = !DILocation(line: 219, column: 15, scope: !7313)
!7320 = !DILocation(line: 219, column: 20, scope: !7313)
!7321 = !DILocation(line: 222, column: 16, scope: !7322)
!7322 = distinct !DILexicalBlock(scope: !7313, file: !5097, line: 221, column: 5)
!7323 = !DILocation(line: 222, column: 12, scope: !7322)
!7324 = !DILocation(line: 227, column: 29, scope: !7322)
!7325 = !DILocation(line: 227, column: 39, scope: !7322)
!7326 = !DILocation(line: 227, column: 7, scope: !7322)
!7327 = !DILocation(line: 229, column: 1, scope: !7303)
!7328 = distinct !DISubprogram(name: "copy_loop_before", scope: !3, file: !3, line: 136, type: !7329, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7329 = !DISubroutineType(types: !7330)
!7330 = !{!1635, !1635}
!7331 = !DILocalVariable(name: "loop", arg: 1, scope: !7328, file: !3, line: 136, type: !1635)
!7332 = !DILocation(line: 136, column: 32, scope: !7328)
!7333 = !DILocalVariable(name: "res", scope: !7328, file: !3, line: 138, type: !1635)
!7334 = !DILocation(line: 138, column: 16, scope: !7328)
!7335 = !DILocalVariable(name: "preheader", scope: !7328, file: !3, line: 139, type: !1657)
!7336 = !DILocation(line: 139, column: 8, scope: !7328)
!7337 = !DILocation(line: 139, column: 41, scope: !7328)
!7338 = !DILocation(line: 139, column: 20, scope: !7328)
!7339 = !DILocation(line: 141, column: 21, scope: !7340)
!7340 = distinct !DILexicalBlock(scope: !7328, file: !3, line: 141, column: 7)
!7341 = !DILocation(line: 141, column: 8, scope: !7340)
!7342 = !DILocation(line: 141, column: 7, scope: !7328)
!7343 = !DILocation(line: 142, column: 5, scope: !7340)
!7344 = !DILocation(line: 144, column: 3, scope: !7328)
!7345 = !DILocation(line: 145, column: 49, scope: !7328)
!7346 = !DILocation(line: 145, column: 55, scope: !7328)
!7347 = !DILocation(line: 145, column: 9, scope: !7328)
!7348 = !DILocation(line: 145, column: 7, scope: !7328)
!7349 = !DILocation(line: 146, column: 3, scope: !7328)
!7350 = !DILocation(line: 148, column: 8, scope: !7351)
!7351 = distinct !DILexicalBlock(scope: !7328, file: !3, line: 148, column: 7)
!7352 = !DILocation(line: 148, column: 7, scope: !7328)
!7353 = !DILocation(line: 149, column: 5, scope: !7351)
!7354 = !DILocation(line: 151, column: 30, scope: !7328)
!7355 = !DILocation(line: 151, column: 36, scope: !7328)
!7356 = !DILocation(line: 151, column: 3, scope: !7328)
!7357 = !DILocation(line: 152, column: 29, scope: !7328)
!7358 = !DILocation(line: 152, column: 3, scope: !7328)
!7359 = !DILocation(line: 154, column: 10, scope: !7328)
!7360 = !DILocation(line: 154, column: 3, scope: !7328)
!7361 = !DILocation(line: 155, column: 1, scope: !7328)
!7362 = distinct !DISubprogram(name: "create_bb_after_loop", scope: !3, file: !3, line: 160, type: !7363, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7363 = !DISubroutineType(types: !7364)
!7364 = !{null, !1635}
!7365 = !DILocalVariable(name: "loop", arg: 1, scope: !7362, file: !3, line: 160, type: !1635)
!7366 = !DILocation(line: 160, column: 36, scope: !7362)
!7367 = !DILocalVariable(name: "exit", scope: !7362, file: !3, line: 162, type: !1657)
!7368 = !DILocation(line: 162, column: 8, scope: !7362)
!7369 = !DILocation(line: 162, column: 28, scope: !7362)
!7370 = !DILocation(line: 162, column: 15, scope: !7362)
!7371 = !DILocation(line: 164, column: 8, scope: !7372)
!7372 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 164, column: 7)
!7373 = !DILocation(line: 164, column: 7, scope: !7362)
!7374 = !DILocation(line: 165, column: 5, scope: !7372)
!7375 = !DILocation(line: 167, column: 15, scope: !7362)
!7376 = !DILocation(line: 167, column: 3, scope: !7362)
!7377 = !DILocation(line: 168, column: 1, scope: !7362)
!7378 = distinct !DISubprogram(name: "update_phis_for_loop_copy", scope: !3, file: !3, line: 85, type: !7379, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7379 = !DISubroutineType(types: !7380)
!7380 = !{null, !1635, !1635}
!7381 = !DILocalVariable(name: "orig_loop", arg: 1, scope: !7378, file: !3, line: 85, type: !1635)
!7382 = !DILocation(line: 85, column: 41, scope: !7378)
!7383 = !DILocalVariable(name: "new_loop", arg: 2, scope: !7378, file: !3, line: 85, type: !1635)
!7384 = !DILocation(line: 85, column: 65, scope: !7378)
!7385 = !DILocalVariable(name: "new_ssa_name", scope: !7378, file: !3, line: 87, type: !1702)
!7386 = !DILocation(line: 87, column: 8, scope: !7378)
!7387 = !DILocalVariable(name: "si_new", scope: !7378, file: !3, line: 88, type: !5811)
!7388 = !DILocation(line: 88, column: 24, scope: !7378)
!7389 = !DILocalVariable(name: "si_orig", scope: !7378, file: !3, line: 88, type: !5811)
!7390 = !DILocation(line: 88, column: 32, scope: !7378)
!7391 = !DILocalVariable(name: "orig_loop_latch", scope: !7378, file: !3, line: 89, type: !1657)
!7392 = !DILocation(line: 89, column: 8, scope: !7378)
!7393 = !DILocation(line: 89, column: 43, scope: !7378)
!7394 = !DILocation(line: 89, column: 26, scope: !7378)
!7395 = !DILocalVariable(name: "orig_entry_e", scope: !7378, file: !3, line: 90, type: !1657)
!7396 = !DILocation(line: 90, column: 8, scope: !7378)
!7397 = !DILocation(line: 90, column: 44, scope: !7378)
!7398 = !DILocation(line: 90, column: 23, scope: !7378)
!7399 = !DILocalVariable(name: "new_loop_entry_e", scope: !7378, file: !3, line: 91, type: !1657)
!7400 = !DILocation(line: 91, column: 8, scope: !7378)
!7401 = !DILocation(line: 91, column: 48, scope: !7378)
!7402 = !DILocation(line: 91, column: 27, scope: !7378)
!7403 = !DILocation(line: 95, column: 33, scope: !7404)
!7404 = distinct !DILexicalBlock(scope: !7378, file: !3, line: 95, column: 3)
!7405 = !DILocation(line: 95, column: 43, scope: !7404)
!7406 = !DILocation(line: 95, column: 17, scope: !7404)
!7407 = !DILocation(line: 96, column: 34, scope: !7404)
!7408 = !DILocation(line: 96, column: 45, scope: !7404)
!7409 = !DILocation(line: 96, column: 18, scope: !7404)
!7410 = !DILocation(line: 95, column: 8, scope: !7404)
!7411 = !DILocation(line: 97, column: 9, scope: !7412)
!7412 = distinct !DILexicalBlock(scope: !7404, file: !3, line: 95, column: 3)
!7413 = !DILocation(line: 97, column: 28, scope: !7412)
!7414 = !DILocation(line: 97, column: 32, scope: !7412)
!7415 = !DILocation(line: 97, column: 31, scope: !7412)
!7416 = !DILocation(line: 0, scope: !7412)
!7417 = !DILocation(line: 95, column: 3, scope: !7404)
!7418 = !DILocalVariable(name: "def", scope: !7419, file: !3, line: 100, type: !1702)
!7419 = distinct !DILexicalBlock(scope: !7412, file: !3, line: 99, column: 5)
!7420 = !DILocation(line: 100, column: 12, scope: !7419)
!7421 = !DILocalVariable(name: "locus", scope: !7419, file: !3, line: 101, type: !1697)
!7422 = !DILocation(line: 101, column: 23, scope: !7419)
!7423 = !DILocalVariable(name: "phi_new", scope: !7419, file: !3, line: 102, type: !1677)
!7424 = !DILocation(line: 102, column: 14, scope: !7419)
!7425 = !DILocation(line: 102, column: 24, scope: !7419)
!7426 = !DILocalVariable(name: "phi_orig", scope: !7419, file: !3, line: 103, type: !1677)
!7427 = !DILocation(line: 103, column: 14, scope: !7419)
!7428 = !DILocation(line: 103, column: 25, scope: !7419)
!7429 = !DILocation(line: 107, column: 13, scope: !7419)
!7430 = !DILocation(line: 107, column: 11, scope: !7419)
!7431 = !DILocation(line: 108, column: 50, scope: !7419)
!7432 = !DILocation(line: 108, column: 60, scope: !7419)
!7433 = !DILocation(line: 108, column: 15, scope: !7419)
!7434 = !DILocation(line: 108, column: 13, scope: !7419)
!7435 = !DILocation(line: 109, column: 20, scope: !7419)
!7436 = !DILocation(line: 109, column: 29, scope: !7419)
!7437 = !DILocation(line: 109, column: 34, scope: !7419)
!7438 = !DILocation(line: 109, column: 52, scope: !7419)
!7439 = !DILocation(line: 109, column: 7, scope: !7419)
!7440 = !DILocation(line: 113, column: 13, scope: !7419)
!7441 = !DILocation(line: 113, column: 11, scope: !7419)
!7442 = !DILocation(line: 114, column: 50, scope: !7419)
!7443 = !DILocation(line: 114, column: 60, scope: !7419)
!7444 = !DILocation(line: 114, column: 15, scope: !7419)
!7445 = !DILocation(line: 114, column: 13, scope: !7419)
!7446 = !DILocation(line: 116, column: 11, scope: !7447)
!7447 = distinct !DILexicalBlock(scope: !7419, file: !3, line: 116, column: 11)
!7448 = !DILocation(line: 116, column: 27, scope: !7447)
!7449 = !DILocation(line: 116, column: 11, scope: !7419)
!7450 = !DILocation(line: 118, column: 36, scope: !7451)
!7451 = distinct !DILexicalBlock(scope: !7447, file: !3, line: 117, column: 2)
!7452 = !DILocation(line: 118, column: 19, scope: !7451)
!7453 = !DILocation(line: 118, column: 17, scope: !7451)
!7454 = !DILocation(line: 120, column: 9, scope: !7455)
!7455 = distinct !DILexicalBlock(scope: !7451, file: !3, line: 120, column: 8)
!7456 = !DILocation(line: 120, column: 8, scope: !7451)
!7457 = !DILocation(line: 123, column: 21, scope: !7455)
!7458 = !DILocation(line: 123, column: 19, scope: !7455)
!7459 = !DILocation(line: 123, column: 6, scope: !7455)
!7460 = !DILocation(line: 124, column: 2, scope: !7451)
!7461 = !DILocation(line: 127, column: 17, scope: !7447)
!7462 = !DILocation(line: 127, column: 15, scope: !7447)
!7463 = !DILocation(line: 129, column: 20, scope: !7419)
!7464 = !DILocation(line: 129, column: 29, scope: !7419)
!7465 = !DILocation(line: 129, column: 60, scope: !7419)
!7466 = !DILocation(line: 129, column: 43, scope: !7419)
!7467 = !DILocation(line: 129, column: 71, scope: !7419)
!7468 = !DILocation(line: 129, column: 7, scope: !7419)
!7469 = !DILocation(line: 130, column: 5, scope: !7419)
!7470 = !DILocation(line: 98, column: 8, scope: !7412)
!7471 = !DILocation(line: 98, column: 28, scope: !7412)
!7472 = !DILocation(line: 95, column: 3, scope: !7412)
!7473 = distinct !{!7473, !7417, !7474}
!7474 = !DILocation(line: 130, column: 5, scope: !7404)
!7475 = !DILocation(line: 131, column: 1, scope: !7378)
!7476 = distinct !DISubprogram(name: "gimple_phi_arg_location_from_edge", scope: !5097, file: !5097, line: 483, type: !7477, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3121)
!7477 = !DISubroutineType(types: !7478)
!7478 = !{!1697, !1677, !1657}
!7479 = !DILocalVariable(name: "gs", arg: 1, scope: !7476, file: !5097, line: 483, type: !1677)
!7480 = !DILocation(line: 483, column: 43, scope: !7476)
!7481 = !DILocalVariable(name: "e", arg: 2, scope: !7476, file: !5097, line: 483, type: !1657)
!7482 = !DILocation(line: 483, column: 52, scope: !7476)
!7483 = !DILocation(line: 485, column: 26, scope: !7476)
!7484 = !DILocation(line: 485, column: 30, scope: !7476)
!7485 = !DILocation(line: 485, column: 33, scope: !7476)
!7486 = !DILocation(line: 485, column: 10, scope: !7476)
!7487 = !DILocation(line: 485, column: 44, scope: !7476)
!7488 = !DILocation(line: 485, column: 3, scope: !7476)
