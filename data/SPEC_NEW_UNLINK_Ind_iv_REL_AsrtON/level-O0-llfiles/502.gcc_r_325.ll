; ModuleID = 'tree-vect-slp.c'
source_filename = "tree-vect-slp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.insn_data = type { i8*, %union.anon.2, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%union.anon.2 = type { i8* }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.VEC_vec_void_p_heap = type { %struct.VEC_vec_void_p_base }
%struct.VEC_vec_void_p_base = type { i32, i32, [1 x i8*] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct._slp_instance = type { %struct._slp_tree*, i32, i32, %struct.anon.0, %struct.VEC_int_heap*, %struct.VEC_slp_tree_heap*, %union.gimple_statement_d* }
%struct._slp_tree = type { %struct._slp_tree*, %struct._slp_tree*, %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap*, i32, %struct.anon }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.anon = type { i32, i32 }
%struct.anon.0 = type { i32, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_slp_tree_heap = type { %struct.VEC_slp_tree_base }
%struct.VEC_slp_tree_base = type { i32, i32, [1 x %struct._slp_tree*] }
%struct._loop_vec_info = type { %struct.loop*, %struct.basic_block_def**, %union.tree_node*, %union.tree_node*, i32, i8, i32, %struct.data_reference*, i32, i32, %struct.VEC_data_reference_p_heap*, %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap*, %struct.VEC_gimple_heap*, i32, %struct.VEC_gimple_heap*, %struct.VEC_slp_instance_heap*, i32 }
%struct.data_reference = type { %union.gimple_statement_d*, %union.tree_node*, i8*, i8, %struct.innermost_loop_behavior, %struct.indices, %struct.dr_alias, %struct.access_matrix* }
%struct.innermost_loop_behavior = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.indices = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.dr_alias = type { %struct.ptr_info_def*, %struct.bitmap_head_def* }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.access_matrix = type { %struct.VEC_loop_p_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_lambda_vector_gc* }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.VEC_lambda_vector_gc = type { %struct.VEC_lambda_vector_base }
%struct.VEC_lambda_vector_base = type { i32, i32, [1 x i32*] }
%struct.VEC_data_reference_p_heap = type { %struct.VEC_data_reference_p_base }
%struct.VEC_data_reference_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.VEC_ddr_p_heap = type { %struct.VEC_ddr_p_base }
%struct.VEC_ddr_p_base = type { i32, i32, [1 x %struct.data_dependence_relation*] }
%struct.data_dependence_relation = type { %struct.data_reference*, %struct.data_reference*, %union.tree_node*, %struct.VEC_subscript_p_heap*, %struct.VEC_loop_p_heap*, %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap*, i32, i8, i8, i8 }
%struct.VEC_subscript_p_heap = type { %struct.VEC_subscript_p_base }
%struct.VEC_subscript_p_base = type { i32, i32, [1 x %struct.subscript*] }
%struct.subscript = type { %struct.conflict_function*, %struct.conflict_function*, %union.tree_node*, %union.tree_node* }
%struct.conflict_function = type { i32, [2 x %struct.VEC_tree_heap*] }
%struct.VEC_lambda_vector_heap = type { %struct.VEC_lambda_vector_base }
%struct.VEC_slp_instance_heap = type { %struct.VEC_slp_instance_base }
%struct.VEC_slp_instance_base = type { i32, i32, [1 x %struct._slp_instance*] }
%struct._bb_vec_info = type { %struct.basic_block_def*, %struct.VEC_gimple_heap*, %struct.VEC_slp_instance_heap*, %struct.VEC_data_reference_p_heap*, %struct.VEC_ddr_p_heap* }
%struct._stmt_vec_info = type { i32, %union.gimple_statement_d*, %struct._loop_vec_info*, i32, i8, %union.tree_node*, %union.gimple_statement_d*, %struct.data_reference*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8, %union.gimple_statement_d*, %struct.VEC_dr_p_heap*, i32, %union.gimple_statement_d*, %union.gimple_statement_d*, i32, i32, i32, %union.gimple_statement_d*, i8, %struct.anon.1, i32, %struct._bb_vec_info* }
%struct.VEC_dr_p_heap = type { %struct.VEC_dr_p_base }
%struct.VEC_dr_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.anon.1 = type { i32, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.optab_d = type { i32, i8*, i8, void (%struct.optab_d*, i8*, i8, i32)*, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }

@vect_dump = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [25 x i8] c"=== vect_analyze_slp ===\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"Failed to SLP the basic block.\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"=== vect_make_slp_decision ===\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"Decided to SLP %d instances. Unrolling factor %d\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"=== vect_detect_hybrid_slp ===\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"===vect_slp_analyze_bb===\0A\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.6 = private unnamed_addr constant [55 x i8] c"not vectorized: too many instructions in basic block.\0A\00", align 1
@.str.7 = private unnamed_addr constant [52 x i8] c"not vectorized: unhandled data-ref in basic block.\0A\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"not vectorized: not enough data-refs in basic block.\0A\00", align 1
@.str.9 = private unnamed_addr constant [52 x i8] c"not vectorized: bad data alignment in basic block.\0A\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"not vectorized: unhandled data dependence in basic block.\0A\00", align 1
@.str.11 = private unnamed_addr constant [55 x i8] c"not vectorized: unhandled data access in basic block.\0A\00", align 1
@.str.12 = private unnamed_addr constant [55 x i8] c"not vectorized: unsupported alignment in basic block.\0A\00", align 1
@.str.13 = private unnamed_addr constant [66 x i8] c"not vectorized: failed to find SLP opportunities in basic block.\0A\00", align 1
@.str.14 = private unnamed_addr constant [47 x i8] c"not vectorized: bad operation in basic block.\0A\00", align 1
@.str.15 = private unnamed_addr constant [42 x i8] c"Basic block will be vectorized using SLP\0A\00", align 1
@.str.16 = private unnamed_addr constant [46 x i8] c"=== vect_update_slp_costs_according_to_vf ===\00", align 1
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.17 = private unnamed_addr constant [33 x i8] c"no builtin for vect permute for \00", align 1
@.str.18 = private unnamed_addr constant [26 x i8] c"unsupported vect permute \00", align 1
@.str.19 = private unnamed_addr constant [29 x i8] c"vectorizing stmts using SLP.\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"tree-vect-slp.c\00", align 1
@.str.21 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"SLPing BB\0A\00", align 1
@.str.23 = private unnamed_addr constant [26 x i8] c"------>SLPing statement: \00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.24 = private unnamed_addr constant [24 x i8] c"BASIC BLOCK VECTORIZED\0A\00", align 1
@.str.25 = private unnamed_addr constant [41 x i8] c"Build SLP failed: unsupported data-type \00", align 1
@.str.26 = private unnamed_addr constant [56 x i8] c"Build SLP failed: unrolling required in basic block SLP\00", align 1
@.str.27 = private unnamed_addr constant [48 x i8] c"Build SLP failed: unsupported load permutation \00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"Build SLP for \00", align 1
@.str.29 = private unnamed_addr constant [52 x i8] c"Build SLP failed: not GIMPLE_ASSIGN nor GIMPLE_CALL\00", align 1
@.str.30 = private unnamed_addr constant [25 x i8] c"SLP with multiple types \00", align 1
@.str.31 = private unnamed_addr constant [28 x i8] c"Build SLP failed: no optab.\00", align 1
@.str.32 = private unnamed_addr constant [46 x i8] c"Build SLP failed: op not supported by target.\00", align 1
@insn_data = external dso_local constant [0 x %struct.insn_data], align 8
@mode_class = external dso_local constant [87 x i8], align 16
@.str.33 = private unnamed_addr constant [47 x i8] c"Build SLP failed: different operation in stmt \00", align 1
@.str.34 = private unnamed_addr constant [48 x i8] c"Build SLP failed: different shift arguments in \00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.35 = private unnamed_addr constant [43 x i8] c"Build SLP failed: strided loads have gaps \00", align 1
@.str.36 = private unnamed_addr constant [86 x i8] c"Build SLP failed: the number of interleaved loads is greater than the SLP group size \00", align 1
@.str.37 = private unnamed_addr constant [46 x i8] c"Build SLP failed: unsupported unaligned load \00", align 1
@.str.38 = private unnamed_addr constant [36 x i8] c"Build SLP failed: not strided load \00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"Build SLP failed: operation\00", align 1
@.str.40 = private unnamed_addr constant [14 x i8] c" unsupported \00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.41 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@__const.vect_get_and_check_slp_defs.dt = private unnamed_addr constant [2 x i32] [i32 8, i32 8], align 4
@.str.42 = private unnamed_addr constant [38 x i8] c"Build SLP failed: can't find def for \00", align 1
@.str.43 = private unnamed_addr constant [74 x i8] c"Build SLP failed: some of the stmts are in a pattern, and others are not \00", align 1
@.str.44 = private unnamed_addr constant [21 x i8] c"Unsupported pattern.\00", align 1
@.str.45 = private unnamed_addr constant [28 x i8] c"unsupported defining stmt: \00", align 1
@.str.46 = private unnamed_addr constant [46 x i8] c"Build SLP failed: two constant oprnds in stmt\00", align 1
@.str.47 = private unnamed_addr constant [35 x i8] c"Build SLP failed: different types \00", align 1
@.str.48 = private unnamed_addr constant [39 x i8] c"Build SLP failed: illegal type of def \00", align 1
@.str.49 = private unnamed_addr constant [18 x i8] c"Load permutation \00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.51 = private unnamed_addr constant [48 x i8] c"Build SLP failed: unsupported data permutation \00", align 1
@stmt_vec_info_vec = external dso_local global %struct.VEC_vec_void_p_heap*, align 8
@.str.52 = private unnamed_addr constant [20 x i8] c"./tree-vectorizer.h\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"node \00", align 1
@.str.54 = private unnamed_addr constant [11 x i8] c"\0A\09stmt %d \00", align 1
@.str.55 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.56 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@vect_get_mask_element.number_of_mask_fixes = internal global i32 1, align 4, !dbg !0
@vect_get_mask_element.mask_fixed = internal global i8 0, align 1, !dbg !4007
@vect_get_mask_element.needs_first_vector = internal global i8 0, align 1, !dbg !4009
@.str.57 = private unnamed_addr constant [43 x i8] c"permutation requires at least two vectors \00", align 1
@.str.58 = private unnamed_addr constant [45 x i8] c"permutation requires at least three vectors \00", align 1
@.str.59 = private unnamed_addr constant [44 x i8] c"------>vectorizing SLP node starting from: \00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @find_bb_location(%struct.basic_block_def* %bb) #0 !dbg !4016 {
entry:
  %retval = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4021, metadata !DIExpression()), !dbg !4022
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !4022
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !4023, metadata !DIExpression()), !dbg !4030
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4031
  %tobool = icmp ne %struct.basic_block_def* %0, null, !dbg !4031
  br i1 %tobool, label %if.end, label %if.then, !dbg !4033

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4034
  br label %return, !dbg !4034

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4035
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !4037
  %2 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4037
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4037
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !4037
  br label %for.cond, !dbg !4038

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4039
  %tobool1 = icmp ne i8 %call, 0, !dbg !4041
  %lnot = xor i1 %tobool1, true, !dbg !4041
  br i1 %lnot, label %for.body, label %for.end, !dbg !4042

for.body:                                         ; preds = %for.cond
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4043
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt, align 8, !dbg !4045
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4046
  %call3 = call i32 @gimple_location(%union.gimple_statement_d* %4), !dbg !4048
  %cmp = icmp ne i32 %call3, 0, !dbg !4049
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !4050

if.then4:                                         ; preds = %for.body
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4051
  %call5 = call i32 @gimple_location(%union.gimple_statement_d* %5), !dbg !4052
  store i32 %call5, i32* %retval, align 4, !dbg !4053
  br label %return, !dbg !4053

if.end6:                                          ; preds = %for.body
  br label %for.inc, !dbg !4054

for.inc:                                          ; preds = %if.end6
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !4055
  br label %for.cond, !dbg !4056, !llvm.loop !4057

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !4059
  br label %return, !dbg !4059

return:                                           ; preds = %for.end, %if.then4, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !4060
  ret i32 %6, !dbg !4060
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !4061 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4064, metadata !DIExpression()), !dbg !4065
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4066, metadata !DIExpression()), !dbg !4067
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !4068, metadata !DIExpression()), !dbg !4069
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4070
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !4071
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !4072
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4073
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !4074
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4075
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4076
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4077
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4078
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !4079
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4080
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4081
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !4082
  ret void, !dbg !4083
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4084 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4087, metadata !DIExpression()), !dbg !4088
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4089
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4089
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4090
  %conv = zext i1 %cmp to i32, !dbg !4090
  %conv1 = trunc i32 %conv to i8, !dbg !4091
  ret i8 %conv1, !dbg !4092
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4093 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4096, metadata !DIExpression()), !dbg !4097
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4098
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4098
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4099
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4099
  ret %union.gimple_statement_d* %1, !dbg !4100
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !4101 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4105, metadata !DIExpression()), !dbg !4106
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4107
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4108
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !4109
  %1 = load i32, i32* %location, align 8, !dbg !4109
  ret i32 %1, !dbg !4110
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !4111 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !4115, metadata !DIExpression()), !dbg !4116
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4117
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !4118
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4118
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !4119
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !4119
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4120
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !4121
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !4122
  ret void, !dbg !4123
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_free_slp_instance(%struct._slp_instance* %instance) #0 !dbg !4124 {
entry:
  %instance.addr = alloca %struct._slp_instance*, align 8
  store %struct._slp_instance* %instance, %struct._slp_instance** %instance.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance.addr, metadata !4127, metadata !DIExpression()), !dbg !4128
  %0 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !4129
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %0, i32 0, i32 0, !dbg !4129
  %1 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !4129
  call void @vect_free_slp_tree(%struct._slp_tree* %1), !dbg !4130
  %2 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !4131
  %load_permutation = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %2, i32 0, i32 4, !dbg !4131
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %load_permutation), !dbg !4131
  %3 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !4132
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %3, i32 0, i32 5, !dbg !4132
  call void @VEC_slp_tree_heap_free(%struct.VEC_slp_tree_heap** %loads), !dbg !4132
  ret void, !dbg !4133
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_free_slp_tree(%struct._slp_tree* %node) #0 !dbg !4134 {
entry:
  %node.addr = alloca %struct._slp_tree*, align 8
  store %struct._slp_tree* %node, %struct._slp_tree** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node.addr, metadata !4137, metadata !DIExpression()), !dbg !4138
  %0 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4139
  %tobool = icmp ne %struct._slp_tree* %0, null, !dbg !4139
  br i1 %tobool, label %if.end, label %if.then, !dbg !4141

if.then:                                          ; preds = %entry
  br label %return, !dbg !4142

if.end:                                           ; preds = %entry
  %1 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4143
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %1, i32 0, i32 0, !dbg !4143
  %2 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !4143
  %tobool1 = icmp ne %struct._slp_tree* %2, null, !dbg !4143
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !4145

if.then2:                                         ; preds = %if.end
  %3 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4146
  %left3 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i32 0, i32 0, !dbg !4146
  %4 = load %struct._slp_tree*, %struct._slp_tree** %left3, align 8, !dbg !4146
  call void @vect_free_slp_tree(%struct._slp_tree* %4), !dbg !4147
  br label %if.end4, !dbg !4147

if.end4:                                          ; preds = %if.then2, %if.end
  %5 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4148
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %5, i32 0, i32 1, !dbg !4148
  %6 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !4148
  %tobool5 = icmp ne %struct._slp_tree* %6, null, !dbg !4148
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !4150

if.then6:                                         ; preds = %if.end4
  %7 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4151
  %right7 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %7, i32 0, i32 1, !dbg !4151
  %8 = load %struct._slp_tree*, %struct._slp_tree** %right7, align 8, !dbg !4151
  call void @vect_free_slp_tree(%struct._slp_tree* %8), !dbg !4152
  br label %if.end8, !dbg !4152

if.end8:                                          ; preds = %if.then6, %if.end4
  %9 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4153
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %9, i32 0, i32 2, !dbg !4153
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %stmts), !dbg !4153
  %10 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4154
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %10, i32 0, i32 3, !dbg !4154
  %11 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !4154
  %tobool9 = icmp ne %struct.VEC_gimple_heap* %11, null, !dbg !4154
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !4156

if.then10:                                        ; preds = %if.end8
  %12 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4157
  %vec_stmts11 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %12, i32 0, i32 3, !dbg !4157
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_stmts11), !dbg !4157
  br label %if.end12, !dbg !4157

if.end12:                                         ; preds = %if.then10, %if.end8
  %13 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4158
  %14 = bitcast %struct._slp_tree* %13 to i8*, !dbg !4158
  call void @free(i8* %14), !dbg !4159
  br label %return, !dbg !4160

return:                                           ; preds = %if.end12, %if.then
  ret void, !dbg !4160
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !4161 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !4165, metadata !DIExpression()), !dbg !4166
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !4167
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !4167
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !4167
  br i1 %tobool, label %if.then, label %if.end, !dbg !4166

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !4167
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !4167
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !4167
  call void @free(i8* %4), !dbg !4167
  br label %if.end, !dbg !4167

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !4166
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !4166
  ret void, !dbg !4166
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_slp_tree_heap_free(%struct.VEC_slp_tree_heap** %vec_) #0 !dbg !4169 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_tree_heap**, align 8
  store %struct.VEC_slp_tree_heap** %vec_, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_heap*** %vec_.addr, metadata !4173, metadata !DIExpression()), !dbg !4174
  %0 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !4175
  %1 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %0, align 8, !dbg !4175
  %tobool = icmp ne %struct.VEC_slp_tree_heap* %1, null, !dbg !4175
  br i1 %tobool, label %if.then, label %if.end, !dbg !4174

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !4175
  %3 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %2, align 8, !dbg !4175
  %4 = bitcast %struct.VEC_slp_tree_heap* %3 to i8*, !dbg !4175
  call void @free(i8* %4), !dbg !4175
  br label %if.end, !dbg !4175

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !4174
  store %struct.VEC_slp_tree_heap* null, %struct.VEC_slp_tree_heap** %5, align 8, !dbg !4174
  ret void, !dbg !4174
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @vect_analyze_slp(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo) #0 !dbg !4177 {
entry:
  %retval = alloca i8, align 1
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %bb_vinfo.addr = alloca %struct._bb_vec_info*, align 8
  %i = alloca i32, align 4
  %strided_stores = alloca %struct.VEC_gimple_heap*, align 8
  %store = alloca %union.gimple_statement_d*, align 8
  %ok = alloca i8, align 1
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4180, metadata !DIExpression()), !dbg !4181
  store %struct._bb_vec_info* %bb_vinfo, %struct._bb_vec_info** %bb_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo.addr, metadata !4182, metadata !DIExpression()), !dbg !4183
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4184, metadata !DIExpression()), !dbg !4185
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %strided_stores, metadata !4186, metadata !DIExpression()), !dbg !4187
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %store, metadata !4188, metadata !DIExpression()), !dbg !4189
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !4190, metadata !DIExpression()), !dbg !4191
  store i8 0, i8* %ok, align 1, !dbg !4191
  %call = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4192
  %tobool = icmp ne i8 %call, 0, !dbg !4192
  br i1 %tobool, label %if.then, label %if.end, !dbg !4194

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4195
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0)), !dbg !4196
  br label %if.end, !dbg !4196

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4197
  %tobool2 = icmp ne %struct._loop_vec_info* %1, null, !dbg !4197
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !4199

if.then3:                                         ; preds = %if.end
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4200
  %strided_stores4 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 15, !dbg !4200
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %strided_stores4, align 8, !dbg !4200
  store %struct.VEC_gimple_heap* %3, %struct.VEC_gimple_heap** %strided_stores, align 8, !dbg !4201
  br label %if.end6, !dbg !4202

if.else:                                          ; preds = %if.end
  %4 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !4203
  %strided_stores5 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %4, i32 0, i32 1, !dbg !4203
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %strided_stores5, align 8, !dbg !4203
  store %struct.VEC_gimple_heap* %5, %struct.VEC_gimple_heap** %strided_stores, align 8, !dbg !4204
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then3
  store i32 0, i32* %i, align 4, !dbg !4205
  br label %for.cond, !dbg !4207

for.cond:                                         ; preds = %for.inc, %if.end6
  %6 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %strided_stores, align 8, !dbg !4208
  %tobool7 = icmp ne %struct.VEC_gimple_heap* %6, null, !dbg !4208
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !4208

cond.true:                                        ; preds = %for.cond
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %strided_stores, align 8, !dbg !4208
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %7, i32 0, i32 0, !dbg !4208
  br label %cond.end, !dbg !4208

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4208

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4208
  %8 = load i32, i32* %i, align 4, !dbg !4208
  %call8 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %8, %union.gimple_statement_d** %store), !dbg !4208
  %tobool9 = icmp ne i32 %call8, 0, !dbg !4210
  br i1 %tobool9, label %for.body, label %for.end, !dbg !4210

for.body:                                         ; preds = %cond.end
  %9 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4211
  %10 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !4213
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %store, align 8, !dbg !4214
  %call10 = call zeroext i8 @vect_analyze_slp_instance(%struct._loop_vec_info* %9, %struct._bb_vec_info* %10, %union.gimple_statement_d* %11), !dbg !4215
  %tobool11 = icmp ne i8 %call10, 0, !dbg !4215
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !4216

if.then12:                                        ; preds = %for.body
  store i8 1, i8* %ok, align 1, !dbg !4217
  br label %if.end13, !dbg !4218

if.end13:                                         ; preds = %if.then12, %for.body
  br label %for.inc, !dbg !4219

for.inc:                                          ; preds = %if.end13
  %12 = load i32, i32* %i, align 4, !dbg !4220
  %inc = add i32 %12, 1, !dbg !4220
  store i32 %inc, i32* %i, align 4, !dbg !4220
  br label %for.cond, !dbg !4221, !llvm.loop !4222

for.end:                                          ; preds = %cond.end
  %13 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !4224
  %tobool14 = icmp ne %struct._bb_vec_info* %13, null, !dbg !4224
  br i1 %tobool14, label %land.lhs.true, label %if.end22, !dbg !4226

land.lhs.true:                                    ; preds = %for.end
  %14 = load i8, i8* %ok, align 1, !dbg !4227
  %tobool15 = icmp ne i8 %14, 0, !dbg !4227
  br i1 %tobool15, label %if.end22, label %if.then16, !dbg !4228

if.then16:                                        ; preds = %land.lhs.true
  %call17 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4229
  %tobool18 = icmp ne i8 %call17, 0, !dbg !4229
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !4232

if.then19:                                        ; preds = %if.then16
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4233
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0)), !dbg !4234
  br label %if.end21, !dbg !4234

if.end21:                                         ; preds = %if.then19, %if.then16
  store i8 0, i8* %retval, align 1, !dbg !4235
  br label %return, !dbg !4235

if.end22:                                         ; preds = %land.lhs.true, %for.end
  store i8 1, i8* %retval, align 1, !dbg !4236
  br label %return, !dbg !4236

return:                                           ; preds = %if.end22, %if.end21
  %16 = load i8, i8* %retval, align 1, !dbg !4237
  ret i8 %16, !dbg !4237
}

declare dso_local zeroext i8 @vect_print_dump_info(i32) #3

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !4238 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !4244, metadata !DIExpression()), !dbg !4245
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4246, metadata !DIExpression()), !dbg !4245
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !4247, metadata !DIExpression()), !dbg !4245
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !4248
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !4248
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4248

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4248
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !4248
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !4248
  %3 = load i32, i32* %num, align 8, !dbg !4248
  %cmp = icmp ult i32 %1, %3, !dbg !4248
  br i1 %cmp, label %if.then, label %if.else, !dbg !4245

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !4250
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !4250
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4250
  %idxprom = zext i32 %5 to i64, !dbg !4250
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !4250
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !4250
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !4250
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !4250
  store i32 1, i32* %retval, align 4, !dbg !4250
  br label %return, !dbg !4250

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !4252
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !4252
  store i32 0, i32* %retval, align 4, !dbg !4252
  br label %return, !dbg !4252

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4245
  ret i32 %9, !dbg !4245
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_analyze_slp_instance(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %union.gimple_statement_d* %stmt) #0 !dbg !4254 {
entry:
  %retval = alloca i8, align 1
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %bb_vinfo.addr = alloca %struct._bb_vec_info*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_instance = alloca %struct._slp_instance*, align 8
  %node = alloca %struct._slp_tree*, align 8
  %group_size = alloca i32, align 4
  %unrolling_factor = alloca i32, align 4
  %nunits = alloca i32, align 4
  %vectype = alloca %union.tree_node*, align 8
  %scalar_type = alloca %union.tree_node*, align 8
  %next = alloca %union.gimple_statement_d*, align 8
  %vectorization_factor = alloca i32, align 4
  %inside_cost = alloca i32, align 4
  %outside_cost = alloca i32, align 4
  %ncopies_for_cost = alloca i32, align 4
  %max_nunits = alloca i32, align 4
  %load_permutation = alloca %struct.VEC_int_heap*, align 8
  %loads = alloca %struct.VEC_slp_tree_heap*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4257, metadata !DIExpression()), !dbg !4258
  store %struct._bb_vec_info* %bb_vinfo, %struct._bb_vec_info** %bb_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo.addr, metadata !4259, metadata !DIExpression()), !dbg !4260
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4261, metadata !DIExpression()), !dbg !4262
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %new_instance, metadata !4263, metadata !DIExpression()), !dbg !4264
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node, metadata !4265, metadata !DIExpression()), !dbg !4266
  %call = call i8* @xmalloc(i64 48), !dbg !4267
  %0 = bitcast i8* %call to %struct._slp_tree*, !dbg !4267
  store %struct._slp_tree* %0, %struct._slp_tree** %node, align 8, !dbg !4266
  call void @llvm.dbg.declare(metadata i32* %group_size, metadata !4268, metadata !DIExpression()), !dbg !4269
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4270
  %call1 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %1), !dbg !4270
  %size = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call1, i32 0, i32 19, !dbg !4270
  %2 = load i32, i32* %size, align 8, !dbg !4270
  store i32 %2, i32* %group_size, align 4, !dbg !4269
  call void @llvm.dbg.declare(metadata i32* %unrolling_factor, metadata !4271, metadata !DIExpression()), !dbg !4272
  store i32 1, i32* %unrolling_factor, align 4, !dbg !4272
  call void @llvm.dbg.declare(metadata i32* %nunits, metadata !4273, metadata !DIExpression()), !dbg !4274
  call void @llvm.dbg.declare(metadata %union.tree_node** %vectype, metadata !4275, metadata !DIExpression()), !dbg !4276
  call void @llvm.dbg.declare(metadata %union.tree_node** %scalar_type, metadata !4277, metadata !DIExpression()), !dbg !4278
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %next, metadata !4279, metadata !DIExpression()), !dbg !4280
  call void @llvm.dbg.declare(metadata i32* %vectorization_factor, metadata !4281, metadata !DIExpression()), !dbg !4282
  store i32 0, i32* %vectorization_factor, align 4, !dbg !4282
  call void @llvm.dbg.declare(metadata i32* %inside_cost, metadata !4283, metadata !DIExpression()), !dbg !4284
  store i32 0, i32* %inside_cost, align 4, !dbg !4284
  call void @llvm.dbg.declare(metadata i32* %outside_cost, metadata !4285, metadata !DIExpression()), !dbg !4286
  store i32 0, i32* %outside_cost, align 4, !dbg !4286
  call void @llvm.dbg.declare(metadata i32* %ncopies_for_cost, metadata !4287, metadata !DIExpression()), !dbg !4288
  call void @llvm.dbg.declare(metadata i32* %max_nunits, metadata !4289, metadata !DIExpression()), !dbg !4290
  store i32 0, i32* %max_nunits, align 4, !dbg !4290
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %load_permutation, metadata !4291, metadata !DIExpression()), !dbg !4292
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_heap** %loads, metadata !4293, metadata !DIExpression()), !dbg !4294
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4295
  %call2 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %3), !dbg !4295
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call2, i32 0, i32 7, !dbg !4295
  %4 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !4295
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %4, i32 0, i32 1, !dbg !4295
  %5 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4295
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4295
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4295
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4295
  store %union.tree_node* %6, %union.tree_node** %scalar_type, align 8, !dbg !4296
  %7 = load %union.tree_node*, %union.tree_node** %scalar_type, align 8, !dbg !4297
  %call3 = call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %7), !dbg !4298
  store %union.tree_node* %call3, %union.tree_node** %vectype, align 8, !dbg !4299
  %8 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !4300
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !4300
  br i1 %tobool, label %if.end8, label %if.then, !dbg !4302

if.then:                                          ; preds = %entry
  %call4 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4303
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4303
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !4306

if.then6:                                         ; preds = %if.then
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4307
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.25, i64 0, i64 0)), !dbg !4309
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4310
  %11 = load %union.tree_node*, %union.tree_node** %scalar_type, align 8, !dbg !4311
  call void @print_generic_expr(%struct._IO_FILE* %10, %union.tree_node* %11, i32 2), !dbg !4312
  br label %if.end, !dbg !4313

if.end:                                           ; preds = %if.then6, %if.then
  store i8 0, i8* %retval, align 1, !dbg !4314
  br label %return, !dbg !4314

if.end8:                                          ; preds = %entry
  %12 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !4315
  %type9 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !4315
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 6, !dbg !4315
  %bf.load = load i32, i32* %precision, align 4, !dbg !4315
  %bf.clear = and i32 %bf.load, 1023, !dbg !4315
  %sh_prom = zext i32 %bf.clear to i64, !dbg !4315
  %shl = shl i64 1, %sh_prom, !dbg !4315
  %conv = trunc i64 %shl to i32, !dbg !4315
  store i32 %conv, i32* %nunits, align 4, !dbg !4316
  %13 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4317
  %tobool10 = icmp ne %struct._loop_vec_info* %13, null, !dbg !4317
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !4319

if.then11:                                        ; preds = %if.end8
  %14 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4320
  %vectorization_factor12 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %14, i32 0, i32 6, !dbg !4320
  %15 = load i32, i32* %vectorization_factor12, align 8, !dbg !4320
  store i32 %15, i32* %vectorization_factor, align 4, !dbg !4321
  br label %if.end13, !dbg !4322

if.else:                                          ; preds = %if.end8
  %16 = load i32, i32* %nunits, align 4, !dbg !4323
  store i32 %16, i32* %vectorization_factor, align 4, !dbg !4324
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then11
  %17 = load i32, i32* %nunits, align 4, !dbg !4325
  %18 = load i32, i32* %group_size, align 4, !dbg !4326
  %call14 = call i32 @least_common_multiple(i32 %17, i32 %18), !dbg !4327
  %19 = load i32, i32* %group_size, align 4, !dbg !4328
  %div = udiv i32 %call14, %19, !dbg !4329
  store i32 %div, i32* %unrolling_factor, align 4, !dbg !4330
  %20 = load i32, i32* %unrolling_factor, align 4, !dbg !4331
  %cmp = icmp ne i32 %20, 1, !dbg !4333
  br i1 %cmp, label %land.lhs.true, label %if.end23, !dbg !4334

land.lhs.true:                                    ; preds = %if.end13
  %21 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4335
  %tobool16 = icmp ne %struct._loop_vec_info* %21, null, !dbg !4335
  br i1 %tobool16, label %if.end23, label %if.then17, !dbg !4336

if.then17:                                        ; preds = %land.lhs.true
  %call18 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4337
  %tobool19 = icmp ne i8 %call18, 0, !dbg !4337
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !4340

if.then20:                                        ; preds = %if.then17
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4341
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.26, i64 0, i64 0)), !dbg !4342
  br label %if.end22, !dbg !4342

if.end22:                                         ; preds = %if.then20, %if.then17
  store i8 0, i8* %retval, align 1, !dbg !4343
  br label %return, !dbg !4343

if.end23:                                         ; preds = %land.lhs.true, %if.end13
  %23 = load i32, i32* %group_size, align 4, !dbg !4344
  %call24 = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %23), !dbg !4344
  %24 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4345
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %24, i32 0, i32 2, !dbg !4345
  store %struct.VEC_gimple_heap* %call24, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !4346
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4347
  store %union.gimple_statement_d* %25, %union.gimple_statement_d** %next, align 8, !dbg !4348
  br label %while.cond, !dbg !4349

while.cond:                                       ; preds = %while.body, %if.end23
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !4350
  %tobool25 = icmp ne %union.gimple_statement_d* %26, null, !dbg !4349
  br i1 %tobool25, label %while.body, label %while.end, !dbg !4349

while.body:                                       ; preds = %while.cond
  %27 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4351
  %stmts26 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %27, i32 0, i32 2, !dbg !4351
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !4351
  %call27 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %stmts26, %union.gimple_statement_d* %28), !dbg !4351
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !4353
  %call28 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %29), !dbg !4353
  %next_dr = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call28, i32 0, i32 18, !dbg !4353
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next_dr, align 8, !dbg !4353
  store %union.gimple_statement_d* %30, %union.gimple_statement_d** %next, align 8, !dbg !4354
  br label %while.cond, !dbg !4349, !llvm.loop !4355

while.end:                                        ; preds = %while.cond
  %31 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4357
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %31, i32 0, i32 3, !dbg !4357
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !4358
  %32 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4359
  %vec_stmts_size = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %32, i32 0, i32 4, !dbg !4359
  store i32 0, i32* %vec_stmts_size, align 8, !dbg !4360
  %33 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4361
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %33, i32 0, i32 0, !dbg !4361
  store %struct._slp_tree* null, %struct._slp_tree** %left, align 8, !dbg !4362
  %34 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4363
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %34, i32 0, i32 1, !dbg !4363
  store %struct._slp_tree* null, %struct._slp_tree** %right, align 8, !dbg !4364
  %35 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4365
  %cost = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %35, i32 0, i32 5, !dbg !4365
  %outside_of_loop = getelementptr inbounds %struct.anon, %struct.anon* %cost, i32 0, i32 0, !dbg !4365
  store i32 0, i32* %outside_of_loop, align 4, !dbg !4366
  %36 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4367
  %cost29 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %36, i32 0, i32 5, !dbg !4367
  %inside_of_loop = getelementptr inbounds %struct.anon, %struct.anon* %cost29, i32 0, i32 1, !dbg !4367
  store i32 0, i32* %inside_of_loop, align 4, !dbg !4368
  %37 = load i32, i32* %unrolling_factor, align 4, !dbg !4369
  %38 = load i32, i32* %group_size, align 4, !dbg !4370
  %mul = mul i32 %37, %38, !dbg !4371
  %39 = load i32, i32* %nunits, align 4, !dbg !4372
  %div30 = udiv i32 %mul, %39, !dbg !4373
  store i32 %div30, i32* %ncopies_for_cost, align 4, !dbg !4374
  %40 = load i32, i32* %group_size, align 4, !dbg !4375
  %41 = load i32, i32* %group_size, align 4, !dbg !4375
  %mul31 = mul i32 %40, %41, !dbg !4375
  %call32 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %mul31), !dbg !4375
  store %struct.VEC_int_heap* %call32, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !4376
  %42 = load i32, i32* %group_size, align 4, !dbg !4377
  %call33 = call %struct.VEC_slp_tree_heap* @VEC_slp_tree_heap_alloc(i32 %42), !dbg !4377
  store %struct.VEC_slp_tree_heap* %call33, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !4378
  %43 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4379
  %44 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !4381
  %45 = load i32, i32* %group_size, align 4, !dbg !4382
  %46 = load i32, i32* %ncopies_for_cost, align 4, !dbg !4383
  %47 = load i32, i32* %vectorization_factor, align 4, !dbg !4384
  %call34 = call zeroext i8 @vect_build_slp_tree(%struct._loop_vec_info* %43, %struct._bb_vec_info* %44, %struct._slp_tree** %node, i32 %45, i32* %inside_cost, i32* %outside_cost, i32 %46, i32* %max_nunits, %struct.VEC_int_heap** %load_permutation, %struct.VEC_slp_tree_heap** %loads, i32 %47), !dbg !4385
  %tobool35 = icmp ne i8 %call34, 0, !dbg !4385
  br i1 %tobool35, label %if.then36, label %if.end81, !dbg !4386

if.then36:                                        ; preds = %while.end
  %call37 = call i8* @xmalloc(i64 48), !dbg !4387
  %48 = bitcast i8* %call37 to %struct._slp_instance*, !dbg !4387
  store %struct._slp_instance* %48, %struct._slp_instance** %new_instance, align 8, !dbg !4389
  %49 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4390
  %50 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4391
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %50, i32 0, i32 0, !dbg !4391
  store %struct._slp_tree* %49, %struct._slp_tree** %root, align 8, !dbg !4392
  %51 = load i32, i32* %group_size, align 4, !dbg !4393
  %52 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4394
  %group_size38 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %52, i32 0, i32 1, !dbg !4394
  store i32 %51, i32* %group_size38, align 8, !dbg !4395
  %53 = load i32, i32* %max_nunits, align 4, !dbg !4396
  %54 = load i32, i32* %nunits, align 4, !dbg !4398
  %cmp39 = icmp ugt i32 %53, %54, !dbg !4399
  br i1 %cmp39, label %if.then41, label %if.end44, !dbg !4400

if.then41:                                        ; preds = %if.then36
  %55 = load i32, i32* %max_nunits, align 4, !dbg !4401
  %56 = load i32, i32* %group_size, align 4, !dbg !4402
  %call42 = call i32 @least_common_multiple(i32 %55, i32 %56), !dbg !4403
  %57 = load i32, i32* %group_size, align 4, !dbg !4404
  %div43 = udiv i32 %call42, %57, !dbg !4405
  store i32 %div43, i32* %unrolling_factor, align 4, !dbg !4406
  br label %if.end44, !dbg !4407

if.end44:                                         ; preds = %if.then41, %if.then36
  %58 = load i32, i32* %unrolling_factor, align 4, !dbg !4408
  %59 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4409
  %unrolling_factor45 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %59, i32 0, i32 2, !dbg !4409
  store i32 %58, i32* %unrolling_factor45, align 4, !dbg !4410
  %60 = load i32, i32* %outside_cost, align 4, !dbg !4411
  %61 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4412
  %cost46 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %61, i32 0, i32 3, !dbg !4412
  %outside_of_loop47 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %cost46, i32 0, i32 0, !dbg !4412
  store i32 %60, i32* %outside_of_loop47, align 8, !dbg !4413
  %62 = load i32, i32* %inside_cost, align 4, !dbg !4414
  %63 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4415
  %cost48 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %63, i32 0, i32 3, !dbg !4415
  %inside_of_loop49 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %cost48, i32 0, i32 1, !dbg !4415
  store i32 %62, i32* %inside_of_loop49, align 4, !dbg !4416
  %64 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !4417
  %65 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4418
  %loads50 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %65, i32 0, i32 5, !dbg !4418
  store %struct.VEC_slp_tree_heap* %64, %struct.VEC_slp_tree_heap** %loads50, align 8, !dbg !4419
  %66 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4420
  %first_load = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %66, i32 0, i32 6, !dbg !4420
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %first_load, align 8, !dbg !4421
  %67 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !4422
  %68 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4423
  %load_permutation51 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %68, i32 0, i32 4, !dbg !4423
  store %struct.VEC_int_heap* %67, %struct.VEC_int_heap** %load_permutation51, align 8, !dbg !4424
  %69 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !4425
  %tobool52 = icmp ne %struct.VEC_slp_tree_heap* %69, null, !dbg !4425
  br i1 %tobool52, label %cond.true, label %cond.false, !dbg !4425

cond.true:                                        ; preds = %if.end44
  %70 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !4425
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %70, i32 0, i32 0, !dbg !4425
  br label %cond.end, !dbg !4425

cond.false:                                       ; preds = %if.end44
  br label %cond.end, !dbg !4425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4425
  %call53 = call i32 @VEC_slp_tree_base_length(%struct.VEC_slp_tree_base* %cond), !dbg !4425
  %tobool54 = icmp ne i32 %call53, 0, !dbg !4425
  br i1 %tobool54, label %if.then55, label %if.else67, !dbg !4427

if.then55:                                        ; preds = %cond.end
  %71 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4428
  %72 = load i32, i32* %group_size, align 4, !dbg !4431
  %73 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !4432
  %call56 = call zeroext i8 @vect_supported_load_permutation_p(%struct._slp_instance* %71, i32 %72, %struct.VEC_int_heap* %73), !dbg !4433
  %tobool57 = icmp ne i8 %call56, 0, !dbg !4433
  br i1 %tobool57, label %if.end64, label %if.then58, !dbg !4434

if.then58:                                        ; preds = %if.then55
  %call59 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4435
  %tobool60 = icmp ne i8 %call59, 0, !dbg !4435
  br i1 %tobool60, label %if.then61, label %if.end63, !dbg !4438

if.then61:                                        ; preds = %if.then58
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4439
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.27, i64 0, i64 0)), !dbg !4441
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4442
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4443
  call void @print_gimple_stmt(%struct._IO_FILE* %75, %union.gimple_statement_d* %76, i32 0, i32 2), !dbg !4444
  br label %if.end63, !dbg !4445

if.end63:                                         ; preds = %if.then61, %if.then58
  %77 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4446
  call void @vect_free_slp_instance(%struct._slp_instance* %77), !dbg !4447
  store i8 0, i8* %retval, align 1, !dbg !4448
  br label %return, !dbg !4448

if.end64:                                         ; preds = %if.then55
  %78 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4449
  %call65 = call %union.gimple_statement_d* @vect_find_first_load_in_slp_instance(%struct._slp_instance* %78), !dbg !4450
  %79 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4451
  %first_load66 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %79, i32 0, i32 6, !dbg !4451
  store %union.gimple_statement_d* %call65, %union.gimple_statement_d** %first_load66, align 8, !dbg !4452
  br label %if.end69, !dbg !4453

if.else67:                                        ; preds = %cond.end
  %80 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4454
  %load_permutation68 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %80, i32 0, i32 4, !dbg !4454
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %load_permutation68), !dbg !4454
  br label %if.end69

if.end69:                                         ; preds = %if.else67, %if.end64
  %81 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4455
  %tobool70 = icmp ne %struct._loop_vec_info* %81, null, !dbg !4455
  br i1 %tobool70, label %if.then71, label %if.else73, !dbg !4457

if.then71:                                        ; preds = %if.end69
  %82 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4458
  %slp_instances = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %82, i32 0, i32 16, !dbg !4458
  %83 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4458
  %call72 = call %struct._slp_instance** @VEC_slp_instance_heap_safe_push(%struct.VEC_slp_instance_heap** %slp_instances, %struct._slp_instance* %83), !dbg !4458
  br label %if.end76, !dbg !4458

if.else73:                                        ; preds = %if.end69
  %84 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !4459
  %slp_instances74 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %84, i32 0, i32 2, !dbg !4459
  %85 = load %struct._slp_instance*, %struct._slp_instance** %new_instance, align 8, !dbg !4459
  %call75 = call %struct._slp_instance** @VEC_slp_instance_heap_safe_push(%struct.VEC_slp_instance_heap** %slp_instances74, %struct._slp_instance* %85), !dbg !4459
  br label %if.end76

if.end76:                                         ; preds = %if.else73, %if.then71
  %call77 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4460
  %tobool78 = icmp ne i8 %call77, 0, !dbg !4460
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !4462

if.then79:                                        ; preds = %if.end76
  %86 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4463
  call void @vect_print_slp_tree(%struct._slp_tree* %86), !dbg !4464
  br label %if.end80, !dbg !4464

if.end80:                                         ; preds = %if.then79, %if.end76
  store i8 1, i8* %retval, align 1, !dbg !4465
  br label %return, !dbg !4465

if.end81:                                         ; preds = %while.end
  %87 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4466
  call void @vect_free_slp_tree(%struct._slp_tree* %87), !dbg !4467
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %load_permutation), !dbg !4468
  call void @VEC_slp_tree_heap_free(%struct.VEC_slp_tree_heap** %loads), !dbg !4469
  store i8 0, i8* %retval, align 1, !dbg !4470
  br label %return, !dbg !4470

return:                                           ; preds = %if.end81, %if.end80, %if.end63, %if.end22, %if.end
  %88 = load i8, i8* %retval, align 1, !dbg !4471
  ret i8 %88, !dbg !4471
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_make_slp_decision(%struct._loop_vec_info* %loop_vinfo) #0 !dbg !4472 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %i = alloca i32, align 4
  %unrolling_factor = alloca i32, align 4
  %slp_instances = alloca %struct.VEC_slp_instance_heap*, align 8
  %instance = alloca %struct._slp_instance*, align 8
  %decided_to_slp = alloca i32, align 4
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4475, metadata !DIExpression()), !dbg !4476
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4477, metadata !DIExpression()), !dbg !4478
  call void @llvm.dbg.declare(metadata i32* %unrolling_factor, metadata !4479, metadata !DIExpression()), !dbg !4480
  store i32 1, i32* %unrolling_factor, align 4, !dbg !4480
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap** %slp_instances, metadata !4481, metadata !DIExpression()), !dbg !4482
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4483
  %slp_instances1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 16, !dbg !4483
  %1 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !4483
  store %struct.VEC_slp_instance_heap* %1, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4482
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance, metadata !4484, metadata !DIExpression()), !dbg !4485
  call void @llvm.dbg.declare(metadata i32* %decided_to_slp, metadata !4486, metadata !DIExpression()), !dbg !4487
  store i32 0, i32* %decided_to_slp, align 4, !dbg !4487
  %call = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4488
  %tobool = icmp ne i8 %call, 0, !dbg !4488
  br i1 %tobool, label %if.then, label %if.end, !dbg !4490

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4491
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0)), !dbg !4492
  br label %if.end, !dbg !4492

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !4493
  br label %for.cond, !dbg !4495

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4496
  %tobool3 = icmp ne %struct.VEC_slp_instance_heap* %3, null, !dbg !4496
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4496

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4496
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %4, i32 0, i32 0, !dbg !4496
  br label %cond.end, !dbg !4496

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4496

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4496
  %5 = load i32, i32* %i, align 4, !dbg !4496
  %call4 = call i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %cond, i32 %5, %struct._slp_instance** %instance), !dbg !4496
  %tobool5 = icmp ne i32 %call4, 0, !dbg !4498
  br i1 %tobool5, label %for.body, label %for.end, !dbg !4498

for.body:                                         ; preds = %cond.end
  %6 = load i32, i32* %unrolling_factor, align 4, !dbg !4499
  %7 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !4502
  %unrolling_factor6 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %7, i32 0, i32 2, !dbg !4502
  %8 = load i32, i32* %unrolling_factor6, align 4, !dbg !4502
  %cmp = icmp ult i32 %6, %8, !dbg !4503
  br i1 %cmp, label %if.then7, label %if.end9, !dbg !4504

if.then7:                                         ; preds = %for.body
  %9 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !4505
  %unrolling_factor8 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %9, i32 0, i32 2, !dbg !4505
  %10 = load i32, i32* %unrolling_factor8, align 4, !dbg !4505
  store i32 %10, i32* %unrolling_factor, align 4, !dbg !4506
  br label %if.end9, !dbg !4507

if.end9:                                          ; preds = %if.then7, %for.body
  %11 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !4508
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %11, i32 0, i32 0, !dbg !4508
  %12 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !4508
  call void @vect_mark_slp_stmts(%struct._slp_tree* %12, i32 1, i32 -1), !dbg !4509
  %13 = load i32, i32* %decided_to_slp, align 4, !dbg !4510
  %inc = add nsw i32 %13, 1, !dbg !4510
  store i32 %inc, i32* %decided_to_slp, align 4, !dbg !4510
  br label %for.inc, !dbg !4511

for.inc:                                          ; preds = %if.end9
  %14 = load i32, i32* %i, align 4, !dbg !4512
  %inc10 = add i32 %14, 1, !dbg !4512
  store i32 %inc10, i32* %i, align 4, !dbg !4512
  br label %for.cond, !dbg !4513, !llvm.loop !4514

for.end:                                          ; preds = %cond.end
  %15 = load i32, i32* %unrolling_factor, align 4, !dbg !4516
  %16 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4517
  %slp_unrolling_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %16, i32 0, i32 17, !dbg !4517
  store i32 %15, i32* %slp_unrolling_factor, align 8, !dbg !4518
  %17 = load i32, i32* %decided_to_slp, align 4, !dbg !4519
  %tobool11 = icmp ne i32 %17, 0, !dbg !4519
  br i1 %tobool11, label %land.lhs.true, label %if.end16, !dbg !4521

land.lhs.true:                                    ; preds = %for.end
  %call12 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4522
  %conv = zext i8 %call12 to i32, !dbg !4522
  %tobool13 = icmp ne i32 %conv, 0, !dbg !4522
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !4523

if.then14:                                        ; preds = %land.lhs.true
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4524
  %19 = load i32, i32* %decided_to_slp, align 4, !dbg !4525
  %20 = load i32, i32* %unrolling_factor, align 4, !dbg !4526
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i32 %19, i32 %20), !dbg !4527
  br label %if.end16, !dbg !4527

if.end16:                                         ; preds = %if.then14, %land.lhs.true, %for.end
  ret void, !dbg !4528
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %vec_, i32 %ix_, %struct._slp_instance** %ptr) #0 !dbg !4529 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_slp_instance_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct._slp_instance**, align 8
  store %struct.VEC_slp_instance_base* %vec_, %struct.VEC_slp_instance_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_base** %vec_.addr, metadata !4535, metadata !DIExpression()), !dbg !4536
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4537, metadata !DIExpression()), !dbg !4536
  store %struct._slp_instance** %ptr, %struct._slp_instance*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance*** %ptr.addr, metadata !4538, metadata !DIExpression()), !dbg !4536
  %0 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !4539
  %tobool = icmp ne %struct.VEC_slp_instance_base* %0, null, !dbg !4539
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4539

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4539
  %2 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !4539
  %num = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %2, i32 0, i32 0, !dbg !4539
  %3 = load i32, i32* %num, align 8, !dbg !4539
  %cmp = icmp ult i32 %1, %3, !dbg !4539
  br i1 %cmp, label %if.then, label %if.else, !dbg !4536

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !4541
  %vec = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %4, i32 0, i32 2, !dbg !4541
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4541
  %idxprom = zext i32 %5 to i64, !dbg !4541
  %arrayidx = getelementptr inbounds [1 x %struct._slp_instance*], [1 x %struct._slp_instance*]* %vec, i64 0, i64 %idxprom, !dbg !4541
  %6 = load %struct._slp_instance*, %struct._slp_instance** %arrayidx, align 8, !dbg !4541
  %7 = load %struct._slp_instance**, %struct._slp_instance*** %ptr.addr, align 8, !dbg !4541
  store %struct._slp_instance* %6, %struct._slp_instance** %7, align 8, !dbg !4541
  store i32 1, i32* %retval, align 4, !dbg !4541
  br label %return, !dbg !4541

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct._slp_instance**, %struct._slp_instance*** %ptr.addr, align 8, !dbg !4543
  store %struct._slp_instance* null, %struct._slp_instance** %8, align 8, !dbg !4543
  store i32 0, i32* %retval, align 4, !dbg !4543
  br label %return, !dbg !4543

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4536
  ret i32 %9, !dbg !4536
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_mark_slp_stmts(%struct._slp_tree* %node, i32 %mark, i32 %j) #0 !dbg !4545 {
entry:
  %node.addr = alloca %struct._slp_tree*, align 8
  %mark.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct._slp_tree* %node, %struct._slp_tree** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node.addr, metadata !4548, metadata !DIExpression()), !dbg !4549
  store i32 %mark, i32* %mark.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mark.addr, metadata !4550, metadata !DIExpression()), !dbg !4551
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !4552, metadata !DIExpression()), !dbg !4553
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4554, metadata !DIExpression()), !dbg !4555
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4556, metadata !DIExpression()), !dbg !4557
  %0 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4558
  %tobool = icmp ne %struct._slp_tree* %0, null, !dbg !4558
  br i1 %tobool, label %if.end, label %if.then, !dbg !4560

if.then:                                          ; preds = %entry
  br label %return, !dbg !4561

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4562
  br label %for.cond, !dbg !4564

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4565
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %1, i32 0, i32 2, !dbg !4565
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !4565
  %tobool1 = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !4565
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4565

cond.true:                                        ; preds = %for.cond
  %3 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4565
  %stmts2 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i32 0, i32 2, !dbg !4565
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts2, align 8, !dbg !4565
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !4565
  br label %cond.end, !dbg !4565

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4565

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4565
  %5 = load i32, i32* %i, align 4, !dbg !4565
  %call = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %5, %union.gimple_statement_d** %stmt), !dbg !4565
  %tobool3 = icmp ne i32 %call, 0, !dbg !4567
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4567

for.body:                                         ; preds = %cond.end
  %6 = load i32, i32* %j.addr, align 4, !dbg !4568
  %cmp = icmp slt i32 %6, 0, !dbg !4570
  br i1 %cmp, label %if.then5, label %lor.lhs.false, !dbg !4571

lor.lhs.false:                                    ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !4572
  %8 = load i32, i32* %j.addr, align 4, !dbg !4573
  %cmp4 = icmp eq i32 %7, %8, !dbg !4574
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !4575

if.then5:                                         ; preds = %lor.lhs.false, %for.body
  %9 = load i32, i32* %mark.addr, align 4, !dbg !4576
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4577
  %call6 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %10), !dbg !4577
  %slp_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call6, i32 0, i32 25, !dbg !4577
  store i32 %9, i32* %slp_type, align 4, !dbg !4578
  br label %if.end7, !dbg !4577

if.end7:                                          ; preds = %if.then5, %lor.lhs.false
  br label %for.inc, !dbg !4573

for.inc:                                          ; preds = %if.end7
  %11 = load i32, i32* %i, align 4, !dbg !4579
  %inc = add nsw i32 %11, 1, !dbg !4579
  store i32 %inc, i32* %i, align 4, !dbg !4579
  br label %for.cond, !dbg !4580, !llvm.loop !4581

for.end:                                          ; preds = %cond.end
  %12 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4583
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %12, i32 0, i32 0, !dbg !4583
  %13 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !4583
  %14 = load i32, i32* %mark.addr, align 4, !dbg !4584
  %15 = load i32, i32* %j.addr, align 4, !dbg !4585
  call void @vect_mark_slp_stmts(%struct._slp_tree* %13, i32 %14, i32 %15), !dbg !4586
  %16 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4587
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %16, i32 0, i32 1, !dbg !4587
  %17 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !4587
  %18 = load i32, i32* %mark.addr, align 4, !dbg !4588
  %19 = load i32, i32* %j.addr, align 4, !dbg !4589
  call void @vect_mark_slp_stmts(%struct._slp_tree* %17, i32 %18, i32 %19), !dbg !4590
  br label %return, !dbg !4591

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !4591
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_detect_hybrid_slp(%struct._loop_vec_info* %loop_vinfo) #0 !dbg !4592 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %i = alloca i32, align 4
  %slp_instances = alloca %struct.VEC_slp_instance_heap*, align 8
  %instance = alloca %struct._slp_instance*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4593, metadata !DIExpression()), !dbg !4594
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4595, metadata !DIExpression()), !dbg !4596
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap** %slp_instances, metadata !4597, metadata !DIExpression()), !dbg !4598
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4599
  %slp_instances1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 16, !dbg !4599
  %1 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !4599
  store %struct.VEC_slp_instance_heap* %1, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4598
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance, metadata !4600, metadata !DIExpression()), !dbg !4601
  %call = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !4602
  %tobool = icmp ne i8 %call, 0, !dbg !4602
  br i1 %tobool, label %if.then, label %if.end, !dbg !4604

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4605
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0)), !dbg !4606
  br label %if.end, !dbg !4606

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !4607
  br label %for.cond, !dbg !4609

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4610
  %tobool3 = icmp ne %struct.VEC_slp_instance_heap* %3, null, !dbg !4610
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4610

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4610
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %4, i32 0, i32 0, !dbg !4610
  br label %cond.end, !dbg !4610

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4610

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4610
  %5 = load i32, i32* %i, align 4, !dbg !4610
  %call4 = call i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %cond, i32 %5, %struct._slp_instance** %instance), !dbg !4610
  %tobool5 = icmp ne i32 %call4, 0, !dbg !4612
  br i1 %tobool5, label %for.body, label %for.end, !dbg !4612

for.body:                                         ; preds = %cond.end
  %6 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !4613
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %6, i32 0, i32 0, !dbg !4613
  %7 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !4613
  call void @vect_detect_hybrid_slp_stmts(%struct._slp_tree* %7), !dbg !4614
  br label %for.inc, !dbg !4614

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !4615
  %inc = add i32 %8, 1, !dbg !4615
  store i32 %inc, i32* %i, align 4, !dbg !4615
  br label %for.cond, !dbg !4616, !llvm.loop !4617

for.end:                                          ; preds = %cond.end
  ret void, !dbg !4619
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_detect_hybrid_slp_stmts(%struct._slp_tree* %node) #0 !dbg !4620 {
entry:
  %node.addr = alloca %struct._slp_tree*, align 8
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_vinfo = alloca %struct._stmt_vec_info*, align 8
  store %struct._slp_tree* %node, %struct._slp_tree** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node.addr, metadata !4621, metadata !DIExpression()), !dbg !4622
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4623, metadata !DIExpression()), !dbg !4624
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4625, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !4627, metadata !DIExpression()), !dbg !4635
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !4636, metadata !DIExpression()), !dbg !4637
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_vinfo, metadata !4638, metadata !DIExpression()), !dbg !4639
  %0 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4640
  %tobool = icmp ne %struct._slp_tree* %0, null, !dbg !4640
  br i1 %tobool, label %if.end, label %if.then, !dbg !4642

if.then:                                          ; preds = %entry
  br label %return, !dbg !4643

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4644
  br label %for.cond, !dbg !4646

for.cond:                                         ; preds = %for.inc33, %if.end
  %1 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4647
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %1, i32 0, i32 2, !dbg !4647
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !4647
  %tobool1 = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !4647
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4647

cond.true:                                        ; preds = %for.cond
  %3 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4647
  %stmts2 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i32 0, i32 2, !dbg !4647
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts2, align 8, !dbg !4647
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !4647
  br label %cond.end, !dbg !4647

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4647

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4647
  %5 = load i32, i32* %i, align 4, !dbg !4647
  %call = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %5, %union.gimple_statement_d** %stmt), !dbg !4647
  %tobool3 = icmp ne i32 %call, 0, !dbg !4649
  br i1 %tobool3, label %for.body, label %for.end34, !dbg !4649

for.body:                                         ; preds = %cond.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4650
  %call4 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %6), !dbg !4650
  %slp_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call4, i32 0, i32 25, !dbg !4650
  %7 = load i32, i32* %slp_type, align 4, !dbg !4650
  %cmp = icmp eq i32 %7, 1, !dbg !4650
  br i1 %cmp, label %land.lhs.true, label %if.end32, !dbg !4652

land.lhs.true:                                    ; preds = %for.body
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4653
  %call5 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %8, i32 0), !dbg !4653
  %base6 = bitcast %union.tree_node* %call5 to %struct.tree_base*, !dbg !4653
  %9 = bitcast %struct.tree_base* %base6 to i64*, !dbg !4653
  %bf.load = load i64, i64* %9, align 8, !dbg !4653
  %bf.clear = and i64 %bf.load, 65535, !dbg !4653
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4653
  %cmp7 = icmp eq i32 %bf.cast, 141, !dbg !4654
  br i1 %cmp7, label %if.then8, label %if.end32, !dbg !4655

if.then8:                                         ; preds = %land.lhs.true
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4656
  %call9 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %10, i32 0), !dbg !4656
  %call10 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %call9), !dbg !4656
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4656
  br label %for.cond11, !dbg !4656

for.cond11:                                       ; preds = %for.inc, %if.then8
  %call12 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4658
  %tobool13 = icmp ne i8 %call12, 0, !dbg !4658
  %lnot = xor i1 %tobool13, true, !dbg !4658
  br i1 %lnot, label %for.body14, label %for.end, !dbg !4656

for.body14:                                       ; preds = %for.cond11
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4660
  %call15 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %11), !dbg !4662
  store %struct._stmt_vec_info* %call15, %struct._stmt_vec_info** %stmt_vinfo, align 8, !dbg !4663
  %tobool16 = icmp ne %struct._stmt_vec_info* %call15, null, !dbg !4663
  br i1 %tobool16, label %land.lhs.true17, label %if.end30, !dbg !4664

land.lhs.true17:                                  ; preds = %for.body14
  %12 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_vinfo, align 8, !dbg !4665
  %slp_type18 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %12, i32 0, i32 25, !dbg !4665
  %13 = load i32, i32* %slp_type18, align 4, !dbg !4665
  %tobool19 = icmp ne i32 %13, 0, !dbg !4665
  br i1 %tobool19, label %if.end30, label %land.lhs.true20, !dbg !4666

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %14 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_vinfo, align 8, !dbg !4667
  %relevant = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %14, i32 0, i32 3, !dbg !4667
  %15 = load i32, i32* %relevant, align 8, !dbg !4667
  %tobool21 = icmp ne i32 %15, 0, !dbg !4667
  br i1 %tobool21, label %if.then29, label %lor.lhs.false, !dbg !4668

lor.lhs.false:                                    ; preds = %land.lhs.true20
  %16 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_vinfo, align 8, !dbg !4669
  %def_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %16, i32 0, i32 16, !dbg !4669
  %17 = load i32, i32* %def_type, align 8, !dbg !4669
  %cmp22 = icmp eq i32 %17, 5, !dbg !4669
  br i1 %cmp22, label %if.then29, label %lor.lhs.false23, !dbg !4669

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %18 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_vinfo, align 8, !dbg !4669
  %def_type24 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %18, i32 0, i32 16, !dbg !4669
  %19 = load i32, i32* %def_type24, align 8, !dbg !4669
  %cmp25 = icmp eq i32 %19, 6, !dbg !4669
  br i1 %cmp25, label %if.then29, label %lor.lhs.false26, !dbg !4669

lor.lhs.false26:                                  ; preds = %lor.lhs.false23
  %20 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_vinfo, align 8, !dbg !4669
  %def_type27 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %20, i32 0, i32 16, !dbg !4669
  %21 = load i32, i32* %def_type27, align 8, !dbg !4669
  %cmp28 = icmp eq i32 %21, 7, !dbg !4669
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !4670

if.then29:                                        ; preds = %lor.lhs.false26, %lor.lhs.false23, %lor.lhs.false, %land.lhs.true20
  %22 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4671
  %23 = load i32, i32* %i, align 4, !dbg !4672
  call void @vect_mark_slp_stmts(%struct._slp_tree* %22, i32 2, i32 %23), !dbg !4673
  br label %if.end30, !dbg !4673

if.end30:                                         ; preds = %if.then29, %lor.lhs.false26, %land.lhs.true17, %for.body14
  br label %for.inc, !dbg !4674

for.inc:                                          ; preds = %if.end30
  %call31 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4658
  store %union.gimple_statement_d* %call31, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4658
  br label %for.cond11, !dbg !4658, !llvm.loop !4675

for.end:                                          ; preds = %for.cond11
  br label %if.end32, !dbg !4676

if.end32:                                         ; preds = %for.end, %land.lhs.true, %for.body
  br label %for.inc33, !dbg !4677

for.inc33:                                        ; preds = %if.end32
  %24 = load i32, i32* %i, align 4, !dbg !4678
  %inc = add nsw i32 %24, 1, !dbg !4678
  store i32 %inc, i32* %i, align 4, !dbg !4678
  br label %for.cond, !dbg !4679, !llvm.loop !4680

for.end34:                                        ; preds = %cond.end
  %25 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4682
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %25, i32 0, i32 0, !dbg !4682
  %26 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !4682
  call void @vect_detect_hybrid_slp_stmts(%struct._slp_tree* %26), !dbg !4683
  %27 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !4684
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %27, i32 0, i32 1, !dbg !4684
  %28 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !4684
  call void @vect_detect_hybrid_slp_stmts(%struct._slp_tree* %28), !dbg !4685
  br label %return, !dbg !4686

return:                                           ; preds = %for.end34, %if.then
  ret void, !dbg !4686
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._bb_vec_info* @vect_slp_analyze_bb(%struct.basic_block_def* %bb) #0 !dbg !4687 {
entry:
  %retval = alloca %struct._bb_vec_info*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %bb_vinfo = alloca %struct._bb_vec_info*, align 8
  %ddrs = alloca %struct.VEC_ddr_p_heap*, align 8
  %slp_instances = alloca %struct.VEC_slp_instance_heap*, align 8
  %instance = alloca %struct._slp_instance*, align 8
  %i = alloca i32, align 4
  %insns = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4690, metadata !DIExpression()), !dbg !4691
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo, metadata !4692, metadata !DIExpression()), !dbg !4693
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %ddrs, metadata !4694, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap** %slp_instances, metadata !4696, metadata !DIExpression()), !dbg !4697
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance, metadata !4698, metadata !DIExpression()), !dbg !4699
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4700, metadata !DIExpression()), !dbg !4701
  call void @llvm.dbg.declare(metadata i32* %insns, metadata !4702, metadata !DIExpression()), !dbg !4703
  store i32 0, i32* %insns, align 4, !dbg !4703
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4704, metadata !DIExpression()), !dbg !4705
  %call = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4706
  %tobool = icmp ne i8 %call, 0, !dbg !4706
  br i1 %tobool, label %if.then, label %if.end, !dbg !4708

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4709
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0)), !dbg !4710
  br label %if.end, !dbg !4710

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4711
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !4713
  %2 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4713
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4713
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !4713
  br label %for.cond, !dbg !4714

for.cond:                                         ; preds = %for.inc, %if.end
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4715
  %tobool3 = icmp ne i8 %call2, 0, !dbg !4717
  %lnot = xor i1 %tobool3, true, !dbg !4717
  br i1 %lnot, label %for.body, label %for.end, !dbg !4718

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4719, metadata !DIExpression()), !dbg !4721
  %call4 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4722
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %stmt, align 8, !dbg !4721
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4723
  %call5 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %4), !dbg !4725
  %tobool6 = icmp ne i8 %call5, 0, !dbg !4725
  br i1 %tobool6, label %if.end12, label %land.lhs.true, !dbg !4726

land.lhs.true:                                    ; preds = %for.body
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4727
  %call7 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %5), !dbg !4728
  %tobool8 = icmp ne i8 %call7, 0, !dbg !4728
  br i1 %tobool8, label %if.end12, label %land.lhs.true9, !dbg !4729

land.lhs.true9:                                   ; preds = %land.lhs.true
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4730
  %call10 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !4731
  %cmp = icmp ne i32 %call10, 4, !dbg !4732
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !4733

if.then11:                                        ; preds = %land.lhs.true9
  %7 = load i32, i32* %insns, align 4, !dbg !4734
  %inc = add nsw i32 %7, 1, !dbg !4734
  store i32 %inc, i32* %insns, align 4, !dbg !4734
  br label %if.end12, !dbg !4735

if.end12:                                         ; preds = %if.then11, %land.lhs.true9, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4736

for.inc:                                          ; preds = %if.end12
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4737
  br label %for.cond, !dbg !4738, !llvm.loop !4739

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %insns, align 4, !dbg !4741
  %9 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4743
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %9, i64 113, !dbg !4743
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4743
  %10 = load i32, i32* %value, align 8, !dbg !4743
  %cmp13 = icmp sgt i32 %8, %10, !dbg !4744
  br i1 %cmp13, label %if.then14, label %if.end20, !dbg !4745

if.then14:                                        ; preds = %for.end
  %call15 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4746
  %tobool16 = icmp ne i8 %call15, 0, !dbg !4746
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !4749

if.then17:                                        ; preds = %if.then14
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4750
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0)), !dbg !4751
  br label %if.end19, !dbg !4751

if.end19:                                         ; preds = %if.then17, %if.then14
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4752
  br label %return, !dbg !4752

if.end20:                                         ; preds = %for.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4753
  %call21 = call %struct._bb_vec_info* @new_bb_vec_info(%struct.basic_block_def* %12), !dbg !4754
  store %struct._bb_vec_info* %call21, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4755
  %13 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4756
  %tobool22 = icmp ne %struct._bb_vec_info* %13, null, !dbg !4756
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !4758

if.then23:                                        ; preds = %if.end20
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4759
  br label %return, !dbg !4759

if.end24:                                         ; preds = %if.end20
  %14 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4760
  %call25 = call zeroext i8 @vect_analyze_data_refs(%struct._loop_vec_info* null, %struct._bb_vec_info* %14), !dbg !4762
  %tobool26 = icmp ne i8 %call25, 0, !dbg !4762
  br i1 %tobool26, label %if.end33, label %if.then27, !dbg !4763

if.then27:                                        ; preds = %if.end24
  %call28 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4764
  %tobool29 = icmp ne i8 %call28, 0, !dbg !4764
  br i1 %tobool29, label %if.then30, label %if.end32, !dbg !4767

if.then30:                                        ; preds = %if.then27
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4768
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.7, i64 0, i64 0)), !dbg !4769
  br label %if.end32, !dbg !4769

if.end32:                                         ; preds = %if.then30, %if.then27
  %16 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4770
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %16), !dbg !4771
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4772
  br label %return, !dbg !4772

if.end33:                                         ; preds = %if.end24
  %17 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4773
  %ddrs34 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %17, i32 0, i32 4, !dbg !4773
  %18 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs34, align 8, !dbg !4773
  store %struct.VEC_ddr_p_heap* %18, %struct.VEC_ddr_p_heap** %ddrs, align 8, !dbg !4774
  %19 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs, align 8, !dbg !4775
  %tobool35 = icmp ne %struct.VEC_ddr_p_heap* %19, null, !dbg !4775
  br i1 %tobool35, label %cond.true, label %cond.false, !dbg !4775

cond.true:                                        ; preds = %if.end33
  %20 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs, align 8, !dbg !4775
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %20, i32 0, i32 0, !dbg !4775
  br label %cond.end, !dbg !4775

cond.false:                                       ; preds = %if.end33
  br label %cond.end, !dbg !4775

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4775
  %call36 = call i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %cond), !dbg !4775
  %tobool37 = icmp ne i32 %call36, 0, !dbg !4775
  br i1 %tobool37, label %if.end44, label %if.then38, !dbg !4777

if.then38:                                        ; preds = %cond.end
  %call39 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4778
  %tobool40 = icmp ne i8 %call39, 0, !dbg !4778
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !4781

if.then41:                                        ; preds = %if.then38
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4782
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0)), !dbg !4783
  br label %if.end43, !dbg !4783

if.end43:                                         ; preds = %if.then41, %if.then38
  %22 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4784
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %22), !dbg !4785
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4786
  br label %return, !dbg !4786

if.end44:                                         ; preds = %cond.end
  %23 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4787
  %call45 = call zeroext i8 @vect_analyze_data_refs_alignment(%struct._loop_vec_info* null, %struct._bb_vec_info* %23), !dbg !4789
  %tobool46 = icmp ne i8 %call45, 0, !dbg !4789
  br i1 %tobool46, label %if.end53, label %if.then47, !dbg !4790

if.then47:                                        ; preds = %if.end44
  %call48 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4791
  %tobool49 = icmp ne i8 %call48, 0, !dbg !4791
  br i1 %tobool49, label %if.then50, label %if.end52, !dbg !4794

if.then50:                                        ; preds = %if.then47
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4795
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.9, i64 0, i64 0)), !dbg !4796
  br label %if.end52, !dbg !4796

if.end52:                                         ; preds = %if.then50, %if.then47
  %25 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4797
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %25), !dbg !4798
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4799
  br label %return, !dbg !4799

if.end53:                                         ; preds = %if.end44
  %26 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4800
  %call54 = call zeroext i8 @vect_analyze_data_ref_dependences(%struct._loop_vec_info* null, %struct._bb_vec_info* %26), !dbg !4802
  %tobool55 = icmp ne i8 %call54, 0, !dbg !4802
  br i1 %tobool55, label %if.end62, label %if.then56, !dbg !4803

if.then56:                                        ; preds = %if.end53
  %call57 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4804
  %tobool58 = icmp ne i8 %call57, 0, !dbg !4804
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !4807

if.then59:                                        ; preds = %if.then56
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4808
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.10, i64 0, i64 0)), !dbg !4809
  br label %if.end61, !dbg !4809

if.end61:                                         ; preds = %if.then59, %if.then56
  %28 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4810
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %28), !dbg !4811
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4812
  br label %return, !dbg !4812

if.end62:                                         ; preds = %if.end53
  %29 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4813
  %call63 = call zeroext i8 @vect_analyze_data_ref_accesses(%struct._loop_vec_info* null, %struct._bb_vec_info* %29), !dbg !4815
  %tobool64 = icmp ne i8 %call63, 0, !dbg !4815
  br i1 %tobool64, label %if.end71, label %if.then65, !dbg !4816

if.then65:                                        ; preds = %if.end62
  %call66 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4817
  %tobool67 = icmp ne i8 %call66, 0, !dbg !4817
  br i1 %tobool67, label %if.then68, label %if.end70, !dbg !4820

if.then68:                                        ; preds = %if.then65
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4821
  %call69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i64 0, i64 0)), !dbg !4822
  br label %if.end70, !dbg !4822

if.end70:                                         ; preds = %if.then68, %if.then65
  %31 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4823
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %31), !dbg !4824
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4825
  br label %return, !dbg !4825

if.end71:                                         ; preds = %if.end62
  %32 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4826
  %call72 = call zeroext i8 @vect_verify_datarefs_alignment(%struct._loop_vec_info* null, %struct._bb_vec_info* %32), !dbg !4828
  %tobool73 = icmp ne i8 %call72, 0, !dbg !4828
  br i1 %tobool73, label %if.end80, label %if.then74, !dbg !4829

if.then74:                                        ; preds = %if.end71
  %call75 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4830
  %tobool76 = icmp ne i8 %call75, 0, !dbg !4830
  br i1 %tobool76, label %if.then77, label %if.end79, !dbg !4833

if.then77:                                        ; preds = %if.then74
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4834
  %call78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)), !dbg !4835
  br label %if.end79, !dbg !4835

if.end79:                                         ; preds = %if.then77, %if.then74
  %34 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4836
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %34), !dbg !4837
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4838
  br label %return, !dbg !4838

if.end80:                                         ; preds = %if.end71
  %35 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4839
  %call81 = call zeroext i8 @vect_analyze_slp(%struct._loop_vec_info* null, %struct._bb_vec_info* %35), !dbg !4841
  %tobool82 = icmp ne i8 %call81, 0, !dbg !4841
  br i1 %tobool82, label %if.end89, label %if.then83, !dbg !4842

if.then83:                                        ; preds = %if.end80
  %call84 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4843
  %tobool85 = icmp ne i8 %call84, 0, !dbg !4843
  br i1 %tobool85, label %if.then86, label %if.end88, !dbg !4846

if.then86:                                        ; preds = %if.then83
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4847
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.13, i64 0, i64 0)), !dbg !4848
  br label %if.end88, !dbg !4848

if.end88:                                         ; preds = %if.then86, %if.then83
  %37 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4849
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %37), !dbg !4850
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4851
  br label %return, !dbg !4851

if.end89:                                         ; preds = %if.end80
  %38 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4852
  %slp_instances90 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %38, i32 0, i32 2, !dbg !4852
  %39 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances90, align 8, !dbg !4852
  store %struct.VEC_slp_instance_heap* %39, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4853
  store i32 0, i32* %i, align 4, !dbg !4854
  br label %for.cond91, !dbg !4856

for.cond91:                                       ; preds = %for.inc102, %if.end89
  %40 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4857
  %tobool92 = icmp ne %struct.VEC_slp_instance_heap* %40, null, !dbg !4857
  br i1 %tobool92, label %cond.true93, label %cond.false95, !dbg !4857

cond.true93:                                      ; preds = %for.cond91
  %41 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4857
  %base94 = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %41, i32 0, i32 0, !dbg !4857
  br label %cond.end96, !dbg !4857

cond.false95:                                     ; preds = %for.cond91
  br label %cond.end96, !dbg !4857

cond.end96:                                       ; preds = %cond.false95, %cond.true93
  %cond97 = phi %struct.VEC_slp_instance_base* [ %base94, %cond.true93 ], [ null, %cond.false95 ], !dbg !4857
  %42 = load i32, i32* %i, align 4, !dbg !4857
  %call98 = call i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %cond97, i32 %42, %struct._slp_instance** %instance), !dbg !4857
  %tobool99 = icmp ne i32 %call98, 0, !dbg !4859
  br i1 %tobool99, label %for.body100, label %for.end104, !dbg !4859

for.body100:                                      ; preds = %cond.end96
  %43 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !4860
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %43, i32 0, i32 0, !dbg !4860
  %44 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !4860
  call void @vect_mark_slp_stmts(%struct._slp_tree* %44, i32 1, i32 -1), !dbg !4862
  %45 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !4863
  %root101 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %45, i32 0, i32 0, !dbg !4863
  %46 = load %struct._slp_tree*, %struct._slp_tree** %root101, align 8, !dbg !4863
  call void @vect_mark_slp_stmts_relevant(%struct._slp_tree* %46), !dbg !4864
  br label %for.inc102, !dbg !4865

for.inc102:                                       ; preds = %for.body100
  %47 = load i32, i32* %i, align 4, !dbg !4866
  %inc103 = add nsw i32 %47, 1, !dbg !4866
  store i32 %inc103, i32* %i, align 4, !dbg !4866
  br label %for.cond91, !dbg !4867, !llvm.loop !4868

for.end104:                                       ; preds = %cond.end96
  %48 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4870
  %call105 = call zeroext i8 @vect_slp_analyze_operations(%struct._bb_vec_info* %48), !dbg !4872
  %tobool106 = icmp ne i8 %call105, 0, !dbg !4872
  br i1 %tobool106, label %if.end113, label %if.then107, !dbg !4873

if.then107:                                       ; preds = %for.end104
  %call108 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !4874
  %tobool109 = icmp ne i8 %call108, 0, !dbg !4874
  br i1 %tobool109, label %if.then110, label %if.end112, !dbg !4877

if.then110:                                       ; preds = %if.then107
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4878
  %call111 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.14, i64 0, i64 0)), !dbg !4879
  br label %if.end112, !dbg !4879

if.end112:                                        ; preds = %if.then110, %if.then107
  %50 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4880
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %50), !dbg !4881
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %retval, align 8, !dbg !4882
  br label %return, !dbg !4882

if.end113:                                        ; preds = %for.end104
  %call114 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4883
  %tobool115 = icmp ne i8 %call114, 0, !dbg !4883
  br i1 %tobool115, label %if.then116, label %if.end118, !dbg !4885

if.then116:                                       ; preds = %if.end113
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4886
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.15, i64 0, i64 0)), !dbg !4887
  br label %if.end118, !dbg !4887

if.end118:                                        ; preds = %if.then116, %if.end113
  %52 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !4888
  store %struct._bb_vec_info* %52, %struct._bb_vec_info** %retval, align 8, !dbg !4889
  br label %return, !dbg !4889

return:                                           ; preds = %if.end118, %if.end112, %if.end88, %if.end79, %if.end70, %if.end61, %if.end52, %if.end43, %if.end32, %if.then23, %if.end19
  %53 = load %struct._bb_vec_info*, %struct._bb_vec_info** %retval, align 8, !dbg !4890
  ret %struct._bb_vec_info* %53, !dbg !4890
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !4891 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4894, metadata !DIExpression()), !dbg !4895
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4896
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4897
  %cmp = icmp eq i32 %call, 2, !dbg !4898
  %conv = zext i1 %cmp to i32, !dbg !4898
  %conv1 = trunc i32 %conv to i8, !dbg !4897
  ret i8 %conv1, !dbg !4899
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !4900 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4901, metadata !DIExpression()), !dbg !4902
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4903
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4904
  %cmp = icmp eq i32 %call, 18, !dbg !4905
  %conv = zext i1 %cmp to i32, !dbg !4905
  %conv1 = trunc i32 %conv to i8, !dbg !4904
  ret i8 %conv1, !dbg !4906
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4907 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4910, metadata !DIExpression()), !dbg !4911
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4912
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4913
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4914
  %bf.load = load i32, i32* %1, align 8, !dbg !4914
  %bf.clear = and i32 %bf.load, 255, !dbg !4914
  ret i32 %bf.clear, !dbg !4915
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._bb_vec_info* @new_bb_vec_info(%struct.basic_block_def* %bb) #0 !dbg !4916 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %res = alloca %struct._bb_vec_info*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4917, metadata !DIExpression()), !dbg !4918
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %res, metadata !4919, metadata !DIExpression()), !dbg !4920
  store %struct._bb_vec_info* null, %struct._bb_vec_info** %res, align 8, !dbg !4920
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4921, metadata !DIExpression()), !dbg !4922
  %call = call i8* @xcalloc(i64 1, i64 40), !dbg !4923
  %0 = bitcast i8* %call to %struct._bb_vec_info*, !dbg !4924
  store %struct._bb_vec_info* %0, %struct._bb_vec_info** %res, align 8, !dbg !4925
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4926
  %2 = load %struct._bb_vec_info*, %struct._bb_vec_info** %res, align 8, !dbg !4927
  %bb1 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %2, i32 0, i32 0, !dbg !4927
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb1, align 8, !dbg !4928
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4929
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !4931
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4931
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4931
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !4931
  br label %for.cond, !dbg !4932

for.cond:                                         ; preds = %for.inc, %entry
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4933
  %tobool = icmp ne i8 %call2, 0, !dbg !4935
  %lnot = xor i1 %tobool, true, !dbg !4935
  br i1 %lnot, label %for.body, label %for.end, !dbg !4936

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4937, metadata !DIExpression()), !dbg !4939
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4940
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !4939
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4941
  call void @gimple_set_uid(%union.gimple_statement_d* %6, i32 0), !dbg !4942
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4943
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4944
  %9 = load %struct._bb_vec_info*, %struct._bb_vec_info** %res, align 8, !dbg !4945
  %call4 = call %struct._stmt_vec_info* @new_stmt_vec_info(%union.gimple_statement_d* %8, %struct._loop_vec_info* null, %struct._bb_vec_info* %9), !dbg !4946
  call void @set_vinfo_for_stmt(%union.gimple_statement_d* %7, %struct._stmt_vec_info* %call4), !dbg !4947
  br label %for.inc, !dbg !4948

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4949
  br label %for.cond, !dbg !4950, !llvm.loop !4951

for.end:                                          ; preds = %for.cond
  %call5 = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 10), !dbg !4953
  %10 = load %struct._bb_vec_info*, %struct._bb_vec_info** %res, align 8, !dbg !4954
  %strided_stores = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %10, i32 0, i32 1, !dbg !4954
  store %struct.VEC_gimple_heap* %call5, %struct.VEC_gimple_heap** %strided_stores, align 8, !dbg !4955
  %call6 = call %struct.VEC_slp_instance_heap* @VEC_slp_instance_heap_alloc(i32 2), !dbg !4956
  %11 = load %struct._bb_vec_info*, %struct._bb_vec_info** %res, align 8, !dbg !4957
  %slp_instances = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %11, i32 0, i32 2, !dbg !4957
  store %struct.VEC_slp_instance_heap* %call6, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !4958
  %12 = load %struct._bb_vec_info*, %struct._bb_vec_info** %res, align 8, !dbg !4959
  %13 = bitcast %struct._bb_vec_info* %12 to i8*, !dbg !4959
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4960
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 2, !dbg !4961
  store i8* %13, i8** %aux, align 8, !dbg !4962
  %15 = load %struct._bb_vec_info*, %struct._bb_vec_info** %res, align 8, !dbg !4963
  ret %struct._bb_vec_info* %15, !dbg !4964
}

declare dso_local zeroext i8 @vect_analyze_data_refs(%struct._loop_vec_info*, %struct._bb_vec_info*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @destroy_bb_vec_info(%struct._bb_vec_info* %bb_vinfo) #0 !dbg !4965 {
entry:
  %bb_vinfo.addr = alloca %struct._bb_vec_info*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_info = alloca %struct._stmt_vec_info*, align 8
  store %struct._bb_vec_info* %bb_vinfo, %struct._bb_vec_info** %bb_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo.addr, metadata !4968, metadata !DIExpression()), !dbg !4969
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4970, metadata !DIExpression()), !dbg !4971
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !4972, metadata !DIExpression()), !dbg !4973
  %0 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !4974
  %tobool = icmp ne %struct._bb_vec_info* %0, null, !dbg !4974
  br i1 %tobool, label %if.end, label %if.then, !dbg !4976

if.then:                                          ; preds = %entry
  br label %return, !dbg !4977

if.end:                                           ; preds = %entry
  %1 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !4978
  %bb1 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %1, i32 0, i32 0, !dbg !4978
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !4978
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !4979
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4980
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !4982
  %4 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4982
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4982
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !4982
  br label %for.cond, !dbg !4983

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4984
  %tobool2 = icmp ne i8 %call, 0, !dbg !4986
  %lnot = xor i1 %tobool2, true, !dbg !4986
  br i1 %lnot, label %for.body, label %for.end, !dbg !4987

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4988, metadata !DIExpression()), !dbg !4990
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4991
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !4990
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_info, metadata !4992, metadata !DIExpression()), !dbg !4993
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4994
  %call4 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %6), !dbg !4995
  store %struct._stmt_vec_info* %call4, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !4993
  %7 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !4996
  %tobool5 = icmp ne %struct._stmt_vec_info* %7, null, !dbg !4996
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !4998

if.then6:                                         ; preds = %for.body
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4999
  call void @free_stmt_vec_info(%union.gimple_statement_d* %8), !dbg !5000
  br label %if.end7, !dbg !5000

if.end7:                                          ; preds = %if.then6, %for.body
  br label %for.inc, !dbg !5001

for.inc:                                          ; preds = %if.end7
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !5002
  br label %for.cond, !dbg !5003, !llvm.loop !5004

for.end:                                          ; preds = %for.cond
  %9 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !5006
  %strided_stores = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %9, i32 0, i32 1, !dbg !5006
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %strided_stores), !dbg !5006
  %10 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !5007
  %slp_instances = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %10, i32 0, i32 2, !dbg !5007
  call void @VEC_slp_instance_heap_free(%struct.VEC_slp_instance_heap** %slp_instances), !dbg !5007
  %11 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !5008
  %12 = bitcast %struct._bb_vec_info* %11 to i8*, !dbg !5008
  call void @free(i8* %12), !dbg !5009
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5010
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 2, !dbg !5011
  store i8* null, i8** %aux, align 8, !dbg !5012
  br label %return, !dbg !5013

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !5013
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %vec_) #0 !dbg !5014 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !5019, metadata !DIExpression()), !dbg !5020
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !5020
  %tobool = icmp ne %struct.VEC_ddr_p_base* %0, null, !dbg !5020
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5020

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !5020
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %1, i32 0, i32 0, !dbg !5020
  %2 = load i32, i32* %num, align 8, !dbg !5020
  br label %cond.end, !dbg !5020

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5020
  ret i32 %cond, !dbg !5020
}

declare dso_local zeroext i8 @vect_analyze_data_refs_alignment(%struct._loop_vec_info*, %struct._bb_vec_info*) #3

declare dso_local zeroext i8 @vect_analyze_data_ref_dependences(%struct._loop_vec_info*, %struct._bb_vec_info*) #3

declare dso_local zeroext i8 @vect_analyze_data_ref_accesses(%struct._loop_vec_info*, %struct._bb_vec_info*) #3

declare dso_local zeroext i8 @vect_verify_datarefs_alignment(%struct._loop_vec_info*, %struct._bb_vec_info*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @vect_mark_slp_stmts_relevant(%struct._slp_tree* %node) #0 !dbg !5021 {
entry:
  %node.addr = alloca %struct._slp_tree*, align 8
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_info = alloca %struct._stmt_vec_info*, align 8
  store %struct._slp_tree* %node, %struct._slp_tree** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node.addr, metadata !5022, metadata !DIExpression()), !dbg !5023
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5024, metadata !DIExpression()), !dbg !5025
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5026, metadata !DIExpression()), !dbg !5027
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_info, metadata !5028, metadata !DIExpression()), !dbg !5029
  %0 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !5030
  %tobool = icmp ne %struct._slp_tree* %0, null, !dbg !5030
  br i1 %tobool, label %if.end, label %if.then, !dbg !5032

if.then:                                          ; preds = %entry
  br label %return, !dbg !5033

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !5034
  br label %for.cond, !dbg !5036

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !5037
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %1, i32 0, i32 2, !dbg !5037
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5037
  %tobool1 = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !5037
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5037

cond.true:                                        ; preds = %for.cond
  %3 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !5037
  %stmts2 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i32 0, i32 2, !dbg !5037
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts2, align 8, !dbg !5037
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !5037
  br label %cond.end, !dbg !5037

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5037

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5037
  %5 = load i32, i32* %i, align 4, !dbg !5037
  %call = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %5, %union.gimple_statement_d** %stmt), !dbg !5037
  %tobool3 = icmp ne i32 %call, 0, !dbg !5039
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5039

for.body:                                         ; preds = %cond.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5040
  %call4 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %6), !dbg !5042
  store %struct._stmt_vec_info* %call4, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !5043
  %7 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !5044
  %relevant = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %7, i32 0, i32 3, !dbg !5044
  %8 = load i32, i32* %relevant, align 8, !dbg !5044
  %tobool5 = icmp ne i32 %8, 0, !dbg !5044
  br i1 %tobool5, label %lor.lhs.false, label %cond.false8, !dbg !5044

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !5044
  %relevant6 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %9, i32 0, i32 3, !dbg !5044
  %10 = load i32, i32* %relevant6, align 8, !dbg !5044
  %cmp = icmp eq i32 %10, 4, !dbg !5044
  br i1 %cmp, label %cond.false8, label %cond.true7, !dbg !5044

cond.true7:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 721, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !5044
  br label %cond.end9, !dbg !5044

cond.false8:                                      ; preds = %lor.lhs.false, %for.body
  br label %cond.end9, !dbg !5044

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !5044
  %11 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !5045
  %relevant11 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %11, i32 0, i32 3, !dbg !5045
  store i32 4, i32* %relevant11, align 8, !dbg !5046
  br label %for.inc, !dbg !5047

for.inc:                                          ; preds = %cond.end9
  %12 = load i32, i32* %i, align 4, !dbg !5048
  %inc = add nsw i32 %12, 1, !dbg !5048
  store i32 %inc, i32* %i, align 4, !dbg !5048
  br label %for.cond, !dbg !5049, !llvm.loop !5050

for.end:                                          ; preds = %cond.end
  %13 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !5052
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %13, i32 0, i32 0, !dbg !5052
  %14 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !5052
  call void @vect_mark_slp_stmts_relevant(%struct._slp_tree* %14), !dbg !5053
  %15 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !5054
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %15, i32 0, i32 1, !dbg !5054
  %16 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !5054
  call void @vect_mark_slp_stmts_relevant(%struct._slp_tree* %16), !dbg !5055
  br label %return, !dbg !5056

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !5056
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_slp_analyze_operations(%struct._bb_vec_info* %bb_vinfo) #0 !dbg !5057 {
entry:
  %retval = alloca i8, align 1
  %bb_vinfo.addr = alloca %struct._bb_vec_info*, align 8
  %slp_instances = alloca %struct.VEC_slp_instance_heap*, align 8
  %instance = alloca %struct._slp_instance*, align 8
  %i = alloca i32, align 4
  store %struct._bb_vec_info* %bb_vinfo, %struct._bb_vec_info** %bb_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo.addr, metadata !5060, metadata !DIExpression()), !dbg !5061
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap** %slp_instances, metadata !5062, metadata !DIExpression()), !dbg !5063
  %0 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !5064
  %slp_instances1 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %0, i32 0, i32 2, !dbg !5064
  %1 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !5064
  store %struct.VEC_slp_instance_heap* %1, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5063
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance, metadata !5065, metadata !DIExpression()), !dbg !5066
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5067, metadata !DIExpression()), !dbg !5068
  store i32 0, i32* %i, align 4, !dbg !5069
  br label %for.cond, !dbg !5071

for.cond:                                         ; preds = %if.end, %entry
  %2 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5072
  %tobool = icmp ne %struct.VEC_slp_instance_heap* %2, null, !dbg !5072
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5072

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5072
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %3, i32 0, i32 0, !dbg !5072
  br label %cond.end, !dbg !5072

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5072
  %4 = load i32, i32* %i, align 4, !dbg !5072
  %call = call i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %cond, i32 %4, %struct._slp_instance** %instance), !dbg !5072
  %tobool2 = icmp ne i32 %call, 0, !dbg !5074
  br i1 %tobool2, label %for.body, label %for.end, !dbg !5074

for.body:                                         ; preds = %cond.end
  %5 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !5075
  %6 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5078
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %6, i32 0, i32 0, !dbg !5078
  %7 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !5078
  %call3 = call zeroext i8 @vect_slp_analyze_node_operations(%struct._bb_vec_info* %5, %struct._slp_tree* %7), !dbg !5079
  %tobool4 = icmp ne i8 %call3, 0, !dbg !5079
  br i1 %tobool4, label %if.else, label %if.then, !dbg !5080

if.then:                                          ; preds = %for.body
  %8 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5081
  call void @vect_free_slp_instance(%struct._slp_instance* %8), !dbg !5083
  %9 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5084
  %tobool5 = icmp ne %struct.VEC_slp_instance_heap* %9, null, !dbg !5084
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !5084

cond.true6:                                       ; preds = %if.then
  %10 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5084
  %base7 = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %10, i32 0, i32 0, !dbg !5084
  br label %cond.end9, !dbg !5084

cond.false8:                                      ; preds = %if.then
  br label %cond.end9, !dbg !5084

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_slp_instance_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !5084
  %11 = load i32, i32* %i, align 4, !dbg !5084
  %call11 = call %struct._slp_instance* @VEC_slp_instance_base_ordered_remove(%struct.VEC_slp_instance_base* %cond10, i32 %11), !dbg !5084
  br label %if.end, !dbg !5085

if.else:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !5086
  %inc = add nsw i32 %12, 1, !dbg !5086
  store i32 %inc, i32* %i, align 4, !dbg !5086
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end9
  br label %for.cond, !dbg !5087, !llvm.loop !5088

for.end:                                          ; preds = %cond.end
  %13 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5090
  %tobool12 = icmp ne %struct.VEC_slp_instance_heap* %13, null, !dbg !5090
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !5090

cond.true13:                                      ; preds = %for.end
  %14 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5090
  %base14 = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %14, i32 0, i32 0, !dbg !5090
  br label %cond.end16, !dbg !5090

cond.false15:                                     ; preds = %for.end
  br label %cond.end16, !dbg !5090

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_slp_instance_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !5090
  %call18 = call i32 @VEC_slp_instance_base_length(%struct.VEC_slp_instance_base* %cond17), !dbg !5090
  %tobool19 = icmp ne i32 %call18, 0, !dbg !5090
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !5092

if.then20:                                        ; preds = %cond.end16
  store i8 0, i8* %retval, align 1, !dbg !5093
  br label %return, !dbg !5093

if.end21:                                         ; preds = %cond.end16
  store i8 1, i8* %retval, align 1, !dbg !5094
  br label %return, !dbg !5094

return:                                           ; preds = %if.end21, %if.then20
  %15 = load i8, i8* %retval, align 1, !dbg !5095
  ret i8 %15, !dbg !5095
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_update_slp_costs_according_to_vf(%struct._loop_vec_info* %loop_vinfo) #0 !dbg !5096 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %i = alloca i32, align 4
  %vf = alloca i32, align 4
  %slp_instances = alloca %struct.VEC_slp_instance_heap*, align 8
  %instance = alloca %struct._slp_instance*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !5097, metadata !DIExpression()), !dbg !5098
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5099, metadata !DIExpression()), !dbg !5100
  call void @llvm.dbg.declare(metadata i32* %vf, metadata !5101, metadata !DIExpression()), !dbg !5102
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !5103
  %vectorization_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 6, !dbg !5103
  %1 = load i32, i32* %vectorization_factor, align 8, !dbg !5103
  store i32 %1, i32* %vf, align 4, !dbg !5102
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap** %slp_instances, metadata !5104, metadata !DIExpression()), !dbg !5105
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !5106
  %slp_instances1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 16, !dbg !5106
  %3 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !5106
  store %struct.VEC_slp_instance_heap* %3, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5105
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance, metadata !5107, metadata !DIExpression()), !dbg !5108
  %call = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !5109
  %tobool = icmp ne i8 %call, 0, !dbg !5109
  br i1 %tobool, label %if.then, label %if.end, !dbg !5111

if.then:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5112
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.16, i64 0, i64 0)), !dbg !5113
  br label %if.end, !dbg !5113

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !5114
  br label %for.cond, !dbg !5116

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5117
  %tobool3 = icmp ne %struct.VEC_slp_instance_heap* %5, null, !dbg !5117
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !5117

cond.true:                                        ; preds = %for.cond
  %6 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !5117
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %6, i32 0, i32 0, !dbg !5117
  br label %cond.end, !dbg !5117

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5117

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5117
  %7 = load i32, i32* %i, align 4, !dbg !5117
  %call4 = call i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %cond, i32 %7, %struct._slp_instance** %instance), !dbg !5117
  %tobool5 = icmp ne i32 %call4, 0, !dbg !5119
  br i1 %tobool5, label %for.body, label %for.end, !dbg !5119

for.body:                                         ; preds = %cond.end
  %8 = load i32, i32* %vf, align 4, !dbg !5120
  %9 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5121
  %unrolling_factor = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %9, i32 0, i32 2, !dbg !5121
  %10 = load i32, i32* %unrolling_factor, align 4, !dbg !5121
  %div = udiv i32 %8, %10, !dbg !5122
  %11 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5123
  %cost = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %11, i32 0, i32 3, !dbg !5123
  %inside_of_loop = getelementptr inbounds %struct.anon.0, %struct.anon.0* %cost, i32 0, i32 1, !dbg !5123
  %12 = load i32, i32* %inside_of_loop, align 4, !dbg !5124
  %mul = mul i32 %12, %div, !dbg !5124
  store i32 %mul, i32* %inside_of_loop, align 4, !dbg !5124
  br label %for.inc, !dbg !5123

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !5125
  %inc = add i32 %13, 1, !dbg !5125
  store i32 %inc, i32* %i, align 4, !dbg !5125
  br label %for.cond, !dbg !5126, !llvm.loop !5127

for.end:                                          ; preds = %cond.end
  ret void, !dbg !5129
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_get_slp_defs(%struct._slp_tree* %slp_node, %struct.VEC_tree_heap** %vec_oprnds0, %struct.VEC_tree_heap** %vec_oprnds1) #0 !dbg !5130 {
entry:
  %slp_node.addr = alloca %struct._slp_tree*, align 8
  %vec_oprnds0.addr = alloca %struct.VEC_tree_heap**, align 8
  %vec_oprnds1.addr = alloca %struct.VEC_tree_heap**, align 8
  %first_stmt = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %number_of_vects = alloca i32, align 4
  %lhs_size_unit = alloca i64, align 8
  %rhs_size_unit = alloca i64, align 8
  store %struct._slp_tree* %slp_node, %struct._slp_tree** %slp_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %slp_node.addr, metadata !5134, metadata !DIExpression()), !dbg !5135
  store %struct.VEC_tree_heap** %vec_oprnds0, %struct.VEC_tree_heap*** %vec_oprnds0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_oprnds0.addr, metadata !5136, metadata !DIExpression()), !dbg !5137
  store %struct.VEC_tree_heap** %vec_oprnds1, %struct.VEC_tree_heap*** %vec_oprnds1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_oprnds1.addr, metadata !5138, metadata !DIExpression()), !dbg !5139
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %first_stmt, metadata !5140, metadata !DIExpression()), !dbg !5141
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5142, metadata !DIExpression()), !dbg !5143
  call void @llvm.dbg.declare(metadata i32* %number_of_vects, metadata !5144, metadata !DIExpression()), !dbg !5145
  call void @llvm.dbg.declare(metadata i64* %lhs_size_unit, metadata !5146, metadata !DIExpression()), !dbg !5147
  call void @llvm.dbg.declare(metadata i64* %rhs_size_unit, metadata !5148, metadata !DIExpression()), !dbg !5149
  %0 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5150
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %0, i32 0, i32 2, !dbg !5150
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5150
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !5150
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5150

cond.true:                                        ; preds = %entry
  %2 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5150
  %stmts1 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %2, i32 0, i32 2, !dbg !5150
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts1, align 8, !dbg !5150
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !5150
  br label %cond.end, !dbg !5150

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5150

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5150
  %call = call %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond, i32 0), !dbg !5150
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %first_stmt, align 8, !dbg !5151
  %4 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5152
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %4, i32 0, i32 0, !dbg !5152
  %5 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !5152
  %tobool2 = icmp ne %struct._slp_tree* %5, null, !dbg !5152
  br i1 %tobool2, label %if.then, label %if.else, !dbg !5154

if.then:                                          ; preds = %cond.end
  %6 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5155
  %left3 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %6, i32 0, i32 0, !dbg !5155
  %7 = load %struct._slp_tree*, %struct._slp_tree** %left3, align 8, !dbg !5155
  %vec_stmts_size = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %7, i32 0, i32 4, !dbg !5155
  %8 = load i32, i32* %vec_stmts_size, align 8, !dbg !5155
  store i32 %8, i32* %number_of_vects, align 4, !dbg !5156
  br label %if.end10, !dbg !5157

if.else:                                          ; preds = %cond.end
  %9 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5158
  %vec_stmts_size4 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %9, i32 0, i32 4, !dbg !5158
  %10 = load i32, i32* %vec_stmts_size4, align 8, !dbg !5158
  store i32 %10, i32* %number_of_vects, align 4, !dbg !5160
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_stmt, align 8, !dbg !5161
  %call5 = call %union.tree_node* @vect_get_smallest_scalar_type(%union.gimple_statement_d* %11, i64* %lhs_size_unit, i64* %rhs_size_unit), !dbg !5162
  %12 = load i64, i64* %rhs_size_unit, align 8, !dbg !5163
  %13 = load i64, i64* %lhs_size_unit, align 8, !dbg !5165
  %cmp = icmp ne i64 %12, %13, !dbg !5166
  br i1 %cmp, label %if.then6, label %if.end, !dbg !5167

if.then6:                                         ; preds = %if.else
  %14 = load i64, i64* %rhs_size_unit, align 8, !dbg !5168
  %15 = load i32, i32* %number_of_vects, align 4, !dbg !5170
  %conv = sext i32 %15 to i64, !dbg !5170
  %mul = mul nsw i64 %conv, %14, !dbg !5170
  %conv7 = trunc i64 %mul to i32, !dbg !5170
  store i32 %conv7, i32* %number_of_vects, align 4, !dbg !5170
  %16 = load i64, i64* %lhs_size_unit, align 8, !dbg !5171
  %17 = load i32, i32* %number_of_vects, align 4, !dbg !5172
  %conv8 = sext i32 %17 to i64, !dbg !5172
  %div = sdiv i64 %conv8, %16, !dbg !5172
  %conv9 = trunc i64 %div to i32, !dbg !5172
  store i32 %conv9, i32* %number_of_vects, align 4, !dbg !5172
  br label %if.end, !dbg !5173

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %18 = load i32, i32* %number_of_vects, align 4, !dbg !5174
  %call11 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %18), !dbg !5174
  %19 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds0.addr, align 8, !dbg !5175
  store %struct.VEC_tree_heap* %call11, %struct.VEC_tree_heap** %19, align 8, !dbg !5176
  %20 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5177
  %left12 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %20, i32 0, i32 0, !dbg !5177
  %21 = load %struct._slp_tree*, %struct._slp_tree** %left12, align 8, !dbg !5177
  %tobool13 = icmp ne %struct._slp_tree* %21, null, !dbg !5177
  br i1 %tobool13, label %if.then14, label %if.else16, !dbg !5179

if.then14:                                        ; preds = %if.end10
  %22 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5180
  %left15 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %22, i32 0, i32 0, !dbg !5180
  %23 = load %struct._slp_tree*, %struct._slp_tree** %left15, align 8, !dbg !5180
  %24 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds0.addr, align 8, !dbg !5181
  call void @vect_get_slp_vect_defs(%struct._slp_tree* %23, %struct.VEC_tree_heap** %24), !dbg !5182
  br label %if.end17, !dbg !5182

if.else16:                                        ; preds = %if.end10
  %25 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5183
  %26 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds0.addr, align 8, !dbg !5184
  %27 = load i32, i32* %number_of_vects, align 4, !dbg !5185
  call void @vect_get_constant_vectors(%struct._slp_tree* %25, %struct.VEC_tree_heap** %26, i32 0, i32 %27), !dbg !5186
  br label %if.end17

if.end17:                                         ; preds = %if.else16, %if.then14
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_stmt, align 8, !dbg !5187
  %call18 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %28), !dbg !5187
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call18, i32 0, i32 7, !dbg !5187
  %29 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !5187
  %tobool19 = icmp ne %struct.data_reference* %29, null, !dbg !5187
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !5189

if.then20:                                        ; preds = %if.end17
  br label %if.end42, !dbg !5190

if.end21:                                         ; preds = %if.end17
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_stmt, align 8, !dbg !5191
  %call22 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %30), !dbg !5192
  store i32 %call22, i32* %code, align 4, !dbg !5193
  %31 = load i32, i32* %code, align 4, !dbg !5194
  %call23 = call i32 @get_gimple_rhs_class(i32 %31), !dbg !5196
  %cmp24 = icmp ne i32 %call23, 1, !dbg !5197
  br i1 %cmp24, label %if.then27, label %lor.lhs.false, !dbg !5198

lor.lhs.false:                                    ; preds = %if.end21
  %32 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds1.addr, align 8, !dbg !5199
  %tobool26 = icmp ne %struct.VEC_tree_heap** %32, null, !dbg !5199
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !5200

if.then27:                                        ; preds = %lor.lhs.false, %if.end21
  br label %if.end42, !dbg !5201

if.end28:                                         ; preds = %lor.lhs.false
  %33 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5202
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %33, i32 0, i32 1, !dbg !5202
  %34 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !5202
  %tobool29 = icmp ne %struct._slp_tree* %34, null, !dbg !5202
  br i1 %tobool29, label %if.then30, label %if.else33, !dbg !5204

if.then30:                                        ; preds = %if.end28
  %35 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5205
  %right31 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %35, i32 0, i32 1, !dbg !5205
  %36 = load %struct._slp_tree*, %struct._slp_tree** %right31, align 8, !dbg !5205
  %vec_stmts_size32 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %36, i32 0, i32 4, !dbg !5205
  %37 = load i32, i32* %vec_stmts_size32, align 8, !dbg !5205
  store i32 %37, i32* %number_of_vects, align 4, !dbg !5206
  br label %if.end35, !dbg !5207

if.else33:                                        ; preds = %if.end28
  %38 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5208
  %vec_stmts_size34 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %38, i32 0, i32 4, !dbg !5208
  %39 = load i32, i32* %vec_stmts_size34, align 8, !dbg !5208
  store i32 %39, i32* %number_of_vects, align 4, !dbg !5209
  br label %if.end35

if.end35:                                         ; preds = %if.else33, %if.then30
  %40 = load i32, i32* %number_of_vects, align 4, !dbg !5210
  %call36 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %40), !dbg !5210
  %41 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds1.addr, align 8, !dbg !5211
  store %struct.VEC_tree_heap* %call36, %struct.VEC_tree_heap** %41, align 8, !dbg !5212
  %42 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5213
  %right37 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %42, i32 0, i32 1, !dbg !5213
  %43 = load %struct._slp_tree*, %struct._slp_tree** %right37, align 8, !dbg !5213
  %tobool38 = icmp ne %struct._slp_tree* %43, null, !dbg !5213
  br i1 %tobool38, label %if.then39, label %if.else41, !dbg !5215

if.then39:                                        ; preds = %if.end35
  %44 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5216
  %right40 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %44, i32 0, i32 1, !dbg !5216
  %45 = load %struct._slp_tree*, %struct._slp_tree** %right40, align 8, !dbg !5216
  %46 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds1.addr, align 8, !dbg !5217
  call void @vect_get_slp_vect_defs(%struct._slp_tree* %45, %struct.VEC_tree_heap** %46), !dbg !5218
  br label %if.end42, !dbg !5218

if.else41:                                        ; preds = %if.end35
  %47 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5219
  %48 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds1.addr, align 8, !dbg !5220
  %49 = load i32, i32* %number_of_vects, align 4, !dbg !5221
  call void @vect_get_constant_vectors(%struct._slp_tree* %47, %struct.VEC_tree_heap** %48, i32 1, i32 %49), !dbg !5222
  br label %if.end42

if.end42:                                         ; preds = %if.then20, %if.then27, %if.else41, %if.then39
  ret void, !dbg !5223
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %vec_, i32 %ix_) #0 !dbg !5224 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5227, metadata !DIExpression()), !dbg !5228
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5229, metadata !DIExpression()), !dbg !5228
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5228
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !5228
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5228

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5228
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5228
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !5228
  %3 = load i32, i32* %num, align 8, !dbg !5228
  %cmp = icmp ult i32 %1, %3, !dbg !5228
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5230
  %land.ext = zext i1 %4 to i32, !dbg !5228
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5228
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 2, !dbg !5228
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5228
  %idxprom = zext i32 %6 to i64, !dbg !5228
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !5228
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !5228
  ret %union.gimple_statement_d* %7, !dbg !5228
}

declare dso_local %union.tree_node* @vect_get_smallest_scalar_type(%union.gimple_statement_d*, i64*, i64*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !5231 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5234, metadata !DIExpression()), !dbg !5235
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5235
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !5235
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !5235
  ret %struct.VEC_tree_heap* %1, !dbg !5235
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_get_slp_vect_defs(%struct._slp_tree* %slp_node, %struct.VEC_tree_heap** %vec_oprnds) #0 !dbg !5236 {
entry:
  %slp_node.addr = alloca %struct._slp_tree*, align 8
  %vec_oprnds.addr = alloca %struct.VEC_tree_heap**, align 8
  %vec_oprnd = alloca %union.tree_node*, align 8
  %vec_def_stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  store %struct._slp_tree* %slp_node, %struct._slp_tree** %slp_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %slp_node.addr, metadata !5239, metadata !DIExpression()), !dbg !5240
  store %struct.VEC_tree_heap** %vec_oprnds, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_oprnds.addr, metadata !5241, metadata !DIExpression()), !dbg !5242
  call void @llvm.dbg.declare(metadata %union.tree_node** %vec_oprnd, metadata !5243, metadata !DIExpression()), !dbg !5244
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %vec_def_stmt, metadata !5245, metadata !DIExpression()), !dbg !5246
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5247, metadata !DIExpression()), !dbg !5248
  %0 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5249
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %0, i32 0, i32 3, !dbg !5249
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !5249
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !5249
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5249

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1548, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !5249
  br label %cond.end, !dbg !5249

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5249

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5249
  store i32 0, i32* %i, align 4, !dbg !5250
  br label %for.cond, !dbg !5252

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5253
  %vec_stmts1 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %2, i32 0, i32 3, !dbg !5253
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts1, align 8, !dbg !5253
  %tobool2 = icmp ne %struct.VEC_gimple_heap* %3, null, !dbg !5253
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !5253

cond.true3:                                       ; preds = %for.cond
  %4 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5253
  %vec_stmts4 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %4, i32 0, i32 3, !dbg !5253
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts4, align 8, !dbg !5253
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %5, i32 0, i32 0, !dbg !5253
  br label %cond.end6, !dbg !5253

cond.false5:                                      ; preds = %for.cond
  br label %cond.end6, !dbg !5253

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_gimple_base* [ %base, %cond.true3 ], [ null, %cond.false5 ], !dbg !5253
  %6 = load i32, i32* %i, align 4, !dbg !5253
  %call = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond7, i32 %6, %union.gimple_statement_d** %vec_def_stmt), !dbg !5253
  %tobool8 = icmp ne i32 %call, 0, !dbg !5255
  br i1 %tobool8, label %for.body, label %for.end, !dbg !5255

for.body:                                         ; preds = %cond.end6
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vec_def_stmt, align 8, !dbg !5256
  %tobool9 = icmp ne %union.gimple_statement_d* %7, null, !dbg !5256
  br i1 %tobool9, label %cond.false11, label %cond.true10, !dbg !5256

cond.true10:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1554, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !5256
  br label %cond.end12, !dbg !5256

cond.false11:                                     ; preds = %for.body
  br label %cond.end12, !dbg !5256

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !5256
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vec_def_stmt, align 8, !dbg !5258
  %call14 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !5259
  store %union.tree_node* %call14, %union.tree_node** %vec_oprnd, align 8, !dbg !5260
  %9 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5261
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %9, align 8, !dbg !5261
  %tobool15 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !5261
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !5261

cond.true16:                                      ; preds = %cond.end12
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5261
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %11, align 8, !dbg !5261
  %base17 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %12, i32 0, i32 0, !dbg !5261
  br label %cond.end19, !dbg !5261

cond.false18:                                     ; preds = %cond.end12
  br label %cond.end19, !dbg !5261

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_tree_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !5261
  %13 = load %union.tree_node*, %union.tree_node** %vec_oprnd, align 8, !dbg !5261
  %call21 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond20, %union.tree_node* %13), !dbg !5261
  br label %for.inc, !dbg !5262

for.inc:                                          ; preds = %cond.end19
  %14 = load i32, i32* %i, align 4, !dbg !5263
  %inc = add i32 %14, 1, !dbg !5263
  store i32 %inc, i32* %i, align 4, !dbg !5263
  br label %for.cond, !dbg !5264, !llvm.loop !5265

for.end:                                          ; preds = %cond.end6
  ret void, !dbg !5267
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_get_constant_vectors(%struct._slp_tree* %slp_node, %struct.VEC_tree_heap** %vec_oprnds, i32 %op_num, i32 %number_of_vectors) #0 !dbg !5268 {
entry:
  %slp_node.addr = alloca %struct._slp_tree*, align 8
  %vec_oprnds.addr = alloca %struct.VEC_tree_heap**, align 8
  %op_num.addr = alloca i32, align 4
  %number_of_vectors.addr = alloca i32, align 4
  %stmts = alloca %struct.VEC_gimple_heap*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_vinfo = alloca %struct._stmt_vec_info*, align 8
  %nunits = alloca i32, align 4
  %vec_cst = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %j = alloca i32, align 4
  %number_of_places_left_in_vector = alloca i32, align 4
  %vector_type = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %vop = alloca %union.tree_node*, align 8
  %group_size = alloca i32, align 4
  %vec_num = alloca i32, align 4
  %i = alloca i32, align 4
  %number_of_copies = alloca i32, align 4
  %voprnds = alloca %struct.VEC_tree_heap*, align 8
  %constant_p = alloca i8, align 1
  %is_store = alloca i8, align 1
  store %struct._slp_tree* %slp_node, %struct._slp_tree** %slp_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %slp_node.addr, metadata !5271, metadata !DIExpression()), !dbg !5272
  store %struct.VEC_tree_heap** %vec_oprnds, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_oprnds.addr, metadata !5273, metadata !DIExpression()), !dbg !5274
  store i32 %op_num, i32* %op_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op_num.addr, metadata !5275, metadata !DIExpression()), !dbg !5276
  store i32 %number_of_vectors, i32* %number_of_vectors.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %number_of_vectors.addr, metadata !5277, metadata !DIExpression()), !dbg !5278
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %stmts, metadata !5279, metadata !DIExpression()), !dbg !5280
  %0 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !5281
  %stmts1 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %0, i32 0, i32 2, !dbg !5281
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts1, align 8, !dbg !5281
  store %struct.VEC_gimple_heap* %1, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5280
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5282, metadata !DIExpression()), !dbg !5283
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5284
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !5284
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5284

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5284
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !5284
  br label %cond.end, !dbg !5284

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5284

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5284
  %call = call %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond, i32 0), !dbg !5284
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !5283
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_vinfo, metadata !5285, metadata !DIExpression()), !dbg !5286
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5287
  %call2 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %4), !dbg !5288
  store %struct._stmt_vec_info* %call2, %struct._stmt_vec_info** %stmt_vinfo, align 8, !dbg !5286
  call void @llvm.dbg.declare(metadata i32* %nunits, metadata !5289, metadata !DIExpression()), !dbg !5290
  call void @llvm.dbg.declare(metadata %union.tree_node** %vec_cst, metadata !5291, metadata !DIExpression()), !dbg !5292
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5293, metadata !DIExpression()), !dbg !5294
  store %union.tree_node* null, %union.tree_node** %t, align 8, !dbg !5294
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5295, metadata !DIExpression()), !dbg !5296
  call void @llvm.dbg.declare(metadata i32* %number_of_places_left_in_vector, metadata !5297, metadata !DIExpression()), !dbg !5298
  call void @llvm.dbg.declare(metadata %union.tree_node** %vector_type, metadata !5299, metadata !DIExpression()), !dbg !5300
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !5301, metadata !DIExpression()), !dbg !5302
  call void @llvm.dbg.declare(metadata %union.tree_node** %vop, metadata !5303, metadata !DIExpression()), !dbg !5304
  call void @llvm.dbg.declare(metadata i32* %group_size, metadata !5305, metadata !DIExpression()), !dbg !5306
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5307
  %tobool3 = icmp ne %struct.VEC_gimple_heap* %5, null, !dbg !5307
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !5307

cond.true4:                                       ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5307
  %base5 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %6, i32 0, i32 0, !dbg !5307
  br label %cond.end7, !dbg !5307

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !5307

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_gimple_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !5307
  %call9 = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond8), !dbg !5307
  store i32 %call9, i32* %group_size, align 4, !dbg !5306
  call void @llvm.dbg.declare(metadata i32* %vec_num, metadata !5308, metadata !DIExpression()), !dbg !5309
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5310, metadata !DIExpression()), !dbg !5311
  call void @llvm.dbg.declare(metadata i32* %number_of_copies, metadata !5312, metadata !DIExpression()), !dbg !5313
  store i32 1, i32* %number_of_copies, align 4, !dbg !5313
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %voprnds, metadata !5314, metadata !DIExpression()), !dbg !5315
  %7 = load i32, i32* %number_of_vectors.addr, align 4, !dbg !5316
  %call10 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %7), !dbg !5316
  store %struct.VEC_tree_heap* %call10, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5315
  call void @llvm.dbg.declare(metadata i8* %constant_p, metadata !5317, metadata !DIExpression()), !dbg !5318
  call void @llvm.dbg.declare(metadata i8* %is_store, metadata !5319, metadata !DIExpression()), !dbg !5320
  %8 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_vinfo, align 8, !dbg !5321
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %8, i32 0, i32 7, !dbg !5321
  %9 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !5321
  %tobool11 = icmp ne %struct.data_reference* %9, null, !dbg !5321
  br i1 %tobool11, label %if.then, label %if.else, !dbg !5323

if.then:                                          ; preds = %cond.end7
  store i8 1, i8* %is_store, align 1, !dbg !5324
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5326
  %call12 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %10), !dbg !5327
  store %union.tree_node* %call12, %union.tree_node** %op, align 8, !dbg !5328
  br label %if.end, !dbg !5329

if.else:                                          ; preds = %cond.end7
  store i8 0, i8* %is_store, align 1, !dbg !5330
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5332
  %12 = load i32, i32* %op_num.addr, align 4, !dbg !5333
  %add = add i32 %12, 1, !dbg !5334
  %call13 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %11, i32 %add), !dbg !5335
  store %union.tree_node* %call13, %union.tree_node** %op, align 8, !dbg !5336
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5337
  %base14 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !5337
  %14 = bitcast %struct.tree_base* %base14 to i64*, !dbg !5337
  %bf.load = load i64, i64* %14, align 8, !dbg !5337
  %bf.clear = and i64 %bf.load, 65535, !dbg !5337
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5337
  %idxprom = sext i32 %bf.cast to i64, !dbg !5337
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5337
  %15 = load i32, i32* %arrayidx, align 4, !dbg !5337
  %cmp = icmp eq i32 %15, 1, !dbg !5337
  br i1 %cmp, label %if.then15, label %if.else16, !dbg !5339

if.then15:                                        ; preds = %if.end
  store i8 1, i8* %constant_p, align 1, !dbg !5340
  br label %if.end17, !dbg !5341

if.else16:                                        ; preds = %if.end
  store i8 0, i8* %constant_p, align 1, !dbg !5342
  br label %if.end17

if.end17:                                         ; preds = %if.else16, %if.then15
  %16 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5343
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !5343
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5343
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5343
  %call18 = call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %17), !dbg !5344
  store %union.tree_node* %call18, %union.tree_node** %vector_type, align 8, !dbg !5345
  %18 = load %union.tree_node*, %union.tree_node** %vector_type, align 8, !dbg !5346
  %tobool19 = icmp ne %union.tree_node* %18, null, !dbg !5346
  br i1 %tobool19, label %cond.false21, label %cond.true20, !dbg !5346

cond.true20:                                      ; preds = %if.end17
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1463, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !5346
  br label %cond.end22, !dbg !5346

cond.false21:                                     ; preds = %if.end17
  br label %cond.end22, !dbg !5346

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !5346
  %19 = load %union.tree_node*, %union.tree_node** %vector_type, align 8, !dbg !5347
  %type24 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !5347
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 6, !dbg !5347
  %bf.load25 = load i32, i32* %precision, align 4, !dbg !5347
  %bf.clear26 = and i32 %bf.load25, 1023, !dbg !5347
  %sh_prom = zext i32 %bf.clear26 to i64, !dbg !5347
  %shl = shl i64 1, %sh_prom, !dbg !5347
  %conv = trunc i64 %shl to i32, !dbg !5347
  store i32 %conv, i32* %nunits, align 4, !dbg !5348
  %20 = load i32, i32* %nunits, align 4, !dbg !5349
  %21 = load i32, i32* %group_size, align 4, !dbg !5350
  %call27 = call i32 @least_common_multiple(i32 %20, i32 %21), !dbg !5351
  %22 = load i32, i32* %group_size, align 4, !dbg !5352
  %div = sdiv i32 %call27, %22, !dbg !5353
  store i32 %div, i32* %number_of_copies, align 4, !dbg !5354
  %23 = load i32, i32* %nunits, align 4, !dbg !5355
  store i32 %23, i32* %number_of_places_left_in_vector, align 4, !dbg !5356
  store i32 0, i32* %j, align 4, !dbg !5357
  br label %for.cond, !dbg !5359

for.cond:                                         ; preds = %for.inc67, %cond.end22
  %24 = load i32, i32* %j, align 4, !dbg !5360
  %25 = load i32, i32* %number_of_copies, align 4, !dbg !5362
  %cmp28 = icmp slt i32 %24, %25, !dbg !5363
  br i1 %cmp28, label %for.body, label %for.end68, !dbg !5364

for.body:                                         ; preds = %for.cond
  %26 = load i32, i32* %group_size, align 4, !dbg !5365
  %sub = sub nsw i32 %26, 1, !dbg !5368
  store i32 %sub, i32* %i, align 4, !dbg !5369
  br label %for.cond30, !dbg !5370

for.cond30:                                       ; preds = %for.inc, %for.body
  %27 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5371
  %tobool31 = icmp ne %struct.VEC_gimple_heap* %27, null, !dbg !5371
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !5371

cond.true32:                                      ; preds = %for.cond30
  %28 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5371
  %base33 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %28, i32 0, i32 0, !dbg !5371
  br label %cond.end35, !dbg !5371

cond.false34:                                     ; preds = %for.cond30
  br label %cond.end35, !dbg !5371

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_gimple_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !5371
  %29 = load i32, i32* %i, align 4, !dbg !5371
  %call37 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond36, i32 %29, %union.gimple_statement_d** %stmt), !dbg !5371
  %tobool38 = icmp ne i32 %call37, 0, !dbg !5373
  br i1 %tobool38, label %for.body39, label %for.end, !dbg !5373

for.body39:                                       ; preds = %cond.end35
  %30 = load i8, i8* %is_store, align 1, !dbg !5374
  %tobool40 = icmp ne i8 %30, 0, !dbg !5374
  br i1 %tobool40, label %if.then41, label %if.else43, !dbg !5377

if.then41:                                        ; preds = %for.body39
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5378
  %call42 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %31), !dbg !5379
  store %union.tree_node* %call42, %union.tree_node** %op, align 8, !dbg !5380
  br label %if.end46, !dbg !5381

if.else43:                                        ; preds = %for.body39
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5382
  %33 = load i32, i32* %op_num.addr, align 4, !dbg !5383
  %add44 = add i32 %33, 1, !dbg !5384
  %call45 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %32, i32 %add44), !dbg !5385
  store %union.tree_node* %call45, %union.tree_node** %op, align 8, !dbg !5386
  br label %if.end46

if.end46:                                         ; preds = %if.else43, %if.then41
  %34 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5387
  %35 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5387
  %call47 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %34, %union.tree_node* %35), !dbg !5387
  store %union.tree_node* %call47, %union.tree_node** %t, align 8, !dbg !5388
  %36 = load i32, i32* %number_of_places_left_in_vector, align 4, !dbg !5389
  %dec = add nsw i32 %36, -1, !dbg !5389
  store i32 %dec, i32* %number_of_places_left_in_vector, align 4, !dbg !5389
  %37 = load i32, i32* %number_of_places_left_in_vector, align 4, !dbg !5390
  %cmp48 = icmp eq i32 %37, 0, !dbg !5392
  br i1 %cmp48, label %if.then50, label %if.end65, !dbg !5393

if.then50:                                        ; preds = %if.end46
  %38 = load i32, i32* %nunits, align 4, !dbg !5394
  store i32 %38, i32* %number_of_places_left_in_vector, align 4, !dbg !5396
  %39 = load i8, i8* %constant_p, align 1, !dbg !5397
  %tobool51 = icmp ne i8 %39, 0, !dbg !5397
  br i1 %tobool51, label %if.then52, label %if.else54, !dbg !5399

if.then52:                                        ; preds = %if.then50
  %40 = load %union.tree_node*, %union.tree_node** %vector_type, align 8, !dbg !5400
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5401
  %call53 = call %union.tree_node* @build_vector(%union.tree_node* %40, %union.tree_node* %41), !dbg !5402
  store %union.tree_node* %call53, %union.tree_node** %vec_cst, align 8, !dbg !5403
  br label %if.end56, !dbg !5404

if.else54:                                        ; preds = %if.then50
  %42 = load %union.tree_node*, %union.tree_node** %vector_type, align 8, !dbg !5405
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5406
  %call55 = call %union.tree_node* @build_constructor_from_list(%union.tree_node* %42, %union.tree_node* %43), !dbg !5407
  store %union.tree_node* %call55, %union.tree_node** %vec_cst, align 8, !dbg !5408
  br label %if.end56

if.end56:                                         ; preds = %if.else54, %if.then52
  %44 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5409
  %tobool57 = icmp ne %struct.VEC_tree_heap* %44, null, !dbg !5409
  br i1 %tobool57, label %cond.true58, label %cond.false60, !dbg !5409

cond.true58:                                      ; preds = %if.end56
  %45 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5409
  %base59 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %45, i32 0, i32 0, !dbg !5409
  br label %cond.end61, !dbg !5409

cond.false60:                                     ; preds = %if.end56
  br label %cond.end61, !dbg !5409

cond.end61:                                       ; preds = %cond.false60, %cond.true58
  %cond62 = phi %struct.VEC_tree_base* [ %base59, %cond.true58 ], [ null, %cond.false60 ], !dbg !5409
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5409
  %47 = load %union.tree_node*, %union.tree_node** %vec_cst, align 8, !dbg !5409
  %48 = load %union.tree_node*, %union.tree_node** %vector_type, align 8, !dbg !5409
  %call63 = call %union.tree_node* @vect_init_vector(%union.gimple_statement_d* %46, %union.tree_node* %47, %union.tree_node* %48, %struct.gimple_stmt_iterator* null), !dbg !5409
  %call64 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond62, %union.tree_node* %call63), !dbg !5409
  store %union.tree_node* null, %union.tree_node** %t, align 8, !dbg !5410
  br label %if.end65, !dbg !5411

if.end65:                                         ; preds = %cond.end61, %if.end46
  br label %for.inc, !dbg !5412

for.inc:                                          ; preds = %if.end65
  %49 = load i32, i32* %i, align 4, !dbg !5413
  %dec66 = add i32 %49, -1, !dbg !5413
  store i32 %dec66, i32* %i, align 4, !dbg !5413
  br label %for.cond30, !dbg !5414, !llvm.loop !5415

for.end:                                          ; preds = %cond.end35
  br label %for.inc67, !dbg !5417

for.inc67:                                        ; preds = %for.end
  %50 = load i32, i32* %j, align 4, !dbg !5418
  %inc = add nsw i32 %50, 1, !dbg !5418
  store i32 %inc, i32* %j, align 4, !dbg !5418
  br label %for.cond, !dbg !5419, !llvm.loop !5420

for.end68:                                        ; preds = %for.cond
  %51 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5422
  %tobool69 = icmp ne %struct.VEC_tree_heap* %51, null, !dbg !5422
  br i1 %tobool69, label %cond.true70, label %cond.false72, !dbg !5422

cond.true70:                                      ; preds = %for.end68
  %52 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5422
  %base71 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %52, i32 0, i32 0, !dbg !5422
  br label %cond.end73, !dbg !5422

cond.false72:                                     ; preds = %for.end68
  br label %cond.end73, !dbg !5422

cond.end73:                                       ; preds = %cond.false72, %cond.true70
  %cond74 = phi %struct.VEC_tree_base* [ %base71, %cond.true70 ], [ null, %cond.false72 ], !dbg !5422
  %call75 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond74), !dbg !5422
  store i32 %call75, i32* %vec_num, align 4, !dbg !5423
  %53 = load i32, i32* %vec_num, align 4, !dbg !5424
  %sub76 = sub i32 %53, 1, !dbg !5426
  store i32 %sub76, i32* %j, align 4, !dbg !5427
  br label %for.cond77, !dbg !5428

for.cond77:                                       ; preds = %for.inc95, %cond.end73
  %54 = load i32, i32* %j, align 4, !dbg !5429
  %cmp78 = icmp sge i32 %54, 0, !dbg !5431
  br i1 %cmp78, label %for.body80, label %for.end97, !dbg !5432

for.body80:                                       ; preds = %for.cond77
  %55 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5433
  %tobool81 = icmp ne %struct.VEC_tree_heap* %55, null, !dbg !5433
  br i1 %tobool81, label %cond.true82, label %cond.false84, !dbg !5433

cond.true82:                                      ; preds = %for.body80
  %56 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5433
  %base83 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %56, i32 0, i32 0, !dbg !5433
  br label %cond.end85, !dbg !5433

cond.false84:                                     ; preds = %for.body80
  br label %cond.end85, !dbg !5433

cond.end85:                                       ; preds = %cond.false84, %cond.true82
  %cond86 = phi %struct.VEC_tree_base* [ %base83, %cond.true82 ], [ null, %cond.false84 ], !dbg !5433
  %57 = load i32, i32* %j, align 4, !dbg !5433
  %call87 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond86, i32 %57), !dbg !5433
  store %union.tree_node* %call87, %union.tree_node** %vop, align 8, !dbg !5435
  %58 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5436
  %59 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %58, align 8, !dbg !5436
  %tobool88 = icmp ne %struct.VEC_tree_heap* %59, null, !dbg !5436
  br i1 %tobool88, label %cond.true89, label %cond.false91, !dbg !5436

cond.true89:                                      ; preds = %cond.end85
  %60 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5436
  %61 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %60, align 8, !dbg !5436
  %base90 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %61, i32 0, i32 0, !dbg !5436
  br label %cond.end92, !dbg !5436

cond.false91:                                     ; preds = %cond.end85
  br label %cond.end92, !dbg !5436

cond.end92:                                       ; preds = %cond.false91, %cond.true89
  %cond93 = phi %struct.VEC_tree_base* [ %base90, %cond.true89 ], [ null, %cond.false91 ], !dbg !5436
  %62 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !5436
  %call94 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond93, %union.tree_node* %62), !dbg !5436
  br label %for.inc95, !dbg !5437

for.inc95:                                        ; preds = %cond.end92
  %63 = load i32, i32* %j, align 4, !dbg !5438
  %dec96 = add nsw i32 %63, -1, !dbg !5438
  store i32 %dec96, i32* %j, align 4, !dbg !5438
  br label %for.cond77, !dbg !5439, !llvm.loop !5440

for.end97:                                        ; preds = %for.cond77
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %voprnds), !dbg !5442
  br label %while.cond, !dbg !5443

while.cond:                                       ; preds = %for.end128, %for.end97
  %64 = load i32, i32* %number_of_vectors.addr, align 4, !dbg !5444
  %65 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5445
  %66 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %65, align 8, !dbg !5445
  %tobool98 = icmp ne %struct.VEC_tree_heap* %66, null, !dbg !5445
  br i1 %tobool98, label %cond.true99, label %cond.false101, !dbg !5445

cond.true99:                                      ; preds = %while.cond
  %67 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5445
  %68 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %67, align 8, !dbg !5445
  %base100 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %68, i32 0, i32 0, !dbg !5445
  br label %cond.end102, !dbg !5445

cond.false101:                                    ; preds = %while.cond
  br label %cond.end102, !dbg !5445

cond.end102:                                      ; preds = %cond.false101, %cond.true99
  %cond103 = phi %struct.VEC_tree_base* [ %base100, %cond.true99 ], [ null, %cond.false101 ], !dbg !5445
  %call104 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond103), !dbg !5445
  %cmp105 = icmp ugt i32 %64, %call104, !dbg !5446
  br i1 %cmp105, label %while.body, label %while.end, !dbg !5443

while.body:                                       ; preds = %cond.end102
  store i32 0, i32* %i, align 4, !dbg !5447
  br label %for.cond107, !dbg !5450

for.cond107:                                      ; preds = %for.inc126, %while.body
  %69 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5451
  %70 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %69, align 8, !dbg !5451
  %tobool108 = icmp ne %struct.VEC_tree_heap* %70, null, !dbg !5451
  br i1 %tobool108, label %cond.true109, label %cond.false111, !dbg !5451

cond.true109:                                     ; preds = %for.cond107
  %71 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5451
  %72 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %71, align 8, !dbg !5451
  %base110 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %72, i32 0, i32 0, !dbg !5451
  br label %cond.end112, !dbg !5451

cond.false111:                                    ; preds = %for.cond107
  br label %cond.end112, !dbg !5451

cond.end112:                                      ; preds = %cond.false111, %cond.true109
  %cond113 = phi %struct.VEC_tree_base* [ %base110, %cond.true109 ], [ null, %cond.false111 ], !dbg !5451
  %73 = load i32, i32* %i, align 4, !dbg !5451
  %call114 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond113, i32 %73, %union.tree_node** %vop), !dbg !5451
  %tobool115 = icmp ne i32 %call114, 0, !dbg !5451
  br i1 %tobool115, label %land.rhs, label %land.end, !dbg !5453

land.rhs:                                         ; preds = %cond.end112
  %74 = load i32, i32* %i, align 4, !dbg !5454
  %75 = load i32, i32* %vec_num, align 4, !dbg !5455
  %cmp116 = icmp ult i32 %74, %75, !dbg !5456
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end112
  %76 = phi i1 [ false, %cond.end112 ], [ %cmp116, %land.rhs ], !dbg !5457
  br i1 %76, label %for.body118, label %for.end128, !dbg !5458

for.body118:                                      ; preds = %land.end
  %77 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5459
  %78 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %77, align 8, !dbg !5459
  %tobool119 = icmp ne %struct.VEC_tree_heap* %78, null, !dbg !5459
  br i1 %tobool119, label %cond.true120, label %cond.false122, !dbg !5459

cond.true120:                                     ; preds = %for.body118
  %79 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_oprnds.addr, align 8, !dbg !5459
  %80 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %79, align 8, !dbg !5459
  %base121 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %80, i32 0, i32 0, !dbg !5459
  br label %cond.end123, !dbg !5459

cond.false122:                                    ; preds = %for.body118
  br label %cond.end123, !dbg !5459

cond.end123:                                      ; preds = %cond.false122, %cond.true120
  %cond124 = phi %struct.VEC_tree_base* [ %base121, %cond.true120 ], [ null, %cond.false122 ], !dbg !5459
  %81 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !5459
  %call125 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond124, %union.tree_node* %81), !dbg !5459
  br label %for.inc126, !dbg !5459

for.inc126:                                       ; preds = %cond.end123
  %82 = load i32, i32* %i, align 4, !dbg !5460
  %inc127 = add i32 %82, 1, !dbg !5460
  store i32 %inc127, i32* %i, align 4, !dbg !5460
  br label %for.cond107, !dbg !5461, !llvm.loop !5462

for.end128:                                       ; preds = %land.end
  br label %while.cond, !dbg !5443, !llvm.loop !5464

while.end:                                        ; preds = %cond.end102
  ret void, !dbg !5466
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !5467 {
entry:
  %retval = alloca %struct._stmt_vec_info*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %uid = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5470, metadata !DIExpression()), !dbg !5471
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !5472, metadata !DIExpression()), !dbg !5473
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5474
  %call = call i32 @gimple_uid(%union.gimple_statement_d* %0), !dbg !5475
  store i32 %call, i32* %uid, align 4, !dbg !5473
  %1 = load i32, i32* %uid, align 4, !dbg !5476
  %cmp = icmp eq i32 %1, 0, !dbg !5478
  br i1 %cmp, label %if.then, label %if.end, !dbg !5479

if.then:                                          ; preds = %entry
  store %struct._stmt_vec_info* null, %struct._stmt_vec_info** %retval, align 8, !dbg !5480
  br label %return, !dbg !5480

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %uid, align 4, !dbg !5481
  %3 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !5481
  %tobool = icmp ne %struct.VEC_vec_void_p_heap* %3, null, !dbg !5481
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5481

cond.true:                                        ; preds = %if.end
  %4 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !5481
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %4, i32 0, i32 0, !dbg !5481
  br label %cond.end, !dbg !5481

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5481

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vec_void_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5481
  %call1 = call i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %cond), !dbg !5481
  %cmp2 = icmp ule i32 %2, %call1, !dbg !5481
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !5481

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), i32 629, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !5481
  br label %cond.end5, !dbg !5481

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5481

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5481
  %5 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !5482
  %tobool7 = icmp ne %struct.VEC_vec_void_p_heap* %5, null, !dbg !5482
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !5482

cond.true8:                                       ; preds = %cond.end5
  %6 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !5482
  %base9 = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %6, i32 0, i32 0, !dbg !5482
  br label %cond.end11, !dbg !5482

cond.false10:                                     ; preds = %cond.end5
  br label %cond.end11, !dbg !5482

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_vec_void_p_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !5482
  %7 = load i32, i32* %uid, align 4, !dbg !5482
  %sub = sub i32 %7, 1, !dbg !5482
  %call13 = call i8* @VEC_vec_void_p_base_index(%struct.VEC_vec_void_p_base* %cond12, i32 %sub), !dbg !5482
  %8 = bitcast i8* %call13 to %struct._stmt_vec_info*, !dbg !5483
  store %struct._stmt_vec_info* %8, %struct._stmt_vec_info** %retval, align 8, !dbg !5484
  br label %return, !dbg !5484

return:                                           ; preds = %cond.end11, %if.then
  %9 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %retval, align 8, !dbg !5485
  ret %struct._stmt_vec_info* %9, !dbg !5485
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !5486 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5489, metadata !DIExpression()), !dbg !5490
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5491, metadata !DIExpression()), !dbg !5492
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5493
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !5494
  store i32 %call, i32* %code, align 4, !dbg !5495
  %1 = load i32, i32* %code, align 4, !dbg !5496
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !5498
  %cmp = icmp eq i32 %call1, 3, !dbg !5499
  br i1 %cmp, label %if.then, label %if.end, !dbg !5500

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5501
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !5501
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !5501
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5501
  %bf.load = load i64, i64* %3, align 8, !dbg !5501
  %bf.clear = and i64 %bf.load, 65535, !dbg !5501
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5501
  store i32 %bf.cast, i32* %code, align 4, !dbg !5502
  br label %if.end, !dbg !5503

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !5504
  ret i32 %4, !dbg !5505
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !5506 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5509, metadata !DIExpression()), !dbg !5510
  %0 = load i32, i32* %code.addr, align 4, !dbg !5511
  %idxprom = sext i32 %0 to i64, !dbg !5512
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !5512
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5512
  %conv = zext i8 %1 to i32, !dbg !5513
  ret i32 %conv, !dbg !5514
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @vect_transform_slp_perm_load(%union.gimple_statement_d* %stmt, %struct.VEC_tree_heap* %dr_chain, %struct.gimple_stmt_iterator* %gsi, i32 %vf, %struct._slp_instance* %slp_node_instance, i8 zeroext %analyze_only) #0 !dbg !5515 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %dr_chain.addr = alloca %struct.VEC_tree_heap*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %vf.addr = alloca i32, align 4
  %slp_node_instance.addr = alloca %struct._slp_instance*, align 8
  %analyze_only.addr = alloca i8, align 1
  %stmt_info = alloca %struct._stmt_vec_info*, align 8
  %mask_element_type = alloca %union.tree_node*, align 8
  %mask_type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  %scale = alloca i32, align 4
  %mask_nunits = alloca i32, align 4
  %nunits = alloca i32, align 4
  %vec_index = alloca i32, align 4
  %scalar_index = alloca i32, align 4
  %node = alloca %struct._slp_tree*, align 8
  %vectype = alloca %union.tree_node*, align 8
  %builtin_decl = alloca %union.tree_node*, align 8
  %next_scalar_stmt = alloca %union.gimple_statement_d*, align 8
  %group_size = alloca i32, align 4
  %first_mask_element = alloca i32, align 4
  %index = alloca i32, align 4
  %unroll_factor = alloca i32, align 4
  %mask = alloca i32*, align 8
  %current_mask_element = alloca i32, align 4
  %ncopies = alloca i32, align 4
  %only_one_vec = alloca i8, align 1
  %need_next_vector = alloca i8, align 1
  %first_vec_index = alloca i32, align 4
  %second_vec_index = alloca i32, align 4
  %orig_vec_stmts_num = alloca i32, align 4
  %vect_stmts_counter = alloca i32, align 4
  %mask_vec = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5518, metadata !DIExpression()), !dbg !5519
  store %struct.VEC_tree_heap* %dr_chain, %struct.VEC_tree_heap** %dr_chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %dr_chain.addr, metadata !5520, metadata !DIExpression()), !dbg !5521
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5522, metadata !DIExpression()), !dbg !5523
  store i32 %vf, i32* %vf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vf.addr, metadata !5524, metadata !DIExpression()), !dbg !5525
  store %struct._slp_instance* %slp_node_instance, %struct._slp_instance** %slp_node_instance.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %slp_node_instance.addr, metadata !5526, metadata !DIExpression()), !dbg !5527
  store i8 %analyze_only, i8* %analyze_only.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %analyze_only.addr, metadata !5528, metadata !DIExpression()), !dbg !5529
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_info, metadata !5530, metadata !DIExpression()), !dbg !5531
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5532
  %call = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %0), !dbg !5533
  store %struct._stmt_vec_info* %call, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !5531
  call void @llvm.dbg.declare(metadata %union.tree_node** %mask_element_type, metadata !5534, metadata !DIExpression()), !dbg !5535
  store %union.tree_node* null, %union.tree_node** %mask_element_type, align 8, !dbg !5535
  call void @llvm.dbg.declare(metadata %union.tree_node** %mask_type, metadata !5536, metadata !DIExpression()), !dbg !5537
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5538, metadata !DIExpression()), !dbg !5539
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5540, metadata !DIExpression()), !dbg !5541
  call void @llvm.dbg.declare(metadata i32* %k, metadata !5542, metadata !DIExpression()), !dbg !5543
  call void @llvm.dbg.declare(metadata i32* %m, metadata !5544, metadata !DIExpression()), !dbg !5545
  call void @llvm.dbg.declare(metadata i32* %scale, metadata !5546, metadata !DIExpression()), !dbg !5547
  call void @llvm.dbg.declare(metadata i32* %mask_nunits, metadata !5548, metadata !DIExpression()), !dbg !5549
  call void @llvm.dbg.declare(metadata i32* %nunits, metadata !5550, metadata !DIExpression()), !dbg !5551
  call void @llvm.dbg.declare(metadata i32* %vec_index, metadata !5552, metadata !DIExpression()), !dbg !5553
  store i32 0, i32* %vec_index, align 4, !dbg !5553
  call void @llvm.dbg.declare(metadata i32* %scalar_index, metadata !5554, metadata !DIExpression()), !dbg !5555
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node, metadata !5556, metadata !DIExpression()), !dbg !5557
  call void @llvm.dbg.declare(metadata %union.tree_node** %vectype, metadata !5558, metadata !DIExpression()), !dbg !5559
  %1 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !5560
  %vectype1 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %1, i32 0, i32 5, !dbg !5560
  %2 = load %union.tree_node*, %union.tree_node** %vectype1, align 8, !dbg !5560
  store %union.tree_node* %2, %union.tree_node** %vectype, align 8, !dbg !5559
  call void @llvm.dbg.declare(metadata %union.tree_node** %builtin_decl, metadata !5561, metadata !DIExpression()), !dbg !5562
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %next_scalar_stmt, metadata !5563, metadata !DIExpression()), !dbg !5564
  call void @llvm.dbg.declare(metadata i32* %group_size, metadata !5565, metadata !DIExpression()), !dbg !5566
  %3 = load %struct._slp_instance*, %struct._slp_instance** %slp_node_instance.addr, align 8, !dbg !5567
  %group_size2 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %3, i32 0, i32 1, !dbg !5567
  %4 = load i32, i32* %group_size2, align 8, !dbg !5567
  store i32 %4, i32* %group_size, align 4, !dbg !5566
  call void @llvm.dbg.declare(metadata i32* %first_mask_element, metadata !5568, metadata !DIExpression()), !dbg !5569
  call void @llvm.dbg.declare(metadata i32* %index, metadata !5570, metadata !DIExpression()), !dbg !5571
  call void @llvm.dbg.declare(metadata i32* %unroll_factor, metadata !5572, metadata !DIExpression()), !dbg !5573
  call void @llvm.dbg.declare(metadata i32** %mask, metadata !5574, metadata !DIExpression()), !dbg !5575
  call void @llvm.dbg.declare(metadata i32* %current_mask_element, metadata !5576, metadata !DIExpression()), !dbg !5577
  call void @llvm.dbg.declare(metadata i32* %ncopies, metadata !5578, metadata !DIExpression()), !dbg !5579
  call void @llvm.dbg.declare(metadata i8* %only_one_vec, metadata !5580, metadata !DIExpression()), !dbg !5581
  store i8 0, i8* %only_one_vec, align 1, !dbg !5581
  call void @llvm.dbg.declare(metadata i8* %need_next_vector, metadata !5582, metadata !DIExpression()), !dbg !5583
  store i8 0, i8* %need_next_vector, align 1, !dbg !5583
  call void @llvm.dbg.declare(metadata i32* %first_vec_index, metadata !5584, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.declare(metadata i32* %second_vec_index, metadata !5586, metadata !DIExpression()), !dbg !5587
  call void @llvm.dbg.declare(metadata i32* %orig_vec_stmts_num, metadata !5588, metadata !DIExpression()), !dbg !5589
  call void @llvm.dbg.declare(metadata i32* %vect_stmts_counter, metadata !5590, metadata !DIExpression()), !dbg !5591
  %5 = load %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 2, i32 7), align 8, !dbg !5592
  %tobool = icmp ne %union.tree_node* (%union.tree_node*, %union.tree_node**)* %5, null, !dbg !5594
  br i1 %tobool, label %if.end7, label %if.then, !dbg !5595

if.then:                                          ; preds = %entry
  %call3 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !5596
  %tobool4 = icmp ne i8 %call3, 0, !dbg !5596
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !5599

if.then5:                                         ; preds = %if.then
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5600
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i64 0, i64 0)), !dbg !5602
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5603
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5604
  call void @print_gimple_stmt(%struct._IO_FILE* %7, %union.gimple_statement_d* %8, i32 0, i32 2), !dbg !5605
  br label %if.end, !dbg !5606

if.end:                                           ; preds = %if.then5, %if.then
  store i8 0, i8* %retval, align 1, !dbg !5607
  br label %return, !dbg !5607

if.end7:                                          ; preds = %entry
  %9 = load %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 2, i32 7), align 8, !dbg !5608
  %10 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !5609
  %call8 = call %union.tree_node* %9(%union.tree_node* %10, %union.tree_node** %mask_element_type), !dbg !5610
  store %union.tree_node* %call8, %union.tree_node** %builtin_decl, align 8, !dbg !5611
  %11 = load %union.tree_node*, %union.tree_node** %builtin_decl, align 8, !dbg !5612
  %tobool9 = icmp ne %union.tree_node* %11, null, !dbg !5612
  br i1 %tobool9, label %lor.lhs.false, label %if.then11, !dbg !5614

lor.lhs.false:                                    ; preds = %if.end7
  %12 = load %union.tree_node*, %union.tree_node** %mask_element_type, align 8, !dbg !5615
  %tobool10 = icmp ne %union.tree_node* %12, null, !dbg !5615
  br i1 %tobool10, label %if.end17, label %if.then11, !dbg !5616

if.then11:                                        ; preds = %lor.lhs.false, %if.end7
  %call12 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !5617
  %tobool13 = icmp ne i8 %call12, 0, !dbg !5617
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !5620

if.then14:                                        ; preds = %if.then11
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5621
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i64 0, i64 0)), !dbg !5623
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5624
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5625
  call void @print_gimple_stmt(%struct._IO_FILE* %14, %union.gimple_statement_d* %15, i32 0, i32 2), !dbg !5626
  br label %if.end16, !dbg !5627

if.end16:                                         ; preds = %if.then14, %if.then11
  store i8 0, i8* %retval, align 1, !dbg !5628
  br label %return, !dbg !5628

if.end17:                                         ; preds = %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %mask_element_type, align 8, !dbg !5629
  %call18 = call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %16), !dbg !5630
  store %union.tree_node* %call18, %union.tree_node** %mask_type, align 8, !dbg !5631
  %17 = load %union.tree_node*, %union.tree_node** %mask_type, align 8, !dbg !5632
  %type = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !5632
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !5632
  %bf.load = load i32, i32* %precision, align 4, !dbg !5632
  %bf.clear = and i32 %bf.load, 1023, !dbg !5632
  %sh_prom = zext i32 %bf.clear to i64, !dbg !5632
  %shl = shl i64 1, %sh_prom, !dbg !5632
  %conv = trunc i64 %shl to i32, !dbg !5632
  store i32 %conv, i32* %mask_nunits, align 4, !dbg !5633
  %18 = load i32, i32* %mask_nunits, align 4, !dbg !5634
  %conv19 = sext i32 %18 to i64, !dbg !5634
  %mul = mul i64 4, %conv19, !dbg !5635
  %call20 = call i8* @xmalloc(i64 %mul), !dbg !5636
  %19 = bitcast i8* %call20 to i32*, !dbg !5637
  store i32* %19, i32** %mask, align 8, !dbg !5638
  %20 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !5639
  %type21 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !5639
  %precision22 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 6, !dbg !5639
  %bf.load23 = load i32, i32* %precision22, align 4, !dbg !5639
  %bf.clear24 = and i32 %bf.load23, 1023, !dbg !5639
  %sh_prom25 = zext i32 %bf.clear24 to i64, !dbg !5639
  %shl26 = shl i64 1, %sh_prom25, !dbg !5639
  %conv27 = trunc i64 %shl26 to i32, !dbg !5639
  store i32 %conv27, i32* %nunits, align 4, !dbg !5640
  %21 = load i32, i32* %mask_nunits, align 4, !dbg !5641
  %22 = load i32, i32* %nunits, align 4, !dbg !5642
  %div = sdiv i32 %21, %22, !dbg !5643
  store i32 %div, i32* %scale, align 4, !dbg !5644
  %23 = load %struct._slp_instance*, %struct._slp_instance** %slp_node_instance.addr, align 8, !dbg !5645
  %unrolling_factor = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %23, i32 0, i32 2, !dbg !5645
  %24 = load i32, i32* %unrolling_factor, align 4, !dbg !5645
  store i32 %24, i32* %unroll_factor, align 4, !dbg !5646
  %25 = load i32, i32* %group_size, align 4, !dbg !5647
  %26 = load %struct._slp_instance*, %struct._slp_instance** %slp_node_instance.addr, align 8, !dbg !5648
  %unrolling_factor28 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %26, i32 0, i32 2, !dbg !5648
  %27 = load i32, i32* %unrolling_factor28, align 4, !dbg !5648
  %mul29 = mul i32 %25, %27, !dbg !5649
  %28 = load i32, i32* %nunits, align 4, !dbg !5650
  %div30 = udiv i32 %mul29, %28, !dbg !5651
  store i32 %div30, i32* %orig_vec_stmts_num, align 4, !dbg !5652
  %29 = load i32, i32* %orig_vec_stmts_num, align 4, !dbg !5653
  %cmp = icmp eq i32 %29, 1, !dbg !5655
  br i1 %cmp, label %if.then32, label %if.end33, !dbg !5656

if.then32:                                        ; preds = %if.end17
  store i8 1, i8* %only_one_vec, align 1, !dbg !5657
  br label %if.end33, !dbg !5658

if.end33:                                         ; preds = %if.then32, %if.end17
  %30 = load i32, i32* %vf.addr, align 4, !dbg !5659
  %31 = load %struct._slp_instance*, %struct._slp_instance** %slp_node_instance.addr, align 8, !dbg !5660
  %unrolling_factor34 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %31, i32 0, i32 2, !dbg !5660
  %32 = load i32, i32* %unrolling_factor34, align 4, !dbg !5660
  %div35 = udiv i32 %30, %32, !dbg !5661
  store i32 %div35, i32* %ncopies, align 4, !dbg !5662
  store i32 0, i32* %i, align 4, !dbg !5663
  br label %for.cond, !dbg !5665

for.cond:                                         ; preds = %for.inc107, %if.end33
  %33 = load %struct._slp_instance*, %struct._slp_instance** %slp_node_instance.addr, align 8, !dbg !5666
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %33, i32 0, i32 5, !dbg !5666
  %34 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !5666
  %tobool36 = icmp ne %struct.VEC_slp_tree_heap* %34, null, !dbg !5666
  br i1 %tobool36, label %cond.true, label %cond.false, !dbg !5666

cond.true:                                        ; preds = %for.cond
  %35 = load %struct._slp_instance*, %struct._slp_instance** %slp_node_instance.addr, align 8, !dbg !5666
  %loads37 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %35, i32 0, i32 5, !dbg !5666
  %36 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads37, align 8, !dbg !5666
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %36, i32 0, i32 0, !dbg !5666
  br label %cond.end, !dbg !5666

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5666

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5666
  %37 = load i32, i32* %i, align 4, !dbg !5666
  %call38 = call i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %cond, i32 %37, %struct._slp_tree** %node), !dbg !5666
  %tobool39 = icmp ne i32 %call38, 0, !dbg !5668
  br i1 %tobool39, label %for.body, label %for.end109, !dbg !5668

for.body:                                         ; preds = %cond.end
  store i32 0, i32* %scalar_index, align 4, !dbg !5669
  store i32 0, i32* %index, align 4, !dbg !5671
  store i32 0, i32* %vect_stmts_counter, align 4, !dbg !5672
  store i32 0, i32* %vec_index, align 4, !dbg !5673
  %38 = load i32, i32* %vec_index, align 4, !dbg !5674
  %inc = add nsw i32 %38, 1, !dbg !5674
  store i32 %inc, i32* %vec_index, align 4, !dbg !5674
  store i32 %38, i32* %first_vec_index, align 4, !dbg !5675
  %39 = load i8, i8* %only_one_vec, align 1, !dbg !5676
  %tobool40 = icmp ne i8 %39, 0, !dbg !5676
  br i1 %tobool40, label %if.then41, label %if.else, !dbg !5678

if.then41:                                        ; preds = %for.body
  %40 = load i32, i32* %first_vec_index, align 4, !dbg !5679
  store i32 %40, i32* %second_vec_index, align 4, !dbg !5680
  br label %if.end43, !dbg !5681

if.else:                                          ; preds = %for.body
  %41 = load i32, i32* %vec_index, align 4, !dbg !5682
  %inc42 = add nsw i32 %41, 1, !dbg !5682
  store i32 %inc42, i32* %vec_index, align 4, !dbg !5682
  store i32 %41, i32* %second_vec_index, align 4, !dbg !5683
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.then41
  store i32 0, i32* %j, align 4, !dbg !5684
  br label %for.cond44, !dbg !5686

for.cond44:                                       ; preds = %for.inc104, %if.end43
  %42 = load i32, i32* %j, align 4, !dbg !5687
  %43 = load i32, i32* %unroll_factor, align 4, !dbg !5689
  %cmp45 = icmp slt i32 %42, %43, !dbg !5690
  br i1 %cmp45, label %for.body47, label %for.end106, !dbg !5691

for.body47:                                       ; preds = %for.cond44
  store i32 0, i32* %k, align 4, !dbg !5692
  br label %for.cond48, !dbg !5695

for.cond48:                                       ; preds = %for.inc101, %for.body47
  %44 = load i32, i32* %k, align 4, !dbg !5696
  %45 = load i32, i32* %group_size, align 4, !dbg !5698
  %cmp49 = icmp slt i32 %44, %45, !dbg !5699
  br i1 %cmp49, label %for.body51, label %for.end103, !dbg !5700

for.body51:                                       ; preds = %for.cond48
  %46 = load i32, i32* %i, align 4, !dbg !5701
  %47 = load i32, i32* %j, align 4, !dbg !5703
  %48 = load i32, i32* %group_size, align 4, !dbg !5704
  %mul52 = mul nsw i32 %47, %48, !dbg !5705
  %add = add nsw i32 %46, %mul52, !dbg !5706
  %49 = load i32, i32* %scale, align 4, !dbg !5707
  %mul53 = mul nsw i32 %add, %49, !dbg !5708
  store i32 %mul53, i32* %first_mask_element, align 4, !dbg !5709
  store i32 0, i32* %m, align 4, !dbg !5710
  br label %for.cond54, !dbg !5712

for.cond54:                                       ; preds = %for.inc, %for.body51
  %50 = load i32, i32* %m, align 4, !dbg !5713
  %51 = load i32, i32* %scale, align 4, !dbg !5715
  %cmp55 = icmp slt i32 %50, %51, !dbg !5716
  br i1 %cmp55, label %for.body57, label %for.end, !dbg !5717

for.body57:                                       ; preds = %for.cond54
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5718
  %53 = load i32, i32* %first_mask_element, align 4, !dbg !5721
  %54 = load i32, i32* %m, align 4, !dbg !5722
  %55 = load i32, i32* %mask_nunits, align 4, !dbg !5723
  %56 = load i8, i8* %only_one_vec, align 1, !dbg !5724
  %57 = load i32, i32* %index, align 4, !dbg !5725
  %58 = load i32*, i32** %mask, align 8, !dbg !5726
  %call58 = call zeroext i8 @vect_get_mask_element(%union.gimple_statement_d* %52, i32 %53, i32 %54, i32 %55, i8 zeroext %56, i32 %57, i32* %58, i32* %current_mask_element, i8* %need_next_vector), !dbg !5727
  %tobool59 = icmp ne i8 %call58, 0, !dbg !5727
  br i1 %tobool59, label %if.end61, label %if.then60, !dbg !5728

if.then60:                                        ; preds = %for.body57
  store i8 0, i8* %retval, align 1, !dbg !5729
  br label %return, !dbg !5729

if.end61:                                         ; preds = %for.body57
  %59 = load i32, i32* %current_mask_element, align 4, !dbg !5730
  %60 = load i32*, i32** %mask, align 8, !dbg !5731
  %61 = load i32, i32* %index, align 4, !dbg !5732
  %inc62 = add nsw i32 %61, 1, !dbg !5732
  store i32 %inc62, i32* %index, align 4, !dbg !5732
  %idxprom = sext i32 %61 to i64, !dbg !5731
  %arrayidx = getelementptr inbounds i32, i32* %60, i64 %idxprom, !dbg !5731
  store i32 %59, i32* %arrayidx, align 4, !dbg !5733
  br label %for.inc, !dbg !5734

for.inc:                                          ; preds = %if.end61
  %62 = load i32, i32* %m, align 4, !dbg !5735
  %inc63 = add nsw i32 %62, 1, !dbg !5735
  store i32 %inc63, i32* %m, align 4, !dbg !5735
  br label %for.cond54, !dbg !5736, !llvm.loop !5737

for.end:                                          ; preds = %for.cond54
  %63 = load i32, i32* %index, align 4, !dbg !5739
  %64 = load i32, i32* %mask_nunits, align 4, !dbg !5741
  %cmp64 = icmp eq i32 %63, %64, !dbg !5742
  br i1 %cmp64, label %if.then66, label %if.end100, !dbg !5743

if.then66:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %mask_vec, metadata !5744, metadata !DIExpression()), !dbg !5746
  store %union.tree_node* null, %union.tree_node** %mask_vec, align 8, !dbg !5746
  br label %while.cond, !dbg !5747

while.cond:                                       ; preds = %while.body, %if.then66
  %65 = load i32, i32* %index, align 4, !dbg !5748
  %dec = add nsw i32 %65, -1, !dbg !5748
  store i32 %dec, i32* %index, align 4, !dbg !5748
  %cmp67 = icmp sge i32 %dec, 0, !dbg !5749
  br i1 %cmp67, label %while.body, label %while.end, !dbg !5747

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5750, metadata !DIExpression()), !dbg !5752
  %66 = load %union.tree_node*, %union.tree_node** %mask_element_type, align 8, !dbg !5753
  %67 = load i32*, i32** %mask, align 8, !dbg !5754
  %68 = load i32, i32* %index, align 4, !dbg !5755
  %idxprom69 = sext i32 %68 to i64, !dbg !5754
  %arrayidx70 = getelementptr inbounds i32, i32* %67, i64 %idxprom69, !dbg !5754
  %69 = load i32, i32* %arrayidx70, align 4, !dbg !5754
  %conv71 = sext i32 %69 to i64, !dbg !5754
  %call72 = call %union.tree_node* @build_int_cst(%union.tree_node* %66, i64 %conv71), !dbg !5756
  store %union.tree_node* %call72, %union.tree_node** %t, align 8, !dbg !5752
  %70 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5757
  %71 = load %union.tree_node*, %union.tree_node** %mask_vec, align 8, !dbg !5757
  %call73 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %70, %union.tree_node* %71), !dbg !5757
  store %union.tree_node* %call73, %union.tree_node** %mask_vec, align 8, !dbg !5758
  br label %while.cond, !dbg !5747, !llvm.loop !5759

while.end:                                        ; preds = %while.cond
  %72 = load %union.tree_node*, %union.tree_node** %mask_type, align 8, !dbg !5761
  %73 = load %union.tree_node*, %union.tree_node** %mask_vec, align 8, !dbg !5762
  %call74 = call %union.tree_node* @build_vector(%union.tree_node* %72, %union.tree_node* %73), !dbg !5763
  store %union.tree_node* %call74, %union.tree_node** %mask_vec, align 8, !dbg !5764
  store i32 0, i32* %index, align 4, !dbg !5765
  %74 = load i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 2, i32 8), align 8, !dbg !5766
  %75 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !5768
  %76 = load %union.tree_node*, %union.tree_node** %mask_vec, align 8, !dbg !5769
  %call75 = call zeroext i8 %74(%union.tree_node* %75, %union.tree_node* %76), !dbg !5770
  %tobool76 = icmp ne i8 %call75, 0, !dbg !5770
  br i1 %tobool76, label %if.end83, label %if.then77, !dbg !5771

if.then77:                                        ; preds = %while.end
  %call78 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !5772
  %tobool79 = icmp ne i8 %call78, 0, !dbg !5772
  br i1 %tobool79, label %if.then80, label %if.end82, !dbg !5775

if.then80:                                        ; preds = %if.then77
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5776
  %call81 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.18, i64 0, i64 0)), !dbg !5778
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5779
  %79 = load %union.tree_node*, %union.tree_node** %mask_vec, align 8, !dbg !5780
  call void @print_generic_expr(%struct._IO_FILE* %78, %union.tree_node* %79, i32 0), !dbg !5781
  br label %if.end82, !dbg !5782

if.end82:                                         ; preds = %if.then80, %if.then77
  %80 = load i32*, i32** %mask, align 8, !dbg !5783
  %81 = bitcast i32* %80 to i8*, !dbg !5783
  call void @free(i8* %81), !dbg !5784
  store i8 0, i8* %retval, align 1, !dbg !5785
  br label %return, !dbg !5785

if.end83:                                         ; preds = %while.end
  %82 = load i8, i8* %analyze_only.addr, align 1, !dbg !5786
  %tobool84 = icmp ne i8 %82, 0, !dbg !5786
  br i1 %tobool84, label %if.end99, label %if.then85, !dbg !5788

if.then85:                                        ; preds = %if.end83
  %83 = load i8, i8* %need_next_vector, align 1, !dbg !5789
  %tobool86 = icmp ne i8 %83, 0, !dbg !5789
  br i1 %tobool86, label %if.then87, label %if.end88, !dbg !5792

if.then87:                                        ; preds = %if.then85
  %84 = load i32, i32* %second_vec_index, align 4, !dbg !5793
  store i32 %84, i32* %first_vec_index, align 4, !dbg !5795
  %85 = load i32, i32* %vec_index, align 4, !dbg !5796
  store i32 %85, i32* %second_vec_index, align 4, !dbg !5797
  br label %if.end88, !dbg !5798

if.end88:                                         ; preds = %if.then87, %if.then85
  %86 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !5799
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %86, i32 0, i32 2, !dbg !5799
  %87 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5799
  %tobool89 = icmp ne %struct.VEC_gimple_heap* %87, null, !dbg !5799
  br i1 %tobool89, label %cond.true90, label %cond.false93, !dbg !5799

cond.true90:                                      ; preds = %if.end88
  %88 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !5799
  %stmts91 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %88, i32 0, i32 2, !dbg !5799
  %89 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts91, align 8, !dbg !5799
  %base92 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %89, i32 0, i32 0, !dbg !5799
  br label %cond.end94, !dbg !5799

cond.false93:                                     ; preds = %if.end88
  br label %cond.end94, !dbg !5799

cond.end94:                                       ; preds = %cond.false93, %cond.true90
  %cond95 = phi %struct.VEC_gimple_base* [ %base92, %cond.true90 ], [ null, %cond.false93 ], !dbg !5799
  %90 = load i32, i32* %scalar_index, align 4, !dbg !5799
  %inc96 = add nsw i32 %90, 1, !dbg !5799
  store i32 %inc96, i32* %scalar_index, align 4, !dbg !5799
  %call97 = call %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond95, i32 %90), !dbg !5799
  store %union.gimple_statement_d* %call97, %union.gimple_statement_d** %next_scalar_stmt, align 8, !dbg !5800
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5801
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next_scalar_stmt, align 8, !dbg !5802
  %93 = load %union.tree_node*, %union.tree_node** %mask_vec, align 8, !dbg !5803
  %94 = load i32, i32* %first_vec_index, align 4, !dbg !5804
  %95 = load i32, i32* %second_vec_index, align 4, !dbg !5805
  %96 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5806
  %97 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !5807
  %98 = load %union.tree_node*, %union.tree_node** %builtin_decl, align 8, !dbg !5808
  %99 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !5809
  %100 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dr_chain.addr, align 8, !dbg !5810
  %101 = load i32, i32* %ncopies, align 4, !dbg !5811
  %102 = load i32, i32* %vect_stmts_counter, align 4, !dbg !5812
  %inc98 = add nsw i32 %102, 1, !dbg !5812
  store i32 %inc98, i32* %vect_stmts_counter, align 4, !dbg !5812
  call void @vect_create_mask_and_perm(%union.gimple_statement_d* %91, %union.gimple_statement_d* %92, %union.tree_node* %93, i32 %94, i32 %95, %struct.gimple_stmt_iterator* %96, %struct._slp_tree* %97, %union.tree_node* %98, %union.tree_node* %99, %struct.VEC_tree_heap* %100, i32 %101, i32 %102), !dbg !5813
  br label %if.end99, !dbg !5814

if.end99:                                         ; preds = %cond.end94, %if.end83
  br label %if.end100, !dbg !5815

if.end100:                                        ; preds = %if.end99, %for.end
  br label %for.inc101, !dbg !5816

for.inc101:                                       ; preds = %if.end100
  %103 = load i32, i32* %k, align 4, !dbg !5817
  %inc102 = add nsw i32 %103, 1, !dbg !5817
  store i32 %inc102, i32* %k, align 4, !dbg !5817
  br label %for.cond48, !dbg !5818, !llvm.loop !5819

for.end103:                                       ; preds = %for.cond48
  br label %for.inc104, !dbg !5821

for.inc104:                                       ; preds = %for.end103
  %104 = load i32, i32* %j, align 4, !dbg !5822
  %inc105 = add nsw i32 %104, 1, !dbg !5822
  store i32 %inc105, i32* %j, align 4, !dbg !5822
  br label %for.cond44, !dbg !5823, !llvm.loop !5824

for.end106:                                       ; preds = %for.cond44
  br label %for.inc107, !dbg !5826

for.inc107:                                       ; preds = %for.end106
  %105 = load i32, i32* %i, align 4, !dbg !5827
  %inc108 = add nsw i32 %105, 1, !dbg !5827
  store i32 %inc108, i32* %i, align 4, !dbg !5827
  br label %for.cond, !dbg !5828, !llvm.loop !5829

for.end109:                                       ; preds = %cond.end
  %106 = load i32*, i32** %mask, align 8, !dbg !5831
  %107 = bitcast i32* %106 to i8*, !dbg !5831
  call void @free(i8* %107), !dbg !5832
  store i8 1, i8* %retval, align 1, !dbg !5833
  br label %return, !dbg !5833

return:                                           ; preds = %for.end109, %if.end82, %if.then60, %if.end16, %if.end
  %108 = load i8, i8* %retval, align 1, !dbg !5834
  ret i8 %108, !dbg !5834
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #3

declare dso_local %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node*) #3

declare dso_local i8* @xmalloc(i64) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %vec_, i32 %ix_, %struct._slp_tree** %ptr) #0 !dbg !5835 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_slp_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct._slp_tree**, align 8
  store %struct.VEC_slp_tree_base* %vec_, %struct.VEC_slp_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_base** %vec_.addr, metadata !5840, metadata !DIExpression()), !dbg !5841
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5842, metadata !DIExpression()), !dbg !5841
  store %struct._slp_tree** %ptr, %struct._slp_tree*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree*** %ptr.addr, metadata !5843, metadata !DIExpression()), !dbg !5841
  %0 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !5844
  %tobool = icmp ne %struct.VEC_slp_tree_base* %0, null, !dbg !5844
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5844

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5844
  %2 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !5844
  %num = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %2, i32 0, i32 0, !dbg !5844
  %3 = load i32, i32* %num, align 8, !dbg !5844
  %cmp = icmp ult i32 %1, %3, !dbg !5844
  br i1 %cmp, label %if.then, label %if.else, !dbg !5841

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !5846
  %vec = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %4, i32 0, i32 2, !dbg !5846
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5846
  %idxprom = zext i32 %5 to i64, !dbg !5846
  %arrayidx = getelementptr inbounds [1 x %struct._slp_tree*], [1 x %struct._slp_tree*]* %vec, i64 0, i64 %idxprom, !dbg !5846
  %6 = load %struct._slp_tree*, %struct._slp_tree** %arrayidx, align 8, !dbg !5846
  %7 = load %struct._slp_tree**, %struct._slp_tree*** %ptr.addr, align 8, !dbg !5846
  store %struct._slp_tree* %6, %struct._slp_tree** %7, align 8, !dbg !5846
  store i32 1, i32* %retval, align 4, !dbg !5846
  br label %return, !dbg !5846

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct._slp_tree**, %struct._slp_tree*** %ptr.addr, align 8, !dbg !5848
  store %struct._slp_tree* null, %struct._slp_tree** %8, align 8, !dbg !5848
  store i32 0, i32* %retval, align 4, !dbg !5848
  br label %return, !dbg !5848

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5841
  ret i32 %9, !dbg !5841
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_get_mask_element(%union.gimple_statement_d* %stmt, i32 %first_mask_element, i32 %m, i32 %mask_nunits, i8 zeroext %only_one_vec, i32 %index, i32* %mask, i32* %current_mask_element, i8* %need_next_vector) #0 !dbg !2 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %first_mask_element.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %mask_nunits.addr = alloca i32, align 4
  %only_one_vec.addr = alloca i8, align 1
  %index.addr = alloca i32, align 4
  %mask.addr = alloca i32*, align 8
  %current_mask_element.addr = alloca i32*, align 8
  %need_next_vector.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5850, metadata !DIExpression()), !dbg !5851
  store i32 %first_mask_element, i32* %first_mask_element.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %first_mask_element.addr, metadata !5852, metadata !DIExpression()), !dbg !5853
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !5854, metadata !DIExpression()), !dbg !5855
  store i32 %mask_nunits, i32* %mask_nunits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask_nunits.addr, metadata !5856, metadata !DIExpression()), !dbg !5857
  store i8 %only_one_vec, i8* %only_one_vec.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %only_one_vec.addr, metadata !5858, metadata !DIExpression()), !dbg !5859
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5860, metadata !DIExpression()), !dbg !5861
  store i32* %mask, i32** %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %mask.addr, metadata !5862, metadata !DIExpression()), !dbg !5863
  store i32* %current_mask_element, i32** %current_mask_element.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %current_mask_element.addr, metadata !5864, metadata !DIExpression()), !dbg !5865
  store i8* %need_next_vector, i8** %need_next_vector.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %need_next_vector.addr, metadata !5866, metadata !DIExpression()), !dbg !5867
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5868, metadata !DIExpression()), !dbg !5869
  %0 = load i32, i32* %first_mask_element.addr, align 4, !dbg !5870
  %1 = load i32, i32* %m.addr, align 4, !dbg !5871
  %add = add nsw i32 %0, %1, !dbg !5872
  %2 = load i32*, i32** %current_mask_element.addr, align 8, !dbg !5873
  store i32 %add, i32* %2, align 4, !dbg !5874
  %3 = load i32, i32* %mask_nunits.addr, align 4, !dbg !5875
  %4 = load i32, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5876
  %sub = sub nsw i32 %4, 1, !dbg !5877
  %mul = mul nsw i32 %3, %sub, !dbg !5878
  %5 = load i32*, i32** %current_mask_element.addr, align 8, !dbg !5879
  %6 = load i32, i32* %5, align 4, !dbg !5880
  %sub1 = sub nsw i32 %6, %mul, !dbg !5880
  store i32 %sub1, i32* %5, align 4, !dbg !5880
  %7 = load i32*, i32** %current_mask_element.addr, align 8, !dbg !5881
  %8 = load i32, i32* %7, align 4, !dbg !5883
  %9 = load i32, i32* %mask_nunits.addr, align 4, !dbg !5884
  %cmp = icmp slt i32 %8, %9, !dbg !5885
  br i1 %cmp, label %if.then, label %if.end, !dbg !5886

if.then:                                          ; preds = %entry
  store i8 1, i8* @vect_get_mask_element.needs_first_vector, align 1, !dbg !5887
  br label %if.end, !dbg !5888

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8, i8* %only_one_vec.addr, align 1, !dbg !5889
  %conv = zext i8 %10 to i32, !dbg !5889
  %tobool = icmp ne i32 %conv, 0, !dbg !5889
  br i1 %tobool, label %land.lhs.true, label %if.end9, !dbg !5891

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32*, i32** %current_mask_element.addr, align 8, !dbg !5892
  %12 = load i32, i32* %11, align 4, !dbg !5893
  %13 = load i32, i32* %mask_nunits.addr, align 4, !dbg !5894
  %cmp2 = icmp sge i32 %12, %13, !dbg !5895
  br i1 %cmp2, label %if.then4, label %if.end9, !dbg !5896

if.then4:                                         ; preds = %land.lhs.true
  %call = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !5897
  %tobool5 = icmp ne i8 %call, 0, !dbg !5897
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !5900

if.then6:                                         ; preds = %if.then4
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5901
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.57, i64 0, i64 0)), !dbg !5903
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5904
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5905
  call void @print_gimple_stmt(%struct._IO_FILE* %15, %union.gimple_statement_d* %16, i32 0, i32 2), !dbg !5906
  br label %if.end8, !dbg !5907

if.end8:                                          ; preds = %if.then6, %if.then4
  store i8 0, i8* %retval, align 1, !dbg !5908
  br label %return, !dbg !5908

if.end9:                                          ; preds = %land.lhs.true, %if.end
  %17 = load i32*, i32** %current_mask_element.addr, align 8, !dbg !5909
  %18 = load i32, i32* %17, align 4, !dbg !5911
  %19 = load i32, i32* %mask_nunits.addr, align 4, !dbg !5912
  %mul10 = mul nsw i32 %19, 2, !dbg !5913
  %cmp11 = icmp sge i32 %18, %mul10, !dbg !5914
  br i1 %cmp11, label %if.then13, label %if.end32, !dbg !5915

if.then13:                                        ; preds = %if.end9
  %20 = load i8, i8* @vect_get_mask_element.needs_first_vector, align 1, !dbg !5916
  %conv14 = zext i8 %20 to i32, !dbg !5916
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !5916
  br i1 %tobool15, label %if.then18, label %lor.lhs.false, !dbg !5919

lor.lhs.false:                                    ; preds = %if.then13
  %21 = load i8, i8* @vect_get_mask_element.mask_fixed, align 1, !dbg !5920
  %conv16 = zext i8 %21 to i32, !dbg !5920
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !5920
  br i1 %tobool17, label %if.then18, label %if.end24, !dbg !5921

if.then18:                                        ; preds = %lor.lhs.false, %if.then13
  %call19 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !5922
  %tobool20 = icmp ne i8 %call19, 0, !dbg !5922
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !5925

if.then21:                                        ; preds = %if.then18
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5926
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)), !dbg !5928
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5929
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5930
  call void @print_gimple_stmt(%struct._IO_FILE* %23, %union.gimple_statement_d* %24, i32 0, i32 2), !dbg !5931
  br label %if.end23, !dbg !5932

if.end23:                                         ; preds = %if.then21, %if.then18
  store i8 0, i8* %retval, align 1, !dbg !5933
  br label %return, !dbg !5933

if.end24:                                         ; preds = %lor.lhs.false
  %25 = load i32, i32* %mask_nunits.addr, align 4, !dbg !5934
  %26 = load i32, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5935
  %mul25 = mul nsw i32 %25, %26, !dbg !5936
  %27 = load i32*, i32** %current_mask_element.addr, align 8, !dbg !5937
  %28 = load i32, i32* %27, align 4, !dbg !5938
  %sub26 = sub nsw i32 %28, %mul25, !dbg !5938
  store i32 %sub26, i32* %27, align 4, !dbg !5938
  store i32 0, i32* %i, align 4, !dbg !5939
  br label %for.cond, !dbg !5941

for.cond:                                         ; preds = %for.inc, %if.end24
  %29 = load i32, i32* %i, align 4, !dbg !5942
  %30 = load i32, i32* %index.addr, align 4, !dbg !5944
  %cmp27 = icmp slt i32 %29, %30, !dbg !5945
  br i1 %cmp27, label %for.body, label %for.end, !dbg !5946

for.body:                                         ; preds = %for.cond
  %31 = load i32, i32* %mask_nunits.addr, align 4, !dbg !5947
  %32 = load i32, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5948
  %mul29 = mul nsw i32 %31, %32, !dbg !5949
  %33 = load i32*, i32** %mask.addr, align 8, !dbg !5950
  %34 = load i32, i32* %i, align 4, !dbg !5951
  %idxprom = sext i32 %34 to i64, !dbg !5950
  %arrayidx = getelementptr inbounds i32, i32* %33, i64 %idxprom, !dbg !5950
  %35 = load i32, i32* %arrayidx, align 4, !dbg !5952
  %sub30 = sub nsw i32 %35, %mul29, !dbg !5952
  store i32 %sub30, i32* %arrayidx, align 4, !dbg !5952
  br label %for.inc, !dbg !5950

for.inc:                                          ; preds = %for.body
  %36 = load i32, i32* %i, align 4, !dbg !5953
  %inc = add nsw i32 %36, 1, !dbg !5953
  store i32 %inc, i32* %i, align 4, !dbg !5953
  br label %for.cond, !dbg !5954, !llvm.loop !5955

for.end:                                          ; preds = %for.cond
  %37 = load i32, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5957
  %inc31 = add nsw i32 %37, 1, !dbg !5957
  store i32 %inc31, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5957
  store i8 1, i8* @vect_get_mask_element.mask_fixed, align 1, !dbg !5958
  br label %if.end32, !dbg !5959

if.end32:                                         ; preds = %for.end, %if.end9
  %38 = load i8, i8* @vect_get_mask_element.mask_fixed, align 1, !dbg !5960
  %39 = load i8*, i8** %need_next_vector.addr, align 8, !dbg !5961
  store i8 %38, i8* %39, align 1, !dbg !5962
  %40 = load i32, i32* %index.addr, align 4, !dbg !5963
  %41 = load i32, i32* %mask_nunits.addr, align 4, !dbg !5965
  %sub33 = sub nsw i32 %41, 1, !dbg !5966
  %cmp34 = icmp eq i32 %40, %sub33, !dbg !5967
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !5968

if.then36:                                        ; preds = %if.end32
  store i32 1, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5969
  store i8 0, i8* @vect_get_mask_element.mask_fixed, align 1, !dbg !5971
  store i8 0, i8* @vect_get_mask_element.needs_first_vector, align 1, !dbg !5972
  br label %if.end37, !dbg !5973

if.end37:                                         ; preds = %if.then36, %if.end32
  store i8 1, i8* %retval, align 1, !dbg !5974
  br label %return, !dbg !5974

return:                                           ; preds = %if.end37, %if.end23, %if.end8
  %42 = load i8, i8* %retval, align 1, !dbg !5975
  ret i8 %42, !dbg !5975
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #3

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @build_vector(%union.tree_node*, %union.tree_node*) #3

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #3

declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @vect_create_mask_and_perm(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %next_scalar_stmt, %union.tree_node* %mask, i32 %first_vec_indx, i32 %second_vec_indx, %struct.gimple_stmt_iterator* %gsi, %struct._slp_tree* %node, %union.tree_node* %builtin_decl, %union.tree_node* %vectype, %struct.VEC_tree_heap* %dr_chain, i32 %ncopies, i32 %vect_stmts_counter) #0 !dbg !5976 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %next_scalar_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %mask.addr = alloca %union.tree_node*, align 8
  %first_vec_indx.addr = alloca i32, align 4
  %second_vec_indx.addr = alloca i32, align 4
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %node.addr = alloca %struct._slp_tree*, align 8
  %builtin_decl.addr = alloca %union.tree_node*, align 8
  %vectype.addr = alloca %union.tree_node*, align 8
  %dr_chain.addr = alloca %struct.VEC_tree_heap*, align 8
  %ncopies.addr = alloca i32, align 4
  %vect_stmts_counter.addr = alloca i32, align 4
  %perm_dest = alloca %union.tree_node*, align 8
  %perm_stmt = alloca %union.gimple_statement_d*, align 8
  %next_stmt_info = alloca %struct._stmt_vec_info*, align 8
  %i = alloca i32, align 4
  %stride = alloca i32, align 4
  %first_vec = alloca %union.tree_node*, align 8
  %second_vec = alloca %union.tree_node*, align 8
  %data_ref = alloca %union.tree_node*, align 8
  %params = alloca %struct.VEC_tree_heap*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5979, metadata !DIExpression()), !dbg !5980
  store %union.gimple_statement_d* %next_scalar_stmt, %union.gimple_statement_d** %next_scalar_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %next_scalar_stmt.addr, metadata !5981, metadata !DIExpression()), !dbg !5982
  store %union.tree_node* %mask, %union.tree_node** %mask.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %mask.addr, metadata !5983, metadata !DIExpression()), !dbg !5984
  store i32 %first_vec_indx, i32* %first_vec_indx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %first_vec_indx.addr, metadata !5985, metadata !DIExpression()), !dbg !5986
  store i32 %second_vec_indx, i32* %second_vec_indx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %second_vec_indx.addr, metadata !5987, metadata !DIExpression()), !dbg !5988
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5989, metadata !DIExpression()), !dbg !5990
  store %struct._slp_tree* %node, %struct._slp_tree** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node.addr, metadata !5991, metadata !DIExpression()), !dbg !5992
  store %union.tree_node* %builtin_decl, %union.tree_node** %builtin_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %builtin_decl.addr, metadata !5993, metadata !DIExpression()), !dbg !5994
  store %union.tree_node* %vectype, %union.tree_node** %vectype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vectype.addr, metadata !5995, metadata !DIExpression()), !dbg !5996
  store %struct.VEC_tree_heap* %dr_chain, %struct.VEC_tree_heap** %dr_chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %dr_chain.addr, metadata !5997, metadata !DIExpression()), !dbg !5998
  store i32 %ncopies, i32* %ncopies.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ncopies.addr, metadata !5999, metadata !DIExpression()), !dbg !6000
  store i32 %vect_stmts_counter, i32* %vect_stmts_counter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vect_stmts_counter.addr, metadata !6001, metadata !DIExpression()), !dbg !6002
  call void @llvm.dbg.declare(metadata %union.tree_node** %perm_dest, metadata !6003, metadata !DIExpression()), !dbg !6004
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %perm_stmt, metadata !6005, metadata !DIExpression()), !dbg !6006
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %perm_stmt, align 8, !dbg !6006
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %next_stmt_info, metadata !6007, metadata !DIExpression()), !dbg !6008
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6009, metadata !DIExpression()), !dbg !6010
  call void @llvm.dbg.declare(metadata i32* %stride, metadata !6011, metadata !DIExpression()), !dbg !6012
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_vec, metadata !6013, metadata !DIExpression()), !dbg !6014
  call void @llvm.dbg.declare(metadata %union.tree_node** %second_vec, metadata !6015, metadata !DIExpression()), !dbg !6016
  call void @llvm.dbg.declare(metadata %union.tree_node** %data_ref, metadata !6017, metadata !DIExpression()), !dbg !6018
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %params, metadata !6019, metadata !DIExpression()), !dbg !6020
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %params, align 8, !dbg !6020
  %0 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6021
  %vec_stmts_size = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %0, i32 0, i32 4, !dbg !6021
  %1 = load i32, i32* %vec_stmts_size, align 8, !dbg !6021
  %2 = load i32, i32* %ncopies.addr, align 4, !dbg !6022
  %div = udiv i32 %1, %2, !dbg !6023
  store i32 %div, i32* %stride, align 4, !dbg !6024
  %3 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6025
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i32 0, i32 3, !dbg !6025
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !6025
  %tobool = icmp ne %struct.VEC_gimple_heap* %4, null, !dbg !6025
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6025

cond.true:                                        ; preds = %entry
  %5 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6025
  %vec_stmts1 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %5, i32 0, i32 3, !dbg !6025
  %6 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts1, align 8, !dbg !6025
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %6, i32 0, i32 0, !dbg !6025
  br label %cond.end, !dbg !6025

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6025

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6025
  %call = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond), !dbg !6025
  store i32 %call, i32* %i, align 4, !dbg !6027
  br label %for.cond, !dbg !6028

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load i32, i32* %i, align 4, !dbg !6029
  %8 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6031
  %vec_stmts_size2 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %8, i32 0, i32 4, !dbg !6031
  %9 = load i32, i32* %vec_stmts_size2, align 8, !dbg !6031
  %cmp = icmp slt i32 %7, %9, !dbg !6032
  br i1 %cmp, label %for.body, label %for.end, !dbg !6033

for.body:                                         ; preds = %for.cond
  %10 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6034
  %vec_stmts3 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %10, i32 0, i32 3, !dbg !6034
  %11 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts3, align 8, !dbg !6034
  %tobool4 = icmp ne %struct.VEC_gimple_heap* %11, null, !dbg !6034
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !6034

cond.true5:                                       ; preds = %for.body
  %12 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6034
  %vec_stmts6 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %12, i32 0, i32 3, !dbg !6034
  %13 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts6, align 8, !dbg !6034
  %base7 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %13, i32 0, i32 0, !dbg !6034
  br label %cond.end9, !dbg !6034

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !6034

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_gimple_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !6034
  %call11 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond10, %union.gimple_statement_d* null), !dbg !6034
  br label %for.inc, !dbg !6034

for.inc:                                          ; preds = %cond.end9
  %14 = load i32, i32* %i, align 4, !dbg !6035
  %inc = add nsw i32 %14, 1, !dbg !6035
  store i32 %inc, i32* %i, align 4, !dbg !6035
  br label %for.cond, !dbg !6036, !llvm.loop !6037

for.end:                                          ; preds = %for.cond
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6039
  %call12 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %15), !dbg !6040
  %16 = load %union.tree_node*, %union.tree_node** %vectype.addr, align 8, !dbg !6041
  %call13 = call %union.tree_node* @vect_create_destination_var(%union.tree_node* %call12, %union.tree_node* %16), !dbg !6042
  store %union.tree_node* %call13, %union.tree_node** %perm_dest, align 8, !dbg !6043
  store i32 0, i32* %i, align 4, !dbg !6044
  br label %for.cond14, !dbg !6046

for.cond14:                                       ; preds = %for.inc66, %for.end
  %17 = load i32, i32* %i, align 4, !dbg !6047
  %18 = load i32, i32* %ncopies.addr, align 4, !dbg !6049
  %cmp15 = icmp slt i32 %17, %18, !dbg !6050
  br i1 %cmp15, label %for.body16, label %for.end68, !dbg !6051

for.body16:                                       ; preds = %for.cond14
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dr_chain.addr, align 8, !dbg !6052
  %tobool17 = icmp ne %struct.VEC_tree_heap* %19, null, !dbg !6052
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !6052

cond.true18:                                      ; preds = %for.body16
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dr_chain.addr, align 8, !dbg !6052
  %base19 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %20, i32 0, i32 0, !dbg !6052
  br label %cond.end21, !dbg !6052

cond.false20:                                     ; preds = %for.body16
  br label %cond.end21, !dbg !6052

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_tree_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !6052
  %21 = load i32, i32* %first_vec_indx.addr, align 4, !dbg !6052
  %call23 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond22, i32 %21), !dbg !6052
  store %union.tree_node* %call23, %union.tree_node** %first_vec, align 8, !dbg !6054
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dr_chain.addr, align 8, !dbg !6055
  %tobool24 = icmp ne %struct.VEC_tree_heap* %22, null, !dbg !6055
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !6055

cond.true25:                                      ; preds = %cond.end21
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dr_chain.addr, align 8, !dbg !6055
  %base26 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %23, i32 0, i32 0, !dbg !6055
  br label %cond.end28, !dbg !6055

cond.false27:                                     ; preds = %cond.end21
  br label %cond.end28, !dbg !6055

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_tree_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !6055
  %24 = load i32, i32* %second_vec_indx.addr, align 4, !dbg !6055
  %call30 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond29, i32 %24), !dbg !6055
  store %union.tree_node* %call30, %union.tree_node** %second_vec, align 8, !dbg !6056
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %params), !dbg !6057
  %call31 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 3), !dbg !6058
  store %struct.VEC_tree_heap* %call31, %struct.VEC_tree_heap** %params, align 8, !dbg !6059
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !6060
  %tobool32 = icmp ne %struct.VEC_tree_heap* %25, null, !dbg !6060
  br i1 %tobool32, label %cond.true33, label %cond.false35, !dbg !6060

cond.true33:                                      ; preds = %cond.end28
  %26 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !6060
  %base34 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %26, i32 0, i32 0, !dbg !6060
  br label %cond.end36, !dbg !6060

cond.false35:                                     ; preds = %cond.end28
  br label %cond.end36, !dbg !6060

cond.end36:                                       ; preds = %cond.false35, %cond.true33
  %cond37 = phi %struct.VEC_tree_base* [ %base34, %cond.true33 ], [ null, %cond.false35 ], !dbg !6060
  %27 = load %union.tree_node*, %union.tree_node** %first_vec, align 8, !dbg !6060
  %call38 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond37, %union.tree_node* %27), !dbg !6060
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !6061
  %tobool39 = icmp ne %struct.VEC_tree_heap* %28, null, !dbg !6061
  br i1 %tobool39, label %cond.true40, label %cond.false42, !dbg !6061

cond.true40:                                      ; preds = %cond.end36
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !6061
  %base41 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %29, i32 0, i32 0, !dbg !6061
  br label %cond.end43, !dbg !6061

cond.false42:                                     ; preds = %cond.end36
  br label %cond.end43, !dbg !6061

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.VEC_tree_base* [ %base41, %cond.true40 ], [ null, %cond.false42 ], !dbg !6061
  %30 = load %union.tree_node*, %union.tree_node** %second_vec, align 8, !dbg !6061
  %call45 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond44, %union.tree_node* %30), !dbg !6061
  %31 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !6062
  %tobool46 = icmp ne %struct.VEC_tree_heap* %31, null, !dbg !6062
  br i1 %tobool46, label %cond.true47, label %cond.false49, !dbg !6062

cond.true47:                                      ; preds = %cond.end43
  %32 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !6062
  %base48 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %32, i32 0, i32 0, !dbg !6062
  br label %cond.end50, !dbg !6062

cond.false49:                                     ; preds = %cond.end43
  br label %cond.end50, !dbg !6062

cond.end50:                                       ; preds = %cond.false49, %cond.true47
  %cond51 = phi %struct.VEC_tree_base* [ %base48, %cond.true47 ], [ null, %cond.false49 ], !dbg !6062
  %33 = load %union.tree_node*, %union.tree_node** %mask.addr, align 8, !dbg !6062
  %call52 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond51, %union.tree_node* %33), !dbg !6062
  %34 = load %union.tree_node*, %union.tree_node** %builtin_decl.addr, align 8, !dbg !6063
  %35 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !6064
  %call53 = call %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %34, %struct.VEC_tree_heap* %35), !dbg !6065
  store %union.gimple_statement_d* %call53, %union.gimple_statement_d** %perm_stmt, align 8, !dbg !6066
  %36 = load %union.tree_node*, %union.tree_node** %perm_dest, align 8, !dbg !6067
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %perm_stmt, align 8, !dbg !6068
  %call54 = call %union.tree_node* @make_ssa_name(%union.tree_node* %36, %union.gimple_statement_d* %37), !dbg !6069
  store %union.tree_node* %call54, %union.tree_node** %data_ref, align 8, !dbg !6070
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %perm_stmt, align 8, !dbg !6071
  %39 = load %union.tree_node*, %union.tree_node** %data_ref, align 8, !dbg !6072
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %38, %union.tree_node* %39), !dbg !6073
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6074
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %perm_stmt, align 8, !dbg !6075
  %42 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6076
  call void @vect_finish_stmt_generation(%union.gimple_statement_d* %40, %union.gimple_statement_d* %41, %struct.gimple_stmt_iterator* %42), !dbg !6077
  %43 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6078
  %vec_stmts55 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %43, i32 0, i32 3, !dbg !6078
  %44 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts55, align 8, !dbg !6078
  %tobool56 = icmp ne %struct.VEC_gimple_heap* %44, null, !dbg !6078
  br i1 %tobool56, label %cond.true57, label %cond.false60, !dbg !6078

cond.true57:                                      ; preds = %cond.end50
  %45 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6078
  %vec_stmts58 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %45, i32 0, i32 3, !dbg !6078
  %46 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts58, align 8, !dbg !6078
  %base59 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %46, i32 0, i32 0, !dbg !6078
  br label %cond.end61, !dbg !6078

cond.false60:                                     ; preds = %cond.end50
  br label %cond.end61, !dbg !6078

cond.end61:                                       ; preds = %cond.false60, %cond.true57
  %cond62 = phi %struct.VEC_gimple_base* [ %base59, %cond.true57 ], [ null, %cond.false60 ], !dbg !6078
  %47 = load i32, i32* %stride, align 4, !dbg !6078
  %48 = load i32, i32* %i, align 4, !dbg !6078
  %mul = mul nsw i32 %47, %48, !dbg !6078
  %49 = load i32, i32* %vect_stmts_counter.addr, align 4, !dbg !6078
  %add = add nsw i32 %mul, %49, !dbg !6078
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %perm_stmt, align 8, !dbg !6078
  %call63 = call %union.gimple_statement_d* @VEC_gimple_base_replace(%struct.VEC_gimple_base* %cond62, i32 %add, %union.gimple_statement_d* %50), !dbg !6078
  %51 = load i32, i32* %stride, align 4, !dbg !6079
  %52 = load i32, i32* %first_vec_indx.addr, align 4, !dbg !6080
  %add64 = add nsw i32 %52, %51, !dbg !6080
  store i32 %add64, i32* %first_vec_indx.addr, align 4, !dbg !6080
  %53 = load i32, i32* %stride, align 4, !dbg !6081
  %54 = load i32, i32* %second_vec_indx.addr, align 4, !dbg !6082
  %add65 = add nsw i32 %54, %53, !dbg !6082
  store i32 %add65, i32* %second_vec_indx.addr, align 4, !dbg !6082
  br label %for.inc66, !dbg !6083

for.inc66:                                        ; preds = %cond.end61
  %55 = load i32, i32* %i, align 4, !dbg !6084
  %inc67 = add nsw i32 %55, 1, !dbg !6084
  store i32 %inc67, i32* %i, align 4, !dbg !6084
  br label %for.cond14, !dbg !6085, !llvm.loop !6086

for.end68:                                        ; preds = %for.cond14
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next_scalar_stmt.addr, align 8, !dbg !6088
  %call69 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %56), !dbg !6089
  store %struct._stmt_vec_info* %call69, %struct._stmt_vec_info** %next_stmt_info, align 8, !dbg !6090
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %perm_stmt, align 8, !dbg !6091
  %58 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %next_stmt_info, align 8, !dbg !6092
  %vectorized_stmt = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %58, i32 0, i32 6, !dbg !6092
  store %union.gimple_statement_d* %57, %union.gimple_statement_d** %vectorized_stmt, align 8, !dbg !6093
  ret void, !dbg !6094
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @vect_schedule_slp(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo) #0 !dbg !6095 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %bb_vinfo.addr = alloca %struct._bb_vec_info*, align 8
  %slp_instances = alloca %struct.VEC_slp_instance_heap*, align 8
  %instance = alloca %struct._slp_instance*, align 8
  %i = alloca i32, align 4
  %vf = alloca i32, align 4
  %is_store = alloca i8, align 1
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !6096, metadata !DIExpression()), !dbg !6097
  store %struct._bb_vec_info* %bb_vinfo, %struct._bb_vec_info** %bb_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo.addr, metadata !6098, metadata !DIExpression()), !dbg !6099
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap** %slp_instances, metadata !6100, metadata !DIExpression()), !dbg !6101
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance, metadata !6102, metadata !DIExpression()), !dbg !6103
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6104, metadata !DIExpression()), !dbg !6105
  call void @llvm.dbg.declare(metadata i32* %vf, metadata !6106, metadata !DIExpression()), !dbg !6107
  call void @llvm.dbg.declare(metadata i8* %is_store, metadata !6108, metadata !DIExpression()), !dbg !6109
  store i8 0, i8* %is_store, align 1, !dbg !6109
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !6110
  %tobool = icmp ne %struct._loop_vec_info* %0, null, !dbg !6110
  br i1 %tobool, label %if.then, label %if.else, !dbg !6112

if.then:                                          ; preds = %entry
  %1 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !6113
  %slp_instances1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %1, i32 0, i32 16, !dbg !6113
  %2 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !6113
  store %struct.VEC_slp_instance_heap* %2, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !6115
  %3 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !6116
  %vectorization_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %3, i32 0, i32 6, !dbg !6116
  %4 = load i32, i32* %vectorization_factor, align 8, !dbg !6116
  store i32 %4, i32* %vf, align 4, !dbg !6117
  br label %if.end, !dbg !6118

if.else:                                          ; preds = %entry
  %5 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !6119
  %slp_instances2 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %5, i32 0, i32 2, !dbg !6119
  %6 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances2, align 8, !dbg !6119
  store %struct.VEC_slp_instance_heap* %6, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !6121
  store i32 1, i32* %vf, align 4, !dbg !6122
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %i, align 4, !dbg !6123
  br label %for.cond, !dbg !6125

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !6126
  %tobool3 = icmp ne %struct.VEC_slp_instance_heap* %7, null, !dbg !6126
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !6126

cond.true:                                        ; preds = %for.cond
  %8 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances, align 8, !dbg !6126
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %8, i32 0, i32 0, !dbg !6126
  br label %cond.end, !dbg !6126

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6126

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6126
  %9 = load i32, i32* %i, align 4, !dbg !6126
  %call = call i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %cond, i32 %9, %struct._slp_instance** %instance), !dbg !6126
  %tobool4 = icmp ne i32 %call, 0, !dbg !6128
  br i1 %tobool4, label %for.body, label %for.end, !dbg !6128

for.body:                                         ; preds = %cond.end
  %10 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !6129
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %10, i32 0, i32 0, !dbg !6129
  %11 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !6129
  %12 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !6131
  %13 = load i32, i32* %vf, align 4, !dbg !6132
  %call5 = call zeroext i8 @vect_schedule_slp_instance(%struct._slp_tree* %11, %struct._slp_instance* %12, i32 %13), !dbg !6133
  store i8 %call5, i8* %is_store, align 1, !dbg !6134
  %call6 = call zeroext i8 @vect_print_dump_info(i32 1), !dbg !6135
  %conv = zext i8 %call6 to i32, !dbg !6135
  %tobool7 = icmp ne i32 %conv, 0, !dbg !6135
  br i1 %tobool7, label %if.then11, label %lor.lhs.false, !dbg !6137

lor.lhs.false:                                    ; preds = %for.body
  %call8 = call zeroext i8 @vect_print_dump_info(i32 2), !dbg !6138
  %conv9 = zext i8 %call8 to i32, !dbg !6138
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !6138
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !6139

if.then11:                                        ; preds = %lor.lhs.false, %for.body
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6140
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19, i64 0, i64 0)), !dbg !6141
  br label %if.end13, !dbg !6141

if.end13:                                         ; preds = %if.then11, %lor.lhs.false
  br label %for.inc, !dbg !6142

for.inc:                                          ; preds = %if.end13
  %15 = load i32, i32* %i, align 4, !dbg !6143
  %inc = add i32 %15, 1, !dbg !6143
  store i32 %inc, i32* %i, align 4, !dbg !6143
  br label %for.cond, !dbg !6144, !llvm.loop !6145

for.end:                                          ; preds = %cond.end
  %16 = load i8, i8* %is_store, align 1, !dbg !6147
  ret i8 %16, !dbg !6148
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_schedule_slp_instance(%struct._slp_tree* %node, %struct._slp_instance* %instance, i32 %vectorization_factor) #0 !dbg !6149 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct._slp_tree*, align 8
  %instance.addr = alloca %struct._slp_instance*, align 8
  %vectorization_factor.addr = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %strided_store = alloca i8, align 1
  %is_store = alloca i8, align 1
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %stmt_info = alloca %struct._stmt_vec_info*, align 8
  %vec_stmts_size = alloca i32, align 4
  %nunits = alloca i32, align 4
  %group_size = alloca i32, align 4
  %vectype = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %loads_node = alloca %struct._slp_tree*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp51 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct._slp_tree* %node, %struct._slp_tree** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node.addr, metadata !6152, metadata !DIExpression()), !dbg !6153
  store %struct._slp_instance* %instance, %struct._slp_instance** %instance.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance.addr, metadata !6154, metadata !DIExpression()), !dbg !6155
  store i32 %vectorization_factor, i32* %vectorization_factor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vectorization_factor.addr, metadata !6156, metadata !DIExpression()), !dbg !6157
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6158, metadata !DIExpression()), !dbg !6159
  call void @llvm.dbg.declare(metadata i8* %strided_store, metadata !6160, metadata !DIExpression()), !dbg !6161
  call void @llvm.dbg.declare(metadata i8* %is_store, metadata !6162, metadata !DIExpression()), !dbg !6163
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !6164, metadata !DIExpression()), !dbg !6165
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_info, metadata !6166, metadata !DIExpression()), !dbg !6167
  call void @llvm.dbg.declare(metadata i32* %vec_stmts_size, metadata !6168, metadata !DIExpression()), !dbg !6169
  call void @llvm.dbg.declare(metadata i32* %nunits, metadata !6170, metadata !DIExpression()), !dbg !6171
  call void @llvm.dbg.declare(metadata i32* %group_size, metadata !6172, metadata !DIExpression()), !dbg !6173
  call void @llvm.dbg.declare(metadata %union.tree_node** %vectype, metadata !6174, metadata !DIExpression()), !dbg !6175
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6176, metadata !DIExpression()), !dbg !6177
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %loads_node, metadata !6178, metadata !DIExpression()), !dbg !6179
  %0 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6180
  %tobool = icmp ne %struct._slp_tree* %0, null, !dbg !6180
  br i1 %tobool, label %if.end, label %if.then, !dbg !6182

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6183
  br label %return, !dbg !6183

if.end:                                           ; preds = %entry
  %1 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6184
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %1, i32 0, i32 0, !dbg !6184
  %2 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !6184
  %3 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6185
  %4 = load i32, i32* %vectorization_factor.addr, align 4, !dbg !6186
  %call = call zeroext i8 @vect_schedule_slp_instance(%struct._slp_tree* %2, %struct._slp_instance* %3, i32 %4), !dbg !6187
  %5 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6188
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %5, i32 0, i32 1, !dbg !6188
  %6 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !6188
  %7 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6189
  %8 = load i32, i32* %vectorization_factor.addr, align 4, !dbg !6190
  %call1 = call zeroext i8 @vect_schedule_slp_instance(%struct._slp_tree* %6, %struct._slp_instance* %7, i32 %8), !dbg !6191
  %9 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6192
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %9, i32 0, i32 2, !dbg !6192
  %10 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6192
  %tobool2 = icmp ne %struct.VEC_gimple_heap* %10, null, !dbg !6192
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !6192

cond.true:                                        ; preds = %if.end
  %11 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6192
  %stmts3 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %11, i32 0, i32 2, !dbg !6192
  %12 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts3, align 8, !dbg !6192
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %12, i32 0, i32 0, !dbg !6192
  br label %cond.end, !dbg !6192

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6192

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6192
  %call4 = call %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond, i32 0), !dbg !6192
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %stmt, align 8, !dbg !6193
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6194
  %call5 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %13), !dbg !6195
  store %struct._stmt_vec_info* %call5, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !6196
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6197
  %call6 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %14), !dbg !6197
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !6197
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6197
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6197
  %call7 = call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %15), !dbg !6198
  store %union.tree_node* %call7, %union.tree_node** %vectype, align 8, !dbg !6199
  %16 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6200
  %type8 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !6200
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !6200
  %bf.load = load i32, i32* %precision, align 4, !dbg !6200
  %bf.clear = and i32 %bf.load, 1023, !dbg !6200
  %sh_prom = zext i32 %bf.clear to i64, !dbg !6200
  %shl = shl i64 1, %sh_prom, !dbg !6200
  %conv = trunc i64 %shl to i32, !dbg !6201
  store i32 %conv, i32* %nunits, align 4, !dbg !6202
  %17 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6203
  %group_size9 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %17, i32 0, i32 1, !dbg !6203
  %18 = load i32, i32* %group_size9, align 8, !dbg !6203
  store i32 %18, i32* %group_size, align 4, !dbg !6204
  %19 = load i32, i32* %vectorization_factor.addr, align 4, !dbg !6205
  %20 = load i32, i32* %group_size, align 4, !dbg !6206
  %mul = mul i32 %19, %20, !dbg !6207
  %21 = load i32, i32* %nunits, align 4, !dbg !6208
  %div = udiv i32 %mul, %21, !dbg !6209
  store i32 %div, i32* %vec_stmts_size, align 4, !dbg !6210
  %22 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6211
  %load_permutation = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %22, i32 0, i32 4, !dbg !6211
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !6211
  %tobool10 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !6211
  br i1 %tobool10, label %if.then11, label %if.end27, !dbg !6213

if.then11:                                        ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !6214
  br label %for.cond, !dbg !6217

for.cond:                                         ; preds = %for.inc, %if.then11
  %24 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6218
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %24, i32 0, i32 5, !dbg !6218
  %25 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !6218
  %tobool12 = icmp ne %struct.VEC_slp_tree_heap* %25, null, !dbg !6218
  br i1 %tobool12, label %cond.true13, label %cond.false16, !dbg !6218

cond.true13:                                      ; preds = %for.cond
  %26 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6218
  %loads14 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %26, i32 0, i32 5, !dbg !6218
  %27 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads14, align 8, !dbg !6218
  %base15 = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %27, i32 0, i32 0, !dbg !6218
  br label %cond.end17, !dbg !6218

cond.false16:                                     ; preds = %for.cond
  br label %cond.end17, !dbg !6218

cond.end17:                                       ; preds = %cond.false16, %cond.true13
  %cond18 = phi %struct.VEC_slp_tree_base* [ %base15, %cond.true13 ], [ null, %cond.false16 ], !dbg !6218
  %28 = load i32, i32* %i, align 4, !dbg !6218
  %call19 = call i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %cond18, i32 %28, %struct._slp_tree** %loads_node), !dbg !6218
  %tobool20 = icmp ne i32 %call19, 0, !dbg !6220
  br i1 %tobool20, label %for.body, label %for.end, !dbg !6220

for.body:                                         ; preds = %cond.end17
  %29 = load %struct._slp_tree*, %struct._slp_tree** %loads_node, align 8, !dbg !6221
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %29, i32 0, i32 3, !dbg !6221
  %30 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !6221
  %tobool21 = icmp ne %struct.VEC_gimple_heap* %30, null, !dbg !6221
  br i1 %tobool21, label %if.end26, label %if.then22, !dbg !6224

if.then22:                                        ; preds = %for.body
  %31 = load i32, i32* %vec_stmts_size, align 4, !dbg !6225
  %call23 = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %31), !dbg !6225
  %32 = load %struct._slp_tree*, %struct._slp_tree** %loads_node, align 8, !dbg !6227
  %vec_stmts24 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %32, i32 0, i32 3, !dbg !6227
  store %struct.VEC_gimple_heap* %call23, %struct.VEC_gimple_heap** %vec_stmts24, align 8, !dbg !6228
  %33 = load i32, i32* %vec_stmts_size, align 4, !dbg !6229
  %34 = load %struct._slp_tree*, %struct._slp_tree** %loads_node, align 8, !dbg !6230
  %vec_stmts_size25 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %34, i32 0, i32 4, !dbg !6230
  store i32 %33, i32* %vec_stmts_size25, align 8, !dbg !6231
  br label %if.end26, !dbg !6232

if.end26:                                         ; preds = %if.then22, %for.body
  br label %for.inc, !dbg !6233

for.inc:                                          ; preds = %if.end26
  %35 = load i32, i32* %i, align 4, !dbg !6234
  %inc = add nsw i32 %35, 1, !dbg !6234
  store i32 %inc, i32* %i, align 4, !dbg !6234
  br label %for.cond, !dbg !6235, !llvm.loop !6236

for.end:                                          ; preds = %cond.end17
  br label %if.end27, !dbg !6238

if.end27:                                         ; preds = %for.end, %cond.end
  %36 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6239
  %vec_stmts28 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %36, i32 0, i32 3, !dbg !6239
  %37 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts28, align 8, !dbg !6239
  %tobool29 = icmp ne %struct.VEC_gimple_heap* %37, null, !dbg !6239
  br i1 %tobool29, label %if.end34, label %if.then30, !dbg !6241

if.then30:                                        ; preds = %if.end27
  %38 = load i32, i32* %vec_stmts_size, align 4, !dbg !6242
  %call31 = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %38), !dbg !6242
  %39 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6244
  %vec_stmts32 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %39, i32 0, i32 3, !dbg !6244
  store %struct.VEC_gimple_heap* %call31, %struct.VEC_gimple_heap** %vec_stmts32, align 8, !dbg !6245
  %40 = load i32, i32* %vec_stmts_size, align 4, !dbg !6246
  %41 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6247
  %vec_stmts_size33 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %41, i32 0, i32 4, !dbg !6247
  store i32 %40, i32* %vec_stmts_size33, align 8, !dbg !6248
  br label %if.end34, !dbg !6249

if.end34:                                         ; preds = %if.then30, %if.end27
  %call35 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !6250
  %tobool36 = icmp ne i8 %call35, 0, !dbg !6250
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !6252

if.then37:                                        ; preds = %if.end34
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6253
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.59, i64 0, i64 0)), !dbg !6255
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6256
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6257
  call void @print_gimple_stmt(%struct._IO_FILE* %43, %union.gimple_statement_d* %44, i32 0, i32 2), !dbg !6258
  br label %if.end39, !dbg !6259

if.end39:                                         ; preds = %if.then37, %if.end34
  %45 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6260
  %first_load = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %45, i32 0, i32 6, !dbg !6260
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load, align 8, !dbg !6260
  %tobool40 = icmp ne %union.gimple_statement_d* %46, null, !dbg !6260
  br i1 %tobool40, label %land.lhs.true, label %if.else, !dbg !6262

land.lhs.true:                                    ; preds = %if.end39
  %47 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !6263
  %first_dr = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %47, i32 0, i32 17, !dbg !6263
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr, align 8, !dbg !6263
  %cmp = icmp ne %union.gimple_statement_d* %48, null, !dbg !6263
  br i1 %cmp, label %land.lhs.true42, label %if.else, !dbg !6264

land.lhs.true42:                                  ; preds = %land.lhs.true
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6265
  %call43 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %49), !dbg !6265
  %base44 = bitcast %union.tree_node* %call43 to %struct.tree_base*, !dbg !6265
  %50 = bitcast %struct.tree_base* %base44 to i64*, !dbg !6265
  %bf.load45 = load i64, i64* %50, align 8, !dbg !6265
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !6265
  %bf.cast = trunc i64 %bf.clear46 to i32, !dbg !6265
  %idxprom = sext i32 %bf.cast to i64, !dbg !6265
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6265
  %51 = load i32, i32* %arrayidx, align 4, !dbg !6265
  %cmp47 = icmp eq i32 %51, 4, !dbg !6265
  br i1 %cmp47, label %if.else, label %if.then49, !dbg !6266

if.then49:                                        ; preds = %land.lhs.true42
  %52 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6267
  %first_load50 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %52, i32 0, i32 6, !dbg !6267
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load50, align 8, !dbg !6267
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %53), !dbg !6268
  %54 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !6268
  %55 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6268
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 24, i1 false), !dbg !6268
  br label %if.end52, !dbg !6269

if.else:                                          ; preds = %land.lhs.true42, %land.lhs.true, %if.end39
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6270
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp51, %union.gimple_statement_d* %56), !dbg !6271
  %57 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !6271
  %58 = bitcast %struct.gimple_stmt_iterator* %tmp51 to i8*, !dbg !6271
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 24, i1 false), !dbg !6271
  br label %if.end52

if.end52:                                         ; preds = %if.else, %if.then49
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6272
  %60 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !6273
  %61 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !6274
  %call53 = call zeroext i8 @vect_transform_stmt(%union.gimple_statement_d* %59, %struct.gimple_stmt_iterator* %si, i8* %strided_store, %struct._slp_tree* %60, %struct._slp_instance* %61), !dbg !6275
  store i8 %call53, i8* %is_store, align 1, !dbg !6276
  %62 = load i8, i8* %is_store, align 1, !dbg !6277
  %tobool54 = icmp ne i8 %62, 0, !dbg !6277
  br i1 %tobool54, label %if.then55, label %if.end62, !dbg !6279

if.then55:                                        ; preds = %if.end52
  %63 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !6280
  %first_dr56 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %63, i32 0, i32 17, !dbg !6280
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr56, align 8, !dbg !6280
  %tobool57 = icmp ne %union.gimple_statement_d* %64, null, !dbg !6280
  br i1 %tobool57, label %if.then58, label %if.else60, !dbg !6283

if.then58:                                        ; preds = %if.then55
  %65 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !6284
  %first_dr59 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %65, i32 0, i32 17, !dbg !6284
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr59, align 8, !dbg !6284
  call void @vect_remove_stores(%union.gimple_statement_d* %66), !dbg !6285
  br label %if.end61, !dbg !6285

if.else60:                                        ; preds = %if.then55
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 2032, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !6286
  br label %if.end61

if.end61:                                         ; preds = %if.else60, %if.then58
  store i8 1, i8* %retval, align 1, !dbg !6287
  br label %return, !dbg !6287

if.end62:                                         ; preds = %if.end52
  store i8 0, i8* %retval, align 1, !dbg !6288
  br label %return, !dbg !6288

return:                                           ; preds = %if.end62, %if.end61, %if.then
  %67 = load i8, i8* %retval, align 1, !dbg !6289
  ret i8 %67, !dbg !6289
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_slp_transform_bb(%struct.basic_block_def* %bb) #0 !dbg !6290 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %bb_vinfo = alloca %struct._bb_vec_info*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_info = alloca %struct._stmt_vec_info*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6293, metadata !DIExpression()), !dbg !6294
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo, metadata !6295, metadata !DIExpression()), !dbg !6296
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6297
  %call = call %struct._bb_vec_info* @vec_info_for_bb(%struct.basic_block_def* %0), !dbg !6298
  store %struct._bb_vec_info* %call, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !6296
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !6299, metadata !DIExpression()), !dbg !6300
  %1 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !6301
  %tobool = icmp ne %struct._bb_vec_info* %1, null, !dbg !6301
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6301

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 2083, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !6301
  br label %cond.end, !dbg !6301

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6301

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6301
  %call1 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !6302
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6302
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6304

if.then:                                          ; preds = %cond.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6305
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0)), !dbg !6306
  br label %if.end, !dbg !6306

if.end:                                           ; preds = %if.then, %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6307
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !6309
  %4 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !6309
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6309
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !6309
  br label %for.cond, !dbg !6310

for.cond:                                         ; preds = %for.inc, %if.end
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !6311
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6313
  %lnot = xor i1 %tobool5, true, !dbg !6313
  br i1 %lnot, label %for.body, label %for.end, !dbg !6314

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6315, metadata !DIExpression()), !dbg !6317
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !6318
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %stmt, align 8, !dbg !6317
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_info, metadata !6319, metadata !DIExpression()), !dbg !6320
  %call7 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !6321
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6321
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !6323

if.then9:                                         ; preds = %for.body
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6324
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.23, i64 0, i64 0)), !dbg !6326
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6327
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6328
  call void @print_gimple_stmt(%struct._IO_FILE* %7, %union.gimple_statement_d* %8, i32 0, i32 2), !dbg !6329
  br label %if.end11, !dbg !6330

if.end11:                                         ; preds = %if.then9, %for.body
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6331
  %call12 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %9), !dbg !6332
  store %struct._stmt_vec_info* %call12, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !6333
  %10 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !6334
  %tobool13 = icmp ne %struct._stmt_vec_info* %10, null, !dbg !6334
  br i1 %tobool13, label %cond.false15, label %cond.true14, !dbg !6334

cond.true14:                                      ; preds = %if.end11
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 2100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !6334
  br label %cond.end16, !dbg !6334

cond.false15:                                     ; preds = %if.end11
  br label %cond.end16, !dbg !6334

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !6334
  %11 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !6335
  %slp_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %11, i32 0, i32 25, !dbg !6335
  %12 = load i32, i32* %slp_type, align 4, !dbg !6335
  %tobool18 = icmp ne i32 %12, 0, !dbg !6335
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !6337

if.then19:                                        ; preds = %cond.end16
  %13 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !6338
  %call20 = call zeroext i8 @vect_schedule_slp(%struct._loop_vec_info* null, %struct._bb_vec_info* %13), !dbg !6340
  br label %for.end, !dbg !6341

if.end21:                                         ; preds = %cond.end16
  br label %for.inc, !dbg !6342

for.inc:                                          ; preds = %if.end21
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !6343
  br label %for.cond, !dbg !6344, !llvm.loop !6345

for.end:                                          ; preds = %if.then19, %for.cond
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6347
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !6347
  %call22 = call %union.tree_node* @gimple_vop(%struct.function* %add.ptr), !dbg !6348
  call void @mark_sym_for_renaming(%union.tree_node* %call22), !dbg !6349
  call void @update_ssa(i32 2048), !dbg !6350
  %call23 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !6351
  %tobool24 = icmp ne i8 %call23, 0, !dbg !6351
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !6353

if.then25:                                        ; preds = %for.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6354
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0)), !dbg !6355
  br label %if.end27, !dbg !6355

if.end27:                                         ; preds = %if.then25, %for.end
  %16 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo, align 8, !dbg !6356
  call void @destroy_bb_vec_info(%struct._bb_vec_info* %16), !dbg !6357
  ret void, !dbg !6358
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._bb_vec_info* @vec_info_for_bb(%struct.basic_block_def* %bb) #0 !dbg !6359 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6360, metadata !DIExpression()), !dbg !6361
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6362
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !6363
  %1 = load i8*, i8** %aux, align 8, !dbg !6363
  %2 = bitcast i8* %1 to %struct._bb_vec_info*, !dbg !6364
  ret %struct._bb_vec_info* %2, !dbg !6365
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #3

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vop(%struct.function* %fun) #0 !dbg !6366 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !6372, metadata !DIExpression()), !dbg !6373
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6374
  %tobool = icmp ne %struct.function* %0, null, !dbg !6374
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6374

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6374
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !6374
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6374
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !6374
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !6374

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !6374
  br label %cond.end, !dbg !6374

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6374

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6374
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6375
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !6376
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !6376
  %vop = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 3, !dbg !6377
  %5 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !6377
  ret %union.tree_node* %5, !dbg !6378
}

declare dso_local void @update_ssa(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6379 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6385, metadata !DIExpression()), !dbg !6386
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6387
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6388
  %1 = load i32, i32* %flags, align 8, !dbg !6388
  %and = and i32 %1, 512, !dbg !6389
  %tobool = icmp ne i32 %and, 0, !dbg !6389
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6390

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6391
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6392
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6393
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6393
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6391
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6394

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6395
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6396
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6397
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6397
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6398
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6398
  br label %cond.end, !dbg !6394

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6394

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6394
  ret %struct.gimple_seq_d* %cond, !dbg !6399
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6400 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6406, metadata !DIExpression()), !dbg !6407
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6408
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6408
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6408

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6409
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6410
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6410
  br label %cond.end, !dbg !6408

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6408

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6408
  ret %struct.gimple_seq_node_d* %cond, !dbg !6411
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !6412 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !6416, metadata !DIExpression()), !dbg !6417
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6418
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !6418
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !6418
  br i1 %tobool, label %if.then, label %if.end, !dbg !6417

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6418
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !6418
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !6418
  call void @free(i8* %4), !dbg !6418
  br label %if.end, !dbg !6418

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6417
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !6417
  ret void, !dbg !6417
}

declare dso_local i32 @least_common_multiple(i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !6420 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6423, metadata !DIExpression()), !dbg !6424
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6424
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6424
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !6424
  ret %struct.VEC_gimple_heap* %1, !dbg !6424
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !6425 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !6428, metadata !DIExpression()), !dbg !6429
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !6430, metadata !DIExpression()), !dbg !6429
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6429
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !6429
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6429
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !6429
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !6429
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6429

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6429
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !6429
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !6429
  br label %cond.end, !dbg !6429

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6429

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6429
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !6429
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !6429
  ret %union.gimple_statement_d** %call1, !dbg !6429
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !6431 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6434, metadata !DIExpression()), !dbg !6435
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6435
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !6435
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !6435
  ret %struct.VEC_int_heap* %1, !dbg !6435
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_slp_tree_heap* @VEC_slp_tree_heap_alloc(i32 %alloc_) #0 !dbg !6436 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6439, metadata !DIExpression()), !dbg !6440
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6440
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6440
  %1 = bitcast i8* %call to %struct.VEC_slp_tree_heap*, !dbg !6440
  ret %struct.VEC_slp_tree_heap* %1, !dbg !6440
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_build_slp_tree(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree** %node, i32 %group_size, i32* %inside_cost, i32* %outside_cost, i32 %ncopies_for_cost, i32* %max_nunits, %struct.VEC_int_heap** %load_permutation, %struct.VEC_slp_tree_heap** %loads, i32 %vectorization_factor) #0 !dbg !6441 {
entry:
  %retval = alloca i8, align 1
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %bb_vinfo.addr = alloca %struct._bb_vec_info*, align 8
  %node.addr = alloca %struct._slp_tree**, align 8
  %group_size.addr = alloca i32, align 4
  %inside_cost.addr = alloca i32*, align 8
  %outside_cost.addr = alloca i32*, align 8
  %ncopies_for_cost.addr = alloca i32, align 4
  %max_nunits.addr = alloca i32*, align 8
  %load_permutation.addr = alloca %struct.VEC_int_heap**, align 8
  %loads.addr = alloca %struct.VEC_slp_tree_heap**, align 8
  %vectorization_factor.addr = alloca i32, align 4
  %def_stmts0 = alloca %struct.VEC_gimple_heap*, align 8
  %def_stmts1 = alloca %struct.VEC_gimple_heap*, align 8
  %i = alloca i32, align 4
  %stmts = alloca %struct.VEC_gimple_heap*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %first_stmt_dt0 = alloca i32, align 4
  %first_stmt_dt1 = alloca i32, align 4
  %first_stmt_code = alloca i32, align 4
  %rhs_code = alloca i32, align 4
  %first_stmt_def1_type = alloca %union.tree_node*, align 8
  %first_stmt_def0_type = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %stop_recursion = alloca i8, align 1
  %need_same_oprnds = alloca i8, align 1
  %vectype = alloca %union.tree_node*, align 8
  %scalar_type = alloca %union.tree_node*, align 8
  %first_op1 = alloca %union.tree_node*, align 8
  %ncopies = alloca i32, align 4
  %optab = alloca %struct.optab_d*, align 8
  %icode = alloca i32, align 4
  %optab_op2_mode = alloca i32, align 4
  %vec_mode = alloca i32, align 4
  %first_stmt_const_oprnd = alloca %union.tree_node*, align 8
  %first_dr = alloca %struct.data_reference*, align 8
  %pattern0 = alloca i8, align 1
  %pattern1 = alloca i8, align 1
  %dummy = alloca i64, align 8
  %permutation = alloca i8, align 1
  %load_place = alloca i32, align 4
  %first_load = alloca %union.gimple_statement_d*, align 8
  %left_node = alloca %struct._slp_tree*, align 8
  %right_node = alloca %struct._slp_tree*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !6445, metadata !DIExpression()), !dbg !6446
  store %struct._bb_vec_info* %bb_vinfo, %struct._bb_vec_info** %bb_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo.addr, metadata !6447, metadata !DIExpression()), !dbg !6448
  store %struct._slp_tree** %node, %struct._slp_tree*** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree*** %node.addr, metadata !6449, metadata !DIExpression()), !dbg !6450
  store i32 %group_size, i32* %group_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %group_size.addr, metadata !6451, metadata !DIExpression()), !dbg !6452
  store i32* %inside_cost, i32** %inside_cost.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %inside_cost.addr, metadata !6453, metadata !DIExpression()), !dbg !6454
  store i32* %outside_cost, i32** %outside_cost.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %outside_cost.addr, metadata !6455, metadata !DIExpression()), !dbg !6456
  store i32 %ncopies_for_cost, i32* %ncopies_for_cost.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ncopies_for_cost.addr, metadata !6457, metadata !DIExpression()), !dbg !6458
  store i32* %max_nunits, i32** %max_nunits.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %max_nunits.addr, metadata !6459, metadata !DIExpression()), !dbg !6460
  store %struct.VEC_int_heap** %load_permutation, %struct.VEC_int_heap*** %load_permutation.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %load_permutation.addr, metadata !6461, metadata !DIExpression()), !dbg !6462
  store %struct.VEC_slp_tree_heap** %loads, %struct.VEC_slp_tree_heap*** %loads.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_heap*** %loads.addr, metadata !6463, metadata !DIExpression()), !dbg !6464
  store i32 %vectorization_factor, i32* %vectorization_factor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vectorization_factor.addr, metadata !6465, metadata !DIExpression()), !dbg !6466
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %def_stmts0, metadata !6467, metadata !DIExpression()), !dbg !6468
  %0 = load i32, i32* %group_size.addr, align 4, !dbg !6469
  %call = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %0), !dbg !6469
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %def_stmts0, align 8, !dbg !6468
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %def_stmts1, metadata !6470, metadata !DIExpression()), !dbg !6471
  %1 = load i32, i32* %group_size.addr, align 4, !dbg !6472
  %call1 = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %1), !dbg !6472
  store %struct.VEC_gimple_heap* %call1, %struct.VEC_gimple_heap** %def_stmts1, align 8, !dbg !6471
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6473, metadata !DIExpression()), !dbg !6474
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %stmts, metadata !6475, metadata !DIExpression()), !dbg !6476
  %2 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !6477
  %3 = load %struct._slp_tree*, %struct._slp_tree** %2, align 8, !dbg !6477
  %stmts2 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i32 0, i32 2, !dbg !6477
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts2, align 8, !dbg !6477
  store %struct.VEC_gimple_heap* %4, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6476
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6478, metadata !DIExpression()), !dbg !6479
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6480
  %tobool = icmp ne %struct.VEC_gimple_heap* %5, null, !dbg !6480
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6480

cond.true:                                        ; preds = %entry
  %6 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6480
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %6, i32 0, i32 0, !dbg !6480
  br label %cond.end, !dbg !6480

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6480
  %call3 = call %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond, i32 0), !dbg !6480
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !6479
  call void @llvm.dbg.declare(metadata i32* %first_stmt_dt0, metadata !6481, metadata !DIExpression()), !dbg !6482
  store i32 0, i32* %first_stmt_dt0, align 4, !dbg !6482
  call void @llvm.dbg.declare(metadata i32* %first_stmt_dt1, metadata !6483, metadata !DIExpression()), !dbg !6484
  store i32 0, i32* %first_stmt_dt1, align 4, !dbg !6484
  call void @llvm.dbg.declare(metadata i32* %first_stmt_code, metadata !6485, metadata !DIExpression()), !dbg !6486
  store i32 0, i32* %first_stmt_code, align 4, !dbg !6486
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !6487, metadata !DIExpression()), !dbg !6488
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_stmt_def1_type, metadata !6489, metadata !DIExpression()), !dbg !6490
  store %union.tree_node* null, %union.tree_node** %first_stmt_def1_type, align 8, !dbg !6490
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_stmt_def0_type, metadata !6491, metadata !DIExpression()), !dbg !6492
  store %union.tree_node* null, %union.tree_node** %first_stmt_def0_type, align 8, !dbg !6492
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6493, metadata !DIExpression()), !dbg !6494
  call void @llvm.dbg.declare(metadata i8* %stop_recursion, metadata !6495, metadata !DIExpression()), !dbg !6496
  store i8 0, i8* %stop_recursion, align 1, !dbg !6496
  call void @llvm.dbg.declare(metadata i8* %need_same_oprnds, metadata !6497, metadata !DIExpression()), !dbg !6498
  store i8 0, i8* %need_same_oprnds, align 1, !dbg !6498
  call void @llvm.dbg.declare(metadata %union.tree_node** %vectype, metadata !6499, metadata !DIExpression()), !dbg !6500
  call void @llvm.dbg.declare(metadata %union.tree_node** %scalar_type, metadata !6501, metadata !DIExpression()), !dbg !6502
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_op1, metadata !6503, metadata !DIExpression()), !dbg !6504
  store %union.tree_node* null, %union.tree_node** %first_op1, align 8, !dbg !6504
  call void @llvm.dbg.declare(metadata i32* %ncopies, metadata !6505, metadata !DIExpression()), !dbg !6506
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optab, metadata !6507, metadata !DIExpression()), !dbg !6526
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !6527, metadata !DIExpression()), !dbg !6528
  call void @llvm.dbg.declare(metadata i32* %optab_op2_mode, metadata !6529, metadata !DIExpression()), !dbg !6530
  call void @llvm.dbg.declare(metadata i32* %vec_mode, metadata !6531, metadata !DIExpression()), !dbg !6532
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_stmt_const_oprnd, metadata !6533, metadata !DIExpression()), !dbg !6534
  store %union.tree_node* null, %union.tree_node** %first_stmt_const_oprnd, align 8, !dbg !6534
  call void @llvm.dbg.declare(metadata %struct.data_reference** %first_dr, metadata !6535, metadata !DIExpression()), !dbg !6536
  call void @llvm.dbg.declare(metadata i8* %pattern0, metadata !6537, metadata !DIExpression()), !dbg !6538
  store i8 0, i8* %pattern0, align 1, !dbg !6538
  call void @llvm.dbg.declare(metadata i8* %pattern1, metadata !6539, metadata !DIExpression()), !dbg !6540
  store i8 0, i8* %pattern1, align 1, !dbg !6540
  call void @llvm.dbg.declare(metadata i64* %dummy, metadata !6541, metadata !DIExpression()), !dbg !6542
  call void @llvm.dbg.declare(metadata i8* %permutation, metadata !6543, metadata !DIExpression()), !dbg !6544
  store i8 0, i8* %permutation, align 1, !dbg !6544
  call void @llvm.dbg.declare(metadata i32* %load_place, metadata !6545, metadata !DIExpression()), !dbg !6546
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %first_load, metadata !6547, metadata !DIExpression()), !dbg !6548
  store i32 0, i32* %i, align 4, !dbg !6549
  br label %for.cond, !dbg !6551

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6552
  %tobool4 = icmp ne %struct.VEC_gimple_heap* %7, null, !dbg !6552
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !6552

cond.true5:                                       ; preds = %for.cond
  %8 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6552
  %base6 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %8, i32 0, i32 0, !dbg !6552
  br label %cond.end8, !dbg !6552

cond.false7:                                      ; preds = %for.cond
  br label %cond.end8, !dbg !6552

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_gimple_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !6552
  %9 = load i32, i32* %i, align 4, !dbg !6552
  %call10 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond9, i32 %9, %union.gimple_statement_d** %stmt), !dbg !6552
  %tobool11 = icmp ne i32 %call10, 0, !dbg !6554
  br i1 %tobool11, label %for.body, label %for.end, !dbg !6554

for.body:                                         ; preds = %cond.end8
  %call12 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6555
  %tobool13 = icmp ne i8 %call12, 0, !dbg !6555
  br i1 %tobool13, label %if.then, label %if.end, !dbg !6558

if.then:                                          ; preds = %for.body
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6559
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)), !dbg !6561
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6562
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6563
  call void @print_gimple_stmt(%struct._IO_FILE* %11, %union.gimple_statement_d* %12, i32 0, i32 2), !dbg !6564
  br label %if.end, !dbg !6565

if.end:                                           ; preds = %if.then, %for.body
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6566
  %call15 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %13), !dbg !6567
  store %union.tree_node* %call15, %union.tree_node** %lhs, align 8, !dbg !6568
  %14 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6569
  %cmp = icmp eq %union.tree_node* %14, null, !dbg !6571
  br i1 %cmp, label %if.then16, label %if.end22, !dbg !6572

if.then16:                                        ; preds = %if.end
  %call17 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6573
  %tobool18 = icmp ne i8 %call17, 0, !dbg !6573
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !6576

if.then19:                                        ; preds = %if.then16
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6577
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.29, i64 0, i64 0)), !dbg !6579
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6580
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6581
  call void @print_gimple_stmt(%struct._IO_FILE* %16, %union.gimple_statement_d* %17, i32 0, i32 2), !dbg !6582
  br label %if.end21, !dbg !6583

if.end21:                                         ; preds = %if.then19, %if.then16
  store i8 0, i8* %retval, align 1, !dbg !6584
  br label %return, !dbg !6584

if.end22:                                         ; preds = %if.end
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6585
  %call23 = call %union.tree_node* @vect_get_smallest_scalar_type(%union.gimple_statement_d* %18, i64* %dummy, i64* %dummy), !dbg !6586
  store %union.tree_node* %call23, %union.tree_node** %scalar_type, align 8, !dbg !6587
  %19 = load %union.tree_node*, %union.tree_node** %scalar_type, align 8, !dbg !6588
  %call24 = call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %19), !dbg !6589
  store %union.tree_node* %call24, %union.tree_node** %vectype, align 8, !dbg !6590
  %20 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6591
  %tobool25 = icmp ne %union.tree_node* %20, null, !dbg !6591
  br i1 %tobool25, label %if.end32, label %if.then26, !dbg !6593

if.then26:                                        ; preds = %if.end22
  %call27 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6594
  %tobool28 = icmp ne i8 %call27, 0, !dbg !6594
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !6597

if.then29:                                        ; preds = %if.then26
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6598
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.25, i64 0, i64 0)), !dbg !6600
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6601
  %23 = load %union.tree_node*, %union.tree_node** %scalar_type, align 8, !dbg !6602
  call void @print_generic_expr(%struct._IO_FILE* %22, %union.tree_node* %23, i32 2), !dbg !6603
  br label %if.end31, !dbg !6604

if.end31:                                         ; preds = %if.then29, %if.then26
  store i8 0, i8* %retval, align 1, !dbg !6605
  br label %return, !dbg !6605

if.end32:                                         ; preds = %if.end22
  %24 = load i32, i32* %vectorization_factor.addr, align 4, !dbg !6606
  %conv = zext i32 %24 to i64, !dbg !6606
  %25 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6607
  %type = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !6607
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !6607
  %bf.load = load i32, i32* %precision, align 4, !dbg !6607
  %bf.clear = and i32 %bf.load, 1023, !dbg !6607
  %sh_prom = zext i32 %bf.clear to i64, !dbg !6607
  %shl = shl i64 1, %sh_prom, !dbg !6607
  %div = udiv i64 %conv, %shl, !dbg !6608
  %conv33 = trunc i64 %div to i32, !dbg !6606
  store i32 %conv33, i32* %ncopies, align 4, !dbg !6609
  %26 = load i32, i32* %ncopies, align 4, !dbg !6610
  %cmp34 = icmp ne i32 %26, 1, !dbg !6612
  br i1 %cmp34, label %if.then36, label %if.end45, !dbg !6613

if.then36:                                        ; preds = %if.end32
  %call37 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6614
  %tobool38 = icmp ne i8 %call37, 0, !dbg !6614
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !6617

if.then39:                                        ; preds = %if.then36
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6618
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.30, i64 0, i64 0)), !dbg !6619
  br label %if.end41, !dbg !6619

if.end41:                                         ; preds = %if.then39, %if.then36
  %28 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !6620
  %tobool42 = icmp ne %struct._bb_vec_info* %28, null, !dbg !6620
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !6622

if.then43:                                        ; preds = %if.end41
  store i8 0, i8* %retval, align 1, !dbg !6623
  br label %return, !dbg !6623

if.end44:                                         ; preds = %if.end41
  br label %if.end45, !dbg !6624

if.end45:                                         ; preds = %if.end44, %if.end32
  %29 = load i32*, i32** %max_nunits.addr, align 8, !dbg !6625
  %30 = load i32, i32* %29, align 4, !dbg !6627
  %conv46 = zext i32 %30 to i64, !dbg !6627
  %31 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6628
  %type47 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !6628
  %precision48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 6, !dbg !6628
  %bf.load49 = load i32, i32* %precision48, align 4, !dbg !6628
  %bf.clear50 = and i32 %bf.load49, 1023, !dbg !6628
  %sh_prom51 = zext i32 %bf.clear50 to i64, !dbg !6628
  %shl52 = shl i64 1, %sh_prom51, !dbg !6628
  %cmp53 = icmp ult i64 %conv46, %shl52, !dbg !6629
  br i1 %cmp53, label %if.then55, label %if.end63, !dbg !6630

if.then55:                                        ; preds = %if.end45
  %32 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6631
  %type56 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !6631
  %precision57 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 6, !dbg !6631
  %bf.load58 = load i32, i32* %precision57, align 4, !dbg !6631
  %bf.clear59 = and i32 %bf.load58, 1023, !dbg !6631
  %sh_prom60 = zext i32 %bf.clear59 to i64, !dbg !6631
  %shl61 = shl i64 1, %sh_prom60, !dbg !6631
  %conv62 = trunc i64 %shl61 to i32, !dbg !6631
  %33 = load i32*, i32** %max_nunits.addr, align 8, !dbg !6632
  store i32 %conv62, i32* %33, align 4, !dbg !6633
  br label %if.end63, !dbg !6634

if.end63:                                         ; preds = %if.then55, %if.end45
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6635
  %call64 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %34), !dbg !6637
  %tobool65 = icmp ne i8 %call64, 0, !dbg !6637
  br i1 %tobool65, label %if.then66, label %if.else, !dbg !6638

if.then66:                                        ; preds = %if.end63
  store i32 59, i32* %rhs_code, align 4, !dbg !6639
  br label %if.end68, !dbg !6640

if.else:                                          ; preds = %if.end63
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6641
  %call67 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %35), !dbg !6642
  store i32 %call67, i32* %rhs_code, align 4, !dbg !6643
  br label %if.end68

if.end68:                                         ; preds = %if.else, %if.then66
  %36 = load i32, i32* %i, align 4, !dbg !6644
  %cmp69 = icmp eq i32 %36, 0, !dbg !6646
  br i1 %cmp69, label %if.then71, label %if.else170, !dbg !6647

if.then71:                                        ; preds = %if.end68
  %37 = load i32, i32* %rhs_code, align 4, !dbg !6648
  store i32 %37, i32* %first_stmt_code, align 4, !dbg !6650
  %38 = load i32, i32* %rhs_code, align 4, !dbg !6651
  %cmp72 = icmp eq i32 %38, 83, !dbg !6653
  br i1 %cmp72, label %if.then82, label %lor.lhs.false, !dbg !6654

lor.lhs.false:                                    ; preds = %if.then71
  %39 = load i32, i32* %rhs_code, align 4, !dbg !6655
  %cmp74 = icmp eq i32 %39, 84, !dbg !6656
  br i1 %cmp74, label %if.then82, label %lor.lhs.false76, !dbg !6657

lor.lhs.false76:                                  ; preds = %lor.lhs.false
  %40 = load i32, i32* %rhs_code, align 4, !dbg !6658
  %cmp77 = icmp eq i32 %40, 85, !dbg !6659
  br i1 %cmp77, label %if.then82, label %lor.lhs.false79, !dbg !6660

lor.lhs.false79:                                  ; preds = %lor.lhs.false76
  %41 = load i32, i32* %rhs_code, align 4, !dbg !6661
  %cmp80 = icmp eq i32 %41, 86, !dbg !6662
  br i1 %cmp80, label %if.then82, label %if.end169, !dbg !6663

if.then82:                                        ; preds = %lor.lhs.false79, %lor.lhs.false76, %lor.lhs.false, %if.then71
  %42 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6664
  %base83 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !6664
  %43 = bitcast %struct.tree_base* %base83 to i64*, !dbg !6664
  %bf.load84 = load i64, i64* %43, align 8, !dbg !6664
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !6664
  %bf.cast = trunc i64 %bf.clear85 to i32, !dbg !6664
  %cmp86 = icmp eq i32 %bf.cast, 14, !dbg !6664
  br i1 %cmp86, label %cond.true88, label %cond.false90, !dbg !6664

cond.true88:                                      ; preds = %if.then82
  %44 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6664
  %call89 = call i32 @vector_type_mode(%union.tree_node* %44), !dbg !6664
  br label %cond.end94, !dbg !6664

cond.false90:                                     ; preds = %if.then82
  %45 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6664
  %type91 = bitcast %union.tree_node* %45 to %struct.tree_type*, !dbg !6664
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 6, !dbg !6664
  %bf.load92 = load i32, i32* %mode, align 4, !dbg !6664
  %bf.lshr = lshr i32 %bf.load92, 16, !dbg !6664
  %bf.clear93 = and i32 %bf.lshr, 255, !dbg !6664
  br label %cond.end94, !dbg !6664

cond.end94:                                       ; preds = %cond.false90, %cond.true88
  %cond95 = phi i32 [ %call89, %cond.true88 ], [ %bf.clear93, %cond.false90 ], !dbg !6664
  store i32 %cond95, i32* %vec_mode, align 4, !dbg !6666
  %46 = load i32, i32* %rhs_code, align 4, !dbg !6667
  %47 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6668
  %call96 = call %struct.optab_d* @optab_for_tree_code(i32 %46, %union.tree_node* %47, i32 2), !dbg !6669
  store %struct.optab_d* %call96, %struct.optab_d** %optab, align 8, !dbg !6670
  %48 = load %struct.optab_d*, %struct.optab_d** %optab, align 8, !dbg !6671
  %tobool97 = icmp ne %struct.optab_d* %48, null, !dbg !6671
  br i1 %tobool97, label %lor.lhs.false98, label %if.then101, !dbg !6673

lor.lhs.false98:                                  ; preds = %cond.end94
  %49 = load %struct.optab_d*, %struct.optab_d** %optab, align 8, !dbg !6674
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %49, i32 0, i32 4, !dbg !6675
  %50 = load i32, i32* %vec_mode, align 4, !dbg !6676
  %idxprom = sext i32 %50 to i64, !dbg !6674
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom, !dbg !6674
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !6677
  %51 = load i32, i32* %insn_code, align 4, !dbg !6677
  %cmp99 = icmp eq i32 %51, 2956, !dbg !6678
  br i1 %cmp99, label %if.then101, label %if.end168, !dbg !6679

if.then101:                                       ; preds = %lor.lhs.false98, %cond.end94
  %52 = load i32, i32* %rhs_code, align 4, !dbg !6680
  %53 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !6682
  %call102 = call %struct.optab_d* @optab_for_tree_code(i32 %52, %union.tree_node* %53, i32 1), !dbg !6683
  store %struct.optab_d* %call102, %struct.optab_d** %optab, align 8, !dbg !6684
  %54 = load %struct.optab_d*, %struct.optab_d** %optab, align 8, !dbg !6685
  %tobool103 = icmp ne %struct.optab_d* %54, null, !dbg !6685
  br i1 %tobool103, label %if.end110, label %if.then104, !dbg !6687

if.then104:                                       ; preds = %if.then101
  %call105 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6688
  %tobool106 = icmp ne i8 %call105, 0, !dbg !6688
  br i1 %tobool106, label %if.then107, label %if.end109, !dbg !6691

if.then107:                                       ; preds = %if.then104
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6692
  %call108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.31, i64 0, i64 0)), !dbg !6693
  br label %if.end109, !dbg !6693

if.end109:                                        ; preds = %if.then107, %if.then104
  store i8 0, i8* %retval, align 1, !dbg !6694
  br label %return, !dbg !6694

if.end110:                                        ; preds = %if.then101
  %56 = load %struct.optab_d*, %struct.optab_d** %optab, align 8, !dbg !6695
  %handlers111 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %56, i32 0, i32 4, !dbg !6696
  %57 = load i32, i32* %vec_mode, align 4, !dbg !6697
  %idxprom112 = sext i32 %57 to i64, !dbg !6695
  %arrayidx113 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers111, i64 0, i64 %idxprom112, !dbg !6695
  %insn_code114 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx113, i32 0, i32 0, !dbg !6698
  %58 = load i32, i32* %insn_code114, align 4, !dbg !6698
  store i32 %58, i32* %icode, align 4, !dbg !6699
  %59 = load i32, i32* %icode, align 4, !dbg !6700
  %cmp115 = icmp eq i32 %59, 2956, !dbg !6702
  br i1 %cmp115, label %if.then117, label %if.end123, !dbg !6703

if.then117:                                       ; preds = %if.end110
  %call118 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6704
  %tobool119 = icmp ne i8 %call118, 0, !dbg !6704
  br i1 %tobool119, label %if.then120, label %if.end122, !dbg !6707

if.then120:                                       ; preds = %if.then117
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6708
  %call121 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.32, i64 0, i64 0)), !dbg !6709
  br label %if.end122, !dbg !6709

if.end122:                                        ; preds = %if.then120, %if.then117
  store i8 0, i8* %retval, align 1, !dbg !6710
  br label %return, !dbg !6710

if.end123:                                        ; preds = %if.end110
  %61 = load i32, i32* %icode, align 4, !dbg !6711
  %idxprom124 = sext i32 %61 to i64, !dbg !6712
  %arrayidx125 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom124, !dbg !6712
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx125, i32 0, i32 3, !dbg !6713
  %62 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !6713
  %arrayidx126 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %62, i64 2, !dbg !6712
  %mode127 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx126, i32 0, i32 2, !dbg !6714
  %bf.load128 = load i16, i16* %mode127, align 8, !dbg !6714
  %bf.cast129 = zext i16 %bf.load128 to i32, !dbg !6714
  store i32 %bf.cast129, i32* %optab_op2_mode, align 4, !dbg !6715
  %63 = load i32, i32* %optab_op2_mode, align 4, !dbg !6716
  %idxprom130 = zext i32 %63 to i64, !dbg !6716
  %arrayidx131 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom130, !dbg !6716
  %64 = load i8, i8* %arrayidx131, align 1, !dbg !6716
  %conv132 = zext i8 %64 to i32, !dbg !6716
  %cmp133 = icmp eq i32 %conv132, 12, !dbg !6716
  br i1 %cmp133, label %if.end167, label %lor.lhs.false135, !dbg !6716

lor.lhs.false135:                                 ; preds = %if.end123
  %65 = load i32, i32* %optab_op2_mode, align 4, !dbg !6716
  %idxprom136 = zext i32 %65 to i64, !dbg !6716
  %arrayidx137 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom136, !dbg !6716
  %66 = load i8, i8* %arrayidx137, align 1, !dbg !6716
  %conv138 = zext i8 %66 to i32, !dbg !6716
  %cmp139 = icmp eq i32 %conv138, 17, !dbg !6716
  br i1 %cmp139, label %if.end167, label %lor.lhs.false141, !dbg !6716

lor.lhs.false141:                                 ; preds = %lor.lhs.false135
  %67 = load i32, i32* %optab_op2_mode, align 4, !dbg !6716
  %idxprom142 = zext i32 %67 to i64, !dbg !6716
  %arrayidx143 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom142, !dbg !6716
  %68 = load i8, i8* %arrayidx143, align 1, !dbg !6716
  %conv144 = zext i8 %68 to i32, !dbg !6716
  %cmp145 = icmp eq i32 %conv144, 13, !dbg !6716
  br i1 %cmp145, label %if.end167, label %lor.lhs.false147, !dbg !6716

lor.lhs.false147:                                 ; preds = %lor.lhs.false141
  %69 = load i32, i32* %optab_op2_mode, align 4, !dbg !6716
  %idxprom148 = zext i32 %69 to i64, !dbg !6716
  %arrayidx149 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom148, !dbg !6716
  %70 = load i8, i8* %arrayidx149, align 1, !dbg !6716
  %conv150 = zext i8 %70 to i32, !dbg !6716
  %cmp151 = icmp eq i32 %conv150, 14, !dbg !6716
  br i1 %cmp151, label %if.end167, label %lor.lhs.false153, !dbg !6716

lor.lhs.false153:                                 ; preds = %lor.lhs.false147
  %71 = load i32, i32* %optab_op2_mode, align 4, !dbg !6716
  %idxprom154 = zext i32 %71 to i64, !dbg !6716
  %arrayidx155 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom154, !dbg !6716
  %72 = load i8, i8* %arrayidx155, align 1, !dbg !6716
  %conv156 = zext i8 %72 to i32, !dbg !6716
  %cmp157 = icmp eq i32 %conv156, 15, !dbg !6716
  br i1 %cmp157, label %if.end167, label %lor.lhs.false159, !dbg !6716

lor.lhs.false159:                                 ; preds = %lor.lhs.false153
  %73 = load i32, i32* %optab_op2_mode, align 4, !dbg !6716
  %idxprom160 = zext i32 %73 to i64, !dbg !6716
  %arrayidx161 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom160, !dbg !6716
  %74 = load i8, i8* %arrayidx161, align 1, !dbg !6716
  %conv162 = zext i8 %74 to i32, !dbg !6716
  %cmp163 = icmp eq i32 %conv162, 16, !dbg !6716
  br i1 %cmp163, label %if.end167, label %if.then165, !dbg !6718

if.then165:                                       ; preds = %lor.lhs.false159
  store i8 1, i8* %need_same_oprnds, align 1, !dbg !6719
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6721
  %call166 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %75), !dbg !6722
  store %union.tree_node* %call166, %union.tree_node** %first_op1, align 8, !dbg !6723
  br label %if.end167, !dbg !6724

if.end167:                                        ; preds = %if.then165, %lor.lhs.false159, %lor.lhs.false153, %lor.lhs.false147, %lor.lhs.false141, %lor.lhs.false135, %if.end123
  br label %if.end168, !dbg !6725

if.end168:                                        ; preds = %if.end167, %lor.lhs.false98
  br label %if.end169, !dbg !6726

if.end169:                                        ; preds = %if.end168, %lor.lhs.false79
  br label %if.end204, !dbg !6727

if.else170:                                       ; preds = %if.end68
  %76 = load i32, i32* %first_stmt_code, align 4, !dbg !6728
  %77 = load i32, i32* %rhs_code, align 4, !dbg !6731
  %cmp171 = icmp ne i32 %76, %77, !dbg !6732
  br i1 %cmp171, label %land.lhs.true, label %if.end190, !dbg !6733

land.lhs.true:                                    ; preds = %if.else170
  %78 = load i32, i32* %first_stmt_code, align 4, !dbg !6734
  %cmp173 = icmp ne i32 %78, 44, !dbg !6735
  br i1 %cmp173, label %land.lhs.true178, label %lor.lhs.false175, !dbg !6736

lor.lhs.false175:                                 ; preds = %land.lhs.true
  %79 = load i32, i32* %rhs_code, align 4, !dbg !6737
  %cmp176 = icmp ne i32 %79, 43, !dbg !6738
  br i1 %cmp176, label %land.lhs.true178, label %if.end190, !dbg !6739

land.lhs.true178:                                 ; preds = %lor.lhs.false175, %land.lhs.true
  %80 = load i32, i32* %first_stmt_code, align 4, !dbg !6740
  %cmp179 = icmp ne i32 %80, 43, !dbg !6741
  br i1 %cmp179, label %if.then184, label %lor.lhs.false181, !dbg !6742

lor.lhs.false181:                                 ; preds = %land.lhs.true178
  %81 = load i32, i32* %rhs_code, align 4, !dbg !6743
  %cmp182 = icmp ne i32 %81, 44, !dbg !6744
  br i1 %cmp182, label %if.then184, label %if.end190, !dbg !6745

if.then184:                                       ; preds = %lor.lhs.false181, %land.lhs.true178
  %call185 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6746
  %tobool186 = icmp ne i8 %call185, 0, !dbg !6746
  br i1 %tobool186, label %if.then187, label %if.end189, !dbg !6749

if.then187:                                       ; preds = %if.then184
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6750
  %call188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.33, i64 0, i64 0)), !dbg !6752
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6753
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6754
  call void @print_gimple_stmt(%struct._IO_FILE* %83, %union.gimple_statement_d* %84, i32 0, i32 2), !dbg !6755
  br label %if.end189, !dbg !6756

if.end189:                                        ; preds = %if.then187, %if.then184
  store i8 0, i8* %retval, align 1, !dbg !6757
  br label %return, !dbg !6757

if.end190:                                        ; preds = %lor.lhs.false181, %lor.lhs.false175, %if.else170
  %85 = load i8, i8* %need_same_oprnds, align 1, !dbg !6758
  %conv191 = zext i8 %85 to i32, !dbg !6758
  %tobool192 = icmp ne i32 %conv191, 0, !dbg !6758
  br i1 %tobool192, label %land.lhs.true193, label %if.end203, !dbg !6760

land.lhs.true193:                                 ; preds = %if.end190
  %86 = load %union.tree_node*, %union.tree_node** %first_op1, align 8, !dbg !6761
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6762
  %call194 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %87), !dbg !6763
  %call195 = call i32 @operand_equal_p(%union.tree_node* %86, %union.tree_node* %call194, i32 0), !dbg !6764
  %tobool196 = icmp ne i32 %call195, 0, !dbg !6764
  br i1 %tobool196, label %if.end203, label %if.then197, !dbg !6765

if.then197:                                       ; preds = %land.lhs.true193
  %call198 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6766
  %tobool199 = icmp ne i8 %call198, 0, !dbg !6766
  br i1 %tobool199, label %if.then200, label %if.end202, !dbg !6769

if.then200:                                       ; preds = %if.then197
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6770
  %call201 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.34, i64 0, i64 0)), !dbg !6772
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6773
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6774
  call void @print_gimple_stmt(%struct._IO_FILE* %89, %union.gimple_statement_d* %90, i32 0, i32 2), !dbg !6775
  br label %if.end202, !dbg !6776

if.end202:                                        ; preds = %if.then200, %if.then197
  store i8 0, i8* %retval, align 1, !dbg !6777
  br label %return, !dbg !6777

if.end203:                                        ; preds = %land.lhs.true193, %if.end190
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %if.end169
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6778
  %call205 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %91), !dbg !6778
  %first_dr206 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call205, i32 0, i32 17, !dbg !6778
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr206, align 8, !dbg !6778
  %cmp207 = icmp ne %union.gimple_statement_d* %92, null, !dbg !6778
  br i1 %cmp207, label %if.then209, label %if.else284, !dbg !6780

if.then209:                                       ; preds = %if.end204
  %93 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6781
  %base210 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !6781
  %94 = bitcast %struct.tree_base* %base210 to i64*, !dbg !6781
  %bf.load211 = load i64, i64* %94, align 8, !dbg !6781
  %bf.clear212 = and i64 %bf.load211, 65535, !dbg !6781
  %bf.cast213 = trunc i64 %bf.clear212 to i32, !dbg !6781
  %idxprom214 = sext i32 %bf.cast213 to i64, !dbg !6781
  %arrayidx215 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom214, !dbg !6781
  %95 = load i32, i32* %arrayidx215, align 4, !dbg !6781
  %cmp216 = icmp eq i32 %95, 4, !dbg !6781
  br i1 %cmp216, label %if.then218, label %if.else223, !dbg !6784

if.then218:                                       ; preds = %if.then209
  %96 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !6785
  %97 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !6788
  %98 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !6789
  %99 = load %struct._slp_tree*, %struct._slp_tree** %98, align 8, !dbg !6790
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6791
  %101 = load i32, i32* %ncopies_for_cost.addr, align 4, !dbg !6792
  %call219 = call zeroext i8 @vect_get_and_check_slp_defs(%struct._loop_vec_info* %96, %struct._bb_vec_info* %97, %struct._slp_tree* %99, %union.gimple_statement_d* %100, %struct.VEC_gimple_heap** %def_stmts0, %struct.VEC_gimple_heap** %def_stmts1, i32* %first_stmt_dt0, i32* %first_stmt_dt1, %union.tree_node** %first_stmt_def0_type, %union.tree_node** %first_stmt_def1_type, %union.tree_node** %first_stmt_const_oprnd, i32 %101, i8* %pattern0, i8* %pattern1), !dbg !6793
  %tobool220 = icmp ne i8 %call219, 0, !dbg !6793
  br i1 %tobool220, label %if.end222, label %if.then221, !dbg !6794

if.then221:                                       ; preds = %if.then218
  store i8 0, i8* %retval, align 1, !dbg !6795
  br label %return, !dbg !6795

if.end222:                                        ; preds = %if.then218
  br label %if.end283, !dbg !6796

if.else223:                                       ; preds = %if.then209
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6797
  %call224 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %102), !dbg !6797
  %first_dr225 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call224, i32 0, i32 17, !dbg !6797
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr225, align 8, !dbg !6797
  %104 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6800
  %cmp226 = icmp eq %union.gimple_statement_d* %103, %104, !dbg !6801
  br i1 %cmp226, label %land.lhs.true228, label %lor.lhs.false232, !dbg !6802

land.lhs.true228:                                 ; preds = %if.else223
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6803
  %call229 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %105), !dbg !6803
  %gap = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call229, i32 0, i32 21, !dbg !6803
  %106 = load i32, i32* %gap, align 8, !dbg !6803
  %cmp230 = icmp ne i32 %106, 0, !dbg !6804
  br i1 %cmp230, label %if.then242, label %lor.lhs.false232, !dbg !6805

lor.lhs.false232:                                 ; preds = %land.lhs.true228, %if.else223
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6806
  %call233 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %107), !dbg !6806
  %first_dr234 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call233, i32 0, i32 17, !dbg !6806
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr234, align 8, !dbg !6806
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6807
  %cmp235 = icmp ne %union.gimple_statement_d* %108, %109, !dbg !6808
  br i1 %cmp235, label %land.lhs.true237, label %if.end248, !dbg !6809

land.lhs.true237:                                 ; preds = %lor.lhs.false232
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6810
  %call238 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %110), !dbg !6810
  %gap239 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call238, i32 0, i32 21, !dbg !6810
  %111 = load i32, i32* %gap239, align 8, !dbg !6810
  %cmp240 = icmp ne i32 %111, 1, !dbg !6811
  br i1 %cmp240, label %if.then242, label %if.end248, !dbg !6812

if.then242:                                       ; preds = %land.lhs.true237, %land.lhs.true228
  %call243 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6813
  %tobool244 = icmp ne i8 %call243, 0, !dbg !6813
  br i1 %tobool244, label %if.then245, label %if.end247, !dbg !6816

if.then245:                                       ; preds = %if.then242
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6817
  %call246 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.35, i64 0, i64 0)), !dbg !6819
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6820
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6821
  call void @print_gimple_stmt(%struct._IO_FILE* %113, %union.gimple_statement_d* %114, i32 0, i32 2), !dbg !6822
  br label %if.end247, !dbg !6823

if.end247:                                        ; preds = %if.then245, %if.then242
  store i8 0, i8* %retval, align 1, !dbg !6824
  br label %return, !dbg !6824

if.end248:                                        ; preds = %land.lhs.true237, %lor.lhs.false232
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6825
  %call249 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %115), !dbg !6825
  %size = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call249, i32 0, i32 19, !dbg !6825
  %116 = load i32, i32* %size, align 8, !dbg !6825
  %117 = load i32, i32* %ncopies, align 4, !dbg !6827
  %118 = load i32, i32* %group_size.addr, align 4, !dbg !6828
  %mul = mul i32 %117, %118, !dbg !6829
  %cmp250 = icmp ugt i32 %116, %mul, !dbg !6830
  br i1 %cmp250, label %if.then252, label %if.end258, !dbg !6831

if.then252:                                       ; preds = %if.end248
  %call253 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6832
  %tobool254 = icmp ne i8 %call253, 0, !dbg !6832
  br i1 %tobool254, label %if.then255, label %if.end257, !dbg !6835

if.then255:                                       ; preds = %if.then252
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6836
  %call256 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %119, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.36, i64 0, i64 0)), !dbg !6838
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6839
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6840
  call void @print_gimple_stmt(%struct._IO_FILE* %120, %union.gimple_statement_d* %121, i32 0, i32 2), !dbg !6841
  br label %if.end257, !dbg !6842

if.end257:                                        ; preds = %if.then255, %if.then252
  store i8 0, i8* %retval, align 1, !dbg !6843
  br label %return, !dbg !6843

if.end258:                                        ; preds = %if.end248
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6844
  %call259 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %122), !dbg !6844
  %first_dr260 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call259, i32 0, i32 17, !dbg !6844
  %123 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr260, align 8, !dbg !6844
  store %union.gimple_statement_d* %123, %union.gimple_statement_d** %first_load, align 8, !dbg !6845
  %124 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load, align 8, !dbg !6846
  %125 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6848
  %cmp261 = icmp eq %union.gimple_statement_d* %124, %125, !dbg !6849
  br i1 %cmp261, label %if.then263, label %if.end276, !dbg !6850

if.then263:                                       ; preds = %if.end258
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6851
  %call264 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %126), !dbg !6851
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call264, i32 0, i32 7, !dbg !6851
  %127 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !6851
  store %struct.data_reference* %127, %struct.data_reference** %first_dr, align 8, !dbg !6853
  %128 = load %struct.data_reference*, %struct.data_reference** %first_dr, align 8, !dbg !6854
  %call265 = call i32 @vect_supportable_dr_alignment(%struct.data_reference* %128), !dbg !6856
  %cmp266 = icmp eq i32 %call265, 0, !dbg !6857
  br i1 %cmp266, label %if.then268, label %if.end274, !dbg !6858

if.then268:                                       ; preds = %if.then263
  %call269 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6859
  %tobool270 = icmp ne i8 %call269, 0, !dbg !6859
  br i1 %tobool270, label %if.then271, label %if.end273, !dbg !6862

if.then271:                                       ; preds = %if.then268
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6863
  %call272 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %129, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.37, i64 0, i64 0)), !dbg !6865
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6866
  %131 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6867
  call void @print_gimple_stmt(%struct._IO_FILE* %130, %union.gimple_statement_d* %131, i32 0, i32 2), !dbg !6868
  br label %if.end273, !dbg !6869

if.end273:                                        ; preds = %if.then271, %if.then268
  store i8 0, i8* %retval, align 1, !dbg !6870
  br label %return, !dbg !6870

if.end274:                                        ; preds = %if.then263
  %132 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6871
  %call275 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %132), !dbg !6872
  %133 = load i32, i32* %ncopies_for_cost.addr, align 4, !dbg !6873
  %134 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !6874
  %135 = load %struct._slp_tree*, %struct._slp_tree** %134, align 8, !dbg !6875
  call void @vect_model_load_cost(%struct._stmt_vec_info* %call275, i32 %133, %struct._slp_tree* %135), !dbg !6876
  br label %if.end276, !dbg !6877

if.end276:                                        ; preds = %if.end274, %if.end258
  %136 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6878
  %137 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load, align 8, !dbg !6879
  %call277 = call i32 @vect_get_place_in_interleaving_chain(%union.gimple_statement_d* %136, %union.gimple_statement_d* %137), !dbg !6880
  store i32 %call277, i32* %load_place, align 4, !dbg !6881
  %138 = load i32, i32* %load_place, align 4, !dbg !6882
  %139 = load i32, i32* %i, align 4, !dbg !6884
  %cmp278 = icmp ne i32 %138, %139, !dbg !6885
  br i1 %cmp278, label %if.then280, label %if.end281, !dbg !6886

if.then280:                                       ; preds = %if.end276
  store i8 1, i8* %permutation, align 1, !dbg !6887
  br label %if.end281, !dbg !6888

if.end281:                                        ; preds = %if.then280, %if.end276
  %140 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %load_permutation.addr, align 8, !dbg !6889
  %141 = load i32, i32* %load_place, align 4, !dbg !6889
  %call282 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %140, i32 %141), !dbg !6889
  store i8 1, i8* %stop_recursion, align 1, !dbg !6890
  br label %for.inc, !dbg !6891

if.end283:                                        ; preds = %if.end222
  br label %if.end317, !dbg !6892

if.else284:                                       ; preds = %if.end204
  %142 = load i32, i32* %rhs_code, align 4, !dbg !6893
  %idxprom285 = sext i32 %142 to i64, !dbg !6893
  %arrayidx286 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom285, !dbg !6893
  %143 = load i32, i32* %arrayidx286, align 4, !dbg !6893
  %cmp287 = icmp eq i32 %143, 4, !dbg !6896
  br i1 %cmp287, label %if.then289, label %if.end295, !dbg !6897

if.then289:                                       ; preds = %if.else284
  %call290 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6898
  %tobool291 = icmp ne i8 %call290, 0, !dbg !6898
  br i1 %tobool291, label %if.then292, label %if.end294, !dbg !6901

if.then292:                                       ; preds = %if.then289
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6902
  %call293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.38, i64 0, i64 0)), !dbg !6904
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6905
  %146 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6906
  call void @print_gimple_stmt(%struct._IO_FILE* %145, %union.gimple_statement_d* %146, i32 0, i32 2), !dbg !6907
  br label %if.end294, !dbg !6908

if.end294:                                        ; preds = %if.then292, %if.then289
  store i8 0, i8* %retval, align 1, !dbg !6909
  br label %return, !dbg !6909

if.end295:                                        ; preds = %if.else284
  %147 = load i32, i32* %rhs_code, align 4, !dbg !6910
  %idxprom296 = sext i32 %147 to i64, !dbg !6910
  %arrayidx297 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom296, !dbg !6910
  %148 = load i32, i32* %arrayidx297, align 4, !dbg !6910
  %cmp298 = icmp ne i32 %148, 7, !dbg !6912
  br i1 %cmp298, label %land.lhs.true300, label %if.end312, !dbg !6913

land.lhs.true300:                                 ; preds = %if.end295
  %149 = load i32, i32* %rhs_code, align 4, !dbg !6914
  %idxprom301 = sext i32 %149 to i64, !dbg !6914
  %arrayidx302 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom301, !dbg !6914
  %150 = load i32, i32* %arrayidx302, align 4, !dbg !6914
  %cmp303 = icmp ne i32 %150, 6, !dbg !6915
  br i1 %cmp303, label %if.then305, label %if.end312, !dbg !6916

if.then305:                                       ; preds = %land.lhs.true300
  %call306 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !6917
  %tobool307 = icmp ne i8 %call306, 0, !dbg !6917
  br i1 %tobool307, label %if.then308, label %if.end311, !dbg !6920

if.then308:                                       ; preds = %if.then305
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6921
  %call309 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0)), !dbg !6923
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6924
  %call310 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %152, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.40, i64 0, i64 0)), !dbg !6925
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6926
  %154 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6927
  call void @print_gimple_stmt(%struct._IO_FILE* %153, %union.gimple_statement_d* %154, i32 0, i32 2), !dbg !6928
  br label %if.end311, !dbg !6929

if.end311:                                        ; preds = %if.then308, %if.then305
  store i8 0, i8* %retval, align 1, !dbg !6930
  br label %return, !dbg !6930

if.end312:                                        ; preds = %land.lhs.true300, %if.end295
  %155 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !6931
  %156 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !6933
  %157 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !6934
  %158 = load %struct._slp_tree*, %struct._slp_tree** %157, align 8, !dbg !6935
  %159 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6936
  %160 = load i32, i32* %ncopies_for_cost.addr, align 4, !dbg !6937
  %call313 = call zeroext i8 @vect_get_and_check_slp_defs(%struct._loop_vec_info* %155, %struct._bb_vec_info* %156, %struct._slp_tree* %158, %union.gimple_statement_d* %159, %struct.VEC_gimple_heap** %def_stmts0, %struct.VEC_gimple_heap** %def_stmts1, i32* %first_stmt_dt0, i32* %first_stmt_dt1, %union.tree_node** %first_stmt_def0_type, %union.tree_node** %first_stmt_def1_type, %union.tree_node** %first_stmt_const_oprnd, i32 %160, i8* %pattern0, i8* %pattern1), !dbg !6938
  %tobool314 = icmp ne i8 %call313, 0, !dbg !6938
  br i1 %tobool314, label %if.end316, label %if.then315, !dbg !6939

if.then315:                                       ; preds = %if.end312
  store i8 0, i8* %retval, align 1, !dbg !6940
  br label %return, !dbg !6940

if.end316:                                        ; preds = %if.end312
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %if.end283
  br label %for.inc, !dbg !6941

for.inc:                                          ; preds = %if.end317, %if.end281
  %161 = load i32, i32* %i, align 4, !dbg !6942
  %inc = add i32 %161, 1, !dbg !6942
  store i32 %inc, i32* %i, align 4, !dbg !6942
  br label %for.cond, !dbg !6943, !llvm.loop !6944

for.end:                                          ; preds = %cond.end8
  %162 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !6946
  %163 = load %struct._slp_tree*, %struct._slp_tree** %162, align 8, !dbg !6946
  %cost = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %163, i32 0, i32 5, !dbg !6946
  %inside_of_loop = getelementptr inbounds %struct.anon, %struct.anon* %cost, i32 0, i32 1, !dbg !6946
  %164 = load i32, i32* %inside_of_loop, align 4, !dbg !6946
  %165 = load i32*, i32** %inside_cost.addr, align 8, !dbg !6947
  %166 = load i32, i32* %165, align 4, !dbg !6948
  %add = add nsw i32 %166, %164, !dbg !6948
  store i32 %add, i32* %165, align 4, !dbg !6948
  %167 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !6949
  %168 = load %struct._slp_tree*, %struct._slp_tree** %167, align 8, !dbg !6949
  %cost318 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %168, i32 0, i32 5, !dbg !6949
  %outside_of_loop = getelementptr inbounds %struct.anon, %struct.anon* %cost318, i32 0, i32 0, !dbg !6949
  %169 = load i32, i32* %outside_of_loop, align 4, !dbg !6949
  %170 = load i32*, i32** %outside_cost.addr, align 8, !dbg !6950
  %171 = load i32, i32* %170, align 4, !dbg !6951
  %add319 = add nsw i32 %171, %169, !dbg !6951
  store i32 %add319, i32* %170, align 4, !dbg !6951
  %172 = load i8, i8* %stop_recursion, align 1, !dbg !6952
  %tobool320 = icmp ne i8 %172, 0, !dbg !6952
  br i1 %tobool320, label %if.then321, label %if.end328, !dbg !6954

if.then321:                                       ; preds = %for.end
  %173 = load i8, i8* %permutation, align 1, !dbg !6955
  %tobool322 = icmp ne i8 %173, 0, !dbg !6955
  br i1 %tobool322, label %if.then323, label %if.end327, !dbg !6958

if.then323:                                       ; preds = %if.then321
  %174 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %loads.addr, align 8, !dbg !6959
  %175 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !6959
  %176 = load %struct._slp_tree*, %struct._slp_tree** %175, align 8, !dbg !6959
  %call324 = call %struct._slp_tree** @VEC_slp_tree_heap_safe_push(%struct.VEC_slp_tree_heap** %174, %struct._slp_tree* %176), !dbg !6959
  %177 = load i32, i32* %group_size.addr, align 4, !dbg !6961
  %mul325 = mul i32 1, %177, !dbg !6962
  %178 = load i32*, i32** %inside_cost.addr, align 8, !dbg !6963
  %179 = load i32, i32* %178, align 4, !dbg !6964
  %add326 = add i32 %179, %mul325, !dbg !6964
  store i32 %add326, i32* %178, align 4, !dbg !6964
  br label %if.end327, !dbg !6965

if.end327:                                        ; preds = %if.then323, %if.then321
  store i8 1, i8* %retval, align 1, !dbg !6966
  br label %return, !dbg !6966

if.end328:                                        ; preds = %for.end
  %180 = load i32, i32* %first_stmt_dt0, align 4, !dbg !6967
  %cmp329 = icmp eq i32 %180, 3, !dbg !6969
  br i1 %cmp329, label %if.then331, label %if.end343, !dbg !6970

if.then331:                                       ; preds = %if.end328
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %left_node, metadata !6971, metadata !DIExpression()), !dbg !6973
  %call332 = call i8* @xmalloc(i64 48), !dbg !6974
  %181 = bitcast i8* %call332 to %struct._slp_tree*, !dbg !6974
  store %struct._slp_tree* %181, %struct._slp_tree** %left_node, align 8, !dbg !6973
  %182 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %def_stmts0, align 8, !dbg !6975
  %183 = load %struct._slp_tree*, %struct._slp_tree** %left_node, align 8, !dbg !6976
  %stmts333 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %183, i32 0, i32 2, !dbg !6976
  store %struct.VEC_gimple_heap* %182, %struct.VEC_gimple_heap** %stmts333, align 8, !dbg !6977
  %184 = load %struct._slp_tree*, %struct._slp_tree** %left_node, align 8, !dbg !6978
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %184, i32 0, i32 3, !dbg !6978
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !6979
  %185 = load %struct._slp_tree*, %struct._slp_tree** %left_node, align 8, !dbg !6980
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %185, i32 0, i32 0, !dbg !6980
  store %struct._slp_tree* null, %struct._slp_tree** %left, align 8, !dbg !6981
  %186 = load %struct._slp_tree*, %struct._slp_tree** %left_node, align 8, !dbg !6982
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %186, i32 0, i32 1, !dbg !6982
  store %struct._slp_tree* null, %struct._slp_tree** %right, align 8, !dbg !6983
  %187 = load %struct._slp_tree*, %struct._slp_tree** %left_node, align 8, !dbg !6984
  %cost334 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %187, i32 0, i32 5, !dbg !6984
  %outside_of_loop335 = getelementptr inbounds %struct.anon, %struct.anon* %cost334, i32 0, i32 0, !dbg !6984
  store i32 0, i32* %outside_of_loop335, align 4, !dbg !6985
  %188 = load %struct._slp_tree*, %struct._slp_tree** %left_node, align 8, !dbg !6986
  %cost336 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %188, i32 0, i32 5, !dbg !6986
  %inside_of_loop337 = getelementptr inbounds %struct.anon, %struct.anon* %cost336, i32 0, i32 1, !dbg !6986
  store i32 0, i32* %inside_of_loop337, align 4, !dbg !6987
  %189 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !6988
  %190 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !6990
  %191 = load i32, i32* %group_size.addr, align 4, !dbg !6991
  %192 = load i32*, i32** %inside_cost.addr, align 8, !dbg !6992
  %193 = load i32*, i32** %outside_cost.addr, align 8, !dbg !6993
  %194 = load i32, i32* %ncopies_for_cost.addr, align 4, !dbg !6994
  %195 = load i32*, i32** %max_nunits.addr, align 8, !dbg !6995
  %196 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %load_permutation.addr, align 8, !dbg !6996
  %197 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %loads.addr, align 8, !dbg !6997
  %198 = load i32, i32* %vectorization_factor.addr, align 4, !dbg !6998
  %call338 = call zeroext i8 @vect_build_slp_tree(%struct._loop_vec_info* %189, %struct._bb_vec_info* %190, %struct._slp_tree** %left_node, i32 %191, i32* %192, i32* %193, i32 %194, i32* %195, %struct.VEC_int_heap** %196, %struct.VEC_slp_tree_heap** %197, i32 %198), !dbg !6999
  %tobool339 = icmp ne i8 %call338, 0, !dbg !6999
  br i1 %tobool339, label %if.end341, label %if.then340, !dbg !7000

if.then340:                                       ; preds = %if.then331
  store i8 0, i8* %retval, align 1, !dbg !7001
  br label %return, !dbg !7001

if.end341:                                        ; preds = %if.then331
  %199 = load %struct._slp_tree*, %struct._slp_tree** %left_node, align 8, !dbg !7002
  %200 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !7003
  %201 = load %struct._slp_tree*, %struct._slp_tree** %200, align 8, !dbg !7003
  %left342 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %201, i32 0, i32 0, !dbg !7003
  store %struct._slp_tree* %199, %struct._slp_tree** %left342, align 8, !dbg !7004
  br label %if.end343, !dbg !7005

if.end343:                                        ; preds = %if.end341, %if.end328
  %202 = load i32, i32* %first_stmt_dt1, align 4, !dbg !7006
  %cmp344 = icmp eq i32 %202, 3, !dbg !7008
  br i1 %cmp344, label %if.then346, label %if.end361, !dbg !7009

if.then346:                                       ; preds = %if.end343
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %right_node, metadata !7010, metadata !DIExpression()), !dbg !7012
  %call347 = call i8* @xmalloc(i64 48), !dbg !7013
  %203 = bitcast i8* %call347 to %struct._slp_tree*, !dbg !7013
  store %struct._slp_tree* %203, %struct._slp_tree** %right_node, align 8, !dbg !7012
  %204 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %def_stmts1, align 8, !dbg !7014
  %205 = load %struct._slp_tree*, %struct._slp_tree** %right_node, align 8, !dbg !7015
  %stmts348 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %205, i32 0, i32 2, !dbg !7015
  store %struct.VEC_gimple_heap* %204, %struct.VEC_gimple_heap** %stmts348, align 8, !dbg !7016
  %206 = load %struct._slp_tree*, %struct._slp_tree** %right_node, align 8, !dbg !7017
  %vec_stmts349 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %206, i32 0, i32 3, !dbg !7017
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %vec_stmts349, align 8, !dbg !7018
  %207 = load %struct._slp_tree*, %struct._slp_tree** %right_node, align 8, !dbg !7019
  %left350 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %207, i32 0, i32 0, !dbg !7019
  store %struct._slp_tree* null, %struct._slp_tree** %left350, align 8, !dbg !7020
  %208 = load %struct._slp_tree*, %struct._slp_tree** %right_node, align 8, !dbg !7021
  %right351 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %208, i32 0, i32 1, !dbg !7021
  store %struct._slp_tree* null, %struct._slp_tree** %right351, align 8, !dbg !7022
  %209 = load %struct._slp_tree*, %struct._slp_tree** %right_node, align 8, !dbg !7023
  %cost352 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %209, i32 0, i32 5, !dbg !7023
  %outside_of_loop353 = getelementptr inbounds %struct.anon, %struct.anon* %cost352, i32 0, i32 0, !dbg !7023
  store i32 0, i32* %outside_of_loop353, align 4, !dbg !7024
  %210 = load %struct._slp_tree*, %struct._slp_tree** %right_node, align 8, !dbg !7025
  %cost354 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %210, i32 0, i32 5, !dbg !7025
  %inside_of_loop355 = getelementptr inbounds %struct.anon, %struct.anon* %cost354, i32 0, i32 1, !dbg !7025
  store i32 0, i32* %inside_of_loop355, align 4, !dbg !7026
  %211 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !7027
  %212 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !7029
  %213 = load i32, i32* %group_size.addr, align 4, !dbg !7030
  %214 = load i32*, i32** %inside_cost.addr, align 8, !dbg !7031
  %215 = load i32*, i32** %outside_cost.addr, align 8, !dbg !7032
  %216 = load i32, i32* %ncopies_for_cost.addr, align 4, !dbg !7033
  %217 = load i32*, i32** %max_nunits.addr, align 8, !dbg !7034
  %218 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %load_permutation.addr, align 8, !dbg !7035
  %219 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %loads.addr, align 8, !dbg !7036
  %220 = load i32, i32* %vectorization_factor.addr, align 4, !dbg !7037
  %call356 = call zeroext i8 @vect_build_slp_tree(%struct._loop_vec_info* %211, %struct._bb_vec_info* %212, %struct._slp_tree** %right_node, i32 %213, i32* %214, i32* %215, i32 %216, i32* %217, %struct.VEC_int_heap** %218, %struct.VEC_slp_tree_heap** %219, i32 %220), !dbg !7038
  %tobool357 = icmp ne i8 %call356, 0, !dbg !7038
  br i1 %tobool357, label %if.end359, label %if.then358, !dbg !7039

if.then358:                                       ; preds = %if.then346
  store i8 0, i8* %retval, align 1, !dbg !7040
  br label %return, !dbg !7040

if.end359:                                        ; preds = %if.then346
  %221 = load %struct._slp_tree*, %struct._slp_tree** %right_node, align 8, !dbg !7041
  %222 = load %struct._slp_tree**, %struct._slp_tree*** %node.addr, align 8, !dbg !7042
  %223 = load %struct._slp_tree*, %struct._slp_tree** %222, align 8, !dbg !7042
  %right360 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %223, i32 0, i32 1, !dbg !7042
  store %struct._slp_tree* %221, %struct._slp_tree** %right360, align 8, !dbg !7043
  br label %if.end361, !dbg !7044

if.end361:                                        ; preds = %if.end359, %if.end343
  store i8 1, i8* %retval, align 1, !dbg !7045
  br label %return, !dbg !7045

return:                                           ; preds = %if.end361, %if.then358, %if.then340, %if.end327, %if.then315, %if.end311, %if.end294, %if.end273, %if.end257, %if.end247, %if.then221, %if.end202, %if.end189, %if.end122, %if.end109, %if.then43, %if.end31, %if.end21
  %224 = load i8, i8* %retval, align 1, !dbg !7046
  ret i8 %224, !dbg !7046
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_slp_tree_base_length(%struct.VEC_slp_tree_base* %vec_) #0 !dbg !7047 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_tree_base*, align 8
  store %struct.VEC_slp_tree_base* %vec_, %struct.VEC_slp_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_base** %vec_.addr, metadata !7050, metadata !DIExpression()), !dbg !7051
  %0 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7051
  %tobool = icmp ne %struct.VEC_slp_tree_base* %0, null, !dbg !7051
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7051

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7051
  %num = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %1, i32 0, i32 0, !dbg !7051
  %2 = load i32, i32* %num, align 8, !dbg !7051
  br label %cond.end, !dbg !7051

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7051

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7051
  ret i32 %cond, !dbg !7051
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_supported_load_permutation_p(%struct._slp_instance* %slp_instn, i32 %group_size, %struct.VEC_int_heap* %load_permutation) #0 !dbg !7052 {
entry:
  %retval = alloca i8, align 1
  %slp_instn.addr = alloca %struct._slp_instance*, align 8
  %group_size.addr = alloca i32, align 4
  %load_permutation.addr = alloca %struct.VEC_int_heap*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %prev = alloca i32, align 4
  %next = alloca i32, align 4
  %k = alloca i32, align 4
  %supported = alloca i8, align 1
  %load_index = alloca %struct.simple_bitmap_def*, align 8
  store %struct._slp_instance* %slp_instn, %struct._slp_instance** %slp_instn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %slp_instn.addr, metadata !7055, metadata !DIExpression()), !dbg !7056
  store i32 %group_size, i32* %group_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %group_size.addr, metadata !7057, metadata !DIExpression()), !dbg !7058
  store %struct.VEC_int_heap* %load_permutation, %struct.VEC_int_heap** %load_permutation.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %load_permutation.addr, metadata !7059, metadata !DIExpression()), !dbg !7060
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7061, metadata !DIExpression()), !dbg !7062
  store i32 0, i32* %i, align 4, !dbg !7062
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7063, metadata !DIExpression()), !dbg !7064
  call void @llvm.dbg.declare(metadata i32* %prev, metadata !7065, metadata !DIExpression()), !dbg !7066
  store i32 -1, i32* %prev, align 4, !dbg !7066
  call void @llvm.dbg.declare(metadata i32* %next, metadata !7067, metadata !DIExpression()), !dbg !7068
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7069, metadata !DIExpression()), !dbg !7070
  call void @llvm.dbg.declare(metadata i8* %supported, metadata !7071, metadata !DIExpression()), !dbg !7072
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %load_index, metadata !7073, metadata !DIExpression()), !dbg !7084
  %0 = load %struct._slp_instance*, %struct._slp_instance** %slp_instn.addr, align 8, !dbg !7085
  %tobool = icmp ne %struct._slp_instance* %0, null, !dbg !7085
  br i1 %tobool, label %if.end, label %if.then, !dbg !7087

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7088
  br label %return, !dbg !7088

if.end:                                           ; preds = %entry
  %call = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !7089
  %tobool1 = icmp ne i8 %call, 0, !dbg !7089
  br i1 %tobool1, label %if.then2, label %if.end8, !dbg !7091

if.then2:                                         ; preds = %if.end
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7092
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.49, i64 0, i64 0)), !dbg !7094
  store i32 0, i32* %i, align 4, !dbg !7095
  br label %for.cond, !dbg !7097

for.cond:                                         ; preds = %for.inc, %if.then2
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation.addr, align 8, !dbg !7098
  %tobool4 = icmp ne %struct.VEC_int_heap* %2, null, !dbg !7098
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !7098

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation.addr, align 8, !dbg !7098
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !7098
  br label %cond.end, !dbg !7098

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7098
  %4 = load i32, i32* %i, align 4, !dbg !7098
  %call5 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %4, i32* %next), !dbg !7098
  %tobool6 = icmp ne i32 %call5, 0, !dbg !7100
  br i1 %tobool6, label %for.body, label %for.end, !dbg !7100

for.body:                                         ; preds = %cond.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7101
  %6 = load i32, i32* %next, align 4, !dbg !7102
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i32 %6), !dbg !7103
  br label %for.inc, !dbg !7103

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !7104
  %inc = add nsw i32 %7, 1, !dbg !7104
  store i32 %inc, i32* %i, align 4, !dbg !7104
  br label %for.cond, !dbg !7105, !llvm.loop !7106

for.end:                                          ; preds = %cond.end
  br label %if.end8, !dbg !7108

if.end8:                                          ; preds = %for.end, %if.end
  %8 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation.addr, align 8, !dbg !7109
  %tobool9 = icmp ne %struct.VEC_int_heap* %8, null, !dbg !7109
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !7109

cond.true10:                                      ; preds = %if.end8
  %9 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation.addr, align 8, !dbg !7109
  %base11 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %9, i32 0, i32 0, !dbg !7109
  br label %cond.end13, !dbg !7109

cond.false12:                                     ; preds = %if.end8
  br label %cond.end13, !dbg !7109

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_int_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !7109
  %call15 = call i32 @VEC_int_base_length(%struct.VEC_int_base* %cond14), !dbg !7109
  %10 = load i32, i32* %group_size.addr, align 4, !dbg !7111
  %11 = load i32, i32* %group_size.addr, align 4, !dbg !7112
  %mul = mul nsw i32 %10, %11, !dbg !7113
  %cmp = icmp ne i32 %call15, %mul, !dbg !7114
  br i1 %cmp, label %if.then16, label %if.end17, !dbg !7115

if.then16:                                        ; preds = %cond.end13
  store i8 0, i8* %retval, align 1, !dbg !7116
  br label %return, !dbg !7116

if.end17:                                         ; preds = %cond.end13
  store i8 1, i8* %supported, align 1, !dbg !7117
  %12 = load i32, i32* %group_size.addr, align 4, !dbg !7118
  %call18 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %12), !dbg !7119
  store %struct.simple_bitmap_def* %call18, %struct.simple_bitmap_def** %load_index, align 8, !dbg !7120
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %load_index, align 8, !dbg !7121
  call void @sbitmap_zero(%struct.simple_bitmap_def* %13), !dbg !7122
  store i32 0, i32* %j, align 4, !dbg !7123
  br label %for.cond19, !dbg !7125

for.cond19:                                       ; preds = %for.inc46, %if.end17
  %14 = load i32, i32* %j, align 4, !dbg !7126
  %15 = load i32, i32* %group_size.addr, align 4, !dbg !7128
  %cmp20 = icmp slt i32 %14, %15, !dbg !7129
  br i1 %cmp20, label %for.body21, label %for.end48, !dbg !7130

for.body21:                                       ; preds = %for.cond19
  %16 = load i32, i32* %j, align 4, !dbg !7131
  %17 = load i32, i32* %group_size.addr, align 4, !dbg !7134
  %mul22 = mul nsw i32 %16, %17, !dbg !7135
  store i32 %mul22, i32* %i, align 4, !dbg !7136
  store i32 0, i32* %k, align 4, !dbg !7137
  br label %for.cond23, !dbg !7138

for.cond23:                                       ; preds = %for.inc39, %for.body21
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation.addr, align 8, !dbg !7139
  %tobool24 = icmp ne %struct.VEC_int_heap* %18, null, !dbg !7139
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7139

cond.true25:                                      ; preds = %for.cond23
  %19 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation.addr, align 8, !dbg !7139
  %base26 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %19, i32 0, i32 0, !dbg !7139
  br label %cond.end28, !dbg !7139

cond.false27:                                     ; preds = %for.cond23
  br label %cond.end28, !dbg !7139

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_int_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7139
  %20 = load i32, i32* %i, align 4, !dbg !7139
  %call30 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond29, i32 %20, i32* %next), !dbg !7139
  %tobool31 = icmp ne i32 %call30, 0, !dbg !7139
  br i1 %tobool31, label %land.rhs, label %land.end, !dbg !7141

land.rhs:                                         ; preds = %cond.end28
  %21 = load i32, i32* %k, align 4, !dbg !7142
  %22 = load i32, i32* %group_size.addr, align 4, !dbg !7143
  %cmp32 = icmp slt i32 %21, %22, !dbg !7144
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end28
  %23 = phi i1 [ false, %cond.end28 ], [ %cmp32, %land.rhs ], !dbg !7145
  br i1 %23, label %for.body33, label %for.end42, !dbg !7146

for.body33:                                       ; preds = %land.end
  %24 = load i32, i32* %i, align 4, !dbg !7147
  %25 = load i32, i32* %j, align 4, !dbg !7150
  %26 = load i32, i32* %group_size.addr, align 4, !dbg !7151
  %mul34 = mul nsw i32 %25, %26, !dbg !7152
  %cmp35 = icmp ne i32 %24, %mul34, !dbg !7153
  br i1 %cmp35, label %land.lhs.true, label %if.end38, !dbg !7154

land.lhs.true:                                    ; preds = %for.body33
  %27 = load i32, i32* %next, align 4, !dbg !7155
  %28 = load i32, i32* %prev, align 4, !dbg !7156
  %cmp36 = icmp ne i32 %27, %28, !dbg !7157
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !7158

if.then37:                                        ; preds = %land.lhs.true
  store i8 0, i8* %supported, align 1, !dbg !7159
  br label %for.end42, !dbg !7161

if.end38:                                         ; preds = %land.lhs.true, %for.body33
  %29 = load i32, i32* %next, align 4, !dbg !7162
  store i32 %29, i32* %prev, align 4, !dbg !7163
  br label %for.inc39, !dbg !7164

for.inc39:                                        ; preds = %if.end38
  %30 = load i32, i32* %i, align 4, !dbg !7165
  %inc40 = add nsw i32 %30, 1, !dbg !7165
  store i32 %inc40, i32* %i, align 4, !dbg !7165
  %31 = load i32, i32* %k, align 4, !dbg !7166
  %inc41 = add nsw i32 %31, 1, !dbg !7166
  store i32 %inc41, i32* %k, align 4, !dbg !7166
  br label %for.cond23, !dbg !7167, !llvm.loop !7168

for.end42:                                        ; preds = %if.then37, %land.end
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %load_index, align 8, !dbg !7170
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %32, i32 0, i32 3, !dbg !7170
  %33 = load i32, i32* %prev, align 4, !dbg !7170
  %div = udiv i32 %33, 64, !dbg !7170
  %idxprom = zext i32 %div to i64, !dbg !7170
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7170
  %34 = load i64, i64* %arrayidx, align 8, !dbg !7170
  %35 = load i32, i32* %prev, align 4, !dbg !7170
  %rem = urem i32 %35, 64, !dbg !7170
  %sh_prom = zext i32 %rem to i64, !dbg !7170
  %shr = lshr i64 %34, %sh_prom, !dbg !7170
  %and = and i64 %shr, 1, !dbg !7170
  %tobool43 = icmp ne i64 %and, 0, !dbg !7170
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !7172

if.then44:                                        ; preds = %for.end42
  store i8 0, i8* %supported, align 1, !dbg !7173
  br label %for.end48, !dbg !7175

if.end45:                                         ; preds = %for.end42
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %load_index, align 8, !dbg !7176
  %37 = load i32, i32* %prev, align 4, !dbg !7177
  call void @SET_BIT(%struct.simple_bitmap_def* %36, i32 %37), !dbg !7178
  br label %for.inc46, !dbg !7179

for.inc46:                                        ; preds = %if.end45
  %38 = load i32, i32* %j, align 4, !dbg !7180
  %inc47 = add nsw i32 %38, 1, !dbg !7180
  store i32 %inc47, i32* %j, align 4, !dbg !7180
  br label %for.cond19, !dbg !7181, !llvm.loop !7182

for.end48:                                        ; preds = %if.then44, %for.cond19
  %39 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %load_index, align 8, !dbg !7184
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %39, i32 0, i32 0, !dbg !7184
  %40 = load i8*, i8** %popcount, align 8, !dbg !7184
  call void @free(i8* %40), !dbg !7184
  %41 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %load_index, align 8, !dbg !7184
  %42 = bitcast %struct.simple_bitmap_def* %41 to i8*, !dbg !7184
  call void @free(i8* %42), !dbg !7184
  %43 = load i8, i8* %supported, align 1, !dbg !7185
  %conv = zext i8 %43 to i32, !dbg !7185
  %tobool49 = icmp ne i32 %conv, 0, !dbg !7185
  br i1 %tobool49, label %land.lhs.true50, label %if.end59, !dbg !7187

land.lhs.true50:                                  ; preds = %for.end48
  %44 = load i32, i32* %i, align 4, !dbg !7188
  %45 = load i32, i32* %group_size.addr, align 4, !dbg !7189
  %46 = load i32, i32* %group_size.addr, align 4, !dbg !7190
  %mul51 = mul nsw i32 %45, %46, !dbg !7191
  %cmp52 = icmp eq i32 %44, %mul51, !dbg !7192
  br i1 %cmp52, label %land.lhs.true54, label %if.end59, !dbg !7193

land.lhs.true54:                                  ; preds = %land.lhs.true50
  %47 = load %struct._slp_instance*, %struct._slp_instance** %slp_instn.addr, align 8, !dbg !7194
  %call55 = call zeroext i8 @vect_supported_slp_permutation_p(%struct._slp_instance* %47), !dbg !7195
  %conv56 = zext i8 %call55 to i32, !dbg !7195
  %tobool57 = icmp ne i32 %conv56, 0, !dbg !7195
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !7196

if.then58:                                        ; preds = %land.lhs.true54
  store i8 1, i8* %retval, align 1, !dbg !7197
  br label %return, !dbg !7197

if.end59:                                         ; preds = %land.lhs.true54, %land.lhs.true50, %for.end48
  store i8 0, i8* %retval, align 1, !dbg !7198
  br label %return, !dbg !7198

return:                                           ; preds = %if.end59, %if.then58, %if.then16, %if.then
  %48 = load i8, i8* %retval, align 1, !dbg !7199
  ret i8 %48, !dbg !7199
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @vect_find_first_load_in_slp_instance(%struct._slp_instance* %instance) #0 !dbg !7200 {
entry:
  %instance.addr = alloca %struct._slp_instance*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %load_node = alloca %struct._slp_tree*, align 8
  %first_load = alloca %union.gimple_statement_d*, align 8
  %load = alloca %union.gimple_statement_d*, align 8
  store %struct._slp_instance* %instance, %struct._slp_instance** %instance.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance.addr, metadata !7203, metadata !DIExpression()), !dbg !7204
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7205, metadata !DIExpression()), !dbg !7206
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7207, metadata !DIExpression()), !dbg !7208
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %load_node, metadata !7209, metadata !DIExpression()), !dbg !7210
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %first_load, metadata !7211, metadata !DIExpression()), !dbg !7212
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %first_load, align 8, !dbg !7212
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %load, metadata !7213, metadata !DIExpression()), !dbg !7214
  store i32 0, i32* %i, align 4, !dbg !7215
  br label %for.cond, !dbg !7217

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7218
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %0, i32 0, i32 5, !dbg !7218
  %1 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !7218
  %tobool = icmp ne %struct.VEC_slp_tree_heap* %1, null, !dbg !7218
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7218

cond.true:                                        ; preds = %for.cond
  %2 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7218
  %loads1 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %2, i32 0, i32 5, !dbg !7218
  %3 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads1, align 8, !dbg !7218
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %3, i32 0, i32 0, !dbg !7218
  br label %cond.end, !dbg !7218

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7218

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7218
  %4 = load i32, i32* %i, align 4, !dbg !7218
  %call = call i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %cond, i32 %4, %struct._slp_tree** %load_node), !dbg !7218
  %tobool2 = icmp ne i32 %call, 0, !dbg !7220
  br i1 %tobool2, label %for.body, label %for.end17, !dbg !7220

for.body:                                         ; preds = %cond.end
  store i32 0, i32* %j, align 4, !dbg !7221
  br label %for.cond3, !dbg !7223

for.cond3:                                        ; preds = %for.inc, %for.body
  %5 = load %struct._slp_tree*, %struct._slp_tree** %load_node, align 8, !dbg !7224
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %5, i32 0, i32 2, !dbg !7224
  %6 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !7224
  %tobool4 = icmp ne %struct.VEC_gimple_heap* %6, null, !dbg !7224
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !7224

cond.true5:                                       ; preds = %for.cond3
  %7 = load %struct._slp_tree*, %struct._slp_tree** %load_node, align 8, !dbg !7224
  %stmts6 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %7, i32 0, i32 2, !dbg !7224
  %8 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts6, align 8, !dbg !7224
  %base7 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %8, i32 0, i32 0, !dbg !7224
  br label %cond.end9, !dbg !7224

cond.false8:                                      ; preds = %for.cond3
  br label %cond.end9, !dbg !7224

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_gimple_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !7224
  %9 = load i32, i32* %j, align 4, !dbg !7224
  %call11 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond10, i32 %9, %union.gimple_statement_d** %load), !dbg !7224
  %tobool12 = icmp ne i32 %call11, 0, !dbg !7226
  br i1 %tobool12, label %for.body13, label %for.end, !dbg !7226

for.body13:                                       ; preds = %cond.end9
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load, align 8, !dbg !7227
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load, align 8, !dbg !7228
  %call14 = call %union.gimple_statement_d* @get_earlier_stmt(%union.gimple_statement_d* %10, %union.gimple_statement_d* %11), !dbg !7229
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %first_load, align 8, !dbg !7230
  br label %for.inc, !dbg !7231

for.inc:                                          ; preds = %for.body13
  %12 = load i32, i32* %j, align 4, !dbg !7232
  %inc = add nsw i32 %12, 1, !dbg !7232
  store i32 %inc, i32* %j, align 4, !dbg !7232
  br label %for.cond3, !dbg !7233, !llvm.loop !7234

for.end:                                          ; preds = %cond.end9
  br label %for.inc15, !dbg !7235

for.inc15:                                        ; preds = %for.end
  %13 = load i32, i32* %i, align 4, !dbg !7236
  %inc16 = add nsw i32 %13, 1, !dbg !7236
  store i32 %inc16, i32* %i, align 4, !dbg !7236
  br label %for.cond, !dbg !7237, !llvm.loop !7238

for.end17:                                        ; preds = %cond.end
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load, align 8, !dbg !7240
  ret %union.gimple_statement_d* %14, !dbg !7241
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._slp_instance** @VEC_slp_instance_heap_safe_push(%struct.VEC_slp_instance_heap** %vec_, %struct._slp_instance* %obj_) #0 !dbg !7242 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_instance_heap**, align 8
  %obj_.addr = alloca %struct._slp_instance*, align 8
  store %struct.VEC_slp_instance_heap** %vec_, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap*** %vec_.addr, metadata !7246, metadata !DIExpression()), !dbg !7247
  store %struct._slp_instance* %obj_, %struct._slp_instance** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %obj_.addr, metadata !7248, metadata !DIExpression()), !dbg !7247
  %0 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !7247
  %call = call i32 @VEC_slp_instance_heap_reserve(%struct.VEC_slp_instance_heap** %0, i32 1), !dbg !7247
  %1 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !7247
  %2 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %1, align 8, !dbg !7247
  %tobool = icmp ne %struct.VEC_slp_instance_heap* %2, null, !dbg !7247
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7247

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !7247
  %4 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %3, align 8, !dbg !7247
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %4, i32 0, i32 0, !dbg !7247
  br label %cond.end, !dbg !7247

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7247

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7247
  %5 = load %struct._slp_instance*, %struct._slp_instance** %obj_.addr, align 8, !dbg !7247
  %call1 = call %struct._slp_instance** @VEC_slp_instance_base_quick_push(%struct.VEC_slp_instance_base* %cond, %struct._slp_instance* %5), !dbg !7247
  ret %struct._slp_instance** %call1, !dbg !7247
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_print_slp_tree(%struct._slp_tree* %node) #0 !dbg !7249 {
entry:
  %node.addr = alloca %struct._slp_tree*, align 8
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct._slp_tree* %node, %struct._slp_tree** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node.addr, metadata !7250, metadata !DIExpression()), !dbg !7251
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7252, metadata !DIExpression()), !dbg !7253
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7254, metadata !DIExpression()), !dbg !7255
  %0 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !7256
  %tobool = icmp ne %struct._slp_tree* %0, null, !dbg !7256
  br i1 %tobool, label %if.end, label %if.then, !dbg !7258

if.then:                                          ; preds = %entry
  br label %return, !dbg !7259

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7260
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i64 0, i64 0)), !dbg !7261
  store i32 0, i32* %i, align 4, !dbg !7262
  br label %for.cond, !dbg !7264

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !7265
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %2, i32 0, i32 2, !dbg !7265
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !7265
  %tobool1 = icmp ne %struct.VEC_gimple_heap* %3, null, !dbg !7265
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7265

cond.true:                                        ; preds = %for.cond
  %4 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !7265
  %stmts2 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %4, i32 0, i32 2, !dbg !7265
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts2, align 8, !dbg !7265
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %5, i32 0, i32 0, !dbg !7265
  br label %cond.end, !dbg !7265

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7265

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7265
  %6 = load i32, i32* %i, align 4, !dbg !7265
  %call3 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %6, %union.gimple_statement_d** %stmt), !dbg !7265
  %tobool4 = icmp ne i32 %call3, 0, !dbg !7267
  br i1 %tobool4, label %for.body, label %for.end, !dbg !7267

for.body:                                         ; preds = %cond.end
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7268
  %8 = load i32, i32* %i, align 4, !dbg !7270
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.54, i64 0, i64 0), i32 %8), !dbg !7271
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7272
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7273
  call void @print_gimple_stmt(%struct._IO_FILE* %9, %union.gimple_statement_d* %10, i32 0, i32 2), !dbg !7274
  br label %for.inc, !dbg !7275

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !7276
  %inc = add nsw i32 %11, 1, !dbg !7276
  store i32 %inc, i32* %i, align 4, !dbg !7276
  br label %for.cond, !dbg !7277, !llvm.loop !7278

for.end:                                          ; preds = %cond.end
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7280
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i64 0, i64 0)), !dbg !7281
  %13 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !7282
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %13, i32 0, i32 0, !dbg !7282
  %14 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !7282
  call void @vect_print_slp_tree(%struct._slp_tree* %14), !dbg !7283
  %15 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !7284
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %15, i32 0, i32 1, !dbg !7284
  %16 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !7284
  call void @vect_print_slp_tree(%struct._slp_tree* %16), !dbg !7285
  br label %return, !dbg !7286

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !7286
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !7287 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !7290, metadata !DIExpression()), !dbg !7291
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7292, metadata !DIExpression()), !dbg !7291
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7293, metadata !DIExpression()), !dbg !7291
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7291
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !7291
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !7291
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7291

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7291
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !7291
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !7291
  br label %cond.end, !dbg !7291

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7291

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7291
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7291
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !7291
  %tobool1 = icmp ne i32 %call, 0, !dbg !7291
  %lnot = xor i1 %tobool1, true, !dbg !7291
  %lnot.ext = zext i1 %lnot to i32, !dbg !7291
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7291
  %5 = load i32, i32* %extend, align 4, !dbg !7294
  %tobool2 = icmp ne i32 %5, 0, !dbg !7294
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7291

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7294
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !7294
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !7294
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7294
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7294
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !7294
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7294
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !7294
  br label %if.end, !dbg !7294

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7291
  ret i32 %12, !dbg !7291
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !7296 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !7300, metadata !DIExpression()), !dbg !7301
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !7302, metadata !DIExpression()), !dbg !7301
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !7303, metadata !DIExpression()), !dbg !7301
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7301
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !7301
  %1 = load i32, i32* %num, align 8, !dbg !7301
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7301
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !7301
  %3 = load i32, i32* %alloc, align 4, !dbg !7301
  %cmp = icmp ult i32 %1, %3, !dbg !7301
  %conv = zext i1 %cmp to i32, !dbg !7301
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7301
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !7301
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7301
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !7301
  %6 = load i32, i32* %num1, align 8, !dbg !7301
  %inc = add i32 %6, 1, !dbg !7301
  store i32 %inc, i32* %num1, align 8, !dbg !7301
  %idxprom = zext i32 %6 to i64, !dbg !7301
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !7301
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !7301
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !7301
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !7301
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !7301
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !7301
  ret %union.gimple_statement_d** %9, !dbg !7301
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !7304 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !7307, metadata !DIExpression()), !dbg !7308
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7309, metadata !DIExpression()), !dbg !7308
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7308
  %cmp = icmp sge i32 %0, 0, !dbg !7308
  %conv = zext i1 %cmp to i32, !dbg !7308
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7308
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !7308
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7308

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7308
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !7308
  %3 = load i32, i32* %alloc, align 4, !dbg !7308
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7308
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !7308
  %5 = load i32, i32* %num, align 8, !dbg !7308
  %sub = sub i32 %3, %5, !dbg !7308
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7308
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7308
  %conv2 = zext i1 %cmp1 to i32, !dbg !7308
  br label %cond.end, !dbg !7308

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7308
  %tobool3 = icmp ne i32 %7, 0, !dbg !7308
  %lnot = xor i1 %tobool3, true, !dbg !7308
  %lnot.ext = zext i1 %lnot to i32, !dbg !7308
  br label %cond.end, !dbg !7308

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7308
  ret i32 %cond, !dbg !7308
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #3

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #3

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !7310 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7311, metadata !DIExpression()), !dbg !7312
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7313
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7314
  %cmp = icmp eq i32 %call, 8, !dbg !7315
  %conv = zext i1 %cmp to i32, !dbg !7315
  %conv1 = trunc i32 %conv to i8, !dbg !7314
  ret i8 %conv1, !dbg !7316
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #3

declare dso_local %struct.optab_d* @optab_for_tree_code(i32, %union.tree_node*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !7317 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7320, metadata !DIExpression()), !dbg !7321
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7322
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7324
  %cmp = icmp uge i32 %call, 3, !dbg !7325
  br i1 %cmp, label %if.then, label %if.else, !dbg !7326

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7327
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !7328
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !7329
  br label %return, !dbg !7329

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7330
  br label %return, !dbg !7330

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7331
  ret %union.tree_node* %2, !dbg !7331
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_get_and_check_slp_defs(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %slp_node, %union.gimple_statement_d* %stmt, %struct.VEC_gimple_heap** %def_stmts0, %struct.VEC_gimple_heap** %def_stmts1, i32* %first_stmt_dt0, i32* %first_stmt_dt1, %union.tree_node** %first_stmt_def0_type, %union.tree_node** %first_stmt_def1_type, %union.tree_node** %first_stmt_const_oprnd, i32 %ncopies_for_cost, i8* %pattern0, i8* %pattern1) #0 !dbg !7332 {
entry:
  %retval = alloca i8, align 1
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %bb_vinfo.addr = alloca %struct._bb_vec_info*, align 8
  %slp_node.addr = alloca %struct._slp_tree*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %def_stmts0.addr = alloca %struct.VEC_gimple_heap**, align 8
  %def_stmts1.addr = alloca %struct.VEC_gimple_heap**, align 8
  %first_stmt_dt0.addr = alloca i32*, align 8
  %first_stmt_dt1.addr = alloca i32*, align 8
  %first_stmt_def0_type.addr = alloca %union.tree_node**, align 8
  %first_stmt_def1_type.addr = alloca %union.tree_node**, align 8
  %first_stmt_const_oprnd.addr = alloca %union.tree_node**, align 8
  %ncopies_for_cost.addr = alloca i32, align 4
  %pattern0.addr = alloca i8*, align 8
  %pattern1.addr = alloca i8*, align 8
  %oprnd = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %number_of_oprnds = alloca i32, align 4
  %def = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %dt = alloca [2 x i32], align 4
  %stmt_info = alloca %struct._stmt_vec_info*, align 8
  %rhs_class = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !7336, metadata !DIExpression()), !dbg !7337
  store %struct._bb_vec_info* %bb_vinfo, %struct._bb_vec_info** %bb_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo.addr, metadata !7338, metadata !DIExpression()), !dbg !7339
  store %struct._slp_tree* %slp_node, %struct._slp_tree** %slp_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %slp_node.addr, metadata !7340, metadata !DIExpression()), !dbg !7341
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7342, metadata !DIExpression()), !dbg !7343
  store %struct.VEC_gimple_heap** %def_stmts0, %struct.VEC_gimple_heap*** %def_stmts0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %def_stmts0.addr, metadata !7344, metadata !DIExpression()), !dbg !7345
  store %struct.VEC_gimple_heap** %def_stmts1, %struct.VEC_gimple_heap*** %def_stmts1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %def_stmts1.addr, metadata !7346, metadata !DIExpression()), !dbg !7347
  store i32* %first_stmt_dt0, i32** %first_stmt_dt0.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %first_stmt_dt0.addr, metadata !7348, metadata !DIExpression()), !dbg !7349
  store i32* %first_stmt_dt1, i32** %first_stmt_dt1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %first_stmt_dt1.addr, metadata !7350, metadata !DIExpression()), !dbg !7351
  store %union.tree_node** %first_stmt_def0_type, %union.tree_node*** %first_stmt_def0_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %first_stmt_def0_type.addr, metadata !7352, metadata !DIExpression()), !dbg !7353
  store %union.tree_node** %first_stmt_def1_type, %union.tree_node*** %first_stmt_def1_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %first_stmt_def1_type.addr, metadata !7354, metadata !DIExpression()), !dbg !7355
  store %union.tree_node** %first_stmt_const_oprnd, %union.tree_node*** %first_stmt_const_oprnd.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %first_stmt_const_oprnd.addr, metadata !7356, metadata !DIExpression()), !dbg !7357
  store i32 %ncopies_for_cost, i32* %ncopies_for_cost.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ncopies_for_cost.addr, metadata !7358, metadata !DIExpression()), !dbg !7359
  store i8* %pattern0, i8** %pattern0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pattern0.addr, metadata !7360, metadata !DIExpression()), !dbg !7361
  store i8* %pattern1, i8** %pattern1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pattern1.addr, metadata !7362, metadata !DIExpression()), !dbg !7363
  call void @llvm.dbg.declare(metadata %union.tree_node** %oprnd, metadata !7364, metadata !DIExpression()), !dbg !7365
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7366, metadata !DIExpression()), !dbg !7367
  call void @llvm.dbg.declare(metadata i32* %number_of_oprnds, metadata !7368, metadata !DIExpression()), !dbg !7369
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !7370, metadata !DIExpression()), !dbg !7371
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !7372, metadata !DIExpression()), !dbg !7373
  call void @llvm.dbg.declare(metadata [2 x i32]* %dt, metadata !7374, metadata !DIExpression()), !dbg !7376
  %0 = bitcast [2 x i32]* %dt to i8*, !dbg !7376
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 bitcast ([2 x i32]* @__const.vect_get_and_check_slp_defs.dt to i8*), i64 8, i1 false), !dbg !7376
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_info, metadata !7377, metadata !DIExpression()), !dbg !7378
  %1 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !7379
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %1, i32 0, i32 2, !dbg !7379
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !7379
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !7379
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7379

cond.true:                                        ; preds = %entry
  %3 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !7379
  %stmts1 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i32 0, i32 2, !dbg !7379
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts1, align 8, !dbg !7379
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !7379
  br label %cond.end, !dbg !7379

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7379

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7379
  %call = call %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond, i32 0), !dbg !7379
  %call2 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call), !dbg !7380
  store %struct._stmt_vec_info* %call2, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !7378
  call void @llvm.dbg.declare(metadata i32* %rhs_class, metadata !7381, metadata !DIExpression()), !dbg !7382
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !7383, metadata !DIExpression()), !dbg !7384
  store %struct.loop* null, %struct.loop** %loop, align 8, !dbg !7384
  %5 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !7385
  %tobool3 = icmp ne %struct._loop_vec_info* %5, null, !dbg !7385
  br i1 %tobool3, label %if.then, label %if.end, !dbg !7387

if.then:                                          ; preds = %cond.end
  %6 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !7388
  %loop4 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %6, i32 0, i32 0, !dbg !7388
  %7 = load %struct.loop*, %struct.loop** %loop4, align 8, !dbg !7388
  store %struct.loop* %7, %struct.loop** %loop, align 8, !dbg !7389
  br label %if.end, !dbg !7390

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7391
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %8), !dbg !7392
  %call6 = call i32 @get_gimple_rhs_class(i32 %call5), !dbg !7393
  store i32 %call6, i32* %rhs_class, align 4, !dbg !7394
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7395
  %call7 = call i32 @gimple_num_ops(%union.gimple_statement_d* %9), !dbg !7396
  %sub = sub i32 %call7, 1, !dbg !7397
  store i32 %sub, i32* %number_of_oprnds, align 4, !dbg !7398
  store i32 0, i32* %i, align 4, !dbg !7399
  br label %for.cond, !dbg !7401

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !7402
  %11 = load i32, i32* %number_of_oprnds, align 4, !dbg !7404
  %cmp = icmp ult i32 %10, %11, !dbg !7405
  br i1 %cmp, label %for.body, label %for.end, !dbg !7406

for.body:                                         ; preds = %for.cond
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7407
  %13 = load i32, i32* %i, align 4, !dbg !7409
  %add = add i32 %13, 1, !dbg !7410
  %call8 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %12, i32 %add), !dbg !7411
  store %union.tree_node* %call8, %union.tree_node** %oprnd, align 8, !dbg !7412
  %14 = load %union.tree_node*, %union.tree_node** %oprnd, align 8, !dbg !7413
  %15 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !7415
  %16 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !7416
  %17 = load i32, i32* %i, align 4, !dbg !7417
  %idxprom = zext i32 %17 to i64, !dbg !7418
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 %idxprom, !dbg !7418
  %call9 = call zeroext i8 @vect_is_simple_use(%union.tree_node* %14, %struct._loop_vec_info* %15, %struct._bb_vec_info* %16, %union.gimple_statement_d** %def_stmt, %union.tree_node** %def, i32* %arrayidx), !dbg !7419
  %tobool10 = icmp ne i8 %call9, 0, !dbg !7419
  br i1 %tobool10, label %lor.lhs.false, label %if.then15, !dbg !7420

lor.lhs.false:                                    ; preds = %for.body
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7421
  %tobool11 = icmp ne %union.gimple_statement_d* %18, null, !dbg !7421
  br i1 %tobool11, label %if.end21, label %land.lhs.true, !dbg !7422

land.lhs.true:                                    ; preds = %lor.lhs.false
  %19 = load i32, i32* %i, align 4, !dbg !7423
  %idxprom12 = zext i32 %19 to i64, !dbg !7424
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 %idxprom12, !dbg !7424
  %20 = load i32, i32* %arrayidx13, align 4, !dbg !7424
  %cmp14 = icmp ne i32 %20, 1, !dbg !7425
  br i1 %cmp14, label %if.then15, label %if.end21, !dbg !7426

if.then15:                                        ; preds = %land.lhs.true, %for.body
  %call16 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !7427
  %tobool17 = icmp ne i8 %call16, 0, !dbg !7427
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !7430

if.then18:                                        ; preds = %if.then15
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7431
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.42, i64 0, i64 0)), !dbg !7433
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7434
  %23 = load %union.tree_node*, %union.tree_node** %oprnd, align 8, !dbg !7435
  call void @print_generic_expr(%struct._IO_FILE* %22, %union.tree_node* %23, i32 2), !dbg !7436
  br label %if.end20, !dbg !7437

if.end20:                                         ; preds = %if.then18, %if.then15
  store i8 0, i8* %retval, align 1, !dbg !7438
  br label %return, !dbg !7438

if.end21:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7439
  %tobool22 = icmp ne %struct.loop* %24, null, !dbg !7439
  br i1 %tobool22, label %land.lhs.true23, label %if.end88, !dbg !7441

land.lhs.true23:                                  ; preds = %if.end21
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7442
  %tobool24 = icmp ne %union.gimple_statement_d* %25, null, !dbg !7442
  br i1 %tobool24, label %land.lhs.true25, label %if.end88, !dbg !7443

land.lhs.true25:                                  ; preds = %land.lhs.true23
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7444
  %call26 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %26), !dbg !7445
  %tobool27 = icmp ne %struct.basic_block_def* %call26, null, !dbg !7445
  br i1 %tobool27, label %land.lhs.true28, label %if.end88, !dbg !7446

land.lhs.true28:                                  ; preds = %land.lhs.true25
  %27 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7447
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7448
  %call29 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %28), !dbg !7449
  %call30 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %27, %struct.basic_block_def* %call29), !dbg !7450
  %conv = zext i8 %call30 to i32, !dbg !7450
  %tobool31 = icmp ne i32 %conv, 0, !dbg !7450
  br i1 %tobool31, label %land.lhs.true32, label %if.end88, !dbg !7451

land.lhs.true32:                                  ; preds = %land.lhs.true28
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7452
  %call33 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %29), !dbg !7453
  %tobool34 = icmp ne %struct._stmt_vec_info* %call33, null, !dbg !7453
  br i1 %tobool34, label %land.lhs.true35, label %if.end88, !dbg !7454

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7455
  %call36 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %30), !dbg !7455
  %in_pattern_p = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call36, i32 0, i32 13, !dbg !7455
  %31 = load i8, i8* %in_pattern_p, align 8, !dbg !7455
  %conv37 = zext i8 %31 to i32, !dbg !7455
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !7455
  br i1 %tobool38, label %if.then39, label %if.end88, !dbg !7456

if.then39:                                        ; preds = %land.lhs.true35
  %32 = load i32*, i32** %first_stmt_dt0.addr, align 8, !dbg !7457
  %33 = load i32, i32* %32, align 4, !dbg !7460
  %tobool40 = icmp ne i32 %33, 0, !dbg !7460
  br i1 %tobool40, label %if.else, label %if.then41, !dbg !7461

if.then41:                                        ; preds = %if.then39
  %34 = load i8*, i8** %pattern0.addr, align 8, !dbg !7462
  store i8 1, i8* %34, align 1, !dbg !7463
  br label %if.end65, !dbg !7464

if.else:                                          ; preds = %if.then39
  %35 = load i32, i32* %i, align 4, !dbg !7465
  %cmp42 = icmp eq i32 %35, 1, !dbg !7468
  br i1 %cmp42, label %land.lhs.true44, label %if.else47, !dbg !7469

land.lhs.true44:                                  ; preds = %if.else
  %36 = load i32*, i32** %first_stmt_dt1.addr, align 8, !dbg !7470
  %37 = load i32, i32* %36, align 4, !dbg !7471
  %tobool45 = icmp ne i32 %37, 0, !dbg !7471
  br i1 %tobool45, label %if.else47, label %if.then46, !dbg !7472

if.then46:                                        ; preds = %land.lhs.true44
  %38 = load i8*, i8** %pattern1.addr, align 8, !dbg !7473
  store i8 1, i8* %38, align 1, !dbg !7474
  br label %if.end64, !dbg !7475

if.else47:                                        ; preds = %land.lhs.true44, %if.else
  %39 = load i32, i32* %i, align 4, !dbg !7476
  %cmp48 = icmp eq i32 %39, 0, !dbg !7478
  br i1 %cmp48, label %land.lhs.true50, label %lor.lhs.false52, !dbg !7479

land.lhs.true50:                                  ; preds = %if.else47
  %40 = load i8*, i8** %pattern0.addr, align 8, !dbg !7480
  %41 = load i8, i8* %40, align 1, !dbg !7481
  %tobool51 = icmp ne i8 %41, 0, !dbg !7481
  br i1 %tobool51, label %lor.lhs.false52, label %if.then57, !dbg !7482

lor.lhs.false52:                                  ; preds = %land.lhs.true50, %if.else47
  %42 = load i32, i32* %i, align 4, !dbg !7483
  %cmp53 = icmp eq i32 %42, 1, !dbg !7484
  br i1 %cmp53, label %land.lhs.true55, label %if.end63, !dbg !7485

land.lhs.true55:                                  ; preds = %lor.lhs.false52
  %43 = load i8*, i8** %pattern1.addr, align 8, !dbg !7486
  %44 = load i8, i8* %43, align 1, !dbg !7487
  %tobool56 = icmp ne i8 %44, 0, !dbg !7487
  br i1 %tobool56, label %if.end63, label %if.then57, !dbg !7488

if.then57:                                        ; preds = %land.lhs.true55, %land.lhs.true50
  %call58 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !7489
  %tobool59 = icmp ne i8 %call58, 0, !dbg !7489
  br i1 %tobool59, label %if.then60, label %if.end62, !dbg !7492

if.then60:                                        ; preds = %if.then57
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7493
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.43, i64 0, i64 0)), !dbg !7495
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7496
  %47 = load %union.tree_node*, %union.tree_node** %oprnd, align 8, !dbg !7497
  call void @print_generic_expr(%struct._IO_FILE* %46, %union.tree_node* %47, i32 2), !dbg !7498
  br label %if.end62, !dbg !7499

if.end62:                                         ; preds = %if.then60, %if.then57
  store i8 0, i8* %retval, align 1, !dbg !7500
  br label %return, !dbg !7500

if.end63:                                         ; preds = %land.lhs.true55, %lor.lhs.false52
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then46
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then41
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7501
  %call66 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %48), !dbg !7501
  %related_stmt = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call66, i32 0, i32 14, !dbg !7501
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %related_stmt, align 8, !dbg !7501
  store %union.gimple_statement_d* %49, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7502
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7503
  %call67 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %50), !dbg !7503
  %def_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call67, i32 0, i32 16, !dbg !7503
  %51 = load i32, i32* %def_type, align 8, !dbg !7503
  %52 = load i32, i32* %i, align 4, !dbg !7504
  %idxprom68 = zext i32 %52 to i64, !dbg !7505
  %arrayidx69 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 %idxprom68, !dbg !7505
  store i32 %51, i32* %arrayidx69, align 4, !dbg !7506
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 0, !dbg !7507
  %53 = load i32, i32* %arraydecay, align 4, !dbg !7507
  %cmp70 = icmp eq i32 %53, 8, !dbg !7509
  br i1 %cmp70, label %if.then72, label %if.end78, !dbg !7510

if.then72:                                        ; preds = %if.end65
  %call73 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !7511
  %tobool74 = icmp ne i8 %call73, 0, !dbg !7511
  br i1 %tobool74, label %if.then75, label %if.end77, !dbg !7514

if.then75:                                        ; preds = %if.then72
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7515
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0)), !dbg !7516
  br label %if.end77, !dbg !7516

if.end77:                                         ; preds = %if.then75, %if.then72
  store i8 0, i8* %retval, align 1, !dbg !7517
  br label %return, !dbg !7517

if.end78:                                         ; preds = %if.end65
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7518
  %call79 = call i32 @gimple_code(%union.gimple_statement_d* %55), !dbg !7519
  switch i32 %call79, label %sw.default [
    i32 16, label %sw.bb
    i32 6, label %sw.bb81
  ], !dbg !7520

sw.bb:                                            ; preds = %if.end78
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7521
  %call80 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %56), !dbg !7523
  store %union.tree_node* %call80, %union.tree_node** %def, align 8, !dbg !7524
  br label %sw.epilog, !dbg !7525

sw.bb81:                                          ; preds = %if.end78
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7526
  %call82 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %57), !dbg !7527
  store %union.tree_node* %call82, %union.tree_node** %def, align 8, !dbg !7528
  br label %sw.epilog, !dbg !7529

sw.default:                                       ; preds = %if.end78
  %call83 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !7530
  %tobool84 = icmp ne i8 %call83, 0, !dbg !7530
  br i1 %tobool84, label %if.then85, label %if.end87, !dbg !7532

if.then85:                                        ; preds = %sw.default
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7533
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.45, i64 0, i64 0)), !dbg !7534
  br label %if.end87, !dbg !7534

if.end87:                                         ; preds = %if.then85, %sw.default
  store i8 0, i8* %retval, align 1, !dbg !7535
  br label %return, !dbg !7535

sw.epilog:                                        ; preds = %sw.bb81, %sw.bb
  br label %if.end88, !dbg !7536

if.end88:                                         ; preds = %sw.epilog, %land.lhs.true35, %land.lhs.true32, %land.lhs.true28, %land.lhs.true25, %land.lhs.true23, %if.end21
  %59 = load i32*, i32** %first_stmt_dt0.addr, align 8, !dbg !7537
  %60 = load i32, i32* %59, align 4, !dbg !7539
  %tobool89 = icmp ne i32 %60, 0, !dbg !7539
  br i1 %tobool89, label %if.else104, label %if.then90, !dbg !7540

if.then90:                                        ; preds = %if.end88
  %61 = load i32, i32* %i, align 4, !dbg !7541
  %idxprom91 = zext i32 %61 to i64, !dbg !7543
  %arrayidx92 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 %idxprom91, !dbg !7543
  %62 = load i32, i32* %arrayidx92, align 4, !dbg !7543
  %63 = load i32*, i32** %first_stmt_dt0.addr, align 8, !dbg !7544
  store i32 %62, i32* %63, align 4, !dbg !7545
  %64 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7546
  %tobool93 = icmp ne %union.tree_node* %64, null, !dbg !7546
  br i1 %tobool93, label %if.then94, label %if.else95, !dbg !7548

if.then94:                                        ; preds = %if.then90
  %65 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7549
  %common = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !7549
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7549
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7549
  %67 = load %union.tree_node**, %union.tree_node*** %first_stmt_def0_type.addr, align 8, !dbg !7550
  store %union.tree_node* %66, %union.tree_node** %67, align 8, !dbg !7551
  br label %if.end96, !dbg !7552

if.else95:                                        ; preds = %if.then90
  %68 = load %union.tree_node*, %union.tree_node** %oprnd, align 8, !dbg !7553
  %69 = load %union.tree_node**, %union.tree_node*** %first_stmt_const_oprnd.addr, align 8, !dbg !7554
  store %union.tree_node* %68, %union.tree_node** %69, align 8, !dbg !7555
  br label %if.end96

if.end96:                                         ; preds = %if.else95, %if.then94
  %70 = load i32, i32* %rhs_class, align 4, !dbg !7556
  %cmp97 = icmp ne i32 %70, 3, !dbg !7558
  br i1 %cmp97, label %if.then99, label %if.else101, !dbg !7559

if.then99:                                        ; preds = %if.end96
  %71 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !7560
  %72 = load i32, i32* %ncopies_for_cost.addr, align 4, !dbg !7561
  %arraydecay100 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 0, !dbg !7562
  %73 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !7563
  call void @vect_model_simple_cost(%struct._stmt_vec_info* %71, i32 %72, i32* %arraydecay100, %struct._slp_tree* %73), !dbg !7564
  br label %if.end103, !dbg !7564

if.else101:                                       ; preds = %if.end96
  %74 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !7565
  %75 = load i32, i32* %ncopies_for_cost.addr, align 4, !dbg !7566
  %arrayidx102 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 0, !dbg !7567
  %76 = load i32, i32* %arrayidx102, align 4, !dbg !7567
  %77 = load %struct._slp_tree*, %struct._slp_tree** %slp_node.addr, align 8, !dbg !7568
  call void @vect_model_store_cost(%struct._stmt_vec_info* %74, i32 %75, i32 %76, %struct._slp_tree* %77), !dbg !7569
  br label %if.end103

if.end103:                                        ; preds = %if.else101, %if.then99
  br label %if.end177, !dbg !7570

if.else104:                                       ; preds = %if.end88
  %78 = load i32*, i32** %first_stmt_dt1.addr, align 8, !dbg !7571
  %79 = load i32, i32* %78, align 4, !dbg !7574
  %tobool105 = icmp ne i32 %79, 0, !dbg !7574
  br i1 %tobool105, label %if.else126, label %land.lhs.true106, !dbg !7575

land.lhs.true106:                                 ; preds = %if.else104
  %80 = load i32, i32* %i, align 4, !dbg !7576
  %cmp107 = icmp eq i32 %80, 1, !dbg !7577
  br i1 %cmp107, label %if.then109, label %if.else126, !dbg !7578

if.then109:                                       ; preds = %land.lhs.true106
  %81 = load i32, i32* %i, align 4, !dbg !7579
  %idxprom110 = zext i32 %81 to i64, !dbg !7581
  %arrayidx111 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 %idxprom110, !dbg !7581
  %82 = load i32, i32* %arrayidx111, align 4, !dbg !7581
  %83 = load i32*, i32** %first_stmt_dt1.addr, align 8, !dbg !7582
  store i32 %82, i32* %83, align 4, !dbg !7583
  %84 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7584
  %tobool112 = icmp ne %union.tree_node* %84, null, !dbg !7584
  br i1 %tobool112, label %if.then113, label %if.else116, !dbg !7586

if.then113:                                       ; preds = %if.then109
  %85 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7587
  %common114 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !7587
  %type115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 2, !dbg !7587
  %86 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !7587
  %87 = load %union.tree_node**, %union.tree_node*** %first_stmt_def1_type.addr, align 8, !dbg !7588
  store %union.tree_node* %86, %union.tree_node** %87, align 8, !dbg !7589
  br label %if.end125, !dbg !7590

if.else116:                                       ; preds = %if.then109
  %88 = load %union.tree_node**, %union.tree_node*** %first_stmt_const_oprnd.addr, align 8, !dbg !7591
  %89 = load %union.tree_node*, %union.tree_node** %88, align 8, !dbg !7594
  %tobool117 = icmp ne %union.tree_node* %89, null, !dbg !7594
  br i1 %tobool117, label %if.then118, label %if.end124, !dbg !7595

if.then118:                                       ; preds = %if.else116
  %call119 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !7596
  %tobool120 = icmp ne i8 %call119, 0, !dbg !7596
  br i1 %tobool120, label %if.then121, label %if.end123, !dbg !7599

if.then121:                                       ; preds = %if.then118
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7600
  %call122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.46, i64 0, i64 0)), !dbg !7601
  br label %if.end123, !dbg !7601

if.end123:                                        ; preds = %if.then121, %if.then118
  store i8 0, i8* %retval, align 1, !dbg !7602
  br label %return, !dbg !7602

if.end124:                                        ; preds = %if.else116
  %91 = load %union.tree_node*, %union.tree_node** %oprnd, align 8, !dbg !7603
  %92 = load %union.tree_node**, %union.tree_node*** %first_stmt_const_oprnd.addr, align 8, !dbg !7604
  store %union.tree_node* %91, %union.tree_node** %92, align 8, !dbg !7605
  br label %if.end125

if.end125:                                        ; preds = %if.end124, %if.then113
  br label %if.end176, !dbg !7606

if.else126:                                       ; preds = %land.lhs.true106, %if.else104
  %93 = load i32, i32* %i, align 4, !dbg !7607
  %cmp127 = icmp eq i32 %93, 0, !dbg !7610
  br i1 %cmp127, label %land.lhs.true129, label %lor.lhs.false143, !dbg !7611

land.lhs.true129:                                 ; preds = %if.else126
  %94 = load i32*, i32** %first_stmt_dt0.addr, align 8, !dbg !7612
  %95 = load i32, i32* %94, align 4, !dbg !7613
  %96 = load i32, i32* %i, align 4, !dbg !7614
  %idxprom130 = zext i32 %96 to i64, !dbg !7615
  %arrayidx131 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 %idxprom130, !dbg !7615
  %97 = load i32, i32* %arrayidx131, align 4, !dbg !7615
  %cmp132 = icmp ne i32 %95, %97, !dbg !7616
  br i1 %cmp132, label %if.then169, label %lor.lhs.false134, !dbg !7617

lor.lhs.false134:                                 ; preds = %land.lhs.true129
  %98 = load %union.tree_node**, %union.tree_node*** %first_stmt_def0_type.addr, align 8, !dbg !7618
  %99 = load %union.tree_node*, %union.tree_node** %98, align 8, !dbg !7619
  %tobool135 = icmp ne %union.tree_node* %99, null, !dbg !7619
  br i1 %tobool135, label %land.lhs.true136, label %lor.lhs.false143, !dbg !7620

land.lhs.true136:                                 ; preds = %lor.lhs.false134
  %100 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7621
  %tobool137 = icmp ne %union.tree_node* %100, null, !dbg !7621
  br i1 %tobool137, label %land.lhs.true138, label %lor.lhs.false143, !dbg !7622

land.lhs.true138:                                 ; preds = %land.lhs.true136
  %101 = load %union.tree_node**, %union.tree_node*** %first_stmt_def0_type.addr, align 8, !dbg !7623
  %102 = load %union.tree_node*, %union.tree_node** %101, align 8, !dbg !7624
  %103 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7625
  %common139 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !7625
  %type140 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common139, i32 0, i32 2, !dbg !7625
  %104 = load %union.tree_node*, %union.tree_node** %type140, align 8, !dbg !7625
  %call141 = call zeroext i8 @types_compatible_p(%union.tree_node* %102, %union.tree_node* %104), !dbg !7626
  %tobool142 = icmp ne i8 %call141, 0, !dbg !7626
  br i1 %tobool142, label %lor.lhs.false143, label %if.then169, !dbg !7627

lor.lhs.false143:                                 ; preds = %land.lhs.true138, %land.lhs.true136, %lor.lhs.false134, %if.else126
  %105 = load i32, i32* %i, align 4, !dbg !7628
  %cmp144 = icmp eq i32 %105, 1, !dbg !7629
  br i1 %cmp144, label %land.lhs.true146, label %lor.lhs.false160, !dbg !7630

land.lhs.true146:                                 ; preds = %lor.lhs.false143
  %106 = load i32*, i32** %first_stmt_dt1.addr, align 8, !dbg !7631
  %107 = load i32, i32* %106, align 4, !dbg !7632
  %108 = load i32, i32* %i, align 4, !dbg !7633
  %idxprom147 = zext i32 %108 to i64, !dbg !7634
  %arrayidx148 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 %idxprom147, !dbg !7634
  %109 = load i32, i32* %arrayidx148, align 4, !dbg !7634
  %cmp149 = icmp ne i32 %107, %109, !dbg !7635
  br i1 %cmp149, label %if.then169, label %lor.lhs.false151, !dbg !7636

lor.lhs.false151:                                 ; preds = %land.lhs.true146
  %110 = load %union.tree_node**, %union.tree_node*** %first_stmt_def1_type.addr, align 8, !dbg !7637
  %111 = load %union.tree_node*, %union.tree_node** %110, align 8, !dbg !7638
  %tobool152 = icmp ne %union.tree_node* %111, null, !dbg !7638
  br i1 %tobool152, label %land.lhs.true153, label %lor.lhs.false160, !dbg !7639

land.lhs.true153:                                 ; preds = %lor.lhs.false151
  %112 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7640
  %tobool154 = icmp ne %union.tree_node* %112, null, !dbg !7640
  br i1 %tobool154, label %land.lhs.true155, label %lor.lhs.false160, !dbg !7641

land.lhs.true155:                                 ; preds = %land.lhs.true153
  %113 = load %union.tree_node**, %union.tree_node*** %first_stmt_def1_type.addr, align 8, !dbg !7642
  %114 = load %union.tree_node*, %union.tree_node** %113, align 8, !dbg !7643
  %115 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7644
  %common156 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !7644
  %type157 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common156, i32 0, i32 2, !dbg !7644
  %116 = load %union.tree_node*, %union.tree_node** %type157, align 8, !dbg !7644
  %call158 = call zeroext i8 @types_compatible_p(%union.tree_node* %114, %union.tree_node* %116), !dbg !7645
  %tobool159 = icmp ne i8 %call158, 0, !dbg !7645
  br i1 %tobool159, label %lor.lhs.false160, label %if.then169, !dbg !7646

lor.lhs.false160:                                 ; preds = %land.lhs.true155, %land.lhs.true153, %lor.lhs.false151, %lor.lhs.false143
  %117 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7647
  %tobool161 = icmp ne %union.tree_node* %117, null, !dbg !7647
  br i1 %tobool161, label %if.end175, label %land.lhs.true162, !dbg !7648

land.lhs.true162:                                 ; preds = %lor.lhs.false160
  %118 = load %union.tree_node**, %union.tree_node*** %first_stmt_const_oprnd.addr, align 8, !dbg !7649
  %119 = load %union.tree_node*, %union.tree_node** %118, align 8, !dbg !7649
  %common163 = bitcast %union.tree_node* %119 to %struct.tree_common*, !dbg !7649
  %type164 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common163, i32 0, i32 2, !dbg !7649
  %120 = load %union.tree_node*, %union.tree_node** %type164, align 8, !dbg !7649
  %121 = load %union.tree_node*, %union.tree_node** %oprnd, align 8, !dbg !7650
  %common165 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !7650
  %type166 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common165, i32 0, i32 2, !dbg !7650
  %122 = load %union.tree_node*, %union.tree_node** %type166, align 8, !dbg !7650
  %call167 = call zeroext i8 @types_compatible_p(%union.tree_node* %120, %union.tree_node* %122), !dbg !7651
  %tobool168 = icmp ne i8 %call167, 0, !dbg !7651
  br i1 %tobool168, label %if.end175, label %if.then169, !dbg !7652

if.then169:                                       ; preds = %land.lhs.true162, %land.lhs.true155, %land.lhs.true146, %land.lhs.true138, %land.lhs.true129
  %call170 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !7653
  %tobool171 = icmp ne i8 %call170, 0, !dbg !7653
  br i1 %tobool171, label %if.then172, label %if.end174, !dbg !7656

if.then172:                                       ; preds = %if.then169
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7657
  %call173 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %123, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.47, i64 0, i64 0)), !dbg !7658
  br label %if.end174, !dbg !7658

if.end174:                                        ; preds = %if.then172, %if.then169
  store i8 0, i8* %retval, align 1, !dbg !7659
  br label %return, !dbg !7659

if.end175:                                        ; preds = %land.lhs.true162, %lor.lhs.false160
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.end125
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %if.end103
  %124 = load i32, i32* %i, align 4, !dbg !7660
  %idxprom178 = zext i32 %124 to i64, !dbg !7661
  %arrayidx179 = getelementptr inbounds [2 x i32], [2 x i32]* %dt, i64 0, i64 %idxprom178, !dbg !7661
  %125 = load i32, i32* %arrayidx179, align 4, !dbg !7661
  switch i32 %125, label %sw.default189 [
    i32 1, label %sw.bb180
    i32 2, label %sw.bb180
    i32 3, label %sw.bb181
  ], !dbg !7662

sw.bb180:                                         ; preds = %if.end177, %if.end177
  br label %sw.epilog195, !dbg !7663

sw.bb181:                                         ; preds = %if.end177
  %126 = load i32, i32* %i, align 4, !dbg !7665
  %cmp182 = icmp eq i32 %126, 0, !dbg !7667
  br i1 %cmp182, label %if.then184, label %if.else186, !dbg !7668

if.then184:                                       ; preds = %sw.bb181
  %127 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %def_stmts0.addr, align 8, !dbg !7669
  %128 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7669
  %call185 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %127, %union.gimple_statement_d* %128), !dbg !7669
  br label %if.end188, !dbg !7669

if.else186:                                       ; preds = %sw.bb181
  %129 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %def_stmts1.addr, align 8, !dbg !7670
  %130 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7670
  %call187 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %129, %union.gimple_statement_d* %130), !dbg !7670
  br label %if.end188

if.end188:                                        ; preds = %if.else186, %if.then184
  br label %sw.epilog195, !dbg !7671

sw.default189:                                    ; preds = %if.end177
  %call190 = call zeroext i8 @vect_print_dump_info(i32 8), !dbg !7672
  %tobool191 = icmp ne i8 %call190, 0, !dbg !7672
  br i1 %tobool191, label %if.then192, label %if.end194, !dbg !7674

if.then192:                                       ; preds = %sw.default189
  %131 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7675
  %call193 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %131, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.48, i64 0, i64 0)), !dbg !7677
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7678
  %133 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7679
  call void @print_generic_expr(%struct._IO_FILE* %132, %union.tree_node* %133, i32 2), !dbg !7680
  br label %if.end194, !dbg !7681

if.end194:                                        ; preds = %if.then192, %sw.default189
  store i8 0, i8* %retval, align 1, !dbg !7682
  br label %return, !dbg !7682

sw.epilog195:                                     ; preds = %if.end188, %sw.bb180
  br label %for.inc, !dbg !7683

for.inc:                                          ; preds = %sw.epilog195
  %134 = load i32, i32* %i, align 4, !dbg !7684
  %inc = add i32 %134, 1, !dbg !7684
  store i32 %inc, i32* %i, align 4, !dbg !7684
  br label %for.cond, !dbg !7685, !llvm.loop !7686

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !7688
  br label %return, !dbg !7688

return:                                           ; preds = %for.end, %if.end194, %if.end174, %if.end123, %if.end87, %if.end77, %if.end62, %if.end20
  %135 = load i8, i8* %retval, align 1, !dbg !7689
  ret i8 %135, !dbg !7689
}

declare dso_local i32 @vect_supportable_dr_alignment(%struct.data_reference*) #3

declare dso_local void @vect_model_load_cost(%struct._stmt_vec_info*, i32, %struct._slp_tree*) #3

declare dso_local i32 @vect_get_place_in_interleaving_chain(%union.gimple_statement_d*, %union.gimple_statement_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %vec_, i32 %obj_) #0 !dbg !7690 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %obj_.addr = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !7694, metadata !DIExpression()), !dbg !7695
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !7696, metadata !DIExpression()), !dbg !7695
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7695
  %call = call i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %0, i32 1), !dbg !7695
  %1 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7695
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %1, align 8, !dbg !7695
  %tobool = icmp ne %struct.VEC_int_heap* %2, null, !dbg !7695
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7695

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7695
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %3, align 8, !dbg !7695
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !7695
  br label %cond.end, !dbg !7695

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7695

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7695
  %5 = load i32, i32* %obj_.addr, align 4, !dbg !7695
  %call1 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond, i32 %5), !dbg !7695
  ret i32* %call1, !dbg !7695
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._slp_tree** @VEC_slp_tree_heap_safe_push(%struct.VEC_slp_tree_heap** %vec_, %struct._slp_tree* %obj_) #0 !dbg !7697 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_tree_heap**, align 8
  %obj_.addr = alloca %struct._slp_tree*, align 8
  store %struct.VEC_slp_tree_heap** %vec_, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_heap*** %vec_.addr, metadata !7700, metadata !DIExpression()), !dbg !7701
  store %struct._slp_tree* %obj_, %struct._slp_tree** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %obj_.addr, metadata !7702, metadata !DIExpression()), !dbg !7701
  %0 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !7701
  %call = call i32 @VEC_slp_tree_heap_reserve(%struct.VEC_slp_tree_heap** %0, i32 1), !dbg !7701
  %1 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !7701
  %2 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %1, align 8, !dbg !7701
  %tobool = icmp ne %struct.VEC_slp_tree_heap* %2, null, !dbg !7701
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7701

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !7701
  %4 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %3, align 8, !dbg !7701
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %4, i32 0, i32 0, !dbg !7701
  br label %cond.end, !dbg !7701

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7701

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7701
  %5 = load %struct._slp_tree*, %struct._slp_tree** %obj_.addr, align 8, !dbg !7701
  %call1 = call %struct._slp_tree** @VEC_slp_tree_base_quick_push(%struct.VEC_slp_tree_base* %cond, %struct._slp_tree* %5), !dbg !7701
  ret %struct._slp_tree** %call1, !dbg !7701
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !7703 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7706, metadata !DIExpression()), !dbg !7707
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7708
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7709
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !7710
  %1 = load i32, i32* %num_ops, align 4, !dbg !7710
  ret i32 %1, !dbg !7711
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7712 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7715, metadata !DIExpression()), !dbg !7716
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7717, metadata !DIExpression()), !dbg !7718
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7719
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7721
  %tobool = icmp ne i8 %call, 0, !dbg !7721
  br i1 %tobool, label %if.then, label %if.else, !dbg !7722

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7723
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !7725
  %2 = load i32, i32* %i.addr, align 4, !dbg !7726
  %idxprom = zext i32 %2 to i64, !dbg !7725
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !7725
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7725
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !7727
  br label %return, !dbg !7727

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7728
  br label %return, !dbg !7728

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7729
  ret %union.tree_node* %4, !dbg !7729
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !7730 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7731, metadata !DIExpression()), !dbg !7732
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7733
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7734
  %cmp = icmp uge i32 %call, 1, !dbg !7735
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7736

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7737
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7738
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7739
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7740
  %land.ext = zext i1 %2 to i32, !dbg !7736
  %conv = trunc i32 %land.ext to i8, !dbg !7734
  ret i8 %conv, !dbg !7741
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !7742 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7745, metadata !DIExpression()), !dbg !7746
  call void @llvm.dbg.declare(metadata i64* %off, metadata !7747, metadata !DIExpression()), !dbg !7748
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7749
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !7750
  %idxprom = zext i32 %call to i64, !dbg !7751
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !7751
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7751
  store i64 %1, i64* %off, align 8, !dbg !7752
  %2 = load i64, i64* %off, align 8, !dbg !7753
  %cmp = icmp ne i64 %2, 0, !dbg !7753
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7753

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !7753
  br label %cond.end, !dbg !7753

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7753

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7753
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7754
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !7755
  %5 = load i64, i64* %off, align 8, !dbg !7756
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !7757
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !7758
  ret %union.tree_node** %6, !dbg !7759
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !7760 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7763, metadata !DIExpression()), !dbg !7764
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7765
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7766
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !7767
  ret i32 %call1, !dbg !7768
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !7769 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7772, metadata !DIExpression()), !dbg !7773
  %0 = load i32, i32* %code.addr, align 4, !dbg !7774
  %idxprom = zext i32 %0 to i64, !dbg !7775
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7775
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7775
  ret i32 %1, !dbg !7776
}

declare dso_local zeroext i8 @vect_is_simple_use(%union.tree_node*, %struct._loop_vec_info*, %struct._bb_vec_info*, %union.gimple_statement_d**, %union.tree_node**, i32*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !7777 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7780, metadata !DIExpression()), !dbg !7781
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7782
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7783
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !7784
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7784
  ret %struct.basic_block_def* %1, !dbg !7785
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !7786 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7787, metadata !DIExpression()), !dbg !7788
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7789
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7790
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7791
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7791
  ret %union.tree_node* %1, !dbg !7792
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7793 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7794, metadata !DIExpression()), !dbg !7795
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7796
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7797
  ret %union.tree_node* %call, !dbg !7798
}

declare dso_local void @vect_model_simple_cost(%struct._stmt_vec_info*, i32, i32*, %struct._slp_tree*) #3

declare dso_local void @vect_model_store_cost(%struct._stmt_vec_info*, i32, i32, %struct._slp_tree*) #3

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %vec_, i32 %alloc_) #0 !dbg !7799 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !7802, metadata !DIExpression()), !dbg !7803
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7804, metadata !DIExpression()), !dbg !7803
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7805, metadata !DIExpression()), !dbg !7803
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7803
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !7803
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !7803
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7803

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7803
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !7803
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !7803
  br label %cond.end, !dbg !7803

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7803

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7803
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7803
  %call = call i32 @VEC_int_base_space(%struct.VEC_int_base* %cond, i32 %4), !dbg !7803
  %tobool1 = icmp ne i32 %call, 0, !dbg !7803
  %lnot = xor i1 %tobool1, true, !dbg !7803
  %lnot.ext = zext i1 %lnot to i32, !dbg !7803
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7803
  %5 = load i32, i32* %extend, align 4, !dbg !7806
  %tobool2 = icmp ne i32 %5, 0, !dbg !7806
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7803

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7806
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %6, align 8, !dbg !7806
  %8 = bitcast %struct.VEC_int_heap* %7 to i8*, !dbg !7806
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7806
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !7806
  %10 = bitcast i8* %call3 to %struct.VEC_int_heap*, !dbg !7806
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7806
  store %struct.VEC_int_heap* %10, %struct.VEC_int_heap** %11, align 8, !dbg !7806
  br label %if.end, !dbg !7806

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7803
  ret i32 %12, !dbg !7803
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !7808 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !7812, metadata !DIExpression()), !dbg !7813
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !7814, metadata !DIExpression()), !dbg !7813
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !7815, metadata !DIExpression()), !dbg !7813
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7813
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !7813
  %1 = load i32, i32* %num, align 4, !dbg !7813
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7813
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !7813
  %3 = load i32, i32* %alloc, align 4, !dbg !7813
  %cmp = icmp ult i32 %1, %3, !dbg !7813
  %conv = zext i1 %cmp to i32, !dbg !7813
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7813
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !7813
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7813
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !7813
  %6 = load i32, i32* %num1, align 4, !dbg !7813
  %inc = add i32 %6, 1, !dbg !7813
  store i32 %inc, i32* %num1, align 4, !dbg !7813
  %idxprom = zext i32 %6 to i64, !dbg !7813
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !7813
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !7813
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !7813
  %8 = load i32*, i32** %slot_, align 8, !dbg !7813
  store i32 %7, i32* %8, align 4, !dbg !7813
  %9 = load i32*, i32** %slot_, align 8, !dbg !7813
  ret i32* %9, !dbg !7813
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_space(%struct.VEC_int_base* %vec_, i32 %alloc_) #0 !dbg !7816 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !7819, metadata !DIExpression()), !dbg !7820
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7821, metadata !DIExpression()), !dbg !7820
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7820
  %cmp = icmp sge i32 %0, 0, !dbg !7820
  %conv = zext i1 %cmp to i32, !dbg !7820
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7820
  %tobool = icmp ne %struct.VEC_int_base* %1, null, !dbg !7820
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7820

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7820
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !7820
  %3 = load i32, i32* %alloc, align 4, !dbg !7820
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7820
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 0, !dbg !7820
  %5 = load i32, i32* %num, align 4, !dbg !7820
  %sub = sub i32 %3, %5, !dbg !7820
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7820
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7820
  %conv2 = zext i1 %cmp1 to i32, !dbg !7820
  br label %cond.end, !dbg !7820

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7820
  %tobool3 = icmp ne i32 %7, 0, !dbg !7820
  %lnot = xor i1 %tobool3, true, !dbg !7820
  %lnot.ext = zext i1 %lnot to i32, !dbg !7820
  br label %cond.end, !dbg !7820

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7820
  ret i32 %cond, !dbg !7820
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_slp_tree_heap_reserve(%struct.VEC_slp_tree_heap** %vec_, i32 %alloc_) #0 !dbg !7822 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_slp_tree_heap** %vec_, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_heap*** %vec_.addr, metadata !7825, metadata !DIExpression()), !dbg !7826
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7827, metadata !DIExpression()), !dbg !7826
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7828, metadata !DIExpression()), !dbg !7826
  %0 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !7826
  %1 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %0, align 8, !dbg !7826
  %tobool = icmp ne %struct.VEC_slp_tree_heap* %1, null, !dbg !7826
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7826

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !7826
  %3 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %2, align 8, !dbg !7826
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %3, i32 0, i32 0, !dbg !7826
  br label %cond.end, !dbg !7826

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7826

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7826
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7826
  %call = call i32 @VEC_slp_tree_base_space(%struct.VEC_slp_tree_base* %cond, i32 %4), !dbg !7826
  %tobool1 = icmp ne i32 %call, 0, !dbg !7826
  %lnot = xor i1 %tobool1, true, !dbg !7826
  %lnot.ext = zext i1 %lnot to i32, !dbg !7826
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7826
  %5 = load i32, i32* %extend, align 4, !dbg !7829
  %tobool2 = icmp ne i32 %5, 0, !dbg !7829
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7826

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !7829
  %7 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %6, align 8, !dbg !7829
  %8 = bitcast %struct.VEC_slp_tree_heap* %7 to i8*, !dbg !7829
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7829
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7829
  %10 = bitcast i8* %call3 to %struct.VEC_slp_tree_heap*, !dbg !7829
  %11 = load %struct.VEC_slp_tree_heap**, %struct.VEC_slp_tree_heap*** %vec_.addr, align 8, !dbg !7829
  store %struct.VEC_slp_tree_heap* %10, %struct.VEC_slp_tree_heap** %11, align 8, !dbg !7829
  br label %if.end, !dbg !7829

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7826
  ret i32 %12, !dbg !7826
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._slp_tree** @VEC_slp_tree_base_quick_push(%struct.VEC_slp_tree_base* %vec_, %struct._slp_tree* %obj_) #0 !dbg !7831 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_tree_base*, align 8
  %obj_.addr = alloca %struct._slp_tree*, align 8
  %slot_ = alloca %struct._slp_tree**, align 8
  store %struct.VEC_slp_tree_base* %vec_, %struct.VEC_slp_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_base** %vec_.addr, metadata !7835, metadata !DIExpression()), !dbg !7836
  store %struct._slp_tree* %obj_, %struct._slp_tree** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %obj_.addr, metadata !7837, metadata !DIExpression()), !dbg !7836
  call void @llvm.dbg.declare(metadata %struct._slp_tree*** %slot_, metadata !7838, metadata !DIExpression()), !dbg !7836
  %0 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7836
  %num = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %0, i32 0, i32 0, !dbg !7836
  %1 = load i32, i32* %num, align 8, !dbg !7836
  %2 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7836
  %alloc = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %2, i32 0, i32 1, !dbg !7836
  %3 = load i32, i32* %alloc, align 4, !dbg !7836
  %cmp = icmp ult i32 %1, %3, !dbg !7836
  %conv = zext i1 %cmp to i32, !dbg !7836
  %4 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7836
  %vec = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %4, i32 0, i32 2, !dbg !7836
  %5 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7836
  %num1 = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %5, i32 0, i32 0, !dbg !7836
  %6 = load i32, i32* %num1, align 8, !dbg !7836
  %inc = add i32 %6, 1, !dbg !7836
  store i32 %inc, i32* %num1, align 8, !dbg !7836
  %idxprom = zext i32 %6 to i64, !dbg !7836
  %arrayidx = getelementptr inbounds [1 x %struct._slp_tree*], [1 x %struct._slp_tree*]* %vec, i64 0, i64 %idxprom, !dbg !7836
  store %struct._slp_tree** %arrayidx, %struct._slp_tree*** %slot_, align 8, !dbg !7836
  %7 = load %struct._slp_tree*, %struct._slp_tree** %obj_.addr, align 8, !dbg !7836
  %8 = load %struct._slp_tree**, %struct._slp_tree*** %slot_, align 8, !dbg !7836
  store %struct._slp_tree* %7, %struct._slp_tree** %8, align 8, !dbg !7836
  %9 = load %struct._slp_tree**, %struct._slp_tree*** %slot_, align 8, !dbg !7836
  ret %struct._slp_tree** %9, !dbg !7836
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_slp_tree_base_space(%struct.VEC_slp_tree_base* %vec_, i32 %alloc_) #0 !dbg !7839 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_slp_tree_base* %vec_, %struct.VEC_slp_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_base** %vec_.addr, metadata !7842, metadata !DIExpression()), !dbg !7843
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7844, metadata !DIExpression()), !dbg !7843
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7843
  %cmp = icmp sge i32 %0, 0, !dbg !7843
  %conv = zext i1 %cmp to i32, !dbg !7843
  %1 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7843
  %tobool = icmp ne %struct.VEC_slp_tree_base* %1, null, !dbg !7843
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7843

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7843
  %alloc = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %2, i32 0, i32 1, !dbg !7843
  %3 = load i32, i32* %alloc, align 4, !dbg !7843
  %4 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !7843
  %num = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %4, i32 0, i32 0, !dbg !7843
  %5 = load i32, i32* %num, align 8, !dbg !7843
  %sub = sub i32 %3, %5, !dbg !7843
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7843
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7843
  %conv2 = zext i1 %cmp1 to i32, !dbg !7843
  br label %cond.end, !dbg !7843

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7843
  %tobool3 = icmp ne i32 %7, 0, !dbg !7843
  %lnot = xor i1 %tobool3, true, !dbg !7843
  %lnot.ext = zext i1 %lnot to i32, !dbg !7843
  br label %cond.end, !dbg !7843

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7843
  ret i32 %cond, !dbg !7843
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !7845 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !7850, metadata !DIExpression()), !dbg !7851
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7852, metadata !DIExpression()), !dbg !7851
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !7853, metadata !DIExpression()), !dbg !7851
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7854
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !7854
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7854

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7854
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7854
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !7854
  %3 = load i32, i32* %num, align 4, !dbg !7854
  %cmp = icmp ult i32 %1, %3, !dbg !7854
  br i1 %cmp, label %if.then, label %if.else, !dbg !7851

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7856
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !7856
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7856
  %idxprom = zext i32 %5 to i64, !dbg !7856
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !7856
  %6 = load i32, i32* %arrayidx, align 4, !dbg !7856
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !7856
  store i32 %6, i32* %7, align 4, !dbg !7856
  store i32 1, i32* %retval, align 4, !dbg !7856
  br label %return, !dbg !7856

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !7858
  store i32 0, i32* %8, align 4, !dbg !7858
  store i32 0, i32* %retval, align 4, !dbg !7858
  br label %return, !dbg !7858

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7851
  ret i32 %9, !dbg !7851
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_length(%struct.VEC_int_base* %vec_) #0 !dbg !7860 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !7863, metadata !DIExpression()), !dbg !7864
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7864
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !7864
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7864

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7864
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %1, i32 0, i32 0, !dbg !7864
  %2 = load i32, i32* %num, align 4, !dbg !7864
  br label %cond.end, !dbg !7864

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7864

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7864
  ret i32 %cond, !dbg !7864
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #3

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !7865 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !7868, metadata !DIExpression()), !dbg !7869
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !7870, metadata !DIExpression()), !dbg !7871
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7872
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !7874
  %1 = load i8*, i8** %popcount, align 8, !dbg !7874
  %tobool = icmp ne i8* %1, null, !dbg !7872
  br i1 %tobool, label %if.then, label %if.end7, !dbg !7875

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !7876, metadata !DIExpression()), !dbg !7878
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7879
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !7879
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !7879
  %div = udiv i32 %3, 64, !dbg !7879
  %idxprom = zext i32 %div to i64, !dbg !7879
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7879
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7879
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !7879
  %rem = urem i32 %5, 64, !dbg !7879
  %sh_prom = zext i32 %rem to i64, !dbg !7879
  %shr = lshr i64 %4, %sh_prom, !dbg !7879
  %and = and i64 %shr, 1, !dbg !7879
  %conv = trunc i64 %and to i8, !dbg !7879
  store i8 %conv, i8* %oldbit, align 1, !dbg !7880
  %6 = load i8, i8* %oldbit, align 1, !dbg !7881
  %tobool1 = icmp ne i8 %6, 0, !dbg !7881
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !7883

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7884
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !7885
  %8 = load i8*, i8** %popcount3, align 8, !dbg !7885
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !7886
  %div4 = udiv i32 %9, 64, !dbg !7887
  %idxprom5 = zext i32 %div4 to i64, !dbg !7884
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !7884
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !7888
  %inc = add i8 %10, 1, !dbg !7888
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !7888
  br label %if.end, !dbg !7884

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !7889

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !7890
  %rem8 = urem i32 %11, 64, !dbg !7891
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !7892
  %shl = shl i64 1, %sh_prom9, !dbg !7892
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7893
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !7894
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !7895
  %div11 = udiv i32 %13, 64, !dbg !7896
  %idxprom12 = zext i32 %div11 to i64, !dbg !7893
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !7893
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !7897
  %or = or i64 %14, %shl, !dbg !7897
  store i64 %or, i64* %arrayidx13, align 8, !dbg !7897
  ret void, !dbg !7898
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_supported_slp_permutation_p(%struct._slp_instance* %instance) #0 !dbg !7899 {
entry:
  %retval = alloca i8, align 1
  %instance.addr = alloca %struct._slp_instance*, align 8
  %node = alloca %struct._slp_tree*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %first_load = alloca %union.gimple_statement_d*, align 8
  %sorted_loads = alloca %struct.VEC_slp_tree_heap*, align 8
  %index = alloca i32, align 4
  %tmp_loads = alloca %struct._slp_tree**, align 8
  %group_size = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %load = alloca %struct._slp_tree*, align 8
  %scalar_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct._slp_instance* %instance, %struct._slp_instance** %instance.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %instance.addr, metadata !7902, metadata !DIExpression()), !dbg !7903
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node, metadata !7904, metadata !DIExpression()), !dbg !7905
  %0 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7906
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %0, i32 0, i32 5, !dbg !7906
  %1 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !7906
  %tobool = icmp ne %struct.VEC_slp_tree_heap* %1, null, !dbg !7906
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7906

cond.true:                                        ; preds = %entry
  %2 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7906
  %loads1 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %2, i32 0, i32 5, !dbg !7906
  %3 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads1, align 8, !dbg !7906
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %3, i32 0, i32 0, !dbg !7906
  br label %cond.end, !dbg !7906

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7906

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7906
  %call = call %struct._slp_tree* @VEC_slp_tree_base_index(%struct.VEC_slp_tree_base* %cond, i32 0), !dbg !7906
  store %struct._slp_tree* %call, %struct._slp_tree** %node, align 8, !dbg !7905
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7907, metadata !DIExpression()), !dbg !7908
  %4 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !7909
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %4, i32 0, i32 2, !dbg !7909
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !7909
  %tobool2 = icmp ne %struct.VEC_gimple_heap* %5, null, !dbg !7909
  br i1 %tobool2, label %cond.true3, label %cond.false6, !dbg !7909

cond.true3:                                       ; preds = %cond.end
  %6 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !7909
  %stmts4 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %6, i32 0, i32 2, !dbg !7909
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts4, align 8, !dbg !7909
  %base5 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %7, i32 0, i32 0, !dbg !7909
  br label %cond.end7, !dbg !7909

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !7909

cond.end7:                                        ; preds = %cond.false6, %cond.true3
  %cond8 = phi %struct.VEC_gimple_base* [ %base5, %cond.true3 ], [ null, %cond.false6 ], !dbg !7909
  %call9 = call %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond8, i32 0), !dbg !7909
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %stmt, align 8, !dbg !7908
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %first_load, metadata !7910, metadata !DIExpression()), !dbg !7911
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7912
  %call10 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %8), !dbg !7912
  %first_dr = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call10, i32 0, i32 17, !dbg !7912
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr, align 8, !dbg !7912
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %first_load, align 8, !dbg !7911
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_heap** %sorted_loads, metadata !7913, metadata !DIExpression()), !dbg !7914
  store %struct.VEC_slp_tree_heap* null, %struct.VEC_slp_tree_heap** %sorted_loads, align 8, !dbg !7914
  call void @llvm.dbg.declare(metadata i32* %index, metadata !7915, metadata !DIExpression()), !dbg !7916
  call void @llvm.dbg.declare(metadata %struct._slp_tree*** %tmp_loads, metadata !7917, metadata !DIExpression()), !dbg !7918
  store %struct._slp_tree** null, %struct._slp_tree*** %tmp_loads, align 8, !dbg !7918
  call void @llvm.dbg.declare(metadata i32* %group_size, metadata !7919, metadata !DIExpression()), !dbg !7920
  %10 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7921
  %group_size11 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %10, i32 0, i32 1, !dbg !7921
  %11 = load i32, i32* %group_size11, align 8, !dbg !7921
  store i32 %11, i32* %group_size, align 4, !dbg !7920
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7922, metadata !DIExpression()), !dbg !7923
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7924, metadata !DIExpression()), !dbg !7925
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %load, metadata !7926, metadata !DIExpression()), !dbg !7927
  %12 = load i32, i32* %group_size, align 4, !dbg !7928
  %conv = sext i32 %12 to i64, !dbg !7928
  %mul = mul i64 8, %conv, !dbg !7929
  %call12 = call i8* @xmalloc(i64 %mul), !dbg !7930
  %13 = bitcast i8* %call12 to %struct._slp_tree**, !dbg !7931
  store %struct._slp_tree** %13, %struct._slp_tree*** %tmp_loads, align 8, !dbg !7932
  store i32 0, i32* %i, align 4, !dbg !7933
  store i32 0, i32* %j, align 4, !dbg !7935
  br label %for.cond, !dbg !7936

for.cond:                                         ; preds = %for.inc, %cond.end7
  %14 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7937
  %load_permutation = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %14, i32 0, i32 4, !dbg !7937
  %15 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !7937
  %tobool13 = icmp ne %struct.VEC_int_heap* %15, null, !dbg !7937
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !7937

cond.true14:                                      ; preds = %for.cond
  %16 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7937
  %load_permutation15 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %16, i32 0, i32 4, !dbg !7937
  %17 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation15, align 8, !dbg !7937
  %base16 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %17, i32 0, i32 0, !dbg !7937
  br label %cond.end18, !dbg !7937

cond.false17:                                     ; preds = %for.cond
  br label %cond.end18, !dbg !7937

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_int_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !7937
  %18 = load i32, i32* %i, align 4, !dbg !7937
  %call20 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond19, i32 %18, i32* %index), !dbg !7937
  %tobool21 = icmp ne i32 %call20, 0, !dbg !7937
  br i1 %tobool21, label %land.rhs, label %land.end, !dbg !7939

land.rhs:                                         ; preds = %cond.end18
  %19 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7940
  %loads22 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %19, i32 0, i32 5, !dbg !7940
  %20 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads22, align 8, !dbg !7940
  %tobool23 = icmp ne %struct.VEC_slp_tree_heap* %20, null, !dbg !7940
  br i1 %tobool23, label %cond.true24, label %cond.false27, !dbg !7940

cond.true24:                                      ; preds = %land.rhs
  %21 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7940
  %loads25 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %21, i32 0, i32 5, !dbg !7940
  %22 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads25, align 8, !dbg !7940
  %base26 = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %22, i32 0, i32 0, !dbg !7940
  br label %cond.end28, !dbg !7940

cond.false27:                                     ; preds = %land.rhs
  br label %cond.end28, !dbg !7940

cond.end28:                                       ; preds = %cond.false27, %cond.true24
  %cond29 = phi %struct.VEC_slp_tree_base* [ %base26, %cond.true24 ], [ null, %cond.false27 ], !dbg !7940
  %23 = load i32, i32* %j, align 4, !dbg !7940
  %call30 = call i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %cond29, i32 %23, %struct._slp_tree** %load), !dbg !7940
  %tobool31 = icmp ne i32 %call30, 0, !dbg !7939
  br label %land.end

land.end:                                         ; preds = %cond.end28, %cond.end18
  %24 = phi i1 [ false, %cond.end18 ], [ %tobool31, %cond.end28 ], !dbg !7941
  br i1 %24, label %for.body, label %for.end, !dbg !7942

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %scalar_stmt, metadata !7943, metadata !DIExpression()), !dbg !7945
  %25 = load %struct._slp_tree*, %struct._slp_tree** %load, align 8, !dbg !7946
  %stmts32 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %25, i32 0, i32 2, !dbg !7946
  %26 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts32, align 8, !dbg !7946
  %tobool33 = icmp ne %struct.VEC_gimple_heap* %26, null, !dbg !7946
  br i1 %tobool33, label %cond.true34, label %cond.false37, !dbg !7946

cond.true34:                                      ; preds = %for.body
  %27 = load %struct._slp_tree*, %struct._slp_tree** %load, align 8, !dbg !7946
  %stmts35 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %27, i32 0, i32 2, !dbg !7946
  %28 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts35, align 8, !dbg !7946
  %base36 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %28, i32 0, i32 0, !dbg !7946
  br label %cond.end38, !dbg !7946

cond.false37:                                     ; preds = %for.body
  br label %cond.end38, !dbg !7946

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi %struct.VEC_gimple_base* [ %base36, %cond.true34 ], [ null, %cond.false37 ], !dbg !7946
  %call40 = call %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond39, i32 0), !dbg !7946
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %scalar_stmt, align 8, !dbg !7945
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scalar_stmt, align 8, !dbg !7947
  %call41 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %29), !dbg !7947
  %first_dr42 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call41, i32 0, i32 17, !dbg !7947
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr42, align 8, !dbg !7947
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load, align 8, !dbg !7949
  %cmp = icmp ne %union.gimple_statement_d* %30, %31, !dbg !7950
  br i1 %cmp, label %if.then, label %if.end48, !dbg !7951

if.then:                                          ; preds = %cond.end38
  %call44 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !7952
  %tobool45 = icmp ne i8 %call44, 0, !dbg !7952
  br i1 %tobool45, label %if.then46, label %if.end, !dbg !7955

if.then46:                                        ; preds = %if.then
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7956
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.51, i64 0, i64 0)), !dbg !7958
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7959
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scalar_stmt, align 8, !dbg !7960
  call void @print_gimple_stmt(%struct._IO_FILE* %33, %union.gimple_statement_d* %34, i32 0, i32 2), !dbg !7961
  br label %if.end, !dbg !7962

if.end:                                           ; preds = %if.then46, %if.then
  %35 = load %struct._slp_tree**, %struct._slp_tree*** %tmp_loads, align 8, !dbg !7963
  %36 = bitcast %struct._slp_tree** %35 to i8*, !dbg !7963
  call void @free(i8* %36), !dbg !7964
  store i8 0, i8* %retval, align 1, !dbg !7965
  br label %return, !dbg !7965

if.end48:                                         ; preds = %cond.end38
  %37 = load %struct._slp_tree*, %struct._slp_tree** %load, align 8, !dbg !7966
  %38 = load %struct._slp_tree**, %struct._slp_tree*** %tmp_loads, align 8, !dbg !7967
  %39 = load i32, i32* %index, align 4, !dbg !7968
  %idxprom = sext i32 %39 to i64, !dbg !7967
  %arrayidx = getelementptr inbounds %struct._slp_tree*, %struct._slp_tree** %38, i64 %idxprom, !dbg !7967
  store %struct._slp_tree* %37, %struct._slp_tree** %arrayidx, align 8, !dbg !7969
  br label %for.inc, !dbg !7970

for.inc:                                          ; preds = %if.end48
  %40 = load i32, i32* %group_size, align 4, !dbg !7971
  %41 = load i32, i32* %i, align 4, !dbg !7972
  %add = add nsw i32 %41, %40, !dbg !7972
  store i32 %add, i32* %i, align 4, !dbg !7972
  %42 = load i32, i32* %j, align 4, !dbg !7973
  %inc = add nsw i32 %42, 1, !dbg !7973
  store i32 %inc, i32* %j, align 4, !dbg !7973
  br label %for.cond, !dbg !7974, !llvm.loop !7975

for.end:                                          ; preds = %land.end
  %43 = load i32, i32* %group_size, align 4, !dbg !7977
  %call49 = call %struct.VEC_slp_tree_heap* @VEC_slp_tree_heap_alloc(i32 %43), !dbg !7977
  store %struct.VEC_slp_tree_heap* %call49, %struct.VEC_slp_tree_heap** %sorted_loads, align 8, !dbg !7978
  store i32 0, i32* %i, align 4, !dbg !7979
  br label %for.cond50, !dbg !7981

for.cond50:                                       ; preds = %for.inc57, %for.end
  %44 = load i32, i32* %i, align 4, !dbg !7982
  %45 = load i32, i32* %group_size, align 4, !dbg !7984
  %cmp51 = icmp slt i32 %44, %45, !dbg !7985
  br i1 %cmp51, label %for.body53, label %for.end59, !dbg !7986

for.body53:                                       ; preds = %for.cond50
  %46 = load %struct._slp_tree**, %struct._slp_tree*** %tmp_loads, align 8, !dbg !7987
  %47 = load i32, i32* %i, align 4, !dbg !7987
  %idxprom54 = sext i32 %47 to i64, !dbg !7987
  %arrayidx55 = getelementptr inbounds %struct._slp_tree*, %struct._slp_tree** %46, i64 %idxprom54, !dbg !7987
  %48 = load %struct._slp_tree*, %struct._slp_tree** %arrayidx55, align 8, !dbg !7987
  %call56 = call %struct._slp_tree** @VEC_slp_tree_heap_safe_push(%struct.VEC_slp_tree_heap** %sorted_loads, %struct._slp_tree* %48), !dbg !7987
  br label %for.inc57, !dbg !7987

for.inc57:                                        ; preds = %for.body53
  %49 = load i32, i32* %i, align 4, !dbg !7988
  %inc58 = add nsw i32 %49, 1, !dbg !7988
  store i32 %inc58, i32* %i, align 4, !dbg !7988
  br label %for.cond50, !dbg !7989, !llvm.loop !7990

for.end59:                                        ; preds = %for.cond50
  %50 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7992
  %loads60 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %50, i32 0, i32 5, !dbg !7992
  call void @VEC_slp_tree_heap_free(%struct.VEC_slp_tree_heap** %loads60), !dbg !7992
  %51 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %sorted_loads, align 8, !dbg !7993
  %52 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !7994
  %loads61 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %52, i32 0, i32 5, !dbg !7994
  store %struct.VEC_slp_tree_heap* %51, %struct.VEC_slp_tree_heap** %loads61, align 8, !dbg !7995
  %53 = load %struct._slp_tree**, %struct._slp_tree*** %tmp_loads, align 8, !dbg !7996
  %54 = bitcast %struct._slp_tree** %53 to i8*, !dbg !7996
  call void @free(i8* %54), !dbg !7997
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7998
  %56 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !8000
  %unrolling_factor = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %56, i32 0, i32 2, !dbg !8000
  %57 = load i32, i32* %unrolling_factor, align 4, !dbg !8000
  %58 = load %struct._slp_instance*, %struct._slp_instance** %instance.addr, align 8, !dbg !8001
  %call62 = call zeroext i8 @vect_transform_slp_perm_load(%union.gimple_statement_d* %55, %struct.VEC_tree_heap* null, %struct.gimple_stmt_iterator* null, i32 %57, %struct._slp_instance* %58, i8 zeroext 1), !dbg !8002
  %tobool63 = icmp ne i8 %call62, 0, !dbg !8002
  br i1 %tobool63, label %if.end65, label %if.then64, !dbg !8003

if.then64:                                        ; preds = %for.end59
  store i8 0, i8* %retval, align 1, !dbg !8004
  br label %return, !dbg !8004

if.end65:                                         ; preds = %for.end59
  store i8 1, i8* %retval, align 1, !dbg !8005
  br label %return, !dbg !8005

return:                                           ; preds = %if.end65, %if.then64, %if.end
  %59 = load i8, i8* %retval, align 1, !dbg !8006
  ret i8 %59, !dbg !8006
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._slp_tree* @VEC_slp_tree_base_index(%struct.VEC_slp_tree_base* %vec_, i32 %ix_) #0 !dbg !8007 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_slp_tree_base* %vec_, %struct.VEC_slp_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_tree_base** %vec_.addr, metadata !8010, metadata !DIExpression()), !dbg !8011
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8012, metadata !DIExpression()), !dbg !8011
  %0 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !8011
  %tobool = icmp ne %struct.VEC_slp_tree_base* %0, null, !dbg !8011
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8011

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8011
  %2 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !8011
  %num = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %2, i32 0, i32 0, !dbg !8011
  %3 = load i32, i32* %num, align 8, !dbg !8011
  %cmp = icmp ult i32 %1, %3, !dbg !8011
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8013
  %land.ext = zext i1 %4 to i32, !dbg !8011
  %5 = load %struct.VEC_slp_tree_base*, %struct.VEC_slp_tree_base** %vec_.addr, align 8, !dbg !8011
  %vec = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %5, i32 0, i32 2, !dbg !8011
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8011
  %idxprom = zext i32 %6 to i64, !dbg !8011
  %arrayidx = getelementptr inbounds [1 x %struct._slp_tree*], [1 x %struct._slp_tree*]* %vec, i64 0, i64 %idxprom, !dbg !8011
  %7 = load %struct._slp_tree*, %struct._slp_tree** %arrayidx, align 8, !dbg !8011
  ret %struct._slp_tree* %7, !dbg !8011
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @get_earlier_stmt(%union.gimple_statement_d* %stmt1, %union.gimple_statement_d* %stmt2) #0 !dbg !8014 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %stmt1.addr = alloca %union.gimple_statement_d*, align 8
  %stmt2.addr = alloca %union.gimple_statement_d*, align 8
  %uid1 = alloca i32, align 4
  %uid2 = alloca i32, align 4
  store %union.gimple_statement_d* %stmt1, %union.gimple_statement_d** %stmt1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1.addr, metadata !8017, metadata !DIExpression()), !dbg !8018
  store %union.gimple_statement_d* %stmt2, %union.gimple_statement_d** %stmt2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2.addr, metadata !8019, metadata !DIExpression()), !dbg !8020
  call void @llvm.dbg.declare(metadata i32* %uid1, metadata !8021, metadata !DIExpression()), !dbg !8022
  call void @llvm.dbg.declare(metadata i32* %uid2, metadata !8023, metadata !DIExpression()), !dbg !8024
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1.addr, align 8, !dbg !8025
  %cmp = icmp eq %union.gimple_statement_d* %0, null, !dbg !8027
  br i1 %cmp, label %if.then, label %if.end, !dbg !8028

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2.addr, align 8, !dbg !8029
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %retval, align 8, !dbg !8030
  br label %return, !dbg !8030

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2.addr, align 8, !dbg !8031
  %cmp1 = icmp eq %union.gimple_statement_d* %2, null, !dbg !8033
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !8034

if.then2:                                         ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1.addr, align 8, !dbg !8035
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %retval, align 8, !dbg !8036
  br label %return, !dbg !8036

if.end3:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1.addr, align 8, !dbg !8037
  %call = call i32 @gimple_uid(%union.gimple_statement_d* %4), !dbg !8038
  store i32 %call, i32* %uid1, align 4, !dbg !8039
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2.addr, align 8, !dbg !8040
  %call4 = call i32 @gimple_uid(%union.gimple_statement_d* %5), !dbg !8041
  store i32 %call4, i32* %uid2, align 4, !dbg !8042
  %6 = load i32, i32* %uid1, align 4, !dbg !8043
  %cmp5 = icmp eq i32 %6, 0, !dbg !8045
  br i1 %cmp5, label %if.then7, label %lor.lhs.false, !dbg !8046

lor.lhs.false:                                    ; preds = %if.end3
  %7 = load i32, i32* %uid2, align 4, !dbg !8047
  %cmp6 = icmp eq i32 %7, 0, !dbg !8048
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !8049

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8050
  br label %return, !dbg !8050

if.end8:                                          ; preds = %lor.lhs.false
  %8 = load i32, i32* %uid1, align 4, !dbg !8051
  %9 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8051
  %tobool = icmp ne %struct.VEC_vec_void_p_heap* %9, null, !dbg !8051
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8051

cond.true:                                        ; preds = %if.end8
  %10 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8051
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %10, i32 0, i32 0, !dbg !8051
  br label %cond.end, !dbg !8051

cond.false:                                       ; preds = %if.end8
  br label %cond.end, !dbg !8051

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vec_void_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8051
  %call9 = call i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %cond), !dbg !8051
  %cmp10 = icmp ule i32 %8, %call9, !dbg !8051
  br i1 %cmp10, label %cond.false12, label %cond.true11, !dbg !8051

cond.true11:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), i32 665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8051
  br label %cond.end13, !dbg !8051

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13, !dbg !8051

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i32 [ 0, %cond.true11 ], [ 0, %cond.false12 ], !dbg !8051
  %11 = load i32, i32* %uid2, align 4, !dbg !8052
  %12 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8052
  %tobool15 = icmp ne %struct.VEC_vec_void_p_heap* %12, null, !dbg !8052
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !8052

cond.true16:                                      ; preds = %cond.end13
  %13 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8052
  %base17 = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %13, i32 0, i32 0, !dbg !8052
  br label %cond.end19, !dbg !8052

cond.false18:                                     ; preds = %cond.end13
  br label %cond.end19, !dbg !8052

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_vec_void_p_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !8052
  %call21 = call i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %cond20), !dbg !8052
  %cmp22 = icmp ule i32 %11, %call21, !dbg !8052
  br i1 %cmp22, label %cond.false24, label %cond.true23, !dbg !8052

cond.true23:                                      ; preds = %cond.end19
  call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), i32 666, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8052
  br label %cond.end25, !dbg !8052

cond.false24:                                     ; preds = %cond.end19
  br label %cond.end25, !dbg !8052

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !8052
  %14 = load i32, i32* %uid1, align 4, !dbg !8053
  %15 = load i32, i32* %uid2, align 4, !dbg !8055
  %cmp27 = icmp ult i32 %14, %15, !dbg !8056
  br i1 %cmp27, label %if.then28, label %if.else, !dbg !8057

if.then28:                                        ; preds = %cond.end25
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1.addr, align 8, !dbg !8058
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %retval, align 8, !dbg !8059
  br label %return, !dbg !8059

if.else:                                          ; preds = %cond.end25
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2.addr, align 8, !dbg !8060
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !8061
  br label %return, !dbg !8061

return:                                           ; preds = %if.else, %if.then28, %if.then7, %if.then2, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8062
  ret %union.gimple_statement_d* %18, !dbg !8062
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_uid(%union.gimple_statement_d* %g) #0 !dbg !8063 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8064, metadata !DIExpression()), !dbg !8065
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8066
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8067
  %uid = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !8068
  %1 = load i32, i32* %uid, align 4, !dbg !8068
  ret i32 %1, !dbg !8069
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %vec_) #0 !dbg !8070 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_base*, align 8
  store %struct.VEC_vec_void_p_base* %vec_, %struct.VEC_vec_void_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_base** %vec_.addr, metadata !8075, metadata !DIExpression()), !dbg !8076
  %0 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8076
  %tobool = icmp ne %struct.VEC_vec_void_p_base* %0, null, !dbg !8076
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8076

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8076
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %1, i32 0, i32 0, !dbg !8076
  %2 = load i32, i32* %num, align 8, !dbg !8076
  br label %cond.end, !dbg !8076

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8076

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8076
  ret i32 %cond, !dbg !8076
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_slp_instance_heap_reserve(%struct.VEC_slp_instance_heap** %vec_, i32 %alloc_) #0 !dbg !8077 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_instance_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_slp_instance_heap** %vec_, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap*** %vec_.addr, metadata !8080, metadata !DIExpression()), !dbg !8081
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8082, metadata !DIExpression()), !dbg !8081
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !8083, metadata !DIExpression()), !dbg !8081
  %0 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !8081
  %1 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %0, align 8, !dbg !8081
  %tobool = icmp ne %struct.VEC_slp_instance_heap* %1, null, !dbg !8081
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8081

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !8081
  %3 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %2, align 8, !dbg !8081
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %3, i32 0, i32 0, !dbg !8081
  br label %cond.end, !dbg !8081

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8081

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8081
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !8081
  %call = call i32 @VEC_slp_instance_base_space(%struct.VEC_slp_instance_base* %cond, i32 %4), !dbg !8081
  %tobool1 = icmp ne i32 %call, 0, !dbg !8081
  %lnot = xor i1 %tobool1, true, !dbg !8081
  %lnot.ext = zext i1 %lnot to i32, !dbg !8081
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !8081
  %5 = load i32, i32* %extend, align 4, !dbg !8084
  %tobool2 = icmp ne i32 %5, 0, !dbg !8084
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8081

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !8084
  %7 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %6, align 8, !dbg !8084
  %8 = bitcast %struct.VEC_slp_instance_heap* %7 to i8*, !dbg !8084
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !8084
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !8084
  %10 = bitcast i8* %call3 to %struct.VEC_slp_instance_heap*, !dbg !8084
  %11 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !8084
  store %struct.VEC_slp_instance_heap* %10, %struct.VEC_slp_instance_heap** %11, align 8, !dbg !8084
  br label %if.end, !dbg !8084

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !8081
  ret i32 %12, !dbg !8081
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._slp_instance** @VEC_slp_instance_base_quick_push(%struct.VEC_slp_instance_base* %vec_, %struct._slp_instance* %obj_) #0 !dbg !8086 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_instance_base*, align 8
  %obj_.addr = alloca %struct._slp_instance*, align 8
  %slot_ = alloca %struct._slp_instance**, align 8
  store %struct.VEC_slp_instance_base* %vec_, %struct.VEC_slp_instance_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_base** %vec_.addr, metadata !8090, metadata !DIExpression()), !dbg !8091
  store %struct._slp_instance* %obj_, %struct._slp_instance** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %obj_.addr, metadata !8092, metadata !DIExpression()), !dbg !8091
  call void @llvm.dbg.declare(metadata %struct._slp_instance*** %slot_, metadata !8093, metadata !DIExpression()), !dbg !8091
  %0 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8091
  %num = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %0, i32 0, i32 0, !dbg !8091
  %1 = load i32, i32* %num, align 8, !dbg !8091
  %2 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8091
  %alloc = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %2, i32 0, i32 1, !dbg !8091
  %3 = load i32, i32* %alloc, align 4, !dbg !8091
  %cmp = icmp ult i32 %1, %3, !dbg !8091
  %conv = zext i1 %cmp to i32, !dbg !8091
  %4 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8091
  %vec = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %4, i32 0, i32 2, !dbg !8091
  %5 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8091
  %num1 = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %5, i32 0, i32 0, !dbg !8091
  %6 = load i32, i32* %num1, align 8, !dbg !8091
  %inc = add i32 %6, 1, !dbg !8091
  store i32 %inc, i32* %num1, align 8, !dbg !8091
  %idxprom = zext i32 %6 to i64, !dbg !8091
  %arrayidx = getelementptr inbounds [1 x %struct._slp_instance*], [1 x %struct._slp_instance*]* %vec, i64 0, i64 %idxprom, !dbg !8091
  store %struct._slp_instance** %arrayidx, %struct._slp_instance*** %slot_, align 8, !dbg !8091
  %7 = load %struct._slp_instance*, %struct._slp_instance** %obj_.addr, align 8, !dbg !8091
  %8 = load %struct._slp_instance**, %struct._slp_instance*** %slot_, align 8, !dbg !8091
  store %struct._slp_instance* %7, %struct._slp_instance** %8, align 8, !dbg !8091
  %9 = load %struct._slp_instance**, %struct._slp_instance*** %slot_, align 8, !dbg !8091
  ret %struct._slp_instance** %9, !dbg !8091
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_slp_instance_base_space(%struct.VEC_slp_instance_base* %vec_, i32 %alloc_) #0 !dbg !8094 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_instance_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_slp_instance_base* %vec_, %struct.VEC_slp_instance_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_base** %vec_.addr, metadata !8097, metadata !DIExpression()), !dbg !8098
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8099, metadata !DIExpression()), !dbg !8098
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8098
  %cmp = icmp sge i32 %0, 0, !dbg !8098
  %conv = zext i1 %cmp to i32, !dbg !8098
  %1 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8098
  %tobool = icmp ne %struct.VEC_slp_instance_base* %1, null, !dbg !8098
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8098

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8098
  %alloc = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %2, i32 0, i32 1, !dbg !8098
  %3 = load i32, i32* %alloc, align 4, !dbg !8098
  %4 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8098
  %num = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %4, i32 0, i32 0, !dbg !8098
  %5 = load i32, i32* %num, align 8, !dbg !8098
  %sub = sub i32 %3, %5, !dbg !8098
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8098
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8098
  %conv2 = zext i1 %cmp1 to i32, !dbg !8098
  br label %cond.end, !dbg !8098

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8098
  %tobool3 = icmp ne i32 %7, 0, !dbg !8098
  %lnot = xor i1 %tobool3, true, !dbg !8098
  %lnot.ext = zext i1 %lnot to i32, !dbg !8098
  br label %cond.end, !dbg !8098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8098
  ret i32 %cond, !dbg !8098
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !8100 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8104, metadata !DIExpression()), !dbg !8105
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8106, metadata !DIExpression()), !dbg !8107
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8108
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8108
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !8108
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8109
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !8110
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8111
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8112
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8113
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !8113
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !8114
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8114
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8115
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !8116
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8117
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8118
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !8119
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !8120
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8121
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !8122
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !8123
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8124
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8125
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !8126
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !8127
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !8128
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8129
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !8130
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !8131
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !8132
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !8133
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8134
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !8135
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !8136
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !8137
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8138
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !8140
  %tobool = icmp ne i8 %call, 0, !dbg !8140
  br i1 %tobool, label %if.then, label %if.end, !dbg !8141

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8142
  br label %return, !dbg !8142

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8143
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !8144
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !8144
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8145
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !8146
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8147
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !8147
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !8147
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !8147
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !8147
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !8147
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !8148
  br label %return, !dbg !8148

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8149
  ret %union.gimple_statement_d* %18, !dbg !8149
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8150 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8155, metadata !DIExpression()), !dbg !8156
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8157
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8158
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8158
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8159
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8160
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8160
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !8161
  %conv = zext i1 %cmp to i32, !dbg !8161
  %conv1 = trunc i32 %conv to i8, !dbg !8162
  ret i8 %conv1, !dbg !8163
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8164 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8167, metadata !DIExpression()), !dbg !8168
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8169
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !8170
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !8171
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8171
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8172
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !8173
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8174
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8175
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !8177
  %tobool = icmp ne i8 %call, 0, !dbg !8177
  br i1 %tobool, label %if.then, label %if.end4, !dbg !8178

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8179
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !8182
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !8183
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8183
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !8184
  br i1 %cmp, label %if.then2, label %if.end, !dbg !8185

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8186
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !8187
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !8188
  br label %if.end, !dbg !8188

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8189
  br label %return, !dbg !8189

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8190
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !8191
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !8191
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8192
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !8193
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8194
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !8194
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !8194
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !8194
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !8194
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8194
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !8195
  br label %return, !dbg !8195

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8196
  ret %union.gimple_statement_d* %13, !dbg !8196
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !8197 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !8200, metadata !DIExpression()), !dbg !8201
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8202, metadata !DIExpression()), !dbg !8203
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !8204, metadata !DIExpression()), !dbg !8205
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !8206, metadata !DIExpression()), !dbg !8207
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8208
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8207
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !8209, metadata !DIExpression()), !dbg !8210
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8211
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !8211
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !8211
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8211
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8210
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !8212, metadata !DIExpression()), !dbg !8213
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8214
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !8214
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !8213
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !8215, metadata !DIExpression()), !dbg !8228
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !8229, metadata !DIExpression()), !dbg !8230
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8231
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !8232
  %conv = zext i8 %call1 to i32, !dbg !8232
  %tobool = icmp ne i32 %conv, 0, !dbg !8232
  %5 = zext i1 %tobool to i64, !dbg !8232
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !8232
  store i32 %cond, i32* %flag, align 4, !dbg !8233
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8234
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !8236
  %cmp = icmp eq i32 %call2, 16, !dbg !8237
  br i1 %cmp, label %if.then, label %if.else, !dbg !8238

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8239
  %8 = load i32, i32* %flag, align 4, !dbg !8239
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !8239
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8239
  br label %for.cond, !dbg !8239

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !8242
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8242
  %lnot = xor i1 %tobool6, true, !dbg !8242
  br i1 %lnot, label %for.body, label %for.end, !dbg !8239

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8244
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !8244
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8246
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !8247
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !8248

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8249
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8250
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8251
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !8252
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8253
  br label %if.end, !dbg !8254

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !8246

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !8242
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8242
  br label %for.cond, !dbg !8242, !llvm.loop !8255

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !8257

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !8258
  %cmp13 = icmp eq i32 %14, 1, !dbg !8261
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !8262

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8263
  %16 = load i32, i32* %flag, align 4, !dbg !8263
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !8263
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8263
  br label %for.cond17, !dbg !8263

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !8266
  %tobool19 = icmp ne i8 %call18, 0, !dbg !8266
  %lnot20 = xor i1 %tobool19, true, !dbg !8266
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !8263

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8268
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !8268
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8270
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !8271
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !8272

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8273
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8274
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8275
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !8276
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8277
  br label %if.end27, !dbg !8278

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !8270

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !8266
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8266
  br label %for.cond17, !dbg !8266, !llvm.loop !8279

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !8281

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8282
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !8284
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8285
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !8286
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !8287

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8288
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !8288
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8291
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !8292
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !8293

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8294
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8295
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8296
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !8297
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8298
  br label %if.end41, !dbg !8299

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !8300

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8301
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !8303
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !8304
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8304
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !8305
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !8306

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8307
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !8308
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !8309
  br label %if.end49, !dbg !8309

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8310
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !8311
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8312
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !8313
  ret void, !dbg !8314
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !8315 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !8318, metadata !DIExpression()), !dbg !8319
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !8320
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !8321
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !8321
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !8322
  ret %union.tree_node* %2, !dbg !8323
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !8324 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8328, metadata !DIExpression()), !dbg !8329
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !8330, metadata !DIExpression()), !dbg !8331
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8332, metadata !DIExpression()), !dbg !8333
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !8334, metadata !DIExpression()), !dbg !8335
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8336
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !8337
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !8335
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !8338, metadata !DIExpression()), !dbg !8339
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8340
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !8341
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8342
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !8343
  store i8 0, i8* %done, align 8, !dbg !8344
  %3 = load i32, i32* %flags.addr, align 4, !dbg !8345
  %and = and i32 %3, 5, !dbg !8345
  %cmp = icmp ne i32 %and, 0, !dbg !8345
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8345

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8345
  br label %cond.end, !dbg !8345

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8345

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8345
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !8346
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !8347
  %conv = zext i8 %call1 to i32, !dbg !8347
  %tobool = icmp ne i32 %conv, 0, !dbg !8347
  %5 = zext i1 %tobool to i64, !dbg !8347
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !8347
  store i32 %cond2, i32* %comp, align 4, !dbg !8348
  %6 = load i32, i32* %flags.addr, align 4, !dbg !8349
  %7 = load i32, i32* %comp, align 4, !dbg !8351
  %and3 = and i32 %6, %7, !dbg !8352
  %cmp4 = icmp eq i32 %and3, 0, !dbg !8353
  br i1 %cmp4, label %if.then, label %if.end, !dbg !8354

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8355
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !8357
  store i8 1, i8* %done6, align 8, !dbg !8358
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8359
  br label %return, !dbg !8359

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8360
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8361
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !8362
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8363
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8364
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !8365
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8366
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !8367
  store i32 %call7, i32* %num_phi, align 4, !dbg !8368
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8369
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !8370
  store i32 2, i32* %iter_type, align 4, !dbg !8371
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8372
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !8373
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8374
  br label %return, !dbg !8374

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8375
  ret %struct.ssa_use_operand_d* %15, !dbg !8375
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8376 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8381, metadata !DIExpression()), !dbg !8382
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8383
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !8384
  %1 = load i8, i8* %done, align 8, !dbg !8384
  ret i8 %1, !dbg !8385
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !8386 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !8389, metadata !DIExpression()), !dbg !8390
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !8391, metadata !DIExpression()), !dbg !8392
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !8393, metadata !DIExpression()), !dbg !8394
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8395
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8397
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !8398
  br i1 %cmp, label %if.then, label %if.end3, !dbg !8399

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8400
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8403
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8403
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8404
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !8405
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !8406

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8407
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8408
  br label %if.end, !dbg !8409

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8410
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !8412
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8413
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8414
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !8415
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8416
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8417
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !8418

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8419
  ret %struct.ssa_use_operand_d* %10, !dbg !8420
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8421 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8424, metadata !DIExpression()), !dbg !8425
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !8426, metadata !DIExpression()), !dbg !8427
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8428
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !8430
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !8430
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !8428
  br i1 %tobool, label %if.then, label %if.end, !dbg !8431

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8432
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !8432
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !8432
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !8432
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8434
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8435
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !8436
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !8436
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !8437
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !8437
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8438
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !8439
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !8440
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8441
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8442
  br label %return, !dbg !8442

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8443
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !8445
  %10 = load i32, i32* %phi_i, align 8, !dbg !8445
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8446
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !8447
  %12 = load i32, i32* %num_phi, align 4, !dbg !8447
  %cmp = icmp slt i32 %10, %12, !dbg !8448
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !8449

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8450
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !8450
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8450
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8450
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !8450
  %16 = load i32, i32* %phi_i5, align 8, !dbg !8450
  %inc = add nsw i32 %16, 1, !dbg !8450
  store i32 %inc, i32* %phi_i5, align 8, !dbg !8450
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !8450
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8452
  br label %return, !dbg !8452

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8453
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !8454
  store i8 1, i8* %done, align 8, !dbg !8455
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8456
  br label %return, !dbg !8456

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8457
  ret %struct.ssa_use_operand_d* %18, !dbg !8457
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8458 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8459, metadata !DIExpression()), !dbg !8460
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8461, metadata !DIExpression()), !dbg !8462
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8463, metadata !DIExpression()), !dbg !8464
  %0 = load i32, i32* %flags.addr, align 4, !dbg !8465
  %and = and i32 %0, 10, !dbg !8465
  %cmp = icmp eq i32 %and, 0, !dbg !8465
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !8465

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8465
  %and1 = and i32 %1, 1, !dbg !8465
  %tobool = icmp ne i32 %and1, 0, !dbg !8465
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8465

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8465
  br label %cond.end, !dbg !8465

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8465

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8465
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8466
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8467
  %4 = load i32, i32* %flags.addr, align 4, !dbg !8468
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !8469
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8470
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !8471
  store i32 2, i32* %iter_type, align 4, !dbg !8472
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8473
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !8474
  ret %struct.ssa_use_operand_d* %call, !dbg !8475
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !8476 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8479, metadata !DIExpression()), !dbg !8480
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !8481, metadata !DIExpression()), !dbg !8482
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8483
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8485
  %tobool = icmp ne i8 %call, 0, !dbg !8485
  br i1 %tobool, label %if.end, label %if.then, !dbg !8486

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8487
  br label %return, !dbg !8487

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8488
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8489
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8490
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !8491
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !8491
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !8492
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8493
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !8493
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !8495

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8496
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !8496
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !8497
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !8497
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8498
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8499
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !8500
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !8501
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !8502

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8503
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !8503
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8504
  br label %return, !dbg !8504

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8505
  br label %return, !dbg !8505

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8506
  ret %struct.ssa_use_operand_d* %8, !dbg !8506
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !8507 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8510, metadata !DIExpression()), !dbg !8511
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8512
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !8514
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8514
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !8515
  br i1 %cmp, label %if.then, label %if.end, !dbg !8516

if.then:                                          ; preds = %entry
  br label %return, !dbg !8517

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8518
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8519
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8519
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8520
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !8521
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !8521
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !8522
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !8523
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8524
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !8525
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !8525
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8526
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !8527
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !8527
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !8528
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !8529
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8530
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !8531
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !8532
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8533
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !8534
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !8535
  br label %return, !dbg !8536

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !8536
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !8537 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8540, metadata !DIExpression()), !dbg !8541
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !8542, metadata !DIExpression()), !dbg !8543
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8544
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8545
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !8546
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8547
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8548
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8549
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8549
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8550
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !8551
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !8552
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8553
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8554
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !8555
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !8555
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !8556
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !8557
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8558
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8559
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !8560
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !8561
  ret void, !dbg !8562
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8563 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8566, metadata !DIExpression()), !dbg !8567
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8568
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !8569
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !8570
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8571
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !8572
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !8573
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8574
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !8575
  store i32 0, i32* %iter_type, align 4, !dbg !8576
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8577
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !8578
  store i32 0, i32* %phi_i, align 8, !dbg !8579
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8580
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !8581
  store i32 0, i32* %num_phi, align 4, !dbg !8582
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8583
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !8584
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8585
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8586
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !8587
  store i8 1, i8* %done, align 8, !dbg !8588
  ret void, !dbg !8589
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !8590 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8591, metadata !DIExpression()), !dbg !8592
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8593
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !8594
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !8595
  %1 = load i32, i32* %nargs, align 4, !dbg !8595
  ret i32 %1, !dbg !8596
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !8597 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8600, metadata !DIExpression()), !dbg !8601
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8602, metadata !DIExpression()), !dbg !8603
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8604
  %1 = load i32, i32* %i.addr, align 4, !dbg !8605
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !8606
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !8607
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !8608
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !8609 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8613, metadata !DIExpression()), !dbg !8614
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8615, metadata !DIExpression()), !dbg !8616
  %0 = load i32, i32* %index.addr, align 4, !dbg !8617
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8617
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !8617
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !8617
  %2 = load i32, i32* %capacity, align 8, !dbg !8617
  %cmp = icmp ule i32 %0, %2, !dbg !8617
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8617

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8617
  br label %cond.end, !dbg !8617

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8617

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8617
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8618
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !8619
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !8620
  %4 = load i32, i32* %index.addr, align 4, !dbg !8621
  %idxprom = zext i32 %4 to i64, !dbg !8618
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !8618
  ret %struct.phi_arg_d* %arrayidx, !dbg !8622
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8623 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8626, metadata !DIExpression()), !dbg !8627
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8628, metadata !DIExpression()), !dbg !8629
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8630, metadata !DIExpression()), !dbg !8631
  %0 = load i32, i32* %flags.addr, align 4, !dbg !8632
  %and = and i32 %0, 8, !dbg !8632
  %tobool = icmp ne i32 %and, 0, !dbg !8632
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !8632

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8632
  %and1 = and i32 %1, 2, !dbg !8632
  %tobool2 = icmp ne i32 %and1, 0, !dbg !8632
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !8632

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8632
  %and3 = and i32 %2, 4, !dbg !8632
  %tobool4 = icmp ne i32 %and3, 0, !dbg !8632
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !8632

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !8632
  %and6 = and i32 %3, 1, !dbg !8632
  %tobool7 = icmp ne i32 %and6, 0, !dbg !8632
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !8632

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8632
  br label %cond.end, !dbg !8632

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !8632

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8632
  %4 = load i32, i32* %flags.addr, align 4, !dbg !8633
  %and8 = and i32 %4, 10, !dbg !8634
  %tobool9 = icmp ne i32 %and8, 0, !dbg !8634
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !8635

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8636
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !8637
  br label %cond.end12, !dbg !8635

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !8635

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !8635
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8638
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !8639
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !8640
  %7 = load i32, i32* %flags.addr, align 4, !dbg !8641
  %and14 = and i32 %7, 8, !dbg !8643
  %tobool15 = icmp ne i32 %and14, 0, !dbg !8643
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !8644

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8645
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !8646
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !8646
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !8645
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !8647

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8648
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !8649
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !8650
  br i1 %cmp, label %if.then, label %if.end, !dbg !8651

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8652
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !8653
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !8653
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !8654
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !8654
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8655
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !8656
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !8657
  br label %if.end, !dbg !8655

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !8658
  %and23 = and i32 %15, 5, !dbg !8659
  %tobool24 = icmp ne i32 %and23, 0, !dbg !8659
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !8660

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8661
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !8662
  br label %cond.end28, !dbg !8660

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !8660

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !8660
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8663
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !8664
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !8665
  %18 = load i32, i32* %flags.addr, align 4, !dbg !8666
  %and30 = and i32 %18, 4, !dbg !8668
  %tobool31 = icmp ne i32 %and30, 0, !dbg !8668
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !8669

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8670
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !8671
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !8671
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !8670
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !8672

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8673
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !8674
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !8675
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !8676

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8677
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !8678
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !8678
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !8679
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !8679
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8680
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !8681
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !8682
  br label %if.end42, !dbg !8680

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8683
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !8684
  store i8 0, i8* %done, align 8, !dbg !8685
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8686
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !8687
  store i32 0, i32* %phi_i, align 8, !dbg !8688
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8689
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !8690
  store i32 0, i32* %num_phi, align 4, !dbg !8691
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8692
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !8693
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8694
  ret void, !dbg !8695
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !8696 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8699, metadata !DIExpression()), !dbg !8700
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8701
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8703
  %tobool = icmp ne i8 %call, 0, !dbg !8703
  br i1 %tobool, label %if.end, label %if.then, !dbg !8704

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !8705
  br label %return, !dbg !8705

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8706
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8707
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8708
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !8709
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !8709
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !8710
  br label %return, !dbg !8710

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !8711
  ret %struct.def_optype_d* %3, !dbg !8711
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !8712 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8713, metadata !DIExpression()), !dbg !8714
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8715
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8717
  %tobool = icmp ne i8 %call, 0, !dbg !8717
  br i1 %tobool, label %if.end, label %if.then, !dbg !8718

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8719
  br label %return, !dbg !8719

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8720
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8721
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !8722
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !8722
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8723
  br label %return, !dbg !8723

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8724
  ret %union.tree_node* %3, !dbg !8724
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !8725 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8728, metadata !DIExpression()), !dbg !8729
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8730
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8732
  %tobool = icmp ne i8 %call, 0, !dbg !8732
  br i1 %tobool, label %if.end, label %if.then, !dbg !8733

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !8734
  br label %return, !dbg !8734

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8735
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8736
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8737
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !8738
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !8738
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !8739
  br label %return, !dbg !8739

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !8740
  ret %struct.use_optype_d* %3, !dbg !8740
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !8741 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8742, metadata !DIExpression()), !dbg !8743
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8744
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8746
  %tobool = icmp ne i8 %call, 0, !dbg !8746
  br i1 %tobool, label %if.end, label %if.then, !dbg !8747

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8748
  br label %return, !dbg !8748

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8749
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8750
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !8751
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !8751
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8752
  br label %return, !dbg !8752

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8753
  ret %union.tree_node* %3, !dbg !8753
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !8754 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8755, metadata !DIExpression()), !dbg !8756
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8757
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8758
  %cmp = icmp uge i32 %call, 6, !dbg !8759
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8760

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8761
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !8762
  %cmp2 = icmp ule i32 %call1, 9, !dbg !8763
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !8764
  %land.ext = zext i1 %2 to i32, !dbg !8760
  %conv = trunc i32 %land.ext to i8, !dbg !8758
  ret i8 %conv, !dbg !8765
}

declare dso_local i8* @xcalloc(i64, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_uid(%union.gimple_statement_d* %g, i32 %uid) #0 !dbg !8766 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %uid.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8769, metadata !DIExpression()), !dbg !8770
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !8771, metadata !DIExpression()), !dbg !8772
  %0 = load i32, i32* %uid.addr, align 4, !dbg !8773
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8774
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !8775
  %uid1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !8776
  store i32 %0, i32* %uid1, align 4, !dbg !8777
  ret void, !dbg !8778
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_vinfo_for_stmt(%union.gimple_statement_d* %stmt, %struct._stmt_vec_info* %info) #0 !dbg !8779 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %info.addr = alloca %struct._stmt_vec_info*, align 8
  %uid = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8782, metadata !DIExpression()), !dbg !8783
  store %struct._stmt_vec_info* %info, %struct._stmt_vec_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %info.addr, metadata !8784, metadata !DIExpression()), !dbg !8785
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !8786, metadata !DIExpression()), !dbg !8787
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8788
  %call = call i32 @gimple_uid(%union.gimple_statement_d* %0), !dbg !8789
  store i32 %call, i32* %uid, align 4, !dbg !8787
  %1 = load i32, i32* %uid, align 4, !dbg !8790
  %cmp = icmp eq i32 %1, 0, !dbg !8792
  br i1 %cmp, label %if.then, label %if.else, !dbg !8793

if.then:                                          ; preds = %entry
  %2 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %info.addr, align 8, !dbg !8794
  %tobool = icmp ne %struct._stmt_vec_info* %2, null, !dbg !8794
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8794

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), i32 639, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8794
  br label %cond.end, !dbg !8794

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !8794

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8794
  %3 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8796
  %tobool1 = icmp ne %struct.VEC_vec_void_p_heap* %3, null, !dbg !8796
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !8796

cond.true2:                                       ; preds = %cond.end
  %4 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8796
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %4, i32 0, i32 0, !dbg !8796
  br label %cond.end4, !dbg !8796

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !8796

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_vec_void_p_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !8796
  %call6 = call i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %cond5), !dbg !8796
  %add = add i32 %call6, 1, !dbg !8797
  store i32 %add, i32* %uid, align 4, !dbg !8798
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8799
  %6 = load i32, i32* %uid, align 4, !dbg !8800
  call void @gimple_set_uid(%union.gimple_statement_d* %5, i32 %6), !dbg !8801
  %7 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %info.addr, align 8, !dbg !8802
  %8 = bitcast %struct._stmt_vec_info* %7 to i8*, !dbg !8802
  %call7 = call i8** @VEC_vec_void_p_heap_safe_push(%struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, i8* %8), !dbg !8802
  br label %if.end, !dbg !8803

if.else:                                          ; preds = %entry
  %9 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8804
  %tobool8 = icmp ne %struct.VEC_vec_void_p_heap* %9, null, !dbg !8804
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !8804

cond.true9:                                       ; preds = %if.else
  %10 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8804
  %base10 = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %10, i32 0, i32 0, !dbg !8804
  br label %cond.end12, !dbg !8804

cond.false11:                                     ; preds = %if.else
  br label %cond.end12, !dbg !8804

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_vec_void_p_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !8804
  %11 = load i32, i32* %uid, align 4, !dbg !8804
  %sub = sub i32 %11, 1, !dbg !8804
  %12 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %info.addr, align 8, !dbg !8804
  %13 = bitcast %struct._stmt_vec_info* %12 to i8*, !dbg !8804
  %call14 = call i8* @VEC_vec_void_p_base_replace(%struct.VEC_vec_void_p_base* %cond13, i32 %sub, i8* %13), !dbg !8804
  br label %if.end

if.end:                                           ; preds = %cond.end12, %cond.end4
  ret void, !dbg !8805
}

declare dso_local %struct._stmt_vec_info* @new_stmt_vec_info(%union.gimple_statement_d*, %struct._loop_vec_info*, %struct._bb_vec_info*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_slp_instance_heap* @VEC_slp_instance_heap_alloc(i32 %alloc_) #0 !dbg !8806 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8809, metadata !DIExpression()), !dbg !8810
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8810
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !8810
  %1 = bitcast i8* %call to %struct.VEC_slp_instance_heap*, !dbg !8810
  ret %struct.VEC_slp_instance_heap* %1, !dbg !8810
}

; Function Attrs: noinline nounwind uwtable
define internal i8** @VEC_vec_void_p_heap_safe_push(%struct.VEC_vec_void_p_heap** %vec_, i8* %obj_) #0 !dbg !8811 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_heap**, align 8
  %obj_.addr = alloca i8*, align 8
  store %struct.VEC_vec_void_p_heap** %vec_, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_heap*** %vec_.addr, metadata !8816, metadata !DIExpression()), !dbg !8817
  store i8* %obj_, i8** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj_.addr, metadata !8818, metadata !DIExpression()), !dbg !8817
  %0 = load %struct.VEC_vec_void_p_heap**, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8, !dbg !8817
  %call = call i32 @VEC_vec_void_p_heap_reserve(%struct.VEC_vec_void_p_heap** %0, i32 1), !dbg !8817
  %1 = load %struct.VEC_vec_void_p_heap**, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8, !dbg !8817
  %2 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** %1, align 8, !dbg !8817
  %tobool = icmp ne %struct.VEC_vec_void_p_heap* %2, null, !dbg !8817
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8817

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_vec_void_p_heap**, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8, !dbg !8817
  %4 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** %3, align 8, !dbg !8817
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %4, i32 0, i32 0, !dbg !8817
  br label %cond.end, !dbg !8817

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8817

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vec_void_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8817
  %5 = load i8*, i8** %obj_.addr, align 8, !dbg !8817
  %call1 = call i8** @VEC_vec_void_p_base_quick_push(%struct.VEC_vec_void_p_base* %cond, i8* %5), !dbg !8817
  ret i8** %call1, !dbg !8817
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @VEC_vec_void_p_base_replace(%struct.VEC_vec_void_p_base* %vec_, i32 %ix_, i8* %obj_) #0 !dbg !8819 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca i8*, align 8
  %old_obj_ = alloca i8*, align 8
  store %struct.VEC_vec_void_p_base* %vec_, %struct.VEC_vec_void_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_base** %vec_.addr, metadata !8823, metadata !DIExpression()), !dbg !8824
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8825, metadata !DIExpression()), !dbg !8824
  store i8* %obj_, i8** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj_.addr, metadata !8826, metadata !DIExpression()), !dbg !8824
  call void @llvm.dbg.declare(metadata i8** %old_obj_, metadata !8827, metadata !DIExpression()), !dbg !8824
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !8824
  %1 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8824
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %1, i32 0, i32 0, !dbg !8824
  %2 = load i32, i32* %num, align 8, !dbg !8824
  %cmp = icmp ult i32 %0, %2, !dbg !8824
  %conv = zext i1 %cmp to i32, !dbg !8824
  %3 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8824
  %vec = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %3, i32 0, i32 2, !dbg !8824
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !8824
  %idxprom = zext i32 %4 to i64, !dbg !8824
  %arrayidx = getelementptr inbounds [1 x i8*], [1 x i8*]* %vec, i64 0, i64 %idxprom, !dbg !8824
  %5 = load i8*, i8** %arrayidx, align 8, !dbg !8824
  store i8* %5, i8** %old_obj_, align 8, !dbg !8824
  %6 = load i8*, i8** %obj_.addr, align 8, !dbg !8824
  %7 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8824
  %vec1 = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %7, i32 0, i32 2, !dbg !8824
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !8824
  %idxprom2 = zext i32 %8 to i64, !dbg !8824
  %arrayidx3 = getelementptr inbounds [1 x i8*], [1 x i8*]* %vec1, i64 0, i64 %idxprom2, !dbg !8824
  store i8* %6, i8** %arrayidx3, align 8, !dbg !8824
  %9 = load i8*, i8** %old_obj_, align 8, !dbg !8824
  ret i8* %9, !dbg !8824
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vec_void_p_heap_reserve(%struct.VEC_vec_void_p_heap** %vec_, i32 %alloc_) #0 !dbg !8828 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_vec_void_p_heap** %vec_, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_heap*** %vec_.addr, metadata !8831, metadata !DIExpression()), !dbg !8832
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8833, metadata !DIExpression()), !dbg !8832
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !8834, metadata !DIExpression()), !dbg !8832
  %0 = load %struct.VEC_vec_void_p_heap**, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8, !dbg !8832
  %1 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** %0, align 8, !dbg !8832
  %tobool = icmp ne %struct.VEC_vec_void_p_heap* %1, null, !dbg !8832
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8832

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_vec_void_p_heap**, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8, !dbg !8832
  %3 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** %2, align 8, !dbg !8832
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %3, i32 0, i32 0, !dbg !8832
  br label %cond.end, !dbg !8832

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8832

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vec_void_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8832
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !8832
  %call = call i32 @VEC_vec_void_p_base_space(%struct.VEC_vec_void_p_base* %cond, i32 %4), !dbg !8832
  %tobool1 = icmp ne i32 %call, 0, !dbg !8832
  %lnot = xor i1 %tobool1, true, !dbg !8832
  %lnot.ext = zext i1 %lnot to i32, !dbg !8832
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !8832
  %5 = load i32, i32* %extend, align 4, !dbg !8835
  %tobool2 = icmp ne i32 %5, 0, !dbg !8835
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8832

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_vec_void_p_heap**, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8, !dbg !8835
  %7 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** %6, align 8, !dbg !8835
  %8 = bitcast %struct.VEC_vec_void_p_heap* %7 to i8*, !dbg !8835
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !8835
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !8835
  %10 = bitcast i8* %call3 to %struct.VEC_vec_void_p_heap*, !dbg !8835
  %11 = load %struct.VEC_vec_void_p_heap**, %struct.VEC_vec_void_p_heap*** %vec_.addr, align 8, !dbg !8835
  store %struct.VEC_vec_void_p_heap* %10, %struct.VEC_vec_void_p_heap** %11, align 8, !dbg !8835
  br label %if.end, !dbg !8835

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !8832
  ret i32 %12, !dbg !8832
}

; Function Attrs: noinline nounwind uwtable
define internal i8** @VEC_vec_void_p_base_quick_push(%struct.VEC_vec_void_p_base* %vec_, i8* %obj_) #0 !dbg !8837 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_base*, align 8
  %obj_.addr = alloca i8*, align 8
  %slot_ = alloca i8**, align 8
  store %struct.VEC_vec_void_p_base* %vec_, %struct.VEC_vec_void_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_base** %vec_.addr, metadata !8840, metadata !DIExpression()), !dbg !8841
  store i8* %obj_, i8** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj_.addr, metadata !8842, metadata !DIExpression()), !dbg !8841
  call void @llvm.dbg.declare(metadata i8*** %slot_, metadata !8843, metadata !DIExpression()), !dbg !8841
  %0 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8841
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %0, i32 0, i32 0, !dbg !8841
  %1 = load i32, i32* %num, align 8, !dbg !8841
  %2 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8841
  %alloc = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %2, i32 0, i32 1, !dbg !8841
  %3 = load i32, i32* %alloc, align 4, !dbg !8841
  %cmp = icmp ult i32 %1, %3, !dbg !8841
  %conv = zext i1 %cmp to i32, !dbg !8841
  %4 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8841
  %vec = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %4, i32 0, i32 2, !dbg !8841
  %5 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8841
  %num1 = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %5, i32 0, i32 0, !dbg !8841
  %6 = load i32, i32* %num1, align 8, !dbg !8841
  %inc = add i32 %6, 1, !dbg !8841
  store i32 %inc, i32* %num1, align 8, !dbg !8841
  %idxprom = zext i32 %6 to i64, !dbg !8841
  %arrayidx = getelementptr inbounds [1 x i8*], [1 x i8*]* %vec, i64 0, i64 %idxprom, !dbg !8841
  store i8** %arrayidx, i8*** %slot_, align 8, !dbg !8841
  %7 = load i8*, i8** %obj_.addr, align 8, !dbg !8841
  %8 = load i8**, i8*** %slot_, align 8, !dbg !8841
  store i8* %7, i8** %8, align 8, !dbg !8841
  %9 = load i8**, i8*** %slot_, align 8, !dbg !8841
  ret i8** %9, !dbg !8841
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vec_void_p_base_space(%struct.VEC_vec_void_p_base* %vec_, i32 %alloc_) #0 !dbg !8844 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_vec_void_p_base* %vec_, %struct.VEC_vec_void_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_base** %vec_.addr, metadata !8847, metadata !DIExpression()), !dbg !8848
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8849, metadata !DIExpression()), !dbg !8848
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8848
  %cmp = icmp sge i32 %0, 0, !dbg !8848
  %conv = zext i1 %cmp to i32, !dbg !8848
  %1 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8848
  %tobool = icmp ne %struct.VEC_vec_void_p_base* %1, null, !dbg !8848
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8848

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8848
  %alloc = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %2, i32 0, i32 1, !dbg !8848
  %3 = load i32, i32* %alloc, align 4, !dbg !8848
  %4 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8848
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %4, i32 0, i32 0, !dbg !8848
  %5 = load i32, i32* %num, align 8, !dbg !8848
  %sub = sub i32 %3, %5, !dbg !8848
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8848
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8848
  %conv2 = zext i1 %cmp1 to i32, !dbg !8848
  br label %cond.end, !dbg !8848

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8848
  %tobool3 = icmp ne i32 %7, 0, !dbg !8848
  %lnot = xor i1 %tobool3, true, !dbg !8848
  %lnot.ext = zext i1 %lnot to i32, !dbg !8848
  br label %cond.end, !dbg !8848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8848
  ret i32 %cond, !dbg !8848
}

declare dso_local void @free_stmt_vec_info(%union.gimple_statement_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_slp_instance_heap_free(%struct.VEC_slp_instance_heap** %vec_) #0 !dbg !8850 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_instance_heap**, align 8
  store %struct.VEC_slp_instance_heap** %vec_, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_heap*** %vec_.addr, metadata !8853, metadata !DIExpression()), !dbg !8854
  %0 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !8855
  %1 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %0, align 8, !dbg !8855
  %tobool = icmp ne %struct.VEC_slp_instance_heap* %1, null, !dbg !8855
  br i1 %tobool, label %if.then, label %if.end, !dbg !8854

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !8855
  %3 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %2, align 8, !dbg !8855
  %4 = bitcast %struct.VEC_slp_instance_heap* %3 to i8*, !dbg !8855
  call void @free(i8* %4), !dbg !8855
  br label %if.end, !dbg !8855

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_slp_instance_heap**, %struct.VEC_slp_instance_heap*** %vec_.addr, align 8, !dbg !8854
  store %struct.VEC_slp_instance_heap* null, %struct.VEC_slp_instance_heap** %5, align 8, !dbg !8854
  ret void, !dbg !8854
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vect_slp_analyze_node_operations(%struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %node) #0 !dbg !8857 {
entry:
  %retval = alloca i8, align 1
  %bb_vinfo.addr = alloca %struct._bb_vec_info*, align 8
  %node.addr = alloca %struct._slp_tree*, align 8
  %dummy = alloca i8, align 1
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_info = alloca %struct._stmt_vec_info*, align 8
  store %struct._bb_vec_info* %bb_vinfo, %struct._bb_vec_info** %bb_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._bb_vec_info** %bb_vinfo.addr, metadata !8860, metadata !DIExpression()), !dbg !8861
  store %struct._slp_tree* %node, %struct._slp_tree** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._slp_tree** %node.addr, metadata !8862, metadata !DIExpression()), !dbg !8863
  call void @llvm.dbg.declare(metadata i8* %dummy, metadata !8864, metadata !DIExpression()), !dbg !8865
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8866, metadata !DIExpression()), !dbg !8867
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8868, metadata !DIExpression()), !dbg !8869
  %0 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !8870
  %tobool = icmp ne %struct._slp_tree* %0, null, !dbg !8870
  br i1 %tobool, label %if.end, label %if.then, !dbg !8872

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !8873
  br label %return, !dbg !8873

if.end:                                           ; preds = %entry
  %1 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !8874
  %2 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !8876
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %2, i32 0, i32 0, !dbg !8876
  %3 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !8876
  %call = call zeroext i8 @vect_slp_analyze_node_operations(%struct._bb_vec_info* %1, %struct._slp_tree* %3), !dbg !8877
  %tobool1 = icmp ne i8 %call, 0, !dbg !8877
  br i1 %tobool1, label %lor.lhs.false, label %if.then4, !dbg !8878

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct._bb_vec_info*, %struct._bb_vec_info** %bb_vinfo.addr, align 8, !dbg !8879
  %5 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !8880
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %5, i32 0, i32 1, !dbg !8880
  %6 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !8880
  %call2 = call zeroext i8 @vect_slp_analyze_node_operations(%struct._bb_vec_info* %4, %struct._slp_tree* %6), !dbg !8881
  %tobool3 = icmp ne i8 %call2, 0, !dbg !8881
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !8882

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !8883
  br label %return, !dbg !8883

if.end5:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4, !dbg !8884
  br label %for.cond, !dbg !8886

for.cond:                                         ; preds = %for.inc, %if.end5
  %7 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !8887
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %7, i32 0, i32 2, !dbg !8887
  %8 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !8887
  %tobool6 = icmp ne %struct.VEC_gimple_heap* %8, null, !dbg !8887
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !8887

cond.true:                                        ; preds = %for.cond
  %9 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !8887
  %stmts7 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %9, i32 0, i32 2, !dbg !8887
  %10 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts7, align 8, !dbg !8887
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %10, i32 0, i32 0, !dbg !8887
  br label %cond.end, !dbg !8887

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8887

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8887
  %11 = load i32, i32* %i, align 4, !dbg !8887
  %call8 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %11, %union.gimple_statement_d** %stmt), !dbg !8887
  %tobool9 = icmp ne i32 %call8, 0, !dbg !8889
  br i1 %tobool9, label %for.body, label %for.end, !dbg !8889

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_info, metadata !8890, metadata !DIExpression()), !dbg !8892
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8893
  %call10 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %12), !dbg !8894
  store %struct._stmt_vec_info* %call10, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !8892
  %13 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !8895
  %tobool11 = icmp ne %struct._stmt_vec_info* %13, null, !dbg !8895
  br i1 %tobool11, label %cond.false13, label %cond.true12, !dbg !8895

cond.true12:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1222, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8895
  br label %cond.end14, !dbg !8895

cond.false13:                                     ; preds = %for.body
  br label %cond.end14, !dbg !8895

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false13 ], !dbg !8895
  %14 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !8896
  %slp_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %14, i32 0, i32 25, !dbg !8896
  %15 = load i32, i32* %slp_type, align 4, !dbg !8896
  %cmp = icmp eq i32 %15, 1, !dbg !8896
  br i1 %cmp, label %cond.false17, label %cond.true16, !dbg !8896

cond.true16:                                      ; preds = %cond.end14
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1223, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !8896
  br label %cond.end18, !dbg !8896

cond.false17:                                     ; preds = %cond.end14
  br label %cond.end18, !dbg !8896

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !8896
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8897
  %17 = load %struct._slp_tree*, %struct._slp_tree** %node.addr, align 8, !dbg !8899
  %call20 = call zeroext i8 @vect_analyze_stmt(%union.gimple_statement_d* %16, i8* %dummy, %struct._slp_tree* %17), !dbg !8900
  %tobool21 = icmp ne i8 %call20, 0, !dbg !8900
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !8901

if.then22:                                        ; preds = %cond.end18
  store i8 0, i8* %retval, align 1, !dbg !8902
  br label %return, !dbg !8902

if.end23:                                         ; preds = %cond.end18
  br label %for.inc, !dbg !8903

for.inc:                                          ; preds = %if.end23
  %18 = load i32, i32* %i, align 4, !dbg !8904
  %inc = add nsw i32 %18, 1, !dbg !8904
  store i32 %inc, i32* %i, align 4, !dbg !8904
  br label %for.cond, !dbg !8905, !llvm.loop !8906

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !8908
  br label %return, !dbg !8908

return:                                           ; preds = %for.end, %if.then22, %if.then4, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !8909
  ret i8 %19, !dbg !8909
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._slp_instance* @VEC_slp_instance_base_ordered_remove(%struct.VEC_slp_instance_base* %vec_, i32 %ix_) #0 !dbg !8910 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_instance_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %struct._slp_instance**, align 8
  %obj_ = alloca %struct._slp_instance*, align 8
  store %struct.VEC_slp_instance_base* %vec_, %struct.VEC_slp_instance_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_base** %vec_.addr, metadata !8913, metadata !DIExpression()), !dbg !8914
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8915, metadata !DIExpression()), !dbg !8914
  call void @llvm.dbg.declare(metadata %struct._slp_instance*** %slot_, metadata !8916, metadata !DIExpression()), !dbg !8914
  call void @llvm.dbg.declare(metadata %struct._slp_instance** %obj_, metadata !8917, metadata !DIExpression()), !dbg !8914
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !8914
  %1 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8914
  %num = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %1, i32 0, i32 0, !dbg !8914
  %2 = load i32, i32* %num, align 8, !dbg !8914
  %cmp = icmp ult i32 %0, %2, !dbg !8914
  %conv = zext i1 %cmp to i32, !dbg !8914
  %3 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8914
  %vec = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %3, i32 0, i32 2, !dbg !8914
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !8914
  %idxprom = zext i32 %4 to i64, !dbg !8914
  %arrayidx = getelementptr inbounds [1 x %struct._slp_instance*], [1 x %struct._slp_instance*]* %vec, i64 0, i64 %idxprom, !dbg !8914
  store %struct._slp_instance** %arrayidx, %struct._slp_instance*** %slot_, align 8, !dbg !8914
  %5 = load %struct._slp_instance**, %struct._slp_instance*** %slot_, align 8, !dbg !8914
  %6 = load %struct._slp_instance*, %struct._slp_instance** %5, align 8, !dbg !8914
  store %struct._slp_instance* %6, %struct._slp_instance** %obj_, align 8, !dbg !8914
  %7 = load %struct._slp_instance**, %struct._slp_instance*** %slot_, align 8, !dbg !8914
  %8 = bitcast %struct._slp_instance** %7 to i8*, !dbg !8914
  %9 = load %struct._slp_instance**, %struct._slp_instance*** %slot_, align 8, !dbg !8914
  %add.ptr = getelementptr inbounds %struct._slp_instance*, %struct._slp_instance** %9, i64 1, !dbg !8914
  %10 = bitcast %struct._slp_instance** %add.ptr to i8*, !dbg !8914
  %11 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8914
  %num1 = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %11, i32 0, i32 0, !dbg !8914
  %12 = load i32, i32* %num1, align 8, !dbg !8914
  %dec = add i32 %12, -1, !dbg !8914
  store i32 %dec, i32* %num1, align 8, !dbg !8914
  %13 = load i32, i32* %ix_.addr, align 4, !dbg !8914
  %sub = sub i32 %dec, %13, !dbg !8914
  %conv2 = zext i32 %sub to i64, !dbg !8914
  %mul = mul i64 %conv2, 8, !dbg !8914
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %10, i64 %mul, i1 false), !dbg !8914
  %14 = load %struct._slp_instance*, %struct._slp_instance** %obj_, align 8, !dbg !8914
  ret %struct._slp_instance* %14, !dbg !8914
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_slp_instance_base_length(%struct.VEC_slp_instance_base* %vec_) #0 !dbg !8918 {
entry:
  %vec_.addr = alloca %struct.VEC_slp_instance_base*, align 8
  store %struct.VEC_slp_instance_base* %vec_, %struct.VEC_slp_instance_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_slp_instance_base** %vec_.addr, metadata !8921, metadata !DIExpression()), !dbg !8922
  %0 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8922
  %tobool = icmp ne %struct.VEC_slp_instance_base* %0, null, !dbg !8922
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8922

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_slp_instance_base*, %struct.VEC_slp_instance_base** %vec_.addr, align 8, !dbg !8922
  %num = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %1, i32 0, i32 0, !dbg !8922
  %2 = load i32, i32* %num, align 8, !dbg !8922
  br label %cond.end, !dbg !8922

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8922

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8922
  ret i32 %cond, !dbg !8922
}

declare dso_local zeroext i8 @vect_analyze_stmt(%union.gimple_statement_d*, i8*, %struct._slp_tree*) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !8923 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8927, metadata !DIExpression()), !dbg !8928
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !8929, metadata !DIExpression()), !dbg !8928
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !8930, metadata !DIExpression()), !dbg !8928
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8928
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !8928
  %1 = load i32, i32* %num, align 8, !dbg !8928
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8928
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !8928
  %3 = load i32, i32* %alloc, align 4, !dbg !8928
  %cmp = icmp ult i32 %1, %3, !dbg !8928
  %conv = zext i1 %cmp to i32, !dbg !8928
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8928
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !8928
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8928
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !8928
  %6 = load i32, i32* %num1, align 8, !dbg !8928
  %inc = add i32 %6, 1, !dbg !8928
  store i32 %inc, i32* %num1, align 8, !dbg !8928
  %idxprom = zext i32 %6 to i64, !dbg !8928
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8928
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !8928
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !8928
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !8928
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !8928
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !8928
  ret %union.tree_node** %9, !dbg !8928
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) #0 !dbg !8931 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !8934, metadata !DIExpression()), !dbg !8935
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8935
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !8935
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8935

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8935
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !8935
  %2 = load i32, i32* %num, align 8, !dbg !8935
  br label %cond.end, !dbg !8935

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8935

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8935
  ret i32 %cond, !dbg !8935
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !8936 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8937, metadata !DIExpression()), !dbg !8938
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8939
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !8940
  ret %union.tree_node* %call, !dbg !8941
}

declare dso_local %union.tree_node* @build_constructor_from_list(%union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @vect_init_vector(%union.gimple_statement_d*, %union.tree_node*, %union.tree_node*, %struct.gimple_stmt_iterator*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !8942 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8947, metadata !DIExpression()), !dbg !8948
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8948
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !8948
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8948

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8948
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !8948
  %2 = load i32, i32* %num, align 8, !dbg !8948
  br label %cond.end, !dbg !8948

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8948

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8948
  ret i32 %cond, !dbg !8948
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !8949 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8952, metadata !DIExpression()), !dbg !8953
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8954, metadata !DIExpression()), !dbg !8953
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8953
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !8953
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8953

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8953
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8953
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !8953
  %3 = load i32, i32* %num, align 8, !dbg !8953
  %cmp = icmp ult i32 %1, %3, !dbg !8953
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8955
  %land.ext = zext i1 %4 to i32, !dbg !8953
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8953
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !8953
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8953
  %idxprom = zext i32 %6 to i64, !dbg !8953
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8953
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8953
  ret %union.tree_node* %7, !dbg !8953
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !8956 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !8959, metadata !DIExpression()), !dbg !8960
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !8961
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !8961
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !8961
  br i1 %tobool, label %if.then, label %if.end, !dbg !8960

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !8961
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !8961
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !8961
  call void @free(i8* %4), !dbg !8961
  br label %if.end, !dbg !8961

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !8960
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !8960
  ret void, !dbg !8960
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !8963 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8966, metadata !DIExpression()), !dbg !8967
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8968, metadata !DIExpression()), !dbg !8967
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !8969, metadata !DIExpression()), !dbg !8967
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8970
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !8970
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8970

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8970
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8970
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !8970
  %3 = load i32, i32* %num, align 8, !dbg !8970
  %cmp = icmp ult i32 %1, %3, !dbg !8970
  br i1 %cmp, label %if.then, label %if.else, !dbg !8967

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8972
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !8972
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8972
  %idxprom = zext i32 %5 to i64, !dbg !8972
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8972
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8972
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !8972
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !8972
  store i32 1, i32* %retval, align 4, !dbg !8972
  br label %return, !dbg !8972

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !8974
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !8974
  store i32 0, i32* %retval, align 4, !dbg !8974
  br label %return, !dbg !8974

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8967
  ret i32 %9, !dbg !8967
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @VEC_vec_void_p_base_index(%struct.VEC_vec_void_p_base* %vec_, i32 %ix_) #0 !dbg !8976 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_vec_void_p_base* %vec_, %struct.VEC_vec_void_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_base** %vec_.addr, metadata !8979, metadata !DIExpression()), !dbg !8980
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8981, metadata !DIExpression()), !dbg !8980
  %0 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8980
  %tobool = icmp ne %struct.VEC_vec_void_p_base* %0, null, !dbg !8980
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8980

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8980
  %2 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8980
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %2, i32 0, i32 0, !dbg !8980
  %3 = load i32, i32* %num, align 8, !dbg !8980
  %cmp = icmp ult i32 %1, %3, !dbg !8980
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8982
  %land.ext = zext i1 %4 to i32, !dbg !8980
  %5 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !8980
  %vec = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %5, i32 0, i32 2, !dbg !8980
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8980
  %idxprom = zext i32 %6 to i64, !dbg !8980
  %arrayidx = getelementptr inbounds [1 x i8*], [1 x i8*]* %vec, i64 0, i64 %idxprom, !dbg !8980
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !8980
  ret i8* %7, !dbg !8980
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !8983 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8984, metadata !DIExpression()), !dbg !8985
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8986, metadata !DIExpression()), !dbg !8987
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8988
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8989
  store i32 %call, i32* %code, align 4, !dbg !8987
  %1 = load i32, i32* %code, align 4, !dbg !8990
  %cmp = icmp eq i32 %1, 6, !dbg !8992
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8993

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !8994
  %cmp1 = icmp eq i32 %2, 1, !dbg !8995
  br i1 %cmp1, label %if.then, label %if.else, !dbg !8996

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8997
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !8998
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8999
  %bf.load = load i32, i32* %4, align 8, !dbg !8999
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8999
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !9000
  br label %return, !dbg !9000

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !9001
  %cmp2 = icmp eq i32 %5, 8, !dbg !9003
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !9004

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !9005
  br label %return, !dbg !9005

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !9006
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !9007
  br label %return, !dbg !9007

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !9008
  ret i32 %6, !dbg !9008
}

declare dso_local %union.tree_node* @vect_create_destination_var(%union.tree_node*, %union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node*, %struct.VEC_tree_heap*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !9009 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !9012, metadata !DIExpression()), !dbg !9013
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9014, metadata !DIExpression()), !dbg !9015
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9016
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9016
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9017
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9018
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !9019
  ret %union.tree_node* %call, !dbg !9020
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !9021 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9024, metadata !DIExpression()), !dbg !9025
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !9026, metadata !DIExpression()), !dbg !9027
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9028
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9029
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !9030
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9031
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !9031
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9033

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9034
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9034
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !9034
  %bf.load = load i64, i64* %4, align 8, !dbg !9034
  %bf.clear = and i64 %bf.load, 65535, !dbg !9034
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9034
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !9035
  br i1 %cmp, label %if.then, label %if.end, !dbg !9036

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9037
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9038
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !9038
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !9038
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9039
  br label %if.end, !dbg !9038

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !9040
}

declare dso_local void @vect_finish_stmt_generation(%union.gimple_statement_d*, %union.gimple_statement_d*, %struct.gimple_stmt_iterator*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_replace(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d* %obj_) #0 !dbg !9041 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %old_obj_ = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !9044, metadata !DIExpression()), !dbg !9045
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9046, metadata !DIExpression()), !dbg !9045
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !9047, metadata !DIExpression()), !dbg !9045
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_obj_, metadata !9048, metadata !DIExpression()), !dbg !9045
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !9045
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9045
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !9045
  %2 = load i32, i32* %num, align 8, !dbg !9045
  %cmp = icmp ult i32 %0, %2, !dbg !9045
  %conv = zext i1 %cmp to i32, !dbg !9045
  %3 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9045
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %3, i32 0, i32 2, !dbg !9045
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !9045
  %idxprom = zext i32 %4 to i64, !dbg !9045
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !9045
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !9045
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %old_obj_, align 8, !dbg !9045
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !9045
  %7 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9045
  %vec1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %7, i32 0, i32 2, !dbg !9045
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !9045
  %idxprom2 = zext i32 %8 to i64, !dbg !9045
  %arrayidx3 = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec1, i64 0, i64 %idxprom2, !dbg !9045
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %arrayidx3, align 8, !dbg !9045
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_obj_, align 8, !dbg !9045
  ret %union.gimple_statement_d* %9, !dbg !9045
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !9049 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9052, metadata !DIExpression()), !dbg !9053
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !9054, metadata !DIExpression()), !dbg !9055
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !9056, metadata !DIExpression()), !dbg !9057
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9058
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !9058
  %conv = zext i8 %call to i32, !dbg !9058
  %tobool = icmp ne i32 %conv, 0, !dbg !9058
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !9058

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !9058
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9058
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !9058
  %cmp = icmp ult i32 %1, %call1, !dbg !9058
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9058

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)), !dbg !9058
  br label %cond.end, !dbg !9058

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9058

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9058
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9059
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9060
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !9061
  %5 = load i32, i32* %i.addr, align 4, !dbg !9062
  %idxprom = zext i32 %5 to i64, !dbg !9061
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !9061
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !9063
  ret void, !dbg !9064
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #3

declare dso_local zeroext i8 @vect_transform_stmt(%union.gimple_statement_d*, %struct.gimple_stmt_iterator*, i8*, %struct._slp_tree*, %struct._slp_instance*) #3

declare dso_local void @vect_remove_stores(%union.gimple_statement_d*) #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!1754}
!llvm.module.flags = !{!4012, !4013, !4014}
!llvm.ident = !{!4015}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "number_of_mask_fixes", scope: !2, file: !3, line: 1716, type: !100, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "vect_get_mask_element", scope: !3, file: !3, line: 1710, type: !4, scopeLine: 1714, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!3 = !DIFile(filename: "tree-vect-slp.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !7, !100, !100, !100, !6, !100, !1752, !1752, !1753}
!6 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !8, line: 58, baseType: !9)
!8 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !11, line: 737, size: 768, elements: !12)
!11 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!12 = !{!13, !1599, !1609, !1615, !1620, !1625, !1632, !1638, !1644, !1649, !1663, !1668, !1674, !1679, !1689, !1694, !1710, !1717, !1724, !1730, !1735, !1741, !1747}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !10, file: !11, line: 738, baseType: !14, size: 256)
!14 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !11, line: 271, size: 256, elements: !15)
!15 = !{!16, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !32, !33, !1598}
!16 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !14, file: !11, line: 274, baseType: !17, size: 8, flags: DIFlagBitField, extraData: i64 0)
!17 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !14, file: !11, line: 277, baseType: !17, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !14, file: !11, line: 281, baseType: !17, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !14, file: !11, line: 284, baseType: !17, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !14, file: !11, line: 291, baseType: !17, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !14, file: !11, line: 295, baseType: !17, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !14, file: !11, line: 298, baseType: !17, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !14, file: !11, line: 301, baseType: !17, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !14, file: !11, line: 307, baseType: !17, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !14, file: !11, line: 312, baseType: !17, size: 32, offset: 32)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !14, file: !11, line: 316, baseType: !28, size: 32, offset: 64)
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !29, line: 58, baseType: !30)
!29 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !31, line: 44, baseType: !17)
!31 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!32 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !14, file: !11, line: 319, baseType: !17, size: 32, offset: 96)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !14, file: !11, line: 323, baseType: !34, size: 64, offset: 128)
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!35 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !36, line: 217, size: 832, elements: !37)
!36 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!37 = !{!38, !1565, !1566, !1567, !1568, !1572, !1573, !1574, !1592, !1593, !1594, !1595, !1596, !1597}
!38 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !35, file: !36, line: 219, baseType: !39, size: 64)
!39 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64)
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !36, line: 151, baseType: !41)
!41 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !36, line: 151, size: 128, elements: !42)
!42 = !{!43}
!43 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !41, file: !36, line: 151, baseType: !44, size: 128)
!44 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !36, line: 150, baseType: !45)
!45 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !36, line: 150, size: 128, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !45, file: !36, line: 150, baseType: !17, size: 32)
!48 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !45, file: !36, line: 150, baseType: !17, size: 32, offset: 32)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !45, file: !36, line: 150, baseType: !50, size: 64, offset: 64)
!50 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, size: 64, elements: !115)
!51 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !8, line: 108, baseType: !52)
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!53 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !36, line: 122, size: 512, elements: !54)
!54 = !{!55, !56, !57, !1557, !1558, !1559, !1560, !1561, !1562, !1563}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !53, file: !36, line: 124, baseType: !34, size: 64)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !53, file: !36, line: 125, baseType: !34, size: 64, offset: 64)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !53, file: !36, line: 131, baseType: !58, size: 64, offset: 128)
!58 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !36, line: 128, size: 64, elements: !59)
!59 = !{!60, !75}
!60 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !58, file: !36, line: 129, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !8, line: 66, baseType: !62)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64)
!63 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !11, line: 143, size: 192, elements: !64)
!64 = !{!65, !73, !74}
!65 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !63, file: !11, line: 145, baseType: !66, size: 64)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !8, line: 69, baseType: !67)
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !11, line: 136, size: 192, elements: !69)
!69 = !{!70, !71, !72}
!70 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !68, file: !11, line: 137, baseType: !7, size: 64)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !68, file: !11, line: 138, baseType: !67, size: 64, offset: 64)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !68, file: !11, line: 139, baseType: !67, size: 64, offset: 128)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !63, file: !11, line: 146, baseType: !66, size: 64, offset: 64)
!74 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !63, file: !11, line: 152, baseType: !61, size: 64, offset: 128)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !58, file: !36, line: 130, baseType: !76, size: 64)
!76 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !8, line: 50, baseType: !77)
!77 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !78, size: 64)
!78 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !79, line: 240, size: 384, elements: !80)
!79 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!80 = !{!81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91}
!81 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !78, file: !79, line: 242, baseType: !17, size: 16, flags: DIFlagBitField, extraData: i64 0)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !78, file: !79, line: 245, baseType: !17, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !78, file: !79, line: 252, baseType: !17, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !78, file: !79, line: 257, baseType: !17, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !78, file: !79, line: 265, baseType: !17, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !78, file: !79, line: 277, baseType: !17, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !78, file: !79, line: 291, baseType: !17, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !78, file: !79, line: 298, baseType: !17, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !78, file: !79, line: 305, baseType: !17, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !78, file: !79, line: 310, baseType: !17, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !78, file: !79, line: 321, baseType: !92, size: 320, offset: 64)
!92 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !79, line: 315, size: 320, elements: !93)
!93 = !{!94, !1524, !1526, !1555, !1556}
!94 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !92, file: !79, line: 316, baseType: !95, size: 64)
!95 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 64, elements: !115)
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !79, line: 183, baseType: !97)
!97 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !79, line: 166, size: 64, elements: !98)
!98 = !{!99, !101, !102, !106, !107, !117, !246, !258, !261, !325, !1502, !1503, !1514, !1521}
!99 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !97, file: !79, line: 168, baseType: !100, size: 32)
!100 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !97, file: !79, line: 169, baseType: !17, size: 32)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !97, file: !79, line: 170, baseType: !103, size: 64)
!103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64)
!104 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !105)
!105 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !97, file: !79, line: 171, baseType: !76, size: 64)
!107 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !97, file: !79, line: 172, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !8, line: 53, baseType: !109)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !79, line: 359, size: 128, elements: !111)
!111 = !{!112, !113}
!112 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !110, file: !79, line: 360, baseType: !100, size: 32)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !110, file: !79, line: 361, baseType: !114, size: 64, offset: 64)
!114 = !DICompositeType(tag: DW_TAG_array_type, baseType: !76, size: 64, elements: !115)
!115 = !{!116}
!116 = !DISubrange(count: 1)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !97, file: !79, line: 173, baseType: !118, size: 32)
!118 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !119, line: 7, baseType: !17, size: 32, elements: !120)
!119 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!120 = !{!121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245}
!121 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!123 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!124 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!125 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!126 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!127 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!128 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!129 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!130 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!131 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!132 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!133 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!134 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!135 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!136 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!137 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!138 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!139 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!140 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!141 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!142 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!143 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!144 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!145 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!146 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!147 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!148 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!149 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!150 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!151 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!152 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!153 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!154 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!155 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!156 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!157 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!158 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!159 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!160 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!161 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!162 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!163 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!164 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!165 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!166 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!167 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!168 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!169 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!170 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!171 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!172 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!173 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!174 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!175 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!176 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!177 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!178 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!179 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!180 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!181 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!182 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!183 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!184 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!185 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!186 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!187 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!188 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!189 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!190 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!191 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!192 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!193 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!194 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!195 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!196 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!197 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!198 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!199 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!200 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!201 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!202 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!203 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!204 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!205 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!206 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!207 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!208 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!209 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!210 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!211 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!212 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!213 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!214 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!215 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!216 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!219 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!220 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!221 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!222 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!223 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!224 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!225 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!226 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!229 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!230 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!231 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!232 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!233 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!234 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!235 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!236 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!237 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!238 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!239 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!240 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!241 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!242 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!243 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!244 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!245 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!246 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !97, file: !79, line: 174, baseType: !247, size: 32)
!247 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !79, line: 133, baseType: !248)
!248 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 115, size: 32, elements: !249)
!249 = !{!250, !251, !252, !253, !254, !255, !256, !257}
!250 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !248, file: !79, line: 118, baseType: !17, size: 8, flags: DIFlagBitField, extraData: i64 0)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !248, file: !79, line: 120, baseType: !17, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!252 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !248, file: !79, line: 121, baseType: !17, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !248, file: !79, line: 123, baseType: !17, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !248, file: !79, line: 125, baseType: !17, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !248, file: !79, line: 127, baseType: !17, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !248, file: !79, line: 130, baseType: !17, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !248, file: !79, line: 132, baseType: !17, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !97, file: !79, line: 175, baseType: !259, size: 64)
!259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !260, size: 64)
!260 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !79, line: 175, flags: DIFlagFwdDecl)
!261 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !97, file: !79, line: 176, baseType: !262, size: 64)
!262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !263, size: 64)
!263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !264, line: 75, size: 256, elements: !265)
!264 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!265 = !{!266, !281, !282, !283}
!266 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !263, file: !264, line: 76, baseType: !267, size: 64)
!267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !268, size: 64)
!268 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !264, line: 68, baseType: !269)
!269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !264, line: 63, size: 320, elements: !270)
!270 = !{!271, !273, !274, !275}
!271 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !269, file: !264, line: 64, baseType: !272, size: 64)
!272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !269, size: 64)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !269, file: !264, line: 65, baseType: !272, size: 64, offset: 64)
!274 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !269, file: !264, line: 66, baseType: !17, size: 32, offset: 128)
!275 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !269, file: !264, line: 67, baseType: !276, size: 128, offset: 192)
!276 = !DICompositeType(tag: DW_TAG_array_type, baseType: !277, size: 128, elements: !279)
!277 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !264, line: 29, baseType: !278)
!278 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!279 = !{!280}
!280 = !DISubrange(count: 2)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !263, file: !264, line: 77, baseType: !267, size: 64, offset: 64)
!282 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !263, file: !264, line: 78, baseType: !17, size: 32, offset: 128)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !263, file: !264, line: 79, baseType: !284, size: 64, offset: 192)
!284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !285, size: 64)
!285 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !264, line: 49, baseType: !286)
!286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !264, line: 45, size: 832, elements: !287)
!287 = !{!288, !289, !290}
!288 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !286, file: !264, line: 46, baseType: !272, size: 64)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !286, file: !264, line: 47, baseType: !262, size: 64, offset: 64)
!290 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !286, file: !264, line: 48, baseType: !291, size: 704, offset: 128)
!291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !292, line: 164, size: 704, elements: !293)
!292 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!293 = !{!294, !296, !307, !308, !309, !310, !311, !312, !317, !321, !322, !323, !324}
!294 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !291, file: !292, line: 166, baseType: !295, size: 64)
!295 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !291, file: !292, line: 167, baseType: !297, size: 64, offset: 64)
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64)
!298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !292, line: 157, size: 192, elements: !299)
!299 = !{!300, !302, !303}
!300 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !298, file: !292, line: 159, baseType: !301, size: 64)
!301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 64)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !298, file: !292, line: 160, baseType: !297, size: 64, offset: 64)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !298, file: !292, line: 161, baseType: !304, size: 32, offset: 128)
!304 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 32, elements: !305)
!305 = !{!306}
!306 = !DISubrange(count: 4)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !291, file: !292, line: 168, baseType: !301, size: 64, offset: 128)
!308 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !291, file: !292, line: 169, baseType: !301, size: 64, offset: 192)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !291, file: !292, line: 170, baseType: !301, size: 64, offset: 256)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !291, file: !292, line: 171, baseType: !295, size: 64, offset: 320)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !291, file: !292, line: 172, baseType: !100, size: 32, offset: 384)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !291, file: !292, line: 176, baseType: !313, size: 64, offset: 448)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !314, size: 64)
!314 = !DISubroutineType(types: !315)
!315 = !{!297, !316, !295}
!316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!317 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !291, file: !292, line: 177, baseType: !318, size: 64, offset: 512)
!318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !319, size: 64)
!319 = !DISubroutineType(types: !320)
!320 = !{null, !316, !297}
!321 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !291, file: !292, line: 178, baseType: !316, size: 64, offset: 576)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !291, file: !292, line: 179, baseType: !17, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !291, file: !292, line: 180, baseType: !17, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !291, file: !292, line: 184, baseType: !17, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !97, file: !79, line: 177, baseType: !326, size: 64)
!326 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !8, line: 56, baseType: !327)
!327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !328, size: 64)
!328 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !329, line: 3371, size: 1792, elements: !330)
!329 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!330 = !{!331, !364, !370, !381, !400, !411, !416, !423, !429, !442, !450, !488, !493, !521, !538, !539, !544, !553, !559, !564, !568, !572, !925, !974, !980, !986, !993, !1006, !1020, !1037, !1049, !1071, !1312, !1484}
!331 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !328, file: !329, line: 3372, baseType: !332, size: 64)
!332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !329, line: 360, size: 64, elements: !333)
!333 = !{!334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363}
!334 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !332, file: !329, line: 361, baseType: !17, size: 16, flags: DIFlagBitField, extraData: i64 0)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !332, file: !329, line: 363, baseType: !17, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !332, file: !329, line: 364, baseType: !17, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !332, file: !329, line: 365, baseType: !17, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !332, file: !329, line: 366, baseType: !17, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!339 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !332, file: !329, line: 367, baseType: !17, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !332, file: !329, line: 368, baseType: !17, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !332, file: !329, line: 369, baseType: !17, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !332, file: !329, line: 370, baseType: !17, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !332, file: !329, line: 372, baseType: !17, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !332, file: !329, line: 373, baseType: !17, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !332, file: !329, line: 374, baseType: !17, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !332, file: !329, line: 375, baseType: !17, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !332, file: !329, line: 376, baseType: !17, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !332, file: !329, line: 377, baseType: !17, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !332, file: !329, line: 378, baseType: !17, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !332, file: !329, line: 379, baseType: !17, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !332, file: !329, line: 381, baseType: !17, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !332, file: !329, line: 382, baseType: !17, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !332, file: !329, line: 383, baseType: !17, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !332, file: !329, line: 384, baseType: !17, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!355 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !332, file: !329, line: 385, baseType: !17, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !332, file: !329, line: 386, baseType: !17, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !332, file: !329, line: 387, baseType: !17, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!358 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !332, file: !329, line: 388, baseType: !17, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!359 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !332, file: !329, line: 390, baseType: !17, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !332, file: !329, line: 391, baseType: !17, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !332, file: !329, line: 392, baseType: !17, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!362 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !332, file: !329, line: 394, baseType: !17, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !332, file: !329, line: 399, baseType: !17, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!364 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !328, file: !329, line: 3373, baseType: !365, size: 192)
!365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !329, line: 402, size: 192, elements: !366)
!366 = !{!367, !368, !369}
!367 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !365, file: !329, line: 403, baseType: !332, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !365, file: !329, line: 404, baseType: !326, size: 64, offset: 64)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !365, file: !329, line: 405, baseType: !326, size: 64, offset: 128)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !328, file: !329, line: 3374, baseType: !371, size: 320)
!371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !329, line: 1384, size: 320, elements: !372)
!372 = !{!373, !374}
!373 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !371, file: !329, line: 1385, baseType: !365, size: 192)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !371, file: !329, line: 1386, baseType: !375, size: 128, offset: 192)
!375 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !376, line: 58, baseType: !377)
!376 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!377 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !376, line: 54, size: 128, elements: !378)
!378 = !{!379, !380}
!379 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !377, file: !376, line: 56, baseType: !278, size: 64)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !377, file: !376, line: 57, baseType: !295, size: 64, offset: 64)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !328, file: !329, line: 3375, baseType: !382, size: 256)
!382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !329, line: 1397, size: 256, elements: !383)
!383 = !{!384, !385}
!384 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !382, file: !329, line: 1398, baseType: !365, size: 192)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !382, file: !329, line: 1399, baseType: !386, size: 64, offset: 192)
!386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !387, size: 64)
!387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !388, line: 52, size: 256, elements: !389)
!388 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!389 = !{!390, !391, !392, !393, !394, !395, !396}
!390 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !387, file: !388, line: 56, baseType: !17, size: 2, flags: DIFlagBitField, extraData: i64 0)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !387, file: !388, line: 57, baseType: !17, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !387, file: !388, line: 58, baseType: !17, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!393 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !387, file: !388, line: 59, baseType: !17, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !387, file: !388, line: 60, baseType: !17, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !387, file: !388, line: 61, baseType: !17, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !387, file: !388, line: 62, baseType: !397, size: 192, offset: 64)
!397 = !DICompositeType(tag: DW_TAG_array_type, baseType: !278, size: 192, elements: !398)
!398 = !{!399}
!399 = !DISubrange(count: 3)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !328, file: !329, line: 3376, baseType: !401, size: 256)
!401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !329, line: 1408, size: 256, elements: !402)
!402 = !{!403, !404}
!403 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !401, file: !329, line: 1409, baseType: !365, size: 192)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !401, file: !329, line: 1410, baseType: !405, size: 64, offset: 192)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !406, size: 64)
!406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !407, line: 27, size: 192, elements: !408)
!407 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!408 = !{!409, !410}
!409 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !406, file: !407, line: 29, baseType: !375, size: 128)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !406, file: !407, line: 30, baseType: !118, size: 32, offset: 128)
!411 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !328, file: !329, line: 3377, baseType: !412, size: 256)
!412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !329, line: 1437, size: 256, elements: !413)
!413 = !{!414, !415}
!414 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !412, file: !329, line: 1438, baseType: !365, size: 192)
!415 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !412, file: !329, line: 1439, baseType: !326, size: 64, offset: 192)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !328, file: !329, line: 3378, baseType: !417, size: 256)
!417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !329, line: 1418, size: 256, elements: !418)
!418 = !{!419, !420, !421}
!419 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !417, file: !329, line: 1419, baseType: !365, size: 192)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !417, file: !329, line: 1420, baseType: !100, size: 32, offset: 192)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !417, file: !329, line: 1421, baseType: !422, size: 8, offset: 224)
!422 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 8, elements: !115)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !328, file: !329, line: 3379, baseType: !424, size: 320)
!424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !329, line: 1428, size: 320, elements: !425)
!425 = !{!426, !427, !428}
!426 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !424, file: !329, line: 1429, baseType: !365, size: 192)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !424, file: !329, line: 1430, baseType: !326, size: 64, offset: 192)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !424, file: !329, line: 1431, baseType: !326, size: 64, offset: 256)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !328, file: !329, line: 3380, baseType: !430, size: 320)
!430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !329, line: 1460, size: 320, elements: !431)
!431 = !{!432, !433}
!432 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !430, file: !329, line: 1461, baseType: !365, size: 192)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !430, file: !329, line: 1462, baseType: !434, size: 128, offset: 192)
!434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !435, line: 31, size: 128, elements: !436)
!435 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!436 = !{!437, !440, !441}
!437 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !434, file: !435, line: 32, baseType: !438, size: 64)
!438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !439, size: 64)
!439 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !434, file: !435, line: 33, baseType: !17, size: 32, offset: 64)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !434, file: !435, line: 34, baseType: !17, size: 32, offset: 96)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !328, file: !329, line: 3381, baseType: !443, size: 384)
!443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !329, line: 2507, size: 384, elements: !444)
!444 = !{!445, !446, !447, !448, !449}
!445 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !443, file: !329, line: 2508, baseType: !365, size: 192)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !443, file: !329, line: 2509, baseType: !28, size: 32, offset: 192)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !443, file: !329, line: 2510, baseType: !17, size: 32, offset: 224)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !443, file: !329, line: 2511, baseType: !326, size: 64, offset: 256)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !443, file: !329, line: 2512, baseType: !326, size: 64, offset: 320)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !328, file: !329, line: 3382, baseType: !451, size: 896)
!451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !329, line: 2652, size: 896, elements: !452)
!452 = !{!453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485}
!453 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !451, file: !329, line: 2653, baseType: !443, size: 384)
!454 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !451, file: !329, line: 2654, baseType: !326, size: 64, offset: 384)
!455 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !451, file: !329, line: 2656, baseType: !17, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !451, file: !329, line: 2658, baseType: !17, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !451, file: !329, line: 2659, baseType: !17, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !451, file: !329, line: 2660, baseType: !17, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !451, file: !329, line: 2661, baseType: !17, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!460 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !451, file: !329, line: 2662, baseType: !17, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!461 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !451, file: !329, line: 2663, baseType: !17, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !451, file: !329, line: 2664, baseType: !17, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !451, file: !329, line: 2666, baseType: !17, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!464 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !451, file: !329, line: 2667, baseType: !17, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!465 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !451, file: !329, line: 2668, baseType: !17, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!466 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !451, file: !329, line: 2669, baseType: !17, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!467 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !451, file: !329, line: 2670, baseType: !17, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!468 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !451, file: !329, line: 2671, baseType: !17, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!469 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !451, file: !329, line: 2672, baseType: !17, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !451, file: !329, line: 2673, baseType: !17, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !451, file: !329, line: 2674, baseType: !17, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !451, file: !329, line: 2678, baseType: !17, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !451, file: !329, line: 2682, baseType: !17, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!474 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !451, file: !329, line: 2685, baseType: !17, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!475 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !451, file: !329, line: 2688, baseType: !17, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !451, file: !329, line: 2690, baseType: !17, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !451, file: !329, line: 2692, baseType: !17, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!478 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !451, file: !329, line: 2695, baseType: !17, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!479 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !451, file: !329, line: 2698, baseType: !17, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!480 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !451, file: !329, line: 2703, baseType: !17, size: 32, offset: 512)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !451, file: !329, line: 2705, baseType: !326, size: 64, offset: 576)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !451, file: !329, line: 2706, baseType: !326, size: 64, offset: 640)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !451, file: !329, line: 2707, baseType: !326, size: 64, offset: 704)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !451, file: !329, line: 2708, baseType: !326, size: 64, offset: 768)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !451, file: !329, line: 2711, baseType: !486, size: 64, offset: 832)
!486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !487, size: 64)
!487 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !329, line: 2711, flags: DIFlagFwdDecl)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !328, file: !329, line: 3383, baseType: !489, size: 960)
!489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !329, line: 2756, size: 960, elements: !490)
!490 = !{!491, !492}
!491 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !489, file: !329, line: 2757, baseType: !451, size: 896)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !489, file: !329, line: 2758, baseType: !76, size: 64, offset: 896)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !328, file: !329, line: 3384, baseType: !494, size: 1472)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !329, line: 3114, size: 1472, elements: !495)
!495 = !{!496, !517, !518, !519, !520}
!496 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !494, file: !329, line: 3115, baseType: !497, size: 1216)
!497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !329, line: 2984, size: 1216, elements: !498)
!498 = !{!499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516}
!499 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !497, file: !329, line: 2985, baseType: !489, size: 960)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !497, file: !329, line: 2986, baseType: !326, size: 64, offset: 960)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !497, file: !329, line: 2987, baseType: !326, size: 64, offset: 1024)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !497, file: !329, line: 2988, baseType: !326, size: 64, offset: 1088)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !497, file: !329, line: 2991, baseType: !17, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !497, file: !329, line: 2992, baseType: !17, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !497, file: !329, line: 2993, baseType: !17, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!506 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !497, file: !329, line: 2994, baseType: !17, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !497, file: !329, line: 2995, baseType: !17, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!508 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !497, file: !329, line: 2996, baseType: !17, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !497, file: !329, line: 2998, baseType: !17, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !497, file: !329, line: 3000, baseType: !17, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!511 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !497, file: !329, line: 3002, baseType: !17, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !497, file: !329, line: 3003, baseType: !17, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !497, file: !329, line: 3004, baseType: !17, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !497, file: !329, line: 3005, baseType: !17, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !497, file: !329, line: 3007, baseType: !17, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !497, file: !329, line: 3010, baseType: !17, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!517 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !494, file: !329, line: 3117, baseType: !326, size: 64, offset: 1216)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !494, file: !329, line: 3119, baseType: !326, size: 64, offset: 1280)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !494, file: !329, line: 3121, baseType: !326, size: 64, offset: 1344)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !494, file: !329, line: 3123, baseType: !326, size: 64, offset: 1408)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !328, file: !329, line: 3385, baseType: !522, size: 1088)
!522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !329, line: 2874, size: 1088, elements: !523)
!523 = !{!524, !525, !526}
!524 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !522, file: !329, line: 2875, baseType: !489, size: 960)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !522, file: !329, line: 2876, baseType: !76, size: 64, offset: 960)
!526 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !522, file: !329, line: 2877, baseType: !527, size: 64, offset: 1024)
!527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !528, size: 64)
!528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !529, line: 172, size: 128, elements: !530)
!529 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!530 = !{!531, !532, !533, !534, !535, !536, !537}
!531 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !528, file: !529, line: 174, baseType: !17, size: 1, flags: DIFlagBitField, extraData: i64 0)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !528, file: !529, line: 178, baseType: !17, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !528, file: !529, line: 183, baseType: !17, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !528, file: !529, line: 187, baseType: !17, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!535 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !528, file: !529, line: 192, baseType: !17, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !528, file: !529, line: 195, baseType: !17, size: 32, offset: 32)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !528, file: !529, line: 199, baseType: !326, size: 64, offset: 64)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !328, file: !329, line: 3386, baseType: !497, size: 1216)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !328, file: !329, line: 3387, baseType: !540, size: 1280)
!540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !329, line: 3093, size: 1280, elements: !541)
!541 = !{!542, !543}
!542 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !540, file: !329, line: 3094, baseType: !497, size: 1216)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !540, file: !329, line: 3095, baseType: !527, size: 64, offset: 1216)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !328, file: !329, line: 3388, baseType: !545, size: 1216)
!545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !329, line: 2824, size: 1216, elements: !546)
!546 = !{!547, !548, !549, !550, !551, !552}
!547 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !545, file: !329, line: 2825, baseType: !451, size: 896)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !545, file: !329, line: 2827, baseType: !326, size: 64, offset: 896)
!549 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !545, file: !329, line: 2828, baseType: !326, size: 64, offset: 960)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !545, file: !329, line: 2829, baseType: !326, size: 64, offset: 1024)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !545, file: !329, line: 2830, baseType: !326, size: 64, offset: 1088)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !545, file: !329, line: 2831, baseType: !326, size: 64, offset: 1152)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !328, file: !329, line: 3389, baseType: !554, size: 1024)
!554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !329, line: 2850, size: 1024, elements: !555)
!555 = !{!556, !557, !558}
!556 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !554, file: !329, line: 2851, baseType: !489, size: 960)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !554, file: !329, line: 2852, baseType: !100, size: 32, offset: 960)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !554, file: !329, line: 2853, baseType: !100, size: 32, offset: 992)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !328, file: !329, line: 3390, baseType: !560, size: 1024)
!560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !329, line: 2857, size: 1024, elements: !561)
!561 = !{!562, !563}
!562 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !560, file: !329, line: 2858, baseType: !489, size: 960)
!563 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !560, file: !329, line: 2859, baseType: !527, size: 64, offset: 960)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !328, file: !329, line: 3391, baseType: !565, size: 960)
!565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !329, line: 2862, size: 960, elements: !566)
!566 = !{!567}
!567 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !565, file: !329, line: 2863, baseType: !489, size: 960)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !328, file: !329, line: 3392, baseType: !569, size: 1472)
!569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !329, line: 3304, size: 1472, elements: !570)
!570 = !{!571}
!571 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !569, file: !329, line: 3305, baseType: !494, size: 1472)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !328, file: !329, line: 3393, baseType: !573, size: 1792)
!573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !329, line: 3248, size: 1792, elements: !574)
!574 = !{!575, !576, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924}
!575 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !573, file: !329, line: 3249, baseType: !494, size: 1472)
!576 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !573, file: !329, line: 3251, baseType: !577, size: 64, offset: 1472)
!577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !578, size: 64)
!578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !579, line: 463, size: 1152, elements: !580)
!579 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!580 = !{!581, !584, !625, !626, !767, !843, !844, !845, !846, !847, !848, !877, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903}
!581 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !578, file: !579, line: 464, baseType: !582, size: 64)
!582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !583, size: 64)
!583 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !579, line: 464, flags: DIFlagFwdDecl)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !578, file: !579, line: 467, baseType: !585, size: 64, offset: 64)
!585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !586, size: 64)
!586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !36, line: 374, size: 640, elements: !587)
!587 = !{!588, !590, !591, !604, !605, !606, !607, !608, !614, !621, !623, !624}
!588 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !586, file: !36, line: 377, baseType: !589, size: 64)
!589 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !8, line: 111, baseType: !34)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !586, file: !36, line: 378, baseType: !589, size: 64, offset: 64)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !586, file: !36, line: 381, baseType: !592, size: 64, offset: 128)
!592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !593, size: 64)
!593 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !36, line: 282, baseType: !594)
!594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !36, line: 282, size: 128, elements: !595)
!595 = !{!596}
!596 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !594, file: !36, line: 282, baseType: !597, size: 128)
!597 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !36, line: 281, baseType: !598)
!598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !36, line: 281, size: 128, elements: !599)
!599 = !{!600, !601, !602}
!600 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !598, file: !36, line: 281, baseType: !17, size: 32)
!601 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !598, file: !36, line: 281, baseType: !17, size: 32, offset: 32)
!602 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !598, file: !36, line: 281, baseType: !603, size: 64, offset: 64)
!603 = !DICompositeType(tag: DW_TAG_array_type, baseType: !589, size: 64, elements: !115)
!604 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !586, file: !36, line: 384, baseType: !100, size: 32, offset: 192)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !586, file: !36, line: 387, baseType: !100, size: 32, offset: 224)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !586, file: !36, line: 390, baseType: !100, size: 32, offset: 256)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !586, file: !36, line: 394, baseType: !592, size: 64, offset: 320)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !586, file: !36, line: 396, baseType: !609, size: 32, offset: 384)
!609 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !36, line: 363, baseType: !17, size: 32, elements: !610)
!610 = !{!611, !612, !613}
!611 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!612 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!613 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !586, file: !36, line: 399, baseType: !615, size: 64, offset: 416)
!615 = !DICompositeType(tag: DW_TAG_array_type, baseType: !616, size: 64, elements: !279)
!616 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !36, line: 355, baseType: !17, size: 32, elements: !617)
!617 = !{!618, !619, !620}
!618 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!619 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!620 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !586, file: !36, line: 402, baseType: !622, size: 64, offset: 480)
!622 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 64, elements: !279)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !586, file: !36, line: 406, baseType: !100, size: 32, offset: 544)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !586, file: !36, line: 409, baseType: !100, size: 32, offset: 576)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !578, file: !579, line: 470, baseType: !62, size: 64, offset: 128)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !578, file: !579, line: 473, baseType: !627, size: 64, offset: 192)
!627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !628, size: 64)
!628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !529, line: 39, size: 1152, elements: !629)
!629 = !{!630, !682, !695, !708, !709, !721, !722, !726, !727, !728, !729, !730}
!630 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !628, file: !529, line: 41, baseType: !631, size: 64)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !632, line: 144, baseType: !633)
!632 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !634, size: 64)
!634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !632, line: 100, size: 896, elements: !635)
!635 = !{!636, !644, !649, !654, !656, !659, !660, !661, !662, !663, !668, !670, !671, !676, !681}
!636 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !634, file: !632, line: 102, baseType: !637, size: 64)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !632, line: 52, baseType: !638)
!638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !639, size: 64)
!639 = !DISubroutineType(types: !640)
!640 = !{!641, !642}
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !632, line: 47, baseType: !17)
!642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !643, size: 64)
!643 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !634, file: !632, line: 105, baseType: !645, size: 64, offset: 64)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !632, line: 59, baseType: !646)
!646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !647, size: 64)
!647 = !DISubroutineType(types: !648)
!648 = !{!100, !642, !642}
!649 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !634, file: !632, line: 108, baseType: !650, size: 64, offset: 128)
!650 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !632, line: 63, baseType: !651)
!651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !652, size: 64)
!652 = !DISubroutineType(types: !653)
!653 = !{null, !316}
!654 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !634, file: !632, line: 111, baseType: !655, size: 64, offset: 192)
!655 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!656 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !634, file: !632, line: 114, baseType: !657, size: 64, offset: 256)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !658, line: 46, baseType: !278)
!658 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!659 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !634, file: !632, line: 117, baseType: !657, size: 64, offset: 320)
!660 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !634, file: !632, line: 120, baseType: !657, size: 64, offset: 384)
!661 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !634, file: !632, line: 124, baseType: !17, size: 32, offset: 448)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !634, file: !632, line: 128, baseType: !17, size: 32, offset: 480)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !634, file: !632, line: 131, baseType: !664, size: 64, offset: 512)
!664 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !632, line: 75, baseType: !665)
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !666, size: 64)
!666 = !DISubroutineType(types: !667)
!667 = !{!316, !657, !657}
!668 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !634, file: !632, line: 132, baseType: !669, size: 64, offset: 576)
!669 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !632, line: 78, baseType: !651)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !634, file: !632, line: 135, baseType: !316, size: 64, offset: 640)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !634, file: !632, line: 136, baseType: !672, size: 64, offset: 704)
!672 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !632, line: 82, baseType: !673)
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !674, size: 64)
!674 = !DISubroutineType(types: !675)
!675 = !{!316, !316, !657, !657}
!676 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !634, file: !632, line: 137, baseType: !677, size: 64, offset: 768)
!677 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !632, line: 83, baseType: !678)
!678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !679, size: 64)
!679 = !DISubroutineType(types: !680)
!680 = !{null, !316, !316}
!681 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !634, file: !632, line: 141, baseType: !17, size: 32, offset: 832)
!682 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !628, file: !529, line: 48, baseType: !683, size: 64, offset: 64)
!683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !684, size: 64)
!684 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !11, line: 35, baseType: !685)
!685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !11, line: 35, size: 128, elements: !686)
!686 = !{!687}
!687 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !685, file: !11, line: 35, baseType: !688, size: 128)
!688 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !11, line: 33, baseType: !689)
!689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !11, line: 33, size: 128, elements: !690)
!690 = !{!691, !692, !693}
!691 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !689, file: !11, line: 33, baseType: !17, size: 32)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !689, file: !11, line: 33, baseType: !17, size: 32, offset: 32)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !689, file: !11, line: 33, baseType: !694, size: 64, offset: 64)
!694 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !115)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !628, file: !529, line: 51, baseType: !696, size: 64, offset: 128)
!696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !697, size: 64)
!697 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !329, line: 183, baseType: !698)
!698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !329, line: 183, size: 128, elements: !699)
!699 = !{!700}
!700 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !698, file: !329, line: 183, baseType: !701, size: 128)
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !329, line: 182, baseType: !702)
!702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !329, line: 182, size: 128, elements: !703)
!703 = !{!704, !705, !706}
!704 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !702, file: !329, line: 182, baseType: !17, size: 32)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !702, file: !329, line: 182, baseType: !17, size: 32, offset: 32)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !702, file: !329, line: 182, baseType: !707, size: 64, offset: 64)
!707 = !DICompositeType(tag: DW_TAG_array_type, baseType: !326, size: 64, elements: !115)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !628, file: !529, line: 54, baseType: !326, size: 64, offset: 192)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !628, file: !529, line: 57, baseType: !710, size: 128, offset: 256)
!710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !711, line: 31, size: 128, elements: !712)
!711 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!712 = !{!713, !714, !715, !716, !717, !718, !719}
!713 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !710, file: !711, line: 35, baseType: !17, size: 1, flags: DIFlagBitField, extraData: i64 0)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !710, file: !711, line: 39, baseType: !17, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !710, file: !711, line: 42, baseType: !17, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !710, file: !711, line: 46, baseType: !17, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !710, file: !711, line: 50, baseType: !17, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !710, file: !711, line: 53, baseType: !17, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !710, file: !711, line: 56, baseType: !720, size: 64, offset: 64)
!720 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !8, line: 47, baseType: !262)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !628, file: !529, line: 60, baseType: !710, size: 128, offset: 384)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !628, file: !529, line: 64, baseType: !723, size: 64, offset: 512)
!723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !724, size: 64)
!724 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !725, line: 33, flags: DIFlagFwdDecl)
!725 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!726 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !628, file: !529, line: 67, baseType: !326, size: 64, offset: 576)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !628, file: !529, line: 73, baseType: !631, size: 64, offset: 640)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !628, file: !529, line: 77, baseType: !720, size: 64, offset: 704)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !628, file: !529, line: 80, baseType: !17, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !628, file: !529, line: 82, baseType: !731, size: 320, offset: 832)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !732, line: 62, size: 320, elements: !733)
!732 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!733 = !{!734, !740, !741, !742, !743, !750}
!734 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !731, file: !732, line: 63, baseType: !735, size: 64)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !736, size: 64)
!736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !732, line: 56, size: 128, elements: !737)
!737 = !{!738, !739}
!738 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !736, file: !732, line: 57, baseType: !735, size: 64)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !736, file: !732, line: 58, baseType: !422, size: 8, offset: 64)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !731, file: !732, line: 64, baseType: !17, size: 32, offset: 64)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !731, file: !732, line: 66, baseType: !17, size: 32, offset: 96)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !731, file: !732, line: 68, baseType: !6, size: 8, offset: 128)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !731, file: !732, line: 70, baseType: !744, size: 64, offset: 192)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64)
!745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !732, line: 37, size: 128, elements: !746)
!746 = !{!747, !748}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !745, file: !732, line: 39, baseType: !744, size: 64)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !745, file: !732, line: 40, baseType: !749, size: 64, offset: 64)
!749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !326, size: 64)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !731, file: !732, line: 71, baseType: !751, size: 64, offset: 256)
!751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !752, size: 64)
!752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !732, line: 45, size: 320, elements: !753)
!753 = !{!754, !755}
!754 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !752, file: !732, line: 47, baseType: !751, size: 64)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !752, file: !732, line: 48, baseType: !756, size: 256, offset: 64)
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !329, line: 1883, size: 256, elements: !757)
!757 = !{!758, !760, !761, !766}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !756, file: !329, line: 1884, baseType: !759, size: 64)
!759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !756, size: 64)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !756, file: !329, line: 1885, baseType: !759, size: 64, offset: 64)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !756, file: !329, line: 1891, baseType: !762, size: 64, offset: 128)
!762 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !756, file: !329, line: 1891, size: 64, elements: !763)
!763 = !{!764, !765}
!764 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !762, file: !329, line: 1891, baseType: !7, size: 64)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !762, file: !329, line: 1891, baseType: !326, size: 64)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !756, file: !329, line: 1892, baseType: !749, size: 64, offset: 192)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !578, file: !579, line: 476, baseType: !768, size: 64, offset: 256)
!768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !769, size: 64)
!769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !770, line: 187, size: 256, elements: !771)
!770 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!771 = !{!772, !773, !841, !842}
!772 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !769, file: !770, line: 189, baseType: !100, size: 32)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !769, file: !770, line: 192, baseType: !774, size: 64, offset: 64)
!774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !775, size: 64)
!775 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !770, line: 87, baseType: !776)
!776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !770, line: 87, size: 128, elements: !777)
!777 = !{!778}
!778 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !776, file: !770, line: 87, baseType: !779, size: 128)
!779 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !770, line: 85, baseType: !780)
!780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !770, line: 85, size: 128, elements: !781)
!781 = !{!782, !783, !784}
!782 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !780, file: !770, line: 85, baseType: !17, size: 32)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !780, file: !770, line: 85, baseType: !17, size: 32, offset: 32)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !780, file: !770, line: 85, baseType: !785, size: 64, offset: 64)
!785 = !DICompositeType(tag: DW_TAG_array_type, baseType: !786, size: 64, elements: !115)
!786 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !770, line: 84, baseType: !787)
!787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !788, size: 64)
!788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !770, line: 100, size: 1216, elements: !789)
!789 = !{!790, !791, !792, !793, !794, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !823, !831, !839, !840}
!790 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !788, file: !770, line: 102, baseType: !100, size: 32)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !788, file: !770, line: 105, baseType: !17, size: 32, offset: 32)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !788, file: !770, line: 108, baseType: !34, size: 64, offset: 64)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !788, file: !770, line: 111, baseType: !34, size: 64, offset: 128)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !788, file: !770, line: 114, baseType: !795, size: 64, offset: 192)
!795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !770, line: 41, size: 64, elements: !796)
!796 = !{!797, !806}
!797 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !795, file: !770, line: 42, baseType: !798, size: 32)
!798 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !770, line: 31, baseType: !17, size: 32, elements: !799)
!799 = !{!800, !801, !802, !803, !804, !805}
!800 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!801 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!802 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!803 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!804 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!805 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !795, file: !770, line: 43, baseType: !17, size: 32, offset: 32)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !788, file: !770, line: 117, baseType: !17, size: 32, offset: 256)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !788, file: !770, line: 120, baseType: !17, size: 32, offset: 288)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !788, file: !770, line: 123, baseType: !774, size: 64, offset: 320)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !788, file: !770, line: 126, baseType: !787, size: 64, offset: 384)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !788, file: !770, line: 129, baseType: !787, size: 64, offset: 448)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !788, file: !770, line: 132, baseType: !316, size: 64, offset: 512)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !788, file: !770, line: 139, baseType: !326, size: 64, offset: 576)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !788, file: !770, line: 143, baseType: !375, size: 128, offset: 640)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !788, file: !770, line: 146, baseType: !375, size: 128, offset: 768)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !788, file: !770, line: 148, baseType: !6, size: 8, offset: 896)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !788, file: !770, line: 149, baseType: !6, size: 8, offset: 904)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !788, file: !770, line: 153, baseType: !819, size: 32, offset: 928)
!819 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !770, line: 91, baseType: !17, size: 32, elements: !820)
!820 = !{!821, !822}
!821 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!822 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !788, file: !770, line: 156, baseType: !824, size: 64, offset: 960)
!824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !825, size: 64)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !770, line: 48, size: 320, elements: !826)
!826 = !{!827, !828, !829, !830}
!827 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !825, file: !770, line: 50, baseType: !7, size: 64)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !825, file: !770, line: 59, baseType: !375, size: 128, offset: 64)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !825, file: !770, line: 64, baseType: !6, size: 8, offset: 192)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !825, file: !770, line: 67, baseType: !824, size: 64, offset: 256)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !788, file: !770, line: 159, baseType: !832, size: 64, offset: 1024)
!832 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !833, size: 64)
!833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !770, line: 72, size: 256, elements: !834)
!834 = !{!835, !836, !837, !838}
!835 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !833, file: !770, line: 74, baseType: !52, size: 64)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !833, file: !770, line: 77, baseType: !832, size: 64, offset: 64)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !833, file: !770, line: 78, baseType: !832, size: 64, offset: 128)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !833, file: !770, line: 81, baseType: !832, size: 64, offset: 192)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !788, file: !770, line: 162, baseType: !6, size: 8, offset: 1088)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !788, file: !770, line: 166, baseType: !326, size: 64, offset: 1152)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !769, file: !770, line: 197, baseType: !631, size: 64, offset: 128)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !769, file: !770, line: 200, baseType: !787, size: 64, offset: 192)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !578, file: !579, line: 479, baseType: !631, size: 64, offset: 320)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !578, file: !579, line: 484, baseType: !326, size: 64, offset: 384)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !578, file: !579, line: 488, baseType: !326, size: 64, offset: 448)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !578, file: !579, line: 493, baseType: !326, size: 64, offset: 512)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !578, file: !579, line: 496, baseType: !326, size: 64, offset: 576)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !578, file: !579, line: 501, baseType: !849, size: 64, offset: 640)
!849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !850, size: 64)
!850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !851, line: 2355, size: 576, elements: !852)
!851 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!852 = !{!853, !856, !857, !858, !859, !861, !862, !867, !872, !873, !874, !875, !876}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !850, file: !851, line: 2356, baseType: !854, size: 64)
!854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !855, size: 64)
!855 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !851, line: 2356, flags: DIFlagFwdDecl)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !850, file: !851, line: 2357, baseType: !103, size: 64, offset: 64)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !850, file: !851, line: 2358, baseType: !100, size: 32, offset: 128)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !850, file: !851, line: 2359, baseType: !100, size: 32, offset: 160)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !850, file: !851, line: 2360, baseType: !860, size: 128, offset: 192)
!860 = !DICompositeType(tag: DW_TAG_array_type, baseType: !100, size: 128, elements: !305)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !850, file: !851, line: 2364, baseType: !100, size: 32, offset: 320)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !850, file: !851, line: 2367, baseType: !863, size: 128, offset: 384)
!863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !851, line: 2349, size: 128, elements: !864)
!864 = !{!865, !866}
!865 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !863, file: !851, line: 2351, baseType: !76, size: 64)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !863, file: !851, line: 2352, baseType: !295, size: 64, offset: 64)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !850, file: !851, line: 2371, baseType: !868, size: 32, offset: 512)
!868 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !851, line: 474, baseType: !17, size: 32, elements: !869)
!869 = !{!870, !871}
!870 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!871 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !850, file: !851, line: 2374, baseType: !17, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !850, file: !851, line: 2377, baseType: !17, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !850, file: !851, line: 2381, baseType: !17, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !850, file: !851, line: 2392, baseType: !17, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !850, file: !851, line: 2396, baseType: !17, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !578, file: !579, line: 504, baseType: !878, size: 64, offset: 704)
!878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !879, size: 64)
!879 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !579, line: 504, flags: DIFlagFwdDecl)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !578, file: !579, line: 507, baseType: !631, size: 64, offset: 768)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !578, file: !579, line: 510, baseType: !100, size: 32, offset: 832)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !578, file: !579, line: 513, baseType: !100, size: 32, offset: 864)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !578, file: !579, line: 516, baseType: !28, size: 32, offset: 896)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !578, file: !579, line: 519, baseType: !28, size: 32, offset: 928)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !578, file: !579, line: 522, baseType: !17, size: 32, offset: 960)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !578, file: !579, line: 523, baseType: !17, size: 32, offset: 992)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !578, file: !579, line: 528, baseType: !103, size: 64, offset: 1024)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !578, file: !579, line: 535, baseType: !17, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !578, file: !579, line: 539, baseType: !17, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !578, file: !579, line: 543, baseType: !17, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !578, file: !579, line: 546, baseType: !17, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !578, file: !579, line: 550, baseType: !17, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !578, file: !579, line: 554, baseType: !17, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !578, file: !579, line: 559, baseType: !17, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !578, file: !579, line: 562, baseType: !17, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !578, file: !579, line: 571, baseType: !17, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !578, file: !579, line: 573, baseType: !17, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !578, file: !579, line: 574, baseType: !17, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !578, file: !579, line: 581, baseType: !17, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !578, file: !579, line: 585, baseType: !17, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !578, file: !579, line: 588, baseType: !17, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !578, file: !579, line: 592, baseType: !17, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !578, file: !579, line: 598, baseType: !17, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !573, file: !329, line: 3254, baseType: !326, size: 64, offset: 1536)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !573, file: !329, line: 3257, baseType: !326, size: 64, offset: 1600)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !573, file: !329, line: 3258, baseType: !326, size: 64, offset: 1664)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !573, file: !329, line: 3264, baseType: !17, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !573, file: !329, line: 3265, baseType: !17, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !573, file: !329, line: 3267, baseType: !17, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !573, file: !329, line: 3268, baseType: !17, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !573, file: !329, line: 3269, baseType: !17, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !573, file: !329, line: 3271, baseType: !17, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !573, file: !329, line: 3272, baseType: !17, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !573, file: !329, line: 3273, baseType: !17, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !573, file: !329, line: 3274, baseType: !17, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !573, file: !329, line: 3275, baseType: !17, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !573, file: !329, line: 3276, baseType: !17, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !573, file: !329, line: 3277, baseType: !17, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !573, file: !329, line: 3279, baseType: !17, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !573, file: !329, line: 3280, baseType: !17, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !573, file: !329, line: 3281, baseType: !17, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !573, file: !329, line: 3282, baseType: !17, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !573, file: !329, line: 3283, baseType: !17, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !573, file: !329, line: 3284, baseType: !17, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !328, file: !329, line: 3394, baseType: !926, size: 1344)
!926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !329, line: 2279, size: 1344, elements: !927)
!927 = !{!928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !953, !954, !955, !963, !964, !965, !966, !967, !968, !969, !970, !971}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !926, file: !329, line: 2280, baseType: !365, size: 192)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !926, file: !329, line: 2281, baseType: !326, size: 64, offset: 192)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !926, file: !329, line: 2282, baseType: !326, size: 64, offset: 256)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !926, file: !329, line: 2283, baseType: !326, size: 64, offset: 320)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !926, file: !329, line: 2284, baseType: !326, size: 64, offset: 384)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !926, file: !329, line: 2285, baseType: !17, size: 32, offset: 448)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !926, file: !329, line: 2287, baseType: !17, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !926, file: !329, line: 2288, baseType: !17, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !926, file: !329, line: 2289, baseType: !17, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !926, file: !329, line: 2290, baseType: !17, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !926, file: !329, line: 2291, baseType: !17, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !926, file: !329, line: 2292, baseType: !17, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !926, file: !329, line: 2294, baseType: !17, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !926, file: !329, line: 2296, baseType: !17, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !926, file: !329, line: 2297, baseType: !17, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !926, file: !329, line: 2298, baseType: !17, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !926, file: !329, line: 2299, baseType: !17, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !926, file: !329, line: 2300, baseType: !17, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !926, file: !329, line: 2301, baseType: !17, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !926, file: !329, line: 2302, baseType: !17, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !926, file: !329, line: 2303, baseType: !17, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !926, file: !329, line: 2305, baseType: !17, size: 32, offset: 512)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !926, file: !329, line: 2306, baseType: !951, size: 32, offset: 544)
!951 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !952, line: 31, baseType: !100)
!952 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!953 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !926, file: !329, line: 2307, baseType: !326, size: 64, offset: 576)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !926, file: !329, line: 2308, baseType: !326, size: 64, offset: 640)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !926, file: !329, line: 2314, baseType: !956, size: 64, offset: 704)
!956 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !329, line: 2309, size: 64, elements: !957)
!957 = !{!958, !959, !960}
!958 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !956, file: !329, line: 2310, baseType: !100, size: 32)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !956, file: !329, line: 2311, baseType: !103, size: 64)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !956, file: !329, line: 2312, baseType: !961, size: 64)
!961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !962, size: 64)
!962 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !329, line: 2277, flags: DIFlagFwdDecl)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !926, file: !329, line: 2315, baseType: !326, size: 64, offset: 768)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !926, file: !329, line: 2316, baseType: !326, size: 64, offset: 832)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !926, file: !329, line: 2317, baseType: !326, size: 64, offset: 896)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !926, file: !329, line: 2318, baseType: !326, size: 64, offset: 960)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !926, file: !329, line: 2319, baseType: !326, size: 64, offset: 1024)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !926, file: !329, line: 2320, baseType: !326, size: 64, offset: 1088)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !926, file: !329, line: 2321, baseType: !326, size: 64, offset: 1152)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !926, file: !329, line: 2322, baseType: !326, size: 64, offset: 1216)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !926, file: !329, line: 2324, baseType: !972, size: 64, offset: 1280)
!972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !973, size: 64)
!973 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !329, line: 2324, flags: DIFlagFwdDecl)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !328, file: !329, line: 3395, baseType: !975, size: 320)
!975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !329, line: 1469, size: 320, elements: !976)
!976 = !{!977, !978, !979}
!977 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !975, file: !329, line: 1470, baseType: !365, size: 192)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !975, file: !329, line: 1471, baseType: !326, size: 64, offset: 192)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !975, file: !329, line: 1472, baseType: !326, size: 64, offset: 256)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !328, file: !329, line: 3396, baseType: !981, size: 320)
!981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !329, line: 1482, size: 320, elements: !982)
!982 = !{!983, !984, !985}
!983 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !981, file: !329, line: 1483, baseType: !365, size: 192)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !981, file: !329, line: 1484, baseType: !100, size: 32, offset: 192)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !981, file: !329, line: 1485, baseType: !707, size: 64, offset: 256)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !328, file: !329, line: 3397, baseType: !987, size: 384)
!987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !329, line: 1829, size: 384, elements: !988)
!988 = !{!989, !990, !991, !992}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !987, file: !329, line: 1830, baseType: !365, size: 192)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !987, file: !329, line: 1831, baseType: !28, size: 32, offset: 192)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !987, file: !329, line: 1832, baseType: !326, size: 64, offset: 256)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !987, file: !329, line: 1835, baseType: !707, size: 64, offset: 320)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !328, file: !329, line: 3398, baseType: !994, size: 704)
!994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !329, line: 1898, size: 704, elements: !995)
!995 = !{!996, !997, !998, !999, !1000, !1005}
!996 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !994, file: !329, line: 1899, baseType: !365, size: 192)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !994, file: !329, line: 1902, baseType: !326, size: 64, offset: 192)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !994, file: !329, line: 1905, baseType: !7, size: 64, offset: 256)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !994, file: !329, line: 1908, baseType: !17, size: 32, offset: 320)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !994, file: !329, line: 1911, baseType: !1001, size: 64, offset: 384)
!1001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1002, size: 64)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !529, line: 117, size: 128, elements: !1003)
!1003 = !{!1004}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1002, file: !529, line: 120, baseType: !710, size: 128)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !994, file: !329, line: 1914, baseType: !756, size: 256, offset: 448)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !328, file: !329, line: 3399, baseType: !1007, size: 704)
!1007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !329, line: 2008, size: 704, elements: !1008)
!1008 = !{!1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1007, file: !329, line: 2009, baseType: !365, size: 192)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1007, file: !329, line: 2011, baseType: !17, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1007, file: !329, line: 2012, baseType: !17, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1007, file: !329, line: 2014, baseType: !28, size: 32, offset: 224)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1007, file: !329, line: 2016, baseType: !326, size: 64, offset: 256)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1007, file: !329, line: 2017, baseType: !696, size: 64, offset: 320)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1007, file: !329, line: 2019, baseType: !326, size: 64, offset: 384)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1007, file: !329, line: 2020, baseType: !326, size: 64, offset: 448)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1007, file: !329, line: 2021, baseType: !326, size: 64, offset: 512)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1007, file: !329, line: 2022, baseType: !326, size: 64, offset: 576)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1007, file: !329, line: 2023, baseType: !326, size: 64, offset: 640)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !328, file: !329, line: 3400, baseType: !1021, size: 832)
!1021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !329, line: 2430, size: 832, elements: !1022)
!1022 = !{!1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032}
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1021, file: !329, line: 2431, baseType: !365, size: 192)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1021, file: !329, line: 2433, baseType: !326, size: 64, offset: 192)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1021, file: !329, line: 2434, baseType: !326, size: 64, offset: 256)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1021, file: !329, line: 2435, baseType: !326, size: 64, offset: 320)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1021, file: !329, line: 2436, baseType: !326, size: 64, offset: 384)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1021, file: !329, line: 2437, baseType: !696, size: 64, offset: 448)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1021, file: !329, line: 2438, baseType: !326, size: 64, offset: 512)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1021, file: !329, line: 2440, baseType: !326, size: 64, offset: 576)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1021, file: !329, line: 2441, baseType: !326, size: 64, offset: 640)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1021, file: !329, line: 2443, baseType: !1033, size: 128, offset: 704)
!1033 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !329, line: 182, baseType: !1034)
!1034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !329, line: 182, size: 128, elements: !1035)
!1035 = !{!1036}
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1034, file: !329, line: 182, baseType: !701, size: 128)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !328, file: !329, line: 3401, baseType: !1038, size: 320)
!1038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !329, line: 3327, size: 320, elements: !1039)
!1039 = !{!1040, !1041, !1048}
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1038, file: !329, line: 3329, baseType: !365, size: 192)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1038, file: !329, line: 3330, baseType: !1042, size: 64, offset: 192)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !329, line: 3320, size: 192, elements: !1044)
!1044 = !{!1045, !1046, !1047}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1043, file: !329, line: 3322, baseType: !1042, size: 64)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1043, file: !329, line: 3323, baseType: !1042, size: 64, offset: 64)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1043, file: !329, line: 3324, baseType: !326, size: 64, offset: 128)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1038, file: !329, line: 3331, baseType: !1042, size: 64, offset: 256)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !328, file: !329, line: 3402, baseType: !1050, size: 256)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !329, line: 1540, size: 256, elements: !1051)
!1051 = !{!1052, !1053}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1050, file: !329, line: 1541, baseType: !365, size: 192)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1050, file: !329, line: 1542, baseType: !1054, size: 64, offset: 192)
!1054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1055 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !329, line: 1538, baseType: !1056)
!1056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !329, line: 1538, size: 192, elements: !1057)
!1057 = !{!1058}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1056, file: !329, line: 1538, baseType: !1059, size: 192)
!1059 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !329, line: 1537, baseType: !1060)
!1060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !329, line: 1537, size: 192, elements: !1061)
!1061 = !{!1062, !1063, !1064}
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1060, file: !329, line: 1537, baseType: !17, size: 32)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1060, file: !329, line: 1537, baseType: !17, size: 32, offset: 32)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1060, file: !329, line: 1537, baseType: !1065, size: 128, offset: 64)
!1065 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1066, size: 128, elements: !115)
!1066 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !329, line: 1535, baseType: !1067)
!1067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !329, line: 1532, size: 128, elements: !1068)
!1068 = !{!1069, !1070}
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1067, file: !329, line: 1533, baseType: !326, size: 64)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1067, file: !329, line: 1534, baseType: !326, size: 64, offset: 64)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !328, file: !329, line: 3403, baseType: !1072, size: 512)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !329, line: 1938, size: 512, elements: !1073)
!1073 = !{!1074, !1075, !1076, !1095, !1309, !1310, !1311}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1072, file: !329, line: 1939, baseType: !365, size: 192)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1072, file: !329, line: 1940, baseType: !28, size: 32, offset: 192)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1072, file: !329, line: 1941, baseType: !1077, size: 32, offset: 224)
!1077 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !329, line: 280, baseType: !17, size: 32, elements: !1078)
!1078 = !{!1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094}
!1079 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!1080 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!1081 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!1082 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!1083 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!1084 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!1085 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!1086 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!1087 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!1088 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!1089 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!1090 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!1091 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!1092 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!1093 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!1094 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1072, file: !329, line: 1946, baseType: !1096, size: 32, offset: 256)
!1096 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !329, line: 1942, size: 32, elements: !1097)
!1097 = !{!1098, !1106, !1114}
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1096, file: !329, line: 1943, baseType: !1099, size: 32)
!1099 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !329, line: 1817, baseType: !17, size: 32, elements: !1100)
!1100 = !{!1101, !1102, !1103, !1104, !1105}
!1101 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!1102 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!1103 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!1104 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!1105 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1096, file: !329, line: 1944, baseType: !1107, size: 32)
!1107 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !329, line: 1805, baseType: !17, size: 32, elements: !1108)
!1108 = !{!1109, !1110, !1111, !1112, !1113}
!1109 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!1110 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!1111 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!1112 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!1113 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1096, file: !329, line: 1945, baseType: !1115, size: 32)
!1115 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !329, line: 39, baseType: !17, size: 32, elements: !1116)
!1116 = !{!1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308}
!1117 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!1118 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!1119 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!1120 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!1121 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!1122 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!1123 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!1124 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!1125 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!1126 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!1127 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!1128 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!1129 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!1130 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!1131 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!1132 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!1133 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!1134 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!1135 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!1136 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!1137 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!1138 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!1139 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!1140 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!1141 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!1142 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!1143 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!1144 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!1145 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!1146 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!1147 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!1148 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!1149 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!1150 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!1151 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!1152 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!1153 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!1154 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!1155 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!1156 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!1157 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!1158 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!1159 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!1160 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!1161 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!1162 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!1163 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!1164 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!1165 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!1166 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!1167 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!1168 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!1169 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!1170 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!1171 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!1172 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!1173 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!1174 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!1175 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!1176 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!1177 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!1178 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!1179 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!1180 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!1181 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!1182 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!1183 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!1184 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!1185 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!1186 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!1187 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!1188 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!1189 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!1190 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!1191 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!1192 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!1193 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!1194 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!1195 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!1196 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!1197 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!1198 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!1199 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!1200 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!1201 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!1202 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!1203 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!1204 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!1205 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!1206 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!1207 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!1208 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!1209 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!1210 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!1211 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!1212 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!1213 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!1214 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!1215 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!1216 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!1217 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!1218 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!1219 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!1220 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!1221 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!1222 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!1223 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!1224 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!1225 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!1226 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!1227 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!1228 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!1229 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!1230 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!1231 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!1232 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!1233 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!1234 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!1235 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!1236 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!1237 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!1238 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!1239 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!1240 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!1241 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!1242 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!1243 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!1244 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!1245 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!1246 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!1247 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!1248 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!1249 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!1250 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!1251 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!1252 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!1253 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!1254 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!1255 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!1256 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!1257 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!1258 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!1259 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!1260 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!1261 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!1262 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!1263 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!1264 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!1265 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!1266 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!1267 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!1268 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!1269 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!1270 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!1271 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!1272 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!1273 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!1274 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!1275 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!1276 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!1277 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!1278 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!1279 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!1280 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!1281 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!1282 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!1283 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!1284 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!1285 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!1286 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!1287 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!1288 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!1289 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!1290 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!1291 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!1292 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!1293 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!1294 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!1295 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!1296 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!1297 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!1298 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!1299 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!1300 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!1301 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!1302 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!1304 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!1305 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!1306 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!1307 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!1308 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1072, file: !329, line: 1950, baseType: !61, size: 64, offset: 320)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1072, file: !329, line: 1951, baseType: !61, size: 64, offset: 384)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1072, file: !329, line: 1953, baseType: !707, size: 64, offset: 448)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !328, file: !329, line: 3404, baseType: !1313, size: 1664)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !329, line: 3337, size: 1664, elements: !1314)
!1314 = !{!1315, !1316}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1313, file: !329, line: 3338, baseType: !365, size: 192)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1313, file: !329, line: 3341, baseType: !1317, size: 1472, offset: 192)
!1317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1318, line: 410, size: 1472, elements: !1319)
!1318 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1319 = !{!1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1317, file: !1318, line: 412, baseType: !100, size: 32)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1317, file: !1318, line: 413, baseType: !100, size: 32, offset: 32)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1317, file: !1318, line: 414, baseType: !100, size: 32, offset: 64)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1317, file: !1318, line: 415, baseType: !100, size: 32, offset: 96)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1317, file: !1318, line: 416, baseType: !100, size: 32, offset: 128)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1317, file: !1318, line: 417, baseType: !100, size: 32, offset: 160)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1317, file: !1318, line: 418, baseType: !6, size: 8, offset: 192)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1317, file: !1318, line: 419, baseType: !6, size: 8, offset: 200)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1317, file: !1318, line: 420, baseType: !1329, size: 8, offset: 208)
!1329 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1317, file: !1318, line: 421, baseType: !1329, size: 8, offset: 216)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1317, file: !1318, line: 422, baseType: !1329, size: 8, offset: 224)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1317, file: !1318, line: 423, baseType: !1329, size: 8, offset: 232)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1317, file: !1318, line: 424, baseType: !1329, size: 8, offset: 240)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1317, file: !1318, line: 425, baseType: !1329, size: 8, offset: 248)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1317, file: !1318, line: 426, baseType: !1329, size: 8, offset: 256)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1317, file: !1318, line: 427, baseType: !1329, size: 8, offset: 264)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1317, file: !1318, line: 428, baseType: !1329, size: 8, offset: 272)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1317, file: !1318, line: 429, baseType: !1329, size: 8, offset: 280)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1317, file: !1318, line: 430, baseType: !1329, size: 8, offset: 288)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1317, file: !1318, line: 431, baseType: !1329, size: 8, offset: 296)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1317, file: !1318, line: 432, baseType: !1329, size: 8, offset: 304)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1317, file: !1318, line: 433, baseType: !1329, size: 8, offset: 312)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1317, file: !1318, line: 434, baseType: !1329, size: 8, offset: 320)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1317, file: !1318, line: 435, baseType: !1329, size: 8, offset: 328)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1317, file: !1318, line: 436, baseType: !1329, size: 8, offset: 336)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1317, file: !1318, line: 437, baseType: !1329, size: 8, offset: 344)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1317, file: !1318, line: 438, baseType: !1329, size: 8, offset: 352)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1317, file: !1318, line: 439, baseType: !1329, size: 8, offset: 360)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1317, file: !1318, line: 440, baseType: !1329, size: 8, offset: 368)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1317, file: !1318, line: 441, baseType: !1329, size: 8, offset: 376)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1317, file: !1318, line: 442, baseType: !1329, size: 8, offset: 384)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1317, file: !1318, line: 443, baseType: !1329, size: 8, offset: 392)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1317, file: !1318, line: 444, baseType: !1329, size: 8, offset: 400)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1317, file: !1318, line: 445, baseType: !1329, size: 8, offset: 408)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1317, file: !1318, line: 446, baseType: !1329, size: 8, offset: 416)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1317, file: !1318, line: 447, baseType: !1329, size: 8, offset: 424)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1317, file: !1318, line: 448, baseType: !1329, size: 8, offset: 432)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1317, file: !1318, line: 449, baseType: !1329, size: 8, offset: 440)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1317, file: !1318, line: 450, baseType: !1329, size: 8, offset: 448)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1317, file: !1318, line: 451, baseType: !1329, size: 8, offset: 456)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1317, file: !1318, line: 452, baseType: !1329, size: 8, offset: 464)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1317, file: !1318, line: 453, baseType: !1329, size: 8, offset: 472)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1317, file: !1318, line: 454, baseType: !1329, size: 8, offset: 480)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1317, file: !1318, line: 455, baseType: !1329, size: 8, offset: 488)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1317, file: !1318, line: 456, baseType: !1329, size: 8, offset: 496)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1317, file: !1318, line: 457, baseType: !1329, size: 8, offset: 504)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1317, file: !1318, line: 458, baseType: !1329, size: 8, offset: 512)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1317, file: !1318, line: 459, baseType: !1329, size: 8, offset: 520)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1317, file: !1318, line: 460, baseType: !1329, size: 8, offset: 528)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1317, file: !1318, line: 461, baseType: !1329, size: 8, offset: 536)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1317, file: !1318, line: 462, baseType: !1329, size: 8, offset: 544)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1317, file: !1318, line: 463, baseType: !1329, size: 8, offset: 552)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1317, file: !1318, line: 464, baseType: !1329, size: 8, offset: 560)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1317, file: !1318, line: 465, baseType: !1329, size: 8, offset: 568)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1317, file: !1318, line: 466, baseType: !1329, size: 8, offset: 576)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1317, file: !1318, line: 467, baseType: !1329, size: 8, offset: 584)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1317, file: !1318, line: 468, baseType: !1329, size: 8, offset: 592)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1317, file: !1318, line: 469, baseType: !1329, size: 8, offset: 600)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1317, file: !1318, line: 470, baseType: !1329, size: 8, offset: 608)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1317, file: !1318, line: 471, baseType: !1329, size: 8, offset: 616)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1317, file: !1318, line: 472, baseType: !1329, size: 8, offset: 624)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1317, file: !1318, line: 473, baseType: !1329, size: 8, offset: 632)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1317, file: !1318, line: 474, baseType: !1329, size: 8, offset: 640)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1317, file: !1318, line: 475, baseType: !1329, size: 8, offset: 648)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1317, file: !1318, line: 476, baseType: !1329, size: 8, offset: 656)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1317, file: !1318, line: 477, baseType: !1329, size: 8, offset: 664)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1317, file: !1318, line: 478, baseType: !1329, size: 8, offset: 672)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1317, file: !1318, line: 479, baseType: !1329, size: 8, offset: 680)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1317, file: !1318, line: 480, baseType: !1329, size: 8, offset: 688)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1317, file: !1318, line: 481, baseType: !1329, size: 8, offset: 696)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1317, file: !1318, line: 482, baseType: !1329, size: 8, offset: 704)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1317, file: !1318, line: 483, baseType: !1329, size: 8, offset: 712)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1317, file: !1318, line: 484, baseType: !1329, size: 8, offset: 720)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1317, file: !1318, line: 485, baseType: !1329, size: 8, offset: 728)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1317, file: !1318, line: 486, baseType: !1329, size: 8, offset: 736)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1317, file: !1318, line: 487, baseType: !1329, size: 8, offset: 744)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1317, file: !1318, line: 488, baseType: !1329, size: 8, offset: 752)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1317, file: !1318, line: 489, baseType: !1329, size: 8, offset: 760)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1317, file: !1318, line: 490, baseType: !1329, size: 8, offset: 768)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1317, file: !1318, line: 491, baseType: !1329, size: 8, offset: 776)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1317, file: !1318, line: 492, baseType: !1329, size: 8, offset: 784)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1317, file: !1318, line: 493, baseType: !1329, size: 8, offset: 792)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1317, file: !1318, line: 494, baseType: !1329, size: 8, offset: 800)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1317, file: !1318, line: 495, baseType: !1329, size: 8, offset: 808)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1317, file: !1318, line: 496, baseType: !1329, size: 8, offset: 816)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1317, file: !1318, line: 497, baseType: !1329, size: 8, offset: 824)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1317, file: !1318, line: 498, baseType: !1329, size: 8, offset: 832)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1317, file: !1318, line: 499, baseType: !1329, size: 8, offset: 840)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1317, file: !1318, line: 500, baseType: !1329, size: 8, offset: 848)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1317, file: !1318, line: 501, baseType: !1329, size: 8, offset: 856)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1317, file: !1318, line: 502, baseType: !1329, size: 8, offset: 864)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1317, file: !1318, line: 503, baseType: !1329, size: 8, offset: 872)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1317, file: !1318, line: 504, baseType: !1329, size: 8, offset: 880)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1317, file: !1318, line: 505, baseType: !1329, size: 8, offset: 888)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1317, file: !1318, line: 506, baseType: !1329, size: 8, offset: 896)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1317, file: !1318, line: 507, baseType: !1329, size: 8, offset: 904)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1317, file: !1318, line: 508, baseType: !1329, size: 8, offset: 912)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1317, file: !1318, line: 509, baseType: !1329, size: 8, offset: 920)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1317, file: !1318, line: 510, baseType: !1329, size: 8, offset: 928)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1317, file: !1318, line: 511, baseType: !1329, size: 8, offset: 936)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1317, file: !1318, line: 512, baseType: !1329, size: 8, offset: 944)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1317, file: !1318, line: 513, baseType: !1329, size: 8, offset: 952)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1317, file: !1318, line: 514, baseType: !1329, size: 8, offset: 960)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1317, file: !1318, line: 515, baseType: !1329, size: 8, offset: 968)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1317, file: !1318, line: 516, baseType: !1329, size: 8, offset: 976)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1317, file: !1318, line: 517, baseType: !1329, size: 8, offset: 984)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1317, file: !1318, line: 518, baseType: !1329, size: 8, offset: 992)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1317, file: !1318, line: 519, baseType: !1329, size: 8, offset: 1000)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1317, file: !1318, line: 520, baseType: !1329, size: 8, offset: 1008)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1317, file: !1318, line: 521, baseType: !1329, size: 8, offset: 1016)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1317, file: !1318, line: 522, baseType: !1329, size: 8, offset: 1024)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1317, file: !1318, line: 523, baseType: !1329, size: 8, offset: 1032)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1317, file: !1318, line: 524, baseType: !1329, size: 8, offset: 1040)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1317, file: !1318, line: 525, baseType: !1329, size: 8, offset: 1048)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1317, file: !1318, line: 526, baseType: !1329, size: 8, offset: 1056)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1317, file: !1318, line: 527, baseType: !1329, size: 8, offset: 1064)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1317, file: !1318, line: 528, baseType: !1329, size: 8, offset: 1072)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1317, file: !1318, line: 529, baseType: !1329, size: 8, offset: 1080)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1317, file: !1318, line: 530, baseType: !1329, size: 8, offset: 1088)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1317, file: !1318, line: 531, baseType: !1329, size: 8, offset: 1096)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1317, file: !1318, line: 532, baseType: !1329, size: 8, offset: 1104)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1317, file: !1318, line: 533, baseType: !1329, size: 8, offset: 1112)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1317, file: !1318, line: 534, baseType: !1329, size: 8, offset: 1120)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1317, file: !1318, line: 535, baseType: !1329, size: 8, offset: 1128)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1317, file: !1318, line: 536, baseType: !1329, size: 8, offset: 1136)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1317, file: !1318, line: 537, baseType: !1329, size: 8, offset: 1144)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1317, file: !1318, line: 538, baseType: !1329, size: 8, offset: 1152)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1317, file: !1318, line: 539, baseType: !1329, size: 8, offset: 1160)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1317, file: !1318, line: 540, baseType: !1329, size: 8, offset: 1168)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1317, file: !1318, line: 541, baseType: !1329, size: 8, offset: 1176)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1317, file: !1318, line: 542, baseType: !1329, size: 8, offset: 1184)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1317, file: !1318, line: 543, baseType: !1329, size: 8, offset: 1192)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1317, file: !1318, line: 544, baseType: !1329, size: 8, offset: 1200)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1317, file: !1318, line: 545, baseType: !1329, size: 8, offset: 1208)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1317, file: !1318, line: 546, baseType: !1329, size: 8, offset: 1216)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1317, file: !1318, line: 547, baseType: !1329, size: 8, offset: 1224)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1317, file: !1318, line: 548, baseType: !1329, size: 8, offset: 1232)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1317, file: !1318, line: 549, baseType: !1329, size: 8, offset: 1240)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1317, file: !1318, line: 550, baseType: !1329, size: 8, offset: 1248)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1317, file: !1318, line: 551, baseType: !1329, size: 8, offset: 1256)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1317, file: !1318, line: 552, baseType: !1329, size: 8, offset: 1264)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1317, file: !1318, line: 553, baseType: !1329, size: 8, offset: 1272)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1317, file: !1318, line: 554, baseType: !1329, size: 8, offset: 1280)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1317, file: !1318, line: 555, baseType: !1329, size: 8, offset: 1288)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1317, file: !1318, line: 556, baseType: !1329, size: 8, offset: 1296)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1317, file: !1318, line: 557, baseType: !1329, size: 8, offset: 1304)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1317, file: !1318, line: 558, baseType: !1329, size: 8, offset: 1312)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1317, file: !1318, line: 559, baseType: !1329, size: 8, offset: 1320)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1317, file: !1318, line: 560, baseType: !1329, size: 8, offset: 1328)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1317, file: !1318, line: 561, baseType: !1329, size: 8, offset: 1336)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1317, file: !1318, line: 562, baseType: !1329, size: 8, offset: 1344)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1317, file: !1318, line: 563, baseType: !1329, size: 8, offset: 1352)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1317, file: !1318, line: 564, baseType: !1329, size: 8, offset: 1360)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1317, file: !1318, line: 565, baseType: !1329, size: 8, offset: 1368)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1317, file: !1318, line: 566, baseType: !1329, size: 8, offset: 1376)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1317, file: !1318, line: 567, baseType: !1329, size: 8, offset: 1384)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1317, file: !1318, line: 568, baseType: !1329, size: 8, offset: 1392)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1317, file: !1318, line: 569, baseType: !1329, size: 8, offset: 1400)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1317, file: !1318, line: 570, baseType: !1329, size: 8, offset: 1408)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1317, file: !1318, line: 571, baseType: !1329, size: 8, offset: 1416)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1317, file: !1318, line: 572, baseType: !1329, size: 8, offset: 1424)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1317, file: !1318, line: 573, baseType: !1329, size: 8, offset: 1432)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1317, file: !1318, line: 574, baseType: !1329, size: 8, offset: 1440)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !328, file: !329, line: 3405, baseType: !1485, size: 384)
!1485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !329, line: 3352, size: 384, elements: !1486)
!1486 = !{!1487, !1488}
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1485, file: !329, line: 3353, baseType: !365, size: 192)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1485, file: !329, line: 3356, baseType: !1489, size: 192, offset: 192)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1318, line: 578, size: 192, elements: !1490)
!1490 = !{!1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1489, file: !1318, line: 580, baseType: !100, size: 32)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1489, file: !1318, line: 581, baseType: !100, size: 32, offset: 32)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1489, file: !1318, line: 582, baseType: !100, size: 32, offset: 64)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1489, file: !1318, line: 583, baseType: !100, size: 32, offset: 96)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1489, file: !1318, line: 584, baseType: !6, size: 8, offset: 128)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1489, file: !1318, line: 585, baseType: !6, size: 8, offset: 136)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1489, file: !1318, line: 586, baseType: !6, size: 8, offset: 144)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1489, file: !1318, line: 587, baseType: !6, size: 8, offset: 152)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1489, file: !1318, line: 588, baseType: !6, size: 8, offset: 160)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1489, file: !1318, line: 589, baseType: !6, size: 8, offset: 168)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1489, file: !1318, line: 590, baseType: !6, size: 8, offset: 176)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !97, file: !79, line: 178, baseType: !34, size: 64)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !97, file: !79, line: 179, baseType: !1504, size: 64)
!1504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1505, size: 64)
!1505 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !79, line: 150, baseType: !1506)
!1506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !79, line: 142, size: 320, elements: !1507)
!1507 = !{!1508, !1509, !1510, !1511, !1512, !1513}
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1506, file: !79, line: 144, baseType: !326, size: 64)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1506, file: !79, line: 145, baseType: !76, size: 64, offset: 64)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1506, file: !79, line: 146, baseType: !76, size: 64, offset: 128)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1506, file: !79, line: 147, baseType: !951, size: 32, offset: 192)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1506, file: !79, line: 148, baseType: !17, size: 32, offset: 224)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1506, file: !79, line: 149, baseType: !6, size: 8, offset: 256)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !97, file: !79, line: 180, baseType: !1515, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1516, size: 64)
!1516 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !79, line: 162, baseType: !1517)
!1517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !79, line: 159, size: 128, elements: !1518)
!1518 = !{!1519, !1520}
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1517, file: !79, line: 160, baseType: !326, size: 64)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1517, file: !79, line: 161, baseType: !295, size: 64, offset: 64)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !97, file: !79, line: 181, baseType: !1522, size: 64)
!1522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1523, size: 64)
!1523 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !79, line: 181, flags: DIFlagFwdDecl)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !92, file: !79, line: 317, baseType: !1525, size: 64)
!1525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !295, size: 64, elements: !115)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !92, file: !79, line: 318, baseType: !1527, size: 320)
!1527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !79, line: 188, size: 320, elements: !1528)
!1528 = !{!1529, !1531, !1554}
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1527, file: !79, line: 190, baseType: !1530, size: 192)
!1530 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 192, elements: !398)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1527, file: !79, line: 193, baseType: !1532, size: 64, offset: 192)
!1532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1533, size: 64)
!1533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !79, line: 206, size: 320, elements: !1534)
!1534 = !{!1535, !1539, !1540, !1541, !1553}
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1533, file: !79, line: 208, baseType: !1536, size: 64)
!1536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1537, size: 64)
!1537 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !8, line: 62, baseType: !1538)
!1538 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !8, line: 61, flags: DIFlagFwdDecl)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1533, file: !79, line: 211, baseType: !17, size: 32, offset: 64)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1533, file: !79, line: 214, baseType: !295, size: 64, offset: 128)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1533, file: !79, line: 224, baseType: !1542, size: 64, offset: 192)
!1542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1543, size: 64)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !79, line: 202, baseType: !1544)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !79, line: 202, size: 128, elements: !1545)
!1545 = !{!1546}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1544, file: !79, line: 202, baseType: !1547, size: 128)
!1547 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !79, line: 200, baseType: !1548)
!1548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !79, line: 200, size: 128, elements: !1549)
!1549 = !{!1550, !1551, !1552}
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1548, file: !79, line: 200, baseType: !17, size: 32)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1548, file: !79, line: 200, baseType: !17, size: 32, offset: 32)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1548, file: !79, line: 200, baseType: !114, size: 64, offset: 64)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1533, file: !79, line: 234, baseType: !1542, size: 64, offset: 256)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1527, file: !79, line: 197, baseType: !295, size: 64, offset: 256)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !92, file: !79, line: 319, baseType: !387, size: 256)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !92, file: !79, line: 320, baseType: !406, size: 192)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !53, file: !36, line: 134, baseType: !316, size: 64, offset: 192)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !53, file: !36, line: 137, baseType: !326, size: 64, offset: 256)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !53, file: !36, line: 138, baseType: !28, size: 32, offset: 320)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !53, file: !36, line: 142, baseType: !17, size: 32, offset: 352)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !53, file: !36, line: 144, baseType: !100, size: 32, offset: 384)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !53, file: !36, line: 145, baseType: !100, size: 32, offset: 416)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !53, file: !36, line: 146, baseType: !1564, size: 64, offset: 448)
!1564 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !36, line: 119, baseType: !295)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !35, file: !36, line: 220, baseType: !39, size: 64, offset: 64)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !35, file: !36, line: 223, baseType: !316, size: 64, offset: 128)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !35, file: !36, line: 226, baseType: !787, size: 64, offset: 192)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !35, file: !36, line: 229, baseType: !1569, size: 128, offset: 256)
!1569 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1570, size: 128, elements: !279)
!1570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1571, size: 64)
!1571 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !36, line: 229, flags: DIFlagFwdDecl)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !35, file: !36, line: 232, baseType: !34, size: 64, offset: 384)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !35, file: !36, line: 233, baseType: !34, size: 64, offset: 448)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !35, file: !36, line: 238, baseType: !1575, size: 64, offset: 512)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !36, line: 235, size: 64, elements: !1576)
!1576 = !{!1577, !1583}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1575, file: !36, line: 236, baseType: !1578, size: 64)
!1578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1579, size: 64)
!1579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !36, line: 273, size: 128, elements: !1580)
!1580 = !{!1581, !1582}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1579, file: !36, line: 275, baseType: !61, size: 64)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1579, file: !36, line: 278, baseType: !61, size: 64, offset: 64)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1575, file: !36, line: 237, baseType: !1584, size: 64)
!1584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1585, size: 64)
!1585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !36, line: 259, size: 320, elements: !1586)
!1586 = !{!1587, !1588, !1589, !1590, !1591}
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1585, file: !36, line: 261, baseType: !76, size: 64)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1585, file: !36, line: 262, baseType: !76, size: 64, offset: 64)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1585, file: !36, line: 266, baseType: !76, size: 64, offset: 128)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1585, file: !36, line: 267, baseType: !76, size: 64, offset: 192)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1585, file: !36, line: 270, baseType: !100, size: 32, offset: 256)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !35, file: !36, line: 241, baseType: !1564, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !35, file: !36, line: 244, baseType: !100, size: 32, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !35, file: !36, line: 247, baseType: !100, size: 32, offset: 672)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !35, file: !36, line: 250, baseType: !100, size: 32, offset: 704)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !35, file: !36, line: 253, baseType: !100, size: 32, offset: 736)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !35, file: !36, line: 256, baseType: !100, size: 32, offset: 768)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !14, file: !11, line: 327, baseType: !326, size: 64, offset: 192)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !10, file: !11, line: 739, baseType: !1600, size: 448)
!1600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !11, line: 350, size: 448, elements: !1601)
!1601 = !{!1602, !1608}
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1600, file: !11, line: 353, baseType: !1603, size: 384)
!1603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !11, line: 333, size: 384, elements: !1604)
!1604 = !{!1605, !1606, !1607}
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1603, file: !11, line: 336, baseType: !14, size: 256)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1603, file: !11, line: 343, baseType: !744, size: 64, offset: 256)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1603, file: !11, line: 344, baseType: !751, size: 64, offset: 320)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1600, file: !11, line: 359, baseType: !707, size: 64, offset: 384)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !10, file: !11, line: 740, baseType: !1610, size: 512)
!1610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !11, line: 365, size: 512, elements: !1611)
!1611 = !{!1612, !1613, !1614}
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1610, file: !11, line: 368, baseType: !1603, size: 384)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1610, file: !11, line: 373, baseType: !326, size: 64, offset: 384)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1610, file: !11, line: 374, baseType: !326, size: 64, offset: 448)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !10, file: !11, line: 741, baseType: !1616, size: 576)
!1616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !11, line: 380, size: 576, elements: !1617)
!1617 = !{!1618, !1619}
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1616, file: !11, line: 383, baseType: !1610, size: 512)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1616, file: !11, line: 389, baseType: !707, size: 64, offset: 512)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !10, file: !11, line: 742, baseType: !1621, size: 320)
!1621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !11, line: 395, size: 320, elements: !1622)
!1622 = !{!1623, !1624}
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1621, file: !11, line: 397, baseType: !14, size: 256)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1621, file: !11, line: 400, baseType: !61, size: 64, offset: 256)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !10, file: !11, line: 743, baseType: !1626, size: 448)
!1626 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !11, line: 406, size: 448, elements: !1627)
!1627 = !{!1628, !1629, !1630, !1631}
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1626, file: !11, line: 408, baseType: !14, size: 256)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1626, file: !11, line: 412, baseType: !326, size: 64, offset: 256)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1626, file: !11, line: 420, baseType: !326, size: 64, offset: 320)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1626, file: !11, line: 423, baseType: !61, size: 64, offset: 384)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !10, file: !11, line: 744, baseType: !1633, size: 384)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !11, line: 429, size: 384, elements: !1634)
!1634 = !{!1635, !1636, !1637}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1633, file: !11, line: 431, baseType: !14, size: 256)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1633, file: !11, line: 434, baseType: !326, size: 64, offset: 256)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1633, file: !11, line: 437, baseType: !61, size: 64, offset: 320)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !10, file: !11, line: 745, baseType: !1639, size: 384)
!1639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !11, line: 443, size: 384, elements: !1640)
!1640 = !{!1641, !1642, !1643}
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1639, file: !11, line: 445, baseType: !14, size: 256)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1639, file: !11, line: 449, baseType: !326, size: 64, offset: 256)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1639, file: !11, line: 453, baseType: !61, size: 64, offset: 320)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !10, file: !11, line: 746, baseType: !1645, size: 320)
!1645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !11, line: 459, size: 320, elements: !1646)
!1646 = !{!1647, !1648}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1645, file: !11, line: 461, baseType: !14, size: 256)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1645, file: !11, line: 464, baseType: !326, size: 64, offset: 256)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !10, file: !11, line: 747, baseType: !1650, size: 768)
!1650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !11, line: 469, size: 768, elements: !1651)
!1651 = !{!1652, !1653, !1654, !1655, !1656}
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1650, file: !11, line: 471, baseType: !14, size: 256)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1650, file: !11, line: 474, baseType: !17, size: 32, offset: 256)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1650, file: !11, line: 475, baseType: !17, size: 32, offset: 288)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1650, file: !11, line: 478, baseType: !326, size: 64, offset: 320)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1650, file: !11, line: 481, baseType: !1657, size: 384, offset: 384)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1658, size: 384, elements: !115)
!1658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !329, line: 1917, size: 384, elements: !1659)
!1659 = !{!1660, !1661, !1662}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1658, file: !329, line: 1920, baseType: !756, size: 256)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1658, file: !329, line: 1921, baseType: !326, size: 64, offset: 256)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1658, file: !329, line: 1922, baseType: !28, size: 32, offset: 320)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !10, file: !11, line: 748, baseType: !1664, size: 320)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !11, line: 487, size: 320, elements: !1665)
!1665 = !{!1666, !1667}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1664, file: !11, line: 490, baseType: !14, size: 256)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1664, file: !11, line: 494, baseType: !100, size: 32, offset: 256)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !10, file: !11, line: 749, baseType: !1669, size: 384)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !11, line: 500, size: 384, elements: !1670)
!1670 = !{!1671, !1672, !1673}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1669, file: !11, line: 502, baseType: !14, size: 256)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1669, file: !11, line: 506, baseType: !61, size: 64, offset: 256)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1669, file: !11, line: 510, baseType: !61, size: 64, offset: 320)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !10, file: !11, line: 750, baseType: !1675, size: 320)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !11, line: 529, size: 320, elements: !1676)
!1676 = !{!1677, !1678}
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1675, file: !11, line: 531, baseType: !14, size: 256)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1675, file: !11, line: 540, baseType: !61, size: 64, offset: 256)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !10, file: !11, line: 751, baseType: !1680, size: 704)
!1680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !11, line: 546, size: 704, elements: !1681)
!1681 = !{!1682, !1683, !1684, !1685, !1686, !1687, !1688}
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1680, file: !11, line: 549, baseType: !1610, size: 512)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1680, file: !11, line: 553, baseType: !103, size: 64, offset: 512)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1680, file: !11, line: 557, baseType: !6, size: 8, offset: 576)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1680, file: !11, line: 558, baseType: !6, size: 8, offset: 584)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1680, file: !11, line: 559, baseType: !6, size: 8, offset: 592)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1680, file: !11, line: 560, baseType: !6, size: 8, offset: 600)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1680, file: !11, line: 566, baseType: !707, size: 64, offset: 640)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !10, file: !11, line: 752, baseType: !1690, size: 384)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !11, line: 571, size: 384, elements: !1691)
!1691 = !{!1692, !1693}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1690, file: !11, line: 573, baseType: !1621, size: 320)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1690, file: !11, line: 577, baseType: !326, size: 64, offset: 320)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !10, file: !11, line: 753, baseType: !1695, size: 576)
!1695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !11, line: 600, size: 576, elements: !1696)
!1696 = !{!1697, !1698, !1699, !1700, !1709}
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1695, file: !11, line: 602, baseType: !1621, size: 320)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1695, file: !11, line: 605, baseType: !326, size: 64, offset: 320)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1695, file: !11, line: 609, baseType: !657, size: 64, offset: 384)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1695, file: !11, line: 612, baseType: !1701, size: 64, offset: 448)
!1701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1702, size: 64)
!1702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !11, line: 581, size: 320, elements: !1703)
!1703 = !{!1704, !1705, !1706, !1707, !1708}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1702, file: !11, line: 583, baseType: !1115, size: 32)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1702, file: !11, line: 586, baseType: !326, size: 64, offset: 64)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1702, file: !11, line: 589, baseType: !326, size: 64, offset: 128)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1702, file: !11, line: 592, baseType: !326, size: 64, offset: 192)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1702, file: !11, line: 595, baseType: !326, size: 64, offset: 256)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1695, file: !11, line: 616, baseType: !61, size: 64, offset: 512)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !10, file: !11, line: 754, baseType: !1711, size: 512)
!1711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !11, line: 622, size: 512, elements: !1712)
!1712 = !{!1713, !1714, !1715, !1716}
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1711, file: !11, line: 624, baseType: !1621, size: 320)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1711, file: !11, line: 628, baseType: !326, size: 64, offset: 320)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1711, file: !11, line: 632, baseType: !326, size: 64, offset: 384)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1711, file: !11, line: 636, baseType: !326, size: 64, offset: 448)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !10, file: !11, line: 755, baseType: !1718, size: 704)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !11, line: 642, size: 704, elements: !1719)
!1719 = !{!1720, !1721, !1722, !1723}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1718, file: !11, line: 644, baseType: !1711, size: 512)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1718, file: !11, line: 648, baseType: !326, size: 64, offset: 512)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1718, file: !11, line: 652, baseType: !326, size: 64, offset: 576)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1718, file: !11, line: 653, baseType: !326, size: 64, offset: 640)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !10, file: !11, line: 756, baseType: !1725, size: 448)
!1725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !11, line: 663, size: 448, elements: !1726)
!1726 = !{!1727, !1728, !1729}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1725, file: !11, line: 665, baseType: !1621, size: 320)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1725, file: !11, line: 668, baseType: !326, size: 64, offset: 320)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1725, file: !11, line: 673, baseType: !326, size: 64, offset: 384)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !10, file: !11, line: 757, baseType: !1731, size: 384)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !11, line: 694, size: 384, elements: !1732)
!1732 = !{!1733, !1734}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1731, file: !11, line: 696, baseType: !1621, size: 320)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1731, file: !11, line: 699, baseType: !326, size: 64, offset: 320)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !10, file: !11, line: 758, baseType: !1736, size: 384)
!1736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !11, line: 681, size: 384, elements: !1737)
!1737 = !{!1738, !1739, !1740}
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1736, file: !11, line: 683, baseType: !14, size: 256)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1736, file: !11, line: 686, baseType: !326, size: 64, offset: 256)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1736, file: !11, line: 689, baseType: !326, size: 64, offset: 320)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !10, file: !11, line: 759, baseType: !1742, size: 384)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !11, line: 707, size: 384, elements: !1743)
!1743 = !{!1744, !1745, !1746}
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1742, file: !11, line: 709, baseType: !14, size: 256)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1742, file: !11, line: 712, baseType: !326, size: 64, offset: 256)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1742, file: !11, line: 712, baseType: !326, size: 64, offset: 320)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !10, file: !11, line: 760, baseType: !1748, size: 320)
!1748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !11, line: 718, size: 320, elements: !1749)
!1749 = !{!1750, !1751}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1748, file: !11, line: 720, baseType: !14, size: 256)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1748, file: !11, line: 723, baseType: !326, size: 64, offset: 256)
!1752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !100, size: 64)
!1753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!1754 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1755, retainedTypes: !3703, globals: !4006, splitDebugInlining: false, nameTableKind: None)
!1755 = !{!118, !609, !616, !798, !819, !868, !1077, !1099, !1107, !1115, !1756, !1770, !1775, !1813, !1936, !1942, !1957, !1964, !1975, !1989, !2131, !3623, !3629, !3651, !3664, !3671, !3697}
!1756 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "verbosity_levels", file: !1757, line: 74, baseType: !17, size: 32, elements: !1758)
!1757 = !DIFile(filename: "./tree-vectorizer.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1758 = !{!1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769}
!1759 = !DIEnumerator(name: "REPORT_NONE", value: 0, isUnsigned: true)
!1760 = !DIEnumerator(name: "REPORT_VECTORIZED_LOCATIONS", value: 1, isUnsigned: true)
!1761 = !DIEnumerator(name: "REPORT_UNVECTORIZED_LOCATIONS", value: 2, isUnsigned: true)
!1762 = !DIEnumerator(name: "REPORT_COST", value: 3, isUnsigned: true)
!1763 = !DIEnumerator(name: "REPORT_ALIGNMENT", value: 4, isUnsigned: true)
!1764 = !DIEnumerator(name: "REPORT_DR_DETAILS", value: 5, isUnsigned: true)
!1765 = !DIEnumerator(name: "REPORT_BAD_FORM_LOOPS", value: 6, isUnsigned: true)
!1766 = !DIEnumerator(name: "REPORT_OUTER_LOOPS", value: 7, isUnsigned: true)
!1767 = !DIEnumerator(name: "REPORT_SLP", value: 8, isUnsigned: true)
!1768 = !DIEnumerator(name: "REPORT_DETAILS", value: 9, isUnsigned: true)
!1769 = !DIEnumerator(name: "MAX_VERBOSITY_LEVEL", value: 10, isUnsigned: true)
!1770 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "slp_vect_type", file: !1757, line: 390, baseType: !17, size: 32, elements: !1771)
!1771 = !{!1772, !1773, !1774}
!1772 = !DIEnumerator(name: "loop_vect", value: 0, isUnsigned: true)
!1773 = !DIEnumerator(name: "pure_slp", value: 1, isUnsigned: true)
!1774 = !DIEnumerator(name: "hybrid", value: 2, isUnsigned: true)
!1775 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !11, line: 51, baseType: !17, size: 32, elements: !1776)
!1776 = !{!1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812}
!1777 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!1778 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!1779 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!1780 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!1781 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!1782 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!1783 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!1784 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!1785 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!1786 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!1787 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!1788 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!1789 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!1790 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!1791 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!1792 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!1793 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!1794 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!1795 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!1796 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!1797 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!1798 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!1799 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!1800 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!1801 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!1802 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!1803 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!1804 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!1805 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!1806 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!1807 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!1808 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!1809 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!1810 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!1811 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!1812 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!1813 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !1814, line: 82, baseType: !17, size: 32, elements: !1815)
!1814 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1815 = !{!1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935}
!1816 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!1817 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!1818 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!1819 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!1820 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!1821 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!1822 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!1823 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!1824 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!1825 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!1826 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!1827 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!1828 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!1829 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!1830 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!1831 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!1832 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!1833 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!1834 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!1835 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!1836 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!1837 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!1838 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!1839 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!1840 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!1841 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!1842 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!1843 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!1844 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!1845 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!1846 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!1847 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!1848 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!1849 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!1850 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!1851 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!1852 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!1853 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!1854 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!1855 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!1856 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!1857 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!1858 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!1859 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!1860 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!1861 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!1862 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!1863 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!1864 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!1865 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!1866 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!1867 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!1868 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!1869 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!1870 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!1871 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!1872 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!1873 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!1874 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!1875 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!1876 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!1877 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!1878 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!1879 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!1880 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!1881 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!1882 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!1883 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!1884 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!1885 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!1886 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!1887 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!1888 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!1889 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!1890 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!1891 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!1892 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!1893 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!1894 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!1895 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!1896 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!1897 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!1898 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!1899 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!1900 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!1901 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!1902 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!1903 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!1904 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!1905 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!1906 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!1907 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!1908 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!1909 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!1910 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!1911 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!1912 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!1913 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!1914 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!1915 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!1916 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!1917 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!1918 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!1919 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!1920 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!1921 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!1922 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!1923 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!1924 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!1925 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!1926 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!1927 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!1928 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!1929 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!1930 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!1931 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!1932 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!1933 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!1934 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!1935 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!1936 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !11, line: 80, baseType: !17, size: 32, elements: !1937)
!1937 = !{!1938, !1939, !1940, !1941}
!1938 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!1939 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!1940 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!1941 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!1942 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "stmt_vec_info_type", file: !1757, line: 336, baseType: !17, size: 32, elements: !1943)
!1943 = !{!1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956}
!1944 = !DIEnumerator(name: "undef_vec_info_type", value: 0, isUnsigned: true)
!1945 = !DIEnumerator(name: "load_vec_info_type", value: 1, isUnsigned: true)
!1946 = !DIEnumerator(name: "store_vec_info_type", value: 2, isUnsigned: true)
!1947 = !DIEnumerator(name: "op_vec_info_type", value: 3, isUnsigned: true)
!1948 = !DIEnumerator(name: "call_vec_info_type", value: 4, isUnsigned: true)
!1949 = !DIEnumerator(name: "assignment_vec_info_type", value: 5, isUnsigned: true)
!1950 = !DIEnumerator(name: "condition_vec_info_type", value: 6, isUnsigned: true)
!1951 = !DIEnumerator(name: "reduc_vec_info_type", value: 7, isUnsigned: true)
!1952 = !DIEnumerator(name: "induc_vec_info_type", value: 8, isUnsigned: true)
!1953 = !DIEnumerator(name: "type_promotion_vec_info_type", value: 9, isUnsigned: true)
!1954 = !DIEnumerator(name: "type_demotion_vec_info_type", value: 10, isUnsigned: true)
!1955 = !DIEnumerator(name: "type_conversion_vec_info_type", value: 11, isUnsigned: true)
!1956 = !DIEnumerator(name: "loop_exit_ctrl_vec_info_type", value: 12, isUnsigned: true)
!1957 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "vect_relevant", file: !1757, line: 354, baseType: !17, size: 32, elements: !1958)
!1958 = !{!1959, !1960, !1961, !1962, !1963}
!1959 = !DIEnumerator(name: "vect_unused_in_scope", value: 0, isUnsigned: true)
!1960 = !DIEnumerator(name: "vect_used_in_outer_by_reduction", value: 1, isUnsigned: true)
!1961 = !DIEnumerator(name: "vect_used_in_outer", value: 2, isUnsigned: true)
!1962 = !DIEnumerator(name: "vect_used_by_reduction", value: 3, isUnsigned: true)
!1963 = !DIEnumerator(name: "vect_used_in_scope", value: 4, isUnsigned: true)
!1964 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "vect_def_type", file: !1757, line: 57, baseType: !17, size: 32, elements: !1965)
!1965 = !{!1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974}
!1966 = !DIEnumerator(name: "vect_uninitialized_def", value: 0, isUnsigned: true)
!1967 = !DIEnumerator(name: "vect_constant_def", value: 1, isUnsigned: true)
!1968 = !DIEnumerator(name: "vect_external_def", value: 2, isUnsigned: true)
!1969 = !DIEnumerator(name: "vect_internal_def", value: 3, isUnsigned: true)
!1970 = !DIEnumerator(name: "vect_induction_def", value: 4, isUnsigned: true)
!1971 = !DIEnumerator(name: "vect_reduction_def", value: 5, isUnsigned: true)
!1972 = !DIEnumerator(name: "vect_double_reduction_def", value: 6, isUnsigned: true)
!1973 = !DIEnumerator(name: "vect_nested_cycle", value: 7, isUnsigned: true)
!1974 = !DIEnumerator(name: "vect_unknown_def_type", value: 8, isUnsigned: true)
!1975 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !36, line: 295, baseType: !17, size: 32, elements: !1976)
!1976 = !{!1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988}
!1977 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1978 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1979 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1980 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1981 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1982 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1983 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1984 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1985 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1986 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1987 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1988 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1989 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !79, line: 45, baseType: !17, size: 32, elements: !1990)
!1990 = !{!1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130}
!1991 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!1992 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!1993 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!1994 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!1995 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!1996 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!1997 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!1998 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!1999 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!2000 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!2001 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!2002 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!2003 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!2004 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!2005 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!2006 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!2007 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!2008 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!2009 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!2010 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!2011 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!2012 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!2013 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!2014 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!2015 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!2016 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!2017 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!2018 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!2019 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!2020 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!2021 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!2022 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!2023 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!2024 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!2025 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!2026 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!2027 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!2028 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!2029 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!2030 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!2031 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!2032 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!2033 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!2034 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!2035 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!2036 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!2037 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!2038 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!2039 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!2040 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!2041 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!2042 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!2043 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!2044 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!2045 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!2046 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!2047 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!2048 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!2049 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!2050 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!2051 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!2052 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!2053 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!2054 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!2055 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!2056 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!2057 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!2058 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!2059 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!2060 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!2061 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!2062 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!2063 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!2064 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!2065 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!2066 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!2067 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!2068 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!2069 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!2070 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!2071 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!2072 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!2073 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!2074 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!2075 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!2076 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!2077 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!2078 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!2079 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!2080 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!2081 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!2082 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!2083 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!2084 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!2085 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!2086 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!2087 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!2088 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!2089 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!2090 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!2091 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!2092 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!2093 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!2094 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!2095 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!2096 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!2097 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!2098 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!2099 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!2100 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!2101 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!2102 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!2103 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!2104 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!2105 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!2106 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!2107 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!2108 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!2109 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!2110 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!2111 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!2112 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!2113 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!2114 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!2115 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!2116 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!2117 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!2118 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!2119 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!2120 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!2121 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!2122 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!2123 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!2124 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!2125 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!2126 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!2127 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!2128 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!2129 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!2130 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!2131 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_code", file: !2132, line: 7, baseType: !17, size: 32, elements: !2133)
!2132 = !DIFile(filename: "./insn-codes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2133 = !{!2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3100, !3101, !3102, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3205, !3206, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217, !3218, !3219, !3220, !3221, !3222, !3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291, !3292, !3293, !3294, !3295, !3296, !3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333, !3334, !3335, !3336, !3337, !3338, !3339, !3340, !3341, !3342, !3343, !3344, !3345, !3346, !3347, !3348, !3349, !3350, !3351, !3352, !3353, !3354, !3355, !3356, !3357, !3358, !3359, !3360, !3361, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375, !3376, !3377, !3378, !3379, !3380, !3381, !3382, !3383, !3384, !3385, !3386, !3387, !3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398, !3399, !3400, !3401, !3402, !3403, !3404, !3405, !3406, !3407, !3408, !3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3417, !3418, !3419, !3420, !3421, !3422, !3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430, !3431, !3432, !3433, !3434, !3435, !3436, !3437, !3438, !3439, !3440, !3441, !3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451, !3452, !3453, !3454, !3455, !3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471, !3472, !3473, !3474, !3475, !3476, !3477, !3478, !3479, !3480, !3481, !3482, !3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3498, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3506, !3507, !3508, !3509, !3510, !3511, !3512, !3513, !3514, !3515, !3516, !3517, !3518, !3519, !3520, !3521, !3522, !3523, !3524, !3525, !3526, !3527, !3528, !3529, !3530, !3531, !3532, !3533, !3534, !3535, !3536, !3537, !3538, !3539, !3540, !3541, !3542, !3543, !3544, !3545, !3546, !3547, !3548, !3549, !3550, !3551, !3552, !3553, !3554, !3555, !3556, !3557, !3558, !3559, !3560, !3561, !3562, !3563, !3564, !3565, !3566, !3567, !3568, !3569, !3570, !3571, !3572, !3573, !3574, !3575, !3576, !3577, !3578, !3579, !3580, !3581, !3582, !3583, !3584, !3585, !3586, !3587, !3588, !3589, !3590, !3591, !3592, !3593, !3594, !3595, !3596, !3597, !3598, !3599, !3600, !3601, !3602, !3603, !3604, !3605, !3606, !3607, !3608, !3609, !3610, !3611, !3612, !3613, !3614, !3615, !3616, !3617, !3618, !3619, !3620, !3621, !3622}
!2134 = !DIEnumerator(name: "CODE_FOR_x86_fnstsw_1", value: 30, isUnsigned: true)
!2135 = !DIEnumerator(name: "CODE_FOR_x86_sahf_1", value: 31, isUnsigned: true)
!2136 = !DIEnumerator(name: "CODE_FOR_popsi1", value: 41, isUnsigned: true)
!2137 = !DIEnumerator(name: "CODE_FOR_movsi_insv_1", value: 63, isUnsigned: true)
!2138 = !DIEnumerator(name: "CODE_FOR_swapxf", value: 83, isUnsigned: true)
!2139 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2_and", value: 84, isUnsigned: true)
!2140 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2_32", value: 92, isUnsigned: true)
!2141 = !DIEnumerator(name: "CODE_FOR_extendhisi2", value: 94, isUnsigned: true)
!2142 = !DIEnumerator(name: "CODE_FOR_extendqihi2", value: 95, isUnsigned: true)
!2143 = !DIEnumerator(name: "CODE_FOR_extendqisi2", value: 96, isUnsigned: true)
!2144 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop", value: 110, isUnsigned: true)
!2145 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop", value: 111, isUnsigned: true)
!2146 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi_sse", value: 116, isUnsigned: true)
!2147 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi_sse", value: 117, isUnsigned: true)
!2148 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_fisttp_i387_1", value: 118, isUnsigned: true)
!2149 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_fisttp_i387_1", value: 119, isUnsigned: true)
!2150 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_fisttp_i387_1", value: 120, isUnsigned: true)
!2151 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp", value: 121, isUnsigned: true)
!2152 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp", value: 122, isUnsigned: true)
!2153 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp", value: 123, isUnsigned: true)
!2154 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp_with_temp", value: 124, isUnsigned: true)
!2155 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp_with_temp", value: 125, isUnsigned: true)
!2156 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp_with_temp", value: 126, isUnsigned: true)
!2157 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387", value: 130, isUnsigned: true)
!2158 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_with_temp", value: 131, isUnsigned: true)
!2159 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387", value: 132, isUnsigned: true)
!2160 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387", value: 133, isUnsigned: true)
!2161 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_with_temp", value: 134, isUnsigned: true)
!2162 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_with_temp", value: 135, isUnsigned: true)
!2163 = !DIEnumerator(name: "CODE_FOR_x86_fnstcw_1", value: 136, isUnsigned: true)
!2164 = !DIEnumerator(name: "CODE_FOR_x86_fldcw_1", value: 137, isUnsigned: true)
!2165 = !DIEnumerator(name: "CODE_FOR_floatdisf2_i387_with_xmm", value: 185, isUnsigned: true)
!2166 = !DIEnumerator(name: "CODE_FOR_floatdidf2_i387_with_xmm", value: 186, isUnsigned: true)
!2167 = !DIEnumerator(name: "CODE_FOR_floatdixf2_i387_with_xmm", value: 187, isUnsigned: true)
!2168 = !DIEnumerator(name: "CODE_FOR_addqi3_cc", value: 195, isUnsigned: true)
!2169 = !DIEnumerator(name: "CODE_FOR_addqi_ext_1", value: 219, isUnsigned: true)
!2170 = !DIEnumerator(name: "CODE_FOR_divqi3", value: 271, isUnsigned: true)
!2171 = !DIEnumerator(name: "CODE_FOR_udivqi3", value: 272, isUnsigned: true)
!2172 = !DIEnumerator(name: "CODE_FOR_andqi_ext_0", value: 298, isUnsigned: true)
!2173 = !DIEnumerator(name: "CODE_FOR_copysignsf3_const", value: 367, isUnsigned: true)
!2174 = !DIEnumerator(name: "CODE_FOR_copysigndf3_const", value: 368, isUnsigned: true)
!2175 = !DIEnumerator(name: "CODE_FOR_copysigntf3_const", value: 369, isUnsigned: true)
!2176 = !DIEnumerator(name: "CODE_FOR_copysignsf3_var", value: 370, isUnsigned: true)
!2177 = !DIEnumerator(name: "CODE_FOR_copysigndf3_var", value: 371, isUnsigned: true)
!2178 = !DIEnumerator(name: "CODE_FOR_copysigntf3_var", value: 372, isUnsigned: true)
!2179 = !DIEnumerator(name: "CODE_FOR_x86_shld", value: 382, isUnsigned: true)
!2180 = !DIEnumerator(name: "CODE_FOR_x86_shrd", value: 395, isUnsigned: true)
!2181 = !DIEnumerator(name: "CODE_FOR_ix86_rotldi3", value: 438, isUnsigned: true)
!2182 = !DIEnumerator(name: "CODE_FOR_ix86_rotrdi3", value: 447, isUnsigned: true)
!2183 = !DIEnumerator(name: "CODE_FOR_jump", value: 478, isUnsigned: true)
!2184 = !DIEnumerator(name: "CODE_FOR_blockage", value: 487, isUnsigned: true)
!2185 = !DIEnumerator(name: "CODE_FOR_prologue_use", value: 489, isUnsigned: true)
!2186 = !DIEnumerator(name: "CODE_FOR_return_internal", value: 490, isUnsigned: true)
!2187 = !DIEnumerator(name: "CODE_FOR_return_internal_long", value: 491, isUnsigned: true)
!2188 = !DIEnumerator(name: "CODE_FOR_return_pop_internal", value: 492, isUnsigned: true)
!2189 = !DIEnumerator(name: "CODE_FOR_return_indirect_internal", value: 493, isUnsigned: true)
!2190 = !DIEnumerator(name: "CODE_FOR_nop", value: 494, isUnsigned: true)
!2191 = !DIEnumerator(name: "CODE_FOR_vswapmov", value: 495, isUnsigned: true)
!2192 = !DIEnumerator(name: "CODE_FOR_pad", value: 496, isUnsigned: true)
!2193 = !DIEnumerator(name: "CODE_FOR_set_got", value: 497, isUnsigned: true)
!2194 = !DIEnumerator(name: "CODE_FOR_set_got_labelled", value: 498, isUnsigned: true)
!2195 = !DIEnumerator(name: "CODE_FOR_eh_return_internal", value: 499, isUnsigned: true)
!2196 = !DIEnumerator(name: "CODE_FOR_leave", value: 500, isUnsigned: true)
!2197 = !DIEnumerator(name: "CODE_FOR_ctzsi2", value: 503, isUnsigned: true)
!2198 = !DIEnumerator(name: "CODE_FOR_clzsi2_abm", value: 504, isUnsigned: true)
!2199 = !DIEnumerator(name: "CODE_FOR_bsr", value: 505, isUnsigned: true)
!2200 = !DIEnumerator(name: "CODE_FOR_popcounthi2", value: 506, isUnsigned: true)
!2201 = !DIEnumerator(name: "CODE_FOR_popcountsi2", value: 507, isUnsigned: true)
!2202 = !DIEnumerator(name: "CODE_FOR_bswaphi_lowpart", value: 514, isUnsigned: true)
!2203 = !DIEnumerator(name: "CODE_FOR_clzhi2_abm", value: 515, isUnsigned: true)
!2204 = !DIEnumerator(name: "CODE_FOR_paritydi2_cmp", value: 517, isUnsigned: true)
!2205 = !DIEnumerator(name: "CODE_FOR_paritysi2_cmp", value: 518, isUnsigned: true)
!2206 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop_unspec", value: 573, isUnsigned: true)
!2207 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop_unspec", value: 574, isUnsigned: true)
!2208 = !DIEnumerator(name: "CODE_FOR_sqrtxf2", value: 575, isUnsigned: true)
!2209 = !DIEnumerator(name: "CODE_FOR_sqrt_extendsfxf2_i387", value: 576, isUnsigned: true)
!2210 = !DIEnumerator(name: "CODE_FOR_sqrt_extenddfxf2_i387", value: 577, isUnsigned: true)
!2211 = !DIEnumerator(name: "CODE_FOR_fpremxf4_i387", value: 581, isUnsigned: true)
!2212 = !DIEnumerator(name: "CODE_FOR_fprem1xf4_i387", value: 582, isUnsigned: true)
!2213 = !DIEnumerator(name: "CODE_FOR_sincosxf3", value: 589, isUnsigned: true)
!2214 = !DIEnumerator(name: "CODE_FOR_sincos_extendsfxf3_i387", value: 590, isUnsigned: true)
!2215 = !DIEnumerator(name: "CODE_FOR_sincos_extenddfxf3_i387", value: 591, isUnsigned: true)
!2216 = !DIEnumerator(name: "CODE_FOR_fptanxf4_i387", value: 592, isUnsigned: true)
!2217 = !DIEnumerator(name: "CODE_FOR_fptan_extendsfxf4_i387", value: 593, isUnsigned: true)
!2218 = !DIEnumerator(name: "CODE_FOR_fptan_extenddfxf4_i387", value: 594, isUnsigned: true)
!2219 = !DIEnumerator(name: "CODE_FOR_fpatan_extendsfxf3_i387", value: 596, isUnsigned: true)
!2220 = !DIEnumerator(name: "CODE_FOR_fpatan_extenddfxf3_i387", value: 597, isUnsigned: true)
!2221 = !DIEnumerator(name: "CODE_FOR_fyl2xxf3_i387", value: 598, isUnsigned: true)
!2222 = !DIEnumerator(name: "CODE_FOR_fyl2x_extendsfxf3_i387", value: 599, isUnsigned: true)
!2223 = !DIEnumerator(name: "CODE_FOR_fyl2x_extenddfxf3_i387", value: 600, isUnsigned: true)
!2224 = !DIEnumerator(name: "CODE_FOR_fyl2xp1xf3_i387", value: 601, isUnsigned: true)
!2225 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extendsfxf3_i387", value: 602, isUnsigned: true)
!2226 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extenddfxf3_i387", value: 603, isUnsigned: true)
!2227 = !DIEnumerator(name: "CODE_FOR_fxtractxf3_i387", value: 604, isUnsigned: true)
!2228 = !DIEnumerator(name: "CODE_FOR_fxtract_extendsfxf3_i387", value: 605, isUnsigned: true)
!2229 = !DIEnumerator(name: "CODE_FOR_fxtract_extenddfxf3_i387", value: 606, isUnsigned: true)
!2230 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsf2", value: 609, isUnsigned: true)
!2231 = !DIEnumerator(name: "CODE_FOR_sse4_1_rounddf2", value: 610, isUnsigned: true)
!2232 = !DIEnumerator(name: "CODE_FOR_rintxf2", value: 611, isUnsigned: true)
!2233 = !DIEnumerator(name: "CODE_FOR_fistdi2", value: 613, isUnsigned: true)
!2234 = !DIEnumerator(name: "CODE_FOR_fistdi2_with_temp", value: 614, isUnsigned: true)
!2235 = !DIEnumerator(name: "CODE_FOR_fisthi2", value: 617, isUnsigned: true)
!2236 = !DIEnumerator(name: "CODE_FOR_fistsi2", value: 618, isUnsigned: true)
!2237 = !DIEnumerator(name: "CODE_FOR_fisthi2_with_temp", value: 619, isUnsigned: true)
!2238 = !DIEnumerator(name: "CODE_FOR_fistsi2_with_temp", value: 620, isUnsigned: true)
!2239 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor", value: 621, isUnsigned: true)
!2240 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor_i387", value: 622, isUnsigned: true)
!2241 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor", value: 626, isUnsigned: true)
!2242 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor_with_temp", value: 627, isUnsigned: true)
!2243 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor", value: 628, isUnsigned: true)
!2244 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor", value: 629, isUnsigned: true)
!2245 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor_with_temp", value: 630, isUnsigned: true)
!2246 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor_with_temp", value: 631, isUnsigned: true)
!2247 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil", value: 632, isUnsigned: true)
!2248 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil_i387", value: 633, isUnsigned: true)
!2249 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil", value: 637, isUnsigned: true)
!2250 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil_with_temp", value: 638, isUnsigned: true)
!2251 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil", value: 639, isUnsigned: true)
!2252 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil", value: 640, isUnsigned: true)
!2253 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil_with_temp", value: 641, isUnsigned: true)
!2254 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil_with_temp", value: 642, isUnsigned: true)
!2255 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc", value: 643, isUnsigned: true)
!2256 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc_i387", value: 644, isUnsigned: true)
!2257 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm", value: 645, isUnsigned: true)
!2258 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm_i387", value: 646, isUnsigned: true)
!2259 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387", value: 647, isUnsigned: true)
!2260 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387", value: 648, isUnsigned: true)
!2261 = !DIEnumerator(name: "CODE_FOR_fxamxf2_i387", value: 649, isUnsigned: true)
!2262 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387_with_temp", value: 650, isUnsigned: true)
!2263 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387_with_temp", value: 651, isUnsigned: true)
!2264 = !DIEnumerator(name: "CODE_FOR_cld", value: 652, isUnsigned: true)
!2265 = !DIEnumerator(name: "CODE_FOR_smaxsf3", value: 681, isUnsigned: true)
!2266 = !DIEnumerator(name: "CODE_FOR_sminsf3", value: 682, isUnsigned: true)
!2267 = !DIEnumerator(name: "CODE_FOR_smaxdf3", value: 683, isUnsigned: true)
!2268 = !DIEnumerator(name: "CODE_FOR_smindf3", value: 684, isUnsigned: true)
!2269 = !DIEnumerator(name: "CODE_FOR_pro_epilogue_adjust_stack_1", value: 693, isUnsigned: true)
!2270 = !DIEnumerator(name: "CODE_FOR_allocate_stack_worker_32", value: 694, isUnsigned: true)
!2271 = !DIEnumerator(name: "CODE_FOR_trap", value: 701, isUnsigned: true)
!2272 = !DIEnumerator(name: "CODE_FOR_stack_protect_set_si", value: 704, isUnsigned: true)
!2273 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_set_si", value: 705, isUnsigned: true)
!2274 = !DIEnumerator(name: "CODE_FOR_stack_protect_test_si", value: 706, isUnsigned: true)
!2275 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_test_si", value: 707, isUnsigned: true)
!2276 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32qi", value: 708, isUnsigned: true)
!2277 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32hi", value: 709, isUnsigned: true)
!2278 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32si", value: 710, isUnsigned: true)
!2279 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcbsi", value: 715, isUnsigned: true)
!2280 = !DIEnumerator(name: "CODE_FOR_sse_movntdi", value: 728, isUnsigned: true)
!2281 = !DIEnumerator(name: "CODE_FOR_mmx_rcpv2sf2", value: 736, isUnsigned: true)
!2282 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit1v2sf3", value: 737, isUnsigned: true)
!2283 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit2v2sf3", value: 738, isUnsigned: true)
!2284 = !DIEnumerator(name: "CODE_FOR_mmx_rsqrtv2sf2", value: 739, isUnsigned: true)
!2285 = !DIEnumerator(name: "CODE_FOR_mmx_rsqit1v2sf3", value: 740, isUnsigned: true)
!2286 = !DIEnumerator(name: "CODE_FOR_mmx_haddv2sf3", value: 741, isUnsigned: true)
!2287 = !DIEnumerator(name: "CODE_FOR_mmx_hsubv2sf3", value: 742, isUnsigned: true)
!2288 = !DIEnumerator(name: "CODE_FOR_mmx_addsubv2sf3", value: 743, isUnsigned: true)
!2289 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2sf3", value: 745, isUnsigned: true)
!2290 = !DIEnumerator(name: "CODE_FOR_mmx_gev2sf3", value: 746, isUnsigned: true)
!2291 = !DIEnumerator(name: "CODE_FOR_mmx_pf2id", value: 747, isUnsigned: true)
!2292 = !DIEnumerator(name: "CODE_FOR_mmx_pf2iw", value: 748, isUnsigned: true)
!2293 = !DIEnumerator(name: "CODE_FOR_mmx_pi2fw", value: 749, isUnsigned: true)
!2294 = !DIEnumerator(name: "CODE_FOR_mmx_floatv2si2", value: 750, isUnsigned: true)
!2295 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2sf2", value: 751, isUnsigned: true)
!2296 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv4hi3", value: 782, isUnsigned: true)
!2297 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv2si3", value: 783, isUnsigned: true)
!2298 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv4hi3", value: 784, isUnsigned: true)
!2299 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv2si3", value: 785, isUnsigned: true)
!2300 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv1di3", value: 786, isUnsigned: true)
!2301 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv4hi3", value: 787, isUnsigned: true)
!2302 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv2si3", value: 788, isUnsigned: true)
!2303 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv1di3", value: 789, isUnsigned: true)
!2304 = !DIEnumerator(name: "CODE_FOR_mmx_gtv8qi3", value: 793, isUnsigned: true)
!2305 = !DIEnumerator(name: "CODE_FOR_mmx_gtv4hi3", value: 794, isUnsigned: true)
!2306 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2si3", value: 795, isUnsigned: true)
!2307 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv8qi3", value: 796, isUnsigned: true)
!2308 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv4hi3", value: 797, isUnsigned: true)
!2309 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv2si3", value: 798, isUnsigned: true)
!2310 = !DIEnumerator(name: "CODE_FOR_mmx_packsswb", value: 808, isUnsigned: true)
!2311 = !DIEnumerator(name: "CODE_FOR_mmx_packssdw", value: 809, isUnsigned: true)
!2312 = !DIEnumerator(name: "CODE_FOR_mmx_packuswb", value: 810, isUnsigned: true)
!2313 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhbw", value: 811, isUnsigned: true)
!2314 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklbw", value: 812, isUnsigned: true)
!2315 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhwd", value: 813, isUnsigned: true)
!2316 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklwd", value: 814, isUnsigned: true)
!2317 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhdq", value: 815, isUnsigned: true)
!2318 = !DIEnumerator(name: "CODE_FOR_mmx_punpckldq", value: 816, isUnsigned: true)
!2319 = !DIEnumerator(name: "CODE_FOR_mmx_pextrw", value: 818, isUnsigned: true)
!2320 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw_1", value: 819, isUnsigned: true)
!2321 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2si2", value: 820, isUnsigned: true)
!2322 = !DIEnumerator(name: "CODE_FOR_mmx_psadbw", value: 828, isUnsigned: true)
!2323 = !DIEnumerator(name: "CODE_FOR_mmx_pmovmskb", value: 829, isUnsigned: true)
!2324 = !DIEnumerator(name: "CODE_FOR_movdi_to_sse", value: 853, isUnsigned: true)
!2325 = !DIEnumerator(name: "CODE_FOR_avx_movups", value: 854, isUnsigned: true)
!2326 = !DIEnumerator(name: "CODE_FOR_avx_movupd", value: 855, isUnsigned: true)
!2327 = !DIEnumerator(name: "CODE_FOR_avx_movups256", value: 856, isUnsigned: true)
!2328 = !DIEnumerator(name: "CODE_FOR_avx_movupd256", value: 857, isUnsigned: true)
!2329 = !DIEnumerator(name: "CODE_FOR_sse2_movq128", value: 858, isUnsigned: true)
!2330 = !DIEnumerator(name: "CODE_FOR_sse_movups", value: 859, isUnsigned: true)
!2331 = !DIEnumerator(name: "CODE_FOR_sse2_movupd", value: 860, isUnsigned: true)
!2332 = !DIEnumerator(name: "CODE_FOR_avx_movdqu256", value: 861, isUnsigned: true)
!2333 = !DIEnumerator(name: "CODE_FOR_avx_movdqu", value: 862, isUnsigned: true)
!2334 = !DIEnumerator(name: "CODE_FOR_sse2_movdqu", value: 863, isUnsigned: true)
!2335 = !DIEnumerator(name: "CODE_FOR_avx_movntv4sf", value: 864, isUnsigned: true)
!2336 = !DIEnumerator(name: "CODE_FOR_avx_movntv2df", value: 865, isUnsigned: true)
!2337 = !DIEnumerator(name: "CODE_FOR_avx_movntv8sf", value: 866, isUnsigned: true)
!2338 = !DIEnumerator(name: "CODE_FOR_avx_movntv4df", value: 867, isUnsigned: true)
!2339 = !DIEnumerator(name: "CODE_FOR_sse_movntv4sf", value: 868, isUnsigned: true)
!2340 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2df", value: 869, isUnsigned: true)
!2341 = !DIEnumerator(name: "CODE_FOR_avx_movntv4di", value: 870, isUnsigned: true)
!2342 = !DIEnumerator(name: "CODE_FOR_avx_movntv2di", value: 871, isUnsigned: true)
!2343 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2di", value: 872, isUnsigned: true)
!2344 = !DIEnumerator(name: "CODE_FOR_sse2_movntsi", value: 873, isUnsigned: true)
!2345 = !DIEnumerator(name: "CODE_FOR_avx_lddqu256", value: 874, isUnsigned: true)
!2346 = !DIEnumerator(name: "CODE_FOR_avx_lddqu", value: 875, isUnsigned: true)
!2347 = !DIEnumerator(name: "CODE_FOR_sse3_lddqu", value: 876, isUnsigned: true)
!2348 = !DIEnumerator(name: "CODE_FOR_sse_vmaddv4sf3", value: 893, isUnsigned: true)
!2349 = !DIEnumerator(name: "CODE_FOR_sse_vmsubv4sf3", value: 894, isUnsigned: true)
!2350 = !DIEnumerator(name: "CODE_FOR_sse2_vmaddv2df3", value: 895, isUnsigned: true)
!2351 = !DIEnumerator(name: "CODE_FOR_sse2_vmsubv2df3", value: 896, isUnsigned: true)
!2352 = !DIEnumerator(name: "CODE_FOR_sse_vmmulv4sf3", value: 905, isUnsigned: true)
!2353 = !DIEnumerator(name: "CODE_FOR_sse2_vmmulv2df3", value: 906, isUnsigned: true)
!2354 = !DIEnumerator(name: "CODE_FOR_avx_divv4sf3", value: 907, isUnsigned: true)
!2355 = !DIEnumerator(name: "CODE_FOR_avx_divv2df3", value: 908, isUnsigned: true)
!2356 = !DIEnumerator(name: "CODE_FOR_avx_divv8sf3", value: 909, isUnsigned: true)
!2357 = !DIEnumerator(name: "CODE_FOR_avx_divv4df3", value: 910, isUnsigned: true)
!2358 = !DIEnumerator(name: "CODE_FOR_sse_divv4sf3", value: 913, isUnsigned: true)
!2359 = !DIEnumerator(name: "CODE_FOR_sse2_divv2df3", value: 914, isUnsigned: true)
!2360 = !DIEnumerator(name: "CODE_FOR_sse_vmdivv4sf3", value: 917, isUnsigned: true)
!2361 = !DIEnumerator(name: "CODE_FOR_sse2_vmdivv2df3", value: 918, isUnsigned: true)
!2362 = !DIEnumerator(name: "CODE_FOR_avx_rcpv8sf2", value: 919, isUnsigned: true)
!2363 = !DIEnumerator(name: "CODE_FOR_sse_rcpv4sf2", value: 920, isUnsigned: true)
!2364 = !DIEnumerator(name: "CODE_FOR_sse_vmrcpv4sf2", value: 922, isUnsigned: true)
!2365 = !DIEnumerator(name: "CODE_FOR_avx_sqrtv8sf2", value: 923, isUnsigned: true)
!2366 = !DIEnumerator(name: "CODE_FOR_sse_sqrtv4sf2", value: 924, isUnsigned: true)
!2367 = !DIEnumerator(name: "CODE_FOR_sqrtv4df2", value: 925, isUnsigned: true)
!2368 = !DIEnumerator(name: "CODE_FOR_sqrtv2df2", value: 926, isUnsigned: true)
!2369 = !DIEnumerator(name: "CODE_FOR_sse_vmsqrtv4sf2", value: 929, isUnsigned: true)
!2370 = !DIEnumerator(name: "CODE_FOR_sse2_vmsqrtv2df2", value: 930, isUnsigned: true)
!2371 = !DIEnumerator(name: "CODE_FOR_avx_rsqrtv8sf2", value: 931, isUnsigned: true)
!2372 = !DIEnumerator(name: "CODE_FOR_sse_rsqrtv4sf2", value: 932, isUnsigned: true)
!2373 = !DIEnumerator(name: "CODE_FOR_sse_vmrsqrtv4sf2", value: 934, isUnsigned: true)
!2374 = !DIEnumerator(name: "CODE_FOR_sse_vmsmaxv4sf3", value: 963, isUnsigned: true)
!2375 = !DIEnumerator(name: "CODE_FOR_sse_vmsminv4sf3", value: 964, isUnsigned: true)
!2376 = !DIEnumerator(name: "CODE_FOR_sse2_vmsmaxv2df3", value: 965, isUnsigned: true)
!2377 = !DIEnumerator(name: "CODE_FOR_sse2_vmsminv2df3", value: 966, isUnsigned: true)
!2378 = !DIEnumerator(name: "CODE_FOR_avx_addsubv8sf3", value: 979, isUnsigned: true)
!2379 = !DIEnumerator(name: "CODE_FOR_avx_addsubv4df3", value: 980, isUnsigned: true)
!2380 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv4sf3", value: 982, isUnsigned: true)
!2381 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv2df3", value: 984, isUnsigned: true)
!2382 = !DIEnumerator(name: "CODE_FOR_avx_haddv4df3", value: 985, isUnsigned: true)
!2383 = !DIEnumerator(name: "CODE_FOR_avx_hsubv4df3", value: 986, isUnsigned: true)
!2384 = !DIEnumerator(name: "CODE_FOR_avx_haddv8sf3", value: 987, isUnsigned: true)
!2385 = !DIEnumerator(name: "CODE_FOR_avx_hsubv8sf3", value: 988, isUnsigned: true)
!2386 = !DIEnumerator(name: "CODE_FOR_sse3_haddv4sf3", value: 991, isUnsigned: true)
!2387 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv4sf3", value: 992, isUnsigned: true)
!2388 = !DIEnumerator(name: "CODE_FOR_sse3_haddv2df3", value: 995, isUnsigned: true)
!2389 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv2df3", value: 996, isUnsigned: true)
!2390 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv4sf3", value: 997, isUnsigned: true)
!2391 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv2df3", value: 998, isUnsigned: true)
!2392 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv8sf3", value: 999, isUnsigned: true)
!2393 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv4df3", value: 1000, isUnsigned: true)
!2394 = !DIEnumerator(name: "CODE_FOR_avx_cmpssv4sf3", value: 1001, isUnsigned: true)
!2395 = !DIEnumerator(name: "CODE_FOR_avx_cmpsdv2df3", value: 1002, isUnsigned: true)
!2396 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpsf3", value: 1007, isUnsigned: true)
!2397 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpdf3", value: 1008, isUnsigned: true)
!2398 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpv4sf3", value: 1009, isUnsigned: true)
!2399 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpv2df3", value: 1010, isUnsigned: true)
!2400 = !DIEnumerator(name: "CODE_FOR_sse_vmmaskcmpv4sf3", value: 1011, isUnsigned: true)
!2401 = !DIEnumerator(name: "CODE_FOR_sse2_vmmaskcmpv2df3", value: 1012, isUnsigned: true)
!2402 = !DIEnumerator(name: "CODE_FOR_sse_comi", value: 1013, isUnsigned: true)
!2403 = !DIEnumerator(name: "CODE_FOR_sse2_comi", value: 1014, isUnsigned: true)
!2404 = !DIEnumerator(name: "CODE_FOR_sse_ucomi", value: 1015, isUnsigned: true)
!2405 = !DIEnumerator(name: "CODE_FOR_sse2_ucomi", value: 1016, isUnsigned: true)
!2406 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4sf3", value: 1017, isUnsigned: true)
!2407 = !DIEnumerator(name: "CODE_FOR_avx_andnotv2df3", value: 1018, isUnsigned: true)
!2408 = !DIEnumerator(name: "CODE_FOR_avx_andnotv8sf3", value: 1019, isUnsigned: true)
!2409 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4df3", value: 1020, isUnsigned: true)
!2410 = !DIEnumerator(name: "CODE_FOR_sse_andnotv4sf3", value: 1021, isUnsigned: true)
!2411 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2df3", value: 1022, isUnsigned: true)
!2412 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv8sf4256", value: 1057, isUnsigned: true)
!2413 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4df4256", value: 1058, isUnsigned: true)
!2414 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv8sf4256", value: 1059, isUnsigned: true)
!2415 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4df4256", value: 1060, isUnsigned: true)
!2416 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv8sf4256", value: 1061, isUnsigned: true)
!2417 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4df4256", value: 1062, isUnsigned: true)
!2418 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv8sf4256", value: 1063, isUnsigned: true)
!2419 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4df4256", value: 1064, isUnsigned: true)
!2420 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsf4", value: 1065, isUnsigned: true)
!2421 = !DIEnumerator(name: "CODE_FOR_fma4_fmadddf4", value: 1066, isUnsigned: true)
!2422 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4sf4", value: 1067, isUnsigned: true)
!2423 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv2df4", value: 1068, isUnsigned: true)
!2424 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv4sf4", value: 1069, isUnsigned: true)
!2425 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv2df4", value: 1070, isUnsigned: true)
!2426 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubsf4", value: 1071, isUnsigned: true)
!2427 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubdf4", value: 1072, isUnsigned: true)
!2428 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4sf4", value: 1073, isUnsigned: true)
!2429 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv2df4", value: 1074, isUnsigned: true)
!2430 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv4sf4", value: 1075, isUnsigned: true)
!2431 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv2df4", value: 1076, isUnsigned: true)
!2432 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddsf4", value: 1077, isUnsigned: true)
!2433 = !DIEnumerator(name: "CODE_FOR_fma4_fnmadddf4", value: 1078, isUnsigned: true)
!2434 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4sf4", value: 1079, isUnsigned: true)
!2435 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv2df4", value: 1080, isUnsigned: true)
!2436 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv4sf4", value: 1081, isUnsigned: true)
!2437 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv2df4", value: 1082, isUnsigned: true)
!2438 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubsf4", value: 1083, isUnsigned: true)
!2439 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubdf4", value: 1084, isUnsigned: true)
!2440 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4sf4", value: 1085, isUnsigned: true)
!2441 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv2df4", value: 1086, isUnsigned: true)
!2442 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv4sf4", value: 1087, isUnsigned: true)
!2443 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv2df4", value: 1088, isUnsigned: true)
!2444 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv8sf4256", value: 1089, isUnsigned: true)
!2445 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4df4256", value: 1090, isUnsigned: true)
!2446 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv8sf4256", value: 1091, isUnsigned: true)
!2447 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4df4256", value: 1092, isUnsigned: true)
!2448 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv8sf4256", value: 1093, isUnsigned: true)
!2449 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4df4256", value: 1094, isUnsigned: true)
!2450 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv8sf4256", value: 1095, isUnsigned: true)
!2451 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4df4256", value: 1096, isUnsigned: true)
!2452 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4sf4", value: 1097, isUnsigned: true)
!2453 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv2df4", value: 1098, isUnsigned: true)
!2454 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4sf4", value: 1099, isUnsigned: true)
!2455 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv2df4", value: 1100, isUnsigned: true)
!2456 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4sf4", value: 1101, isUnsigned: true)
!2457 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv2df4", value: 1102, isUnsigned: true)
!2458 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4sf4", value: 1103, isUnsigned: true)
!2459 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv2df4", value: 1104, isUnsigned: true)
!2460 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv4sf4", value: 1105, isUnsigned: true)
!2461 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv2df4", value: 1106, isUnsigned: true)
!2462 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv4sf4", value: 1107, isUnsigned: true)
!2463 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv2df4", value: 1108, isUnsigned: true)
!2464 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv4sf4", value: 1109, isUnsigned: true)
!2465 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv2df4", value: 1110, isUnsigned: true)
!2466 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv4sf4", value: 1111, isUnsigned: true)
!2467 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv2df4", value: 1112, isUnsigned: true)
!2468 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv8sf4", value: 1113, isUnsigned: true)
!2469 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4df4", value: 1114, isUnsigned: true)
!2470 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4sf4", value: 1115, isUnsigned: true)
!2471 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv2df4", value: 1116, isUnsigned: true)
!2472 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv8sf4", value: 1117, isUnsigned: true)
!2473 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4df4", value: 1118, isUnsigned: true)
!2474 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4sf4", value: 1119, isUnsigned: true)
!2475 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv2df4", value: 1120, isUnsigned: true)
!2476 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv8sf4", value: 1121, isUnsigned: true)
!2477 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4df4", value: 1122, isUnsigned: true)
!2478 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4sf4", value: 1123, isUnsigned: true)
!2479 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv2df4", value: 1124, isUnsigned: true)
!2480 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv8sf4", value: 1125, isUnsigned: true)
!2481 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4df4", value: 1126, isUnsigned: true)
!2482 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4sf4", value: 1127, isUnsigned: true)
!2483 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv2df4", value: 1128, isUnsigned: true)
!2484 = !DIEnumerator(name: "CODE_FOR_sse_cvtpi2ps", value: 1129, isUnsigned: true)
!2485 = !DIEnumerator(name: "CODE_FOR_sse_cvtps2pi", value: 1130, isUnsigned: true)
!2486 = !DIEnumerator(name: "CODE_FOR_sse_cvttps2pi", value: 1131, isUnsigned: true)
!2487 = !DIEnumerator(name: "CODE_FOR_sse_cvtsi2ss", value: 1133, isUnsigned: true)
!2488 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si", value: 1134, isUnsigned: true)
!2489 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si_2", value: 1135, isUnsigned: true)
!2490 = !DIEnumerator(name: "CODE_FOR_sse_cvttss2si", value: 1136, isUnsigned: true)
!2491 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps", value: 1137, isUnsigned: true)
!2492 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps256", value: 1138, isUnsigned: true)
!2493 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2ps", value: 1139, isUnsigned: true)
!2494 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq", value: 1140, isUnsigned: true)
!2495 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq256", value: 1141, isUnsigned: true)
!2496 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2dq", value: 1142, isUnsigned: true)
!2497 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq", value: 1143, isUnsigned: true)
!2498 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq256", value: 1144, isUnsigned: true)
!2499 = !DIEnumerator(name: "CODE_FOR_sse2_cvttps2dq", value: 1145, isUnsigned: true)
!2500 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpi2pd", value: 1146, isUnsigned: true)
!2501 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2pi", value: 1147, isUnsigned: true)
!2502 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2pi", value: 1148, isUnsigned: true)
!2503 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsi2sd", value: 1150, isUnsigned: true)
!2504 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si", value: 1151, isUnsigned: true)
!2505 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si_2", value: 1152, isUnsigned: true)
!2506 = !DIEnumerator(name: "CODE_FOR_sse2_cvttsd2si", value: 1153, isUnsigned: true)
!2507 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2pd256", value: 1154, isUnsigned: true)
!2508 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2pd", value: 1155, isUnsigned: true)
!2509 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2dq256", value: 1156, isUnsigned: true)
!2510 = !DIEnumerator(name: "CODE_FOR_avx_cvttpd2dq256", value: 1158, isUnsigned: true)
!2511 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2ss", value: 1161, isUnsigned: true)
!2512 = !DIEnumerator(name: "CODE_FOR_sse2_cvtss2sd", value: 1163, isUnsigned: true)
!2513 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2ps256", value: 1164, isUnsigned: true)
!2514 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2pd256", value: 1166, isUnsigned: true)
!2515 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2pd", value: 1167, isUnsigned: true)
!2516 = !DIEnumerator(name: "CODE_FOR_sse_movhlps", value: 1169, isUnsigned: true)
!2517 = !DIEnumerator(name: "CODE_FOR_sse_movlhps", value: 1171, isUnsigned: true)
!2518 = !DIEnumerator(name: "CODE_FOR_avx_unpckhps256", value: 1172, isUnsigned: true)
!2519 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4sf", value: 1174, isUnsigned: true)
!2520 = !DIEnumerator(name: "CODE_FOR_avx_unpcklps256", value: 1175, isUnsigned: true)
!2521 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4sf", value: 1177, isUnsigned: true)
!2522 = !DIEnumerator(name: "CODE_FOR_avx_movshdup256", value: 1178, isUnsigned: true)
!2523 = !DIEnumerator(name: "CODE_FOR_sse3_movshdup", value: 1179, isUnsigned: true)
!2524 = !DIEnumerator(name: "CODE_FOR_avx_movsldup256", value: 1180, isUnsigned: true)
!2525 = !DIEnumerator(name: "CODE_FOR_sse3_movsldup", value: 1181, isUnsigned: true)
!2526 = !DIEnumerator(name: "CODE_FOR_avx_shufps256_1", value: 1182, isUnsigned: true)
!2527 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4sf", value: 1185, isUnsigned: true)
!2528 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4si", value: 1186, isUnsigned: true)
!2529 = !DIEnumerator(name: "CODE_FOR_sse_storehps", value: 1187, isUnsigned: true)
!2530 = !DIEnumerator(name: "CODE_FOR_sse_loadhps", value: 1189, isUnsigned: true)
!2531 = !DIEnumerator(name: "CODE_FOR_sse_storelps", value: 1191, isUnsigned: true)
!2532 = !DIEnumerator(name: "CODE_FOR_sse_loadlps", value: 1193, isUnsigned: true)
!2533 = !DIEnumerator(name: "CODE_FOR_sse_movss", value: 1195, isUnsigned: true)
!2534 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf_0", value: 1209, isUnsigned: true)
!2535 = !DIEnumerator(name: "CODE_FOR_vec_setv4si_0", value: 1210, isUnsigned: true)
!2536 = !DIEnumerator(name: "CODE_FOR_sse4_1_insertps", value: 1214, isUnsigned: true)
!2537 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4di", value: 1216, isUnsigned: true)
!2538 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4df", value: 1217, isUnsigned: true)
!2539 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4di", value: 1218, isUnsigned: true)
!2540 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4df", value: 1219, isUnsigned: true)
!2541 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8si", value: 1220, isUnsigned: true)
!2542 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8sf", value: 1221, isUnsigned: true)
!2543 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8si", value: 1222, isUnsigned: true)
!2544 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8sf", value: 1223, isUnsigned: true)
!2545 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v16hi", value: 1224, isUnsigned: true)
!2546 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v16hi", value: 1225, isUnsigned: true)
!2547 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v32qi", value: 1226, isUnsigned: true)
!2548 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v32qi", value: 1227, isUnsigned: true)
!2549 = !DIEnumerator(name: "CODE_FOR_avx_unpckhpd256", value: 1230, isUnsigned: true)
!2550 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256_1", value: 1238, isUnsigned: true)
!2551 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2di", value: 1240, isUnsigned: true)
!2552 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2di", value: 1242, isUnsigned: true)
!2553 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2df", value: 1245, isUnsigned: true)
!2554 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2di", value: 1246, isUnsigned: true)
!2555 = !DIEnumerator(name: "CODE_FOR_sse2_storehpd", value: 1248, isUnsigned: true)
!2556 = !DIEnumerator(name: "CODE_FOR_sse2_storelpd", value: 1249, isUnsigned: true)
!2557 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd", value: 1251, isUnsigned: true)
!2558 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd", value: 1253, isUnsigned: true)
!2559 = !DIEnumerator(name: "CODE_FOR_sse2_movsd", value: 1257, isUnsigned: true)
!2560 = !DIEnumerator(name: "CODE_FOR_vec_dupv2df", value: 1259, isUnsigned: true)
!2561 = !DIEnumerator(name: "CODE_FOR_mulv16qi3", value: 1295, isUnsigned: true)
!2562 = !DIEnumerator(name: "CODE_FOR_mulv2di3", value: 1311, isUnsigned: true)
!2563 = !DIEnumerator(name: "CODE_FOR_ashrv8hi3", value: 1314, isUnsigned: true)
!2564 = !DIEnumerator(name: "CODE_FOR_ashrv4si3", value: 1315, isUnsigned: true)
!2565 = !DIEnumerator(name: "CODE_FOR_sse2_lshrv1ti3", value: 1320, isUnsigned: true)
!2566 = !DIEnumerator(name: "CODE_FOR_lshrv8hi3", value: 1321, isUnsigned: true)
!2567 = !DIEnumerator(name: "CODE_FOR_lshrv4si3", value: 1322, isUnsigned: true)
!2568 = !DIEnumerator(name: "CODE_FOR_lshrv2di3", value: 1323, isUnsigned: true)
!2569 = !DIEnumerator(name: "CODE_FOR_sse2_ashlv1ti3", value: 1328, isUnsigned: true)
!2570 = !DIEnumerator(name: "CODE_FOR_ashlv8hi3", value: 1329, isUnsigned: true)
!2571 = !DIEnumerator(name: "CODE_FOR_ashlv4si3", value: 1330, isUnsigned: true)
!2572 = !DIEnumerator(name: "CODE_FOR_ashlv2di3", value: 1331, isUnsigned: true)
!2573 = !DIEnumerator(name: "CODE_FOR_sse2_gtv16qi3", value: 1368, isUnsigned: true)
!2574 = !DIEnumerator(name: "CODE_FOR_sse2_gtv8hi3", value: 1369, isUnsigned: true)
!2575 = !DIEnumerator(name: "CODE_FOR_sse2_gtv4si3", value: 1370, isUnsigned: true)
!2576 = !DIEnumerator(name: "CODE_FOR_sse4_2_gtv2di3", value: 1371, isUnsigned: true)
!2577 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv16qi3", value: 1384, isUnsigned: true)
!2578 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv8hi3", value: 1385, isUnsigned: true)
!2579 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv4si3", value: 1386, isUnsigned: true)
!2580 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2di3", value: 1387, isUnsigned: true)
!2581 = !DIEnumerator(name: "CODE_FOR_sse2_packsswb", value: 1441, isUnsigned: true)
!2582 = !DIEnumerator(name: "CODE_FOR_sse2_packssdw", value: 1443, isUnsigned: true)
!2583 = !DIEnumerator(name: "CODE_FOR_sse2_packuswb", value: 1445, isUnsigned: true)
!2584 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv16qi", value: 1447, isUnsigned: true)
!2585 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv16qi", value: 1449, isUnsigned: true)
!2586 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv8hi", value: 1451, isUnsigned: true)
!2587 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv8hi", value: 1453, isUnsigned: true)
!2588 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4si", value: 1455, isUnsigned: true)
!2589 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4si", value: 1457, isUnsigned: true)
!2590 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd_1", value: 1469, isUnsigned: true)
!2591 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw_1", value: 1470, isUnsigned: true)
!2592 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw_1", value: 1471, isUnsigned: true)
!2593 = !DIEnumerator(name: "CODE_FOR_sse2_loadld", value: 1473, isUnsigned: true)
!2594 = !DIEnumerator(name: "CODE_FOR_sse2_stored", value: 1474, isUnsigned: true)
!2595 = !DIEnumerator(name: "CODE_FOR_vec_concatv2di", value: 1492, isUnsigned: true)
!2596 = !DIEnumerator(name: "CODE_FOR_sse2_psadbw", value: 1498, isUnsigned: true)
!2597 = !DIEnumerator(name: "CODE_FOR_avx_movmskps256", value: 1499, isUnsigned: true)
!2598 = !DIEnumerator(name: "CODE_FOR_avx_movmskpd256", value: 1500, isUnsigned: true)
!2599 = !DIEnumerator(name: "CODE_FOR_sse_movmskps", value: 1501, isUnsigned: true)
!2600 = !DIEnumerator(name: "CODE_FOR_sse2_movmskpd", value: 1502, isUnsigned: true)
!2601 = !DIEnumerator(name: "CODE_FOR_sse2_pmovmskb", value: 1503, isUnsigned: true)
!2602 = !DIEnumerator(name: "CODE_FOR_sse_ldmxcsr", value: 1505, isUnsigned: true)
!2603 = !DIEnumerator(name: "CODE_FOR_sse_stmxcsr", value: 1506, isUnsigned: true)
!2604 = !DIEnumerator(name: "CODE_FOR_sse2_clflush", value: 1508, isUnsigned: true)
!2605 = !DIEnumerator(name: "CODE_FOR_sse3_mwait", value: 1511, isUnsigned: true)
!2606 = !DIEnumerator(name: "CODE_FOR_sse3_monitor", value: 1512, isUnsigned: true)
!2607 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv8hi3", value: 1514, isUnsigned: true)
!2608 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv4hi3", value: 1515, isUnsigned: true)
!2609 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv4si3", value: 1517, isUnsigned: true)
!2610 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv2si3", value: 1518, isUnsigned: true)
!2611 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv8hi3", value: 1520, isUnsigned: true)
!2612 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv4hi3", value: 1521, isUnsigned: true)
!2613 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv8hi3", value: 1523, isUnsigned: true)
!2614 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv4hi3", value: 1524, isUnsigned: true)
!2615 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv4si3", value: 1526, isUnsigned: true)
!2616 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv2si3", value: 1527, isUnsigned: true)
!2617 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv8hi3", value: 1529, isUnsigned: true)
!2618 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv4hi3", value: 1530, isUnsigned: true)
!2619 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw128", value: 1532, isUnsigned: true)
!2620 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw", value: 1533, isUnsigned: true)
!2621 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv16qi3", value: 1538, isUnsigned: true)
!2622 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv8qi3", value: 1539, isUnsigned: true)
!2623 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv16qi3", value: 1543, isUnsigned: true)
!2624 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8hi3", value: 1544, isUnsigned: true)
!2625 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4si3", value: 1545, isUnsigned: true)
!2626 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8qi3", value: 1546, isUnsigned: true)
!2627 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4hi3", value: 1547, isUnsigned: true)
!2628 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv2si3", value: 1548, isUnsigned: true)
!2629 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrti", value: 1550, isUnsigned: true)
!2630 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrdi", value: 1551, isUnsigned: true)
!2631 = !DIEnumerator(name: "CODE_FOR_absv16qi2", value: 1552, isUnsigned: true)
!2632 = !DIEnumerator(name: "CODE_FOR_absv8hi2", value: 1553, isUnsigned: true)
!2633 = !DIEnumerator(name: "CODE_FOR_absv4si2", value: 1554, isUnsigned: true)
!2634 = !DIEnumerator(name: "CODE_FOR_absv8qi2", value: 1555, isUnsigned: true)
!2635 = !DIEnumerator(name: "CODE_FOR_absv4hi2", value: 1556, isUnsigned: true)
!2636 = !DIEnumerator(name: "CODE_FOR_absv2si2", value: 1557, isUnsigned: true)
!2637 = !DIEnumerator(name: "CODE_FOR_sse4a_movntsf", value: 1558, isUnsigned: true)
!2638 = !DIEnumerator(name: "CODE_FOR_sse4a_movntdf", value: 1559, isUnsigned: true)
!2639 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv4sf", value: 1560, isUnsigned: true)
!2640 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv2df", value: 1561, isUnsigned: true)
!2641 = !DIEnumerator(name: "CODE_FOR_sse4a_extrqi", value: 1562, isUnsigned: true)
!2642 = !DIEnumerator(name: "CODE_FOR_sse4a_extrq", value: 1563, isUnsigned: true)
!2643 = !DIEnumerator(name: "CODE_FOR_sse4a_insertqi", value: 1564, isUnsigned: true)
!2644 = !DIEnumerator(name: "CODE_FOR_sse4a_insertq", value: 1565, isUnsigned: true)
!2645 = !DIEnumerator(name: "CODE_FOR_avx_blendps", value: 1566, isUnsigned: true)
!2646 = !DIEnumerator(name: "CODE_FOR_avx_blendpd", value: 1567, isUnsigned: true)
!2647 = !DIEnumerator(name: "CODE_FOR_avx_blendps256", value: 1568, isUnsigned: true)
!2648 = !DIEnumerator(name: "CODE_FOR_avx_blendpd256", value: 1569, isUnsigned: true)
!2649 = !DIEnumerator(name: "CODE_FOR_avx_blendvps", value: 1570, isUnsigned: true)
!2650 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd", value: 1571, isUnsigned: true)
!2651 = !DIEnumerator(name: "CODE_FOR_avx_blendvps256", value: 1572, isUnsigned: true)
!2652 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd256", value: 1573, isUnsigned: true)
!2653 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendps", value: 1574, isUnsigned: true)
!2654 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendpd", value: 1575, isUnsigned: true)
!2655 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvps", value: 1576, isUnsigned: true)
!2656 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvpd", value: 1577, isUnsigned: true)
!2657 = !DIEnumerator(name: "CODE_FOR_avx_dpps", value: 1578, isUnsigned: true)
!2658 = !DIEnumerator(name: "CODE_FOR_avx_dppd", value: 1579, isUnsigned: true)
!2659 = !DIEnumerator(name: "CODE_FOR_avx_dpps256", value: 1580, isUnsigned: true)
!2660 = !DIEnumerator(name: "CODE_FOR_avx_dppd256", value: 1581, isUnsigned: true)
!2661 = !DIEnumerator(name: "CODE_FOR_sse4_1_dpps", value: 1582, isUnsigned: true)
!2662 = !DIEnumerator(name: "CODE_FOR_sse4_1_dppd", value: 1583, isUnsigned: true)
!2663 = !DIEnumerator(name: "CODE_FOR_sse4_1_movntdqa", value: 1584, isUnsigned: true)
!2664 = !DIEnumerator(name: "CODE_FOR_sse4_1_mpsadbw", value: 1586, isUnsigned: true)
!2665 = !DIEnumerator(name: "CODE_FOR_sse4_1_packusdw", value: 1588, isUnsigned: true)
!2666 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendvb", value: 1590, isUnsigned: true)
!2667 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendw", value: 1592, isUnsigned: true)
!2668 = !DIEnumerator(name: "CODE_FOR_sse4_1_phminposuw", value: 1593, isUnsigned: true)
!2669 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv8qiv8hi2", value: 1594, isUnsigned: true)
!2670 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4qiv4si2", value: 1596, isUnsigned: true)
!2671 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2qiv2di2", value: 1598, isUnsigned: true)
!2672 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4hiv4si2", value: 1600, isUnsigned: true)
!2673 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2hiv2di2", value: 1602, isUnsigned: true)
!2674 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2siv2di2", value: 1604, isUnsigned: true)
!2675 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv8qiv8hi2", value: 1606, isUnsigned: true)
!2676 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4qiv4si2", value: 1608, isUnsigned: true)
!2677 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2qiv2di2", value: 1610, isUnsigned: true)
!2678 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4hiv4si2", value: 1612, isUnsigned: true)
!2679 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2hiv2di2", value: 1614, isUnsigned: true)
!2680 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2siv2di2", value: 1616, isUnsigned: true)
!2681 = !DIEnumerator(name: "CODE_FOR_avx_vtestps", value: 1618, isUnsigned: true)
!2682 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd", value: 1619, isUnsigned: true)
!2683 = !DIEnumerator(name: "CODE_FOR_avx_vtestps256", value: 1620, isUnsigned: true)
!2684 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd256", value: 1621, isUnsigned: true)
!2685 = !DIEnumerator(name: "CODE_FOR_avx_ptest256", value: 1622, isUnsigned: true)
!2686 = !DIEnumerator(name: "CODE_FOR_sse4_1_ptest", value: 1623, isUnsigned: true)
!2687 = !DIEnumerator(name: "CODE_FOR_avx_roundps256", value: 1624, isUnsigned: true)
!2688 = !DIEnumerator(name: "CODE_FOR_avx_roundpd256", value: 1625, isUnsigned: true)
!2689 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundps", value: 1626, isUnsigned: true)
!2690 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundpd", value: 1627, isUnsigned: true)
!2691 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundss", value: 1630, isUnsigned: true)
!2692 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsd", value: 1631, isUnsigned: true)
!2693 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr", value: 1632, isUnsigned: true)
!2694 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestri", value: 1633, isUnsigned: true)
!2695 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestrm", value: 1634, isUnsigned: true)
!2696 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr_cconly", value: 1635, isUnsigned: true)
!2697 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr", value: 1636, isUnsigned: true)
!2698 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistri", value: 1637, isUnsigned: true)
!2699 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistrm", value: 1638, isUnsigned: true)
!2700 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr_cconly", value: 1639, isUnsigned: true)
!2701 = !DIEnumerator(name: "CODE_FOR_xop_pmacsww", value: 1640, isUnsigned: true)
!2702 = !DIEnumerator(name: "CODE_FOR_xop_pmacssww", value: 1641, isUnsigned: true)
!2703 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdd", value: 1642, isUnsigned: true)
!2704 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdd", value: 1643, isUnsigned: true)
!2705 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdql", value: 1644, isUnsigned: true)
!2706 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdqh", value: 1645, isUnsigned: true)
!2707 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdql", value: 1646, isUnsigned: true)
!2708 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_low", value: 1647, isUnsigned: true)
!2709 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdqh", value: 1648, isUnsigned: true)
!2710 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_high", value: 1649, isUnsigned: true)
!2711 = !DIEnumerator(name: "CODE_FOR_xop_pmacsswd", value: 1650, isUnsigned: true)
!2712 = !DIEnumerator(name: "CODE_FOR_xop_pmacswd", value: 1651, isUnsigned: true)
!2713 = !DIEnumerator(name: "CODE_FOR_xop_pmadcsswd", value: 1652, isUnsigned: true)
!2714 = !DIEnumerator(name: "CODE_FOR_xop_pmadcswd", value: 1653, isUnsigned: true)
!2715 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16qi", value: 1654, isUnsigned: true)
!2716 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8hi", value: 1655, isUnsigned: true)
!2717 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4si", value: 1656, isUnsigned: true)
!2718 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2di", value: 1657, isUnsigned: true)
!2719 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4sf", value: 1658, isUnsigned: true)
!2720 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2df", value: 1659, isUnsigned: true)
!2721 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v32qi256", value: 1660, isUnsigned: true)
!2722 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16hi256", value: 1661, isUnsigned: true)
!2723 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8si256", value: 1662, isUnsigned: true)
!2724 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4di256", value: 1663, isUnsigned: true)
!2725 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8sf256", value: 1664, isUnsigned: true)
!2726 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4df256", value: 1665, isUnsigned: true)
!2727 = !DIEnumerator(name: "CODE_FOR_xop_phaddbw", value: 1666, isUnsigned: true)
!2728 = !DIEnumerator(name: "CODE_FOR_xop_phaddbd", value: 1667, isUnsigned: true)
!2729 = !DIEnumerator(name: "CODE_FOR_xop_phaddbq", value: 1668, isUnsigned: true)
!2730 = !DIEnumerator(name: "CODE_FOR_xop_phaddwd", value: 1669, isUnsigned: true)
!2731 = !DIEnumerator(name: "CODE_FOR_xop_phaddwq", value: 1670, isUnsigned: true)
!2732 = !DIEnumerator(name: "CODE_FOR_xop_phadddq", value: 1671, isUnsigned: true)
!2733 = !DIEnumerator(name: "CODE_FOR_xop_phaddubw", value: 1672, isUnsigned: true)
!2734 = !DIEnumerator(name: "CODE_FOR_xop_phaddubd", value: 1673, isUnsigned: true)
!2735 = !DIEnumerator(name: "CODE_FOR_xop_phaddubq", value: 1674, isUnsigned: true)
!2736 = !DIEnumerator(name: "CODE_FOR_xop_phadduwd", value: 1675, isUnsigned: true)
!2737 = !DIEnumerator(name: "CODE_FOR_xop_phadduwq", value: 1676, isUnsigned: true)
!2738 = !DIEnumerator(name: "CODE_FOR_xop_phaddudq", value: 1677, isUnsigned: true)
!2739 = !DIEnumerator(name: "CODE_FOR_xop_phsubbw", value: 1678, isUnsigned: true)
!2740 = !DIEnumerator(name: "CODE_FOR_xop_phsubwd", value: 1679, isUnsigned: true)
!2741 = !DIEnumerator(name: "CODE_FOR_xop_phsubdq", value: 1680, isUnsigned: true)
!2742 = !DIEnumerator(name: "CODE_FOR_xop_pperm", value: 1681, isUnsigned: true)
!2743 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v2di_v4si", value: 1682, isUnsigned: true)
!2744 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v4si_v8hi", value: 1683, isUnsigned: true)
!2745 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v8hi_v16qi", value: 1684, isUnsigned: true)
!2746 = !DIEnumerator(name: "CODE_FOR_xop_rotlv16qi3", value: 1685, isUnsigned: true)
!2747 = !DIEnumerator(name: "CODE_FOR_xop_rotlv8hi3", value: 1686, isUnsigned: true)
!2748 = !DIEnumerator(name: "CODE_FOR_xop_rotlv4si3", value: 1687, isUnsigned: true)
!2749 = !DIEnumerator(name: "CODE_FOR_xop_rotlv2di3", value: 1688, isUnsigned: true)
!2750 = !DIEnumerator(name: "CODE_FOR_xop_rotrv16qi3", value: 1689, isUnsigned: true)
!2751 = !DIEnumerator(name: "CODE_FOR_xop_rotrv8hi3", value: 1690, isUnsigned: true)
!2752 = !DIEnumerator(name: "CODE_FOR_xop_rotrv4si3", value: 1691, isUnsigned: true)
!2753 = !DIEnumerator(name: "CODE_FOR_xop_rotrv2di3", value: 1692, isUnsigned: true)
!2754 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv16qi3", value: 1693, isUnsigned: true)
!2755 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv8hi3", value: 1694, isUnsigned: true)
!2756 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv4si3", value: 1695, isUnsigned: true)
!2757 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv2di3", value: 1696, isUnsigned: true)
!2758 = !DIEnumerator(name: "CODE_FOR_xop_ashlv16qi3", value: 1697, isUnsigned: true)
!2759 = !DIEnumerator(name: "CODE_FOR_xop_ashlv8hi3", value: 1698, isUnsigned: true)
!2760 = !DIEnumerator(name: "CODE_FOR_xop_ashlv4si3", value: 1699, isUnsigned: true)
!2761 = !DIEnumerator(name: "CODE_FOR_xop_ashlv2di3", value: 1700, isUnsigned: true)
!2762 = !DIEnumerator(name: "CODE_FOR_xop_lshlv16qi3", value: 1701, isUnsigned: true)
!2763 = !DIEnumerator(name: "CODE_FOR_xop_lshlv8hi3", value: 1702, isUnsigned: true)
!2764 = !DIEnumerator(name: "CODE_FOR_xop_lshlv4si3", value: 1703, isUnsigned: true)
!2765 = !DIEnumerator(name: "CODE_FOR_xop_lshlv2di3", value: 1704, isUnsigned: true)
!2766 = !DIEnumerator(name: "CODE_FOR_xop_frczv4sf2", value: 1705, isUnsigned: true)
!2767 = !DIEnumerator(name: "CODE_FOR_xop_frczv2df2", value: 1706, isUnsigned: true)
!2768 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv4sf2", value: 1707, isUnsigned: true)
!2769 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv2df2", value: 1708, isUnsigned: true)
!2770 = !DIEnumerator(name: "CODE_FOR_xop_frczv8sf2256", value: 1709, isUnsigned: true)
!2771 = !DIEnumerator(name: "CODE_FOR_xop_frczv4df2256", value: 1710, isUnsigned: true)
!2772 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv16qi3", value: 1711, isUnsigned: true)
!2773 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv8hi3", value: 1712, isUnsigned: true)
!2774 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv4si3", value: 1713, isUnsigned: true)
!2775 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv2di3", value: 1714, isUnsigned: true)
!2776 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv16qi3", value: 1715, isUnsigned: true)
!2777 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv8hi3", value: 1716, isUnsigned: true)
!2778 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv4si3", value: 1717, isUnsigned: true)
!2779 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv2di3", value: 1718, isUnsigned: true)
!2780 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v16qi3", value: 1719, isUnsigned: true)
!2781 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v8hi3", value: 1720, isUnsigned: true)
!2782 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v4si3", value: 1721, isUnsigned: true)
!2783 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v2di3", value: 1722, isUnsigned: true)
!2784 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv16qi3", value: 1723, isUnsigned: true)
!2785 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv8hi3", value: 1724, isUnsigned: true)
!2786 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv4si3", value: 1725, isUnsigned: true)
!2787 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv2di3", value: 1726, isUnsigned: true)
!2788 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4sf3", value: 1727, isUnsigned: true)
!2789 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v2df3", value: 1728, isUnsigned: true)
!2790 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v8sf3", value: 1729, isUnsigned: true)
!2791 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4df3", value: 1730, isUnsigned: true)
!2792 = !DIEnumerator(name: "CODE_FOR_aesenc", value: 1732, isUnsigned: true)
!2793 = !DIEnumerator(name: "CODE_FOR_aesenclast", value: 1734, isUnsigned: true)
!2794 = !DIEnumerator(name: "CODE_FOR_aesdec", value: 1736, isUnsigned: true)
!2795 = !DIEnumerator(name: "CODE_FOR_aesdeclast", value: 1738, isUnsigned: true)
!2796 = !DIEnumerator(name: "CODE_FOR_aesimc", value: 1739, isUnsigned: true)
!2797 = !DIEnumerator(name: "CODE_FOR_aeskeygenassist", value: 1740, isUnsigned: true)
!2798 = !DIEnumerator(name: "CODE_FOR_pclmulqdq", value: 1742, isUnsigned: true)
!2799 = !DIEnumerator(name: "CODE_FOR_vec_dupv8si", value: 1745, isUnsigned: true)
!2800 = !DIEnumerator(name: "CODE_FOR_vec_dupv8sf", value: 1746, isUnsigned: true)
!2801 = !DIEnumerator(name: "CODE_FOR_vec_dupv4di", value: 1747, isUnsigned: true)
!2802 = !DIEnumerator(name: "CODE_FOR_vec_dupv4df", value: 1748, isUnsigned: true)
!2803 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v32qi", value: 1749, isUnsigned: true)
!2804 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v16hi", value: 1750, isUnsigned: true)
!2805 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8si", value: 1751, isUnsigned: true)
!2806 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4di", value: 1752, isUnsigned: true)
!2807 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8sf", value: 1753, isUnsigned: true)
!2808 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4df", value: 1754, isUnsigned: true)
!2809 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4sf3", value: 1762, isUnsigned: true)
!2810 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv2df3", value: 1763, isUnsigned: true)
!2811 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv8sf3", value: 1764, isUnsigned: true)
!2812 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4df3", value: 1765, isUnsigned: true)
!2813 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4di", value: 1772, isUnsigned: true)
!2814 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4df", value: 1773, isUnsigned: true)
!2815 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4di", value: 1774, isUnsigned: true)
!2816 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4df", value: 1775, isUnsigned: true)
!2817 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8si", value: 1776, isUnsigned: true)
!2818 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8sf", value: 1777, isUnsigned: true)
!2819 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8si", value: 1778, isUnsigned: true)
!2820 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8sf", value: 1779, isUnsigned: true)
!2821 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v16hi", value: 1780, isUnsigned: true)
!2822 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v16hi", value: 1781, isUnsigned: true)
!2823 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v32qi", value: 1782, isUnsigned: true)
!2824 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v32qi", value: 1783, isUnsigned: true)
!2825 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps", value: 1784, isUnsigned: true)
!2826 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd", value: 1785, isUnsigned: true)
!2827 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps256", value: 1786, isUnsigned: true)
!2828 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd256", value: 1787, isUnsigned: true)
!2829 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps", value: 1788, isUnsigned: true)
!2830 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd", value: 1789, isUnsigned: true)
!2831 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps256", value: 1790, isUnsigned: true)
!2832 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd256", value: 1791, isUnsigned: true)
!2833 = !DIEnumerator(name: "CODE_FOR_avx_si256_si", value: 1792, isUnsigned: true)
!2834 = !DIEnumerator(name: "CODE_FOR_avx_ps256_ps", value: 1793, isUnsigned: true)
!2835 = !DIEnumerator(name: "CODE_FOR_avx_pd256_pd", value: 1794, isUnsigned: true)
!2836 = !DIEnumerator(name: "CODE_FOR_avx_si_si256", value: 1795, isUnsigned: true)
!2837 = !DIEnumerator(name: "CODE_FOR_avx_ps_ps256", value: 1796, isUnsigned: true)
!2838 = !DIEnumerator(name: "CODE_FOR_avx_pd_pd256", value: 1797, isUnsigned: true)
!2839 = !DIEnumerator(name: "CODE_FOR_memory_barrier_nosse", value: 1804, isUnsigned: true)
!2840 = !DIEnumerator(name: "CODE_FOR_sync_double_compare_and_swapdi", value: 1808, isUnsigned: true)
!2841 = !DIEnumerator(name: "CODE_FOR_sync_old_addqi", value: 1810, isUnsigned: true)
!2842 = !DIEnumerator(name: "CODE_FOR_sync_old_addhi", value: 1811, isUnsigned: true)
!2843 = !DIEnumerator(name: "CODE_FOR_sync_old_addsi", value: 1812, isUnsigned: true)
!2844 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setqi", value: 1813, isUnsigned: true)
!2845 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_sethi", value: 1814, isUnsigned: true)
!2846 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setsi", value: 1815, isUnsigned: true)
!2847 = !DIEnumerator(name: "CODE_FOR_sync_addqi", value: 1816, isUnsigned: true)
!2848 = !DIEnumerator(name: "CODE_FOR_sync_addhi", value: 1817, isUnsigned: true)
!2849 = !DIEnumerator(name: "CODE_FOR_sync_addsi", value: 1818, isUnsigned: true)
!2850 = !DIEnumerator(name: "CODE_FOR_sync_subqi", value: 1819, isUnsigned: true)
!2851 = !DIEnumerator(name: "CODE_FOR_sync_subhi", value: 1820, isUnsigned: true)
!2852 = !DIEnumerator(name: "CODE_FOR_sync_subsi", value: 1821, isUnsigned: true)
!2853 = !DIEnumerator(name: "CODE_FOR_sync_andqi", value: 1822, isUnsigned: true)
!2854 = !DIEnumerator(name: "CODE_FOR_sync_iorqi", value: 1823, isUnsigned: true)
!2855 = !DIEnumerator(name: "CODE_FOR_sync_xorqi", value: 1824, isUnsigned: true)
!2856 = !DIEnumerator(name: "CODE_FOR_sync_andhi", value: 1825, isUnsigned: true)
!2857 = !DIEnumerator(name: "CODE_FOR_sync_iorhi", value: 1826, isUnsigned: true)
!2858 = !DIEnumerator(name: "CODE_FOR_sync_xorhi", value: 1827, isUnsigned: true)
!2859 = !DIEnumerator(name: "CODE_FOR_sync_andsi", value: 1828, isUnsigned: true)
!2860 = !DIEnumerator(name: "CODE_FOR_sync_iorsi", value: 1829, isUnsigned: true)
!2861 = !DIEnumerator(name: "CODE_FOR_sync_xorsi", value: 1830, isUnsigned: true)
!2862 = !DIEnumerator(name: "CODE_FOR_cbranchqi4", value: 1831, isUnsigned: true)
!2863 = !DIEnumerator(name: "CODE_FOR_cbranchhi4", value: 1832, isUnsigned: true)
!2864 = !DIEnumerator(name: "CODE_FOR_cbranchsi4", value: 1833, isUnsigned: true)
!2865 = !DIEnumerator(name: "CODE_FOR_cbranchdi4", value: 1834, isUnsigned: true)
!2866 = !DIEnumerator(name: "CODE_FOR_cstoreqi4", value: 1835, isUnsigned: true)
!2867 = !DIEnumerator(name: "CODE_FOR_cstorehi4", value: 1836, isUnsigned: true)
!2868 = !DIEnumerator(name: "CODE_FOR_cstoresi4", value: 1837, isUnsigned: true)
!2869 = !DIEnumerator(name: "CODE_FOR_cmpsi_1", value: 1838, isUnsigned: true)
!2870 = !DIEnumerator(name: "CODE_FOR_cmpqi_ext_3", value: 1839, isUnsigned: true)
!2871 = !DIEnumerator(name: "CODE_FOR_cbranchxf4", value: 1840, isUnsigned: true)
!2872 = !DIEnumerator(name: "CODE_FOR_cstorexf4", value: 1841, isUnsigned: true)
!2873 = !DIEnumerator(name: "CODE_FOR_cbranchsf4", value: 1842, isUnsigned: true)
!2874 = !DIEnumerator(name: "CODE_FOR_cbranchdf4", value: 1843, isUnsigned: true)
!2875 = !DIEnumerator(name: "CODE_FOR_cstoresf4", value: 1844, isUnsigned: true)
!2876 = !DIEnumerator(name: "CODE_FOR_cstoredf4", value: 1845, isUnsigned: true)
!2877 = !DIEnumerator(name: "CODE_FOR_cbranchcc4", value: 1846, isUnsigned: true)
!2878 = !DIEnumerator(name: "CODE_FOR_cstorecc4", value: 1847, isUnsigned: true)
!2879 = !DIEnumerator(name: "CODE_FOR_movsi", value: 1855, isUnsigned: true)
!2880 = !DIEnumerator(name: "CODE_FOR_movhi", value: 1856, isUnsigned: true)
!2881 = !DIEnumerator(name: "CODE_FOR_movstricthi", value: 1857, isUnsigned: true)
!2882 = !DIEnumerator(name: "CODE_FOR_movqi", value: 1858, isUnsigned: true)
!2883 = !DIEnumerator(name: "CODE_FOR_movstrictqi", value: 1859, isUnsigned: true)
!2884 = !DIEnumerator(name: "CODE_FOR_movdi", value: 1860, isUnsigned: true)
!2885 = !DIEnumerator(name: "CODE_FOR_movoi", value: 1863, isUnsigned: true)
!2886 = !DIEnumerator(name: "CODE_FOR_movti", value: 1864, isUnsigned: true)
!2887 = !DIEnumerator(name: "CODE_FOR_movcdi", value: 1866, isUnsigned: true)
!2888 = !DIEnumerator(name: "CODE_FOR_movsf", value: 1867, isUnsigned: true)
!2889 = !DIEnumerator(name: "CODE_FOR_movdf", value: 1870, isUnsigned: true)
!2890 = !DIEnumerator(name: "CODE_FOR_movxf", value: 1874, isUnsigned: true)
!2891 = !DIEnumerator(name: "CODE_FOR_movtf", value: 1877, isUnsigned: true)
!2892 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2", value: 1887, isUnsigned: true)
!2893 = !DIEnumerator(name: "CODE_FOR_zero_extendqihi2", value: 1889, isUnsigned: true)
!2894 = !DIEnumerator(name: "CODE_FOR_zero_extendqisi2", value: 1893, isUnsigned: true)
!2895 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2", value: 1897, isUnsigned: true)
!2896 = !DIEnumerator(name: "CODE_FOR_extendsidi2", value: 1900, isUnsigned: true)
!2897 = !DIEnumerator(name: "CODE_FOR_extendsfdf2", value: 1907, isUnsigned: true)
!2898 = !DIEnumerator(name: "CODE_FOR_extendsfxf2", value: 1909, isUnsigned: true)
!2899 = !DIEnumerator(name: "CODE_FOR_extenddfxf2", value: 1910, isUnsigned: true)
!2900 = !DIEnumerator(name: "CODE_FOR_truncdfsf2", value: 1911, isUnsigned: true)
!2901 = !DIEnumerator(name: "CODE_FOR_truncdfsf2_with_temp", value: 1913, isUnsigned: true)
!2902 = !DIEnumerator(name: "CODE_FOR_truncxfsf2", value: 1915, isUnsigned: true)
!2903 = !DIEnumerator(name: "CODE_FOR_truncxfdf2", value: 1916, isUnsigned: true)
!2904 = !DIEnumerator(name: "CODE_FOR_fix_truncxfdi2", value: 1921, isUnsigned: true)
!2905 = !DIEnumerator(name: "CODE_FOR_fix_truncsfdi2", value: 1922, isUnsigned: true)
!2906 = !DIEnumerator(name: "CODE_FOR_fix_truncdfdi2", value: 1923, isUnsigned: true)
!2907 = !DIEnumerator(name: "CODE_FOR_fix_truncxfsi2", value: 1924, isUnsigned: true)
!2908 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi2", value: 1925, isUnsigned: true)
!2909 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi2", value: 1926, isUnsigned: true)
!2910 = !DIEnumerator(name: "CODE_FOR_fix_truncsfhi2", value: 1927, isUnsigned: true)
!2911 = !DIEnumerator(name: "CODE_FOR_fix_truncdfhi2", value: 1928, isUnsigned: true)
!2912 = !DIEnumerator(name: "CODE_FOR_fix_truncxfhi2", value: 1929, isUnsigned: true)
!2913 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfsi2", value: 1930, isUnsigned: true)
!2914 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfsi2", value: 1931, isUnsigned: true)
!2915 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfhi2", value: 1934, isUnsigned: true)
!2916 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfhi2", value: 1935, isUnsigned: true)
!2917 = !DIEnumerator(name: "CODE_FOR_floathisf2", value: 1962, isUnsigned: true)
!2918 = !DIEnumerator(name: "CODE_FOR_floathidf2", value: 1963, isUnsigned: true)
!2919 = !DIEnumerator(name: "CODE_FOR_floathixf2", value: 1964, isUnsigned: true)
!2920 = !DIEnumerator(name: "CODE_FOR_floatsisf2", value: 1974, isUnsigned: true)
!2921 = !DIEnumerator(name: "CODE_FOR_floatdisf2", value: 1975, isUnsigned: true)
!2922 = !DIEnumerator(name: "CODE_FOR_floatsidf2", value: 1976, isUnsigned: true)
!2923 = !DIEnumerator(name: "CODE_FOR_floatdidf2", value: 1977, isUnsigned: true)
!2924 = !DIEnumerator(name: "CODE_FOR_floatsixf2", value: 1978, isUnsigned: true)
!2925 = !DIEnumerator(name: "CODE_FOR_floatdixf2", value: 1979, isUnsigned: true)
!2926 = !DIEnumerator(name: "CODE_FOR_floatunssisf2", value: 2028, isUnsigned: true)
!2927 = !DIEnumerator(name: "CODE_FOR_floatunssidf2", value: 2029, isUnsigned: true)
!2928 = !DIEnumerator(name: "CODE_FOR_floatunssixf2", value: 2030, isUnsigned: true)
!2929 = !DIEnumerator(name: "CODE_FOR_addqi3", value: 2031, isUnsigned: true)
!2930 = !DIEnumerator(name: "CODE_FOR_addhi3", value: 2032, isUnsigned: true)
!2931 = !DIEnumerator(name: "CODE_FOR_addsi3", value: 2033, isUnsigned: true)
!2932 = !DIEnumerator(name: "CODE_FOR_adddi3", value: 2034, isUnsigned: true)
!2933 = !DIEnumerator(name: "CODE_FOR_subqi3", value: 2040, isUnsigned: true)
!2934 = !DIEnumerator(name: "CODE_FOR_subhi3", value: 2041, isUnsigned: true)
!2935 = !DIEnumerator(name: "CODE_FOR_subsi3", value: 2042, isUnsigned: true)
!2936 = !DIEnumerator(name: "CODE_FOR_subdi3", value: 2043, isUnsigned: true)
!2937 = !DIEnumerator(name: "CODE_FOR_addqi3_carry", value: 2045, isUnsigned: true)
!2938 = !DIEnumerator(name: "CODE_FOR_subqi3_carry", value: 2046, isUnsigned: true)
!2939 = !DIEnumerator(name: "CODE_FOR_addhi3_carry", value: 2047, isUnsigned: true)
!2940 = !DIEnumerator(name: "CODE_FOR_subhi3_carry", value: 2048, isUnsigned: true)
!2941 = !DIEnumerator(name: "CODE_FOR_addsi3_carry", value: 2049, isUnsigned: true)
!2942 = !DIEnumerator(name: "CODE_FOR_subsi3_carry", value: 2050, isUnsigned: true)
!2943 = !DIEnumerator(name: "CODE_FOR_adddi3_carry", value: 2051, isUnsigned: true)
!2944 = !DIEnumerator(name: "CODE_FOR_subdi3_carry", value: 2052, isUnsigned: true)
!2945 = !DIEnumerator(name: "CODE_FOR_addxf3", value: 2053, isUnsigned: true)
!2946 = !DIEnumerator(name: "CODE_FOR_subxf3", value: 2054, isUnsigned: true)
!2947 = !DIEnumerator(name: "CODE_FOR_addsf3", value: 2055, isUnsigned: true)
!2948 = !DIEnumerator(name: "CODE_FOR_subsf3", value: 2056, isUnsigned: true)
!2949 = !DIEnumerator(name: "CODE_FOR_adddf3", value: 2057, isUnsigned: true)
!2950 = !DIEnumerator(name: "CODE_FOR_subdf3", value: 2058, isUnsigned: true)
!2951 = !DIEnumerator(name: "CODE_FOR_mulhi3", value: 2059, isUnsigned: true)
!2952 = !DIEnumerator(name: "CODE_FOR_mulsi3", value: 2060, isUnsigned: true)
!2953 = !DIEnumerator(name: "CODE_FOR_mulqi3", value: 2061, isUnsigned: true)
!2954 = !DIEnumerator(name: "CODE_FOR_mulsidi3", value: 2062, isUnsigned: true)
!2955 = !DIEnumerator(name: "CODE_FOR_umulsidi3", value: 2063, isUnsigned: true)
!2956 = !DIEnumerator(name: "CODE_FOR_mulqihi3", value: 2064, isUnsigned: true)
!2957 = !DIEnumerator(name: "CODE_FOR_umulqihi3", value: 2065, isUnsigned: true)
!2958 = !DIEnumerator(name: "CODE_FOR_smulsi3_highpart", value: 2066, isUnsigned: true)
!2959 = !DIEnumerator(name: "CODE_FOR_umulsi3_highpart", value: 2067, isUnsigned: true)
!2960 = !DIEnumerator(name: "CODE_FOR_mulxf3", value: 2068, isUnsigned: true)
!2961 = !DIEnumerator(name: "CODE_FOR_mulsf3", value: 2069, isUnsigned: true)
!2962 = !DIEnumerator(name: "CODE_FOR_muldf3", value: 2070, isUnsigned: true)
!2963 = !DIEnumerator(name: "CODE_FOR_divxf3", value: 2071, isUnsigned: true)
!2964 = !DIEnumerator(name: "CODE_FOR_divdf3", value: 2072, isUnsigned: true)
!2965 = !DIEnumerator(name: "CODE_FOR_divsf3", value: 2073, isUnsigned: true)
!2966 = !DIEnumerator(name: "CODE_FOR_divmodhi4", value: 2074, isUnsigned: true)
!2967 = !DIEnumerator(name: "CODE_FOR_divmodsi4", value: 2075, isUnsigned: true)
!2968 = !DIEnumerator(name: "CODE_FOR_udivmodhi4", value: 2078, isUnsigned: true)
!2969 = !DIEnumerator(name: "CODE_FOR_udivmodsi4", value: 2079, isUnsigned: true)
!2970 = !DIEnumerator(name: "CODE_FOR_testsi_ccno_1", value: 2082, isUnsigned: true)
!2971 = !DIEnumerator(name: "CODE_FOR_testqi_ccz_1", value: 2083, isUnsigned: true)
!2972 = !DIEnumerator(name: "CODE_FOR_testqi_ext_ccno_0", value: 2084, isUnsigned: true)
!2973 = !DIEnumerator(name: "CODE_FOR_andqi3", value: 2088, isUnsigned: true)
!2974 = !DIEnumerator(name: "CODE_FOR_andhi3", value: 2089, isUnsigned: true)
!2975 = !DIEnumerator(name: "CODE_FOR_andsi3", value: 2090, isUnsigned: true)
!2976 = !DIEnumerator(name: "CODE_FOR_iorqi3", value: 2096, isUnsigned: true)
!2977 = !DIEnumerator(name: "CODE_FOR_xorqi3", value: 2097, isUnsigned: true)
!2978 = !DIEnumerator(name: "CODE_FOR_iorhi3", value: 2098, isUnsigned: true)
!2979 = !DIEnumerator(name: "CODE_FOR_xorhi3", value: 2099, isUnsigned: true)
!2980 = !DIEnumerator(name: "CODE_FOR_iorsi3", value: 2100, isUnsigned: true)
!2981 = !DIEnumerator(name: "CODE_FOR_xorsi3", value: 2101, isUnsigned: true)
!2982 = !DIEnumerator(name: "CODE_FOR_xorqi_cc_ext_1", value: 2106, isUnsigned: true)
!2983 = !DIEnumerator(name: "CODE_FOR_negqi2", value: 2107, isUnsigned: true)
!2984 = !DIEnumerator(name: "CODE_FOR_neghi2", value: 2108, isUnsigned: true)
!2985 = !DIEnumerator(name: "CODE_FOR_negsi2", value: 2109, isUnsigned: true)
!2986 = !DIEnumerator(name: "CODE_FOR_negdi2", value: 2110, isUnsigned: true)
!2987 = !DIEnumerator(name: "CODE_FOR_abssf2", value: 2112, isUnsigned: true)
!2988 = !DIEnumerator(name: "CODE_FOR_negsf2", value: 2113, isUnsigned: true)
!2989 = !DIEnumerator(name: "CODE_FOR_absdf2", value: 2114, isUnsigned: true)
!2990 = !DIEnumerator(name: "CODE_FOR_negdf2", value: 2115, isUnsigned: true)
!2991 = !DIEnumerator(name: "CODE_FOR_absxf2", value: 2116, isUnsigned: true)
!2992 = !DIEnumerator(name: "CODE_FOR_negxf2", value: 2117, isUnsigned: true)
!2993 = !DIEnumerator(name: "CODE_FOR_abstf2", value: 2118, isUnsigned: true)
!2994 = !DIEnumerator(name: "CODE_FOR_negtf2", value: 2119, isUnsigned: true)
!2995 = !DIEnumerator(name: "CODE_FOR_copysignsf3", value: 2125, isUnsigned: true)
!2996 = !DIEnumerator(name: "CODE_FOR_copysigndf3", value: 2126, isUnsigned: true)
!2997 = !DIEnumerator(name: "CODE_FOR_copysigntf3", value: 2127, isUnsigned: true)
!2998 = !DIEnumerator(name: "CODE_FOR_one_cmplqi2", value: 2134, isUnsigned: true)
!2999 = !DIEnumerator(name: "CODE_FOR_one_cmplhi2", value: 2135, isUnsigned: true)
!3000 = !DIEnumerator(name: "CODE_FOR_one_cmplsi2", value: 2136, isUnsigned: true)
!3001 = !DIEnumerator(name: "CODE_FOR_ashldi3", value: 2142, isUnsigned: true)
!3002 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_1", value: 2145, isUnsigned: true)
!3003 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_2", value: 2146, isUnsigned: true)
!3004 = !DIEnumerator(name: "CODE_FOR_ashlsi3", value: 2147, isUnsigned: true)
!3005 = !DIEnumerator(name: "CODE_FOR_ashlhi3", value: 2150, isUnsigned: true)
!3006 = !DIEnumerator(name: "CODE_FOR_ashlqi3", value: 2151, isUnsigned: true)
!3007 = !DIEnumerator(name: "CODE_FOR_ashrdi3", value: 2152, isUnsigned: true)
!3008 = !DIEnumerator(name: "CODE_FOR_x86_64_shift_adj_3", value: 2153, isUnsigned: true)
!3009 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_3", value: 2156, isUnsigned: true)
!3010 = !DIEnumerator(name: "CODE_FOR_ashrsi3_31", value: 2157, isUnsigned: true)
!3011 = !DIEnumerator(name: "CODE_FOR_ashrsi3", value: 2158, isUnsigned: true)
!3012 = !DIEnumerator(name: "CODE_FOR_ashrhi3", value: 2159, isUnsigned: true)
!3013 = !DIEnumerator(name: "CODE_FOR_ashrqi3", value: 2160, isUnsigned: true)
!3014 = !DIEnumerator(name: "CODE_FOR_lshrdi3", value: 2161, isUnsigned: true)
!3015 = !DIEnumerator(name: "CODE_FOR_lshrsi3", value: 2164, isUnsigned: true)
!3016 = !DIEnumerator(name: "CODE_FOR_lshrhi3", value: 2165, isUnsigned: true)
!3017 = !DIEnumerator(name: "CODE_FOR_lshrqi3", value: 2166, isUnsigned: true)
!3018 = !DIEnumerator(name: "CODE_FOR_rotldi3", value: 2167, isUnsigned: true)
!3019 = !DIEnumerator(name: "CODE_FOR_rotlsi3", value: 2169, isUnsigned: true)
!3020 = !DIEnumerator(name: "CODE_FOR_rotlhi3", value: 2170, isUnsigned: true)
!3021 = !DIEnumerator(name: "CODE_FOR_rotlqi3", value: 2172, isUnsigned: true)
!3022 = !DIEnumerator(name: "CODE_FOR_rotrdi3", value: 2173, isUnsigned: true)
!3023 = !DIEnumerator(name: "CODE_FOR_rotrsi3", value: 2175, isUnsigned: true)
!3024 = !DIEnumerator(name: "CODE_FOR_rotrhi3", value: 2176, isUnsigned: true)
!3025 = !DIEnumerator(name: "CODE_FOR_rotrqi3", value: 2178, isUnsigned: true)
!3026 = !DIEnumerator(name: "CODE_FOR_extv", value: 2179, isUnsigned: true)
!3027 = !DIEnumerator(name: "CODE_FOR_extzv", value: 2180, isUnsigned: true)
!3028 = !DIEnumerator(name: "CODE_FOR_insv", value: 2181, isUnsigned: true)
!3029 = !DIEnumerator(name: "CODE_FOR_indirect_jump", value: 2200, isUnsigned: true)
!3030 = !DIEnumerator(name: "CODE_FOR_tablejump", value: 2201, isUnsigned: true)
!3031 = !DIEnumerator(name: "CODE_FOR_call_pop", value: 2204, isUnsigned: true)
!3032 = !DIEnumerator(name: "CODE_FOR_call", value: 2205, isUnsigned: true)
!3033 = !DIEnumerator(name: "CODE_FOR_sibcall", value: 2206, isUnsigned: true)
!3034 = !DIEnumerator(name: "CODE_FOR_call_value_pop", value: 2207, isUnsigned: true)
!3035 = !DIEnumerator(name: "CODE_FOR_call_value", value: 2208, isUnsigned: true)
!3036 = !DIEnumerator(name: "CODE_FOR_sibcall_value", value: 2209, isUnsigned: true)
!3037 = !DIEnumerator(name: "CODE_FOR_untyped_call", value: 2210, isUnsigned: true)
!3038 = !DIEnumerator(name: "CODE_FOR_memory_blockage", value: 2211, isUnsigned: true)
!3039 = !DIEnumerator(name: "CODE_FOR_return", value: 2212, isUnsigned: true)
!3040 = !DIEnumerator(name: "CODE_FOR_prologue", value: 2213, isUnsigned: true)
!3041 = !DIEnumerator(name: "CODE_FOR_epilogue", value: 2214, isUnsigned: true)
!3042 = !DIEnumerator(name: "CODE_FOR_sibcall_epilogue", value: 2215, isUnsigned: true)
!3043 = !DIEnumerator(name: "CODE_FOR_eh_return", value: 2216, isUnsigned: true)
!3044 = !DIEnumerator(name: "CODE_FOR_ffssi2", value: 2218, isUnsigned: true)
!3045 = !DIEnumerator(name: "CODE_FOR_ffs_cmove", value: 2219, isUnsigned: true)
!3046 = !DIEnumerator(name: "CODE_FOR_clzsi2", value: 2221, isUnsigned: true)
!3047 = !DIEnumerator(name: "CODE_FOR_bswapsi2", value: 2222, isUnsigned: true)
!3048 = !DIEnumerator(name: "CODE_FOR_clzhi2", value: 2223, isUnsigned: true)
!3049 = !DIEnumerator(name: "CODE_FOR_paritydi2", value: 2224, isUnsigned: true)
!3050 = !DIEnumerator(name: "CODE_FOR_paritysi2", value: 2226, isUnsigned: true)
!3051 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_32", value: 2228, isUnsigned: true)
!3052 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_64", value: 2229, isUnsigned: true)
!3053 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_32", value: 2230, isUnsigned: true)
!3054 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_64", value: 2231, isUnsigned: true)
!3055 = !DIEnumerator(name: "CODE_FOR_tls_dynamic_gnu2_32", value: 2233, isUnsigned: true)
!3056 = !DIEnumerator(name: "CODE_FOR_rsqrtsf2", value: 2240, isUnsigned: true)
!3057 = !DIEnumerator(name: "CODE_FOR_sqrtsf2", value: 2241, isUnsigned: true)
!3058 = !DIEnumerator(name: "CODE_FOR_sqrtdf2", value: 2242, isUnsigned: true)
!3059 = !DIEnumerator(name: "CODE_FOR_fmodxf3", value: 2243, isUnsigned: true)
!3060 = !DIEnumerator(name: "CODE_FOR_fmodsf3", value: 2244, isUnsigned: true)
!3061 = !DIEnumerator(name: "CODE_FOR_fmoddf3", value: 2245, isUnsigned: true)
!3062 = !DIEnumerator(name: "CODE_FOR_remainderxf3", value: 2246, isUnsigned: true)
!3063 = !DIEnumerator(name: "CODE_FOR_remaindersf3", value: 2247, isUnsigned: true)
!3064 = !DIEnumerator(name: "CODE_FOR_remainderdf3", value: 2248, isUnsigned: true)
!3065 = !DIEnumerator(name: "CODE_FOR_sincossf3", value: 2255, isUnsigned: true)
!3066 = !DIEnumerator(name: "CODE_FOR_sincosdf3", value: 2256, isUnsigned: true)
!3067 = !DIEnumerator(name: "CODE_FOR_tanxf2", value: 2257, isUnsigned: true)
!3068 = !DIEnumerator(name: "CODE_FOR_tansf2", value: 2258, isUnsigned: true)
!3069 = !DIEnumerator(name: "CODE_FOR_tandf2", value: 2259, isUnsigned: true)
!3070 = !DIEnumerator(name: "CODE_FOR_atan2xf3", value: 2260, isUnsigned: true)
!3071 = !DIEnumerator(name: "CODE_FOR_atan2sf3", value: 2261, isUnsigned: true)
!3072 = !DIEnumerator(name: "CODE_FOR_atan2df3", value: 2262, isUnsigned: true)
!3073 = !DIEnumerator(name: "CODE_FOR_atanxf2", value: 2263, isUnsigned: true)
!3074 = !DIEnumerator(name: "CODE_FOR_atansf2", value: 2264, isUnsigned: true)
!3075 = !DIEnumerator(name: "CODE_FOR_atandf2", value: 2265, isUnsigned: true)
!3076 = !DIEnumerator(name: "CODE_FOR_asinxf2", value: 2266, isUnsigned: true)
!3077 = !DIEnumerator(name: "CODE_FOR_asinsf2", value: 2267, isUnsigned: true)
!3078 = !DIEnumerator(name: "CODE_FOR_asindf2", value: 2268, isUnsigned: true)
!3079 = !DIEnumerator(name: "CODE_FOR_acosxf2", value: 2269, isUnsigned: true)
!3080 = !DIEnumerator(name: "CODE_FOR_acossf2", value: 2270, isUnsigned: true)
!3081 = !DIEnumerator(name: "CODE_FOR_acosdf2", value: 2271, isUnsigned: true)
!3082 = !DIEnumerator(name: "CODE_FOR_logxf2", value: 2272, isUnsigned: true)
!3083 = !DIEnumerator(name: "CODE_FOR_logsf2", value: 2273, isUnsigned: true)
!3084 = !DIEnumerator(name: "CODE_FOR_logdf2", value: 2274, isUnsigned: true)
!3085 = !DIEnumerator(name: "CODE_FOR_log10xf2", value: 2275, isUnsigned: true)
!3086 = !DIEnumerator(name: "CODE_FOR_log10sf2", value: 2276, isUnsigned: true)
!3087 = !DIEnumerator(name: "CODE_FOR_log10df2", value: 2277, isUnsigned: true)
!3088 = !DIEnumerator(name: "CODE_FOR_log2xf2", value: 2278, isUnsigned: true)
!3089 = !DIEnumerator(name: "CODE_FOR_log2sf2", value: 2279, isUnsigned: true)
!3090 = !DIEnumerator(name: "CODE_FOR_log2df2", value: 2280, isUnsigned: true)
!3091 = !DIEnumerator(name: "CODE_FOR_log1pxf2", value: 2281, isUnsigned: true)
!3092 = !DIEnumerator(name: "CODE_FOR_log1psf2", value: 2282, isUnsigned: true)
!3093 = !DIEnumerator(name: "CODE_FOR_log1pdf2", value: 2283, isUnsigned: true)
!3094 = !DIEnumerator(name: "CODE_FOR_logbxf2", value: 2284, isUnsigned: true)
!3095 = !DIEnumerator(name: "CODE_FOR_logbsf2", value: 2285, isUnsigned: true)
!3096 = !DIEnumerator(name: "CODE_FOR_logbdf2", value: 2286, isUnsigned: true)
!3097 = !DIEnumerator(name: "CODE_FOR_ilogbxf2", value: 2287, isUnsigned: true)
!3098 = !DIEnumerator(name: "CODE_FOR_ilogbsf2", value: 2288, isUnsigned: true)
!3099 = !DIEnumerator(name: "CODE_FOR_ilogbdf2", value: 2289, isUnsigned: true)
!3100 = !DIEnumerator(name: "CODE_FOR_expNcorexf3", value: 2290, isUnsigned: true)
!3101 = !DIEnumerator(name: "CODE_FOR_expxf2", value: 2291, isUnsigned: true)
!3102 = !DIEnumerator(name: "CODE_FOR_expsf2", value: 2292, isUnsigned: true)
!3103 = !DIEnumerator(name: "CODE_FOR_expdf2", value: 2293, isUnsigned: true)
!3104 = !DIEnumerator(name: "CODE_FOR_exp10xf2", value: 2294, isUnsigned: true)
!3105 = !DIEnumerator(name: "CODE_FOR_exp10sf2", value: 2295, isUnsigned: true)
!3106 = !DIEnumerator(name: "CODE_FOR_exp10df2", value: 2296, isUnsigned: true)
!3107 = !DIEnumerator(name: "CODE_FOR_exp2xf2", value: 2297, isUnsigned: true)
!3108 = !DIEnumerator(name: "CODE_FOR_exp2sf2", value: 2298, isUnsigned: true)
!3109 = !DIEnumerator(name: "CODE_FOR_exp2df2", value: 2299, isUnsigned: true)
!3110 = !DIEnumerator(name: "CODE_FOR_expm1xf2", value: 2300, isUnsigned: true)
!3111 = !DIEnumerator(name: "CODE_FOR_expm1sf2", value: 2301, isUnsigned: true)
!3112 = !DIEnumerator(name: "CODE_FOR_expm1df2", value: 2302, isUnsigned: true)
!3113 = !DIEnumerator(name: "CODE_FOR_ldexpxf3", value: 2303, isUnsigned: true)
!3114 = !DIEnumerator(name: "CODE_FOR_ldexpsf3", value: 2304, isUnsigned: true)
!3115 = !DIEnumerator(name: "CODE_FOR_ldexpdf3", value: 2305, isUnsigned: true)
!3116 = !DIEnumerator(name: "CODE_FOR_scalbxf3", value: 2306, isUnsigned: true)
!3117 = !DIEnumerator(name: "CODE_FOR_scalbsf3", value: 2307, isUnsigned: true)
!3118 = !DIEnumerator(name: "CODE_FOR_scalbdf3", value: 2308, isUnsigned: true)
!3119 = !DIEnumerator(name: "CODE_FOR_significandxf2", value: 2309, isUnsigned: true)
!3120 = !DIEnumerator(name: "CODE_FOR_significandsf2", value: 2310, isUnsigned: true)
!3121 = !DIEnumerator(name: "CODE_FOR_significanddf2", value: 2311, isUnsigned: true)
!3122 = !DIEnumerator(name: "CODE_FOR_rintsf2", value: 2312, isUnsigned: true)
!3123 = !DIEnumerator(name: "CODE_FOR_rintdf2", value: 2313, isUnsigned: true)
!3124 = !DIEnumerator(name: "CODE_FOR_roundsf2", value: 2314, isUnsigned: true)
!3125 = !DIEnumerator(name: "CODE_FOR_rounddf2", value: 2315, isUnsigned: true)
!3126 = !DIEnumerator(name: "CODE_FOR_lrintxfhi2", value: 2325, isUnsigned: true)
!3127 = !DIEnumerator(name: "CODE_FOR_lrintxfsi2", value: 2326, isUnsigned: true)
!3128 = !DIEnumerator(name: "CODE_FOR_lrintxfdi2", value: 2327, isUnsigned: true)
!3129 = !DIEnumerator(name: "CODE_FOR_lrintsfsi2", value: 2328, isUnsigned: true)
!3130 = !DIEnumerator(name: "CODE_FOR_lrintdfsi2", value: 2329, isUnsigned: true)
!3131 = !DIEnumerator(name: "CODE_FOR_lroundsfsi2", value: 2330, isUnsigned: true)
!3132 = !DIEnumerator(name: "CODE_FOR_lrounddfsi2", value: 2331, isUnsigned: true)
!3133 = !DIEnumerator(name: "CODE_FOR_floorxf2", value: 2333, isUnsigned: true)
!3134 = !DIEnumerator(name: "CODE_FOR_floorsf2", value: 2334, isUnsigned: true)
!3135 = !DIEnumerator(name: "CODE_FOR_floordf2", value: 2335, isUnsigned: true)
!3136 = !DIEnumerator(name: "CODE_FOR_lfloorxfhi2", value: 2345, isUnsigned: true)
!3137 = !DIEnumerator(name: "CODE_FOR_lfloorxfsi2", value: 2346, isUnsigned: true)
!3138 = !DIEnumerator(name: "CODE_FOR_lfloorxfdi2", value: 2347, isUnsigned: true)
!3139 = !DIEnumerator(name: "CODE_FOR_lfloorsfsi2", value: 2348, isUnsigned: true)
!3140 = !DIEnumerator(name: "CODE_FOR_lfloordfsi2", value: 2349, isUnsigned: true)
!3141 = !DIEnumerator(name: "CODE_FOR_ceilxf2", value: 2351, isUnsigned: true)
!3142 = !DIEnumerator(name: "CODE_FOR_ceilsf2", value: 2352, isUnsigned: true)
!3143 = !DIEnumerator(name: "CODE_FOR_ceildf2", value: 2353, isUnsigned: true)
!3144 = !DIEnumerator(name: "CODE_FOR_lceilxfhi2", value: 2363, isUnsigned: true)
!3145 = !DIEnumerator(name: "CODE_FOR_lceilxfsi2", value: 2364, isUnsigned: true)
!3146 = !DIEnumerator(name: "CODE_FOR_lceilxfdi2", value: 2365, isUnsigned: true)
!3147 = !DIEnumerator(name: "CODE_FOR_lceilsfsi2", value: 2366, isUnsigned: true)
!3148 = !DIEnumerator(name: "CODE_FOR_lceildfsi2", value: 2367, isUnsigned: true)
!3149 = !DIEnumerator(name: "CODE_FOR_btruncxf2", value: 2369, isUnsigned: true)
!3150 = !DIEnumerator(name: "CODE_FOR_btruncsf2", value: 2370, isUnsigned: true)
!3151 = !DIEnumerator(name: "CODE_FOR_btruncdf2", value: 2371, isUnsigned: true)
!3152 = !DIEnumerator(name: "CODE_FOR_nearbyintxf2", value: 2373, isUnsigned: true)
!3153 = !DIEnumerator(name: "CODE_FOR_nearbyintsf2", value: 2374, isUnsigned: true)
!3154 = !DIEnumerator(name: "CODE_FOR_nearbyintdf2", value: 2375, isUnsigned: true)
!3155 = !DIEnumerator(name: "CODE_FOR_isinfxf2", value: 2378, isUnsigned: true)
!3156 = !DIEnumerator(name: "CODE_FOR_isinfsf2", value: 2379, isUnsigned: true)
!3157 = !DIEnumerator(name: "CODE_FOR_isinfdf2", value: 2380, isUnsigned: true)
!3158 = !DIEnumerator(name: "CODE_FOR_signbitsf2", value: 2381, isUnsigned: true)
!3159 = !DIEnumerator(name: "CODE_FOR_signbitdf2", value: 2382, isUnsigned: true)
!3160 = !DIEnumerator(name: "CODE_FOR_signbitxf2", value: 2383, isUnsigned: true)
!3161 = !DIEnumerator(name: "CODE_FOR_movmemsi", value: 2384, isUnsigned: true)
!3162 = !DIEnumerator(name: "CODE_FOR_strmov", value: 2385, isUnsigned: true)
!3163 = !DIEnumerator(name: "CODE_FOR_strmov_singleop", value: 2386, isUnsigned: true)
!3164 = !DIEnumerator(name: "CODE_FOR_rep_mov", value: 2387, isUnsigned: true)
!3165 = !DIEnumerator(name: "CODE_FOR_setmemsi", value: 2388, isUnsigned: true)
!3166 = !DIEnumerator(name: "CODE_FOR_strset", value: 2389, isUnsigned: true)
!3167 = !DIEnumerator(name: "CODE_FOR_strset_singleop", value: 2390, isUnsigned: true)
!3168 = !DIEnumerator(name: "CODE_FOR_rep_stos", value: 2391, isUnsigned: true)
!3169 = !DIEnumerator(name: "CODE_FOR_cmpstrnsi", value: 2392, isUnsigned: true)
!3170 = !DIEnumerator(name: "CODE_FOR_cmpintqi", value: 2393, isUnsigned: true)
!3171 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_nz_1", value: 2394, isUnsigned: true)
!3172 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_1", value: 2395, isUnsigned: true)
!3173 = !DIEnumerator(name: "CODE_FOR_strlensi", value: 2396, isUnsigned: true)
!3174 = !DIEnumerator(name: "CODE_FOR_strlendi", value: 2397, isUnsigned: true)
!3175 = !DIEnumerator(name: "CODE_FOR_strlenqi_1", value: 2398, isUnsigned: true)
!3176 = !DIEnumerator(name: "CODE_FOR_movqicc", value: 2401, isUnsigned: true)
!3177 = !DIEnumerator(name: "CODE_FOR_movhicc", value: 2402, isUnsigned: true)
!3178 = !DIEnumerator(name: "CODE_FOR_movsicc", value: 2403, isUnsigned: true)
!3179 = !DIEnumerator(name: "CODE_FOR_x86_movsicc_0_m1", value: 2404, isUnsigned: true)
!3180 = !DIEnumerator(name: "CODE_FOR_movsfcc", value: 2406, isUnsigned: true)
!3181 = !DIEnumerator(name: "CODE_FOR_movdfcc", value: 2407, isUnsigned: true)
!3182 = !DIEnumerator(name: "CODE_FOR_movxfcc", value: 2408, isUnsigned: true)
!3183 = !DIEnumerator(name: "CODE_FOR_addqicc", value: 2411, isUnsigned: true)
!3184 = !DIEnumerator(name: "CODE_FOR_addhicc", value: 2412, isUnsigned: true)
!3185 = !DIEnumerator(name: "CODE_FOR_addsicc", value: 2413, isUnsigned: true)
!3186 = !DIEnumerator(name: "CODE_FOR_allocate_stack", value: 2414, isUnsigned: true)
!3187 = !DIEnumerator(name: "CODE_FOR_probe_stack", value: 2415, isUnsigned: true)
!3188 = !DIEnumerator(name: "CODE_FOR_builtin_setjmp_receiver", value: 2416, isUnsigned: true)
!3189 = !DIEnumerator(name: "CODE_FOR_prefetch", value: 2486, isUnsigned: true)
!3190 = !DIEnumerator(name: "CODE_FOR_stack_protect_set", value: 2487, isUnsigned: true)
!3191 = !DIEnumerator(name: "CODE_FOR_stack_protect_test", value: 2488, isUnsigned: true)
!3192 = !DIEnumerator(name: "CODE_FOR_rdpmc", value: 2489, isUnsigned: true)
!3193 = !DIEnumerator(name: "CODE_FOR_rdtsc", value: 2490, isUnsigned: true)
!3194 = !DIEnumerator(name: "CODE_FOR_rdtscp", value: 2491, isUnsigned: true)
!3195 = !DIEnumerator(name: "CODE_FOR_lwp_llwpcb", value: 2492, isUnsigned: true)
!3196 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcb", value: 2493, isUnsigned: true)
!3197 = !DIEnumerator(name: "CODE_FOR_lwp_lwpvalsi3", value: 2494, isUnsigned: true)
!3198 = !DIEnumerator(name: "CODE_FOR_lwp_lwpinssi3", value: 2495, isUnsigned: true)
!3199 = !DIEnumerator(name: "CODE_FOR_movv8qi", value: 2496, isUnsigned: true)
!3200 = !DIEnumerator(name: "CODE_FOR_movv4hi", value: 2497, isUnsigned: true)
!3201 = !DIEnumerator(name: "CODE_FOR_movv2si", value: 2498, isUnsigned: true)
!3202 = !DIEnumerator(name: "CODE_FOR_movv1di", value: 2499, isUnsigned: true)
!3203 = !DIEnumerator(name: "CODE_FOR_movv2sf", value: 2500, isUnsigned: true)
!3204 = !DIEnumerator(name: "CODE_FOR_pushv8qi1", value: 2506, isUnsigned: true)
!3205 = !DIEnumerator(name: "CODE_FOR_pushv4hi1", value: 2507, isUnsigned: true)
!3206 = !DIEnumerator(name: "CODE_FOR_pushv2si1", value: 2508, isUnsigned: true)
!3207 = !DIEnumerator(name: "CODE_FOR_pushv1di1", value: 2509, isUnsigned: true)
!3208 = !DIEnumerator(name: "CODE_FOR_pushv2sf1", value: 2510, isUnsigned: true)
!3209 = !DIEnumerator(name: "CODE_FOR_movmisalignv8qi", value: 2511, isUnsigned: true)
!3210 = !DIEnumerator(name: "CODE_FOR_movmisalignv4hi", value: 2512, isUnsigned: true)
!3211 = !DIEnumerator(name: "CODE_FOR_movmisalignv2si", value: 2513, isUnsigned: true)
!3212 = !DIEnumerator(name: "CODE_FOR_movmisalignv1di", value: 2514, isUnsigned: true)
!3213 = !DIEnumerator(name: "CODE_FOR_movmisalignv2sf", value: 2515, isUnsigned: true)
!3214 = !DIEnumerator(name: "CODE_FOR_mmx_addv2sf3", value: 2516, isUnsigned: true)
!3215 = !DIEnumerator(name: "CODE_FOR_mmx_subv2sf3", value: 2517, isUnsigned: true)
!3216 = !DIEnumerator(name: "CODE_FOR_mmx_subrv2sf3", value: 2518, isUnsigned: true)
!3217 = !DIEnumerator(name: "CODE_FOR_mmx_mulv2sf3", value: 2519, isUnsigned: true)
!3218 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv2sf3", value: 2520, isUnsigned: true)
!3219 = !DIEnumerator(name: "CODE_FOR_mmx_sminv2sf3", value: 2521, isUnsigned: true)
!3220 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2sf3", value: 2522, isUnsigned: true)
!3221 = !DIEnumerator(name: "CODE_FOR_vec_setv2sf", value: 2523, isUnsigned: true)
!3222 = !DIEnumerator(name: "CODE_FOR_vec_extractv2sf", value: 2526, isUnsigned: true)
!3223 = !DIEnumerator(name: "CODE_FOR_vec_initv2sf", value: 2527, isUnsigned: true)
!3224 = !DIEnumerator(name: "CODE_FOR_mmx_addv8qi3", value: 2528, isUnsigned: true)
!3225 = !DIEnumerator(name: "CODE_FOR_mmx_subv8qi3", value: 2529, isUnsigned: true)
!3226 = !DIEnumerator(name: "CODE_FOR_mmx_addv4hi3", value: 2530, isUnsigned: true)
!3227 = !DIEnumerator(name: "CODE_FOR_mmx_subv4hi3", value: 2531, isUnsigned: true)
!3228 = !DIEnumerator(name: "CODE_FOR_mmx_addv2si3", value: 2532, isUnsigned: true)
!3229 = !DIEnumerator(name: "CODE_FOR_mmx_subv2si3", value: 2533, isUnsigned: true)
!3230 = !DIEnumerator(name: "CODE_FOR_mmx_addv1di3", value: 2534, isUnsigned: true)
!3231 = !DIEnumerator(name: "CODE_FOR_mmx_subv1di3", value: 2535, isUnsigned: true)
!3232 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv8qi3", value: 2536, isUnsigned: true)
!3233 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv8qi3", value: 2537, isUnsigned: true)
!3234 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv8qi3", value: 2538, isUnsigned: true)
!3235 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv8qi3", value: 2539, isUnsigned: true)
!3236 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv4hi3", value: 2540, isUnsigned: true)
!3237 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv4hi3", value: 2541, isUnsigned: true)
!3238 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv4hi3", value: 2542, isUnsigned: true)
!3239 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv4hi3", value: 2543, isUnsigned: true)
!3240 = !DIEnumerator(name: "CODE_FOR_mmx_mulv4hi3", value: 2544, isUnsigned: true)
!3241 = !DIEnumerator(name: "CODE_FOR_mmx_smulv4hi3_highpart", value: 2545, isUnsigned: true)
!3242 = !DIEnumerator(name: "CODE_FOR_mmx_umulv4hi3_highpart", value: 2546, isUnsigned: true)
!3243 = !DIEnumerator(name: "CODE_FOR_mmx_pmaddwd", value: 2547, isUnsigned: true)
!3244 = !DIEnumerator(name: "CODE_FOR_mmx_pmulhrwv4hi3", value: 2548, isUnsigned: true)
!3245 = !DIEnumerator(name: "CODE_FOR_sse2_umulv1siv1di3", value: 2549, isUnsigned: true)
!3246 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv4hi3", value: 2550, isUnsigned: true)
!3247 = !DIEnumerator(name: "CODE_FOR_mmx_sminv4hi3", value: 2551, isUnsigned: true)
!3248 = !DIEnumerator(name: "CODE_FOR_mmx_umaxv8qi3", value: 2552, isUnsigned: true)
!3249 = !DIEnumerator(name: "CODE_FOR_mmx_uminv8qi3", value: 2553, isUnsigned: true)
!3250 = !DIEnumerator(name: "CODE_FOR_mmx_eqv8qi3", value: 2554, isUnsigned: true)
!3251 = !DIEnumerator(name: "CODE_FOR_mmx_eqv4hi3", value: 2555, isUnsigned: true)
!3252 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2si3", value: 2556, isUnsigned: true)
!3253 = !DIEnumerator(name: "CODE_FOR_mmx_andv8qi3", value: 2557, isUnsigned: true)
!3254 = !DIEnumerator(name: "CODE_FOR_mmx_iorv8qi3", value: 2558, isUnsigned: true)
!3255 = !DIEnumerator(name: "CODE_FOR_mmx_xorv8qi3", value: 2559, isUnsigned: true)
!3256 = !DIEnumerator(name: "CODE_FOR_mmx_andv4hi3", value: 2560, isUnsigned: true)
!3257 = !DIEnumerator(name: "CODE_FOR_mmx_iorv4hi3", value: 2561, isUnsigned: true)
!3258 = !DIEnumerator(name: "CODE_FOR_mmx_xorv4hi3", value: 2562, isUnsigned: true)
!3259 = !DIEnumerator(name: "CODE_FOR_mmx_andv2si3", value: 2563, isUnsigned: true)
!3260 = !DIEnumerator(name: "CODE_FOR_mmx_iorv2si3", value: 2564, isUnsigned: true)
!3261 = !DIEnumerator(name: "CODE_FOR_mmx_xorv2si3", value: 2565, isUnsigned: true)
!3262 = !DIEnumerator(name: "CODE_FOR_mmx_pinsrw", value: 2566, isUnsigned: true)
!3263 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw", value: 2567, isUnsigned: true)
!3264 = !DIEnumerator(name: "CODE_FOR_vec_setv2si", value: 2568, isUnsigned: true)
!3265 = !DIEnumerator(name: "CODE_FOR_vec_extractv2si", value: 2571, isUnsigned: true)
!3266 = !DIEnumerator(name: "CODE_FOR_vec_initv2si", value: 2572, isUnsigned: true)
!3267 = !DIEnumerator(name: "CODE_FOR_vec_setv4hi", value: 2573, isUnsigned: true)
!3268 = !DIEnumerator(name: "CODE_FOR_vec_extractv4hi", value: 2574, isUnsigned: true)
!3269 = !DIEnumerator(name: "CODE_FOR_vec_initv4hi", value: 2575, isUnsigned: true)
!3270 = !DIEnumerator(name: "CODE_FOR_vec_setv8qi", value: 2576, isUnsigned: true)
!3271 = !DIEnumerator(name: "CODE_FOR_vec_extractv8qi", value: 2577, isUnsigned: true)
!3272 = !DIEnumerator(name: "CODE_FOR_vec_initv8qi", value: 2578, isUnsigned: true)
!3273 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv8qi3", value: 2579, isUnsigned: true)
!3274 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv4hi3", value: 2580, isUnsigned: true)
!3275 = !DIEnumerator(name: "CODE_FOR_mmx_maskmovq", value: 2581, isUnsigned: true)
!3276 = !DIEnumerator(name: "CODE_FOR_mmx_emms", value: 2582, isUnsigned: true)
!3277 = !DIEnumerator(name: "CODE_FOR_mmx_femms", value: 2583, isUnsigned: true)
!3278 = !DIEnumerator(name: "CODE_FOR_movv32qi", value: 2584, isUnsigned: true)
!3279 = !DIEnumerator(name: "CODE_FOR_movv16hi", value: 2585, isUnsigned: true)
!3280 = !DIEnumerator(name: "CODE_FOR_movv8si", value: 2586, isUnsigned: true)
!3281 = !DIEnumerator(name: "CODE_FOR_movv4di", value: 2587, isUnsigned: true)
!3282 = !DIEnumerator(name: "CODE_FOR_movv8sf", value: 2588, isUnsigned: true)
!3283 = !DIEnumerator(name: "CODE_FOR_movv4df", value: 2589, isUnsigned: true)
!3284 = !DIEnumerator(name: "CODE_FOR_movv16qi", value: 2590, isUnsigned: true)
!3285 = !DIEnumerator(name: "CODE_FOR_movv8hi", value: 2591, isUnsigned: true)
!3286 = !DIEnumerator(name: "CODE_FOR_movv4si", value: 2592, isUnsigned: true)
!3287 = !DIEnumerator(name: "CODE_FOR_movv2di", value: 2593, isUnsigned: true)
!3288 = !DIEnumerator(name: "CODE_FOR_movv1ti", value: 2594, isUnsigned: true)
!3289 = !DIEnumerator(name: "CODE_FOR_movv4sf", value: 2595, isUnsigned: true)
!3290 = !DIEnumerator(name: "CODE_FOR_movv2df", value: 2596, isUnsigned: true)
!3291 = !DIEnumerator(name: "CODE_FOR_pushv32qi1", value: 2600, isUnsigned: true)
!3292 = !DIEnumerator(name: "CODE_FOR_pushv16hi1", value: 2601, isUnsigned: true)
!3293 = !DIEnumerator(name: "CODE_FOR_pushv8si1", value: 2602, isUnsigned: true)
!3294 = !DIEnumerator(name: "CODE_FOR_pushv4di1", value: 2603, isUnsigned: true)
!3295 = !DIEnumerator(name: "CODE_FOR_pushv8sf1", value: 2604, isUnsigned: true)
!3296 = !DIEnumerator(name: "CODE_FOR_pushv4df1", value: 2605, isUnsigned: true)
!3297 = !DIEnumerator(name: "CODE_FOR_pushv16qi1", value: 2606, isUnsigned: true)
!3298 = !DIEnumerator(name: "CODE_FOR_pushv8hi1", value: 2607, isUnsigned: true)
!3299 = !DIEnumerator(name: "CODE_FOR_pushv4si1", value: 2608, isUnsigned: true)
!3300 = !DIEnumerator(name: "CODE_FOR_pushv2di1", value: 2609, isUnsigned: true)
!3301 = !DIEnumerator(name: "CODE_FOR_pushv1ti1", value: 2610, isUnsigned: true)
!3302 = !DIEnumerator(name: "CODE_FOR_pushv4sf1", value: 2611, isUnsigned: true)
!3303 = !DIEnumerator(name: "CODE_FOR_pushv2df1", value: 2612, isUnsigned: true)
!3304 = !DIEnumerator(name: "CODE_FOR_movmisalignv32qi", value: 2613, isUnsigned: true)
!3305 = !DIEnumerator(name: "CODE_FOR_movmisalignv16hi", value: 2614, isUnsigned: true)
!3306 = !DIEnumerator(name: "CODE_FOR_movmisalignv8si", value: 2615, isUnsigned: true)
!3307 = !DIEnumerator(name: "CODE_FOR_movmisalignv4di", value: 2616, isUnsigned: true)
!3308 = !DIEnumerator(name: "CODE_FOR_movmisalignv8sf", value: 2617, isUnsigned: true)
!3309 = !DIEnumerator(name: "CODE_FOR_movmisalignv4df", value: 2618, isUnsigned: true)
!3310 = !DIEnumerator(name: "CODE_FOR_movmisalignv16qi", value: 2619, isUnsigned: true)
!3311 = !DIEnumerator(name: "CODE_FOR_movmisalignv8hi", value: 2620, isUnsigned: true)
!3312 = !DIEnumerator(name: "CODE_FOR_movmisalignv4si", value: 2621, isUnsigned: true)
!3313 = !DIEnumerator(name: "CODE_FOR_movmisalignv2di", value: 2622, isUnsigned: true)
!3314 = !DIEnumerator(name: "CODE_FOR_movmisalignv1ti", value: 2623, isUnsigned: true)
!3315 = !DIEnumerator(name: "CODE_FOR_movmisalignv4sf", value: 2624, isUnsigned: true)
!3316 = !DIEnumerator(name: "CODE_FOR_movmisalignv2df", value: 2625, isUnsigned: true)
!3317 = !DIEnumerator(name: "CODE_FOR_storentv4sf", value: 2626, isUnsigned: true)
!3318 = !DIEnumerator(name: "CODE_FOR_storentv2df", value: 2627, isUnsigned: true)
!3319 = !DIEnumerator(name: "CODE_FOR_storentsf", value: 2628, isUnsigned: true)
!3320 = !DIEnumerator(name: "CODE_FOR_storentdf", value: 2629, isUnsigned: true)
!3321 = !DIEnumerator(name: "CODE_FOR_storentv2di", value: 2630, isUnsigned: true)
!3322 = !DIEnumerator(name: "CODE_FOR_storentsi", value: 2631, isUnsigned: true)
!3323 = !DIEnumerator(name: "CODE_FOR_absv4sf2", value: 2632, isUnsigned: true)
!3324 = !DIEnumerator(name: "CODE_FOR_negv4sf2", value: 2633, isUnsigned: true)
!3325 = !DIEnumerator(name: "CODE_FOR_absv2df2", value: 2634, isUnsigned: true)
!3326 = !DIEnumerator(name: "CODE_FOR_negv2df2", value: 2635, isUnsigned: true)
!3327 = !DIEnumerator(name: "CODE_FOR_addv8sf3", value: 2636, isUnsigned: true)
!3328 = !DIEnumerator(name: "CODE_FOR_subv8sf3", value: 2637, isUnsigned: true)
!3329 = !DIEnumerator(name: "CODE_FOR_addv4df3", value: 2638, isUnsigned: true)
!3330 = !DIEnumerator(name: "CODE_FOR_subv4df3", value: 2639, isUnsigned: true)
!3331 = !DIEnumerator(name: "CODE_FOR_addv4sf3", value: 2640, isUnsigned: true)
!3332 = !DIEnumerator(name: "CODE_FOR_subv4sf3", value: 2641, isUnsigned: true)
!3333 = !DIEnumerator(name: "CODE_FOR_addv2df3", value: 2642, isUnsigned: true)
!3334 = !DIEnumerator(name: "CODE_FOR_subv2df3", value: 2643, isUnsigned: true)
!3335 = !DIEnumerator(name: "CODE_FOR_mulv8sf3", value: 2644, isUnsigned: true)
!3336 = !DIEnumerator(name: "CODE_FOR_mulv4df3", value: 2645, isUnsigned: true)
!3337 = !DIEnumerator(name: "CODE_FOR_mulv4sf3", value: 2646, isUnsigned: true)
!3338 = !DIEnumerator(name: "CODE_FOR_mulv2df3", value: 2647, isUnsigned: true)
!3339 = !DIEnumerator(name: "CODE_FOR_divv8sf3", value: 2648, isUnsigned: true)
!3340 = !DIEnumerator(name: "CODE_FOR_divv4df3", value: 2649, isUnsigned: true)
!3341 = !DIEnumerator(name: "CODE_FOR_divv4sf3", value: 2650, isUnsigned: true)
!3342 = !DIEnumerator(name: "CODE_FOR_divv2df3", value: 2651, isUnsigned: true)
!3343 = !DIEnumerator(name: "CODE_FOR_sqrtv8sf2", value: 2652, isUnsigned: true)
!3344 = !DIEnumerator(name: "CODE_FOR_sqrtv4sf2", value: 2653, isUnsigned: true)
!3345 = !DIEnumerator(name: "CODE_FOR_rsqrtv8sf2", value: 2654, isUnsigned: true)
!3346 = !DIEnumerator(name: "CODE_FOR_rsqrtv4sf2", value: 2655, isUnsigned: true)
!3347 = !DIEnumerator(name: "CODE_FOR_smaxv8sf3", value: 2656, isUnsigned: true)
!3348 = !DIEnumerator(name: "CODE_FOR_sminv8sf3", value: 2657, isUnsigned: true)
!3349 = !DIEnumerator(name: "CODE_FOR_smaxv4df3", value: 2658, isUnsigned: true)
!3350 = !DIEnumerator(name: "CODE_FOR_sminv4df3", value: 2659, isUnsigned: true)
!3351 = !DIEnumerator(name: "CODE_FOR_smaxv4sf3", value: 2660, isUnsigned: true)
!3352 = !DIEnumerator(name: "CODE_FOR_sminv4sf3", value: 2661, isUnsigned: true)
!3353 = !DIEnumerator(name: "CODE_FOR_smaxv2df3", value: 2662, isUnsigned: true)
!3354 = !DIEnumerator(name: "CODE_FOR_sminv2df3", value: 2663, isUnsigned: true)
!3355 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v4sf", value: 2664, isUnsigned: true)
!3356 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v2df", value: 2665, isUnsigned: true)
!3357 = !DIEnumerator(name: "CODE_FOR_reduc_smax_v4sf", value: 2666, isUnsigned: true)
!3358 = !DIEnumerator(name: "CODE_FOR_reduc_smin_v4sf", value: 2667, isUnsigned: true)
!3359 = !DIEnumerator(name: "CODE_FOR_vcondv4sf", value: 2668, isUnsigned: true)
!3360 = !DIEnumerator(name: "CODE_FOR_vcondv2df", value: 2669, isUnsigned: true)
!3361 = !DIEnumerator(name: "CODE_FOR_andv8sf3", value: 2670, isUnsigned: true)
!3362 = !DIEnumerator(name: "CODE_FOR_iorv8sf3", value: 2671, isUnsigned: true)
!3363 = !DIEnumerator(name: "CODE_FOR_xorv8sf3", value: 2672, isUnsigned: true)
!3364 = !DIEnumerator(name: "CODE_FOR_andv4df3", value: 2673, isUnsigned: true)
!3365 = !DIEnumerator(name: "CODE_FOR_iorv4df3", value: 2674, isUnsigned: true)
!3366 = !DIEnumerator(name: "CODE_FOR_xorv4df3", value: 2675, isUnsigned: true)
!3367 = !DIEnumerator(name: "CODE_FOR_andv4sf3", value: 2676, isUnsigned: true)
!3368 = !DIEnumerator(name: "CODE_FOR_iorv4sf3", value: 2677, isUnsigned: true)
!3369 = !DIEnumerator(name: "CODE_FOR_xorv4sf3", value: 2678, isUnsigned: true)
!3370 = !DIEnumerator(name: "CODE_FOR_andv2df3", value: 2679, isUnsigned: true)
!3371 = !DIEnumerator(name: "CODE_FOR_iorv2df3", value: 2680, isUnsigned: true)
!3372 = !DIEnumerator(name: "CODE_FOR_xorv2df3", value: 2681, isUnsigned: true)
!3373 = !DIEnumerator(name: "CODE_FOR_copysignv4sf3", value: 2682, isUnsigned: true)
!3374 = !DIEnumerator(name: "CODE_FOR_copysignv2df3", value: 2683, isUnsigned: true)
!3375 = !DIEnumerator(name: "CODE_FOR_sse2_cvtudq2ps", value: 2684, isUnsigned: true)
!3376 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2dq", value: 2685, isUnsigned: true)
!3377 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2dq", value: 2686, isUnsigned: true)
!3378 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2ps", value: 2687, isUnsigned: true)
!3379 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4sf", value: 2688, isUnsigned: true)
!3380 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4sf", value: 2689, isUnsigned: true)
!3381 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v8hi", value: 2690, isUnsigned: true)
!3382 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v8hi", value: 2691, isUnsigned: true)
!3383 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v8hi", value: 2692, isUnsigned: true)
!3384 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v8hi", value: 2693, isUnsigned: true)
!3385 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v4si", value: 2694, isUnsigned: true)
!3386 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v4si", value: 2695, isUnsigned: true)
!3387 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v4si", value: 2696, isUnsigned: true)
!3388 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v4si", value: 2697, isUnsigned: true)
!3389 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2df", value: 2698, isUnsigned: true)
!3390 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_trunc_v2df", value: 2699, isUnsigned: true)
!3391 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_v2df", value: 2700, isUnsigned: true)
!3392 = !DIEnumerator(name: "CODE_FOR_sse_movhlps_exp", value: 2701, isUnsigned: true)
!3393 = !DIEnumerator(name: "CODE_FOR_sse_movlhps_exp", value: 2702, isUnsigned: true)
!3394 = !DIEnumerator(name: "CODE_FOR_avx_shufps256", value: 2703, isUnsigned: true)
!3395 = !DIEnumerator(name: "CODE_FOR_sse_shufps", value: 2704, isUnsigned: true)
!3396 = !DIEnumerator(name: "CODE_FOR_sse_loadhps_exp", value: 2705, isUnsigned: true)
!3397 = !DIEnumerator(name: "CODE_FOR_sse_loadlps_exp", value: 2706, isUnsigned: true)
!3398 = !DIEnumerator(name: "CODE_FOR_vec_dupv4sf", value: 2707, isUnsigned: true)
!3399 = !DIEnumerator(name: "CODE_FOR_vec_initv16qi", value: 2708, isUnsigned: true)
!3400 = !DIEnumerator(name: "CODE_FOR_vec_initv8hi", value: 2709, isUnsigned: true)
!3401 = !DIEnumerator(name: "CODE_FOR_vec_initv4si", value: 2710, isUnsigned: true)
!3402 = !DIEnumerator(name: "CODE_FOR_vec_initv2di", value: 2711, isUnsigned: true)
!3403 = !DIEnumerator(name: "CODE_FOR_vec_initv4sf", value: 2712, isUnsigned: true)
!3404 = !DIEnumerator(name: "CODE_FOR_vec_initv2df", value: 2713, isUnsigned: true)
!3405 = !DIEnumerator(name: "CODE_FOR_vec_setv16qi", value: 2715, isUnsigned: true)
!3406 = !DIEnumerator(name: "CODE_FOR_vec_setv8hi", value: 2716, isUnsigned: true)
!3407 = !DIEnumerator(name: "CODE_FOR_vec_setv4si", value: 2717, isUnsigned: true)
!3408 = !DIEnumerator(name: "CODE_FOR_vec_setv2di", value: 2718, isUnsigned: true)
!3409 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf", value: 2719, isUnsigned: true)
!3410 = !DIEnumerator(name: "CODE_FOR_vec_setv2df", value: 2720, isUnsigned: true)
!3411 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v32qi", value: 2722, isUnsigned: true)
!3412 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v16hi", value: 2723, isUnsigned: true)
!3413 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8si", value: 2724, isUnsigned: true)
!3414 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4di", value: 2725, isUnsigned: true)
!3415 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8sf", value: 2726, isUnsigned: true)
!3416 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4df", value: 2727, isUnsigned: true)
!3417 = !DIEnumerator(name: "CODE_FOR_vec_extractv16qi", value: 2729, isUnsigned: true)
!3418 = !DIEnumerator(name: "CODE_FOR_vec_extractv8hi", value: 2730, isUnsigned: true)
!3419 = !DIEnumerator(name: "CODE_FOR_vec_extractv4si", value: 2731, isUnsigned: true)
!3420 = !DIEnumerator(name: "CODE_FOR_vec_extractv2di", value: 2732, isUnsigned: true)
!3421 = !DIEnumerator(name: "CODE_FOR_vec_extractv4sf", value: 2733, isUnsigned: true)
!3422 = !DIEnumerator(name: "CODE_FOR_vec_extractv2df", value: 2734, isUnsigned: true)
!3423 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2df", value: 2735, isUnsigned: true)
!3424 = !DIEnumerator(name: "CODE_FOR_avx_movddup256", value: 2736, isUnsigned: true)
!3425 = !DIEnumerator(name: "CODE_FOR_avx_unpcklpd256", value: 2737, isUnsigned: true)
!3426 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2df", value: 2738, isUnsigned: true)
!3427 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256", value: 2741, isUnsigned: true)
!3428 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd", value: 2742, isUnsigned: true)
!3429 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4sf", value: 2743, isUnsigned: true)
!3430 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2df", value: 2744, isUnsigned: true)
!3431 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2di", value: 2745, isUnsigned: true)
!3432 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4si", value: 2746, isUnsigned: true)
!3433 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8hi", value: 2747, isUnsigned: true)
!3434 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv16qi", value: 2748, isUnsigned: true)
!3435 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4df", value: 2749, isUnsigned: true)
!3436 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8sf", value: 2750, isUnsigned: true)
!3437 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4sf", value: 2751, isUnsigned: true)
!3438 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2df", value: 2752, isUnsigned: true)
!3439 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2di", value: 2753, isUnsigned: true)
!3440 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4si", value: 2754, isUnsigned: true)
!3441 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8hi", value: 2755, isUnsigned: true)
!3442 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv16qi", value: 2756, isUnsigned: true)
!3443 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4df", value: 2757, isUnsigned: true)
!3444 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8sf", value: 2758, isUnsigned: true)
!3445 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd_exp", value: 2761, isUnsigned: true)
!3446 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd_exp", value: 2763, isUnsigned: true)
!3447 = !DIEnumerator(name: "CODE_FOR_negv16qi2", value: 2765, isUnsigned: true)
!3448 = !DIEnumerator(name: "CODE_FOR_negv8hi2", value: 2766, isUnsigned: true)
!3449 = !DIEnumerator(name: "CODE_FOR_negv4si2", value: 2767, isUnsigned: true)
!3450 = !DIEnumerator(name: "CODE_FOR_negv2di2", value: 2768, isUnsigned: true)
!3451 = !DIEnumerator(name: "CODE_FOR_addv16qi3", value: 2769, isUnsigned: true)
!3452 = !DIEnumerator(name: "CODE_FOR_subv16qi3", value: 2770, isUnsigned: true)
!3453 = !DIEnumerator(name: "CODE_FOR_addv8hi3", value: 2771, isUnsigned: true)
!3454 = !DIEnumerator(name: "CODE_FOR_subv8hi3", value: 2772, isUnsigned: true)
!3455 = !DIEnumerator(name: "CODE_FOR_addv4si3", value: 2773, isUnsigned: true)
!3456 = !DIEnumerator(name: "CODE_FOR_subv4si3", value: 2774, isUnsigned: true)
!3457 = !DIEnumerator(name: "CODE_FOR_addv2di3", value: 2775, isUnsigned: true)
!3458 = !DIEnumerator(name: "CODE_FOR_subv2di3", value: 2776, isUnsigned: true)
!3459 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv16qi3", value: 2777, isUnsigned: true)
!3460 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv16qi3", value: 2778, isUnsigned: true)
!3461 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv16qi3", value: 2779, isUnsigned: true)
!3462 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv16qi3", value: 2780, isUnsigned: true)
!3463 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv8hi3", value: 2781, isUnsigned: true)
!3464 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv8hi3", value: 2782, isUnsigned: true)
!3465 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv8hi3", value: 2783, isUnsigned: true)
!3466 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv8hi3", value: 2784, isUnsigned: true)
!3467 = !DIEnumerator(name: "CODE_FOR_mulv8hi3", value: 2786, isUnsigned: true)
!3468 = !DIEnumerator(name: "CODE_FOR_smulv8hi3_highpart", value: 2787, isUnsigned: true)
!3469 = !DIEnumerator(name: "CODE_FOR_umulv8hi3_highpart", value: 2788, isUnsigned: true)
!3470 = !DIEnumerator(name: "CODE_FOR_sse2_umulv2siv2di3", value: 2789, isUnsigned: true)
!3471 = !DIEnumerator(name: "CODE_FOR_sse4_1_mulv2siv2di3", value: 2790, isUnsigned: true)
!3472 = !DIEnumerator(name: "CODE_FOR_sse2_pmaddwd", value: 2791, isUnsigned: true)
!3473 = !DIEnumerator(name: "CODE_FOR_mulv4si3", value: 2792, isUnsigned: true)
!3474 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v8hi", value: 2795, isUnsigned: true)
!3475 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v8hi", value: 2796, isUnsigned: true)
!3476 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v8hi", value: 2797, isUnsigned: true)
!3477 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v8hi", value: 2798, isUnsigned: true)
!3478 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v4si", value: 2799, isUnsigned: true)
!3479 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v4si", value: 2800, isUnsigned: true)
!3480 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v4si", value: 2801, isUnsigned: true)
!3481 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v4si", value: 2802, isUnsigned: true)
!3482 = !DIEnumerator(name: "CODE_FOR_sdot_prodv8hi", value: 2803, isUnsigned: true)
!3483 = !DIEnumerator(name: "CODE_FOR_udot_prodv4si", value: 2804, isUnsigned: true)
!3484 = !DIEnumerator(name: "CODE_FOR_vec_shl_v16qi", value: 2805, isUnsigned: true)
!3485 = !DIEnumerator(name: "CODE_FOR_vec_shl_v8hi", value: 2806, isUnsigned: true)
!3486 = !DIEnumerator(name: "CODE_FOR_vec_shl_v4si", value: 2807, isUnsigned: true)
!3487 = !DIEnumerator(name: "CODE_FOR_vec_shl_v2di", value: 2808, isUnsigned: true)
!3488 = !DIEnumerator(name: "CODE_FOR_vec_shr_v16qi", value: 2809, isUnsigned: true)
!3489 = !DIEnumerator(name: "CODE_FOR_vec_shr_v8hi", value: 2810, isUnsigned: true)
!3490 = !DIEnumerator(name: "CODE_FOR_vec_shr_v4si", value: 2811, isUnsigned: true)
!3491 = !DIEnumerator(name: "CODE_FOR_vec_shr_v2di", value: 2812, isUnsigned: true)
!3492 = !DIEnumerator(name: "CODE_FOR_umaxv16qi3", value: 2813, isUnsigned: true)
!3493 = !DIEnumerator(name: "CODE_FOR_uminv16qi3", value: 2814, isUnsigned: true)
!3494 = !DIEnumerator(name: "CODE_FOR_smaxv8hi3", value: 2815, isUnsigned: true)
!3495 = !DIEnumerator(name: "CODE_FOR_sminv8hi3", value: 2816, isUnsigned: true)
!3496 = !DIEnumerator(name: "CODE_FOR_umaxv8hi3", value: 2817, isUnsigned: true)
!3497 = !DIEnumerator(name: "CODE_FOR_smaxv16qi3", value: 2818, isUnsigned: true)
!3498 = !DIEnumerator(name: "CODE_FOR_smaxv4si3", value: 2819, isUnsigned: true)
!3499 = !DIEnumerator(name: "CODE_FOR_smaxv2di3", value: 2820, isUnsigned: true)
!3500 = !DIEnumerator(name: "CODE_FOR_umaxv4si3", value: 2821, isUnsigned: true)
!3501 = !DIEnumerator(name: "CODE_FOR_umaxv2di3", value: 2822, isUnsigned: true)
!3502 = !DIEnumerator(name: "CODE_FOR_sminv16qi3", value: 2823, isUnsigned: true)
!3503 = !DIEnumerator(name: "CODE_FOR_sminv4si3", value: 2824, isUnsigned: true)
!3504 = !DIEnumerator(name: "CODE_FOR_sminv2di3", value: 2825, isUnsigned: true)
!3505 = !DIEnumerator(name: "CODE_FOR_uminv8hi3", value: 2826, isUnsigned: true)
!3506 = !DIEnumerator(name: "CODE_FOR_uminv4si3", value: 2827, isUnsigned: true)
!3507 = !DIEnumerator(name: "CODE_FOR_uminv2di3", value: 2828, isUnsigned: true)
!3508 = !DIEnumerator(name: "CODE_FOR_sse2_eqv16qi3", value: 2829, isUnsigned: true)
!3509 = !DIEnumerator(name: "CODE_FOR_sse2_eqv8hi3", value: 2830, isUnsigned: true)
!3510 = !DIEnumerator(name: "CODE_FOR_sse2_eqv4si3", value: 2831, isUnsigned: true)
!3511 = !DIEnumerator(name: "CODE_FOR_sse4_1_eqv2di3", value: 2832, isUnsigned: true)
!3512 = !DIEnumerator(name: "CODE_FOR_vcondv16qi", value: 2833, isUnsigned: true)
!3513 = !DIEnumerator(name: "CODE_FOR_vcondv8hi", value: 2834, isUnsigned: true)
!3514 = !DIEnumerator(name: "CODE_FOR_vcondv4si", value: 2835, isUnsigned: true)
!3515 = !DIEnumerator(name: "CODE_FOR_vcondv2di", value: 2836, isUnsigned: true)
!3516 = !DIEnumerator(name: "CODE_FOR_vconduv16qi", value: 2837, isUnsigned: true)
!3517 = !DIEnumerator(name: "CODE_FOR_vconduv8hi", value: 2838, isUnsigned: true)
!3518 = !DIEnumerator(name: "CODE_FOR_vconduv4si", value: 2839, isUnsigned: true)
!3519 = !DIEnumerator(name: "CODE_FOR_vconduv2di", value: 2840, isUnsigned: true)
!3520 = !DIEnumerator(name: "CODE_FOR_one_cmplv16qi2", value: 2841, isUnsigned: true)
!3521 = !DIEnumerator(name: "CODE_FOR_one_cmplv8hi2", value: 2842, isUnsigned: true)
!3522 = !DIEnumerator(name: "CODE_FOR_one_cmplv4si2", value: 2843, isUnsigned: true)
!3523 = !DIEnumerator(name: "CODE_FOR_one_cmplv2di2", value: 2844, isUnsigned: true)
!3524 = !DIEnumerator(name: "CODE_FOR_andv16qi3", value: 2845, isUnsigned: true)
!3525 = !DIEnumerator(name: "CODE_FOR_iorv16qi3", value: 2846, isUnsigned: true)
!3526 = !DIEnumerator(name: "CODE_FOR_xorv16qi3", value: 2847, isUnsigned: true)
!3527 = !DIEnumerator(name: "CODE_FOR_andv8hi3", value: 2848, isUnsigned: true)
!3528 = !DIEnumerator(name: "CODE_FOR_iorv8hi3", value: 2849, isUnsigned: true)
!3529 = !DIEnumerator(name: "CODE_FOR_xorv8hi3", value: 2850, isUnsigned: true)
!3530 = !DIEnumerator(name: "CODE_FOR_andv4si3", value: 2851, isUnsigned: true)
!3531 = !DIEnumerator(name: "CODE_FOR_iorv4si3", value: 2852, isUnsigned: true)
!3532 = !DIEnumerator(name: "CODE_FOR_xorv4si3", value: 2853, isUnsigned: true)
!3533 = !DIEnumerator(name: "CODE_FOR_andv2di3", value: 2854, isUnsigned: true)
!3534 = !DIEnumerator(name: "CODE_FOR_iorv2di3", value: 2855, isUnsigned: true)
!3535 = !DIEnumerator(name: "CODE_FOR_xorv2di3", value: 2856, isUnsigned: true)
!3536 = !DIEnumerator(name: "CODE_FOR_andtf3", value: 2857, isUnsigned: true)
!3537 = !DIEnumerator(name: "CODE_FOR_iortf3", value: 2858, isUnsigned: true)
!3538 = !DIEnumerator(name: "CODE_FOR_xortf3", value: 2859, isUnsigned: true)
!3539 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v8hi", value: 2860, isUnsigned: true)
!3540 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v4si", value: 2861, isUnsigned: true)
!3541 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2di", value: 2862, isUnsigned: true)
!3542 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd", value: 2863, isUnsigned: true)
!3543 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw", value: 2864, isUnsigned: true)
!3544 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw", value: 2865, isUnsigned: true)
!3545 = !DIEnumerator(name: "CODE_FOR_sse2_loadd", value: 2866, isUnsigned: true)
!3546 = !DIEnumerator(name: "CODE_FOR_sse_storeq", value: 2869, isUnsigned: true)
!3547 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v16qi", value: 2871, isUnsigned: true)
!3548 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v16qi", value: 2872, isUnsigned: true)
!3549 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v16qi", value: 2873, isUnsigned: true)
!3550 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v16qi", value: 2874, isUnsigned: true)
!3551 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v8hi", value: 2875, isUnsigned: true)
!3552 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v8hi", value: 2876, isUnsigned: true)
!3553 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v8hi", value: 2877, isUnsigned: true)
!3554 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v8hi", value: 2878, isUnsigned: true)
!3555 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v4si", value: 2879, isUnsigned: true)
!3556 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4si", value: 2880, isUnsigned: true)
!3557 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v4si", value: 2881, isUnsigned: true)
!3558 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4si", value: 2882, isUnsigned: true)
!3559 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv16qi3", value: 2883, isUnsigned: true)
!3560 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv8hi3", value: 2884, isUnsigned: true)
!3561 = !DIEnumerator(name: "CODE_FOR_sse2_maskmovdqu", value: 2885, isUnsigned: true)
!3562 = !DIEnumerator(name: "CODE_FOR_sse_sfence", value: 2886, isUnsigned: true)
!3563 = !DIEnumerator(name: "CODE_FOR_sse2_mfence", value: 2887, isUnsigned: true)
!3564 = !DIEnumerator(name: "CODE_FOR_sse2_lfence", value: 2888, isUnsigned: true)
!3565 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv8hi3", value: 2889, isUnsigned: true)
!3566 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv4hi3", value: 2890, isUnsigned: true)
!3567 = !DIEnumerator(name: "CODE_FOR_rotlv16qi3", value: 2895, isUnsigned: true)
!3568 = !DIEnumerator(name: "CODE_FOR_rotlv8hi3", value: 2896, isUnsigned: true)
!3569 = !DIEnumerator(name: "CODE_FOR_rotlv4si3", value: 2897, isUnsigned: true)
!3570 = !DIEnumerator(name: "CODE_FOR_rotlv2di3", value: 2898, isUnsigned: true)
!3571 = !DIEnumerator(name: "CODE_FOR_rotrv16qi3", value: 2899, isUnsigned: true)
!3572 = !DIEnumerator(name: "CODE_FOR_rotrv8hi3", value: 2900, isUnsigned: true)
!3573 = !DIEnumerator(name: "CODE_FOR_rotrv4si3", value: 2901, isUnsigned: true)
!3574 = !DIEnumerator(name: "CODE_FOR_rotrv2di3", value: 2902, isUnsigned: true)
!3575 = !DIEnumerator(name: "CODE_FOR_vrotrv16qi3", value: 2903, isUnsigned: true)
!3576 = !DIEnumerator(name: "CODE_FOR_vrotrv8hi3", value: 2904, isUnsigned: true)
!3577 = !DIEnumerator(name: "CODE_FOR_vrotrv4si3", value: 2905, isUnsigned: true)
!3578 = !DIEnumerator(name: "CODE_FOR_vrotrv2di3", value: 2906, isUnsigned: true)
!3579 = !DIEnumerator(name: "CODE_FOR_vrotlv16qi3", value: 2907, isUnsigned: true)
!3580 = !DIEnumerator(name: "CODE_FOR_vrotlv8hi3", value: 2908, isUnsigned: true)
!3581 = !DIEnumerator(name: "CODE_FOR_vrotlv4si3", value: 2909, isUnsigned: true)
!3582 = !DIEnumerator(name: "CODE_FOR_vrotlv2di3", value: 2910, isUnsigned: true)
!3583 = !DIEnumerator(name: "CODE_FOR_vlshrv16qi3", value: 2911, isUnsigned: true)
!3584 = !DIEnumerator(name: "CODE_FOR_vlshrv8hi3", value: 2912, isUnsigned: true)
!3585 = !DIEnumerator(name: "CODE_FOR_vlshrv4si3", value: 2913, isUnsigned: true)
!3586 = !DIEnumerator(name: "CODE_FOR_vashrv16qi3", value: 2914, isUnsigned: true)
!3587 = !DIEnumerator(name: "CODE_FOR_vashrv8hi3", value: 2915, isUnsigned: true)
!3588 = !DIEnumerator(name: "CODE_FOR_vashrv4si3", value: 2916, isUnsigned: true)
!3589 = !DIEnumerator(name: "CODE_FOR_vashlv16qi3", value: 2917, isUnsigned: true)
!3590 = !DIEnumerator(name: "CODE_FOR_vashlv8hi3", value: 2918, isUnsigned: true)
!3591 = !DIEnumerator(name: "CODE_FOR_vashlv4si3", value: 2919, isUnsigned: true)
!3592 = !DIEnumerator(name: "CODE_FOR_ashlv16qi3", value: 2920, isUnsigned: true)
!3593 = !DIEnumerator(name: "CODE_FOR_lshlv16qi3", value: 2921, isUnsigned: true)
!3594 = !DIEnumerator(name: "CODE_FOR_ashrv16qi3", value: 2922, isUnsigned: true)
!3595 = !DIEnumerator(name: "CODE_FOR_ashrv2di3", value: 2923, isUnsigned: true)
!3596 = !DIEnumerator(name: "CODE_FOR_avx_vzeroall", value: 2924, isUnsigned: true)
!3597 = !DIEnumerator(name: "CODE_FOR_avx_vzeroupper", value: 2925, isUnsigned: true)
!3598 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv2df", value: 2932, isUnsigned: true)
!3599 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4df", value: 2933, isUnsigned: true)
!3600 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4sf", value: 2934, isUnsigned: true)
!3601 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv8sf", value: 2935, isUnsigned: true)
!3602 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8si3", value: 2936, isUnsigned: true)
!3603 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8sf3", value: 2937, isUnsigned: true)
!3604 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v4df3", value: 2938, isUnsigned: true)
!3605 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v32qi", value: 2939, isUnsigned: true)
!3606 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v16hi", value: 2940, isUnsigned: true)
!3607 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8si", value: 2941, isUnsigned: true)
!3608 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4di", value: 2942, isUnsigned: true)
!3609 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8sf", value: 2943, isUnsigned: true)
!3610 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4df", value: 2944, isUnsigned: true)
!3611 = !DIEnumerator(name: "CODE_FOR_vec_initv32qi", value: 2945, isUnsigned: true)
!3612 = !DIEnumerator(name: "CODE_FOR_vec_initv16hi", value: 2946, isUnsigned: true)
!3613 = !DIEnumerator(name: "CODE_FOR_vec_initv8si", value: 2947, isUnsigned: true)
!3614 = !DIEnumerator(name: "CODE_FOR_vec_initv4di", value: 2948, isUnsigned: true)
!3615 = !DIEnumerator(name: "CODE_FOR_vec_initv8sf", value: 2949, isUnsigned: true)
!3616 = !DIEnumerator(name: "CODE_FOR_vec_initv4df", value: 2950, isUnsigned: true)
!3617 = !DIEnumerator(name: "CODE_FOR_memory_barrier", value: 2951, isUnsigned: true)
!3618 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapqi", value: 2952, isUnsigned: true)
!3619 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swaphi", value: 2953, isUnsigned: true)
!3620 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapsi", value: 2954, isUnsigned: true)
!3621 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapdi", value: 2955, isUnsigned: true)
!3622 = !DIEnumerator(name: "CODE_FOR_nothing", value: 2956, isUnsigned: true)
!3623 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_subtype", file: !3624, line: 723, baseType: !17, size: 32, elements: !3625)
!3624 = !DIFile(filename: "./optabs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3625 = !{!3626, !3627, !3628}
!3626 = !DIEnumerator(name: "optab_default", value: 0, isUnsigned: true)
!3627 = !DIEnumerator(name: "optab_scalar", value: 1, isUnsigned: true)
!3628 = !DIEnumerator(name: "optab_vector", value: 2, isUnsigned: true)
!3629 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !3630, line: 36, baseType: !17, size: 32, elements: !3631)
!3630 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3631 = !{!3632, !3633, !3634, !3635, !3636, !3637, !3638, !3639, !3640, !3641, !3642, !3643, !3644, !3645, !3646, !3647, !3648, !3649, !3650}
!3632 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!3633 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!3634 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!3635 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!3636 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!3637 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!3638 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!3639 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!3640 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!3641 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!3642 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!3643 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!3644 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!3645 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!3646 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!3647 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!3648 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!3649 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!3650 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!3651 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !329, line: 58, baseType: !17, size: 32, elements: !3652)
!3652 = !{!3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660, !3661, !3662, !3663}
!3653 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!3654 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!3655 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!3656 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!3657 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!3658 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!3659 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!3660 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!3661 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!3662 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!3663 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!3664 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dr_alignment_support", file: !1757, line: 48, baseType: !17, size: 32, elements: !3665)
!3665 = !{!3666, !3667, !3668, !3669, !3670}
!3666 = !DIEnumerator(name: "dr_unaligned_unsupported", value: 0, isUnsigned: true)
!3667 = !DIEnumerator(name: "dr_unaligned_supported", value: 1, isUnsigned: true)
!3668 = !DIEnumerator(name: "dr_explicit_realign", value: 2, isUnsigned: true)
!3669 = !DIEnumerator(name: "dr_explicit_realign_optimized", value: 3, isUnsigned: true)
!3670 = !DIEnumerator(name: "dr_aligned", value: 4, isUnsigned: true)
!3671 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !11, line: 727, baseType: !17, size: 32, elements: !3672)
!3672 = !{!3673, !3674, !3675, !3676, !3677, !3678, !3679, !3680, !3681, !3682, !3683, !3684, !3685, !3686, !3687, !3688, !3689, !3690, !3691, !3692, !3693, !3694, !3695, !3696}
!3673 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!3674 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!3675 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!3676 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!3677 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!3678 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!3679 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!3680 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!3681 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!3682 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!3683 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!3684 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!3685 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!3686 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!3687 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!3688 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!3689 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!3690 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!3691 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!3692 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!3693 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!3694 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!3695 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!3696 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!3697 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !732, line: 119, baseType: !17, size: 32, elements: !3698)
!3698 = !{!3699, !3700, !3701, !3702}
!3699 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!3700 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!3701 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!3702 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!3703 = !{!30, !100, !326, !316, !278, !1752, !7, !3704, !3722, !3710, !17, !3735, !3749, !1115, !3629, !9, !3762, !749, !301, !3764, !3765, !3777, !3778, !3781, !3921, !3922, !3823, !3934, !1936, !3726}
!3704 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3705, size: 64)
!3705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_slp_tree", file: !1757, line: 95, size: 384, elements: !3706)
!3706 = !{!3707, !3708, !3709, !3715, !3716, !3717}
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !3705, file: !1757, line: 99, baseType: !3704, size: 64)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !3705, file: !1757, line: 100, baseType: !3704, size: 64, offset: 64)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "stmts", scope: !3705, file: !1757, line: 102, baseType: !3710, size: 64, offset: 128)
!3710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3711, size: 64)
!3711 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !11, line: 34, baseType: !3712)
!3712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !11, line: 34, size: 128, elements: !3713)
!3713 = !{!3714}
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3712, file: !11, line: 34, baseType: !688, size: 128)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "vec_stmts", scope: !3705, file: !1757, line: 104, baseType: !3710, size: 64, offset: 192)
!3716 = !DIDerivedType(tag: DW_TAG_member, name: "vec_stmts_size", scope: !3705, file: !1757, line: 109, baseType: !17, size: 32, offset: 256)
!3717 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3705, file: !1757, line: 115, baseType: !3718, size: 64, offset: 288)
!3718 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3705, file: !1757, line: 111, size: 64, elements: !3719)
!3719 = !{!3720, !3721}
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !3718, file: !1757, line: 113, baseType: !100, size: 32)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !3718, file: !1757, line: 114, baseType: !100, size: 32, offset: 32)
!3722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3723, size: 64)
!3723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_slp_instance", file: !1757, line: 123, size: 384, elements: !3724)
!3724 = !{!3725, !3727, !3728, !3729, !3734, !3748, !3761}
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !3723, file: !1757, line: 125, baseType: !3726, size: 64)
!3726 = !DIDerivedType(tag: DW_TAG_typedef, name: "slp_tree", file: !1757, line: 116, baseType: !3704)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "group_size", scope: !3723, file: !1757, line: 128, baseType: !17, size: 32, offset: 64)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "unrolling_factor", scope: !3723, file: !1757, line: 131, baseType: !17, size: 32, offset: 96)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3723, file: !1757, line: 138, baseType: !3730, size: 64, offset: 128)
!3730 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3723, file: !1757, line: 134, size: 64, elements: !3731)
!3731 = !{!3732, !3733}
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !3730, file: !1757, line: 136, baseType: !100, size: 32)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !3730, file: !1757, line: 137, baseType: !100, size: 32, offset: 32)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "load_permutation", scope: !3723, file: !1757, line: 142, baseType: !3735, size: 64, offset: 192)
!3735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3736, size: 64)
!3736 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !3737, line: 32, baseType: !3738)
!3737 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !3737, line: 32, size: 96, elements: !3739)
!3739 = !{!3740}
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3738, file: !3737, line: 32, baseType: !3741, size: 96)
!3741 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !3737, line: 31, baseType: !3742)
!3742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !3737, line: 31, size: 96, elements: !3743)
!3743 = !{!3744, !3745, !3746}
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3742, file: !3737, line: 31, baseType: !17, size: 32)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3742, file: !3737, line: 31, baseType: !17, size: 32, offset: 32)
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3742, file: !3737, line: 31, baseType: !3747, size: 32, offset: 64)
!3747 = !DICompositeType(tag: DW_TAG_array_type, baseType: !100, size: 32, elements: !115)
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "loads", scope: !3723, file: !1757, line: 145, baseType: !3749, size: 64, offset: 256)
!3749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3750, size: 64)
!3750 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_tree_heap", file: !1757, line: 119, baseType: !3751)
!3751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_tree_heap", file: !1757, line: 119, size: 128, elements: !3752)
!3752 = !{!3753}
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3751, file: !1757, line: 119, baseType: !3754, size: 128)
!3754 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_tree_base", file: !1757, line: 118, baseType: !3755)
!3755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_tree_base", file: !1757, line: 118, size: 128, elements: !3756)
!3756 = !{!3757, !3758, !3759}
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3755, file: !1757, line: 118, baseType: !17, size: 32)
!3758 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3755, file: !1757, line: 118, baseType: !17, size: 32, offset: 32)
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3755, file: !1757, line: 118, baseType: !3760, size: 64, offset: 64)
!3760 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3726, size: 64, elements: !115)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "first_load", scope: !3723, file: !1757, line: 149, baseType: !7, size: 64, offset: 320)
!3762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3763, size: 64)
!3763 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10)
!3764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3726, size: 64)
!3765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3766, size: 64)
!3766 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_instance_heap", file: !1757, line: 153, baseType: !3767)
!3767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_instance_heap", file: !1757, line: 153, size: 128, elements: !3768)
!3768 = !{!3769}
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3767, file: !1757, line: 153, baseType: !3770, size: 128)
!3770 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_instance_base", file: !1757, line: 152, baseType: !3771)
!3771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_instance_base", file: !1757, line: 152, size: 128, elements: !3772)
!3772 = !{!3773, !3774, !3775}
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3771, file: !1757, line: 152, baseType: !17, size: 32)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3771, file: !1757, line: 152, baseType: !17, size: 32, offset: 32)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3771, file: !1757, line: 152, baseType: !3776, size: 64, offset: 64)
!3776 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3777, size: 64, elements: !115)
!3777 = !DIDerivedType(tag: DW_TAG_typedef, name: "slp_instance", file: !1757, line: 150, baseType: !3722)
!3778 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !732, line: 30, baseType: !3779)
!3779 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3780, size: 64)
!3780 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !329, line: 1893, baseType: !756)
!3781 = !DIDerivedType(tag: DW_TAG_typedef, name: "bb_vec_info", file: !1757, line: 319, baseType: !3782)
!3782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3783, size: 64)
!3783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_bb_vec_info", file: !1757, line: 303, size: 320, elements: !3784)
!3784 = !{!3785, !3786, !3787, !3788, !3860}
!3785 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3783, file: !1757, line: 305, baseType: !589, size: 64)
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "strided_stores", scope: !3783, file: !1757, line: 308, baseType: !3710, size: 64, offset: 64)
!3787 = !DIDerivedType(tag: DW_TAG_member, name: "slp_instances", scope: !3783, file: !1757, line: 312, baseType: !3765, size: 64, offset: 128)
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "datarefs", scope: !3783, file: !1757, line: 315, baseType: !3789, size: 64, offset: 192)
!3789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3790, size: 64)
!3790 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_heap", file: !3791, line: 209, baseType: !3792)
!3791 = !DIFile(filename: "./tree-data-ref.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_heap", file: !3791, line: 209, size: 128, elements: !3793)
!3793 = !{!3794}
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3792, file: !3791, line: 209, baseType: !3795, size: 128)
!3795 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_base", file: !3791, line: 208, baseType: !3796)
!3796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_base", file: !3791, line: 208, size: 128, elements: !3797)
!3797 = !{!3798, !3799, !3800}
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3796, file: !3791, line: 208, baseType: !17, size: 32)
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3796, file: !3791, line: 208, baseType: !17, size: 32, offset: 32)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3796, file: !3791, line: 208, baseType: !3801, size: 64, offset: 64)
!3801 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3802, size: 64, elements: !115)
!3802 = !DIDerivedType(tag: DW_TAG_typedef, name: "data_reference_p", file: !3791, line: 207, baseType: !3803)
!3803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3804, size: 64)
!3804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_reference", file: !3791, line: 165, size: 896, elements: !3805)
!3805 = !{!3806, !3807, !3808, !3809, !3810, !3818, !3828, !3833}
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3804, file: !3791, line: 168, baseType: !7, size: 64)
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !3804, file: !3791, line: 171, baseType: !326, size: 64, offset: 64)
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3804, file: !3791, line: 174, baseType: !316, size: 64, offset: 128)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !3804, file: !3791, line: 177, baseType: !6, size: 8, offset: 192)
!3810 = !DIDerivedType(tag: DW_TAG_member, name: "innermost", scope: !3804, file: !3791, line: 180, baseType: !3811, size: 320, offset: 256)
!3811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "innermost_loop_behavior", file: !3791, line: 51, size: 320, elements: !3812)
!3812 = !{!3813, !3814, !3815, !3816, !3817}
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "base_address", scope: !3811, file: !3791, line: 53, baseType: !326, size: 64)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3811, file: !3791, line: 54, baseType: !326, size: 64, offset: 64)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !3811, file: !3791, line: 55, baseType: !326, size: 64, offset: 128)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !3811, file: !3791, line: 56, baseType: !326, size: 64, offset: 192)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_to", scope: !3811, file: !3791, line: 60, baseType: !326, size: 64, offset: 256)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !3804, file: !3791, line: 183, baseType: !3819, size: 128, offset: 576)
!3819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "indices", file: !3791, line: 78, size: 128, elements: !3820)
!3820 = !{!3821, !3822}
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !3819, file: !3791, line: 81, baseType: !326, size: 64)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "access_fns", scope: !3819, file: !3791, line: 84, baseType: !3823, size: 64, offset: 64)
!3823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3824, size: 64)
!3824 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !329, line: 184, baseType: !3825)
!3825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !329, line: 184, size: 128, elements: !3826)
!3826 = !{!3827}
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3825, file: !329, line: 184, baseType: !701, size: 128)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3804, file: !3791, line: 186, baseType: !3829, size: 128, offset: 704)
!3829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dr_alias", file: !3791, line: 87, size: 128, elements: !3830)
!3830 = !{!3831, !3832}
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3829, file: !3791, line: 91, baseType: !1001, size: 64)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !3829, file: !3791, line: 96, baseType: !720, size: 64, offset: 64)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "access_matrix", scope: !3804, file: !3791, line: 189, baseType: !3834, size: 64, offset: 832)
!3834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3835, size: 64)
!3835 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_matrix", file: !3791, line: 127, size: 256, elements: !3836)
!3836 = !{!3837, !3843, !3844, !3845}
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3835, file: !3791, line: 129, baseType: !3838, size: 64)
!3838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3839, size: 64)
!3839 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !770, line: 86, baseType: !3840)
!3840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !770, line: 86, size: 128, elements: !3841)
!3841 = !{!3842}
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3840, file: !770, line: 86, baseType: !779, size: 128)
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "nb_induction_vars", scope: !3835, file: !3791, line: 130, baseType: !100, size: 32, offset: 64)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !3835, file: !3791, line: 131, baseType: !3823, size: 64, offset: 128)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !3835, file: !3791, line: 132, baseType: !3846, size: 64, offset: 192)
!3846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3847, size: 64)
!3847 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_gc", file: !3848, line: 34, baseType: !3849)
!3848 = !DIFile(filename: "./lambda.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_gc", file: !3848, line: 34, size: 128, elements: !3850)
!3850 = !{!3851}
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3849, file: !3848, line: 34, baseType: !3852, size: 128)
!3852 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_base", file: !3848, line: 32, baseType: !3853)
!3853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_base", file: !3848, line: 32, size: 128, elements: !3854)
!3854 = !{!3855, !3856, !3857}
!3855 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3853, file: !3848, line: 32, baseType: !17, size: 32)
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3853, file: !3848, line: 32, baseType: !17, size: 32, offset: 32)
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3853, file: !3848, line: 32, baseType: !3858, size: 64, offset: 64)
!3858 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3859, size: 64, elements: !115)
!3859 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_vector", file: !3848, line: 31, baseType: !1752)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "ddrs", scope: !3783, file: !1757, line: 318, baseType: !3861, size: 64, offset: 256)
!3861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3862, size: 64)
!3862 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_heap", file: !3791, line: 333, baseType: !3863)
!3863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_heap", file: !3791, line: 333, size: 128, elements: !3864)
!3864 = !{!3865}
!3865 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3863, file: !3791, line: 333, baseType: !3866, size: 128)
!3866 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_base", file: !3791, line: 332, baseType: !3867)
!3867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_base", file: !3791, line: 332, size: 128, elements: !3868)
!3868 = !{!3869, !3870, !3871}
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3867, file: !3791, line: 332, baseType: !17, size: 32)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3867, file: !3791, line: 332, baseType: !17, size: 32, offset: 32)
!3871 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3867, file: !3791, line: 332, baseType: !3872, size: 64, offset: 64)
!3872 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3873, size: 64, elements: !115)
!3873 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddr_p", file: !3791, line: 331, baseType: !3874)
!3874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3875, size: 64)
!3875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_dependence_relation", file: !3791, line: 282, size: 512, elements: !3876)
!3876 = !{!3877, !3878, !3879, !3880, !3909, !3910, !3916, !3917, !3918, !3919, !3920}
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3875, file: !3791, line: 285, baseType: !3803, size: 64)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !3875, file: !3791, line: 286, baseType: !3803, size: 64, offset: 64)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "are_dependent", scope: !3875, file: !3791, line: 299, baseType: !326, size: 64, offset: 128)
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "subscripts", scope: !3875, file: !3791, line: 304, baseType: !3881, size: 64, offset: 192)
!3881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3882, size: 64)
!3882 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_heap", file: !3791, line: 272, baseType: !3883)
!3883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_heap", file: !3791, line: 272, size: 128, elements: !3884)
!3884 = !{!3885}
!3885 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3883, file: !3791, line: 272, baseType: !3886, size: 128)
!3886 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_base", file: !3791, line: 271, baseType: !3887)
!3887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_base", file: !3791, line: 271, size: 128, elements: !3888)
!3888 = !{!3889, !3890, !3891}
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3887, file: !3791, line: 271, baseType: !17, size: 32)
!3890 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3887, file: !3791, line: 271, baseType: !17, size: 32, offset: 32)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3887, file: !3791, line: 271, baseType: !3892, size: 64, offset: 64)
!3892 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3893, size: 64, elements: !115)
!3893 = !DIDerivedType(tag: DW_TAG_typedef, name: "subscript_p", file: !3791, line: 270, baseType: !3894)
!3894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3895, size: 64)
!3895 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "subscript", file: !3791, line: 252, size: 256, elements: !3896)
!3896 = !{!3897, !3906, !3907, !3908}
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_a", scope: !3895, file: !3791, line: 256, baseType: !3898, size: 64)
!3898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3899, size: 64)
!3899 = !DIDerivedType(tag: DW_TAG_typedef, name: "conflict_function", file: !3791, line: 243, baseType: !3900)
!3900 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3791, line: 239, size: 192, elements: !3901)
!3901 = !{!3902, !3903}
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !3900, file: !3791, line: 241, baseType: !17, size: 32)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "fns", scope: !3900, file: !3791, line: 242, baseType: !3904, size: 128, offset: 64)
!3904 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3905, size: 128, elements: !279)
!3905 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_fn", file: !3791, line: 237, baseType: !3823)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_b", scope: !3895, file: !3791, line: 257, baseType: !3898, size: 64, offset: 64)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "last_conflict", scope: !3895, file: !3791, line: 261, baseType: !326, size: 64, offset: 128)
!3908 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !3895, file: !3791, line: 267, baseType: !326, size: 64, offset: 192)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3875, file: !3791, line: 307, baseType: !3838, size: 64, offset: 256)
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "dir_vects", scope: !3875, file: !3791, line: 310, baseType: !3911, size: 64, offset: 320)
!3911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3912, size: 64)
!3912 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_heap", file: !3848, line: 33, baseType: !3913)
!3913 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_heap", file: !3848, line: 33, size: 128, elements: !3914)
!3914 = !{!3915}
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3913, file: !3848, line: 33, baseType: !3852, size: 128)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "dist_vects", scope: !3875, file: !3791, line: 313, baseType: !3911, size: 64, offset: 384)
!3917 = !DIDerivedType(tag: DW_TAG_member, name: "inner_loop", scope: !3875, file: !3791, line: 317, baseType: !17, size: 32, offset: 448)
!3918 = !DIDerivedType(tag: DW_TAG_member, name: "reversed_p", scope: !3875, file: !3791, line: 320, baseType: !6, size: 8, offset: 480)
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "affine_p", scope: !3875, file: !3791, line: 324, baseType: !6, size: 8, offset: 488)
!3920 = !DIDerivedType(tag: DW_TAG_member, name: "self_reference_p", scope: !3875, file: !3791, line: 328, baseType: !6, size: 8, offset: 496)
!3921 = !DIDerivedType(tag: DW_TAG_typedef, name: "vec_void_p", file: !1757, line: 613, baseType: !316)
!3922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3923, size: 64)
!3923 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vec_void_p_heap", file: !1757, line: 615, baseType: !3924)
!3924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vec_void_p_heap", file: !1757, line: 615, size: 128, elements: !3925)
!3925 = !{!3926}
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3924, file: !1757, line: 615, baseType: !3927, size: 128)
!3927 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vec_void_p_base", file: !1757, line: 614, baseType: !3928)
!3928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vec_void_p_base", file: !1757, line: 614, size: 128, elements: !3929)
!3929 = !{!3930, !3931, !3932}
!3930 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3928, file: !1757, line: 614, baseType: !17, size: 32)
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3928, file: !1757, line: 614, baseType: !17, size: 32, offset: 32)
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3928, file: !1757, line: 614, baseType: !3933, size: 64, offset: 64)
!3933 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3921, size: 64, elements: !115)
!3934 = !DIDerivedType(tag: DW_TAG_typedef, name: "stmt_vec_info", file: !1757, line: 496, baseType: !3935)
!3935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3936, size: 64)
!3936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_stmt_vec_info", file: !1757, line: 401, size: 1536, elements: !3937)
!3937 = !{!3938, !3939, !3940, !3965, !3966, !3967, !3968, !3969, !3970, !3971, !3972, !3973, !3974, !3975, !3976, !3977, !3991, !3992, !3993, !3994, !3995, !3996, !3997, !3998, !3999, !4004, !4005}
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3936, file: !1757, line: 403, baseType: !1942, size: 32)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3936, file: !1757, line: 406, baseType: !7, size: 64, offset: 64)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "loop_vinfo", scope: !3936, file: !1757, line: 409, baseType: !3941, size: 64, offset: 128)
!3941 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_vec_info", file: !1757, line: 245, baseType: !3942)
!3942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3943, size: 64)
!3943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_loop_vec_info", file: !1757, line: 176, size: 1024, elements: !3944)
!3944 = !{!3945, !3946, !3948, !3949, !3950, !3951, !3952, !3953, !3954, !3955, !3956, !3957, !3958, !3959, !3960, !3962, !3963, !3964}
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !3943, file: !1757, line: 179, baseType: !787, size: 64)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "bbs", scope: !3943, file: !1757, line: 182, baseType: !3947, size: 64, offset: 64)
!3947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !589, size: 64)
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "num_iters", scope: !3943, file: !1757, line: 185, baseType: !326, size: 64, offset: 128)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "num_iters_unchanged", scope: !3943, file: !1757, line: 186, baseType: !326, size: 64, offset: 192)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "min_profitable_iters", scope: !3943, file: !1757, line: 193, baseType: !100, size: 32, offset: 256)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "vectorizable", scope: !3943, file: !1757, line: 196, baseType: !6, size: 8, offset: 288)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "vectorization_factor", scope: !3943, file: !1757, line: 199, baseType: !100, size: 32, offset: 320)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "unaligned_dr", scope: !3943, file: !1757, line: 202, baseType: !3803, size: 64, offset: 384)
!3954 = !DIDerivedType(tag: DW_TAG_member, name: "peeling_for_alignment", scope: !3943, file: !1757, line: 212, baseType: !100, size: 32, offset: 448)
!3955 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_mask", scope: !3943, file: !1757, line: 215, baseType: !100, size: 32, offset: 480)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "datarefs", scope: !3943, file: !1757, line: 218, baseType: !3789, size: 64, offset: 512)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "ddrs", scope: !3943, file: !1757, line: 221, baseType: !3861, size: 64, offset: 576)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "may_alias_ddrs", scope: !3943, file: !1757, line: 225, baseType: !3861, size: 64, offset: 640)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "may_misalign_stmts", scope: !3943, file: !1757, line: 229, baseType: !3710, size: 64, offset: 704)
!3960 = !DIDerivedType(tag: DW_TAG_member, name: "loop_line_number", scope: !3943, file: !1757, line: 232, baseType: !3961, size: 32, offset: 768)
!3961 = !DIDerivedType(tag: DW_TAG_typedef, name: "LOC", file: !1757, line: 27, baseType: !30)
!3962 = !DIDerivedType(tag: DW_TAG_member, name: "strided_stores", scope: !3943, file: !1757, line: 236, baseType: !3710, size: 64, offset: 832)
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "slp_instances", scope: !3943, file: !1757, line: 240, baseType: !3765, size: 64, offset: 896)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "slp_unrolling_factor", scope: !3943, file: !1757, line: 244, baseType: !17, size: 32, offset: 960)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "relevant", scope: !3936, file: !1757, line: 414, baseType: !1957, size: 32, offset: 192)
!3966 = !DIDerivedType(tag: DW_TAG_member, name: "live", scope: !3936, file: !1757, line: 418, baseType: !6, size: 8, offset: 224)
!3967 = !DIDerivedType(tag: DW_TAG_member, name: "vectype", scope: !3936, file: !1757, line: 421, baseType: !326, size: 64, offset: 256)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "vectorized_stmt", scope: !3936, file: !1757, line: 424, baseType: !7, size: 64, offset: 320)
!3969 = !DIDerivedType(tag: DW_TAG_member, name: "data_ref_info", scope: !3936, file: !1757, line: 433, baseType: !3803, size: 64, offset: 384)
!3970 = !DIDerivedType(tag: DW_TAG_member, name: "dr_base_address", scope: !3936, file: !1757, line: 437, baseType: !326, size: 64, offset: 448)
!3971 = !DIDerivedType(tag: DW_TAG_member, name: "dr_init", scope: !3936, file: !1757, line: 438, baseType: !326, size: 64, offset: 512)
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "dr_offset", scope: !3936, file: !1757, line: 439, baseType: !326, size: 64, offset: 576)
!3973 = !DIDerivedType(tag: DW_TAG_member, name: "dr_step", scope: !3936, file: !1757, line: 440, baseType: !326, size: 64, offset: 640)
!3974 = !DIDerivedType(tag: DW_TAG_member, name: "dr_aligned_to", scope: !3936, file: !1757, line: 441, baseType: !326, size: 64, offset: 704)
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "in_pattern_p", scope: !3936, file: !1757, line: 444, baseType: !6, size: 8, offset: 768)
!3976 = !DIDerivedType(tag: DW_TAG_member, name: "related_stmt", scope: !3936, file: !1757, line: 455, baseType: !7, size: 64, offset: 832)
!3977 = !DIDerivedType(tag: DW_TAG_member, name: "same_align_refs", scope: !3936, file: !1757, line: 459, baseType: !3978, size: 64, offset: 896)
!3978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3979, size: 64)
!3979 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_dr_p_heap", file: !1757, line: 399, baseType: !3980)
!3980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_dr_p_heap", file: !1757, line: 399, size: 128, elements: !3981)
!3981 = !{!3982}
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3980, file: !1757, line: 399, baseType: !3983, size: 128)
!3983 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_dr_p_base", file: !1757, line: 398, baseType: !3984)
!3984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_dr_p_base", file: !1757, line: 398, size: 128, elements: !3985)
!3985 = !{!3986, !3987, !3988}
!3986 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3984, file: !1757, line: 398, baseType: !17, size: 32)
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3984, file: !1757, line: 398, baseType: !17, size: 32, offset: 32)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3984, file: !1757, line: 398, baseType: !3989, size: 64, offset: 64)
!3989 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3990, size: 64, elements: !115)
!3990 = !DIDerivedType(tag: DW_TAG_typedef, name: "dr_p", file: !1757, line: 397, baseType: !3803)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "def_type", scope: !3936, file: !1757, line: 462, baseType: !1964, size: 32, offset: 960)
!3992 = !DIDerivedType(tag: DW_TAG_member, name: "first_dr", scope: !3936, file: !1757, line: 466, baseType: !7, size: 64, offset: 1024)
!3993 = !DIDerivedType(tag: DW_TAG_member, name: "next_dr", scope: !3936, file: !1757, line: 468, baseType: !7, size: 64, offset: 1088)
!3994 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3936, file: !1757, line: 470, baseType: !17, size: 32, offset: 1152)
!3995 = !DIDerivedType(tag: DW_TAG_member, name: "store_count", scope: !3936, file: !1757, line: 473, baseType: !17, size: 32, offset: 1184)
!3996 = !DIDerivedType(tag: DW_TAG_member, name: "gap", scope: !3936, file: !1757, line: 476, baseType: !17, size: 32, offset: 1216)
!3997 = !DIDerivedType(tag: DW_TAG_member, name: "same_dr_stmt", scope: !3936, file: !1757, line: 479, baseType: !7, size: 64, offset: 1280)
!3998 = !DIDerivedType(tag: DW_TAG_member, name: "read_write_dep", scope: !3936, file: !1757, line: 482, baseType: !6, size: 8, offset: 1344)
!3999 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3936, file: !1757, line: 489, baseType: !4000, size: 64, offset: 1376)
!4000 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3936, file: !1757, line: 485, size: 64, elements: !4001)
!4001 = !{!4002, !4003}
!4002 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !4000, file: !1757, line: 487, baseType: !100, size: 32)
!4003 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !4000, file: !1757, line: 488, baseType: !100, size: 32, offset: 32)
!4004 = !DIDerivedType(tag: DW_TAG_member, name: "slp_type", scope: !3936, file: !1757, line: 492, baseType: !1770, size: 32, offset: 1440)
!4005 = !DIDerivedType(tag: DW_TAG_member, name: "bb_vinfo", scope: !3936, file: !1757, line: 495, baseType: !3781, size: 64, offset: 1472)
!4006 = !{!0, !4007, !4009}
!4007 = !DIGlobalVariableExpression(var: !4008, expr: !DIExpression())
!4008 = distinct !DIGlobalVariable(name: "mask_fixed", scope: !2, file: !3, line: 1717, type: !6, isLocal: true, isDefinition: true)
!4009 = !DIGlobalVariableExpression(var: !4010, expr: !DIExpression())
!4010 = distinct !DIGlobalVariable(name: "needs_first_vector", scope: !2, file: !3, line: 1718, type: !6, isLocal: true, isDefinition: true)
!4011 = !{}
!4012 = !{i32 7, !"Dwarf Version", i32 4}
!4013 = !{i32 2, !"Debug Info Version", i32 3}
!4014 = !{i32 1, !"wchar_size", i32 4}
!4015 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!4016 = distinct !DISubprogram(name: "find_bb_location", scope: !3, file: !3, line: 45, type: !4017, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4017 = !DISubroutineType(types: !4018)
!4018 = !{!3961, !589}
!4019 = !DILocalVariable(name: "bb", arg: 1, scope: !4016, file: !3, line: 45, type: !589)
!4020 = !DILocation(line: 45, column: 31, scope: !4016)
!4021 = !DILocalVariable(name: "stmt", scope: !4016, file: !3, line: 47, type: !7)
!4022 = !DILocation(line: 47, column: 10, scope: !4016)
!4023 = !DILocalVariable(name: "si", scope: !4016, file: !3, line: 48, type: !4024)
!4024 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !11, line: 265, baseType: !4025)
!4025 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !11, line: 254, size: 192, elements: !4026)
!4026 = !{!4027, !4028, !4029}
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4025, file: !11, line: 257, baseType: !66, size: 64)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4025, file: !11, line: 263, baseType: !61, size: 64, offset: 64)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4025, file: !11, line: 264, baseType: !589, size: 64, offset: 128)
!4030 = !DILocation(line: 48, column: 24, scope: !4016)
!4031 = !DILocation(line: 50, column: 8, scope: !4032)
!4032 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 50, column: 7)
!4033 = !DILocation(line: 50, column: 7, scope: !4016)
!4034 = !DILocation(line: 51, column: 5, scope: !4032)
!4035 = !DILocation(line: 53, column: 27, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 53, column: 3)
!4037 = !DILocation(line: 53, column: 13, scope: !4036)
!4038 = !DILocation(line: 53, column: 8, scope: !4036)
!4039 = !DILocation(line: 53, column: 33, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4036, file: !3, line: 53, column: 3)
!4041 = !DILocation(line: 53, column: 32, scope: !4040)
!4042 = !DILocation(line: 53, column: 3, scope: !4036)
!4043 = !DILocation(line: 55, column: 14, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 54, column: 5)
!4045 = !DILocation(line: 55, column: 12, scope: !4044)
!4046 = !DILocation(line: 56, column: 28, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !4044, file: !3, line: 56, column: 11)
!4048 = !DILocation(line: 56, column: 11, scope: !4047)
!4049 = !DILocation(line: 56, column: 34, scope: !4047)
!4050 = !DILocation(line: 56, column: 11, scope: !4044)
!4051 = !DILocation(line: 57, column: 33, scope: !4047)
!4052 = !DILocation(line: 57, column: 16, scope: !4047)
!4053 = !DILocation(line: 57, column: 9, scope: !4047)
!4054 = !DILocation(line: 58, column: 5, scope: !4044)
!4055 = !DILocation(line: 53, column: 49, scope: !4040)
!4056 = !DILocation(line: 53, column: 3, scope: !4040)
!4057 = distinct !{!4057, !4042, !4058}
!4058 = !DILocation(line: 58, column: 5, scope: !4036)
!4059 = !DILocation(line: 60, column: 3, scope: !4016)
!4060 = !DILocation(line: 61, column: 1, scope: !4016)
!4061 = distinct !DISubprogram(name: "gsi_start_bb", scope: !11, file: !11, line: 4418, type: !4062, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4062 = !DISubroutineType(types: !4063)
!4063 = !{!4024, !589}
!4064 = !DILocalVariable(name: "bb", arg: 1, scope: !4061, file: !11, line: 4418, type: !589)
!4065 = !DILocation(line: 4418, column: 27, scope: !4061)
!4066 = !DILocalVariable(name: "i", scope: !4061, file: !11, line: 4420, type: !4024)
!4067 = !DILocation(line: 4420, column: 24, scope: !4061)
!4068 = !DILocalVariable(name: "seq", scope: !4061, file: !11, line: 4421, type: !61)
!4069 = !DILocation(line: 4421, column: 14, scope: !4061)
!4070 = !DILocation(line: 4423, column: 17, scope: !4061)
!4071 = !DILocation(line: 4423, column: 9, scope: !4061)
!4072 = !DILocation(line: 4423, column: 7, scope: !4061)
!4073 = !DILocation(line: 4424, column: 29, scope: !4061)
!4074 = !DILocation(line: 4424, column: 11, scope: !4061)
!4075 = !DILocation(line: 4424, column: 5, scope: !4061)
!4076 = !DILocation(line: 4424, column: 9, scope: !4061)
!4077 = !DILocation(line: 4425, column: 11, scope: !4061)
!4078 = !DILocation(line: 4425, column: 5, scope: !4061)
!4079 = !DILocation(line: 4425, column: 9, scope: !4061)
!4080 = !DILocation(line: 4426, column: 10, scope: !4061)
!4081 = !DILocation(line: 4426, column: 5, scope: !4061)
!4082 = !DILocation(line: 4426, column: 8, scope: !4061)
!4083 = !DILocation(line: 4428, column: 3, scope: !4061)
!4084 = distinct !DISubprogram(name: "gsi_end_p", scope: !11, file: !11, line: 4467, type: !4085, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4085 = !DISubroutineType(types: !4086)
!4086 = !{!6, !4024}
!4087 = !DILocalVariable(name: "i", arg: 1, scope: !4084, file: !11, line: 4467, type: !4024)
!4088 = !DILocation(line: 4467, column: 33, scope: !4084)
!4089 = !DILocation(line: 4469, column: 12, scope: !4084)
!4090 = !DILocation(line: 4469, column: 16, scope: !4084)
!4091 = !DILocation(line: 4469, column: 10, scope: !4084)
!4092 = !DILocation(line: 4469, column: 3, scope: !4084)
!4093 = distinct !DISubprogram(name: "gsi_stmt", scope: !11, file: !11, line: 4501, type: !4094, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4094 = !DISubroutineType(types: !4095)
!4095 = !{!7, !4024}
!4096 = !DILocalVariable(name: "i", arg: 1, scope: !4093, file: !11, line: 4501, type: !4024)
!4097 = !DILocation(line: 4501, column: 32, scope: !4093)
!4098 = !DILocation(line: 4503, column: 12, scope: !4093)
!4099 = !DILocation(line: 4503, column: 17, scope: !4093)
!4100 = !DILocation(line: 4503, column: 3, scope: !4093)
!4101 = distinct !DISubprogram(name: "gimple_location", scope: !11, file: !11, line: 1139, type: !4102, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4102 = !DISubroutineType(types: !4103)
!4103 = !{!28, !4104}
!4104 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !8, line: 60, baseType: !3762)
!4105 = !DILocalVariable(name: "g", arg: 1, scope: !4101, file: !11, line: 1139, type: !4104)
!4106 = !DILocation(line: 1139, column: 31, scope: !4101)
!4107 = !DILocation(line: 1141, column: 10, scope: !4101)
!4108 = !DILocation(line: 1141, column: 13, scope: !4101)
!4109 = !DILocation(line: 1141, column: 20, scope: !4101)
!4110 = !DILocation(line: 1141, column: 3, scope: !4101)
!4111 = distinct !DISubprogram(name: "gsi_next", scope: !11, file: !11, line: 4485, type: !4112, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4112 = !DISubroutineType(types: !4113)
!4113 = !{null, !4114}
!4114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4024, size: 64)
!4115 = !DILocalVariable(name: "i", arg: 1, scope: !4111, file: !11, line: 4485, type: !4114)
!4116 = !DILocation(line: 4485, column: 33, scope: !4111)
!4117 = !DILocation(line: 4487, column: 12, scope: !4111)
!4118 = !DILocation(line: 4487, column: 15, scope: !4111)
!4119 = !DILocation(line: 4487, column: 20, scope: !4111)
!4120 = !DILocation(line: 4487, column: 3, scope: !4111)
!4121 = !DILocation(line: 4487, column: 6, scope: !4111)
!4122 = !DILocation(line: 4487, column: 10, scope: !4111)
!4123 = !DILocation(line: 4488, column: 1, scope: !4111)
!4124 = distinct !DISubprogram(name: "vect_free_slp_instance", scope: !3, file: !3, line: 90, type: !4125, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4125 = !DISubroutineType(types: !4126)
!4126 = !{null, !3777}
!4127 = !DILocalVariable(name: "instance", arg: 1, scope: !4124, file: !3, line: 90, type: !3777)
!4128 = !DILocation(line: 90, column: 38, scope: !4124)
!4129 = !DILocation(line: 92, column: 23, scope: !4124)
!4130 = !DILocation(line: 92, column: 3, scope: !4124)
!4131 = !DILocation(line: 93, column: 3, scope: !4124)
!4132 = !DILocation(line: 94, column: 3, scope: !4124)
!4133 = !DILocation(line: 95, column: 1, scope: !4124)
!4134 = distinct !DISubprogram(name: "vect_free_slp_tree", scope: !3, file: !3, line: 67, type: !4135, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4135 = !DISubroutineType(types: !4136)
!4136 = !{null, !3726}
!4137 = !DILocalVariable(name: "node", arg: 1, scope: !4134, file: !3, line: 67, type: !3726)
!4138 = !DILocation(line: 67, column: 30, scope: !4134)
!4139 = !DILocation(line: 69, column: 8, scope: !4140)
!4140 = distinct !DILexicalBlock(scope: !4134, file: !3, line: 69, column: 7)
!4141 = !DILocation(line: 69, column: 7, scope: !4134)
!4142 = !DILocation(line: 70, column: 5, scope: !4140)
!4143 = !DILocation(line: 72, column: 7, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4134, file: !3, line: 72, column: 7)
!4145 = !DILocation(line: 72, column: 7, scope: !4134)
!4146 = !DILocation(line: 73, column: 25, scope: !4144)
!4147 = !DILocation(line: 73, column: 5, scope: !4144)
!4148 = !DILocation(line: 75, column: 7, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4134, file: !3, line: 75, column: 7)
!4150 = !DILocation(line: 75, column: 7, scope: !4134)
!4151 = !DILocation(line: 76, column: 25, scope: !4149)
!4152 = !DILocation(line: 76, column: 5, scope: !4149)
!4153 = !DILocation(line: 78, column: 3, scope: !4134)
!4154 = !DILocation(line: 80, column: 7, scope: !4155)
!4155 = distinct !DILexicalBlock(scope: !4134, file: !3, line: 80, column: 7)
!4156 = !DILocation(line: 80, column: 7, scope: !4134)
!4157 = !DILocation(line: 81, column: 5, scope: !4155)
!4158 = !DILocation(line: 83, column: 9, scope: !4134)
!4159 = !DILocation(line: 83, column: 3, scope: !4134)
!4160 = !DILocation(line: 84, column: 1, scope: !4134)
!4161 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !3737, file: !3737, line: 32, type: !4162, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4162 = !DISubroutineType(types: !4163)
!4163 = !{null, !4164}
!4164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3735, size: 64)
!4165 = !DILocalVariable(name: "vec_", arg: 1, scope: !4161, file: !3737, line: 32, type: !4164)
!4166 = !DILocation(line: 32, column: 1, scope: !4161)
!4167 = !DILocation(line: 32, column: 1, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4161, file: !3737, line: 32, column: 1)
!4169 = distinct !DISubprogram(name: "VEC_slp_tree_heap_free", scope: !1757, file: !1757, line: 119, type: !4170, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4170 = !DISubroutineType(types: !4171)
!4171 = !{null, !4172}
!4172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3749, size: 64)
!4173 = !DILocalVariable(name: "vec_", arg: 1, scope: !4169, file: !1757, line: 119, type: !4172)
!4174 = !DILocation(line: 119, column: 1, scope: !4169)
!4175 = !DILocation(line: 119, column: 1, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4169, file: !1757, line: 119, column: 1)
!4177 = distinct !DISubprogram(name: "vect_analyze_slp", scope: !3, file: !3, line: 1031, type: !4178, scopeLine: 1032, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4178 = !DISubroutineType(types: !4179)
!4179 = !{!6, !3941, !3781}
!4180 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4177, file: !3, line: 1031, type: !3941)
!4181 = !DILocation(line: 1031, column: 33, scope: !4177)
!4182 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !4177, file: !3, line: 1031, type: !3781)
!4183 = !DILocation(line: 1031, column: 57, scope: !4177)
!4184 = !DILocalVariable(name: "i", scope: !4177, file: !3, line: 1033, type: !17)
!4185 = !DILocation(line: 1033, column: 16, scope: !4177)
!4186 = !DILocalVariable(name: "strided_stores", scope: !4177, file: !3, line: 1034, type: !3710)
!4187 = !DILocation(line: 1034, column: 23, scope: !4177)
!4188 = !DILocalVariable(name: "store", scope: !4177, file: !3, line: 1035, type: !7)
!4189 = !DILocation(line: 1035, column: 10, scope: !4177)
!4190 = !DILocalVariable(name: "ok", scope: !4177, file: !3, line: 1036, type: !6)
!4191 = !DILocation(line: 1036, column: 8, scope: !4177)
!4192 = !DILocation(line: 1038, column: 7, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 1038, column: 7)
!4194 = !DILocation(line: 1038, column: 7, scope: !4177)
!4195 = !DILocation(line: 1039, column: 14, scope: !4193)
!4196 = !DILocation(line: 1039, column: 5, scope: !4193)
!4197 = !DILocation(line: 1041, column: 7, scope: !4198)
!4198 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 1041, column: 7)
!4199 = !DILocation(line: 1041, column: 7, scope: !4177)
!4200 = !DILocation(line: 1042, column: 22, scope: !4198)
!4201 = !DILocation(line: 1042, column: 20, scope: !4198)
!4202 = !DILocation(line: 1042, column: 5, scope: !4198)
!4203 = !DILocation(line: 1044, column: 22, scope: !4198)
!4204 = !DILocation(line: 1044, column: 20, scope: !4198)
!4205 = !DILocation(line: 1046, column: 10, scope: !4206)
!4206 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 1046, column: 3)
!4207 = !DILocation(line: 1046, column: 8, scope: !4206)
!4208 = !DILocation(line: 1046, column: 15, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4206, file: !3, line: 1046, column: 3)
!4210 = !DILocation(line: 1046, column: 3, scope: !4206)
!4211 = !DILocation(line: 1047, column: 36, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4209, file: !3, line: 1047, column: 9)
!4213 = !DILocation(line: 1047, column: 48, scope: !4212)
!4214 = !DILocation(line: 1047, column: 58, scope: !4212)
!4215 = !DILocation(line: 1047, column: 9, scope: !4212)
!4216 = !DILocation(line: 1047, column: 9, scope: !4209)
!4217 = !DILocation(line: 1048, column: 10, scope: !4212)
!4218 = !DILocation(line: 1048, column: 7, scope: !4212)
!4219 = !DILocation(line: 1047, column: 63, scope: !4212)
!4220 = !DILocation(line: 1046, column: 64, scope: !4209)
!4221 = !DILocation(line: 1046, column: 3, scope: !4209)
!4222 = distinct !{!4222, !4210, !4223}
!4223 = !DILocation(line: 1048, column: 12, scope: !4206)
!4224 = !DILocation(line: 1050, column: 7, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 1050, column: 7)
!4226 = !DILocation(line: 1050, column: 16, scope: !4225)
!4227 = !DILocation(line: 1050, column: 20, scope: !4225)
!4228 = !DILocation(line: 1050, column: 7, scope: !4177)
!4229 = !DILocation(line: 1052, column: 11, scope: !4230)
!4230 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 1052, column: 11)
!4231 = distinct !DILexicalBlock(scope: !4225, file: !3, line: 1051, column: 5)
!4232 = !DILocation(line: 1052, column: 11, scope: !4231)
!4233 = !DILocation(line: 1053, column: 18, scope: !4230)
!4234 = !DILocation(line: 1053, column: 9, scope: !4230)
!4235 = !DILocation(line: 1055, column: 7, scope: !4231)
!4236 = !DILocation(line: 1058, column: 3, scope: !4177)
!4237 = !DILocation(line: 1059, column: 1, scope: !4177)
!4238 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !11, file: !11, line: 33, type: !4239, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4239 = !DISubroutineType(types: !4240)
!4240 = !{!100, !4241, !17, !4243}
!4241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4242, size: 64)
!4242 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !688)
!4243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4244 = !DILocalVariable(name: "vec_", arg: 1, scope: !4238, file: !11, line: 33, type: !4241)
!4245 = !DILocation(line: 33, column: 1, scope: !4238)
!4246 = !DILocalVariable(name: "ix_", arg: 2, scope: !4238, file: !11, line: 33, type: !17)
!4247 = !DILocalVariable(name: "ptr", arg: 3, scope: !4238, file: !11, line: 33, type: !4243)
!4248 = !DILocation(line: 33, column: 1, scope: !4249)
!4249 = distinct !DILexicalBlock(scope: !4238, file: !11, line: 33, column: 1)
!4250 = !DILocation(line: 33, column: 1, scope: !4251)
!4251 = distinct !DILexicalBlock(scope: !4249, file: !11, line: 33, column: 1)
!4252 = !DILocation(line: 33, column: 1, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4249, file: !11, line: 33, column: 1)
!4254 = distinct !DISubprogram(name: "vect_analyze_slp_instance", scope: !3, file: !3, line: 888, type: !4255, scopeLine: 890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4255 = !DISubroutineType(types: !4256)
!4256 = !{!6, !3941, !3781, !7}
!4257 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4254, file: !3, line: 888, type: !3941)
!4258 = !DILocation(line: 888, column: 42, scope: !4254)
!4259 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !4254, file: !3, line: 888, type: !3781)
!4260 = !DILocation(line: 888, column: 66, scope: !4254)
!4261 = !DILocalVariable(name: "stmt", arg: 3, scope: !4254, file: !3, line: 889, type: !7)
!4262 = !DILocation(line: 889, column: 35, scope: !4254)
!4263 = !DILocalVariable(name: "new_instance", scope: !4254, file: !3, line: 891, type: !3777)
!4264 = !DILocation(line: 891, column: 16, scope: !4254)
!4265 = !DILocalVariable(name: "node", scope: !4254, file: !3, line: 892, type: !3726)
!4266 = !DILocation(line: 892, column: 12, scope: !4254)
!4267 = !DILocation(line: 892, column: 19, scope: !4254)
!4268 = !DILocalVariable(name: "group_size", scope: !4254, file: !3, line: 893, type: !17)
!4269 = !DILocation(line: 893, column: 16, scope: !4254)
!4270 = !DILocation(line: 893, column: 29, scope: !4254)
!4271 = !DILocalVariable(name: "unrolling_factor", scope: !4254, file: !3, line: 894, type: !17)
!4272 = !DILocation(line: 894, column: 16, scope: !4254)
!4273 = !DILocalVariable(name: "nunits", scope: !4254, file: !3, line: 894, type: !17)
!4274 = !DILocation(line: 894, column: 38, scope: !4254)
!4275 = !DILocalVariable(name: "vectype", scope: !4254, file: !3, line: 895, type: !326)
!4276 = !DILocation(line: 895, column: 8, scope: !4254)
!4277 = !DILocalVariable(name: "scalar_type", scope: !4254, file: !3, line: 895, type: !326)
!4278 = !DILocation(line: 895, column: 17, scope: !4254)
!4279 = !DILocalVariable(name: "next", scope: !4254, file: !3, line: 896, type: !7)
!4280 = !DILocation(line: 896, column: 10, scope: !4254)
!4281 = !DILocalVariable(name: "vectorization_factor", scope: !4254, file: !3, line: 897, type: !17)
!4282 = !DILocation(line: 897, column: 16, scope: !4254)
!4283 = !DILocalVariable(name: "inside_cost", scope: !4254, file: !3, line: 898, type: !100)
!4284 = !DILocation(line: 898, column: 7, scope: !4254)
!4285 = !DILocalVariable(name: "outside_cost", scope: !4254, file: !3, line: 898, type: !100)
!4286 = !DILocation(line: 898, column: 24, scope: !4254)
!4287 = !DILocalVariable(name: "ncopies_for_cost", scope: !4254, file: !3, line: 898, type: !100)
!4288 = !DILocation(line: 898, column: 42, scope: !4254)
!4289 = !DILocalVariable(name: "max_nunits", scope: !4254, file: !3, line: 899, type: !17)
!4290 = !DILocation(line: 899, column: 16, scope: !4254)
!4291 = !DILocalVariable(name: "load_permutation", scope: !4254, file: !3, line: 900, type: !3735)
!4292 = !DILocation(line: 900, column: 20, scope: !4254)
!4293 = !DILocalVariable(name: "loads", scope: !4254, file: !3, line: 901, type: !3749)
!4294 = !DILocation(line: 901, column: 25, scope: !4254)
!4295 = !DILocation(line: 903, column: 17, scope: !4254)
!4296 = !DILocation(line: 903, column: 15, scope: !4254)
!4297 = !DILocation(line: 905, column: 42, scope: !4254)
!4298 = !DILocation(line: 905, column: 13, scope: !4254)
!4299 = !DILocation(line: 905, column: 11, scope: !4254)
!4300 = !DILocation(line: 906, column: 8, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 906, column: 7)
!4302 = !DILocation(line: 906, column: 7, scope: !4254)
!4303 = !DILocation(line: 908, column: 11, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4305, file: !3, line: 908, column: 11)
!4305 = distinct !DILexicalBlock(scope: !4301, file: !3, line: 907, column: 5)
!4306 = !DILocation(line: 908, column: 11, scope: !4305)
!4307 = !DILocation(line: 910, column: 20, scope: !4308)
!4308 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 909, column: 9)
!4309 = !DILocation(line: 910, column: 11, scope: !4308)
!4310 = !DILocation(line: 911, column: 31, scope: !4308)
!4311 = !DILocation(line: 911, column: 42, scope: !4308)
!4312 = !DILocation(line: 911, column: 11, scope: !4308)
!4313 = !DILocation(line: 912, column: 9, scope: !4308)
!4314 = !DILocation(line: 913, column: 7, scope: !4305)
!4315 = !DILocation(line: 916, column: 12, scope: !4254)
!4316 = !DILocation(line: 916, column: 10, scope: !4254)
!4317 = !DILocation(line: 917, column: 7, scope: !4318)
!4318 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 917, column: 7)
!4319 = !DILocation(line: 917, column: 7, scope: !4254)
!4320 = !DILocation(line: 918, column: 28, scope: !4318)
!4321 = !DILocation(line: 918, column: 26, scope: !4318)
!4322 = !DILocation(line: 918, column: 5, scope: !4318)
!4323 = !DILocation(line: 921, column: 28, scope: !4318)
!4324 = !DILocation(line: 921, column: 26, scope: !4318)
!4325 = !DILocation(line: 924, column: 45, scope: !4254)
!4326 = !DILocation(line: 924, column: 53, scope: !4254)
!4327 = !DILocation(line: 924, column: 22, scope: !4254)
!4328 = !DILocation(line: 924, column: 67, scope: !4254)
!4329 = !DILocation(line: 924, column: 65, scope: !4254)
!4330 = !DILocation(line: 924, column: 20, scope: !4254)
!4331 = !DILocation(line: 925, column: 7, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 925, column: 7)
!4333 = !DILocation(line: 925, column: 24, scope: !4332)
!4334 = !DILocation(line: 925, column: 29, scope: !4332)
!4335 = !DILocation(line: 925, column: 33, scope: !4332)
!4336 = !DILocation(line: 925, column: 7, scope: !4254)
!4337 = !DILocation(line: 927, column: 11, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 927, column: 11)
!4339 = distinct !DILexicalBlock(scope: !4332, file: !3, line: 926, column: 5)
!4340 = !DILocation(line: 927, column: 11, scope: !4339)
!4341 = !DILocation(line: 928, column: 18, scope: !4338)
!4342 = !DILocation(line: 928, column: 9, scope: !4338)
!4343 = !DILocation(line: 931, column: 7, scope: !4339)
!4344 = !DILocation(line: 935, column: 34, scope: !4254)
!4345 = !DILocation(line: 935, column: 3, scope: !4254)
!4346 = !DILocation(line: 935, column: 32, scope: !4254)
!4347 = !DILocation(line: 936, column: 10, scope: !4254)
!4348 = !DILocation(line: 936, column: 8, scope: !4254)
!4349 = !DILocation(line: 938, column: 3, scope: !4254)
!4350 = !DILocation(line: 938, column: 10, scope: !4254)
!4351 = !DILocation(line: 940, column: 7, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 939, column: 5)
!4353 = !DILocation(line: 941, column: 14, scope: !4352)
!4354 = !DILocation(line: 941, column: 12, scope: !4352)
!4355 = distinct !{!4355, !4349, !4356}
!4356 = !DILocation(line: 942, column: 5, scope: !4254)
!4357 = !DILocation(line: 944, column: 3, scope: !4254)
!4358 = !DILocation(line: 944, column: 29, scope: !4254)
!4359 = !DILocation(line: 945, column: 3, scope: !4254)
!4360 = !DILocation(line: 945, column: 39, scope: !4254)
!4361 = !DILocation(line: 946, column: 3, scope: !4254)
!4362 = !DILocation(line: 946, column: 24, scope: !4254)
!4363 = !DILocation(line: 947, column: 3, scope: !4254)
!4364 = !DILocation(line: 947, column: 25, scope: !4254)
!4365 = !DILocation(line: 948, column: 3, scope: !4254)
!4366 = !DILocation(line: 948, column: 40, scope: !4254)
!4367 = !DILocation(line: 949, column: 3, scope: !4254)
!4368 = !DILocation(line: 949, column: 39, scope: !4254)
!4369 = !DILocation(line: 954, column: 22, scope: !4254)
!4370 = !DILocation(line: 954, column: 41, scope: !4254)
!4371 = !DILocation(line: 954, column: 39, scope: !4254)
!4372 = !DILocation(line: 954, column: 54, scope: !4254)
!4373 = !DILocation(line: 954, column: 52, scope: !4254)
!4374 = !DILocation(line: 954, column: 20, scope: !4254)
!4375 = !DILocation(line: 956, column: 22, scope: !4254)
!4376 = !DILocation(line: 956, column: 20, scope: !4254)
!4377 = !DILocation(line: 957, column: 11, scope: !4254)
!4378 = !DILocation(line: 957, column: 9, scope: !4254)
!4379 = !DILocation(line: 960, column: 28, scope: !4380)
!4380 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 960, column: 7)
!4381 = !DILocation(line: 960, column: 40, scope: !4380)
!4382 = !DILocation(line: 960, column: 57, scope: !4380)
!4383 = !DILocation(line: 961, column: 57, scope: !4380)
!4384 = !DILocation(line: 963, column: 7, scope: !4380)
!4385 = !DILocation(line: 960, column: 7, scope: !4380)
!4386 = !DILocation(line: 960, column: 7, scope: !4254)
!4387 = !DILocation(line: 966, column: 22, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 964, column: 5)
!4389 = !DILocation(line: 966, column: 20, scope: !4388)
!4390 = !DILocation(line: 967, column: 42, scope: !4388)
!4391 = !DILocation(line: 967, column: 7, scope: !4388)
!4392 = !DILocation(line: 967, column: 40, scope: !4388)
!4393 = !DILocation(line: 968, column: 48, scope: !4388)
!4394 = !DILocation(line: 968, column: 7, scope: !4388)
!4395 = !DILocation(line: 968, column: 46, scope: !4388)
!4396 = !DILocation(line: 971, column: 11, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 971, column: 11)
!4398 = !DILocation(line: 971, column: 24, scope: !4397)
!4399 = !DILocation(line: 971, column: 22, scope: !4397)
!4400 = !DILocation(line: 971, column: 11, scope: !4388)
!4401 = !DILocation(line: 972, column: 51, scope: !4397)
!4402 = !DILocation(line: 972, column: 63, scope: !4397)
!4403 = !DILocation(line: 972, column: 28, scope: !4397)
!4404 = !DILocation(line: 973, column: 30, scope: !4397)
!4405 = !DILocation(line: 973, column: 28, scope: !4397)
!4406 = !DILocation(line: 972, column: 26, scope: !4397)
!4407 = !DILocation(line: 972, column: 9, scope: !4397)
!4408 = !DILocation(line: 975, column: 54, scope: !4388)
!4409 = !DILocation(line: 975, column: 7, scope: !4388)
!4410 = !DILocation(line: 975, column: 52, scope: !4388)
!4411 = !DILocation(line: 976, column: 58, scope: !4388)
!4412 = !DILocation(line: 976, column: 7, scope: !4388)
!4413 = !DILocation(line: 976, column: 56, scope: !4388)
!4414 = !DILocation(line: 977, column: 57, scope: !4388)
!4415 = !DILocation(line: 977, column: 7, scope: !4388)
!4416 = !DILocation(line: 977, column: 55, scope: !4388)
!4417 = !DILocation(line: 978, column: 43, scope: !4388)
!4418 = !DILocation(line: 978, column: 7, scope: !4388)
!4419 = !DILocation(line: 978, column: 41, scope: !4388)
!4420 = !DILocation(line: 979, column: 7, scope: !4388)
!4421 = !DILocation(line: 979, column: 51, scope: !4388)
!4422 = !DILocation(line: 980, column: 54, scope: !4388)
!4423 = !DILocation(line: 980, column: 7, scope: !4388)
!4424 = !DILocation(line: 980, column: 52, scope: !4388)
!4425 = !DILocation(line: 981, column: 11, scope: !4426)
!4426 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 981, column: 11)
!4427 = !DILocation(line: 981, column: 11, scope: !4388)
!4428 = !DILocation(line: 983, column: 51, scope: !4429)
!4429 = distinct !DILexicalBlock(scope: !4430, file: !3, line: 983, column: 15)
!4430 = distinct !DILexicalBlock(scope: !4426, file: !3, line: 982, column: 9)
!4431 = !DILocation(line: 983, column: 65, scope: !4429)
!4432 = !DILocation(line: 984, column: 51, scope: !4429)
!4433 = !DILocation(line: 983, column: 16, scope: !4429)
!4434 = !DILocation(line: 983, column: 15, scope: !4430)
!4435 = !DILocation(line: 986, column: 19, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 986, column: 19)
!4437 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 985, column: 13)
!4438 = !DILocation(line: 986, column: 19, scope: !4437)
!4439 = !DILocation(line: 988, column: 28, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 987, column: 17)
!4441 = !DILocation(line: 988, column: 19, scope: !4440)
!4442 = !DILocation(line: 990, column: 38, scope: !4440)
!4443 = !DILocation(line: 990, column: 49, scope: !4440)
!4444 = !DILocation(line: 990, column: 19, scope: !4440)
!4445 = !DILocation(line: 991, column: 17, scope: !4440)
!4446 = !DILocation(line: 993, column: 39, scope: !4437)
!4447 = !DILocation(line: 993, column: 15, scope: !4437)
!4448 = !DILocation(line: 994, column: 15, scope: !4437)
!4449 = !DILocation(line: 998, column: 54, scope: !4430)
!4450 = !DILocation(line: 998, column: 16, scope: !4430)
!4451 = !DILocation(line: 997, column: 11, scope: !4430)
!4452 = !DILocation(line: 998, column: 14, scope: !4430)
!4453 = !DILocation(line: 999, column: 9, scope: !4430)
!4454 = !DILocation(line: 1001, column: 9, scope: !4426)
!4455 = !DILocation(line: 1003, column: 11, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 1003, column: 11)
!4457 = !DILocation(line: 1003, column: 11, scope: !4388)
!4458 = !DILocation(line: 1004, column: 9, scope: !4456)
!4459 = !DILocation(line: 1008, column: 9, scope: !4456)
!4460 = !DILocation(line: 1011, column: 11, scope: !4461)
!4461 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 1011, column: 11)
!4462 = !DILocation(line: 1011, column: 11, scope: !4388)
!4463 = !DILocation(line: 1012, column: 23, scope: !4461)
!4464 = !DILocation(line: 1012, column: 2, scope: !4461)
!4465 = !DILocation(line: 1014, column: 7, scope: !4388)
!4466 = !DILocation(line: 1019, column: 23, scope: !4254)
!4467 = !DILocation(line: 1019, column: 3, scope: !4254)
!4468 = !DILocation(line: 1020, column: 3, scope: !4254)
!4469 = !DILocation(line: 1021, column: 3, scope: !4254)
!4470 = !DILocation(line: 1023, column: 3, scope: !4254)
!4471 = !DILocation(line: 1024, column: 1, scope: !4254)
!4472 = distinct !DISubprogram(name: "vect_make_slp_decision", scope: !3, file: !3, line: 1066, type: !4473, scopeLine: 1067, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4473 = !DISubroutineType(types: !4474)
!4474 = !{null, !3941}
!4475 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4472, file: !3, line: 1066, type: !3941)
!4476 = !DILocation(line: 1066, column: 39, scope: !4472)
!4477 = !DILocalVariable(name: "i", scope: !4472, file: !3, line: 1068, type: !17)
!4478 = !DILocation(line: 1068, column: 16, scope: !4472)
!4479 = !DILocalVariable(name: "unrolling_factor", scope: !4472, file: !3, line: 1068, type: !17)
!4480 = !DILocation(line: 1068, column: 19, scope: !4472)
!4481 = !DILocalVariable(name: "slp_instances", scope: !4472, file: !3, line: 1069, type: !3765)
!4482 = !DILocation(line: 1069, column: 29, scope: !4472)
!4483 = !DILocation(line: 1069, column: 45, scope: !4472)
!4484 = !DILocalVariable(name: "instance", scope: !4472, file: !3, line: 1070, type: !3777)
!4485 = !DILocation(line: 1070, column: 16, scope: !4472)
!4486 = !DILocalVariable(name: "decided_to_slp", scope: !4472, file: !3, line: 1071, type: !100)
!4487 = !DILocation(line: 1071, column: 7, scope: !4472)
!4488 = !DILocation(line: 1073, column: 7, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 1073, column: 7)
!4490 = !DILocation(line: 1073, column: 7, scope: !4472)
!4491 = !DILocation(line: 1074, column: 14, scope: !4489)
!4492 = !DILocation(line: 1074, column: 5, scope: !4489)
!4493 = !DILocation(line: 1076, column: 10, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 1076, column: 3)
!4495 = !DILocation(line: 1076, column: 8, scope: !4494)
!4496 = !DILocation(line: 1076, column: 15, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 1076, column: 3)
!4498 = !DILocation(line: 1076, column: 3, scope: !4494)
!4499 = !DILocation(line: 1079, column: 11, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4501, file: !3, line: 1079, column: 11)
!4501 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 1077, column: 5)
!4502 = !DILocation(line: 1079, column: 30, scope: !4500)
!4503 = !DILocation(line: 1079, column: 28, scope: !4500)
!4504 = !DILocation(line: 1079, column: 11, scope: !4501)
!4505 = !DILocation(line: 1080, column: 21, scope: !4500)
!4506 = !DILocation(line: 1080, column: 19, scope: !4500)
!4507 = !DILocation(line: 1080, column: 2, scope: !4500)
!4508 = !DILocation(line: 1085, column: 28, scope: !4501)
!4509 = !DILocation(line: 1085, column: 7, scope: !4501)
!4510 = !DILocation(line: 1086, column: 21, scope: !4501)
!4511 = !DILocation(line: 1087, column: 5, scope: !4501)
!4512 = !DILocation(line: 1076, column: 72, scope: !4497)
!4513 = !DILocation(line: 1076, column: 3, scope: !4497)
!4514 = distinct !{!4514, !4498, !4515}
!4515 = !DILocation(line: 1087, column: 5, scope: !4494)
!4516 = !DILocation(line: 1089, column: 50, scope: !4472)
!4517 = !DILocation(line: 1089, column: 3, scope: !4472)
!4518 = !DILocation(line: 1089, column: 48, scope: !4472)
!4519 = !DILocation(line: 1091, column: 7, scope: !4520)
!4520 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 1091, column: 7)
!4521 = !DILocation(line: 1091, column: 22, scope: !4520)
!4522 = !DILocation(line: 1091, column: 25, scope: !4520)
!4523 = !DILocation(line: 1091, column: 7, scope: !4472)
!4524 = !DILocation(line: 1092, column: 14, scope: !4520)
!4525 = !DILocation(line: 1093, column: 7, scope: !4520)
!4526 = !DILocation(line: 1093, column: 23, scope: !4520)
!4527 = !DILocation(line: 1092, column: 5, scope: !4520)
!4528 = !DILocation(line: 1094, column: 1, scope: !4472)
!4529 = distinct !DISubprogram(name: "VEC_slp_instance_base_iterate", scope: !1757, file: !1757, line: 152, type: !4530, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4530 = !DISubroutineType(types: !4531)
!4531 = !{!100, !4532, !17, !4534}
!4532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4533, size: 64)
!4533 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3770)
!4534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3777, size: 64)
!4535 = !DILocalVariable(name: "vec_", arg: 1, scope: !4529, file: !1757, line: 152, type: !4532)
!4536 = !DILocation(line: 152, column: 1, scope: !4529)
!4537 = !DILocalVariable(name: "ix_", arg: 2, scope: !4529, file: !1757, line: 152, type: !17)
!4538 = !DILocalVariable(name: "ptr", arg: 3, scope: !4529, file: !1757, line: 152, type: !4534)
!4539 = !DILocation(line: 152, column: 1, scope: !4540)
!4540 = distinct !DILexicalBlock(scope: !4529, file: !1757, line: 152, column: 1)
!4541 = !DILocation(line: 152, column: 1, scope: !4542)
!4542 = distinct !DILexicalBlock(scope: !4540, file: !1757, line: 152, column: 1)
!4543 = !DILocation(line: 152, column: 1, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4540, file: !1757, line: 152, column: 1)
!4545 = distinct !DISubprogram(name: "vect_mark_slp_stmts", scope: !3, file: !3, line: 688, type: !4546, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4546 = !DISubroutineType(types: !4547)
!4547 = !{null, !3726, !1770, !100}
!4548 = !DILocalVariable(name: "node", arg: 1, scope: !4545, file: !3, line: 688, type: !3726)
!4549 = !DILocation(line: 688, column: 31, scope: !4545)
!4550 = !DILocalVariable(name: "mark", arg: 2, scope: !4545, file: !3, line: 688, type: !1770)
!4551 = !DILocation(line: 688, column: 56, scope: !4545)
!4552 = !DILocalVariable(name: "j", arg: 3, scope: !4545, file: !3, line: 688, type: !100)
!4553 = !DILocation(line: 688, column: 66, scope: !4545)
!4554 = !DILocalVariable(name: "i", scope: !4545, file: !3, line: 690, type: !100)
!4555 = !DILocation(line: 690, column: 7, scope: !4545)
!4556 = !DILocalVariable(name: "stmt", scope: !4545, file: !3, line: 691, type: !7)
!4557 = !DILocation(line: 691, column: 10, scope: !4545)
!4558 = !DILocation(line: 693, column: 8, scope: !4559)
!4559 = distinct !DILexicalBlock(scope: !4545, file: !3, line: 693, column: 7)
!4560 = !DILocation(line: 693, column: 7, scope: !4545)
!4561 = !DILocation(line: 694, column: 5, scope: !4559)
!4562 = !DILocation(line: 696, column: 10, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4545, file: !3, line: 696, column: 3)
!4564 = !DILocation(line: 696, column: 8, scope: !4563)
!4565 = !DILocation(line: 696, column: 15, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 696, column: 3)
!4567 = !DILocation(line: 696, column: 3, scope: !4563)
!4568 = !DILocation(line: 697, column: 9, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4566, file: !3, line: 697, column: 9)
!4570 = !DILocation(line: 697, column: 11, scope: !4569)
!4571 = !DILocation(line: 697, column: 15, scope: !4569)
!4572 = !DILocation(line: 697, column: 18, scope: !4569)
!4573 = !DILocation(line: 697, column: 23, scope: !4569)
!4574 = !DILocation(line: 697, column: 20, scope: !4569)
!4575 = !DILocation(line: 697, column: 9, scope: !4566)
!4576 = !DILocation(line: 698, column: 47, scope: !4569)
!4577 = !DILocation(line: 698, column: 7, scope: !4569)
!4578 = !DILocation(line: 698, column: 45, scope: !4569)
!4579 = !DILocation(line: 696, column: 77, scope: !4566)
!4580 = !DILocation(line: 696, column: 3, scope: !4566)
!4581 = distinct !{!4581, !4567, !4582}
!4582 = !DILocation(line: 698, column: 47, scope: !4563)
!4583 = !DILocation(line: 700, column: 24, scope: !4545)
!4584 = !DILocation(line: 700, column: 46, scope: !4545)
!4585 = !DILocation(line: 700, column: 52, scope: !4545)
!4586 = !DILocation(line: 700, column: 3, scope: !4545)
!4587 = !DILocation(line: 701, column: 24, scope: !4545)
!4588 = !DILocation(line: 701, column: 47, scope: !4545)
!4589 = !DILocation(line: 701, column: 53, scope: !4545)
!4590 = !DILocation(line: 701, column: 3, scope: !4545)
!4591 = !DILocation(line: 702, column: 1, scope: !4545)
!4592 = distinct !DISubprogram(name: "vect_detect_hybrid_slp", scope: !3, file: !3, line: 1130, type: !4473, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4593 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4592, file: !3, line: 1130, type: !3941)
!4594 = !DILocation(line: 1130, column: 39, scope: !4592)
!4595 = !DILocalVariable(name: "i", scope: !4592, file: !3, line: 1132, type: !17)
!4596 = !DILocation(line: 1132, column: 16, scope: !4592)
!4597 = !DILocalVariable(name: "slp_instances", scope: !4592, file: !3, line: 1133, type: !3765)
!4598 = !DILocation(line: 1133, column: 29, scope: !4592)
!4599 = !DILocation(line: 1133, column: 45, scope: !4592)
!4600 = !DILocalVariable(name: "instance", scope: !4592, file: !3, line: 1134, type: !3777)
!4601 = !DILocation(line: 1134, column: 16, scope: !4592)
!4602 = !DILocation(line: 1136, column: 7, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 1136, column: 7)
!4604 = !DILocation(line: 1136, column: 7, scope: !4592)
!4605 = !DILocation(line: 1137, column: 14, scope: !4603)
!4606 = !DILocation(line: 1137, column: 5, scope: !4603)
!4607 = !DILocation(line: 1139, column: 10, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 1139, column: 3)
!4609 = !DILocation(line: 1139, column: 8, scope: !4608)
!4610 = !DILocation(line: 1139, column: 15, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4608, file: !3, line: 1139, column: 3)
!4612 = !DILocation(line: 1139, column: 3, scope: !4608)
!4613 = !DILocation(line: 1140, column: 35, scope: !4611)
!4614 = !DILocation(line: 1140, column: 5, scope: !4611)
!4615 = !DILocation(line: 1139, column: 72, scope: !4611)
!4616 = !DILocation(line: 1139, column: 3, scope: !4611)
!4617 = distinct !{!4617, !4612, !4618}
!4618 = !DILocation(line: 1140, column: 63, scope: !4608)
!4619 = !DILocation(line: 1141, column: 1, scope: !4592)
!4620 = distinct !DISubprogram(name: "vect_detect_hybrid_slp_stmts", scope: !3, file: !3, line: 1101, type: !4135, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4621 = !DILocalVariable(name: "node", arg: 1, scope: !4620, file: !3, line: 1101, type: !3726)
!4622 = !DILocation(line: 1101, column: 40, scope: !4620)
!4623 = !DILocalVariable(name: "i", scope: !4620, file: !3, line: 1103, type: !100)
!4624 = !DILocation(line: 1103, column: 7, scope: !4620)
!4625 = !DILocalVariable(name: "stmt", scope: !4620, file: !3, line: 1104, type: !7)
!4626 = !DILocation(line: 1104, column: 10, scope: !4620)
!4627 = !DILocalVariable(name: "imm_iter", scope: !4620, file: !3, line: 1105, type: !4628)
!4628 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !529, line: 249, baseType: !4629)
!4629 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !529, line: 238, size: 448, elements: !4630)
!4630 = !{!4631, !4632, !4633, !4634}
!4631 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !4629, file: !529, line: 241, baseType: !3779, size: 64)
!4632 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !4629, file: !529, line: 243, baseType: !3779, size: 64, offset: 64)
!4633 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !4629, file: !529, line: 245, baseType: !3780, size: 256, offset: 128)
!4634 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !4629, file: !529, line: 248, baseType: !3779, size: 64, offset: 384)
!4635 = !DILocation(line: 1105, column: 20, scope: !4620)
!4636 = !DILocalVariable(name: "use_stmt", scope: !4620, file: !3, line: 1106, type: !7)
!4637 = !DILocation(line: 1106, column: 10, scope: !4620)
!4638 = !DILocalVariable(name: "stmt_vinfo", scope: !4620, file: !3, line: 1107, type: !3934)
!4639 = !DILocation(line: 1107, column: 17, scope: !4620)
!4640 = !DILocation(line: 1109, column: 8, scope: !4641)
!4641 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 1109, column: 7)
!4642 = !DILocation(line: 1109, column: 7, scope: !4620)
!4643 = !DILocation(line: 1110, column: 5, scope: !4641)
!4644 = !DILocation(line: 1112, column: 10, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 1112, column: 3)
!4646 = !DILocation(line: 1112, column: 8, scope: !4645)
!4647 = !DILocation(line: 1112, column: 15, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4645, file: !3, line: 1112, column: 3)
!4649 = !DILocation(line: 1112, column: 3, scope: !4645)
!4650 = !DILocation(line: 1113, column: 9, scope: !4651)
!4651 = distinct !DILexicalBlock(scope: !4648, file: !3, line: 1113, column: 9)
!4652 = !DILocation(line: 1114, column: 2, scope: !4651)
!4653 = !DILocation(line: 1114, column: 5, scope: !4651)
!4654 = !DILocation(line: 1114, column: 37, scope: !4651)
!4655 = !DILocation(line: 1113, column: 9, scope: !4648)
!4656 = !DILocation(line: 1115, column: 7, scope: !4657)
!4657 = distinct !DILexicalBlock(scope: !4651, file: !3, line: 1115, column: 7)
!4658 = !DILocation(line: 1115, column: 7, scope: !4659)
!4659 = distinct !DILexicalBlock(scope: !4657, file: !3, line: 1115, column: 7)
!4660 = !DILocation(line: 1116, column: 36, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4659, file: !3, line: 1116, column: 6)
!4662 = !DILocation(line: 1116, column: 20, scope: !4661)
!4663 = !DILocation(line: 1116, column: 18, scope: !4661)
!4664 = !DILocation(line: 1117, column: 6, scope: !4661)
!4665 = !DILocation(line: 1117, column: 10, scope: !4661)
!4666 = !DILocation(line: 1118, column: 13, scope: !4661)
!4667 = !DILocation(line: 1118, column: 17, scope: !4661)
!4668 = !DILocation(line: 1119, column: 17, scope: !4661)
!4669 = !DILocation(line: 1119, column: 20, scope: !4661)
!4670 = !DILocation(line: 1116, column: 6, scope: !4659)
!4671 = !DILocation(line: 1120, column: 25, scope: !4661)
!4672 = !DILocation(line: 1120, column: 39, scope: !4661)
!4673 = !DILocation(line: 1120, column: 4, scope: !4661)
!4674 = !DILocation(line: 1119, column: 77, scope: !4661)
!4675 = distinct !{!4675, !4656, !4676}
!4676 = !DILocation(line: 1120, column: 40, scope: !4657)
!4677 = !DILocation(line: 1114, column: 40, scope: !4651)
!4678 = !DILocation(line: 1112, column: 77, scope: !4648)
!4679 = !DILocation(line: 1112, column: 3, scope: !4648)
!4680 = distinct !{!4680, !4649, !4681}
!4681 = !DILocation(line: 1120, column: 40, scope: !4645)
!4682 = !DILocation(line: 1122, column: 33, scope: !4620)
!4683 = !DILocation(line: 1122, column: 3, scope: !4620)
!4684 = !DILocation(line: 1123, column: 33, scope: !4620)
!4685 = !DILocation(line: 1123, column: 3, scope: !4620)
!4686 = !DILocation(line: 1124, column: 1, scope: !4620)
!4687 = distinct !DISubprogram(name: "vect_slp_analyze_bb", scope: !3, file: !3, line: 1265, type: !4688, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4688 = !DISubroutineType(types: !4689)
!4689 = !{!3781, !589}
!4690 = !DILocalVariable(name: "bb", arg: 1, scope: !4687, file: !3, line: 1265, type: !589)
!4691 = !DILocation(line: 1265, column: 34, scope: !4687)
!4692 = !DILocalVariable(name: "bb_vinfo", scope: !4687, file: !3, line: 1267, type: !3781)
!4693 = !DILocation(line: 1267, column: 15, scope: !4687)
!4694 = !DILocalVariable(name: "ddrs", scope: !4687, file: !3, line: 1268, type: !3861)
!4695 = !DILocation(line: 1268, column: 22, scope: !4687)
!4696 = !DILocalVariable(name: "slp_instances", scope: !4687, file: !3, line: 1269, type: !3765)
!4697 = !DILocation(line: 1269, column: 29, scope: !4687)
!4698 = !DILocalVariable(name: "instance", scope: !4687, file: !3, line: 1270, type: !3777)
!4699 = !DILocation(line: 1270, column: 16, scope: !4687)
!4700 = !DILocalVariable(name: "i", scope: !4687, file: !3, line: 1271, type: !100)
!4701 = !DILocation(line: 1271, column: 7, scope: !4687)
!4702 = !DILocalVariable(name: "insns", scope: !4687, file: !3, line: 1271, type: !100)
!4703 = !DILocation(line: 1271, column: 10, scope: !4687)
!4704 = !DILocalVariable(name: "gsi", scope: !4687, file: !3, line: 1272, type: !4024)
!4705 = !DILocation(line: 1272, column: 24, scope: !4687)
!4706 = !DILocation(line: 1274, column: 7, scope: !4707)
!4707 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1274, column: 7)
!4708 = !DILocation(line: 1274, column: 7, scope: !4687)
!4709 = !DILocation(line: 1275, column: 14, scope: !4707)
!4710 = !DILocation(line: 1275, column: 5, scope: !4707)
!4711 = !DILocation(line: 1277, column: 28, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1277, column: 3)
!4713 = !DILocation(line: 1277, column: 14, scope: !4712)
!4714 = !DILocation(line: 1277, column: 8, scope: !4712)
!4715 = !DILocation(line: 1277, column: 34, scope: !4716)
!4716 = distinct !DILexicalBlock(scope: !4712, file: !3, line: 1277, column: 3)
!4717 = !DILocation(line: 1277, column: 33, scope: !4716)
!4718 = !DILocation(line: 1277, column: 3, scope: !4712)
!4719 = !DILocalVariable(name: "stmt", scope: !4720, file: !3, line: 1279, type: !7)
!4720 = distinct !DILexicalBlock(scope: !4716, file: !3, line: 1278, column: 5)
!4721 = !DILocation(line: 1279, column: 14, scope: !4720)
!4722 = !DILocation(line: 1279, column: 21, scope: !4720)
!4723 = !DILocation(line: 1280, column: 29, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4720, file: !3, line: 1280, column: 11)
!4725 = !DILocation(line: 1280, column: 12, scope: !4724)
!4726 = !DILocation(line: 1281, column: 4, scope: !4724)
!4727 = !DILocation(line: 1281, column: 22, scope: !4724)
!4728 = !DILocation(line: 1281, column: 8, scope: !4724)
!4729 = !DILocation(line: 1282, column: 4, scope: !4724)
!4730 = !DILocation(line: 1282, column: 20, scope: !4724)
!4731 = !DILocation(line: 1282, column: 7, scope: !4724)
!4732 = !DILocation(line: 1282, column: 26, scope: !4724)
!4733 = !DILocation(line: 1280, column: 11, scope: !4720)
!4734 = !DILocation(line: 1283, column: 7, scope: !4724)
!4735 = !DILocation(line: 1283, column: 2, scope: !4724)
!4736 = !DILocation(line: 1284, column: 5, scope: !4720)
!4737 = !DILocation(line: 1277, column: 51, scope: !4716)
!4738 = !DILocation(line: 1277, column: 3, scope: !4716)
!4739 = distinct !{!4739, !4718, !4740}
!4740 = !DILocation(line: 1284, column: 5, scope: !4712)
!4741 = !DILocation(line: 1286, column: 7, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1286, column: 7)
!4743 = !DILocation(line: 1286, column: 15, scope: !4742)
!4744 = !DILocation(line: 1286, column: 13, scope: !4742)
!4745 = !DILocation(line: 1286, column: 7, scope: !4687)
!4746 = !DILocation(line: 1288, column: 11, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !4748, file: !3, line: 1288, column: 11)
!4748 = distinct !DILexicalBlock(scope: !4742, file: !3, line: 1287, column: 5)
!4749 = !DILocation(line: 1288, column: 11, scope: !4748)
!4750 = !DILocation(line: 1289, column: 18, scope: !4747)
!4751 = !DILocation(line: 1289, column: 9, scope: !4747)
!4752 = !DILocation(line: 1292, column: 7, scope: !4748)
!4753 = !DILocation(line: 1295, column: 31, scope: !4687)
!4754 = !DILocation(line: 1295, column: 14, scope: !4687)
!4755 = !DILocation(line: 1295, column: 12, scope: !4687)
!4756 = !DILocation(line: 1296, column: 8, scope: !4757)
!4757 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1296, column: 7)
!4758 = !DILocation(line: 1296, column: 7, scope: !4687)
!4759 = !DILocation(line: 1297, column: 5, scope: !4757)
!4760 = !DILocation(line: 1299, column: 38, scope: !4761)
!4761 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1299, column: 7)
!4762 = !DILocation(line: 1299, column: 8, scope: !4761)
!4763 = !DILocation(line: 1299, column: 7, scope: !4687)
!4764 = !DILocation(line: 1301, column: 11, scope: !4765)
!4765 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 1301, column: 11)
!4766 = distinct !DILexicalBlock(scope: !4761, file: !3, line: 1300, column: 5)
!4767 = !DILocation(line: 1301, column: 11, scope: !4766)
!4768 = !DILocation(line: 1302, column: 18, scope: !4765)
!4769 = !DILocation(line: 1302, column: 9, scope: !4765)
!4770 = !DILocation(line: 1305, column: 28, scope: !4766)
!4771 = !DILocation(line: 1305, column: 7, scope: !4766)
!4772 = !DILocation(line: 1306, column: 7, scope: !4766)
!4773 = !DILocation(line: 1309, column: 10, scope: !4687)
!4774 = !DILocation(line: 1309, column: 8, scope: !4687)
!4775 = !DILocation(line: 1310, column: 8, scope: !4776)
!4776 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1310, column: 7)
!4777 = !DILocation(line: 1310, column: 7, scope: !4687)
!4778 = !DILocation(line: 1312, column: 11, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 1312, column: 11)
!4780 = distinct !DILexicalBlock(scope: !4776, file: !3, line: 1311, column: 5)
!4781 = !DILocation(line: 1312, column: 11, scope: !4780)
!4782 = !DILocation(line: 1313, column: 18, scope: !4779)
!4783 = !DILocation(line: 1313, column: 9, scope: !4779)
!4784 = !DILocation(line: 1316, column: 28, scope: !4780)
!4785 = !DILocation(line: 1316, column: 7, scope: !4780)
!4786 = !DILocation(line: 1317, column: 7, scope: !4780)
!4787 = !DILocation(line: 1320, column: 48, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1320, column: 7)
!4789 = !DILocation(line: 1320, column: 8, scope: !4788)
!4790 = !DILocation(line: 1320, column: 7, scope: !4687)
!4791 = !DILocation(line: 1322, column: 11, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4793, file: !3, line: 1322, column: 11)
!4793 = distinct !DILexicalBlock(scope: !4788, file: !3, line: 1321, column: 5)
!4794 = !DILocation(line: 1322, column: 11, scope: !4793)
!4795 = !DILocation(line: 1323, column: 18, scope: !4792)
!4796 = !DILocation(line: 1323, column: 9, scope: !4792)
!4797 = !DILocation(line: 1326, column: 28, scope: !4793)
!4798 = !DILocation(line: 1326, column: 7, scope: !4793)
!4799 = !DILocation(line: 1327, column: 7, scope: !4793)
!4800 = !DILocation(line: 1330, column: 50, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1330, column: 8)
!4802 = !DILocation(line: 1330, column: 9, scope: !4801)
!4803 = !DILocation(line: 1330, column: 8, scope: !4687)
!4804 = !DILocation(line: 1332, column: 10, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4806, file: !3, line: 1332, column: 10)
!4806 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 1331, column: 5)
!4807 = !DILocation(line: 1332, column: 10, scope: !4806)
!4808 = !DILocation(line: 1333, column: 17, scope: !4805)
!4809 = !DILocation(line: 1333, column: 8, scope: !4805)
!4810 = !DILocation(line: 1336, column: 28, scope: !4806)
!4811 = !DILocation(line: 1336, column: 7, scope: !4806)
!4812 = !DILocation(line: 1337, column: 7, scope: !4806)
!4813 = !DILocation(line: 1340, column: 46, scope: !4814)
!4814 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1340, column: 7)
!4815 = !DILocation(line: 1340, column: 8, scope: !4814)
!4816 = !DILocation(line: 1340, column: 7, scope: !4687)
!4817 = !DILocation(line: 1342, column: 10, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4819, file: !3, line: 1342, column: 10)
!4819 = distinct !DILexicalBlock(scope: !4814, file: !3, line: 1341, column: 5)
!4820 = !DILocation(line: 1342, column: 10, scope: !4819)
!4821 = !DILocation(line: 1343, column: 17, scope: !4818)
!4822 = !DILocation(line: 1343, column: 8, scope: !4818)
!4823 = !DILocation(line: 1346, column: 28, scope: !4819)
!4824 = !DILocation(line: 1346, column: 7, scope: !4819)
!4825 = !DILocation(line: 1347, column: 7, scope: !4819)
!4826 = !DILocation(line: 1350, column: 47, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1350, column: 8)
!4828 = !DILocation(line: 1350, column: 9, scope: !4827)
!4829 = !DILocation(line: 1350, column: 8, scope: !4687)
!4830 = !DILocation(line: 1352, column: 11, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4832, file: !3, line: 1352, column: 11)
!4832 = distinct !DILexicalBlock(scope: !4827, file: !3, line: 1351, column: 5)
!4833 = !DILocation(line: 1352, column: 11, scope: !4832)
!4834 = !DILocation(line: 1353, column: 18, scope: !4831)
!4835 = !DILocation(line: 1353, column: 9, scope: !4831)
!4836 = !DILocation(line: 1356, column: 28, scope: !4832)
!4837 = !DILocation(line: 1356, column: 7, scope: !4832)
!4838 = !DILocation(line: 1357, column: 7, scope: !4832)
!4839 = !DILocation(line: 1362, column: 32, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1362, column: 7)
!4841 = !DILocation(line: 1362, column: 8, scope: !4840)
!4842 = !DILocation(line: 1362, column: 7, scope: !4687)
!4843 = !DILocation(line: 1364, column: 11, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 1364, column: 11)
!4845 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 1363, column: 5)
!4846 = !DILocation(line: 1364, column: 11, scope: !4845)
!4847 = !DILocation(line: 1365, column: 18, scope: !4844)
!4848 = !DILocation(line: 1365, column: 9, scope: !4844)
!4849 = !DILocation(line: 1368, column: 28, scope: !4845)
!4850 = !DILocation(line: 1368, column: 7, scope: !4845)
!4851 = !DILocation(line: 1369, column: 7, scope: !4845)
!4852 = !DILocation(line: 1372, column: 19, scope: !4687)
!4853 = !DILocation(line: 1372, column: 17, scope: !4687)
!4854 = !DILocation(line: 1376, column: 10, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1376, column: 3)
!4856 = !DILocation(line: 1376, column: 8, scope: !4855)
!4857 = !DILocation(line: 1376, column: 15, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4855, file: !3, line: 1376, column: 3)
!4859 = !DILocation(line: 1376, column: 3, scope: !4855)
!4860 = !DILocation(line: 1378, column: 28, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 1377, column: 5)
!4862 = !DILocation(line: 1378, column: 7, scope: !4861)
!4863 = !DILocation(line: 1379, column: 37, scope: !4861)
!4864 = !DILocation(line: 1379, column: 7, scope: !4861)
!4865 = !DILocation(line: 1380, column: 5, scope: !4861)
!4866 = !DILocation(line: 1376, column: 72, scope: !4858)
!4867 = !DILocation(line: 1376, column: 3, scope: !4858)
!4868 = distinct !{!4868, !4859, !4869}
!4869 = !DILocation(line: 1380, column: 5, scope: !4855)
!4870 = !DILocation(line: 1382, column: 37, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1382, column: 7)
!4872 = !DILocation(line: 1382, column: 8, scope: !4871)
!4873 = !DILocation(line: 1382, column: 7, scope: !4687)
!4874 = !DILocation(line: 1384, column: 11, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4876, file: !3, line: 1384, column: 11)
!4876 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 1383, column: 5)
!4877 = !DILocation(line: 1384, column: 11, scope: !4876)
!4878 = !DILocation(line: 1385, column: 18, scope: !4875)
!4879 = !DILocation(line: 1385, column: 9, scope: !4875)
!4880 = !DILocation(line: 1387, column: 28, scope: !4876)
!4881 = !DILocation(line: 1387, column: 7, scope: !4876)
!4882 = !DILocation(line: 1388, column: 7, scope: !4876)
!4883 = !DILocation(line: 1391, column: 7, scope: !4884)
!4884 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1391, column: 7)
!4885 = !DILocation(line: 1391, column: 7, scope: !4687)
!4886 = !DILocation(line: 1392, column: 14, scope: !4884)
!4887 = !DILocation(line: 1392, column: 5, scope: !4884)
!4888 = !DILocation(line: 1394, column: 10, scope: !4687)
!4889 = !DILocation(line: 1394, column: 3, scope: !4687)
!4890 = !DILocation(line: 1395, column: 1, scope: !4687)
!4891 = distinct !DISubprogram(name: "is_gimple_debug", scope: !11, file: !11, line: 3249, type: !4892, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4892 = !DISubroutineType(types: !4893)
!4893 = !{!6, !4104}
!4894 = !DILocalVariable(name: "gs", arg: 1, scope: !4891, file: !11, line: 3249, type: !4104)
!4895 = !DILocation(line: 3249, column: 31, scope: !4891)
!4896 = !DILocation(line: 3251, column: 23, scope: !4891)
!4897 = !DILocation(line: 3251, column: 10, scope: !4891)
!4898 = !DILocation(line: 3251, column: 27, scope: !4891)
!4899 = !DILocation(line: 3251, column: 3, scope: !4891)
!4900 = distinct !DISubprogram(name: "gimple_nop_p", scope: !11, file: !11, line: 4304, type: !4892, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4901 = !DILocalVariable(name: "g", arg: 1, scope: !4900, file: !11, line: 4304, type: !4104)
!4902 = !DILocation(line: 4304, column: 28, scope: !4900)
!4903 = !DILocation(line: 4306, column: 23, scope: !4900)
!4904 = !DILocation(line: 4306, column: 10, scope: !4900)
!4905 = !DILocation(line: 4306, column: 26, scope: !4900)
!4906 = !DILocation(line: 4306, column: 3, scope: !4900)
!4907 = distinct !DISubprogram(name: "gimple_code", scope: !11, file: !11, line: 1052, type: !4908, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4908 = !DISubroutineType(types: !4909)
!4909 = !{!1775, !4104}
!4910 = !DILocalVariable(name: "g", arg: 1, scope: !4907, file: !11, line: 1052, type: !4104)
!4911 = !DILocation(line: 1052, column: 27, scope: !4907)
!4912 = !DILocation(line: 1054, column: 10, scope: !4907)
!4913 = !DILocation(line: 1054, column: 13, scope: !4907)
!4914 = !DILocation(line: 1054, column: 20, scope: !4907)
!4915 = !DILocation(line: 1054, column: 3, scope: !4907)
!4916 = distinct !DISubprogram(name: "new_bb_vec_info", scope: !3, file: !3, line: 1148, type: !4688, scopeLine: 1149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4917 = !DILocalVariable(name: "bb", arg: 1, scope: !4916, file: !3, line: 1148, type: !589)
!4918 = !DILocation(line: 1148, column: 30, scope: !4916)
!4919 = !DILocalVariable(name: "res", scope: !4916, file: !3, line: 1150, type: !3781)
!4920 = !DILocation(line: 1150, column: 15, scope: !4916)
!4921 = !DILocalVariable(name: "gsi", scope: !4916, file: !3, line: 1151, type: !4024)
!4922 = !DILocation(line: 1151, column: 24, scope: !4916)
!4923 = !DILocation(line: 1153, column: 23, scope: !4916)
!4924 = !DILocation(line: 1153, column: 9, scope: !4916)
!4925 = !DILocation(line: 1153, column: 7, scope: !4916)
!4926 = !DILocation(line: 1154, column: 23, scope: !4916)
!4927 = !DILocation(line: 1154, column: 3, scope: !4916)
!4928 = !DILocation(line: 1154, column: 21, scope: !4916)
!4929 = !DILocation(line: 1156, column: 28, scope: !4930)
!4930 = distinct !DILexicalBlock(scope: !4916, file: !3, line: 1156, column: 3)
!4931 = !DILocation(line: 1156, column: 14, scope: !4930)
!4932 = !DILocation(line: 1156, column: 8, scope: !4930)
!4933 = !DILocation(line: 1156, column: 34, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4930, file: !3, line: 1156, column: 3)
!4935 = !DILocation(line: 1156, column: 33, scope: !4934)
!4936 = !DILocation(line: 1156, column: 3, scope: !4930)
!4937 = !DILocalVariable(name: "stmt", scope: !4938, file: !3, line: 1158, type: !7)
!4938 = distinct !DILexicalBlock(scope: !4934, file: !3, line: 1157, column: 5)
!4939 = !DILocation(line: 1158, column: 14, scope: !4938)
!4940 = !DILocation(line: 1158, column: 21, scope: !4938)
!4941 = !DILocation(line: 1159, column: 23, scope: !4938)
!4942 = !DILocation(line: 1159, column: 7, scope: !4938)
!4943 = !DILocation(line: 1160, column: 27, scope: !4938)
!4944 = !DILocation(line: 1160, column: 52, scope: !4938)
!4945 = !DILocation(line: 1160, column: 64, scope: !4938)
!4946 = !DILocation(line: 1160, column: 33, scope: !4938)
!4947 = !DILocation(line: 1160, column: 7, scope: !4938)
!4948 = !DILocation(line: 1161, column: 5, scope: !4938)
!4949 = !DILocation(line: 1156, column: 51, scope: !4934)
!4950 = !DILocation(line: 1156, column: 3, scope: !4934)
!4951 = distinct !{!4951, !4936, !4952}
!4952 = !DILocation(line: 1161, column: 5, scope: !4930)
!4953 = !DILocation(line: 1163, column: 35, scope: !4916)
!4954 = !DILocation(line: 1163, column: 3, scope: !4916)
!4955 = !DILocation(line: 1163, column: 33, scope: !4916)
!4956 = !DILocation(line: 1164, column: 34, scope: !4916)
!4957 = !DILocation(line: 1164, column: 3, scope: !4916)
!4958 = !DILocation(line: 1164, column: 32, scope: !4916)
!4959 = !DILocation(line: 1166, column: 13, scope: !4916)
!4960 = !DILocation(line: 1166, column: 3, scope: !4916)
!4961 = !DILocation(line: 1166, column: 7, scope: !4916)
!4962 = !DILocation(line: 1166, column: 11, scope: !4916)
!4963 = !DILocation(line: 1167, column: 10, scope: !4916)
!4964 = !DILocation(line: 1167, column: 3, scope: !4916)
!4965 = distinct !DISubprogram(name: "destroy_bb_vec_info", scope: !3, file: !3, line: 1175, type: !4966, scopeLine: 1176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!4966 = !DISubroutineType(types: !4967)
!4967 = !{null, !3781}
!4968 = !DILocalVariable(name: "bb_vinfo", arg: 1, scope: !4965, file: !3, line: 1175, type: !3781)
!4969 = !DILocation(line: 1175, column: 34, scope: !4965)
!4970 = !DILocalVariable(name: "bb", scope: !4965, file: !3, line: 1177, type: !589)
!4971 = !DILocation(line: 1177, column: 15, scope: !4965)
!4972 = !DILocalVariable(name: "si", scope: !4965, file: !3, line: 1178, type: !4024)
!4973 = !DILocation(line: 1178, column: 24, scope: !4965)
!4974 = !DILocation(line: 1180, column: 8, scope: !4975)
!4975 = distinct !DILexicalBlock(scope: !4965, file: !3, line: 1180, column: 7)
!4976 = !DILocation(line: 1180, column: 7, scope: !4965)
!4977 = !DILocation(line: 1181, column: 5, scope: !4975)
!4978 = !DILocation(line: 1183, column: 8, scope: !4965)
!4979 = !DILocation(line: 1183, column: 6, scope: !4965)
!4980 = !DILocation(line: 1185, column: 27, scope: !4981)
!4981 = distinct !DILexicalBlock(scope: !4965, file: !3, line: 1185, column: 3)
!4982 = !DILocation(line: 1185, column: 13, scope: !4981)
!4983 = !DILocation(line: 1185, column: 8, scope: !4981)
!4984 = !DILocation(line: 1185, column: 33, scope: !4985)
!4985 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 1185, column: 3)
!4986 = !DILocation(line: 1185, column: 32, scope: !4985)
!4987 = !DILocation(line: 1185, column: 3, scope: !4981)
!4988 = !DILocalVariable(name: "stmt", scope: !4989, file: !3, line: 1187, type: !7)
!4989 = distinct !DILexicalBlock(scope: !4985, file: !3, line: 1186, column: 5)
!4990 = !DILocation(line: 1187, column: 14, scope: !4989)
!4991 = !DILocation(line: 1187, column: 21, scope: !4989)
!4992 = !DILocalVariable(name: "stmt_info", scope: !4989, file: !3, line: 1188, type: !3934)
!4993 = !DILocation(line: 1188, column: 21, scope: !4989)
!4994 = !DILocation(line: 1188, column: 49, scope: !4989)
!4995 = !DILocation(line: 1188, column: 33, scope: !4989)
!4996 = !DILocation(line: 1190, column: 11, scope: !4997)
!4997 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 1190, column: 11)
!4998 = !DILocation(line: 1190, column: 11, scope: !4989)
!4999 = !DILocation(line: 1192, column: 29, scope: !4997)
!5000 = !DILocation(line: 1192, column: 9, scope: !4997)
!5001 = !DILocation(line: 1193, column: 5, scope: !4989)
!5002 = !DILocation(line: 1185, column: 49, scope: !4985)
!5003 = !DILocation(line: 1185, column: 3, scope: !4985)
!5004 = distinct !{!5004, !4987, !5005}
!5005 = !DILocation(line: 1193, column: 5, scope: !4981)
!5006 = !DILocation(line: 1195, column: 3, scope: !4965)
!5007 = !DILocation(line: 1196, column: 3, scope: !4965)
!5008 = !DILocation(line: 1197, column: 9, scope: !4965)
!5009 = !DILocation(line: 1197, column: 3, scope: !4965)
!5010 = !DILocation(line: 1198, column: 3, scope: !4965)
!5011 = !DILocation(line: 1198, column: 7, scope: !4965)
!5012 = !DILocation(line: 1198, column: 11, scope: !4965)
!5013 = !DILocation(line: 1199, column: 1, scope: !4965)
!5014 = distinct !DISubprogram(name: "VEC_ddr_p_base_length", scope: !3791, file: !3791, line: 332, type: !5015, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5015 = !DISubroutineType(types: !5016)
!5016 = !{!17, !5017}
!5017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5018, size: 64)
!5018 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3866)
!5019 = !DILocalVariable(name: "vec_", arg: 1, scope: !5014, file: !3791, line: 332, type: !5017)
!5020 = !DILocation(line: 332, column: 1, scope: !5014)
!5021 = distinct !DISubprogram(name: "vect_mark_slp_stmts_relevant", scope: !3, file: !3, line: 708, type: !4135, scopeLine: 709, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5022 = !DILocalVariable(name: "node", arg: 1, scope: !5021, file: !3, line: 708, type: !3726)
!5023 = !DILocation(line: 708, column: 40, scope: !5021)
!5024 = !DILocalVariable(name: "i", scope: !5021, file: !3, line: 710, type: !100)
!5025 = !DILocation(line: 710, column: 7, scope: !5021)
!5026 = !DILocalVariable(name: "stmt", scope: !5021, file: !3, line: 711, type: !7)
!5027 = !DILocation(line: 711, column: 10, scope: !5021)
!5028 = !DILocalVariable(name: "stmt_info", scope: !5021, file: !3, line: 712, type: !3934)
!5029 = !DILocation(line: 712, column: 17, scope: !5021)
!5030 = !DILocation(line: 714, column: 8, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !5021, file: !3, line: 714, column: 7)
!5032 = !DILocation(line: 714, column: 7, scope: !5021)
!5033 = !DILocation(line: 715, column: 5, scope: !5031)
!5034 = !DILocation(line: 717, column: 10, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !5021, file: !3, line: 717, column: 3)
!5036 = !DILocation(line: 717, column: 8, scope: !5035)
!5037 = !DILocation(line: 717, column: 15, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 717, column: 3)
!5039 = !DILocation(line: 717, column: 3, scope: !5035)
!5040 = !DILocation(line: 719, column: 35, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !5038, file: !3, line: 718, column: 5)
!5042 = !DILocation(line: 719, column: 19, scope: !5041)
!5043 = !DILocation(line: 719, column: 17, scope: !5041)
!5044 = !DILocation(line: 720, column: 7, scope: !5041)
!5045 = !DILocation(line: 722, column: 7, scope: !5041)
!5046 = !DILocation(line: 722, column: 39, scope: !5041)
!5047 = !DILocation(line: 723, column: 5, scope: !5041)
!5048 = !DILocation(line: 717, column: 77, scope: !5038)
!5049 = !DILocation(line: 717, column: 3, scope: !5038)
!5050 = distinct !{!5050, !5039, !5051}
!5051 = !DILocation(line: 723, column: 5, scope: !5035)
!5052 = !DILocation(line: 725, column: 33, scope: !5021)
!5053 = !DILocation(line: 725, column: 3, scope: !5021)
!5054 = !DILocation(line: 726, column: 33, scope: !5021)
!5055 = !DILocation(line: 726, column: 3, scope: !5021)
!5056 = !DILocation(line: 727, column: 1, scope: !5021)
!5057 = distinct !DISubprogram(name: "vect_slp_analyze_operations", scope: !3, file: !3, line: 1237, type: !5058, scopeLine: 1238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5058 = !DISubroutineType(types: !5059)
!5059 = !{!6, !3781}
!5060 = !DILocalVariable(name: "bb_vinfo", arg: 1, scope: !5057, file: !3, line: 1237, type: !3781)
!5061 = !DILocation(line: 1237, column: 42, scope: !5057)
!5062 = !DILocalVariable(name: "slp_instances", scope: !5057, file: !3, line: 1239, type: !3765)
!5063 = !DILocation(line: 1239, column: 29, scope: !5057)
!5064 = !DILocation(line: 1239, column: 45, scope: !5057)
!5065 = !DILocalVariable(name: "instance", scope: !5057, file: !3, line: 1240, type: !3777)
!5066 = !DILocation(line: 1240, column: 16, scope: !5057)
!5067 = !DILocalVariable(name: "i", scope: !5057, file: !3, line: 1241, type: !100)
!5068 = !DILocation(line: 1241, column: 7, scope: !5057)
!5069 = !DILocation(line: 1243, column: 10, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 1243, column: 3)
!5071 = !DILocation(line: 1243, column: 8, scope: !5070)
!5072 = !DILocation(line: 1243, column: 15, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 1243, column: 3)
!5074 = !DILocation(line: 1243, column: 3, scope: !5070)
!5075 = !DILocation(line: 1245, column: 46, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5077, file: !3, line: 1245, column: 11)
!5077 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 1244, column: 5)
!5078 = !DILocation(line: 1246, column: 46, scope: !5076)
!5079 = !DILocation(line: 1245, column: 12, scope: !5076)
!5080 = !DILocation(line: 1245, column: 11, scope: !5077)
!5081 = !DILocation(line: 1248, column: 29, scope: !5082)
!5082 = distinct !DILexicalBlock(scope: !5076, file: !3, line: 1247, column: 9)
!5083 = !DILocation(line: 1248, column: 5, scope: !5082)
!5084 = !DILocation(line: 1249, column: 11, scope: !5082)
!5085 = !DILocation(line: 1250, column: 2, scope: !5082)
!5086 = !DILocation(line: 1252, column: 10, scope: !5076)
!5087 = !DILocation(line: 1243, column: 3, scope: !5073)
!5088 = distinct !{!5088, !5074, !5089}
!5089 = !DILocation(line: 1253, column: 5, scope: !5070)
!5090 = !DILocation(line: 1255, column: 8, scope: !5091)
!5091 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 1255, column: 7)
!5092 = !DILocation(line: 1255, column: 7, scope: !5057)
!5093 = !DILocation(line: 1256, column: 5, scope: !5091)
!5094 = !DILocation(line: 1258, column: 3, scope: !5057)
!5095 = !DILocation(line: 1259, column: 1, scope: !5057)
!5096 = distinct !DISubprogram(name: "vect_update_slp_costs_according_to_vf", scope: !3, file: !3, line: 1406, type: !4473, scopeLine: 1407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5097 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !5096, file: !3, line: 1406, type: !3941)
!5098 = !DILocation(line: 1406, column: 54, scope: !5096)
!5099 = !DILocalVariable(name: "i", scope: !5096, file: !3, line: 1408, type: !17)
!5100 = !DILocation(line: 1408, column: 16, scope: !5096)
!5101 = !DILocalVariable(name: "vf", scope: !5096, file: !3, line: 1408, type: !17)
!5102 = !DILocation(line: 1408, column: 19, scope: !5096)
!5103 = !DILocation(line: 1408, column: 24, scope: !5096)
!5104 = !DILocalVariable(name: "slp_instances", scope: !5096, file: !3, line: 1409, type: !3765)
!5105 = !DILocation(line: 1409, column: 29, scope: !5096)
!5106 = !DILocation(line: 1409, column: 45, scope: !5096)
!5107 = !DILocalVariable(name: "instance", scope: !5096, file: !3, line: 1410, type: !3777)
!5108 = !DILocation(line: 1410, column: 16, scope: !5096)
!5109 = !DILocation(line: 1412, column: 7, scope: !5110)
!5110 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 1412, column: 7)
!5111 = !DILocation(line: 1412, column: 7, scope: !5096)
!5112 = !DILocation(line: 1413, column: 14, scope: !5110)
!5113 = !DILocation(line: 1413, column: 5, scope: !5110)
!5114 = !DILocation(line: 1415, column: 10, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 1415, column: 3)
!5116 = !DILocation(line: 1415, column: 8, scope: !5115)
!5117 = !DILocation(line: 1415, column: 15, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5115, file: !3, line: 1415, column: 3)
!5119 = !DILocation(line: 1415, column: 3, scope: !5115)
!5120 = !DILocation(line: 1417, column: 52, scope: !5118)
!5121 = !DILocation(line: 1418, column: 9, scope: !5118)
!5122 = !DILocation(line: 1418, column: 7, scope: !5118)
!5123 = !DILocation(line: 1417, column: 5, scope: !5118)
!5124 = !DILocation(line: 1417, column: 49, scope: !5118)
!5125 = !DILocation(line: 1415, column: 72, scope: !5118)
!5126 = !DILocation(line: 1415, column: 3, scope: !5118)
!5127 = distinct !{!5127, !5119, !5128}
!5128 = !DILocation(line: 1418, column: 9, scope: !5115)
!5129 = !DILocation(line: 1419, column: 1, scope: !5096)
!5130 = distinct !DISubprogram(name: "vect_get_slp_defs", scope: !3, file: !3, line: 1571, type: !5131, scopeLine: 1573, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5131 = !DISubroutineType(types: !5132)
!5132 = !{null, !3726, !5133, !5133}
!5133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3823, size: 64)
!5134 = !DILocalVariable(name: "slp_node", arg: 1, scope: !5130, file: !3, line: 1571, type: !3726)
!5135 = !DILocation(line: 1571, column: 29, scope: !5130)
!5136 = !DILocalVariable(name: "vec_oprnds0", arg: 2, scope: !5130, file: !3, line: 1571, type: !5133)
!5137 = !DILocation(line: 1571, column: 57, scope: !5130)
!5138 = !DILocalVariable(name: "vec_oprnds1", arg: 3, scope: !5130, file: !3, line: 1572, type: !5133)
!5139 = !DILocation(line: 1572, column: 38, scope: !5130)
!5140 = !DILocalVariable(name: "first_stmt", scope: !5130, file: !3, line: 1574, type: !7)
!5141 = !DILocation(line: 1574, column: 10, scope: !5130)
!5142 = !DILocalVariable(name: "code", scope: !5130, file: !3, line: 1575, type: !1115)
!5143 = !DILocation(line: 1575, column: 18, scope: !5130)
!5144 = !DILocalVariable(name: "number_of_vects", scope: !5130, file: !3, line: 1576, type: !100)
!5145 = !DILocation(line: 1576, column: 7, scope: !5130)
!5146 = !DILocalVariable(name: "lhs_size_unit", scope: !5130, file: !3, line: 1577, type: !295)
!5147 = !DILocation(line: 1577, column: 17, scope: !5130)
!5148 = !DILocalVariable(name: "rhs_size_unit", scope: !5130, file: !3, line: 1577, type: !295)
!5149 = !DILocation(line: 1577, column: 32, scope: !5130)
!5150 = !DILocation(line: 1579, column: 16, scope: !5130)
!5151 = !DILocation(line: 1579, column: 14, scope: !5130)
!5152 = !DILocation(line: 1582, column: 7, scope: !5153)
!5153 = distinct !DILexicalBlock(scope: !5130, file: !3, line: 1582, column: 7)
!5154 = !DILocation(line: 1582, column: 7, scope: !5130)
!5155 = !DILocation(line: 1583, column: 23, scope: !5153)
!5156 = !DILocation(line: 1583, column: 21, scope: !5153)
!5157 = !DILocation(line: 1583, column: 5, scope: !5153)
!5158 = !DILocation(line: 1586, column: 25, scope: !5159)
!5159 = distinct !DILexicalBlock(scope: !5153, file: !3, line: 1585, column: 5)
!5160 = !DILocation(line: 1586, column: 23, scope: !5159)
!5161 = !DILocation(line: 1590, column: 38, scope: !5159)
!5162 = !DILocation(line: 1590, column: 7, scope: !5159)
!5163 = !DILocation(line: 1592, column: 11, scope: !5164)
!5164 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1592, column: 11)
!5165 = !DILocation(line: 1592, column: 28, scope: !5164)
!5166 = !DILocation(line: 1592, column: 25, scope: !5164)
!5167 = !DILocation(line: 1592, column: 11, scope: !5159)
!5168 = !DILocation(line: 1594, column: 30, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5164, file: !3, line: 1593, column: 9)
!5170 = !DILocation(line: 1594, column: 27, scope: !5169)
!5171 = !DILocation(line: 1595, column: 30, scope: !5169)
!5172 = !DILocation(line: 1595, column: 27, scope: !5169)
!5173 = !DILocation(line: 1596, column: 9, scope: !5169)
!5174 = !DILocation(line: 1600, column: 18, scope: !5130)
!5175 = !DILocation(line: 1600, column: 4, scope: !5130)
!5176 = !DILocation(line: 1600, column: 16, scope: !5130)
!5177 = !DILocation(line: 1604, column: 7, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5130, file: !3, line: 1604, column: 7)
!5179 = !DILocation(line: 1604, column: 7, scope: !5130)
!5180 = !DILocation(line: 1606, column: 29, scope: !5178)
!5181 = !DILocation(line: 1606, column: 55, scope: !5178)
!5182 = !DILocation(line: 1606, column: 5, scope: !5178)
!5183 = !DILocation(line: 1609, column: 32, scope: !5178)
!5184 = !DILocation(line: 1609, column: 42, scope: !5178)
!5185 = !DILocation(line: 1609, column: 58, scope: !5178)
!5186 = !DILocation(line: 1609, column: 5, scope: !5178)
!5187 = !DILocation(line: 1611, column: 7, scope: !5188)
!5188 = distinct !DILexicalBlock(scope: !5130, file: !3, line: 1611, column: 7)
!5189 = !DILocation(line: 1611, column: 7, scope: !5130)
!5190 = !DILocation(line: 1614, column: 5, scope: !5188)
!5191 = !DILocation(line: 1616, column: 34, scope: !5130)
!5192 = !DILocation(line: 1616, column: 10, scope: !5130)
!5193 = !DILocation(line: 1616, column: 8, scope: !5130)
!5194 = !DILocation(line: 1617, column: 29, scope: !5195)
!5195 = distinct !DILexicalBlock(scope: !5130, file: !3, line: 1617, column: 7)
!5196 = !DILocation(line: 1617, column: 7, scope: !5195)
!5197 = !DILocation(line: 1617, column: 35, scope: !5195)
!5198 = !DILocation(line: 1617, column: 56, scope: !5195)
!5199 = !DILocation(line: 1617, column: 60, scope: !5195)
!5200 = !DILocation(line: 1617, column: 7, scope: !5130)
!5201 = !DILocation(line: 1618, column: 5, scope: !5195)
!5202 = !DILocation(line: 1622, column: 7, scope: !5203)
!5203 = distinct !DILexicalBlock(scope: !5130, file: !3, line: 1622, column: 7)
!5204 = !DILocation(line: 1622, column: 7, scope: !5130)
!5205 = !DILocation(line: 1623, column: 23, scope: !5203)
!5206 = !DILocation(line: 1623, column: 21, scope: !5203)
!5207 = !DILocation(line: 1623, column: 5, scope: !5203)
!5208 = !DILocation(line: 1625, column: 23, scope: !5203)
!5209 = !DILocation(line: 1625, column: 21, scope: !5203)
!5210 = !DILocation(line: 1627, column: 18, scope: !5130)
!5211 = !DILocation(line: 1627, column: 4, scope: !5130)
!5212 = !DILocation(line: 1627, column: 16, scope: !5130)
!5213 = !DILocation(line: 1629, column: 7, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5130, file: !3, line: 1629, column: 7)
!5215 = !DILocation(line: 1629, column: 7, scope: !5130)
!5216 = !DILocation(line: 1631, column: 29, scope: !5214)
!5217 = !DILocation(line: 1631, column: 56, scope: !5214)
!5218 = !DILocation(line: 1631, column: 5, scope: !5214)
!5219 = !DILocation(line: 1634, column: 32, scope: !5214)
!5220 = !DILocation(line: 1634, column: 42, scope: !5214)
!5221 = !DILocation(line: 1634, column: 58, scope: !5214)
!5222 = !DILocation(line: 1634, column: 5, scope: !5214)
!5223 = !DILocation(line: 1635, column: 1, scope: !5130)
!5224 = distinct !DISubprogram(name: "VEC_gimple_base_index", scope: !11, file: !11, line: 33, type: !5225, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5225 = !DISubroutineType(types: !5226)
!5226 = !{!7, !4241, !17}
!5227 = !DILocalVariable(name: "vec_", arg: 1, scope: !5224, file: !11, line: 33, type: !4241)
!5228 = !DILocation(line: 33, column: 1, scope: !5224)
!5229 = !DILocalVariable(name: "ix_", arg: 2, scope: !5224, file: !11, line: 33, type: !17)
!5230 = !DILocation(line: 0, scope: !5224)
!5231 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !329, file: !329, line: 184, type: !5232, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5232 = !DISubroutineType(types: !5233)
!5233 = !{!3823, !100}
!5234 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5231, file: !329, line: 184, type: !100)
!5235 = !DILocation(line: 184, column: 1, scope: !5231)
!5236 = distinct !DISubprogram(name: "vect_get_slp_vect_defs", scope: !3, file: !3, line: 1542, type: !5237, scopeLine: 1543, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5237 = !DISubroutineType(types: !5238)
!5238 = !{null, !3726, !5133}
!5239 = !DILocalVariable(name: "slp_node", arg: 1, scope: !5236, file: !3, line: 1542, type: !3726)
!5240 = !DILocation(line: 1542, column: 34, scope: !5236)
!5241 = !DILocalVariable(name: "vec_oprnds", arg: 2, scope: !5236, file: !3, line: 1542, type: !5133)
!5242 = !DILocation(line: 1542, column: 62, scope: !5236)
!5243 = !DILocalVariable(name: "vec_oprnd", scope: !5236, file: !3, line: 1544, type: !326)
!5244 = !DILocation(line: 1544, column: 8, scope: !5236)
!5245 = !DILocalVariable(name: "vec_def_stmt", scope: !5236, file: !3, line: 1545, type: !7)
!5246 = !DILocation(line: 1545, column: 10, scope: !5236)
!5247 = !DILocalVariable(name: "i", scope: !5236, file: !3, line: 1546, type: !17)
!5248 = !DILocation(line: 1546, column: 16, scope: !5236)
!5249 = !DILocation(line: 1548, column: 3, scope: !5236)
!5250 = !DILocation(line: 1550, column: 10, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1550, column: 3)
!5252 = !DILocation(line: 1550, column: 8, scope: !5251)
!5253 = !DILocation(line: 1551, column: 8, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5251, file: !3, line: 1550, column: 3)
!5255 = !DILocation(line: 1550, column: 3, scope: !5251)
!5256 = !DILocation(line: 1554, column: 7, scope: !5257)
!5257 = distinct !DILexicalBlock(scope: !5254, file: !3, line: 1553, column: 5)
!5258 = !DILocation(line: 1555, column: 35, scope: !5257)
!5259 = !DILocation(line: 1555, column: 19, scope: !5257)
!5260 = !DILocation(line: 1555, column: 17, scope: !5257)
!5261 = !DILocation(line: 1556, column: 7, scope: !5257)
!5262 = !DILocation(line: 1557, column: 5, scope: !5257)
!5263 = !DILocation(line: 1552, column: 9, scope: !5254)
!5264 = !DILocation(line: 1550, column: 3, scope: !5254)
!5265 = distinct !{!5265, !5255, !5266}
!5266 = !DILocation(line: 1557, column: 5, scope: !5251)
!5267 = !DILocation(line: 1558, column: 1, scope: !5236)
!5268 = distinct !DISubprogram(name: "vect_get_constant_vectors", scope: !3, file: !3, line: 1428, type: !5269, scopeLine: 1430, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5269 = !DISubroutineType(types: !5270)
!5270 = !{null, !3726, !5133, !17, !17}
!5271 = !DILocalVariable(name: "slp_node", arg: 1, scope: !5268, file: !3, line: 1428, type: !3726)
!5272 = !DILocation(line: 1428, column: 37, scope: !5268)
!5273 = !DILocalVariable(name: "vec_oprnds", arg: 2, scope: !5268, file: !3, line: 1428, type: !5133)
!5274 = !DILocation(line: 1428, column: 64, scope: !5268)
!5275 = !DILocalVariable(name: "op_num", arg: 3, scope: !5268, file: !3, line: 1429, type: !17)
!5276 = !DILocation(line: 1429, column: 20, scope: !5268)
!5277 = !DILocalVariable(name: "number_of_vectors", arg: 4, scope: !5268, file: !3, line: 1429, type: !17)
!5278 = !DILocation(line: 1429, column: 41, scope: !5268)
!5279 = !DILocalVariable(name: "stmts", scope: !5268, file: !3, line: 1431, type: !3710)
!5280 = !DILocation(line: 1431, column: 23, scope: !5268)
!5281 = !DILocation(line: 1431, column: 31, scope: !5268)
!5282 = !DILocalVariable(name: "stmt", scope: !5268, file: !3, line: 1432, type: !7)
!5283 = !DILocation(line: 1432, column: 10, scope: !5268)
!5284 = !DILocation(line: 1432, column: 17, scope: !5268)
!5285 = !DILocalVariable(name: "stmt_vinfo", scope: !5268, file: !3, line: 1433, type: !3934)
!5286 = !DILocation(line: 1433, column: 17, scope: !5268)
!5287 = !DILocation(line: 1433, column: 46, scope: !5268)
!5288 = !DILocation(line: 1433, column: 30, scope: !5268)
!5289 = !DILocalVariable(name: "nunits", scope: !5268, file: !3, line: 1434, type: !100)
!5290 = !DILocation(line: 1434, column: 7, scope: !5268)
!5291 = !DILocalVariable(name: "vec_cst", scope: !5268, file: !3, line: 1435, type: !326)
!5292 = !DILocation(line: 1435, column: 8, scope: !5268)
!5293 = !DILocalVariable(name: "t", scope: !5268, file: !3, line: 1436, type: !326)
!5294 = !DILocation(line: 1436, column: 8, scope: !5268)
!5295 = !DILocalVariable(name: "j", scope: !5268, file: !3, line: 1437, type: !100)
!5296 = !DILocation(line: 1437, column: 7, scope: !5268)
!5297 = !DILocalVariable(name: "number_of_places_left_in_vector", scope: !5268, file: !3, line: 1437, type: !100)
!5298 = !DILocation(line: 1437, column: 10, scope: !5268)
!5299 = !DILocalVariable(name: "vector_type", scope: !5268, file: !3, line: 1438, type: !326)
!5300 = !DILocation(line: 1438, column: 8, scope: !5268)
!5301 = !DILocalVariable(name: "op", scope: !5268, file: !3, line: 1439, type: !326)
!5302 = !DILocation(line: 1439, column: 8, scope: !5268)
!5303 = !DILocalVariable(name: "vop", scope: !5268, file: !3, line: 1439, type: !326)
!5304 = !DILocation(line: 1439, column: 12, scope: !5268)
!5305 = !DILocalVariable(name: "group_size", scope: !5268, file: !3, line: 1440, type: !100)
!5306 = !DILocation(line: 1440, column: 7, scope: !5268)
!5307 = !DILocation(line: 1440, column: 20, scope: !5268)
!5308 = !DILocalVariable(name: "vec_num", scope: !5268, file: !3, line: 1441, type: !17)
!5309 = !DILocation(line: 1441, column: 16, scope: !5268)
!5310 = !DILocalVariable(name: "i", scope: !5268, file: !3, line: 1441, type: !17)
!5311 = !DILocation(line: 1441, column: 25, scope: !5268)
!5312 = !DILocalVariable(name: "number_of_copies", scope: !5268, file: !3, line: 1442, type: !100)
!5313 = !DILocation(line: 1442, column: 7, scope: !5268)
!5314 = !DILocalVariable(name: "voprnds", scope: !5268, file: !3, line: 1443, type: !3823)
!5315 = !DILocation(line: 1443, column: 21, scope: !5268)
!5316 = !DILocation(line: 1443, column: 31, scope: !5268)
!5317 = !DILocalVariable(name: "constant_p", scope: !5268, file: !3, line: 1444, type: !6)
!5318 = !DILocation(line: 1444, column: 8, scope: !5268)
!5319 = !DILocalVariable(name: "is_store", scope: !5268, file: !3, line: 1444, type: !6)
!5320 = !DILocation(line: 1444, column: 20, scope: !5268)
!5321 = !DILocation(line: 1446, column: 7, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 1446, column: 7)
!5323 = !DILocation(line: 1446, column: 7, scope: !5268)
!5324 = !DILocation(line: 1448, column: 16, scope: !5325)
!5325 = distinct !DILexicalBlock(scope: !5322, file: !3, line: 1447, column: 5)
!5326 = !DILocation(line: 1449, column: 32, scope: !5325)
!5327 = !DILocation(line: 1449, column: 12, scope: !5325)
!5328 = !DILocation(line: 1449, column: 10, scope: !5325)
!5329 = !DILocation(line: 1450, column: 5, scope: !5325)
!5330 = !DILocation(line: 1453, column: 16, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5322, file: !3, line: 1452, column: 5)
!5332 = !DILocation(line: 1454, column: 23, scope: !5331)
!5333 = !DILocation(line: 1454, column: 29, scope: !5331)
!5334 = !DILocation(line: 1454, column: 36, scope: !5331)
!5335 = !DILocation(line: 1454, column: 12, scope: !5331)
!5336 = !DILocation(line: 1454, column: 10, scope: !5331)
!5337 = !DILocation(line: 1457, column: 7, scope: !5338)
!5338 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 1457, column: 7)
!5339 = !DILocation(line: 1457, column: 7, scope: !5268)
!5340 = !DILocation(line: 1458, column: 16, scope: !5338)
!5341 = !DILocation(line: 1458, column: 5, scope: !5338)
!5342 = !DILocation(line: 1460, column: 16, scope: !5338)
!5343 = !DILocation(line: 1462, column: 46, scope: !5268)
!5344 = !DILocation(line: 1462, column: 17, scope: !5268)
!5345 = !DILocation(line: 1462, column: 15, scope: !5268)
!5346 = !DILocation(line: 1463, column: 3, scope: !5268)
!5347 = !DILocation(line: 1465, column: 12, scope: !5268)
!5348 = !DILocation(line: 1465, column: 10, scope: !5268)
!5349 = !DILocation(line: 1483, column: 45, scope: !5268)
!5350 = !DILocation(line: 1483, column: 53, scope: !5268)
!5351 = !DILocation(line: 1483, column: 22, scope: !5268)
!5352 = !DILocation(line: 1483, column: 67, scope: !5268)
!5353 = !DILocation(line: 1483, column: 65, scope: !5268)
!5354 = !DILocation(line: 1483, column: 20, scope: !5268)
!5355 = !DILocation(line: 1485, column: 37, scope: !5268)
!5356 = !DILocation(line: 1485, column: 35, scope: !5268)
!5357 = !DILocation(line: 1486, column: 10, scope: !5358)
!5358 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 1486, column: 3)
!5359 = !DILocation(line: 1486, column: 8, scope: !5358)
!5360 = !DILocation(line: 1486, column: 15, scope: !5361)
!5361 = distinct !DILexicalBlock(scope: !5358, file: !3, line: 1486, column: 3)
!5362 = !DILocation(line: 1486, column: 19, scope: !5361)
!5363 = !DILocation(line: 1486, column: 17, scope: !5361)
!5364 = !DILocation(line: 1486, column: 3, scope: !5358)
!5365 = !DILocation(line: 1488, column: 16, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5367, file: !3, line: 1488, column: 7)
!5367 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 1487, column: 5)
!5368 = !DILocation(line: 1488, column: 27, scope: !5366)
!5369 = !DILocation(line: 1488, column: 14, scope: !5366)
!5370 = !DILocation(line: 1488, column: 12, scope: !5366)
!5371 = !DILocation(line: 1488, column: 32, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5366, file: !3, line: 1488, column: 7)
!5373 = !DILocation(line: 1488, column: 7, scope: !5366)
!5374 = !DILocation(line: 1490, column: 15, scope: !5375)
!5375 = distinct !DILexicalBlock(scope: !5376, file: !3, line: 1490, column: 15)
!5376 = distinct !DILexicalBlock(scope: !5372, file: !3, line: 1489, column: 9)
!5377 = !DILocation(line: 1490, column: 15, scope: !5376)
!5378 = !DILocation(line: 1491, column: 38, scope: !5375)
!5379 = !DILocation(line: 1491, column: 18, scope: !5375)
!5380 = !DILocation(line: 1491, column: 16, scope: !5375)
!5381 = !DILocation(line: 1491, column: 13, scope: !5375)
!5382 = !DILocation(line: 1493, column: 29, scope: !5375)
!5383 = !DILocation(line: 1493, column: 35, scope: !5375)
!5384 = !DILocation(line: 1493, column: 42, scope: !5375)
!5385 = !DILocation(line: 1493, column: 18, scope: !5375)
!5386 = !DILocation(line: 1493, column: 16, scope: !5375)
!5387 = !DILocation(line: 1496, column: 15, scope: !5376)
!5388 = !DILocation(line: 1496, column: 13, scope: !5376)
!5389 = !DILocation(line: 1498, column: 42, scope: !5376)
!5390 = !DILocation(line: 1500, column: 15, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !5376, file: !3, line: 1500, column: 15)
!5392 = !DILocation(line: 1500, column: 47, scope: !5391)
!5393 = !DILocation(line: 1500, column: 15, scope: !5376)
!5394 = !DILocation(line: 1502, column: 49, scope: !5395)
!5395 = distinct !DILexicalBlock(scope: !5391, file: !3, line: 1501, column: 13)
!5396 = !DILocation(line: 1502, column: 47, scope: !5395)
!5397 = !DILocation(line: 1504, column: 12, scope: !5398)
!5398 = distinct !DILexicalBlock(scope: !5395, file: !3, line: 1504, column: 12)
!5399 = !DILocation(line: 1504, column: 12, scope: !5395)
!5400 = !DILocation(line: 1505, column: 27, scope: !5398)
!5401 = !DILocation(line: 1505, column: 40, scope: !5398)
!5402 = !DILocation(line: 1505, column: 13, scope: !5398)
!5403 = !DILocation(line: 1505, column: 11, scope: !5398)
!5404 = !DILocation(line: 1505, column: 3, scope: !5398)
!5405 = !DILocation(line: 1507, column: 42, scope: !5398)
!5406 = !DILocation(line: 1507, column: 55, scope: !5398)
!5407 = !DILocation(line: 1507, column: 13, scope: !5398)
!5408 = !DILocation(line: 1507, column: 11, scope: !5398)
!5409 = !DILocation(line: 1508, column: 15, scope: !5395)
!5410 = !DILocation(line: 1510, column: 17, scope: !5395)
!5411 = !DILocation(line: 1511, column: 13, scope: !5395)
!5412 = !DILocation(line: 1512, column: 9, scope: !5376)
!5413 = !DILocation(line: 1488, column: 71, scope: !5372)
!5414 = !DILocation(line: 1488, column: 7, scope: !5372)
!5415 = distinct !{!5415, !5373, !5416}
!5416 = !DILocation(line: 1512, column: 9, scope: !5366)
!5417 = !DILocation(line: 1513, column: 5, scope: !5367)
!5418 = !DILocation(line: 1486, column: 38, scope: !5361)
!5419 = !DILocation(line: 1486, column: 3, scope: !5361)
!5420 = distinct !{!5420, !5364, !5421}
!5421 = !DILocation(line: 1513, column: 5, scope: !5358)
!5422 = !DILocation(line: 1517, column: 13, scope: !5268)
!5423 = !DILocation(line: 1517, column: 11, scope: !5268)
!5424 = !DILocation(line: 1518, column: 12, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 1518, column: 3)
!5426 = !DILocation(line: 1518, column: 20, scope: !5425)
!5427 = !DILocation(line: 1518, column: 10, scope: !5425)
!5428 = !DILocation(line: 1518, column: 8, scope: !5425)
!5429 = !DILocation(line: 1518, column: 25, scope: !5430)
!5430 = distinct !DILexicalBlock(scope: !5425, file: !3, line: 1518, column: 3)
!5431 = !DILocation(line: 1518, column: 27, scope: !5430)
!5432 = !DILocation(line: 1518, column: 3, scope: !5425)
!5433 = !DILocation(line: 1520, column: 13, scope: !5434)
!5434 = distinct !DILexicalBlock(scope: !5430, file: !3, line: 1519, column: 5)
!5435 = !DILocation(line: 1520, column: 11, scope: !5434)
!5436 = !DILocation(line: 1521, column: 7, scope: !5434)
!5437 = !DILocation(line: 1522, column: 5, scope: !5434)
!5438 = !DILocation(line: 1518, column: 34, scope: !5430)
!5439 = !DILocation(line: 1518, column: 3, scope: !5430)
!5440 = distinct !{!5440, !5432, !5441}
!5441 = !DILocation(line: 1522, column: 5, scope: !5425)
!5442 = !DILocation(line: 1524, column: 3, scope: !5268)
!5443 = !DILocation(line: 1530, column: 3, scope: !5268)
!5444 = !DILocation(line: 1530, column: 10, scope: !5268)
!5445 = !DILocation(line: 1530, column: 30, scope: !5268)
!5446 = !DILocation(line: 1530, column: 28, scope: !5268)
!5447 = !DILocation(line: 1532, column: 14, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 1532, column: 7)
!5449 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 1531, column: 5)
!5450 = !DILocation(line: 1532, column: 12, scope: !5448)
!5451 = !DILocation(line: 1532, column: 19, scope: !5452)
!5452 = distinct !DILexicalBlock(scope: !5448, file: !3, line: 1532, column: 7)
!5453 = !DILocation(line: 1532, column: 59, scope: !5452)
!5454 = !DILocation(line: 1532, column: 62, scope: !5452)
!5455 = !DILocation(line: 1532, column: 66, scope: !5452)
!5456 = !DILocation(line: 1532, column: 64, scope: !5452)
!5457 = !DILocation(line: 0, scope: !5452)
!5458 = !DILocation(line: 1532, column: 7, scope: !5448)
!5459 = !DILocation(line: 1533, column: 9, scope: !5452)
!5460 = !DILocation(line: 1532, column: 76, scope: !5452)
!5461 = !DILocation(line: 1532, column: 7, scope: !5452)
!5462 = distinct !{!5462, !5458, !5463}
!5463 = !DILocation(line: 1533, column: 9, scope: !5448)
!5464 = distinct !{!5464, !5443, !5465}
!5465 = !DILocation(line: 1534, column: 5, scope: !5268)
!5466 = !DILocation(line: 1535, column: 1, scope: !5268)
!5467 = distinct !DISubprogram(name: "vinfo_for_stmt", scope: !1757, file: !1757, line: 623, type: !5468, scopeLine: 624, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5468 = !DISubroutineType(types: !5469)
!5469 = !{!3934, !7}
!5470 = !DILocalVariable(name: "stmt", arg: 1, scope: !5467, file: !1757, line: 623, type: !7)
!5471 = !DILocation(line: 623, column: 24, scope: !5467)
!5472 = !DILocalVariable(name: "uid", scope: !5467, file: !1757, line: 625, type: !17)
!5473 = !DILocation(line: 625, column: 16, scope: !5467)
!5474 = !DILocation(line: 625, column: 34, scope: !5467)
!5475 = !DILocation(line: 625, column: 22, scope: !5467)
!5476 = !DILocation(line: 626, column: 7, scope: !5477)
!5477 = distinct !DILexicalBlock(scope: !5467, file: !1757, line: 626, column: 7)
!5478 = !DILocation(line: 626, column: 11, scope: !5477)
!5479 = !DILocation(line: 626, column: 7, scope: !5467)
!5480 = !DILocation(line: 627, column: 5, scope: !5477)
!5481 = !DILocation(line: 629, column: 3, scope: !5467)
!5482 = !DILocation(line: 630, column: 26, scope: !5467)
!5483 = !DILocation(line: 630, column: 10, scope: !5467)
!5484 = !DILocation(line: 630, column: 3, scope: !5467)
!5485 = !DILocation(line: 631, column: 1, scope: !5467)
!5486 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !11, file: !11, line: 1815, type: !5487, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5487 = !DISubroutineType(types: !5488)
!5488 = !{!1115, !4104}
!5489 = !DILocalVariable(name: "gs", arg: 1, scope: !5486, file: !11, line: 1815, type: !4104)
!5490 = !DILocation(line: 1815, column: 38, scope: !5486)
!5491 = !DILocalVariable(name: "code", scope: !5486, file: !11, line: 1817, type: !1115)
!5492 = !DILocation(line: 1817, column: 18, scope: !5486)
!5493 = !DILocation(line: 1820, column: 28, scope: !5486)
!5494 = !DILocation(line: 1820, column: 10, scope: !5486)
!5495 = !DILocation(line: 1820, column: 8, scope: !5486)
!5496 = !DILocation(line: 1821, column: 29, scope: !5497)
!5497 = distinct !DILexicalBlock(scope: !5486, file: !11, line: 1821, column: 7)
!5498 = !DILocation(line: 1821, column: 7, scope: !5497)
!5499 = !DILocation(line: 1821, column: 35, scope: !5497)
!5500 = !DILocation(line: 1821, column: 7, scope: !5486)
!5501 = !DILocation(line: 1822, column: 12, scope: !5497)
!5502 = !DILocation(line: 1822, column: 10, scope: !5497)
!5503 = !DILocation(line: 1822, column: 5, scope: !5497)
!5504 = !DILocation(line: 1824, column: 10, scope: !5486)
!5505 = !DILocation(line: 1824, column: 3, scope: !5486)
!5506 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !11, file: !11, line: 1686, type: !5507, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5507 = !DISubroutineType(types: !5508)
!5508 = !{!1936, !1115}
!5509 = !DILocalVariable(name: "code", arg: 1, scope: !5506, file: !11, line: 1686, type: !1115)
!5510 = !DILocation(line: 1686, column: 38, scope: !5506)
!5511 = !DILocation(line: 1688, column: 63, scope: !5506)
!5512 = !DILocation(line: 1688, column: 34, scope: !5506)
!5513 = !DILocation(line: 1688, column: 10, scope: !5506)
!5514 = !DILocation(line: 1688, column: 3, scope: !5506)
!5515 = distinct !DISubprogram(name: "vect_transform_slp_perm_load", scope: !3, file: !3, line: 1789, type: !5516, scopeLine: 1792, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5516 = !DISubroutineType(types: !5517)
!5517 = !{!6, !7, !3823, !4114, !100, !3777, !6}
!5518 = !DILocalVariable(name: "stmt", arg: 1, scope: !5515, file: !3, line: 1789, type: !7)
!5519 = !DILocation(line: 1789, column: 38, scope: !5515)
!5520 = !DILocalVariable(name: "dr_chain", arg: 2, scope: !5515, file: !3, line: 1789, type: !3823)
!5521 = !DILocation(line: 1789, column: 62, scope: !5515)
!5522 = !DILocalVariable(name: "gsi", arg: 3, scope: !5515, file: !3, line: 1790, type: !4114)
!5523 = !DILocation(line: 1790, column: 53, scope: !5515)
!5524 = !DILocalVariable(name: "vf", arg: 4, scope: !5515, file: !3, line: 1790, type: !100)
!5525 = !DILocation(line: 1790, column: 62, scope: !5515)
!5526 = !DILocalVariable(name: "slp_node_instance", arg: 5, scope: !5515, file: !3, line: 1791, type: !3777)
!5527 = !DILocation(line: 1791, column: 44, scope: !5515)
!5528 = !DILocalVariable(name: "analyze_only", arg: 6, scope: !5515, file: !3, line: 1791, type: !6)
!5529 = !DILocation(line: 1791, column: 68, scope: !5515)
!5530 = !DILocalVariable(name: "stmt_info", scope: !5515, file: !3, line: 1793, type: !3934)
!5531 = !DILocation(line: 1793, column: 17, scope: !5515)
!5532 = !DILocation(line: 1793, column: 45, scope: !5515)
!5533 = !DILocation(line: 1793, column: 29, scope: !5515)
!5534 = !DILocalVariable(name: "mask_element_type", scope: !5515, file: !3, line: 1794, type: !326)
!5535 = !DILocation(line: 1794, column: 8, scope: !5515)
!5536 = !DILocalVariable(name: "mask_type", scope: !5515, file: !3, line: 1794, type: !326)
!5537 = !DILocation(line: 1794, column: 39, scope: !5515)
!5538 = !DILocalVariable(name: "i", scope: !5515, file: !3, line: 1795, type: !100)
!5539 = !DILocation(line: 1795, column: 7, scope: !5515)
!5540 = !DILocalVariable(name: "j", scope: !5515, file: !3, line: 1795, type: !100)
!5541 = !DILocation(line: 1795, column: 10, scope: !5515)
!5542 = !DILocalVariable(name: "k", scope: !5515, file: !3, line: 1795, type: !100)
!5543 = !DILocation(line: 1795, column: 13, scope: !5515)
!5544 = !DILocalVariable(name: "m", scope: !5515, file: !3, line: 1795, type: !100)
!5545 = !DILocation(line: 1795, column: 16, scope: !5515)
!5546 = !DILocalVariable(name: "scale", scope: !5515, file: !3, line: 1795, type: !100)
!5547 = !DILocation(line: 1795, column: 19, scope: !5515)
!5548 = !DILocalVariable(name: "mask_nunits", scope: !5515, file: !3, line: 1795, type: !100)
!5549 = !DILocation(line: 1795, column: 26, scope: !5515)
!5550 = !DILocalVariable(name: "nunits", scope: !5515, file: !3, line: 1795, type: !100)
!5551 = !DILocation(line: 1795, column: 39, scope: !5515)
!5552 = !DILocalVariable(name: "vec_index", scope: !5515, file: !3, line: 1795, type: !100)
!5553 = !DILocation(line: 1795, column: 47, scope: !5515)
!5554 = !DILocalVariable(name: "scalar_index", scope: !5515, file: !3, line: 1795, type: !100)
!5555 = !DILocation(line: 1795, column: 62, scope: !5515)
!5556 = !DILocalVariable(name: "node", scope: !5515, file: !3, line: 1796, type: !3726)
!5557 = !DILocation(line: 1796, column: 12, scope: !5515)
!5558 = !DILocalVariable(name: "vectype", scope: !5515, file: !3, line: 1797, type: !326)
!5559 = !DILocation(line: 1797, column: 8, scope: !5515)
!5560 = !DILocation(line: 1797, column: 18, scope: !5515)
!5561 = !DILocalVariable(name: "builtin_decl", scope: !5515, file: !3, line: 1797, type: !326)
!5562 = !DILocation(line: 1797, column: 50, scope: !5515)
!5563 = !DILocalVariable(name: "next_scalar_stmt", scope: !5515, file: !3, line: 1798, type: !7)
!5564 = !DILocation(line: 1798, column: 10, scope: !5515)
!5565 = !DILocalVariable(name: "group_size", scope: !5515, file: !3, line: 1799, type: !100)
!5566 = !DILocation(line: 1799, column: 7, scope: !5515)
!5567 = !DILocation(line: 1799, column: 20, scope: !5515)
!5568 = !DILocalVariable(name: "first_mask_element", scope: !5515, file: !3, line: 1800, type: !100)
!5569 = !DILocation(line: 1800, column: 7, scope: !5515)
!5570 = !DILocalVariable(name: "index", scope: !5515, file: !3, line: 1801, type: !100)
!5571 = !DILocation(line: 1801, column: 7, scope: !5515)
!5572 = !DILocalVariable(name: "unroll_factor", scope: !5515, file: !3, line: 1801, type: !100)
!5573 = !DILocation(line: 1801, column: 14, scope: !5515)
!5574 = !DILocalVariable(name: "mask", scope: !5515, file: !3, line: 1801, type: !1752)
!5575 = !DILocation(line: 1801, column: 30, scope: !5515)
!5576 = !DILocalVariable(name: "current_mask_element", scope: !5515, file: !3, line: 1801, type: !100)
!5577 = !DILocation(line: 1801, column: 36, scope: !5515)
!5578 = !DILocalVariable(name: "ncopies", scope: !5515, file: !3, line: 1801, type: !100)
!5579 = !DILocation(line: 1801, column: 58, scope: !5515)
!5580 = !DILocalVariable(name: "only_one_vec", scope: !5515, file: !3, line: 1802, type: !6)
!5581 = !DILocation(line: 1802, column: 8, scope: !5515)
!5582 = !DILocalVariable(name: "need_next_vector", scope: !5515, file: !3, line: 1802, type: !6)
!5583 = !DILocation(line: 1802, column: 30, scope: !5515)
!5584 = !DILocalVariable(name: "first_vec_index", scope: !5515, file: !3, line: 1803, type: !100)
!5585 = !DILocation(line: 1803, column: 7, scope: !5515)
!5586 = !DILocalVariable(name: "second_vec_index", scope: !5515, file: !3, line: 1803, type: !100)
!5587 = !DILocation(line: 1803, column: 24, scope: !5515)
!5588 = !DILocalVariable(name: "orig_vec_stmts_num", scope: !5515, file: !3, line: 1803, type: !100)
!5589 = !DILocation(line: 1803, column: 42, scope: !5515)
!5590 = !DILocalVariable(name: "vect_stmts_counter", scope: !5515, file: !3, line: 1803, type: !100)
!5591 = !DILocation(line: 1803, column: 62, scope: !5515)
!5592 = !DILocation(line: 1805, column: 26, scope: !5593)
!5593 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 1805, column: 7)
!5594 = !DILocation(line: 1805, column: 8, scope: !5593)
!5595 = !DILocation(line: 1805, column: 7, scope: !5515)
!5596 = !DILocation(line: 1807, column: 11, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5598, file: !3, line: 1807, column: 11)
!5598 = distinct !DILexicalBlock(scope: !5593, file: !3, line: 1806, column: 5)
!5599 = !DILocation(line: 1807, column: 11, scope: !5598)
!5600 = !DILocation(line: 1809, column: 20, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5597, file: !3, line: 1808, column: 9)
!5602 = !DILocation(line: 1809, column: 11, scope: !5601)
!5603 = !DILocation(line: 1810, column: 30, scope: !5601)
!5604 = !DILocation(line: 1810, column: 41, scope: !5601)
!5605 = !DILocation(line: 1810, column: 11, scope: !5601)
!5606 = !DILocation(line: 1811, column: 9, scope: !5601)
!5607 = !DILocation(line: 1813, column: 8, scope: !5598)
!5608 = !DILocation(line: 1816, column: 36, scope: !5515)
!5609 = !DILocation(line: 1816, column: 54, scope: !5515)
!5610 = !DILocation(line: 1816, column: 18, scope: !5515)
!5611 = !DILocation(line: 1816, column: 16, scope: !5515)
!5612 = !DILocation(line: 1818, column: 8, scope: !5613)
!5613 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 1818, column: 7)
!5614 = !DILocation(line: 1818, column: 21, scope: !5613)
!5615 = !DILocation(line: 1818, column: 25, scope: !5613)
!5616 = !DILocation(line: 1818, column: 7, scope: !5515)
!5617 = !DILocation(line: 1820, column: 11, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5619, file: !3, line: 1820, column: 11)
!5619 = distinct !DILexicalBlock(scope: !5613, file: !3, line: 1819, column: 5)
!5620 = !DILocation(line: 1820, column: 11, scope: !5619)
!5621 = !DILocation(line: 1822, column: 20, scope: !5622)
!5622 = distinct !DILexicalBlock(scope: !5618, file: !3, line: 1821, column: 9)
!5623 = !DILocation(line: 1822, column: 11, scope: !5622)
!5624 = !DILocation(line: 1823, column: 30, scope: !5622)
!5625 = !DILocation(line: 1823, column: 41, scope: !5622)
!5626 = !DILocation(line: 1823, column: 11, scope: !5622)
!5627 = !DILocation(line: 1824, column: 9, scope: !5622)
!5628 = !DILocation(line: 1826, column: 8, scope: !5619)
!5629 = !DILocation(line: 1829, column: 44, scope: !5515)
!5630 = !DILocation(line: 1829, column: 15, scope: !5515)
!5631 = !DILocation(line: 1829, column: 13, scope: !5515)
!5632 = !DILocation(line: 1830, column: 17, scope: !5515)
!5633 = !DILocation(line: 1830, column: 15, scope: !5515)
!5634 = !DILocation(line: 1831, column: 42, scope: !5515)
!5635 = !DILocation(line: 1831, column: 40, scope: !5515)
!5636 = !DILocation(line: 1831, column: 18, scope: !5515)
!5637 = !DILocation(line: 1831, column: 10, scope: !5515)
!5638 = !DILocation(line: 1831, column: 8, scope: !5515)
!5639 = !DILocation(line: 1832, column: 12, scope: !5515)
!5640 = !DILocation(line: 1832, column: 10, scope: !5515)
!5641 = !DILocation(line: 1833, column: 11, scope: !5515)
!5642 = !DILocation(line: 1833, column: 25, scope: !5515)
!5643 = !DILocation(line: 1833, column: 23, scope: !5515)
!5644 = !DILocation(line: 1833, column: 9, scope: !5515)
!5645 = !DILocation(line: 1834, column: 19, scope: !5515)
!5646 = !DILocation(line: 1834, column: 17, scope: !5515)
!5647 = !DILocation(line: 1838, column: 24, scope: !5515)
!5648 = !DILocation(line: 1839, column: 17, scope: !5515)
!5649 = !DILocation(line: 1838, column: 35, scope: !5515)
!5650 = !DILocation(line: 1839, column: 69, scope: !5515)
!5651 = !DILocation(line: 1839, column: 67, scope: !5515)
!5652 = !DILocation(line: 1838, column: 22, scope: !5515)
!5653 = !DILocation(line: 1840, column: 7, scope: !5654)
!5654 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 1840, column: 7)
!5655 = !DILocation(line: 1840, column: 26, scope: !5654)
!5656 = !DILocation(line: 1840, column: 7, scope: !5515)
!5657 = !DILocation(line: 1841, column: 18, scope: !5654)
!5658 = !DILocation(line: 1841, column: 5, scope: !5654)
!5659 = !DILocation(line: 1845, column: 13, scope: !5515)
!5660 = !DILocation(line: 1845, column: 18, scope: !5515)
!5661 = !DILocation(line: 1845, column: 16, scope: !5515)
!5662 = !DILocation(line: 1845, column: 11, scope: !5515)
!5663 = !DILocation(line: 1866, column: 10, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 1866, column: 3)
!5665 = !DILocation(line: 1866, column: 8, scope: !5664)
!5666 = !DILocation(line: 1867, column: 8, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !5664, file: !3, line: 1866, column: 3)
!5668 = !DILocation(line: 1866, column: 3, scope: !5664)
!5669 = !DILocation(line: 1871, column: 20, scope: !5670)
!5670 = distinct !DILexicalBlock(scope: !5667, file: !3, line: 1870, column: 5)
!5671 = !DILocation(line: 1872, column: 13, scope: !5670)
!5672 = !DILocation(line: 1873, column: 26, scope: !5670)
!5673 = !DILocation(line: 1874, column: 17, scope: !5670)
!5674 = !DILocation(line: 1875, column: 34, scope: !5670)
!5675 = !DILocation(line: 1875, column: 23, scope: !5670)
!5676 = !DILocation(line: 1876, column: 11, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 1876, column: 11)
!5678 = !DILocation(line: 1876, column: 11, scope: !5670)
!5679 = !DILocation(line: 1877, column: 28, scope: !5677)
!5680 = !DILocation(line: 1877, column: 26, scope: !5677)
!5681 = !DILocation(line: 1877, column: 9, scope: !5677)
!5682 = !DILocation(line: 1879, column: 38, scope: !5677)
!5683 = !DILocation(line: 1879, column: 26, scope: !5677)
!5684 = !DILocation(line: 1881, column: 14, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 1881, column: 7)
!5686 = !DILocation(line: 1881, column: 12, scope: !5685)
!5687 = !DILocation(line: 1881, column: 19, scope: !5688)
!5688 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 1881, column: 7)
!5689 = !DILocation(line: 1881, column: 23, scope: !5688)
!5690 = !DILocation(line: 1881, column: 21, scope: !5688)
!5691 = !DILocation(line: 1881, column: 7, scope: !5685)
!5692 = !DILocation(line: 1883, column: 18, scope: !5693)
!5693 = distinct !DILexicalBlock(scope: !5694, file: !3, line: 1883, column: 11)
!5694 = distinct !DILexicalBlock(scope: !5688, file: !3, line: 1882, column: 9)
!5695 = !DILocation(line: 1883, column: 16, scope: !5693)
!5696 = !DILocation(line: 1883, column: 23, scope: !5697)
!5697 = distinct !DILexicalBlock(scope: !5693, file: !3, line: 1883, column: 11)
!5698 = !DILocation(line: 1883, column: 27, scope: !5697)
!5699 = !DILocation(line: 1883, column: 25, scope: !5697)
!5700 = !DILocation(line: 1883, column: 11, scope: !5693)
!5701 = !DILocation(line: 1885, column: 37, scope: !5702)
!5702 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 1884, column: 13)
!5703 = !DILocation(line: 1885, column: 41, scope: !5702)
!5704 = !DILocation(line: 1885, column: 45, scope: !5702)
!5705 = !DILocation(line: 1885, column: 43, scope: !5702)
!5706 = !DILocation(line: 1885, column: 39, scope: !5702)
!5707 = !DILocation(line: 1885, column: 59, scope: !5702)
!5708 = !DILocation(line: 1885, column: 57, scope: !5702)
!5709 = !DILocation(line: 1885, column: 34, scope: !5702)
!5710 = !DILocation(line: 1886, column: 22, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5702, file: !3, line: 1886, column: 15)
!5712 = !DILocation(line: 1886, column: 20, scope: !5711)
!5713 = !DILocation(line: 1886, column: 27, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5711, file: !3, line: 1886, column: 15)
!5715 = !DILocation(line: 1886, column: 31, scope: !5714)
!5716 = !DILocation(line: 1886, column: 29, scope: !5714)
!5717 = !DILocation(line: 1886, column: 15, scope: !5711)
!5718 = !DILocation(line: 1888, column: 47, scope: !5719)
!5719 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 1888, column: 23)
!5720 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 1887, column: 17)
!5721 = !DILocation(line: 1888, column: 53, scope: !5719)
!5722 = !DILocation(line: 1888, column: 73, scope: !5719)
!5723 = !DILocation(line: 1889, column: 36, scope: !5719)
!5724 = !DILocation(line: 1889, column: 49, scope: !5719)
!5725 = !DILocation(line: 1889, column: 63, scope: !5719)
!5726 = !DILocation(line: 1889, column: 70, scope: !5719)
!5727 = !DILocation(line: 1888, column: 24, scope: !5719)
!5728 = !DILocation(line: 1888, column: 23, scope: !5720)
!5729 = !DILocation(line: 1891, column: 21, scope: !5719)
!5730 = !DILocation(line: 1893, column: 35, scope: !5720)
!5731 = !DILocation(line: 1893, column: 19, scope: !5720)
!5732 = !DILocation(line: 1893, column: 29, scope: !5720)
!5733 = !DILocation(line: 1893, column: 33, scope: !5720)
!5734 = !DILocation(line: 1894, column: 17, scope: !5720)
!5735 = !DILocation(line: 1886, column: 39, scope: !5714)
!5736 = !DILocation(line: 1886, column: 15, scope: !5714)
!5737 = distinct !{!5737, !5717, !5738}
!5738 = !DILocation(line: 1894, column: 17, scope: !5711)
!5739 = !DILocation(line: 1896, column: 19, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5702, file: !3, line: 1896, column: 19)
!5741 = !DILocation(line: 1896, column: 28, scope: !5740)
!5742 = !DILocation(line: 1896, column: 25, scope: !5740)
!5743 = !DILocation(line: 1896, column: 19, scope: !5702)
!5744 = !DILocalVariable(name: "mask_vec", scope: !5745, file: !3, line: 1898, type: !326)
!5745 = distinct !DILexicalBlock(scope: !5740, file: !3, line: 1897, column: 17)
!5746 = !DILocation(line: 1898, column: 10, scope: !5745)
!5747 = !DILocation(line: 1900, column: 5, scope: !5745)
!5748 = !DILocation(line: 1900, column: 12, scope: !5745)
!5749 = !DILocation(line: 1900, column: 20, scope: !5745)
!5750 = !DILocalVariable(name: "t", scope: !5751, file: !3, line: 1902, type: !326)
!5751 = distinct !DILexicalBlock(scope: !5745, file: !3, line: 1901, column: 7)
!5752 = !DILocation(line: 1902, column: 14, scope: !5751)
!5753 = !DILocation(line: 1902, column: 33, scope: !5751)
!5754 = !DILocation(line: 1902, column: 52, scope: !5751)
!5755 = !DILocation(line: 1902, column: 57, scope: !5751)
!5756 = !DILocation(line: 1902, column: 18, scope: !5751)
!5757 = !DILocation(line: 1903, column: 20, scope: !5751)
!5758 = !DILocation(line: 1903, column: 18, scope: !5751)
!5759 = distinct !{!5759, !5747, !5760}
!5760 = !DILocation(line: 1904, column: 7, scope: !5745)
!5761 = !DILocation(line: 1905, column: 30, scope: !5745)
!5762 = !DILocation(line: 1905, column: 41, scope: !5745)
!5763 = !DILocation(line: 1905, column: 16, scope: !5745)
!5764 = !DILocation(line: 1905, column: 14, scope: !5745)
!5765 = !DILocation(line: 1906, column: 11, scope: !5745)
!5766 = !DILocation(line: 1908, column: 28, scope: !5767)
!5767 = distinct !DILexicalBlock(scope: !5745, file: !3, line: 1908, column: 9)
!5768 = !DILocation(line: 1908, column: 49, scope: !5767)
!5769 = !DILocation(line: 1909, column: 14, scope: !5767)
!5770 = !DILocation(line: 1908, column: 10, scope: !5767)
!5771 = !DILocation(line: 1908, column: 9, scope: !5745)
!5772 = !DILocation(line: 1911, column: 13, scope: !5773)
!5773 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 1911, column: 13)
!5774 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 1910, column: 7)
!5775 = !DILocation(line: 1911, column: 13, scope: !5774)
!5776 = !DILocation(line: 1913, column: 15, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5773, file: !3, line: 1912, column: 4)
!5778 = !DILocation(line: 1913, column: 6, scope: !5777)
!5779 = !DILocation(line: 1914, column: 26, scope: !5777)
!5780 = !DILocation(line: 1914, column: 37, scope: !5777)
!5781 = !DILocation(line: 1914, column: 6, scope: !5777)
!5782 = !DILocation(line: 1915, column: 4, scope: !5777)
!5783 = !DILocation(line: 1916, column: 15, scope: !5774)
!5784 = !DILocation(line: 1916, column: 9, scope: !5774)
!5785 = !DILocation(line: 1917, column: 9, scope: !5774)
!5786 = !DILocation(line: 1920, column: 24, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5745, file: !3, line: 1920, column: 23)
!5788 = !DILocation(line: 1920, column: 23, scope: !5745)
!5789 = !DILocation(line: 1922, column: 27, scope: !5790)
!5790 = distinct !DILexicalBlock(scope: !5791, file: !3, line: 1922, column: 27)
!5791 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 1921, column: 21)
!5792 = !DILocation(line: 1922, column: 27, scope: !5791)
!5793 = !DILocation(line: 1924, column: 45, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5790, file: !3, line: 1923, column: 25)
!5795 = !DILocation(line: 1924, column: 43, scope: !5794)
!5796 = !DILocation(line: 1925, column: 46, scope: !5794)
!5797 = !DILocation(line: 1925, column: 44, scope: !5794)
!5798 = !DILocation(line: 1926, column: 25, scope: !5794)
!5799 = !DILocation(line: 1928, column: 42, scope: !5791)
!5800 = !DILocation(line: 1928, column: 40, scope: !5791)
!5801 = !DILocation(line: 1931, column: 50, scope: !5791)
!5802 = !DILocation(line: 1931, column: 56, scope: !5791)
!5803 = !DILocation(line: 1932, column: 32, scope: !5791)
!5804 = !DILocation(line: 1932, column: 42, scope: !5791)
!5805 = !DILocation(line: 1932, column: 59, scope: !5791)
!5806 = !DILocation(line: 1933, column: 11, scope: !5791)
!5807 = !DILocation(line: 1933, column: 16, scope: !5791)
!5808 = !DILocation(line: 1933, column: 22, scope: !5791)
!5809 = !DILocation(line: 1933, column: 36, scope: !5791)
!5810 = !DILocation(line: 1933, column: 45, scope: !5791)
!5811 = !DILocation(line: 1934, column: 11, scope: !5791)
!5812 = !DILocation(line: 1934, column: 38, scope: !5791)
!5813 = !DILocation(line: 1931, column: 23, scope: !5791)
!5814 = !DILocation(line: 1935, column: 21, scope: !5791)
!5815 = !DILocation(line: 1936, column: 17, scope: !5745)
!5816 = !DILocation(line: 1937, column: 13, scope: !5702)
!5817 = !DILocation(line: 1883, column: 40, scope: !5697)
!5818 = !DILocation(line: 1883, column: 11, scope: !5697)
!5819 = distinct !{!5819, !5700, !5820}
!5820 = !DILocation(line: 1937, column: 13, scope: !5693)
!5821 = !DILocation(line: 1938, column: 9, scope: !5694)
!5822 = !DILocation(line: 1881, column: 39, scope: !5688)
!5823 = !DILocation(line: 1881, column: 7, scope: !5688)
!5824 = distinct !{!5824, !5691, !5825}
!5825 = !DILocation(line: 1938, column: 9, scope: !5685)
!5826 = !DILocation(line: 1939, column: 5, scope: !5670)
!5827 = !DILocation(line: 1869, column: 9, scope: !5667)
!5828 = !DILocation(line: 1866, column: 3, scope: !5667)
!5829 = distinct !{!5829, !5668, !5830}
!5830 = !DILocation(line: 1939, column: 5, scope: !5664)
!5831 = !DILocation(line: 1941, column: 9, scope: !5515)
!5832 = !DILocation(line: 1941, column: 3, scope: !5515)
!5833 = !DILocation(line: 1942, column: 3, scope: !5515)
!5834 = !DILocation(line: 1943, column: 1, scope: !5515)
!5835 = distinct !DISubprogram(name: "VEC_slp_tree_base_iterate", scope: !1757, file: !1757, line: 118, type: !5836, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5836 = !DISubroutineType(types: !5837)
!5837 = !{!100, !5838, !17, !3764}
!5838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5839, size: 64)
!5839 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3754)
!5840 = !DILocalVariable(name: "vec_", arg: 1, scope: !5835, file: !1757, line: 118, type: !5838)
!5841 = !DILocation(line: 118, column: 1, scope: !5835)
!5842 = !DILocalVariable(name: "ix_", arg: 2, scope: !5835, file: !1757, line: 118, type: !17)
!5843 = !DILocalVariable(name: "ptr", arg: 3, scope: !5835, file: !1757, line: 118, type: !3764)
!5844 = !DILocation(line: 118, column: 1, scope: !5845)
!5845 = distinct !DILexicalBlock(scope: !5835, file: !1757, line: 118, column: 1)
!5846 = !DILocation(line: 118, column: 1, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5845, file: !1757, line: 118, column: 1)
!5848 = !DILocation(line: 118, column: 1, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !5845, file: !1757, line: 118, column: 1)
!5850 = !DILocalVariable(name: "stmt", arg: 1, scope: !2, file: !3, line: 1710, type: !7)
!5851 = !DILocation(line: 1710, column: 31, scope: !2)
!5852 = !DILocalVariable(name: "first_mask_element", arg: 2, scope: !2, file: !3, line: 1710, type: !100)
!5853 = !DILocation(line: 1710, column: 41, scope: !2)
!5854 = !DILocalVariable(name: "m", arg: 3, scope: !2, file: !3, line: 1710, type: !100)
!5855 = !DILocation(line: 1710, column: 65, scope: !2)
!5856 = !DILocalVariable(name: "mask_nunits", arg: 4, scope: !2, file: !3, line: 1711, type: !100)
!5857 = !DILocation(line: 1711, column: 28, scope: !2)
!5858 = !DILocalVariable(name: "only_one_vec", arg: 5, scope: !2, file: !3, line: 1711, type: !6)
!5859 = !DILocation(line: 1711, column: 46, scope: !2)
!5860 = !DILocalVariable(name: "index", arg: 6, scope: !2, file: !3, line: 1711, type: !100)
!5861 = !DILocation(line: 1711, column: 64, scope: !2)
!5862 = !DILocalVariable(name: "mask", arg: 7, scope: !2, file: !3, line: 1712, type: !1752)
!5863 = !DILocation(line: 1712, column: 29, scope: !2)
!5864 = !DILocalVariable(name: "current_mask_element", arg: 8, scope: !2, file: !3, line: 1712, type: !1752)
!5865 = !DILocation(line: 1712, column: 40, scope: !2)
!5866 = !DILocalVariable(name: "need_next_vector", arg: 9, scope: !2, file: !3, line: 1713, type: !1753)
!5867 = !DILocation(line: 1713, column: 30, scope: !2)
!5868 = !DILocalVariable(name: "i", scope: !2, file: !3, line: 1715, type: !100)
!5869 = !DILocation(line: 1715, column: 7, scope: !2)
!5870 = !DILocation(line: 1721, column: 27, scope: !2)
!5871 = !DILocation(line: 1721, column: 48, scope: !2)
!5872 = !DILocation(line: 1721, column: 46, scope: !2)
!5873 = !DILocation(line: 1721, column: 4, scope: !2)
!5874 = !DILocation(line: 1721, column: 25, scope: !2)
!5875 = !DILocation(line: 1723, column: 28, scope: !2)
!5876 = !DILocation(line: 1723, column: 43, scope: !2)
!5877 = !DILocation(line: 1723, column: 64, scope: !2)
!5878 = !DILocation(line: 1723, column: 40, scope: !2)
!5879 = !DILocation(line: 1723, column: 4, scope: !2)
!5880 = !DILocation(line: 1723, column: 25, scope: !2)
!5881 = !DILocation(line: 1725, column: 8, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1725, column: 7)
!5883 = !DILocation(line: 1725, column: 7, scope: !5882)
!5884 = !DILocation(line: 1725, column: 31, scope: !5882)
!5885 = !DILocation(line: 1725, column: 29, scope: !5882)
!5886 = !DILocation(line: 1725, column: 7, scope: !2)
!5887 = !DILocation(line: 1726, column: 24, scope: !5882)
!5888 = !DILocation(line: 1726, column: 5, scope: !5882)
!5889 = !DILocation(line: 1730, column: 7, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1730, column: 7)
!5891 = !DILocation(line: 1730, column: 20, scope: !5890)
!5892 = !DILocation(line: 1730, column: 24, scope: !5890)
!5893 = !DILocation(line: 1730, column: 23, scope: !5890)
!5894 = !DILocation(line: 1730, column: 48, scope: !5890)
!5895 = !DILocation(line: 1730, column: 45, scope: !5890)
!5896 = !DILocation(line: 1730, column: 7, scope: !2)
!5897 = !DILocation(line: 1732, column: 11, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !5899, file: !3, line: 1732, column: 11)
!5899 = distinct !DILexicalBlock(scope: !5890, file: !3, line: 1731, column: 5)
!5900 = !DILocation(line: 1732, column: 11, scope: !5899)
!5901 = !DILocation(line: 1734, column: 20, scope: !5902)
!5902 = distinct !DILexicalBlock(scope: !5898, file: !3, line: 1733, column: 9)
!5903 = !DILocation(line: 1734, column: 11, scope: !5902)
!5904 = !DILocation(line: 1735, column: 30, scope: !5902)
!5905 = !DILocation(line: 1735, column: 41, scope: !5902)
!5906 = !DILocation(line: 1735, column: 11, scope: !5902)
!5907 = !DILocation(line: 1736, column: 9, scope: !5902)
!5908 = !DILocation(line: 1738, column: 7, scope: !5899)
!5909 = !DILocation(line: 1742, column: 8, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1742, column: 7)
!5911 = !DILocation(line: 1742, column: 7, scope: !5910)
!5912 = !DILocation(line: 1742, column: 32, scope: !5910)
!5913 = !DILocation(line: 1742, column: 44, scope: !5910)
!5914 = !DILocation(line: 1742, column: 29, scope: !5910)
!5915 = !DILocation(line: 1742, column: 7, scope: !2)
!5916 = !DILocation(line: 1744, column: 11, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 1744, column: 11)
!5918 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 1743, column: 5)
!5919 = !DILocation(line: 1744, column: 30, scope: !5917)
!5920 = !DILocation(line: 1744, column: 33, scope: !5917)
!5921 = !DILocation(line: 1744, column: 11, scope: !5918)
!5922 = !DILocation(line: 1749, column: 15, scope: !5923)
!5923 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 1749, column: 15)
!5924 = distinct !DILexicalBlock(scope: !5917, file: !3, line: 1745, column: 9)
!5925 = !DILocation(line: 1749, column: 15, scope: !5924)
!5926 = !DILocation(line: 1751, column: 24, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 1750, column: 13)
!5928 = !DILocation(line: 1751, column: 15, scope: !5927)
!5929 = !DILocation(line: 1753, column: 34, scope: !5927)
!5930 = !DILocation(line: 1753, column: 45, scope: !5927)
!5931 = !DILocation(line: 1753, column: 15, scope: !5927)
!5932 = !DILocation(line: 1754, column: 13, scope: !5927)
!5933 = !DILocation(line: 1756, column: 11, scope: !5924)
!5934 = !DILocation(line: 1762, column: 32, scope: !5918)
!5935 = !DILocation(line: 1762, column: 46, scope: !5918)
!5936 = !DILocation(line: 1762, column: 44, scope: !5918)
!5937 = !DILocation(line: 1762, column: 8, scope: !5918)
!5938 = !DILocation(line: 1762, column: 29, scope: !5918)
!5939 = !DILocation(line: 1764, column: 14, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 1764, column: 7)
!5941 = !DILocation(line: 1764, column: 12, scope: !5940)
!5942 = !DILocation(line: 1764, column: 19, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5940, file: !3, line: 1764, column: 7)
!5944 = !DILocation(line: 1764, column: 23, scope: !5943)
!5945 = !DILocation(line: 1764, column: 21, scope: !5943)
!5946 = !DILocation(line: 1764, column: 7, scope: !5940)
!5947 = !DILocation(line: 1765, column: 20, scope: !5943)
!5948 = !DILocation(line: 1765, column: 34, scope: !5943)
!5949 = !DILocation(line: 1765, column: 32, scope: !5943)
!5950 = !DILocation(line: 1765, column: 9, scope: !5943)
!5951 = !DILocation(line: 1765, column: 14, scope: !5943)
!5952 = !DILocation(line: 1765, column: 17, scope: !5943)
!5953 = !DILocation(line: 1764, column: 31, scope: !5943)
!5954 = !DILocation(line: 1764, column: 7, scope: !5943)
!5955 = distinct !{!5955, !5946, !5956}
!5956 = !DILocation(line: 1765, column: 34, scope: !5940)
!5957 = !DILocation(line: 1767, column: 29, scope: !5918)
!5958 = !DILocation(line: 1768, column: 18, scope: !5918)
!5959 = !DILocation(line: 1769, column: 5, scope: !5918)
!5960 = !DILocation(line: 1771, column: 23, scope: !2)
!5961 = !DILocation(line: 1771, column: 4, scope: !2)
!5962 = !DILocation(line: 1771, column: 21, scope: !2)
!5963 = !DILocation(line: 1774, column: 7, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1774, column: 7)
!5965 = !DILocation(line: 1774, column: 16, scope: !5964)
!5966 = !DILocation(line: 1774, column: 28, scope: !5964)
!5967 = !DILocation(line: 1774, column: 13, scope: !5964)
!5968 = !DILocation(line: 1774, column: 7, scope: !2)
!5969 = !DILocation(line: 1776, column: 28, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5964, file: !3, line: 1775, column: 5)
!5971 = !DILocation(line: 1777, column: 18, scope: !5970)
!5972 = !DILocation(line: 1778, column: 26, scope: !5970)
!5973 = !DILocation(line: 1779, column: 5, scope: !5970)
!5974 = !DILocation(line: 1781, column: 3, scope: !2)
!5975 = !DILocation(line: 1782, column: 1, scope: !2)
!5976 = distinct !DISubprogram(name: "vect_create_mask_and_perm", scope: !3, file: !3, line: 1648, type: !5977, scopeLine: 1654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!5977 = !DISubroutineType(types: !5978)
!5978 = !{null, !7, !7, !326, !100, !100, !4114, !3726, !326, !326, !3823, !100, !100}
!5979 = !DILocalVariable(name: "stmt", arg: 1, scope: !5976, file: !3, line: 1648, type: !7)
!5980 = !DILocation(line: 1648, column: 35, scope: !5976)
!5981 = !DILocalVariable(name: "next_scalar_stmt", arg: 2, scope: !5976, file: !3, line: 1648, type: !7)
!5982 = !DILocation(line: 1648, column: 48, scope: !5976)
!5983 = !DILocalVariable(name: "mask", arg: 3, scope: !5976, file: !3, line: 1649, type: !326)
!5984 = !DILocation(line: 1649, column: 33, scope: !5976)
!5985 = !DILocalVariable(name: "first_vec_indx", arg: 4, scope: !5976, file: !3, line: 1649, type: !100)
!5986 = !DILocation(line: 1649, column: 43, scope: !5976)
!5987 = !DILocalVariable(name: "second_vec_indx", arg: 5, scope: !5976, file: !3, line: 1649, type: !100)
!5988 = !DILocation(line: 1649, column: 63, scope: !5976)
!5989 = !DILocalVariable(name: "gsi", arg: 6, scope: !5976, file: !3, line: 1650, type: !4114)
!5990 = !DILocation(line: 1650, column: 50, scope: !5976)
!5991 = !DILocalVariable(name: "node", arg: 7, scope: !5976, file: !3, line: 1650, type: !3726)
!5992 = !DILocation(line: 1650, column: 64, scope: !5976)
!5993 = !DILocalVariable(name: "builtin_decl", arg: 8, scope: !5976, file: !3, line: 1651, type: !326)
!5994 = !DILocation(line: 1651, column: 33, scope: !5976)
!5995 = !DILocalVariable(name: "vectype", arg: 9, scope: !5976, file: !3, line: 1651, type: !326)
!5996 = !DILocation(line: 1651, column: 52, scope: !5976)
!5997 = !DILocalVariable(name: "dr_chain", arg: 10, scope: !5976, file: !3, line: 1652, type: !3823)
!5998 = !DILocation(line: 1652, column: 44, scope: !5976)
!5999 = !DILocalVariable(name: "ncopies", arg: 11, scope: !5976, file: !3, line: 1653, type: !100)
!6000 = !DILocation(line: 1653, column: 32, scope: !5976)
!6001 = !DILocalVariable(name: "vect_stmts_counter", arg: 12, scope: !5976, file: !3, line: 1653, type: !100)
!6002 = !DILocation(line: 1653, column: 45, scope: !5976)
!6003 = !DILocalVariable(name: "perm_dest", scope: !5976, file: !3, line: 1655, type: !326)
!6004 = !DILocation(line: 1655, column: 8, scope: !5976)
!6005 = !DILocalVariable(name: "perm_stmt", scope: !5976, file: !3, line: 1656, type: !7)
!6006 = !DILocation(line: 1656, column: 10, scope: !5976)
!6007 = !DILocalVariable(name: "next_stmt_info", scope: !5976, file: !3, line: 1657, type: !3934)
!6008 = !DILocation(line: 1657, column: 17, scope: !5976)
!6009 = !DILocalVariable(name: "i", scope: !5976, file: !3, line: 1658, type: !100)
!6010 = !DILocation(line: 1658, column: 7, scope: !5976)
!6011 = !DILocalVariable(name: "stride", scope: !5976, file: !3, line: 1658, type: !100)
!6012 = !DILocation(line: 1658, column: 10, scope: !5976)
!6013 = !DILocalVariable(name: "first_vec", scope: !5976, file: !3, line: 1659, type: !326)
!6014 = !DILocation(line: 1659, column: 8, scope: !5976)
!6015 = !DILocalVariable(name: "second_vec", scope: !5976, file: !3, line: 1659, type: !326)
!6016 = !DILocation(line: 1659, column: 19, scope: !5976)
!6017 = !DILocalVariable(name: "data_ref", scope: !5976, file: !3, line: 1659, type: !326)
!6018 = !DILocation(line: 1659, column: 31, scope: !5976)
!6019 = !DILocalVariable(name: "params", scope: !5976, file: !3, line: 1660, type: !3823)
!6020 = !DILocation(line: 1660, column: 21, scope: !5976)
!6021 = !DILocation(line: 1662, column: 12, scope: !5976)
!6022 = !DILocation(line: 1662, column: 50, scope: !5976)
!6023 = !DILocation(line: 1662, column: 48, scope: !5976)
!6024 = !DILocation(line: 1662, column: 10, scope: !5976)
!6025 = !DILocation(line: 1666, column: 12, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 1666, column: 3)
!6027 = !DILocation(line: 1666, column: 10, scope: !6026)
!6028 = !DILocation(line: 1666, column: 8, scope: !6026)
!6029 = !DILocation(line: 1667, column: 8, scope: !6030)
!6030 = distinct !DILexicalBlock(scope: !6026, file: !3, line: 1666, column: 3)
!6031 = !DILocation(line: 1667, column: 18, scope: !6030)
!6032 = !DILocation(line: 1667, column: 10, scope: !6030)
!6033 = !DILocation(line: 1666, column: 3, scope: !6026)
!6034 = !DILocation(line: 1668, column: 5, scope: !6030)
!6035 = !DILocation(line: 1667, column: 56, scope: !6030)
!6036 = !DILocation(line: 1666, column: 3, scope: !6030)
!6037 = distinct !{!6037, !6033, !6038}
!6038 = !DILocation(line: 1668, column: 5, scope: !6026)
!6039 = !DILocation(line: 1670, column: 63, scope: !5976)
!6040 = !DILocation(line: 1670, column: 44, scope: !5976)
!6041 = !DILocation(line: 1670, column: 70, scope: !5976)
!6042 = !DILocation(line: 1670, column: 15, scope: !5976)
!6043 = !DILocation(line: 1670, column: 13, scope: !5976)
!6044 = !DILocation(line: 1671, column: 10, scope: !6045)
!6045 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 1671, column: 3)
!6046 = !DILocation(line: 1671, column: 8, scope: !6045)
!6047 = !DILocation(line: 1671, column: 15, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 1671, column: 3)
!6049 = !DILocation(line: 1671, column: 19, scope: !6048)
!6050 = !DILocation(line: 1671, column: 17, scope: !6048)
!6051 = !DILocation(line: 1671, column: 3, scope: !6045)
!6052 = !DILocation(line: 1673, column: 19, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6048, file: !3, line: 1672, column: 5)
!6054 = !DILocation(line: 1673, column: 17, scope: !6053)
!6055 = !DILocation(line: 1674, column: 20, scope: !6053)
!6056 = !DILocation(line: 1674, column: 18, scope: !6053)
!6057 = !DILocation(line: 1677, column: 7, scope: !6053)
!6058 = !DILocation(line: 1678, column: 16, scope: !6053)
!6059 = !DILocation(line: 1678, column: 14, scope: !6053)
!6060 = !DILocation(line: 1679, column: 7, scope: !6053)
!6061 = !DILocation(line: 1680, column: 7, scope: !6053)
!6062 = !DILocation(line: 1681, column: 7, scope: !6053)
!6063 = !DILocation(line: 1684, column: 42, scope: !6053)
!6064 = !DILocation(line: 1684, column: 56, scope: !6053)
!6065 = !DILocation(line: 1684, column: 19, scope: !6053)
!6066 = !DILocation(line: 1684, column: 17, scope: !6053)
!6067 = !DILocation(line: 1685, column: 33, scope: !6053)
!6068 = !DILocation(line: 1685, column: 44, scope: !6053)
!6069 = !DILocation(line: 1685, column: 18, scope: !6053)
!6070 = !DILocation(line: 1685, column: 16, scope: !6053)
!6071 = !DILocation(line: 1686, column: 28, scope: !6053)
!6072 = !DILocation(line: 1686, column: 39, scope: !6053)
!6073 = !DILocation(line: 1686, column: 7, scope: !6053)
!6074 = !DILocation(line: 1687, column: 36, scope: !6053)
!6075 = !DILocation(line: 1687, column: 42, scope: !6053)
!6076 = !DILocation(line: 1687, column: 53, scope: !6053)
!6077 = !DILocation(line: 1687, column: 7, scope: !6053)
!6078 = !DILocation(line: 1690, column: 7, scope: !6053)
!6079 = !DILocation(line: 1693, column: 25, scope: !6053)
!6080 = !DILocation(line: 1693, column: 22, scope: !6053)
!6081 = !DILocation(line: 1694, column: 26, scope: !6053)
!6082 = !DILocation(line: 1694, column: 23, scope: !6053)
!6083 = !DILocation(line: 1695, column: 5, scope: !6053)
!6084 = !DILocation(line: 1671, column: 29, scope: !6048)
!6085 = !DILocation(line: 1671, column: 3, scope: !6048)
!6086 = distinct !{!6086, !6051, !6087}
!6087 = !DILocation(line: 1695, column: 5, scope: !6045)
!6088 = !DILocation(line: 1698, column: 36, scope: !5976)
!6089 = !DILocation(line: 1698, column: 20, scope: !5976)
!6090 = !DILocation(line: 1698, column: 18, scope: !5976)
!6091 = !DILocation(line: 1699, column: 42, scope: !5976)
!6092 = !DILocation(line: 1699, column: 3, scope: !5976)
!6093 = !DILocation(line: 1699, column: 40, scope: !5976)
!6094 = !DILocation(line: 1700, column: 1, scope: !5976)
!6095 = distinct !DISubprogram(name: "vect_schedule_slp", scope: !3, file: !3, line: 2043, type: !4178, scopeLine: 2044, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6096 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !6095, file: !3, line: 2043, type: !3941)
!6097 = !DILocation(line: 2043, column: 34, scope: !6095)
!6098 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !6095, file: !3, line: 2043, type: !3781)
!6099 = !DILocation(line: 2043, column: 58, scope: !6095)
!6100 = !DILocalVariable(name: "slp_instances", scope: !6095, file: !3, line: 2045, type: !3765)
!6101 = !DILocation(line: 2045, column: 29, scope: !6095)
!6102 = !DILocalVariable(name: "instance", scope: !6095, file: !3, line: 2046, type: !3777)
!6103 = !DILocation(line: 2046, column: 16, scope: !6095)
!6104 = !DILocalVariable(name: "i", scope: !6095, file: !3, line: 2047, type: !17)
!6105 = !DILocation(line: 2047, column: 16, scope: !6095)
!6106 = !DILocalVariable(name: "vf", scope: !6095, file: !3, line: 2047, type: !17)
!6107 = !DILocation(line: 2047, column: 19, scope: !6095)
!6108 = !DILocalVariable(name: "is_store", scope: !6095, file: !3, line: 2048, type: !6)
!6109 = !DILocation(line: 2048, column: 8, scope: !6095)
!6110 = !DILocation(line: 2050, column: 7, scope: !6111)
!6111 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 2050, column: 7)
!6112 = !DILocation(line: 2050, column: 7, scope: !6095)
!6113 = !DILocation(line: 2052, column: 23, scope: !6114)
!6114 = distinct !DILexicalBlock(scope: !6111, file: !3, line: 2051, column: 5)
!6115 = !DILocation(line: 2052, column: 21, scope: !6114)
!6116 = !DILocation(line: 2053, column: 12, scope: !6114)
!6117 = !DILocation(line: 2053, column: 10, scope: !6114)
!6118 = !DILocation(line: 2054, column: 5, scope: !6114)
!6119 = !DILocation(line: 2057, column: 23, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6111, file: !3, line: 2056, column: 5)
!6121 = !DILocation(line: 2057, column: 21, scope: !6120)
!6122 = !DILocation(line: 2058, column: 10, scope: !6120)
!6123 = !DILocation(line: 2061, column: 10, scope: !6124)
!6124 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 2061, column: 3)
!6125 = !DILocation(line: 2061, column: 8, scope: !6124)
!6126 = !DILocation(line: 2061, column: 15, scope: !6127)
!6127 = distinct !DILexicalBlock(scope: !6124, file: !3, line: 2061, column: 3)
!6128 = !DILocation(line: 2061, column: 3, scope: !6124)
!6129 = !DILocation(line: 2064, column: 46, scope: !6130)
!6130 = distinct !DILexicalBlock(scope: !6127, file: !3, line: 2062, column: 5)
!6131 = !DILocation(line: 2065, column: 46, scope: !6130)
!6132 = !DILocation(line: 2065, column: 56, scope: !6130)
!6133 = !DILocation(line: 2064, column: 18, scope: !6130)
!6134 = !DILocation(line: 2064, column: 16, scope: !6130)
!6135 = !DILocation(line: 2066, column: 11, scope: !6136)
!6136 = distinct !DILexicalBlock(scope: !6130, file: !3, line: 2066, column: 11)
!6137 = !DILocation(line: 2067, column: 4, scope: !6136)
!6138 = !DILocation(line: 2067, column: 7, scope: !6136)
!6139 = !DILocation(line: 2066, column: 11, scope: !6130)
!6140 = !DILocation(line: 2068, column: 11, scope: !6136)
!6141 = !DILocation(line: 2068, column: 2, scope: !6136)
!6142 = !DILocation(line: 2069, column: 5, scope: !6130)
!6143 = !DILocation(line: 2061, column: 72, scope: !6127)
!6144 = !DILocation(line: 2061, column: 3, scope: !6127)
!6145 = distinct !{!6145, !6128, !6146}
!6146 = !DILocation(line: 2069, column: 5, scope: !6124)
!6147 = !DILocation(line: 2071, column: 10, scope: !6095)
!6148 = !DILocation(line: 2071, column: 3, scope: !6095)
!6149 = distinct !DISubprogram(name: "vect_schedule_slp_instance", scope: !3, file: !3, line: 1950, type: !6150, scopeLine: 1952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6150 = !DISubroutineType(types: !6151)
!6151 = !{!6, !3726, !3777, !17}
!6152 = !DILocalVariable(name: "node", arg: 1, scope: !6149, file: !3, line: 1950, type: !3726)
!6153 = !DILocation(line: 1950, column: 38, scope: !6149)
!6154 = !DILocalVariable(name: "instance", arg: 2, scope: !6149, file: !3, line: 1950, type: !3777)
!6155 = !DILocation(line: 1950, column: 57, scope: !6149)
!6156 = !DILocalVariable(name: "vectorization_factor", arg: 3, scope: !6149, file: !3, line: 1951, type: !17)
!6157 = !DILocation(line: 1951, column: 42, scope: !6149)
!6158 = !DILocalVariable(name: "stmt", scope: !6149, file: !3, line: 1953, type: !7)
!6159 = !DILocation(line: 1953, column: 10, scope: !6149)
!6160 = !DILocalVariable(name: "strided_store", scope: !6149, file: !3, line: 1954, type: !6)
!6161 = !DILocation(line: 1954, column: 8, scope: !6149)
!6162 = !DILocalVariable(name: "is_store", scope: !6149, file: !3, line: 1954, type: !6)
!6163 = !DILocation(line: 1954, column: 23, scope: !6149)
!6164 = !DILocalVariable(name: "si", scope: !6149, file: !3, line: 1955, type: !4024)
!6165 = !DILocation(line: 1955, column: 24, scope: !6149)
!6166 = !DILocalVariable(name: "stmt_info", scope: !6149, file: !3, line: 1956, type: !3934)
!6167 = !DILocation(line: 1956, column: 17, scope: !6149)
!6168 = !DILocalVariable(name: "vec_stmts_size", scope: !6149, file: !3, line: 1957, type: !17)
!6169 = !DILocation(line: 1957, column: 16, scope: !6149)
!6170 = !DILocalVariable(name: "nunits", scope: !6149, file: !3, line: 1957, type: !17)
!6171 = !DILocation(line: 1957, column: 32, scope: !6149)
!6172 = !DILocalVariable(name: "group_size", scope: !6149, file: !3, line: 1957, type: !17)
!6173 = !DILocation(line: 1957, column: 40, scope: !6149)
!6174 = !DILocalVariable(name: "vectype", scope: !6149, file: !3, line: 1958, type: !326)
!6175 = !DILocation(line: 1958, column: 8, scope: !6149)
!6176 = !DILocalVariable(name: "i", scope: !6149, file: !3, line: 1959, type: !100)
!6177 = !DILocation(line: 1959, column: 7, scope: !6149)
!6178 = !DILocalVariable(name: "loads_node", scope: !6149, file: !3, line: 1960, type: !3726)
!6179 = !DILocation(line: 1960, column: 12, scope: !6149)
!6180 = !DILocation(line: 1962, column: 8, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 1962, column: 7)
!6182 = !DILocation(line: 1962, column: 7, scope: !6149)
!6183 = !DILocation(line: 1963, column: 5, scope: !6181)
!6184 = !DILocation(line: 1965, column: 31, scope: !6149)
!6185 = !DILocation(line: 1965, column: 53, scope: !6149)
!6186 = !DILocation(line: 1966, column: 31, scope: !6149)
!6187 = !DILocation(line: 1965, column: 3, scope: !6149)
!6188 = !DILocation(line: 1967, column: 31, scope: !6149)
!6189 = !DILocation(line: 1967, column: 54, scope: !6149)
!6190 = !DILocation(line: 1968, column: 31, scope: !6149)
!6191 = !DILocation(line: 1967, column: 3, scope: !6149)
!6192 = !DILocation(line: 1970, column: 10, scope: !6149)
!6193 = !DILocation(line: 1970, column: 8, scope: !6149)
!6194 = !DILocation(line: 1971, column: 31, scope: !6149)
!6195 = !DILocation(line: 1971, column: 15, scope: !6149)
!6196 = !DILocation(line: 1971, column: 13, scope: !6149)
!6197 = !DILocation(line: 1974, column: 42, scope: !6149)
!6198 = !DILocation(line: 1974, column: 13, scope: !6149)
!6199 = !DILocation(line: 1974, column: 11, scope: !6149)
!6200 = !DILocation(line: 1975, column: 27, scope: !6149)
!6201 = !DILocation(line: 1975, column: 12, scope: !6149)
!6202 = !DILocation(line: 1975, column: 10, scope: !6149)
!6203 = !DILocation(line: 1976, column: 16, scope: !6149)
!6204 = !DILocation(line: 1976, column: 14, scope: !6149)
!6205 = !DILocation(line: 1983, column: 21, scope: !6149)
!6206 = !DILocation(line: 1983, column: 44, scope: !6149)
!6207 = !DILocation(line: 1983, column: 42, scope: !6149)
!6208 = !DILocation(line: 1983, column: 58, scope: !6149)
!6209 = !DILocation(line: 1983, column: 56, scope: !6149)
!6210 = !DILocation(line: 1983, column: 18, scope: !6149)
!6211 = !DILocation(line: 1987, column: 7, scope: !6212)
!6212 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 1987, column: 7)
!6213 = !DILocation(line: 1987, column: 7, scope: !6149)
!6214 = !DILocation(line: 1989, column: 14, scope: !6215)
!6215 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 1989, column: 7)
!6216 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 1988, column: 5)
!6217 = !DILocation(line: 1989, column: 12, scope: !6215)
!6218 = !DILocation(line: 1990, column: 12, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6215, file: !3, line: 1989, column: 7)
!6220 = !DILocation(line: 1989, column: 7, scope: !6215)
!6221 = !DILocation(line: 1993, column: 16, scope: !6222)
!6222 = distinct !DILexicalBlock(scope: !6223, file: !3, line: 1993, column: 15)
!6223 = distinct !DILexicalBlock(scope: !6219, file: !3, line: 1992, column: 9)
!6224 = !DILocation(line: 1993, column: 15, scope: !6223)
!6225 = !DILocation(line: 1995, column: 49, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6222, file: !3, line: 1994, column: 13)
!6227 = !DILocation(line: 1995, column: 15, scope: !6226)
!6228 = !DILocation(line: 1995, column: 47, scope: !6226)
!6229 = !DILocation(line: 1997, column: 59, scope: !6226)
!6230 = !DILocation(line: 1997, column: 15, scope: !6226)
!6231 = !DILocation(line: 1997, column: 57, scope: !6226)
!6232 = !DILocation(line: 1998, column: 13, scope: !6226)
!6233 = !DILocation(line: 1999, column: 9, scope: !6223)
!6234 = !DILocation(line: 1991, column: 13, scope: !6219)
!6235 = !DILocation(line: 1989, column: 7, scope: !6219)
!6236 = distinct !{!6236, !6220, !6237}
!6237 = !DILocation(line: 1999, column: 9, scope: !6215)
!6238 = !DILocation(line: 2000, column: 5, scope: !6216)
!6239 = !DILocation(line: 2002, column: 8, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 2002, column: 7)
!6241 = !DILocation(line: 2002, column: 7, scope: !6149)
!6242 = !DILocation(line: 2004, column: 35, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6240, file: !3, line: 2003, column: 5)
!6244 = !DILocation(line: 2004, column: 7, scope: !6243)
!6245 = !DILocation(line: 2004, column: 33, scope: !6243)
!6246 = !DILocation(line: 2005, column: 45, scope: !6243)
!6247 = !DILocation(line: 2005, column: 7, scope: !6243)
!6248 = !DILocation(line: 2005, column: 43, scope: !6243)
!6249 = !DILocation(line: 2006, column: 5, scope: !6243)
!6250 = !DILocation(line: 2008, column: 7, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 2008, column: 7)
!6252 = !DILocation(line: 2008, column: 7, scope: !6149)
!6253 = !DILocation(line: 2010, column: 16, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6251, file: !3, line: 2009, column: 5)
!6255 = !DILocation(line: 2010, column: 7, scope: !6254)
!6256 = !DILocation(line: 2011, column: 26, scope: !6254)
!6257 = !DILocation(line: 2011, column: 37, scope: !6254)
!6258 = !DILocation(line: 2011, column: 7, scope: !6254)
!6259 = !DILocation(line: 2012, column: 5, scope: !6254)
!6260 = !DILocation(line: 2015, column: 7, scope: !6261)
!6261 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 2015, column: 7)
!6262 = !DILocation(line: 2016, column: 7, scope: !6261)
!6263 = !DILocation(line: 2016, column: 10, scope: !6261)
!6264 = !DILocation(line: 2017, column: 7, scope: !6261)
!6265 = !DILocation(line: 2017, column: 11, scope: !6261)
!6266 = !DILocation(line: 2015, column: 7, scope: !6149)
!6267 = !DILocation(line: 2018, column: 24, scope: !6261)
!6268 = !DILocation(line: 2018, column: 10, scope: !6261)
!6269 = !DILocation(line: 2018, column: 5, scope: !6261)
!6270 = !DILocation(line: 2020, column: 24, scope: !6261)
!6271 = !DILocation(line: 2020, column: 10, scope: !6261)
!6272 = !DILocation(line: 2022, column: 35, scope: !6149)
!6273 = !DILocation(line: 2022, column: 62, scope: !6149)
!6274 = !DILocation(line: 2022, column: 68, scope: !6149)
!6275 = !DILocation(line: 2022, column: 14, scope: !6149)
!6276 = !DILocation(line: 2022, column: 12, scope: !6149)
!6277 = !DILocation(line: 2023, column: 7, scope: !6278)
!6278 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 2023, column: 7)
!6279 = !DILocation(line: 2023, column: 7, scope: !6149)
!6280 = !DILocation(line: 2025, column: 11, scope: !6281)
!6281 = distinct !DILexicalBlock(scope: !6282, file: !3, line: 2025, column: 11)
!6282 = distinct !DILexicalBlock(scope: !6278, file: !3, line: 2024, column: 5)
!6283 = !DILocation(line: 2025, column: 11, scope: !6282)
!6284 = !DILocation(line: 2029, column: 22, scope: !6281)
!6285 = !DILocation(line: 2029, column: 2, scope: !6281)
!6286 = !DILocation(line: 2032, column: 2, scope: !6281)
!6287 = !DILocation(line: 2034, column: 7, scope: !6282)
!6288 = !DILocation(line: 2038, column: 3, scope: !6149)
!6289 = !DILocation(line: 2039, column: 1, scope: !6149)
!6290 = distinct !DISubprogram(name: "vect_slp_transform_bb", scope: !3, file: !3, line: 2078, type: !6291, scopeLine: 2079, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6291 = !DISubroutineType(types: !6292)
!6292 = !{null, !589}
!6293 = !DILocalVariable(name: "bb", arg: 1, scope: !6290, file: !3, line: 2078, type: !589)
!6294 = !DILocation(line: 2078, column: 36, scope: !6290)
!6295 = !DILocalVariable(name: "bb_vinfo", scope: !6290, file: !3, line: 2080, type: !3781)
!6296 = !DILocation(line: 2080, column: 15, scope: !6290)
!6297 = !DILocation(line: 2080, column: 43, scope: !6290)
!6298 = !DILocation(line: 2080, column: 26, scope: !6290)
!6299 = !DILocalVariable(name: "si", scope: !6290, file: !3, line: 2081, type: !4024)
!6300 = !DILocation(line: 2081, column: 24, scope: !6290)
!6301 = !DILocation(line: 2083, column: 3, scope: !6290)
!6302 = !DILocation(line: 2085, column: 7, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 2085, column: 7)
!6304 = !DILocation(line: 2085, column: 7, scope: !6290)
!6305 = !DILocation(line: 2086, column: 14, scope: !6303)
!6306 = !DILocation(line: 2086, column: 5, scope: !6303)
!6307 = !DILocation(line: 2088, column: 27, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 2088, column: 3)
!6309 = !DILocation(line: 2088, column: 13, scope: !6308)
!6310 = !DILocation(line: 2088, column: 8, scope: !6308)
!6311 = !DILocation(line: 2088, column: 33, scope: !6312)
!6312 = distinct !DILexicalBlock(scope: !6308, file: !3, line: 2088, column: 3)
!6313 = !DILocation(line: 2088, column: 32, scope: !6312)
!6314 = !DILocation(line: 2088, column: 3, scope: !6308)
!6315 = !DILocalVariable(name: "stmt", scope: !6316, file: !3, line: 2090, type: !7)
!6316 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 2089, column: 5)
!6317 = !DILocation(line: 2090, column: 14, scope: !6316)
!6318 = !DILocation(line: 2090, column: 21, scope: !6316)
!6319 = !DILocalVariable(name: "stmt_info", scope: !6316, file: !3, line: 2091, type: !3934)
!6320 = !DILocation(line: 2091, column: 21, scope: !6316)
!6321 = !DILocation(line: 2093, column: 11, scope: !6322)
!6322 = distinct !DILexicalBlock(scope: !6316, file: !3, line: 2093, column: 11)
!6323 = !DILocation(line: 2093, column: 11, scope: !6316)
!6324 = !DILocation(line: 2095, column: 20, scope: !6325)
!6325 = distinct !DILexicalBlock(scope: !6322, file: !3, line: 2094, column: 9)
!6326 = !DILocation(line: 2095, column: 11, scope: !6325)
!6327 = !DILocation(line: 2096, column: 30, scope: !6325)
!6328 = !DILocation(line: 2096, column: 41, scope: !6325)
!6329 = !DILocation(line: 2096, column: 11, scope: !6325)
!6330 = !DILocation(line: 2097, column: 9, scope: !6325)
!6331 = !DILocation(line: 2099, column: 35, scope: !6316)
!6332 = !DILocation(line: 2099, column: 19, scope: !6316)
!6333 = !DILocation(line: 2099, column: 17, scope: !6316)
!6334 = !DILocation(line: 2100, column: 7, scope: !6316)
!6335 = !DILocation(line: 2103, column: 11, scope: !6336)
!6336 = distinct !DILexicalBlock(scope: !6316, file: !3, line: 2103, column: 11)
!6337 = !DILocation(line: 2103, column: 11, scope: !6316)
!6338 = !DILocation(line: 2105, column: 36, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6336, file: !3, line: 2104, column: 9)
!6340 = !DILocation(line: 2105, column: 11, scope: !6339)
!6341 = !DILocation(line: 2106, column: 11, scope: !6339)
!6342 = !DILocation(line: 2108, column: 5, scope: !6316)
!6343 = !DILocation(line: 2088, column: 49, scope: !6312)
!6344 = !DILocation(line: 2088, column: 3, scope: !6312)
!6345 = distinct !{!6345, !6314, !6346}
!6346 = !DILocation(line: 2108, column: 5, scope: !6308)
!6347 = !DILocation(line: 2110, column: 38, scope: !6290)
!6348 = !DILocation(line: 2110, column: 26, scope: !6290)
!6349 = !DILocation(line: 2110, column: 3, scope: !6290)
!6350 = !DILocation(line: 2114, column: 3, scope: !6290)
!6351 = !DILocation(line: 2116, column: 7, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 2116, column: 7)
!6353 = !DILocation(line: 2116, column: 7, scope: !6290)
!6354 = !DILocation(line: 2117, column: 14, scope: !6352)
!6355 = !DILocation(line: 2117, column: 5, scope: !6352)
!6356 = !DILocation(line: 2119, column: 24, scope: !6290)
!6357 = !DILocation(line: 2119, column: 3, scope: !6290)
!6358 = !DILocation(line: 2120, column: 1, scope: !6290)
!6359 = distinct !DISubprogram(name: "vec_info_for_bb", scope: !1757, file: !1757, line: 328, type: !4688, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6360 = !DILocalVariable(name: "bb", arg: 1, scope: !6359, file: !1757, line: 328, type: !589)
!6361 = !DILocation(line: 328, column: 30, scope: !6359)
!6362 = !DILocation(line: 330, column: 24, scope: !6359)
!6363 = !DILocation(line: 330, column: 28, scope: !6359)
!6364 = !DILocation(line: 330, column: 10, scope: !6359)
!6365 = !DILocation(line: 330, column: 3, scope: !6359)
!6366 = distinct !DISubprogram(name: "gimple_vop", scope: !6367, file: !6367, line: 49, type: !6368, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6367 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!6368 = !DISubroutineType(types: !6369)
!6369 = !{!326, !6370}
!6370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6371, size: 64)
!6371 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !578)
!6372 = !DILocalVariable(name: "fun", arg: 1, scope: !6366, file: !6367, line: 49, type: !6370)
!6373 = !DILocation(line: 49, column: 36, scope: !6366)
!6374 = !DILocation(line: 51, column: 3, scope: !6366)
!6375 = !DILocation(line: 52, column: 10, scope: !6366)
!6376 = !DILocation(line: 52, column: 15, scope: !6366)
!6377 = !DILocation(line: 52, column: 26, scope: !6366)
!6378 = !DILocation(line: 52, column: 3, scope: !6366)
!6379 = distinct !DISubprogram(name: "bb_seq", scope: !11, file: !11, line: 237, type: !6380, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6380 = !DISubroutineType(types: !6381)
!6381 = !{!61, !6382}
!6382 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !8, line: 112, baseType: !6383)
!6383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6384, size: 64)
!6384 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !35)
!6385 = !DILocalVariable(name: "bb", arg: 1, scope: !6379, file: !11, line: 237, type: !6382)
!6386 = !DILocation(line: 237, column: 27, scope: !6379)
!6387 = !DILocation(line: 239, column: 13, scope: !6379)
!6388 = !DILocation(line: 239, column: 17, scope: !6379)
!6389 = !DILocation(line: 239, column: 23, scope: !6379)
!6390 = !DILocation(line: 239, column: 33, scope: !6379)
!6391 = !DILocation(line: 239, column: 36, scope: !6379)
!6392 = !DILocation(line: 239, column: 40, scope: !6379)
!6393 = !DILocation(line: 239, column: 43, scope: !6379)
!6394 = !DILocation(line: 239, column: 10, scope: !6379)
!6395 = !DILocation(line: 239, column: 53, scope: !6379)
!6396 = !DILocation(line: 239, column: 57, scope: !6379)
!6397 = !DILocation(line: 239, column: 60, scope: !6379)
!6398 = !DILocation(line: 239, column: 68, scope: !6379)
!6399 = !DILocation(line: 239, column: 3, scope: !6379)
!6400 = distinct !DISubprogram(name: "gimple_seq_first", scope: !11, file: !11, line: 159, type: !6401, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6401 = !DISubroutineType(types: !6402)
!6402 = !{!66, !6403}
!6403 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !8, line: 67, baseType: !6404)
!6404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6405, size: 64)
!6405 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !63)
!6406 = !DILocalVariable(name: "s", arg: 1, scope: !6400, file: !11, line: 159, type: !6403)
!6407 = !DILocation(line: 159, column: 36, scope: !6400)
!6408 = !DILocation(line: 161, column: 10, scope: !6400)
!6409 = !DILocation(line: 161, column: 14, scope: !6400)
!6410 = !DILocation(line: 161, column: 17, scope: !6400)
!6411 = !DILocation(line: 161, column: 3, scope: !6400)
!6412 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !11, file: !11, line: 34, type: !6413, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6413 = !DISubroutineType(types: !6414)
!6414 = !{null, !6415}
!6415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3710, size: 64)
!6416 = !DILocalVariable(name: "vec_", arg: 1, scope: !6412, file: !11, line: 34, type: !6415)
!6417 = !DILocation(line: 34, column: 1, scope: !6412)
!6418 = !DILocation(line: 34, column: 1, scope: !6419)
!6419 = distinct !DILexicalBlock(scope: !6412, file: !11, line: 34, column: 1)
!6420 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !11, file: !11, line: 34, type: !6421, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6421 = !DISubroutineType(types: !6422)
!6422 = !{!3710, !100}
!6423 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6420, file: !11, line: 34, type: !100)
!6424 = !DILocation(line: 34, column: 1, scope: !6420)
!6425 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !11, file: !11, line: 34, type: !6426, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6426 = !DISubroutineType(types: !6427)
!6427 = !{!4243, !6415, !7}
!6428 = !DILocalVariable(name: "vec_", arg: 1, scope: !6425, file: !11, line: 34, type: !6415)
!6429 = !DILocation(line: 34, column: 1, scope: !6425)
!6430 = !DILocalVariable(name: "obj_", arg: 2, scope: !6425, file: !11, line: 34, type: !7)
!6431 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !3737, file: !3737, line: 32, type: !6432, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6432 = !DISubroutineType(types: !6433)
!6433 = !{!3735, !100}
!6434 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6431, file: !3737, line: 32, type: !100)
!6435 = !DILocation(line: 32, column: 1, scope: !6431)
!6436 = distinct !DISubprogram(name: "VEC_slp_tree_heap_alloc", scope: !1757, file: !1757, line: 119, type: !6437, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6437 = !DISubroutineType(types: !6438)
!6438 = !{!3749, !100}
!6439 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6436, file: !1757, line: 119, type: !100)
!6440 = !DILocation(line: 119, column: 1, scope: !6436)
!6441 = distinct !DISubprogram(name: "vect_build_slp_tree", scope: !3, file: !3, line: 304, type: !6442, scopeLine: 311, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!6442 = !DISubroutineType(types: !6443)
!6443 = !{!6, !3941, !3781, !3764, !17, !1752, !1752, !100, !6444, !4164, !4172, !17}
!6444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!6445 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !6441, file: !3, line: 304, type: !3941)
!6446 = !DILocation(line: 304, column: 36, scope: !6441)
!6447 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !6441, file: !3, line: 304, type: !3781)
!6448 = !DILocation(line: 304, column: 60, scope: !6441)
!6449 = !DILocalVariable(name: "node", arg: 3, scope: !6441, file: !3, line: 305, type: !3764)
!6450 = !DILocation(line: 305, column: 32, scope: !6441)
!6451 = !DILocalVariable(name: "group_size", arg: 4, scope: !6441, file: !3, line: 305, type: !17)
!6452 = !DILocation(line: 305, column: 51, scope: !6441)
!6453 = !DILocalVariable(name: "inside_cost", arg: 5, scope: !6441, file: !3, line: 306, type: !1752)
!6454 = !DILocation(line: 306, column: 27, scope: !6441)
!6455 = !DILocalVariable(name: "outside_cost", arg: 6, scope: !6441, file: !3, line: 306, type: !1752)
!6456 = !DILocation(line: 306, column: 45, scope: !6441)
!6457 = !DILocalVariable(name: "ncopies_for_cost", arg: 7, scope: !6441, file: !3, line: 307, type: !100)
!6458 = !DILocation(line: 307, column: 26, scope: !6441)
!6459 = !DILocalVariable(name: "max_nunits", arg: 8, scope: !6441, file: !3, line: 307, type: !6444)
!6460 = !DILocation(line: 307, column: 58, scope: !6441)
!6461 = !DILocalVariable(name: "load_permutation", arg: 9, scope: !6441, file: !3, line: 308, type: !4164)
!6462 = !DILocation(line: 308, column: 40, scope: !6441)
!6463 = !DILocalVariable(name: "loads", arg: 10, scope: !6441, file: !3, line: 309, type: !4172)
!6464 = !DILocation(line: 309, column: 45, scope: !6441)
!6465 = !DILocalVariable(name: "vectorization_factor", arg: 11, scope: !6441, file: !3, line: 310, type: !17)
!6466 = !DILocation(line: 310, column: 35, scope: !6441)
!6467 = !DILocalVariable(name: "def_stmts0", scope: !6441, file: !3, line: 312, type: !3710)
!6468 = !DILocation(line: 312, column: 23, scope: !6441)
!6469 = !DILocation(line: 312, column: 36, scope: !6441)
!6470 = !DILocalVariable(name: "def_stmts1", scope: !6441, file: !3, line: 313, type: !3710)
!6471 = !DILocation(line: 313, column: 23, scope: !6441)
!6472 = !DILocation(line: 313, column: 37, scope: !6441)
!6473 = !DILocalVariable(name: "i", scope: !6441, file: !3, line: 314, type: !17)
!6474 = !DILocation(line: 314, column: 16, scope: !6441)
!6475 = !DILocalVariable(name: "stmts", scope: !6441, file: !3, line: 315, type: !3710)
!6476 = !DILocation(line: 315, column: 23, scope: !6441)
!6477 = !DILocation(line: 315, column: 31, scope: !6441)
!6478 = !DILocalVariable(name: "stmt", scope: !6441, file: !3, line: 316, type: !7)
!6479 = !DILocation(line: 316, column: 10, scope: !6441)
!6480 = !DILocation(line: 316, column: 17, scope: !6441)
!6481 = !DILocalVariable(name: "first_stmt_dt0", scope: !6441, file: !3, line: 317, type: !1964)
!6482 = !DILocation(line: 317, column: 22, scope: !6441)
!6483 = !DILocalVariable(name: "first_stmt_dt1", scope: !6441, file: !3, line: 318, type: !1964)
!6484 = !DILocation(line: 318, column: 22, scope: !6441)
!6485 = !DILocalVariable(name: "first_stmt_code", scope: !6441, file: !3, line: 319, type: !1115)
!6486 = !DILocation(line: 319, column: 18, scope: !6441)
!6487 = !DILocalVariable(name: "rhs_code", scope: !6441, file: !3, line: 319, type: !1115)
!6488 = !DILocation(line: 319, column: 48, scope: !6441)
!6489 = !DILocalVariable(name: "first_stmt_def1_type", scope: !6441, file: !3, line: 320, type: !326)
!6490 = !DILocation(line: 320, column: 8, scope: !6441)
!6491 = !DILocalVariable(name: "first_stmt_def0_type", scope: !6441, file: !3, line: 320, type: !326)
!6492 = !DILocation(line: 320, column: 42, scope: !6441)
!6493 = !DILocalVariable(name: "lhs", scope: !6441, file: !3, line: 321, type: !326)
!6494 = !DILocation(line: 321, column: 8, scope: !6441)
!6495 = !DILocalVariable(name: "stop_recursion", scope: !6441, file: !3, line: 322, type: !6)
!6496 = !DILocation(line: 322, column: 8, scope: !6441)
!6497 = !DILocalVariable(name: "need_same_oprnds", scope: !6441, file: !3, line: 322, type: !6)
!6498 = !DILocation(line: 322, column: 32, scope: !6441)
!6499 = !DILocalVariable(name: "vectype", scope: !6441, file: !3, line: 323, type: !326)
!6500 = !DILocation(line: 323, column: 8, scope: !6441)
!6501 = !DILocalVariable(name: "scalar_type", scope: !6441, file: !3, line: 323, type: !326)
!6502 = !DILocation(line: 323, column: 17, scope: !6441)
!6503 = !DILocalVariable(name: "first_op1", scope: !6441, file: !3, line: 323, type: !326)
!6504 = !DILocation(line: 323, column: 30, scope: !6441)
!6505 = !DILocalVariable(name: "ncopies", scope: !6441, file: !3, line: 324, type: !17)
!6506 = !DILocation(line: 324, column: 16, scope: !6441)
!6507 = !DILocalVariable(name: "optab", scope: !6441, file: !3, line: 325, type: !6508)
!6508 = !DIDerivedType(tag: DW_TAG_typedef, name: "optab", file: !3624, line: 55, baseType: !6509)
!6509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6510, size: 64)
!6510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_d", file: !3624, line: 46, size: 3072, elements: !6511)
!6511 = !{!6512, !6513, !6514, !6515, !6519}
!6512 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !6510, file: !3624, line: 48, baseType: !1989, size: 32)
!6513 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_basename", scope: !6510, file: !3624, line: 49, baseType: !103, size: 64, offset: 64)
!6514 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_suffix", scope: !6510, file: !3624, line: 50, baseType: !105, size: 8, offset: 128)
!6515 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_gen", scope: !6510, file: !3624, line: 51, baseType: !6516, size: 64, offset: 192)
!6516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6517, size: 64)
!6517 = !DISubroutineType(types: !6518)
!6518 = !{null, !6509, !103, !105, !118}
!6519 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !6510, file: !3624, line: 53, baseType: !6520, size: 2784, offset: 256)
!6520 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6521, size: 2784, elements: !6524)
!6521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_handlers", file: !3624, line: 41, size: 32, elements: !6522)
!6522 = !{!6523}
!6523 = !DIDerivedType(tag: DW_TAG_member, name: "insn_code", scope: !6521, file: !3624, line: 43, baseType: !2131, size: 32)
!6524 = !{!6525}
!6525 = !DISubrange(count: 87)
!6526 = !DILocation(line: 325, column: 9, scope: !6441)
!6527 = !DILocalVariable(name: "icode", scope: !6441, file: !3, line: 326, type: !100)
!6528 = !DILocation(line: 326, column: 7, scope: !6441)
!6529 = !DILocalVariable(name: "optab_op2_mode", scope: !6441, file: !3, line: 327, type: !118)
!6530 = !DILocation(line: 327, column: 21, scope: !6441)
!6531 = !DILocalVariable(name: "vec_mode", scope: !6441, file: !3, line: 328, type: !118)
!6532 = !DILocation(line: 328, column: 21, scope: !6441)
!6533 = !DILocalVariable(name: "first_stmt_const_oprnd", scope: !6441, file: !3, line: 329, type: !326)
!6534 = !DILocation(line: 329, column: 8, scope: !6441)
!6535 = !DILocalVariable(name: "first_dr", scope: !6441, file: !3, line: 330, type: !3803)
!6536 = !DILocation(line: 330, column: 26, scope: !6441)
!6537 = !DILocalVariable(name: "pattern0", scope: !6441, file: !3, line: 331, type: !6)
!6538 = !DILocation(line: 331, column: 8, scope: !6441)
!6539 = !DILocalVariable(name: "pattern1", scope: !6441, file: !3, line: 331, type: !6)
!6540 = !DILocation(line: 331, column: 26, scope: !6441)
!6541 = !DILocalVariable(name: "dummy", scope: !6441, file: !3, line: 332, type: !295)
!6542 = !DILocation(line: 332, column: 17, scope: !6441)
!6543 = !DILocalVariable(name: "permutation", scope: !6441, file: !3, line: 333, type: !6)
!6544 = !DILocation(line: 333, column: 8, scope: !6441)
!6545 = !DILocalVariable(name: "load_place", scope: !6441, file: !3, line: 334, type: !17)
!6546 = !DILocation(line: 334, column: 16, scope: !6441)
!6547 = !DILocalVariable(name: "first_load", scope: !6441, file: !3, line: 335, type: !7)
!6548 = !DILocation(line: 335, column: 10, scope: !6441)
!6549 = !DILocation(line: 338, column: 10, scope: !6550)
!6550 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 338, column: 3)
!6551 = !DILocation(line: 338, column: 8, scope: !6550)
!6552 = !DILocation(line: 338, column: 15, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6550, file: !3, line: 338, column: 3)
!6554 = !DILocation(line: 338, column: 3, scope: !6550)
!6555 = !DILocation(line: 340, column: 11, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 340, column: 11)
!6557 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 339, column: 5)
!6558 = !DILocation(line: 340, column: 11, scope: !6557)
!6559 = !DILocation(line: 342, column: 13, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6556, file: !3, line: 341, column: 2)
!6561 = !DILocation(line: 342, column: 4, scope: !6560)
!6562 = !DILocation(line: 343, column: 23, scope: !6560)
!6563 = !DILocation(line: 343, column: 34, scope: !6560)
!6564 = !DILocation(line: 343, column: 4, scope: !6560)
!6565 = !DILocation(line: 344, column: 2, scope: !6560)
!6566 = !DILocation(line: 346, column: 29, scope: !6557)
!6567 = !DILocation(line: 346, column: 13, scope: !6557)
!6568 = !DILocation(line: 346, column: 11, scope: !6557)
!6569 = !DILocation(line: 347, column: 11, scope: !6570)
!6570 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 347, column: 11)
!6571 = !DILocation(line: 347, column: 15, scope: !6570)
!6572 = !DILocation(line: 347, column: 11, scope: !6557)
!6573 = !DILocation(line: 349, column: 8, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6575, file: !3, line: 349, column: 8)
!6575 = distinct !DILexicalBlock(scope: !6570, file: !3, line: 348, column: 2)
!6576 = !DILocation(line: 349, column: 8, scope: !6575)
!6577 = !DILocation(line: 351, column: 17, scope: !6578)
!6578 = distinct !DILexicalBlock(scope: !6574, file: !3, line: 350, column: 6)
!6579 = !DILocation(line: 351, column: 8, scope: !6578)
!6580 = !DILocation(line: 353, column: 27, scope: !6578)
!6581 = !DILocation(line: 353, column: 38, scope: !6578)
!6582 = !DILocation(line: 353, column: 8, scope: !6578)
!6583 = !DILocation(line: 354, column: 6, scope: !6578)
!6584 = !DILocation(line: 356, column: 4, scope: !6575)
!6585 = !DILocation(line: 359, column: 52, scope: !6557)
!6586 = !DILocation(line: 359, column: 21, scope: !6557)
!6587 = !DILocation(line: 359, column: 19, scope: !6557)
!6588 = !DILocation(line: 360, column: 46, scope: !6557)
!6589 = !DILocation(line: 360, column: 17, scope: !6557)
!6590 = !DILocation(line: 360, column: 15, scope: !6557)
!6591 = !DILocation(line: 361, column: 12, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 361, column: 11)
!6593 = !DILocation(line: 361, column: 11, scope: !6557)
!6594 = !DILocation(line: 363, column: 15, scope: !6595)
!6595 = distinct !DILexicalBlock(scope: !6596, file: !3, line: 363, column: 15)
!6596 = distinct !DILexicalBlock(scope: !6592, file: !3, line: 362, column: 9)
!6597 = !DILocation(line: 363, column: 15, scope: !6596)
!6598 = !DILocation(line: 365, column: 24, scope: !6599)
!6599 = distinct !DILexicalBlock(scope: !6595, file: !3, line: 364, column: 13)
!6600 = !DILocation(line: 365, column: 15, scope: !6599)
!6601 = !DILocation(line: 366, column: 35, scope: !6599)
!6602 = !DILocation(line: 366, column: 46, scope: !6599)
!6603 = !DILocation(line: 366, column: 15, scope: !6599)
!6604 = !DILocation(line: 367, column: 13, scope: !6599)
!6605 = !DILocation(line: 368, column: 11, scope: !6596)
!6606 = !DILocation(line: 371, column: 17, scope: !6557)
!6607 = !DILocation(line: 371, column: 40, scope: !6557)
!6608 = !DILocation(line: 371, column: 38, scope: !6557)
!6609 = !DILocation(line: 371, column: 15, scope: !6557)
!6610 = !DILocation(line: 372, column: 11, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 372, column: 11)
!6612 = !DILocation(line: 372, column: 19, scope: !6611)
!6613 = !DILocation(line: 372, column: 11, scope: !6557)
!6614 = !DILocation(line: 374, column: 8, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6616, file: !3, line: 374, column: 8)
!6616 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 373, column: 9)
!6617 = !DILocation(line: 374, column: 8, scope: !6616)
!6618 = !DILocation(line: 375, column: 22, scope: !6615)
!6619 = !DILocation(line: 375, column: 13, scope: !6615)
!6620 = !DILocation(line: 378, column: 8, scope: !6621)
!6621 = distinct !DILexicalBlock(scope: !6616, file: !3, line: 378, column: 8)
!6622 = !DILocation(line: 378, column: 8, scope: !6616)
!6623 = !DILocation(line: 379, column: 6, scope: !6621)
!6624 = !DILocation(line: 380, column: 9, scope: !6616)
!6625 = !DILocation(line: 383, column: 12, scope: !6626)
!6626 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 383, column: 11)
!6627 = !DILocation(line: 383, column: 11, scope: !6626)
!6628 = !DILocation(line: 383, column: 25, scope: !6626)
!6629 = !DILocation(line: 383, column: 23, scope: !6626)
!6630 = !DILocation(line: 383, column: 11, scope: !6557)
!6631 = !DILocation(line: 384, column: 23, scope: !6626)
!6632 = !DILocation(line: 384, column: 10, scope: !6626)
!6633 = !DILocation(line: 384, column: 21, scope: !6626)
!6634 = !DILocation(line: 384, column: 9, scope: !6626)
!6635 = !DILocation(line: 386, column: 27, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 386, column: 11)
!6637 = !DILocation(line: 386, column: 11, scope: !6636)
!6638 = !DILocation(line: 386, column: 11, scope: !6557)
!6639 = !DILocation(line: 387, column: 11, scope: !6636)
!6640 = !DILocation(line: 387, column: 2, scope: !6636)
!6641 = !DILocation(line: 389, column: 37, scope: !6636)
!6642 = !DILocation(line: 389, column: 13, scope: !6636)
!6643 = !DILocation(line: 389, column: 11, scope: !6636)
!6644 = !DILocation(line: 392, column: 11, scope: !6645)
!6645 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 392, column: 11)
!6646 = !DILocation(line: 392, column: 13, scope: !6645)
!6647 = !DILocation(line: 392, column: 11, scope: !6557)
!6648 = !DILocation(line: 394, column: 22, scope: !6649)
!6649 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 393, column: 2)
!6650 = !DILocation(line: 394, column: 20, scope: !6649)
!6651 = !DILocation(line: 398, column: 8, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6649, file: !3, line: 398, column: 8)
!6653 = !DILocation(line: 398, column: 17, scope: !6652)
!6654 = !DILocation(line: 398, column: 32, scope: !6652)
!6655 = !DILocation(line: 398, column: 35, scope: !6652)
!6656 = !DILocation(line: 398, column: 44, scope: !6652)
!6657 = !DILocation(line: 399, column: 8, scope: !6652)
!6658 = !DILocation(line: 399, column: 11, scope: !6652)
!6659 = !DILocation(line: 399, column: 20, scope: !6652)
!6660 = !DILocation(line: 400, column: 8, scope: !6652)
!6661 = !DILocation(line: 400, column: 11, scope: !6652)
!6662 = !DILocation(line: 400, column: 20, scope: !6652)
!6663 = !DILocation(line: 398, column: 8, scope: !6649)
!6664 = !DILocation(line: 402, column: 19, scope: !6665)
!6665 = distinct !DILexicalBlock(scope: !6652, file: !3, line: 401, column: 6)
!6666 = !DILocation(line: 402, column: 17, scope: !6665)
!6667 = !DILocation(line: 405, column: 37, scope: !6665)
!6668 = !DILocation(line: 405, column: 47, scope: !6665)
!6669 = !DILocation(line: 405, column: 16, scope: !6665)
!6670 = !DILocation(line: 405, column: 14, scope: !6665)
!6671 = !DILocation(line: 408, column: 13, scope: !6672)
!6672 = distinct !DILexicalBlock(scope: !6665, file: !3, line: 408, column: 12)
!6673 = !DILocation(line: 409, column: 5, scope: !6672)
!6674 = !DILocation(line: 409, column: 9, scope: !6672)
!6675 = !DILocation(line: 409, column: 16, scope: !6672)
!6676 = !DILocation(line: 409, column: 31, scope: !6672)
!6677 = !DILocation(line: 409, column: 41, scope: !6672)
!6678 = !DILocation(line: 410, column: 9, scope: !6672)
!6679 = !DILocation(line: 408, column: 12, scope: !6665)
!6680 = !DILocation(line: 413, column: 34, scope: !6681)
!6681 = distinct !DILexicalBlock(scope: !6672, file: !3, line: 411, column: 3)
!6682 = !DILocation(line: 413, column: 44, scope: !6681)
!6683 = !DILocation(line: 413, column: 13, scope: !6681)
!6684 = !DILocation(line: 413, column: 11, scope: !6681)
!6685 = !DILocation(line: 416, column: 10, scope: !6686)
!6686 = distinct !DILexicalBlock(scope: !6681, file: !3, line: 416, column: 9)
!6687 = !DILocation(line: 416, column: 9, scope: !6681)
!6688 = !DILocation(line: 418, column: 13, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6690, file: !3, line: 418, column: 13)
!6690 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 417, column: 7)
!6691 = !DILocation(line: 418, column: 13, scope: !6690)
!6692 = !DILocation(line: 419, column: 13, scope: !6689)
!6693 = !DILocation(line: 419, column: 4, scope: !6689)
!6694 = !DILocation(line: 420, column: 9, scope: !6690)
!6695 = !DILocation(line: 422, column: 19, scope: !6681)
!6696 = !DILocation(line: 422, column: 26, scope: !6681)
!6697 = !DILocation(line: 422, column: 41, scope: !6681)
!6698 = !DILocation(line: 422, column: 51, scope: !6681)
!6699 = !DILocation(line: 422, column: 11, scope: !6681)
!6700 = !DILocation(line: 423, column: 9, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !6681, file: !3, line: 423, column: 9)
!6702 = !DILocation(line: 423, column: 15, scope: !6701)
!6703 = !DILocation(line: 423, column: 9, scope: !6681)
!6704 = !DILocation(line: 425, column: 13, scope: !6705)
!6705 = distinct !DILexicalBlock(scope: !6706, file: !3, line: 425, column: 13)
!6706 = distinct !DILexicalBlock(scope: !6701, file: !3, line: 424, column: 7)
!6707 = !DILocation(line: 425, column: 13, scope: !6706)
!6708 = !DILocation(line: 426, column: 13, scope: !6705)
!6709 = !DILocation(line: 426, column: 4, scope: !6705)
!6710 = !DILocation(line: 428, column: 9, scope: !6706)
!6711 = !DILocation(line: 430, column: 32, scope: !6681)
!6712 = !DILocation(line: 430, column: 22, scope: !6681)
!6713 = !DILocation(line: 430, column: 39, scope: !6681)
!6714 = !DILocation(line: 430, column: 50, scope: !6681)
!6715 = !DILocation(line: 430, column: 20, scope: !6681)
!6716 = !DILocation(line: 431, column: 10, scope: !6717)
!6717 = distinct !DILexicalBlock(scope: !6681, file: !3, line: 431, column: 9)
!6718 = !DILocation(line: 431, column: 9, scope: !6681)
!6719 = !DILocation(line: 433, column: 26, scope: !6720)
!6720 = distinct !DILexicalBlock(scope: !6717, file: !3, line: 432, column: 7)
!6721 = !DILocation(line: 434, column: 41, scope: !6720)
!6722 = !DILocation(line: 434, column: 21, scope: !6720)
!6723 = !DILocation(line: 434, column: 19, scope: !6720)
!6724 = !DILocation(line: 435, column: 7, scope: !6720)
!6725 = !DILocation(line: 436, column: 3, scope: !6681)
!6726 = !DILocation(line: 437, column: 6, scope: !6665)
!6727 = !DILocation(line: 438, column: 2, scope: !6649)
!6728 = !DILocation(line: 441, column: 8, scope: !6729)
!6729 = distinct !DILexicalBlock(scope: !6730, file: !3, line: 441, column: 8)
!6730 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 440, column: 2)
!6731 = !DILocation(line: 441, column: 27, scope: !6729)
!6732 = !DILocation(line: 441, column: 24, scope: !6729)
!6733 = !DILocation(line: 442, column: 8, scope: !6729)
!6734 = !DILocation(line: 442, column: 12, scope: !6729)
!6735 = !DILocation(line: 442, column: 28, scope: !6729)
!6736 = !DILocation(line: 443, column: 5, scope: !6729)
!6737 = !DILocation(line: 443, column: 8, scope: !6729)
!6738 = !DILocation(line: 443, column: 17, scope: !6729)
!6739 = !DILocation(line: 444, column: 8, scope: !6729)
!6740 = !DILocation(line: 444, column: 12, scope: !6729)
!6741 = !DILocation(line: 444, column: 28, scope: !6729)
!6742 = !DILocation(line: 445, column: 5, scope: !6729)
!6743 = !DILocation(line: 445, column: 8, scope: !6729)
!6744 = !DILocation(line: 445, column: 17, scope: !6729)
!6745 = !DILocation(line: 441, column: 8, scope: !6730)
!6746 = !DILocation(line: 447, column: 12, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6748, file: !3, line: 447, column: 12)
!6748 = distinct !DILexicalBlock(scope: !6729, file: !3, line: 446, column: 6)
!6749 = !DILocation(line: 447, column: 12, scope: !6748)
!6750 = !DILocation(line: 449, column: 14, scope: !6751)
!6751 = distinct !DILexicalBlock(scope: !6747, file: !3, line: 448, column: 3)
!6752 = !DILocation(line: 449, column: 5, scope: !6751)
!6753 = !DILocation(line: 451, column: 24, scope: !6751)
!6754 = !DILocation(line: 451, column: 35, scope: !6751)
!6755 = !DILocation(line: 451, column: 5, scope: !6751)
!6756 = !DILocation(line: 452, column: 3, scope: !6751)
!6757 = !DILocation(line: 454, column: 8, scope: !6748)
!6758 = !DILocation(line: 457, column: 8, scope: !6759)
!6759 = distinct !DILexicalBlock(scope: !6730, file: !3, line: 457, column: 8)
!6760 = !DILocation(line: 458, column: 8, scope: !6759)
!6761 = !DILocation(line: 458, column: 29, scope: !6759)
!6762 = !DILocation(line: 458, column: 60, scope: !6759)
!6763 = !DILocation(line: 458, column: 40, scope: !6759)
!6764 = !DILocation(line: 458, column: 12, scope: !6759)
!6765 = !DILocation(line: 457, column: 8, scope: !6730)
!6766 = !DILocation(line: 460, column: 12, scope: !6767)
!6767 = distinct !DILexicalBlock(scope: !6768, file: !3, line: 460, column: 12)
!6768 = distinct !DILexicalBlock(scope: !6759, file: !3, line: 459, column: 6)
!6769 = !DILocation(line: 460, column: 12, scope: !6768)
!6770 = !DILocation(line: 462, column: 14, scope: !6771)
!6771 = distinct !DILexicalBlock(scope: !6767, file: !3, line: 461, column: 3)
!6772 = !DILocation(line: 462, column: 5, scope: !6771)
!6773 = !DILocation(line: 464, column: 24, scope: !6771)
!6774 = !DILocation(line: 464, column: 35, scope: !6771)
!6775 = !DILocation(line: 464, column: 5, scope: !6771)
!6776 = !DILocation(line: 465, column: 3, scope: !6771)
!6777 = !DILocation(line: 467, column: 8, scope: !6768)
!6778 = !DILocation(line: 472, column: 11, scope: !6779)
!6779 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 472, column: 11)
!6780 = !DILocation(line: 472, column: 11, scope: !6557)
!6781 = !DILocation(line: 474, column: 8, scope: !6782)
!6782 = distinct !DILexicalBlock(scope: !6783, file: !3, line: 474, column: 8)
!6783 = distinct !DILexicalBlock(scope: !6779, file: !3, line: 473, column: 2)
!6784 = !DILocation(line: 474, column: 8, scope: !6783)
!6785 = !DILocation(line: 477, column: 42, scope: !6786)
!6786 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 477, column: 12)
!6787 = distinct !DILexicalBlock(scope: !6782, file: !3, line: 475, column: 6)
!6788 = !DILocation(line: 477, column: 54, scope: !6786)
!6789 = !DILocation(line: 477, column: 65, scope: !6786)
!6790 = !DILocation(line: 477, column: 64, scope: !6786)
!6791 = !DILocation(line: 478, column: 7, scope: !6786)
!6792 = !DILocation(line: 484, column: 7, scope: !6786)
!6793 = !DILocation(line: 477, column: 13, scope: !6786)
!6794 = !DILocation(line: 477, column: 12, scope: !6787)
!6795 = !DILocation(line: 486, column: 3, scope: !6786)
!6796 = !DILocation(line: 487, column: 6, scope: !6787)
!6797 = !DILocation(line: 492, column: 22, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6799, file: !3, line: 492, column: 21)
!6799 = distinct !DILexicalBlock(scope: !6782, file: !3, line: 489, column: 8)
!6800 = !DILocation(line: 492, column: 67, scope: !6798)
!6801 = !DILocation(line: 492, column: 64, scope: !6798)
!6802 = !DILocation(line: 493, column: 22, scope: !6798)
!6803 = !DILocation(line: 493, column: 25, scope: !6798)
!6804 = !DILocation(line: 493, column: 62, scope: !6798)
!6805 = !DILocation(line: 494, column: 21, scope: !6798)
!6806 = !DILocation(line: 494, column: 25, scope: !6798)
!6807 = !DILocation(line: 494, column: 70, scope: !6798)
!6808 = !DILocation(line: 494, column: 67, scope: !6798)
!6809 = !DILocation(line: 495, column: 25, scope: !6798)
!6810 = !DILocation(line: 495, column: 28, scope: !6798)
!6811 = !DILocation(line: 495, column: 65, scope: !6798)
!6812 = !DILocation(line: 492, column: 21, scope: !6799)
!6813 = !DILocation(line: 497, column: 25, scope: !6814)
!6814 = distinct !DILexicalBlock(scope: !6815, file: !3, line: 497, column: 25)
!6815 = distinct !DILexicalBlock(scope: !6798, file: !3, line: 496, column: 19)
!6816 = !DILocation(line: 497, column: 25, scope: !6815)
!6817 = !DILocation(line: 499, column: 34, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6814, file: !3, line: 498, column: 23)
!6819 = !DILocation(line: 499, column: 25, scope: !6818)
!6820 = !DILocation(line: 501, column: 44, scope: !6818)
!6821 = !DILocation(line: 501, column: 55, scope: !6818)
!6822 = !DILocation(line: 501, column: 25, scope: !6818)
!6823 = !DILocation(line: 502, column: 23, scope: !6818)
!6824 = !DILocation(line: 504, column: 21, scope: !6815)
!6825 = !DILocation(line: 509, column: 21, scope: !6826)
!6826 = distinct !DILexicalBlock(scope: !6799, file: !3, line: 509, column: 21)
!6827 = !DILocation(line: 510, column: 23, scope: !6826)
!6828 = !DILocation(line: 510, column: 33, scope: !6826)
!6829 = !DILocation(line: 510, column: 31, scope: !6826)
!6830 = !DILocation(line: 510, column: 21, scope: !6826)
!6831 = !DILocation(line: 509, column: 21, scope: !6799)
!6832 = !DILocation(line: 512, column: 25, scope: !6833)
!6833 = distinct !DILexicalBlock(scope: !6834, file: !3, line: 512, column: 25)
!6834 = distinct !DILexicalBlock(scope: !6826, file: !3, line: 511, column: 19)
!6835 = !DILocation(line: 512, column: 25, scope: !6834)
!6836 = !DILocation(line: 514, column: 34, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6833, file: !3, line: 513, column: 23)
!6838 = !DILocation(line: 514, column: 25, scope: !6837)
!6839 = !DILocation(line: 517, column: 44, scope: !6837)
!6840 = !DILocation(line: 517, column: 55, scope: !6837)
!6841 = !DILocation(line: 517, column: 25, scope: !6837)
!6842 = !DILocation(line: 518, column: 23, scope: !6837)
!6843 = !DILocation(line: 520, column: 21, scope: !6834)
!6844 = !DILocation(line: 523, column: 30, scope: !6799)
!6845 = !DILocation(line: 523, column: 28, scope: !6799)
!6846 = !DILocation(line: 525, column: 19, scope: !6847)
!6847 = distinct !DILexicalBlock(scope: !6799, file: !3, line: 525, column: 19)
!6848 = !DILocation(line: 525, column: 33, scope: !6847)
!6849 = !DILocation(line: 525, column: 30, scope: !6847)
!6850 = !DILocation(line: 525, column: 19, scope: !6799)
!6851 = !DILocation(line: 527, column: 30, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 526, column: 17)
!6853 = !DILocation(line: 527, column: 28, scope: !6852)
!6854 = !DILocation(line: 528, column: 54, scope: !6855)
!6855 = distinct !DILexicalBlock(scope: !6852, file: !3, line: 528, column: 23)
!6856 = !DILocation(line: 528, column: 23, scope: !6855)
!6857 = !DILocation(line: 529, column: 23, scope: !6855)
!6858 = !DILocation(line: 528, column: 23, scope: !6852)
!6859 = !DILocation(line: 531, column: 27, scope: !6860)
!6860 = distinct !DILexicalBlock(scope: !6861, file: !3, line: 531, column: 27)
!6861 = distinct !DILexicalBlock(scope: !6855, file: !3, line: 530, column: 21)
!6862 = !DILocation(line: 531, column: 27, scope: !6861)
!6863 = !DILocation(line: 533, column: 36, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6860, file: !3, line: 532, column: 25)
!6865 = !DILocation(line: 533, column: 27, scope: !6864)
!6866 = !DILocation(line: 535, column: 46, scope: !6864)
!6867 = !DILocation(line: 535, column: 57, scope: !6864)
!6868 = !DILocation(line: 535, column: 27, scope: !6864)
!6869 = !DILocation(line: 536, column: 25, scope: !6864)
!6870 = !DILocation(line: 538, column: 23, scope: !6861)
!6871 = !DILocation(line: 542, column: 57, scope: !6852)
!6872 = !DILocation(line: 542, column: 41, scope: !6852)
!6873 = !DILocation(line: 543, column: 41, scope: !6852)
!6874 = !DILocation(line: 543, column: 60, scope: !6852)
!6875 = !DILocation(line: 543, column: 59, scope: !6852)
!6876 = !DILocation(line: 542, column: 19, scope: !6852)
!6877 = !DILocation(line: 544, column: 17, scope: !6852)
!6878 = !DILocation(line: 549, column: 66, scope: !6799)
!6879 = !DILocation(line: 550, column: 66, scope: !6799)
!6880 = !DILocation(line: 549, column: 28, scope: !6799)
!6881 = !DILocation(line: 549, column: 26, scope: !6799)
!6882 = !DILocation(line: 551, column: 19, scope: !6883)
!6883 = distinct !DILexicalBlock(scope: !6799, file: !3, line: 551, column: 19)
!6884 = !DILocation(line: 551, column: 33, scope: !6883)
!6885 = !DILocation(line: 551, column: 30, scope: !6883)
!6886 = !DILocation(line: 551, column: 19, scope: !6799)
!6887 = !DILocation(line: 552, column: 29, scope: !6883)
!6888 = !DILocation(line: 552, column: 17, scope: !6883)
!6889 = !DILocation(line: 554, column: 15, scope: !6799)
!6890 = !DILocation(line: 557, column: 30, scope: !6799)
!6891 = !DILocation(line: 558, column: 14, scope: !6799)
!6892 = !DILocation(line: 560, column: 9, scope: !6783)
!6893 = !DILocation(line: 563, column: 8, scope: !6894)
!6894 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 563, column: 8)
!6895 = distinct !DILexicalBlock(scope: !6779, file: !3, line: 562, column: 2)
!6896 = !DILocation(line: 563, column: 35, scope: !6894)
!6897 = !DILocation(line: 563, column: 8, scope: !6895)
!6898 = !DILocation(line: 566, column: 12, scope: !6899)
!6899 = distinct !DILexicalBlock(scope: !6900, file: !3, line: 566, column: 12)
!6900 = distinct !DILexicalBlock(scope: !6894, file: !3, line: 564, column: 6)
!6901 = !DILocation(line: 566, column: 12, scope: !6900)
!6902 = !DILocation(line: 568, column: 14, scope: !6903)
!6903 = distinct !DILexicalBlock(scope: !6899, file: !3, line: 567, column: 3)
!6904 = !DILocation(line: 568, column: 5, scope: !6903)
!6905 = !DILocation(line: 569, column: 24, scope: !6903)
!6906 = !DILocation(line: 569, column: 35, scope: !6903)
!6907 = !DILocation(line: 569, column: 5, scope: !6903)
!6908 = !DILocation(line: 570, column: 3, scope: !6903)
!6909 = !DILocation(line: 573, column: 8, scope: !6900)
!6910 = !DILocation(line: 577, column: 8, scope: !6911)
!6911 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 577, column: 8)
!6912 = !DILocation(line: 577, column: 35, scope: !6911)
!6913 = !DILocation(line: 578, column: 8, scope: !6911)
!6914 = !DILocation(line: 578, column: 11, scope: !6911)
!6915 = !DILocation(line: 578, column: 38, scope: !6911)
!6916 = !DILocation(line: 577, column: 8, scope: !6895)
!6917 = !DILocation(line: 580, column: 12, scope: !6918)
!6918 = distinct !DILexicalBlock(scope: !6919, file: !3, line: 580, column: 12)
!6919 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 579, column: 6)
!6920 = !DILocation(line: 580, column: 12, scope: !6919)
!6921 = !DILocation(line: 582, column: 14, scope: !6922)
!6922 = distinct !DILexicalBlock(scope: !6918, file: !3, line: 581, column: 3)
!6923 = !DILocation(line: 582, column: 5, scope: !6922)
!6924 = !DILocation(line: 583, column: 14, scope: !6922)
!6925 = !DILocation(line: 583, column: 5, scope: !6922)
!6926 = !DILocation(line: 584, column: 24, scope: !6922)
!6927 = !DILocation(line: 584, column: 35, scope: !6922)
!6928 = !DILocation(line: 584, column: 5, scope: !6922)
!6929 = !DILocation(line: 585, column: 3, scope: !6922)
!6930 = !DILocation(line: 587, column: 8, scope: !6919)
!6931 = !DILocation(line: 591, column: 38, scope: !6932)
!6932 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 591, column: 8)
!6933 = !DILocation(line: 591, column: 50, scope: !6932)
!6934 = !DILocation(line: 591, column: 61, scope: !6932)
!6935 = !DILocation(line: 591, column: 60, scope: !6932)
!6936 = !DILocation(line: 591, column: 67, scope: !6932)
!6937 = !DILocation(line: 597, column: 10, scope: !6932)
!6938 = !DILocation(line: 591, column: 9, scope: !6932)
!6939 = !DILocation(line: 591, column: 8, scope: !6895)
!6940 = !DILocation(line: 599, column: 6, scope: !6932)
!6941 = !DILocation(line: 601, column: 5, scope: !6557)
!6942 = !DILocation(line: 338, column: 54, scope: !6553)
!6943 = !DILocation(line: 338, column: 3, scope: !6553)
!6944 = distinct !{!6944, !6554, !6945}
!6945 = !DILocation(line: 601, column: 5, scope: !6550)
!6946 = !DILocation(line: 604, column: 19, scope: !6441)
!6947 = !DILocation(line: 604, column: 4, scope: !6441)
!6948 = !DILocation(line: 604, column: 16, scope: !6441)
!6949 = !DILocation(line: 605, column: 20, scope: !6441)
!6950 = !DILocation(line: 605, column: 4, scope: !6441)
!6951 = !DILocation(line: 605, column: 17, scope: !6441)
!6952 = !DILocation(line: 608, column: 7, scope: !6953)
!6953 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 608, column: 7)
!6954 = !DILocation(line: 608, column: 7, scope: !6441)
!6955 = !DILocation(line: 610, column: 11, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 610, column: 11)
!6957 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 609, column: 5)
!6958 = !DILocation(line: 610, column: 11, scope: !6957)
!6959 = !DILocation(line: 612, column: 11, scope: !6960)
!6960 = distinct !DILexicalBlock(scope: !6956, file: !3, line: 611, column: 9)
!6961 = !DILocation(line: 613, column: 51, scope: !6960)
!6962 = !DILocation(line: 613, column: 49, scope: !6960)
!6963 = !DILocation(line: 613, column: 12, scope: !6960)
!6964 = !DILocation(line: 613, column: 24, scope: !6960)
!6965 = !DILocation(line: 614, column: 9, scope: !6960)
!6966 = !DILocation(line: 616, column: 7, scope: !6957)
!6967 = !DILocation(line: 620, column: 7, scope: !6968)
!6968 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 620, column: 7)
!6969 = !DILocation(line: 620, column: 22, scope: !6968)
!6970 = !DILocation(line: 620, column: 7, scope: !6441)
!6971 = !DILocalVariable(name: "left_node", scope: !6972, file: !3, line: 622, type: !3726)
!6972 = distinct !DILexicalBlock(scope: !6968, file: !3, line: 621, column: 5)
!6973 = !DILocation(line: 622, column: 16, scope: !6972)
!6974 = !DILocation(line: 622, column: 28, scope: !6972)
!6975 = !DILocation(line: 623, column: 43, scope: !6972)
!6976 = !DILocation(line: 623, column: 7, scope: !6972)
!6977 = !DILocation(line: 623, column: 41, scope: !6972)
!6978 = !DILocation(line: 624, column: 7, scope: !6972)
!6979 = !DILocation(line: 624, column: 38, scope: !6972)
!6980 = !DILocation(line: 625, column: 7, scope: !6972)
!6981 = !DILocation(line: 625, column: 33, scope: !6972)
!6982 = !DILocation(line: 626, column: 7, scope: !6972)
!6983 = !DILocation(line: 626, column: 34, scope: !6972)
!6984 = !DILocation(line: 627, column: 7, scope: !6972)
!6985 = !DILocation(line: 627, column: 49, scope: !6972)
!6986 = !DILocation(line: 628, column: 7, scope: !6972)
!6987 = !DILocation(line: 628, column: 48, scope: !6972)
!6988 = !DILocation(line: 629, column: 33, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 629, column: 11)
!6990 = !DILocation(line: 629, column: 45, scope: !6989)
!6991 = !DILocation(line: 629, column: 67, scope: !6989)
!6992 = !DILocation(line: 630, column: 5, scope: !6989)
!6993 = !DILocation(line: 630, column: 18, scope: !6989)
!6994 = !DILocation(line: 630, column: 32, scope: !6989)
!6995 = !DILocation(line: 631, column: 5, scope: !6989)
!6996 = !DILocation(line: 631, column: 17, scope: !6989)
!6997 = !DILocation(line: 631, column: 35, scope: !6989)
!6998 = !DILocation(line: 632, column: 5, scope: !6989)
!6999 = !DILocation(line: 629, column: 12, scope: !6989)
!7000 = !DILocation(line: 629, column: 11, scope: !6972)
!7001 = !DILocation(line: 633, column: 2, scope: !6989)
!7002 = !DILocation(line: 635, column: 31, scope: !6972)
!7003 = !DILocation(line: 635, column: 7, scope: !6972)
!7004 = !DILocation(line: 635, column: 29, scope: !6972)
!7005 = !DILocation(line: 636, column: 5, scope: !6972)
!7006 = !DILocation(line: 638, column: 7, scope: !7007)
!7007 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 638, column: 7)
!7008 = !DILocation(line: 638, column: 22, scope: !7007)
!7009 = !DILocation(line: 638, column: 7, scope: !6441)
!7010 = !DILocalVariable(name: "right_node", scope: !7011, file: !3, line: 640, type: !3726)
!7011 = distinct !DILexicalBlock(scope: !7007, file: !3, line: 639, column: 5)
!7012 = !DILocation(line: 640, column: 16, scope: !7011)
!7013 = !DILocation(line: 640, column: 29, scope: !7011)
!7014 = !DILocation(line: 641, column: 44, scope: !7011)
!7015 = !DILocation(line: 641, column: 7, scope: !7011)
!7016 = !DILocation(line: 641, column: 42, scope: !7011)
!7017 = !DILocation(line: 642, column: 7, scope: !7011)
!7018 = !DILocation(line: 642, column: 39, scope: !7011)
!7019 = !DILocation(line: 643, column: 7, scope: !7011)
!7020 = !DILocation(line: 643, column: 34, scope: !7011)
!7021 = !DILocation(line: 644, column: 7, scope: !7011)
!7022 = !DILocation(line: 644, column: 35, scope: !7011)
!7023 = !DILocation(line: 645, column: 7, scope: !7011)
!7024 = !DILocation(line: 645, column: 50, scope: !7011)
!7025 = !DILocation(line: 646, column: 7, scope: !7011)
!7026 = !DILocation(line: 646, column: 49, scope: !7011)
!7027 = !DILocation(line: 647, column: 33, scope: !7028)
!7028 = distinct !DILexicalBlock(scope: !7011, file: !3, line: 647, column: 11)
!7029 = !DILocation(line: 647, column: 45, scope: !7028)
!7030 = !DILocation(line: 647, column: 68, scope: !7028)
!7031 = !DILocation(line: 648, column: 5, scope: !7028)
!7032 = !DILocation(line: 648, column: 18, scope: !7028)
!7033 = !DILocation(line: 648, column: 32, scope: !7028)
!7034 = !DILocation(line: 649, column: 5, scope: !7028)
!7035 = !DILocation(line: 649, column: 17, scope: !7028)
!7036 = !DILocation(line: 649, column: 35, scope: !7028)
!7037 = !DILocation(line: 650, column: 5, scope: !7028)
!7038 = !DILocation(line: 647, column: 12, scope: !7028)
!7039 = !DILocation(line: 647, column: 11, scope: !7011)
!7040 = !DILocation(line: 651, column: 2, scope: !7028)
!7041 = !DILocation(line: 653, column: 32, scope: !7011)
!7042 = !DILocation(line: 653, column: 7, scope: !7011)
!7043 = !DILocation(line: 653, column: 30, scope: !7011)
!7044 = !DILocation(line: 654, column: 5, scope: !7011)
!7045 = !DILocation(line: 656, column: 3, scope: !6441)
!7046 = !DILocation(line: 657, column: 1, scope: !6441)
!7047 = distinct !DISubprogram(name: "VEC_slp_tree_base_length", scope: !1757, file: !1757, line: 118, type: !7048, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7048 = !DISubroutineType(types: !7049)
!7049 = !{!17, !5838}
!7050 = !DILocalVariable(name: "vec_", arg: 1, scope: !7047, file: !1757, line: 118, type: !5838)
!7051 = !DILocation(line: 118, column: 1, scope: !7047)
!7052 = distinct !DISubprogram(name: "vect_supported_load_permutation_p", scope: !3, file: !3, line: 796, type: !7053, scopeLine: 798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7053 = !DISubroutineType(types: !7054)
!7054 = !{!6, !3777, !100, !3735}
!7055 = !DILocalVariable(name: "slp_instn", arg: 1, scope: !7052, file: !3, line: 796, type: !3777)
!7056 = !DILocation(line: 796, column: 49, scope: !7052)
!7057 = !DILocalVariable(name: "group_size", arg: 2, scope: !7052, file: !3, line: 796, type: !100)
!7058 = !DILocation(line: 796, column: 64, scope: !7052)
!7059 = !DILocalVariable(name: "load_permutation", arg: 3, scope: !7052, file: !3, line: 797, type: !3735)
!7060 = !DILocation(line: 797, column: 53, scope: !7052)
!7061 = !DILocalVariable(name: "i", scope: !7052, file: !3, line: 799, type: !100)
!7062 = !DILocation(line: 799, column: 7, scope: !7052)
!7063 = !DILocalVariable(name: "j", scope: !7052, file: !3, line: 799, type: !100)
!7064 = !DILocation(line: 799, column: 14, scope: !7052)
!7065 = !DILocalVariable(name: "prev", scope: !7052, file: !3, line: 799, type: !100)
!7066 = !DILocation(line: 799, column: 17, scope: !7052)
!7067 = !DILocalVariable(name: "next", scope: !7052, file: !3, line: 799, type: !100)
!7068 = !DILocation(line: 799, column: 28, scope: !7052)
!7069 = !DILocalVariable(name: "k", scope: !7052, file: !3, line: 799, type: !100)
!7070 = !DILocation(line: 799, column: 34, scope: !7052)
!7071 = !DILocalVariable(name: "supported", scope: !7052, file: !3, line: 800, type: !6)
!7072 = !DILocation(line: 800, column: 8, scope: !7052)
!7073 = !DILocalVariable(name: "load_index", scope: !7052, file: !3, line: 801, type: !7074)
!7074 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !7075, line: 45, baseType: !7076)
!7075 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7077, size: 64)
!7077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !7075, line: 39, size: 192, elements: !7078)
!7078 = !{!7079, !7080, !7081, !7082}
!7079 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !7077, file: !7075, line: 41, baseType: !1753, size: 64)
!7080 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !7077, file: !7075, line: 42, baseType: !17, size: 32, offset: 64)
!7081 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !7077, file: !7075, line: 43, baseType: !17, size: 32, offset: 96)
!7082 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !7077, file: !7075, line: 44, baseType: !7083, size: 64, offset: 128)
!7083 = !DICompositeType(tag: DW_TAG_array_type, baseType: !278, size: 64, elements: !115)
!7084 = !DILocation(line: 801, column: 11, scope: !7052)
!7085 = !DILocation(line: 804, column: 8, scope: !7086)
!7086 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 804, column: 7)
!7087 = !DILocation(line: 804, column: 7, scope: !7052)
!7088 = !DILocation(line: 805, column: 5, scope: !7086)
!7089 = !DILocation(line: 807, column: 7, scope: !7090)
!7090 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 807, column: 7)
!7091 = !DILocation(line: 807, column: 7, scope: !7052)
!7092 = !DILocation(line: 809, column: 16, scope: !7093)
!7093 = distinct !DILexicalBlock(scope: !7090, file: !3, line: 808, column: 5)
!7094 = !DILocation(line: 809, column: 7, scope: !7093)
!7095 = !DILocation(line: 810, column: 14, scope: !7096)
!7096 = distinct !DILexicalBlock(scope: !7093, file: !3, line: 810, column: 7)
!7097 = !DILocation(line: 810, column: 12, scope: !7096)
!7098 = !DILocation(line: 810, column: 19, scope: !7099)
!7099 = distinct !DILexicalBlock(scope: !7096, file: !3, line: 810, column: 7)
!7100 = !DILocation(line: 810, column: 7, scope: !7096)
!7101 = !DILocation(line: 811, column: 18, scope: !7099)
!7102 = !DILocation(line: 811, column: 36, scope: !7099)
!7103 = !DILocation(line: 811, column: 9, scope: !7099)
!7104 = !DILocation(line: 810, column: 66, scope: !7099)
!7105 = !DILocation(line: 810, column: 7, scope: !7099)
!7106 = distinct !{!7106, !7100, !7107}
!7107 = !DILocation(line: 811, column: 40, scope: !7096)
!7108 = !DILocation(line: 812, column: 5, scope: !7093)
!7109 = !DILocation(line: 817, column: 7, scope: !7110)
!7110 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 817, column: 7)
!7111 = !DILocation(line: 818, column: 26, scope: !7110)
!7112 = !DILocation(line: 818, column: 39, scope: !7110)
!7113 = !DILocation(line: 818, column: 37, scope: !7110)
!7114 = !DILocation(line: 818, column: 7, scope: !7110)
!7115 = !DILocation(line: 817, column: 7, scope: !7052)
!7116 = !DILocation(line: 819, column: 5, scope: !7110)
!7117 = !DILocation(line: 821, column: 13, scope: !7052)
!7118 = !DILocation(line: 822, column: 31, scope: !7052)
!7119 = !DILocation(line: 822, column: 16, scope: !7052)
!7120 = !DILocation(line: 822, column: 14, scope: !7052)
!7121 = !DILocation(line: 823, column: 17, scope: !7052)
!7122 = !DILocation(line: 823, column: 3, scope: !7052)
!7123 = !DILocation(line: 824, column: 10, scope: !7124)
!7124 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 824, column: 3)
!7125 = !DILocation(line: 824, column: 8, scope: !7124)
!7126 = !DILocation(line: 824, column: 15, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7124, file: !3, line: 824, column: 3)
!7128 = !DILocation(line: 824, column: 19, scope: !7127)
!7129 = !DILocation(line: 824, column: 17, scope: !7127)
!7130 = !DILocation(line: 824, column: 3, scope: !7124)
!7131 = !DILocation(line: 826, column: 16, scope: !7132)
!7132 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 826, column: 7)
!7133 = distinct !DILexicalBlock(scope: !7127, file: !3, line: 825, column: 5)
!7134 = !DILocation(line: 826, column: 20, scope: !7132)
!7135 = !DILocation(line: 826, column: 18, scope: !7132)
!7136 = !DILocation(line: 826, column: 14, scope: !7132)
!7137 = !DILocation(line: 826, column: 34, scope: !7132)
!7138 = !DILocation(line: 826, column: 12, scope: !7132)
!7139 = !DILocation(line: 827, column: 12, scope: !7140)
!7140 = distinct !DILexicalBlock(scope: !7132, file: !3, line: 826, column: 7)
!7141 = !DILocation(line: 827, column: 57, scope: !7140)
!7142 = !DILocation(line: 827, column: 60, scope: !7140)
!7143 = !DILocation(line: 827, column: 64, scope: !7140)
!7144 = !DILocation(line: 827, column: 62, scope: !7140)
!7145 = !DILocation(line: 0, scope: !7140)
!7146 = !DILocation(line: 826, column: 7, scope: !7132)
!7147 = !DILocation(line: 830, column: 14, scope: !7148)
!7148 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 830, column: 14)
!7149 = distinct !DILexicalBlock(scope: !7140, file: !3, line: 829, column: 8)
!7150 = !DILocation(line: 830, column: 19, scope: !7148)
!7151 = !DILocation(line: 830, column: 23, scope: !7148)
!7152 = !DILocation(line: 830, column: 21, scope: !7148)
!7153 = !DILocation(line: 830, column: 16, scope: !7148)
!7154 = !DILocation(line: 830, column: 34, scope: !7148)
!7155 = !DILocation(line: 830, column: 37, scope: !7148)
!7156 = !DILocation(line: 830, column: 45, scope: !7148)
!7157 = !DILocation(line: 830, column: 42, scope: !7148)
!7158 = !DILocation(line: 830, column: 14, scope: !7149)
!7159 = !DILocation(line: 832, column: 23, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7148, file: !3, line: 831, column: 11)
!7161 = !DILocation(line: 833, column: 13, scope: !7160)
!7162 = !DILocation(line: 836, column: 17, scope: !7149)
!7163 = !DILocation(line: 836, column: 15, scope: !7149)
!7164 = !DILocation(line: 837, column: 8, scope: !7149)
!7165 = !DILocation(line: 828, column: 13, scope: !7140)
!7166 = !DILocation(line: 828, column: 18, scope: !7140)
!7167 = !DILocation(line: 826, column: 7, scope: !7140)
!7168 = distinct !{!7168, !7146, !7169}
!7169 = !DILocation(line: 837, column: 8, scope: !7132)
!7170 = !DILocation(line: 839, column: 11, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 839, column: 11)
!7172 = !DILocation(line: 839, column: 11, scope: !7133)
!7173 = !DILocation(line: 841, column: 21, scope: !7174)
!7174 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 840, column: 9)
!7175 = !DILocation(line: 842, column: 11, scope: !7174)
!7176 = !DILocation(line: 845, column: 16, scope: !7133)
!7177 = !DILocation(line: 845, column: 28, scope: !7133)
!7178 = !DILocation(line: 845, column: 7, scope: !7133)
!7179 = !DILocation(line: 846, column: 5, scope: !7133)
!7180 = !DILocation(line: 824, column: 32, scope: !7127)
!7181 = !DILocation(line: 824, column: 3, scope: !7127)
!7182 = distinct !{!7182, !7130, !7183}
!7183 = !DILocation(line: 846, column: 5, scope: !7124)
!7184 = !DILocation(line: 848, column: 3, scope: !7052)
!7185 = !DILocation(line: 850, column: 7, scope: !7186)
!7186 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 850, column: 7)
!7187 = !DILocation(line: 850, column: 17, scope: !7186)
!7188 = !DILocation(line: 850, column: 20, scope: !7186)
!7189 = !DILocation(line: 850, column: 25, scope: !7186)
!7190 = !DILocation(line: 850, column: 38, scope: !7186)
!7191 = !DILocation(line: 850, column: 36, scope: !7186)
!7192 = !DILocation(line: 850, column: 22, scope: !7186)
!7193 = !DILocation(line: 851, column: 7, scope: !7186)
!7194 = !DILocation(line: 851, column: 44, scope: !7186)
!7195 = !DILocation(line: 851, column: 10, scope: !7186)
!7196 = !DILocation(line: 850, column: 7, scope: !7052)
!7197 = !DILocation(line: 852, column: 5, scope: !7186)
!7198 = !DILocation(line: 854, column: 3, scope: !7052)
!7199 = !DILocation(line: 855, column: 1, scope: !7052)
!7200 = distinct !DISubprogram(name: "vect_find_first_load_in_slp_instance", scope: !3, file: !3, line: 865, type: !7201, scopeLine: 866, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7201 = !DISubroutineType(types: !7202)
!7202 = !{!7, !3777}
!7203 = !DILocalVariable(name: "instance", arg: 1, scope: !7200, file: !3, line: 865, type: !3777)
!7204 = !DILocation(line: 865, column: 52, scope: !7200)
!7205 = !DILocalVariable(name: "i", scope: !7200, file: !3, line: 867, type: !100)
!7206 = !DILocation(line: 867, column: 7, scope: !7200)
!7207 = !DILocalVariable(name: "j", scope: !7200, file: !3, line: 867, type: !100)
!7208 = !DILocation(line: 867, column: 10, scope: !7200)
!7209 = !DILocalVariable(name: "load_node", scope: !7200, file: !3, line: 868, type: !3726)
!7210 = !DILocation(line: 868, column: 12, scope: !7200)
!7211 = !DILocalVariable(name: "first_load", scope: !7200, file: !3, line: 869, type: !7)
!7212 = !DILocation(line: 869, column: 10, scope: !7200)
!7213 = !DILocalVariable(name: "load", scope: !7200, file: !3, line: 869, type: !7)
!7214 = !DILocation(line: 869, column: 29, scope: !7200)
!7215 = !DILocation(line: 871, column: 10, scope: !7216)
!7216 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 871, column: 3)
!7217 = !DILocation(line: 871, column: 8, scope: !7216)
!7218 = !DILocation(line: 872, column: 8, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7216, file: !3, line: 871, column: 3)
!7220 = !DILocation(line: 871, column: 3, scope: !7216)
!7221 = !DILocation(line: 874, column: 12, scope: !7222)
!7222 = distinct !DILexicalBlock(scope: !7219, file: !3, line: 874, column: 5)
!7223 = !DILocation(line: 874, column: 10, scope: !7222)
!7224 = !DILocation(line: 875, column: 10, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7222, file: !3, line: 874, column: 5)
!7226 = !DILocation(line: 874, column: 5, scope: !7222)
!7227 = !DILocation(line: 877, column: 38, scope: !7225)
!7228 = !DILocation(line: 877, column: 44, scope: !7225)
!7229 = !DILocation(line: 877, column: 20, scope: !7225)
!7230 = !DILocation(line: 877, column: 18, scope: !7225)
!7231 = !DILocation(line: 877, column: 7, scope: !7225)
!7232 = !DILocation(line: 876, column: 11, scope: !7225)
!7233 = !DILocation(line: 874, column: 5, scope: !7225)
!7234 = distinct !{!7234, !7226, !7235}
!7235 = !DILocation(line: 877, column: 54, scope: !7222)
!7236 = !DILocation(line: 873, column: 9, scope: !7219)
!7237 = !DILocation(line: 871, column: 3, scope: !7219)
!7238 = distinct !{!7238, !7220, !7239}
!7239 = !DILocation(line: 877, column: 54, scope: !7216)
!7240 = !DILocation(line: 879, column: 10, scope: !7200)
!7241 = !DILocation(line: 879, column: 3, scope: !7200)
!7242 = distinct !DISubprogram(name: "VEC_slp_instance_heap_safe_push", scope: !1757, file: !1757, line: 153, type: !7243, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7243 = !DISubroutineType(types: !7244)
!7244 = !{!4534, !7245, !3777}
!7245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3765, size: 64)
!7246 = !DILocalVariable(name: "vec_", arg: 1, scope: !7242, file: !1757, line: 153, type: !7245)
!7247 = !DILocation(line: 153, column: 1, scope: !7242)
!7248 = !DILocalVariable(name: "obj_", arg: 2, scope: !7242, file: !1757, line: 153, type: !3777)
!7249 = distinct !DISubprogram(name: "vect_print_slp_tree", scope: !3, file: !3, line: 661, type: !4135, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7250 = !DILocalVariable(name: "node", arg: 1, scope: !7249, file: !3, line: 661, type: !3726)
!7251 = !DILocation(line: 661, column: 31, scope: !7249)
!7252 = !DILocalVariable(name: "i", scope: !7249, file: !3, line: 663, type: !100)
!7253 = !DILocation(line: 663, column: 7, scope: !7249)
!7254 = !DILocalVariable(name: "stmt", scope: !7249, file: !3, line: 664, type: !7)
!7255 = !DILocation(line: 664, column: 10, scope: !7249)
!7256 = !DILocation(line: 666, column: 8, scope: !7257)
!7257 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 666, column: 7)
!7258 = !DILocation(line: 666, column: 7, scope: !7249)
!7259 = !DILocation(line: 667, column: 5, scope: !7257)
!7260 = !DILocation(line: 669, column: 12, scope: !7249)
!7261 = !DILocation(line: 669, column: 3, scope: !7249)
!7262 = !DILocation(line: 670, column: 10, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 670, column: 3)
!7264 = !DILocation(line: 670, column: 8, scope: !7263)
!7265 = !DILocation(line: 670, column: 15, scope: !7266)
!7266 = distinct !DILexicalBlock(scope: !7263, file: !3, line: 670, column: 3)
!7267 = !DILocation(line: 670, column: 3, scope: !7263)
!7268 = !DILocation(line: 672, column: 16, scope: !7269)
!7269 = distinct !DILexicalBlock(scope: !7266, file: !3, line: 671, column: 5)
!7270 = !DILocation(line: 672, column: 43, scope: !7269)
!7271 = !DILocation(line: 672, column: 7, scope: !7269)
!7272 = !DILocation(line: 673, column: 26, scope: !7269)
!7273 = !DILocation(line: 673, column: 37, scope: !7269)
!7274 = !DILocation(line: 673, column: 7, scope: !7269)
!7275 = !DILocation(line: 674, column: 5, scope: !7269)
!7276 = !DILocation(line: 670, column: 77, scope: !7266)
!7277 = !DILocation(line: 670, column: 3, scope: !7266)
!7278 = distinct !{!7278, !7267, !7279}
!7279 = !DILocation(line: 674, column: 5, scope: !7263)
!7280 = !DILocation(line: 675, column: 12, scope: !7249)
!7281 = !DILocation(line: 675, column: 3, scope: !7249)
!7282 = !DILocation(line: 677, column: 24, scope: !7249)
!7283 = !DILocation(line: 677, column: 3, scope: !7249)
!7284 = !DILocation(line: 678, column: 24, scope: !7249)
!7285 = !DILocation(line: 678, column: 3, scope: !7249)
!7286 = !DILocation(line: 679, column: 1, scope: !7249)
!7287 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !11, file: !11, line: 34, type: !7288, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7288 = !DISubroutineType(types: !7289)
!7289 = !{!100, !6415, !100}
!7290 = !DILocalVariable(name: "vec_", arg: 1, scope: !7287, file: !11, line: 34, type: !6415)
!7291 = !DILocation(line: 34, column: 1, scope: !7287)
!7292 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7287, file: !11, line: 34, type: !100)
!7293 = !DILocalVariable(name: "extend", scope: !7287, file: !11, line: 34, type: !100)
!7294 = !DILocation(line: 34, column: 1, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !7287, file: !11, line: 34, column: 1)
!7296 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !11, file: !11, line: 33, type: !7297, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7297 = !DISubroutineType(types: !7298)
!7298 = !{!4243, !7299, !7}
!7299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !688, size: 64)
!7300 = !DILocalVariable(name: "vec_", arg: 1, scope: !7296, file: !11, line: 33, type: !7299)
!7301 = !DILocation(line: 33, column: 1, scope: !7296)
!7302 = !DILocalVariable(name: "obj_", arg: 2, scope: !7296, file: !11, line: 33, type: !7)
!7303 = !DILocalVariable(name: "slot_", scope: !7296, file: !11, line: 33, type: !4243)
!7304 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !11, file: !11, line: 33, type: !7305, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7305 = !DISubroutineType(types: !7306)
!7306 = !{!100, !7299, !100}
!7307 = !DILocalVariable(name: "vec_", arg: 1, scope: !7304, file: !11, line: 33, type: !7299)
!7308 = !DILocation(line: 33, column: 1, scope: !7304)
!7309 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7304, file: !11, line: 33, type: !100)
!7310 = distinct !DISubprogram(name: "is_gimple_call", scope: !11, file: !11, line: 1870, type: !4892, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7311 = !DILocalVariable(name: "gs", arg: 1, scope: !7310, file: !11, line: 1870, type: !4104)
!7312 = !DILocation(line: 1870, column: 30, scope: !7310)
!7313 = !DILocation(line: 1872, column: 23, scope: !7310)
!7314 = !DILocation(line: 1872, column: 10, scope: !7310)
!7315 = !DILocation(line: 1872, column: 27, scope: !7310)
!7316 = !DILocation(line: 1872, column: 3, scope: !7310)
!7317 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !11, file: !11, line: 1759, type: !7318, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7318 = !DISubroutineType(types: !7319)
!7319 = !{!326, !4104}
!7320 = !DILocalVariable(name: "gs", arg: 1, scope: !7317, file: !11, line: 1759, type: !4104)
!7321 = !DILocation(line: 1759, column: 34, scope: !7317)
!7322 = !DILocation(line: 1763, column: 23, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7317, file: !11, line: 1763, column: 7)
!7324 = !DILocation(line: 1763, column: 7, scope: !7323)
!7325 = !DILocation(line: 1763, column: 27, scope: !7323)
!7326 = !DILocation(line: 1763, column: 7, scope: !7317)
!7327 = !DILocation(line: 1764, column: 23, scope: !7323)
!7328 = !DILocation(line: 1764, column: 12, scope: !7323)
!7329 = !DILocation(line: 1764, column: 5, scope: !7323)
!7330 = !DILocation(line: 1766, column: 5, scope: !7323)
!7331 = !DILocation(line: 1767, column: 1, scope: !7317)
!7332 = distinct !DISubprogram(name: "vect_get_and_check_slp_defs", scope: !3, file: !3, line: 103, type: !7333, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7333 = !DISubroutineType(types: !7334)
!7334 = !{!6, !3941, !3781, !3726, !7, !6415, !6415, !7335, !7335, !749, !749, !749, !100, !1753, !1753}
!7335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1964, size: 64)
!7336 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !7332, file: !3, line: 103, type: !3941)
!7337 = !DILocation(line: 103, column: 44, scope: !7332)
!7338 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !7332, file: !3, line: 103, type: !3781)
!7339 = !DILocation(line: 103, column: 68, scope: !7332)
!7340 = !DILocalVariable(name: "slp_node", arg: 3, scope: !7332, file: !3, line: 104, type: !3726)
!7341 = !DILocation(line: 104, column: 39, scope: !7332)
!7342 = !DILocalVariable(name: "stmt", arg: 4, scope: !7332, file: !3, line: 104, type: !7)
!7343 = !DILocation(line: 104, column: 56, scope: !7332)
!7344 = !DILocalVariable(name: "def_stmts0", arg: 5, scope: !7332, file: !3, line: 105, type: !6415)
!7345 = !DILocation(line: 105, column: 30, scope: !7332)
!7346 = !DILocalVariable(name: "def_stmts1", arg: 6, scope: !7332, file: !3, line: 106, type: !6415)
!7347 = !DILocation(line: 106, column: 30, scope: !7332)
!7348 = !DILocalVariable(name: "first_stmt_dt0", arg: 7, scope: !7332, file: !3, line: 107, type: !7335)
!7349 = !DILocation(line: 107, column: 29, scope: !7332)
!7350 = !DILocalVariable(name: "first_stmt_dt1", arg: 8, scope: !7332, file: !3, line: 108, type: !7335)
!7351 = !DILocation(line: 108, column: 29, scope: !7332)
!7352 = !DILocalVariable(name: "first_stmt_def0_type", arg: 9, scope: !7332, file: !3, line: 109, type: !749)
!7353 = !DILocation(line: 109, column: 15, scope: !7332)
!7354 = !DILocalVariable(name: "first_stmt_def1_type", arg: 10, scope: !7332, file: !3, line: 110, type: !749)
!7355 = !DILocation(line: 110, column: 15, scope: !7332)
!7356 = !DILocalVariable(name: "first_stmt_const_oprnd", arg: 11, scope: !7332, file: !3, line: 111, type: !749)
!7357 = !DILocation(line: 111, column: 15, scope: !7332)
!7358 = !DILocalVariable(name: "ncopies_for_cost", arg: 12, scope: !7332, file: !3, line: 112, type: !100)
!7359 = !DILocation(line: 112, column: 13, scope: !7332)
!7360 = !DILocalVariable(name: "pattern0", arg: 13, scope: !7332, file: !3, line: 113, type: !1753)
!7361 = !DILocation(line: 113, column: 36, scope: !7332)
!7362 = !DILocalVariable(name: "pattern1", arg: 14, scope: !7332, file: !3, line: 113, type: !1753)
!7363 = !DILocation(line: 113, column: 52, scope: !7332)
!7364 = !DILocalVariable(name: "oprnd", scope: !7332, file: !3, line: 115, type: !326)
!7365 = !DILocation(line: 115, column: 8, scope: !7332)
!7366 = !DILocalVariable(name: "i", scope: !7332, file: !3, line: 116, type: !17)
!7367 = !DILocation(line: 116, column: 16, scope: !7332)
!7368 = !DILocalVariable(name: "number_of_oprnds", scope: !7332, file: !3, line: 116, type: !17)
!7369 = !DILocation(line: 116, column: 19, scope: !7332)
!7370 = !DILocalVariable(name: "def", scope: !7332, file: !3, line: 117, type: !326)
!7371 = !DILocation(line: 117, column: 8, scope: !7332)
!7372 = !DILocalVariable(name: "def_stmt", scope: !7332, file: !3, line: 118, type: !7)
!7373 = !DILocation(line: 118, column: 10, scope: !7332)
!7374 = !DILocalVariable(name: "dt", scope: !7332, file: !3, line: 119, type: !7375)
!7375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1964, size: 64, elements: !279)
!7376 = !DILocation(line: 119, column: 22, scope: !7332)
!7377 = !DILocalVariable(name: "stmt_info", scope: !7332, file: !3, line: 120, type: !3934)
!7378 = !DILocation(line: 120, column: 17, scope: !7332)
!7379 = !DILocation(line: 121, column: 21, scope: !7332)
!7380 = !DILocation(line: 121, column: 5, scope: !7332)
!7381 = !DILocalVariable(name: "rhs_class", scope: !7332, file: !3, line: 122, type: !1936)
!7382 = !DILocation(line: 122, column: 25, scope: !7332)
!7383 = !DILocalVariable(name: "loop", scope: !7332, file: !3, line: 123, type: !787)
!7384 = !DILocation(line: 123, column: 16, scope: !7332)
!7385 = !DILocation(line: 125, column: 7, scope: !7386)
!7386 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 125, column: 7)
!7387 = !DILocation(line: 125, column: 7, scope: !7332)
!7388 = !DILocation(line: 126, column: 12, scope: !7386)
!7389 = !DILocation(line: 126, column: 10, scope: !7386)
!7390 = !DILocation(line: 126, column: 5, scope: !7386)
!7391 = !DILocation(line: 128, column: 61, scope: !7332)
!7392 = !DILocation(line: 128, column: 37, scope: !7332)
!7393 = !DILocation(line: 128, column: 15, scope: !7332)
!7394 = !DILocation(line: 128, column: 13, scope: !7332)
!7395 = !DILocation(line: 129, column: 38, scope: !7332)
!7396 = !DILocation(line: 129, column: 22, scope: !7332)
!7397 = !DILocation(line: 129, column: 44, scope: !7332)
!7398 = !DILocation(line: 129, column: 20, scope: !7332)
!7399 = !DILocation(line: 131, column: 10, scope: !7400)
!7400 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 131, column: 3)
!7401 = !DILocation(line: 131, column: 8, scope: !7400)
!7402 = !DILocation(line: 131, column: 15, scope: !7403)
!7403 = distinct !DILexicalBlock(scope: !7400, file: !3, line: 131, column: 3)
!7404 = !DILocation(line: 131, column: 19, scope: !7403)
!7405 = !DILocation(line: 131, column: 17, scope: !7403)
!7406 = !DILocation(line: 131, column: 3, scope: !7400)
!7407 = !DILocation(line: 133, column: 26, scope: !7408)
!7408 = distinct !DILexicalBlock(scope: !7403, file: !3, line: 132, column: 5)
!7409 = !DILocation(line: 133, column: 32, scope: !7408)
!7410 = !DILocation(line: 133, column: 34, scope: !7408)
!7411 = !DILocation(line: 133, column: 15, scope: !7408)
!7412 = !DILocation(line: 133, column: 13, scope: !7408)
!7413 = !DILocation(line: 135, column: 32, scope: !7414)
!7414 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 135, column: 11)
!7415 = !DILocation(line: 135, column: 39, scope: !7414)
!7416 = !DILocation(line: 135, column: 51, scope: !7414)
!7417 = !DILocation(line: 136, column: 36, scope: !7414)
!7418 = !DILocation(line: 136, column: 33, scope: !7414)
!7419 = !DILocation(line: 135, column: 12, scope: !7414)
!7420 = !DILocation(line: 137, column: 4, scope: !7414)
!7421 = !DILocation(line: 137, column: 9, scope: !7414)
!7422 = !DILocation(line: 137, column: 18, scope: !7414)
!7423 = !DILocation(line: 137, column: 24, scope: !7414)
!7424 = !DILocation(line: 137, column: 21, scope: !7414)
!7425 = !DILocation(line: 137, column: 27, scope: !7414)
!7426 = !DILocation(line: 135, column: 11, scope: !7408)
!7427 = !DILocation(line: 139, column: 8, scope: !7428)
!7428 = distinct !DILexicalBlock(scope: !7429, file: !3, line: 139, column: 8)
!7429 = distinct !DILexicalBlock(scope: !7414, file: !3, line: 138, column: 2)
!7430 = !DILocation(line: 139, column: 8, scope: !7429)
!7431 = !DILocation(line: 141, column: 17, scope: !7432)
!7432 = distinct !DILexicalBlock(scope: !7428, file: !3, line: 140, column: 6)
!7433 = !DILocation(line: 141, column: 8, scope: !7432)
!7434 = !DILocation(line: 142, column: 28, scope: !7432)
!7435 = !DILocation(line: 142, column: 39, scope: !7432)
!7436 = !DILocation(line: 142, column: 8, scope: !7432)
!7437 = !DILocation(line: 143, column: 6, scope: !7432)
!7438 = !DILocation(line: 145, column: 4, scope: !7429)
!7439 = !DILocation(line: 151, column: 11, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 151, column: 11)
!7441 = !DILocation(line: 151, column: 16, scope: !7440)
!7442 = !DILocation(line: 151, column: 19, scope: !7440)
!7443 = !DILocation(line: 151, column: 28, scope: !7440)
!7444 = !DILocation(line: 151, column: 42, scope: !7440)
!7445 = !DILocation(line: 151, column: 31, scope: !7440)
!7446 = !DILocation(line: 152, column: 11, scope: !7440)
!7447 = !DILocation(line: 152, column: 37, scope: !7440)
!7448 = !DILocation(line: 152, column: 54, scope: !7440)
!7449 = !DILocation(line: 152, column: 43, scope: !7440)
!7450 = !DILocation(line: 152, column: 14, scope: !7440)
!7451 = !DILocation(line: 153, column: 11, scope: !7440)
!7452 = !DILocation(line: 153, column: 30, scope: !7440)
!7453 = !DILocation(line: 153, column: 14, scope: !7440)
!7454 = !DILocation(line: 154, column: 11, scope: !7440)
!7455 = !DILocation(line: 154, column: 14, scope: !7440)
!7456 = !DILocation(line: 151, column: 11, scope: !7408)
!7457 = !DILocation(line: 156, column: 17, scope: !7458)
!7458 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 156, column: 15)
!7459 = distinct !DILexicalBlock(scope: !7440, file: !3, line: 155, column: 9)
!7460 = !DILocation(line: 156, column: 16, scope: !7458)
!7461 = !DILocation(line: 156, column: 15, scope: !7459)
!7462 = !DILocation(line: 157, column: 14, scope: !7458)
!7463 = !DILocation(line: 157, column: 23, scope: !7458)
!7464 = !DILocation(line: 157, column: 13, scope: !7458)
!7465 = !DILocation(line: 160, column: 19, scope: !7466)
!7466 = distinct !DILexicalBlock(scope: !7467, file: !3, line: 160, column: 19)
!7467 = distinct !DILexicalBlock(scope: !7458, file: !3, line: 159, column: 13)
!7468 = !DILocation(line: 160, column: 21, scope: !7466)
!7469 = !DILocation(line: 160, column: 26, scope: !7466)
!7470 = !DILocation(line: 160, column: 31, scope: !7466)
!7471 = !DILocation(line: 160, column: 30, scope: !7466)
!7472 = !DILocation(line: 160, column: 19, scope: !7467)
!7473 = !DILocation(line: 161, column: 18, scope: !7466)
!7474 = !DILocation(line: 161, column: 27, scope: !7466)
!7475 = !DILocation(line: 161, column: 17, scope: !7466)
!7476 = !DILocation(line: 162, column: 25, scope: !7477)
!7477 = distinct !DILexicalBlock(scope: !7466, file: !3, line: 162, column: 24)
!7478 = !DILocation(line: 162, column: 27, scope: !7477)
!7479 = !DILocation(line: 162, column: 32, scope: !7477)
!7480 = !DILocation(line: 162, column: 37, scope: !7477)
!7481 = !DILocation(line: 162, column: 36, scope: !7477)
!7482 = !DILocation(line: 162, column: 47, scope: !7477)
!7483 = !DILocation(line: 162, column: 51, scope: !7477)
!7484 = !DILocation(line: 162, column: 53, scope: !7477)
!7485 = !DILocation(line: 162, column: 58, scope: !7477)
!7486 = !DILocation(line: 162, column: 63, scope: !7477)
!7487 = !DILocation(line: 162, column: 62, scope: !7477)
!7488 = !DILocation(line: 162, column: 24, scope: !7466)
!7489 = !DILocation(line: 164, column: 23, scope: !7490)
!7490 = distinct !DILexicalBlock(scope: !7491, file: !3, line: 164, column: 23)
!7491 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 163, column: 17)
!7492 = !DILocation(line: 164, column: 23, scope: !7491)
!7493 = !DILocation(line: 166, column: 32, scope: !7494)
!7494 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 165, column: 21)
!7495 = !DILocation(line: 166, column: 23, scope: !7494)
!7496 = !DILocation(line: 168, column: 43, scope: !7494)
!7497 = !DILocation(line: 168, column: 54, scope: !7494)
!7498 = !DILocation(line: 168, column: 23, scope: !7494)
!7499 = !DILocation(line: 169, column: 21, scope: !7494)
!7500 = !DILocation(line: 171, column: 19, scope: !7491)
!7501 = !DILocation(line: 175, column: 22, scope: !7459)
!7502 = !DILocation(line: 175, column: 20, scope: !7459)
!7503 = !DILocation(line: 176, column: 19, scope: !7459)
!7504 = !DILocation(line: 176, column: 14, scope: !7459)
!7505 = !DILocation(line: 176, column: 11, scope: !7459)
!7506 = !DILocation(line: 176, column: 17, scope: !7459)
!7507 = !DILocation(line: 178, column: 15, scope: !7508)
!7508 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 178, column: 15)
!7509 = !DILocation(line: 178, column: 19, scope: !7508)
!7510 = !DILocation(line: 178, column: 15, scope: !7459)
!7511 = !DILocation(line: 180, column: 19, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !7513, file: !3, line: 180, column: 19)
!7513 = distinct !DILexicalBlock(scope: !7508, file: !3, line: 179, column: 13)
!7514 = !DILocation(line: 180, column: 19, scope: !7513)
!7515 = !DILocation(line: 181, column: 26, scope: !7512)
!7516 = !DILocation(line: 181, column: 17, scope: !7512)
!7517 = !DILocation(line: 182, column: 15, scope: !7513)
!7518 = !DILocation(line: 185, column: 32, scope: !7459)
!7519 = !DILocation(line: 185, column: 19, scope: !7459)
!7520 = !DILocation(line: 185, column: 11, scope: !7459)
!7521 = !DILocation(line: 188, column: 42, scope: !7522)
!7522 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 186, column: 13)
!7523 = !DILocation(line: 188, column: 23, scope: !7522)
!7524 = !DILocation(line: 188, column: 21, scope: !7522)
!7525 = !DILocation(line: 189, column: 17, scope: !7522)
!7526 = !DILocation(line: 192, column: 42, scope: !7522)
!7527 = !DILocation(line: 192, column: 23, scope: !7522)
!7528 = !DILocation(line: 192, column: 21, scope: !7522)
!7529 = !DILocation(line: 193, column: 17, scope: !7522)
!7530 = !DILocation(line: 196, column: 21, scope: !7531)
!7531 = distinct !DILexicalBlock(scope: !7522, file: !3, line: 196, column: 21)
!7532 = !DILocation(line: 196, column: 21, scope: !7522)
!7533 = !DILocation(line: 197, column: 28, scope: !7531)
!7534 = !DILocation(line: 197, column: 19, scope: !7531)
!7535 = !DILocation(line: 198, column: 17, scope: !7522)
!7536 = !DILocation(line: 200, column: 9, scope: !7459)
!7537 = !DILocation(line: 202, column: 13, scope: !7538)
!7538 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 202, column: 11)
!7539 = !DILocation(line: 202, column: 12, scope: !7538)
!7540 = !DILocation(line: 202, column: 11, scope: !7408)
!7541 = !DILocation(line: 205, column: 25, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 203, column: 2)
!7543 = !DILocation(line: 205, column: 22, scope: !7542)
!7544 = !DILocation(line: 205, column: 5, scope: !7542)
!7545 = !DILocation(line: 205, column: 20, scope: !7542)
!7546 = !DILocation(line: 206, column: 8, scope: !7547)
!7547 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 206, column: 8)
!7548 = !DILocation(line: 206, column: 8, scope: !7542)
!7549 = !DILocation(line: 207, column: 30, scope: !7547)
!7550 = !DILocation(line: 207, column: 7, scope: !7547)
!7551 = !DILocation(line: 207, column: 28, scope: !7547)
!7552 = !DILocation(line: 207, column: 6, scope: !7547)
!7553 = !DILocation(line: 209, column: 32, scope: !7547)
!7554 = !DILocation(line: 209, column: 7, scope: !7547)
!7555 = !DILocation(line: 209, column: 30, scope: !7547)
!7556 = !DILocation(line: 212, column: 8, scope: !7557)
!7557 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 212, column: 8)
!7558 = !DILocation(line: 212, column: 18, scope: !7557)
!7559 = !DILocation(line: 212, column: 8, scope: !7542)
!7560 = !DILocation(line: 214, column: 30, scope: !7557)
!7561 = !DILocation(line: 214, column: 41, scope: !7557)
!7562 = !DILocation(line: 214, column: 59, scope: !7557)
!7563 = !DILocation(line: 214, column: 63, scope: !7557)
!7564 = !DILocation(line: 214, column: 6, scope: !7557)
!7565 = !DILocation(line: 217, column: 29, scope: !7557)
!7566 = !DILocation(line: 217, column: 40, scope: !7557)
!7567 = !DILocation(line: 217, column: 58, scope: !7557)
!7568 = !DILocation(line: 217, column: 65, scope: !7557)
!7569 = !DILocation(line: 217, column: 6, scope: !7557)
!7570 = !DILocation(line: 218, column: 2, scope: !7542)
!7571 = !DILocation(line: 222, column: 10, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 222, column: 8)
!7573 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 221, column: 2)
!7574 = !DILocation(line: 222, column: 9, scope: !7572)
!7575 = !DILocation(line: 222, column: 25, scope: !7572)
!7576 = !DILocation(line: 222, column: 28, scope: !7572)
!7577 = !DILocation(line: 222, column: 30, scope: !7572)
!7578 = !DILocation(line: 222, column: 8, scope: !7573)
!7579 = !DILocation(line: 225, column: 29, scope: !7580)
!7580 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 223, column: 6)
!7581 = !DILocation(line: 225, column: 26, scope: !7580)
!7582 = !DILocation(line: 225, column: 9, scope: !7580)
!7583 = !DILocation(line: 225, column: 24, scope: !7580)
!7584 = !DILocation(line: 226, column: 12, scope: !7585)
!7585 = distinct !DILexicalBlock(scope: !7580, file: !3, line: 226, column: 12)
!7586 = !DILocation(line: 226, column: 12, scope: !7580)
!7587 = !DILocation(line: 227, column: 27, scope: !7585)
!7588 = !DILocation(line: 227, column: 4, scope: !7585)
!7589 = !DILocation(line: 227, column: 25, scope: !7585)
!7590 = !DILocation(line: 227, column: 3, scope: !7585)
!7591 = !DILocation(line: 232, column: 10, scope: !7592)
!7592 = distinct !DILexicalBlock(scope: !7593, file: !3, line: 232, column: 9)
!7593 = distinct !DILexicalBlock(scope: !7585, file: !3, line: 229, column: 3)
!7594 = !DILocation(line: 232, column: 9, scope: !7592)
!7595 = !DILocation(line: 232, column: 9, scope: !7593)
!7596 = !DILocation(line: 234, column: 13, scope: !7597)
!7597 = distinct !DILexicalBlock(scope: !7598, file: !3, line: 234, column: 13)
!7598 = distinct !DILexicalBlock(scope: !7592, file: !3, line: 233, column: 7)
!7599 = !DILocation(line: 234, column: 13, scope: !7598)
!7600 = !DILocation(line: 235, column: 13, scope: !7597)
!7601 = !DILocation(line: 235, column: 4, scope: !7597)
!7602 = !DILocation(line: 237, column: 9, scope: !7598)
!7603 = !DILocation(line: 239, column: 31, scope: !7593)
!7604 = !DILocation(line: 239, column: 6, scope: !7593)
!7605 = !DILocation(line: 239, column: 29, scope: !7593)
!7606 = !DILocation(line: 241, column: 6, scope: !7580)
!7607 = !DILocation(line: 246, column: 13, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 246, column: 12)
!7609 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 243, column: 6)
!7610 = !DILocation(line: 246, column: 15, scope: !7608)
!7611 = !DILocation(line: 247, column: 6, scope: !7608)
!7612 = !DILocation(line: 247, column: 11, scope: !7608)
!7613 = !DILocation(line: 247, column: 10, scope: !7608)
!7614 = !DILocation(line: 247, column: 32, scope: !7608)
!7615 = !DILocation(line: 247, column: 29, scope: !7608)
!7616 = !DILocation(line: 247, column: 26, scope: !7608)
!7617 = !DILocation(line: 248, column: 10, scope: !7608)
!7618 = !DILocation(line: 248, column: 15, scope: !7608)
!7619 = !DILocation(line: 248, column: 14, scope: !7608)
!7620 = !DILocation(line: 248, column: 36, scope: !7608)
!7621 = !DILocation(line: 248, column: 39, scope: !7608)
!7622 = !DILocation(line: 249, column: 7, scope: !7608)
!7623 = !DILocation(line: 249, column: 32, scope: !7608)
!7624 = !DILocation(line: 249, column: 31, scope: !7608)
!7625 = !DILocation(line: 250, column: 10, scope: !7608)
!7626 = !DILocation(line: 249, column: 11, scope: !7608)
!7627 = !DILocation(line: 251, column: 5, scope: !7608)
!7628 = !DILocation(line: 251, column: 9, scope: !7608)
!7629 = !DILocation(line: 251, column: 11, scope: !7608)
!7630 = !DILocation(line: 252, column: 9, scope: !7608)
!7631 = !DILocation(line: 252, column: 14, scope: !7608)
!7632 = !DILocation(line: 252, column: 13, scope: !7608)
!7633 = !DILocation(line: 252, column: 35, scope: !7608)
!7634 = !DILocation(line: 252, column: 32, scope: !7608)
!7635 = !DILocation(line: 252, column: 29, scope: !7608)
!7636 = !DILocation(line: 253, column: 6, scope: !7608)
!7637 = !DILocation(line: 253, column: 11, scope: !7608)
!7638 = !DILocation(line: 253, column: 10, scope: !7608)
!7639 = !DILocation(line: 253, column: 32, scope: !7608)
!7640 = !DILocation(line: 253, column: 35, scope: !7608)
!7641 = !DILocation(line: 254, column: 10, scope: !7608)
!7642 = !DILocation(line: 254, column: 35, scope: !7608)
!7643 = !DILocation(line: 254, column: 34, scope: !7608)
!7644 = !DILocation(line: 255, column: 13, scope: !7608)
!7645 = !DILocation(line: 254, column: 14, scope: !7608)
!7646 = !DILocation(line: 256, column: 5, scope: !7608)
!7647 = !DILocation(line: 256, column: 10, scope: !7608)
!7648 = !DILocation(line: 257, column: 9, scope: !7608)
!7649 = !DILocation(line: 257, column: 33, scope: !7608)
!7650 = !DILocation(line: 258, column: 12, scope: !7608)
!7651 = !DILocation(line: 257, column: 13, scope: !7608)
!7652 = !DILocation(line: 246, column: 12, scope: !7609)
!7653 = !DILocation(line: 260, column: 9, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7655, file: !3, line: 260, column: 9)
!7655 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 259, column: 3)
!7656 = !DILocation(line: 260, column: 9, scope: !7655)
!7657 = !DILocation(line: 261, column: 16, scope: !7654)
!7658 = !DILocation(line: 261, column: 7, scope: !7654)
!7659 = !DILocation(line: 263, column: 5, scope: !7655)
!7660 = !DILocation(line: 269, column: 18, scope: !7408)
!7661 = !DILocation(line: 269, column: 15, scope: !7408)
!7662 = !DILocation(line: 269, column: 7, scope: !7408)
!7663 = !DILocation(line: 273, column: 4, scope: !7664)
!7664 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 270, column: 2)
!7665 = !DILocation(line: 276, column: 8, scope: !7666)
!7666 = distinct !DILexicalBlock(scope: !7664, file: !3, line: 276, column: 8)
!7667 = !DILocation(line: 276, column: 10, scope: !7666)
!7668 = !DILocation(line: 276, column: 8, scope: !7664)
!7669 = !DILocation(line: 277, column: 6, scope: !7666)
!7670 = !DILocation(line: 279, column: 6, scope: !7666)
!7671 = !DILocation(line: 280, column: 4, scope: !7664)
!7672 = !DILocation(line: 284, column: 8, scope: !7673)
!7673 = distinct !DILexicalBlock(scope: !7664, file: !3, line: 284, column: 8)
!7674 = !DILocation(line: 284, column: 8, scope: !7664)
!7675 = !DILocation(line: 286, column: 17, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !7673, file: !3, line: 285, column: 6)
!7677 = !DILocation(line: 286, column: 8, scope: !7676)
!7678 = !DILocation(line: 287, column: 28, scope: !7676)
!7679 = !DILocation(line: 287, column: 39, scope: !7676)
!7680 = !DILocation(line: 287, column: 8, scope: !7676)
!7681 = !DILocation(line: 288, column: 6, scope: !7676)
!7682 = !DILocation(line: 290, column: 4, scope: !7664)
!7683 = !DILocation(line: 292, column: 5, scope: !7408)
!7684 = !DILocation(line: 131, column: 38, scope: !7403)
!7685 = !DILocation(line: 131, column: 3, scope: !7403)
!7686 = distinct !{!7686, !7406, !7687}
!7687 = !DILocation(line: 292, column: 5, scope: !7400)
!7688 = !DILocation(line: 294, column: 3, scope: !7332)
!7689 = !DILocation(line: 295, column: 1, scope: !7332)
!7690 = distinct !DISubprogram(name: "VEC_int_heap_safe_push", scope: !3737, file: !3737, line: 32, type: !7691, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7691 = !DISubroutineType(types: !7692)
!7692 = !{!1752, !4164, !7693}
!7693 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !100)
!7694 = !DILocalVariable(name: "vec_", arg: 1, scope: !7690, file: !3737, line: 32, type: !4164)
!7695 = !DILocation(line: 32, column: 1, scope: !7690)
!7696 = !DILocalVariable(name: "obj_", arg: 2, scope: !7690, file: !3737, line: 32, type: !7693)
!7697 = distinct !DISubprogram(name: "VEC_slp_tree_heap_safe_push", scope: !1757, file: !1757, line: 119, type: !7698, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7698 = !DISubroutineType(types: !7699)
!7699 = !{!3764, !4172, !3726}
!7700 = !DILocalVariable(name: "vec_", arg: 1, scope: !7697, file: !1757, line: 119, type: !4172)
!7701 = !DILocation(line: 119, column: 1, scope: !7697)
!7702 = !DILocalVariable(name: "obj_", arg: 2, scope: !7697, file: !1757, line: 119, type: !3726)
!7703 = distinct !DISubprogram(name: "gimple_num_ops", scope: !11, file: !11, line: 1596, type: !7704, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7704 = !DISubroutineType(types: !7705)
!7705 = !{!17, !4104}
!7706 = !DILocalVariable(name: "gs", arg: 1, scope: !7703, file: !11, line: 1596, type: !4104)
!7707 = !DILocation(line: 1596, column: 30, scope: !7703)
!7708 = !DILocation(line: 1598, column: 10, scope: !7703)
!7709 = !DILocation(line: 1598, column: 14, scope: !7703)
!7710 = !DILocation(line: 1598, column: 21, scope: !7703)
!7711 = !DILocation(line: 1598, column: 3, scope: !7703)
!7712 = distinct !DISubprogram(name: "gimple_op", scope: !11, file: !11, line: 1631, type: !7713, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7713 = !DISubroutineType(types: !7714)
!7714 = !{!326, !4104, !17}
!7715 = !DILocalVariable(name: "gs", arg: 1, scope: !7712, file: !11, line: 1631, type: !4104)
!7716 = !DILocation(line: 1631, column: 25, scope: !7712)
!7717 = !DILocalVariable(name: "i", arg: 2, scope: !7712, file: !11, line: 1631, type: !17)
!7718 = !DILocation(line: 1631, column: 38, scope: !7712)
!7719 = !DILocation(line: 1633, column: 23, scope: !7720)
!7720 = distinct !DILexicalBlock(scope: !7712, file: !11, line: 1633, column: 7)
!7721 = !DILocation(line: 1633, column: 7, scope: !7720)
!7722 = !DILocation(line: 1633, column: 7, scope: !7712)
!7723 = !DILocation(line: 1638, column: 26, scope: !7724)
!7724 = distinct !DILexicalBlock(scope: !7720, file: !11, line: 1634, column: 5)
!7725 = !DILocation(line: 1638, column: 14, scope: !7724)
!7726 = !DILocation(line: 1638, column: 50, scope: !7724)
!7727 = !DILocation(line: 1638, column: 7, scope: !7724)
!7728 = !DILocation(line: 1641, column: 5, scope: !7720)
!7729 = !DILocation(line: 1642, column: 1, scope: !7712)
!7730 = distinct !DISubprogram(name: "gimple_has_ops", scope: !11, file: !11, line: 1274, type: !4892, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7731 = !DILocalVariable(name: "g", arg: 1, scope: !7730, file: !11, line: 1274, type: !4104)
!7732 = !DILocation(line: 1274, column: 30, scope: !7730)
!7733 = !DILocation(line: 1276, column: 23, scope: !7730)
!7734 = !DILocation(line: 1276, column: 10, scope: !7730)
!7735 = !DILocation(line: 1276, column: 26, scope: !7730)
!7736 = !DILocation(line: 1276, column: 41, scope: !7730)
!7737 = !DILocation(line: 1276, column: 57, scope: !7730)
!7738 = !DILocation(line: 1276, column: 44, scope: !7730)
!7739 = !DILocation(line: 1276, column: 60, scope: !7730)
!7740 = !DILocation(line: 0, scope: !7730)
!7741 = !DILocation(line: 1276, column: 3, scope: !7730)
!7742 = distinct !DISubprogram(name: "gimple_ops", scope: !11, file: !11, line: 1614, type: !7743, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7743 = !DISubroutineType(types: !7744)
!7744 = !{!749, !7}
!7745 = !DILocalVariable(name: "gs", arg: 1, scope: !7742, file: !11, line: 1614, type: !7)
!7746 = !DILocation(line: 1614, column: 20, scope: !7742)
!7747 = !DILocalVariable(name: "off", scope: !7742, file: !11, line: 1616, type: !657)
!7748 = !DILocation(line: 1616, column: 10, scope: !7742)
!7749 = !DILocation(line: 1621, column: 56, scope: !7742)
!7750 = !DILocation(line: 1621, column: 28, scope: !7742)
!7751 = !DILocation(line: 1621, column: 9, scope: !7742)
!7752 = !DILocation(line: 1621, column: 7, scope: !7742)
!7753 = !DILocation(line: 1622, column: 3, scope: !7742)
!7754 = !DILocation(line: 1624, column: 29, scope: !7742)
!7755 = !DILocation(line: 1624, column: 20, scope: !7742)
!7756 = !DILocation(line: 1624, column: 34, scope: !7742)
!7757 = !DILocation(line: 1624, column: 32, scope: !7742)
!7758 = !DILocation(line: 1624, column: 10, scope: !7742)
!7759 = !DILocation(line: 1624, column: 3, scope: !7742)
!7760 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !11, file: !11, line: 1073, type: !7761, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7761 = !DISubroutineType(types: !7762)
!7762 = !{!3671, !7}
!7763 = !DILocalVariable(name: "gs", arg: 1, scope: !7760, file: !11, line: 1073, type: !7)
!7764 = !DILocation(line: 1073, column: 36, scope: !7760)
!7765 = !DILocation(line: 1075, column: 37, scope: !7760)
!7766 = !DILocation(line: 1075, column: 24, scope: !7760)
!7767 = !DILocation(line: 1075, column: 10, scope: !7760)
!7768 = !DILocation(line: 1075, column: 3, scope: !7760)
!7769 = distinct !DISubprogram(name: "gss_for_code", scope: !11, file: !11, line: 1061, type: !7770, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7770 = !DISubroutineType(types: !7771)
!7771 = !{!3671, !1775}
!7772 = !DILocalVariable(name: "code", arg: 1, scope: !7769, file: !11, line: 1061, type: !1775)
!7773 = !DILocation(line: 1061, column: 32, scope: !7769)
!7774 = !DILocation(line: 1066, column: 24, scope: !7769)
!7775 = !DILocation(line: 1066, column: 10, scope: !7769)
!7776 = !DILocation(line: 1066, column: 3, scope: !7769)
!7777 = distinct !DISubprogram(name: "gimple_bb", scope: !11, file: !11, line: 1112, type: !7778, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7778 = !DISubroutineType(types: !7779)
!7779 = !{!34, !4104}
!7780 = !DILocalVariable(name: "g", arg: 1, scope: !7777, file: !11, line: 1112, type: !4104)
!7781 = !DILocation(line: 1112, column: 25, scope: !7777)
!7782 = !DILocation(line: 1114, column: 10, scope: !7777)
!7783 = !DILocation(line: 1114, column: 13, scope: !7777)
!7784 = !DILocation(line: 1114, column: 20, scope: !7777)
!7785 = !DILocation(line: 1114, column: 3, scope: !7777)
!7786 = distinct !DISubprogram(name: "gimple_phi_result", scope: !11, file: !11, line: 3071, type: !7318, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7787 = !DILocalVariable(name: "gs", arg: 1, scope: !7786, file: !11, line: 3071, type: !4104)
!7788 = !DILocation(line: 3071, column: 33, scope: !7786)
!7789 = !DILocation(line: 3074, column: 10, scope: !7786)
!7790 = !DILocation(line: 3074, column: 14, scope: !7786)
!7791 = !DILocation(line: 3074, column: 25, scope: !7786)
!7792 = !DILocation(line: 3074, column: 3, scope: !7786)
!7793 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !11, file: !11, line: 1694, type: !7318, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7794 = !DILocalVariable(name: "gs", arg: 1, scope: !7793, file: !11, line: 1694, type: !4104)
!7795 = !DILocation(line: 1694, column: 33, scope: !7793)
!7796 = !DILocation(line: 1697, column: 21, scope: !7793)
!7797 = !DILocation(line: 1697, column: 10, scope: !7793)
!7798 = !DILocation(line: 1697, column: 3, scope: !7793)
!7799 = distinct !DISubprogram(name: "VEC_int_heap_reserve", scope: !3737, file: !3737, line: 32, type: !7800, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7800 = !DISubroutineType(types: !7801)
!7801 = !{!100, !4164, !100}
!7802 = !DILocalVariable(name: "vec_", arg: 1, scope: !7799, file: !3737, line: 32, type: !4164)
!7803 = !DILocation(line: 32, column: 1, scope: !7799)
!7804 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7799, file: !3737, line: 32, type: !100)
!7805 = !DILocalVariable(name: "extend", scope: !7799, file: !3737, line: 32, type: !100)
!7806 = !DILocation(line: 32, column: 1, scope: !7807)
!7807 = distinct !DILexicalBlock(scope: !7799, file: !3737, line: 32, column: 1)
!7808 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !3737, file: !3737, line: 31, type: !7809, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7809 = !DISubroutineType(types: !7810)
!7810 = !{!1752, !7811, !100}
!7811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3741, size: 64)
!7812 = !DILocalVariable(name: "vec_", arg: 1, scope: !7808, file: !3737, line: 31, type: !7811)
!7813 = !DILocation(line: 31, column: 1, scope: !7808)
!7814 = !DILocalVariable(name: "obj_", arg: 2, scope: !7808, file: !3737, line: 31, type: !100)
!7815 = !DILocalVariable(name: "slot_", scope: !7808, file: !3737, line: 31, type: !1752)
!7816 = distinct !DISubprogram(name: "VEC_int_base_space", scope: !3737, file: !3737, line: 31, type: !7817, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7817 = !DISubroutineType(types: !7818)
!7818 = !{!100, !7811, !100}
!7819 = !DILocalVariable(name: "vec_", arg: 1, scope: !7816, file: !3737, line: 31, type: !7811)
!7820 = !DILocation(line: 31, column: 1, scope: !7816)
!7821 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7816, file: !3737, line: 31, type: !100)
!7822 = distinct !DISubprogram(name: "VEC_slp_tree_heap_reserve", scope: !1757, file: !1757, line: 119, type: !7823, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7823 = !DISubroutineType(types: !7824)
!7824 = !{!100, !4172, !100}
!7825 = !DILocalVariable(name: "vec_", arg: 1, scope: !7822, file: !1757, line: 119, type: !4172)
!7826 = !DILocation(line: 119, column: 1, scope: !7822)
!7827 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7822, file: !1757, line: 119, type: !100)
!7828 = !DILocalVariable(name: "extend", scope: !7822, file: !1757, line: 119, type: !100)
!7829 = !DILocation(line: 119, column: 1, scope: !7830)
!7830 = distinct !DILexicalBlock(scope: !7822, file: !1757, line: 119, column: 1)
!7831 = distinct !DISubprogram(name: "VEC_slp_tree_base_quick_push", scope: !1757, file: !1757, line: 118, type: !7832, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7832 = !DISubroutineType(types: !7833)
!7833 = !{!3764, !7834, !3726}
!7834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3754, size: 64)
!7835 = !DILocalVariable(name: "vec_", arg: 1, scope: !7831, file: !1757, line: 118, type: !7834)
!7836 = !DILocation(line: 118, column: 1, scope: !7831)
!7837 = !DILocalVariable(name: "obj_", arg: 2, scope: !7831, file: !1757, line: 118, type: !3726)
!7838 = !DILocalVariable(name: "slot_", scope: !7831, file: !1757, line: 118, type: !3764)
!7839 = distinct !DISubprogram(name: "VEC_slp_tree_base_space", scope: !1757, file: !1757, line: 118, type: !7840, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7840 = !DISubroutineType(types: !7841)
!7841 = !{!100, !7834, !100}
!7842 = !DILocalVariable(name: "vec_", arg: 1, scope: !7839, file: !1757, line: 118, type: !7834)
!7843 = !DILocation(line: 118, column: 1, scope: !7839)
!7844 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7839, file: !1757, line: 118, type: !100)
!7845 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !3737, file: !3737, line: 31, type: !7846, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7846 = !DISubroutineType(types: !7847)
!7847 = !{!100, !7848, !17, !1752}
!7848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7849, size: 64)
!7849 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3741)
!7850 = !DILocalVariable(name: "vec_", arg: 1, scope: !7845, file: !3737, line: 31, type: !7848)
!7851 = !DILocation(line: 31, column: 1, scope: !7845)
!7852 = !DILocalVariable(name: "ix_", arg: 2, scope: !7845, file: !3737, line: 31, type: !17)
!7853 = !DILocalVariable(name: "ptr", arg: 3, scope: !7845, file: !3737, line: 31, type: !1752)
!7854 = !DILocation(line: 31, column: 1, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7845, file: !3737, line: 31, column: 1)
!7856 = !DILocation(line: 31, column: 1, scope: !7857)
!7857 = distinct !DILexicalBlock(scope: !7855, file: !3737, line: 31, column: 1)
!7858 = !DILocation(line: 31, column: 1, scope: !7859)
!7859 = distinct !DILexicalBlock(scope: !7855, file: !3737, line: 31, column: 1)
!7860 = distinct !DISubprogram(name: "VEC_int_base_length", scope: !3737, file: !3737, line: 31, type: !7861, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7861 = !DISubroutineType(types: !7862)
!7862 = !{!17, !7848}
!7863 = !DILocalVariable(name: "vec_", arg: 1, scope: !7860, file: !3737, line: 31, type: !7848)
!7864 = !DILocation(line: 31, column: 1, scope: !7860)
!7865 = distinct !DISubprogram(name: "SET_BIT", scope: !7075, file: !7075, line: 63, type: !7866, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7866 = !DISubroutineType(types: !7867)
!7867 = !{null, !7074, !17}
!7868 = !DILocalVariable(name: "map", arg: 1, scope: !7865, file: !7075, line: 63, type: !7074)
!7869 = !DILocation(line: 63, column: 18, scope: !7865)
!7870 = !DILocalVariable(name: "bitno", arg: 2, scope: !7865, file: !7075, line: 63, type: !17)
!7871 = !DILocation(line: 63, column: 36, scope: !7865)
!7872 = !DILocation(line: 65, column: 7, scope: !7873)
!7873 = distinct !DILexicalBlock(scope: !7865, file: !7075, line: 65, column: 7)
!7874 = !DILocation(line: 65, column: 12, scope: !7873)
!7875 = !DILocation(line: 65, column: 7, scope: !7865)
!7876 = !DILocalVariable(name: "oldbit", scope: !7877, file: !7075, line: 67, type: !6)
!7877 = distinct !DILexicalBlock(scope: !7873, file: !7075, line: 66, column: 5)
!7878 = !DILocation(line: 67, column: 12, scope: !7877)
!7879 = !DILocation(line: 68, column: 16, scope: !7877)
!7880 = !DILocation(line: 68, column: 14, scope: !7877)
!7881 = !DILocation(line: 69, column: 12, scope: !7882)
!7882 = distinct !DILexicalBlock(scope: !7877, file: !7075, line: 69, column: 11)
!7883 = !DILocation(line: 69, column: 11, scope: !7877)
!7884 = !DILocation(line: 70, column: 2, scope: !7882)
!7885 = !DILocation(line: 70, column: 7, scope: !7882)
!7886 = !DILocation(line: 70, column: 16, scope: !7882)
!7887 = !DILocation(line: 70, column: 22, scope: !7882)
!7888 = !DILocation(line: 70, column: 41, scope: !7882)
!7889 = !DILocation(line: 71, column: 5, scope: !7877)
!7890 = !DILocation(line: 73, column: 33, scope: !7865)
!7891 = !DILocation(line: 73, column: 40, scope: !7865)
!7892 = !DILocation(line: 73, column: 29, scope: !7865)
!7893 = !DILocation(line: 72, column: 3, scope: !7865)
!7894 = !DILocation(line: 72, column: 8, scope: !7865)
!7895 = !DILocation(line: 72, column: 13, scope: !7865)
!7896 = !DILocation(line: 72, column: 19, scope: !7865)
!7897 = !DILocation(line: 73, column: 5, scope: !7865)
!7898 = !DILocation(line: 74, column: 1, scope: !7865)
!7899 = distinct !DISubprogram(name: "vect_supported_slp_permutation_p", scope: !3, file: !3, line: 734, type: !7900, scopeLine: 735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!7900 = !DISubroutineType(types: !7901)
!7901 = !{!6, !3777}
!7902 = !DILocalVariable(name: "instance", arg: 1, scope: !7899, file: !3, line: 734, type: !3777)
!7903 = !DILocation(line: 734, column: 48, scope: !7899)
!7904 = !DILocalVariable(name: "node", scope: !7899, file: !3, line: 736, type: !3726)
!7905 = !DILocation(line: 736, column: 12, scope: !7899)
!7906 = !DILocation(line: 736, column: 19, scope: !7899)
!7907 = !DILocalVariable(name: "stmt", scope: !7899, file: !3, line: 737, type: !7)
!7908 = !DILocation(line: 737, column: 10, scope: !7899)
!7909 = !DILocation(line: 737, column: 17, scope: !7899)
!7910 = !DILocalVariable(name: "first_load", scope: !7899, file: !3, line: 738, type: !7)
!7911 = !DILocation(line: 738, column: 10, scope: !7899)
!7912 = !DILocation(line: 738, column: 23, scope: !7899)
!7913 = !DILocalVariable(name: "sorted_loads", scope: !7899, file: !3, line: 739, type: !3749)
!7914 = !DILocation(line: 739, column: 25, scope: !7899)
!7915 = !DILocalVariable(name: "index", scope: !7899, file: !3, line: 740, type: !100)
!7916 = !DILocation(line: 740, column: 7, scope: !7899)
!7917 = !DILocalVariable(name: "tmp_loads", scope: !7899, file: !3, line: 741, type: !3764)
!7918 = !DILocation(line: 741, column: 13, scope: !7899)
!7919 = !DILocalVariable(name: "group_size", scope: !7899, file: !3, line: 742, type: !100)
!7920 = !DILocation(line: 742, column: 7, scope: !7899)
!7921 = !DILocation(line: 742, column: 20, scope: !7899)
!7922 = !DILocalVariable(name: "i", scope: !7899, file: !3, line: 742, type: !100)
!7923 = !DILocation(line: 742, column: 56, scope: !7899)
!7924 = !DILocalVariable(name: "j", scope: !7899, file: !3, line: 742, type: !100)
!7925 = !DILocation(line: 742, column: 59, scope: !7899)
!7926 = !DILocalVariable(name: "load", scope: !7899, file: !3, line: 743, type: !3726)
!7927 = !DILocation(line: 743, column: 12, scope: !7899)
!7928 = !DILocation(line: 749, column: 57, scope: !7899)
!7929 = !DILocation(line: 749, column: 55, scope: !7899)
!7930 = !DILocation(line: 749, column: 28, scope: !7899)
!7931 = !DILocation(line: 749, column: 15, scope: !7899)
!7932 = !DILocation(line: 749, column: 13, scope: !7899)
!7933 = !DILocation(line: 750, column: 10, scope: !7934)
!7934 = distinct !DILexicalBlock(scope: !7899, file: !3, line: 750, column: 3)
!7935 = !DILocation(line: 750, column: 17, scope: !7934)
!7936 = !DILocation(line: 750, column: 8, scope: !7934)
!7937 = !DILocation(line: 751, column: 8, scope: !7938)
!7938 = distinct !DILexicalBlock(scope: !7934, file: !3, line: 750, column: 3)
!7939 = !DILocation(line: 752, column: 8, scope: !7938)
!7940 = !DILocation(line: 752, column: 11, scope: !7938)
!7941 = !DILocation(line: 0, scope: !7938)
!7942 = !DILocation(line: 750, column: 3, scope: !7934)
!7943 = !DILocalVariable(name: "scalar_stmt", scope: !7944, file: !3, line: 755, type: !7)
!7944 = distinct !DILexicalBlock(scope: !7938, file: !3, line: 754, column: 5)
!7945 = !DILocation(line: 755, column: 14, scope: !7944)
!7946 = !DILocation(line: 755, column: 28, scope: !7944)
!7947 = !DILocation(line: 757, column: 11, scope: !7948)
!7948 = distinct !DILexicalBlock(scope: !7944, file: !3, line: 757, column: 11)
!7949 = !DILocation(line: 757, column: 63, scope: !7948)
!7950 = !DILocation(line: 757, column: 60, scope: !7948)
!7951 = !DILocation(line: 757, column: 11, scope: !7944)
!7952 = !DILocation(line: 759, column: 15, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7954, file: !3, line: 759, column: 15)
!7954 = distinct !DILexicalBlock(scope: !7948, file: !3, line: 758, column: 9)
!7955 = !DILocation(line: 759, column: 15, scope: !7954)
!7956 = !DILocation(line: 761, column: 24, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 760, column: 13)
!7958 = !DILocation(line: 761, column: 15, scope: !7957)
!7959 = !DILocation(line: 763, column: 34, scope: !7957)
!7960 = !DILocation(line: 763, column: 45, scope: !7957)
!7961 = !DILocation(line: 763, column: 15, scope: !7957)
!7962 = !DILocation(line: 764, column: 13, scope: !7957)
!7963 = !DILocation(line: 766, column: 17, scope: !7954)
!7964 = !DILocation(line: 766, column: 11, scope: !7954)
!7965 = !DILocation(line: 767, column: 11, scope: !7954)
!7966 = !DILocation(line: 770, column: 26, scope: !7944)
!7967 = !DILocation(line: 770, column: 7, scope: !7944)
!7968 = !DILocation(line: 770, column: 17, scope: !7944)
!7969 = !DILocation(line: 770, column: 24, scope: !7944)
!7970 = !DILocation(line: 771, column: 5, scope: !7944)
!7971 = !DILocation(line: 753, column: 13, scope: !7938)
!7972 = !DILocation(line: 753, column: 10, scope: !7938)
!7973 = !DILocation(line: 753, column: 26, scope: !7938)
!7974 = !DILocation(line: 750, column: 3, scope: !7938)
!7975 = distinct !{!7975, !7942, !7976}
!7976 = !DILocation(line: 771, column: 5, scope: !7934)
!7977 = !DILocation(line: 773, column: 18, scope: !7899)
!7978 = !DILocation(line: 773, column: 16, scope: !7899)
!7979 = !DILocation(line: 774, column: 10, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7899, file: !3, line: 774, column: 3)
!7981 = !DILocation(line: 774, column: 8, scope: !7980)
!7982 = !DILocation(line: 774, column: 15, scope: !7983)
!7983 = distinct !DILexicalBlock(scope: !7980, file: !3, line: 774, column: 3)
!7984 = !DILocation(line: 774, column: 19, scope: !7983)
!7985 = !DILocation(line: 774, column: 17, scope: !7983)
!7986 = !DILocation(line: 774, column: 3, scope: !7980)
!7987 = !DILocation(line: 775, column: 6, scope: !7983)
!7988 = !DILocation(line: 774, column: 32, scope: !7983)
!7989 = !DILocation(line: 774, column: 3, scope: !7983)
!7990 = distinct !{!7990, !7986, !7991}
!7991 = !DILocation(line: 775, column: 6, scope: !7980)
!7992 = !DILocation(line: 777, column: 3, scope: !7899)
!7993 = !DILocation(line: 778, column: 35, scope: !7899)
!7994 = !DILocation(line: 778, column: 3, scope: !7899)
!7995 = !DILocation(line: 778, column: 33, scope: !7899)
!7996 = !DILocation(line: 779, column: 9, scope: !7899)
!7997 = !DILocation(line: 779, column: 3, scope: !7899)
!7998 = !DILocation(line: 781, column: 38, scope: !7999)
!7999 = distinct !DILexicalBlock(scope: !7899, file: !3, line: 781, column: 7)
!8000 = !DILocation(line: 782, column: 38, scope: !7999)
!8001 = !DILocation(line: 783, column: 38, scope: !7999)
!8002 = !DILocation(line: 781, column: 8, scope: !7999)
!8003 = !DILocation(line: 781, column: 7, scope: !7899)
!8004 = !DILocation(line: 784, column: 5, scope: !7999)
!8005 = !DILocation(line: 786, column: 3, scope: !7899)
!8006 = !DILocation(line: 787, column: 1, scope: !7899)
!8007 = distinct !DISubprogram(name: "VEC_slp_tree_base_index", scope: !1757, file: !1757, line: 118, type: !8008, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8008 = !DISubroutineType(types: !8009)
!8009 = !{!3726, !5838, !17}
!8010 = !DILocalVariable(name: "vec_", arg: 1, scope: !8007, file: !1757, line: 118, type: !5838)
!8011 = !DILocation(line: 118, column: 1, scope: !8007)
!8012 = !DILocalVariable(name: "ix_", arg: 2, scope: !8007, file: !1757, line: 118, type: !17)
!8013 = !DILocation(line: 0, scope: !8007)
!8014 = distinct !DISubprogram(name: "get_earlier_stmt", scope: !1757, file: !1757, line: 649, type: !8015, scopeLine: 650, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8015 = !DISubroutineType(types: !8016)
!8016 = !{!7, !7, !7}
!8017 = !DILocalVariable(name: "stmt1", arg: 1, scope: !8014, file: !1757, line: 649, type: !7)
!8018 = !DILocation(line: 649, column: 26, scope: !8014)
!8019 = !DILocalVariable(name: "stmt2", arg: 2, scope: !8014, file: !1757, line: 649, type: !7)
!8020 = !DILocation(line: 649, column: 40, scope: !8014)
!8021 = !DILocalVariable(name: "uid1", scope: !8014, file: !1757, line: 651, type: !17)
!8022 = !DILocation(line: 651, column: 16, scope: !8014)
!8023 = !DILocalVariable(name: "uid2", scope: !8014, file: !1757, line: 651, type: !17)
!8024 = !DILocation(line: 651, column: 22, scope: !8014)
!8025 = !DILocation(line: 653, column: 7, scope: !8026)
!8026 = distinct !DILexicalBlock(scope: !8014, file: !1757, line: 653, column: 7)
!8027 = !DILocation(line: 653, column: 13, scope: !8026)
!8028 = !DILocation(line: 653, column: 7, scope: !8014)
!8029 = !DILocation(line: 654, column: 12, scope: !8026)
!8030 = !DILocation(line: 654, column: 5, scope: !8026)
!8031 = !DILocation(line: 656, column: 7, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !8014, file: !1757, line: 656, column: 7)
!8033 = !DILocation(line: 656, column: 13, scope: !8032)
!8034 = !DILocation(line: 656, column: 7, scope: !8014)
!8035 = !DILocation(line: 657, column: 12, scope: !8032)
!8036 = !DILocation(line: 657, column: 5, scope: !8032)
!8037 = !DILocation(line: 659, column: 22, scope: !8014)
!8038 = !DILocation(line: 659, column: 10, scope: !8014)
!8039 = !DILocation(line: 659, column: 8, scope: !8014)
!8040 = !DILocation(line: 660, column: 22, scope: !8014)
!8041 = !DILocation(line: 660, column: 10, scope: !8014)
!8042 = !DILocation(line: 660, column: 8, scope: !8014)
!8043 = !DILocation(line: 662, column: 7, scope: !8044)
!8044 = distinct !DILexicalBlock(scope: !8014, file: !1757, line: 662, column: 7)
!8045 = !DILocation(line: 662, column: 12, scope: !8044)
!8046 = !DILocation(line: 662, column: 17, scope: !8044)
!8047 = !DILocation(line: 662, column: 20, scope: !8044)
!8048 = !DILocation(line: 662, column: 25, scope: !8044)
!8049 = !DILocation(line: 662, column: 7, scope: !8014)
!8050 = !DILocation(line: 663, column: 5, scope: !8044)
!8051 = !DILocation(line: 665, column: 3, scope: !8014)
!8052 = !DILocation(line: 666, column: 3, scope: !8014)
!8053 = !DILocation(line: 668, column: 7, scope: !8054)
!8054 = distinct !DILexicalBlock(scope: !8014, file: !1757, line: 668, column: 7)
!8055 = !DILocation(line: 668, column: 14, scope: !8054)
!8056 = !DILocation(line: 668, column: 12, scope: !8054)
!8057 = !DILocation(line: 668, column: 7, scope: !8014)
!8058 = !DILocation(line: 669, column: 12, scope: !8054)
!8059 = !DILocation(line: 669, column: 5, scope: !8054)
!8060 = !DILocation(line: 671, column: 12, scope: !8054)
!8061 = !DILocation(line: 671, column: 5, scope: !8054)
!8062 = !DILocation(line: 672, column: 1, scope: !8014)
!8063 = distinct !DISubprogram(name: "gimple_uid", scope: !11, file: !11, line: 1265, type: !7704, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8064 = !DILocalVariable(name: "g", arg: 1, scope: !8063, file: !11, line: 1265, type: !4104)
!8065 = !DILocation(line: 1265, column: 26, scope: !8063)
!8066 = !DILocation(line: 1267, column: 10, scope: !8063)
!8067 = !DILocation(line: 1267, column: 13, scope: !8063)
!8068 = !DILocation(line: 1267, column: 20, scope: !8063)
!8069 = !DILocation(line: 1267, column: 3, scope: !8063)
!8070 = distinct !DISubprogram(name: "VEC_vec_void_p_base_length", scope: !1757, file: !1757, line: 614, type: !8071, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8071 = !DISubroutineType(types: !8072)
!8072 = !{!17, !8073}
!8073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8074, size: 64)
!8074 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3927)
!8075 = !DILocalVariable(name: "vec_", arg: 1, scope: !8070, file: !1757, line: 614, type: !8073)
!8076 = !DILocation(line: 614, column: 1, scope: !8070)
!8077 = distinct !DISubprogram(name: "VEC_slp_instance_heap_reserve", scope: !1757, file: !1757, line: 153, type: !8078, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8078 = !DISubroutineType(types: !8079)
!8079 = !{!100, !7245, !100}
!8080 = !DILocalVariable(name: "vec_", arg: 1, scope: !8077, file: !1757, line: 153, type: !7245)
!8081 = !DILocation(line: 153, column: 1, scope: !8077)
!8082 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8077, file: !1757, line: 153, type: !100)
!8083 = !DILocalVariable(name: "extend", scope: !8077, file: !1757, line: 153, type: !100)
!8084 = !DILocation(line: 153, column: 1, scope: !8085)
!8085 = distinct !DILexicalBlock(scope: !8077, file: !1757, line: 153, column: 1)
!8086 = distinct !DISubprogram(name: "VEC_slp_instance_base_quick_push", scope: !1757, file: !1757, line: 152, type: !8087, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8087 = !DISubroutineType(types: !8088)
!8088 = !{!4534, !8089, !3777}
!8089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3770, size: 64)
!8090 = !DILocalVariable(name: "vec_", arg: 1, scope: !8086, file: !1757, line: 152, type: !8089)
!8091 = !DILocation(line: 152, column: 1, scope: !8086)
!8092 = !DILocalVariable(name: "obj_", arg: 2, scope: !8086, file: !1757, line: 152, type: !3777)
!8093 = !DILocalVariable(name: "slot_", scope: !8086, file: !1757, line: 152, type: !4534)
!8094 = distinct !DISubprogram(name: "VEC_slp_instance_base_space", scope: !1757, file: !1757, line: 152, type: !8095, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8095 = !DISubroutineType(types: !8096)
!8096 = !{!100, !8089, !100}
!8097 = !DILocalVariable(name: "vec_", arg: 1, scope: !8094, file: !1757, line: 152, type: !8089)
!8098 = !DILocation(line: 152, column: 1, scope: !8094)
!8099 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8094, file: !1757, line: 152, type: !100)
!8100 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !6367, file: !6367, line: 1058, type: !8101, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8101 = !DISubroutineType(types: !8102)
!8102 = !{!7, !8103, !326}
!8103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4628, size: 64)
!8104 = !DILocalVariable(name: "imm", arg: 1, scope: !8100, file: !6367, line: 1058, type: !8103)
!8105 = !DILocation(line: 1058, column: 39, scope: !8100)
!8106 = !DILocalVariable(name: "var", arg: 2, scope: !8100, file: !6367, line: 1058, type: !326)
!8107 = !DILocation(line: 1058, column: 49, scope: !8100)
!8108 = !DILocation(line: 1060, column: 18, scope: !8100)
!8109 = !DILocation(line: 1060, column: 3, scope: !8100)
!8110 = !DILocation(line: 1060, column: 8, scope: !8100)
!8111 = !DILocation(line: 1060, column: 14, scope: !8100)
!8112 = !DILocation(line: 1061, column: 18, scope: !8100)
!8113 = !DILocation(line: 1061, column: 23, scope: !8100)
!8114 = !DILocation(line: 1061, column: 30, scope: !8100)
!8115 = !DILocation(line: 1061, column: 3, scope: !8100)
!8116 = !DILocation(line: 1061, column: 8, scope: !8100)
!8117 = !DILocation(line: 1061, column: 16, scope: !8100)
!8118 = !DILocation(line: 1062, column: 3, scope: !8100)
!8119 = !DILocation(line: 1062, column: 8, scope: !8100)
!8120 = !DILocation(line: 1062, column: 22, scope: !8100)
!8121 = !DILocation(line: 1067, column: 3, scope: !8100)
!8122 = !DILocation(line: 1067, column: 8, scope: !8100)
!8123 = !DILocation(line: 1067, column: 18, scope: !8100)
!8124 = !DILocation(line: 1067, column: 23, scope: !8100)
!8125 = !DILocation(line: 1068, column: 3, scope: !8100)
!8126 = !DILocation(line: 1068, column: 8, scope: !8100)
!8127 = !DILocation(line: 1068, column: 18, scope: !8100)
!8128 = !DILocation(line: 1068, column: 23, scope: !8100)
!8129 = !DILocation(line: 1069, column: 3, scope: !8100)
!8130 = !DILocation(line: 1069, column: 8, scope: !8100)
!8131 = !DILocation(line: 1069, column: 18, scope: !8100)
!8132 = !DILocation(line: 1069, column: 22, scope: !8100)
!8133 = !DILocation(line: 1069, column: 27, scope: !8100)
!8134 = !DILocation(line: 1070, column: 3, scope: !8100)
!8135 = !DILocation(line: 1070, column: 8, scope: !8100)
!8136 = !DILocation(line: 1070, column: 18, scope: !8100)
!8137 = !DILocation(line: 1070, column: 22, scope: !8100)
!8138 = !DILocation(line: 1072, column: 27, scope: !8139)
!8139 = distinct !DILexicalBlock(scope: !8100, file: !6367, line: 1072, column: 7)
!8140 = !DILocation(line: 1072, column: 7, scope: !8139)
!8141 = !DILocation(line: 1072, column: 7, scope: !8100)
!8142 = !DILocation(line: 1073, column: 5, scope: !8139)
!8143 = !DILocation(line: 1075, column: 25, scope: !8100)
!8144 = !DILocation(line: 1075, column: 30, scope: !8100)
!8145 = !DILocation(line: 1075, column: 39, scope: !8100)
!8146 = !DILocation(line: 1075, column: 3, scope: !8100)
!8147 = !DILocation(line: 1077, column: 10, scope: !8100)
!8148 = !DILocation(line: 1077, column: 3, scope: !8100)
!8149 = !DILocation(line: 1078, column: 1, scope: !8100)
!8150 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !6367, file: !6367, line: 969, type: !8151, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8151 = !DISubroutineType(types: !8152)
!8152 = !{!6, !8153}
!8153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8154, size: 64)
!8154 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4628)
!8155 = !DILocalVariable(name: "imm", arg: 1, scope: !8150, file: !6367, line: 969, type: !8153)
!8156 = !DILocation(line: 969, column: 45, scope: !8150)
!8157 = !DILocation(line: 971, column: 11, scope: !8150)
!8158 = !DILocation(line: 971, column: 16, scope: !8150)
!8159 = !DILocation(line: 971, column: 27, scope: !8150)
!8160 = !DILocation(line: 971, column: 32, scope: !8150)
!8161 = !DILocation(line: 971, column: 24, scope: !8150)
!8162 = !DILocation(line: 971, column: 10, scope: !8150)
!8163 = !DILocation(line: 971, column: 3, scope: !8150)
!8164 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !6367, file: !6367, line: 1083, type: !8165, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8165 = !DISubroutineType(types: !8166)
!8166 = !{!7, !8103}
!8167 = !DILocalVariable(name: "imm", arg: 1, scope: !8164, file: !6367, line: 1083, type: !8103)
!8168 = !DILocation(line: 1083, column: 38, scope: !8164)
!8169 = !DILocation(line: 1085, column: 18, scope: !8164)
!8170 = !DILocation(line: 1085, column: 23, scope: !8164)
!8171 = !DILocation(line: 1085, column: 33, scope: !8164)
!8172 = !DILocation(line: 1085, column: 3, scope: !8164)
!8173 = !DILocation(line: 1085, column: 8, scope: !8164)
!8174 = !DILocation(line: 1085, column: 16, scope: !8164)
!8175 = !DILocation(line: 1086, column: 27, scope: !8176)
!8176 = distinct !DILexicalBlock(scope: !8164, file: !6367, line: 1086, column: 7)
!8177 = !DILocation(line: 1086, column: 7, scope: !8176)
!8178 = !DILocation(line: 1086, column: 7, scope: !8164)
!8179 = !DILocation(line: 1088, column: 11, scope: !8180)
!8180 = distinct !DILexicalBlock(scope: !8181, file: !6367, line: 1088, column: 11)
!8181 = distinct !DILexicalBlock(scope: !8176, file: !6367, line: 1087, column: 5)
!8182 = !DILocation(line: 1088, column: 16, scope: !8180)
!8183 = !DILocation(line: 1088, column: 26, scope: !8180)
!8184 = !DILocation(line: 1088, column: 31, scope: !8180)
!8185 = !DILocation(line: 1088, column: 11, scope: !8181)
!8186 = !DILocation(line: 1089, column: 19, scope: !8180)
!8187 = !DILocation(line: 1089, column: 24, scope: !8180)
!8188 = !DILocation(line: 1089, column: 2, scope: !8180)
!8189 = !DILocation(line: 1090, column: 7, scope: !8181)
!8190 = !DILocation(line: 1093, column: 25, scope: !8164)
!8191 = !DILocation(line: 1093, column: 30, scope: !8164)
!8192 = !DILocation(line: 1093, column: 39, scope: !8164)
!8193 = !DILocation(line: 1093, column: 3, scope: !8164)
!8194 = !DILocation(line: 1094, column: 10, scope: !8164)
!8195 = !DILocation(line: 1094, column: 3, scope: !8164)
!8196 = !DILocation(line: 1095, column: 1, scope: !8164)
!8197 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !6367, file: !6367, line: 1018, type: !8198, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8198 = !DISubroutineType(types: !8199)
!8199 = !{null, !3778, !8103}
!8200 = !DILocalVariable(name: "head", arg: 1, scope: !8197, file: !6367, line: 1018, type: !3778)
!8201 = !DILocation(line: 1018, column: 37, scope: !8197)
!8202 = !DILocalVariable(name: "imm", arg: 2, scope: !8197, file: !6367, line: 1018, type: !8103)
!8203 = !DILocation(line: 1018, column: 61, scope: !8197)
!8204 = !DILocalVariable(name: "use_p", scope: !8197, file: !6367, line: 1020, type: !3778)
!8205 = !DILocation(line: 1020, column: 17, scope: !8197)
!8206 = !DILocalVariable(name: "last_p", scope: !8197, file: !6367, line: 1021, type: !3778)
!8207 = !DILocation(line: 1021, column: 17, scope: !8197)
!8208 = !DILocation(line: 1021, column: 26, scope: !8197)
!8209 = !DILocalVariable(name: "head_stmt", scope: !8197, file: !6367, line: 1022, type: !7)
!8210 = !DILocation(line: 1022, column: 10, scope: !8197)
!8211 = !DILocation(line: 1022, column: 22, scope: !8197)
!8212 = !DILocalVariable(name: "use", scope: !8197, file: !6367, line: 1023, type: !326)
!8213 = !DILocation(line: 1023, column: 8, scope: !8197)
!8214 = !DILocation(line: 1023, column: 14, scope: !8197)
!8215 = !DILocalVariable(name: "op_iter", scope: !8197, file: !6367, line: 1024, type: !8216)
!8216 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !732, line: 140, baseType: !8217)
!8217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !732, line: 131, size: 320, elements: !8218)
!8218 = !{!8219, !8220, !8221, !8223, !8225, !8226, !8227}
!8219 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !8217, file: !732, line: 133, baseType: !6, size: 8)
!8220 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !8217, file: !732, line: 134, baseType: !3697, size: 32, offset: 32)
!8221 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !8217, file: !732, line: 135, baseType: !8222, size: 64, offset: 64)
!8222 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !732, line: 42, baseType: !744)
!8223 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !8217, file: !732, line: 136, baseType: !8224, size: 64, offset: 128)
!8224 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !732, line: 50, baseType: !751)
!8225 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !8217, file: !732, line: 137, baseType: !100, size: 32, offset: 192)
!8226 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !8217, file: !732, line: 138, baseType: !100, size: 32, offset: 224)
!8227 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !8217, file: !732, line: 139, baseType: !7, size: 64, offset: 256)
!8228 = !DILocation(line: 1024, column: 15, scope: !8197)
!8229 = !DILocalVariable(name: "flag", scope: !8197, file: !6367, line: 1025, type: !100)
!8230 = !DILocation(line: 1025, column: 7, scope: !8197)
!8231 = !DILocation(line: 1028, column: 26, scope: !8197)
!8232 = !DILocation(line: 1028, column: 11, scope: !8197)
!8233 = !DILocation(line: 1028, column: 8, scope: !8197)
!8234 = !DILocation(line: 1030, column: 20, scope: !8235)
!8235 = distinct !DILexicalBlock(scope: !8197, file: !6367, line: 1030, column: 7)
!8236 = !DILocation(line: 1030, column: 7, scope: !8235)
!8237 = !DILocation(line: 1030, column: 31, scope: !8235)
!8238 = !DILocation(line: 1030, column: 7, scope: !8197)
!8239 = !DILocation(line: 1032, column: 7, scope: !8240)
!8240 = distinct !DILexicalBlock(scope: !8241, file: !6367, line: 1032, column: 7)
!8241 = distinct !DILexicalBlock(scope: !8235, file: !6367, line: 1031, column: 5)
!8242 = !DILocation(line: 1032, column: 7, scope: !8243)
!8243 = distinct !DILexicalBlock(scope: !8240, file: !6367, line: 1032, column: 7)
!8244 = !DILocation(line: 1033, column: 6, scope: !8245)
!8245 = distinct !DILexicalBlock(scope: !8243, file: !6367, line: 1033, column: 6)
!8246 = !DILocation(line: 1033, column: 30, scope: !8245)
!8247 = !DILocation(line: 1033, column: 27, scope: !8245)
!8248 = !DILocation(line: 1033, column: 6, scope: !8243)
!8249 = !DILocation(line: 1034, column: 34, scope: !8245)
!8250 = !DILocation(line: 1034, column: 41, scope: !8245)
!8251 = !DILocation(line: 1034, column: 47, scope: !8245)
!8252 = !DILocation(line: 1034, column: 13, scope: !8245)
!8253 = !DILocation(line: 1034, column: 11, scope: !8245)
!8254 = !DILocation(line: 1034, column: 4, scope: !8245)
!8255 = distinct !{!8255, !8239, !8256}
!8256 = !DILocation(line: 1034, column: 53, scope: !8240)
!8257 = !DILocation(line: 1035, column: 5, scope: !8241)
!8258 = !DILocation(line: 1038, column: 11, scope: !8259)
!8259 = distinct !DILexicalBlock(scope: !8260, file: !6367, line: 1038, column: 11)
!8260 = distinct !DILexicalBlock(scope: !8235, file: !6367, line: 1037, column: 5)
!8261 = !DILocation(line: 1038, column: 16, scope: !8259)
!8262 = !DILocation(line: 1038, column: 11, scope: !8260)
!8263 = !DILocation(line: 1040, column: 4, scope: !8264)
!8264 = distinct !DILexicalBlock(scope: !8265, file: !6367, line: 1040, column: 4)
!8265 = distinct !DILexicalBlock(scope: !8259, file: !6367, line: 1039, column: 2)
!8266 = !DILocation(line: 1040, column: 4, scope: !8267)
!8267 = distinct !DILexicalBlock(scope: !8264, file: !6367, line: 1040, column: 4)
!8268 = !DILocation(line: 1041, column: 10, scope: !8269)
!8269 = distinct !DILexicalBlock(scope: !8267, file: !6367, line: 1041, column: 10)
!8270 = !DILocation(line: 1041, column: 34, scope: !8269)
!8271 = !DILocation(line: 1041, column: 31, scope: !8269)
!8272 = !DILocation(line: 1041, column: 10, scope: !8267)
!8273 = !DILocation(line: 1042, column: 38, scope: !8269)
!8274 = !DILocation(line: 1042, column: 45, scope: !8269)
!8275 = !DILocation(line: 1042, column: 51, scope: !8269)
!8276 = !DILocation(line: 1042, column: 17, scope: !8269)
!8277 = !DILocation(line: 1042, column: 15, scope: !8269)
!8278 = !DILocation(line: 1042, column: 8, scope: !8269)
!8279 = distinct !{!8279, !8263, !8280}
!8280 = !DILocation(line: 1042, column: 57, scope: !8264)
!8281 = !DILocation(line: 1043, column: 2, scope: !8265)
!8282 = !DILocation(line: 1044, column: 41, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8259, file: !6367, line: 1044, column: 16)
!8284 = !DILocation(line: 1044, column: 25, scope: !8283)
!8285 = !DILocation(line: 1044, column: 23, scope: !8283)
!8286 = !DILocation(line: 1044, column: 53, scope: !8283)
!8287 = !DILocation(line: 1044, column: 16, scope: !8259)
!8288 = !DILocation(line: 1046, column: 8, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8290, file: !6367, line: 1046, column: 8)
!8290 = distinct !DILexicalBlock(scope: !8283, file: !6367, line: 1045, column: 2)
!8291 = !DILocation(line: 1046, column: 32, scope: !8289)
!8292 = !DILocation(line: 1046, column: 29, scope: !8289)
!8293 = !DILocation(line: 1046, column: 8, scope: !8290)
!8294 = !DILocation(line: 1047, column: 36, scope: !8289)
!8295 = !DILocation(line: 1047, column: 43, scope: !8289)
!8296 = !DILocation(line: 1047, column: 49, scope: !8289)
!8297 = !DILocation(line: 1047, column: 15, scope: !8289)
!8298 = !DILocation(line: 1047, column: 13, scope: !8289)
!8299 = !DILocation(line: 1047, column: 6, scope: !8289)
!8300 = !DILocation(line: 1048, column: 2, scope: !8290)
!8301 = !DILocation(line: 1051, column: 7, scope: !8302)
!8302 = distinct !DILexicalBlock(scope: !8197, file: !6367, line: 1051, column: 7)
!8303 = !DILocation(line: 1051, column: 12, scope: !8302)
!8304 = !DILocation(line: 1051, column: 22, scope: !8302)
!8305 = !DILocation(line: 1051, column: 27, scope: !8302)
!8306 = !DILocation(line: 1051, column: 7, scope: !8197)
!8307 = !DILocation(line: 1052, column: 22, scope: !8302)
!8308 = !DILocation(line: 1052, column: 27, scope: !8302)
!8309 = !DILocation(line: 1052, column: 5, scope: !8302)
!8310 = !DILocation(line: 1053, column: 27, scope: !8197)
!8311 = !DILocation(line: 1053, column: 32, scope: !8197)
!8312 = !DILocation(line: 1053, column: 44, scope: !8197)
!8313 = !DILocation(line: 1053, column: 3, scope: !8197)
!8314 = !DILocation(line: 1054, column: 1, scope: !8197)
!8315 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !6367, file: !6367, line: 427, type: !8316, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8316 = !DISubroutineType(types: !8317)
!8317 = !{!326, !3778}
!8318 = !DILocalVariable(name: "use", arg: 1, scope: !8315, file: !6367, line: 427, type: !3778)
!8319 = !DILocation(line: 427, column: 33, scope: !8315)
!8320 = !DILocation(line: 429, column: 12, scope: !8315)
!8321 = !DILocation(line: 429, column: 17, scope: !8315)
!8322 = !DILocation(line: 429, column: 10, scope: !8315)
!8323 = !DILocation(line: 429, column: 3, scope: !8315)
!8324 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !6367, file: !6367, line: 910, type: !8325, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8325 = !DISubroutineType(types: !8326)
!8326 = !{!3778, !8327, !7, !100}
!8327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8216, size: 64)
!8328 = !DILocalVariable(name: "ptr", arg: 1, scope: !8324, file: !6367, line: 910, type: !8327)
!8329 = !DILocation(line: 910, column: 35, scope: !8324)
!8330 = !DILocalVariable(name: "phi", arg: 2, scope: !8324, file: !6367, line: 910, type: !7)
!8331 = !DILocation(line: 910, column: 47, scope: !8324)
!8332 = !DILocalVariable(name: "flags", arg: 3, scope: !8324, file: !6367, line: 910, type: !100)
!8333 = !DILocation(line: 910, column: 56, scope: !8324)
!8334 = !DILocalVariable(name: "phi_def", scope: !8324, file: !6367, line: 912, type: !326)
!8335 = !DILocation(line: 912, column: 8, scope: !8324)
!8336 = !DILocation(line: 912, column: 37, scope: !8324)
!8337 = !DILocation(line: 912, column: 18, scope: !8324)
!8338 = !DILocalVariable(name: "comp", scope: !8324, file: !6367, line: 913, type: !100)
!8339 = !DILocation(line: 913, column: 7, scope: !8324)
!8340 = !DILocation(line: 915, column: 28, scope: !8324)
!8341 = !DILocation(line: 915, column: 3, scope: !8324)
!8342 = !DILocation(line: 916, column: 3, scope: !8324)
!8343 = !DILocation(line: 916, column: 8, scope: !8324)
!8344 = !DILocation(line: 916, column: 13, scope: !8324)
!8345 = !DILocation(line: 918, column: 3, scope: !8324)
!8346 = !DILocation(line: 920, column: 26, scope: !8324)
!8347 = !DILocation(line: 920, column: 11, scope: !8324)
!8348 = !DILocation(line: 920, column: 8, scope: !8324)
!8349 = !DILocation(line: 923, column: 8, scope: !8350)
!8350 = distinct !DILexicalBlock(scope: !8324, file: !6367, line: 923, column: 7)
!8351 = !DILocation(line: 923, column: 16, scope: !8350)
!8352 = !DILocation(line: 923, column: 14, scope: !8350)
!8353 = !DILocation(line: 923, column: 22, scope: !8350)
!8354 = !DILocation(line: 923, column: 7, scope: !8324)
!8355 = !DILocation(line: 925, column: 7, scope: !8356)
!8356 = distinct !DILexicalBlock(scope: !8350, file: !6367, line: 924, column: 5)
!8357 = !DILocation(line: 925, column: 12, scope: !8356)
!8358 = !DILocation(line: 925, column: 17, scope: !8356)
!8359 = !DILocation(line: 926, column: 7, scope: !8356)
!8360 = !DILocation(line: 929, column: 19, scope: !8324)
!8361 = !DILocation(line: 929, column: 3, scope: !8324)
!8362 = !DILocation(line: 929, column: 8, scope: !8324)
!8363 = !DILocation(line: 929, column: 17, scope: !8324)
!8364 = !DILocation(line: 930, column: 39, scope: !8324)
!8365 = !DILocation(line: 930, column: 18, scope: !8324)
!8366 = !DILocation(line: 930, column: 3, scope: !8324)
!8367 = !DILocation(line: 930, column: 8, scope: !8324)
!8368 = !DILocation(line: 930, column: 16, scope: !8324)
!8369 = !DILocation(line: 931, column: 3, scope: !8324)
!8370 = !DILocation(line: 931, column: 8, scope: !8324)
!8371 = !DILocation(line: 931, column: 18, scope: !8324)
!8372 = !DILocation(line: 932, column: 28, scope: !8324)
!8373 = !DILocation(line: 932, column: 10, scope: !8324)
!8374 = !DILocation(line: 932, column: 3, scope: !8324)
!8375 = !DILocation(line: 933, column: 1, scope: !8324)
!8376 = distinct !DISubprogram(name: "op_iter_done", scope: !6367, file: !6367, line: 652, type: !8377, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8377 = !DISubroutineType(types: !8378)
!8378 = !{!6, !8379}
!8379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8380, size: 64)
!8380 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8216)
!8381 = !DILocalVariable(name: "ptr", arg: 1, scope: !8376, file: !6367, line: 652, type: !8379)
!8382 = !DILocation(line: 652, column: 34, scope: !8376)
!8383 = !DILocation(line: 654, column: 10, scope: !8376)
!8384 = !DILocation(line: 654, column: 15, scope: !8376)
!8385 = !DILocation(line: 654, column: 3, scope: !8376)
!8386 = distinct !DISubprogram(name: "move_use_after_head", scope: !6367, file: !6367, line: 990, type: !8387, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8387 = !DISubroutineType(types: !8388)
!8388 = !{!3778, !3778, !3778, !3778}
!8389 = !DILocalVariable(name: "use_p", arg: 1, scope: !8386, file: !6367, line: 990, type: !3778)
!8390 = !DILocation(line: 990, column: 36, scope: !8386)
!8391 = !DILocalVariable(name: "head", arg: 2, scope: !8386, file: !6367, line: 990, type: !3778)
!8392 = !DILocation(line: 990, column: 57, scope: !8386)
!8393 = !DILocalVariable(name: "last_p", arg: 3, scope: !8386, file: !6367, line: 991, type: !3778)
!8394 = !DILocation(line: 991, column: 23, scope: !8386)
!8395 = !DILocation(line: 997, column: 7, scope: !8396)
!8396 = distinct !DILexicalBlock(scope: !8386, file: !6367, line: 997, column: 7)
!8397 = !DILocation(line: 997, column: 16, scope: !8396)
!8398 = !DILocation(line: 997, column: 13, scope: !8396)
!8399 = !DILocation(line: 997, column: 7, scope: !8386)
!8400 = !DILocation(line: 1000, column: 11, scope: !8401)
!8401 = distinct !DILexicalBlock(scope: !8402, file: !6367, line: 1000, column: 11)
!8402 = distinct !DILexicalBlock(scope: !8396, file: !6367, line: 998, column: 5)
!8403 = !DILocation(line: 1000, column: 19, scope: !8401)
!8404 = !DILocation(line: 1000, column: 27, scope: !8401)
!8405 = !DILocation(line: 1000, column: 24, scope: !8401)
!8406 = !DILocation(line: 1000, column: 11, scope: !8402)
!8407 = !DILocation(line: 1001, column: 11, scope: !8401)
!8408 = !DILocation(line: 1001, column: 9, scope: !8401)
!8409 = !DILocation(line: 1001, column: 2, scope: !8401)
!8410 = !DILocation(line: 1005, column: 20, scope: !8411)
!8411 = distinct !DILexicalBlock(scope: !8401, file: !6367, line: 1003, column: 2)
!8412 = !DILocation(line: 1005, column: 4, scope: !8411)
!8413 = !DILocation(line: 1006, column: 26, scope: !8411)
!8414 = !DILocation(line: 1006, column: 33, scope: !8411)
!8415 = !DILocation(line: 1006, column: 4, scope: !8411)
!8416 = !DILocation(line: 1007, column: 13, scope: !8411)
!8417 = !DILocation(line: 1007, column: 11, scope: !8411)
!8418 = !DILocation(line: 1009, column: 5, scope: !8402)
!8419 = !DILocation(line: 1010, column: 10, scope: !8386)
!8420 = !DILocation(line: 1010, column: 3, scope: !8386)
!8421 = distinct !DISubprogram(name: "op_iter_next_use", scope: !6367, file: !6367, line: 659, type: !8422, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8422 = !DISubroutineType(types: !8423)
!8423 = !{!3778, !8327}
!8424 = !DILocalVariable(name: "ptr", arg: 1, scope: !8421, file: !6367, line: 659, type: !8327)
!8425 = !DILocation(line: 659, column: 32, scope: !8421)
!8426 = !DILocalVariable(name: "use_p", scope: !8421, file: !6367, line: 661, type: !3778)
!8427 = !DILocation(line: 661, column: 17, scope: !8421)
!8428 = !DILocation(line: 665, column: 7, scope: !8429)
!8429 = distinct !DILexicalBlock(scope: !8421, file: !6367, line: 665, column: 7)
!8430 = !DILocation(line: 665, column: 12, scope: !8429)
!8431 = !DILocation(line: 665, column: 7, scope: !8421)
!8432 = !DILocation(line: 667, column: 15, scope: !8433)
!8433 = distinct !DILexicalBlock(scope: !8429, file: !6367, line: 666, column: 5)
!8434 = !DILocation(line: 667, column: 13, scope: !8433)
!8435 = !DILocation(line: 668, column: 19, scope: !8433)
!8436 = !DILocation(line: 668, column: 24, scope: !8433)
!8437 = !DILocation(line: 668, column: 30, scope: !8433)
!8438 = !DILocation(line: 668, column: 7, scope: !8433)
!8439 = !DILocation(line: 668, column: 12, scope: !8433)
!8440 = !DILocation(line: 668, column: 17, scope: !8433)
!8441 = !DILocation(line: 669, column: 14, scope: !8433)
!8442 = !DILocation(line: 669, column: 7, scope: !8433)
!8443 = !DILocation(line: 671, column: 7, scope: !8444)
!8444 = distinct !DILexicalBlock(scope: !8421, file: !6367, line: 671, column: 7)
!8445 = !DILocation(line: 671, column: 12, scope: !8444)
!8446 = !DILocation(line: 671, column: 20, scope: !8444)
!8447 = !DILocation(line: 671, column: 25, scope: !8444)
!8448 = !DILocation(line: 671, column: 18, scope: !8444)
!8449 = !DILocation(line: 671, column: 7, scope: !8421)
!8450 = !DILocation(line: 673, column: 14, scope: !8451)
!8451 = distinct !DILexicalBlock(scope: !8444, file: !6367, line: 672, column: 5)
!8452 = !DILocation(line: 673, column: 7, scope: !8451)
!8453 = !DILocation(line: 675, column: 3, scope: !8421)
!8454 = !DILocation(line: 675, column: 8, scope: !8421)
!8455 = !DILocation(line: 675, column: 13, scope: !8421)
!8456 = !DILocation(line: 676, column: 3, scope: !8421)
!8457 = !DILocation(line: 677, column: 1, scope: !8421)
!8458 = distinct !DISubprogram(name: "op_iter_init_use", scope: !6367, file: !6367, line: 768, type: !8325, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8459 = !DILocalVariable(name: "ptr", arg: 1, scope: !8458, file: !6367, line: 768, type: !8327)
!8460 = !DILocation(line: 768, column: 32, scope: !8458)
!8461 = !DILocalVariable(name: "stmt", arg: 2, scope: !8458, file: !6367, line: 768, type: !7)
!8462 = !DILocation(line: 768, column: 44, scope: !8458)
!8463 = !DILocalVariable(name: "flags", arg: 3, scope: !8458, file: !6367, line: 768, type: !100)
!8464 = !DILocation(line: 768, column: 54, scope: !8458)
!8465 = !DILocation(line: 770, column: 3, scope: !8458)
!8466 = !DILocation(line: 772, column: 17, scope: !8458)
!8467 = !DILocation(line: 772, column: 22, scope: !8458)
!8468 = !DILocation(line: 772, column: 28, scope: !8458)
!8469 = !DILocation(line: 772, column: 3, scope: !8458)
!8470 = !DILocation(line: 773, column: 3, scope: !8458)
!8471 = !DILocation(line: 773, column: 8, scope: !8458)
!8472 = !DILocation(line: 773, column: 18, scope: !8458)
!8473 = !DILocation(line: 774, column: 28, scope: !8458)
!8474 = !DILocation(line: 774, column: 10, scope: !8458)
!8475 = !DILocation(line: 774, column: 3, scope: !8458)
!8476 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !11, file: !11, line: 1334, type: !8477, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8477 = !DISubroutineType(types: !8478)
!8478 = !{!3778, !4104}
!8479 = !DILocalVariable(name: "g", arg: 1, scope: !8476, file: !11, line: 1334, type: !4104)
!8480 = !DILocation(line: 1334, column: 30, scope: !8476)
!8481 = !DILocalVariable(name: "ops", scope: !8476, file: !11, line: 1336, type: !751)
!8482 = !DILocation(line: 1336, column: 24, scope: !8476)
!8483 = !DILocation(line: 1337, column: 28, scope: !8484)
!8484 = distinct !DILexicalBlock(scope: !8476, file: !11, line: 1337, column: 7)
!8485 = !DILocation(line: 1337, column: 8, scope: !8484)
!8486 = !DILocation(line: 1337, column: 7, scope: !8476)
!8487 = !DILocation(line: 1338, column: 5, scope: !8484)
!8488 = !DILocation(line: 1339, column: 9, scope: !8476)
!8489 = !DILocation(line: 1339, column: 12, scope: !8476)
!8490 = !DILocation(line: 1339, column: 18, scope: !8476)
!8491 = !DILocation(line: 1339, column: 25, scope: !8476)
!8492 = !DILocation(line: 1339, column: 7, scope: !8476)
!8493 = !DILocation(line: 1340, column: 7, scope: !8494)
!8494 = distinct !DILexicalBlock(scope: !8476, file: !11, line: 1340, column: 7)
!8495 = !DILocation(line: 1341, column: 7, scope: !8494)
!8496 = !DILocation(line: 1341, column: 10, scope: !8494)
!8497 = !DILocation(line: 1341, column: 28, scope: !8494)
!8498 = !DILocation(line: 1341, column: 36, scope: !8494)
!8499 = !DILocation(line: 1341, column: 39, scope: !8494)
!8500 = !DILocation(line: 1341, column: 49, scope: !8494)
!8501 = !DILocation(line: 1341, column: 32, scope: !8494)
!8502 = !DILocation(line: 1340, column: 7, scope: !8476)
!8503 = !DILocation(line: 1342, column: 12, scope: !8494)
!8504 = !DILocation(line: 1342, column: 5, scope: !8494)
!8505 = !DILocation(line: 1343, column: 3, scope: !8476)
!8506 = !DILocation(line: 1344, column: 1, scope: !8476)
!8507 = distinct !DISubprogram(name: "delink_imm_use", scope: !6367, file: !6367, line: 188, type: !8508, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8508 = !DISubroutineType(types: !8509)
!8509 = !{null, !3779}
!8510 = !DILocalVariable(name: "linknode", arg: 1, scope: !8507, file: !6367, line: 188, type: !3779)
!8511 = !DILocation(line: 188, column: 36, scope: !8507)
!8512 = !DILocation(line: 191, column: 7, scope: !8513)
!8513 = distinct !DILexicalBlock(scope: !8507, file: !6367, line: 191, column: 7)
!8514 = !DILocation(line: 191, column: 17, scope: !8513)
!8515 = !DILocation(line: 191, column: 22, scope: !8513)
!8516 = !DILocation(line: 191, column: 7, scope: !8507)
!8517 = !DILocation(line: 192, column: 5, scope: !8513)
!8518 = !DILocation(line: 194, column: 26, scope: !8507)
!8519 = !DILocation(line: 194, column: 36, scope: !8507)
!8520 = !DILocation(line: 194, column: 3, scope: !8507)
!8521 = !DILocation(line: 194, column: 13, scope: !8507)
!8522 = !DILocation(line: 194, column: 19, scope: !8507)
!8523 = !DILocation(line: 194, column: 24, scope: !8507)
!8524 = !DILocation(line: 195, column: 26, scope: !8507)
!8525 = !DILocation(line: 195, column: 36, scope: !8507)
!8526 = !DILocation(line: 195, column: 3, scope: !8507)
!8527 = !DILocation(line: 195, column: 13, scope: !8507)
!8528 = !DILocation(line: 195, column: 19, scope: !8507)
!8529 = !DILocation(line: 195, column: 24, scope: !8507)
!8530 = !DILocation(line: 196, column: 3, scope: !8507)
!8531 = !DILocation(line: 196, column: 13, scope: !8507)
!8532 = !DILocation(line: 196, column: 18, scope: !8507)
!8533 = !DILocation(line: 197, column: 3, scope: !8507)
!8534 = !DILocation(line: 197, column: 13, scope: !8507)
!8535 = !DILocation(line: 197, column: 18, scope: !8507)
!8536 = !DILocation(line: 198, column: 1, scope: !8507)
!8537 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !6367, file: !6367, line: 202, type: !8538, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8538 = !DISubroutineType(types: !8539)
!8539 = !{null, !3779, !3779}
!8540 = !DILocalVariable(name: "linknode", arg: 1, scope: !8537, file: !6367, line: 202, type: !3779)
!8541 = !DILocation(line: 202, column: 42, scope: !8537)
!8542 = !DILocalVariable(name: "list", arg: 2, scope: !8537, file: !6367, line: 202, type: !3779)
!8543 = !DILocation(line: 202, column: 71, scope: !8537)
!8544 = !DILocation(line: 206, column: 20, scope: !8537)
!8545 = !DILocation(line: 206, column: 3, scope: !8537)
!8546 = !DILocation(line: 206, column: 13, scope: !8537)
!8547 = !DILocation(line: 206, column: 18, scope: !8537)
!8548 = !DILocation(line: 207, column: 20, scope: !8537)
!8549 = !DILocation(line: 207, column: 26, scope: !8537)
!8550 = !DILocation(line: 207, column: 3, scope: !8537)
!8551 = !DILocation(line: 207, column: 13, scope: !8537)
!8552 = !DILocation(line: 207, column: 18, scope: !8537)
!8553 = !DILocation(line: 208, column: 22, scope: !8537)
!8554 = !DILocation(line: 208, column: 3, scope: !8537)
!8555 = !DILocation(line: 208, column: 9, scope: !8537)
!8556 = !DILocation(line: 208, column: 15, scope: !8537)
!8557 = !DILocation(line: 208, column: 20, scope: !8537)
!8558 = !DILocation(line: 209, column: 16, scope: !8537)
!8559 = !DILocation(line: 209, column: 3, scope: !8537)
!8560 = !DILocation(line: 209, column: 9, scope: !8537)
!8561 = !DILocation(line: 209, column: 14, scope: !8537)
!8562 = !DILocation(line: 210, column: 1, scope: !8537)
!8563 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !6367, file: !6367, line: 729, type: !8564, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8564 = !DISubroutineType(types: !8565)
!8565 = !{null, !8327}
!8566 = !DILocalVariable(name: "ptr", arg: 1, scope: !8563, file: !6367, line: 729, type: !8327)
!8567 = !DILocation(line: 729, column: 39, scope: !8563)
!8568 = !DILocation(line: 731, column: 3, scope: !8563)
!8569 = !DILocation(line: 731, column: 8, scope: !8563)
!8570 = !DILocation(line: 731, column: 13, scope: !8563)
!8571 = !DILocation(line: 732, column: 3, scope: !8563)
!8572 = !DILocation(line: 732, column: 8, scope: !8563)
!8573 = !DILocation(line: 732, column: 13, scope: !8563)
!8574 = !DILocation(line: 733, column: 3, scope: !8563)
!8575 = !DILocation(line: 733, column: 8, scope: !8563)
!8576 = !DILocation(line: 733, column: 18, scope: !8563)
!8577 = !DILocation(line: 734, column: 3, scope: !8563)
!8578 = !DILocation(line: 734, column: 8, scope: !8563)
!8579 = !DILocation(line: 734, column: 14, scope: !8563)
!8580 = !DILocation(line: 735, column: 3, scope: !8563)
!8581 = !DILocation(line: 735, column: 8, scope: !8563)
!8582 = !DILocation(line: 735, column: 16, scope: !8563)
!8583 = !DILocation(line: 736, column: 3, scope: !8563)
!8584 = !DILocation(line: 736, column: 8, scope: !8563)
!8585 = !DILocation(line: 736, column: 17, scope: !8563)
!8586 = !DILocation(line: 737, column: 3, scope: !8563)
!8587 = !DILocation(line: 737, column: 8, scope: !8563)
!8588 = !DILocation(line: 737, column: 13, scope: !8563)
!8589 = !DILocation(line: 738, column: 1, scope: !8563)
!8590 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !11, file: !11, line: 3061, type: !7704, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8591 = !DILocalVariable(name: "gs", arg: 1, scope: !8590, file: !11, line: 3061, type: !4104)
!8592 = !DILocation(line: 3061, column: 35, scope: !8590)
!8593 = !DILocation(line: 3064, column: 10, scope: !8590)
!8594 = !DILocation(line: 3064, column: 14, scope: !8590)
!8595 = !DILocation(line: 3064, column: 25, scope: !8590)
!8596 = !DILocation(line: 3064, column: 3, scope: !8590)
!8597 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !6367, file: !6367, line: 442, type: !8598, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8598 = !DISubroutineType(types: !8599)
!8599 = !{!3778, !7, !100}
!8600 = !DILocalVariable(name: "gs", arg: 1, scope: !8597, file: !6367, line: 442, type: !7)
!8601 = !DILocation(line: 442, column: 36, scope: !8597)
!8602 = !DILocalVariable(name: "i", arg: 2, scope: !8597, file: !6367, line: 442, type: !100)
!8603 = !DILocation(line: 442, column: 44, scope: !8597)
!8604 = !DILocation(line: 444, column: 27, scope: !8597)
!8605 = !DILocation(line: 444, column: 31, scope: !8597)
!8606 = !DILocation(line: 444, column: 11, scope: !8597)
!8607 = !DILocation(line: 444, column: 35, scope: !8597)
!8608 = !DILocation(line: 444, column: 3, scope: !8597)
!8609 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !11, file: !11, line: 3100, type: !8610, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8610 = !DISubroutineType(types: !8611)
!8611 = !{!8612, !7, !17}
!8612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!8613 = !DILocalVariable(name: "gs", arg: 1, scope: !8609, file: !11, line: 3100, type: !7)
!8614 = !DILocation(line: 3100, column: 24, scope: !8609)
!8615 = !DILocalVariable(name: "index", arg: 2, scope: !8609, file: !11, line: 3100, type: !17)
!8616 = !DILocation(line: 3100, column: 37, scope: !8609)
!8617 = !DILocation(line: 3103, column: 3, scope: !8609)
!8618 = !DILocation(line: 3104, column: 12, scope: !8609)
!8619 = !DILocation(line: 3104, column: 16, scope: !8609)
!8620 = !DILocation(line: 3104, column: 27, scope: !8609)
!8621 = !DILocation(line: 3104, column: 32, scope: !8609)
!8622 = !DILocation(line: 3104, column: 3, scope: !8609)
!8623 = distinct !DISubprogram(name: "op_iter_init", scope: !6367, file: !6367, line: 742, type: !8624, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8624 = !DISubroutineType(types: !8625)
!8625 = !{null, !8327, !7, !100}
!8626 = !DILocalVariable(name: "ptr", arg: 1, scope: !8623, file: !6367, line: 742, type: !8327)
!8627 = !DILocation(line: 742, column: 28, scope: !8623)
!8628 = !DILocalVariable(name: "stmt", arg: 2, scope: !8623, file: !6367, line: 742, type: !7)
!8629 = !DILocation(line: 742, column: 40, scope: !8623)
!8630 = !DILocalVariable(name: "flags", arg: 3, scope: !8623, file: !6367, line: 742, type: !100)
!8631 = !DILocation(line: 742, column: 50, scope: !8623)
!8632 = !DILocation(line: 746, column: 3, scope: !8623)
!8633 = !DILocation(line: 748, column: 16, scope: !8623)
!8634 = !DILocation(line: 748, column: 22, scope: !8623)
!8635 = !DILocation(line: 748, column: 15, scope: !8623)
!8636 = !DILocation(line: 748, column: 68, scope: !8623)
!8637 = !DILocation(line: 748, column: 52, scope: !8623)
!8638 = !DILocation(line: 748, column: 3, scope: !8623)
!8639 = !DILocation(line: 748, column: 8, scope: !8623)
!8640 = !DILocation(line: 748, column: 13, scope: !8623)
!8641 = !DILocation(line: 749, column: 9, scope: !8642)
!8642 = distinct !DILexicalBlock(scope: !8623, file: !6367, line: 749, column: 7)
!8643 = !DILocation(line: 749, column: 15, scope: !8642)
!8644 = !DILocation(line: 750, column: 7, scope: !8642)
!8645 = !DILocation(line: 750, column: 10, scope: !8642)
!8646 = !DILocation(line: 750, column: 15, scope: !8642)
!8647 = !DILocation(line: 751, column: 7, scope: !8642)
!8648 = !DILocation(line: 751, column: 23, scope: !8642)
!8649 = !DILocation(line: 751, column: 10, scope: !8642)
!8650 = !DILocation(line: 751, column: 29, scope: !8642)
!8651 = !DILocation(line: 749, column: 7, scope: !8623)
!8652 = !DILocation(line: 752, column: 17, scope: !8642)
!8653 = !DILocation(line: 752, column: 22, scope: !8642)
!8654 = !DILocation(line: 752, column: 28, scope: !8642)
!8655 = !DILocation(line: 752, column: 5, scope: !8642)
!8656 = !DILocation(line: 752, column: 10, scope: !8642)
!8657 = !DILocation(line: 752, column: 15, scope: !8642)
!8658 = !DILocation(line: 753, column: 16, scope: !8623)
!8659 = !DILocation(line: 753, column: 22, scope: !8623)
!8660 = !DILocation(line: 753, column: 15, scope: !8623)
!8661 = !DILocation(line: 753, column: 68, scope: !8623)
!8662 = !DILocation(line: 753, column: 52, scope: !8623)
!8663 = !DILocation(line: 753, column: 3, scope: !8623)
!8664 = !DILocation(line: 753, column: 8, scope: !8623)
!8665 = !DILocation(line: 753, column: 13, scope: !8623)
!8666 = !DILocation(line: 754, column: 9, scope: !8667)
!8667 = distinct !DILexicalBlock(scope: !8623, file: !6367, line: 754, column: 7)
!8668 = !DILocation(line: 754, column: 15, scope: !8667)
!8669 = !DILocation(line: 755, column: 7, scope: !8667)
!8670 = !DILocation(line: 755, column: 10, scope: !8667)
!8671 = !DILocation(line: 755, column: 15, scope: !8667)
!8672 = !DILocation(line: 756, column: 7, scope: !8667)
!8673 = !DILocation(line: 756, column: 23, scope: !8667)
!8674 = !DILocation(line: 756, column: 10, scope: !8667)
!8675 = !DILocation(line: 756, column: 29, scope: !8667)
!8676 = !DILocation(line: 754, column: 7, scope: !8623)
!8677 = !DILocation(line: 757, column: 17, scope: !8667)
!8678 = !DILocation(line: 757, column: 22, scope: !8667)
!8679 = !DILocation(line: 757, column: 28, scope: !8667)
!8680 = !DILocation(line: 757, column: 5, scope: !8667)
!8681 = !DILocation(line: 757, column: 10, scope: !8667)
!8682 = !DILocation(line: 757, column: 15, scope: !8667)
!8683 = !DILocation(line: 758, column: 3, scope: !8623)
!8684 = !DILocation(line: 758, column: 8, scope: !8623)
!8685 = !DILocation(line: 758, column: 13, scope: !8623)
!8686 = !DILocation(line: 760, column: 3, scope: !8623)
!8687 = !DILocation(line: 760, column: 8, scope: !8623)
!8688 = !DILocation(line: 760, column: 14, scope: !8623)
!8689 = !DILocation(line: 761, column: 3, scope: !8623)
!8690 = !DILocation(line: 761, column: 8, scope: !8623)
!8691 = !DILocation(line: 761, column: 16, scope: !8623)
!8692 = !DILocation(line: 762, column: 3, scope: !8623)
!8693 = !DILocation(line: 762, column: 8, scope: !8623)
!8694 = !DILocation(line: 762, column: 17, scope: !8623)
!8695 = !DILocation(line: 763, column: 1, scope: !8623)
!8696 = distinct !DISubprogram(name: "gimple_def_ops", scope: !11, file: !11, line: 1292, type: !8697, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8697 = !DISubroutineType(types: !8698)
!8698 = !{!744, !4104}
!8699 = !DILocalVariable(name: "g", arg: 1, scope: !8696, file: !11, line: 1292, type: !4104)
!8700 = !DILocation(line: 1292, column: 30, scope: !8696)
!8701 = !DILocation(line: 1294, column: 24, scope: !8702)
!8702 = distinct !DILexicalBlock(scope: !8696, file: !11, line: 1294, column: 7)
!8703 = !DILocation(line: 1294, column: 8, scope: !8702)
!8704 = !DILocation(line: 1294, column: 7, scope: !8696)
!8705 = !DILocation(line: 1295, column: 5, scope: !8702)
!8706 = !DILocation(line: 1296, column: 10, scope: !8696)
!8707 = !DILocation(line: 1296, column: 13, scope: !8696)
!8708 = !DILocation(line: 1296, column: 19, scope: !8696)
!8709 = !DILocation(line: 1296, column: 26, scope: !8696)
!8710 = !DILocation(line: 1296, column: 3, scope: !8696)
!8711 = !DILocation(line: 1297, column: 1, scope: !8696)
!8712 = distinct !DISubprogram(name: "gimple_vdef", scope: !11, file: !11, line: 1375, type: !7318, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8713 = !DILocalVariable(name: "g", arg: 1, scope: !8712, file: !11, line: 1375, type: !4104)
!8714 = !DILocation(line: 1375, column: 27, scope: !8712)
!8715 = !DILocation(line: 1377, column: 28, scope: !8716)
!8716 = distinct !DILexicalBlock(scope: !8712, file: !11, line: 1377, column: 7)
!8717 = !DILocation(line: 1377, column: 8, scope: !8716)
!8718 = !DILocation(line: 1377, column: 7, scope: !8712)
!8719 = !DILocation(line: 1378, column: 5, scope: !8716)
!8720 = !DILocation(line: 1379, column: 10, scope: !8712)
!8721 = !DILocation(line: 1379, column: 13, scope: !8712)
!8722 = !DILocation(line: 1379, column: 23, scope: !8712)
!8723 = !DILocation(line: 1379, column: 3, scope: !8712)
!8724 = !DILocation(line: 1380, column: 1, scope: !8712)
!8725 = distinct !DISubprogram(name: "gimple_use_ops", scope: !11, file: !11, line: 1313, type: !8726, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8726 = !DISubroutineType(types: !8727)
!8727 = !{!751, !4104}
!8728 = !DILocalVariable(name: "g", arg: 1, scope: !8725, file: !11, line: 1313, type: !4104)
!8729 = !DILocation(line: 1313, column: 30, scope: !8725)
!8730 = !DILocation(line: 1315, column: 24, scope: !8731)
!8731 = distinct !DILexicalBlock(scope: !8725, file: !11, line: 1315, column: 7)
!8732 = !DILocation(line: 1315, column: 8, scope: !8731)
!8733 = !DILocation(line: 1315, column: 7, scope: !8725)
!8734 = !DILocation(line: 1316, column: 5, scope: !8731)
!8735 = !DILocation(line: 1317, column: 10, scope: !8725)
!8736 = !DILocation(line: 1317, column: 13, scope: !8725)
!8737 = !DILocation(line: 1317, column: 19, scope: !8725)
!8738 = !DILocation(line: 1317, column: 26, scope: !8725)
!8739 = !DILocation(line: 1317, column: 3, scope: !8725)
!8740 = !DILocation(line: 1318, column: 1, scope: !8725)
!8741 = distinct !DISubprogram(name: "gimple_vuse", scope: !11, file: !11, line: 1365, type: !7318, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8742 = !DILocalVariable(name: "g", arg: 1, scope: !8741, file: !11, line: 1365, type: !4104)
!8743 = !DILocation(line: 1365, column: 27, scope: !8741)
!8744 = !DILocation(line: 1367, column: 28, scope: !8745)
!8745 = distinct !DILexicalBlock(scope: !8741, file: !11, line: 1367, column: 7)
!8746 = !DILocation(line: 1367, column: 8, scope: !8745)
!8747 = !DILocation(line: 1367, column: 7, scope: !8741)
!8748 = !DILocation(line: 1368, column: 5, scope: !8745)
!8749 = !DILocation(line: 1369, column: 10, scope: !8741)
!8750 = !DILocation(line: 1369, column: 13, scope: !8741)
!8751 = !DILocation(line: 1369, column: 23, scope: !8741)
!8752 = !DILocation(line: 1369, column: 3, scope: !8741)
!8753 = !DILocation(line: 1370, column: 1, scope: !8741)
!8754 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !11, file: !11, line: 1283, type: !4892, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8755 = !DILocalVariable(name: "g", arg: 1, scope: !8754, file: !11, line: 1283, type: !4104)
!8756 = !DILocation(line: 1283, column: 34, scope: !8754)
!8757 = !DILocation(line: 1285, column: 23, scope: !8754)
!8758 = !DILocation(line: 1285, column: 10, scope: !8754)
!8759 = !DILocation(line: 1285, column: 26, scope: !8754)
!8760 = !DILocation(line: 1285, column: 43, scope: !8754)
!8761 = !DILocation(line: 1285, column: 59, scope: !8754)
!8762 = !DILocation(line: 1285, column: 46, scope: !8754)
!8763 = !DILocation(line: 1285, column: 62, scope: !8754)
!8764 = !DILocation(line: 0, scope: !8754)
!8765 = !DILocation(line: 1285, column: 3, scope: !8754)
!8766 = distinct !DISubprogram(name: "gimple_set_uid", scope: !11, file: !11, line: 1256, type: !8767, scopeLine: 1257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8767 = !DISubroutineType(types: !8768)
!8768 = !{null, !7, !17}
!8769 = !DILocalVariable(name: "g", arg: 1, scope: !8766, file: !11, line: 1256, type: !7)
!8770 = !DILocation(line: 1256, column: 24, scope: !8766)
!8771 = !DILocalVariable(name: "uid", arg: 2, scope: !8766, file: !11, line: 1256, type: !17)
!8772 = !DILocation(line: 1256, column: 36, scope: !8766)
!8773 = !DILocation(line: 1258, column: 19, scope: !8766)
!8774 = !DILocation(line: 1258, column: 3, scope: !8766)
!8775 = !DILocation(line: 1258, column: 6, scope: !8766)
!8776 = !DILocation(line: 1258, column: 13, scope: !8766)
!8777 = !DILocation(line: 1258, column: 17, scope: !8766)
!8778 = !DILocation(line: 1259, column: 1, scope: !8766)
!8779 = distinct !DISubprogram(name: "set_vinfo_for_stmt", scope: !1757, file: !1757, line: 634, type: !8780, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8780 = !DISubroutineType(types: !8781)
!8781 = !{null, !7, !3934}
!8782 = !DILocalVariable(name: "stmt", arg: 1, scope: !8779, file: !1757, line: 634, type: !7)
!8783 = !DILocation(line: 634, column: 28, scope: !8779)
!8784 = !DILocalVariable(name: "info", arg: 2, scope: !8779, file: !1757, line: 634, type: !3934)
!8785 = !DILocation(line: 634, column: 48, scope: !8779)
!8786 = !DILocalVariable(name: "uid", scope: !8779, file: !1757, line: 636, type: !17)
!8787 = !DILocation(line: 636, column: 16, scope: !8779)
!8788 = !DILocation(line: 636, column: 34, scope: !8779)
!8789 = !DILocation(line: 636, column: 22, scope: !8779)
!8790 = !DILocation(line: 637, column: 7, scope: !8791)
!8791 = distinct !DILexicalBlock(scope: !8779, file: !1757, line: 637, column: 7)
!8792 = !DILocation(line: 637, column: 11, scope: !8791)
!8793 = !DILocation(line: 637, column: 7, scope: !8779)
!8794 = !DILocation(line: 639, column: 7, scope: !8795)
!8795 = distinct !DILexicalBlock(scope: !8791, file: !1757, line: 638, column: 5)
!8796 = !DILocation(line: 640, column: 13, scope: !8795)
!8797 = !DILocation(line: 640, column: 56, scope: !8795)
!8798 = !DILocation(line: 640, column: 11, scope: !8795)
!8799 = !DILocation(line: 641, column: 23, scope: !8795)
!8800 = !DILocation(line: 641, column: 29, scope: !8795)
!8801 = !DILocation(line: 641, column: 7, scope: !8795)
!8802 = !DILocation(line: 642, column: 7, scope: !8795)
!8803 = !DILocation(line: 643, column: 5, scope: !8795)
!8804 = !DILocation(line: 645, column: 5, scope: !8791)
!8805 = !DILocation(line: 646, column: 1, scope: !8779)
!8806 = distinct !DISubprogram(name: "VEC_slp_instance_heap_alloc", scope: !1757, file: !1757, line: 153, type: !8807, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8807 = !DISubroutineType(types: !8808)
!8808 = !{!3765, !100}
!8809 = !DILocalVariable(name: "alloc_", arg: 1, scope: !8806, file: !1757, line: 153, type: !100)
!8810 = !DILocation(line: 153, column: 1, scope: !8806)
!8811 = distinct !DISubprogram(name: "VEC_vec_void_p_heap_safe_push", scope: !1757, file: !1757, line: 615, type: !8812, scopeLine: 615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8812 = !DISubroutineType(types: !8813)
!8813 = !{!8814, !8815, !3921}
!8814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3921, size: 64)
!8815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3922, size: 64)
!8816 = !DILocalVariable(name: "vec_", arg: 1, scope: !8811, file: !1757, line: 615, type: !8815)
!8817 = !DILocation(line: 615, column: 1, scope: !8811)
!8818 = !DILocalVariable(name: "obj_", arg: 2, scope: !8811, file: !1757, line: 615, type: !3921)
!8819 = distinct !DISubprogram(name: "VEC_vec_void_p_base_replace", scope: !1757, file: !1757, line: 614, type: !8820, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8820 = !DISubroutineType(types: !8821)
!8821 = !{!3921, !8822, !17, !3921}
!8822 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3927, size: 64)
!8823 = !DILocalVariable(name: "vec_", arg: 1, scope: !8819, file: !1757, line: 614, type: !8822)
!8824 = !DILocation(line: 614, column: 1, scope: !8819)
!8825 = !DILocalVariable(name: "ix_", arg: 2, scope: !8819, file: !1757, line: 614, type: !17)
!8826 = !DILocalVariable(name: "obj_", arg: 3, scope: !8819, file: !1757, line: 614, type: !3921)
!8827 = !DILocalVariable(name: "old_obj_", scope: !8819, file: !1757, line: 614, type: !3921)
!8828 = distinct !DISubprogram(name: "VEC_vec_void_p_heap_reserve", scope: !1757, file: !1757, line: 615, type: !8829, scopeLine: 615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8829 = !DISubroutineType(types: !8830)
!8830 = !{!100, !8815, !100}
!8831 = !DILocalVariable(name: "vec_", arg: 1, scope: !8828, file: !1757, line: 615, type: !8815)
!8832 = !DILocation(line: 615, column: 1, scope: !8828)
!8833 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8828, file: !1757, line: 615, type: !100)
!8834 = !DILocalVariable(name: "extend", scope: !8828, file: !1757, line: 615, type: !100)
!8835 = !DILocation(line: 615, column: 1, scope: !8836)
!8836 = distinct !DILexicalBlock(scope: !8828, file: !1757, line: 615, column: 1)
!8837 = distinct !DISubprogram(name: "VEC_vec_void_p_base_quick_push", scope: !1757, file: !1757, line: 614, type: !8838, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8838 = !DISubroutineType(types: !8839)
!8839 = !{!8814, !8822, !3921}
!8840 = !DILocalVariable(name: "vec_", arg: 1, scope: !8837, file: !1757, line: 614, type: !8822)
!8841 = !DILocation(line: 614, column: 1, scope: !8837)
!8842 = !DILocalVariable(name: "obj_", arg: 2, scope: !8837, file: !1757, line: 614, type: !3921)
!8843 = !DILocalVariable(name: "slot_", scope: !8837, file: !1757, line: 614, type: !8814)
!8844 = distinct !DISubprogram(name: "VEC_vec_void_p_base_space", scope: !1757, file: !1757, line: 614, type: !8845, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8845 = !DISubroutineType(types: !8846)
!8846 = !{!100, !8822, !100}
!8847 = !DILocalVariable(name: "vec_", arg: 1, scope: !8844, file: !1757, line: 614, type: !8822)
!8848 = !DILocation(line: 614, column: 1, scope: !8844)
!8849 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8844, file: !1757, line: 614, type: !100)
!8850 = distinct !DISubprogram(name: "VEC_slp_instance_heap_free", scope: !1757, file: !1757, line: 153, type: !8851, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8851 = !DISubroutineType(types: !8852)
!8852 = !{null, !7245}
!8853 = !DILocalVariable(name: "vec_", arg: 1, scope: !8850, file: !1757, line: 153, type: !7245)
!8854 = !DILocation(line: 153, column: 1, scope: !8850)
!8855 = !DILocation(line: 153, column: 1, scope: !8856)
!8856 = distinct !DILexicalBlock(scope: !8850, file: !1757, line: 153, column: 1)
!8857 = distinct !DISubprogram(name: "vect_slp_analyze_node_operations", scope: !3, file: !3, line: 1206, type: !8858, scopeLine: 1207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8858 = !DISubroutineType(types: !8859)
!8859 = !{!6, !3781, !3726}
!8860 = !DILocalVariable(name: "bb_vinfo", arg: 1, scope: !8857, file: !3, line: 1206, type: !3781)
!8861 = !DILocation(line: 1206, column: 47, scope: !8857)
!8862 = !DILocalVariable(name: "node", arg: 2, scope: !8857, file: !3, line: 1206, type: !3726)
!8863 = !DILocation(line: 1206, column: 66, scope: !8857)
!8864 = !DILocalVariable(name: "dummy", scope: !8857, file: !3, line: 1208, type: !6)
!8865 = !DILocation(line: 1208, column: 8, scope: !8857)
!8866 = !DILocalVariable(name: "i", scope: !8857, file: !3, line: 1209, type: !100)
!8867 = !DILocation(line: 1209, column: 7, scope: !8857)
!8868 = !DILocalVariable(name: "stmt", scope: !8857, file: !3, line: 1210, type: !7)
!8869 = !DILocation(line: 1210, column: 10, scope: !8857)
!8870 = !DILocation(line: 1212, column: 8, scope: !8871)
!8871 = distinct !DILexicalBlock(scope: !8857, file: !3, line: 1212, column: 7)
!8872 = !DILocation(line: 1212, column: 7, scope: !8857)
!8873 = !DILocation(line: 1213, column: 5, scope: !8871)
!8874 = !DILocation(line: 1215, column: 42, scope: !8875)
!8875 = distinct !DILexicalBlock(scope: !8857, file: !3, line: 1215, column: 7)
!8876 = !DILocation(line: 1215, column: 52, scope: !8875)
!8877 = !DILocation(line: 1215, column: 8, scope: !8875)
!8878 = !DILocation(line: 1216, column: 7, scope: !8875)
!8879 = !DILocation(line: 1216, column: 45, scope: !8875)
!8880 = !DILocation(line: 1216, column: 55, scope: !8875)
!8881 = !DILocation(line: 1216, column: 11, scope: !8875)
!8882 = !DILocation(line: 1215, column: 7, scope: !8857)
!8883 = !DILocation(line: 1217, column: 5, scope: !8875)
!8884 = !DILocation(line: 1219, column: 10, scope: !8885)
!8885 = distinct !DILexicalBlock(scope: !8857, file: !3, line: 1219, column: 3)
!8886 = !DILocation(line: 1219, column: 8, scope: !8885)
!8887 = !DILocation(line: 1219, column: 15, scope: !8888)
!8888 = distinct !DILexicalBlock(scope: !8885, file: !3, line: 1219, column: 3)
!8889 = !DILocation(line: 1219, column: 3, scope: !8885)
!8890 = !DILocalVariable(name: "stmt_info", scope: !8891, file: !3, line: 1221, type: !3934)
!8891 = distinct !DILexicalBlock(scope: !8888, file: !3, line: 1220, column: 5)
!8892 = !DILocation(line: 1221, column: 21, scope: !8891)
!8893 = !DILocation(line: 1221, column: 49, scope: !8891)
!8894 = !DILocation(line: 1221, column: 33, scope: !8891)
!8895 = !DILocation(line: 1222, column: 7, scope: !8891)
!8896 = !DILocation(line: 1223, column: 7, scope: !8891)
!8897 = !DILocation(line: 1225, column: 31, scope: !8898)
!8898 = distinct !DILexicalBlock(scope: !8891, file: !3, line: 1225, column: 11)
!8899 = !DILocation(line: 1225, column: 45, scope: !8898)
!8900 = !DILocation(line: 1225, column: 12, scope: !8898)
!8901 = !DILocation(line: 1225, column: 11, scope: !8891)
!8902 = !DILocation(line: 1226, column: 9, scope: !8898)
!8903 = !DILocation(line: 1227, column: 5, scope: !8891)
!8904 = !DILocation(line: 1219, column: 77, scope: !8888)
!8905 = !DILocation(line: 1219, column: 3, scope: !8888)
!8906 = distinct !{!8906, !8889, !8907}
!8907 = !DILocation(line: 1227, column: 5, scope: !8885)
!8908 = !DILocation(line: 1229, column: 3, scope: !8857)
!8909 = !DILocation(line: 1230, column: 1, scope: !8857)
!8910 = distinct !DISubprogram(name: "VEC_slp_instance_base_ordered_remove", scope: !1757, file: !1757, line: 152, type: !8911, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8911 = !DISubroutineType(types: !8912)
!8912 = !{!3777, !8089, !17}
!8913 = !DILocalVariable(name: "vec_", arg: 1, scope: !8910, file: !1757, line: 152, type: !8089)
!8914 = !DILocation(line: 152, column: 1, scope: !8910)
!8915 = !DILocalVariable(name: "ix_", arg: 2, scope: !8910, file: !1757, line: 152, type: !17)
!8916 = !DILocalVariable(name: "slot_", scope: !8910, file: !1757, line: 152, type: !4534)
!8917 = !DILocalVariable(name: "obj_", scope: !8910, file: !1757, line: 152, type: !3777)
!8918 = distinct !DISubprogram(name: "VEC_slp_instance_base_length", scope: !1757, file: !1757, line: 152, type: !8919, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8919 = !DISubroutineType(types: !8920)
!8920 = !{!17, !4532}
!8921 = !DILocalVariable(name: "vec_", arg: 1, scope: !8918, file: !1757, line: 152, type: !4532)
!8922 = !DILocation(line: 152, column: 1, scope: !8918)
!8923 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !329, file: !329, line: 182, type: !8924, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8924 = !DISubroutineType(types: !8925)
!8925 = !{!749, !8926, !326}
!8926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !701, size: 64)
!8927 = !DILocalVariable(name: "vec_", arg: 1, scope: !8923, file: !329, line: 182, type: !8926)
!8928 = !DILocation(line: 182, column: 1, scope: !8923)
!8929 = !DILocalVariable(name: "obj_", arg: 2, scope: !8923, file: !329, line: 182, type: !326)
!8930 = !DILocalVariable(name: "slot_", scope: !8923, file: !329, line: 182, type: !749)
!8931 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !11, file: !11, line: 33, type: !8932, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8932 = !DISubroutineType(types: !8933)
!8933 = !{!17, !4241}
!8934 = !DILocalVariable(name: "vec_", arg: 1, scope: !8931, file: !11, line: 33, type: !4241)
!8935 = !DILocation(line: 33, column: 1, scope: !8931)
!8936 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !11, file: !11, line: 1727, type: !7318, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8937 = !DILocalVariable(name: "gs", arg: 1, scope: !8936, file: !11, line: 1727, type: !4104)
!8938 = !DILocation(line: 1727, column: 34, scope: !8936)
!8939 = !DILocation(line: 1730, column: 21, scope: !8936)
!8940 = !DILocation(line: 1730, column: 10, scope: !8936)
!8941 = !DILocation(line: 1730, column: 3, scope: !8936)
!8942 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !329, file: !329, line: 182, type: !8943, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8943 = !DISubroutineType(types: !8944)
!8944 = !{!17, !8945}
!8945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8946, size: 64)
!8946 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !701)
!8947 = !DILocalVariable(name: "vec_", arg: 1, scope: !8942, file: !329, line: 182, type: !8945)
!8948 = !DILocation(line: 182, column: 1, scope: !8942)
!8949 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !329, file: !329, line: 182, type: !8950, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8950 = !DISubroutineType(types: !8951)
!8951 = !{!326, !8945, !17}
!8952 = !DILocalVariable(name: "vec_", arg: 1, scope: !8949, file: !329, line: 182, type: !8945)
!8953 = !DILocation(line: 182, column: 1, scope: !8949)
!8954 = !DILocalVariable(name: "ix_", arg: 2, scope: !8949, file: !329, line: 182, type: !17)
!8955 = !DILocation(line: 0, scope: !8949)
!8956 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !329, file: !329, line: 184, type: !8957, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8957 = !DISubroutineType(types: !8958)
!8958 = !{null, !5133}
!8959 = !DILocalVariable(name: "vec_", arg: 1, scope: !8956, file: !329, line: 184, type: !5133)
!8960 = !DILocation(line: 184, column: 1, scope: !8956)
!8961 = !DILocation(line: 184, column: 1, scope: !8962)
!8962 = distinct !DILexicalBlock(scope: !8956, file: !329, line: 184, column: 1)
!8963 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !329, file: !329, line: 182, type: !8964, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8964 = !DISubroutineType(types: !8965)
!8965 = !{!100, !8945, !17, !749}
!8966 = !DILocalVariable(name: "vec_", arg: 1, scope: !8963, file: !329, line: 182, type: !8945)
!8967 = !DILocation(line: 182, column: 1, scope: !8963)
!8968 = !DILocalVariable(name: "ix_", arg: 2, scope: !8963, file: !329, line: 182, type: !17)
!8969 = !DILocalVariable(name: "ptr", arg: 3, scope: !8963, file: !329, line: 182, type: !749)
!8970 = !DILocation(line: 182, column: 1, scope: !8971)
!8971 = distinct !DILexicalBlock(scope: !8963, file: !329, line: 182, column: 1)
!8972 = !DILocation(line: 182, column: 1, scope: !8973)
!8973 = distinct !DILexicalBlock(scope: !8971, file: !329, line: 182, column: 1)
!8974 = !DILocation(line: 182, column: 1, scope: !8975)
!8975 = distinct !DILexicalBlock(scope: !8971, file: !329, line: 182, column: 1)
!8976 = distinct !DISubprogram(name: "VEC_vec_void_p_base_index", scope: !1757, file: !1757, line: 614, type: !8977, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8977 = !DISubroutineType(types: !8978)
!8978 = !{!3921, !8073, !17}
!8979 = !DILocalVariable(name: "vec_", arg: 1, scope: !8976, file: !1757, line: 614, type: !8073)
!8980 = !DILocation(line: 614, column: 1, scope: !8976)
!8981 = !DILocalVariable(name: "ix_", arg: 2, scope: !8976, file: !1757, line: 614, type: !17)
!8982 = !DILocation(line: 0, scope: !8976)
!8983 = distinct !DISubprogram(name: "gimple_expr_code", scope: !11, file: !11, line: 1438, type: !5487, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!8984 = !DILocalVariable(name: "stmt", arg: 1, scope: !8983, file: !11, line: 1438, type: !4104)
!8985 = !DILocation(line: 1438, column: 32, scope: !8983)
!8986 = !DILocalVariable(name: "code", scope: !8983, file: !11, line: 1440, type: !1775)
!8987 = !DILocation(line: 1440, column: 20, scope: !8983)
!8988 = !DILocation(line: 1440, column: 40, scope: !8983)
!8989 = !DILocation(line: 1440, column: 27, scope: !8983)
!8990 = !DILocation(line: 1441, column: 7, scope: !8991)
!8991 = distinct !DILexicalBlock(scope: !8983, file: !11, line: 1441, column: 7)
!8992 = !DILocation(line: 1441, column: 12, scope: !8991)
!8993 = !DILocation(line: 1441, column: 29, scope: !8991)
!8994 = !DILocation(line: 1441, column: 32, scope: !8991)
!8995 = !DILocation(line: 1441, column: 37, scope: !8991)
!8996 = !DILocation(line: 1441, column: 7, scope: !8983)
!8997 = !DILocation(line: 1442, column: 29, scope: !8991)
!8998 = !DILocation(line: 1442, column: 35, scope: !8991)
!8999 = !DILocation(line: 1442, column: 42, scope: !8991)
!9000 = !DILocation(line: 1442, column: 5, scope: !8991)
!9001 = !DILocation(line: 1443, column: 12, scope: !9002)
!9002 = distinct !DILexicalBlock(scope: !8991, file: !11, line: 1443, column: 12)
!9003 = !DILocation(line: 1443, column: 17, scope: !9002)
!9004 = !DILocation(line: 1443, column: 12, scope: !8991)
!9005 = !DILocation(line: 1444, column: 5, scope: !9002)
!9006 = !DILocation(line: 1446, column: 5, scope: !9002)
!9007 = !DILocation(line: 1448, column: 5, scope: !8983)
!9008 = !DILocation(line: 1450, column: 1, scope: !8983)
!9009 = distinct !DISubprogram(name: "make_ssa_name", scope: !6367, file: !6367, line: 1245, type: !9010, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!9010 = !DISubroutineType(types: !9011)
!9011 = !{!326, !326, !7}
!9012 = !DILocalVariable(name: "var", arg: 1, scope: !9009, file: !6367, line: 1245, type: !326)
!9013 = !DILocation(line: 1245, column: 21, scope: !9009)
!9014 = !DILocalVariable(name: "stmt", arg: 2, scope: !9009, file: !6367, line: 1245, type: !7)
!9015 = !DILocation(line: 1245, column: 33, scope: !9009)
!9016 = !DILocation(line: 1247, column: 28, scope: !9009)
!9017 = !DILocation(line: 1247, column: 34, scope: !9009)
!9018 = !DILocation(line: 1247, column: 39, scope: !9009)
!9019 = !DILocation(line: 1247, column: 10, scope: !9009)
!9020 = !DILocation(line: 1247, column: 3, scope: !9009)
!9021 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !11, file: !11, line: 1898, type: !9022, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!9022 = !DISubroutineType(types: !9023)
!9023 = !{null, !7, !326}
!9024 = !DILocalVariable(name: "gs", arg: 1, scope: !9021, file: !11, line: 1898, type: !7)
!9025 = !DILocation(line: 1898, column: 29, scope: !9021)
!9026 = !DILocalVariable(name: "lhs", arg: 2, scope: !9021, file: !11, line: 1898, type: !326)
!9027 = !DILocation(line: 1898, column: 38, scope: !9021)
!9028 = !DILocation(line: 1901, column: 18, scope: !9021)
!9029 = !DILocation(line: 1901, column: 25, scope: !9021)
!9030 = !DILocation(line: 1901, column: 3, scope: !9021)
!9031 = !DILocation(line: 1902, column: 7, scope: !9032)
!9032 = distinct !DILexicalBlock(scope: !9021, file: !11, line: 1902, column: 7)
!9033 = !DILocation(line: 1902, column: 11, scope: !9032)
!9034 = !DILocation(line: 1902, column: 14, scope: !9032)
!9035 = !DILocation(line: 1902, column: 30, scope: !9032)
!9036 = !DILocation(line: 1902, column: 7, scope: !9021)
!9037 = !DILocation(line: 1903, column: 31, scope: !9032)
!9038 = !DILocation(line: 1903, column: 5, scope: !9032)
!9039 = !DILocation(line: 1903, column: 29, scope: !9032)
!9040 = !DILocation(line: 1904, column: 1, scope: !9021)
!9041 = distinct !DISubprogram(name: "VEC_gimple_base_replace", scope: !11, file: !11, line: 33, type: !9042, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!9042 = !DISubroutineType(types: !9043)
!9043 = !{!7, !7299, !17, !7}
!9044 = !DILocalVariable(name: "vec_", arg: 1, scope: !9041, file: !11, line: 33, type: !7299)
!9045 = !DILocation(line: 33, column: 1, scope: !9041)
!9046 = !DILocalVariable(name: "ix_", arg: 2, scope: !9041, file: !11, line: 33, type: !17)
!9047 = !DILocalVariable(name: "obj_", arg: 3, scope: !9041, file: !11, line: 33, type: !7)
!9048 = !DILocalVariable(name: "old_obj_", scope: !9041, file: !11, line: 33, type: !7)
!9049 = distinct !DISubprogram(name: "gimple_set_op", scope: !11, file: !11, line: 1663, type: !9050, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1754, retainedNodes: !4011)
!9050 = !DISubroutineType(types: !9051)
!9051 = !{null, !7, !17, !326}
!9052 = !DILocalVariable(name: "gs", arg: 1, scope: !9049, file: !11, line: 1663, type: !7)
!9053 = !DILocation(line: 1663, column: 23, scope: !9049)
!9054 = !DILocalVariable(name: "i", arg: 2, scope: !9049, file: !11, line: 1663, type: !17)
!9055 = !DILocation(line: 1663, column: 36, scope: !9049)
!9056 = !DILocalVariable(name: "op", arg: 3, scope: !9049, file: !11, line: 1663, type: !326)
!9057 = !DILocation(line: 1663, column: 44, scope: !9049)
!9058 = !DILocation(line: 1665, column: 3, scope: !9049)
!9059 = !DILocation(line: 1671, column: 24, scope: !9049)
!9060 = !DILocation(line: 1671, column: 15, scope: !9049)
!9061 = !DILocation(line: 1671, column: 3, scope: !9049)
!9062 = !DILocation(line: 1671, column: 19, scope: !9049)
!9063 = !DILocation(line: 1671, column: 22, scope: !9049)
!9064 = !DILocation(line: 1672, column: 1, scope: !9049)
